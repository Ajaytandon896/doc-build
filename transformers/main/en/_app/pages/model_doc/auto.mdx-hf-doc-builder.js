import{S as Jua,i as Yua,s as Kua,e as a,k as l,w as F,t as o,M as Zua,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as epa,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as MFt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function opa($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,N9,Cf,Ve,He,sd,es,q9,os,rs,j9,ld,ts,D9,id,wf,Qa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),td=a("code"),Ef=o("model_type"),pt=o(" attribute is set to the same key you use when registering the config (here "),ad=a("code"),nd=o('"new-model"'),N9=o(")."),Cf=l(),Ve=a("p"),He=o("Likewise, if your "),sd=a("code"),es=o("NewModel"),q9=o(" is a subclass of "),os=a("a"),rs=o("PreTrainedModel"),j9=o(`, make sure its
`),ld=a("code"),ts=o("config_class"),D9=o(` attribute is set to the same class you use when registering the model (here
`),id=a("code"),wf=o("NewModelConfig"),Qa=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var GB=s(u);f=r(GB,"NewModelConfig"),GB.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var dd=s(d);h=r(dd,"PretrainedConfig"),dd.forEach(t),yo=r(Ae,`, make sure its
`),td=n(Ae,"CODE",{});var OB=s(td);Ef=r(OB,"model_type"),OB.forEach(t),pt=r(Ae," attribute is set to the same key you use when registering the config (here "),ad=n(Ae,"CODE",{});var VB=s(ad);nd=r(VB,'"new-model"'),VB.forEach(t),N9=r(Ae,")."),Ae.forEach(t),Cf=i(Je),Ve=n(Je,"P",{});var xo=s(Ve);He=r(xo,"Likewise, if your "),sd=n(xo,"CODE",{});var Wa=s(sd);es=r(Wa,"NewModel"),Wa.forEach(t),q9=r(xo," is a subclass of "),os=n(xo,"A",{href:!0});var XB=s(os);rs=r(XB,"PreTrainedModel"),XB.forEach(t),j9=r(xo,`, make sure its
`),ld=n(xo,"CODE",{});var Af=s(ld);ts=r(Af,"config_class"),Af.forEach(t),D9=r(xo,` attribute is set to the same class you use when registering the model (here
`),id=n(xo,"CODE",{});var zB=s(id);wf=r(zB,"NewModelConfig"),zB.forEach(t),Qa=r(xo,")."),xo.forEach(t),this.h()},h(){c(os,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,yo),e(g,td),e(td,Ef),e(g,pt),e(g,ad),e(ad,nd),e(g,N9),b(Je,Cf,Ae),b(Je,Ve,Ae),e(Ve,He),e(Ve,sd),e(sd,es),e(Ve,q9),e(Ve,os),e(os,rs),e(Ve,j9),e(Ve,ld),e(ld,ts),e(Ve,D9),e(Ve,id),e(id,wf),e(Ve,Qa)},d(Je){Je&&t(g),Je&&t(Cf),Je&&t(Ve)}}}function rpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function apa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function npa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function spa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function lpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ipa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function upa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ppa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _pa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Epa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Apa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ypa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $pa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Spa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ppa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ipa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Npa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Opa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Upa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ypa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function __a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iba($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,N9,Cf,Ve,He,sd,es,q9,os,rs,j9,ld,ts,D9,id,wf,Qa,Je,Ae,GB,dd,OB,VB,xo,Wa,XB,Af,zB,bto,OKe,cd,Lf,yde,G9,vto,xde,Fto,VKe,as,Tto,$de,Mto,Eto,kde,Cto,wto,XKe,O9,zKe,QB,Ato,QKe,yf,WKe,md,xf,Sde,V9,Lto,Rde,yto,UKe,$o,X9,xto,z9,$to,WB,kto,Sto,Rto,Q9,Pto,Pde,Bto,Ito,Nto,Pr,W9,qto,Bde,jto,Dto,fd,Gto,Ide,Oto,Vto,Nde,Xto,zto,Qto,A,$f,qde,Wto,Uto,UB,Hto,Jto,Yto,kf,jde,Kto,Zto,HB,eao,oao,rao,Sf,Dde,tao,aao,JB,nao,sao,lao,Rf,Gde,iao,dao,YB,cao,mao,fao,Pf,Ode,gao,hao,KB,uao,pao,_ao,Bf,Vde,bao,vao,ZB,Fao,Tao,Mao,If,Xde,Eao,Cao,eI,wao,Aao,Lao,Nf,zde,yao,xao,oI,$ao,kao,Sao,qf,Qde,Rao,Pao,rI,Bao,Iao,Nao,jf,Wde,qao,jao,tI,Dao,Gao,Oao,Df,Ude,Vao,Xao,aI,zao,Qao,Wao,Gf,Hde,Uao,Hao,nI,Jao,Yao,Kao,Of,Jde,Zao,eno,sI,ono,rno,tno,Vf,Yde,ano,nno,lI,sno,lno,ino,Xf,Kde,dno,cno,iI,mno,fno,gno,zf,Zde,hno,uno,dI,pno,_no,bno,Qf,ece,vno,Fno,cI,Tno,Mno,Eno,Wf,oce,Cno,wno,mI,Ano,Lno,yno,Uf,rce,xno,$no,fI,kno,Sno,Rno,Hf,tce,Pno,Bno,gI,Ino,Nno,qno,Jf,ace,jno,Dno,hI,Gno,Ono,Vno,Yf,nce,Xno,zno,uI,Qno,Wno,Uno,Kf,sce,Hno,Jno,pI,Yno,Kno,Zno,Zf,lce,eso,oso,_I,rso,tso,aso,eg,ice,nso,sso,bI,lso,iso,dso,og,dce,cso,mso,vI,fso,gso,hso,rg,cce,uso,pso,FI,_so,bso,vso,tg,mce,Fso,Tso,TI,Mso,Eso,Cso,ag,fce,wso,Aso,MI,Lso,yso,xso,ng,gce,$so,kso,EI,Sso,Rso,Pso,sg,hce,Bso,Iso,CI,Nso,qso,jso,lg,uce,Dso,Gso,wI,Oso,Vso,Xso,ig,pce,zso,Qso,AI,Wso,Uso,Hso,dg,_ce,Jso,Yso,LI,Kso,Zso,elo,cg,bce,olo,rlo,yI,tlo,alo,nlo,mg,vce,slo,llo,xI,ilo,dlo,clo,fg,Fce,mlo,flo,$I,glo,hlo,ulo,gg,Tce,plo,_lo,kI,blo,vlo,Flo,hg,Mce,Tlo,Mlo,SI,Elo,Clo,wlo,ug,Ece,Alo,Llo,RI,ylo,xlo,$lo,pg,Cce,klo,Slo,PI,Rlo,Plo,Blo,_g,wce,Ilo,Nlo,BI,qlo,jlo,Dlo,bg,Ace,Glo,Olo,II,Vlo,Xlo,zlo,vg,Lce,Qlo,Wlo,NI,Ulo,Hlo,Jlo,Fg,yce,Ylo,Klo,qI,Zlo,eio,oio,Tg,xce,rio,tio,jI,aio,nio,sio,Mg,$ce,lio,iio,DI,dio,cio,mio,Eg,kce,fio,gio,GI,hio,uio,pio,Cg,Sce,_io,bio,OI,vio,Fio,Tio,wg,Rce,Mio,Eio,VI,Cio,wio,Aio,Ag,Pce,Lio,yio,XI,xio,$io,kio,Lg,Bce,Sio,Rio,zI,Pio,Bio,Iio,yg,Ice,Nio,qio,QI,jio,Dio,Gio,xg,Nce,Oio,Vio,WI,Xio,zio,Qio,$g,qce,Wio,Uio,UI,Hio,Jio,Yio,kg,jce,Kio,Zio,HI,edo,odo,rdo,Sg,Dce,tdo,ado,JI,ndo,sdo,ldo,Rg,Gce,ido,ddo,YI,cdo,mdo,fdo,Pg,Oce,gdo,hdo,KI,udo,pdo,_do,Bg,Vce,bdo,vdo,ZI,Fdo,Tdo,Mdo,Ig,Xce,Edo,Cdo,eN,wdo,Ado,Ldo,Ng,zce,ydo,xdo,oN,$do,kdo,Sdo,qg,Qce,Rdo,Pdo,rN,Bdo,Ido,Ndo,jg,Wce,qdo,jdo,tN,Ddo,Gdo,Odo,Dg,Uce,Vdo,Xdo,aN,zdo,Qdo,Wdo,Gg,Hce,Udo,Hdo,nN,Jdo,Ydo,Kdo,Og,Jce,Zdo,eco,sN,oco,rco,tco,Vg,Yce,aco,nco,lN,sco,lco,ico,Xg,Kce,dco,cco,iN,mco,fco,gco,zg,Zce,hco,uco,dN,pco,_co,bco,Qg,eme,vco,Fco,cN,Tco,Mco,Eco,Wg,ome,Cco,wco,mN,Aco,Lco,yco,Ug,rme,xco,$co,fN,kco,Sco,Rco,Hg,tme,Pco,Bco,gN,Ico,Nco,qco,Jg,ame,jco,Dco,hN,Gco,Oco,Vco,Yg,nme,Xco,zco,uN,Qco,Wco,Uco,Kg,sme,Hco,Jco,pN,Yco,Kco,Zco,Zg,lme,emo,omo,_N,rmo,tmo,amo,eh,ime,nmo,smo,bN,lmo,imo,dmo,oh,dme,cmo,mmo,vN,fmo,gmo,hmo,rh,cme,umo,pmo,FN,_mo,bmo,vmo,th,mme,Fmo,Tmo,TN,Mmo,Emo,Cmo,ah,fme,wmo,Amo,MN,Lmo,ymo,xmo,nh,gme,$mo,kmo,EN,Smo,Rmo,Pmo,sh,hme,Bmo,Imo,CN,Nmo,qmo,jmo,lh,ume,Dmo,Gmo,wN,Omo,Vmo,Xmo,ih,pme,zmo,Qmo,AN,Wmo,Umo,Hmo,dh,_me,Jmo,Ymo,LN,Kmo,Zmo,efo,ch,bme,ofo,rfo,yN,tfo,afo,nfo,mh,vme,sfo,lfo,xN,ifo,dfo,cfo,fh,Fme,mfo,ffo,$N,gfo,hfo,ufo,gh,Tme,pfo,_fo,kN,bfo,vfo,Ffo,hh,Mme,Tfo,Mfo,SN,Efo,Cfo,wfo,uh,Eme,Afo,Lfo,RN,yfo,xfo,$fo,ph,Cme,kfo,Sfo,PN,Rfo,Pfo,Bfo,_h,wme,Ifo,Nfo,BN,qfo,jfo,Dfo,bh,Ame,Gfo,Ofo,IN,Vfo,Xfo,zfo,vh,Lme,Qfo,Wfo,NN,Ufo,Hfo,Jfo,Fh,yme,Yfo,Kfo,qN,Zfo,ego,ogo,Th,xme,rgo,tgo,jN,ago,ngo,sgo,Mh,$me,lgo,igo,DN,dgo,cgo,mgo,Eh,kme,fgo,ggo,GN,hgo,ugo,pgo,Ch,Sme,_go,bgo,ON,vgo,Fgo,Tgo,wh,Rme,Mgo,Ego,VN,Cgo,wgo,Ago,Ah,Pme,Lgo,ygo,XN,xgo,$go,kgo,Lh,Bme,Sgo,Rgo,zN,Pgo,Bgo,Igo,yh,Ime,Ngo,qgo,QN,jgo,Dgo,Ggo,xh,Nme,Ogo,Vgo,WN,Xgo,zgo,Qgo,$h,qme,Wgo,Ugo,UN,Hgo,Jgo,Ygo,kh,jme,Kgo,Zgo,HN,eho,oho,rho,Sh,Dme,tho,aho,JN,nho,sho,lho,Rh,Gme,iho,dho,YN,cho,mho,fho,Ph,Ome,gho,hho,KN,uho,pho,_ho,Bh,Vme,bho,vho,ZN,Fho,Tho,Mho,Ih,Xme,Eho,Cho,eq,who,Aho,Lho,Nh,zme,yho,xho,oq,$ho,kho,Sho,qh,Qme,Rho,Pho,rq,Bho,Iho,Nho,jh,Wme,qho,jho,tq,Dho,Gho,Oho,Dh,Ume,Vho,Xho,aq,zho,Qho,Who,Gh,Hme,Uho,Hho,nq,Jho,Yho,Kho,Oh,Jme,Zho,euo,sq,ouo,ruo,tuo,Vh,Yme,auo,nuo,lq,suo,luo,iuo,Xh,Kme,duo,cuo,iq,muo,fuo,guo,zh,Zme,huo,uuo,dq,puo,_uo,buo,Qh,efe,vuo,Fuo,cq,Tuo,Muo,Euo,Wh,ofe,Cuo,wuo,mq,Auo,Luo,yuo,Uh,rfe,xuo,$uo,fq,kuo,Suo,Ruo,Hh,tfe,Puo,Buo,gq,Iuo,Nuo,quo,Jh,afe,juo,Duo,hq,Guo,Ouo,Vuo,Yh,Xuo,Kh,U9,zuo,nfe,Quo,HKe,gd,Zh,sfe,H9,Wuo,lfe,Uuo,JKe,ko,J9,Huo,Y9,Juo,uq,Yuo,Kuo,Zuo,K9,epo,ife,opo,rpo,tpo,Br,Z9,apo,dfe,npo,spo,Ua,lpo,cfe,ipo,dpo,mfe,cpo,mpo,ffe,fpo,gpo,hpo,k,ns,gfe,upo,ppo,pq,_po,bpo,_q,vpo,Fpo,Tpo,ss,hfe,Mpo,Epo,bq,Cpo,wpo,vq,Apo,Lpo,ypo,ls,ufe,xpo,$po,Fq,kpo,Spo,Tq,Rpo,Ppo,Bpo,eu,pfe,Ipo,Npo,Mq,qpo,jpo,Dpo,is,_fe,Gpo,Opo,Eq,Vpo,Xpo,Cq,zpo,Qpo,Wpo,ou,bfe,Upo,Hpo,wq,Jpo,Ypo,Kpo,ru,vfe,Zpo,e_o,Aq,o_o,r_o,t_o,tu,Ffe,a_o,n_o,Lq,s_o,l_o,i_o,ds,Tfe,d_o,c_o,yq,m_o,f_o,xq,g_o,h_o,u_o,cs,Mfe,p_o,__o,$q,b_o,v_o,kq,F_o,T_o,M_o,ms,Efe,E_o,C_o,Sq,w_o,A_o,Rq,L_o,y_o,x_o,au,Cfe,$_o,k_o,Pq,S_o,R_o,P_o,nu,wfe,B_o,I_o,Bq,N_o,q_o,j_o,su,Afe,D_o,G_o,Iq,O_o,V_o,X_o,fs,Lfe,z_o,Q_o,Nq,W_o,U_o,qq,H_o,J_o,Y_o,lu,yfe,K_o,Z_o,jq,ebo,obo,rbo,gs,xfe,tbo,abo,Dq,nbo,sbo,Gq,lbo,ibo,dbo,hs,$fe,cbo,mbo,Oq,fbo,gbo,Vq,hbo,ubo,pbo,us,kfe,_bo,bbo,Xq,vbo,Fbo,zq,Tbo,Mbo,Ebo,ps,Sfe,Cbo,wbo,Qq,Abo,Lbo,Wq,ybo,xbo,$bo,iu,Rfe,kbo,Sbo,Uq,Rbo,Pbo,Bbo,_s,Pfe,Ibo,Nbo,Hq,qbo,jbo,Jq,Dbo,Gbo,Obo,bs,Bfe,Vbo,Xbo,Yq,zbo,Qbo,Kq,Wbo,Ubo,Hbo,vs,Ife,Jbo,Ybo,Zq,Kbo,Zbo,ej,e2o,o2o,r2o,Fs,Nfe,t2o,a2o,oj,n2o,s2o,rj,l2o,i2o,d2o,Ts,qfe,c2o,m2o,tj,f2o,g2o,aj,h2o,u2o,p2o,Ms,jfe,_2o,b2o,nj,v2o,F2o,sj,T2o,M2o,E2o,Es,Dfe,C2o,w2o,lj,A2o,L2o,ij,y2o,x2o,$2o,du,Gfe,k2o,S2o,dj,R2o,P2o,B2o,Cs,Ofe,I2o,N2o,cj,q2o,j2o,mj,D2o,G2o,O2o,cu,Vfe,V2o,X2o,fj,z2o,Q2o,W2o,ws,Xfe,U2o,H2o,gj,J2o,Y2o,hj,K2o,Z2o,e1o,As,zfe,o1o,r1o,uj,t1o,a1o,pj,n1o,s1o,l1o,Ls,Qfe,i1o,d1o,_j,c1o,m1o,bj,f1o,g1o,h1o,mu,Wfe,u1o,p1o,vj,_1o,b1o,v1o,fu,Ufe,F1o,T1o,Fj,M1o,E1o,C1o,ys,Hfe,w1o,A1o,Tj,L1o,y1o,Mj,x1o,$1o,k1o,xs,Jfe,S1o,R1o,Ej,P1o,B1o,Cj,I1o,N1o,q1o,$s,Yfe,j1o,D1o,wj,G1o,O1o,Aj,V1o,X1o,z1o,gu,Kfe,Q1o,W1o,Lj,U1o,H1o,J1o,ks,Zfe,Y1o,K1o,yj,Z1o,evo,xj,ovo,rvo,tvo,Ss,ege,avo,nvo,$j,svo,lvo,kj,ivo,dvo,cvo,Rs,oge,mvo,fvo,Sj,gvo,hvo,Rj,uvo,pvo,_vo,Ps,rge,bvo,vvo,Pj,Fvo,Tvo,Bj,Mvo,Evo,Cvo,Bs,tge,wvo,Avo,Ij,Lvo,yvo,Nj,xvo,$vo,kvo,Is,age,Svo,Rvo,qj,Pvo,Bvo,jj,Ivo,Nvo,qvo,Ns,nge,jvo,Dvo,Dj,Gvo,Ovo,Gj,Vvo,Xvo,zvo,qs,sge,Qvo,Wvo,Oj,Uvo,Hvo,Vj,Jvo,Yvo,Kvo,hu,lge,Zvo,eFo,Xj,oFo,rFo,tFo,js,ige,aFo,nFo,zj,sFo,lFo,Qj,iFo,dFo,cFo,uu,dge,mFo,fFo,Wj,gFo,hFo,uFo,pu,cge,pFo,_Fo,Uj,bFo,vFo,FFo,Ds,mge,TFo,MFo,Hj,EFo,CFo,Jj,wFo,AFo,LFo,Gs,fge,yFo,xFo,Yj,$Fo,kFo,Kj,SFo,RFo,PFo,Os,gge,BFo,IFo,Zj,NFo,qFo,eD,jFo,DFo,GFo,_u,hge,OFo,VFo,oD,XFo,zFo,QFo,Vs,uge,WFo,UFo,rD,HFo,JFo,tD,YFo,KFo,ZFo,Xs,pge,eTo,oTo,aD,rTo,tTo,nD,aTo,nTo,sTo,zs,_ge,lTo,iTo,sD,dTo,cTo,lD,mTo,fTo,gTo,Qs,bge,hTo,uTo,iD,pTo,_To,dD,bTo,vTo,FTo,Ws,vge,TTo,MTo,cD,ETo,CTo,mD,wTo,ATo,LTo,Us,Fge,yTo,xTo,fD,$To,kTo,gD,STo,RTo,PTo,Hs,Tge,BTo,ITo,hD,NTo,qTo,uD,jTo,DTo,GTo,Js,Mge,OTo,VTo,pD,XTo,zTo,_D,QTo,WTo,UTo,bu,Ege,HTo,JTo,bD,YTo,KTo,ZTo,Ys,Cge,eMo,oMo,vD,rMo,tMo,FD,aMo,nMo,sMo,Ks,wge,lMo,iMo,TD,dMo,cMo,MD,mMo,fMo,gMo,vu,Age,hMo,uMo,ED,pMo,_Mo,bMo,Fu,Lge,vMo,FMo,CD,TMo,MMo,EMo,Tu,yge,CMo,wMo,wD,AMo,LMo,yMo,Mu,xge,xMo,$Mo,AD,kMo,SMo,RMo,Zs,$ge,PMo,BMo,LD,IMo,NMo,yD,qMo,jMo,DMo,Eu,kge,GMo,OMo,xD,VMo,XMo,zMo,el,Sge,QMo,WMo,$D,UMo,HMo,kD,JMo,YMo,KMo,ol,Rge,ZMo,eEo,SD,oEo,rEo,RD,tEo,aEo,nEo,rl,Pge,sEo,lEo,PD,iEo,dEo,BD,cEo,mEo,fEo,tl,Bge,gEo,hEo,ID,uEo,pEo,ND,_Eo,bEo,vEo,al,Ige,FEo,TEo,qD,MEo,EEo,jD,CEo,wEo,AEo,nl,Nge,LEo,yEo,DD,xEo,$Eo,GD,kEo,SEo,REo,Cu,qge,PEo,BEo,OD,IEo,NEo,qEo,wu,jge,jEo,DEo,VD,GEo,OEo,VEo,sl,Dge,XEo,zEo,XD,QEo,WEo,zD,UEo,HEo,JEo,ll,Gge,YEo,KEo,QD,ZEo,e4o,WD,o4o,r4o,t4o,il,Oge,a4o,n4o,UD,s4o,l4o,HD,i4o,d4o,c4o,Au,Vge,m4o,f4o,JD,g4o,h4o,u4o,Lu,Xge,p4o,_4o,YD,b4o,v4o,F4o,yu,zge,T4o,M4o,KD,E4o,C4o,w4o,dl,Qge,A4o,L4o,ZD,y4o,x4o,eG,$4o,k4o,S4o,cl,Wge,R4o,P4o,oG,B4o,I4o,rG,N4o,q4o,j4o,xu,Uge,D4o,G4o,tG,O4o,V4o,X4o,$u,Hge,z4o,Q4o,aG,W4o,U4o,H4o,ku,Jge,J4o,Y4o,nG,K4o,Z4o,eCo,ml,Yge,oCo,rCo,sG,tCo,aCo,lG,nCo,sCo,lCo,fl,Kge,iCo,dCo,iG,cCo,mCo,dG,fCo,gCo,hCo,Su,Zge,uCo,pCo,cG,_Co,bCo,vCo,Ru,ehe,FCo,TCo,mG,MCo,ECo,CCo,gl,ohe,wCo,ACo,fG,LCo,yCo,gG,xCo,$Co,kCo,hl,rhe,SCo,RCo,hG,PCo,BCo,uG,ICo,NCo,qCo,ul,the,jCo,DCo,pG,GCo,OCo,_G,VCo,XCo,zCo,pl,ahe,QCo,WCo,bG,UCo,HCo,vG,JCo,YCo,KCo,Pu,ZCo,Bu,ex,e3o,nhe,o3o,YKe,hd,Iu,she,ox,r3o,lhe,t3o,KKe,So,rx,a3o,tx,n3o,FG,s3o,l3o,i3o,ax,d3o,ihe,c3o,m3o,f3o,Ye,nx,g3o,dhe,h3o,u3o,Ha,p3o,che,_3o,b3o,mhe,v3o,F3o,fhe,T3o,M3o,E3o,z,Nu,ghe,C3o,w3o,TG,A3o,L3o,y3o,qu,hhe,x3o,$3o,MG,k3o,S3o,R3o,ju,uhe,P3o,B3o,EG,I3o,N3o,q3o,Du,phe,j3o,D3o,CG,G3o,O3o,V3o,Gu,_he,X3o,z3o,wG,Q3o,W3o,U3o,Ou,bhe,H3o,J3o,AG,Y3o,K3o,Z3o,Vu,vhe,e5o,o5o,LG,r5o,t5o,a5o,Xu,Fhe,n5o,s5o,yG,l5o,i5o,d5o,zu,The,c5o,m5o,xG,f5o,g5o,h5o,Qu,Mhe,u5o,p5o,$G,_5o,b5o,v5o,Wu,Ehe,F5o,T5o,kG,M5o,E5o,C5o,Uu,Che,w5o,A5o,SG,L5o,y5o,x5o,Hu,whe,$5o,k5o,RG,S5o,R5o,P5o,Ju,Ahe,B5o,I5o,PG,N5o,q5o,j5o,Yu,Lhe,D5o,G5o,BG,O5o,V5o,X5o,Ku,yhe,z5o,Q5o,IG,W5o,U5o,H5o,Zu,xhe,J5o,Y5o,NG,K5o,Z5o,e0o,ep,$he,o0o,r0o,qG,t0o,a0o,n0o,op,khe,s0o,l0o,jG,i0o,d0o,c0o,rp,She,m0o,f0o,DG,g0o,h0o,u0o,tp,Rhe,p0o,_0o,GG,b0o,v0o,F0o,ap,Phe,T0o,M0o,OG,E0o,C0o,w0o,np,Bhe,A0o,L0o,VG,y0o,x0o,$0o,sp,Ihe,k0o,S0o,XG,R0o,P0o,B0o,lp,Nhe,I0o,N0o,zG,q0o,j0o,D0o,ip,qhe,G0o,O0o,QG,V0o,X0o,z0o,dp,jhe,Q0o,W0o,WG,U0o,H0o,J0o,cp,Dhe,Y0o,K0o,UG,Z0o,ewo,owo,mp,Ghe,rwo,two,HG,awo,nwo,swo,fp,Ohe,lwo,iwo,JG,dwo,cwo,mwo,gp,Vhe,fwo,gwo,YG,hwo,uwo,pwo,hp,Xhe,_wo,bwo,KG,vwo,Fwo,Two,up,zhe,Mwo,Ewo,ZG,Cwo,wwo,Awo,pp,Qhe,Lwo,ywo,eO,xwo,$wo,kwo,_p,Whe,Swo,Rwo,oO,Pwo,Bwo,Iwo,bp,Uhe,Nwo,qwo,rO,jwo,Dwo,Gwo,vp,Hhe,Owo,Vwo,tO,Xwo,zwo,Qwo,Fp,Jhe,Wwo,Uwo,aO,Hwo,Jwo,Ywo,Tp,Yhe,Kwo,Zwo,nO,eAo,oAo,rAo,Mp,Khe,tAo,aAo,sO,nAo,sAo,lAo,Ep,Zhe,iAo,dAo,lO,cAo,mAo,fAo,Cp,eue,gAo,hAo,iO,uAo,pAo,_Ao,wp,bAo,Ap,vAo,Lp,sx,FAo,oue,TAo,ZKe,ud,yp,rue,lx,MAo,tue,EAo,eZe,Ro,ix,CAo,dx,wAo,dO,AAo,LAo,yAo,cx,xAo,aue,$Ao,kAo,SAo,Ke,mx,RAo,nue,PAo,BAo,pd,IAo,sue,NAo,qAo,lue,jAo,DAo,GAo,ie,xp,iue,OAo,VAo,cO,XAo,zAo,QAo,$p,due,WAo,UAo,mO,HAo,JAo,YAo,kp,cue,KAo,ZAo,fO,e6o,o6o,r6o,Sp,mue,t6o,a6o,gO,n6o,s6o,l6o,Rp,fue,i6o,d6o,hO,c6o,m6o,f6o,Pp,gue,g6o,h6o,uO,u6o,p6o,_6o,Bp,hue,b6o,v6o,pO,F6o,T6o,M6o,Ip,uue,E6o,C6o,_O,w6o,A6o,L6o,Np,pue,y6o,x6o,bO,$6o,k6o,S6o,qp,_ue,R6o,P6o,vO,B6o,I6o,N6o,jp,bue,q6o,j6o,FO,D6o,G6o,O6o,Dp,vue,V6o,X6o,TO,z6o,Q6o,W6o,Gp,Fue,U6o,H6o,MO,J6o,Y6o,K6o,Op,Tue,Z6o,e7o,EO,o7o,r7o,t7o,Vp,Mue,a7o,n7o,CO,s7o,l7o,i7o,Xp,Eue,d7o,c7o,wO,m7o,f7o,g7o,zp,Cue,h7o,u7o,AO,p7o,_7o,b7o,Qp,wue,v7o,F7o,LO,T7o,M7o,E7o,Wp,Aue,C7o,w7o,yO,A7o,L7o,y7o,Up,Lue,x7o,$7o,xO,k7o,S7o,R7o,Hp,yue,P7o,B7o,$O,I7o,N7o,q7o,Jp,j7o,Yp,D7o,Kp,fx,G7o,xue,O7o,oZe,_d,Zp,$ue,gx,V7o,kue,X7o,rZe,Po,hx,z7o,bd,Q7o,kO,W7o,U7o,SO,H7o,J7o,Y7o,ux,K7o,Sue,Z7o,eLo,oLo,_t,px,rLo,Rue,tLo,aLo,vd,nLo,Pue,sLo,lLo,RO,iLo,dLo,cLo,e_,mLo,Ze,_x,fLo,Bue,gLo,hLo,Ja,uLo,Iue,pLo,_Lo,Nue,bLo,vLo,que,FLo,TLo,MLo,y,o_,jue,ELo,CLo,PO,wLo,ALo,LLo,r_,Due,yLo,xLo,BO,$Lo,kLo,SLo,t_,Gue,RLo,PLo,IO,BLo,ILo,NLo,a_,Oue,qLo,jLo,NO,DLo,GLo,OLo,n_,Vue,VLo,XLo,qO,zLo,QLo,WLo,s_,Xue,ULo,HLo,jO,JLo,YLo,KLo,l_,zue,ZLo,eyo,DO,oyo,ryo,tyo,i_,Que,ayo,nyo,GO,syo,lyo,iyo,d_,Wue,dyo,cyo,OO,myo,fyo,gyo,c_,Uue,hyo,uyo,VO,pyo,_yo,byo,m_,Hue,vyo,Fyo,XO,Tyo,Myo,Eyo,f_,Jue,Cyo,wyo,zO,Ayo,Lyo,yyo,g_,Yue,xyo,$yo,QO,kyo,Syo,Ryo,h_,Kue,Pyo,Byo,WO,Iyo,Nyo,qyo,u_,Zue,jyo,Dyo,UO,Gyo,Oyo,Vyo,p_,epe,Xyo,zyo,HO,Qyo,Wyo,Uyo,__,ope,Hyo,Jyo,JO,Yyo,Kyo,Zyo,b_,rpe,e8o,o8o,YO,r8o,t8o,a8o,v_,tpe,n8o,s8o,KO,l8o,i8o,d8o,F_,ape,c8o,m8o,ZO,f8o,g8o,h8o,T_,npe,u8o,p8o,eV,_8o,b8o,v8o,M_,spe,F8o,T8o,oV,M8o,E8o,C8o,E_,lpe,w8o,A8o,rV,L8o,y8o,x8o,C_,ipe,$8o,k8o,tV,S8o,R8o,P8o,w_,dpe,B8o,I8o,aV,N8o,q8o,j8o,A_,cpe,D8o,G8o,nV,O8o,V8o,X8o,L_,mpe,z8o,Q8o,sV,W8o,U8o,H8o,y_,fpe,J8o,Y8o,lV,K8o,Z8o,e9o,x_,gpe,o9o,r9o,iV,t9o,a9o,n9o,$_,hpe,s9o,l9o,dV,i9o,d9o,c9o,k_,upe,m9o,f9o,cV,g9o,h9o,u9o,S_,ppe,p9o,_9o,mV,b9o,v9o,F9o,R_,_pe,T9o,M9o,fV,E9o,C9o,w9o,P_,bpe,A9o,L9o,gV,y9o,x9o,$9o,B_,vpe,k9o,S9o,hV,R9o,P9o,B9o,I_,Fpe,I9o,N9o,uV,q9o,j9o,D9o,N_,Tpe,G9o,O9o,pV,V9o,X9o,z9o,q_,Mpe,Q9o,W9o,_V,U9o,H9o,J9o,_l,Epe,Y9o,K9o,bV,Z9o,exo,vV,oxo,rxo,txo,j_,Cpe,axo,nxo,FV,sxo,lxo,ixo,D_,wpe,dxo,cxo,TV,mxo,fxo,gxo,G_,Ape,hxo,uxo,MV,pxo,_xo,bxo,O_,Lpe,vxo,Fxo,EV,Txo,Mxo,Exo,V_,ype,Cxo,wxo,CV,Axo,Lxo,yxo,X_,xpe,xxo,$xo,wV,kxo,Sxo,Rxo,z_,$pe,Pxo,Bxo,AV,Ixo,Nxo,qxo,Q_,kpe,jxo,Dxo,LV,Gxo,Oxo,Vxo,W_,Spe,Xxo,zxo,yV,Qxo,Wxo,Uxo,U_,Rpe,Hxo,Jxo,xV,Yxo,Kxo,Zxo,H_,Ppe,e$o,o$o,$V,r$o,t$o,a$o,J_,Bpe,n$o,s$o,kV,l$o,i$o,d$o,Y_,Ipe,c$o,m$o,SV,f$o,g$o,h$o,K_,Npe,u$o,p$o,RV,_$o,b$o,v$o,Z_,qpe,F$o,T$o,PV,M$o,E$o,C$o,eb,jpe,w$o,A$o,BV,L$o,y$o,x$o,ob,Dpe,$$o,k$o,IV,S$o,R$o,P$o,rb,Gpe,B$o,I$o,NV,N$o,q$o,j$o,tb,Ope,D$o,G$o,qV,O$o,V$o,X$o,ab,Vpe,z$o,Q$o,jV,W$o,U$o,H$o,nb,Xpe,J$o,Y$o,DV,K$o,Z$o,eko,sb,zpe,oko,rko,GV,tko,ako,nko,lb,Qpe,sko,lko,OV,iko,dko,cko,ib,Wpe,mko,fko,VV,gko,hko,uko,db,Upe,pko,_ko,XV,bko,vko,Fko,cb,Hpe,Tko,Mko,zV,Eko,Cko,wko,mb,Jpe,Ako,Lko,QV,yko,xko,$ko,fb,Ype,kko,Sko,WV,Rko,Pko,Bko,gb,Kpe,Iko,Nko,UV,qko,jko,Dko,hb,Zpe,Gko,Oko,HV,Vko,Xko,zko,ub,e_e,Qko,Wko,JV,Uko,Hko,Jko,pb,o_e,Yko,Kko,YV,Zko,eSo,oSo,_b,r_e,rSo,tSo,KV,aSo,nSo,sSo,bb,t_e,lSo,iSo,ZV,dSo,cSo,mSo,vb,a_e,fSo,gSo,eX,hSo,uSo,pSo,Fb,n_e,_So,bSo,oX,vSo,FSo,TSo,Tb,s_e,MSo,ESo,rX,CSo,wSo,ASo,Mb,l_e,LSo,ySo,tX,xSo,$So,kSo,Eb,i_e,SSo,RSo,aX,PSo,BSo,ISo,Cb,d_e,NSo,qSo,nX,jSo,DSo,GSo,wb,c_e,OSo,VSo,sX,XSo,zSo,QSo,Ab,m_e,WSo,USo,lX,HSo,JSo,YSo,Lb,f_e,KSo,ZSo,iX,eRo,oRo,rRo,yb,g_e,tRo,aRo,dX,nRo,sRo,lRo,xb,h_e,iRo,dRo,cX,cRo,mRo,fRo,$b,u_e,gRo,hRo,mX,uRo,pRo,_Ro,kb,p_e,bRo,vRo,fX,FRo,TRo,MRo,Sb,__e,ERo,CRo,gX,wRo,ARo,LRo,Rb,b_e,yRo,xRo,hX,$Ro,kRo,SRo,Pb,v_e,RRo,PRo,uX,BRo,IRo,NRo,Bb,F_e,qRo,jRo,pX,DRo,GRo,ORo,Ib,T_e,VRo,XRo,_X,zRo,QRo,WRo,Nb,M_e,URo,HRo,bX,JRo,YRo,KRo,qb,E_e,ZRo,ePo,vX,oPo,rPo,tPo,jb,C_e,aPo,nPo,FX,sPo,lPo,iPo,Db,w_e,dPo,cPo,TX,mPo,fPo,gPo,Gb,A_e,hPo,uPo,MX,pPo,_Po,bPo,Ob,L_e,vPo,FPo,EX,TPo,MPo,EPo,Vb,y_e,CPo,wPo,CX,APo,LPo,yPo,Xb,x_e,xPo,$Po,wX,kPo,SPo,RPo,zb,$_e,PPo,BPo,AX,IPo,NPo,qPo,Qb,k_e,jPo,DPo,LX,GPo,OPo,VPo,Wb,S_e,XPo,zPo,yX,QPo,WPo,UPo,Ub,R_e,HPo,JPo,xX,YPo,KPo,ZPo,Hb,P_e,eBo,oBo,$X,rBo,tBo,aBo,Jb,B_e,nBo,sBo,kX,lBo,iBo,dBo,Yb,I_e,cBo,mBo,SX,fBo,gBo,hBo,Kb,N_e,uBo,pBo,RX,_Bo,bBo,vBo,Zb,q_e,FBo,TBo,PX,MBo,EBo,CBo,e2,j_e,wBo,ABo,BX,LBo,yBo,xBo,o2,D_e,$Bo,kBo,IX,SBo,RBo,PBo,r2,G_e,BBo,IBo,NX,NBo,qBo,jBo,t2,O_e,DBo,GBo,qX,OBo,VBo,XBo,a2,V_e,zBo,QBo,jX,WBo,UBo,HBo,n2,X_e,JBo,YBo,DX,KBo,ZBo,eIo,s2,z_e,oIo,rIo,GX,tIo,aIo,nIo,l2,Q_e,sIo,lIo,OX,iIo,dIo,cIo,i2,W_e,mIo,fIo,VX,gIo,hIo,uIo,d2,U_e,pIo,_Io,XX,bIo,vIo,FIo,c2,H_e,TIo,MIo,zX,EIo,CIo,wIo,m2,J_e,AIo,LIo,QX,yIo,xIo,$Io,f2,Y_e,kIo,SIo,WX,RIo,PIo,BIo,g2,K_e,IIo,NIo,UX,qIo,jIo,DIo,h2,Z_e,GIo,OIo,HX,VIo,XIo,zIo,u2,QIo,ebe,WIo,UIo,obe,HIo,JIo,p2,tZe,Fd,_2,rbe,bx,YIo,tbe,KIo,aZe,Bo,vx,ZIo,Td,eNo,JX,oNo,rNo,YX,tNo,aNo,nNo,Fx,sNo,abe,lNo,iNo,dNo,bt,Tx,cNo,nbe,mNo,fNo,Md,gNo,sbe,hNo,uNo,KX,pNo,_No,bNo,b2,vNo,eo,Mx,FNo,lbe,TNo,MNo,Ya,ENo,ibe,CNo,wNo,dbe,ANo,LNo,cbe,yNo,xNo,$No,G,v2,mbe,kNo,SNo,ZX,RNo,PNo,BNo,F2,fbe,INo,NNo,ez,qNo,jNo,DNo,T2,gbe,GNo,ONo,oz,VNo,XNo,zNo,M2,hbe,QNo,WNo,rz,UNo,HNo,JNo,E2,ube,YNo,KNo,tz,ZNo,eqo,oqo,C2,pbe,rqo,tqo,az,aqo,nqo,sqo,w2,_be,lqo,iqo,nz,dqo,cqo,mqo,A2,bbe,fqo,gqo,sz,hqo,uqo,pqo,L2,vbe,_qo,bqo,lz,vqo,Fqo,Tqo,y2,Fbe,Mqo,Eqo,iz,Cqo,wqo,Aqo,x2,Tbe,Lqo,yqo,dz,xqo,$qo,kqo,$2,Mbe,Sqo,Rqo,cz,Pqo,Bqo,Iqo,k2,Ebe,Nqo,qqo,mz,jqo,Dqo,Gqo,S2,Cbe,Oqo,Vqo,fz,Xqo,zqo,Qqo,R2,wbe,Wqo,Uqo,gz,Hqo,Jqo,Yqo,P2,Abe,Kqo,Zqo,hz,ejo,ojo,rjo,B2,Lbe,tjo,ajo,uz,njo,sjo,ljo,I2,ybe,ijo,djo,pz,cjo,mjo,fjo,N2,xbe,gjo,hjo,_z,ujo,pjo,_jo,q2,$be,bjo,vjo,bz,Fjo,Tjo,Mjo,j2,kbe,Ejo,Cjo,vz,wjo,Ajo,Ljo,D2,Sbe,yjo,xjo,Fz,$jo,kjo,Sjo,G2,Rbe,Rjo,Pjo,Tz,Bjo,Ijo,Njo,O2,Pbe,qjo,jjo,Mz,Djo,Gjo,Ojo,V2,Bbe,Vjo,Xjo,Ez,zjo,Qjo,Wjo,X2,Ibe,Ujo,Hjo,Cz,Jjo,Yjo,Kjo,z2,Nbe,Zjo,eDo,wz,oDo,rDo,tDo,Q2,qbe,aDo,nDo,Az,sDo,lDo,iDo,W2,jbe,dDo,cDo,Lz,mDo,fDo,gDo,U2,Dbe,hDo,uDo,yz,pDo,_Do,bDo,H2,Gbe,vDo,FDo,xz,TDo,MDo,EDo,J2,Obe,CDo,wDo,$z,ADo,LDo,yDo,Y2,Vbe,xDo,$Do,kz,kDo,SDo,RDo,K2,Xbe,PDo,BDo,Sz,IDo,NDo,qDo,Z2,zbe,jDo,DDo,Rz,GDo,ODo,VDo,e1,Qbe,XDo,zDo,Pz,QDo,WDo,UDo,o1,Wbe,HDo,JDo,Bz,YDo,KDo,ZDo,r1,Ube,eGo,oGo,Iz,rGo,tGo,aGo,t1,Hbe,nGo,sGo,Nz,lGo,iGo,dGo,a1,Jbe,cGo,mGo,qz,fGo,gGo,hGo,n1,Ybe,uGo,pGo,jz,_Go,bGo,vGo,s1,Kbe,FGo,TGo,Dz,MGo,EGo,CGo,l1,Zbe,wGo,AGo,Gz,LGo,yGo,xGo,i1,e2e,$Go,kGo,Oz,SGo,RGo,PGo,d1,o2e,BGo,IGo,Vz,NGo,qGo,jGo,c1,r2e,DGo,GGo,Xz,OGo,VGo,XGo,m1,t2e,zGo,QGo,zz,WGo,UGo,HGo,f1,a2e,JGo,YGo,Qz,KGo,ZGo,eOo,g1,oOo,n2e,rOo,tOo,s2e,aOo,nOo,h1,nZe,Ed,u1,l2e,Ex,sOo,i2e,lOo,sZe,Io,Cx,iOo,Cd,dOo,Wz,cOo,mOo,Uz,fOo,gOo,hOo,wx,uOo,d2e,pOo,_Oo,bOo,vt,Ax,vOo,c2e,FOo,TOo,wd,MOo,m2e,EOo,COo,Hz,wOo,AOo,LOo,p1,yOo,oo,Lx,xOo,f2e,$Oo,kOo,Ka,SOo,g2e,ROo,POo,h2e,BOo,IOo,u2e,NOo,qOo,jOo,Q,_1,p2e,DOo,GOo,Jz,OOo,VOo,XOo,b1,_2e,zOo,QOo,Yz,WOo,UOo,HOo,v1,b2e,JOo,YOo,Kz,KOo,ZOo,eVo,F1,v2e,oVo,rVo,Zz,tVo,aVo,nVo,T1,F2e,sVo,lVo,eQ,iVo,dVo,cVo,M1,T2e,mVo,fVo,oQ,gVo,hVo,uVo,E1,M2e,pVo,_Vo,rQ,bVo,vVo,FVo,C1,E2e,TVo,MVo,tQ,EVo,CVo,wVo,w1,C2e,AVo,LVo,aQ,yVo,xVo,$Vo,A1,w2e,kVo,SVo,nQ,RVo,PVo,BVo,L1,A2e,IVo,NVo,sQ,qVo,jVo,DVo,y1,L2e,GVo,OVo,lQ,VVo,XVo,zVo,x1,y2e,QVo,WVo,iQ,UVo,HVo,JVo,$1,x2e,YVo,KVo,dQ,ZVo,eXo,oXo,k1,$2e,rXo,tXo,cQ,aXo,nXo,sXo,S1,k2e,lXo,iXo,mQ,dXo,cXo,mXo,R1,S2e,fXo,gXo,fQ,hXo,uXo,pXo,P1,R2e,_Xo,bXo,gQ,vXo,FXo,TXo,B1,P2e,MXo,EXo,hQ,CXo,wXo,AXo,I1,B2e,LXo,yXo,uQ,xXo,$Xo,kXo,N1,I2e,SXo,RXo,pQ,PXo,BXo,IXo,q1,N2e,NXo,qXo,_Q,jXo,DXo,GXo,j1,q2e,OXo,VXo,bQ,XXo,zXo,QXo,D1,j2e,WXo,UXo,vQ,HXo,JXo,YXo,G1,D2e,KXo,ZXo,FQ,ezo,ozo,rzo,O1,G2e,tzo,azo,TQ,nzo,szo,lzo,V1,O2e,izo,dzo,MQ,czo,mzo,fzo,X1,V2e,gzo,hzo,EQ,uzo,pzo,_zo,z1,X2e,bzo,vzo,CQ,Fzo,Tzo,Mzo,Q1,z2e,Ezo,Czo,wQ,wzo,Azo,Lzo,W1,Q2e,yzo,xzo,AQ,$zo,kzo,Szo,U1,W2e,Rzo,Pzo,LQ,Bzo,Izo,Nzo,H1,U2e,qzo,jzo,yQ,Dzo,Gzo,Ozo,J1,H2e,Vzo,Xzo,xQ,zzo,Qzo,Wzo,Y1,J2e,Uzo,Hzo,$Q,Jzo,Yzo,Kzo,K1,Y2e,Zzo,eQo,kQ,oQo,rQo,tQo,Z1,K2e,aQo,nQo,SQ,sQo,lQo,iQo,ev,Z2e,dQo,cQo,RQ,mQo,fQo,gQo,ov,e1e,hQo,uQo,PQ,pQo,_Qo,bQo,rv,o1e,vQo,FQo,BQ,TQo,MQo,EQo,tv,r1e,CQo,wQo,IQ,AQo,LQo,yQo,av,t1e,xQo,$Qo,NQ,kQo,SQo,RQo,nv,PQo,a1e,BQo,IQo,n1e,NQo,qQo,sv,lZe,Ad,lv,s1e,yx,jQo,l1e,DQo,iZe,No,xx,GQo,Ld,OQo,qQ,VQo,XQo,jQ,zQo,QQo,WQo,$x,UQo,i1e,HQo,JQo,YQo,Ft,kx,KQo,d1e,ZQo,eWo,yd,oWo,c1e,rWo,tWo,DQ,aWo,nWo,sWo,iv,lWo,ro,Sx,iWo,m1e,dWo,cWo,Za,mWo,f1e,fWo,gWo,g1e,hWo,uWo,h1e,pWo,_Wo,bWo,H,dv,u1e,vWo,FWo,GQ,TWo,MWo,EWo,cv,p1e,CWo,wWo,OQ,AWo,LWo,yWo,mv,_1e,xWo,$Wo,VQ,kWo,SWo,RWo,fv,b1e,PWo,BWo,XQ,IWo,NWo,qWo,gv,v1e,jWo,DWo,zQ,GWo,OWo,VWo,hv,F1e,XWo,zWo,QQ,QWo,WWo,UWo,uv,T1e,HWo,JWo,WQ,YWo,KWo,ZWo,pv,M1e,eUo,oUo,UQ,rUo,tUo,aUo,_v,E1e,nUo,sUo,HQ,lUo,iUo,dUo,bv,C1e,cUo,mUo,JQ,fUo,gUo,hUo,vv,w1e,uUo,pUo,YQ,_Uo,bUo,vUo,Fv,A1e,FUo,TUo,KQ,MUo,EUo,CUo,Tv,L1e,wUo,AUo,ZQ,LUo,yUo,xUo,Mv,y1e,$Uo,kUo,eW,SUo,RUo,PUo,Ev,x1e,BUo,IUo,oW,NUo,qUo,jUo,Cv,$1e,DUo,GUo,rW,OUo,VUo,XUo,wv,k1e,zUo,QUo,tW,WUo,UUo,HUo,Av,S1e,JUo,YUo,aW,KUo,ZUo,eHo,Lv,R1e,oHo,rHo,nW,tHo,aHo,nHo,yv,P1e,sHo,lHo,sW,iHo,dHo,cHo,xv,B1e,mHo,fHo,lW,gHo,hHo,uHo,$v,I1e,pHo,_Ho,iW,bHo,vHo,FHo,kv,N1e,THo,MHo,dW,EHo,CHo,wHo,Sv,q1e,AHo,LHo,cW,yHo,xHo,$Ho,Rv,j1e,kHo,SHo,mW,RHo,PHo,BHo,Pv,D1e,IHo,NHo,fW,qHo,jHo,DHo,Bv,G1e,GHo,OHo,gW,VHo,XHo,zHo,Iv,O1e,QHo,WHo,hW,UHo,HHo,JHo,Nv,V1e,YHo,KHo,uW,ZHo,eJo,oJo,qv,X1e,rJo,tJo,pW,aJo,nJo,sJo,jv,z1e,lJo,iJo,_W,dJo,cJo,mJo,Dv,Q1e,fJo,gJo,bW,hJo,uJo,pJo,Gv,W1e,_Jo,bJo,vW,vJo,FJo,TJo,Ov,U1e,MJo,EJo,FW,CJo,wJo,AJo,Vv,H1e,LJo,yJo,J1e,xJo,$Jo,kJo,Xv,Y1e,SJo,RJo,TW,PJo,BJo,IJo,zv,K1e,NJo,qJo,MW,jJo,DJo,GJo,Qv,Z1e,OJo,VJo,EW,XJo,zJo,QJo,Wv,eve,WJo,UJo,CW,HJo,JJo,YJo,Uv,KJo,ove,ZJo,eYo,rve,oYo,rYo,Hv,dZe,xd,Jv,tve,Rx,tYo,ave,aYo,cZe,qo,Px,nYo,$d,sYo,wW,lYo,iYo,AW,dYo,cYo,mYo,Bx,fYo,nve,gYo,hYo,uYo,Tt,Ix,pYo,sve,_Yo,bYo,kd,vYo,lve,FYo,TYo,LW,MYo,EYo,CYo,Yv,wYo,to,Nx,AYo,ive,LYo,yYo,en,xYo,dve,$Yo,kYo,cve,SYo,RYo,mve,PYo,BYo,IYo,me,Kv,fve,NYo,qYo,yW,jYo,DYo,GYo,Zv,gve,OYo,VYo,xW,XYo,zYo,QYo,eF,hve,WYo,UYo,$W,HYo,JYo,YYo,oF,uve,KYo,ZYo,kW,eKo,oKo,rKo,rF,pve,tKo,aKo,SW,nKo,sKo,lKo,tF,_ve,iKo,dKo,RW,cKo,mKo,fKo,aF,bve,gKo,hKo,PW,uKo,pKo,_Ko,nF,vve,bKo,vKo,BW,FKo,TKo,MKo,sF,Fve,EKo,CKo,IW,wKo,AKo,LKo,lF,Tve,yKo,xKo,NW,$Ko,kKo,SKo,iF,Mve,RKo,PKo,qW,BKo,IKo,NKo,dF,Eve,qKo,jKo,jW,DKo,GKo,OKo,cF,Cve,VKo,XKo,DW,zKo,QKo,WKo,mF,wve,UKo,HKo,GW,JKo,YKo,KKo,fF,Ave,ZKo,eZo,OW,oZo,rZo,tZo,gF,Lve,aZo,nZo,VW,sZo,lZo,iZo,hF,yve,dZo,cZo,XW,mZo,fZo,gZo,uF,xve,hZo,uZo,zW,pZo,_Zo,bZo,pF,$ve,vZo,FZo,QW,TZo,MZo,EZo,_F,kve,CZo,wZo,WW,AZo,LZo,yZo,bF,xZo,Sve,$Zo,kZo,Rve,SZo,RZo,vF,mZe,Sd,FF,Pve,qx,PZo,Bve,BZo,fZe,jo,jx,IZo,Rd,NZo,UW,qZo,jZo,HW,DZo,GZo,OZo,Dx,VZo,Ive,XZo,zZo,QZo,Mt,Gx,WZo,Nve,UZo,HZo,Pd,JZo,qve,YZo,KZo,JW,ZZo,eer,oer,TF,rer,ao,Ox,ter,jve,aer,ner,on,ser,Dve,ler,ier,Gve,der,cer,Ove,mer,fer,ger,q,MF,Vve,her,uer,YW,per,_er,ber,EF,Xve,ver,Fer,KW,Ter,Mer,Eer,CF,zve,Cer,wer,ZW,Aer,Ler,yer,wF,Qve,xer,$er,eU,ker,Ser,Rer,AF,Wve,Per,Ber,oU,Ier,Ner,qer,LF,Uve,jer,Der,rU,Ger,Oer,Ver,yF,Hve,Xer,zer,tU,Qer,Wer,Uer,xF,Jve,Her,Jer,aU,Yer,Ker,Zer,$F,Yve,eor,oor,nU,ror,tor,aor,kF,Kve,nor,sor,sU,lor,ior,dor,SF,Zve,cor,mor,lU,gor,hor,uor,RF,eFe,por,_or,iU,bor,vor,For,PF,oFe,Tor,Mor,dU,Eor,Cor,wor,BF,rFe,Aor,Lor,cU,yor,xor,$or,IF,tFe,kor,Sor,mU,Ror,Por,Bor,NF,aFe,Ior,Nor,fU,qor,jor,Dor,qF,nFe,Gor,Oor,gU,Vor,Xor,zor,jF,sFe,Qor,Wor,hU,Uor,Hor,Jor,DF,lFe,Yor,Kor,uU,Zor,err,orr,GF,iFe,rrr,trr,pU,arr,nrr,srr,OF,dFe,lrr,irr,_U,drr,crr,mrr,VF,cFe,frr,grr,bU,hrr,urr,prr,XF,mFe,_rr,brr,vU,vrr,Frr,Trr,zF,fFe,Mrr,Err,FU,Crr,wrr,Arr,QF,gFe,Lrr,yrr,TU,xrr,$rr,krr,WF,hFe,Srr,Rrr,MU,Prr,Brr,Irr,UF,uFe,Nrr,qrr,EU,jrr,Drr,Grr,HF,pFe,Orr,Vrr,CU,Xrr,zrr,Qrr,JF,_Fe,Wrr,Urr,wU,Hrr,Jrr,Yrr,YF,bFe,Krr,Zrr,AU,etr,otr,rtr,KF,vFe,ttr,atr,LU,ntr,str,ltr,ZF,FFe,itr,dtr,yU,ctr,mtr,ftr,eT,TFe,gtr,htr,xU,utr,ptr,_tr,oT,MFe,btr,vtr,$U,Ftr,Ttr,Mtr,rT,EFe,Etr,Ctr,kU,wtr,Atr,Ltr,tT,CFe,ytr,xtr,SU,$tr,ktr,Str,aT,wFe,Rtr,Ptr,RU,Btr,Itr,Ntr,nT,AFe,qtr,jtr,PU,Dtr,Gtr,Otr,sT,LFe,Vtr,Xtr,BU,ztr,Qtr,Wtr,lT,yFe,Utr,Htr,IU,Jtr,Ytr,Ktr,iT,xFe,Ztr,ear,NU,oar,rar,tar,dT,$Fe,aar,nar,qU,sar,lar,iar,cT,kFe,dar,car,jU,mar,far,gar,mT,SFe,har,uar,DU,par,_ar,bar,fT,RFe,Far,Tar,GU,Mar,Ear,Car,gT,PFe,war,Aar,OU,Lar,yar,xar,hT,BFe,$ar,kar,VU,Sar,Rar,Par,uT,IFe,Bar,Iar,XU,Nar,qar,jar,pT,NFe,Dar,Gar,zU,Oar,Var,Xar,_T,qFe,zar,Qar,QU,War,Uar,Har,bT,jFe,Jar,Yar,WU,Kar,Zar,enr,vT,DFe,onr,rnr,UU,tnr,anr,nnr,FT,GFe,snr,lnr,HU,inr,dnr,cnr,TT,mnr,OFe,fnr,gnr,VFe,hnr,unr,MT,gZe,Bd,ET,XFe,Vx,pnr,zFe,_nr,hZe,Do,Xx,bnr,Id,vnr,JU,Fnr,Tnr,YU,Mnr,Enr,Cnr,zx,wnr,QFe,Anr,Lnr,ynr,Et,Qx,xnr,WFe,$nr,knr,Nd,Snr,UFe,Rnr,Pnr,KU,Bnr,Inr,Nnr,CT,qnr,no,Wx,jnr,HFe,Dnr,Gnr,rn,Onr,JFe,Vnr,Xnr,YFe,znr,Qnr,KFe,Wnr,Unr,Hnr,Z,wT,ZFe,Jnr,Ynr,ZU,Knr,Znr,esr,AT,eTe,osr,rsr,eH,tsr,asr,nsr,LT,oTe,ssr,lsr,oH,isr,dsr,csr,yT,rTe,msr,fsr,rH,gsr,hsr,usr,xT,tTe,psr,_sr,tH,bsr,vsr,Fsr,$T,aTe,Tsr,Msr,aH,Esr,Csr,wsr,kT,nTe,Asr,Lsr,nH,ysr,xsr,$sr,ST,sTe,ksr,Ssr,sH,Rsr,Psr,Bsr,RT,lTe,Isr,Nsr,lH,qsr,jsr,Dsr,PT,iTe,Gsr,Osr,iH,Vsr,Xsr,zsr,BT,dTe,Qsr,Wsr,dH,Usr,Hsr,Jsr,IT,cTe,Ysr,Ksr,cH,Zsr,elr,olr,NT,mTe,rlr,tlr,mH,alr,nlr,slr,qT,fTe,llr,ilr,fH,dlr,clr,mlr,jT,gTe,flr,glr,gH,hlr,ulr,plr,DT,hTe,_lr,blr,hH,vlr,Flr,Tlr,GT,uTe,Mlr,Elr,uH,Clr,wlr,Alr,OT,pTe,Llr,ylr,pH,xlr,$lr,klr,VT,_Te,Slr,Rlr,_H,Plr,Blr,Ilr,XT,bTe,Nlr,qlr,bH,jlr,Dlr,Glr,zT,vTe,Olr,Vlr,vH,Xlr,zlr,Qlr,QT,FTe,Wlr,Ulr,FH,Hlr,Jlr,Ylr,WT,TTe,Klr,Zlr,TH,eir,oir,rir,UT,MTe,tir,air,MH,nir,sir,lir,HT,ETe,iir,dir,EH,cir,mir,fir,JT,CTe,gir,hir,CH,uir,pir,_ir,YT,wTe,bir,vir,wH,Fir,Tir,Mir,KT,ATe,Eir,Cir,AH,wir,Air,Lir,ZT,LTe,yir,xir,LH,$ir,kir,Sir,eM,yTe,Rir,Pir,yH,Bir,Iir,Nir,oM,xTe,qir,jir,xH,Dir,Gir,Oir,rM,$Te,Vir,Xir,$H,zir,Qir,Wir,tM,Uir,kTe,Hir,Jir,STe,Yir,Kir,aM,uZe,qd,nM,RTe,Ux,Zir,PTe,edr,pZe,Go,Hx,odr,jd,rdr,kH,tdr,adr,SH,ndr,sdr,ldr,Jx,idr,BTe,ddr,cdr,mdr,Ct,Yx,fdr,ITe,gdr,hdr,Dd,udr,NTe,pdr,_dr,RH,bdr,vdr,Fdr,sM,Tdr,so,Kx,Mdr,qTe,Edr,Cdr,tn,wdr,jTe,Adr,Ldr,DTe,ydr,xdr,GTe,$dr,kdr,Sdr,Ue,lM,OTe,Rdr,Pdr,PH,Bdr,Idr,Ndr,iM,VTe,qdr,jdr,BH,Ddr,Gdr,Odr,dM,XTe,Vdr,Xdr,IH,zdr,Qdr,Wdr,cM,zTe,Udr,Hdr,NH,Jdr,Ydr,Kdr,mM,QTe,Zdr,ecr,qH,ocr,rcr,tcr,fM,WTe,acr,ncr,jH,scr,lcr,icr,gM,UTe,dcr,ccr,DH,mcr,fcr,gcr,hM,hcr,HTe,ucr,pcr,JTe,_cr,bcr,uM,_Ze,Gd,pM,YTe,Zx,vcr,KTe,Fcr,bZe,Oo,e$,Tcr,Od,Mcr,GH,Ecr,Ccr,OH,wcr,Acr,Lcr,o$,ycr,ZTe,xcr,$cr,kcr,wt,r$,Scr,eMe,Rcr,Pcr,Vd,Bcr,oMe,Icr,Ncr,VH,qcr,jcr,Dcr,_M,Gcr,lo,t$,Ocr,rMe,Vcr,Xcr,an,zcr,tMe,Qcr,Wcr,aMe,Ucr,Hcr,nMe,Jcr,Ycr,Kcr,J,bM,sMe,Zcr,emr,XH,omr,rmr,tmr,vM,lMe,amr,nmr,zH,smr,lmr,imr,FM,iMe,dmr,cmr,QH,mmr,fmr,gmr,TM,dMe,hmr,umr,WH,pmr,_mr,bmr,MM,cMe,vmr,Fmr,UH,Tmr,Mmr,Emr,EM,mMe,Cmr,wmr,HH,Amr,Lmr,ymr,CM,fMe,xmr,$mr,JH,kmr,Smr,Rmr,wM,gMe,Pmr,Bmr,YH,Imr,Nmr,qmr,AM,hMe,jmr,Dmr,KH,Gmr,Omr,Vmr,LM,uMe,Xmr,zmr,ZH,Qmr,Wmr,Umr,yM,pMe,Hmr,Jmr,eJ,Ymr,Kmr,Zmr,xM,_Me,efr,ofr,oJ,rfr,tfr,afr,$M,bMe,nfr,sfr,rJ,lfr,ifr,dfr,kM,vMe,cfr,mfr,tJ,ffr,gfr,hfr,SM,FMe,ufr,pfr,aJ,_fr,bfr,vfr,RM,TMe,Ffr,Tfr,nJ,Mfr,Efr,Cfr,PM,MMe,wfr,Afr,sJ,Lfr,yfr,xfr,BM,EMe,$fr,kfr,lJ,Sfr,Rfr,Pfr,IM,CMe,Bfr,Ifr,iJ,Nfr,qfr,jfr,NM,wMe,Dfr,Gfr,dJ,Ofr,Vfr,Xfr,qM,AMe,zfr,Qfr,cJ,Wfr,Ufr,Hfr,jM,LMe,Jfr,Yfr,mJ,Kfr,Zfr,egr,DM,yMe,ogr,rgr,fJ,tgr,agr,ngr,GM,xMe,sgr,lgr,gJ,igr,dgr,cgr,OM,$Me,mgr,fgr,hJ,ggr,hgr,ugr,VM,kMe,pgr,_gr,uJ,bgr,vgr,Fgr,XM,SMe,Tgr,Mgr,pJ,Egr,Cgr,wgr,zM,RMe,Agr,Lgr,_J,ygr,xgr,$gr,QM,PMe,kgr,Sgr,bJ,Rgr,Pgr,Bgr,WM,BMe,Igr,Ngr,vJ,qgr,jgr,Dgr,UM,IMe,Ggr,Ogr,FJ,Vgr,Xgr,zgr,HM,NMe,Qgr,Wgr,TJ,Ugr,Hgr,Jgr,JM,qMe,Ygr,Kgr,MJ,Zgr,ehr,ohr,YM,jMe,rhr,thr,EJ,ahr,nhr,shr,KM,DMe,lhr,ihr,CJ,dhr,chr,mhr,ZM,GMe,fhr,ghr,wJ,hhr,uhr,phr,eE,OMe,_hr,bhr,AJ,vhr,Fhr,Thr,oE,VMe,Mhr,Ehr,LJ,Chr,whr,Ahr,rE,Lhr,XMe,yhr,xhr,zMe,$hr,khr,tE,vZe,Xd,aE,QMe,a$,Shr,WMe,Rhr,FZe,Vo,n$,Phr,zd,Bhr,yJ,Ihr,Nhr,xJ,qhr,jhr,Dhr,s$,Ghr,UMe,Ohr,Vhr,Xhr,At,l$,zhr,HMe,Qhr,Whr,Qd,Uhr,JMe,Hhr,Jhr,$J,Yhr,Khr,Zhr,nE,eur,io,i$,our,YMe,rur,tur,nn,aur,KMe,nur,sur,ZMe,lur,iur,eEe,dur,cur,mur,V,sE,oEe,fur,gur,kJ,hur,uur,pur,lE,rEe,_ur,bur,SJ,vur,Fur,Tur,iE,tEe,Mur,Eur,RJ,Cur,wur,Aur,dE,aEe,Lur,yur,PJ,xur,$ur,kur,cE,nEe,Sur,Rur,BJ,Pur,Bur,Iur,mE,sEe,Nur,qur,IJ,jur,Dur,Gur,fE,lEe,Our,Vur,NJ,Xur,zur,Qur,gE,iEe,Wur,Uur,qJ,Hur,Jur,Yur,hE,dEe,Kur,Zur,jJ,epr,opr,rpr,uE,cEe,tpr,apr,DJ,npr,spr,lpr,pE,mEe,ipr,dpr,GJ,cpr,mpr,fpr,_E,fEe,gpr,hpr,OJ,upr,ppr,_pr,bE,gEe,bpr,vpr,VJ,Fpr,Tpr,Mpr,vE,hEe,Epr,Cpr,XJ,wpr,Apr,Lpr,FE,uEe,ypr,xpr,zJ,$pr,kpr,Spr,TE,pEe,Rpr,Ppr,QJ,Bpr,Ipr,Npr,ME,_Ee,qpr,jpr,WJ,Dpr,Gpr,Opr,EE,bEe,Vpr,Xpr,UJ,zpr,Qpr,Wpr,CE,vEe,Upr,Hpr,HJ,Jpr,Ypr,Kpr,wE,FEe,Zpr,e_r,JJ,o_r,r_r,t_r,AE,TEe,a_r,n_r,YJ,s_r,l_r,i_r,LE,MEe,d_r,c_r,KJ,m_r,f_r,g_r,yE,EEe,h_r,u_r,ZJ,p_r,__r,b_r,xE,CEe,v_r,F_r,eY,T_r,M_r,E_r,$E,wEe,C_r,w_r,oY,A_r,L_r,y_r,kE,AEe,x_r,$_r,rY,k_r,S_r,R_r,SE,LEe,P_r,B_r,tY,I_r,N_r,q_r,RE,yEe,j_r,D_r,aY,G_r,O_r,V_r,PE,xEe,X_r,z_r,nY,Q_r,W_r,U_r,BE,$Ee,H_r,J_r,sY,Y_r,K_r,Z_r,IE,kEe,ebr,obr,lY,rbr,tbr,abr,NE,SEe,nbr,sbr,iY,lbr,ibr,dbr,qE,REe,cbr,mbr,dY,fbr,gbr,hbr,jE,PEe,ubr,pbr,cY,_br,bbr,vbr,DE,BEe,Fbr,Tbr,mY,Mbr,Ebr,Cbr,GE,IEe,wbr,Abr,fY,Lbr,ybr,xbr,OE,NEe,$br,kbr,gY,Sbr,Rbr,Pbr,VE,qEe,Bbr,Ibr,hY,Nbr,qbr,jbr,XE,jEe,Dbr,Gbr,uY,Obr,Vbr,Xbr,zE,DEe,zbr,Qbr,pY,Wbr,Ubr,Hbr,QE,GEe,Jbr,Ybr,_Y,Kbr,Zbr,e2r,WE,OEe,o2r,r2r,bY,t2r,a2r,n2r,UE,VEe,s2r,l2r,vY,i2r,d2r,c2r,HE,XEe,m2r,f2r,FY,g2r,h2r,u2r,JE,p2r,zEe,_2r,b2r,QEe,v2r,F2r,YE,TZe,Wd,KE,WEe,d$,T2r,UEe,M2r,MZe,Xo,c$,E2r,Ud,C2r,TY,w2r,A2r,MY,L2r,y2r,x2r,m$,$2r,HEe,k2r,S2r,R2r,Lt,f$,P2r,JEe,B2r,I2r,Hd,N2r,YEe,q2r,j2r,EY,D2r,G2r,O2r,ZE,V2r,co,g$,X2r,KEe,z2r,Q2r,sn,W2r,ZEe,U2r,H2r,e4e,J2r,Y2r,o4e,K2r,Z2r,e1r,r4e,e4,t4e,o1r,r1r,CY,t1r,a1r,n1r,o4,s1r,a4e,l1r,i1r,n4e,d1r,c1r,r4,EZe,Jd,t4,s4e,h$,m1r,l4e,f1r,CZe,zo,u$,g1r,Yd,h1r,wY,u1r,p1r,AY,_1r,b1r,v1r,p$,F1r,i4e,T1r,M1r,E1r,yt,_$,C1r,d4e,w1r,A1r,Kd,L1r,c4e,y1r,x1r,LY,$1r,k1r,S1r,a4,R1r,mo,b$,P1r,m4e,B1r,I1r,ln,N1r,f4e,q1r,j1r,g4e,D1r,G1r,h4e,O1r,V1r,X1r,Zd,n4,u4e,z1r,Q1r,yY,W1r,U1r,H1r,s4,p4e,J1r,Y1r,xY,K1r,Z1r,evr,l4,_4e,ovr,rvr,$Y,tvr,avr,nvr,i4,svr,b4e,lvr,ivr,v4e,dvr,cvr,d4,wZe,ec,c4,F4e,v$,mvr,T4e,fvr,AZe,Qo,F$,gvr,oc,hvr,kY,uvr,pvr,SY,_vr,bvr,vvr,T$,Fvr,M4e,Tvr,Mvr,Evr,xt,M$,Cvr,E4e,wvr,Avr,rc,Lvr,C4e,yvr,xvr,RY,$vr,kvr,Svr,m4,Rvr,fo,E$,Pvr,w4e,Bvr,Ivr,dn,Nvr,A4e,qvr,jvr,L4e,Dvr,Gvr,y4e,Ovr,Vvr,Xvr,be,f4,x4e,zvr,Qvr,PY,Wvr,Uvr,Hvr,g4,$4e,Jvr,Yvr,BY,Kvr,Zvr,eFr,h4,k4e,oFr,rFr,IY,tFr,aFr,nFr,u4,S4e,sFr,lFr,NY,iFr,dFr,cFr,bl,R4e,mFr,fFr,qY,gFr,hFr,jY,uFr,pFr,_Fr,p4,P4e,bFr,vFr,DY,FFr,TFr,MFr,vl,B4e,EFr,CFr,GY,wFr,AFr,OY,LFr,yFr,xFr,_4,I4e,$Fr,kFr,VY,SFr,RFr,PFr,$t,N4e,BFr,IFr,XY,NFr,qFr,zY,jFr,DFr,QY,GFr,OFr,VFr,b4,q4e,XFr,zFr,WY,QFr,WFr,UFr,v4,j4e,HFr,JFr,UY,YFr,KFr,ZFr,F4,D4e,eTr,oTr,HY,rTr,tTr,aTr,T4,G4e,nTr,sTr,JY,lTr,iTr,dTr,M4,O4e,cTr,mTr,YY,fTr,gTr,hTr,E4,V4e,uTr,pTr,KY,_Tr,bTr,vTr,C4,X4e,FTr,TTr,ZY,MTr,ETr,CTr,w4,z4e,wTr,ATr,eK,LTr,yTr,xTr,A4,Q4e,$Tr,kTr,oK,STr,RTr,PTr,L4,BTr,W4e,ITr,NTr,U4e,qTr,jTr,y4,LZe,tc,x4,H4e,C$,DTr,J4e,GTr,yZe,Wo,w$,OTr,ac,VTr,rK,XTr,zTr,tK,QTr,WTr,UTr,A$,HTr,Y4e,JTr,YTr,KTr,kt,L$,ZTr,K4e,eMr,oMr,nc,rMr,Z4e,tMr,aMr,aK,nMr,sMr,lMr,$4,iMr,go,y$,dMr,eCe,cMr,mMr,cn,fMr,oCe,gMr,hMr,rCe,uMr,pMr,tCe,_Mr,bMr,vMr,aCe,k4,nCe,FMr,TMr,nK,MMr,EMr,CMr,S4,wMr,sCe,AMr,LMr,lCe,yMr,xMr,R4,xZe,sc,P4,iCe,x$,$Mr,dCe,kMr,$Ze,Uo,$$,SMr,lc,RMr,sK,PMr,BMr,lK,IMr,NMr,qMr,k$,jMr,cCe,DMr,GMr,OMr,St,S$,VMr,mCe,XMr,zMr,ic,QMr,fCe,WMr,UMr,iK,HMr,JMr,YMr,B4,KMr,ho,R$,ZMr,gCe,eEr,oEr,mn,rEr,hCe,tEr,aEr,uCe,nEr,sEr,pCe,lEr,iEr,dEr,_Ce,I4,bCe,cEr,mEr,dK,fEr,gEr,hEr,N4,uEr,vCe,pEr,_Er,FCe,bEr,vEr,q4,kZe,dc,j4,TCe,P$,FEr,MCe,TEr,SZe,Ho,B$,MEr,cc,EEr,cK,CEr,wEr,mK,AEr,LEr,yEr,I$,xEr,ECe,$Er,kEr,SEr,Rt,N$,REr,CCe,PEr,BEr,mc,IEr,wCe,NEr,qEr,fK,jEr,DEr,GEr,D4,OEr,uo,q$,VEr,ACe,XEr,zEr,fn,QEr,LCe,WEr,UEr,yCe,HEr,JEr,xCe,YEr,KEr,ZEr,$Ce,G4,kCe,e4r,o4r,gK,r4r,t4r,a4r,O4,n4r,SCe,s4r,l4r,RCe,i4r,d4r,V4,RZe,fc,X4,PCe,j$,c4r,BCe,m4r,PZe,Jo,D$,f4r,gc,g4r,hK,h4r,u4r,uK,p4r,_4r,b4r,G$,v4r,ICe,F4r,T4r,M4r,Pt,O$,E4r,NCe,C4r,w4r,hc,A4r,qCe,L4r,y4r,pK,x4r,$4r,k4r,z4,S4r,po,V$,R4r,jCe,P4r,B4r,gn,I4r,DCe,N4r,q4r,GCe,j4r,D4r,OCe,G4r,O4r,V4r,Pe,Q4,VCe,X4r,z4r,_K,Q4r,W4r,U4r,W4,XCe,H4r,J4r,bK,Y4r,K4r,Z4r,U4,zCe,eCr,oCr,vK,rCr,tCr,aCr,H4,QCe,nCr,sCr,FK,lCr,iCr,dCr,J4,WCe,cCr,mCr,TK,fCr,gCr,hCr,Y4,UCe,uCr,pCr,MK,_Cr,bCr,vCr,K4,HCe,FCr,TCr,EK,MCr,ECr,CCr,Z4,JCe,wCr,ACr,CK,LCr,yCr,xCr,eC,YCe,$Cr,kCr,wK,SCr,RCr,PCr,oC,BCr,KCe,ICr,NCr,ZCe,qCr,jCr,rC,BZe,uc,tC,e3e,X$,DCr,o3e,GCr,IZe,Yo,z$,OCr,pc,VCr,AK,XCr,zCr,LK,QCr,WCr,UCr,Q$,HCr,r3e,JCr,YCr,KCr,Bt,W$,ZCr,t3e,e3r,o3r,_c,r3r,a3e,t3r,a3r,yK,n3r,s3r,l3r,aC,i3r,_o,U$,d3r,n3e,c3r,m3r,hn,f3r,s3e,g3r,h3r,l3e,u3r,p3r,i3e,_3r,b3r,v3r,mt,nC,d3e,F3r,T3r,xK,M3r,E3r,C3r,sC,c3e,w3r,A3r,$K,L3r,y3r,x3r,lC,m3e,$3r,k3r,kK,S3r,R3r,P3r,iC,f3e,B3r,I3r,SK,N3r,q3r,j3r,dC,g3e,D3r,G3r,RK,O3r,V3r,X3r,cC,z3r,h3e,Q3r,W3r,u3e,U3r,H3r,mC,NZe,bc,fC,p3e,H$,J3r,_3e,Y3r,qZe,Ko,J$,K3r,vc,Z3r,PK,e5r,o5r,BK,r5r,t5r,a5r,Y$,n5r,b3e,s5r,l5r,i5r,It,K$,d5r,v3e,c5r,m5r,Fc,f5r,F3e,g5r,h5r,IK,u5r,p5r,_5r,gC,b5r,bo,Z$,v5r,T3e,F5r,T5r,un,M5r,M3e,E5r,C5r,E3e,w5r,A5r,C3e,L5r,y5r,x5r,Le,hC,w3e,$5r,k5r,NK,S5r,R5r,P5r,uC,A3e,B5r,I5r,qK,N5r,q5r,j5r,pC,L3e,D5r,G5r,jK,O5r,V5r,X5r,_C,y3e,z5r,Q5r,DK,W5r,U5r,H5r,bC,x3e,J5r,Y5r,GK,K5r,Z5r,e0r,vC,$3e,o0r,r0r,OK,t0r,a0r,n0r,FC,k3e,s0r,l0r,VK,i0r,d0r,c0r,TC,S3e,m0r,f0r,XK,g0r,h0r,u0r,MC,R3e,p0r,_0r,zK,b0r,v0r,F0r,EC,P3e,T0r,M0r,QK,E0r,C0r,w0r,CC,A0r,B3e,L0r,y0r,I3e,x0r,$0r,wC,jZe,Tc,AC,N3e,ek,k0r,q3e,S0r,DZe,Zo,ok,R0r,Mc,P0r,WK,B0r,I0r,UK,N0r,q0r,j0r,rk,D0r,j3e,G0r,O0r,V0r,Nt,tk,X0r,D3e,z0r,Q0r,Ec,W0r,G3e,U0r,H0r,HK,J0r,Y0r,K0r,LC,Z0r,vo,ak,ewr,O3e,owr,rwr,pn,twr,V3e,awr,nwr,X3e,swr,lwr,z3e,iwr,dwr,cwr,nk,yC,Q3e,mwr,fwr,JK,gwr,hwr,uwr,xC,W3e,pwr,_wr,YK,bwr,vwr,Fwr,$C,Twr,U3e,Mwr,Ewr,H3e,Cwr,wwr,kC,GZe,Cc,SC,J3e,sk,Awr,Y3e,Lwr,OZe,er,lk,ywr,wc,xwr,KK,$wr,kwr,ZK,Swr,Rwr,Pwr,ik,Bwr,K3e,Iwr,Nwr,qwr,qt,dk,jwr,Z3e,Dwr,Gwr,Ac,Owr,e5e,Vwr,Xwr,eZ,zwr,Qwr,Wwr,RC,Uwr,Fo,ck,Hwr,o5e,Jwr,Ywr,_n,Kwr,r5e,Zwr,eAr,t5e,oAr,rAr,a5e,tAr,aAr,nAr,ft,PC,n5e,sAr,lAr,oZ,iAr,dAr,cAr,BC,s5e,mAr,fAr,rZ,gAr,hAr,uAr,IC,l5e,pAr,_Ar,tZ,bAr,vAr,FAr,NC,i5e,TAr,MAr,aZ,EAr,CAr,wAr,qC,d5e,AAr,LAr,nZ,yAr,xAr,$Ar,jC,kAr,c5e,SAr,RAr,m5e,PAr,BAr,DC,VZe,Lc,GC,f5e,mk,IAr,g5e,NAr,XZe,or,fk,qAr,yc,jAr,sZ,DAr,GAr,lZ,OAr,VAr,XAr,gk,zAr,h5e,QAr,WAr,UAr,jt,hk,HAr,u5e,JAr,YAr,xc,KAr,p5e,ZAr,e6r,iZ,o6r,r6r,t6r,OC,a6r,To,uk,n6r,_5e,s6r,l6r,bn,i6r,b5e,d6r,c6r,v5e,m6r,f6r,F5e,g6r,h6r,u6r,vn,VC,T5e,p6r,_6r,dZ,b6r,v6r,F6r,XC,M5e,T6r,M6r,cZ,E6r,C6r,w6r,zC,E5e,A6r,L6r,mZ,y6r,x6r,$6r,QC,C5e,k6r,S6r,fZ,R6r,P6r,B6r,WC,I6r,w5e,N6r,q6r,A5e,j6r,D6r,UC,zZe,$c,HC,L5e,pk,G6r,y5e,O6r,QZe,rr,_k,V6r,kc,X6r,gZ,z6r,Q6r,hZ,W6r,U6r,H6r,bk,J6r,x5e,Y6r,K6r,Z6r,Dt,vk,e7r,$5e,o7r,r7r,Sc,t7r,k5e,a7r,n7r,uZ,s7r,l7r,i7r,JC,d7r,Mo,Fk,c7r,S5e,m7r,f7r,Fn,g7r,R5e,h7r,u7r,P5e,p7r,_7r,B5e,b7r,v7r,F7r,Tn,YC,I5e,T7r,M7r,pZ,E7r,C7r,w7r,KC,N5e,A7r,L7r,_Z,y7r,x7r,$7r,ZC,q5e,k7r,S7r,bZ,R7r,P7r,B7r,e3,j5e,I7r,N7r,vZ,q7r,j7r,D7r,o3,G7r,D5e,O7r,V7r,G5e,X7r,z7r,r3,WZe,Rc,t3,O5e,Tk,Q7r,V5e,W7r,UZe,tr,Mk,U7r,Pc,H7r,FZ,J7r,Y7r,TZ,K7r,Z7r,eLr,Ek,oLr,X5e,rLr,tLr,aLr,Gt,Ck,nLr,z5e,sLr,lLr,Bc,iLr,Q5e,dLr,cLr,MZ,mLr,fLr,gLr,a3,hLr,Eo,wk,uLr,W5e,pLr,_Lr,Mn,bLr,U5e,vLr,FLr,H5e,TLr,MLr,J5e,ELr,CLr,wLr,Y5e,n3,K5e,ALr,LLr,EZ,yLr,xLr,$Lr,s3,kLr,Z5e,SLr,RLr,e0e,PLr,BLr,l3,HZe,Ic,i3,o0e,Ak,ILr,r0e,NLr,JZe,ar,Lk,qLr,Nc,jLr,CZ,DLr,GLr,wZ,OLr,VLr,XLr,yk,zLr,t0e,QLr,WLr,ULr,Ot,xk,HLr,a0e,JLr,YLr,qc,KLr,n0e,ZLr,eyr,AZ,oyr,ryr,tyr,d3,ayr,Co,$k,nyr,s0e,syr,lyr,En,iyr,l0e,dyr,cyr,i0e,myr,fyr,d0e,gyr,hyr,uyr,gt,c3,c0e,pyr,_yr,LZ,byr,vyr,Fyr,m3,m0e,Tyr,Myr,yZ,Eyr,Cyr,wyr,f3,f0e,Ayr,Lyr,xZ,yyr,xyr,$yr,g3,g0e,kyr,Syr,$Z,Ryr,Pyr,Byr,h3,h0e,Iyr,Nyr,kZ,qyr,jyr,Dyr,u3,Gyr,u0e,Oyr,Vyr,p0e,Xyr,zyr,p3,YZe,jc,_3,_0e,kk,Qyr,b0e,Wyr,KZe,nr,Sk,Uyr,Dc,Hyr,SZ,Jyr,Yyr,RZ,Kyr,Zyr,e8r,Rk,o8r,v0e,r8r,t8r,a8r,Vt,Pk,n8r,F0e,s8r,l8r,Gc,i8r,T0e,d8r,c8r,PZ,m8r,f8r,g8r,b3,h8r,wo,Bk,u8r,M0e,p8r,_8r,Cn,b8r,E0e,v8r,F8r,C0e,T8r,M8r,w0e,E8r,C8r,w8r,A0e,v3,L0e,A8r,L8r,BZ,y8r,x8r,$8r,F3,k8r,y0e,S8r,R8r,x0e,P8r,B8r,T3,ZZe,Oc,M3,$0e,Ik,I8r,k0e,N8r,eeo,sr,Nk,q8r,Vc,j8r,IZ,D8r,G8r,NZ,O8r,V8r,X8r,qk,z8r,S0e,Q8r,W8r,U8r,Xt,jk,H8r,R0e,J8r,Y8r,Xc,K8r,P0e,Z8r,e9r,qZ,o9r,r9r,t9r,E3,a9r,Ir,Dk,n9r,B0e,s9r,l9r,wn,i9r,I0e,d9r,c9r,N0e,m9r,f9r,q0e,g9r,h9r,u9r,N,C3,j0e,p9r,_9r,jZ,b9r,v9r,F9r,w3,D0e,T9r,M9r,DZ,E9r,C9r,w9r,A3,G0e,A9r,L9r,GZ,y9r,x9r,$9r,L3,O0e,k9r,S9r,OZ,R9r,P9r,B9r,y3,V0e,I9r,N9r,VZ,q9r,j9r,D9r,x3,X0e,G9r,O9r,XZ,V9r,X9r,z9r,$3,z0e,Q9r,W9r,zZ,U9r,H9r,J9r,k3,Q0e,Y9r,K9r,QZ,Z9r,exr,oxr,S3,W0e,rxr,txr,WZ,axr,nxr,sxr,R3,U0e,lxr,ixr,UZ,dxr,cxr,mxr,P3,H0e,fxr,gxr,HZ,hxr,uxr,pxr,B3,J0e,_xr,bxr,JZ,vxr,Fxr,Txr,I3,Y0e,Mxr,Exr,YZ,Cxr,wxr,Axr,N3,K0e,Lxr,yxr,KZ,xxr,$xr,kxr,q3,Z0e,Sxr,Rxr,ZZ,Pxr,Bxr,Ixr,j3,ewe,Nxr,qxr,eee,jxr,Dxr,Gxr,D3,owe,Oxr,Vxr,oee,Xxr,zxr,Qxr,G3,rwe,Wxr,Uxr,ree,Hxr,Jxr,Yxr,Fl,twe,Kxr,Zxr,tee,e$r,o$r,aee,r$r,t$r,a$r,O3,awe,n$r,s$r,nee,l$r,i$r,d$r,V3,nwe,c$r,m$r,see,f$r,g$r,h$r,X3,swe,u$r,p$r,lee,_$r,b$r,v$r,z3,lwe,F$r,T$r,iee,M$r,E$r,C$r,Q3,iwe,w$r,A$r,dee,L$r,y$r,x$r,W3,dwe,$$r,k$r,cee,S$r,R$r,P$r,U3,cwe,B$r,I$r,mee,N$r,q$r,j$r,H3,mwe,D$r,G$r,fee,O$r,V$r,X$r,J3,fwe,z$r,Q$r,gee,W$r,U$r,H$r,Y3,gwe,J$r,Y$r,hee,K$r,Z$r,ekr,K3,hwe,okr,rkr,uee,tkr,akr,nkr,Z3,uwe,skr,lkr,pee,ikr,dkr,ckr,e5,pwe,mkr,fkr,_ee,gkr,hkr,ukr,o5,_we,pkr,_kr,bee,bkr,vkr,Fkr,r5,bwe,Tkr,Mkr,vee,Ekr,Ckr,wkr,t5,vwe,Akr,Lkr,Fee,ykr,xkr,$kr,a5,Fwe,kkr,Skr,Tee,Rkr,Pkr,Bkr,n5,Twe,Ikr,Nkr,Mee,qkr,jkr,Dkr,s5,Mwe,Gkr,Okr,Eee,Vkr,Xkr,zkr,l5,Ewe,Qkr,Wkr,Cee,Ukr,Hkr,Jkr,i5,Cwe,Ykr,Kkr,wee,Zkr,eSr,oSr,d5,wwe,rSr,tSr,Aee,aSr,nSr,sSr,c5,Awe,lSr,iSr,Lee,dSr,cSr,mSr,m5,Lwe,fSr,gSr,yee,hSr,uSr,pSr,f5,ywe,_Sr,bSr,xee,vSr,FSr,TSr,g5,xwe,MSr,ESr,$ee,CSr,wSr,ASr,h5,$we,LSr,ySr,kee,xSr,$Sr,kSr,u5,kwe,SSr,RSr,See,PSr,BSr,ISr,p5,Swe,NSr,qSr,Ree,jSr,DSr,GSr,_5,Rwe,OSr,VSr,Pee,XSr,zSr,QSr,b5,Pwe,WSr,USr,Bee,HSr,JSr,YSr,v5,Bwe,KSr,ZSr,Iee,eRr,oRr,rRr,F5,Iwe,tRr,aRr,Nee,nRr,sRr,lRr,T5,Nwe,iRr,dRr,qee,cRr,mRr,fRr,M5,qwe,gRr,hRr,jee,uRr,pRr,_Rr,E5,oeo,zc,C5,jwe,Gk,bRr,Dwe,vRr,reo,lr,Ok,FRr,Qc,TRr,Dee,MRr,ERr,Gee,CRr,wRr,ARr,Vk,LRr,Gwe,yRr,xRr,$Rr,zt,Xk,kRr,Owe,SRr,RRr,Wc,PRr,Vwe,BRr,IRr,Oee,NRr,qRr,jRr,w5,DRr,Nr,zk,GRr,Xwe,ORr,VRr,An,XRr,zwe,zRr,QRr,Qwe,WRr,URr,Wwe,HRr,JRr,YRr,se,A5,Uwe,KRr,ZRr,Vee,ePr,oPr,rPr,L5,Hwe,tPr,aPr,Xee,nPr,sPr,lPr,y5,Jwe,iPr,dPr,zee,cPr,mPr,fPr,x5,Ywe,gPr,hPr,Qee,uPr,pPr,_Pr,$5,Kwe,bPr,vPr,Wee,FPr,TPr,MPr,k5,Zwe,EPr,CPr,Uee,wPr,APr,LPr,S5,eAe,yPr,xPr,Hee,$Pr,kPr,SPr,R5,oAe,RPr,PPr,Jee,BPr,IPr,NPr,P5,rAe,qPr,jPr,Yee,DPr,GPr,OPr,B5,tAe,VPr,XPr,Kee,zPr,QPr,WPr,I5,aAe,UPr,HPr,Zee,JPr,YPr,KPr,N5,nAe,ZPr,eBr,eoe,oBr,rBr,tBr,q5,sAe,aBr,nBr,ooe,sBr,lBr,iBr,j5,lAe,dBr,cBr,roe,mBr,fBr,gBr,D5,iAe,hBr,uBr,toe,pBr,_Br,bBr,G5,dAe,vBr,FBr,aoe,TBr,MBr,EBr,O5,cAe,CBr,wBr,noe,ABr,LBr,yBr,V5,mAe,xBr,$Br,soe,kBr,SBr,RBr,X5,fAe,PBr,BBr,loe,IBr,NBr,qBr,z5,gAe,jBr,DBr,ioe,GBr,OBr,VBr,Q5,hAe,XBr,zBr,doe,QBr,WBr,UBr,W5,uAe,HBr,JBr,coe,YBr,KBr,ZBr,U5,pAe,eIr,oIr,moe,rIr,tIr,aIr,H5,teo,Uc,J5,_Ae,Qk,nIr,bAe,sIr,aeo,ir,Wk,lIr,Hc,iIr,foe,dIr,cIr,goe,mIr,fIr,gIr,Uk,hIr,vAe,uIr,pIr,_Ir,Qt,Hk,bIr,FAe,vIr,FIr,Jc,TIr,TAe,MIr,EIr,hoe,CIr,wIr,AIr,Y5,LIr,qr,Jk,yIr,MAe,xIr,$Ir,Ln,kIr,EAe,SIr,RIr,CAe,PIr,BIr,wAe,IIr,NIr,qIr,Me,K5,AAe,jIr,DIr,uoe,GIr,OIr,VIr,Z5,LAe,XIr,zIr,poe,QIr,WIr,UIr,e0,yAe,HIr,JIr,_oe,YIr,KIr,ZIr,o0,xAe,eNr,oNr,boe,rNr,tNr,aNr,r0,$Ae,nNr,sNr,voe,lNr,iNr,dNr,t0,kAe,cNr,mNr,Foe,fNr,gNr,hNr,a0,SAe,uNr,pNr,Toe,_Nr,bNr,vNr,n0,RAe,FNr,TNr,Moe,MNr,ENr,CNr,s0,PAe,wNr,ANr,Eoe,LNr,yNr,xNr,l0,BAe,$Nr,kNr,Coe,SNr,RNr,PNr,i0,IAe,BNr,INr,woe,NNr,qNr,jNr,d0,NAe,DNr,GNr,Aoe,ONr,VNr,XNr,c0,qAe,zNr,QNr,Loe,WNr,UNr,HNr,m0,jAe,JNr,YNr,yoe,KNr,ZNr,eqr,f0,neo,Yc,g0,DAe,Yk,oqr,GAe,rqr,seo,dr,Kk,tqr,Kc,aqr,xoe,nqr,sqr,$oe,lqr,iqr,dqr,Zk,cqr,OAe,mqr,fqr,gqr,Wt,eS,hqr,VAe,uqr,pqr,Zc,_qr,XAe,bqr,vqr,koe,Fqr,Tqr,Mqr,h0,Eqr,jr,oS,Cqr,zAe,wqr,Aqr,yn,Lqr,QAe,yqr,xqr,WAe,$qr,kqr,UAe,Sqr,Rqr,Pqr,Be,u0,HAe,Bqr,Iqr,Soe,Nqr,qqr,jqr,p0,JAe,Dqr,Gqr,Roe,Oqr,Vqr,Xqr,Tl,YAe,zqr,Qqr,Poe,Wqr,Uqr,Boe,Hqr,Jqr,Yqr,_0,KAe,Kqr,Zqr,Ioe,ejr,ojr,rjr,b0,ZAe,tjr,ajr,Noe,njr,sjr,ljr,v0,e6e,ijr,djr,qoe,cjr,mjr,fjr,F0,o6e,gjr,hjr,joe,ujr,pjr,_jr,T0,r6e,bjr,vjr,Doe,Fjr,Tjr,Mjr,M0,t6e,Ejr,Cjr,Goe,wjr,Ajr,Ljr,E0,leo,em,C0,a6e,rS,yjr,n6e,xjr,ieo,cr,tS,$jr,om,kjr,Ooe,Sjr,Rjr,Voe,Pjr,Bjr,Ijr,aS,Njr,s6e,qjr,jjr,Djr,Ut,nS,Gjr,l6e,Ojr,Vjr,rm,Xjr,i6e,zjr,Qjr,Xoe,Wjr,Ujr,Hjr,w0,Jjr,Dr,sS,Yjr,d6e,Kjr,Zjr,xn,eDr,c6e,oDr,rDr,m6e,tDr,aDr,f6e,nDr,sDr,lDr,tm,A0,g6e,iDr,dDr,zoe,cDr,mDr,fDr,L0,h6e,gDr,hDr,Qoe,uDr,pDr,_Dr,y0,u6e,bDr,vDr,Woe,FDr,TDr,MDr,x0,deo,am,$0,p6e,lS,EDr,_6e,CDr,ceo,mr,iS,wDr,nm,ADr,Uoe,LDr,yDr,Hoe,xDr,$Dr,kDr,dS,SDr,b6e,RDr,PDr,BDr,Ht,cS,IDr,v6e,NDr,qDr,sm,jDr,F6e,DDr,GDr,Joe,ODr,VDr,XDr,k0,zDr,Gr,mS,QDr,T6e,WDr,UDr,$n,HDr,M6e,JDr,YDr,E6e,KDr,ZDr,C6e,eGr,oGr,rGr,fe,S0,w6e,tGr,aGr,Yoe,nGr,sGr,lGr,R0,A6e,iGr,dGr,Koe,cGr,mGr,fGr,P0,L6e,gGr,hGr,Zoe,uGr,pGr,_Gr,B0,y6e,bGr,vGr,ere,FGr,TGr,MGr,I0,x6e,EGr,CGr,ore,wGr,AGr,LGr,N0,$6e,yGr,xGr,rre,$Gr,kGr,SGr,q0,k6e,RGr,PGr,tre,BGr,IGr,NGr,j0,S6e,qGr,jGr,are,DGr,GGr,OGr,D0,R6e,VGr,XGr,nre,zGr,QGr,WGr,G0,P6e,UGr,HGr,sre,JGr,YGr,KGr,O0,B6e,ZGr,eOr,lre,oOr,rOr,tOr,V0,I6e,aOr,nOr,ire,sOr,lOr,iOr,X0,N6e,dOr,cOr,dre,mOr,fOr,gOr,z0,q6e,hOr,uOr,cre,pOr,_Or,bOr,Q0,j6e,vOr,FOr,mre,TOr,MOr,EOr,W0,D6e,COr,wOr,fre,AOr,LOr,yOr,U0,G6e,xOr,$Or,gre,kOr,SOr,ROr,H0,O6e,POr,BOr,hre,IOr,NOr,qOr,J0,V6e,jOr,DOr,ure,GOr,OOr,VOr,Y0,X6e,XOr,zOr,pre,QOr,WOr,UOr,K0,meo,lm,Z0,z6e,fS,HOr,Q6e,JOr,feo,fr,gS,YOr,im,KOr,_re,ZOr,eVr,bre,oVr,rVr,tVr,hS,aVr,W6e,nVr,sVr,lVr,Jt,uS,iVr,U6e,dVr,cVr,dm,mVr,H6e,fVr,gVr,vre,hVr,uVr,pVr,ew,_Vr,Or,pS,bVr,J6e,vVr,FVr,kn,TVr,Y6e,MVr,EVr,K6e,CVr,wVr,Z6e,AVr,LVr,yVr,ye,ow,e7e,xVr,$Vr,Fre,kVr,SVr,RVr,rw,o7e,PVr,BVr,Tre,IVr,NVr,qVr,tw,r7e,jVr,DVr,Mre,GVr,OVr,VVr,aw,t7e,XVr,zVr,Ere,QVr,WVr,UVr,nw,a7e,HVr,JVr,Cre,YVr,KVr,ZVr,sw,n7e,eXr,oXr,wre,rXr,tXr,aXr,lw,s7e,nXr,sXr,Are,lXr,iXr,dXr,iw,l7e,cXr,mXr,Lre,fXr,gXr,hXr,dw,i7e,uXr,pXr,yre,_Xr,bXr,vXr,cw,d7e,FXr,TXr,xre,MXr,EXr,CXr,mw,geo,cm,fw,c7e,_S,wXr,m7e,AXr,heo,gr,bS,LXr,mm,yXr,$re,xXr,$Xr,kre,kXr,SXr,RXr,vS,PXr,f7e,BXr,IXr,NXr,Yt,FS,qXr,g7e,jXr,DXr,fm,GXr,h7e,OXr,VXr,Sre,XXr,zXr,QXr,gw,WXr,Vr,TS,UXr,u7e,HXr,JXr,Sn,YXr,p7e,KXr,ZXr,_7e,ezr,ozr,b7e,rzr,tzr,azr,re,hw,v7e,nzr,szr,Rre,lzr,izr,dzr,uw,F7e,czr,mzr,Pre,fzr,gzr,hzr,pw,T7e,uzr,pzr,Bre,_zr,bzr,vzr,_w,M7e,Fzr,Tzr,Ire,Mzr,Ezr,Czr,bw,E7e,wzr,Azr,Nre,Lzr,yzr,xzr,vw,C7e,$zr,kzr,qre,Szr,Rzr,Pzr,Fw,w7e,Bzr,Izr,jre,Nzr,qzr,jzr,Tw,A7e,Dzr,Gzr,Dre,Ozr,Vzr,Xzr,Mw,L7e,zzr,Qzr,Gre,Wzr,Uzr,Hzr,Ew,y7e,Jzr,Yzr,Ore,Kzr,Zzr,eQr,Cw,x7e,oQr,rQr,Vre,tQr,aQr,nQr,ww,$7e,sQr,lQr,Xre,iQr,dQr,cQr,Aw,k7e,mQr,fQr,zre,gQr,hQr,uQr,Lw,S7e,pQr,_Qr,Qre,bQr,vQr,FQr,yw,R7e,TQr,MQr,Wre,EQr,CQr,wQr,xw,P7e,AQr,LQr,Ure,yQr,xQr,$Qr,$w,B7e,kQr,SQr,Hre,RQr,PQr,BQr,kw,I7e,IQr,NQr,Jre,qQr,jQr,DQr,Sw,N7e,GQr,OQr,Yre,VQr,XQr,zQr,Rw,q7e,QQr,WQr,Kre,UQr,HQr,JQr,Pw,j7e,YQr,KQr,Zre,ZQr,eWr,oWr,Bw,D7e,rWr,tWr,ete,aWr,nWr,sWr,Iw,G7e,lWr,iWr,ote,dWr,cWr,mWr,Nw,O7e,fWr,gWr,rte,hWr,uWr,pWr,qw,V7e,_Wr,bWr,tte,vWr,FWr,TWr,jw,X7e,MWr,EWr,ate,CWr,wWr,AWr,Dw,z7e,LWr,yWr,nte,xWr,$Wr,kWr,Gw,ueo,gm,Ow,Q7e,MS,SWr,W7e,RWr,peo,hr,ES,PWr,hm,BWr,ste,IWr,NWr,lte,qWr,jWr,DWr,CS,GWr,U7e,OWr,VWr,XWr,Kt,wS,zWr,H7e,QWr,WWr,um,UWr,J7e,HWr,JWr,ite,YWr,KWr,ZWr,Vw,eUr,Xr,AS,oUr,Y7e,rUr,tUr,Rn,aUr,K7e,nUr,sUr,Z7e,lUr,iUr,eLe,dUr,cUr,mUr,ve,Xw,oLe,fUr,gUr,dte,hUr,uUr,pUr,zw,rLe,_Ur,bUr,cte,vUr,FUr,TUr,Qw,tLe,MUr,EUr,mte,CUr,wUr,AUr,Ww,aLe,LUr,yUr,fte,xUr,$Ur,kUr,Uw,nLe,SUr,RUr,gte,PUr,BUr,IUr,Hw,sLe,NUr,qUr,hte,jUr,DUr,GUr,Jw,lLe,OUr,VUr,ute,XUr,zUr,QUr,Yw,iLe,WUr,UUr,pte,HUr,JUr,YUr,Kw,dLe,KUr,ZUr,_te,eHr,oHr,rHr,Zw,cLe,tHr,aHr,bte,nHr,sHr,lHr,eA,mLe,iHr,dHr,vte,cHr,mHr,fHr,oA,fLe,gHr,hHr,Fte,uHr,pHr,_Hr,rA,gLe,bHr,vHr,Tte,FHr,THr,MHr,tA,hLe,EHr,CHr,Mte,wHr,AHr,LHr,aA,uLe,yHr,xHr,Ete,$Hr,kHr,SHr,nA,pLe,RHr,PHr,Cte,BHr,IHr,NHr,sA,_Le,qHr,jHr,wte,DHr,GHr,OHr,lA,_eo,pm,iA,bLe,LS,VHr,vLe,XHr,beo,ur,yS,zHr,_m,QHr,Ate,WHr,UHr,Lte,HHr,JHr,YHr,xS,KHr,FLe,ZHr,eJr,oJr,Zt,$S,rJr,TLe,tJr,aJr,bm,nJr,MLe,sJr,lJr,yte,iJr,dJr,cJr,dA,mJr,zr,kS,fJr,ELe,gJr,hJr,Pn,uJr,CLe,pJr,_Jr,wLe,bJr,vJr,ALe,FJr,TJr,MJr,SS,cA,LLe,EJr,CJr,xte,wJr,AJr,LJr,mA,yLe,yJr,xJr,$te,$Jr,kJr,SJr,fA,veo,vm,gA,xLe,RS,RJr,$Le,PJr,Feo,pr,PS,BJr,Fm,IJr,kte,NJr,qJr,Ste,jJr,DJr,GJr,BS,OJr,kLe,VJr,XJr,zJr,ea,IS,QJr,SLe,WJr,UJr,Tm,HJr,RLe,JJr,YJr,Rte,KJr,ZJr,eYr,hA,oYr,Qr,NS,rYr,PLe,tYr,aYr,Bn,nYr,BLe,sYr,lYr,ILe,iYr,dYr,NLe,cYr,mYr,fYr,qLe,uA,jLe,gYr,hYr,Pte,uYr,pYr,_Yr,pA,Teo,Mm,_A,DLe,qS,bYr,GLe,vYr,Meo,_r,jS,FYr,Em,TYr,Bte,MYr,EYr,Ite,CYr,wYr,AYr,DS,LYr,OLe,yYr,xYr,$Yr,oa,GS,kYr,VLe,SYr,RYr,Cm,PYr,XLe,BYr,IYr,Nte,NYr,qYr,jYr,bA,DYr,Wr,OS,GYr,zLe,OYr,VYr,In,XYr,QLe,zYr,QYr,WLe,WYr,UYr,ULe,HYr,JYr,YYr,HLe,vA,JLe,KYr,ZYr,qte,eKr,oKr,rKr,FA,Eeo,wm,TA,YLe,VS,tKr,KLe,aKr,Ceo,br,XS,nKr,Am,sKr,jte,lKr,iKr,Dte,dKr,cKr,mKr,zS,fKr,ZLe,gKr,hKr,uKr,ra,QS,pKr,eye,_Kr,bKr,Lm,vKr,oye,FKr,TKr,Gte,MKr,EKr,CKr,MA,wKr,Ur,WS,AKr,rye,LKr,yKr,Nn,xKr,tye,$Kr,kKr,aye,SKr,RKr,nye,PKr,BKr,IKr,de,EA,sye,NKr,qKr,Ote,jKr,DKr,GKr,CA,lye,OKr,VKr,Vte,XKr,zKr,QKr,wA,iye,WKr,UKr,Xte,HKr,JKr,YKr,AA,dye,KKr,ZKr,zte,eZr,oZr,rZr,LA,cye,tZr,aZr,Qte,nZr,sZr,lZr,yA,mye,iZr,dZr,Wte,cZr,mZr,fZr,xA,fye,gZr,hZr,Ute,uZr,pZr,_Zr,$A,gye,bZr,vZr,Hte,FZr,TZr,MZr,kA,hye,EZr,CZr,Jte,wZr,AZr,LZr,SA,uye,yZr,xZr,Yte,$Zr,kZr,SZr,RA,pye,RZr,PZr,Kte,BZr,IZr,NZr,PA,_ye,qZr,jZr,Zte,DZr,GZr,OZr,BA,bye,VZr,XZr,eae,zZr,QZr,WZr,IA,vye,UZr,HZr,oae,JZr,YZr,KZr,NA,Fye,ZZr,eet,rae,oet,ret,tet,qA,Tye,aet,net,tae,set,iet,det,jA,Mye,cet,met,aae,fet,get,het,DA,Eye,uet,pet,nae,_et,bet,vet,GA,Cye,Fet,Tet,sae,Met,Eet,Cet,OA,wye,wet,Aet,lae,Let,yet,xet,VA,Aye,$et,ket,iae,Set,Ret,Pet,XA,weo,ym,zA,Lye,US,Bet,yye,Iet,Aeo,vr,HS,Net,xm,qet,dae,jet,Det,cae,Get,Oet,Vet,JS,Xet,xye,zet,Qet,Wet,ta,YS,Uet,$ye,Het,Jet,$m,Yet,kye,Ket,Zet,mae,eot,oot,rot,QA,tot,Hr,KS,aot,Sye,not,sot,qn,lot,Rye,iot,dot,Pye,cot,mot,Bye,fot,got,hot,ce,WA,Iye,uot,pot,fae,_ot,bot,vot,UA,Nye,Fot,Tot,gae,Mot,Eot,Cot,HA,qye,wot,Aot,hae,Lot,yot,xot,JA,jye,$ot,kot,uae,Sot,Rot,Pot,YA,Dye,Bot,Iot,pae,Not,qot,jot,KA,Gye,Dot,Got,_ae,Oot,Vot,Xot,ZA,Oye,zot,Qot,bae,Wot,Uot,Hot,e6,Vye,Jot,Yot,vae,Kot,Zot,ert,o6,Xye,ort,rrt,Fae,trt,art,nrt,r6,zye,srt,lrt,Tae,irt,drt,crt,t6,Qye,mrt,frt,Mae,grt,hrt,urt,a6,Wye,prt,_rt,Eae,brt,vrt,Frt,n6,Uye,Trt,Mrt,Cae,Ert,Crt,wrt,s6,Hye,Art,Lrt,wae,yrt,xrt,$rt,l6,Jye,krt,Srt,Aae,Rrt,Prt,Brt,i6,Yye,Irt,Nrt,Lae,qrt,jrt,Drt,d6,Kye,Grt,Ort,yae,Vrt,Xrt,zrt,c6,Zye,Qrt,Wrt,xae,Urt,Hrt,Jrt,m6,e8e,Yrt,Krt,$ae,Zrt,ett,ott,f6,o8e,rtt,ttt,kae,att,ntt,stt,g6,r8e,ltt,itt,Sae,dtt,ctt,mtt,h6,Leo,km,u6,t8e,ZS,ftt,a8e,gtt,yeo,Fr,eR,htt,Sm,utt,Rae,ptt,_tt,Pae,btt,vtt,Ftt,oR,Ttt,n8e,Mtt,Ett,Ctt,aa,rR,wtt,s8e,Att,Ltt,Rm,ytt,l8e,xtt,$tt,Bae,ktt,Stt,Rtt,p6,Ptt,Jr,tR,Btt,i8e,Itt,Ntt,jn,qtt,d8e,jtt,Dtt,c8e,Gtt,Ott,m8e,Vtt,Xtt,ztt,f8e,_6,g8e,Qtt,Wtt,Iae,Utt,Htt,Jtt,b6,xeo,Pm,v6,h8e,aR,Ytt,u8e,Ktt,$eo,Tr,nR,Ztt,Bm,eat,Nae,oat,rat,qae,tat,aat,nat,sR,sat,p8e,lat,iat,dat,na,lR,cat,_8e,mat,fat,Im,gat,b8e,hat,uat,jae,pat,_at,bat,F6,vat,Yr,iR,Fat,v8e,Tat,Mat,Dn,Eat,F8e,Cat,wat,T8e,Aat,Lat,M8e,yat,xat,$at,E8e,T6,C8e,kat,Sat,Dae,Rat,Pat,Bat,M6,keo,Nm,E6,w8e,dR,Iat,A8e,Nat,Seo,Mr,cR,qat,qm,jat,Gae,Dat,Gat,Oae,Oat,Vat,Xat,mR,zat,L8e,Qat,Wat,Uat,sa,fR,Hat,y8e,Jat,Yat,jm,Kat,x8e,Zat,ent,Vae,ont,rnt,tnt,C6,ant,Kr,gR,nnt,$8e,snt,lnt,Gn,int,k8e,dnt,cnt,S8e,mnt,fnt,R8e,gnt,hnt,unt,te,w6,P8e,pnt,_nt,Xae,bnt,vnt,Fnt,A6,B8e,Tnt,Mnt,zae,Ent,Cnt,wnt,L6,I8e,Ant,Lnt,Qae,ynt,xnt,$nt,y6,N8e,knt,Snt,Wae,Rnt,Pnt,Bnt,x6,q8e,Int,Nnt,Uae,qnt,jnt,Dnt,$6,j8e,Gnt,Ont,Hae,Vnt,Xnt,znt,k6,D8e,Qnt,Wnt,Jae,Unt,Hnt,Jnt,S6,G8e,Ynt,Knt,Yae,Znt,est,ost,R6,O8e,rst,tst,Kae,ast,nst,sst,P6,V8e,lst,ist,Zae,dst,cst,mst,B6,X8e,fst,gst,ene,hst,ust,pst,I6,z8e,_st,bst,one,vst,Fst,Tst,N6,Q8e,Mst,Est,rne,Cst,wst,Ast,q6,W8e,Lst,yst,tne,xst,$st,kst,j6,U8e,Sst,Rst,ane,Pst,Bst,Ist,D6,H8e,Nst,qst,nne,jst,Dst,Gst,G6,J8e,Ost,Vst,sne,Xst,zst,Qst,O6,Y8e,Wst,Ust,lne,Hst,Jst,Yst,V6,K8e,Kst,Zst,ine,elt,olt,rlt,X6,Z8e,tlt,alt,dne,nlt,slt,llt,z6,e9e,ilt,dlt,cne,clt,mlt,flt,Q6,o9e,glt,hlt,mne,ult,plt,_lt,W6,r9e,blt,vlt,fne,Flt,Tlt,Mlt,U6,t9e,Elt,Clt,gne,wlt,Alt,Llt,H6,a9e,ylt,xlt,hne,$lt,klt,Slt,J6,n9e,Rlt,Plt,une,Blt,Ilt,Nlt,Y6,s9e,qlt,jlt,pne,Dlt,Glt,Olt,K6,Reo,Dm,Z6,l9e,hR,Vlt,i9e,Xlt,Peo,Er,uR,zlt,Gm,Qlt,_ne,Wlt,Ult,bne,Hlt,Jlt,Ylt,pR,Klt,d9e,Zlt,eit,oit,la,_R,rit,c9e,tit,ait,Om,nit,m9e,sit,lit,vne,iit,dit,cit,e7,mit,Zr,bR,fit,f9e,git,hit,On,uit,g9e,pit,_it,h9e,bit,vit,u9e,Fit,Tit,Mit,xe,o7,p9e,Eit,Cit,Fne,wit,Ait,Lit,r7,_9e,yit,xit,Tne,$it,kit,Sit,t7,b9e,Rit,Pit,Mne,Bit,Iit,Nit,a7,v9e,qit,jit,Ene,Dit,Git,Oit,n7,F9e,Vit,Xit,Cne,zit,Qit,Wit,s7,T9e,Uit,Hit,wne,Jit,Yit,Kit,l7,M9e,Zit,edt,Ane,odt,rdt,tdt,i7,E9e,adt,ndt,Lne,sdt,ldt,idt,d7,C9e,ddt,cdt,yne,mdt,fdt,gdt,c7,w9e,hdt,udt,xne,pdt,_dt,bdt,m7,Beo,Vm,f7,A9e,vR,vdt,L9e,Fdt,Ieo,Cr,FR,Tdt,Xm,Mdt,$ne,Edt,Cdt,kne,wdt,Adt,Ldt,TR,ydt,y9e,xdt,$dt,kdt,ia,MR,Sdt,x9e,Rdt,Pdt,zm,Bdt,$9e,Idt,Ndt,Sne,qdt,jdt,Ddt,g7,Gdt,et,ER,Odt,k9e,Vdt,Xdt,Vn,zdt,S9e,Qdt,Wdt,R9e,Udt,Hdt,P9e,Jdt,Ydt,Kdt,Ee,h7,B9e,Zdt,ect,Rne,oct,rct,tct,u7,I9e,act,nct,Pne,sct,lct,ict,p7,N9e,dct,cct,Bne,mct,fct,gct,_7,q9e,hct,uct,Ine,pct,_ct,bct,b7,j9e,vct,Fct,Nne,Tct,Mct,Ect,v7,D9e,Cct,wct,qne,Act,Lct,yct,F7,G9e,xct,$ct,jne,kct,Sct,Rct,T7,O9e,Pct,Bct,Dne,Ict,Nct,qct,M7,V9e,jct,Dct,Gne,Gct,Oct,Vct,E7,X9e,Xct,zct,One,Qct,Wct,Uct,C7,z9e,Hct,Jct,Vne,Yct,Kct,Zct,w7,Q9e,emt,omt,Xne,rmt,tmt,amt,A7,W9e,nmt,smt,zne,lmt,imt,dmt,L7,Neo,Qm,y7,U9e,CR,cmt,H9e,mmt,qeo,wr,wR,fmt,Wm,gmt,Qne,hmt,umt,Wne,pmt,_mt,bmt,AR,vmt,J9e,Fmt,Tmt,Mmt,da,LR,Emt,Y9e,Cmt,wmt,Um,Amt,K9e,Lmt,ymt,Une,xmt,$mt,kmt,x7,Smt,ot,yR,Rmt,Z9e,Pmt,Bmt,Xn,Imt,exe,Nmt,qmt,oxe,jmt,Dmt,rxe,Gmt,Omt,Vmt,$e,$7,txe,Xmt,zmt,Hne,Qmt,Wmt,Umt,k7,axe,Hmt,Jmt,Jne,Ymt,Kmt,Zmt,S7,nxe,eft,oft,Yne,rft,tft,aft,R7,sxe,nft,sft,Kne,lft,ift,dft,P7,lxe,cft,mft,Zne,fft,gft,hft,B7,ixe,uft,pft,ese,_ft,bft,vft,I7,dxe,Fft,Tft,ose,Mft,Eft,Cft,N7,cxe,wft,Aft,rse,Lft,yft,xft,q7,mxe,$ft,kft,tse,Sft,Rft,Pft,j7,fxe,Bft,Ift,ase,Nft,qft,jft,D7,jeo,Hm,G7,gxe,xR,Dft,hxe,Gft,Deo,Ar,$R,Oft,Jm,Vft,nse,Xft,zft,sse,Qft,Wft,Uft,kR,Hft,uxe,Jft,Yft,Kft,ca,SR,Zft,pxe,egt,ogt,Ym,rgt,_xe,tgt,agt,lse,ngt,sgt,lgt,O7,igt,rt,RR,dgt,bxe,cgt,mgt,zn,fgt,vxe,ggt,hgt,Fxe,ugt,pgt,Txe,_gt,bgt,vgt,ke,V7,Mxe,Fgt,Tgt,ise,Mgt,Egt,Cgt,X7,Exe,wgt,Agt,dse,Lgt,ygt,xgt,z7,Cxe,$gt,kgt,cse,Sgt,Rgt,Pgt,Q7,wxe,Bgt,Igt,mse,Ngt,qgt,jgt,W7,Axe,Dgt,Ggt,fse,Ogt,Vgt,Xgt,U7,Lxe,zgt,Qgt,gse,Wgt,Ugt,Hgt,H7,yxe,Jgt,Ygt,hse,Kgt,Zgt,eht,J7,xxe,oht,rht,use,tht,aht,nht,Y7,$xe,sht,lht,pse,iht,dht,cht,K7,kxe,mht,fht,_se,ght,hht,uht,Z7,Geo,Km,eL,Sxe,PR,pht,Rxe,_ht,Oeo,Lr,BR,bht,Zm,vht,bse,Fht,Tht,vse,Mht,Eht,Cht,IR,wht,Pxe,Aht,Lht,yht,ma,NR,xht,Bxe,$ht,kht,ef,Sht,Ixe,Rht,Pht,Fse,Bht,Iht,Nht,oL,qht,tt,qR,jht,Nxe,Dht,Ght,Qn,Oht,qxe,Vht,Xht,jxe,zht,Qht,Dxe,Wht,Uht,Hht,Se,rL,Gxe,Jht,Yht,Tse,Kht,Zht,eut,tL,Oxe,out,rut,Mse,tut,aut,nut,aL,Vxe,sut,lut,Ese,iut,dut,cut,nL,Xxe,mut,fut,Cse,gut,hut,uut,sL,zxe,put,_ut,wse,but,vut,Fut,lL,Qxe,Tut,Mut,Ase,Eut,Cut,wut,iL,Wxe,Aut,Lut,Lse,yut,xut,$ut,dL,Uxe,kut,Sut,yse,Rut,Put,But,cL,Hxe,Iut,Nut,xse,qut,jut,Dut,mL,Jxe,Gut,Out,$se,Vut,Xut,zut,fL,Veo,of,gL,Yxe,jR,Qut,Kxe,Wut,Xeo,yr,DR,Uut,rf,Hut,kse,Jut,Yut,Sse,Kut,Zut,ept,GR,opt,Zxe,rpt,tpt,apt,fa,OR,npt,e$e,spt,lpt,tf,ipt,o$e,dpt,cpt,Rse,mpt,fpt,gpt,hL,hpt,at,VR,upt,r$e,ppt,_pt,Wn,bpt,t$e,vpt,Fpt,a$e,Tpt,Mpt,n$e,Ept,Cpt,wpt,Re,uL,s$e,Apt,Lpt,Pse,ypt,xpt,$pt,pL,l$e,kpt,Spt,Bse,Rpt,Ppt,Bpt,_L,i$e,Ipt,Npt,Ise,qpt,jpt,Dpt,bL,d$e,Gpt,Opt,Nse,Vpt,Xpt,zpt,vL,c$e,Qpt,Wpt,qse,Upt,Hpt,Jpt,FL,m$e,Ypt,Kpt,jse,Zpt,e_t,o_t,TL,f$e,r_t,t_t,Dse,a_t,n_t,s_t,ML,g$e,l_t,i_t,Gse,d_t,c_t,m_t,EL,h$e,f_t,g_t,Ose,h_t,u_t,p_t,CL,u$e,__t,b_t,Vse,v_t,F_t,T_t,wL,zeo,af,AL,p$e,XR,M_t,_$e,E_t,Qeo,xr,zR,C_t,nf,w_t,Xse,A_t,L_t,zse,y_t,x_t,$_t,QR,k_t,b$e,S_t,R_t,P_t,ga,WR,B_t,v$e,I_t,N_t,sf,q_t,F$e,j_t,D_t,Qse,G_t,O_t,V_t,LL,X_t,nt,UR,z_t,T$e,Q_t,W_t,Un,U_t,M$e,H_t,J_t,E$e,Y_t,K_t,C$e,Z_t,ebt,obt,Xe,yL,w$e,rbt,tbt,Wse,abt,nbt,sbt,xL,A$e,lbt,ibt,Use,dbt,cbt,mbt,$L,L$e,fbt,gbt,Hse,hbt,ubt,pbt,kL,y$e,_bt,bbt,Jse,vbt,Fbt,Tbt,SL,x$e,Mbt,Ebt,Yse,Cbt,wbt,Abt,RL,$$e,Lbt,ybt,Kse,xbt,$bt,kbt,PL,k$e,Sbt,Rbt,Zse,Pbt,Bbt,Ibt,BL,S$e,Nbt,qbt,ele,jbt,Dbt,Gbt,IL,Weo,lf,NL,R$e,HR,Obt,P$e,Vbt,Ueo,$r,JR,Xbt,df,zbt,ole,Qbt,Wbt,rle,Ubt,Hbt,Jbt,YR,Ybt,B$e,Kbt,Zbt,e2t,ha,KR,o2t,I$e,r2t,t2t,cf,a2t,N$e,n2t,s2t,tle,l2t,i2t,d2t,qL,c2t,st,ZR,m2t,q$e,f2t,g2t,Hn,h2t,j$e,u2t,p2t,D$e,_2t,b2t,G$e,v2t,F2t,T2t,ze,jL,O$e,M2t,E2t,ale,C2t,w2t,A2t,DL,V$e,L2t,y2t,nle,x2t,$2t,k2t,GL,X$e,S2t,R2t,sle,P2t,B2t,I2t,OL,z$e,N2t,q2t,lle,j2t,D2t,G2t,VL,Q$e,O2t,V2t,ile,X2t,z2t,Q2t,XL,W$e,W2t,U2t,dle,H2t,J2t,Y2t,zL,U$e,K2t,Z2t,cle,e1t,o1t,r1t,QL,H$e,t1t,a1t,mle,n1t,s1t,l1t,WL,Heo,mf,UL,J$e,eP,i1t,Y$e,d1t,Jeo,kr,oP,c1t,ff,m1t,fle,f1t,g1t,gle,h1t,u1t,p1t,rP,_1t,K$e,b1t,v1t,F1t,ua,tP,T1t,Z$e,M1t,E1t,gf,C1t,eke,w1t,A1t,hle,L1t,y1t,x1t,HL,$1t,lt,aP,k1t,oke,S1t,R1t,Jn,P1t,rke,B1t,I1t,tke,N1t,q1t,ake,j1t,D1t,G1t,nke,JL,ske,O1t,V1t,ule,X1t,z1t,Q1t,YL,Yeo,hf,KL,lke,nP,W1t,ike,U1t,Keo,Sr,sP,H1t,uf,J1t,ple,Y1t,K1t,_le,Z1t,evt,ovt,lP,rvt,dke,tvt,avt,nvt,pa,iP,svt,cke,lvt,ivt,pf,dvt,mke,cvt,mvt,ble,fvt,gvt,hvt,ZL,uvt,it,dP,pvt,fke,_vt,bvt,Yn,vvt,gke,Fvt,Tvt,hke,Mvt,Evt,uke,Cvt,wvt,Avt,cP,ey,pke,Lvt,yvt,vle,xvt,$vt,kvt,oy,_ke,Svt,Rvt,Fle,Pvt,Bvt,Ivt,ry,Zeo,_f,ty,bke,mP,Nvt,vke,qvt,eoo,Rr,fP,jvt,bf,Dvt,Tle,Gvt,Ovt,Mle,Vvt,Xvt,zvt,gP,Qvt,Fke,Wvt,Uvt,Hvt,_a,hP,Jvt,Tke,Yvt,Kvt,vf,Zvt,Mke,eFt,oFt,Ele,rFt,tFt,aFt,ay,nFt,dt,uP,sFt,Eke,lFt,iFt,Kn,dFt,Cke,cFt,mFt,wke,fFt,gFt,Ake,hFt,uFt,pFt,Lke,ny,yke,_Ft,bFt,Cle,vFt,FFt,TFt,sy,ooo;return d=new oe({}),Qa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),G9=new oe({}),O9=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),yf=new MFt({props:{warning:!0,$$slots:{default:[opa]},$$scope:{ctx:$}}}),V9=new oe({}),X9=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L647"}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L670"}}),Yh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[rpa]},$$scope:{ctx:$}}}),U9=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L793"}}),H9=new oe({}),J9=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L427"}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L441"}}),Pu=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[tpa]},$$scope:{ctx:$}}}),ex=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L642"}}),ox=new oe({}),rx=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L216"}}),wp=new MFt({props:{$$slots:{default:[apa]},$$scope:{ctx:$}}}),Ap=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[npa]},$$scope:{ctx:$}}}),sx=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L343"}}),lx=new oe({}),ix=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L94"}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L108"}}),Jp=new MFt({props:{$$slots:{default:[spa]},$$scope:{ctx:$}}}),Yp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[lpa]},$$scope:{ctx:$}}}),fx=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L275"}}),gx=new oe({}),hx=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L849"}}),px=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ipa]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[dpa]},$$scope:{ctx:$}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L856"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[cpa]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mpa]},$$scope:{ctx:$}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L871"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[fpa]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sv=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gpa]},$$scope:{ctx:$}}}),yx=new oe({}),xx=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[hpa]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[upa]},$$scope:{ctx:$}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ppa]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_pa]},$$scope:{ctx:$}}}),qx=new oe({}),jx=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[bpa]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vpa]},$$scope:{ctx:$}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L950"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Fpa]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Tpa]},$$scope:{ctx:$}}}),Ux=new oe({}),Hx=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L957"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Mpa]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Epa]},$$scope:{ctx:$}}}),Zx=new oe({}),e$=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L943"}}),r$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Cpa]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wpa]},$$scope:{ctx:$}}}),a$=new oe({}),n$=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L903"}}),l$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Apa]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Lpa]},$$scope:{ctx:$}}}),d$=new oe({}),c$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L910"}}),f$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ypa]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xpa]},$$scope:{ctx:$}}}),h$=new oe({}),u$=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L932"}}),_$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[$pa]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[kpa]},$$scope:{ctx:$}}}),v$=new oe({}),F$=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L966"}}),M$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Spa]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Rpa]},$$scope:{ctx:$}}}),C$=new oe({}),w$=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1005"}}),L$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Ppa]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Bpa]},$$scope:{ctx:$}}}),x$=new oe({}),$$=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1012"}}),S$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Ipa]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Npa]},$$scope:{ctx:$}}}),P$=new oe({}),B$=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L921"}}),N$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[qpa]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[jpa]},$$scope:{ctx:$}}}),j$=new oe({}),D$=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1019"}}),O$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Dpa]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Gpa]},$$scope:{ctx:$}}}),X$=new oe({}),z$=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1042"}}),W$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Opa]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Vpa]},$$scope:{ctx:$}}}),H$=new oe({}),J$=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1026"}}),K$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Xpa]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[zpa]},$$scope:{ctx:$}}}),ek=new oe({}),ok=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1033"}}),tk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Qpa]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Wpa]},$$scope:{ctx:$}}}),sk=new oe({}),lk=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1051"}}),dk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Upa]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Hpa]},$$scope:{ctx:$}}}),mk=new oe({}),fk=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1058"}}),hk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Jpa]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Ypa]},$$scope:{ctx:$}}}),pk=new oe({}),_k=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L998"}}),vk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Kpa]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Zpa]},$$scope:{ctx:$}}}),Tk=new oe({}),Mk=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L973"}}),Ck=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[e_a]},$$scope:{ctx:$}}}),wk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[o_a]},$$scope:{ctx:$}}}),Ak=new oe({}),Lk=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L980"}}),xk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[r_a]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[t_a]},$$scope:{ctx:$}}}),kk=new oe({}),Sk=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L989"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[a_a]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[n_a]},$$scope:{ctx:$}}}),Ik=new oe({}),Nk=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),jk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[s_a]},$$scope:{ctx:$}}}),Dk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[l_a]},$$scope:{ctx:$}}}),Gk=new oe({}),Ok=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Xk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[i_a]},$$scope:{ctx:$}}}),zk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[d_a]},$$scope:{ctx:$}}}),Qk=new oe({}),Wk=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[c_a]},$$scope:{ctx:$}}}),Jk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[m_a]},$$scope:{ctx:$}}}),Yk=new oe({}),Kk=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),eS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[f_a]},$$scope:{ctx:$}}}),oS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[g_a]},$$scope:{ctx:$}}}),rS=new oe({}),tS=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),nS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[h_a]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[u_a]},$$scope:{ctx:$}}}),lS=new oe({}),iS=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),cS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[p_a]},$$scope:{ctx:$}}}),mS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[__a]},$$scope:{ctx:$}}}),fS=new oe({}),gS=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),uS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[b_a]},$$scope:{ctx:$}}}),pS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[v_a]},$$scope:{ctx:$}}}),_S=new oe({}),bS=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),FS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[F_a]},$$scope:{ctx:$}}}),TS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[T_a]},$$scope:{ctx:$}}}),MS=new oe({}),ES=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L559"}}),wS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[M_a]},$$scope:{ctx:$}}}),AS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[E_a]},$$scope:{ctx:$}}}),LS=new oe({}),yS=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L566"}}),$S=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[C_a]},$$scope:{ctx:$}}}),kS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[w_a]},$$scope:{ctx:$}}}),RS=new oe({}),PS=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),IS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[A_a]},$$scope:{ctx:$}}}),NS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[L_a]},$$scope:{ctx:$}}}),qS=new oe({}),jS=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),GS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bA=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[y_a]},$$scope:{ctx:$}}}),OS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FA=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[x_a]},$$scope:{ctx:$}}}),VS=new oe({}),XS=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),QS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MA=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$_a]},$$scope:{ctx:$}}}),WS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[k_a]},$$scope:{ctx:$}}}),US=new oe({}),HS=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),YS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QA=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[S_a]},$$scope:{ctx:$}}}),KS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[R_a]},$$scope:{ctx:$}}}),ZS=new oe({}),eR=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),rR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[P_a]},$$scope:{ctx:$}}}),tR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[B_a]},$$scope:{ctx:$}}}),aR=new oe({}),nR=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L575"}}),lR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[I_a]},$$scope:{ctx:$}}}),iR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[N_a]},$$scope:{ctx:$}}}),dR=new oe({}),cR=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),fR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[q_a]},$$scope:{ctx:$}}}),gR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[j_a]},$$scope:{ctx:$}}}),hR=new oe({}),uR=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),_R=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[D_a]},$$scope:{ctx:$}}}),bR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[G_a]},$$scope:{ctx:$}}}),vR=new oe({}),FR=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),MR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[O_a]},$$scope:{ctx:$}}}),ER=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[V_a]},$$scope:{ctx:$}}}),CR=new oe({}),wR=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),LR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[X_a]},$$scope:{ctx:$}}}),yR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[z_a]},$$scope:{ctx:$}}}),xR=new oe({}),$R=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),SR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Q_a]},$$scope:{ctx:$}}}),RR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[W_a]},$$scope:{ctx:$}}}),PR=new oe({}),BR=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),NR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oL=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[U_a]},$$scope:{ctx:$}}}),qR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fL=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[H_a]},$$scope:{ctx:$}}}),jR=new oe({}),DR=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),OR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hL=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[J_a]},$$scope:{ctx:$}}}),VR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wL=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Y_a]},$$scope:{ctx:$}}}),XR=new oe({}),zR=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),WR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LL=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[K_a]},$$scope:{ctx:$}}}),UR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IL=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Z_a]},$$scope:{ctx:$}}}),HR=new oe({}),JR=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),KR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qL=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eba]},$$scope:{ctx:$}}}),ZR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WL=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oba]},$$scope:{ctx:$}}}),eP=new oe({}),oP=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),tP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HL=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rba]},$$scope:{ctx:$}}}),aP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YL=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tba]},$$scope:{ctx:$}}}),nP=new oe({}),sP=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),iP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZL=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aba]},$$scope:{ctx:$}}}),dP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ry=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nba]},$$scope:{ctx:$}}}),mP=new oe({}),fP=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),hP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ay=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sba]},$$scope:{ctx:$}}}),uP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lba]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),td=o("Auto Classes"),Ef=l(),pt=a("p"),ad=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=a("code"),N9=o("from_pretrained()"),Cf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),sd=o("Instantiating one of "),es=a("a"),q9=o("AutoConfig"),os=o(", "),rs=a("a"),j9=o("AutoModel"),ld=o(`, and
`),ts=a("a"),D9=o("AutoTokenizer"),id=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),F(Qa.$$.fragment),Je=l(),Ae=a("p"),GB=o("will create a model that is an instance of "),dd=a("a"),OB=o("BertModel"),VB=o("."),xo=l(),Wa=a("p"),XB=o("There is one class of "),Af=a("code"),zB=o("AutoModel"),bto=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),OKe=l(),cd=a("h2"),Lf=a("a"),yde=a("span"),F(G9.$$.fragment),vto=l(),xde=a("span"),Fto=o("Extending the Auto Classes"),VKe=l(),as=a("p"),Tto=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$de=a("code"),Mto=o("NewModel"),Eto=o(", make sure you have a "),kde=a("code"),Cto=o("NewModelConfig"),wto=o(` then you can add those to the auto
classes like this:`),XKe=l(),F(O9.$$.fragment),zKe=l(),QB=a("p"),Ato=o("You will then be able to use the auto classes like you would usually do!"),QKe=l(),F(yf.$$.fragment),WKe=l(),md=a("h2"),xf=a("a"),Sde=a("span"),F(V9.$$.fragment),Lto=l(),Rde=a("span"),yto=o("AutoConfig"),UKe=l(),$o=a("div"),F(X9.$$.fragment),xto=l(),z9=a("p"),$to=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),WB=a("a"),kto=o("from_pretrained()"),Sto=o(" class method."),Rto=l(),Q9=a("p"),Pto=o("This class cannot be instantiated directly using "),Pde=a("code"),Bto=o("__init__()"),Ito=o(" (throws an error)."),Nto=l(),Pr=a("div"),F(W9.$$.fragment),qto=l(),Bde=a("p"),jto=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Dto=l(),fd=a("p"),Gto=o("The configuration class to instantiate is selected based on the "),Ide=a("code"),Oto=o("model_type"),Vto=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nde=a("code"),Xto=o("pretrained_model_name_or_path"),zto=o(":"),Qto=l(),A=a("ul"),$f=a("li"),qde=a("strong"),Wto=o("albert"),Uto=o(" \u2014 "),UB=a("a"),Hto=o("AlbertConfig"),Jto=o(" (ALBERT model)"),Yto=l(),kf=a("li"),jde=a("strong"),Kto=o("bart"),Zto=o(" \u2014 "),HB=a("a"),eao=o("BartConfig"),oao=o(" (BART model)"),rao=l(),Sf=a("li"),Dde=a("strong"),tao=o("beit"),aao=o(" \u2014 "),JB=a("a"),nao=o("BeitConfig"),sao=o(" (BEiT model)"),lao=l(),Rf=a("li"),Gde=a("strong"),iao=o("bert"),dao=o(" \u2014 "),YB=a("a"),cao=o("BertConfig"),mao=o(" (BERT model)"),fao=l(),Pf=a("li"),Ode=a("strong"),gao=o("bert-generation"),hao=o(" \u2014 "),KB=a("a"),uao=o("BertGenerationConfig"),pao=o(" (Bert Generation model)"),_ao=l(),Bf=a("li"),Vde=a("strong"),bao=o("big_bird"),vao=o(" \u2014 "),ZB=a("a"),Fao=o("BigBirdConfig"),Tao=o(" (BigBird model)"),Mao=l(),If=a("li"),Xde=a("strong"),Eao=o("bigbird_pegasus"),Cao=o(" \u2014 "),eI=a("a"),wao=o("BigBirdPegasusConfig"),Aao=o(" (BigBird-Pegasus model)"),Lao=l(),Nf=a("li"),zde=a("strong"),yao=o("blenderbot"),xao=o(" \u2014 "),oI=a("a"),$ao=o("BlenderbotConfig"),kao=o(" (Blenderbot model)"),Sao=l(),qf=a("li"),Qde=a("strong"),Rao=o("blenderbot-small"),Pao=o(" \u2014 "),rI=a("a"),Bao=o("BlenderbotSmallConfig"),Iao=o(" (BlenderbotSmall model)"),Nao=l(),jf=a("li"),Wde=a("strong"),qao=o("bloom"),jao=o(" \u2014 "),tI=a("a"),Dao=o("BloomConfig"),Gao=o(" (BLOOM model)"),Oao=l(),Df=a("li"),Ude=a("strong"),Vao=o("camembert"),Xao=o(" \u2014 "),aI=a("a"),zao=o("CamembertConfig"),Qao=o(" (CamemBERT model)"),Wao=l(),Gf=a("li"),Hde=a("strong"),Uao=o("canine"),Hao=o(" \u2014 "),nI=a("a"),Jao=o("CanineConfig"),Yao=o(" (CANINE model)"),Kao=l(),Of=a("li"),Jde=a("strong"),Zao=o("clip"),eno=o(" \u2014 "),sI=a("a"),ono=o("CLIPConfig"),rno=o(" (CLIP model)"),tno=l(),Vf=a("li"),Yde=a("strong"),ano=o("codegen"),nno=o(" \u2014 "),lI=a("a"),sno=o("CodeGenConfig"),lno=o(" (CodeGen model)"),ino=l(),Xf=a("li"),Kde=a("strong"),dno=o("conditional_detr"),cno=o(" \u2014 "),iI=a("a"),mno=o("ConditionalDetrConfig"),fno=o(" (Conditional DETR model)"),gno=l(),zf=a("li"),Zde=a("strong"),hno=o("convbert"),uno=o(" \u2014 "),dI=a("a"),pno=o("ConvBertConfig"),_no=o(" (ConvBERT model)"),bno=l(),Qf=a("li"),ece=a("strong"),vno=o("convnext"),Fno=o(" \u2014 "),cI=a("a"),Tno=o("ConvNextConfig"),Mno=o(" (ConvNeXT model)"),Eno=l(),Wf=a("li"),oce=a("strong"),Cno=o("ctrl"),wno=o(" \u2014 "),mI=a("a"),Ano=o("CTRLConfig"),Lno=o(" (CTRL model)"),yno=l(),Uf=a("li"),rce=a("strong"),xno=o("cvt"),$no=o(" \u2014 "),fI=a("a"),kno=o("CvtConfig"),Sno=o(" (CvT model)"),Rno=l(),Hf=a("li"),tce=a("strong"),Pno=o("data2vec-audio"),Bno=o(" \u2014 "),gI=a("a"),Ino=o("Data2VecAudioConfig"),Nno=o(" (Data2VecAudio model)"),qno=l(),Jf=a("li"),ace=a("strong"),jno=o("data2vec-text"),Dno=o(" \u2014 "),hI=a("a"),Gno=o("Data2VecTextConfig"),Ono=o(" (Data2VecText model)"),Vno=l(),Yf=a("li"),nce=a("strong"),Xno=o("data2vec-vision"),zno=o(" \u2014 "),uI=a("a"),Qno=o("Data2VecVisionConfig"),Wno=o(" (Data2VecVision model)"),Uno=l(),Kf=a("li"),sce=a("strong"),Hno=o("deberta"),Jno=o(" \u2014 "),pI=a("a"),Yno=o("DebertaConfig"),Kno=o(" (DeBERTa model)"),Zno=l(),Zf=a("li"),lce=a("strong"),eso=o("deberta-v2"),oso=o(" \u2014 "),_I=a("a"),rso=o("DebertaV2Config"),tso=o(" (DeBERTa-v2 model)"),aso=l(),eg=a("li"),ice=a("strong"),nso=o("decision_transformer"),sso=o(" \u2014 "),bI=a("a"),lso=o("DecisionTransformerConfig"),iso=o(" (Decision Transformer model)"),dso=l(),og=a("li"),dce=a("strong"),cso=o("deformable_detr"),mso=o(" \u2014 "),vI=a("a"),fso=o("DeformableDetrConfig"),gso=o(" (Deformable DETR model)"),hso=l(),rg=a("li"),cce=a("strong"),uso=o("deit"),pso=o(" \u2014 "),FI=a("a"),_so=o("DeiTConfig"),bso=o(" (DeiT model)"),vso=l(),tg=a("li"),mce=a("strong"),Fso=o("detr"),Tso=o(" \u2014 "),TI=a("a"),Mso=o("DetrConfig"),Eso=o(" (DETR model)"),Cso=l(),ag=a("li"),fce=a("strong"),wso=o("distilbert"),Aso=o(" \u2014 "),MI=a("a"),Lso=o("DistilBertConfig"),yso=o(" (DistilBERT model)"),xso=l(),ng=a("li"),gce=a("strong"),$so=o("donut-swin"),kso=o(" \u2014 "),EI=a("a"),Sso=o("DonutSwinConfig"),Rso=o(" (DonutSwin model)"),Pso=l(),sg=a("li"),hce=a("strong"),Bso=o("dpr"),Iso=o(" \u2014 "),CI=a("a"),Nso=o("DPRConfig"),qso=o(" (DPR model)"),jso=l(),lg=a("li"),uce=a("strong"),Dso=o("dpt"),Gso=o(" \u2014 "),wI=a("a"),Oso=o("DPTConfig"),Vso=o(" (DPT model)"),Xso=l(),ig=a("li"),pce=a("strong"),zso=o("electra"),Qso=o(" \u2014 "),AI=a("a"),Wso=o("ElectraConfig"),Uso=o(" (ELECTRA model)"),Hso=l(),dg=a("li"),_ce=a("strong"),Jso=o("encoder-decoder"),Yso=o(" \u2014 "),LI=a("a"),Kso=o("EncoderDecoderConfig"),Zso=o(" (Encoder decoder model)"),elo=l(),cg=a("li"),bce=a("strong"),olo=o("ernie"),rlo=o(" \u2014 "),yI=a("a"),tlo=o("ErnieConfig"),alo=o(" (ERNIE model)"),nlo=l(),mg=a("li"),vce=a("strong"),slo=o("flaubert"),llo=o(" \u2014 "),xI=a("a"),ilo=o("FlaubertConfig"),dlo=o(" (FlauBERT model)"),clo=l(),fg=a("li"),Fce=a("strong"),mlo=o("flava"),flo=o(" \u2014 "),$I=a("a"),glo=o("FlavaConfig"),hlo=o(" (FLAVA model)"),ulo=l(),gg=a("li"),Tce=a("strong"),plo=o("fnet"),_lo=o(" \u2014 "),kI=a("a"),blo=o("FNetConfig"),vlo=o(" (FNet model)"),Flo=l(),hg=a("li"),Mce=a("strong"),Tlo=o("fsmt"),Mlo=o(" \u2014 "),SI=a("a"),Elo=o("FSMTConfig"),Clo=o(" (FairSeq Machine-Translation model)"),wlo=l(),ug=a("li"),Ece=a("strong"),Alo=o("funnel"),Llo=o(" \u2014 "),RI=a("a"),ylo=o("FunnelConfig"),xlo=o(" (Funnel Transformer model)"),$lo=l(),pg=a("li"),Cce=a("strong"),klo=o("glpn"),Slo=o(" \u2014 "),PI=a("a"),Rlo=o("GLPNConfig"),Plo=o(" (GLPN model)"),Blo=l(),_g=a("li"),wce=a("strong"),Ilo=o("gpt2"),Nlo=o(" \u2014 "),BI=a("a"),qlo=o("GPT2Config"),jlo=o(" (OpenAI GPT-2 model)"),Dlo=l(),bg=a("li"),Ace=a("strong"),Glo=o("gpt_neo"),Olo=o(" \u2014 "),II=a("a"),Vlo=o("GPTNeoConfig"),Xlo=o(" (GPT Neo model)"),zlo=l(),vg=a("li"),Lce=a("strong"),Qlo=o("gpt_neox"),Wlo=o(" \u2014 "),NI=a("a"),Ulo=o("GPTNeoXConfig"),Hlo=o(" (GPT NeoX model)"),Jlo=l(),Fg=a("li"),yce=a("strong"),Ylo=o("gpt_neox_japanese"),Klo=o(" \u2014 "),qI=a("a"),Zlo=o("GPTNeoXJapaneseConfig"),eio=o(" (GPT NeoX Japanese model)"),oio=l(),Tg=a("li"),xce=a("strong"),rio=o("gptj"),tio=o(" \u2014 "),jI=a("a"),aio=o("GPTJConfig"),nio=o(" (GPT-J model)"),sio=l(),Mg=a("li"),$ce=a("strong"),lio=o("groupvit"),iio=o(" \u2014 "),DI=a("a"),dio=o("GroupViTConfig"),cio=o(" (GroupViT model)"),mio=l(),Eg=a("li"),kce=a("strong"),fio=o("hubert"),gio=o(" \u2014 "),GI=a("a"),hio=o("HubertConfig"),uio=o(" (Hubert model)"),pio=l(),Cg=a("li"),Sce=a("strong"),_io=o("ibert"),bio=o(" \u2014 "),OI=a("a"),vio=o("IBertConfig"),Fio=o(" (I-BERT model)"),Tio=l(),wg=a("li"),Rce=a("strong"),Mio=o("imagegpt"),Eio=o(" \u2014 "),VI=a("a"),Cio=o("ImageGPTConfig"),wio=o(" (ImageGPT model)"),Aio=l(),Ag=a("li"),Pce=a("strong"),Lio=o("layoutlm"),yio=o(" \u2014 "),XI=a("a"),xio=o("LayoutLMConfig"),$io=o(" (LayoutLM model)"),kio=l(),Lg=a("li"),Bce=a("strong"),Sio=o("layoutlmv2"),Rio=o(" \u2014 "),zI=a("a"),Pio=o("LayoutLMv2Config"),Bio=o(" (LayoutLMv2 model)"),Iio=l(),yg=a("li"),Ice=a("strong"),Nio=o("layoutlmv3"),qio=o(" \u2014 "),QI=a("a"),jio=o("LayoutLMv3Config"),Dio=o(" (LayoutLMv3 model)"),Gio=l(),xg=a("li"),Nce=a("strong"),Oio=o("led"),Vio=o(" \u2014 "),WI=a("a"),Xio=o("LEDConfig"),zio=o(" (LED model)"),Qio=l(),$g=a("li"),qce=a("strong"),Wio=o("levit"),Uio=o(" \u2014 "),UI=a("a"),Hio=o("LevitConfig"),Jio=o(" (LeViT model)"),Yio=l(),kg=a("li"),jce=a("strong"),Kio=o("longformer"),Zio=o(" \u2014 "),HI=a("a"),edo=o("LongformerConfig"),odo=o(" (Longformer model)"),rdo=l(),Sg=a("li"),Dce=a("strong"),tdo=o("longt5"),ado=o(" \u2014 "),JI=a("a"),ndo=o("LongT5Config"),sdo=o(" (LongT5 model)"),ldo=l(),Rg=a("li"),Gce=a("strong"),ido=o("luke"),ddo=o(" \u2014 "),YI=a("a"),cdo=o("LukeConfig"),mdo=o(" (LUKE model)"),fdo=l(),Pg=a("li"),Oce=a("strong"),gdo=o("lxmert"),hdo=o(" \u2014 "),KI=a("a"),udo=o("LxmertConfig"),pdo=o(" (LXMERT model)"),_do=l(),Bg=a("li"),Vce=a("strong"),bdo=o("m2m_100"),vdo=o(" \u2014 "),ZI=a("a"),Fdo=o("M2M100Config"),Tdo=o(" (M2M100 model)"),Mdo=l(),Ig=a("li"),Xce=a("strong"),Edo=o("marian"),Cdo=o(" \u2014 "),eN=a("a"),wdo=o("MarianConfig"),Ado=o(" (Marian model)"),Ldo=l(),Ng=a("li"),zce=a("strong"),ydo=o("maskformer"),xdo=o(" \u2014 "),oN=a("a"),$do=o("MaskFormerConfig"),kdo=o(" (MaskFormer model)"),Sdo=l(),qg=a("li"),Qce=a("strong"),Rdo=o("mbart"),Pdo=o(" \u2014 "),rN=a("a"),Bdo=o("MBartConfig"),Ido=o(" (mBART model)"),Ndo=l(),jg=a("li"),Wce=a("strong"),qdo=o("mctct"),jdo=o(" \u2014 "),tN=a("a"),Ddo=o("MCTCTConfig"),Gdo=o(" (M-CTC-T model)"),Odo=l(),Dg=a("li"),Uce=a("strong"),Vdo=o("megatron-bert"),Xdo=o(" \u2014 "),aN=a("a"),zdo=o("MegatronBertConfig"),Qdo=o(" (Megatron-BERT model)"),Wdo=l(),Gg=a("li"),Hce=a("strong"),Udo=o("mobilebert"),Hdo=o(" \u2014 "),nN=a("a"),Jdo=o("MobileBertConfig"),Ydo=o(" (MobileBERT model)"),Kdo=l(),Og=a("li"),Jce=a("strong"),Zdo=o("mobilevit"),eco=o(" \u2014 "),sN=a("a"),oco=o("MobileViTConfig"),rco=o(" (MobileViT model)"),tco=l(),Vg=a("li"),Yce=a("strong"),aco=o("mpnet"),nco=o(" \u2014 "),lN=a("a"),sco=o("MPNetConfig"),lco=o(" (MPNet model)"),ico=l(),Xg=a("li"),Kce=a("strong"),dco=o("mt5"),cco=o(" \u2014 "),iN=a("a"),mco=o("MT5Config"),fco=o(" (MT5 model)"),gco=l(),zg=a("li"),Zce=a("strong"),hco=o("mvp"),uco=o(" \u2014 "),dN=a("a"),pco=o("MvpConfig"),_co=o(" (MVP model)"),bco=l(),Qg=a("li"),eme=a("strong"),vco=o("nezha"),Fco=o(" \u2014 "),cN=a("a"),Tco=o("NezhaConfig"),Mco=o(" (Nezha model)"),Eco=l(),Wg=a("li"),ome=a("strong"),Cco=o("nystromformer"),wco=o(" \u2014 "),mN=a("a"),Aco=o("NystromformerConfig"),Lco=o(" (Nystr\xF6mformer model)"),yco=l(),Ug=a("li"),rme=a("strong"),xco=o("openai-gpt"),$co=o(" \u2014 "),fN=a("a"),kco=o("OpenAIGPTConfig"),Sco=o(" (OpenAI GPT model)"),Rco=l(),Hg=a("li"),tme=a("strong"),Pco=o("opt"),Bco=o(" \u2014 "),gN=a("a"),Ico=o("OPTConfig"),Nco=o(" (OPT model)"),qco=l(),Jg=a("li"),ame=a("strong"),jco=o("owlvit"),Dco=o(" \u2014 "),hN=a("a"),Gco=o("OwlViTConfig"),Oco=o(" (OWL-ViT model)"),Vco=l(),Yg=a("li"),nme=a("strong"),Xco=o("pegasus"),zco=o(" \u2014 "),uN=a("a"),Qco=o("PegasusConfig"),Wco=o(" (Pegasus model)"),Uco=l(),Kg=a("li"),sme=a("strong"),Hco=o("pegasus_x"),Jco=o(" \u2014 "),pN=a("a"),Yco=o("PegasusXConfig"),Kco=o(" (PEGASUS-X model)"),Zco=l(),Zg=a("li"),lme=a("strong"),emo=o("perceiver"),omo=o(" \u2014 "),_N=a("a"),rmo=o("PerceiverConfig"),tmo=o(" (Perceiver model)"),amo=l(),eh=a("li"),ime=a("strong"),nmo=o("plbart"),smo=o(" \u2014 "),bN=a("a"),lmo=o("PLBartConfig"),imo=o(" (PLBart model)"),dmo=l(),oh=a("li"),dme=a("strong"),cmo=o("poolformer"),mmo=o(" \u2014 "),vN=a("a"),fmo=o("PoolFormerConfig"),gmo=o(" (PoolFormer model)"),hmo=l(),rh=a("li"),cme=a("strong"),umo=o("prophetnet"),pmo=o(" \u2014 "),FN=a("a"),_mo=o("ProphetNetConfig"),bmo=o(" (ProphetNet model)"),vmo=l(),th=a("li"),mme=a("strong"),Fmo=o("qdqbert"),Tmo=o(" \u2014 "),TN=a("a"),Mmo=o("QDQBertConfig"),Emo=o(" (QDQBert model)"),Cmo=l(),ah=a("li"),fme=a("strong"),wmo=o("rag"),Amo=o(" \u2014 "),MN=a("a"),Lmo=o("RagConfig"),ymo=o(" (RAG model)"),xmo=l(),nh=a("li"),gme=a("strong"),$mo=o("realm"),kmo=o(" \u2014 "),EN=a("a"),Smo=o("RealmConfig"),Rmo=o(" (REALM model)"),Pmo=l(),sh=a("li"),hme=a("strong"),Bmo=o("reformer"),Imo=o(" \u2014 "),CN=a("a"),Nmo=o("ReformerConfig"),qmo=o(" (Reformer model)"),jmo=l(),lh=a("li"),ume=a("strong"),Dmo=o("regnet"),Gmo=o(" \u2014 "),wN=a("a"),Omo=o("RegNetConfig"),Vmo=o(" (RegNet model)"),Xmo=l(),ih=a("li"),pme=a("strong"),zmo=o("rembert"),Qmo=o(" \u2014 "),AN=a("a"),Wmo=o("RemBertConfig"),Umo=o(" (RemBERT model)"),Hmo=l(),dh=a("li"),_me=a("strong"),Jmo=o("resnet"),Ymo=o(" \u2014 "),LN=a("a"),Kmo=o("ResNetConfig"),Zmo=o(" (ResNet model)"),efo=l(),ch=a("li"),bme=a("strong"),ofo=o("retribert"),rfo=o(" \u2014 "),yN=a("a"),tfo=o("RetriBertConfig"),afo=o(" (RetriBERT model)"),nfo=l(),mh=a("li"),vme=a("strong"),sfo=o("roberta"),lfo=o(" \u2014 "),xN=a("a"),ifo=o("RobertaConfig"),dfo=o(" (RoBERTa model)"),cfo=l(),fh=a("li"),Fme=a("strong"),mfo=o("roformer"),ffo=o(" \u2014 "),$N=a("a"),gfo=o("RoFormerConfig"),hfo=o(" (RoFormer model)"),ufo=l(),gh=a("li"),Tme=a("strong"),pfo=o("segformer"),_fo=o(" \u2014 "),kN=a("a"),bfo=o("SegformerConfig"),vfo=o(" (SegFormer model)"),Ffo=l(),hh=a("li"),Mme=a("strong"),Tfo=o("sew"),Mfo=o(" \u2014 "),SN=a("a"),Efo=o("SEWConfig"),Cfo=o(" (SEW model)"),wfo=l(),uh=a("li"),Eme=a("strong"),Afo=o("sew-d"),Lfo=o(" \u2014 "),RN=a("a"),yfo=o("SEWDConfig"),xfo=o(" (SEW-D model)"),$fo=l(),ph=a("li"),Cme=a("strong"),kfo=o("speech-encoder-decoder"),Sfo=o(" \u2014 "),PN=a("a"),Rfo=o("SpeechEncoderDecoderConfig"),Pfo=o(" (Speech Encoder decoder model)"),Bfo=l(),_h=a("li"),wme=a("strong"),Ifo=o("speech_to_text"),Nfo=o(" \u2014 "),BN=a("a"),qfo=o("Speech2TextConfig"),jfo=o(" (Speech2Text model)"),Dfo=l(),bh=a("li"),Ame=a("strong"),Gfo=o("speech_to_text_2"),Ofo=o(" \u2014 "),IN=a("a"),Vfo=o("Speech2Text2Config"),Xfo=o(" (Speech2Text2 model)"),zfo=l(),vh=a("li"),Lme=a("strong"),Qfo=o("splinter"),Wfo=o(" \u2014 "),NN=a("a"),Ufo=o("SplinterConfig"),Hfo=o(" (Splinter model)"),Jfo=l(),Fh=a("li"),yme=a("strong"),Yfo=o("squeezebert"),Kfo=o(" \u2014 "),qN=a("a"),Zfo=o("SqueezeBertConfig"),ego=o(" (SqueezeBERT model)"),ogo=l(),Th=a("li"),xme=a("strong"),rgo=o("swin"),tgo=o(" \u2014 "),jN=a("a"),ago=o("SwinConfig"),ngo=o(" (Swin Transformer model)"),sgo=l(),Mh=a("li"),$me=a("strong"),lgo=o("swinv2"),igo=o(" \u2014 "),DN=a("a"),dgo=o("Swinv2Config"),cgo=o(" (Swin Transformer V2 model)"),mgo=l(),Eh=a("li"),kme=a("strong"),fgo=o("t5"),ggo=o(" \u2014 "),GN=a("a"),hgo=o("T5Config"),ugo=o(" (T5 model)"),pgo=l(),Ch=a("li"),Sme=a("strong"),_go=o("tapas"),bgo=o(" \u2014 "),ON=a("a"),vgo=o("TapasConfig"),Fgo=o(" (TAPAS model)"),Tgo=l(),wh=a("li"),Rme=a("strong"),Mgo=o("trajectory_transformer"),Ego=o(" \u2014 "),VN=a("a"),Cgo=o("TrajectoryTransformerConfig"),wgo=o(" (Trajectory Transformer model)"),Ago=l(),Ah=a("li"),Pme=a("strong"),Lgo=o("transfo-xl"),ygo=o(" \u2014 "),XN=a("a"),xgo=o("TransfoXLConfig"),$go=o(" (Transformer-XL model)"),kgo=l(),Lh=a("li"),Bme=a("strong"),Sgo=o("trocr"),Rgo=o(" \u2014 "),zN=a("a"),Pgo=o("TrOCRConfig"),Bgo=o(" (TrOCR model)"),Igo=l(),yh=a("li"),Ime=a("strong"),Ngo=o("unispeech"),qgo=o(" \u2014 "),QN=a("a"),jgo=o("UniSpeechConfig"),Dgo=o(" (UniSpeech model)"),Ggo=l(),xh=a("li"),Nme=a("strong"),Ogo=o("unispeech-sat"),Vgo=o(" \u2014 "),WN=a("a"),Xgo=o("UniSpeechSatConfig"),zgo=o(" (UniSpeechSat model)"),Qgo=l(),$h=a("li"),qme=a("strong"),Wgo=o("van"),Ugo=o(" \u2014 "),UN=a("a"),Hgo=o("VanConfig"),Jgo=o(" (VAN model)"),Ygo=l(),kh=a("li"),jme=a("strong"),Kgo=o("videomae"),Zgo=o(" \u2014 "),HN=a("a"),eho=o("VideoMAEConfig"),oho=o(" (VideoMAE model)"),rho=l(),Sh=a("li"),Dme=a("strong"),tho=o("vilt"),aho=o(" \u2014 "),JN=a("a"),nho=o("ViltConfig"),sho=o(" (ViLT model)"),lho=l(),Rh=a("li"),Gme=a("strong"),iho=o("vision-encoder-decoder"),dho=o(" \u2014 "),YN=a("a"),cho=o("VisionEncoderDecoderConfig"),mho=o(" (Vision Encoder decoder model)"),fho=l(),Ph=a("li"),Ome=a("strong"),gho=o("vision-text-dual-encoder"),hho=o(" \u2014 "),KN=a("a"),uho=o("VisionTextDualEncoderConfig"),pho=o(" (VisionTextDualEncoder model)"),_ho=l(),Bh=a("li"),Vme=a("strong"),bho=o("visual_bert"),vho=o(" \u2014 "),ZN=a("a"),Fho=o("VisualBertConfig"),Tho=o(" (VisualBERT model)"),Mho=l(),Ih=a("li"),Xme=a("strong"),Eho=o("vit"),Cho=o(" \u2014 "),eq=a("a"),who=o("ViTConfig"),Aho=o(" (ViT model)"),Lho=l(),Nh=a("li"),zme=a("strong"),yho=o("vit_mae"),xho=o(" \u2014 "),oq=a("a"),$ho=o("ViTMAEConfig"),kho=o(" (ViTMAE model)"),Sho=l(),qh=a("li"),Qme=a("strong"),Rho=o("vit_msn"),Pho=o(" \u2014 "),rq=a("a"),Bho=o("ViTMSNConfig"),Iho=o(" (ViTMSN model)"),Nho=l(),jh=a("li"),Wme=a("strong"),qho=o("wav2vec2"),jho=o(" \u2014 "),tq=a("a"),Dho=o("Wav2Vec2Config"),Gho=o(" (Wav2Vec2 model)"),Oho=l(),Dh=a("li"),Ume=a("strong"),Vho=o("wav2vec2-conformer"),Xho=o(" \u2014 "),aq=a("a"),zho=o("Wav2Vec2ConformerConfig"),Qho=o(" (Wav2Vec2-Conformer model)"),Who=l(),Gh=a("li"),Hme=a("strong"),Uho=o("wavlm"),Hho=o(" \u2014 "),nq=a("a"),Jho=o("WavLMConfig"),Yho=o(" (WavLM model)"),Kho=l(),Oh=a("li"),Jme=a("strong"),Zho=o("xclip"),euo=o(" \u2014 "),sq=a("a"),ouo=o("XCLIPConfig"),ruo=o(" (X-CLIP model)"),tuo=l(),Vh=a("li"),Yme=a("strong"),auo=o("xglm"),nuo=o(" \u2014 "),lq=a("a"),suo=o("XGLMConfig"),luo=o(" (XGLM model)"),iuo=l(),Xh=a("li"),Kme=a("strong"),duo=o("xlm"),cuo=o(" \u2014 "),iq=a("a"),muo=o("XLMConfig"),fuo=o(" (XLM model)"),guo=l(),zh=a("li"),Zme=a("strong"),huo=o("xlm-prophetnet"),uuo=o(" \u2014 "),dq=a("a"),puo=o("XLMProphetNetConfig"),_uo=o(" (XLM-ProphetNet model)"),buo=l(),Qh=a("li"),efe=a("strong"),vuo=o("xlm-roberta"),Fuo=o(" \u2014 "),cq=a("a"),Tuo=o("XLMRobertaConfig"),Muo=o(" (XLM-RoBERTa model)"),Euo=l(),Wh=a("li"),ofe=a("strong"),Cuo=o("xlm-roberta-xl"),wuo=o(" \u2014 "),mq=a("a"),Auo=o("XLMRobertaXLConfig"),Luo=o(" (XLM-RoBERTa-XL model)"),yuo=l(),Uh=a("li"),rfe=a("strong"),xuo=o("xlnet"),$uo=o(" \u2014 "),fq=a("a"),kuo=o("XLNetConfig"),Suo=o(" (XLNet model)"),Ruo=l(),Hh=a("li"),tfe=a("strong"),Puo=o("yolos"),Buo=o(" \u2014 "),gq=a("a"),Iuo=o("YolosConfig"),Nuo=o(" (YOLOS model)"),quo=l(),Jh=a("li"),afe=a("strong"),juo=o("yoso"),Duo=o(" \u2014 "),hq=a("a"),Guo=o("YosoConfig"),Ouo=o(" (YOSO model)"),Vuo=l(),F(Yh.$$.fragment),Xuo=l(),Kh=a("div"),F(U9.$$.fragment),zuo=l(),nfe=a("p"),Quo=o("Register a new configuration for this class."),HKe=l(),gd=a("h2"),Zh=a("a"),sfe=a("span"),F(H9.$$.fragment),Wuo=l(),lfe=a("span"),Uuo=o("AutoTokenizer"),JKe=l(),ko=a("div"),F(J9.$$.fragment),Huo=l(),Y9=a("p"),Juo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uq=a("a"),Yuo=o("AutoTokenizer.from_pretrained()"),Kuo=o(" class method."),Zuo=l(),K9=a("p"),epo=o("This class cannot be instantiated directly using "),ife=a("code"),opo=o("__init__()"),rpo=o(" (throws an error)."),tpo=l(),Br=a("div"),F(Z9.$$.fragment),apo=l(),dfe=a("p"),npo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),spo=l(),Ua=a("p"),lpo=o("The tokenizer class to instantiate is selected based on the "),cfe=a("code"),ipo=o("model_type"),dpo=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),cpo=o("pretrained_model_name_or_path"),mpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),fpo=o("pretrained_model_name_or_path"),gpo=o(":"),hpo=l(),k=a("ul"),ns=a("li"),gfe=a("strong"),upo=o("albert"),ppo=o(" \u2014 "),pq=a("a"),_po=o("AlbertTokenizer"),bpo=o(" or "),_q=a("a"),vpo=o("AlbertTokenizerFast"),Fpo=o(" (ALBERT model)"),Tpo=l(),ss=a("li"),hfe=a("strong"),Mpo=o("bart"),Epo=o(" \u2014 "),bq=a("a"),Cpo=o("BartTokenizer"),wpo=o(" or "),vq=a("a"),Apo=o("BartTokenizerFast"),Lpo=o(" (BART model)"),ypo=l(),ls=a("li"),ufe=a("strong"),xpo=o("barthez"),$po=o(" \u2014 "),Fq=a("a"),kpo=o("BarthezTokenizer"),Spo=o(" or "),Tq=a("a"),Rpo=o("BarthezTokenizerFast"),Ppo=o(" (BARThez model)"),Bpo=l(),eu=a("li"),pfe=a("strong"),Ipo=o("bartpho"),Npo=o(" \u2014 "),Mq=a("a"),qpo=o("BartphoTokenizer"),jpo=o(" (BARTpho model)"),Dpo=l(),is=a("li"),_fe=a("strong"),Gpo=o("bert"),Opo=o(" \u2014 "),Eq=a("a"),Vpo=o("BertTokenizer"),Xpo=o(" or "),Cq=a("a"),zpo=o("BertTokenizerFast"),Qpo=o(" (BERT model)"),Wpo=l(),ou=a("li"),bfe=a("strong"),Upo=o("bert-generation"),Hpo=o(" \u2014 "),wq=a("a"),Jpo=o("BertGenerationTokenizer"),Ypo=o(" (Bert Generation model)"),Kpo=l(),ru=a("li"),vfe=a("strong"),Zpo=o("bert-japanese"),e_o=o(" \u2014 "),Aq=a("a"),o_o=o("BertJapaneseTokenizer"),r_o=o(" (BertJapanese model)"),t_o=l(),tu=a("li"),Ffe=a("strong"),a_o=o("bertweet"),n_o=o(" \u2014 "),Lq=a("a"),s_o=o("BertweetTokenizer"),l_o=o(" (BERTweet model)"),i_o=l(),ds=a("li"),Tfe=a("strong"),d_o=o("big_bird"),c_o=o(" \u2014 "),yq=a("a"),m_o=o("BigBirdTokenizer"),f_o=o(" or "),xq=a("a"),g_o=o("BigBirdTokenizerFast"),h_o=o(" (BigBird model)"),u_o=l(),cs=a("li"),Mfe=a("strong"),p_o=o("bigbird_pegasus"),__o=o(" \u2014 "),$q=a("a"),b_o=o("PegasusTokenizer"),v_o=o(" or "),kq=a("a"),F_o=o("PegasusTokenizerFast"),T_o=o(" (BigBird-Pegasus model)"),M_o=l(),ms=a("li"),Efe=a("strong"),E_o=o("blenderbot"),C_o=o(" \u2014 "),Sq=a("a"),w_o=o("BlenderbotTokenizer"),A_o=o(" or "),Rq=a("a"),L_o=o("BlenderbotTokenizerFast"),y_o=o(" (Blenderbot model)"),x_o=l(),au=a("li"),Cfe=a("strong"),$_o=o("blenderbot-small"),k_o=o(" \u2014 "),Pq=a("a"),S_o=o("BlenderbotSmallTokenizer"),R_o=o(" (BlenderbotSmall model)"),P_o=l(),nu=a("li"),wfe=a("strong"),B_o=o("bloom"),I_o=o(" \u2014 "),Bq=a("a"),N_o=o("BloomTokenizerFast"),q_o=o(" (BLOOM model)"),j_o=l(),su=a("li"),Afe=a("strong"),D_o=o("byt5"),G_o=o(" \u2014 "),Iq=a("a"),O_o=o("ByT5Tokenizer"),V_o=o(" (ByT5 model)"),X_o=l(),fs=a("li"),Lfe=a("strong"),z_o=o("camembert"),Q_o=o(" \u2014 "),Nq=a("a"),W_o=o("CamembertTokenizer"),U_o=o(" or "),qq=a("a"),H_o=o("CamembertTokenizerFast"),J_o=o(" (CamemBERT model)"),Y_o=l(),lu=a("li"),yfe=a("strong"),K_o=o("canine"),Z_o=o(" \u2014 "),jq=a("a"),ebo=o("CanineTokenizer"),obo=o(" (CANINE model)"),rbo=l(),gs=a("li"),xfe=a("strong"),tbo=o("clip"),abo=o(" \u2014 "),Dq=a("a"),nbo=o("CLIPTokenizer"),sbo=o(" or "),Gq=a("a"),lbo=o("CLIPTokenizerFast"),ibo=o(" (CLIP model)"),dbo=l(),hs=a("li"),$fe=a("strong"),cbo=o("codegen"),mbo=o(" \u2014 "),Oq=a("a"),fbo=o("CodeGenTokenizer"),gbo=o(" or "),Vq=a("a"),hbo=o("CodeGenTokenizerFast"),ubo=o(" (CodeGen model)"),pbo=l(),us=a("li"),kfe=a("strong"),_bo=o("convbert"),bbo=o(" \u2014 "),Xq=a("a"),vbo=o("ConvBertTokenizer"),Fbo=o(" or "),zq=a("a"),Tbo=o("ConvBertTokenizerFast"),Mbo=o(" (ConvBERT model)"),Ebo=l(),ps=a("li"),Sfe=a("strong"),Cbo=o("cpm"),wbo=o(" \u2014 "),Qq=a("a"),Abo=o("CpmTokenizer"),Lbo=o(" or "),Wq=a("a"),ybo=o("CpmTokenizerFast"),xbo=o(" (CPM model)"),$bo=l(),iu=a("li"),Rfe=a("strong"),kbo=o("ctrl"),Sbo=o(" \u2014 "),Uq=a("a"),Rbo=o("CTRLTokenizer"),Pbo=o(" (CTRL model)"),Bbo=l(),_s=a("li"),Pfe=a("strong"),Ibo=o("data2vec-text"),Nbo=o(" \u2014 "),Hq=a("a"),qbo=o("RobertaTokenizer"),jbo=o(" or "),Jq=a("a"),Dbo=o("RobertaTokenizerFast"),Gbo=o(" (Data2VecText model)"),Obo=l(),bs=a("li"),Bfe=a("strong"),Vbo=o("deberta"),Xbo=o(" \u2014 "),Yq=a("a"),zbo=o("DebertaTokenizer"),Qbo=o(" or "),Kq=a("a"),Wbo=o("DebertaTokenizerFast"),Ubo=o(" (DeBERTa model)"),Hbo=l(),vs=a("li"),Ife=a("strong"),Jbo=o("deberta-v2"),Ybo=o(" \u2014 "),Zq=a("a"),Kbo=o("DebertaV2Tokenizer"),Zbo=o(" or "),ej=a("a"),e2o=o("DebertaV2TokenizerFast"),o2o=o(" (DeBERTa-v2 model)"),r2o=l(),Fs=a("li"),Nfe=a("strong"),t2o=o("distilbert"),a2o=o(" \u2014 "),oj=a("a"),n2o=o("DistilBertTokenizer"),s2o=o(" or "),rj=a("a"),l2o=o("DistilBertTokenizerFast"),i2o=o(" (DistilBERT model)"),d2o=l(),Ts=a("li"),qfe=a("strong"),c2o=o("dpr"),m2o=o(" \u2014 "),tj=a("a"),f2o=o("DPRQuestionEncoderTokenizer"),g2o=o(" or "),aj=a("a"),h2o=o("DPRQuestionEncoderTokenizerFast"),u2o=o(" (DPR model)"),p2o=l(),Ms=a("li"),jfe=a("strong"),_2o=o("electra"),b2o=o(" \u2014 "),nj=a("a"),v2o=o("ElectraTokenizer"),F2o=o(" or "),sj=a("a"),T2o=o("ElectraTokenizerFast"),M2o=o(" (ELECTRA model)"),E2o=l(),Es=a("li"),Dfe=a("strong"),C2o=o("ernie"),w2o=o(" \u2014 "),lj=a("a"),A2o=o("BertTokenizer"),L2o=o(" or "),ij=a("a"),y2o=o("BertTokenizerFast"),x2o=o(" (ERNIE model)"),$2o=l(),du=a("li"),Gfe=a("strong"),k2o=o("flaubert"),S2o=o(" \u2014 "),dj=a("a"),R2o=o("FlaubertTokenizer"),P2o=o(" (FlauBERT model)"),B2o=l(),Cs=a("li"),Ofe=a("strong"),I2o=o("fnet"),N2o=o(" \u2014 "),cj=a("a"),q2o=o("FNetTokenizer"),j2o=o(" or "),mj=a("a"),D2o=o("FNetTokenizerFast"),G2o=o(" (FNet model)"),O2o=l(),cu=a("li"),Vfe=a("strong"),V2o=o("fsmt"),X2o=o(" \u2014 "),fj=a("a"),z2o=o("FSMTTokenizer"),Q2o=o(" (FairSeq Machine-Translation model)"),W2o=l(),ws=a("li"),Xfe=a("strong"),U2o=o("funnel"),H2o=o(" \u2014 "),gj=a("a"),J2o=o("FunnelTokenizer"),Y2o=o(" or "),hj=a("a"),K2o=o("FunnelTokenizerFast"),Z2o=o(" (Funnel Transformer model)"),e1o=l(),As=a("li"),zfe=a("strong"),o1o=o("gpt2"),r1o=o(" \u2014 "),uj=a("a"),t1o=o("GPT2Tokenizer"),a1o=o(" or "),pj=a("a"),n1o=o("GPT2TokenizerFast"),s1o=o(" (OpenAI GPT-2 model)"),l1o=l(),Ls=a("li"),Qfe=a("strong"),i1o=o("gpt_neo"),d1o=o(" \u2014 "),_j=a("a"),c1o=o("GPT2Tokenizer"),m1o=o(" or "),bj=a("a"),f1o=o("GPT2TokenizerFast"),g1o=o(" (GPT Neo model)"),h1o=l(),mu=a("li"),Wfe=a("strong"),u1o=o("gpt_neox"),p1o=o(" \u2014 "),vj=a("a"),_1o=o("GPTNeoXTokenizerFast"),b1o=o(" (GPT NeoX model)"),v1o=l(),fu=a("li"),Ufe=a("strong"),F1o=o("gpt_neox_japanese"),T1o=o(" \u2014 "),Fj=a("a"),M1o=o("GPTNeoXJapaneseTokenizer"),E1o=o(" (GPT NeoX Japanese model)"),C1o=l(),ys=a("li"),Hfe=a("strong"),w1o=o("gptj"),A1o=o(" \u2014 "),Tj=a("a"),L1o=o("GPT2Tokenizer"),y1o=o(" or "),Mj=a("a"),x1o=o("GPT2TokenizerFast"),$1o=o(" (GPT-J model)"),k1o=l(),xs=a("li"),Jfe=a("strong"),S1o=o("groupvit"),R1o=o(" \u2014 "),Ej=a("a"),P1o=o("CLIPTokenizer"),B1o=o(" or "),Cj=a("a"),I1o=o("CLIPTokenizerFast"),N1o=o(" (GroupViT model)"),q1o=l(),$s=a("li"),Yfe=a("strong"),j1o=o("herbert"),D1o=o(" \u2014 "),wj=a("a"),G1o=o("HerbertTokenizer"),O1o=o(" or "),Aj=a("a"),V1o=o("HerbertTokenizerFast"),X1o=o(" (HerBERT model)"),z1o=l(),gu=a("li"),Kfe=a("strong"),Q1o=o("hubert"),W1o=o(" \u2014 "),Lj=a("a"),U1o=o("Wav2Vec2CTCTokenizer"),H1o=o(" (Hubert model)"),J1o=l(),ks=a("li"),Zfe=a("strong"),Y1o=o("ibert"),K1o=o(" \u2014 "),yj=a("a"),Z1o=o("RobertaTokenizer"),evo=o(" or "),xj=a("a"),ovo=o("RobertaTokenizerFast"),rvo=o(" (I-BERT model)"),tvo=l(),Ss=a("li"),ege=a("strong"),avo=o("layoutlm"),nvo=o(" \u2014 "),$j=a("a"),svo=o("LayoutLMTokenizer"),lvo=o(" or "),kj=a("a"),ivo=o("LayoutLMTokenizerFast"),dvo=o(" (LayoutLM model)"),cvo=l(),Rs=a("li"),oge=a("strong"),mvo=o("layoutlmv2"),fvo=o(" \u2014 "),Sj=a("a"),gvo=o("LayoutLMv2Tokenizer"),hvo=o(" or "),Rj=a("a"),uvo=o("LayoutLMv2TokenizerFast"),pvo=o(" (LayoutLMv2 model)"),_vo=l(),Ps=a("li"),rge=a("strong"),bvo=o("layoutlmv3"),vvo=o(" \u2014 "),Pj=a("a"),Fvo=o("LayoutLMv3Tokenizer"),Tvo=o(" or "),Bj=a("a"),Mvo=o("LayoutLMv3TokenizerFast"),Evo=o(" (LayoutLMv3 model)"),Cvo=l(),Bs=a("li"),tge=a("strong"),wvo=o("layoutxlm"),Avo=o(" \u2014 "),Ij=a("a"),Lvo=o("LayoutXLMTokenizer"),yvo=o(" or "),Nj=a("a"),xvo=o("LayoutXLMTokenizerFast"),$vo=o(" (LayoutXLM model)"),kvo=l(),Is=a("li"),age=a("strong"),Svo=o("led"),Rvo=o(" \u2014 "),qj=a("a"),Pvo=o("LEDTokenizer"),Bvo=o(" or "),jj=a("a"),Ivo=o("LEDTokenizerFast"),Nvo=o(" (LED model)"),qvo=l(),Ns=a("li"),nge=a("strong"),jvo=o("longformer"),Dvo=o(" \u2014 "),Dj=a("a"),Gvo=o("LongformerTokenizer"),Ovo=o(" or "),Gj=a("a"),Vvo=o("LongformerTokenizerFast"),Xvo=o(" (Longformer model)"),zvo=l(),qs=a("li"),sge=a("strong"),Qvo=o("longt5"),Wvo=o(" \u2014 "),Oj=a("a"),Uvo=o("T5Tokenizer"),Hvo=o(" or "),Vj=a("a"),Jvo=o("T5TokenizerFast"),Yvo=o(" (LongT5 model)"),Kvo=l(),hu=a("li"),lge=a("strong"),Zvo=o("luke"),eFo=o(" \u2014 "),Xj=a("a"),oFo=o("LukeTokenizer"),rFo=o(" (LUKE model)"),tFo=l(),js=a("li"),ige=a("strong"),aFo=o("lxmert"),nFo=o(" \u2014 "),zj=a("a"),sFo=o("LxmertTokenizer"),lFo=o(" or "),Qj=a("a"),iFo=o("LxmertTokenizerFast"),dFo=o(" (LXMERT model)"),cFo=l(),uu=a("li"),dge=a("strong"),mFo=o("m2m_100"),fFo=o(" \u2014 "),Wj=a("a"),gFo=o("M2M100Tokenizer"),hFo=o(" (M2M100 model)"),uFo=l(),pu=a("li"),cge=a("strong"),pFo=o("marian"),_Fo=o(" \u2014 "),Uj=a("a"),bFo=o("MarianTokenizer"),vFo=o(" (Marian model)"),FFo=l(),Ds=a("li"),mge=a("strong"),TFo=o("mbart"),MFo=o(" \u2014 "),Hj=a("a"),EFo=o("MBartTokenizer"),CFo=o(" or "),Jj=a("a"),wFo=o("MBartTokenizerFast"),AFo=o(" (mBART model)"),LFo=l(),Gs=a("li"),fge=a("strong"),yFo=o("mbart50"),xFo=o(" \u2014 "),Yj=a("a"),$Fo=o("MBart50Tokenizer"),kFo=o(" or "),Kj=a("a"),SFo=o("MBart50TokenizerFast"),RFo=o(" (mBART-50 model)"),PFo=l(),Os=a("li"),gge=a("strong"),BFo=o("megatron-bert"),IFo=o(" \u2014 "),Zj=a("a"),NFo=o("BertTokenizer"),qFo=o(" or "),eD=a("a"),jFo=o("BertTokenizerFast"),DFo=o(" (Megatron-BERT model)"),GFo=l(),_u=a("li"),hge=a("strong"),OFo=o("mluke"),VFo=o(" \u2014 "),oD=a("a"),XFo=o("MLukeTokenizer"),zFo=o(" (mLUKE model)"),QFo=l(),Vs=a("li"),uge=a("strong"),WFo=o("mobilebert"),UFo=o(" \u2014 "),rD=a("a"),HFo=o("MobileBertTokenizer"),JFo=o(" or "),tD=a("a"),YFo=o("MobileBertTokenizerFast"),KFo=o(" (MobileBERT model)"),ZFo=l(),Xs=a("li"),pge=a("strong"),eTo=o("mpnet"),oTo=o(" \u2014 "),aD=a("a"),rTo=o("MPNetTokenizer"),tTo=o(" or "),nD=a("a"),aTo=o("MPNetTokenizerFast"),nTo=o(" (MPNet model)"),sTo=l(),zs=a("li"),_ge=a("strong"),lTo=o("mt5"),iTo=o(" \u2014 "),sD=a("a"),dTo=o("MT5Tokenizer"),cTo=o(" or "),lD=a("a"),mTo=o("MT5TokenizerFast"),fTo=o(" (MT5 model)"),gTo=l(),Qs=a("li"),bge=a("strong"),hTo=o("mvp"),uTo=o(" \u2014 "),iD=a("a"),pTo=o("MvpTokenizer"),_To=o(" or "),dD=a("a"),bTo=o("MvpTokenizerFast"),vTo=o(" (MVP model)"),FTo=l(),Ws=a("li"),vge=a("strong"),TTo=o("nezha"),MTo=o(" \u2014 "),cD=a("a"),ETo=o("BertTokenizer"),CTo=o(" or "),mD=a("a"),wTo=o("BertTokenizerFast"),ATo=o(" (Nezha model)"),LTo=l(),Us=a("li"),Fge=a("strong"),yTo=o("nllb"),xTo=o(" \u2014 "),fD=a("a"),$To=o("NllbTokenizer"),kTo=o(" or "),gD=a("a"),STo=o("NllbTokenizerFast"),RTo=o(" (NLLB model)"),PTo=l(),Hs=a("li"),Tge=a("strong"),BTo=o("nystromformer"),ITo=o(" \u2014 "),hD=a("a"),NTo=o("AlbertTokenizer"),qTo=o(" or "),uD=a("a"),jTo=o("AlbertTokenizerFast"),DTo=o(" (Nystr\xF6mformer model)"),GTo=l(),Js=a("li"),Mge=a("strong"),OTo=o("openai-gpt"),VTo=o(" \u2014 "),pD=a("a"),XTo=o("OpenAIGPTTokenizer"),zTo=o(" or "),_D=a("a"),QTo=o("OpenAIGPTTokenizerFast"),WTo=o(" (OpenAI GPT model)"),UTo=l(),bu=a("li"),Ege=a("strong"),HTo=o("opt"),JTo=o(" \u2014 "),bD=a("a"),YTo=o("GPT2Tokenizer"),KTo=o(" (OPT model)"),ZTo=l(),Ys=a("li"),Cge=a("strong"),eMo=o("owlvit"),oMo=o(" \u2014 "),vD=a("a"),rMo=o("CLIPTokenizer"),tMo=o(" or "),FD=a("a"),aMo=o("CLIPTokenizerFast"),nMo=o(" (OWL-ViT model)"),sMo=l(),Ks=a("li"),wge=a("strong"),lMo=o("pegasus"),iMo=o(" \u2014 "),TD=a("a"),dMo=o("PegasusTokenizer"),cMo=o(" or "),MD=a("a"),mMo=o("PegasusTokenizerFast"),fMo=o(" (Pegasus model)"),gMo=l(),vu=a("li"),Age=a("strong"),hMo=o("perceiver"),uMo=o(" \u2014 "),ED=a("a"),pMo=o("PerceiverTokenizer"),_Mo=o(" (Perceiver model)"),bMo=l(),Fu=a("li"),Lge=a("strong"),vMo=o("phobert"),FMo=o(" \u2014 "),CD=a("a"),TMo=o("PhobertTokenizer"),MMo=o(" (PhoBERT model)"),EMo=l(),Tu=a("li"),yge=a("strong"),CMo=o("plbart"),wMo=o(" \u2014 "),wD=a("a"),AMo=o("PLBartTokenizer"),LMo=o(" (PLBart model)"),yMo=l(),Mu=a("li"),xge=a("strong"),xMo=o("prophetnet"),$Mo=o(" \u2014 "),AD=a("a"),kMo=o("ProphetNetTokenizer"),SMo=o(" (ProphetNet model)"),RMo=l(),Zs=a("li"),$ge=a("strong"),PMo=o("qdqbert"),BMo=o(" \u2014 "),LD=a("a"),IMo=o("BertTokenizer"),NMo=o(" or "),yD=a("a"),qMo=o("BertTokenizerFast"),jMo=o(" (QDQBert model)"),DMo=l(),Eu=a("li"),kge=a("strong"),GMo=o("rag"),OMo=o(" \u2014 "),xD=a("a"),VMo=o("RagTokenizer"),XMo=o(" (RAG model)"),zMo=l(),el=a("li"),Sge=a("strong"),QMo=o("realm"),WMo=o(" \u2014 "),$D=a("a"),UMo=o("RealmTokenizer"),HMo=o(" or "),kD=a("a"),JMo=o("RealmTokenizerFast"),YMo=o(" (REALM model)"),KMo=l(),ol=a("li"),Rge=a("strong"),ZMo=o("reformer"),eEo=o(" \u2014 "),SD=a("a"),oEo=o("ReformerTokenizer"),rEo=o(" or "),RD=a("a"),tEo=o("ReformerTokenizerFast"),aEo=o(" (Reformer model)"),nEo=l(),rl=a("li"),Pge=a("strong"),sEo=o("rembert"),lEo=o(" \u2014 "),PD=a("a"),iEo=o("RemBertTokenizer"),dEo=o(" or "),BD=a("a"),cEo=o("RemBertTokenizerFast"),mEo=o(" (RemBERT model)"),fEo=l(),tl=a("li"),Bge=a("strong"),gEo=o("retribert"),hEo=o(" \u2014 "),ID=a("a"),uEo=o("RetriBertTokenizer"),pEo=o(" or "),ND=a("a"),_Eo=o("RetriBertTokenizerFast"),bEo=o(" (RetriBERT model)"),vEo=l(),al=a("li"),Ige=a("strong"),FEo=o("roberta"),TEo=o(" \u2014 "),qD=a("a"),MEo=o("RobertaTokenizer"),EEo=o(" or "),jD=a("a"),CEo=o("RobertaTokenizerFast"),wEo=o(" (RoBERTa model)"),AEo=l(),nl=a("li"),Nge=a("strong"),LEo=o("roformer"),yEo=o(" \u2014 "),DD=a("a"),xEo=o("RoFormerTokenizer"),$Eo=o(" or "),GD=a("a"),kEo=o("RoFormerTokenizerFast"),SEo=o(" (RoFormer model)"),REo=l(),Cu=a("li"),qge=a("strong"),PEo=o("speech_to_text"),BEo=o(" \u2014 "),OD=a("a"),IEo=o("Speech2TextTokenizer"),NEo=o(" (Speech2Text model)"),qEo=l(),wu=a("li"),jge=a("strong"),jEo=o("speech_to_text_2"),DEo=o(" \u2014 "),VD=a("a"),GEo=o("Speech2Text2Tokenizer"),OEo=o(" (Speech2Text2 model)"),VEo=l(),sl=a("li"),Dge=a("strong"),XEo=o("splinter"),zEo=o(" \u2014 "),XD=a("a"),QEo=o("SplinterTokenizer"),WEo=o(" or "),zD=a("a"),UEo=o("SplinterTokenizerFast"),HEo=o(" (Splinter model)"),JEo=l(),ll=a("li"),Gge=a("strong"),YEo=o("squeezebert"),KEo=o(" \u2014 "),QD=a("a"),ZEo=o("SqueezeBertTokenizer"),e4o=o(" or "),WD=a("a"),o4o=o("SqueezeBertTokenizerFast"),r4o=o(" (SqueezeBERT model)"),t4o=l(),il=a("li"),Oge=a("strong"),a4o=o("t5"),n4o=o(" \u2014 "),UD=a("a"),s4o=o("T5Tokenizer"),l4o=o(" or "),HD=a("a"),i4o=o("T5TokenizerFast"),d4o=o(" (T5 model)"),c4o=l(),Au=a("li"),Vge=a("strong"),m4o=o("tapas"),f4o=o(" \u2014 "),JD=a("a"),g4o=o("TapasTokenizer"),h4o=o(" (TAPAS model)"),u4o=l(),Lu=a("li"),Xge=a("strong"),p4o=o("tapex"),_4o=o(" \u2014 "),YD=a("a"),b4o=o("TapexTokenizer"),v4o=o(" (TAPEX model)"),F4o=l(),yu=a("li"),zge=a("strong"),T4o=o("transfo-xl"),M4o=o(" \u2014 "),KD=a("a"),E4o=o("TransfoXLTokenizer"),C4o=o(" (Transformer-XL model)"),w4o=l(),dl=a("li"),Qge=a("strong"),A4o=o("vilt"),L4o=o(" \u2014 "),ZD=a("a"),y4o=o("BertTokenizer"),x4o=o(" or "),eG=a("a"),$4o=o("BertTokenizerFast"),k4o=o(" (ViLT model)"),S4o=l(),cl=a("li"),Wge=a("strong"),R4o=o("visual_bert"),P4o=o(" \u2014 "),oG=a("a"),B4o=o("BertTokenizer"),I4o=o(" or "),rG=a("a"),N4o=o("BertTokenizerFast"),q4o=o(" (VisualBERT model)"),j4o=l(),xu=a("li"),Uge=a("strong"),D4o=o("wav2vec2"),G4o=o(" \u2014 "),tG=a("a"),O4o=o("Wav2Vec2CTCTokenizer"),V4o=o(" (Wav2Vec2 model)"),X4o=l(),$u=a("li"),Hge=a("strong"),z4o=o("wav2vec2-conformer"),Q4o=o(" \u2014 "),aG=a("a"),W4o=o("Wav2Vec2CTCTokenizer"),U4o=o(" (Wav2Vec2-Conformer model)"),H4o=l(),ku=a("li"),Jge=a("strong"),J4o=o("wav2vec2_phoneme"),Y4o=o(" \u2014 "),nG=a("a"),K4o=o("Wav2Vec2PhonemeCTCTokenizer"),Z4o=o(" (Wav2Vec2Phoneme model)"),eCo=l(),ml=a("li"),Yge=a("strong"),oCo=o("xclip"),rCo=o(" \u2014 "),sG=a("a"),tCo=o("CLIPTokenizer"),aCo=o(" or "),lG=a("a"),nCo=o("CLIPTokenizerFast"),sCo=o(" (X-CLIP model)"),lCo=l(),fl=a("li"),Kge=a("strong"),iCo=o("xglm"),dCo=o(" \u2014 "),iG=a("a"),cCo=o("XGLMTokenizer"),mCo=o(" or "),dG=a("a"),fCo=o("XGLMTokenizerFast"),gCo=o(" (XGLM model)"),hCo=l(),Su=a("li"),Zge=a("strong"),uCo=o("xlm"),pCo=o(" \u2014 "),cG=a("a"),_Co=o("XLMTokenizer"),bCo=o(" (XLM model)"),vCo=l(),Ru=a("li"),ehe=a("strong"),FCo=o("xlm-prophetnet"),TCo=o(" \u2014 "),mG=a("a"),MCo=o("XLMProphetNetTokenizer"),ECo=o(" (XLM-ProphetNet model)"),CCo=l(),gl=a("li"),ohe=a("strong"),wCo=o("xlm-roberta"),ACo=o(" \u2014 "),fG=a("a"),LCo=o("XLMRobertaTokenizer"),yCo=o(" or "),gG=a("a"),xCo=o("XLMRobertaTokenizerFast"),$Co=o(" (XLM-RoBERTa model)"),kCo=l(),hl=a("li"),rhe=a("strong"),SCo=o("xlm-roberta-xl"),RCo=o(" \u2014 "),hG=a("a"),PCo=o("XLMRobertaTokenizer"),BCo=o(" or "),uG=a("a"),ICo=o("XLMRobertaTokenizerFast"),NCo=o(" (XLM-RoBERTa-XL model)"),qCo=l(),ul=a("li"),the=a("strong"),jCo=o("xlnet"),DCo=o(" \u2014 "),pG=a("a"),GCo=o("XLNetTokenizer"),OCo=o(" or "),_G=a("a"),VCo=o("XLNetTokenizerFast"),XCo=o(" (XLNet model)"),zCo=l(),pl=a("li"),ahe=a("strong"),QCo=o("yoso"),WCo=o(" \u2014 "),bG=a("a"),UCo=o("AlbertTokenizer"),HCo=o(" or "),vG=a("a"),JCo=o("AlbertTokenizerFast"),YCo=o(" (YOSO model)"),KCo=l(),F(Pu.$$.fragment),ZCo=l(),Bu=a("div"),F(ex.$$.fragment),e3o=l(),nhe=a("p"),o3o=o("Register a new tokenizer in this mapping."),YKe=l(),hd=a("h2"),Iu=a("a"),she=a("span"),F(ox.$$.fragment),r3o=l(),lhe=a("span"),t3o=o("AutoFeatureExtractor"),KKe=l(),So=a("div"),F(rx.$$.fragment),a3o=l(),tx=a("p"),n3o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FG=a("a"),s3o=o("AutoFeatureExtractor.from_pretrained()"),l3o=o(" class method."),i3o=l(),ax=a("p"),d3o=o("This class cannot be instantiated directly using "),ihe=a("code"),c3o=o("__init__()"),m3o=o(" (throws an error)."),f3o=l(),Ye=a("div"),F(nx.$$.fragment),g3o=l(),dhe=a("p"),h3o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),u3o=l(),Ha=a("p"),p3o=o("The feature extractor class to instantiate is selected based on the "),che=a("code"),_3o=o("model_type"),b3o=o(` property of the config object
(either passed as an argument or loaded from `),mhe=a("code"),v3o=o("pretrained_model_name_or_path"),F3o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fhe=a("code"),T3o=o("pretrained_model_name_or_path"),M3o=o(":"),E3o=l(),z=a("ul"),Nu=a("li"),ghe=a("strong"),C3o=o("beit"),w3o=o(" \u2014 "),TG=a("a"),A3o=o("BeitFeatureExtractor"),L3o=o(" (BEiT model)"),y3o=l(),qu=a("li"),hhe=a("strong"),x3o=o("clip"),$3o=o(" \u2014 "),MG=a("a"),k3o=o("CLIPFeatureExtractor"),S3o=o(" (CLIP model)"),R3o=l(),ju=a("li"),uhe=a("strong"),P3o=o("conditional_detr"),B3o=o(" \u2014 "),EG=a("a"),I3o=o("ConditionalDetrFeatureExtractor"),N3o=o(" (Conditional DETR model)"),q3o=l(),Du=a("li"),phe=a("strong"),j3o=o("convnext"),D3o=o(" \u2014 "),CG=a("a"),G3o=o("ConvNextFeatureExtractor"),O3o=o(" (ConvNeXT model)"),V3o=l(),Gu=a("li"),_he=a("strong"),X3o=o("cvt"),z3o=o(" \u2014 "),wG=a("a"),Q3o=o("ConvNextFeatureExtractor"),W3o=o(" (CvT model)"),U3o=l(),Ou=a("li"),bhe=a("strong"),H3o=o("data2vec-audio"),J3o=o(" \u2014 "),AG=a("a"),Y3o=o("Wav2Vec2FeatureExtractor"),K3o=o(" (Data2VecAudio model)"),Z3o=l(),Vu=a("li"),vhe=a("strong"),e5o=o("data2vec-vision"),o5o=o(" \u2014 "),LG=a("a"),r5o=o("BeitFeatureExtractor"),t5o=o(" (Data2VecVision model)"),a5o=l(),Xu=a("li"),Fhe=a("strong"),n5o=o("deformable_detr"),s5o=o(" \u2014 "),yG=a("a"),l5o=o("DeformableDetrFeatureExtractor"),i5o=o(" (Deformable DETR model)"),d5o=l(),zu=a("li"),The=a("strong"),c5o=o("deit"),m5o=o(" \u2014 "),xG=a("a"),f5o=o("DeiTFeatureExtractor"),g5o=o(" (DeiT model)"),h5o=l(),Qu=a("li"),Mhe=a("strong"),u5o=o("detr"),p5o=o(" \u2014 "),$G=a("a"),_5o=o("DetrFeatureExtractor"),b5o=o(" (DETR model)"),v5o=l(),Wu=a("li"),Ehe=a("strong"),F5o=o("donut"),T5o=o(" \u2014 "),kG=a("a"),M5o=o("DonutFeatureExtractor"),E5o=o(" (Donut model)"),C5o=l(),Uu=a("li"),Che=a("strong"),w5o=o("dpt"),A5o=o(" \u2014 "),SG=a("a"),L5o=o("DPTFeatureExtractor"),y5o=o(" (DPT model)"),x5o=l(),Hu=a("li"),whe=a("strong"),$5o=o("flava"),k5o=o(" \u2014 "),RG=a("a"),S5o=o("FlavaFeatureExtractor"),R5o=o(" (FLAVA model)"),P5o=l(),Ju=a("li"),Ahe=a("strong"),B5o=o("glpn"),I5o=o(" \u2014 "),PG=a("a"),N5o=o("GLPNFeatureExtractor"),q5o=o(" (GLPN model)"),j5o=l(),Yu=a("li"),Lhe=a("strong"),D5o=o("groupvit"),G5o=o(" \u2014 "),BG=a("a"),O5o=o("CLIPFeatureExtractor"),V5o=o(" (GroupViT model)"),X5o=l(),Ku=a("li"),yhe=a("strong"),z5o=o("hubert"),Q5o=o(" \u2014 "),IG=a("a"),W5o=o("Wav2Vec2FeatureExtractor"),U5o=o(" (Hubert model)"),H5o=l(),Zu=a("li"),xhe=a("strong"),J5o=o("imagegpt"),Y5o=o(" \u2014 "),NG=a("a"),K5o=o("ImageGPTFeatureExtractor"),Z5o=o(" (ImageGPT model)"),e0o=l(),ep=a("li"),$he=a("strong"),o0o=o("layoutlmv2"),r0o=o(" \u2014 "),qG=a("a"),t0o=o("LayoutLMv2FeatureExtractor"),a0o=o(" (LayoutLMv2 model)"),n0o=l(),op=a("li"),khe=a("strong"),s0o=o("layoutlmv3"),l0o=o(" \u2014 "),jG=a("a"),i0o=o("LayoutLMv3FeatureExtractor"),d0o=o(" (LayoutLMv3 model)"),c0o=l(),rp=a("li"),She=a("strong"),m0o=o("levit"),f0o=o(" \u2014 "),DG=a("a"),g0o=o("LevitFeatureExtractor"),h0o=o(" (LeViT model)"),u0o=l(),tp=a("li"),Rhe=a("strong"),p0o=o("maskformer"),_0o=o(" \u2014 "),GG=a("a"),b0o=o("MaskFormerFeatureExtractor"),v0o=o(" (MaskFormer model)"),F0o=l(),ap=a("li"),Phe=a("strong"),T0o=o("mctct"),M0o=o(" \u2014 "),OG=a("a"),E0o=o("MCTCTFeatureExtractor"),C0o=o(" (M-CTC-T model)"),w0o=l(),np=a("li"),Bhe=a("strong"),A0o=o("mobilevit"),L0o=o(" \u2014 "),VG=a("a"),y0o=o("MobileViTFeatureExtractor"),x0o=o(" (MobileViT model)"),$0o=l(),sp=a("li"),Ihe=a("strong"),k0o=o("owlvit"),S0o=o(" \u2014 "),XG=a("a"),R0o=o("OwlViTFeatureExtractor"),P0o=o(" (OWL-ViT model)"),B0o=l(),lp=a("li"),Nhe=a("strong"),I0o=o("perceiver"),N0o=o(" \u2014 "),zG=a("a"),q0o=o("PerceiverFeatureExtractor"),j0o=o(" (Perceiver model)"),D0o=l(),ip=a("li"),qhe=a("strong"),G0o=o("poolformer"),O0o=o(" \u2014 "),QG=a("a"),V0o=o("PoolFormerFeatureExtractor"),X0o=o(" (PoolFormer model)"),z0o=l(),dp=a("li"),jhe=a("strong"),Q0o=o("regnet"),W0o=o(" \u2014 "),WG=a("a"),U0o=o("ConvNextFeatureExtractor"),H0o=o(" (RegNet model)"),J0o=l(),cp=a("li"),Dhe=a("strong"),Y0o=o("resnet"),K0o=o(" \u2014 "),UG=a("a"),Z0o=o("ConvNextFeatureExtractor"),ewo=o(" (ResNet model)"),owo=l(),mp=a("li"),Ghe=a("strong"),rwo=o("segformer"),two=o(" \u2014 "),HG=a("a"),awo=o("SegformerFeatureExtractor"),nwo=o(" (SegFormer model)"),swo=l(),fp=a("li"),Ohe=a("strong"),lwo=o("speech_to_text"),iwo=o(" \u2014 "),JG=a("a"),dwo=o("Speech2TextFeatureExtractor"),cwo=o(" (Speech2Text model)"),mwo=l(),gp=a("li"),Vhe=a("strong"),fwo=o("swin"),gwo=o(" \u2014 "),YG=a("a"),hwo=o("ViTFeatureExtractor"),uwo=o(" (Swin Transformer model)"),pwo=l(),hp=a("li"),Xhe=a("strong"),_wo=o("swinv2"),bwo=o(" \u2014 "),KG=a("a"),vwo=o("ViTFeatureExtractor"),Fwo=o(" (Swin Transformer V2 model)"),Two=l(),up=a("li"),zhe=a("strong"),Mwo=o("van"),Ewo=o(" \u2014 "),ZG=a("a"),Cwo=o("ConvNextFeatureExtractor"),wwo=o(" (VAN model)"),Awo=l(),pp=a("li"),Qhe=a("strong"),Lwo=o("videomae"),ywo=o(" \u2014 "),eO=a("a"),xwo=o("VideoMAEFeatureExtractor"),$wo=o(" (VideoMAE model)"),kwo=l(),_p=a("li"),Whe=a("strong"),Swo=o("vilt"),Rwo=o(" \u2014 "),oO=a("a"),Pwo=o("ViltFeatureExtractor"),Bwo=o(" (ViLT model)"),Iwo=l(),bp=a("li"),Uhe=a("strong"),Nwo=o("vit"),qwo=o(" \u2014 "),rO=a("a"),jwo=o("ViTFeatureExtractor"),Dwo=o(" (ViT model)"),Gwo=l(),vp=a("li"),Hhe=a("strong"),Owo=o("vit_mae"),Vwo=o(" \u2014 "),tO=a("a"),Xwo=o("ViTFeatureExtractor"),zwo=o(" (ViTMAE model)"),Qwo=l(),Fp=a("li"),Jhe=a("strong"),Wwo=o("vit_msn"),Uwo=o(" \u2014 "),aO=a("a"),Hwo=o("ViTFeatureExtractor"),Jwo=o(" (ViTMSN model)"),Ywo=l(),Tp=a("li"),Yhe=a("strong"),Kwo=o("wav2vec2"),Zwo=o(" \u2014 "),nO=a("a"),eAo=o("Wav2Vec2FeatureExtractor"),oAo=o(" (Wav2Vec2 model)"),rAo=l(),Mp=a("li"),Khe=a("strong"),tAo=o("wav2vec2-conformer"),aAo=o(" \u2014 "),sO=a("a"),nAo=o("Wav2Vec2FeatureExtractor"),sAo=o(" (Wav2Vec2-Conformer model)"),lAo=l(),Ep=a("li"),Zhe=a("strong"),iAo=o("xclip"),dAo=o(" \u2014 "),lO=a("a"),cAo=o("CLIPFeatureExtractor"),mAo=o(" (X-CLIP model)"),fAo=l(),Cp=a("li"),eue=a("strong"),gAo=o("yolos"),hAo=o(" \u2014 "),iO=a("a"),uAo=o("YolosFeatureExtractor"),pAo=o(" (YOLOS model)"),_Ao=l(),F(wp.$$.fragment),bAo=l(),F(Ap.$$.fragment),vAo=l(),Lp=a("div"),F(sx.$$.fragment),FAo=l(),oue=a("p"),TAo=o("Register a new feature extractor for this class."),ZKe=l(),ud=a("h2"),yp=a("a"),rue=a("span"),F(lx.$$.fragment),MAo=l(),tue=a("span"),EAo=o("AutoProcessor"),eZe=l(),Ro=a("div"),F(ix.$$.fragment),CAo=l(),dx=a("p"),wAo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dO=a("a"),AAo=o("AutoProcessor.from_pretrained()"),LAo=o(" class method."),yAo=l(),cx=a("p"),xAo=o("This class cannot be instantiated directly using "),aue=a("code"),$Ao=o("__init__()"),kAo=o(" (throws an error)."),SAo=l(),Ke=a("div"),F(mx.$$.fragment),RAo=l(),nue=a("p"),PAo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),BAo=l(),pd=a("p"),IAo=o("The processor class to instantiate is selected based on the "),sue=a("code"),NAo=o("model_type"),qAo=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),jAo=o("pretrained_model_name_or_path"),DAo=o(" if possible):"),GAo=l(),ie=a("ul"),xp=a("li"),iue=a("strong"),OAo=o("clip"),VAo=o(" \u2014 "),cO=a("a"),XAo=o("CLIPProcessor"),zAo=o(" (CLIP model)"),QAo=l(),$p=a("li"),due=a("strong"),WAo=o("donut"),UAo=o(" \u2014 "),mO=a("a"),HAo=o("DonutProcessor"),JAo=o(" (Donut model)"),YAo=l(),kp=a("li"),cue=a("strong"),KAo=o("flava"),ZAo=o(" \u2014 "),fO=a("a"),e6o=o("FlavaProcessor"),o6o=o(" (FLAVA model)"),r6o=l(),Sp=a("li"),mue=a("strong"),t6o=o("groupvit"),a6o=o(" \u2014 "),gO=a("a"),n6o=o("CLIPProcessor"),s6o=o(" (GroupViT model)"),l6o=l(),Rp=a("li"),fue=a("strong"),i6o=o("layoutlmv2"),d6o=o(" \u2014 "),hO=a("a"),c6o=o("LayoutLMv2Processor"),m6o=o(" (LayoutLMv2 model)"),f6o=l(),Pp=a("li"),gue=a("strong"),g6o=o("layoutlmv3"),h6o=o(" \u2014 "),uO=a("a"),u6o=o("LayoutLMv3Processor"),p6o=o(" (LayoutLMv3 model)"),_6o=l(),Bp=a("li"),hue=a("strong"),b6o=o("layoutxlm"),v6o=o(" \u2014 "),pO=a("a"),F6o=o("LayoutXLMProcessor"),T6o=o(" (LayoutXLM model)"),M6o=l(),Ip=a("li"),uue=a("strong"),E6o=o("owlvit"),C6o=o(" \u2014 "),_O=a("a"),w6o=o("OwlViTProcessor"),A6o=o(" (OWL-ViT model)"),L6o=l(),Np=a("li"),pue=a("strong"),y6o=o("sew"),x6o=o(" \u2014 "),bO=a("a"),$6o=o("Wav2Vec2Processor"),k6o=o(" (SEW model)"),S6o=l(),qp=a("li"),_ue=a("strong"),R6o=o("sew-d"),P6o=o(" \u2014 "),vO=a("a"),B6o=o("Wav2Vec2Processor"),I6o=o(" (SEW-D model)"),N6o=l(),jp=a("li"),bue=a("strong"),q6o=o("speech_to_text"),j6o=o(" \u2014 "),FO=a("a"),D6o=o("Speech2TextProcessor"),G6o=o(" (Speech2Text model)"),O6o=l(),Dp=a("li"),vue=a("strong"),V6o=o("speech_to_text_2"),X6o=o(" \u2014 "),TO=a("a"),z6o=o("Speech2Text2Processor"),Q6o=o(" (Speech2Text2 model)"),W6o=l(),Gp=a("li"),Fue=a("strong"),U6o=o("trocr"),H6o=o(" \u2014 "),MO=a("a"),J6o=o("TrOCRProcessor"),Y6o=o(" (TrOCR model)"),K6o=l(),Op=a("li"),Tue=a("strong"),Z6o=o("unispeech"),e7o=o(" \u2014 "),EO=a("a"),o7o=o("Wav2Vec2Processor"),r7o=o(" (UniSpeech model)"),t7o=l(),Vp=a("li"),Mue=a("strong"),a7o=o("unispeech-sat"),n7o=o(" \u2014 "),CO=a("a"),s7o=o("Wav2Vec2Processor"),l7o=o(" (UniSpeechSat model)"),i7o=l(),Xp=a("li"),Eue=a("strong"),d7o=o("vilt"),c7o=o(" \u2014 "),wO=a("a"),m7o=o("ViltProcessor"),f7o=o(" (ViLT model)"),g7o=l(),zp=a("li"),Cue=a("strong"),h7o=o("vision-text-dual-encoder"),u7o=o(" \u2014 "),AO=a("a"),p7o=o("VisionTextDualEncoderProcessor"),_7o=o(" (VisionTextDualEncoder model)"),b7o=l(),Qp=a("li"),wue=a("strong"),v7o=o("wav2vec2"),F7o=o(" \u2014 "),LO=a("a"),T7o=o("Wav2Vec2Processor"),M7o=o(" (Wav2Vec2 model)"),E7o=l(),Wp=a("li"),Aue=a("strong"),C7o=o("wav2vec2-conformer"),w7o=o(" \u2014 "),yO=a("a"),A7o=o("Wav2Vec2Processor"),L7o=o(" (Wav2Vec2-Conformer model)"),y7o=l(),Up=a("li"),Lue=a("strong"),x7o=o("wavlm"),$7o=o(" \u2014 "),xO=a("a"),k7o=o("Wav2Vec2Processor"),S7o=o(" (WavLM model)"),R7o=l(),Hp=a("li"),yue=a("strong"),P7o=o("xclip"),B7o=o(" \u2014 "),$O=a("a"),I7o=o("CLIPProcessor"),N7o=o(" (X-CLIP model)"),q7o=l(),F(Jp.$$.fragment),j7o=l(),F(Yp.$$.fragment),D7o=l(),Kp=a("div"),F(fx.$$.fragment),G7o=l(),xue=a("p"),O7o=o("Register a new processor for this class."),oZe=l(),_d=a("h2"),Zp=a("a"),$ue=a("span"),F(gx.$$.fragment),V7o=l(),kue=a("span"),X7o=o("AutoModel"),rZe=l(),Po=a("div"),F(hx.$$.fragment),z7o=l(),bd=a("p"),Q7o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kO=a("a"),W7o=o("from_pretrained()"),U7o=o(" class method or the "),SO=a("a"),H7o=o("from_config()"),J7o=o(` class
method.`),Y7o=l(),ux=a("p"),K7o=o("This class cannot be instantiated directly using "),Sue=a("code"),Z7o=o("__init__()"),eLo=o(" (throws an error)."),oLo=l(),_t=a("div"),F(px.$$.fragment),rLo=l(),Rue=a("p"),tLo=o("Instantiates one of the base model classes of the library from a configuration."),aLo=l(),vd=a("p"),nLo=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),sLo=o("not"),lLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=a("a"),iLo=o("from_pretrained()"),dLo=o(" to load the model weights."),cLo=l(),F(e_.$$.fragment),mLo=l(),Ze=a("div"),F(_x.$$.fragment),fLo=l(),Bue=a("p"),gLo=o("Instantiate one of the base model classes of the library from a pretrained model."),hLo=l(),Ja=a("p"),uLo=o("The model class to instantiate is selected based on the "),Iue=a("code"),pLo=o("model_type"),_Lo=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),bLo=o("pretrained_model_name_or_path"),vLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),FLo=o("pretrained_model_name_or_path"),TLo=o(":"),MLo=l(),y=a("ul"),o_=a("li"),jue=a("strong"),ELo=o("albert"),CLo=o(" \u2014 "),PO=a("a"),wLo=o("AlbertModel"),ALo=o(" (ALBERT model)"),LLo=l(),r_=a("li"),Due=a("strong"),yLo=o("bart"),xLo=o(" \u2014 "),BO=a("a"),$Lo=o("BartModel"),kLo=o(" (BART model)"),SLo=l(),t_=a("li"),Gue=a("strong"),RLo=o("beit"),PLo=o(" \u2014 "),IO=a("a"),BLo=o("BeitModel"),ILo=o(" (BEiT model)"),NLo=l(),a_=a("li"),Oue=a("strong"),qLo=o("bert"),jLo=o(" \u2014 "),NO=a("a"),DLo=o("BertModel"),GLo=o(" (BERT model)"),OLo=l(),n_=a("li"),Vue=a("strong"),VLo=o("bert-generation"),XLo=o(" \u2014 "),qO=a("a"),zLo=o("BertGenerationEncoder"),QLo=o(" (Bert Generation model)"),WLo=l(),s_=a("li"),Xue=a("strong"),ULo=o("big_bird"),HLo=o(" \u2014 "),jO=a("a"),JLo=o("BigBirdModel"),YLo=o(" (BigBird model)"),KLo=l(),l_=a("li"),zue=a("strong"),ZLo=o("bigbird_pegasus"),eyo=o(" \u2014 "),DO=a("a"),oyo=o("BigBirdPegasusModel"),ryo=o(" (BigBird-Pegasus model)"),tyo=l(),i_=a("li"),Que=a("strong"),ayo=o("blenderbot"),nyo=o(" \u2014 "),GO=a("a"),syo=o("BlenderbotModel"),lyo=o(" (Blenderbot model)"),iyo=l(),d_=a("li"),Wue=a("strong"),dyo=o("blenderbot-small"),cyo=o(" \u2014 "),OO=a("a"),myo=o("BlenderbotSmallModel"),fyo=o(" (BlenderbotSmall model)"),gyo=l(),c_=a("li"),Uue=a("strong"),hyo=o("bloom"),uyo=o(" \u2014 "),VO=a("a"),pyo=o("BloomModel"),_yo=o(" (BLOOM model)"),byo=l(),m_=a("li"),Hue=a("strong"),vyo=o("camembert"),Fyo=o(" \u2014 "),XO=a("a"),Tyo=o("CamembertModel"),Myo=o(" (CamemBERT model)"),Eyo=l(),f_=a("li"),Jue=a("strong"),Cyo=o("canine"),wyo=o(" \u2014 "),zO=a("a"),Ayo=o("CanineModel"),Lyo=o(" (CANINE model)"),yyo=l(),g_=a("li"),Yue=a("strong"),xyo=o("clip"),$yo=o(" \u2014 "),QO=a("a"),kyo=o("CLIPModel"),Syo=o(" (CLIP model)"),Ryo=l(),h_=a("li"),Kue=a("strong"),Pyo=o("codegen"),Byo=o(" \u2014 "),WO=a("a"),Iyo=o("CodeGenModel"),Nyo=o(" (CodeGen model)"),qyo=l(),u_=a("li"),Zue=a("strong"),jyo=o("conditional_detr"),Dyo=o(" \u2014 "),UO=a("a"),Gyo=o("ConditionalDetrModel"),Oyo=o(" (Conditional DETR model)"),Vyo=l(),p_=a("li"),epe=a("strong"),Xyo=o("convbert"),zyo=o(" \u2014 "),HO=a("a"),Qyo=o("ConvBertModel"),Wyo=o(" (ConvBERT model)"),Uyo=l(),__=a("li"),ope=a("strong"),Hyo=o("convnext"),Jyo=o(" \u2014 "),JO=a("a"),Yyo=o("ConvNextModel"),Kyo=o(" (ConvNeXT model)"),Zyo=l(),b_=a("li"),rpe=a("strong"),e8o=o("ctrl"),o8o=o(" \u2014 "),YO=a("a"),r8o=o("CTRLModel"),t8o=o(" (CTRL model)"),a8o=l(),v_=a("li"),tpe=a("strong"),n8o=o("cvt"),s8o=o(" \u2014 "),KO=a("a"),l8o=o("CvtModel"),i8o=o(" (CvT model)"),d8o=l(),F_=a("li"),ape=a("strong"),c8o=o("data2vec-audio"),m8o=o(" \u2014 "),ZO=a("a"),f8o=o("Data2VecAudioModel"),g8o=o(" (Data2VecAudio model)"),h8o=l(),T_=a("li"),npe=a("strong"),u8o=o("data2vec-text"),p8o=o(" \u2014 "),eV=a("a"),_8o=o("Data2VecTextModel"),b8o=o(" (Data2VecText model)"),v8o=l(),M_=a("li"),spe=a("strong"),F8o=o("data2vec-vision"),T8o=o(" \u2014 "),oV=a("a"),M8o=o("Data2VecVisionModel"),E8o=o(" (Data2VecVision model)"),C8o=l(),E_=a("li"),lpe=a("strong"),w8o=o("deberta"),A8o=o(" \u2014 "),rV=a("a"),L8o=o("DebertaModel"),y8o=o(" (DeBERTa model)"),x8o=l(),C_=a("li"),ipe=a("strong"),$8o=o("deberta-v2"),k8o=o(" \u2014 "),tV=a("a"),S8o=o("DebertaV2Model"),R8o=o(" (DeBERTa-v2 model)"),P8o=l(),w_=a("li"),dpe=a("strong"),B8o=o("decision_transformer"),I8o=o(" \u2014 "),aV=a("a"),N8o=o("DecisionTransformerModel"),q8o=o(" (Decision Transformer model)"),j8o=l(),A_=a("li"),cpe=a("strong"),D8o=o("deformable_detr"),G8o=o(" \u2014 "),nV=a("a"),O8o=o("DeformableDetrModel"),V8o=o(" (Deformable DETR model)"),X8o=l(),L_=a("li"),mpe=a("strong"),z8o=o("deit"),Q8o=o(" \u2014 "),sV=a("a"),W8o=o("DeiTModel"),U8o=o(" (DeiT model)"),H8o=l(),y_=a("li"),fpe=a("strong"),J8o=o("detr"),Y8o=o(" \u2014 "),lV=a("a"),K8o=o("DetrModel"),Z8o=o(" (DETR model)"),e9o=l(),x_=a("li"),gpe=a("strong"),o9o=o("distilbert"),r9o=o(" \u2014 "),iV=a("a"),t9o=o("DistilBertModel"),a9o=o(" (DistilBERT model)"),n9o=l(),$_=a("li"),hpe=a("strong"),s9o=o("donut-swin"),l9o=o(" \u2014 "),dV=a("a"),i9o=o("DonutSwinModel"),d9o=o(" (DonutSwin model)"),c9o=l(),k_=a("li"),upe=a("strong"),m9o=o("dpr"),f9o=o(" \u2014 "),cV=a("a"),g9o=o("DPRQuestionEncoder"),h9o=o(" (DPR model)"),u9o=l(),S_=a("li"),ppe=a("strong"),p9o=o("dpt"),_9o=o(" \u2014 "),mV=a("a"),b9o=o("DPTModel"),v9o=o(" (DPT model)"),F9o=l(),R_=a("li"),_pe=a("strong"),T9o=o("electra"),M9o=o(" \u2014 "),fV=a("a"),E9o=o("ElectraModel"),C9o=o(" (ELECTRA model)"),w9o=l(),P_=a("li"),bpe=a("strong"),A9o=o("ernie"),L9o=o(" \u2014 "),gV=a("a"),y9o=o("ErnieModel"),x9o=o(" (ERNIE model)"),$9o=l(),B_=a("li"),vpe=a("strong"),k9o=o("flaubert"),S9o=o(" \u2014 "),hV=a("a"),R9o=o("FlaubertModel"),P9o=o(" (FlauBERT model)"),B9o=l(),I_=a("li"),Fpe=a("strong"),I9o=o("flava"),N9o=o(" \u2014 "),uV=a("a"),q9o=o("FlavaModel"),j9o=o(" (FLAVA model)"),D9o=l(),N_=a("li"),Tpe=a("strong"),G9o=o("fnet"),O9o=o(" \u2014 "),pV=a("a"),V9o=o("FNetModel"),X9o=o(" (FNet model)"),z9o=l(),q_=a("li"),Mpe=a("strong"),Q9o=o("fsmt"),W9o=o(" \u2014 "),_V=a("a"),U9o=o("FSMTModel"),H9o=o(" (FairSeq Machine-Translation model)"),J9o=l(),_l=a("li"),Epe=a("strong"),Y9o=o("funnel"),K9o=o(" \u2014 "),bV=a("a"),Z9o=o("FunnelModel"),exo=o(" or "),vV=a("a"),oxo=o("FunnelBaseModel"),rxo=o(" (Funnel Transformer model)"),txo=l(),j_=a("li"),Cpe=a("strong"),axo=o("glpn"),nxo=o(" \u2014 "),FV=a("a"),sxo=o("GLPNModel"),lxo=o(" (GLPN model)"),ixo=l(),D_=a("li"),wpe=a("strong"),dxo=o("gpt2"),cxo=o(" \u2014 "),TV=a("a"),mxo=o("GPT2Model"),fxo=o(" (OpenAI GPT-2 model)"),gxo=l(),G_=a("li"),Ape=a("strong"),hxo=o("gpt_neo"),uxo=o(" \u2014 "),MV=a("a"),pxo=o("GPTNeoModel"),_xo=o(" (GPT Neo model)"),bxo=l(),O_=a("li"),Lpe=a("strong"),vxo=o("gpt_neox"),Fxo=o(" \u2014 "),EV=a("a"),Txo=o("GPTNeoXModel"),Mxo=o(" (GPT NeoX model)"),Exo=l(),V_=a("li"),ype=a("strong"),Cxo=o("gpt_neox_japanese"),wxo=o(" \u2014 "),CV=a("a"),Axo=o("GPTNeoXJapaneseModel"),Lxo=o(" (GPT NeoX Japanese model)"),yxo=l(),X_=a("li"),xpe=a("strong"),xxo=o("gptj"),$xo=o(" \u2014 "),wV=a("a"),kxo=o("GPTJModel"),Sxo=o(" (GPT-J model)"),Rxo=l(),z_=a("li"),$pe=a("strong"),Pxo=o("groupvit"),Bxo=o(" \u2014 "),AV=a("a"),Ixo=o("GroupViTModel"),Nxo=o(" (GroupViT model)"),qxo=l(),Q_=a("li"),kpe=a("strong"),jxo=o("hubert"),Dxo=o(" \u2014 "),LV=a("a"),Gxo=o("HubertModel"),Oxo=o(" (Hubert model)"),Vxo=l(),W_=a("li"),Spe=a("strong"),Xxo=o("ibert"),zxo=o(" \u2014 "),yV=a("a"),Qxo=o("IBertModel"),Wxo=o(" (I-BERT model)"),Uxo=l(),U_=a("li"),Rpe=a("strong"),Hxo=o("imagegpt"),Jxo=o(" \u2014 "),xV=a("a"),Yxo=o("ImageGPTModel"),Kxo=o(" (ImageGPT model)"),Zxo=l(),H_=a("li"),Ppe=a("strong"),e$o=o("layoutlm"),o$o=o(" \u2014 "),$V=a("a"),r$o=o("LayoutLMModel"),t$o=o(" (LayoutLM model)"),a$o=l(),J_=a("li"),Bpe=a("strong"),n$o=o("layoutlmv2"),s$o=o(" \u2014 "),kV=a("a"),l$o=o("LayoutLMv2Model"),i$o=o(" (LayoutLMv2 model)"),d$o=l(),Y_=a("li"),Ipe=a("strong"),c$o=o("layoutlmv3"),m$o=o(" \u2014 "),SV=a("a"),f$o=o("LayoutLMv3Model"),g$o=o(" (LayoutLMv3 model)"),h$o=l(),K_=a("li"),Npe=a("strong"),u$o=o("led"),p$o=o(" \u2014 "),RV=a("a"),_$o=o("LEDModel"),b$o=o(" (LED model)"),v$o=l(),Z_=a("li"),qpe=a("strong"),F$o=o("levit"),T$o=o(" \u2014 "),PV=a("a"),M$o=o("LevitModel"),E$o=o(" (LeViT model)"),C$o=l(),eb=a("li"),jpe=a("strong"),w$o=o("longformer"),A$o=o(" \u2014 "),BV=a("a"),L$o=o("LongformerModel"),y$o=o(" (Longformer model)"),x$o=l(),ob=a("li"),Dpe=a("strong"),$$o=o("longt5"),k$o=o(" \u2014 "),IV=a("a"),S$o=o("LongT5Model"),R$o=o(" (LongT5 model)"),P$o=l(),rb=a("li"),Gpe=a("strong"),B$o=o("luke"),I$o=o(" \u2014 "),NV=a("a"),N$o=o("LukeModel"),q$o=o(" (LUKE model)"),j$o=l(),tb=a("li"),Ope=a("strong"),D$o=o("lxmert"),G$o=o(" \u2014 "),qV=a("a"),O$o=o("LxmertModel"),V$o=o(" (LXMERT model)"),X$o=l(),ab=a("li"),Vpe=a("strong"),z$o=o("m2m_100"),Q$o=o(" \u2014 "),jV=a("a"),W$o=o("M2M100Model"),U$o=o(" (M2M100 model)"),H$o=l(),nb=a("li"),Xpe=a("strong"),J$o=o("marian"),Y$o=o(" \u2014 "),DV=a("a"),K$o=o("MarianModel"),Z$o=o(" (Marian model)"),eko=l(),sb=a("li"),zpe=a("strong"),oko=o("maskformer"),rko=o(" \u2014 "),GV=a("a"),tko=o("MaskFormerModel"),ako=o(" (MaskFormer model)"),nko=l(),lb=a("li"),Qpe=a("strong"),sko=o("mbart"),lko=o(" \u2014 "),OV=a("a"),iko=o("MBartModel"),dko=o(" (mBART model)"),cko=l(),ib=a("li"),Wpe=a("strong"),mko=o("mctct"),fko=o(" \u2014 "),VV=a("a"),gko=o("MCTCTModel"),hko=o(" (M-CTC-T model)"),uko=l(),db=a("li"),Upe=a("strong"),pko=o("megatron-bert"),_ko=o(" \u2014 "),XV=a("a"),bko=o("MegatronBertModel"),vko=o(" (Megatron-BERT model)"),Fko=l(),cb=a("li"),Hpe=a("strong"),Tko=o("mobilebert"),Mko=o(" \u2014 "),zV=a("a"),Eko=o("MobileBertModel"),Cko=o(" (MobileBERT model)"),wko=l(),mb=a("li"),Jpe=a("strong"),Ako=o("mobilevit"),Lko=o(" \u2014 "),QV=a("a"),yko=o("MobileViTModel"),xko=o(" (MobileViT model)"),$ko=l(),fb=a("li"),Ype=a("strong"),kko=o("mpnet"),Sko=o(" \u2014 "),WV=a("a"),Rko=o("MPNetModel"),Pko=o(" (MPNet model)"),Bko=l(),gb=a("li"),Kpe=a("strong"),Iko=o("mt5"),Nko=o(" \u2014 "),UV=a("a"),qko=o("MT5Model"),jko=o(" (MT5 model)"),Dko=l(),hb=a("li"),Zpe=a("strong"),Gko=o("mvp"),Oko=o(" \u2014 "),HV=a("a"),Vko=o("MvpModel"),Xko=o(" (MVP model)"),zko=l(),ub=a("li"),e_e=a("strong"),Qko=o("nezha"),Wko=o(" \u2014 "),JV=a("a"),Uko=o("NezhaModel"),Hko=o(" (Nezha model)"),Jko=l(),pb=a("li"),o_e=a("strong"),Yko=o("nllb"),Kko=o(" \u2014 "),YV=a("a"),Zko=o("M2M100Model"),eSo=o(" (NLLB model)"),oSo=l(),_b=a("li"),r_e=a("strong"),rSo=o("nystromformer"),tSo=o(" \u2014 "),KV=a("a"),aSo=o("NystromformerModel"),nSo=o(" (Nystr\xF6mformer model)"),sSo=l(),bb=a("li"),t_e=a("strong"),lSo=o("openai-gpt"),iSo=o(" \u2014 "),ZV=a("a"),dSo=o("OpenAIGPTModel"),cSo=o(" (OpenAI GPT model)"),mSo=l(),vb=a("li"),a_e=a("strong"),fSo=o("opt"),gSo=o(" \u2014 "),eX=a("a"),hSo=o("OPTModel"),uSo=o(" (OPT model)"),pSo=l(),Fb=a("li"),n_e=a("strong"),_So=o("owlvit"),bSo=o(" \u2014 "),oX=a("a"),vSo=o("OwlViTModel"),FSo=o(" (OWL-ViT model)"),TSo=l(),Tb=a("li"),s_e=a("strong"),MSo=o("pegasus"),ESo=o(" \u2014 "),rX=a("a"),CSo=o("PegasusModel"),wSo=o(" (Pegasus model)"),ASo=l(),Mb=a("li"),l_e=a("strong"),LSo=o("pegasus_x"),ySo=o(" \u2014 "),tX=a("a"),xSo=o("PegasusXModel"),$So=o(" (PEGASUS-X model)"),kSo=l(),Eb=a("li"),i_e=a("strong"),SSo=o("perceiver"),RSo=o(" \u2014 "),aX=a("a"),PSo=o("PerceiverModel"),BSo=o(" (Perceiver model)"),ISo=l(),Cb=a("li"),d_e=a("strong"),NSo=o("plbart"),qSo=o(" \u2014 "),nX=a("a"),jSo=o("PLBartModel"),DSo=o(" (PLBart model)"),GSo=l(),wb=a("li"),c_e=a("strong"),OSo=o("poolformer"),VSo=o(" \u2014 "),sX=a("a"),XSo=o("PoolFormerModel"),zSo=o(" (PoolFormer model)"),QSo=l(),Ab=a("li"),m_e=a("strong"),WSo=o("prophetnet"),USo=o(" \u2014 "),lX=a("a"),HSo=o("ProphetNetModel"),JSo=o(" (ProphetNet model)"),YSo=l(),Lb=a("li"),f_e=a("strong"),KSo=o("qdqbert"),ZSo=o(" \u2014 "),iX=a("a"),eRo=o("QDQBertModel"),oRo=o(" (QDQBert model)"),rRo=l(),yb=a("li"),g_e=a("strong"),tRo=o("reformer"),aRo=o(" \u2014 "),dX=a("a"),nRo=o("ReformerModel"),sRo=o(" (Reformer model)"),lRo=l(),xb=a("li"),h_e=a("strong"),iRo=o("regnet"),dRo=o(" \u2014 "),cX=a("a"),cRo=o("RegNetModel"),mRo=o(" (RegNet model)"),fRo=l(),$b=a("li"),u_e=a("strong"),gRo=o("rembert"),hRo=o(" \u2014 "),mX=a("a"),uRo=o("RemBertModel"),pRo=o(" (RemBERT model)"),_Ro=l(),kb=a("li"),p_e=a("strong"),bRo=o("resnet"),vRo=o(" \u2014 "),fX=a("a"),FRo=o("ResNetModel"),TRo=o(" (ResNet model)"),MRo=l(),Sb=a("li"),__e=a("strong"),ERo=o("retribert"),CRo=o(" \u2014 "),gX=a("a"),wRo=o("RetriBertModel"),ARo=o(" (RetriBERT model)"),LRo=l(),Rb=a("li"),b_e=a("strong"),yRo=o("roberta"),xRo=o(" \u2014 "),hX=a("a"),$Ro=o("RobertaModel"),kRo=o(" (RoBERTa model)"),SRo=l(),Pb=a("li"),v_e=a("strong"),RRo=o("roformer"),PRo=o(" \u2014 "),uX=a("a"),BRo=o("RoFormerModel"),IRo=o(" (RoFormer model)"),NRo=l(),Bb=a("li"),F_e=a("strong"),qRo=o("segformer"),jRo=o(" \u2014 "),pX=a("a"),DRo=o("SegformerModel"),GRo=o(" (SegFormer model)"),ORo=l(),Ib=a("li"),T_e=a("strong"),VRo=o("sew"),XRo=o(" \u2014 "),_X=a("a"),zRo=o("SEWModel"),QRo=o(" (SEW model)"),WRo=l(),Nb=a("li"),M_e=a("strong"),URo=o("sew-d"),HRo=o(" \u2014 "),bX=a("a"),JRo=o("SEWDModel"),YRo=o(" (SEW-D model)"),KRo=l(),qb=a("li"),E_e=a("strong"),ZRo=o("speech_to_text"),ePo=o(" \u2014 "),vX=a("a"),oPo=o("Speech2TextModel"),rPo=o(" (Speech2Text model)"),tPo=l(),jb=a("li"),C_e=a("strong"),aPo=o("splinter"),nPo=o(" \u2014 "),FX=a("a"),sPo=o("SplinterModel"),lPo=o(" (Splinter model)"),iPo=l(),Db=a("li"),w_e=a("strong"),dPo=o("squeezebert"),cPo=o(" \u2014 "),TX=a("a"),mPo=o("SqueezeBertModel"),fPo=o(" (SqueezeBERT model)"),gPo=l(),Gb=a("li"),A_e=a("strong"),hPo=o("swin"),uPo=o(" \u2014 "),MX=a("a"),pPo=o("SwinModel"),_Po=o(" (Swin Transformer model)"),bPo=l(),Ob=a("li"),L_e=a("strong"),vPo=o("swinv2"),FPo=o(" \u2014 "),EX=a("a"),TPo=o("Swinv2Model"),MPo=o(" (Swin Transformer V2 model)"),EPo=l(),Vb=a("li"),y_e=a("strong"),CPo=o("t5"),wPo=o(" \u2014 "),CX=a("a"),APo=o("T5Model"),LPo=o(" (T5 model)"),yPo=l(),Xb=a("li"),x_e=a("strong"),xPo=o("tapas"),$Po=o(" \u2014 "),wX=a("a"),kPo=o("TapasModel"),SPo=o(" (TAPAS model)"),RPo=l(),zb=a("li"),$_e=a("strong"),PPo=o("trajectory_transformer"),BPo=o(" \u2014 "),AX=a("a"),IPo=o("TrajectoryTransformerModel"),NPo=o(" (Trajectory Transformer model)"),qPo=l(),Qb=a("li"),k_e=a("strong"),jPo=o("transfo-xl"),DPo=o(" \u2014 "),LX=a("a"),GPo=o("TransfoXLModel"),OPo=o(" (Transformer-XL model)"),VPo=l(),Wb=a("li"),S_e=a("strong"),XPo=o("unispeech"),zPo=o(" \u2014 "),yX=a("a"),QPo=o("UniSpeechModel"),WPo=o(" (UniSpeech model)"),UPo=l(),Ub=a("li"),R_e=a("strong"),HPo=o("unispeech-sat"),JPo=o(" \u2014 "),xX=a("a"),YPo=o("UniSpeechSatModel"),KPo=o(" (UniSpeechSat model)"),ZPo=l(),Hb=a("li"),P_e=a("strong"),eBo=o("van"),oBo=o(" \u2014 "),$X=a("a"),rBo=o("VanModel"),tBo=o(" (VAN model)"),aBo=l(),Jb=a("li"),B_e=a("strong"),nBo=o("videomae"),sBo=o(" \u2014 "),kX=a("a"),lBo=o("VideoMAEModel"),iBo=o(" (VideoMAE model)"),dBo=l(),Yb=a("li"),I_e=a("strong"),cBo=o("vilt"),mBo=o(" \u2014 "),SX=a("a"),fBo=o("ViltModel"),gBo=o(" (ViLT model)"),hBo=l(),Kb=a("li"),N_e=a("strong"),uBo=o("vision-text-dual-encoder"),pBo=o(" \u2014 "),RX=a("a"),_Bo=o("VisionTextDualEncoderModel"),bBo=o(" (VisionTextDualEncoder model)"),vBo=l(),Zb=a("li"),q_e=a("strong"),FBo=o("visual_bert"),TBo=o(" \u2014 "),PX=a("a"),MBo=o("VisualBertModel"),EBo=o(" (VisualBERT model)"),CBo=l(),e2=a("li"),j_e=a("strong"),wBo=o("vit"),ABo=o(" \u2014 "),BX=a("a"),LBo=o("ViTModel"),yBo=o(" (ViT model)"),xBo=l(),o2=a("li"),D_e=a("strong"),$Bo=o("vit_mae"),kBo=o(" \u2014 "),IX=a("a"),SBo=o("ViTMAEModel"),RBo=o(" (ViTMAE model)"),PBo=l(),r2=a("li"),G_e=a("strong"),BBo=o("vit_msn"),IBo=o(" \u2014 "),NX=a("a"),NBo=o("ViTMSNModel"),qBo=o(" (ViTMSN model)"),jBo=l(),t2=a("li"),O_e=a("strong"),DBo=o("wav2vec2"),GBo=o(" \u2014 "),qX=a("a"),OBo=o("Wav2Vec2Model"),VBo=o(" (Wav2Vec2 model)"),XBo=l(),a2=a("li"),V_e=a("strong"),zBo=o("wav2vec2-conformer"),QBo=o(" \u2014 "),jX=a("a"),WBo=o("Wav2Vec2ConformerModel"),UBo=o(" (Wav2Vec2-Conformer model)"),HBo=l(),n2=a("li"),X_e=a("strong"),JBo=o("wavlm"),YBo=o(" \u2014 "),DX=a("a"),KBo=o("WavLMModel"),ZBo=o(" (WavLM model)"),eIo=l(),s2=a("li"),z_e=a("strong"),oIo=o("xclip"),rIo=o(" \u2014 "),GX=a("a"),tIo=o("XCLIPModel"),aIo=o(" (X-CLIP model)"),nIo=l(),l2=a("li"),Q_e=a("strong"),sIo=o("xglm"),lIo=o(" \u2014 "),OX=a("a"),iIo=o("XGLMModel"),dIo=o(" (XGLM model)"),cIo=l(),i2=a("li"),W_e=a("strong"),mIo=o("xlm"),fIo=o(" \u2014 "),VX=a("a"),gIo=o("XLMModel"),hIo=o(" (XLM model)"),uIo=l(),d2=a("li"),U_e=a("strong"),pIo=o("xlm-prophetnet"),_Io=o(" \u2014 "),XX=a("a"),bIo=o("XLMProphetNetModel"),vIo=o(" (XLM-ProphetNet model)"),FIo=l(),c2=a("li"),H_e=a("strong"),TIo=o("xlm-roberta"),MIo=o(" \u2014 "),zX=a("a"),EIo=o("XLMRobertaModel"),CIo=o(" (XLM-RoBERTa model)"),wIo=l(),m2=a("li"),J_e=a("strong"),AIo=o("xlm-roberta-xl"),LIo=o(" \u2014 "),QX=a("a"),yIo=o("XLMRobertaXLModel"),xIo=o(" (XLM-RoBERTa-XL model)"),$Io=l(),f2=a("li"),Y_e=a("strong"),kIo=o("xlnet"),SIo=o(" \u2014 "),WX=a("a"),RIo=o("XLNetModel"),PIo=o(" (XLNet model)"),BIo=l(),g2=a("li"),K_e=a("strong"),IIo=o("yolos"),NIo=o(" \u2014 "),UX=a("a"),qIo=o("YolosModel"),jIo=o(" (YOLOS model)"),DIo=l(),h2=a("li"),Z_e=a("strong"),GIo=o("yoso"),OIo=o(" \u2014 "),HX=a("a"),VIo=o("YosoModel"),XIo=o(" (YOSO model)"),zIo=l(),u2=a("p"),QIo=o("The model is set in evaluation mode by default using "),ebe=a("code"),WIo=o("model.eval()"),UIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),HIo=o("model.train()"),JIo=l(),F(p2.$$.fragment),tZe=l(),Fd=a("h2"),_2=a("a"),rbe=a("span"),F(bx.$$.fragment),YIo=l(),tbe=a("span"),KIo=o("AutoModelForPreTraining"),aZe=l(),Bo=a("div"),F(vx.$$.fragment),ZIo=l(),Td=a("p"),eNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JX=a("a"),oNo=o("from_pretrained()"),rNo=o(" class method or the "),YX=a("a"),tNo=o("from_config()"),aNo=o(` class
method.`),nNo=l(),Fx=a("p"),sNo=o("This class cannot be instantiated directly using "),abe=a("code"),lNo=o("__init__()"),iNo=o(" (throws an error)."),dNo=l(),bt=a("div"),F(Tx.$$.fragment),cNo=l(),nbe=a("p"),mNo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fNo=l(),Md=a("p"),gNo=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),hNo=o("not"),uNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),pNo=o("from_pretrained()"),_No=o(" to load the model weights."),bNo=l(),F(b2.$$.fragment),vNo=l(),eo=a("div"),F(Mx.$$.fragment),FNo=l(),lbe=a("p"),TNo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MNo=l(),Ya=a("p"),ENo=o("The model class to instantiate is selected based on the "),ibe=a("code"),CNo=o("model_type"),wNo=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),ANo=o("pretrained_model_name_or_path"),LNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),yNo=o("pretrained_model_name_or_path"),xNo=o(":"),$No=l(),G=a("ul"),v2=a("li"),mbe=a("strong"),kNo=o("albert"),SNo=o(" \u2014 "),ZX=a("a"),RNo=o("AlbertForPreTraining"),PNo=o(" (ALBERT model)"),BNo=l(),F2=a("li"),fbe=a("strong"),INo=o("bart"),NNo=o(" \u2014 "),ez=a("a"),qNo=o("BartForConditionalGeneration"),jNo=o(" (BART model)"),DNo=l(),T2=a("li"),gbe=a("strong"),GNo=o("bert"),ONo=o(" \u2014 "),oz=a("a"),VNo=o("BertForPreTraining"),XNo=o(" (BERT model)"),zNo=l(),M2=a("li"),hbe=a("strong"),QNo=o("big_bird"),WNo=o(" \u2014 "),rz=a("a"),UNo=o("BigBirdForPreTraining"),HNo=o(" (BigBird model)"),JNo=l(),E2=a("li"),ube=a("strong"),YNo=o("bloom"),KNo=o(" \u2014 "),tz=a("a"),ZNo=o("BloomForCausalLM"),eqo=o(" (BLOOM model)"),oqo=l(),C2=a("li"),pbe=a("strong"),rqo=o("camembert"),tqo=o(" \u2014 "),az=a("a"),aqo=o("CamembertForMaskedLM"),nqo=o(" (CamemBERT model)"),sqo=l(),w2=a("li"),_be=a("strong"),lqo=o("ctrl"),iqo=o(" \u2014 "),nz=a("a"),dqo=o("CTRLLMHeadModel"),cqo=o(" (CTRL model)"),mqo=l(),A2=a("li"),bbe=a("strong"),fqo=o("data2vec-text"),gqo=o(" \u2014 "),sz=a("a"),hqo=o("Data2VecTextForMaskedLM"),uqo=o(" (Data2VecText model)"),pqo=l(),L2=a("li"),vbe=a("strong"),_qo=o("deberta"),bqo=o(" \u2014 "),lz=a("a"),vqo=o("DebertaForMaskedLM"),Fqo=o(" (DeBERTa model)"),Tqo=l(),y2=a("li"),Fbe=a("strong"),Mqo=o("deberta-v2"),Eqo=o(" \u2014 "),iz=a("a"),Cqo=o("DebertaV2ForMaskedLM"),wqo=o(" (DeBERTa-v2 model)"),Aqo=l(),x2=a("li"),Tbe=a("strong"),Lqo=o("distilbert"),yqo=o(" \u2014 "),dz=a("a"),xqo=o("DistilBertForMaskedLM"),$qo=o(" (DistilBERT model)"),kqo=l(),$2=a("li"),Mbe=a("strong"),Sqo=o("electra"),Rqo=o(" \u2014 "),cz=a("a"),Pqo=o("ElectraForPreTraining"),Bqo=o(" (ELECTRA model)"),Iqo=l(),k2=a("li"),Ebe=a("strong"),Nqo=o("ernie"),qqo=o(" \u2014 "),mz=a("a"),jqo=o("ErnieForPreTraining"),Dqo=o(" (ERNIE model)"),Gqo=l(),S2=a("li"),Cbe=a("strong"),Oqo=o("flaubert"),Vqo=o(" \u2014 "),fz=a("a"),Xqo=o("FlaubertWithLMHeadModel"),zqo=o(" (FlauBERT model)"),Qqo=l(),R2=a("li"),wbe=a("strong"),Wqo=o("flava"),Uqo=o(" \u2014 "),gz=a("a"),Hqo=o("FlavaForPreTraining"),Jqo=o(" (FLAVA model)"),Yqo=l(),P2=a("li"),Abe=a("strong"),Kqo=o("fnet"),Zqo=o(" \u2014 "),hz=a("a"),ejo=o("FNetForPreTraining"),ojo=o(" (FNet model)"),rjo=l(),B2=a("li"),Lbe=a("strong"),tjo=o("fsmt"),ajo=o(" \u2014 "),uz=a("a"),njo=o("FSMTForConditionalGeneration"),sjo=o(" (FairSeq Machine-Translation model)"),ljo=l(),I2=a("li"),ybe=a("strong"),ijo=o("funnel"),djo=o(" \u2014 "),pz=a("a"),cjo=o("FunnelForPreTraining"),mjo=o(" (Funnel Transformer model)"),fjo=l(),N2=a("li"),xbe=a("strong"),gjo=o("gpt2"),hjo=o(" \u2014 "),_z=a("a"),ujo=o("GPT2LMHeadModel"),pjo=o(" (OpenAI GPT-2 model)"),_jo=l(),q2=a("li"),$be=a("strong"),bjo=o("ibert"),vjo=o(" \u2014 "),bz=a("a"),Fjo=o("IBertForMaskedLM"),Tjo=o(" (I-BERT model)"),Mjo=l(),j2=a("li"),kbe=a("strong"),Ejo=o("layoutlm"),Cjo=o(" \u2014 "),vz=a("a"),wjo=o("LayoutLMForMaskedLM"),Ajo=o(" (LayoutLM model)"),Ljo=l(),D2=a("li"),Sbe=a("strong"),yjo=o("longformer"),xjo=o(" \u2014 "),Fz=a("a"),$jo=o("LongformerForMaskedLM"),kjo=o(" (Longformer model)"),Sjo=l(),G2=a("li"),Rbe=a("strong"),Rjo=o("luke"),Pjo=o(" \u2014 "),Tz=a("a"),Bjo=o("LukeForMaskedLM"),Ijo=o(" (LUKE model)"),Njo=l(),O2=a("li"),Pbe=a("strong"),qjo=o("lxmert"),jjo=o(" \u2014 "),Mz=a("a"),Djo=o("LxmertForPreTraining"),Gjo=o(" (LXMERT model)"),Ojo=l(),V2=a("li"),Bbe=a("strong"),Vjo=o("megatron-bert"),Xjo=o(" \u2014 "),Ez=a("a"),zjo=o("MegatronBertForPreTraining"),Qjo=o(" (Megatron-BERT model)"),Wjo=l(),X2=a("li"),Ibe=a("strong"),Ujo=o("mobilebert"),Hjo=o(" \u2014 "),Cz=a("a"),Jjo=o("MobileBertForPreTraining"),Yjo=o(" (MobileBERT model)"),Kjo=l(),z2=a("li"),Nbe=a("strong"),Zjo=o("mpnet"),eDo=o(" \u2014 "),wz=a("a"),oDo=o("MPNetForMaskedLM"),rDo=o(" (MPNet model)"),tDo=l(),Q2=a("li"),qbe=a("strong"),aDo=o("mvp"),nDo=o(" \u2014 "),Az=a("a"),sDo=o("MvpForConditionalGeneration"),lDo=o(" (MVP model)"),iDo=l(),W2=a("li"),jbe=a("strong"),dDo=o("nezha"),cDo=o(" \u2014 "),Lz=a("a"),mDo=o("NezhaForPreTraining"),fDo=o(" (Nezha model)"),gDo=l(),U2=a("li"),Dbe=a("strong"),hDo=o("openai-gpt"),uDo=o(" \u2014 "),yz=a("a"),pDo=o("OpenAIGPTLMHeadModel"),_Do=o(" (OpenAI GPT model)"),bDo=l(),H2=a("li"),Gbe=a("strong"),vDo=o("retribert"),FDo=o(" \u2014 "),xz=a("a"),TDo=o("RetriBertModel"),MDo=o(" (RetriBERT model)"),EDo=l(),J2=a("li"),Obe=a("strong"),CDo=o("roberta"),wDo=o(" \u2014 "),$z=a("a"),ADo=o("RobertaForMaskedLM"),LDo=o(" (RoBERTa model)"),yDo=l(),Y2=a("li"),Vbe=a("strong"),xDo=o("splinter"),$Do=o(" \u2014 "),kz=a("a"),kDo=o("SplinterForPreTraining"),SDo=o(" (Splinter model)"),RDo=l(),K2=a("li"),Xbe=a("strong"),PDo=o("squeezebert"),BDo=o(" \u2014 "),Sz=a("a"),IDo=o("SqueezeBertForMaskedLM"),NDo=o(" (SqueezeBERT model)"),qDo=l(),Z2=a("li"),zbe=a("strong"),jDo=o("t5"),DDo=o(" \u2014 "),Rz=a("a"),GDo=o("T5ForConditionalGeneration"),ODo=o(" (T5 model)"),VDo=l(),e1=a("li"),Qbe=a("strong"),XDo=o("tapas"),zDo=o(" \u2014 "),Pz=a("a"),QDo=o("TapasForMaskedLM"),WDo=o(" (TAPAS model)"),UDo=l(),o1=a("li"),Wbe=a("strong"),HDo=o("transfo-xl"),JDo=o(" \u2014 "),Bz=a("a"),YDo=o("TransfoXLLMHeadModel"),KDo=o(" (Transformer-XL model)"),ZDo=l(),r1=a("li"),Ube=a("strong"),eGo=o("unispeech"),oGo=o(" \u2014 "),Iz=a("a"),rGo=o("UniSpeechForPreTraining"),tGo=o(" (UniSpeech model)"),aGo=l(),t1=a("li"),Hbe=a("strong"),nGo=o("unispeech-sat"),sGo=o(" \u2014 "),Nz=a("a"),lGo=o("UniSpeechSatForPreTraining"),iGo=o(" (UniSpeechSat model)"),dGo=l(),a1=a("li"),Jbe=a("strong"),cGo=o("videomae"),mGo=o(" \u2014 "),qz=a("a"),fGo=o("VideoMAEForPreTraining"),gGo=o(" (VideoMAE model)"),hGo=l(),n1=a("li"),Ybe=a("strong"),uGo=o("visual_bert"),pGo=o(" \u2014 "),jz=a("a"),_Go=o("VisualBertForPreTraining"),bGo=o(" (VisualBERT model)"),vGo=l(),s1=a("li"),Kbe=a("strong"),FGo=o("vit_mae"),TGo=o(" \u2014 "),Dz=a("a"),MGo=o("ViTMAEForPreTraining"),EGo=o(" (ViTMAE model)"),CGo=l(),l1=a("li"),Zbe=a("strong"),wGo=o("wav2vec2"),AGo=o(" \u2014 "),Gz=a("a"),LGo=o("Wav2Vec2ForPreTraining"),yGo=o(" (Wav2Vec2 model)"),xGo=l(),i1=a("li"),e2e=a("strong"),$Go=o("wav2vec2-conformer"),kGo=o(" \u2014 "),Oz=a("a"),SGo=o("Wav2Vec2ConformerForPreTraining"),RGo=o(" (Wav2Vec2-Conformer model)"),PGo=l(),d1=a("li"),o2e=a("strong"),BGo=o("xlm"),IGo=o(" \u2014 "),Vz=a("a"),NGo=o("XLMWithLMHeadModel"),qGo=o(" (XLM model)"),jGo=l(),c1=a("li"),r2e=a("strong"),DGo=o("xlm-roberta"),GGo=o(" \u2014 "),Xz=a("a"),OGo=o("XLMRobertaForMaskedLM"),VGo=o(" (XLM-RoBERTa model)"),XGo=l(),m1=a("li"),t2e=a("strong"),zGo=o("xlm-roberta-xl"),QGo=o(" \u2014 "),zz=a("a"),WGo=o("XLMRobertaXLForMaskedLM"),UGo=o(" (XLM-RoBERTa-XL model)"),HGo=l(),f1=a("li"),a2e=a("strong"),JGo=o("xlnet"),YGo=o(" \u2014 "),Qz=a("a"),KGo=o("XLNetLMHeadModel"),ZGo=o(" (XLNet model)"),eOo=l(),g1=a("p"),oOo=o("The model is set in evaluation mode by default using "),n2e=a("code"),rOo=o("model.eval()"),tOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=a("code"),aOo=o("model.train()"),nOo=l(),F(h1.$$.fragment),nZe=l(),Ed=a("h2"),u1=a("a"),l2e=a("span"),F(Ex.$$.fragment),sOo=l(),i2e=a("span"),lOo=o("AutoModelForCausalLM"),sZe=l(),Io=a("div"),F(Cx.$$.fragment),iOo=l(),Cd=a("p"),dOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wz=a("a"),cOo=o("from_pretrained()"),mOo=o(" class method or the "),Uz=a("a"),fOo=o("from_config()"),gOo=o(` class
method.`),hOo=l(),wx=a("p"),uOo=o("This class cannot be instantiated directly using "),d2e=a("code"),pOo=o("__init__()"),_Oo=o(" (throws an error)."),bOo=l(),vt=a("div"),F(Ax.$$.fragment),vOo=l(),c2e=a("p"),FOo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TOo=l(),wd=a("p"),MOo=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),EOo=o("not"),COo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),wOo=o("from_pretrained()"),AOo=o(" to load the model weights."),LOo=l(),F(p1.$$.fragment),yOo=l(),oo=a("div"),F(Lx.$$.fragment),xOo=l(),f2e=a("p"),$Oo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kOo=l(),Ka=a("p"),SOo=o("The model class to instantiate is selected based on the "),g2e=a("code"),ROo=o("model_type"),POo=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),BOo=o("pretrained_model_name_or_path"),IOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),NOo=o("pretrained_model_name_or_path"),qOo=o(":"),jOo=l(),Q=a("ul"),_1=a("li"),p2e=a("strong"),DOo=o("bart"),GOo=o(" \u2014 "),Jz=a("a"),OOo=o("BartForCausalLM"),VOo=o(" (BART model)"),XOo=l(),b1=a("li"),_2e=a("strong"),zOo=o("bert"),QOo=o(" \u2014 "),Yz=a("a"),WOo=o("BertLMHeadModel"),UOo=o(" (BERT model)"),HOo=l(),v1=a("li"),b2e=a("strong"),JOo=o("bert-generation"),YOo=o(" \u2014 "),Kz=a("a"),KOo=o("BertGenerationDecoder"),ZOo=o(" (Bert Generation model)"),eVo=l(),F1=a("li"),v2e=a("strong"),oVo=o("big_bird"),rVo=o(" \u2014 "),Zz=a("a"),tVo=o("BigBirdForCausalLM"),aVo=o(" (BigBird model)"),nVo=l(),T1=a("li"),F2e=a("strong"),sVo=o("bigbird_pegasus"),lVo=o(" \u2014 "),eQ=a("a"),iVo=o("BigBirdPegasusForCausalLM"),dVo=o(" (BigBird-Pegasus model)"),cVo=l(),M1=a("li"),T2e=a("strong"),mVo=o("blenderbot"),fVo=o(" \u2014 "),oQ=a("a"),gVo=o("BlenderbotForCausalLM"),hVo=o(" (Blenderbot model)"),uVo=l(),E1=a("li"),M2e=a("strong"),pVo=o("blenderbot-small"),_Vo=o(" \u2014 "),rQ=a("a"),bVo=o("BlenderbotSmallForCausalLM"),vVo=o(" (BlenderbotSmall model)"),FVo=l(),C1=a("li"),E2e=a("strong"),TVo=o("bloom"),MVo=o(" \u2014 "),tQ=a("a"),EVo=o("BloomForCausalLM"),CVo=o(" (BLOOM model)"),wVo=l(),w1=a("li"),C2e=a("strong"),AVo=o("camembert"),LVo=o(" \u2014 "),aQ=a("a"),yVo=o("CamembertForCausalLM"),xVo=o(" (CamemBERT model)"),$Vo=l(),A1=a("li"),w2e=a("strong"),kVo=o("codegen"),SVo=o(" \u2014 "),nQ=a("a"),RVo=o("CodeGenForCausalLM"),PVo=o(" (CodeGen model)"),BVo=l(),L1=a("li"),A2e=a("strong"),IVo=o("ctrl"),NVo=o(" \u2014 "),sQ=a("a"),qVo=o("CTRLLMHeadModel"),jVo=o(" (CTRL model)"),DVo=l(),y1=a("li"),L2e=a("strong"),GVo=o("data2vec-text"),OVo=o(" \u2014 "),lQ=a("a"),VVo=o("Data2VecTextForCausalLM"),XVo=o(" (Data2VecText model)"),zVo=l(),x1=a("li"),y2e=a("strong"),QVo=o("electra"),WVo=o(" \u2014 "),iQ=a("a"),UVo=o("ElectraForCausalLM"),HVo=o(" (ELECTRA model)"),JVo=l(),$1=a("li"),x2e=a("strong"),YVo=o("ernie"),KVo=o(" \u2014 "),dQ=a("a"),ZVo=o("ErnieForCausalLM"),eXo=o(" (ERNIE model)"),oXo=l(),k1=a("li"),$2e=a("strong"),rXo=o("gpt2"),tXo=o(" \u2014 "),cQ=a("a"),aXo=o("GPT2LMHeadModel"),nXo=o(" (OpenAI GPT-2 model)"),sXo=l(),S1=a("li"),k2e=a("strong"),lXo=o("gpt_neo"),iXo=o(" \u2014 "),mQ=a("a"),dXo=o("GPTNeoForCausalLM"),cXo=o(" (GPT Neo model)"),mXo=l(),R1=a("li"),S2e=a("strong"),fXo=o("gpt_neox"),gXo=o(" \u2014 "),fQ=a("a"),hXo=o("GPTNeoXForCausalLM"),uXo=o(" (GPT NeoX model)"),pXo=l(),P1=a("li"),R2e=a("strong"),_Xo=o("gpt_neox_japanese"),bXo=o(" \u2014 "),gQ=a("a"),vXo=o("GPTNeoXJapaneseForCausalLM"),FXo=o(" (GPT NeoX Japanese model)"),TXo=l(),B1=a("li"),P2e=a("strong"),MXo=o("gptj"),EXo=o(" \u2014 "),hQ=a("a"),CXo=o("GPTJForCausalLM"),wXo=o(" (GPT-J model)"),AXo=l(),I1=a("li"),B2e=a("strong"),LXo=o("marian"),yXo=o(" \u2014 "),uQ=a("a"),xXo=o("MarianForCausalLM"),$Xo=o(" (Marian model)"),kXo=l(),N1=a("li"),I2e=a("strong"),SXo=o("mbart"),RXo=o(" \u2014 "),pQ=a("a"),PXo=o("MBartForCausalLM"),BXo=o(" (mBART model)"),IXo=l(),q1=a("li"),N2e=a("strong"),NXo=o("megatron-bert"),qXo=o(" \u2014 "),_Q=a("a"),jXo=o("MegatronBertForCausalLM"),DXo=o(" (Megatron-BERT model)"),GXo=l(),j1=a("li"),q2e=a("strong"),OXo=o("mvp"),VXo=o(" \u2014 "),bQ=a("a"),XXo=o("MvpForCausalLM"),zXo=o(" (MVP model)"),QXo=l(),D1=a("li"),j2e=a("strong"),WXo=o("openai-gpt"),UXo=o(" \u2014 "),vQ=a("a"),HXo=o("OpenAIGPTLMHeadModel"),JXo=o(" (OpenAI GPT model)"),YXo=l(),G1=a("li"),D2e=a("strong"),KXo=o("opt"),ZXo=o(" \u2014 "),FQ=a("a"),ezo=o("OPTForCausalLM"),ozo=o(" (OPT model)"),rzo=l(),O1=a("li"),G2e=a("strong"),tzo=o("pegasus"),azo=o(" \u2014 "),TQ=a("a"),nzo=o("PegasusForCausalLM"),szo=o(" (Pegasus model)"),lzo=l(),V1=a("li"),O2e=a("strong"),izo=o("plbart"),dzo=o(" \u2014 "),MQ=a("a"),czo=o("PLBartForCausalLM"),mzo=o(" (PLBart model)"),fzo=l(),X1=a("li"),V2e=a("strong"),gzo=o("prophetnet"),hzo=o(" \u2014 "),EQ=a("a"),uzo=o("ProphetNetForCausalLM"),pzo=o(" (ProphetNet model)"),_zo=l(),z1=a("li"),X2e=a("strong"),bzo=o("qdqbert"),vzo=o(" \u2014 "),CQ=a("a"),Fzo=o("QDQBertLMHeadModel"),Tzo=o(" (QDQBert model)"),Mzo=l(),Q1=a("li"),z2e=a("strong"),Ezo=o("reformer"),Czo=o(" \u2014 "),wQ=a("a"),wzo=o("ReformerModelWithLMHead"),Azo=o(" (Reformer model)"),Lzo=l(),W1=a("li"),Q2e=a("strong"),yzo=o("rembert"),xzo=o(" \u2014 "),AQ=a("a"),$zo=o("RemBertForCausalLM"),kzo=o(" (RemBERT model)"),Szo=l(),U1=a("li"),W2e=a("strong"),Rzo=o("roberta"),Pzo=o(" \u2014 "),LQ=a("a"),Bzo=o("RobertaForCausalLM"),Izo=o(" (RoBERTa model)"),Nzo=l(),H1=a("li"),U2e=a("strong"),qzo=o("roformer"),jzo=o(" \u2014 "),yQ=a("a"),Dzo=o("RoFormerForCausalLM"),Gzo=o(" (RoFormer model)"),Ozo=l(),J1=a("li"),H2e=a("strong"),Vzo=o("speech_to_text_2"),Xzo=o(" \u2014 "),xQ=a("a"),zzo=o("Speech2Text2ForCausalLM"),Qzo=o(" (Speech2Text2 model)"),Wzo=l(),Y1=a("li"),J2e=a("strong"),Uzo=o("transfo-xl"),Hzo=o(" \u2014 "),$Q=a("a"),Jzo=o("TransfoXLLMHeadModel"),Yzo=o(" (Transformer-XL model)"),Kzo=l(),K1=a("li"),Y2e=a("strong"),Zzo=o("trocr"),eQo=o(" \u2014 "),kQ=a("a"),oQo=o("TrOCRForCausalLM"),rQo=o(" (TrOCR model)"),tQo=l(),Z1=a("li"),K2e=a("strong"),aQo=o("xglm"),nQo=o(" \u2014 "),SQ=a("a"),sQo=o("XGLMForCausalLM"),lQo=o(" (XGLM model)"),iQo=l(),ev=a("li"),Z2e=a("strong"),dQo=o("xlm"),cQo=o(" \u2014 "),RQ=a("a"),mQo=o("XLMWithLMHeadModel"),fQo=o(" (XLM model)"),gQo=l(),ov=a("li"),e1e=a("strong"),hQo=o("xlm-prophetnet"),uQo=o(" \u2014 "),PQ=a("a"),pQo=o("XLMProphetNetForCausalLM"),_Qo=o(" (XLM-ProphetNet model)"),bQo=l(),rv=a("li"),o1e=a("strong"),vQo=o("xlm-roberta"),FQo=o(" \u2014 "),BQ=a("a"),TQo=o("XLMRobertaForCausalLM"),MQo=o(" (XLM-RoBERTa model)"),EQo=l(),tv=a("li"),r1e=a("strong"),CQo=o("xlm-roberta-xl"),wQo=o(" \u2014 "),IQ=a("a"),AQo=o("XLMRobertaXLForCausalLM"),LQo=o(" (XLM-RoBERTa-XL model)"),yQo=l(),av=a("li"),t1e=a("strong"),xQo=o("xlnet"),$Qo=o(" \u2014 "),NQ=a("a"),kQo=o("XLNetLMHeadModel"),SQo=o(" (XLNet model)"),RQo=l(),nv=a("p"),PQo=o("The model is set in evaluation mode by default using "),a1e=a("code"),BQo=o("model.eval()"),IQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),NQo=o("model.train()"),qQo=l(),F(sv.$$.fragment),lZe=l(),Ad=a("h2"),lv=a("a"),s1e=a("span"),F(yx.$$.fragment),jQo=l(),l1e=a("span"),DQo=o("AutoModelForMaskedLM"),iZe=l(),No=a("div"),F(xx.$$.fragment),GQo=l(),Ld=a("p"),OQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qQ=a("a"),VQo=o("from_pretrained()"),XQo=o(" class method or the "),jQ=a("a"),zQo=o("from_config()"),QQo=o(` class
method.`),WQo=l(),$x=a("p"),UQo=o("This class cannot be instantiated directly using "),i1e=a("code"),HQo=o("__init__()"),JQo=o(" (throws an error)."),YQo=l(),Ft=a("div"),F(kx.$$.fragment),KQo=l(),d1e=a("p"),ZQo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eWo=l(),yd=a("p"),oWo=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),rWo=o("not"),tWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),aWo=o("from_pretrained()"),nWo=o(" to load the model weights."),sWo=l(),F(iv.$$.fragment),lWo=l(),ro=a("div"),F(Sx.$$.fragment),iWo=l(),m1e=a("p"),dWo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cWo=l(),Za=a("p"),mWo=o("The model class to instantiate is selected based on the "),f1e=a("code"),fWo=o("model_type"),gWo=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),hWo=o("pretrained_model_name_or_path"),uWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),pWo=o("pretrained_model_name_or_path"),_Wo=o(":"),bWo=l(),H=a("ul"),dv=a("li"),u1e=a("strong"),vWo=o("albert"),FWo=o(" \u2014 "),GQ=a("a"),TWo=o("AlbertForMaskedLM"),MWo=o(" (ALBERT model)"),EWo=l(),cv=a("li"),p1e=a("strong"),CWo=o("bart"),wWo=o(" \u2014 "),OQ=a("a"),AWo=o("BartForConditionalGeneration"),LWo=o(" (BART model)"),yWo=l(),mv=a("li"),_1e=a("strong"),xWo=o("bert"),$Wo=o(" \u2014 "),VQ=a("a"),kWo=o("BertForMaskedLM"),SWo=o(" (BERT model)"),RWo=l(),fv=a("li"),b1e=a("strong"),PWo=o("big_bird"),BWo=o(" \u2014 "),XQ=a("a"),IWo=o("BigBirdForMaskedLM"),NWo=o(" (BigBird model)"),qWo=l(),gv=a("li"),v1e=a("strong"),jWo=o("camembert"),DWo=o(" \u2014 "),zQ=a("a"),GWo=o("CamembertForMaskedLM"),OWo=o(" (CamemBERT model)"),VWo=l(),hv=a("li"),F1e=a("strong"),XWo=o("convbert"),zWo=o(" \u2014 "),QQ=a("a"),QWo=o("ConvBertForMaskedLM"),WWo=o(" (ConvBERT model)"),UWo=l(),uv=a("li"),T1e=a("strong"),HWo=o("data2vec-text"),JWo=o(" \u2014 "),WQ=a("a"),YWo=o("Data2VecTextForMaskedLM"),KWo=o(" (Data2VecText model)"),ZWo=l(),pv=a("li"),M1e=a("strong"),eUo=o("deberta"),oUo=o(" \u2014 "),UQ=a("a"),rUo=o("DebertaForMaskedLM"),tUo=o(" (DeBERTa model)"),aUo=l(),_v=a("li"),E1e=a("strong"),nUo=o("deberta-v2"),sUo=o(" \u2014 "),HQ=a("a"),lUo=o("DebertaV2ForMaskedLM"),iUo=o(" (DeBERTa-v2 model)"),dUo=l(),bv=a("li"),C1e=a("strong"),cUo=o("distilbert"),mUo=o(" \u2014 "),JQ=a("a"),fUo=o("DistilBertForMaskedLM"),gUo=o(" (DistilBERT model)"),hUo=l(),vv=a("li"),w1e=a("strong"),uUo=o("electra"),pUo=o(" \u2014 "),YQ=a("a"),_Uo=o("ElectraForMaskedLM"),bUo=o(" (ELECTRA model)"),vUo=l(),Fv=a("li"),A1e=a("strong"),FUo=o("ernie"),TUo=o(" \u2014 "),KQ=a("a"),MUo=o("ErnieForMaskedLM"),EUo=o(" (ERNIE model)"),CUo=l(),Tv=a("li"),L1e=a("strong"),wUo=o("flaubert"),AUo=o(" \u2014 "),ZQ=a("a"),LUo=o("FlaubertWithLMHeadModel"),yUo=o(" (FlauBERT model)"),xUo=l(),Mv=a("li"),y1e=a("strong"),$Uo=o("fnet"),kUo=o(" \u2014 "),eW=a("a"),SUo=o("FNetForMaskedLM"),RUo=o(" (FNet model)"),PUo=l(),Ev=a("li"),x1e=a("strong"),BUo=o("funnel"),IUo=o(" \u2014 "),oW=a("a"),NUo=o("FunnelForMaskedLM"),qUo=o(" (Funnel Transformer model)"),jUo=l(),Cv=a("li"),$1e=a("strong"),DUo=o("ibert"),GUo=o(" \u2014 "),rW=a("a"),OUo=o("IBertForMaskedLM"),VUo=o(" (I-BERT model)"),XUo=l(),wv=a("li"),k1e=a("strong"),zUo=o("layoutlm"),QUo=o(" \u2014 "),tW=a("a"),WUo=o("LayoutLMForMaskedLM"),UUo=o(" (LayoutLM model)"),HUo=l(),Av=a("li"),S1e=a("strong"),JUo=o("longformer"),YUo=o(" \u2014 "),aW=a("a"),KUo=o("LongformerForMaskedLM"),ZUo=o(" (Longformer model)"),eHo=l(),Lv=a("li"),R1e=a("strong"),oHo=o("luke"),rHo=o(" \u2014 "),nW=a("a"),tHo=o("LukeForMaskedLM"),aHo=o(" (LUKE model)"),nHo=l(),yv=a("li"),P1e=a("strong"),sHo=o("mbart"),lHo=o(" \u2014 "),sW=a("a"),iHo=o("MBartForConditionalGeneration"),dHo=o(" (mBART model)"),cHo=l(),xv=a("li"),B1e=a("strong"),mHo=o("megatron-bert"),fHo=o(" \u2014 "),lW=a("a"),gHo=o("MegatronBertForMaskedLM"),hHo=o(" (Megatron-BERT model)"),uHo=l(),$v=a("li"),I1e=a("strong"),pHo=o("mobilebert"),_Ho=o(" \u2014 "),iW=a("a"),bHo=o("MobileBertForMaskedLM"),vHo=o(" (MobileBERT model)"),FHo=l(),kv=a("li"),N1e=a("strong"),THo=o("mpnet"),MHo=o(" \u2014 "),dW=a("a"),EHo=o("MPNetForMaskedLM"),CHo=o(" (MPNet model)"),wHo=l(),Sv=a("li"),q1e=a("strong"),AHo=o("mvp"),LHo=o(" \u2014 "),cW=a("a"),yHo=o("MvpForConditionalGeneration"),xHo=o(" (MVP model)"),$Ho=l(),Rv=a("li"),j1e=a("strong"),kHo=o("nezha"),SHo=o(" \u2014 "),mW=a("a"),RHo=o("NezhaForMaskedLM"),PHo=o(" (Nezha model)"),BHo=l(),Pv=a("li"),D1e=a("strong"),IHo=o("nystromformer"),NHo=o(" \u2014 "),fW=a("a"),qHo=o("NystromformerForMaskedLM"),jHo=o(" (Nystr\xF6mformer model)"),DHo=l(),Bv=a("li"),G1e=a("strong"),GHo=o("perceiver"),OHo=o(" \u2014 "),gW=a("a"),VHo=o("PerceiverForMaskedLM"),XHo=o(" (Perceiver model)"),zHo=l(),Iv=a("li"),O1e=a("strong"),QHo=o("qdqbert"),WHo=o(" \u2014 "),hW=a("a"),UHo=o("QDQBertForMaskedLM"),HHo=o(" (QDQBert model)"),JHo=l(),Nv=a("li"),V1e=a("strong"),YHo=o("reformer"),KHo=o(" \u2014 "),uW=a("a"),ZHo=o("ReformerForMaskedLM"),eJo=o(" (Reformer model)"),oJo=l(),qv=a("li"),X1e=a("strong"),rJo=o("rembert"),tJo=o(" \u2014 "),pW=a("a"),aJo=o("RemBertForMaskedLM"),nJo=o(" (RemBERT model)"),sJo=l(),jv=a("li"),z1e=a("strong"),lJo=o("roberta"),iJo=o(" \u2014 "),_W=a("a"),dJo=o("RobertaForMaskedLM"),cJo=o(" (RoBERTa model)"),mJo=l(),Dv=a("li"),Q1e=a("strong"),fJo=o("roformer"),gJo=o(" \u2014 "),bW=a("a"),hJo=o("RoFormerForMaskedLM"),uJo=o(" (RoFormer model)"),pJo=l(),Gv=a("li"),W1e=a("strong"),_Jo=o("squeezebert"),bJo=o(" \u2014 "),vW=a("a"),vJo=o("SqueezeBertForMaskedLM"),FJo=o(" (SqueezeBERT model)"),TJo=l(),Ov=a("li"),U1e=a("strong"),MJo=o("tapas"),EJo=o(" \u2014 "),FW=a("a"),CJo=o("TapasForMaskedLM"),wJo=o(" (TAPAS model)"),AJo=l(),Vv=a("li"),H1e=a("strong"),LJo=o("wav2vec2"),yJo=o(" \u2014 "),J1e=a("code"),xJo=o("Wav2Vec2ForMaskedLM"),$Jo=o(" (Wav2Vec2 model)"),kJo=l(),Xv=a("li"),Y1e=a("strong"),SJo=o("xlm"),RJo=o(" \u2014 "),TW=a("a"),PJo=o("XLMWithLMHeadModel"),BJo=o(" (XLM model)"),IJo=l(),zv=a("li"),K1e=a("strong"),NJo=o("xlm-roberta"),qJo=o(" \u2014 "),MW=a("a"),jJo=o("XLMRobertaForMaskedLM"),DJo=o(" (XLM-RoBERTa model)"),GJo=l(),Qv=a("li"),Z1e=a("strong"),OJo=o("xlm-roberta-xl"),VJo=o(" \u2014 "),EW=a("a"),XJo=o("XLMRobertaXLForMaskedLM"),zJo=o(" (XLM-RoBERTa-XL model)"),QJo=l(),Wv=a("li"),eve=a("strong"),WJo=o("yoso"),UJo=o(" \u2014 "),CW=a("a"),HJo=o("YosoForMaskedLM"),JJo=o(" (YOSO model)"),YJo=l(),Uv=a("p"),KJo=o("The model is set in evaluation mode by default using "),ove=a("code"),ZJo=o("model.eval()"),eYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=a("code"),oYo=o("model.train()"),rYo=l(),F(Hv.$$.fragment),dZe=l(),xd=a("h2"),Jv=a("a"),tve=a("span"),F(Rx.$$.fragment),tYo=l(),ave=a("span"),aYo=o("AutoModelForSeq2SeqLM"),cZe=l(),qo=a("div"),F(Px.$$.fragment),nYo=l(),$d=a("p"),sYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wW=a("a"),lYo=o("from_pretrained()"),iYo=o(" class method or the "),AW=a("a"),dYo=o("from_config()"),cYo=o(` class
method.`),mYo=l(),Bx=a("p"),fYo=o("This class cannot be instantiated directly using "),nve=a("code"),gYo=o("__init__()"),hYo=o(" (throws an error)."),uYo=l(),Tt=a("div"),F(Ix.$$.fragment),pYo=l(),sve=a("p"),_Yo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bYo=l(),kd=a("p"),vYo=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),FYo=o("not"),TYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=a("a"),MYo=o("from_pretrained()"),EYo=o(" to load the model weights."),CYo=l(),F(Yv.$$.fragment),wYo=l(),to=a("div"),F(Nx.$$.fragment),AYo=l(),ive=a("p"),LYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yYo=l(),en=a("p"),xYo=o("The model class to instantiate is selected based on the "),dve=a("code"),$Yo=o("model_type"),kYo=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),PYo=o("pretrained_model_name_or_path"),BYo=o(":"),IYo=l(),me=a("ul"),Kv=a("li"),fve=a("strong"),NYo=o("bart"),qYo=o(" \u2014 "),yW=a("a"),jYo=o("BartForConditionalGeneration"),DYo=o(" (BART model)"),GYo=l(),Zv=a("li"),gve=a("strong"),OYo=o("bigbird_pegasus"),VYo=o(" \u2014 "),xW=a("a"),XYo=o("BigBirdPegasusForConditionalGeneration"),zYo=o(" (BigBird-Pegasus model)"),QYo=l(),eF=a("li"),hve=a("strong"),WYo=o("blenderbot"),UYo=o(" \u2014 "),$W=a("a"),HYo=o("BlenderbotForConditionalGeneration"),JYo=o(" (Blenderbot model)"),YYo=l(),oF=a("li"),uve=a("strong"),KYo=o("blenderbot-small"),ZYo=o(" \u2014 "),kW=a("a"),eKo=o("BlenderbotSmallForConditionalGeneration"),oKo=o(" (BlenderbotSmall model)"),rKo=l(),rF=a("li"),pve=a("strong"),tKo=o("encoder-decoder"),aKo=o(" \u2014 "),SW=a("a"),nKo=o("EncoderDecoderModel"),sKo=o(" (Encoder decoder model)"),lKo=l(),tF=a("li"),_ve=a("strong"),iKo=o("fsmt"),dKo=o(" \u2014 "),RW=a("a"),cKo=o("FSMTForConditionalGeneration"),mKo=o(" (FairSeq Machine-Translation model)"),fKo=l(),aF=a("li"),bve=a("strong"),gKo=o("led"),hKo=o(" \u2014 "),PW=a("a"),uKo=o("LEDForConditionalGeneration"),pKo=o(" (LED model)"),_Ko=l(),nF=a("li"),vve=a("strong"),bKo=o("longt5"),vKo=o(" \u2014 "),BW=a("a"),FKo=o("LongT5ForConditionalGeneration"),TKo=o(" (LongT5 model)"),MKo=l(),sF=a("li"),Fve=a("strong"),EKo=o("m2m_100"),CKo=o(" \u2014 "),IW=a("a"),wKo=o("M2M100ForConditionalGeneration"),AKo=o(" (M2M100 model)"),LKo=l(),lF=a("li"),Tve=a("strong"),yKo=o("marian"),xKo=o(" \u2014 "),NW=a("a"),$Ko=o("MarianMTModel"),kKo=o(" (Marian model)"),SKo=l(),iF=a("li"),Mve=a("strong"),RKo=o("mbart"),PKo=o(" \u2014 "),qW=a("a"),BKo=o("MBartForConditionalGeneration"),IKo=o(" (mBART model)"),NKo=l(),dF=a("li"),Eve=a("strong"),qKo=o("mt5"),jKo=o(" \u2014 "),jW=a("a"),DKo=o("MT5ForConditionalGeneration"),GKo=o(" (MT5 model)"),OKo=l(),cF=a("li"),Cve=a("strong"),VKo=o("mvp"),XKo=o(" \u2014 "),DW=a("a"),zKo=o("MvpForConditionalGeneration"),QKo=o(" (MVP model)"),WKo=l(),mF=a("li"),wve=a("strong"),UKo=o("nllb"),HKo=o(" \u2014 "),GW=a("a"),JKo=o("M2M100ForConditionalGeneration"),YKo=o(" (NLLB model)"),KKo=l(),fF=a("li"),Ave=a("strong"),ZKo=o("pegasus"),eZo=o(" \u2014 "),OW=a("a"),oZo=o("PegasusForConditionalGeneration"),rZo=o(" (Pegasus model)"),tZo=l(),gF=a("li"),Lve=a("strong"),aZo=o("pegasus_x"),nZo=o(" \u2014 "),VW=a("a"),sZo=o("PegasusXForConditionalGeneration"),lZo=o(" (PEGASUS-X model)"),iZo=l(),hF=a("li"),yve=a("strong"),dZo=o("plbart"),cZo=o(" \u2014 "),XW=a("a"),mZo=o("PLBartForConditionalGeneration"),fZo=o(" (PLBart model)"),gZo=l(),uF=a("li"),xve=a("strong"),hZo=o("prophetnet"),uZo=o(" \u2014 "),zW=a("a"),pZo=o("ProphetNetForConditionalGeneration"),_Zo=o(" (ProphetNet model)"),bZo=l(),pF=a("li"),$ve=a("strong"),vZo=o("t5"),FZo=o(" \u2014 "),QW=a("a"),TZo=o("T5ForConditionalGeneration"),MZo=o(" (T5 model)"),EZo=l(),_F=a("li"),kve=a("strong"),CZo=o("xlm-prophetnet"),wZo=o(" \u2014 "),WW=a("a"),AZo=o("XLMProphetNetForConditionalGeneration"),LZo=o(" (XLM-ProphetNet model)"),yZo=l(),bF=a("p"),xZo=o("The model is set in evaluation mode by default using "),Sve=a("code"),$Zo=o("model.eval()"),kZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=a("code"),SZo=o("model.train()"),RZo=l(),F(vF.$$.fragment),mZe=l(),Sd=a("h2"),FF=a("a"),Pve=a("span"),F(qx.$$.fragment),PZo=l(),Bve=a("span"),BZo=o("AutoModelForSequenceClassification"),fZe=l(),jo=a("div"),F(jx.$$.fragment),IZo=l(),Rd=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UW=a("a"),qZo=o("from_pretrained()"),jZo=o(" class method or the "),HW=a("a"),DZo=o("from_config()"),GZo=o(` class
method.`),OZo=l(),Dx=a("p"),VZo=o("This class cannot be instantiated directly using "),Ive=a("code"),XZo=o("__init__()"),zZo=o(" (throws an error)."),QZo=l(),Mt=a("div"),F(Gx.$$.fragment),WZo=l(),Nve=a("p"),UZo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HZo=l(),Pd=a("p"),JZo=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),YZo=o("not"),KZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),ZZo=o("from_pretrained()"),eer=o(" to load the model weights."),oer=l(),F(TF.$$.fragment),rer=l(),ao=a("div"),F(Ox.$$.fragment),ter=l(),jve=a("p"),aer=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ner=l(),on=a("p"),ser=o("The model class to instantiate is selected based on the "),Dve=a("code"),ler=o("model_type"),ier=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),der=o("pretrained_model_name_or_path"),cer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),mer=o("pretrained_model_name_or_path"),fer=o(":"),ger=l(),q=a("ul"),MF=a("li"),Vve=a("strong"),her=o("albert"),uer=o(" \u2014 "),YW=a("a"),per=o("AlbertForSequenceClassification"),_er=o(" (ALBERT model)"),ber=l(),EF=a("li"),Xve=a("strong"),ver=o("bart"),Fer=o(" \u2014 "),KW=a("a"),Ter=o("BartForSequenceClassification"),Mer=o(" (BART model)"),Eer=l(),CF=a("li"),zve=a("strong"),Cer=o("bert"),wer=o(" \u2014 "),ZW=a("a"),Aer=o("BertForSequenceClassification"),Ler=o(" (BERT model)"),yer=l(),wF=a("li"),Qve=a("strong"),xer=o("big_bird"),$er=o(" \u2014 "),eU=a("a"),ker=o("BigBirdForSequenceClassification"),Ser=o(" (BigBird model)"),Rer=l(),AF=a("li"),Wve=a("strong"),Per=o("bigbird_pegasus"),Ber=o(" \u2014 "),oU=a("a"),Ier=o("BigBirdPegasusForSequenceClassification"),Ner=o(" (BigBird-Pegasus model)"),qer=l(),LF=a("li"),Uve=a("strong"),jer=o("bloom"),Der=o(" \u2014 "),rU=a("a"),Ger=o("BloomForSequenceClassification"),Oer=o(" (BLOOM model)"),Ver=l(),yF=a("li"),Hve=a("strong"),Xer=o("camembert"),zer=o(" \u2014 "),tU=a("a"),Qer=o("CamembertForSequenceClassification"),Wer=o(" (CamemBERT model)"),Uer=l(),xF=a("li"),Jve=a("strong"),Her=o("canine"),Jer=o(" \u2014 "),aU=a("a"),Yer=o("CanineForSequenceClassification"),Ker=o(" (CANINE model)"),Zer=l(),$F=a("li"),Yve=a("strong"),eor=o("convbert"),oor=o(" \u2014 "),nU=a("a"),ror=o("ConvBertForSequenceClassification"),tor=o(" (ConvBERT model)"),aor=l(),kF=a("li"),Kve=a("strong"),nor=o("ctrl"),sor=o(" \u2014 "),sU=a("a"),lor=o("CTRLForSequenceClassification"),ior=o(" (CTRL model)"),dor=l(),SF=a("li"),Zve=a("strong"),cor=o("data2vec-text"),mor=o(" \u2014 "),lU=a("a"),gor=o("Data2VecTextForSequenceClassification"),hor=o(" (Data2VecText model)"),uor=l(),RF=a("li"),eFe=a("strong"),por=o("deberta"),_or=o(" \u2014 "),iU=a("a"),bor=o("DebertaForSequenceClassification"),vor=o(" (DeBERTa model)"),For=l(),PF=a("li"),oFe=a("strong"),Tor=o("deberta-v2"),Mor=o(" \u2014 "),dU=a("a"),Eor=o("DebertaV2ForSequenceClassification"),Cor=o(" (DeBERTa-v2 model)"),wor=l(),BF=a("li"),rFe=a("strong"),Aor=o("distilbert"),Lor=o(" \u2014 "),cU=a("a"),yor=o("DistilBertForSequenceClassification"),xor=o(" (DistilBERT model)"),$or=l(),IF=a("li"),tFe=a("strong"),kor=o("electra"),Sor=o(" \u2014 "),mU=a("a"),Ror=o("ElectraForSequenceClassification"),Por=o(" (ELECTRA model)"),Bor=l(),NF=a("li"),aFe=a("strong"),Ior=o("ernie"),Nor=o(" \u2014 "),fU=a("a"),qor=o("ErnieForSequenceClassification"),jor=o(" (ERNIE model)"),Dor=l(),qF=a("li"),nFe=a("strong"),Gor=o("flaubert"),Oor=o(" \u2014 "),gU=a("a"),Vor=o("FlaubertForSequenceClassification"),Xor=o(" (FlauBERT model)"),zor=l(),jF=a("li"),sFe=a("strong"),Qor=o("fnet"),Wor=o(" \u2014 "),hU=a("a"),Uor=o("FNetForSequenceClassification"),Hor=o(" (FNet model)"),Jor=l(),DF=a("li"),lFe=a("strong"),Yor=o("funnel"),Kor=o(" \u2014 "),uU=a("a"),Zor=o("FunnelForSequenceClassification"),err=o(" (Funnel Transformer model)"),orr=l(),GF=a("li"),iFe=a("strong"),rrr=o("gpt2"),trr=o(" \u2014 "),pU=a("a"),arr=o("GPT2ForSequenceClassification"),nrr=o(" (OpenAI GPT-2 model)"),srr=l(),OF=a("li"),dFe=a("strong"),lrr=o("gpt_neo"),irr=o(" \u2014 "),_U=a("a"),drr=o("GPTNeoForSequenceClassification"),crr=o(" (GPT Neo model)"),mrr=l(),VF=a("li"),cFe=a("strong"),frr=o("gptj"),grr=o(" \u2014 "),bU=a("a"),hrr=o("GPTJForSequenceClassification"),urr=o(" (GPT-J model)"),prr=l(),XF=a("li"),mFe=a("strong"),_rr=o("ibert"),brr=o(" \u2014 "),vU=a("a"),vrr=o("IBertForSequenceClassification"),Frr=o(" (I-BERT model)"),Trr=l(),zF=a("li"),fFe=a("strong"),Mrr=o("layoutlm"),Err=o(" \u2014 "),FU=a("a"),Crr=o("LayoutLMForSequenceClassification"),wrr=o(" (LayoutLM model)"),Arr=l(),QF=a("li"),gFe=a("strong"),Lrr=o("layoutlmv2"),yrr=o(" \u2014 "),TU=a("a"),xrr=o("LayoutLMv2ForSequenceClassification"),$rr=o(" (LayoutLMv2 model)"),krr=l(),WF=a("li"),hFe=a("strong"),Srr=o("layoutlmv3"),Rrr=o(" \u2014 "),MU=a("a"),Prr=o("LayoutLMv3ForSequenceClassification"),Brr=o(" (LayoutLMv3 model)"),Irr=l(),UF=a("li"),uFe=a("strong"),Nrr=o("led"),qrr=o(" \u2014 "),EU=a("a"),jrr=o("LEDForSequenceClassification"),Drr=o(" (LED model)"),Grr=l(),HF=a("li"),pFe=a("strong"),Orr=o("longformer"),Vrr=o(" \u2014 "),CU=a("a"),Xrr=o("LongformerForSequenceClassification"),zrr=o(" (Longformer model)"),Qrr=l(),JF=a("li"),_Fe=a("strong"),Wrr=o("luke"),Urr=o(" \u2014 "),wU=a("a"),Hrr=o("LukeForSequenceClassification"),Jrr=o(" (LUKE model)"),Yrr=l(),YF=a("li"),bFe=a("strong"),Krr=o("mbart"),Zrr=o(" \u2014 "),AU=a("a"),etr=o("MBartForSequenceClassification"),otr=o(" (mBART model)"),rtr=l(),KF=a("li"),vFe=a("strong"),ttr=o("megatron-bert"),atr=o(" \u2014 "),LU=a("a"),ntr=o("MegatronBertForSequenceClassification"),str=o(" (Megatron-BERT model)"),ltr=l(),ZF=a("li"),FFe=a("strong"),itr=o("mobilebert"),dtr=o(" \u2014 "),yU=a("a"),ctr=o("MobileBertForSequenceClassification"),mtr=o(" (MobileBERT model)"),ftr=l(),eT=a("li"),TFe=a("strong"),gtr=o("mpnet"),htr=o(" \u2014 "),xU=a("a"),utr=o("MPNetForSequenceClassification"),ptr=o(" (MPNet model)"),_tr=l(),oT=a("li"),MFe=a("strong"),btr=o("mvp"),vtr=o(" \u2014 "),$U=a("a"),Ftr=o("MvpForSequenceClassification"),Ttr=o(" (MVP model)"),Mtr=l(),rT=a("li"),EFe=a("strong"),Etr=o("nezha"),Ctr=o(" \u2014 "),kU=a("a"),wtr=o("NezhaForSequenceClassification"),Atr=o(" (Nezha model)"),Ltr=l(),tT=a("li"),CFe=a("strong"),ytr=o("nystromformer"),xtr=o(" \u2014 "),SU=a("a"),$tr=o("NystromformerForSequenceClassification"),ktr=o(" (Nystr\xF6mformer model)"),Str=l(),aT=a("li"),wFe=a("strong"),Rtr=o("openai-gpt"),Ptr=o(" \u2014 "),RU=a("a"),Btr=o("OpenAIGPTForSequenceClassification"),Itr=o(" (OpenAI GPT model)"),Ntr=l(),nT=a("li"),AFe=a("strong"),qtr=o("opt"),jtr=o(" \u2014 "),PU=a("a"),Dtr=o("OPTForSequenceClassification"),Gtr=o(" (OPT model)"),Otr=l(),sT=a("li"),LFe=a("strong"),Vtr=o("perceiver"),Xtr=o(" \u2014 "),BU=a("a"),ztr=o("PerceiverForSequenceClassification"),Qtr=o(" (Perceiver model)"),Wtr=l(),lT=a("li"),yFe=a("strong"),Utr=o("plbart"),Htr=o(" \u2014 "),IU=a("a"),Jtr=o("PLBartForSequenceClassification"),Ytr=o(" (PLBart model)"),Ktr=l(),iT=a("li"),xFe=a("strong"),Ztr=o("qdqbert"),ear=o(" \u2014 "),NU=a("a"),oar=o("QDQBertForSequenceClassification"),rar=o(" (QDQBert model)"),tar=l(),dT=a("li"),$Fe=a("strong"),aar=o("reformer"),nar=o(" \u2014 "),qU=a("a"),sar=o("ReformerForSequenceClassification"),lar=o(" (Reformer model)"),iar=l(),cT=a("li"),kFe=a("strong"),dar=o("rembert"),car=o(" \u2014 "),jU=a("a"),mar=o("RemBertForSequenceClassification"),far=o(" (RemBERT model)"),gar=l(),mT=a("li"),SFe=a("strong"),har=o("roberta"),uar=o(" \u2014 "),DU=a("a"),par=o("RobertaForSequenceClassification"),_ar=o(" (RoBERTa model)"),bar=l(),fT=a("li"),RFe=a("strong"),Far=o("roformer"),Tar=o(" \u2014 "),GU=a("a"),Mar=o("RoFormerForSequenceClassification"),Ear=o(" (RoFormer model)"),Car=l(),gT=a("li"),PFe=a("strong"),war=o("squeezebert"),Aar=o(" \u2014 "),OU=a("a"),Lar=o("SqueezeBertForSequenceClassification"),yar=o(" (SqueezeBERT model)"),xar=l(),hT=a("li"),BFe=a("strong"),$ar=o("tapas"),kar=o(" \u2014 "),VU=a("a"),Sar=o("TapasForSequenceClassification"),Rar=o(" (TAPAS model)"),Par=l(),uT=a("li"),IFe=a("strong"),Bar=o("transfo-xl"),Iar=o(" \u2014 "),XU=a("a"),Nar=o("TransfoXLForSequenceClassification"),qar=o(" (Transformer-XL model)"),jar=l(),pT=a("li"),NFe=a("strong"),Dar=o("xlm"),Gar=o(" \u2014 "),zU=a("a"),Oar=o("XLMForSequenceClassification"),Var=o(" (XLM model)"),Xar=l(),_T=a("li"),qFe=a("strong"),zar=o("xlm-roberta"),Qar=o(" \u2014 "),QU=a("a"),War=o("XLMRobertaForSequenceClassification"),Uar=o(" (XLM-RoBERTa model)"),Har=l(),bT=a("li"),jFe=a("strong"),Jar=o("xlm-roberta-xl"),Yar=o(" \u2014 "),WU=a("a"),Kar=o("XLMRobertaXLForSequenceClassification"),Zar=o(" (XLM-RoBERTa-XL model)"),enr=l(),vT=a("li"),DFe=a("strong"),onr=o("xlnet"),rnr=o(" \u2014 "),UU=a("a"),tnr=o("XLNetForSequenceClassification"),anr=o(" (XLNet model)"),nnr=l(),FT=a("li"),GFe=a("strong"),snr=o("yoso"),lnr=o(" \u2014 "),HU=a("a"),inr=o("YosoForSequenceClassification"),dnr=o(" (YOSO model)"),cnr=l(),TT=a("p"),mnr=o("The model is set in evaluation mode by default using "),OFe=a("code"),fnr=o("model.eval()"),gnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=a("code"),hnr=o("model.train()"),unr=l(),F(MT.$$.fragment),gZe=l(),Bd=a("h2"),ET=a("a"),XFe=a("span"),F(Vx.$$.fragment),pnr=l(),zFe=a("span"),_nr=o("AutoModelForMultipleChoice"),hZe=l(),Do=a("div"),F(Xx.$$.fragment),bnr=l(),Id=a("p"),vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JU=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" class method or the "),YU=a("a"),Mnr=o("from_config()"),Enr=o(` class
method.`),Cnr=l(),zx=a("p"),wnr=o("This class cannot be instantiated directly using "),QFe=a("code"),Anr=o("__init__()"),Lnr=o(" (throws an error)."),ynr=l(),Et=a("div"),F(Qx.$$.fragment),xnr=l(),WFe=a("p"),$nr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),knr=l(),Nd=a("p"),Snr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Rnr=o("not"),Pnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),Bnr=o("from_pretrained()"),Inr=o(" to load the model weights."),Nnr=l(),F(CT.$$.fragment),qnr=l(),no=a("div"),F(Wx.$$.fragment),jnr=l(),HFe=a("p"),Dnr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Gnr=l(),rn=a("p"),Onr=o("The model class to instantiate is selected based on the "),JFe=a("code"),Vnr=o("model_type"),Xnr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),znr=o("pretrained_model_name_or_path"),Qnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),Wnr=o("pretrained_model_name_or_path"),Unr=o(":"),Hnr=l(),Z=a("ul"),wT=a("li"),ZFe=a("strong"),Jnr=o("albert"),Ynr=o(" \u2014 "),ZU=a("a"),Knr=o("AlbertForMultipleChoice"),Znr=o(" (ALBERT model)"),esr=l(),AT=a("li"),eTe=a("strong"),osr=o("bert"),rsr=o(" \u2014 "),eH=a("a"),tsr=o("BertForMultipleChoice"),asr=o(" (BERT model)"),nsr=l(),LT=a("li"),oTe=a("strong"),ssr=o("big_bird"),lsr=o(" \u2014 "),oH=a("a"),isr=o("BigBirdForMultipleChoice"),dsr=o(" (BigBird model)"),csr=l(),yT=a("li"),rTe=a("strong"),msr=o("camembert"),fsr=o(" \u2014 "),rH=a("a"),gsr=o("CamembertForMultipleChoice"),hsr=o(" (CamemBERT model)"),usr=l(),xT=a("li"),tTe=a("strong"),psr=o("canine"),_sr=o(" \u2014 "),tH=a("a"),bsr=o("CanineForMultipleChoice"),vsr=o(" (CANINE model)"),Fsr=l(),$T=a("li"),aTe=a("strong"),Tsr=o("convbert"),Msr=o(" \u2014 "),aH=a("a"),Esr=o("ConvBertForMultipleChoice"),Csr=o(" (ConvBERT model)"),wsr=l(),kT=a("li"),nTe=a("strong"),Asr=o("data2vec-text"),Lsr=o(" \u2014 "),nH=a("a"),ysr=o("Data2VecTextForMultipleChoice"),xsr=o(" (Data2VecText model)"),$sr=l(),ST=a("li"),sTe=a("strong"),ksr=o("deberta-v2"),Ssr=o(" \u2014 "),sH=a("a"),Rsr=o("DebertaV2ForMultipleChoice"),Psr=o(" (DeBERTa-v2 model)"),Bsr=l(),RT=a("li"),lTe=a("strong"),Isr=o("distilbert"),Nsr=o(" \u2014 "),lH=a("a"),qsr=o("DistilBertForMultipleChoice"),jsr=o(" (DistilBERT model)"),Dsr=l(),PT=a("li"),iTe=a("strong"),Gsr=o("electra"),Osr=o(" \u2014 "),iH=a("a"),Vsr=o("ElectraForMultipleChoice"),Xsr=o(" (ELECTRA model)"),zsr=l(),BT=a("li"),dTe=a("strong"),Qsr=o("ernie"),Wsr=o(" \u2014 "),dH=a("a"),Usr=o("ErnieForMultipleChoice"),Hsr=o(" (ERNIE model)"),Jsr=l(),IT=a("li"),cTe=a("strong"),Ysr=o("flaubert"),Ksr=o(" \u2014 "),cH=a("a"),Zsr=o("FlaubertForMultipleChoice"),elr=o(" (FlauBERT model)"),olr=l(),NT=a("li"),mTe=a("strong"),rlr=o("fnet"),tlr=o(" \u2014 "),mH=a("a"),alr=o("FNetForMultipleChoice"),nlr=o(" (FNet model)"),slr=l(),qT=a("li"),fTe=a("strong"),llr=o("funnel"),ilr=o(" \u2014 "),fH=a("a"),dlr=o("FunnelForMultipleChoice"),clr=o(" (Funnel Transformer model)"),mlr=l(),jT=a("li"),gTe=a("strong"),flr=o("ibert"),glr=o(" \u2014 "),gH=a("a"),hlr=o("IBertForMultipleChoice"),ulr=o(" (I-BERT model)"),plr=l(),DT=a("li"),hTe=a("strong"),_lr=o("longformer"),blr=o(" \u2014 "),hH=a("a"),vlr=o("LongformerForMultipleChoice"),Flr=o(" (Longformer model)"),Tlr=l(),GT=a("li"),uTe=a("strong"),Mlr=o("luke"),Elr=o(" \u2014 "),uH=a("a"),Clr=o("LukeForMultipleChoice"),wlr=o(" (LUKE model)"),Alr=l(),OT=a("li"),pTe=a("strong"),Llr=o("megatron-bert"),ylr=o(" \u2014 "),pH=a("a"),xlr=o("MegatronBertForMultipleChoice"),$lr=o(" (Megatron-BERT model)"),klr=l(),VT=a("li"),_Te=a("strong"),Slr=o("mobilebert"),Rlr=o(" \u2014 "),_H=a("a"),Plr=o("MobileBertForMultipleChoice"),Blr=o(" (MobileBERT model)"),Ilr=l(),XT=a("li"),bTe=a("strong"),Nlr=o("mpnet"),qlr=o(" \u2014 "),bH=a("a"),jlr=o("MPNetForMultipleChoice"),Dlr=o(" (MPNet model)"),Glr=l(),zT=a("li"),vTe=a("strong"),Olr=o("nezha"),Vlr=o(" \u2014 "),vH=a("a"),Xlr=o("NezhaForMultipleChoice"),zlr=o(" (Nezha model)"),Qlr=l(),QT=a("li"),FTe=a("strong"),Wlr=o("nystromformer"),Ulr=o(" \u2014 "),FH=a("a"),Hlr=o("NystromformerForMultipleChoice"),Jlr=o(" (Nystr\xF6mformer model)"),Ylr=l(),WT=a("li"),TTe=a("strong"),Klr=o("qdqbert"),Zlr=o(" \u2014 "),TH=a("a"),eir=o("QDQBertForMultipleChoice"),oir=o(" (QDQBert model)"),rir=l(),UT=a("li"),MTe=a("strong"),tir=o("rembert"),air=o(" \u2014 "),MH=a("a"),nir=o("RemBertForMultipleChoice"),sir=o(" (RemBERT model)"),lir=l(),HT=a("li"),ETe=a("strong"),iir=o("roberta"),dir=o(" \u2014 "),EH=a("a"),cir=o("RobertaForMultipleChoice"),mir=o(" (RoBERTa model)"),fir=l(),JT=a("li"),CTe=a("strong"),gir=o("roformer"),hir=o(" \u2014 "),CH=a("a"),uir=o("RoFormerForMultipleChoice"),pir=o(" (RoFormer model)"),_ir=l(),YT=a("li"),wTe=a("strong"),bir=o("squeezebert"),vir=o(" \u2014 "),wH=a("a"),Fir=o("SqueezeBertForMultipleChoice"),Tir=o(" (SqueezeBERT model)"),Mir=l(),KT=a("li"),ATe=a("strong"),Eir=o("xlm"),Cir=o(" \u2014 "),AH=a("a"),wir=o("XLMForMultipleChoice"),Air=o(" (XLM model)"),Lir=l(),ZT=a("li"),LTe=a("strong"),yir=o("xlm-roberta"),xir=o(" \u2014 "),LH=a("a"),$ir=o("XLMRobertaForMultipleChoice"),kir=o(" (XLM-RoBERTa model)"),Sir=l(),eM=a("li"),yTe=a("strong"),Rir=o("xlm-roberta-xl"),Pir=o(" \u2014 "),yH=a("a"),Bir=o("XLMRobertaXLForMultipleChoice"),Iir=o(" (XLM-RoBERTa-XL model)"),Nir=l(),oM=a("li"),xTe=a("strong"),qir=o("xlnet"),jir=o(" \u2014 "),xH=a("a"),Dir=o("XLNetForMultipleChoice"),Gir=o(" (XLNet model)"),Oir=l(),rM=a("li"),$Te=a("strong"),Vir=o("yoso"),Xir=o(" \u2014 "),$H=a("a"),zir=o("YosoForMultipleChoice"),Qir=o(" (YOSO model)"),Wir=l(),tM=a("p"),Uir=o("The model is set in evaluation mode by default using "),kTe=a("code"),Hir=o("model.eval()"),Jir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),STe=a("code"),Yir=o("model.train()"),Kir=l(),F(aM.$$.fragment),uZe=l(),qd=a("h2"),nM=a("a"),RTe=a("span"),F(Ux.$$.fragment),Zir=l(),PTe=a("span"),edr=o("AutoModelForNextSentencePrediction"),pZe=l(),Go=a("div"),F(Hx.$$.fragment),odr=l(),jd=a("p"),rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kH=a("a"),tdr=o("from_pretrained()"),adr=o(" class method or the "),SH=a("a"),ndr=o("from_config()"),sdr=o(` class
method.`),ldr=l(),Jx=a("p"),idr=o("This class cannot be instantiated directly using "),BTe=a("code"),ddr=o("__init__()"),cdr=o(" (throws an error)."),mdr=l(),Ct=a("div"),F(Yx.$$.fragment),fdr=l(),ITe=a("p"),gdr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hdr=l(),Dd=a("p"),udr=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),pdr=o("not"),_dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),bdr=o("from_pretrained()"),vdr=o(" to load the model weights."),Fdr=l(),F(sM.$$.fragment),Tdr=l(),so=a("div"),F(Kx.$$.fragment),Mdr=l(),qTe=a("p"),Edr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cdr=l(),tn=a("p"),wdr=o("The model class to instantiate is selected based on the "),jTe=a("code"),Adr=o("model_type"),Ldr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),ydr=o("pretrained_model_name_or_path"),xdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),$dr=o("pretrained_model_name_or_path"),kdr=o(":"),Sdr=l(),Ue=a("ul"),lM=a("li"),OTe=a("strong"),Rdr=o("bert"),Pdr=o(" \u2014 "),PH=a("a"),Bdr=o("BertForNextSentencePrediction"),Idr=o(" (BERT model)"),Ndr=l(),iM=a("li"),VTe=a("strong"),qdr=o("ernie"),jdr=o(" \u2014 "),BH=a("a"),Ddr=o("ErnieForNextSentencePrediction"),Gdr=o(" (ERNIE model)"),Odr=l(),dM=a("li"),XTe=a("strong"),Vdr=o("fnet"),Xdr=o(" \u2014 "),IH=a("a"),zdr=o("FNetForNextSentencePrediction"),Qdr=o(" (FNet model)"),Wdr=l(),cM=a("li"),zTe=a("strong"),Udr=o("megatron-bert"),Hdr=o(" \u2014 "),NH=a("a"),Jdr=o("MegatronBertForNextSentencePrediction"),Ydr=o(" (Megatron-BERT model)"),Kdr=l(),mM=a("li"),QTe=a("strong"),Zdr=o("mobilebert"),ecr=o(" \u2014 "),qH=a("a"),ocr=o("MobileBertForNextSentencePrediction"),rcr=o(" (MobileBERT model)"),tcr=l(),fM=a("li"),WTe=a("strong"),acr=o("nezha"),ncr=o(" \u2014 "),jH=a("a"),scr=o("NezhaForNextSentencePrediction"),lcr=o(" (Nezha model)"),icr=l(),gM=a("li"),UTe=a("strong"),dcr=o("qdqbert"),ccr=o(" \u2014 "),DH=a("a"),mcr=o("QDQBertForNextSentencePrediction"),fcr=o(" (QDQBert model)"),gcr=l(),hM=a("p"),hcr=o("The model is set in evaluation mode by default using "),HTe=a("code"),ucr=o("model.eval()"),pcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JTe=a("code"),_cr=o("model.train()"),bcr=l(),F(uM.$$.fragment),_Ze=l(),Gd=a("h2"),pM=a("a"),YTe=a("span"),F(Zx.$$.fragment),vcr=l(),KTe=a("span"),Fcr=o("AutoModelForTokenClassification"),bZe=l(),Oo=a("div"),F(e$.$$.fragment),Tcr=l(),Od=a("p"),Mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GH=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" class method or the "),OH=a("a"),wcr=o("from_config()"),Acr=o(` class
method.`),Lcr=l(),o$=a("p"),ycr=o("This class cannot be instantiated directly using "),ZTe=a("code"),xcr=o("__init__()"),$cr=o(" (throws an error)."),kcr=l(),wt=a("div"),F(r$.$$.fragment),Scr=l(),eMe=a("p"),Rcr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pcr=l(),Vd=a("p"),Bcr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),Icr=o("not"),Ncr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),qcr=o("from_pretrained()"),jcr=o(" to load the model weights."),Dcr=l(),F(_M.$$.fragment),Gcr=l(),lo=a("div"),F(t$.$$.fragment),Ocr=l(),rMe=a("p"),Vcr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xcr=l(),an=a("p"),zcr=o("The model class to instantiate is selected based on the "),tMe=a("code"),Qcr=o("model_type"),Wcr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),Ucr=o("pretrained_model_name_or_path"),Hcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(":"),Kcr=l(),J=a("ul"),bM=a("li"),sMe=a("strong"),Zcr=o("albert"),emr=o(" \u2014 "),XH=a("a"),omr=o("AlbertForTokenClassification"),rmr=o(" (ALBERT model)"),tmr=l(),vM=a("li"),lMe=a("strong"),amr=o("bert"),nmr=o(" \u2014 "),zH=a("a"),smr=o("BertForTokenClassification"),lmr=o(" (BERT model)"),imr=l(),FM=a("li"),iMe=a("strong"),dmr=o("big_bird"),cmr=o(" \u2014 "),QH=a("a"),mmr=o("BigBirdForTokenClassification"),fmr=o(" (BigBird model)"),gmr=l(),TM=a("li"),dMe=a("strong"),hmr=o("bloom"),umr=o(" \u2014 "),WH=a("a"),pmr=o("BloomForTokenClassification"),_mr=o(" (BLOOM model)"),bmr=l(),MM=a("li"),cMe=a("strong"),vmr=o("camembert"),Fmr=o(" \u2014 "),UH=a("a"),Tmr=o("CamembertForTokenClassification"),Mmr=o(" (CamemBERT model)"),Emr=l(),EM=a("li"),mMe=a("strong"),Cmr=o("canine"),wmr=o(" \u2014 "),HH=a("a"),Amr=o("CanineForTokenClassification"),Lmr=o(" (CANINE model)"),ymr=l(),CM=a("li"),fMe=a("strong"),xmr=o("convbert"),$mr=o(" \u2014 "),JH=a("a"),kmr=o("ConvBertForTokenClassification"),Smr=o(" (ConvBERT model)"),Rmr=l(),wM=a("li"),gMe=a("strong"),Pmr=o("data2vec-text"),Bmr=o(" \u2014 "),YH=a("a"),Imr=o("Data2VecTextForTokenClassification"),Nmr=o(" (Data2VecText model)"),qmr=l(),AM=a("li"),hMe=a("strong"),jmr=o("deberta"),Dmr=o(" \u2014 "),KH=a("a"),Gmr=o("DebertaForTokenClassification"),Omr=o(" (DeBERTa model)"),Vmr=l(),LM=a("li"),uMe=a("strong"),Xmr=o("deberta-v2"),zmr=o(" \u2014 "),ZH=a("a"),Qmr=o("DebertaV2ForTokenClassification"),Wmr=o(" (DeBERTa-v2 model)"),Umr=l(),yM=a("li"),pMe=a("strong"),Hmr=o("distilbert"),Jmr=o(" \u2014 "),eJ=a("a"),Ymr=o("DistilBertForTokenClassification"),Kmr=o(" (DistilBERT model)"),Zmr=l(),xM=a("li"),_Me=a("strong"),efr=o("electra"),ofr=o(" \u2014 "),oJ=a("a"),rfr=o("ElectraForTokenClassification"),tfr=o(" (ELECTRA model)"),afr=l(),$M=a("li"),bMe=a("strong"),nfr=o("ernie"),sfr=o(" \u2014 "),rJ=a("a"),lfr=o("ErnieForTokenClassification"),ifr=o(" (ERNIE model)"),dfr=l(),kM=a("li"),vMe=a("strong"),cfr=o("flaubert"),mfr=o(" \u2014 "),tJ=a("a"),ffr=o("FlaubertForTokenClassification"),gfr=o(" (FlauBERT model)"),hfr=l(),SM=a("li"),FMe=a("strong"),ufr=o("fnet"),pfr=o(" \u2014 "),aJ=a("a"),_fr=o("FNetForTokenClassification"),bfr=o(" (FNet model)"),vfr=l(),RM=a("li"),TMe=a("strong"),Ffr=o("funnel"),Tfr=o(" \u2014 "),nJ=a("a"),Mfr=o("FunnelForTokenClassification"),Efr=o(" (Funnel Transformer model)"),Cfr=l(),PM=a("li"),MMe=a("strong"),wfr=o("gpt2"),Afr=o(" \u2014 "),sJ=a("a"),Lfr=o("GPT2ForTokenClassification"),yfr=o(" (OpenAI GPT-2 model)"),xfr=l(),BM=a("li"),EMe=a("strong"),$fr=o("ibert"),kfr=o(" \u2014 "),lJ=a("a"),Sfr=o("IBertForTokenClassification"),Rfr=o(" (I-BERT model)"),Pfr=l(),IM=a("li"),CMe=a("strong"),Bfr=o("layoutlm"),Ifr=o(" \u2014 "),iJ=a("a"),Nfr=o("LayoutLMForTokenClassification"),qfr=o(" (LayoutLM model)"),jfr=l(),NM=a("li"),wMe=a("strong"),Dfr=o("layoutlmv2"),Gfr=o(" \u2014 "),dJ=a("a"),Ofr=o("LayoutLMv2ForTokenClassification"),Vfr=o(" (LayoutLMv2 model)"),Xfr=l(),qM=a("li"),AMe=a("strong"),zfr=o("layoutlmv3"),Qfr=o(" \u2014 "),cJ=a("a"),Wfr=o("LayoutLMv3ForTokenClassification"),Ufr=o(" (LayoutLMv3 model)"),Hfr=l(),jM=a("li"),LMe=a("strong"),Jfr=o("longformer"),Yfr=o(" \u2014 "),mJ=a("a"),Kfr=o("LongformerForTokenClassification"),Zfr=o(" (Longformer model)"),egr=l(),DM=a("li"),yMe=a("strong"),ogr=o("luke"),rgr=o(" \u2014 "),fJ=a("a"),tgr=o("LukeForTokenClassification"),agr=o(" (LUKE model)"),ngr=l(),GM=a("li"),xMe=a("strong"),sgr=o("megatron-bert"),lgr=o(" \u2014 "),gJ=a("a"),igr=o("MegatronBertForTokenClassification"),dgr=o(" (Megatron-BERT model)"),cgr=l(),OM=a("li"),$Me=a("strong"),mgr=o("mobilebert"),fgr=o(" \u2014 "),hJ=a("a"),ggr=o("MobileBertForTokenClassification"),hgr=o(" (MobileBERT model)"),ugr=l(),VM=a("li"),kMe=a("strong"),pgr=o("mpnet"),_gr=o(" \u2014 "),uJ=a("a"),bgr=o("MPNetForTokenClassification"),vgr=o(" (MPNet model)"),Fgr=l(),XM=a("li"),SMe=a("strong"),Tgr=o("nezha"),Mgr=o(" \u2014 "),pJ=a("a"),Egr=o("NezhaForTokenClassification"),Cgr=o(" (Nezha model)"),wgr=l(),zM=a("li"),RMe=a("strong"),Agr=o("nystromformer"),Lgr=o(" \u2014 "),_J=a("a"),ygr=o("NystromformerForTokenClassification"),xgr=o(" (Nystr\xF6mformer model)"),$gr=l(),QM=a("li"),PMe=a("strong"),kgr=o("qdqbert"),Sgr=o(" \u2014 "),bJ=a("a"),Rgr=o("QDQBertForTokenClassification"),Pgr=o(" (QDQBert model)"),Bgr=l(),WM=a("li"),BMe=a("strong"),Igr=o("rembert"),Ngr=o(" \u2014 "),vJ=a("a"),qgr=o("RemBertForTokenClassification"),jgr=o(" (RemBERT model)"),Dgr=l(),UM=a("li"),IMe=a("strong"),Ggr=o("roberta"),Ogr=o(" \u2014 "),FJ=a("a"),Vgr=o("RobertaForTokenClassification"),Xgr=o(" (RoBERTa model)"),zgr=l(),HM=a("li"),NMe=a("strong"),Qgr=o("roformer"),Wgr=o(" \u2014 "),TJ=a("a"),Ugr=o("RoFormerForTokenClassification"),Hgr=o(" (RoFormer model)"),Jgr=l(),JM=a("li"),qMe=a("strong"),Ygr=o("squeezebert"),Kgr=o(" \u2014 "),MJ=a("a"),Zgr=o("SqueezeBertForTokenClassification"),ehr=o(" (SqueezeBERT model)"),ohr=l(),YM=a("li"),jMe=a("strong"),rhr=o("xlm"),thr=o(" \u2014 "),EJ=a("a"),ahr=o("XLMForTokenClassification"),nhr=o(" (XLM model)"),shr=l(),KM=a("li"),DMe=a("strong"),lhr=o("xlm-roberta"),ihr=o(" \u2014 "),CJ=a("a"),dhr=o("XLMRobertaForTokenClassification"),chr=o(" (XLM-RoBERTa model)"),mhr=l(),ZM=a("li"),GMe=a("strong"),fhr=o("xlm-roberta-xl"),ghr=o(" \u2014 "),wJ=a("a"),hhr=o("XLMRobertaXLForTokenClassification"),uhr=o(" (XLM-RoBERTa-XL model)"),phr=l(),eE=a("li"),OMe=a("strong"),_hr=o("xlnet"),bhr=o(" \u2014 "),AJ=a("a"),vhr=o("XLNetForTokenClassification"),Fhr=o(" (XLNet model)"),Thr=l(),oE=a("li"),VMe=a("strong"),Mhr=o("yoso"),Ehr=o(" \u2014 "),LJ=a("a"),Chr=o("YosoForTokenClassification"),whr=o(" (YOSO model)"),Ahr=l(),rE=a("p"),Lhr=o("The model is set in evaluation mode by default using "),XMe=a("code"),yhr=o("model.eval()"),xhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zMe=a("code"),$hr=o("model.train()"),khr=l(),F(tE.$$.fragment),vZe=l(),Xd=a("h2"),aE=a("a"),QMe=a("span"),F(a$.$$.fragment),Shr=l(),WMe=a("span"),Rhr=o("AutoModelForQuestionAnswering"),FZe=l(),Vo=a("div"),F(n$.$$.fragment),Phr=l(),zd=a("p"),Bhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yJ=a("a"),Ihr=o("from_pretrained()"),Nhr=o(" class method or the "),xJ=a("a"),qhr=o("from_config()"),jhr=o(` class
method.`),Dhr=l(),s$=a("p"),Ghr=o("This class cannot be instantiated directly using "),UMe=a("code"),Ohr=o("__init__()"),Vhr=o(" (throws an error)."),Xhr=l(),At=a("div"),F(l$.$$.fragment),zhr=l(),HMe=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Whr=l(),Qd=a("p"),Uhr=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),Hhr=o("not"),Jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),Yhr=o("from_pretrained()"),Khr=o(" to load the model weights."),Zhr=l(),F(nE.$$.fragment),eur=l(),io=a("div"),F(i$.$$.fragment),our=l(),YMe=a("p"),rur=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tur=l(),nn=a("p"),aur=o("The model class to instantiate is selected based on the "),KMe=a("code"),nur=o("model_type"),sur=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),lur=o("pretrained_model_name_or_path"),iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),dur=o("pretrained_model_name_or_path"),cur=o(":"),mur=l(),V=a("ul"),sE=a("li"),oEe=a("strong"),fur=o("albert"),gur=o(" \u2014 "),kJ=a("a"),hur=o("AlbertForQuestionAnswering"),uur=o(" (ALBERT model)"),pur=l(),lE=a("li"),rEe=a("strong"),_ur=o("bart"),bur=o(" \u2014 "),SJ=a("a"),vur=o("BartForQuestionAnswering"),Fur=o(" (BART model)"),Tur=l(),iE=a("li"),tEe=a("strong"),Mur=o("bert"),Eur=o(" \u2014 "),RJ=a("a"),Cur=o("BertForQuestionAnswering"),wur=o(" (BERT model)"),Aur=l(),dE=a("li"),aEe=a("strong"),Lur=o("big_bird"),yur=o(" \u2014 "),PJ=a("a"),xur=o("BigBirdForQuestionAnswering"),$ur=o(" (BigBird model)"),kur=l(),cE=a("li"),nEe=a("strong"),Sur=o("bigbird_pegasus"),Rur=o(" \u2014 "),BJ=a("a"),Pur=o("BigBirdPegasusForQuestionAnswering"),Bur=o(" (BigBird-Pegasus model)"),Iur=l(),mE=a("li"),sEe=a("strong"),Nur=o("camembert"),qur=o(" \u2014 "),IJ=a("a"),jur=o("CamembertForQuestionAnswering"),Dur=o(" (CamemBERT model)"),Gur=l(),fE=a("li"),lEe=a("strong"),Our=o("canine"),Vur=o(" \u2014 "),NJ=a("a"),Xur=o("CanineForQuestionAnswering"),zur=o(" (CANINE model)"),Qur=l(),gE=a("li"),iEe=a("strong"),Wur=o("convbert"),Uur=o(" \u2014 "),qJ=a("a"),Hur=o("ConvBertForQuestionAnswering"),Jur=o(" (ConvBERT model)"),Yur=l(),hE=a("li"),dEe=a("strong"),Kur=o("data2vec-text"),Zur=o(" \u2014 "),jJ=a("a"),epr=o("Data2VecTextForQuestionAnswering"),opr=o(" (Data2VecText model)"),rpr=l(),uE=a("li"),cEe=a("strong"),tpr=o("deberta"),apr=o(" \u2014 "),DJ=a("a"),npr=o("DebertaForQuestionAnswering"),spr=o(" (DeBERTa model)"),lpr=l(),pE=a("li"),mEe=a("strong"),ipr=o("deberta-v2"),dpr=o(" \u2014 "),GJ=a("a"),cpr=o("DebertaV2ForQuestionAnswering"),mpr=o(" (DeBERTa-v2 model)"),fpr=l(),_E=a("li"),fEe=a("strong"),gpr=o("distilbert"),hpr=o(" \u2014 "),OJ=a("a"),upr=o("DistilBertForQuestionAnswering"),ppr=o(" (DistilBERT model)"),_pr=l(),bE=a("li"),gEe=a("strong"),bpr=o("electra"),vpr=o(" \u2014 "),VJ=a("a"),Fpr=o("ElectraForQuestionAnswering"),Tpr=o(" (ELECTRA model)"),Mpr=l(),vE=a("li"),hEe=a("strong"),Epr=o("ernie"),Cpr=o(" \u2014 "),XJ=a("a"),wpr=o("ErnieForQuestionAnswering"),Apr=o(" (ERNIE model)"),Lpr=l(),FE=a("li"),uEe=a("strong"),ypr=o("flaubert"),xpr=o(" \u2014 "),zJ=a("a"),$pr=o("FlaubertForQuestionAnsweringSimple"),kpr=o(" (FlauBERT model)"),Spr=l(),TE=a("li"),pEe=a("strong"),Rpr=o("fnet"),Ppr=o(" \u2014 "),QJ=a("a"),Bpr=o("FNetForQuestionAnswering"),Ipr=o(" (FNet model)"),Npr=l(),ME=a("li"),_Ee=a("strong"),qpr=o("funnel"),jpr=o(" \u2014 "),WJ=a("a"),Dpr=o("FunnelForQuestionAnswering"),Gpr=o(" (Funnel Transformer model)"),Opr=l(),EE=a("li"),bEe=a("strong"),Vpr=o("gptj"),Xpr=o(" \u2014 "),UJ=a("a"),zpr=o("GPTJForQuestionAnswering"),Qpr=o(" (GPT-J model)"),Wpr=l(),CE=a("li"),vEe=a("strong"),Upr=o("ibert"),Hpr=o(" \u2014 "),HJ=a("a"),Jpr=o("IBertForQuestionAnswering"),Ypr=o(" (I-BERT model)"),Kpr=l(),wE=a("li"),FEe=a("strong"),Zpr=o("layoutlmv2"),e_r=o(" \u2014 "),JJ=a("a"),o_r=o("LayoutLMv2ForQuestionAnswering"),r_r=o(" (LayoutLMv2 model)"),t_r=l(),AE=a("li"),TEe=a("strong"),a_r=o("layoutlmv3"),n_r=o(" \u2014 "),YJ=a("a"),s_r=o("LayoutLMv3ForQuestionAnswering"),l_r=o(" (LayoutLMv3 model)"),i_r=l(),LE=a("li"),MEe=a("strong"),d_r=o("led"),c_r=o(" \u2014 "),KJ=a("a"),m_r=o("LEDForQuestionAnswering"),f_r=o(" (LED model)"),g_r=l(),yE=a("li"),EEe=a("strong"),h_r=o("longformer"),u_r=o(" \u2014 "),ZJ=a("a"),p_r=o("LongformerForQuestionAnswering"),__r=o(" (Longformer model)"),b_r=l(),xE=a("li"),CEe=a("strong"),v_r=o("luke"),F_r=o(" \u2014 "),eY=a("a"),T_r=o("LukeForQuestionAnswering"),M_r=o(" (LUKE model)"),E_r=l(),$E=a("li"),wEe=a("strong"),C_r=o("lxmert"),w_r=o(" \u2014 "),oY=a("a"),A_r=o("LxmertForQuestionAnswering"),L_r=o(" (LXMERT model)"),y_r=l(),kE=a("li"),AEe=a("strong"),x_r=o("mbart"),$_r=o(" \u2014 "),rY=a("a"),k_r=o("MBartForQuestionAnswering"),S_r=o(" (mBART model)"),R_r=l(),SE=a("li"),LEe=a("strong"),P_r=o("megatron-bert"),B_r=o(" \u2014 "),tY=a("a"),I_r=o("MegatronBertForQuestionAnswering"),N_r=o(" (Megatron-BERT model)"),q_r=l(),RE=a("li"),yEe=a("strong"),j_r=o("mobilebert"),D_r=o(" \u2014 "),aY=a("a"),G_r=o("MobileBertForQuestionAnswering"),O_r=o(" (MobileBERT model)"),V_r=l(),PE=a("li"),xEe=a("strong"),X_r=o("mpnet"),z_r=o(" \u2014 "),nY=a("a"),Q_r=o("MPNetForQuestionAnswering"),W_r=o(" (MPNet model)"),U_r=l(),BE=a("li"),$Ee=a("strong"),H_r=o("mvp"),J_r=o(" \u2014 "),sY=a("a"),Y_r=o("MvpForQuestionAnswering"),K_r=o(" (MVP model)"),Z_r=l(),IE=a("li"),kEe=a("strong"),ebr=o("nezha"),obr=o(" \u2014 "),lY=a("a"),rbr=o("NezhaForQuestionAnswering"),tbr=o(" (Nezha model)"),abr=l(),NE=a("li"),SEe=a("strong"),nbr=o("nystromformer"),sbr=o(" \u2014 "),iY=a("a"),lbr=o("NystromformerForQuestionAnswering"),ibr=o(" (Nystr\xF6mformer model)"),dbr=l(),qE=a("li"),REe=a("strong"),cbr=o("qdqbert"),mbr=o(" \u2014 "),dY=a("a"),fbr=o("QDQBertForQuestionAnswering"),gbr=o(" (QDQBert model)"),hbr=l(),jE=a("li"),PEe=a("strong"),ubr=o("reformer"),pbr=o(" \u2014 "),cY=a("a"),_br=o("ReformerForQuestionAnswering"),bbr=o(" (Reformer model)"),vbr=l(),DE=a("li"),BEe=a("strong"),Fbr=o("rembert"),Tbr=o(" \u2014 "),mY=a("a"),Mbr=o("RemBertForQuestionAnswering"),Ebr=o(" (RemBERT model)"),Cbr=l(),GE=a("li"),IEe=a("strong"),wbr=o("roberta"),Abr=o(" \u2014 "),fY=a("a"),Lbr=o("RobertaForQuestionAnswering"),ybr=o(" (RoBERTa model)"),xbr=l(),OE=a("li"),NEe=a("strong"),$br=o("roformer"),kbr=o(" \u2014 "),gY=a("a"),Sbr=o("RoFormerForQuestionAnswering"),Rbr=o(" (RoFormer model)"),Pbr=l(),VE=a("li"),qEe=a("strong"),Bbr=o("splinter"),Ibr=o(" \u2014 "),hY=a("a"),Nbr=o("SplinterForQuestionAnswering"),qbr=o(" (Splinter model)"),jbr=l(),XE=a("li"),jEe=a("strong"),Dbr=o("squeezebert"),Gbr=o(" \u2014 "),uY=a("a"),Obr=o("SqueezeBertForQuestionAnswering"),Vbr=o(" (SqueezeBERT model)"),Xbr=l(),zE=a("li"),DEe=a("strong"),zbr=o("xlm"),Qbr=o(" \u2014 "),pY=a("a"),Wbr=o("XLMForQuestionAnsweringSimple"),Ubr=o(" (XLM model)"),Hbr=l(),QE=a("li"),GEe=a("strong"),Jbr=o("xlm-roberta"),Ybr=o(" \u2014 "),_Y=a("a"),Kbr=o("XLMRobertaForQuestionAnswering"),Zbr=o(" (XLM-RoBERTa model)"),e2r=l(),WE=a("li"),OEe=a("strong"),o2r=o("xlm-roberta-xl"),r2r=o(" \u2014 "),bY=a("a"),t2r=o("XLMRobertaXLForQuestionAnswering"),a2r=o(" (XLM-RoBERTa-XL model)"),n2r=l(),UE=a("li"),VEe=a("strong"),s2r=o("xlnet"),l2r=o(" \u2014 "),vY=a("a"),i2r=o("XLNetForQuestionAnsweringSimple"),d2r=o(" (XLNet model)"),c2r=l(),HE=a("li"),XEe=a("strong"),m2r=o("yoso"),f2r=o(" \u2014 "),FY=a("a"),g2r=o("YosoForQuestionAnswering"),h2r=o(" (YOSO model)"),u2r=l(),JE=a("p"),p2r=o("The model is set in evaluation mode by default using "),zEe=a("code"),_2r=o("model.eval()"),b2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QEe=a("code"),v2r=o("model.train()"),F2r=l(),F(YE.$$.fragment),TZe=l(),Wd=a("h2"),KE=a("a"),WEe=a("span"),F(d$.$$.fragment),T2r=l(),UEe=a("span"),M2r=o("AutoModelForTableQuestionAnswering"),MZe=l(),Xo=a("div"),F(c$.$$.fragment),E2r=l(),Ud=a("p"),C2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TY=a("a"),w2r=o("from_pretrained()"),A2r=o(" class method or the "),MY=a("a"),L2r=o("from_config()"),y2r=o(` class
method.`),x2r=l(),m$=a("p"),$2r=o("This class cannot be instantiated directly using "),HEe=a("code"),k2r=o("__init__()"),S2r=o(" (throws an error)."),R2r=l(),Lt=a("div"),F(f$.$$.fragment),P2r=l(),JEe=a("p"),B2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),I2r=l(),Hd=a("p"),N2r=o(`Note:
Loading a model from its configuration file does `),YEe=a("strong"),q2r=o("not"),j2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),D2r=o("from_pretrained()"),G2r=o(" to load the model weights."),O2r=l(),F(ZE.$$.fragment),V2r=l(),co=a("div"),F(g$.$$.fragment),X2r=l(),KEe=a("p"),z2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q2r=l(),sn=a("p"),W2r=o("The model class to instantiate is selected based on the "),ZEe=a("code"),U2r=o("model_type"),H2r=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),K2r=o("pretrained_model_name_or_path"),Z2r=o(":"),e1r=l(),r4e=a("ul"),e4=a("li"),t4e=a("strong"),o1r=o("tapas"),r1r=o(" \u2014 "),CY=a("a"),t1r=o("TapasForQuestionAnswering"),a1r=o(" (TAPAS model)"),n1r=l(),o4=a("p"),s1r=o("The model is set in evaluation mode by default using "),a4e=a("code"),l1r=o("model.eval()"),i1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n4e=a("code"),d1r=o("model.train()"),c1r=l(),F(r4.$$.fragment),EZe=l(),Jd=a("h2"),t4=a("a"),s4e=a("span"),F(h$.$$.fragment),m1r=l(),l4e=a("span"),f1r=o("AutoModelForDocumentQuestionAnswering"),CZe=l(),zo=a("div"),F(u$.$$.fragment),g1r=l(),Yd=a("p"),h1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),wY=a("a"),u1r=o("from_pretrained()"),p1r=o(" class method or the "),AY=a("a"),_1r=o("from_config()"),b1r=o(` class
method.`),v1r=l(),p$=a("p"),F1r=o("This class cannot be instantiated directly using "),i4e=a("code"),T1r=o("__init__()"),M1r=o(" (throws an error)."),E1r=l(),yt=a("div"),F(_$.$$.fragment),C1r=l(),d4e=a("p"),w1r=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),A1r=l(),Kd=a("p"),L1r=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),y1r=o("not"),x1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),$1r=o("from_pretrained()"),k1r=o(" to load the model weights."),S1r=l(),F(a4.$$.fragment),R1r=l(),mo=a("div"),F(b$.$$.fragment),P1r=l(),m4e=a("p"),B1r=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),I1r=l(),ln=a("p"),N1r=o("The model class to instantiate is selected based on the "),f4e=a("code"),q1r=o("model_type"),j1r=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),D1r=o("pretrained_model_name_or_path"),G1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),O1r=o("pretrained_model_name_or_path"),V1r=o(":"),X1r=l(),Zd=a("ul"),n4=a("li"),u4e=a("strong"),z1r=o("layoutlm"),Q1r=o(" \u2014 "),yY=a("a"),W1r=o("LayoutLMForQuestionAnswering"),U1r=o(" (LayoutLM model)"),H1r=l(),s4=a("li"),p4e=a("strong"),J1r=o("layoutlmv2"),Y1r=o(" \u2014 "),xY=a("a"),K1r=o("LayoutLMv2ForQuestionAnswering"),Z1r=o(" (LayoutLMv2 model)"),evr=l(),l4=a("li"),_4e=a("strong"),ovr=o("layoutlmv3"),rvr=o(" \u2014 "),$Y=a("a"),tvr=o("LayoutLMv3ForQuestionAnswering"),avr=o(" (LayoutLMv3 model)"),nvr=l(),i4=a("p"),svr=o("The model is set in evaluation mode by default using "),b4e=a("code"),lvr=o("model.eval()"),ivr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v4e=a("code"),dvr=o("model.train()"),cvr=l(),F(d4.$$.fragment),wZe=l(),ec=a("h2"),c4=a("a"),F4e=a("span"),F(v$.$$.fragment),mvr=l(),T4e=a("span"),fvr=o("AutoModelForImageClassification"),AZe=l(),Qo=a("div"),F(F$.$$.fragment),gvr=l(),oc=a("p"),hvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kY=a("a"),uvr=o("from_pretrained()"),pvr=o(" class method or the "),SY=a("a"),_vr=o("from_config()"),bvr=o(` class
method.`),vvr=l(),T$=a("p"),Fvr=o("This class cannot be instantiated directly using "),M4e=a("code"),Tvr=o("__init__()"),Mvr=o(" (throws an error)."),Evr=l(),xt=a("div"),F(M$.$$.fragment),Cvr=l(),E4e=a("p"),wvr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Avr=l(),rc=a("p"),Lvr=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),yvr=o("not"),xvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),$vr=o("from_pretrained()"),kvr=o(" to load the model weights."),Svr=l(),F(m4.$$.fragment),Rvr=l(),fo=a("div"),F(E$.$$.fragment),Pvr=l(),w4e=a("p"),Bvr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ivr=l(),dn=a("p"),Nvr=o("The model class to instantiate is selected based on the "),A4e=a("code"),qvr=o("model_type"),jvr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),Dvr=o("pretrained_model_name_or_path"),Gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(":"),Xvr=l(),be=a("ul"),f4=a("li"),x4e=a("strong"),zvr=o("beit"),Qvr=o(" \u2014 "),PY=a("a"),Wvr=o("BeitForImageClassification"),Uvr=o(" (BEiT model)"),Hvr=l(),g4=a("li"),$4e=a("strong"),Jvr=o("convnext"),Yvr=o(" \u2014 "),BY=a("a"),Kvr=o("ConvNextForImageClassification"),Zvr=o(" (ConvNeXT model)"),eFr=l(),h4=a("li"),k4e=a("strong"),oFr=o("cvt"),rFr=o(" \u2014 "),IY=a("a"),tFr=o("CvtForImageClassification"),aFr=o(" (CvT model)"),nFr=l(),u4=a("li"),S4e=a("strong"),sFr=o("data2vec-vision"),lFr=o(" \u2014 "),NY=a("a"),iFr=o("Data2VecVisionForImageClassification"),dFr=o(" (Data2VecVision model)"),cFr=l(),bl=a("li"),R4e=a("strong"),mFr=o("deit"),fFr=o(" \u2014 "),qY=a("a"),gFr=o("DeiTForImageClassification"),hFr=o(" or "),jY=a("a"),uFr=o("DeiTForImageClassificationWithTeacher"),pFr=o(" (DeiT model)"),_Fr=l(),p4=a("li"),P4e=a("strong"),bFr=o("imagegpt"),vFr=o(" \u2014 "),DY=a("a"),FFr=o("ImageGPTForImageClassification"),TFr=o(" (ImageGPT model)"),MFr=l(),vl=a("li"),B4e=a("strong"),EFr=o("levit"),CFr=o(" \u2014 "),GY=a("a"),wFr=o("LevitForImageClassification"),AFr=o(" or "),OY=a("a"),LFr=o("LevitForImageClassificationWithTeacher"),yFr=o(" (LeViT model)"),xFr=l(),_4=a("li"),I4e=a("strong"),$Fr=o("mobilevit"),kFr=o(" \u2014 "),VY=a("a"),SFr=o("MobileViTForImageClassification"),RFr=o(" (MobileViT model)"),PFr=l(),$t=a("li"),N4e=a("strong"),BFr=o("perceiver"),IFr=o(" \u2014 "),XY=a("a"),NFr=o("PerceiverForImageClassificationLearned"),qFr=o(" or "),zY=a("a"),jFr=o("PerceiverForImageClassificationFourier"),DFr=o(" or "),QY=a("a"),GFr=o("PerceiverForImageClassificationConvProcessing"),OFr=o(" (Perceiver model)"),VFr=l(),b4=a("li"),q4e=a("strong"),XFr=o("poolformer"),zFr=o(" \u2014 "),WY=a("a"),QFr=o("PoolFormerForImageClassification"),WFr=o(" (PoolFormer model)"),UFr=l(),v4=a("li"),j4e=a("strong"),HFr=o("regnet"),JFr=o(" \u2014 "),UY=a("a"),YFr=o("RegNetForImageClassification"),KFr=o(" (RegNet model)"),ZFr=l(),F4=a("li"),D4e=a("strong"),eTr=o("resnet"),oTr=o(" \u2014 "),HY=a("a"),rTr=o("ResNetForImageClassification"),tTr=o(" (ResNet model)"),aTr=l(),T4=a("li"),G4e=a("strong"),nTr=o("segformer"),sTr=o(" \u2014 "),JY=a("a"),lTr=o("SegformerForImageClassification"),iTr=o(" (SegFormer model)"),dTr=l(),M4=a("li"),O4e=a("strong"),cTr=o("swin"),mTr=o(" \u2014 "),YY=a("a"),fTr=o("SwinForImageClassification"),gTr=o(" (Swin Transformer model)"),hTr=l(),E4=a("li"),V4e=a("strong"),uTr=o("swinv2"),pTr=o(" \u2014 "),KY=a("a"),_Tr=o("Swinv2ForImageClassification"),bTr=o(" (Swin Transformer V2 model)"),vTr=l(),C4=a("li"),X4e=a("strong"),FTr=o("van"),TTr=o(" \u2014 "),ZY=a("a"),MTr=o("VanForImageClassification"),ETr=o(" (VAN model)"),CTr=l(),w4=a("li"),z4e=a("strong"),wTr=o("vit"),ATr=o(" \u2014 "),eK=a("a"),LTr=o("ViTForImageClassification"),yTr=o(" (ViT model)"),xTr=l(),A4=a("li"),Q4e=a("strong"),$Tr=o("vit_msn"),kTr=o(" \u2014 "),oK=a("a"),STr=o("ViTMSNForImageClassification"),RTr=o(" (ViTMSN model)"),PTr=l(),L4=a("p"),BTr=o("The model is set in evaluation mode by default using "),W4e=a("code"),ITr=o("model.eval()"),NTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U4e=a("code"),qTr=o("model.train()"),jTr=l(),F(y4.$$.fragment),LZe=l(),tc=a("h2"),x4=a("a"),H4e=a("span"),F(C$.$$.fragment),DTr=l(),J4e=a("span"),GTr=o("AutoModelForVideoClassification"),yZe=l(),Wo=a("div"),F(w$.$$.fragment),OTr=l(),ac=a("p"),VTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),rK=a("a"),XTr=o("from_pretrained()"),zTr=o(" class method or the "),tK=a("a"),QTr=o("from_config()"),WTr=o(` class
method.`),UTr=l(),A$=a("p"),HTr=o("This class cannot be instantiated directly using "),Y4e=a("code"),JTr=o("__init__()"),YTr=o(" (throws an error)."),KTr=l(),kt=a("div"),F(L$.$$.fragment),ZTr=l(),K4e=a("p"),eMr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),oMr=l(),nc=a("p"),rMr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),tMr=o("not"),aMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),nMr=o("from_pretrained()"),sMr=o(" to load the model weights."),lMr=l(),F($4.$$.fragment),iMr=l(),go=a("div"),F(y$.$$.fragment),dMr=l(),eCe=a("p"),cMr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),mMr=l(),cn=a("p"),fMr=o("The model class to instantiate is selected based on the "),oCe=a("code"),gMr=o("model_type"),hMr=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),uMr=o("pretrained_model_name_or_path"),pMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),_Mr=o("pretrained_model_name_or_path"),bMr=o(":"),vMr=l(),aCe=a("ul"),k4=a("li"),nCe=a("strong"),FMr=o("videomae"),TMr=o(" \u2014 "),nK=a("a"),MMr=o("VideoMAEForVideoClassification"),EMr=o(" (VideoMAE model)"),CMr=l(),S4=a("p"),wMr=o("The model is set in evaluation mode by default using "),sCe=a("code"),AMr=o("model.eval()"),LMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lCe=a("code"),yMr=o("model.train()"),xMr=l(),F(R4.$$.fragment),xZe=l(),sc=a("h2"),P4=a("a"),iCe=a("span"),F(x$.$$.fragment),$Mr=l(),dCe=a("span"),kMr=o("AutoModelForVision2Seq"),$Ze=l(),Uo=a("div"),F($$.$$.fragment),SMr=l(),lc=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sK=a("a"),PMr=o("from_pretrained()"),BMr=o(" class method or the "),lK=a("a"),IMr=o("from_config()"),NMr=o(` class
method.`),qMr=l(),k$=a("p"),jMr=o("This class cannot be instantiated directly using "),cCe=a("code"),DMr=o("__init__()"),GMr=o(" (throws an error)."),OMr=l(),St=a("div"),F(S$.$$.fragment),VMr=l(),mCe=a("p"),XMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zMr=l(),ic=a("p"),QMr=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),WMr=o("not"),UMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),HMr=o("from_pretrained()"),JMr=o(" to load the model weights."),YMr=l(),F(B4.$$.fragment),KMr=l(),ho=a("div"),F(R$.$$.fragment),ZMr=l(),gCe=a("p"),eEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oEr=l(),mn=a("p"),rEr=o("The model class to instantiate is selected based on the "),hCe=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),_Ce=a("ul"),I4=a("li"),bCe=a("strong"),cEr=o("vision-encoder-decoder"),mEr=o(" \u2014 "),dK=a("a"),fEr=o("VisionEncoderDecoderModel"),gEr=o(" (Vision Encoder decoder model)"),hEr=l(),N4=a("p"),uEr=o("The model is set in evaluation mode by default using "),vCe=a("code"),pEr=o("model.eval()"),_Er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FCe=a("code"),bEr=o("model.train()"),vEr=l(),F(q4.$$.fragment),kZe=l(),dc=a("h2"),j4=a("a"),TCe=a("span"),F(P$.$$.fragment),FEr=l(),MCe=a("span"),TEr=o("AutoModelForVisualQuestionAnswering"),SZe=l(),Ho=a("div"),F(B$.$$.fragment),MEr=l(),cc=a("p"),EEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),cK=a("a"),CEr=o("from_pretrained()"),wEr=o(" class method or the "),mK=a("a"),AEr=o("from_config()"),LEr=o(` class
method.`),yEr=l(),I$=a("p"),xEr=o("This class cannot be instantiated directly using "),ECe=a("code"),$Er=o("__init__()"),kEr=o(" (throws an error)."),SEr=l(),Rt=a("div"),F(N$.$$.fragment),REr=l(),CCe=a("p"),PEr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),BEr=l(),mc=a("p"),IEr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),NEr=o("not"),qEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),jEr=o("from_pretrained()"),DEr=o(" to load the model weights."),GEr=l(),F(D4.$$.fragment),OEr=l(),uo=a("div"),F(q$.$$.fragment),VEr=l(),ACe=a("p"),XEr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),zEr=l(),fn=a("p"),QEr=o("The model class to instantiate is selected based on the "),LCe=a("code"),WEr=o("model_type"),UEr=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),HEr=o("pretrained_model_name_or_path"),JEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),YEr=o("pretrained_model_name_or_path"),KEr=o(":"),ZEr=l(),$Ce=a("ul"),G4=a("li"),kCe=a("strong"),e4r=o("vilt"),o4r=o(" \u2014 "),gK=a("a"),r4r=o("ViltForQuestionAnswering"),t4r=o(" (ViLT model)"),a4r=l(),O4=a("p"),n4r=o("The model is set in evaluation mode by default using "),SCe=a("code"),s4r=o("model.eval()"),l4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RCe=a("code"),i4r=o("model.train()"),d4r=l(),F(V4.$$.fragment),RZe=l(),fc=a("h2"),X4=a("a"),PCe=a("span"),F(j$.$$.fragment),c4r=l(),BCe=a("span"),m4r=o("AutoModelForAudioClassification"),PZe=l(),Jo=a("div"),F(D$.$$.fragment),f4r=l(),gc=a("p"),g4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hK=a("a"),h4r=o("from_pretrained()"),u4r=o(" class method or the "),uK=a("a"),p4r=o("from_config()"),_4r=o(` class
method.`),b4r=l(),G$=a("p"),v4r=o("This class cannot be instantiated directly using "),ICe=a("code"),F4r=o("__init__()"),T4r=o(" (throws an error)."),M4r=l(),Pt=a("div"),F(O$.$$.fragment),E4r=l(),NCe=a("p"),C4r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),w4r=l(),hc=a("p"),A4r=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),L4r=o("not"),y4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),x4r=o("from_pretrained()"),$4r=o(" to load the model weights."),k4r=l(),F(z4.$$.fragment),S4r=l(),po=a("div"),F(V$.$$.fragment),R4r=l(),jCe=a("p"),P4r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),B4r=l(),gn=a("p"),I4r=o("The model class to instantiate is selected based on the "),DCe=a("code"),N4r=o("model_type"),q4r=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),j4r=o("pretrained_model_name_or_path"),D4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),G4r=o("pretrained_model_name_or_path"),O4r=o(":"),V4r=l(),Pe=a("ul"),Q4=a("li"),VCe=a("strong"),X4r=o("data2vec-audio"),z4r=o(" \u2014 "),_K=a("a"),Q4r=o("Data2VecAudioForSequenceClassification"),W4r=o(" (Data2VecAudio model)"),U4r=l(),W4=a("li"),XCe=a("strong"),H4r=o("hubert"),J4r=o(" \u2014 "),bK=a("a"),Y4r=o("HubertForSequenceClassification"),K4r=o(" (Hubert model)"),Z4r=l(),U4=a("li"),zCe=a("strong"),eCr=o("sew"),oCr=o(" \u2014 "),vK=a("a"),rCr=o("SEWForSequenceClassification"),tCr=o(" (SEW model)"),aCr=l(),H4=a("li"),QCe=a("strong"),nCr=o("sew-d"),sCr=o(" \u2014 "),FK=a("a"),lCr=o("SEWDForSequenceClassification"),iCr=o(" (SEW-D model)"),dCr=l(),J4=a("li"),WCe=a("strong"),cCr=o("unispeech"),mCr=o(" \u2014 "),TK=a("a"),fCr=o("UniSpeechForSequenceClassification"),gCr=o(" (UniSpeech model)"),hCr=l(),Y4=a("li"),UCe=a("strong"),uCr=o("unispeech-sat"),pCr=o(" \u2014 "),MK=a("a"),_Cr=o("UniSpeechSatForSequenceClassification"),bCr=o(" (UniSpeechSat model)"),vCr=l(),K4=a("li"),HCe=a("strong"),FCr=o("wav2vec2"),TCr=o(" \u2014 "),EK=a("a"),MCr=o("Wav2Vec2ForSequenceClassification"),ECr=o(" (Wav2Vec2 model)"),CCr=l(),Z4=a("li"),JCe=a("strong"),wCr=o("wav2vec2-conformer"),ACr=o(" \u2014 "),CK=a("a"),LCr=o("Wav2Vec2ConformerForSequenceClassification"),yCr=o(" (Wav2Vec2-Conformer model)"),xCr=l(),eC=a("li"),YCe=a("strong"),$Cr=o("wavlm"),kCr=o(" \u2014 "),wK=a("a"),SCr=o("WavLMForSequenceClassification"),RCr=o(" (WavLM model)"),PCr=l(),oC=a("p"),BCr=o("The model is set in evaluation mode by default using "),KCe=a("code"),ICr=o("model.eval()"),NCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZCe=a("code"),qCr=o("model.train()"),jCr=l(),F(rC.$$.fragment),BZe=l(),uc=a("h2"),tC=a("a"),e3e=a("span"),F(X$.$$.fragment),DCr=l(),o3e=a("span"),GCr=o("AutoModelForAudioFrameClassification"),IZe=l(),Yo=a("div"),F(z$.$$.fragment),OCr=l(),pc=a("p"),VCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AK=a("a"),XCr=o("from_pretrained()"),zCr=o(" class method or the "),LK=a("a"),QCr=o("from_config()"),WCr=o(` class
method.`),UCr=l(),Q$=a("p"),HCr=o("This class cannot be instantiated directly using "),r3e=a("code"),JCr=o("__init__()"),YCr=o(" (throws an error)."),KCr=l(),Bt=a("div"),F(W$.$$.fragment),ZCr=l(),t3e=a("p"),e3r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),o3r=l(),_c=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(aC.$$.fragment),i3r=l(),_o=a("div"),F(U$.$$.fragment),d3r=l(),n3e=a("p"),c3r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),m3r=l(),hn=a("p"),f3r=o("The model class to instantiate is selected based on the "),s3e=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),u3r=o("pretrained_model_name_or_path"),p3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),_3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),mt=a("ul"),nC=a("li"),d3e=a("strong"),F3r=o("data2vec-audio"),T3r=o(" \u2014 "),xK=a("a"),M3r=o("Data2VecAudioForAudioFrameClassification"),E3r=o(" (Data2VecAudio model)"),C3r=l(),sC=a("li"),c3e=a("strong"),w3r=o("unispeech-sat"),A3r=o(" \u2014 "),$K=a("a"),L3r=o("UniSpeechSatForAudioFrameClassification"),y3r=o(" (UniSpeechSat model)"),x3r=l(),lC=a("li"),m3e=a("strong"),$3r=o("wav2vec2"),k3r=o(" \u2014 "),kK=a("a"),S3r=o("Wav2Vec2ForAudioFrameClassification"),R3r=o(" (Wav2Vec2 model)"),P3r=l(),iC=a("li"),f3e=a("strong"),B3r=o("wav2vec2-conformer"),I3r=o(" \u2014 "),SK=a("a"),N3r=o("Wav2Vec2ConformerForAudioFrameClassification"),q3r=o(" (Wav2Vec2-Conformer model)"),j3r=l(),dC=a("li"),g3e=a("strong"),D3r=o("wavlm"),G3r=o(" \u2014 "),RK=a("a"),O3r=o("WavLMForAudioFrameClassification"),V3r=o(" (WavLM model)"),X3r=l(),cC=a("p"),z3r=o("The model is set in evaluation mode by default using "),h3e=a("code"),Q3r=o("model.eval()"),W3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u3e=a("code"),U3r=o("model.train()"),H3r=l(),F(mC.$$.fragment),NZe=l(),bc=a("h2"),fC=a("a"),p3e=a("span"),F(H$.$$.fragment),J3r=l(),_3e=a("span"),Y3r=o("AutoModelForCTC"),qZe=l(),Ko=a("div"),F(J$.$$.fragment),K3r=l(),vc=a("p"),Z3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PK=a("a"),e5r=o("from_pretrained()"),o5r=o(" class method or the "),BK=a("a"),r5r=o("from_config()"),t5r=o(` class
method.`),a5r=l(),Y$=a("p"),n5r=o("This class cannot be instantiated directly using "),b3e=a("code"),s5r=o("__init__()"),l5r=o(" (throws an error)."),i5r=l(),It=a("div"),F(K$.$$.fragment),d5r=l(),v3e=a("p"),c5r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),m5r=l(),Fc=a("p"),f5r=o(`Note:
Loading a model from its configuration file does `),F3e=a("strong"),g5r=o("not"),h5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),u5r=o("from_pretrained()"),p5r=o(" to load the model weights."),_5r=l(),F(gC.$$.fragment),b5r=l(),bo=a("div"),F(Z$.$$.fragment),v5r=l(),T3e=a("p"),F5r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),T5r=l(),un=a("p"),M5r=o("The model class to instantiate is selected based on the "),M3e=a("code"),E5r=o("model_type"),C5r=o(` property of the config object (either
passed as an argument or loaded from `),E3e=a("code"),w5r=o("pretrained_model_name_or_path"),A5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=a("code"),L5r=o("pretrained_model_name_or_path"),y5r=o(":"),x5r=l(),Le=a("ul"),hC=a("li"),w3e=a("strong"),$5r=o("data2vec-audio"),k5r=o(" \u2014 "),NK=a("a"),S5r=o("Data2VecAudioForCTC"),R5r=o(" (Data2VecAudio model)"),P5r=l(),uC=a("li"),A3e=a("strong"),B5r=o("hubert"),I5r=o(" \u2014 "),qK=a("a"),N5r=o("HubertForCTC"),q5r=o(" (Hubert model)"),j5r=l(),pC=a("li"),L3e=a("strong"),D5r=o("mctct"),G5r=o(" \u2014 "),jK=a("a"),O5r=o("MCTCTForCTC"),V5r=o(" (M-CTC-T model)"),X5r=l(),_C=a("li"),y3e=a("strong"),z5r=o("sew"),Q5r=o(" \u2014 "),DK=a("a"),W5r=o("SEWForCTC"),U5r=o(" (SEW model)"),H5r=l(),bC=a("li"),x3e=a("strong"),J5r=o("sew-d"),Y5r=o(" \u2014 "),GK=a("a"),K5r=o("SEWDForCTC"),Z5r=o(" (SEW-D model)"),e0r=l(),vC=a("li"),$3e=a("strong"),o0r=o("unispeech"),r0r=o(" \u2014 "),OK=a("a"),t0r=o("UniSpeechForCTC"),a0r=o(" (UniSpeech model)"),n0r=l(),FC=a("li"),k3e=a("strong"),s0r=o("unispeech-sat"),l0r=o(" \u2014 "),VK=a("a"),i0r=o("UniSpeechSatForCTC"),d0r=o(" (UniSpeechSat model)"),c0r=l(),TC=a("li"),S3e=a("strong"),m0r=o("wav2vec2"),f0r=o(" \u2014 "),XK=a("a"),g0r=o("Wav2Vec2ForCTC"),h0r=o(" (Wav2Vec2 model)"),u0r=l(),MC=a("li"),R3e=a("strong"),p0r=o("wav2vec2-conformer"),_0r=o(" \u2014 "),zK=a("a"),b0r=o("Wav2Vec2ConformerForCTC"),v0r=o(" (Wav2Vec2-Conformer model)"),F0r=l(),EC=a("li"),P3e=a("strong"),T0r=o("wavlm"),M0r=o(" \u2014 "),QK=a("a"),E0r=o("WavLMForCTC"),C0r=o(" (WavLM model)"),w0r=l(),CC=a("p"),A0r=o("The model is set in evaluation mode by default using "),B3e=a("code"),L0r=o("model.eval()"),y0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I3e=a("code"),x0r=o("model.train()"),$0r=l(),F(wC.$$.fragment),jZe=l(),Tc=a("h2"),AC=a("a"),N3e=a("span"),F(ek.$$.fragment),k0r=l(),q3e=a("span"),S0r=o("AutoModelForSpeechSeq2Seq"),DZe=l(),Zo=a("div"),F(ok.$$.fragment),R0r=l(),Mc=a("p"),P0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WK=a("a"),B0r=o("from_pretrained()"),I0r=o(" class method or the "),UK=a("a"),N0r=o("from_config()"),q0r=o(` class
method.`),j0r=l(),rk=a("p"),D0r=o("This class cannot be instantiated directly using "),j3e=a("code"),G0r=o("__init__()"),O0r=o(" (throws an error)."),V0r=l(),Nt=a("div"),F(tk.$$.fragment),X0r=l(),D3e=a("p"),z0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Q0r=l(),Ec=a("p"),W0r=o(`Note:
Loading a model from its configuration file does `),G3e=a("strong"),U0r=o("not"),H0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),J0r=o("from_pretrained()"),Y0r=o(" to load the model weights."),K0r=l(),F(LC.$$.fragment),Z0r=l(),vo=a("div"),F(ak.$$.fragment),ewr=l(),O3e=a("p"),owr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rwr=l(),pn=a("p"),twr=o("The model class to instantiate is selected based on the "),V3e=a("code"),awr=o("model_type"),nwr=o(` property of the config object (either
passed as an argument or loaded from `),X3e=a("code"),swr=o("pretrained_model_name_or_path"),lwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=a("code"),iwr=o("pretrained_model_name_or_path"),dwr=o(":"),cwr=l(),nk=a("ul"),yC=a("li"),Q3e=a("strong"),mwr=o("speech-encoder-decoder"),fwr=o(" \u2014 "),JK=a("a"),gwr=o("SpeechEncoderDecoderModel"),hwr=o(" (Speech Encoder decoder model)"),uwr=l(),xC=a("li"),W3e=a("strong"),pwr=o("speech_to_text"),_wr=o(" \u2014 "),YK=a("a"),bwr=o("Speech2TextForConditionalGeneration"),vwr=o(" (Speech2Text model)"),Fwr=l(),$C=a("p"),Twr=o("The model is set in evaluation mode by default using "),U3e=a("code"),Mwr=o("model.eval()"),Ewr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H3e=a("code"),Cwr=o("model.train()"),wwr=l(),F(kC.$$.fragment),GZe=l(),Cc=a("h2"),SC=a("a"),J3e=a("span"),F(sk.$$.fragment),Awr=l(),Y3e=a("span"),Lwr=o("AutoModelForAudioXVector"),OZe=l(),er=a("div"),F(lk.$$.fragment),ywr=l(),wc=a("p"),xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KK=a("a"),$wr=o("from_pretrained()"),kwr=o(" class method or the "),ZK=a("a"),Swr=o("from_config()"),Rwr=o(` class
method.`),Pwr=l(),ik=a("p"),Bwr=o("This class cannot be instantiated directly using "),K3e=a("code"),Iwr=o("__init__()"),Nwr=o(" (throws an error)."),qwr=l(),qt=a("div"),F(dk.$$.fragment),jwr=l(),Z3e=a("p"),Dwr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Gwr=l(),Ac=a("p"),Owr=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),Vwr=o("not"),Xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),zwr=o("from_pretrained()"),Qwr=o(" to load the model weights."),Wwr=l(),F(RC.$$.fragment),Uwr=l(),Fo=a("div"),F(ck.$$.fragment),Hwr=l(),o5e=a("p"),Jwr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ywr=l(),_n=a("p"),Kwr=o("The model class to instantiate is selected based on the "),r5e=a("code"),Zwr=o("model_type"),eAr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(":"),nAr=l(),ft=a("ul"),PC=a("li"),n5e=a("strong"),sAr=o("data2vec-audio"),lAr=o(" \u2014 "),oZ=a("a"),iAr=o("Data2VecAudioForXVector"),dAr=o(" (Data2VecAudio model)"),cAr=l(),BC=a("li"),s5e=a("strong"),mAr=o("unispeech-sat"),fAr=o(" \u2014 "),rZ=a("a"),gAr=o("UniSpeechSatForXVector"),hAr=o(" (UniSpeechSat model)"),uAr=l(),IC=a("li"),l5e=a("strong"),pAr=o("wav2vec2"),_Ar=o(" \u2014 "),tZ=a("a"),bAr=o("Wav2Vec2ForXVector"),vAr=o(" (Wav2Vec2 model)"),FAr=l(),NC=a("li"),i5e=a("strong"),TAr=o("wav2vec2-conformer"),MAr=o(" \u2014 "),aZ=a("a"),EAr=o("Wav2Vec2ConformerForXVector"),CAr=o(" (Wav2Vec2-Conformer model)"),wAr=l(),qC=a("li"),d5e=a("strong"),AAr=o("wavlm"),LAr=o(" \u2014 "),nZ=a("a"),yAr=o("WavLMForXVector"),xAr=o(" (WavLM model)"),$Ar=l(),jC=a("p"),kAr=o("The model is set in evaluation mode by default using "),c5e=a("code"),SAr=o("model.eval()"),RAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m5e=a("code"),PAr=o("model.train()"),BAr=l(),F(DC.$$.fragment),VZe=l(),Lc=a("h2"),GC=a("a"),f5e=a("span"),F(mk.$$.fragment),IAr=l(),g5e=a("span"),NAr=o("AutoModelForMaskedImageModeling"),XZe=l(),or=a("div"),F(fk.$$.fragment),qAr=l(),yc=a("p"),jAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sZ=a("a"),DAr=o("from_pretrained()"),GAr=o(" class method or the "),lZ=a("a"),OAr=o("from_config()"),VAr=o(` class
method.`),XAr=l(),gk=a("p"),zAr=o("This class cannot be instantiated directly using "),h5e=a("code"),QAr=o("__init__()"),WAr=o(" (throws an error)."),UAr=l(),jt=a("div"),F(hk.$$.fragment),HAr=l(),u5e=a("p"),JAr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),YAr=l(),xc=a("p"),KAr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),ZAr=o("not"),e6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),o6r=o("from_pretrained()"),r6r=o(" to load the model weights."),t6r=l(),F(OC.$$.fragment),a6r=l(),To=a("div"),F(uk.$$.fragment),n6r=l(),_5e=a("p"),s6r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),l6r=l(),bn=a("p"),i6r=o("The model class to instantiate is selected based on the "),b5e=a("code"),d6r=o("model_type"),c6r=o(` property of the config object (either
passed as an argument or loaded from `),v5e=a("code"),m6r=o("pretrained_model_name_or_path"),f6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),g6r=o("pretrained_model_name_or_path"),h6r=o(":"),u6r=l(),vn=a("ul"),VC=a("li"),T5e=a("strong"),p6r=o("deit"),_6r=o(" \u2014 "),dZ=a("a"),b6r=o("DeiTForMaskedImageModeling"),v6r=o(" (DeiT model)"),F6r=l(),XC=a("li"),M5e=a("strong"),T6r=o("swin"),M6r=o(" \u2014 "),cZ=a("a"),E6r=o("SwinForMaskedImageModeling"),C6r=o(" (Swin Transformer model)"),w6r=l(),zC=a("li"),E5e=a("strong"),A6r=o("swinv2"),L6r=o(" \u2014 "),mZ=a("a"),y6r=o("Swinv2ForMaskedImageModeling"),x6r=o(" (Swin Transformer V2 model)"),$6r=l(),QC=a("li"),C5e=a("strong"),k6r=o("vit"),S6r=o(" \u2014 "),fZ=a("a"),R6r=o("ViTForMaskedImageModeling"),P6r=o(" (ViT model)"),B6r=l(),WC=a("p"),I6r=o("The model is set in evaluation mode by default using "),w5e=a("code"),N6r=o("model.eval()"),q6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A5e=a("code"),j6r=o("model.train()"),D6r=l(),F(UC.$$.fragment),zZe=l(),$c=a("h2"),HC=a("a"),L5e=a("span"),F(pk.$$.fragment),G6r=l(),y5e=a("span"),O6r=o("AutoModelForObjectDetection"),QZe=l(),rr=a("div"),F(_k.$$.fragment),V6r=l(),kc=a("p"),X6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gZ=a("a"),z6r=o("from_pretrained()"),Q6r=o(" class method or the "),hZ=a("a"),W6r=o("from_config()"),U6r=o(` class
method.`),H6r=l(),bk=a("p"),J6r=o("This class cannot be instantiated directly using "),x5e=a("code"),Y6r=o("__init__()"),K6r=o(" (throws an error)."),Z6r=l(),Dt=a("div"),F(vk.$$.fragment),e7r=l(),$5e=a("p"),o7r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),r7r=l(),Sc=a("p"),t7r=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),a7r=o("not"),n7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),s7r=o("from_pretrained()"),l7r=o(" to load the model weights."),i7r=l(),F(JC.$$.fragment),d7r=l(),Mo=a("div"),F(Fk.$$.fragment),c7r=l(),S5e=a("p"),m7r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),f7r=l(),Fn=a("p"),g7r=o("The model class to instantiate is selected based on the "),R5e=a("code"),h7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(":"),F7r=l(),Tn=a("ul"),YC=a("li"),I5e=a("strong"),T7r=o("conditional_detr"),M7r=o(" \u2014 "),pZ=a("a"),E7r=o("ConditionalDetrForObjectDetection"),C7r=o(" (Conditional DETR model)"),w7r=l(),KC=a("li"),N5e=a("strong"),A7r=o("deformable_detr"),L7r=o(" \u2014 "),_Z=a("a"),y7r=o("DeformableDetrForObjectDetection"),x7r=o(" (Deformable DETR model)"),$7r=l(),ZC=a("li"),q5e=a("strong"),k7r=o("detr"),S7r=o(" \u2014 "),bZ=a("a"),R7r=o("DetrForObjectDetection"),P7r=o(" (DETR model)"),B7r=l(),e3=a("li"),j5e=a("strong"),I7r=o("yolos"),N7r=o(" \u2014 "),vZ=a("a"),q7r=o("YolosForObjectDetection"),j7r=o(" (YOLOS model)"),D7r=l(),o3=a("p"),G7r=o("The model is set in evaluation mode by default using "),D5e=a("code"),O7r=o("model.eval()"),V7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G5e=a("code"),X7r=o("model.train()"),z7r=l(),F(r3.$$.fragment),WZe=l(),Rc=a("h2"),t3=a("a"),O5e=a("span"),F(Tk.$$.fragment),Q7r=l(),V5e=a("span"),W7r=o("AutoModelForImageSegmentation"),UZe=l(),tr=a("div"),F(Mk.$$.fragment),U7r=l(),Pc=a("p"),H7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FZ=a("a"),J7r=o("from_pretrained()"),Y7r=o(" class method or the "),TZ=a("a"),K7r=o("from_config()"),Z7r=o(` class
method.`),eLr=l(),Ek=a("p"),oLr=o("This class cannot be instantiated directly using "),X5e=a("code"),rLr=o("__init__()"),tLr=o(" (throws an error)."),aLr=l(),Gt=a("div"),F(Ck.$$.fragment),nLr=l(),z5e=a("p"),sLr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),lLr=l(),Bc=a("p"),iLr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),dLr=o("not"),cLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),mLr=o("from_pretrained()"),fLr=o(" to load the model weights."),gLr=l(),F(a3.$$.fragment),hLr=l(),Eo=a("div"),F(wk.$$.fragment),uLr=l(),W5e=a("p"),pLr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_Lr=l(),Mn=a("p"),bLr=o("The model class to instantiate is selected based on the "),U5e=a("code"),vLr=o("model_type"),FLr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),TLr=o("pretrained_model_name_or_path"),MLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(":"),wLr=l(),Y5e=a("ul"),n3=a("li"),K5e=a("strong"),ALr=o("detr"),LLr=o(" \u2014 "),EZ=a("a"),yLr=o("DetrForSegmentation"),xLr=o(" (DETR model)"),$Lr=l(),s3=a("p"),kLr=o("The model is set in evaluation mode by default using "),Z5e=a("code"),SLr=o("model.eval()"),RLr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e0e=a("code"),PLr=o("model.train()"),BLr=l(),F(l3.$$.fragment),HZe=l(),Ic=a("h2"),i3=a("a"),o0e=a("span"),F(Ak.$$.fragment),ILr=l(),r0e=a("span"),NLr=o("AutoModelForSemanticSegmentation"),JZe=l(),ar=a("div"),F(Lk.$$.fragment),qLr=l(),Nc=a("p"),jLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CZ=a("a"),DLr=o("from_pretrained()"),GLr=o(" class method or the "),wZ=a("a"),OLr=o("from_config()"),VLr=o(` class
method.`),XLr=l(),yk=a("p"),zLr=o("This class cannot be instantiated directly using "),t0e=a("code"),QLr=o("__init__()"),WLr=o(" (throws an error)."),ULr=l(),Ot=a("div"),F(xk.$$.fragment),HLr=l(),a0e=a("p"),JLr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),YLr=l(),qc=a("p"),KLr=o(`Note:
Loading a model from its configuration file does `),n0e=a("strong"),ZLr=o("not"),eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("a"),oyr=o("from_pretrained()"),ryr=o(" to load the model weights."),tyr=l(),F(d3.$$.fragment),ayr=l(),Co=a("div"),F($k.$$.fragment),nyr=l(),s0e=a("p"),syr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lyr=l(),En=a("p"),iyr=o("The model class to instantiate is selected based on the "),l0e=a("code"),dyr=o("model_type"),cyr=o(` property of the config object (either
passed as an argument or loaded from `),i0e=a("code"),myr=o("pretrained_model_name_or_path"),fyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(":"),uyr=l(),gt=a("ul"),c3=a("li"),c0e=a("strong"),pyr=o("beit"),_yr=o(" \u2014 "),LZ=a("a"),byr=o("BeitForSemanticSegmentation"),vyr=o(" (BEiT model)"),Fyr=l(),m3=a("li"),m0e=a("strong"),Tyr=o("data2vec-vision"),Myr=o(" \u2014 "),yZ=a("a"),Eyr=o("Data2VecVisionForSemanticSegmentation"),Cyr=o(" (Data2VecVision model)"),wyr=l(),f3=a("li"),f0e=a("strong"),Ayr=o("dpt"),Lyr=o(" \u2014 "),xZ=a("a"),yyr=o("DPTForSemanticSegmentation"),xyr=o(" (DPT model)"),$yr=l(),g3=a("li"),g0e=a("strong"),kyr=o("mobilevit"),Syr=o(" \u2014 "),$Z=a("a"),Ryr=o("MobileViTForSemanticSegmentation"),Pyr=o(" (MobileViT model)"),Byr=l(),h3=a("li"),h0e=a("strong"),Iyr=o("segformer"),Nyr=o(" \u2014 "),kZ=a("a"),qyr=o("SegformerForSemanticSegmentation"),jyr=o(" (SegFormer model)"),Dyr=l(),u3=a("p"),Gyr=o("The model is set in evaluation mode by default using "),u0e=a("code"),Oyr=o("model.eval()"),Vyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p0e=a("code"),Xyr=o("model.train()"),zyr=l(),F(p3.$$.fragment),YZe=l(),jc=a("h2"),_3=a("a"),_0e=a("span"),F(kk.$$.fragment),Qyr=l(),b0e=a("span"),Wyr=o("AutoModelForInstanceSegmentation"),KZe=l(),nr=a("div"),F(Sk.$$.fragment),Uyr=l(),Dc=a("p"),Hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SZ=a("a"),Jyr=o("from_pretrained()"),Yyr=o(" class method or the "),RZ=a("a"),Kyr=o("from_config()"),Zyr=o(` class
method.`),e8r=l(),Rk=a("p"),o8r=o("This class cannot be instantiated directly using "),v0e=a("code"),r8r=o("__init__()"),t8r=o(" (throws an error)."),a8r=l(),Vt=a("div"),F(Pk.$$.fragment),n8r=l(),F0e=a("p"),s8r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),l8r=l(),Gc=a("p"),i8r=o(`Note:
Loading a model from its configuration file does `),T0e=a("strong"),d8r=o("not"),c8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),m8r=o("from_pretrained()"),f8r=o(" to load the model weights."),g8r=l(),F(b3.$$.fragment),h8r=l(),wo=a("div"),F(Bk.$$.fragment),u8r=l(),M0e=a("p"),p8r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_8r=l(),Cn=a("p"),b8r=o("The model class to instantiate is selected based on the "),E0e=a("code"),v8r=o("model_type"),F8r=o(` property of the config object (either
passed as an argument or loaded from `),C0e=a("code"),T8r=o("pretrained_model_name_or_path"),M8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=a("code"),E8r=o("pretrained_model_name_or_path"),C8r=o(":"),w8r=l(),A0e=a("ul"),v3=a("li"),L0e=a("strong"),A8r=o("maskformer"),L8r=o(" \u2014 "),BZ=a("a"),y8r=o("MaskFormerForInstanceSegmentation"),x8r=o(" (MaskFormer model)"),$8r=l(),F3=a("p"),k8r=o("The model is set in evaluation mode by default using "),y0e=a("code"),S8r=o("model.eval()"),R8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x0e=a("code"),P8r=o("model.train()"),B8r=l(),F(T3.$$.fragment),ZZe=l(),Oc=a("h2"),M3=a("a"),$0e=a("span"),F(Ik.$$.fragment),I8r=l(),k0e=a("span"),N8r=o("TFAutoModel"),eeo=l(),sr=a("div"),F(Nk.$$.fragment),q8r=l(),Vc=a("p"),j8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IZ=a("a"),D8r=o("from_pretrained()"),G8r=o(" class method or the "),NZ=a("a"),O8r=o("from_config()"),V8r=o(` class
method.`),X8r=l(),qk=a("p"),z8r=o("This class cannot be instantiated directly using "),S0e=a("code"),Q8r=o("__init__()"),W8r=o(" (throws an error)."),U8r=l(),Xt=a("div"),F(jk.$$.fragment),H8r=l(),R0e=a("p"),J8r=o("Instantiates one of the base model classes of the library from a configuration."),Y8r=l(),Xc=a("p"),K8r=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),Z8r=o("not"),e9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),o9r=o("from_pretrained()"),r9r=o(" to load the model weights."),t9r=l(),F(E3.$$.fragment),a9r=l(),Ir=a("div"),F(Dk.$$.fragment),n9r=l(),B0e=a("p"),s9r=o("Instantiate one of the base model classes of the library from a pretrained model."),l9r=l(),wn=a("p"),i9r=o("The model class to instantiate is selected based on the "),I0e=a("code"),d9r=o("model_type"),c9r=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),m9r=o("pretrained_model_name_or_path"),f9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),g9r=o("pretrained_model_name_or_path"),h9r=o(":"),u9r=l(),N=a("ul"),C3=a("li"),j0e=a("strong"),p9r=o("albert"),_9r=o(" \u2014 "),jZ=a("a"),b9r=o("TFAlbertModel"),v9r=o(" (ALBERT model)"),F9r=l(),w3=a("li"),D0e=a("strong"),T9r=o("bart"),M9r=o(" \u2014 "),DZ=a("a"),E9r=o("TFBartModel"),C9r=o(" (BART model)"),w9r=l(),A3=a("li"),G0e=a("strong"),A9r=o("bert"),L9r=o(" \u2014 "),GZ=a("a"),y9r=o("TFBertModel"),x9r=o(" (BERT model)"),$9r=l(),L3=a("li"),O0e=a("strong"),k9r=o("blenderbot"),S9r=o(" \u2014 "),OZ=a("a"),R9r=o("TFBlenderbotModel"),P9r=o(" (Blenderbot model)"),B9r=l(),y3=a("li"),V0e=a("strong"),I9r=o("blenderbot-small"),N9r=o(" \u2014 "),VZ=a("a"),q9r=o("TFBlenderbotSmallModel"),j9r=o(" (BlenderbotSmall model)"),D9r=l(),x3=a("li"),X0e=a("strong"),G9r=o("camembert"),O9r=o(" \u2014 "),XZ=a("a"),V9r=o("TFCamembertModel"),X9r=o(" (CamemBERT model)"),z9r=l(),$3=a("li"),z0e=a("strong"),Q9r=o("clip"),W9r=o(" \u2014 "),zZ=a("a"),U9r=o("TFCLIPModel"),H9r=o(" (CLIP model)"),J9r=l(),k3=a("li"),Q0e=a("strong"),Y9r=o("convbert"),K9r=o(" \u2014 "),QZ=a("a"),Z9r=o("TFConvBertModel"),exr=o(" (ConvBERT model)"),oxr=l(),S3=a("li"),W0e=a("strong"),rxr=o("convnext"),txr=o(" \u2014 "),WZ=a("a"),axr=o("TFConvNextModel"),nxr=o(" (ConvNeXT model)"),sxr=l(),R3=a("li"),U0e=a("strong"),lxr=o("ctrl"),ixr=o(" \u2014 "),UZ=a("a"),dxr=o("TFCTRLModel"),cxr=o(" (CTRL model)"),mxr=l(),P3=a("li"),H0e=a("strong"),fxr=o("data2vec-vision"),gxr=o(" \u2014 "),HZ=a("a"),hxr=o("TFData2VecVisionModel"),uxr=o(" (Data2VecVision model)"),pxr=l(),B3=a("li"),J0e=a("strong"),_xr=o("deberta"),bxr=o(" \u2014 "),JZ=a("a"),vxr=o("TFDebertaModel"),Fxr=o(" (DeBERTa model)"),Txr=l(),I3=a("li"),Y0e=a("strong"),Mxr=o("deberta-v2"),Exr=o(" \u2014 "),YZ=a("a"),Cxr=o("TFDebertaV2Model"),wxr=o(" (DeBERTa-v2 model)"),Axr=l(),N3=a("li"),K0e=a("strong"),Lxr=o("deit"),yxr=o(" \u2014 "),KZ=a("a"),xxr=o("TFDeiTModel"),$xr=o(" (DeiT model)"),kxr=l(),q3=a("li"),Z0e=a("strong"),Sxr=o("distilbert"),Rxr=o(" \u2014 "),ZZ=a("a"),Pxr=o("TFDistilBertModel"),Bxr=o(" (DistilBERT model)"),Ixr=l(),j3=a("li"),ewe=a("strong"),Nxr=o("dpr"),qxr=o(" \u2014 "),eee=a("a"),jxr=o("TFDPRQuestionEncoder"),Dxr=o(" (DPR model)"),Gxr=l(),D3=a("li"),owe=a("strong"),Oxr=o("electra"),Vxr=o(" \u2014 "),oee=a("a"),Xxr=o("TFElectraModel"),zxr=o(" (ELECTRA model)"),Qxr=l(),G3=a("li"),rwe=a("strong"),Wxr=o("flaubert"),Uxr=o(" \u2014 "),ree=a("a"),Hxr=o("TFFlaubertModel"),Jxr=o(" (FlauBERT model)"),Yxr=l(),Fl=a("li"),twe=a("strong"),Kxr=o("funnel"),Zxr=o(" \u2014 "),tee=a("a"),e$r=o("TFFunnelModel"),o$r=o(" or "),aee=a("a"),r$r=o("TFFunnelBaseModel"),t$r=o(" (Funnel Transformer model)"),a$r=l(),O3=a("li"),awe=a("strong"),n$r=o("gpt2"),s$r=o(" \u2014 "),nee=a("a"),l$r=o("TFGPT2Model"),i$r=o(" (OpenAI GPT-2 model)"),d$r=l(),V3=a("li"),nwe=a("strong"),c$r=o("gptj"),m$r=o(" \u2014 "),see=a("a"),f$r=o("TFGPTJModel"),g$r=o(" (GPT-J model)"),h$r=l(),X3=a("li"),swe=a("strong"),u$r=o("hubert"),p$r=o(" \u2014 "),lee=a("a"),_$r=o("TFHubertModel"),b$r=o(" (Hubert model)"),v$r=l(),z3=a("li"),lwe=a("strong"),F$r=o("layoutlm"),T$r=o(" \u2014 "),iee=a("a"),M$r=o("TFLayoutLMModel"),E$r=o(" (LayoutLM model)"),C$r=l(),Q3=a("li"),iwe=a("strong"),w$r=o("layoutlmv3"),A$r=o(" \u2014 "),dee=a("a"),L$r=o("TFLayoutLMv3Model"),y$r=o(" (LayoutLMv3 model)"),x$r=l(),W3=a("li"),dwe=a("strong"),$$r=o("led"),k$r=o(" \u2014 "),cee=a("a"),S$r=o("TFLEDModel"),R$r=o(" (LED model)"),P$r=l(),U3=a("li"),cwe=a("strong"),B$r=o("longformer"),I$r=o(" \u2014 "),mee=a("a"),N$r=o("TFLongformerModel"),q$r=o(" (Longformer model)"),j$r=l(),H3=a("li"),mwe=a("strong"),D$r=o("lxmert"),G$r=o(" \u2014 "),fee=a("a"),O$r=o("TFLxmertModel"),V$r=o(" (LXMERT model)"),X$r=l(),J3=a("li"),fwe=a("strong"),z$r=o("marian"),Q$r=o(" \u2014 "),gee=a("a"),W$r=o("TFMarianModel"),U$r=o(" (Marian model)"),H$r=l(),Y3=a("li"),gwe=a("strong"),J$r=o("mbart"),Y$r=o(" \u2014 "),hee=a("a"),K$r=o("TFMBartModel"),Z$r=o(" (mBART model)"),ekr=l(),K3=a("li"),hwe=a("strong"),okr=o("mobilebert"),rkr=o(" \u2014 "),uee=a("a"),tkr=o("TFMobileBertModel"),akr=o(" (MobileBERT model)"),nkr=l(),Z3=a("li"),uwe=a("strong"),skr=o("mobilevit"),lkr=o(" \u2014 "),pee=a("a"),ikr=o("TFMobileViTModel"),dkr=o(" (MobileViT model)"),ckr=l(),e5=a("li"),pwe=a("strong"),mkr=o("mpnet"),fkr=o(" \u2014 "),_ee=a("a"),gkr=o("TFMPNetModel"),hkr=o(" (MPNet model)"),ukr=l(),o5=a("li"),_we=a("strong"),pkr=o("mt5"),_kr=o(" \u2014 "),bee=a("a"),bkr=o("TFMT5Model"),vkr=o(" (MT5 model)"),Fkr=l(),r5=a("li"),bwe=a("strong"),Tkr=o("openai-gpt"),Mkr=o(" \u2014 "),vee=a("a"),Ekr=o("TFOpenAIGPTModel"),Ckr=o(" (OpenAI GPT model)"),wkr=l(),t5=a("li"),vwe=a("strong"),Akr=o("opt"),Lkr=o(" \u2014 "),Fee=a("a"),ykr=o("TFOPTModel"),xkr=o(" (OPT model)"),$kr=l(),a5=a("li"),Fwe=a("strong"),kkr=o("pegasus"),Skr=o(" \u2014 "),Tee=a("a"),Rkr=o("TFPegasusModel"),Pkr=o(" (Pegasus model)"),Bkr=l(),n5=a("li"),Twe=a("strong"),Ikr=o("regnet"),Nkr=o(" \u2014 "),Mee=a("a"),qkr=o("TFRegNetModel"),jkr=o(" (RegNet model)"),Dkr=l(),s5=a("li"),Mwe=a("strong"),Gkr=o("rembert"),Okr=o(" \u2014 "),Eee=a("a"),Vkr=o("TFRemBertModel"),Xkr=o(" (RemBERT model)"),zkr=l(),l5=a("li"),Ewe=a("strong"),Qkr=o("resnet"),Wkr=o(" \u2014 "),Cee=a("a"),Ukr=o("TFResNetModel"),Hkr=o(" (ResNet model)"),Jkr=l(),i5=a("li"),Cwe=a("strong"),Ykr=o("roberta"),Kkr=o(" \u2014 "),wee=a("a"),Zkr=o("TFRobertaModel"),eSr=o(" (RoBERTa model)"),oSr=l(),d5=a("li"),wwe=a("strong"),rSr=o("roformer"),tSr=o(" \u2014 "),Aee=a("a"),aSr=o("TFRoFormerModel"),nSr=o(" (RoFormer model)"),sSr=l(),c5=a("li"),Awe=a("strong"),lSr=o("segformer"),iSr=o(" \u2014 "),Lee=a("a"),dSr=o("TFSegformerModel"),cSr=o(" (SegFormer model)"),mSr=l(),m5=a("li"),Lwe=a("strong"),fSr=o("speech_to_text"),gSr=o(" \u2014 "),yee=a("a"),hSr=o("TFSpeech2TextModel"),uSr=o(" (Speech2Text model)"),pSr=l(),f5=a("li"),ywe=a("strong"),_Sr=o("swin"),bSr=o(" \u2014 "),xee=a("a"),vSr=o("TFSwinModel"),FSr=o(" (Swin Transformer model)"),TSr=l(),g5=a("li"),xwe=a("strong"),MSr=o("t5"),ESr=o(" \u2014 "),$ee=a("a"),CSr=o("TFT5Model"),wSr=o(" (T5 model)"),ASr=l(),h5=a("li"),$we=a("strong"),LSr=o("tapas"),ySr=o(" \u2014 "),kee=a("a"),xSr=o("TFTapasModel"),$Sr=o(" (TAPAS model)"),kSr=l(),u5=a("li"),kwe=a("strong"),SSr=o("transfo-xl"),RSr=o(" \u2014 "),See=a("a"),PSr=o("TFTransfoXLModel"),BSr=o(" (Transformer-XL model)"),ISr=l(),p5=a("li"),Swe=a("strong"),NSr=o("vit"),qSr=o(" \u2014 "),Ree=a("a"),jSr=o("TFViTModel"),DSr=o(" (ViT model)"),GSr=l(),_5=a("li"),Rwe=a("strong"),OSr=o("vit_mae"),VSr=o(" \u2014 "),Pee=a("a"),XSr=o("TFViTMAEModel"),zSr=o(" (ViTMAE model)"),QSr=l(),b5=a("li"),Pwe=a("strong"),WSr=o("wav2vec2"),USr=o(" \u2014 "),Bee=a("a"),HSr=o("TFWav2Vec2Model"),JSr=o(" (Wav2Vec2 model)"),YSr=l(),v5=a("li"),Bwe=a("strong"),KSr=o("xglm"),ZSr=o(" \u2014 "),Iee=a("a"),eRr=o("TFXGLMModel"),oRr=o(" (XGLM model)"),rRr=l(),F5=a("li"),Iwe=a("strong"),tRr=o("xlm"),aRr=o(" \u2014 "),Nee=a("a"),nRr=o("TFXLMModel"),sRr=o(" (XLM model)"),lRr=l(),T5=a("li"),Nwe=a("strong"),iRr=o("xlm-roberta"),dRr=o(" \u2014 "),qee=a("a"),cRr=o("TFXLMRobertaModel"),mRr=o(" (XLM-RoBERTa model)"),fRr=l(),M5=a("li"),qwe=a("strong"),gRr=o("xlnet"),hRr=o(" \u2014 "),jee=a("a"),uRr=o("TFXLNetModel"),pRr=o(" (XLNet model)"),_Rr=l(),F(E5.$$.fragment),oeo=l(),zc=a("h2"),C5=a("a"),jwe=a("span"),F(Gk.$$.fragment),bRr=l(),Dwe=a("span"),vRr=o("TFAutoModelForPreTraining"),reo=l(),lr=a("div"),F(Ok.$$.fragment),FRr=l(),Qc=a("p"),TRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dee=a("a"),MRr=o("from_pretrained()"),ERr=o(" class method or the "),Gee=a("a"),CRr=o("from_config()"),wRr=o(` class
method.`),ARr=l(),Vk=a("p"),LRr=o("This class cannot be instantiated directly using "),Gwe=a("code"),yRr=o("__init__()"),xRr=o(" (throws an error)."),$Rr=l(),zt=a("div"),F(Xk.$$.fragment),kRr=l(),Owe=a("p"),SRr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RRr=l(),Wc=a("p"),PRr=o(`Note:
Loading a model from its configuration file does `),Vwe=a("strong"),BRr=o("not"),IRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=a("a"),NRr=o("from_pretrained()"),qRr=o(" to load the model weights."),jRr=l(),F(w5.$$.fragment),DRr=l(),Nr=a("div"),F(zk.$$.fragment),GRr=l(),Xwe=a("p"),ORr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VRr=l(),An=a("p"),XRr=o("The model class to instantiate is selected based on the "),zwe=a("code"),zRr=o("model_type"),QRr=o(` property of the config object (either
passed as an argument or loaded from `),Qwe=a("code"),WRr=o("pretrained_model_name_or_path"),URr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wwe=a("code"),HRr=o("pretrained_model_name_or_path"),JRr=o(":"),YRr=l(),se=a("ul"),A5=a("li"),Uwe=a("strong"),KRr=o("albert"),ZRr=o(" \u2014 "),Vee=a("a"),ePr=o("TFAlbertForPreTraining"),oPr=o(" (ALBERT model)"),rPr=l(),L5=a("li"),Hwe=a("strong"),tPr=o("bart"),aPr=o(" \u2014 "),Xee=a("a"),nPr=o("TFBartForConditionalGeneration"),sPr=o(" (BART model)"),lPr=l(),y5=a("li"),Jwe=a("strong"),iPr=o("bert"),dPr=o(" \u2014 "),zee=a("a"),cPr=o("TFBertForPreTraining"),mPr=o(" (BERT model)"),fPr=l(),x5=a("li"),Ywe=a("strong"),gPr=o("camembert"),hPr=o(" \u2014 "),Qee=a("a"),uPr=o("TFCamembertForMaskedLM"),pPr=o(" (CamemBERT model)"),_Pr=l(),$5=a("li"),Kwe=a("strong"),bPr=o("ctrl"),vPr=o(" \u2014 "),Wee=a("a"),FPr=o("TFCTRLLMHeadModel"),TPr=o(" (CTRL model)"),MPr=l(),k5=a("li"),Zwe=a("strong"),EPr=o("distilbert"),CPr=o(" \u2014 "),Uee=a("a"),wPr=o("TFDistilBertForMaskedLM"),APr=o(" (DistilBERT model)"),LPr=l(),S5=a("li"),eAe=a("strong"),yPr=o("electra"),xPr=o(" \u2014 "),Hee=a("a"),$Pr=o("TFElectraForPreTraining"),kPr=o(" (ELECTRA model)"),SPr=l(),R5=a("li"),oAe=a("strong"),RPr=o("flaubert"),PPr=o(" \u2014 "),Jee=a("a"),BPr=o("TFFlaubertWithLMHeadModel"),IPr=o(" (FlauBERT model)"),NPr=l(),P5=a("li"),rAe=a("strong"),qPr=o("funnel"),jPr=o(" \u2014 "),Yee=a("a"),DPr=o("TFFunnelForPreTraining"),GPr=o(" (Funnel Transformer model)"),OPr=l(),B5=a("li"),tAe=a("strong"),VPr=o("gpt2"),XPr=o(" \u2014 "),Kee=a("a"),zPr=o("TFGPT2LMHeadModel"),QPr=o(" (OpenAI GPT-2 model)"),WPr=l(),I5=a("li"),aAe=a("strong"),UPr=o("layoutlm"),HPr=o(" \u2014 "),Zee=a("a"),JPr=o("TFLayoutLMForMaskedLM"),YPr=o(" (LayoutLM model)"),KPr=l(),N5=a("li"),nAe=a("strong"),ZPr=o("lxmert"),eBr=o(" \u2014 "),eoe=a("a"),oBr=o("TFLxmertForPreTraining"),rBr=o(" (LXMERT model)"),tBr=l(),q5=a("li"),sAe=a("strong"),aBr=o("mobilebert"),nBr=o(" \u2014 "),ooe=a("a"),sBr=o("TFMobileBertForPreTraining"),lBr=o(" (MobileBERT model)"),iBr=l(),j5=a("li"),lAe=a("strong"),dBr=o("mpnet"),cBr=o(" \u2014 "),roe=a("a"),mBr=o("TFMPNetForMaskedLM"),fBr=o(" (MPNet model)"),gBr=l(),D5=a("li"),iAe=a("strong"),hBr=o("openai-gpt"),uBr=o(" \u2014 "),toe=a("a"),pBr=o("TFOpenAIGPTLMHeadModel"),_Br=o(" (OpenAI GPT model)"),bBr=l(),G5=a("li"),dAe=a("strong"),vBr=o("roberta"),FBr=o(" \u2014 "),aoe=a("a"),TBr=o("TFRobertaForMaskedLM"),MBr=o(" (RoBERTa model)"),EBr=l(),O5=a("li"),cAe=a("strong"),CBr=o("t5"),wBr=o(" \u2014 "),noe=a("a"),ABr=o("TFT5ForConditionalGeneration"),LBr=o(" (T5 model)"),yBr=l(),V5=a("li"),mAe=a("strong"),xBr=o("tapas"),$Br=o(" \u2014 "),soe=a("a"),kBr=o("TFTapasForMaskedLM"),SBr=o(" (TAPAS model)"),RBr=l(),X5=a("li"),fAe=a("strong"),PBr=o("transfo-xl"),BBr=o(" \u2014 "),loe=a("a"),IBr=o("TFTransfoXLLMHeadModel"),NBr=o(" (Transformer-XL model)"),qBr=l(),z5=a("li"),gAe=a("strong"),jBr=o("vit_mae"),DBr=o(" \u2014 "),ioe=a("a"),GBr=o("TFViTMAEForPreTraining"),OBr=o(" (ViTMAE model)"),VBr=l(),Q5=a("li"),hAe=a("strong"),XBr=o("xlm"),zBr=o(" \u2014 "),doe=a("a"),QBr=o("TFXLMWithLMHeadModel"),WBr=o(" (XLM model)"),UBr=l(),W5=a("li"),uAe=a("strong"),HBr=o("xlm-roberta"),JBr=o(" \u2014 "),coe=a("a"),YBr=o("TFXLMRobertaForMaskedLM"),KBr=o(" (XLM-RoBERTa model)"),ZBr=l(),U5=a("li"),pAe=a("strong"),eIr=o("xlnet"),oIr=o(" \u2014 "),moe=a("a"),rIr=o("TFXLNetLMHeadModel"),tIr=o(" (XLNet model)"),aIr=l(),F(H5.$$.fragment),teo=l(),Uc=a("h2"),J5=a("a"),_Ae=a("span"),F(Qk.$$.fragment),nIr=l(),bAe=a("span"),sIr=o("TFAutoModelForCausalLM"),aeo=l(),ir=a("div"),F(Wk.$$.fragment),lIr=l(),Hc=a("p"),iIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),foe=a("a"),dIr=o("from_pretrained()"),cIr=o(" class method or the "),goe=a("a"),mIr=o("from_config()"),fIr=o(` class
method.`),gIr=l(),Uk=a("p"),hIr=o("This class cannot be instantiated directly using "),vAe=a("code"),uIr=o("__init__()"),pIr=o(" (throws an error)."),_Ir=l(),Qt=a("div"),F(Hk.$$.fragment),bIr=l(),FAe=a("p"),vIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FIr=l(),Jc=a("p"),TIr=o(`Note:
Loading a model from its configuration file does `),TAe=a("strong"),MIr=o("not"),EIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),CIr=o("from_pretrained()"),wIr=o(" to load the model weights."),AIr=l(),F(Y5.$$.fragment),LIr=l(),qr=a("div"),F(Jk.$$.fragment),yIr=l(),MAe=a("p"),xIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Ir=l(),Ln=a("p"),kIr=o("The model class to instantiate is selected based on the "),EAe=a("code"),SIr=o("model_type"),RIr=o(` property of the config object (either
passed as an argument or loaded from `),CAe=a("code"),PIr=o("pretrained_model_name_or_path"),BIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wAe=a("code"),IIr=o("pretrained_model_name_or_path"),NIr=o(":"),qIr=l(),Me=a("ul"),K5=a("li"),AAe=a("strong"),jIr=o("bert"),DIr=o(" \u2014 "),uoe=a("a"),GIr=o("TFBertLMHeadModel"),OIr=o(" (BERT model)"),VIr=l(),Z5=a("li"),LAe=a("strong"),XIr=o("camembert"),zIr=o(" \u2014 "),poe=a("a"),QIr=o("TFCamembertForCausalLM"),WIr=o(" (CamemBERT model)"),UIr=l(),e0=a("li"),yAe=a("strong"),HIr=o("ctrl"),JIr=o(" \u2014 "),_oe=a("a"),YIr=o("TFCTRLLMHeadModel"),KIr=o(" (CTRL model)"),ZIr=l(),o0=a("li"),xAe=a("strong"),eNr=o("gpt2"),oNr=o(" \u2014 "),boe=a("a"),rNr=o("TFGPT2LMHeadModel"),tNr=o(" (OpenAI GPT-2 model)"),aNr=l(),r0=a("li"),$Ae=a("strong"),nNr=o("gptj"),sNr=o(" \u2014 "),voe=a("a"),lNr=o("TFGPTJForCausalLM"),iNr=o(" (GPT-J model)"),dNr=l(),t0=a("li"),kAe=a("strong"),cNr=o("openai-gpt"),mNr=o(" \u2014 "),Foe=a("a"),fNr=o("TFOpenAIGPTLMHeadModel"),gNr=o(" (OpenAI GPT model)"),hNr=l(),a0=a("li"),SAe=a("strong"),uNr=o("opt"),pNr=o(" \u2014 "),Toe=a("a"),_Nr=o("TFOPTForCausalLM"),bNr=o(" (OPT model)"),vNr=l(),n0=a("li"),RAe=a("strong"),FNr=o("rembert"),TNr=o(" \u2014 "),Moe=a("a"),MNr=o("TFRemBertForCausalLM"),ENr=o(" (RemBERT model)"),CNr=l(),s0=a("li"),PAe=a("strong"),wNr=o("roberta"),ANr=o(" \u2014 "),Eoe=a("a"),LNr=o("TFRobertaForCausalLM"),yNr=o(" (RoBERTa model)"),xNr=l(),l0=a("li"),BAe=a("strong"),$Nr=o("roformer"),kNr=o(" \u2014 "),Coe=a("a"),SNr=o("TFRoFormerForCausalLM"),RNr=o(" (RoFormer model)"),PNr=l(),i0=a("li"),IAe=a("strong"),BNr=o("transfo-xl"),INr=o(" \u2014 "),woe=a("a"),NNr=o("TFTransfoXLLMHeadModel"),qNr=o(" (Transformer-XL model)"),jNr=l(),d0=a("li"),NAe=a("strong"),DNr=o("xglm"),GNr=o(" \u2014 "),Aoe=a("a"),ONr=o("TFXGLMForCausalLM"),VNr=o(" (XGLM model)"),XNr=l(),c0=a("li"),qAe=a("strong"),zNr=o("xlm"),QNr=o(" \u2014 "),Loe=a("a"),WNr=o("TFXLMWithLMHeadModel"),UNr=o(" (XLM model)"),HNr=l(),m0=a("li"),jAe=a("strong"),JNr=o("xlnet"),YNr=o(" \u2014 "),yoe=a("a"),KNr=o("TFXLNetLMHeadModel"),ZNr=o(" (XLNet model)"),eqr=l(),F(f0.$$.fragment),neo=l(),Yc=a("h2"),g0=a("a"),DAe=a("span"),F(Yk.$$.fragment),oqr=l(),GAe=a("span"),rqr=o("TFAutoModelForImageClassification"),seo=l(),dr=a("div"),F(Kk.$$.fragment),tqr=l(),Kc=a("p"),aqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xoe=a("a"),nqr=o("from_pretrained()"),sqr=o(" class method or the "),$oe=a("a"),lqr=o("from_config()"),iqr=o(` class
method.`),dqr=l(),Zk=a("p"),cqr=o("This class cannot be instantiated directly using "),OAe=a("code"),mqr=o("__init__()"),fqr=o(" (throws an error)."),gqr=l(),Wt=a("div"),F(eS.$$.fragment),hqr=l(),VAe=a("p"),uqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pqr=l(),Zc=a("p"),_qr=o(`Note:
Loading a model from its configuration file does `),XAe=a("strong"),bqr=o("not"),vqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" to load the model weights."),Mqr=l(),F(h0.$$.fragment),Eqr=l(),jr=a("div"),F(oS.$$.fragment),Cqr=l(),zAe=a("p"),wqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Aqr=l(),yn=a("p"),Lqr=o("The model class to instantiate is selected based on the "),QAe=a("code"),yqr=o("model_type"),xqr=o(` property of the config object (either
passed as an argument or loaded from `),WAe=a("code"),$qr=o("pretrained_model_name_or_path"),kqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UAe=a("code"),Sqr=o("pretrained_model_name_or_path"),Rqr=o(":"),Pqr=l(),Be=a("ul"),u0=a("li"),HAe=a("strong"),Bqr=o("convnext"),Iqr=o(" \u2014 "),Soe=a("a"),Nqr=o("TFConvNextForImageClassification"),qqr=o(" (ConvNeXT model)"),jqr=l(),p0=a("li"),JAe=a("strong"),Dqr=o("data2vec-vision"),Gqr=o(" \u2014 "),Roe=a("a"),Oqr=o("TFData2VecVisionForImageClassification"),Vqr=o(" (Data2VecVision model)"),Xqr=l(),Tl=a("li"),YAe=a("strong"),zqr=o("deit"),Qqr=o(" \u2014 "),Poe=a("a"),Wqr=o("TFDeiTForImageClassification"),Uqr=o(" or "),Boe=a("a"),Hqr=o("TFDeiTForImageClassificationWithTeacher"),Jqr=o(" (DeiT model)"),Yqr=l(),_0=a("li"),KAe=a("strong"),Kqr=o("mobilevit"),Zqr=o(" \u2014 "),Ioe=a("a"),ejr=o("TFMobileViTForImageClassification"),ojr=o(" (MobileViT model)"),rjr=l(),b0=a("li"),ZAe=a("strong"),tjr=o("regnet"),ajr=o(" \u2014 "),Noe=a("a"),njr=o("TFRegNetForImageClassification"),sjr=o(" (RegNet model)"),ljr=l(),v0=a("li"),e6e=a("strong"),ijr=o("resnet"),djr=o(" \u2014 "),qoe=a("a"),cjr=o("TFResNetForImageClassification"),mjr=o(" (ResNet model)"),fjr=l(),F0=a("li"),o6e=a("strong"),gjr=o("segformer"),hjr=o(" \u2014 "),joe=a("a"),ujr=o("TFSegformerForImageClassification"),pjr=o(" (SegFormer model)"),_jr=l(),T0=a("li"),r6e=a("strong"),bjr=o("swin"),vjr=o(" \u2014 "),Doe=a("a"),Fjr=o("TFSwinForImageClassification"),Tjr=o(" (Swin Transformer model)"),Mjr=l(),M0=a("li"),t6e=a("strong"),Ejr=o("vit"),Cjr=o(" \u2014 "),Goe=a("a"),wjr=o("TFViTForImageClassification"),Ajr=o(" (ViT model)"),Ljr=l(),F(E0.$$.fragment),leo=l(),em=a("h2"),C0=a("a"),a6e=a("span"),F(rS.$$.fragment),yjr=l(),n6e=a("span"),xjr=o("TFAutoModelForSemanticSegmentation"),ieo=l(),cr=a("div"),F(tS.$$.fragment),$jr=l(),om=a("p"),kjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ooe=a("a"),Sjr=o("from_pretrained()"),Rjr=o(" class method or the "),Voe=a("a"),Pjr=o("from_config()"),Bjr=o(` class
method.`),Ijr=l(),aS=a("p"),Njr=o("This class cannot be instantiated directly using "),s6e=a("code"),qjr=o("__init__()"),jjr=o(" (throws an error)."),Djr=l(),Ut=a("div"),F(nS.$$.fragment),Gjr=l(),l6e=a("p"),Ojr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Vjr=l(),rm=a("p"),Xjr=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),zjr=o("not"),Qjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xoe=a("a"),Wjr=o("from_pretrained()"),Ujr=o(" to load the model weights."),Hjr=l(),F(w0.$$.fragment),Jjr=l(),Dr=a("div"),F(sS.$$.fragment),Yjr=l(),d6e=a("p"),Kjr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Zjr=l(),xn=a("p"),eDr=o("The model class to instantiate is selected based on the "),c6e=a("code"),oDr=o("model_type"),rDr=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),tDr=o("pretrained_model_name_or_path"),aDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=a("code"),nDr=o("pretrained_model_name_or_path"),sDr=o(":"),lDr=l(),tm=a("ul"),A0=a("li"),g6e=a("strong"),iDr=o("data2vec-vision"),dDr=o(" \u2014 "),zoe=a("a"),cDr=o("TFData2VecVisionForSemanticSegmentation"),mDr=o(" (Data2VecVision model)"),fDr=l(),L0=a("li"),h6e=a("strong"),gDr=o("mobilevit"),hDr=o(" \u2014 "),Qoe=a("a"),uDr=o("TFMobileViTForSemanticSegmentation"),pDr=o(" (MobileViT model)"),_Dr=l(),y0=a("li"),u6e=a("strong"),bDr=o("segformer"),vDr=o(" \u2014 "),Woe=a("a"),FDr=o("TFSegformerForSemanticSegmentation"),TDr=o(" (SegFormer model)"),MDr=l(),F(x0.$$.fragment),deo=l(),am=a("h2"),$0=a("a"),p6e=a("span"),F(lS.$$.fragment),EDr=l(),_6e=a("span"),CDr=o("TFAutoModelForMaskedLM"),ceo=l(),mr=a("div"),F(iS.$$.fragment),wDr=l(),nm=a("p"),ADr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Uoe=a("a"),LDr=o("from_pretrained()"),yDr=o(" class method or the "),Hoe=a("a"),xDr=o("from_config()"),$Dr=o(` class
method.`),kDr=l(),dS=a("p"),SDr=o("This class cannot be instantiated directly using "),b6e=a("code"),RDr=o("__init__()"),PDr=o(" (throws an error)."),BDr=l(),Ht=a("div"),F(cS.$$.fragment),IDr=l(),v6e=a("p"),NDr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qDr=l(),sm=a("p"),jDr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),DDr=o("not"),GDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=a("a"),ODr=o("from_pretrained()"),VDr=o(" to load the model weights."),XDr=l(),F(k0.$$.fragment),zDr=l(),Gr=a("div"),F(mS.$$.fragment),QDr=l(),T6e=a("p"),WDr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UDr=l(),$n=a("p"),HDr=o("The model class to instantiate is selected based on the "),M6e=a("code"),JDr=o("model_type"),YDr=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),KDr=o("pretrained_model_name_or_path"),ZDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),eGr=o("pretrained_model_name_or_path"),oGr=o(":"),rGr=l(),fe=a("ul"),S0=a("li"),w6e=a("strong"),tGr=o("albert"),aGr=o(" \u2014 "),Yoe=a("a"),nGr=o("TFAlbertForMaskedLM"),sGr=o(" (ALBERT model)"),lGr=l(),R0=a("li"),A6e=a("strong"),iGr=o("bert"),dGr=o(" \u2014 "),Koe=a("a"),cGr=o("TFBertForMaskedLM"),mGr=o(" (BERT model)"),fGr=l(),P0=a("li"),L6e=a("strong"),gGr=o("camembert"),hGr=o(" \u2014 "),Zoe=a("a"),uGr=o("TFCamembertForMaskedLM"),pGr=o(" (CamemBERT model)"),_Gr=l(),B0=a("li"),y6e=a("strong"),bGr=o("convbert"),vGr=o(" \u2014 "),ere=a("a"),FGr=o("TFConvBertForMaskedLM"),TGr=o(" (ConvBERT model)"),MGr=l(),I0=a("li"),x6e=a("strong"),EGr=o("deberta"),CGr=o(" \u2014 "),ore=a("a"),wGr=o("TFDebertaForMaskedLM"),AGr=o(" (DeBERTa model)"),LGr=l(),N0=a("li"),$6e=a("strong"),yGr=o("deberta-v2"),xGr=o(" \u2014 "),rre=a("a"),$Gr=o("TFDebertaV2ForMaskedLM"),kGr=o(" (DeBERTa-v2 model)"),SGr=l(),q0=a("li"),k6e=a("strong"),RGr=o("distilbert"),PGr=o(" \u2014 "),tre=a("a"),BGr=o("TFDistilBertForMaskedLM"),IGr=o(" (DistilBERT model)"),NGr=l(),j0=a("li"),S6e=a("strong"),qGr=o("electra"),jGr=o(" \u2014 "),are=a("a"),DGr=o("TFElectraForMaskedLM"),GGr=o(" (ELECTRA model)"),OGr=l(),D0=a("li"),R6e=a("strong"),VGr=o("flaubert"),XGr=o(" \u2014 "),nre=a("a"),zGr=o("TFFlaubertWithLMHeadModel"),QGr=o(" (FlauBERT model)"),WGr=l(),G0=a("li"),P6e=a("strong"),UGr=o("funnel"),HGr=o(" \u2014 "),sre=a("a"),JGr=o("TFFunnelForMaskedLM"),YGr=o(" (Funnel Transformer model)"),KGr=l(),O0=a("li"),B6e=a("strong"),ZGr=o("layoutlm"),eOr=o(" \u2014 "),lre=a("a"),oOr=o("TFLayoutLMForMaskedLM"),rOr=o(" (LayoutLM model)"),tOr=l(),V0=a("li"),I6e=a("strong"),aOr=o("longformer"),nOr=o(" \u2014 "),ire=a("a"),sOr=o("TFLongformerForMaskedLM"),lOr=o(" (Longformer model)"),iOr=l(),X0=a("li"),N6e=a("strong"),dOr=o("mobilebert"),cOr=o(" \u2014 "),dre=a("a"),mOr=o("TFMobileBertForMaskedLM"),fOr=o(" (MobileBERT model)"),gOr=l(),z0=a("li"),q6e=a("strong"),hOr=o("mpnet"),uOr=o(" \u2014 "),cre=a("a"),pOr=o("TFMPNetForMaskedLM"),_Or=o(" (MPNet model)"),bOr=l(),Q0=a("li"),j6e=a("strong"),vOr=o("rembert"),FOr=o(" \u2014 "),mre=a("a"),TOr=o("TFRemBertForMaskedLM"),MOr=o(" (RemBERT model)"),EOr=l(),W0=a("li"),D6e=a("strong"),COr=o("roberta"),wOr=o(" \u2014 "),fre=a("a"),AOr=o("TFRobertaForMaskedLM"),LOr=o(" (RoBERTa model)"),yOr=l(),U0=a("li"),G6e=a("strong"),xOr=o("roformer"),$Or=o(" \u2014 "),gre=a("a"),kOr=o("TFRoFormerForMaskedLM"),SOr=o(" (RoFormer model)"),ROr=l(),H0=a("li"),O6e=a("strong"),POr=o("tapas"),BOr=o(" \u2014 "),hre=a("a"),IOr=o("TFTapasForMaskedLM"),NOr=o(" (TAPAS model)"),qOr=l(),J0=a("li"),V6e=a("strong"),jOr=o("xlm"),DOr=o(" \u2014 "),ure=a("a"),GOr=o("TFXLMWithLMHeadModel"),OOr=o(" (XLM model)"),VOr=l(),Y0=a("li"),X6e=a("strong"),XOr=o("xlm-roberta"),zOr=o(" \u2014 "),pre=a("a"),QOr=o("TFXLMRobertaForMaskedLM"),WOr=o(" (XLM-RoBERTa model)"),UOr=l(),F(K0.$$.fragment),meo=l(),lm=a("h2"),Z0=a("a"),z6e=a("span"),F(fS.$$.fragment),HOr=l(),Q6e=a("span"),JOr=o("TFAutoModelForSeq2SeqLM"),feo=l(),fr=a("div"),F(gS.$$.fragment),YOr=l(),im=a("p"),KOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_re=a("a"),ZOr=o("from_pretrained()"),eVr=o(" class method or the "),bre=a("a"),oVr=o("from_config()"),rVr=o(` class
method.`),tVr=l(),hS=a("p"),aVr=o("This class cannot be instantiated directly using "),W6e=a("code"),nVr=o("__init__()"),sVr=o(" (throws an error)."),lVr=l(),Jt=a("div"),F(uS.$$.fragment),iVr=l(),U6e=a("p"),dVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cVr=l(),dm=a("p"),mVr=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),fVr=o("not"),gVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),hVr=o("from_pretrained()"),uVr=o(" to load the model weights."),pVr=l(),F(ew.$$.fragment),_Vr=l(),Or=a("div"),F(pS.$$.fragment),bVr=l(),J6e=a("p"),vVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FVr=l(),kn=a("p"),TVr=o("The model class to instantiate is selected based on the "),Y6e=a("code"),MVr=o("model_type"),EVr=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),CVr=o("pretrained_model_name_or_path"),wVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),AVr=o("pretrained_model_name_or_path"),LVr=o(":"),yVr=l(),ye=a("ul"),ow=a("li"),e7e=a("strong"),xVr=o("bart"),$Vr=o(" \u2014 "),Fre=a("a"),kVr=o("TFBartForConditionalGeneration"),SVr=o(" (BART model)"),RVr=l(),rw=a("li"),o7e=a("strong"),PVr=o("blenderbot"),BVr=o(" \u2014 "),Tre=a("a"),IVr=o("TFBlenderbotForConditionalGeneration"),NVr=o(" (Blenderbot model)"),qVr=l(),tw=a("li"),r7e=a("strong"),jVr=o("blenderbot-small"),DVr=o(" \u2014 "),Mre=a("a"),GVr=o("TFBlenderbotSmallForConditionalGeneration"),OVr=o(" (BlenderbotSmall model)"),VVr=l(),aw=a("li"),t7e=a("strong"),XVr=o("encoder-decoder"),zVr=o(" \u2014 "),Ere=a("a"),QVr=o("TFEncoderDecoderModel"),WVr=o(" (Encoder decoder model)"),UVr=l(),nw=a("li"),a7e=a("strong"),HVr=o("led"),JVr=o(" \u2014 "),Cre=a("a"),YVr=o("TFLEDForConditionalGeneration"),KVr=o(" (LED model)"),ZVr=l(),sw=a("li"),n7e=a("strong"),eXr=o("marian"),oXr=o(" \u2014 "),wre=a("a"),rXr=o("TFMarianMTModel"),tXr=o(" (Marian model)"),aXr=l(),lw=a("li"),s7e=a("strong"),nXr=o("mbart"),sXr=o(" \u2014 "),Are=a("a"),lXr=o("TFMBartForConditionalGeneration"),iXr=o(" (mBART model)"),dXr=l(),iw=a("li"),l7e=a("strong"),cXr=o("mt5"),mXr=o(" \u2014 "),Lre=a("a"),fXr=o("TFMT5ForConditionalGeneration"),gXr=o(" (MT5 model)"),hXr=l(),dw=a("li"),i7e=a("strong"),uXr=o("pegasus"),pXr=o(" \u2014 "),yre=a("a"),_Xr=o("TFPegasusForConditionalGeneration"),bXr=o(" (Pegasus model)"),vXr=l(),cw=a("li"),d7e=a("strong"),FXr=o("t5"),TXr=o(" \u2014 "),xre=a("a"),MXr=o("TFT5ForConditionalGeneration"),EXr=o(" (T5 model)"),CXr=l(),F(mw.$$.fragment),geo=l(),cm=a("h2"),fw=a("a"),c7e=a("span"),F(_S.$$.fragment),wXr=l(),m7e=a("span"),AXr=o("TFAutoModelForSequenceClassification"),heo=l(),gr=a("div"),F(bS.$$.fragment),LXr=l(),mm=a("p"),yXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$re=a("a"),xXr=o("from_pretrained()"),$Xr=o(" class method or the "),kre=a("a"),kXr=o("from_config()"),SXr=o(` class
method.`),RXr=l(),vS=a("p"),PXr=o("This class cannot be instantiated directly using "),f7e=a("code"),BXr=o("__init__()"),IXr=o(" (throws an error)."),NXr=l(),Yt=a("div"),F(FS.$$.fragment),qXr=l(),g7e=a("p"),jXr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DXr=l(),fm=a("p"),GXr=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),OXr=o("not"),VXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),XXr=o("from_pretrained()"),zXr=o(" to load the model weights."),QXr=l(),F(gw.$$.fragment),WXr=l(),Vr=a("div"),F(TS.$$.fragment),UXr=l(),u7e=a("p"),HXr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JXr=l(),Sn=a("p"),YXr=o("The model class to instantiate is selected based on the "),p7e=a("code"),KXr=o("model_type"),ZXr=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),ezr=o("pretrained_model_name_or_path"),ozr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),rzr=o("pretrained_model_name_or_path"),tzr=o(":"),azr=l(),re=a("ul"),hw=a("li"),v7e=a("strong"),nzr=o("albert"),szr=o(" \u2014 "),Rre=a("a"),lzr=o("TFAlbertForSequenceClassification"),izr=o(" (ALBERT model)"),dzr=l(),uw=a("li"),F7e=a("strong"),czr=o("bert"),mzr=o(" \u2014 "),Pre=a("a"),fzr=o("TFBertForSequenceClassification"),gzr=o(" (BERT model)"),hzr=l(),pw=a("li"),T7e=a("strong"),uzr=o("camembert"),pzr=o(" \u2014 "),Bre=a("a"),_zr=o("TFCamembertForSequenceClassification"),bzr=o(" (CamemBERT model)"),vzr=l(),_w=a("li"),M7e=a("strong"),Fzr=o("convbert"),Tzr=o(" \u2014 "),Ire=a("a"),Mzr=o("TFConvBertForSequenceClassification"),Ezr=o(" (ConvBERT model)"),Czr=l(),bw=a("li"),E7e=a("strong"),wzr=o("ctrl"),Azr=o(" \u2014 "),Nre=a("a"),Lzr=o("TFCTRLForSequenceClassification"),yzr=o(" (CTRL model)"),xzr=l(),vw=a("li"),C7e=a("strong"),$zr=o("deberta"),kzr=o(" \u2014 "),qre=a("a"),Szr=o("TFDebertaForSequenceClassification"),Rzr=o(" (DeBERTa model)"),Pzr=l(),Fw=a("li"),w7e=a("strong"),Bzr=o("deberta-v2"),Izr=o(" \u2014 "),jre=a("a"),Nzr=o("TFDebertaV2ForSequenceClassification"),qzr=o(" (DeBERTa-v2 model)"),jzr=l(),Tw=a("li"),A7e=a("strong"),Dzr=o("distilbert"),Gzr=o(" \u2014 "),Dre=a("a"),Ozr=o("TFDistilBertForSequenceClassification"),Vzr=o(" (DistilBERT model)"),Xzr=l(),Mw=a("li"),L7e=a("strong"),zzr=o("electra"),Qzr=o(" \u2014 "),Gre=a("a"),Wzr=o("TFElectraForSequenceClassification"),Uzr=o(" (ELECTRA model)"),Hzr=l(),Ew=a("li"),y7e=a("strong"),Jzr=o("flaubert"),Yzr=o(" \u2014 "),Ore=a("a"),Kzr=o("TFFlaubertForSequenceClassification"),Zzr=o(" (FlauBERT model)"),eQr=l(),Cw=a("li"),x7e=a("strong"),oQr=o("funnel"),rQr=o(" \u2014 "),Vre=a("a"),tQr=o("TFFunnelForSequenceClassification"),aQr=o(" (Funnel Transformer model)"),nQr=l(),ww=a("li"),$7e=a("strong"),sQr=o("gpt2"),lQr=o(" \u2014 "),Xre=a("a"),iQr=o("TFGPT2ForSequenceClassification"),dQr=o(" (OpenAI GPT-2 model)"),cQr=l(),Aw=a("li"),k7e=a("strong"),mQr=o("gptj"),fQr=o(" \u2014 "),zre=a("a"),gQr=o("TFGPTJForSequenceClassification"),hQr=o(" (GPT-J model)"),uQr=l(),Lw=a("li"),S7e=a("strong"),pQr=o("layoutlm"),_Qr=o(" \u2014 "),Qre=a("a"),bQr=o("TFLayoutLMForSequenceClassification"),vQr=o(" (LayoutLM model)"),FQr=l(),yw=a("li"),R7e=a("strong"),TQr=o("layoutlmv3"),MQr=o(" \u2014 "),Wre=a("a"),EQr=o("TFLayoutLMv3ForSequenceClassification"),CQr=o(" (LayoutLMv3 model)"),wQr=l(),xw=a("li"),P7e=a("strong"),AQr=o("longformer"),LQr=o(" \u2014 "),Ure=a("a"),yQr=o("TFLongformerForSequenceClassification"),xQr=o(" (Longformer model)"),$Qr=l(),$w=a("li"),B7e=a("strong"),kQr=o("mobilebert"),SQr=o(" \u2014 "),Hre=a("a"),RQr=o("TFMobileBertForSequenceClassification"),PQr=o(" (MobileBERT model)"),BQr=l(),kw=a("li"),I7e=a("strong"),IQr=o("mpnet"),NQr=o(" \u2014 "),Jre=a("a"),qQr=o("TFMPNetForSequenceClassification"),jQr=o(" (MPNet model)"),DQr=l(),Sw=a("li"),N7e=a("strong"),GQr=o("openai-gpt"),OQr=o(" \u2014 "),Yre=a("a"),VQr=o("TFOpenAIGPTForSequenceClassification"),XQr=o(" (OpenAI GPT model)"),zQr=l(),Rw=a("li"),q7e=a("strong"),QQr=o("rembert"),WQr=o(" \u2014 "),Kre=a("a"),UQr=o("TFRemBertForSequenceClassification"),HQr=o(" (RemBERT model)"),JQr=l(),Pw=a("li"),j7e=a("strong"),YQr=o("roberta"),KQr=o(" \u2014 "),Zre=a("a"),ZQr=o("TFRobertaForSequenceClassification"),eWr=o(" (RoBERTa model)"),oWr=l(),Bw=a("li"),D7e=a("strong"),rWr=o("roformer"),tWr=o(" \u2014 "),ete=a("a"),aWr=o("TFRoFormerForSequenceClassification"),nWr=o(" (RoFormer model)"),sWr=l(),Iw=a("li"),G7e=a("strong"),lWr=o("tapas"),iWr=o(" \u2014 "),ote=a("a"),dWr=o("TFTapasForSequenceClassification"),cWr=o(" (TAPAS model)"),mWr=l(),Nw=a("li"),O7e=a("strong"),fWr=o("transfo-xl"),gWr=o(" \u2014 "),rte=a("a"),hWr=o("TFTransfoXLForSequenceClassification"),uWr=o(" (Transformer-XL model)"),pWr=l(),qw=a("li"),V7e=a("strong"),_Wr=o("xlm"),bWr=o(" \u2014 "),tte=a("a"),vWr=o("TFXLMForSequenceClassification"),FWr=o(" (XLM model)"),TWr=l(),jw=a("li"),X7e=a("strong"),MWr=o("xlm-roberta"),EWr=o(" \u2014 "),ate=a("a"),CWr=o("TFXLMRobertaForSequenceClassification"),wWr=o(" (XLM-RoBERTa model)"),AWr=l(),Dw=a("li"),z7e=a("strong"),LWr=o("xlnet"),yWr=o(" \u2014 "),nte=a("a"),xWr=o("TFXLNetForSequenceClassification"),$Wr=o(" (XLNet model)"),kWr=l(),F(Gw.$$.fragment),ueo=l(),gm=a("h2"),Ow=a("a"),Q7e=a("span"),F(MS.$$.fragment),SWr=l(),W7e=a("span"),RWr=o("TFAutoModelForMultipleChoice"),peo=l(),hr=a("div"),F(ES.$$.fragment),PWr=l(),hm=a("p"),BWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ste=a("a"),IWr=o("from_pretrained()"),NWr=o(" class method or the "),lte=a("a"),qWr=o("from_config()"),jWr=o(` class
method.`),DWr=l(),CS=a("p"),GWr=o("This class cannot be instantiated directly using "),U7e=a("code"),OWr=o("__init__()"),VWr=o(" (throws an error)."),XWr=l(),Kt=a("div"),F(wS.$$.fragment),zWr=l(),H7e=a("p"),QWr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WWr=l(),um=a("p"),UWr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),HWr=o("not"),JWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),YWr=o("from_pretrained()"),KWr=o(" to load the model weights."),ZWr=l(),F(Vw.$$.fragment),eUr=l(),Xr=a("div"),F(AS.$$.fragment),oUr=l(),Y7e=a("p"),rUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tUr=l(),Rn=a("p"),aUr=o("The model class to instantiate is selected based on the "),K7e=a("code"),nUr=o("model_type"),sUr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),lUr=o("pretrained_model_name_or_path"),iUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eLe=a("code"),dUr=o("pretrained_model_name_or_path"),cUr=o(":"),mUr=l(),ve=a("ul"),Xw=a("li"),oLe=a("strong"),fUr=o("albert"),gUr=o(" \u2014 "),dte=a("a"),hUr=o("TFAlbertForMultipleChoice"),uUr=o(" (ALBERT model)"),pUr=l(),zw=a("li"),rLe=a("strong"),_Ur=o("bert"),bUr=o(" \u2014 "),cte=a("a"),vUr=o("TFBertForMultipleChoice"),FUr=o(" (BERT model)"),TUr=l(),Qw=a("li"),tLe=a("strong"),MUr=o("camembert"),EUr=o(" \u2014 "),mte=a("a"),CUr=o("TFCamembertForMultipleChoice"),wUr=o(" (CamemBERT model)"),AUr=l(),Ww=a("li"),aLe=a("strong"),LUr=o("convbert"),yUr=o(" \u2014 "),fte=a("a"),xUr=o("TFConvBertForMultipleChoice"),$Ur=o(" (ConvBERT model)"),kUr=l(),Uw=a("li"),nLe=a("strong"),SUr=o("distilbert"),RUr=o(" \u2014 "),gte=a("a"),PUr=o("TFDistilBertForMultipleChoice"),BUr=o(" (DistilBERT model)"),IUr=l(),Hw=a("li"),sLe=a("strong"),NUr=o("electra"),qUr=o(" \u2014 "),hte=a("a"),jUr=o("TFElectraForMultipleChoice"),DUr=o(" (ELECTRA model)"),GUr=l(),Jw=a("li"),lLe=a("strong"),OUr=o("flaubert"),VUr=o(" \u2014 "),ute=a("a"),XUr=o("TFFlaubertForMultipleChoice"),zUr=o(" (FlauBERT model)"),QUr=l(),Yw=a("li"),iLe=a("strong"),WUr=o("funnel"),UUr=o(" \u2014 "),pte=a("a"),HUr=o("TFFunnelForMultipleChoice"),JUr=o(" (Funnel Transformer model)"),YUr=l(),Kw=a("li"),dLe=a("strong"),KUr=o("longformer"),ZUr=o(" \u2014 "),_te=a("a"),eHr=o("TFLongformerForMultipleChoice"),oHr=o(" (Longformer model)"),rHr=l(),Zw=a("li"),cLe=a("strong"),tHr=o("mobilebert"),aHr=o(" \u2014 "),bte=a("a"),nHr=o("TFMobileBertForMultipleChoice"),sHr=o(" (MobileBERT model)"),lHr=l(),eA=a("li"),mLe=a("strong"),iHr=o("mpnet"),dHr=o(" \u2014 "),vte=a("a"),cHr=o("TFMPNetForMultipleChoice"),mHr=o(" (MPNet model)"),fHr=l(),oA=a("li"),fLe=a("strong"),gHr=o("rembert"),hHr=o(" \u2014 "),Fte=a("a"),uHr=o("TFRemBertForMultipleChoice"),pHr=o(" (RemBERT model)"),_Hr=l(),rA=a("li"),gLe=a("strong"),bHr=o("roberta"),vHr=o(" \u2014 "),Tte=a("a"),FHr=o("TFRobertaForMultipleChoice"),THr=o(" (RoBERTa model)"),MHr=l(),tA=a("li"),hLe=a("strong"),EHr=o("roformer"),CHr=o(" \u2014 "),Mte=a("a"),wHr=o("TFRoFormerForMultipleChoice"),AHr=o(" (RoFormer model)"),LHr=l(),aA=a("li"),uLe=a("strong"),yHr=o("xlm"),xHr=o(" \u2014 "),Ete=a("a"),$Hr=o("TFXLMForMultipleChoice"),kHr=o(" (XLM model)"),SHr=l(),nA=a("li"),pLe=a("strong"),RHr=o("xlm-roberta"),PHr=o(" \u2014 "),Cte=a("a"),BHr=o("TFXLMRobertaForMultipleChoice"),IHr=o(" (XLM-RoBERTa model)"),NHr=l(),sA=a("li"),_Le=a("strong"),qHr=o("xlnet"),jHr=o(" \u2014 "),wte=a("a"),DHr=o("TFXLNetForMultipleChoice"),GHr=o(" (XLNet model)"),OHr=l(),F(lA.$$.fragment),_eo=l(),pm=a("h2"),iA=a("a"),bLe=a("span"),F(LS.$$.fragment),VHr=l(),vLe=a("span"),XHr=o("TFAutoModelForNextSentencePrediction"),beo=l(),ur=a("div"),F(yS.$$.fragment),zHr=l(),_m=a("p"),QHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ate=a("a"),WHr=o("from_pretrained()"),UHr=o(" class method or the "),Lte=a("a"),HHr=o("from_config()"),JHr=o(` class
method.`),YHr=l(),xS=a("p"),KHr=o("This class cannot be instantiated directly using "),FLe=a("code"),ZHr=o("__init__()"),eJr=o(" (throws an error)."),oJr=l(),Zt=a("div"),F($S.$$.fragment),rJr=l(),TLe=a("p"),tJr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aJr=l(),bm=a("p"),nJr=o(`Note:
Loading a model from its configuration file does `),MLe=a("strong"),sJr=o("not"),lJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yte=a("a"),iJr=o("from_pretrained()"),dJr=o(" to load the model weights."),cJr=l(),F(dA.$$.fragment),mJr=l(),zr=a("div"),F(kS.$$.fragment),fJr=l(),ELe=a("p"),gJr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hJr=l(),Pn=a("p"),uJr=o("The model class to instantiate is selected based on the "),CLe=a("code"),pJr=o("model_type"),_Jr=o(` property of the config object (either
passed as an argument or loaded from `),wLe=a("code"),bJr=o("pretrained_model_name_or_path"),vJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ALe=a("code"),FJr=o("pretrained_model_name_or_path"),TJr=o(":"),MJr=l(),SS=a("ul"),cA=a("li"),LLe=a("strong"),EJr=o("bert"),CJr=o(" \u2014 "),xte=a("a"),wJr=o("TFBertForNextSentencePrediction"),AJr=o(" (BERT model)"),LJr=l(),mA=a("li"),yLe=a("strong"),yJr=o("mobilebert"),xJr=o(" \u2014 "),$te=a("a"),$Jr=o("TFMobileBertForNextSentencePrediction"),kJr=o(" (MobileBERT model)"),SJr=l(),F(fA.$$.fragment),veo=l(),vm=a("h2"),gA=a("a"),xLe=a("span"),F(RS.$$.fragment),RJr=l(),$Le=a("span"),PJr=o("TFAutoModelForTableQuestionAnswering"),Feo=l(),pr=a("div"),F(PS.$$.fragment),BJr=l(),Fm=a("p"),IJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kte=a("a"),NJr=o("from_pretrained()"),qJr=o(" class method or the "),Ste=a("a"),jJr=o("from_config()"),DJr=o(` class
method.`),GJr=l(),BS=a("p"),OJr=o("This class cannot be instantiated directly using "),kLe=a("code"),VJr=o("__init__()"),XJr=o(" (throws an error)."),zJr=l(),ea=a("div"),F(IS.$$.fragment),QJr=l(),SLe=a("p"),WJr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UJr=l(),Tm=a("p"),HJr=o(`Note:
Loading a model from its configuration file does `),RLe=a("strong"),JJr=o("not"),YJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rte=a("a"),KJr=o("from_pretrained()"),ZJr=o(" to load the model weights."),eYr=l(),F(hA.$$.fragment),oYr=l(),Qr=a("div"),F(NS.$$.fragment),rYr=l(),PLe=a("p"),tYr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aYr=l(),Bn=a("p"),nYr=o("The model class to instantiate is selected based on the "),BLe=a("code"),sYr=o("model_type"),lYr=o(` property of the config object (either
passed as an argument or loaded from `),ILe=a("code"),iYr=o("pretrained_model_name_or_path"),dYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NLe=a("code"),cYr=o("pretrained_model_name_or_path"),mYr=o(":"),fYr=l(),qLe=a("ul"),uA=a("li"),jLe=a("strong"),gYr=o("tapas"),hYr=o(" \u2014 "),Pte=a("a"),uYr=o("TFTapasForQuestionAnswering"),pYr=o(" (TAPAS model)"),_Yr=l(),F(pA.$$.fragment),Teo=l(),Mm=a("h2"),_A=a("a"),DLe=a("span"),F(qS.$$.fragment),bYr=l(),GLe=a("span"),vYr=o("TFAutoModelForDocumentQuestionAnswering"),Meo=l(),_r=a("div"),F(jS.$$.fragment),FYr=l(),Em=a("p"),TYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Bte=a("a"),MYr=o("from_pretrained()"),EYr=o(" class method or the "),Ite=a("a"),CYr=o("from_config()"),wYr=o(` class
method.`),AYr=l(),DS=a("p"),LYr=o("This class cannot be instantiated directly using "),OLe=a("code"),yYr=o("__init__()"),xYr=o(" (throws an error)."),$Yr=l(),oa=a("div"),F(GS.$$.fragment),kYr=l(),VLe=a("p"),SYr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),RYr=l(),Cm=a("p"),PYr=o(`Note:
Loading a model from its configuration file does `),XLe=a("strong"),BYr=o("not"),IYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nte=a("a"),NYr=o("from_pretrained()"),qYr=o(" to load the model weights."),jYr=l(),F(bA.$$.fragment),DYr=l(),Wr=a("div"),F(OS.$$.fragment),GYr=l(),zLe=a("p"),OYr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),VYr=l(),In=a("p"),XYr=o("The model class to instantiate is selected based on the "),QLe=a("code"),zYr=o("model_type"),QYr=o(` property of the config object (either
passed as an argument or loaded from `),WLe=a("code"),WYr=o("pretrained_model_name_or_path"),UYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ULe=a("code"),HYr=o("pretrained_model_name_or_path"),JYr=o(":"),YYr=l(),HLe=a("ul"),vA=a("li"),JLe=a("strong"),KYr=o("layoutlm"),ZYr=o(" \u2014 "),qte=a("a"),eKr=o("TFLayoutLMForQuestionAnswering"),oKr=o(" (LayoutLM model)"),rKr=l(),F(FA.$$.fragment),Eeo=l(),wm=a("h2"),TA=a("a"),YLe=a("span"),F(VS.$$.fragment),tKr=l(),KLe=a("span"),aKr=o("TFAutoModelForTokenClassification"),Ceo=l(),br=a("div"),F(XS.$$.fragment),nKr=l(),Am=a("p"),sKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jte=a("a"),lKr=o("from_pretrained()"),iKr=o(" class method or the "),Dte=a("a"),dKr=o("from_config()"),cKr=o(` class
method.`),mKr=l(),zS=a("p"),fKr=o("This class cannot be instantiated directly using "),ZLe=a("code"),gKr=o("__init__()"),hKr=o(" (throws an error)."),uKr=l(),ra=a("div"),F(QS.$$.fragment),pKr=l(),eye=a("p"),_Kr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bKr=l(),Lm=a("p"),vKr=o(`Note:
Loading a model from its configuration file does `),oye=a("strong"),FKr=o("not"),TKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gte=a("a"),MKr=o("from_pretrained()"),EKr=o(" to load the model weights."),CKr=l(),F(MA.$$.fragment),wKr=l(),Ur=a("div"),F(WS.$$.fragment),AKr=l(),rye=a("p"),LKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yKr=l(),Nn=a("p"),xKr=o("The model class to instantiate is selected based on the "),tye=a("code"),$Kr=o("model_type"),kKr=o(` property of the config object (either
passed as an argument or loaded from `),aye=a("code"),SKr=o("pretrained_model_name_or_path"),RKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nye=a("code"),PKr=o("pretrained_model_name_or_path"),BKr=o(":"),IKr=l(),de=a("ul"),EA=a("li"),sye=a("strong"),NKr=o("albert"),qKr=o(" \u2014 "),Ote=a("a"),jKr=o("TFAlbertForTokenClassification"),DKr=o(" (ALBERT model)"),GKr=l(),CA=a("li"),lye=a("strong"),OKr=o("bert"),VKr=o(" \u2014 "),Vte=a("a"),XKr=o("TFBertForTokenClassification"),zKr=o(" (BERT model)"),QKr=l(),wA=a("li"),iye=a("strong"),WKr=o("camembert"),UKr=o(" \u2014 "),Xte=a("a"),HKr=o("TFCamembertForTokenClassification"),JKr=o(" (CamemBERT model)"),YKr=l(),AA=a("li"),dye=a("strong"),KKr=o("convbert"),ZKr=o(" \u2014 "),zte=a("a"),eZr=o("TFConvBertForTokenClassification"),oZr=o(" (ConvBERT model)"),rZr=l(),LA=a("li"),cye=a("strong"),tZr=o("deberta"),aZr=o(" \u2014 "),Qte=a("a"),nZr=o("TFDebertaForTokenClassification"),sZr=o(" (DeBERTa model)"),lZr=l(),yA=a("li"),mye=a("strong"),iZr=o("deberta-v2"),dZr=o(" \u2014 "),Wte=a("a"),cZr=o("TFDebertaV2ForTokenClassification"),mZr=o(" (DeBERTa-v2 model)"),fZr=l(),xA=a("li"),fye=a("strong"),gZr=o("distilbert"),hZr=o(" \u2014 "),Ute=a("a"),uZr=o("TFDistilBertForTokenClassification"),pZr=o(" (DistilBERT model)"),_Zr=l(),$A=a("li"),gye=a("strong"),bZr=o("electra"),vZr=o(" \u2014 "),Hte=a("a"),FZr=o("TFElectraForTokenClassification"),TZr=o(" (ELECTRA model)"),MZr=l(),kA=a("li"),hye=a("strong"),EZr=o("flaubert"),CZr=o(" \u2014 "),Jte=a("a"),wZr=o("TFFlaubertForTokenClassification"),AZr=o(" (FlauBERT model)"),LZr=l(),SA=a("li"),uye=a("strong"),yZr=o("funnel"),xZr=o(" \u2014 "),Yte=a("a"),$Zr=o("TFFunnelForTokenClassification"),kZr=o(" (Funnel Transformer model)"),SZr=l(),RA=a("li"),pye=a("strong"),RZr=o("layoutlm"),PZr=o(" \u2014 "),Kte=a("a"),BZr=o("TFLayoutLMForTokenClassification"),IZr=o(" (LayoutLM model)"),NZr=l(),PA=a("li"),_ye=a("strong"),qZr=o("layoutlmv3"),jZr=o(" \u2014 "),Zte=a("a"),DZr=o("TFLayoutLMv3ForTokenClassification"),GZr=o(" (LayoutLMv3 model)"),OZr=l(),BA=a("li"),bye=a("strong"),VZr=o("longformer"),XZr=o(" \u2014 "),eae=a("a"),zZr=o("TFLongformerForTokenClassification"),QZr=o(" (Longformer model)"),WZr=l(),IA=a("li"),vye=a("strong"),UZr=o("mobilebert"),HZr=o(" \u2014 "),oae=a("a"),JZr=o("TFMobileBertForTokenClassification"),YZr=o(" (MobileBERT model)"),KZr=l(),NA=a("li"),Fye=a("strong"),ZZr=o("mpnet"),eet=o(" \u2014 "),rae=a("a"),oet=o("TFMPNetForTokenClassification"),ret=o(" (MPNet model)"),tet=l(),qA=a("li"),Tye=a("strong"),aet=o("rembert"),net=o(" \u2014 "),tae=a("a"),set=o("TFRemBertForTokenClassification"),iet=o(" (RemBERT model)"),det=l(),jA=a("li"),Mye=a("strong"),cet=o("roberta"),met=o(" \u2014 "),aae=a("a"),fet=o("TFRobertaForTokenClassification"),get=o(" (RoBERTa model)"),het=l(),DA=a("li"),Eye=a("strong"),uet=o("roformer"),pet=o(" \u2014 "),nae=a("a"),_et=o("TFRoFormerForTokenClassification"),bet=o(" (RoFormer model)"),vet=l(),GA=a("li"),Cye=a("strong"),Fet=o("xlm"),Tet=o(" \u2014 "),sae=a("a"),Met=o("TFXLMForTokenClassification"),Eet=o(" (XLM model)"),Cet=l(),OA=a("li"),wye=a("strong"),wet=o("xlm-roberta"),Aet=o(" \u2014 "),lae=a("a"),Let=o("TFXLMRobertaForTokenClassification"),yet=o(" (XLM-RoBERTa model)"),xet=l(),VA=a("li"),Aye=a("strong"),$et=o("xlnet"),ket=o(" \u2014 "),iae=a("a"),Set=o("TFXLNetForTokenClassification"),Ret=o(" (XLNet model)"),Pet=l(),F(XA.$$.fragment),weo=l(),ym=a("h2"),zA=a("a"),Lye=a("span"),F(US.$$.fragment),Bet=l(),yye=a("span"),Iet=o("TFAutoModelForQuestionAnswering"),Aeo=l(),vr=a("div"),F(HS.$$.fragment),Net=l(),xm=a("p"),qet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dae=a("a"),jet=o("from_pretrained()"),Det=o(" class method or the "),cae=a("a"),Get=o("from_config()"),Oet=o(` class
method.`),Vet=l(),JS=a("p"),Xet=o("This class cannot be instantiated directly using "),xye=a("code"),zet=o("__init__()"),Qet=o(" (throws an error)."),Wet=l(),ta=a("div"),F(YS.$$.fragment),Uet=l(),$ye=a("p"),Het=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jet=l(),$m=a("p"),Yet=o(`Note:
Loading a model from its configuration file does `),kye=a("strong"),Ket=o("not"),Zet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=a("a"),eot=o("from_pretrained()"),oot=o(" to load the model weights."),rot=l(),F(QA.$$.fragment),tot=l(),Hr=a("div"),F(KS.$$.fragment),aot=l(),Sye=a("p"),not=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sot=l(),qn=a("p"),lot=o("The model class to instantiate is selected based on the "),Rye=a("code"),iot=o("model_type"),dot=o(` property of the config object (either
passed as an argument or loaded from `),Pye=a("code"),cot=o("pretrained_model_name_or_path"),mot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bye=a("code"),fot=o("pretrained_model_name_or_path"),got=o(":"),hot=l(),ce=a("ul"),WA=a("li"),Iye=a("strong"),uot=o("albert"),pot=o(" \u2014 "),fae=a("a"),_ot=o("TFAlbertForQuestionAnswering"),bot=o(" (ALBERT model)"),vot=l(),UA=a("li"),Nye=a("strong"),Fot=o("bert"),Tot=o(" \u2014 "),gae=a("a"),Mot=o("TFBertForQuestionAnswering"),Eot=o(" (BERT model)"),Cot=l(),HA=a("li"),qye=a("strong"),wot=o("camembert"),Aot=o(" \u2014 "),hae=a("a"),Lot=o("TFCamembertForQuestionAnswering"),yot=o(" (CamemBERT model)"),xot=l(),JA=a("li"),jye=a("strong"),$ot=o("convbert"),kot=o(" \u2014 "),uae=a("a"),Sot=o("TFConvBertForQuestionAnswering"),Rot=o(" (ConvBERT model)"),Pot=l(),YA=a("li"),Dye=a("strong"),Bot=o("deberta"),Iot=o(" \u2014 "),pae=a("a"),Not=o("TFDebertaForQuestionAnswering"),qot=o(" (DeBERTa model)"),jot=l(),KA=a("li"),Gye=a("strong"),Dot=o("deberta-v2"),Got=o(" \u2014 "),_ae=a("a"),Oot=o("TFDebertaV2ForQuestionAnswering"),Vot=o(" (DeBERTa-v2 model)"),Xot=l(),ZA=a("li"),Oye=a("strong"),zot=o("distilbert"),Qot=o(" \u2014 "),bae=a("a"),Wot=o("TFDistilBertForQuestionAnswering"),Uot=o(" (DistilBERT model)"),Hot=l(),e6=a("li"),Vye=a("strong"),Jot=o("electra"),Yot=o(" \u2014 "),vae=a("a"),Kot=o("TFElectraForQuestionAnswering"),Zot=o(" (ELECTRA model)"),ert=l(),o6=a("li"),Xye=a("strong"),ort=o("flaubert"),rrt=o(" \u2014 "),Fae=a("a"),trt=o("TFFlaubertForQuestionAnsweringSimple"),art=o(" (FlauBERT model)"),nrt=l(),r6=a("li"),zye=a("strong"),srt=o("funnel"),lrt=o(" \u2014 "),Tae=a("a"),irt=o("TFFunnelForQuestionAnswering"),drt=o(" (Funnel Transformer model)"),crt=l(),t6=a("li"),Qye=a("strong"),mrt=o("gptj"),frt=o(" \u2014 "),Mae=a("a"),grt=o("TFGPTJForQuestionAnswering"),hrt=o(" (GPT-J model)"),urt=l(),a6=a("li"),Wye=a("strong"),prt=o("layoutlmv3"),_rt=o(" \u2014 "),Eae=a("a"),brt=o("TFLayoutLMv3ForQuestionAnswering"),vrt=o(" (LayoutLMv3 model)"),Frt=l(),n6=a("li"),Uye=a("strong"),Trt=o("longformer"),Mrt=o(" \u2014 "),Cae=a("a"),Ert=o("TFLongformerForQuestionAnswering"),Crt=o(" (Longformer model)"),wrt=l(),s6=a("li"),Hye=a("strong"),Art=o("mobilebert"),Lrt=o(" \u2014 "),wae=a("a"),yrt=o("TFMobileBertForQuestionAnswering"),xrt=o(" (MobileBERT model)"),$rt=l(),l6=a("li"),Jye=a("strong"),krt=o("mpnet"),Srt=o(" \u2014 "),Aae=a("a"),Rrt=o("TFMPNetForQuestionAnswering"),Prt=o(" (MPNet model)"),Brt=l(),i6=a("li"),Yye=a("strong"),Irt=o("rembert"),Nrt=o(" \u2014 "),Lae=a("a"),qrt=o("TFRemBertForQuestionAnswering"),jrt=o(" (RemBERT model)"),Drt=l(),d6=a("li"),Kye=a("strong"),Grt=o("roberta"),Ort=o(" \u2014 "),yae=a("a"),Vrt=o("TFRobertaForQuestionAnswering"),Xrt=o(" (RoBERTa model)"),zrt=l(),c6=a("li"),Zye=a("strong"),Qrt=o("roformer"),Wrt=o(" \u2014 "),xae=a("a"),Urt=o("TFRoFormerForQuestionAnswering"),Hrt=o(" (RoFormer model)"),Jrt=l(),m6=a("li"),e8e=a("strong"),Yrt=o("xlm"),Krt=o(" \u2014 "),$ae=a("a"),Zrt=o("TFXLMForQuestionAnsweringSimple"),ett=o(" (XLM model)"),ott=l(),f6=a("li"),o8e=a("strong"),rtt=o("xlm-roberta"),ttt=o(" \u2014 "),kae=a("a"),att=o("TFXLMRobertaForQuestionAnswering"),ntt=o(" (XLM-RoBERTa model)"),stt=l(),g6=a("li"),r8e=a("strong"),ltt=o("xlnet"),itt=o(" \u2014 "),Sae=a("a"),dtt=o("TFXLNetForQuestionAnsweringSimple"),ctt=o(" (XLNet model)"),mtt=l(),F(h6.$$.fragment),Leo=l(),km=a("h2"),u6=a("a"),t8e=a("span"),F(ZS.$$.fragment),ftt=l(),a8e=a("span"),gtt=o("TFAutoModelForVision2Seq"),yeo=l(),Fr=a("div"),F(eR.$$.fragment),htt=l(),Sm=a("p"),utt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Rae=a("a"),ptt=o("from_pretrained()"),_tt=o(" class method or the "),Pae=a("a"),btt=o("from_config()"),vtt=o(` class
method.`),Ftt=l(),oR=a("p"),Ttt=o("This class cannot be instantiated directly using "),n8e=a("code"),Mtt=o("__init__()"),Ett=o(" (throws an error)."),Ctt=l(),aa=a("div"),F(rR.$$.fragment),wtt=l(),s8e=a("p"),Att=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ltt=l(),Rm=a("p"),ytt=o(`Note:
Loading a model from its configuration file does `),l8e=a("strong"),xtt=o("not"),$tt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=a("a"),ktt=o("from_pretrained()"),Stt=o(" to load the model weights."),Rtt=l(),F(p6.$$.fragment),Ptt=l(),Jr=a("div"),F(tR.$$.fragment),Btt=l(),i8e=a("p"),Itt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ntt=l(),jn=a("p"),qtt=o("The model class to instantiate is selected based on the "),d8e=a("code"),jtt=o("model_type"),Dtt=o(` property of the config object (either
passed as an argument or loaded from `),c8e=a("code"),Gtt=o("pretrained_model_name_or_path"),Ott=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m8e=a("code"),Vtt=o("pretrained_model_name_or_path"),Xtt=o(":"),ztt=l(),f8e=a("ul"),_6=a("li"),g8e=a("strong"),Qtt=o("vision-encoder-decoder"),Wtt=o(" \u2014 "),Iae=a("a"),Utt=o("TFVisionEncoderDecoderModel"),Htt=o(" (Vision Encoder decoder model)"),Jtt=l(),F(b6.$$.fragment),xeo=l(),Pm=a("h2"),v6=a("a"),h8e=a("span"),F(aR.$$.fragment),Ytt=l(),u8e=a("span"),Ktt=o("TFAutoModelForSpeechSeq2Seq"),$eo=l(),Tr=a("div"),F(nR.$$.fragment),Ztt=l(),Bm=a("p"),eat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Nae=a("a"),oat=o("from_pretrained()"),rat=o(" class method or the "),qae=a("a"),tat=o("from_config()"),aat=o(` class
method.`),nat=l(),sR=a("p"),sat=o("This class cannot be instantiated directly using "),p8e=a("code"),lat=o("__init__()"),iat=o(" (throws an error)."),dat=l(),na=a("div"),F(lR.$$.fragment),cat=l(),_8e=a("p"),mat=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fat=l(),Im=a("p"),gat=o(`Note:
Loading a model from its configuration file does `),b8e=a("strong"),hat=o("not"),uat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=a("a"),pat=o("from_pretrained()"),_at=o(" to load the model weights."),bat=l(),F(F6.$$.fragment),vat=l(),Yr=a("div"),F(iR.$$.fragment),Fat=l(),v8e=a("p"),Tat=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mat=l(),Dn=a("p"),Eat=o("The model class to instantiate is selected based on the "),F8e=a("code"),Cat=o("model_type"),wat=o(` property of the config object (either
passed as an argument or loaded from `),T8e=a("code"),Aat=o("pretrained_model_name_or_path"),Lat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=a("code"),yat=o("pretrained_model_name_or_path"),xat=o(":"),$at=l(),E8e=a("ul"),T6=a("li"),C8e=a("strong"),kat=o("speech_to_text"),Sat=o(" \u2014 "),Dae=a("a"),Rat=o("TFSpeech2TextForConditionalGeneration"),Pat=o(" (Speech2Text model)"),Bat=l(),F(M6.$$.fragment),keo=l(),Nm=a("h2"),E6=a("a"),w8e=a("span"),F(dR.$$.fragment),Iat=l(),A8e=a("span"),Nat=o("FlaxAutoModel"),Seo=l(),Mr=a("div"),F(cR.$$.fragment),qat=l(),qm=a("p"),jat=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gae=a("a"),Dat=o("from_pretrained()"),Gat=o(" class method or the "),Oae=a("a"),Oat=o("from_config()"),Vat=o(` class
method.`),Xat=l(),mR=a("p"),zat=o("This class cannot be instantiated directly using "),L8e=a("code"),Qat=o("__init__()"),Wat=o(" (throws an error)."),Uat=l(),sa=a("div"),F(fR.$$.fragment),Hat=l(),y8e=a("p"),Jat=o("Instantiates one of the base model classes of the library from a configuration."),Yat=l(),jm=a("p"),Kat=o(`Note:
Loading a model from its configuration file does `),x8e=a("strong"),Zat=o("not"),ent=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vae=a("a"),ont=o("from_pretrained()"),rnt=o(" to load the model weights."),tnt=l(),F(C6.$$.fragment),ant=l(),Kr=a("div"),F(gR.$$.fragment),nnt=l(),$8e=a("p"),snt=o("Instantiate one of the base model classes of the library from a pretrained model."),lnt=l(),Gn=a("p"),int=o("The model class to instantiate is selected based on the "),k8e=a("code"),dnt=o("model_type"),cnt=o(` property of the config object (either
passed as an argument or loaded from `),S8e=a("code"),mnt=o("pretrained_model_name_or_path"),fnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R8e=a("code"),gnt=o("pretrained_model_name_or_path"),hnt=o(":"),unt=l(),te=a("ul"),w6=a("li"),P8e=a("strong"),pnt=o("albert"),_nt=o(" \u2014 "),Xae=a("a"),bnt=o("FlaxAlbertModel"),vnt=o(" (ALBERT model)"),Fnt=l(),A6=a("li"),B8e=a("strong"),Tnt=o("bart"),Mnt=o(" \u2014 "),zae=a("a"),Ent=o("FlaxBartModel"),Cnt=o(" (BART model)"),wnt=l(),L6=a("li"),I8e=a("strong"),Ant=o("beit"),Lnt=o(" \u2014 "),Qae=a("a"),ynt=o("FlaxBeitModel"),xnt=o(" (BEiT model)"),$nt=l(),y6=a("li"),N8e=a("strong"),knt=o("bert"),Snt=o(" \u2014 "),Wae=a("a"),Rnt=o("FlaxBertModel"),Pnt=o(" (BERT model)"),Bnt=l(),x6=a("li"),q8e=a("strong"),Int=o("big_bird"),Nnt=o(" \u2014 "),Uae=a("a"),qnt=o("FlaxBigBirdModel"),jnt=o(" (BigBird model)"),Dnt=l(),$6=a("li"),j8e=a("strong"),Gnt=o("blenderbot"),Ont=o(" \u2014 "),Hae=a("a"),Vnt=o("FlaxBlenderbotModel"),Xnt=o(" (Blenderbot model)"),znt=l(),k6=a("li"),D8e=a("strong"),Qnt=o("blenderbot-small"),Wnt=o(" \u2014 "),Jae=a("a"),Unt=o("FlaxBlenderbotSmallModel"),Hnt=o(" (BlenderbotSmall model)"),Jnt=l(),S6=a("li"),G8e=a("strong"),Ynt=o("clip"),Knt=o(" \u2014 "),Yae=a("a"),Znt=o("FlaxCLIPModel"),est=o(" (CLIP model)"),ost=l(),R6=a("li"),O8e=a("strong"),rst=o("distilbert"),tst=o(" \u2014 "),Kae=a("a"),ast=o("FlaxDistilBertModel"),nst=o(" (DistilBERT model)"),sst=l(),P6=a("li"),V8e=a("strong"),lst=o("electra"),ist=o(" \u2014 "),Zae=a("a"),dst=o("FlaxElectraModel"),cst=o(" (ELECTRA model)"),mst=l(),B6=a("li"),X8e=a("strong"),fst=o("gpt2"),gst=o(" \u2014 "),ene=a("a"),hst=o("FlaxGPT2Model"),ust=o(" (OpenAI GPT-2 model)"),pst=l(),I6=a("li"),z8e=a("strong"),_st=o("gpt_neo"),bst=o(" \u2014 "),one=a("a"),vst=o("FlaxGPTNeoModel"),Fst=o(" (GPT Neo model)"),Tst=l(),N6=a("li"),Q8e=a("strong"),Mst=o("gptj"),Est=o(" \u2014 "),rne=a("a"),Cst=o("FlaxGPTJModel"),wst=o(" (GPT-J model)"),Ast=l(),q6=a("li"),W8e=a("strong"),Lst=o("longt5"),yst=o(" \u2014 "),tne=a("a"),xst=o("FlaxLongT5Model"),$st=o(" (LongT5 model)"),kst=l(),j6=a("li"),U8e=a("strong"),Sst=o("marian"),Rst=o(" \u2014 "),ane=a("a"),Pst=o("FlaxMarianModel"),Bst=o(" (Marian model)"),Ist=l(),D6=a("li"),H8e=a("strong"),Nst=o("mbart"),qst=o(" \u2014 "),nne=a("a"),jst=o("FlaxMBartModel"),Dst=o(" (mBART model)"),Gst=l(),G6=a("li"),J8e=a("strong"),Ost=o("mt5"),Vst=o(" \u2014 "),sne=a("a"),Xst=o("FlaxMT5Model"),zst=o(" (MT5 model)"),Qst=l(),O6=a("li"),Y8e=a("strong"),Wst=o("opt"),Ust=o(" \u2014 "),lne=a("a"),Hst=o("FlaxOPTModel"),Jst=o(" (OPT model)"),Yst=l(),V6=a("li"),K8e=a("strong"),Kst=o("pegasus"),Zst=o(" \u2014 "),ine=a("a"),elt=o("FlaxPegasusModel"),olt=o(" (Pegasus model)"),rlt=l(),X6=a("li"),Z8e=a("strong"),tlt=o("roberta"),alt=o(" \u2014 "),dne=a("a"),nlt=o("FlaxRobertaModel"),slt=o(" (RoBERTa model)"),llt=l(),z6=a("li"),e9e=a("strong"),ilt=o("roformer"),dlt=o(" \u2014 "),cne=a("a"),clt=o("FlaxRoFormerModel"),mlt=o(" (RoFormer model)"),flt=l(),Q6=a("li"),o9e=a("strong"),glt=o("t5"),hlt=o(" \u2014 "),mne=a("a"),ult=o("FlaxT5Model"),plt=o(" (T5 model)"),_lt=l(),W6=a("li"),r9e=a("strong"),blt=o("vision-text-dual-encoder"),vlt=o(" \u2014 "),fne=a("a"),Flt=o("FlaxVisionTextDualEncoderModel"),Tlt=o(" (VisionTextDualEncoder model)"),Mlt=l(),U6=a("li"),t9e=a("strong"),Elt=o("vit"),Clt=o(" \u2014 "),gne=a("a"),wlt=o("FlaxViTModel"),Alt=o(" (ViT model)"),Llt=l(),H6=a("li"),a9e=a("strong"),ylt=o("wav2vec2"),xlt=o(" \u2014 "),hne=a("a"),$lt=o("FlaxWav2Vec2Model"),klt=o(" (Wav2Vec2 model)"),Slt=l(),J6=a("li"),n9e=a("strong"),Rlt=o("xglm"),Plt=o(" \u2014 "),une=a("a"),Blt=o("FlaxXGLMModel"),Ilt=o(" (XGLM model)"),Nlt=l(),Y6=a("li"),s9e=a("strong"),qlt=o("xlm-roberta"),jlt=o(" \u2014 "),pne=a("a"),Dlt=o("FlaxXLMRobertaModel"),Glt=o(" (XLM-RoBERTa model)"),Olt=l(),F(K6.$$.fragment),Reo=l(),Dm=a("h2"),Z6=a("a"),l9e=a("span"),F(hR.$$.fragment),Vlt=l(),i9e=a("span"),Xlt=o("FlaxAutoModelForCausalLM"),Peo=l(),Er=a("div"),F(uR.$$.fragment),zlt=l(),Gm=a("p"),Qlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_ne=a("a"),Wlt=o("from_pretrained()"),Ult=o(" class method or the "),bne=a("a"),Hlt=o("from_config()"),Jlt=o(` class
method.`),Ylt=l(),pR=a("p"),Klt=o("This class cannot be instantiated directly using "),d9e=a("code"),Zlt=o("__init__()"),eit=o(" (throws an error)."),oit=l(),la=a("div"),F(_R.$$.fragment),rit=l(),c9e=a("p"),tit=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ait=l(),Om=a("p"),nit=o(`Note:
Loading a model from its configuration file does `),m9e=a("strong"),sit=o("not"),lit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vne=a("a"),iit=o("from_pretrained()"),dit=o(" to load the model weights."),cit=l(),F(e7.$$.fragment),mit=l(),Zr=a("div"),F(bR.$$.fragment),fit=l(),f9e=a("p"),git=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hit=l(),On=a("p"),uit=o("The model class to instantiate is selected based on the "),g9e=a("code"),pit=o("model_type"),_it=o(` property of the config object (either
passed as an argument or loaded from `),h9e=a("code"),bit=o("pretrained_model_name_or_path"),vit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=a("code"),Fit=o("pretrained_model_name_or_path"),Tit=o(":"),Mit=l(),xe=a("ul"),o7=a("li"),p9e=a("strong"),Eit=o("bart"),Cit=o(" \u2014 "),Fne=a("a"),wit=o("FlaxBartForCausalLM"),Ait=o(" (BART model)"),Lit=l(),r7=a("li"),_9e=a("strong"),yit=o("bert"),xit=o(" \u2014 "),Tne=a("a"),$it=o("FlaxBertForCausalLM"),kit=o(" (BERT model)"),Sit=l(),t7=a("li"),b9e=a("strong"),Rit=o("big_bird"),Pit=o(" \u2014 "),Mne=a("a"),Bit=o("FlaxBigBirdForCausalLM"),Iit=o(" (BigBird model)"),Nit=l(),a7=a("li"),v9e=a("strong"),qit=o("electra"),jit=o(" \u2014 "),Ene=a("a"),Dit=o("FlaxElectraForCausalLM"),Git=o(" (ELECTRA model)"),Oit=l(),n7=a("li"),F9e=a("strong"),Vit=o("gpt2"),Xit=o(" \u2014 "),Cne=a("a"),zit=o("FlaxGPT2LMHeadModel"),Qit=o(" (OpenAI GPT-2 model)"),Wit=l(),s7=a("li"),T9e=a("strong"),Uit=o("gpt_neo"),Hit=o(" \u2014 "),wne=a("a"),Jit=o("FlaxGPTNeoForCausalLM"),Yit=o(" (GPT Neo model)"),Kit=l(),l7=a("li"),M9e=a("strong"),Zit=o("gptj"),edt=o(" \u2014 "),Ane=a("a"),odt=o("FlaxGPTJForCausalLM"),rdt=o(" (GPT-J model)"),tdt=l(),i7=a("li"),E9e=a("strong"),adt=o("opt"),ndt=o(" \u2014 "),Lne=a("a"),sdt=o("FlaxOPTForCausalLM"),ldt=o(" (OPT model)"),idt=l(),d7=a("li"),C9e=a("strong"),ddt=o("roberta"),cdt=o(" \u2014 "),yne=a("a"),mdt=o("FlaxRobertaForCausalLM"),fdt=o(" (RoBERTa model)"),gdt=l(),c7=a("li"),w9e=a("strong"),hdt=o("xglm"),udt=o(" \u2014 "),xne=a("a"),pdt=o("FlaxXGLMForCausalLM"),_dt=o(" (XGLM model)"),bdt=l(),F(m7.$$.fragment),Beo=l(),Vm=a("h2"),f7=a("a"),A9e=a("span"),F(vR.$$.fragment),vdt=l(),L9e=a("span"),Fdt=o("FlaxAutoModelForPreTraining"),Ieo=l(),Cr=a("div"),F(FR.$$.fragment),Tdt=l(),Xm=a("p"),Mdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$ne=a("a"),Edt=o("from_pretrained()"),Cdt=o(" class method or the "),kne=a("a"),wdt=o("from_config()"),Adt=o(` class
method.`),Ldt=l(),TR=a("p"),ydt=o("This class cannot be instantiated directly using "),y9e=a("code"),xdt=o("__init__()"),$dt=o(" (throws an error)."),kdt=l(),ia=a("div"),F(MR.$$.fragment),Sdt=l(),x9e=a("p"),Rdt=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pdt=l(),zm=a("p"),Bdt=o(`Note:
Loading a model from its configuration file does `),$9e=a("strong"),Idt=o("not"),Ndt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=a("a"),qdt=o("from_pretrained()"),jdt=o(" to load the model weights."),Ddt=l(),F(g7.$$.fragment),Gdt=l(),et=a("div"),F(ER.$$.fragment),Odt=l(),k9e=a("p"),Vdt=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xdt=l(),Vn=a("p"),zdt=o("The model class to instantiate is selected based on the "),S9e=a("code"),Qdt=o("model_type"),Wdt=o(` property of the config object (either
passed as an argument or loaded from `),R9e=a("code"),Udt=o("pretrained_model_name_or_path"),Hdt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=a("code"),Jdt=o("pretrained_model_name_or_path"),Ydt=o(":"),Kdt=l(),Ee=a("ul"),h7=a("li"),B9e=a("strong"),Zdt=o("albert"),ect=o(" \u2014 "),Rne=a("a"),oct=o("FlaxAlbertForPreTraining"),rct=o(" (ALBERT model)"),tct=l(),u7=a("li"),I9e=a("strong"),act=o("bart"),nct=o(" \u2014 "),Pne=a("a"),sct=o("FlaxBartForConditionalGeneration"),lct=o(" (BART model)"),ict=l(),p7=a("li"),N9e=a("strong"),dct=o("bert"),cct=o(" \u2014 "),Bne=a("a"),mct=o("FlaxBertForPreTraining"),fct=o(" (BERT model)"),gct=l(),_7=a("li"),q9e=a("strong"),hct=o("big_bird"),uct=o(" \u2014 "),Ine=a("a"),pct=o("FlaxBigBirdForPreTraining"),_ct=o(" (BigBird model)"),bct=l(),b7=a("li"),j9e=a("strong"),vct=o("electra"),Fct=o(" \u2014 "),Nne=a("a"),Tct=o("FlaxElectraForPreTraining"),Mct=o(" (ELECTRA model)"),Ect=l(),v7=a("li"),D9e=a("strong"),Cct=o("longt5"),wct=o(" \u2014 "),qne=a("a"),Act=o("FlaxLongT5ForConditionalGeneration"),Lct=o(" (LongT5 model)"),yct=l(),F7=a("li"),G9e=a("strong"),xct=o("mbart"),$ct=o(" \u2014 "),jne=a("a"),kct=o("FlaxMBartForConditionalGeneration"),Sct=o(" (mBART model)"),Rct=l(),T7=a("li"),O9e=a("strong"),Pct=o("mt5"),Bct=o(" \u2014 "),Dne=a("a"),Ict=o("FlaxMT5ForConditionalGeneration"),Nct=o(" (MT5 model)"),qct=l(),M7=a("li"),V9e=a("strong"),jct=o("roberta"),Dct=o(" \u2014 "),Gne=a("a"),Gct=o("FlaxRobertaForMaskedLM"),Oct=o(" (RoBERTa model)"),Vct=l(),E7=a("li"),X9e=a("strong"),Xct=o("roformer"),zct=o(" \u2014 "),One=a("a"),Qct=o("FlaxRoFormerForMaskedLM"),Wct=o(" (RoFormer model)"),Uct=l(),C7=a("li"),z9e=a("strong"),Hct=o("t5"),Jct=o(" \u2014 "),Vne=a("a"),Yct=o("FlaxT5ForConditionalGeneration"),Kct=o(" (T5 model)"),Zct=l(),w7=a("li"),Q9e=a("strong"),emt=o("wav2vec2"),omt=o(" \u2014 "),Xne=a("a"),rmt=o("FlaxWav2Vec2ForPreTraining"),tmt=o(" (Wav2Vec2 model)"),amt=l(),A7=a("li"),W9e=a("strong"),nmt=o("xlm-roberta"),smt=o(" \u2014 "),zne=a("a"),lmt=o("FlaxXLMRobertaForMaskedLM"),imt=o(" (XLM-RoBERTa model)"),dmt=l(),F(L7.$$.fragment),Neo=l(),Qm=a("h2"),y7=a("a"),U9e=a("span"),F(CR.$$.fragment),cmt=l(),H9e=a("span"),mmt=o("FlaxAutoModelForMaskedLM"),qeo=l(),wr=a("div"),F(wR.$$.fragment),fmt=l(),Wm=a("p"),gmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qne=a("a"),hmt=o("from_pretrained()"),umt=o(" class method or the "),Wne=a("a"),pmt=o("from_config()"),_mt=o(` class
method.`),bmt=l(),AR=a("p"),vmt=o("This class cannot be instantiated directly using "),J9e=a("code"),Fmt=o("__init__()"),Tmt=o(" (throws an error)."),Mmt=l(),da=a("div"),F(LR.$$.fragment),Emt=l(),Y9e=a("p"),Cmt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wmt=l(),Um=a("p"),Amt=o(`Note:
Loading a model from its configuration file does `),K9e=a("strong"),Lmt=o("not"),ymt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Une=a("a"),xmt=o("from_pretrained()"),$mt=o(" to load the model weights."),kmt=l(),F(x7.$$.fragment),Smt=l(),ot=a("div"),F(yR.$$.fragment),Rmt=l(),Z9e=a("p"),Pmt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bmt=l(),Xn=a("p"),Imt=o("The model class to instantiate is selected based on the "),exe=a("code"),Nmt=o("model_type"),qmt=o(` property of the config object (either
passed as an argument or loaded from `),oxe=a("code"),jmt=o("pretrained_model_name_or_path"),Dmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rxe=a("code"),Gmt=o("pretrained_model_name_or_path"),Omt=o(":"),Vmt=l(),$e=a("ul"),$7=a("li"),txe=a("strong"),Xmt=o("albert"),zmt=o(" \u2014 "),Hne=a("a"),Qmt=o("FlaxAlbertForMaskedLM"),Wmt=o(" (ALBERT model)"),Umt=l(),k7=a("li"),axe=a("strong"),Hmt=o("bart"),Jmt=o(" \u2014 "),Jne=a("a"),Ymt=o("FlaxBartForConditionalGeneration"),Kmt=o(" (BART model)"),Zmt=l(),S7=a("li"),nxe=a("strong"),eft=o("bert"),oft=o(" \u2014 "),Yne=a("a"),rft=o("FlaxBertForMaskedLM"),tft=o(" (BERT model)"),aft=l(),R7=a("li"),sxe=a("strong"),nft=o("big_bird"),sft=o(" \u2014 "),Kne=a("a"),lft=o("FlaxBigBirdForMaskedLM"),ift=o(" (BigBird model)"),dft=l(),P7=a("li"),lxe=a("strong"),cft=o("distilbert"),mft=o(" \u2014 "),Zne=a("a"),fft=o("FlaxDistilBertForMaskedLM"),gft=o(" (DistilBERT model)"),hft=l(),B7=a("li"),ixe=a("strong"),uft=o("electra"),pft=o(" \u2014 "),ese=a("a"),_ft=o("FlaxElectraForMaskedLM"),bft=o(" (ELECTRA model)"),vft=l(),I7=a("li"),dxe=a("strong"),Fft=o("mbart"),Tft=o(" \u2014 "),ose=a("a"),Mft=o("FlaxMBartForConditionalGeneration"),Eft=o(" (mBART model)"),Cft=l(),N7=a("li"),cxe=a("strong"),wft=o("roberta"),Aft=o(" \u2014 "),rse=a("a"),Lft=o("FlaxRobertaForMaskedLM"),yft=o(" (RoBERTa model)"),xft=l(),q7=a("li"),mxe=a("strong"),$ft=o("roformer"),kft=o(" \u2014 "),tse=a("a"),Sft=o("FlaxRoFormerForMaskedLM"),Rft=o(" (RoFormer model)"),Pft=l(),j7=a("li"),fxe=a("strong"),Bft=o("xlm-roberta"),Ift=o(" \u2014 "),ase=a("a"),Nft=o("FlaxXLMRobertaForMaskedLM"),qft=o(" (XLM-RoBERTa model)"),jft=l(),F(D7.$$.fragment),jeo=l(),Hm=a("h2"),G7=a("a"),gxe=a("span"),F(xR.$$.fragment),Dft=l(),hxe=a("span"),Gft=o("FlaxAutoModelForSeq2SeqLM"),Deo=l(),Ar=a("div"),F($R.$$.fragment),Oft=l(),Jm=a("p"),Vft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nse=a("a"),Xft=o("from_pretrained()"),zft=o(" class method or the "),sse=a("a"),Qft=o("from_config()"),Wft=o(` class
method.`),Uft=l(),kR=a("p"),Hft=o("This class cannot be instantiated directly using "),uxe=a("code"),Jft=o("__init__()"),Yft=o(" (throws an error)."),Kft=l(),ca=a("div"),F(SR.$$.fragment),Zft=l(),pxe=a("p"),egt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ogt=l(),Ym=a("p"),rgt=o(`Note:
Loading a model from its configuration file does `),_xe=a("strong"),tgt=o("not"),agt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lse=a("a"),ngt=o("from_pretrained()"),sgt=o(" to load the model weights."),lgt=l(),F(O7.$$.fragment),igt=l(),rt=a("div"),F(RR.$$.fragment),dgt=l(),bxe=a("p"),cgt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mgt=l(),zn=a("p"),fgt=o("The model class to instantiate is selected based on the "),vxe=a("code"),ggt=o("model_type"),hgt=o(` property of the config object (either
passed as an argument or loaded from `),Fxe=a("code"),ugt=o("pretrained_model_name_or_path"),pgt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Txe=a("code"),_gt=o("pretrained_model_name_or_path"),bgt=o(":"),vgt=l(),ke=a("ul"),V7=a("li"),Mxe=a("strong"),Fgt=o("bart"),Tgt=o(" \u2014 "),ise=a("a"),Mgt=o("FlaxBartForConditionalGeneration"),Egt=o(" (BART model)"),Cgt=l(),X7=a("li"),Exe=a("strong"),wgt=o("blenderbot"),Agt=o(" \u2014 "),dse=a("a"),Lgt=o("FlaxBlenderbotForConditionalGeneration"),ygt=o(" (Blenderbot model)"),xgt=l(),z7=a("li"),Cxe=a("strong"),$gt=o("blenderbot-small"),kgt=o(" \u2014 "),cse=a("a"),Sgt=o("FlaxBlenderbotSmallForConditionalGeneration"),Rgt=o(" (BlenderbotSmall model)"),Pgt=l(),Q7=a("li"),wxe=a("strong"),Bgt=o("encoder-decoder"),Igt=o(" \u2014 "),mse=a("a"),Ngt=o("FlaxEncoderDecoderModel"),qgt=o(" (Encoder decoder model)"),jgt=l(),W7=a("li"),Axe=a("strong"),Dgt=o("longt5"),Ggt=o(" \u2014 "),fse=a("a"),Ogt=o("FlaxLongT5ForConditionalGeneration"),Vgt=o(" (LongT5 model)"),Xgt=l(),U7=a("li"),Lxe=a("strong"),zgt=o("marian"),Qgt=o(" \u2014 "),gse=a("a"),Wgt=o("FlaxMarianMTModel"),Ugt=o(" (Marian model)"),Hgt=l(),H7=a("li"),yxe=a("strong"),Jgt=o("mbart"),Ygt=o(" \u2014 "),hse=a("a"),Kgt=o("FlaxMBartForConditionalGeneration"),Zgt=o(" (mBART model)"),eht=l(),J7=a("li"),xxe=a("strong"),oht=o("mt5"),rht=o(" \u2014 "),use=a("a"),tht=o("FlaxMT5ForConditionalGeneration"),aht=o(" (MT5 model)"),nht=l(),Y7=a("li"),$xe=a("strong"),sht=o("pegasus"),lht=o(" \u2014 "),pse=a("a"),iht=o("FlaxPegasusForConditionalGeneration"),dht=o(" (Pegasus model)"),cht=l(),K7=a("li"),kxe=a("strong"),mht=o("t5"),fht=o(" \u2014 "),_se=a("a"),ght=o("FlaxT5ForConditionalGeneration"),hht=o(" (T5 model)"),uht=l(),F(Z7.$$.fragment),Geo=l(),Km=a("h2"),eL=a("a"),Sxe=a("span"),F(PR.$$.fragment),pht=l(),Rxe=a("span"),_ht=o("FlaxAutoModelForSequenceClassification"),Oeo=l(),Lr=a("div"),F(BR.$$.fragment),bht=l(),Zm=a("p"),vht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bse=a("a"),Fht=o("from_pretrained()"),Tht=o(" class method or the "),vse=a("a"),Mht=o("from_config()"),Eht=o(` class
method.`),Cht=l(),IR=a("p"),wht=o("This class cannot be instantiated directly using "),Pxe=a("code"),Aht=o("__init__()"),Lht=o(" (throws an error)."),yht=l(),ma=a("div"),F(NR.$$.fragment),xht=l(),Bxe=a("p"),$ht=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kht=l(),ef=a("p"),Sht=o(`Note:
Loading a model from its configuration file does `),Ixe=a("strong"),Rht=o("not"),Pht=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fse=a("a"),Bht=o("from_pretrained()"),Iht=o(" to load the model weights."),Nht=l(),F(oL.$$.fragment),qht=l(),tt=a("div"),F(qR.$$.fragment),jht=l(),Nxe=a("p"),Dht=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ght=l(),Qn=a("p"),Oht=o("The model class to instantiate is selected based on the "),qxe=a("code"),Vht=o("model_type"),Xht=o(` property of the config object (either
passed as an argument or loaded from `),jxe=a("code"),zht=o("pretrained_model_name_or_path"),Qht=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dxe=a("code"),Wht=o("pretrained_model_name_or_path"),Uht=o(":"),Hht=l(),Se=a("ul"),rL=a("li"),Gxe=a("strong"),Jht=o("albert"),Yht=o(" \u2014 "),Tse=a("a"),Kht=o("FlaxAlbertForSequenceClassification"),Zht=o(" (ALBERT model)"),eut=l(),tL=a("li"),Oxe=a("strong"),out=o("bart"),rut=o(" \u2014 "),Mse=a("a"),tut=o("FlaxBartForSequenceClassification"),aut=o(" (BART model)"),nut=l(),aL=a("li"),Vxe=a("strong"),sut=o("bert"),lut=o(" \u2014 "),Ese=a("a"),iut=o("FlaxBertForSequenceClassification"),dut=o(" (BERT model)"),cut=l(),nL=a("li"),Xxe=a("strong"),mut=o("big_bird"),fut=o(" \u2014 "),Cse=a("a"),gut=o("FlaxBigBirdForSequenceClassification"),hut=o(" (BigBird model)"),uut=l(),sL=a("li"),zxe=a("strong"),put=o("distilbert"),_ut=o(" \u2014 "),wse=a("a"),but=o("FlaxDistilBertForSequenceClassification"),vut=o(" (DistilBERT model)"),Fut=l(),lL=a("li"),Qxe=a("strong"),Tut=o("electra"),Mut=o(" \u2014 "),Ase=a("a"),Eut=o("FlaxElectraForSequenceClassification"),Cut=o(" (ELECTRA model)"),wut=l(),iL=a("li"),Wxe=a("strong"),Aut=o("mbart"),Lut=o(" \u2014 "),Lse=a("a"),yut=o("FlaxMBartForSequenceClassification"),xut=o(" (mBART model)"),$ut=l(),dL=a("li"),Uxe=a("strong"),kut=o("roberta"),Sut=o(" \u2014 "),yse=a("a"),Rut=o("FlaxRobertaForSequenceClassification"),Put=o(" (RoBERTa model)"),But=l(),cL=a("li"),Hxe=a("strong"),Iut=o("roformer"),Nut=o(" \u2014 "),xse=a("a"),qut=o("FlaxRoFormerForSequenceClassification"),jut=o(" (RoFormer model)"),Dut=l(),mL=a("li"),Jxe=a("strong"),Gut=o("xlm-roberta"),Out=o(" \u2014 "),$se=a("a"),Vut=o("FlaxXLMRobertaForSequenceClassification"),Xut=o(" (XLM-RoBERTa model)"),zut=l(),F(fL.$$.fragment),Veo=l(),of=a("h2"),gL=a("a"),Yxe=a("span"),F(jR.$$.fragment),Qut=l(),Kxe=a("span"),Wut=o("FlaxAutoModelForQuestionAnswering"),Xeo=l(),yr=a("div"),F(DR.$$.fragment),Uut=l(),rf=a("p"),Hut=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kse=a("a"),Jut=o("from_pretrained()"),Yut=o(" class method or the "),Sse=a("a"),Kut=o("from_config()"),Zut=o(` class
method.`),ept=l(),GR=a("p"),opt=o("This class cannot be instantiated directly using "),Zxe=a("code"),rpt=o("__init__()"),tpt=o(" (throws an error)."),apt=l(),fa=a("div"),F(OR.$$.fragment),npt=l(),e$e=a("p"),spt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lpt=l(),tf=a("p"),ipt=o(`Note:
Loading a model from its configuration file does `),o$e=a("strong"),dpt=o("not"),cpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rse=a("a"),mpt=o("from_pretrained()"),fpt=o(" to load the model weights."),gpt=l(),F(hL.$$.fragment),hpt=l(),at=a("div"),F(VR.$$.fragment),upt=l(),r$e=a("p"),ppt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_pt=l(),Wn=a("p"),bpt=o("The model class to instantiate is selected based on the "),t$e=a("code"),vpt=o("model_type"),Fpt=o(` property of the config object (either
passed as an argument or loaded from `),a$e=a("code"),Tpt=o("pretrained_model_name_or_path"),Mpt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n$e=a("code"),Ept=o("pretrained_model_name_or_path"),Cpt=o(":"),wpt=l(),Re=a("ul"),uL=a("li"),s$e=a("strong"),Apt=o("albert"),Lpt=o(" \u2014 "),Pse=a("a"),ypt=o("FlaxAlbertForQuestionAnswering"),xpt=o(" (ALBERT model)"),$pt=l(),pL=a("li"),l$e=a("strong"),kpt=o("bart"),Spt=o(" \u2014 "),Bse=a("a"),Rpt=o("FlaxBartForQuestionAnswering"),Ppt=o(" (BART model)"),Bpt=l(),_L=a("li"),i$e=a("strong"),Ipt=o("bert"),Npt=o(" \u2014 "),Ise=a("a"),qpt=o("FlaxBertForQuestionAnswering"),jpt=o(" (BERT model)"),Dpt=l(),bL=a("li"),d$e=a("strong"),Gpt=o("big_bird"),Opt=o(" \u2014 "),Nse=a("a"),Vpt=o("FlaxBigBirdForQuestionAnswering"),Xpt=o(" (BigBird model)"),zpt=l(),vL=a("li"),c$e=a("strong"),Qpt=o("distilbert"),Wpt=o(" \u2014 "),qse=a("a"),Upt=o("FlaxDistilBertForQuestionAnswering"),Hpt=o(" (DistilBERT model)"),Jpt=l(),FL=a("li"),m$e=a("strong"),Ypt=o("electra"),Kpt=o(" \u2014 "),jse=a("a"),Zpt=o("FlaxElectraForQuestionAnswering"),e_t=o(" (ELECTRA model)"),o_t=l(),TL=a("li"),f$e=a("strong"),r_t=o("mbart"),t_t=o(" \u2014 "),Dse=a("a"),a_t=o("FlaxMBartForQuestionAnswering"),n_t=o(" (mBART model)"),s_t=l(),ML=a("li"),g$e=a("strong"),l_t=o("roberta"),i_t=o(" \u2014 "),Gse=a("a"),d_t=o("FlaxRobertaForQuestionAnswering"),c_t=o(" (RoBERTa model)"),m_t=l(),EL=a("li"),h$e=a("strong"),f_t=o("roformer"),g_t=o(" \u2014 "),Ose=a("a"),h_t=o("FlaxRoFormerForQuestionAnswering"),u_t=o(" (RoFormer model)"),p_t=l(),CL=a("li"),u$e=a("strong"),__t=o("xlm-roberta"),b_t=o(" \u2014 "),Vse=a("a"),v_t=o("FlaxXLMRobertaForQuestionAnswering"),F_t=o(" (XLM-RoBERTa model)"),T_t=l(),F(wL.$$.fragment),zeo=l(),af=a("h2"),AL=a("a"),p$e=a("span"),F(XR.$$.fragment),M_t=l(),_$e=a("span"),E_t=o("FlaxAutoModelForTokenClassification"),Qeo=l(),xr=a("div"),F(zR.$$.fragment),C_t=l(),nf=a("p"),w_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xse=a("a"),A_t=o("from_pretrained()"),L_t=o(" class method or the "),zse=a("a"),y_t=o("from_config()"),x_t=o(` class
method.`),$_t=l(),QR=a("p"),k_t=o("This class cannot be instantiated directly using "),b$e=a("code"),S_t=o("__init__()"),R_t=o(" (throws an error)."),P_t=l(),ga=a("div"),F(WR.$$.fragment),B_t=l(),v$e=a("p"),I_t=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N_t=l(),sf=a("p"),q_t=o(`Note:
Loading a model from its configuration file does `),F$e=a("strong"),j_t=o("not"),D_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qse=a("a"),G_t=o("from_pretrained()"),O_t=o(" to load the model weights."),V_t=l(),F(LL.$$.fragment),X_t=l(),nt=a("div"),F(UR.$$.fragment),z_t=l(),T$e=a("p"),Q_t=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W_t=l(),Un=a("p"),U_t=o("The model class to instantiate is selected based on the "),M$e=a("code"),H_t=o("model_type"),J_t=o(` property of the config object (either
passed as an argument or loaded from `),E$e=a("code"),Y_t=o("pretrained_model_name_or_path"),K_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C$e=a("code"),Z_t=o("pretrained_model_name_or_path"),ebt=o(":"),obt=l(),Xe=a("ul"),yL=a("li"),w$e=a("strong"),rbt=o("albert"),tbt=o(" \u2014 "),Wse=a("a"),abt=o("FlaxAlbertForTokenClassification"),nbt=o(" (ALBERT model)"),sbt=l(),xL=a("li"),A$e=a("strong"),lbt=o("bert"),ibt=o(" \u2014 "),Use=a("a"),dbt=o("FlaxBertForTokenClassification"),cbt=o(" (BERT model)"),mbt=l(),$L=a("li"),L$e=a("strong"),fbt=o("big_bird"),gbt=o(" \u2014 "),Hse=a("a"),hbt=o("FlaxBigBirdForTokenClassification"),ubt=o(" (BigBird model)"),pbt=l(),kL=a("li"),y$e=a("strong"),_bt=o("distilbert"),bbt=o(" \u2014 "),Jse=a("a"),vbt=o("FlaxDistilBertForTokenClassification"),Fbt=o(" (DistilBERT model)"),Tbt=l(),SL=a("li"),x$e=a("strong"),Mbt=o("electra"),Ebt=o(" \u2014 "),Yse=a("a"),Cbt=o("FlaxElectraForTokenClassification"),wbt=o(" (ELECTRA model)"),Abt=l(),RL=a("li"),$$e=a("strong"),Lbt=o("roberta"),ybt=o(" \u2014 "),Kse=a("a"),xbt=o("FlaxRobertaForTokenClassification"),$bt=o(" (RoBERTa model)"),kbt=l(),PL=a("li"),k$e=a("strong"),Sbt=o("roformer"),Rbt=o(" \u2014 "),Zse=a("a"),Pbt=o("FlaxRoFormerForTokenClassification"),Bbt=o(" (RoFormer model)"),Ibt=l(),BL=a("li"),S$e=a("strong"),Nbt=o("xlm-roberta"),qbt=o(" \u2014 "),ele=a("a"),jbt=o("FlaxXLMRobertaForTokenClassification"),Dbt=o(" (XLM-RoBERTa model)"),Gbt=l(),F(IL.$$.fragment),Weo=l(),lf=a("h2"),NL=a("a"),R$e=a("span"),F(HR.$$.fragment),Obt=l(),P$e=a("span"),Vbt=o("FlaxAutoModelForMultipleChoice"),Ueo=l(),$r=a("div"),F(JR.$$.fragment),Xbt=l(),df=a("p"),zbt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ole=a("a"),Qbt=o("from_pretrained()"),Wbt=o(" class method or the "),rle=a("a"),Ubt=o("from_config()"),Hbt=o(` class
method.`),Jbt=l(),YR=a("p"),Ybt=o("This class cannot be instantiated directly using "),B$e=a("code"),Kbt=o("__init__()"),Zbt=o(" (throws an error)."),e2t=l(),ha=a("div"),F(KR.$$.fragment),o2t=l(),I$e=a("p"),r2t=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t2t=l(),cf=a("p"),a2t=o(`Note:
Loading a model from its configuration file does `),N$e=a("strong"),n2t=o("not"),s2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tle=a("a"),l2t=o("from_pretrained()"),i2t=o(" to load the model weights."),d2t=l(),F(qL.$$.fragment),c2t=l(),st=a("div"),F(ZR.$$.fragment),m2t=l(),q$e=a("p"),f2t=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g2t=l(),Hn=a("p"),h2t=o("The model class to instantiate is selected based on the "),j$e=a("code"),u2t=o("model_type"),p2t=o(` property of the config object (either
passed as an argument or loaded from `),D$e=a("code"),_2t=o("pretrained_model_name_or_path"),b2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G$e=a("code"),v2t=o("pretrained_model_name_or_path"),F2t=o(":"),T2t=l(),ze=a("ul"),jL=a("li"),O$e=a("strong"),M2t=o("albert"),E2t=o(" \u2014 "),ale=a("a"),C2t=o("FlaxAlbertForMultipleChoice"),w2t=o(" (ALBERT model)"),A2t=l(),DL=a("li"),V$e=a("strong"),L2t=o("bert"),y2t=o(" \u2014 "),nle=a("a"),x2t=o("FlaxBertForMultipleChoice"),$2t=o(" (BERT model)"),k2t=l(),GL=a("li"),X$e=a("strong"),S2t=o("big_bird"),R2t=o(" \u2014 "),sle=a("a"),P2t=o("FlaxBigBirdForMultipleChoice"),B2t=o(" (BigBird model)"),I2t=l(),OL=a("li"),z$e=a("strong"),N2t=o("distilbert"),q2t=o(" \u2014 "),lle=a("a"),j2t=o("FlaxDistilBertForMultipleChoice"),D2t=o(" (DistilBERT model)"),G2t=l(),VL=a("li"),Q$e=a("strong"),O2t=o("electra"),V2t=o(" \u2014 "),ile=a("a"),X2t=o("FlaxElectraForMultipleChoice"),z2t=o(" (ELECTRA model)"),Q2t=l(),XL=a("li"),W$e=a("strong"),W2t=o("roberta"),U2t=o(" \u2014 "),dle=a("a"),H2t=o("FlaxRobertaForMultipleChoice"),J2t=o(" (RoBERTa model)"),Y2t=l(),zL=a("li"),U$e=a("strong"),K2t=o("roformer"),Z2t=o(" \u2014 "),cle=a("a"),e1t=o("FlaxRoFormerForMultipleChoice"),o1t=o(" (RoFormer model)"),r1t=l(),QL=a("li"),H$e=a("strong"),t1t=o("xlm-roberta"),a1t=o(" \u2014 "),mle=a("a"),n1t=o("FlaxXLMRobertaForMultipleChoice"),s1t=o(" (XLM-RoBERTa model)"),l1t=l(),F(WL.$$.fragment),Heo=l(),mf=a("h2"),UL=a("a"),J$e=a("span"),F(eP.$$.fragment),i1t=l(),Y$e=a("span"),d1t=o("FlaxAutoModelForNextSentencePrediction"),Jeo=l(),kr=a("div"),F(oP.$$.fragment),c1t=l(),ff=a("p"),m1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fle=a("a"),f1t=o("from_pretrained()"),g1t=o(" class method or the "),gle=a("a"),h1t=o("from_config()"),u1t=o(` class
method.`),p1t=l(),rP=a("p"),_1t=o("This class cannot be instantiated directly using "),K$e=a("code"),b1t=o("__init__()"),v1t=o(" (throws an error)."),F1t=l(),ua=a("div"),F(tP.$$.fragment),T1t=l(),Z$e=a("p"),M1t=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E1t=l(),gf=a("p"),C1t=o(`Note:
Loading a model from its configuration file does `),eke=a("strong"),w1t=o("not"),A1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hle=a("a"),L1t=o("from_pretrained()"),y1t=o(" to load the model weights."),x1t=l(),F(HL.$$.fragment),$1t=l(),lt=a("div"),F(aP.$$.fragment),k1t=l(),oke=a("p"),S1t=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),R1t=l(),Jn=a("p"),P1t=o("The model class to instantiate is selected based on the "),rke=a("code"),B1t=o("model_type"),I1t=o(` property of the config object (either
passed as an argument or loaded from `),tke=a("code"),N1t=o("pretrained_model_name_or_path"),q1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ake=a("code"),j1t=o("pretrained_model_name_or_path"),D1t=o(":"),G1t=l(),nke=a("ul"),JL=a("li"),ske=a("strong"),O1t=o("bert"),V1t=o(" \u2014 "),ule=a("a"),X1t=o("FlaxBertForNextSentencePrediction"),z1t=o(" (BERT model)"),Q1t=l(),F(YL.$$.fragment),Yeo=l(),hf=a("h2"),KL=a("a"),lke=a("span"),F(nP.$$.fragment),W1t=l(),ike=a("span"),U1t=o("FlaxAutoModelForImageClassification"),Keo=l(),Sr=a("div"),F(sP.$$.fragment),H1t=l(),uf=a("p"),J1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ple=a("a"),Y1t=o("from_pretrained()"),K1t=o(" class method or the "),_le=a("a"),Z1t=o("from_config()"),evt=o(` class
method.`),ovt=l(),lP=a("p"),rvt=o("This class cannot be instantiated directly using "),dke=a("code"),tvt=o("__init__()"),avt=o(" (throws an error)."),nvt=l(),pa=a("div"),F(iP.$$.fragment),svt=l(),cke=a("p"),lvt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ivt=l(),pf=a("p"),dvt=o(`Note:
Loading a model from its configuration file does `),mke=a("strong"),cvt=o("not"),mvt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=a("a"),fvt=o("from_pretrained()"),gvt=o(" to load the model weights."),hvt=l(),F(ZL.$$.fragment),uvt=l(),it=a("div"),F(dP.$$.fragment),pvt=l(),fke=a("p"),_vt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bvt=l(),Yn=a("p"),vvt=o("The model class to instantiate is selected based on the "),gke=a("code"),Fvt=o("model_type"),Tvt=o(` property of the config object (either
passed as an argument or loaded from `),hke=a("code"),Mvt=o("pretrained_model_name_or_path"),Evt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uke=a("code"),Cvt=o("pretrained_model_name_or_path"),wvt=o(":"),Avt=l(),cP=a("ul"),ey=a("li"),pke=a("strong"),Lvt=o("beit"),yvt=o(" \u2014 "),vle=a("a"),xvt=o("FlaxBeitForImageClassification"),$vt=o(" (BEiT model)"),kvt=l(),oy=a("li"),_ke=a("strong"),Svt=o("vit"),Rvt=o(" \u2014 "),Fle=a("a"),Pvt=o("FlaxViTForImageClassification"),Bvt=o(" (ViT model)"),Ivt=l(),F(ry.$$.fragment),Zeo=l(),_f=a("h2"),ty=a("a"),bke=a("span"),F(mP.$$.fragment),Nvt=l(),vke=a("span"),qvt=o("FlaxAutoModelForVision2Seq"),eoo=l(),Rr=a("div"),F(fP.$$.fragment),jvt=l(),bf=a("p"),Dvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Tle=a("a"),Gvt=o("from_pretrained()"),Ovt=o(" class method or the "),Mle=a("a"),Vvt=o("from_config()"),Xvt=o(` class
method.`),zvt=l(),gP=a("p"),Qvt=o("This class cannot be instantiated directly using "),Fke=a("code"),Wvt=o("__init__()"),Uvt=o(" (throws an error)."),Hvt=l(),_a=a("div"),F(hP.$$.fragment),Jvt=l(),Tke=a("p"),Yvt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kvt=l(),vf=a("p"),Zvt=o(`Note:
Loading a model from its configuration file does `),Mke=a("strong"),eFt=o("not"),oFt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ele=a("a"),rFt=o("from_pretrained()"),tFt=o(" to load the model weights."),aFt=l(),F(ay.$$.fragment),nFt=l(),dt=a("div"),F(uP.$$.fragment),sFt=l(),Eke=a("p"),lFt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iFt=l(),Kn=a("p"),dFt=o("The model class to instantiate is selected based on the "),Cke=a("code"),cFt=o("model_type"),mFt=o(` property of the config object (either
passed as an argument or loaded from `),wke=a("code"),fFt=o("pretrained_model_name_or_path"),gFt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ake=a("code"),hFt=o("pretrained_model_name_or_path"),uFt=o(":"),pFt=l(),Lke=a("ul"),ny=a("li"),yke=a("strong"),_Ft=o("vision-encoder-decoder"),bFt=o(" \u2014 "),Cle=a("a"),vFt=o("FlaxVisionEncoderDecoderModel"),FFt=o(" (Vision Encoder decoder model)"),TFt=l(),F(sy.$$.fragment),this.h()},l(m){const _=Zua('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var pP=s(u);f=n(pP,"A",{id:!0,class:!0,href:!0});var xke=s(f);p=n(xke,"SPAN",{});var $ke=s(p);T(d.$$.fragment,$ke),$ke.forEach(t),xke.forEach(t),h=i(pP),yo=n(pP,"SPAN",{});var kke=s(yo);td=r(kke,"Auto Classes"),kke.forEach(t),pP.forEach(t),Ef=i(m),pt=n(m,"P",{});var _P=s(pt);ad=r(_P,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=n(_P,"CODE",{});var Ske=s(nd);N9=r(Ske,"from_pretrained()"),Ske.forEach(t),Cf=r(_P,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_P.forEach(t),Ve=i(m),He=n(m,"P",{});var Zn=s(He);sd=r(Zn,"Instantiating one of "),es=n(Zn,"A",{href:!0});var Rke=s(es);q9=r(Rke,"AutoConfig"),Rke.forEach(t),os=r(Zn,", "),rs=n(Zn,"A",{href:!0});var Pke=s(rs);j9=r(Pke,"AutoModel"),Pke.forEach(t),ld=r(Zn,`, and
`),ts=n(Zn,"A",{href:!0});var Bke=s(ts);D9=r(Bke,"AutoTokenizer"),Bke.forEach(t),id=r(Zn," will directly create a class of the relevant architecture. For instance"),Zn.forEach(t),wf=i(m),T(Qa.$$.fragment,m),Je=i(m),Ae=n(m,"P",{});var bP=s(Ae);GB=r(bP,"will create a model that is an instance of "),dd=n(bP,"A",{href:!0});var Ike=s(dd);OB=r(Ike,"BertModel"),Ike.forEach(t),VB=r(bP,"."),bP.forEach(t),xo=i(m),Wa=n(m,"P",{});var vP=s(Wa);XB=r(vP,"There is one class of "),Af=n(vP,"CODE",{});var Nke=s(Af);zB=r(Nke,"AutoModel"),Nke.forEach(t),bto=r(vP," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vP.forEach(t),OKe=i(m),cd=n(m,"H2",{class:!0});var FP=s(cd);Lf=n(FP,"A",{id:!0,class:!0,href:!0});var qke=s(Lf);yde=n(qke,"SPAN",{});var jke=s(yde);T(G9.$$.fragment,jke),jke.forEach(t),qke.forEach(t),vto=i(FP),xde=n(FP,"SPAN",{});var Dke=s(xde);Fto=r(Dke,"Extending the Auto Classes"),Dke.forEach(t),FP.forEach(t),VKe=i(m),as=n(m,"P",{});var Ff=s(as);Tto=r(Ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$de=n(Ff,"CODE",{});var Gke=s($de);Mto=r(Gke,"NewModel"),Gke.forEach(t),Eto=r(Ff,", make sure you have a "),kde=n(Ff,"CODE",{});var Oke=s(kde);Cto=r(Oke,"NewModelConfig"),Oke.forEach(t),wto=r(Ff,` then you can add those to the auto
classes like this:`),Ff.forEach(t),XKe=i(m),T(O9.$$.fragment,m),zKe=i(m),QB=n(m,"P",{});var Vke=s(QB);Ato=r(Vke,"You will then be able to use the auto classes like you would usually do!"),Vke.forEach(t),QKe=i(m),T(yf.$$.fragment,m),WKe=i(m),md=n(m,"H2",{class:!0});var TP=s(md);xf=n(TP,"A",{id:!0,class:!0,href:!0});var Xke=s(xf);Sde=n(Xke,"SPAN",{});var zke=s(Sde);T(V9.$$.fragment,zke),zke.forEach(t),Xke.forEach(t),Lto=i(TP),Rde=n(TP,"SPAN",{});var Qke=s(Rde);yto=r(Qke,"AutoConfig"),Qke.forEach(t),TP.forEach(t),UKe=i(m),$o=n(m,"DIV",{class:!0});var ht=s($o);T(X9.$$.fragment,ht),xto=i(ht),z9=n(ht,"P",{});var MP=s(z9);$to=r(MP,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),WB=n(MP,"A",{href:!0});var Wke=s(WB);kto=r(Wke,"from_pretrained()"),Wke.forEach(t),Sto=r(MP," class method."),MP.forEach(t),Rto=i(ht),Q9=n(ht,"P",{});var EP=s(Q9);Pto=r(EP,"This class cannot be instantiated directly using "),Pde=n(EP,"CODE",{});var Uke=s(Pde);Bto=r(Uke,"__init__()"),Uke.forEach(t),Ito=r(EP," (throws an error)."),EP.forEach(t),Nto=i(ht),Pr=n(ht,"DIV",{class:!0});var ut=s(Pr);T(W9.$$.fragment,ut),qto=i(ut),Bde=n(ut,"P",{});var Hke=s(Bde);jto=r(Hke,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Hke.forEach(t),Dto=i(ut),fd=n(ut,"P",{});var Tf=s(fd);Gto=r(Tf,"The configuration class to instantiate is selected based on the "),Ide=n(Tf,"CODE",{});var Jke=s(Ide);Oto=r(Jke,"model_type"),Jke.forEach(t),Vto=r(Tf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nde=n(Tf,"CODE",{});var Yke=s(Nde);Xto=r(Yke,"pretrained_model_name_or_path"),Yke.forEach(t),zto=r(Tf,":"),Tf.forEach(t),Qto=i(ut),A=n(ut,"UL",{});var L=s(A);$f=n(L,"LI",{});var ly=s($f);qde=n(ly,"STRONG",{});var Kke=s(qde);Wto=r(Kke,"albert"),Kke.forEach(t),Uto=r(ly," \u2014 "),UB=n(ly,"A",{href:!0});var Zke=s(UB);Hto=r(Zke,"AlbertConfig"),Zke.forEach(t),Jto=r(ly," (ALBERT model)"),ly.forEach(t),Yto=i(L),kf=n(L,"LI",{});var iy=s(kf);jde=n(iy,"STRONG",{});var eSe=s(jde);Kto=r(eSe,"bart"),eSe.forEach(t),Zto=r(iy," \u2014 "),HB=n(iy,"A",{href:!0});var oSe=s(HB);eao=r(oSe,"BartConfig"),oSe.forEach(t),oao=r(iy," (BART model)"),iy.forEach(t),rao=i(L),Sf=n(L,"LI",{});var dy=s(Sf);Dde=n(dy,"STRONG",{});var rSe=s(Dde);tao=r(rSe,"beit"),rSe.forEach(t),aao=r(dy," \u2014 "),JB=n(dy,"A",{href:!0});var tSe=s(JB);nao=r(tSe,"BeitConfig"),tSe.forEach(t),sao=r(dy," (BEiT model)"),dy.forEach(t),lao=i(L),Rf=n(L,"LI",{});var cy=s(Rf);Gde=n(cy,"STRONG",{});var aSe=s(Gde);iao=r(aSe,"bert"),aSe.forEach(t),dao=r(cy," \u2014 "),YB=n(cy,"A",{href:!0});var nSe=s(YB);cao=r(nSe,"BertConfig"),nSe.forEach(t),mao=r(cy," (BERT model)"),cy.forEach(t),fao=i(L),Pf=n(L,"LI",{});var my=s(Pf);Ode=n(my,"STRONG",{});var sSe=s(Ode);gao=r(sSe,"bert-generation"),sSe.forEach(t),hao=r(my," \u2014 "),KB=n(my,"A",{href:!0});var lSe=s(KB);uao=r(lSe,"BertGenerationConfig"),lSe.forEach(t),pao=r(my," (Bert Generation model)"),my.forEach(t),_ao=i(L),Bf=n(L,"LI",{});var fy=s(Bf);Vde=n(fy,"STRONG",{});var iSe=s(Vde);bao=r(iSe,"big_bird"),iSe.forEach(t),vao=r(fy," \u2014 "),ZB=n(fy,"A",{href:!0});var dSe=s(ZB);Fao=r(dSe,"BigBirdConfig"),dSe.forEach(t),Tao=r(fy," (BigBird model)"),fy.forEach(t),Mao=i(L),If=n(L,"LI",{});var gy=s(If);Xde=n(gy,"STRONG",{});var cSe=s(Xde);Eao=r(cSe,"bigbird_pegasus"),cSe.forEach(t),Cao=r(gy," \u2014 "),eI=n(gy,"A",{href:!0});var mSe=s(eI);wao=r(mSe,"BigBirdPegasusConfig"),mSe.forEach(t),Aao=r(gy," (BigBird-Pegasus model)"),gy.forEach(t),Lao=i(L),Nf=n(L,"LI",{});var hy=s(Nf);zde=n(hy,"STRONG",{});var fSe=s(zde);yao=r(fSe,"blenderbot"),fSe.forEach(t),xao=r(hy," \u2014 "),oI=n(hy,"A",{href:!0});var gSe=s(oI);$ao=r(gSe,"BlenderbotConfig"),gSe.forEach(t),kao=r(hy," (Blenderbot model)"),hy.forEach(t),Sao=i(L),qf=n(L,"LI",{});var uy=s(qf);Qde=n(uy,"STRONG",{});var hSe=s(Qde);Rao=r(hSe,"blenderbot-small"),hSe.forEach(t),Pao=r(uy," \u2014 "),rI=n(uy,"A",{href:!0});var uSe=s(rI);Bao=r(uSe,"BlenderbotSmallConfig"),uSe.forEach(t),Iao=r(uy," (BlenderbotSmall model)"),uy.forEach(t),Nao=i(L),jf=n(L,"LI",{});var py=s(jf);Wde=n(py,"STRONG",{});var pSe=s(Wde);qao=r(pSe,"bloom"),pSe.forEach(t),jao=r(py," \u2014 "),tI=n(py,"A",{href:!0});var _Se=s(tI);Dao=r(_Se,"BloomConfig"),_Se.forEach(t),Gao=r(py," (BLOOM model)"),py.forEach(t),Oao=i(L),Df=n(L,"LI",{});var _y=s(Df);Ude=n(_y,"STRONG",{});var bSe=s(Ude);Vao=r(bSe,"camembert"),bSe.forEach(t),Xao=r(_y," \u2014 "),aI=n(_y,"A",{href:!0});var vSe=s(aI);zao=r(vSe,"CamembertConfig"),vSe.forEach(t),Qao=r(_y," (CamemBERT model)"),_y.forEach(t),Wao=i(L),Gf=n(L,"LI",{});var by=s(Gf);Hde=n(by,"STRONG",{});var FSe=s(Hde);Uao=r(FSe,"canine"),FSe.forEach(t),Hao=r(by," \u2014 "),nI=n(by,"A",{href:!0});var TSe=s(nI);Jao=r(TSe,"CanineConfig"),TSe.forEach(t),Yao=r(by," (CANINE model)"),by.forEach(t),Kao=i(L),Of=n(L,"LI",{});var vy=s(Of);Jde=n(vy,"STRONG",{});var MSe=s(Jde);Zao=r(MSe,"clip"),MSe.forEach(t),eno=r(vy," \u2014 "),sI=n(vy,"A",{href:!0});var ESe=s(sI);ono=r(ESe,"CLIPConfig"),ESe.forEach(t),rno=r(vy," (CLIP model)"),vy.forEach(t),tno=i(L),Vf=n(L,"LI",{});var Fy=s(Vf);Yde=n(Fy,"STRONG",{});var CSe=s(Yde);ano=r(CSe,"codegen"),CSe.forEach(t),nno=r(Fy," \u2014 "),lI=n(Fy,"A",{href:!0});var wSe=s(lI);sno=r(wSe,"CodeGenConfig"),wSe.forEach(t),lno=r(Fy," (CodeGen model)"),Fy.forEach(t),ino=i(L),Xf=n(L,"LI",{});var Ty=s(Xf);Kde=n(Ty,"STRONG",{});var ASe=s(Kde);dno=r(ASe,"conditional_detr"),ASe.forEach(t),cno=r(Ty," \u2014 "),iI=n(Ty,"A",{href:!0});var LSe=s(iI);mno=r(LSe,"ConditionalDetrConfig"),LSe.forEach(t),fno=r(Ty," (Conditional DETR model)"),Ty.forEach(t),gno=i(L),zf=n(L,"LI",{});var My=s(zf);Zde=n(My,"STRONG",{});var ySe=s(Zde);hno=r(ySe,"convbert"),ySe.forEach(t),uno=r(My," \u2014 "),dI=n(My,"A",{href:!0});var xSe=s(dI);pno=r(xSe,"ConvBertConfig"),xSe.forEach(t),_no=r(My," (ConvBERT model)"),My.forEach(t),bno=i(L),Qf=n(L,"LI",{});var Ey=s(Qf);ece=n(Ey,"STRONG",{});var $Se=s(ece);vno=r($Se,"convnext"),$Se.forEach(t),Fno=r(Ey," \u2014 "),cI=n(Ey,"A",{href:!0});var kSe=s(cI);Tno=r(kSe,"ConvNextConfig"),kSe.forEach(t),Mno=r(Ey," (ConvNeXT model)"),Ey.forEach(t),Eno=i(L),Wf=n(L,"LI",{});var Cy=s(Wf);oce=n(Cy,"STRONG",{});var SSe=s(oce);Cno=r(SSe,"ctrl"),SSe.forEach(t),wno=r(Cy," \u2014 "),mI=n(Cy,"A",{href:!0});var RSe=s(mI);Ano=r(RSe,"CTRLConfig"),RSe.forEach(t),Lno=r(Cy," (CTRL model)"),Cy.forEach(t),yno=i(L),Uf=n(L,"LI",{});var wy=s(Uf);rce=n(wy,"STRONG",{});var PSe=s(rce);xno=r(PSe,"cvt"),PSe.forEach(t),$no=r(wy," \u2014 "),fI=n(wy,"A",{href:!0});var BSe=s(fI);kno=r(BSe,"CvtConfig"),BSe.forEach(t),Sno=r(wy," (CvT model)"),wy.forEach(t),Rno=i(L),Hf=n(L,"LI",{});var Ay=s(Hf);tce=n(Ay,"STRONG",{});var ISe=s(tce);Pno=r(ISe,"data2vec-audio"),ISe.forEach(t),Bno=r(Ay," \u2014 "),gI=n(Ay,"A",{href:!0});var NSe=s(gI);Ino=r(NSe,"Data2VecAudioConfig"),NSe.forEach(t),Nno=r(Ay," (Data2VecAudio model)"),Ay.forEach(t),qno=i(L),Jf=n(L,"LI",{});var Ly=s(Jf);ace=n(Ly,"STRONG",{});var qSe=s(ace);jno=r(qSe,"data2vec-text"),qSe.forEach(t),Dno=r(Ly," \u2014 "),hI=n(Ly,"A",{href:!0});var jSe=s(hI);Gno=r(jSe,"Data2VecTextConfig"),jSe.forEach(t),Ono=r(Ly," (Data2VecText model)"),Ly.forEach(t),Vno=i(L),Yf=n(L,"LI",{});var yy=s(Yf);nce=n(yy,"STRONG",{});var DSe=s(nce);Xno=r(DSe,"data2vec-vision"),DSe.forEach(t),zno=r(yy," \u2014 "),uI=n(yy,"A",{href:!0});var GSe=s(uI);Qno=r(GSe,"Data2VecVisionConfig"),GSe.forEach(t),Wno=r(yy," (Data2VecVision model)"),yy.forEach(t),Uno=i(L),Kf=n(L,"LI",{});var xy=s(Kf);sce=n(xy,"STRONG",{});var OSe=s(sce);Hno=r(OSe,"deberta"),OSe.forEach(t),Jno=r(xy," \u2014 "),pI=n(xy,"A",{href:!0});var VSe=s(pI);Yno=r(VSe,"DebertaConfig"),VSe.forEach(t),Kno=r(xy," (DeBERTa model)"),xy.forEach(t),Zno=i(L),Zf=n(L,"LI",{});var $y=s(Zf);lce=n($y,"STRONG",{});var XSe=s(lce);eso=r(XSe,"deberta-v2"),XSe.forEach(t),oso=r($y," \u2014 "),_I=n($y,"A",{href:!0});var zSe=s(_I);rso=r(zSe,"DebertaV2Config"),zSe.forEach(t),tso=r($y," (DeBERTa-v2 model)"),$y.forEach(t),aso=i(L),eg=n(L,"LI",{});var ky=s(eg);ice=n(ky,"STRONG",{});var QSe=s(ice);nso=r(QSe,"decision_transformer"),QSe.forEach(t),sso=r(ky," \u2014 "),bI=n(ky,"A",{href:!0});var WSe=s(bI);lso=r(WSe,"DecisionTransformerConfig"),WSe.forEach(t),iso=r(ky," (Decision Transformer model)"),ky.forEach(t),dso=i(L),og=n(L,"LI",{});var Sy=s(og);dce=n(Sy,"STRONG",{});var USe=s(dce);cso=r(USe,"deformable_detr"),USe.forEach(t),mso=r(Sy," \u2014 "),vI=n(Sy,"A",{href:!0});var HSe=s(vI);fso=r(HSe,"DeformableDetrConfig"),HSe.forEach(t),gso=r(Sy," (Deformable DETR model)"),Sy.forEach(t),hso=i(L),rg=n(L,"LI",{});var JSe=s(rg);cce=n(JSe,"STRONG",{});var EFt=s(cce);uso=r(EFt,"deit"),EFt.forEach(t),pso=r(JSe," \u2014 "),FI=n(JSe,"A",{href:!0});var CFt=s(FI);_so=r(CFt,"DeiTConfig"),CFt.forEach(t),bso=r(JSe," (DeiT model)"),JSe.forEach(t),vso=i(L),tg=n(L,"LI",{});var YSe=s(tg);mce=n(YSe,"STRONG",{});var wFt=s(mce);Fso=r(wFt,"detr"),wFt.forEach(t),Tso=r(YSe," \u2014 "),TI=n(YSe,"A",{href:!0});var AFt=s(TI);Mso=r(AFt,"DetrConfig"),AFt.forEach(t),Eso=r(YSe," (DETR model)"),YSe.forEach(t),Cso=i(L),ag=n(L,"LI",{});var KSe=s(ag);fce=n(KSe,"STRONG",{});var LFt=s(fce);wso=r(LFt,"distilbert"),LFt.forEach(t),Aso=r(KSe," \u2014 "),MI=n(KSe,"A",{href:!0});var yFt=s(MI);Lso=r(yFt,"DistilBertConfig"),yFt.forEach(t),yso=r(KSe," (DistilBERT model)"),KSe.forEach(t),xso=i(L),ng=n(L,"LI",{});var ZSe=s(ng);gce=n(ZSe,"STRONG",{});var xFt=s(gce);$so=r(xFt,"donut-swin"),xFt.forEach(t),kso=r(ZSe," \u2014 "),EI=n(ZSe,"A",{href:!0});var $Ft=s(EI);Sso=r($Ft,"DonutSwinConfig"),$Ft.forEach(t),Rso=r(ZSe," (DonutSwin model)"),ZSe.forEach(t),Pso=i(L),sg=n(L,"LI",{});var eRe=s(sg);hce=n(eRe,"STRONG",{});var kFt=s(hce);Bso=r(kFt,"dpr"),kFt.forEach(t),Iso=r(eRe," \u2014 "),CI=n(eRe,"A",{href:!0});var SFt=s(CI);Nso=r(SFt,"DPRConfig"),SFt.forEach(t),qso=r(eRe," (DPR model)"),eRe.forEach(t),jso=i(L),lg=n(L,"LI",{});var oRe=s(lg);uce=n(oRe,"STRONG",{});var RFt=s(uce);Dso=r(RFt,"dpt"),RFt.forEach(t),Gso=r(oRe," \u2014 "),wI=n(oRe,"A",{href:!0});var PFt=s(wI);Oso=r(PFt,"DPTConfig"),PFt.forEach(t),Vso=r(oRe," (DPT model)"),oRe.forEach(t),Xso=i(L),ig=n(L,"LI",{});var rRe=s(ig);pce=n(rRe,"STRONG",{});var BFt=s(pce);zso=r(BFt,"electra"),BFt.forEach(t),Qso=r(rRe," \u2014 "),AI=n(rRe,"A",{href:!0});var IFt=s(AI);Wso=r(IFt,"ElectraConfig"),IFt.forEach(t),Uso=r(rRe," (ELECTRA model)"),rRe.forEach(t),Hso=i(L),dg=n(L,"LI",{});var tRe=s(dg);_ce=n(tRe,"STRONG",{});var NFt=s(_ce);Jso=r(NFt,"encoder-decoder"),NFt.forEach(t),Yso=r(tRe," \u2014 "),LI=n(tRe,"A",{href:!0});var qFt=s(LI);Kso=r(qFt,"EncoderDecoderConfig"),qFt.forEach(t),Zso=r(tRe," (Encoder decoder model)"),tRe.forEach(t),elo=i(L),cg=n(L,"LI",{});var aRe=s(cg);bce=n(aRe,"STRONG",{});var jFt=s(bce);olo=r(jFt,"ernie"),jFt.forEach(t),rlo=r(aRe," \u2014 "),yI=n(aRe,"A",{href:!0});var DFt=s(yI);tlo=r(DFt,"ErnieConfig"),DFt.forEach(t),alo=r(aRe," (ERNIE model)"),aRe.forEach(t),nlo=i(L),mg=n(L,"LI",{});var nRe=s(mg);vce=n(nRe,"STRONG",{});var GFt=s(vce);slo=r(GFt,"flaubert"),GFt.forEach(t),llo=r(nRe," \u2014 "),xI=n(nRe,"A",{href:!0});var OFt=s(xI);ilo=r(OFt,"FlaubertConfig"),OFt.forEach(t),dlo=r(nRe," (FlauBERT model)"),nRe.forEach(t),clo=i(L),fg=n(L,"LI",{});var sRe=s(fg);Fce=n(sRe,"STRONG",{});var VFt=s(Fce);mlo=r(VFt,"flava"),VFt.forEach(t),flo=r(sRe," \u2014 "),$I=n(sRe,"A",{href:!0});var XFt=s($I);glo=r(XFt,"FlavaConfig"),XFt.forEach(t),hlo=r(sRe," (FLAVA model)"),sRe.forEach(t),ulo=i(L),gg=n(L,"LI",{});var lRe=s(gg);Tce=n(lRe,"STRONG",{});var zFt=s(Tce);plo=r(zFt,"fnet"),zFt.forEach(t),_lo=r(lRe," \u2014 "),kI=n(lRe,"A",{href:!0});var QFt=s(kI);blo=r(QFt,"FNetConfig"),QFt.forEach(t),vlo=r(lRe," (FNet model)"),lRe.forEach(t),Flo=i(L),hg=n(L,"LI",{});var iRe=s(hg);Mce=n(iRe,"STRONG",{});var WFt=s(Mce);Tlo=r(WFt,"fsmt"),WFt.forEach(t),Mlo=r(iRe," \u2014 "),SI=n(iRe,"A",{href:!0});var UFt=s(SI);Elo=r(UFt,"FSMTConfig"),UFt.forEach(t),Clo=r(iRe," (FairSeq Machine-Translation model)"),iRe.forEach(t),wlo=i(L),ug=n(L,"LI",{});var dRe=s(ug);Ece=n(dRe,"STRONG",{});var HFt=s(Ece);Alo=r(HFt,"funnel"),HFt.forEach(t),Llo=r(dRe," \u2014 "),RI=n(dRe,"A",{href:!0});var JFt=s(RI);ylo=r(JFt,"FunnelConfig"),JFt.forEach(t),xlo=r(dRe," (Funnel Transformer model)"),dRe.forEach(t),$lo=i(L),pg=n(L,"LI",{});var cRe=s(pg);Cce=n(cRe,"STRONG",{});var YFt=s(Cce);klo=r(YFt,"glpn"),YFt.forEach(t),Slo=r(cRe," \u2014 "),PI=n(cRe,"A",{href:!0});var KFt=s(PI);Rlo=r(KFt,"GLPNConfig"),KFt.forEach(t),Plo=r(cRe," (GLPN model)"),cRe.forEach(t),Blo=i(L),_g=n(L,"LI",{});var mRe=s(_g);wce=n(mRe,"STRONG",{});var ZFt=s(wce);Ilo=r(ZFt,"gpt2"),ZFt.forEach(t),Nlo=r(mRe," \u2014 "),BI=n(mRe,"A",{href:!0});var eTt=s(BI);qlo=r(eTt,"GPT2Config"),eTt.forEach(t),jlo=r(mRe," (OpenAI GPT-2 model)"),mRe.forEach(t),Dlo=i(L),bg=n(L,"LI",{});var fRe=s(bg);Ace=n(fRe,"STRONG",{});var oTt=s(Ace);Glo=r(oTt,"gpt_neo"),oTt.forEach(t),Olo=r(fRe," \u2014 "),II=n(fRe,"A",{href:!0});var rTt=s(II);Vlo=r(rTt,"GPTNeoConfig"),rTt.forEach(t),Xlo=r(fRe," (GPT Neo model)"),fRe.forEach(t),zlo=i(L),vg=n(L,"LI",{});var gRe=s(vg);Lce=n(gRe,"STRONG",{});var tTt=s(Lce);Qlo=r(tTt,"gpt_neox"),tTt.forEach(t),Wlo=r(gRe," \u2014 "),NI=n(gRe,"A",{href:!0});var aTt=s(NI);Ulo=r(aTt,"GPTNeoXConfig"),aTt.forEach(t),Hlo=r(gRe," (GPT NeoX model)"),gRe.forEach(t),Jlo=i(L),Fg=n(L,"LI",{});var hRe=s(Fg);yce=n(hRe,"STRONG",{});var nTt=s(yce);Ylo=r(nTt,"gpt_neox_japanese"),nTt.forEach(t),Klo=r(hRe," \u2014 "),qI=n(hRe,"A",{href:!0});var sTt=s(qI);Zlo=r(sTt,"GPTNeoXJapaneseConfig"),sTt.forEach(t),eio=r(hRe," (GPT NeoX Japanese model)"),hRe.forEach(t),oio=i(L),Tg=n(L,"LI",{});var uRe=s(Tg);xce=n(uRe,"STRONG",{});var lTt=s(xce);rio=r(lTt,"gptj"),lTt.forEach(t),tio=r(uRe," \u2014 "),jI=n(uRe,"A",{href:!0});var iTt=s(jI);aio=r(iTt,"GPTJConfig"),iTt.forEach(t),nio=r(uRe," (GPT-J model)"),uRe.forEach(t),sio=i(L),Mg=n(L,"LI",{});var pRe=s(Mg);$ce=n(pRe,"STRONG",{});var dTt=s($ce);lio=r(dTt,"groupvit"),dTt.forEach(t),iio=r(pRe," \u2014 "),DI=n(pRe,"A",{href:!0});var cTt=s(DI);dio=r(cTt,"GroupViTConfig"),cTt.forEach(t),cio=r(pRe," (GroupViT model)"),pRe.forEach(t),mio=i(L),Eg=n(L,"LI",{});var _Re=s(Eg);kce=n(_Re,"STRONG",{});var mTt=s(kce);fio=r(mTt,"hubert"),mTt.forEach(t),gio=r(_Re," \u2014 "),GI=n(_Re,"A",{href:!0});var fTt=s(GI);hio=r(fTt,"HubertConfig"),fTt.forEach(t),uio=r(_Re," (Hubert model)"),_Re.forEach(t),pio=i(L),Cg=n(L,"LI",{});var bRe=s(Cg);Sce=n(bRe,"STRONG",{});var gTt=s(Sce);_io=r(gTt,"ibert"),gTt.forEach(t),bio=r(bRe," \u2014 "),OI=n(bRe,"A",{href:!0});var hTt=s(OI);vio=r(hTt,"IBertConfig"),hTt.forEach(t),Fio=r(bRe," (I-BERT model)"),bRe.forEach(t),Tio=i(L),wg=n(L,"LI",{});var vRe=s(wg);Rce=n(vRe,"STRONG",{});var uTt=s(Rce);Mio=r(uTt,"imagegpt"),uTt.forEach(t),Eio=r(vRe," \u2014 "),VI=n(vRe,"A",{href:!0});var pTt=s(VI);Cio=r(pTt,"ImageGPTConfig"),pTt.forEach(t),wio=r(vRe," (ImageGPT model)"),vRe.forEach(t),Aio=i(L),Ag=n(L,"LI",{});var FRe=s(Ag);Pce=n(FRe,"STRONG",{});var _Tt=s(Pce);Lio=r(_Tt,"layoutlm"),_Tt.forEach(t),yio=r(FRe," \u2014 "),XI=n(FRe,"A",{href:!0});var bTt=s(XI);xio=r(bTt,"LayoutLMConfig"),bTt.forEach(t),$io=r(FRe," (LayoutLM model)"),FRe.forEach(t),kio=i(L),Lg=n(L,"LI",{});var TRe=s(Lg);Bce=n(TRe,"STRONG",{});var vTt=s(Bce);Sio=r(vTt,"layoutlmv2"),vTt.forEach(t),Rio=r(TRe," \u2014 "),zI=n(TRe,"A",{href:!0});var FTt=s(zI);Pio=r(FTt,"LayoutLMv2Config"),FTt.forEach(t),Bio=r(TRe," (LayoutLMv2 model)"),TRe.forEach(t),Iio=i(L),yg=n(L,"LI",{});var MRe=s(yg);Ice=n(MRe,"STRONG",{});var TTt=s(Ice);Nio=r(TTt,"layoutlmv3"),TTt.forEach(t),qio=r(MRe," \u2014 "),QI=n(MRe,"A",{href:!0});var MTt=s(QI);jio=r(MTt,"LayoutLMv3Config"),MTt.forEach(t),Dio=r(MRe," (LayoutLMv3 model)"),MRe.forEach(t),Gio=i(L),xg=n(L,"LI",{});var ERe=s(xg);Nce=n(ERe,"STRONG",{});var ETt=s(Nce);Oio=r(ETt,"led"),ETt.forEach(t),Vio=r(ERe," \u2014 "),WI=n(ERe,"A",{href:!0});var CTt=s(WI);Xio=r(CTt,"LEDConfig"),CTt.forEach(t),zio=r(ERe," (LED model)"),ERe.forEach(t),Qio=i(L),$g=n(L,"LI",{});var CRe=s($g);qce=n(CRe,"STRONG",{});var wTt=s(qce);Wio=r(wTt,"levit"),wTt.forEach(t),Uio=r(CRe," \u2014 "),UI=n(CRe,"A",{href:!0});var ATt=s(UI);Hio=r(ATt,"LevitConfig"),ATt.forEach(t),Jio=r(CRe," (LeViT model)"),CRe.forEach(t),Yio=i(L),kg=n(L,"LI",{});var wRe=s(kg);jce=n(wRe,"STRONG",{});var LTt=s(jce);Kio=r(LTt,"longformer"),LTt.forEach(t),Zio=r(wRe," \u2014 "),HI=n(wRe,"A",{href:!0});var yTt=s(HI);edo=r(yTt,"LongformerConfig"),yTt.forEach(t),odo=r(wRe," (Longformer model)"),wRe.forEach(t),rdo=i(L),Sg=n(L,"LI",{});var ARe=s(Sg);Dce=n(ARe,"STRONG",{});var xTt=s(Dce);tdo=r(xTt,"longt5"),xTt.forEach(t),ado=r(ARe," \u2014 "),JI=n(ARe,"A",{href:!0});var $Tt=s(JI);ndo=r($Tt,"LongT5Config"),$Tt.forEach(t),sdo=r(ARe," (LongT5 model)"),ARe.forEach(t),ldo=i(L),Rg=n(L,"LI",{});var LRe=s(Rg);Gce=n(LRe,"STRONG",{});var kTt=s(Gce);ido=r(kTt,"luke"),kTt.forEach(t),ddo=r(LRe," \u2014 "),YI=n(LRe,"A",{href:!0});var STt=s(YI);cdo=r(STt,"LukeConfig"),STt.forEach(t),mdo=r(LRe," (LUKE model)"),LRe.forEach(t),fdo=i(L),Pg=n(L,"LI",{});var yRe=s(Pg);Oce=n(yRe,"STRONG",{});var RTt=s(Oce);gdo=r(RTt,"lxmert"),RTt.forEach(t),hdo=r(yRe," \u2014 "),KI=n(yRe,"A",{href:!0});var PTt=s(KI);udo=r(PTt,"LxmertConfig"),PTt.forEach(t),pdo=r(yRe," (LXMERT model)"),yRe.forEach(t),_do=i(L),Bg=n(L,"LI",{});var xRe=s(Bg);Vce=n(xRe,"STRONG",{});var BTt=s(Vce);bdo=r(BTt,"m2m_100"),BTt.forEach(t),vdo=r(xRe," \u2014 "),ZI=n(xRe,"A",{href:!0});var ITt=s(ZI);Fdo=r(ITt,"M2M100Config"),ITt.forEach(t),Tdo=r(xRe," (M2M100 model)"),xRe.forEach(t),Mdo=i(L),Ig=n(L,"LI",{});var $Re=s(Ig);Xce=n($Re,"STRONG",{});var NTt=s(Xce);Edo=r(NTt,"marian"),NTt.forEach(t),Cdo=r($Re," \u2014 "),eN=n($Re,"A",{href:!0});var qTt=s(eN);wdo=r(qTt,"MarianConfig"),qTt.forEach(t),Ado=r($Re," (Marian model)"),$Re.forEach(t),Ldo=i(L),Ng=n(L,"LI",{});var kRe=s(Ng);zce=n(kRe,"STRONG",{});var jTt=s(zce);ydo=r(jTt,"maskformer"),jTt.forEach(t),xdo=r(kRe," \u2014 "),oN=n(kRe,"A",{href:!0});var DTt=s(oN);$do=r(DTt,"MaskFormerConfig"),DTt.forEach(t),kdo=r(kRe," (MaskFormer model)"),kRe.forEach(t),Sdo=i(L),qg=n(L,"LI",{});var SRe=s(qg);Qce=n(SRe,"STRONG",{});var GTt=s(Qce);Rdo=r(GTt,"mbart"),GTt.forEach(t),Pdo=r(SRe," \u2014 "),rN=n(SRe,"A",{href:!0});var OTt=s(rN);Bdo=r(OTt,"MBartConfig"),OTt.forEach(t),Ido=r(SRe," (mBART model)"),SRe.forEach(t),Ndo=i(L),jg=n(L,"LI",{});var RRe=s(jg);Wce=n(RRe,"STRONG",{});var VTt=s(Wce);qdo=r(VTt,"mctct"),VTt.forEach(t),jdo=r(RRe," \u2014 "),tN=n(RRe,"A",{href:!0});var XTt=s(tN);Ddo=r(XTt,"MCTCTConfig"),XTt.forEach(t),Gdo=r(RRe," (M-CTC-T model)"),RRe.forEach(t),Odo=i(L),Dg=n(L,"LI",{});var PRe=s(Dg);Uce=n(PRe,"STRONG",{});var zTt=s(Uce);Vdo=r(zTt,"megatron-bert"),zTt.forEach(t),Xdo=r(PRe," \u2014 "),aN=n(PRe,"A",{href:!0});var QTt=s(aN);zdo=r(QTt,"MegatronBertConfig"),QTt.forEach(t),Qdo=r(PRe," (Megatron-BERT model)"),PRe.forEach(t),Wdo=i(L),Gg=n(L,"LI",{});var BRe=s(Gg);Hce=n(BRe,"STRONG",{});var WTt=s(Hce);Udo=r(WTt,"mobilebert"),WTt.forEach(t),Hdo=r(BRe," \u2014 "),nN=n(BRe,"A",{href:!0});var UTt=s(nN);Jdo=r(UTt,"MobileBertConfig"),UTt.forEach(t),Ydo=r(BRe," (MobileBERT model)"),BRe.forEach(t),Kdo=i(L),Og=n(L,"LI",{});var IRe=s(Og);Jce=n(IRe,"STRONG",{});var HTt=s(Jce);Zdo=r(HTt,"mobilevit"),HTt.forEach(t),eco=r(IRe," \u2014 "),sN=n(IRe,"A",{href:!0});var JTt=s(sN);oco=r(JTt,"MobileViTConfig"),JTt.forEach(t),rco=r(IRe," (MobileViT model)"),IRe.forEach(t),tco=i(L),Vg=n(L,"LI",{});var NRe=s(Vg);Yce=n(NRe,"STRONG",{});var YTt=s(Yce);aco=r(YTt,"mpnet"),YTt.forEach(t),nco=r(NRe," \u2014 "),lN=n(NRe,"A",{href:!0});var KTt=s(lN);sco=r(KTt,"MPNetConfig"),KTt.forEach(t),lco=r(NRe," (MPNet model)"),NRe.forEach(t),ico=i(L),Xg=n(L,"LI",{});var qRe=s(Xg);Kce=n(qRe,"STRONG",{});var ZTt=s(Kce);dco=r(ZTt,"mt5"),ZTt.forEach(t),cco=r(qRe," \u2014 "),iN=n(qRe,"A",{href:!0});var eMt=s(iN);mco=r(eMt,"MT5Config"),eMt.forEach(t),fco=r(qRe," (MT5 model)"),qRe.forEach(t),gco=i(L),zg=n(L,"LI",{});var jRe=s(zg);Zce=n(jRe,"STRONG",{});var oMt=s(Zce);hco=r(oMt,"mvp"),oMt.forEach(t),uco=r(jRe," \u2014 "),dN=n(jRe,"A",{href:!0});var rMt=s(dN);pco=r(rMt,"MvpConfig"),rMt.forEach(t),_co=r(jRe," (MVP model)"),jRe.forEach(t),bco=i(L),Qg=n(L,"LI",{});var DRe=s(Qg);eme=n(DRe,"STRONG",{});var tMt=s(eme);vco=r(tMt,"nezha"),tMt.forEach(t),Fco=r(DRe," \u2014 "),cN=n(DRe,"A",{href:!0});var aMt=s(cN);Tco=r(aMt,"NezhaConfig"),aMt.forEach(t),Mco=r(DRe," (Nezha model)"),DRe.forEach(t),Eco=i(L),Wg=n(L,"LI",{});var GRe=s(Wg);ome=n(GRe,"STRONG",{});var nMt=s(ome);Cco=r(nMt,"nystromformer"),nMt.forEach(t),wco=r(GRe," \u2014 "),mN=n(GRe,"A",{href:!0});var sMt=s(mN);Aco=r(sMt,"NystromformerConfig"),sMt.forEach(t),Lco=r(GRe," (Nystr\xF6mformer model)"),GRe.forEach(t),yco=i(L),Ug=n(L,"LI",{});var ORe=s(Ug);rme=n(ORe,"STRONG",{});var lMt=s(rme);xco=r(lMt,"openai-gpt"),lMt.forEach(t),$co=r(ORe," \u2014 "),fN=n(ORe,"A",{href:!0});var iMt=s(fN);kco=r(iMt,"OpenAIGPTConfig"),iMt.forEach(t),Sco=r(ORe," (OpenAI GPT model)"),ORe.forEach(t),Rco=i(L),Hg=n(L,"LI",{});var VRe=s(Hg);tme=n(VRe,"STRONG",{});var dMt=s(tme);Pco=r(dMt,"opt"),dMt.forEach(t),Bco=r(VRe," \u2014 "),gN=n(VRe,"A",{href:!0});var cMt=s(gN);Ico=r(cMt,"OPTConfig"),cMt.forEach(t),Nco=r(VRe," (OPT model)"),VRe.forEach(t),qco=i(L),Jg=n(L,"LI",{});var XRe=s(Jg);ame=n(XRe,"STRONG",{});var mMt=s(ame);jco=r(mMt,"owlvit"),mMt.forEach(t),Dco=r(XRe," \u2014 "),hN=n(XRe,"A",{href:!0});var fMt=s(hN);Gco=r(fMt,"OwlViTConfig"),fMt.forEach(t),Oco=r(XRe," (OWL-ViT model)"),XRe.forEach(t),Vco=i(L),Yg=n(L,"LI",{});var zRe=s(Yg);nme=n(zRe,"STRONG",{});var gMt=s(nme);Xco=r(gMt,"pegasus"),gMt.forEach(t),zco=r(zRe," \u2014 "),uN=n(zRe,"A",{href:!0});var hMt=s(uN);Qco=r(hMt,"PegasusConfig"),hMt.forEach(t),Wco=r(zRe," (Pegasus model)"),zRe.forEach(t),Uco=i(L),Kg=n(L,"LI",{});var QRe=s(Kg);sme=n(QRe,"STRONG",{});var uMt=s(sme);Hco=r(uMt,"pegasus_x"),uMt.forEach(t),Jco=r(QRe," \u2014 "),pN=n(QRe,"A",{href:!0});var pMt=s(pN);Yco=r(pMt,"PegasusXConfig"),pMt.forEach(t),Kco=r(QRe," (PEGASUS-X model)"),QRe.forEach(t),Zco=i(L),Zg=n(L,"LI",{});var WRe=s(Zg);lme=n(WRe,"STRONG",{});var _Mt=s(lme);emo=r(_Mt,"perceiver"),_Mt.forEach(t),omo=r(WRe," \u2014 "),_N=n(WRe,"A",{href:!0});var bMt=s(_N);rmo=r(bMt,"PerceiverConfig"),bMt.forEach(t),tmo=r(WRe," (Perceiver model)"),WRe.forEach(t),amo=i(L),eh=n(L,"LI",{});var URe=s(eh);ime=n(URe,"STRONG",{});var vMt=s(ime);nmo=r(vMt,"plbart"),vMt.forEach(t),smo=r(URe," \u2014 "),bN=n(URe,"A",{href:!0});var FMt=s(bN);lmo=r(FMt,"PLBartConfig"),FMt.forEach(t),imo=r(URe," (PLBart model)"),URe.forEach(t),dmo=i(L),oh=n(L,"LI",{});var HRe=s(oh);dme=n(HRe,"STRONG",{});var TMt=s(dme);cmo=r(TMt,"poolformer"),TMt.forEach(t),mmo=r(HRe," \u2014 "),vN=n(HRe,"A",{href:!0});var MMt=s(vN);fmo=r(MMt,"PoolFormerConfig"),MMt.forEach(t),gmo=r(HRe," (PoolFormer model)"),HRe.forEach(t),hmo=i(L),rh=n(L,"LI",{});var JRe=s(rh);cme=n(JRe,"STRONG",{});var EMt=s(cme);umo=r(EMt,"prophetnet"),EMt.forEach(t),pmo=r(JRe," \u2014 "),FN=n(JRe,"A",{href:!0});var CMt=s(FN);_mo=r(CMt,"ProphetNetConfig"),CMt.forEach(t),bmo=r(JRe," (ProphetNet model)"),JRe.forEach(t),vmo=i(L),th=n(L,"LI",{});var YRe=s(th);mme=n(YRe,"STRONG",{});var wMt=s(mme);Fmo=r(wMt,"qdqbert"),wMt.forEach(t),Tmo=r(YRe," \u2014 "),TN=n(YRe,"A",{href:!0});var AMt=s(TN);Mmo=r(AMt,"QDQBertConfig"),AMt.forEach(t),Emo=r(YRe," (QDQBert model)"),YRe.forEach(t),Cmo=i(L),ah=n(L,"LI",{});var KRe=s(ah);fme=n(KRe,"STRONG",{});var LMt=s(fme);wmo=r(LMt,"rag"),LMt.forEach(t),Amo=r(KRe," \u2014 "),MN=n(KRe,"A",{href:!0});var yMt=s(MN);Lmo=r(yMt,"RagConfig"),yMt.forEach(t),ymo=r(KRe," (RAG model)"),KRe.forEach(t),xmo=i(L),nh=n(L,"LI",{});var ZRe=s(nh);gme=n(ZRe,"STRONG",{});var xMt=s(gme);$mo=r(xMt,"realm"),xMt.forEach(t),kmo=r(ZRe," \u2014 "),EN=n(ZRe,"A",{href:!0});var $Mt=s(EN);Smo=r($Mt,"RealmConfig"),$Mt.forEach(t),Rmo=r(ZRe," (REALM model)"),ZRe.forEach(t),Pmo=i(L),sh=n(L,"LI",{});var ePe=s(sh);hme=n(ePe,"STRONG",{});var kMt=s(hme);Bmo=r(kMt,"reformer"),kMt.forEach(t),Imo=r(ePe," \u2014 "),CN=n(ePe,"A",{href:!0});var SMt=s(CN);Nmo=r(SMt,"ReformerConfig"),SMt.forEach(t),qmo=r(ePe," (Reformer model)"),ePe.forEach(t),jmo=i(L),lh=n(L,"LI",{});var oPe=s(lh);ume=n(oPe,"STRONG",{});var RMt=s(ume);Dmo=r(RMt,"regnet"),RMt.forEach(t),Gmo=r(oPe," \u2014 "),wN=n(oPe,"A",{href:!0});var PMt=s(wN);Omo=r(PMt,"RegNetConfig"),PMt.forEach(t),Vmo=r(oPe," (RegNet model)"),oPe.forEach(t),Xmo=i(L),ih=n(L,"LI",{});var rPe=s(ih);pme=n(rPe,"STRONG",{});var BMt=s(pme);zmo=r(BMt,"rembert"),BMt.forEach(t),Qmo=r(rPe," \u2014 "),AN=n(rPe,"A",{href:!0});var IMt=s(AN);Wmo=r(IMt,"RemBertConfig"),IMt.forEach(t),Umo=r(rPe," (RemBERT model)"),rPe.forEach(t),Hmo=i(L),dh=n(L,"LI",{});var tPe=s(dh);_me=n(tPe,"STRONG",{});var NMt=s(_me);Jmo=r(NMt,"resnet"),NMt.forEach(t),Ymo=r(tPe," \u2014 "),LN=n(tPe,"A",{href:!0});var qMt=s(LN);Kmo=r(qMt,"ResNetConfig"),qMt.forEach(t),Zmo=r(tPe," (ResNet model)"),tPe.forEach(t),efo=i(L),ch=n(L,"LI",{});var aPe=s(ch);bme=n(aPe,"STRONG",{});var jMt=s(bme);ofo=r(jMt,"retribert"),jMt.forEach(t),rfo=r(aPe," \u2014 "),yN=n(aPe,"A",{href:!0});var DMt=s(yN);tfo=r(DMt,"RetriBertConfig"),DMt.forEach(t),afo=r(aPe," (RetriBERT model)"),aPe.forEach(t),nfo=i(L),mh=n(L,"LI",{});var nPe=s(mh);vme=n(nPe,"STRONG",{});var GMt=s(vme);sfo=r(GMt,"roberta"),GMt.forEach(t),lfo=r(nPe," \u2014 "),xN=n(nPe,"A",{href:!0});var OMt=s(xN);ifo=r(OMt,"RobertaConfig"),OMt.forEach(t),dfo=r(nPe," (RoBERTa model)"),nPe.forEach(t),cfo=i(L),fh=n(L,"LI",{});var sPe=s(fh);Fme=n(sPe,"STRONG",{});var VMt=s(Fme);mfo=r(VMt,"roformer"),VMt.forEach(t),ffo=r(sPe," \u2014 "),$N=n(sPe,"A",{href:!0});var XMt=s($N);gfo=r(XMt,"RoFormerConfig"),XMt.forEach(t),hfo=r(sPe," (RoFormer model)"),sPe.forEach(t),ufo=i(L),gh=n(L,"LI",{});var lPe=s(gh);Tme=n(lPe,"STRONG",{});var zMt=s(Tme);pfo=r(zMt,"segformer"),zMt.forEach(t),_fo=r(lPe," \u2014 "),kN=n(lPe,"A",{href:!0});var QMt=s(kN);bfo=r(QMt,"SegformerConfig"),QMt.forEach(t),vfo=r(lPe," (SegFormer model)"),lPe.forEach(t),Ffo=i(L),hh=n(L,"LI",{});var iPe=s(hh);Mme=n(iPe,"STRONG",{});var WMt=s(Mme);Tfo=r(WMt,"sew"),WMt.forEach(t),Mfo=r(iPe," \u2014 "),SN=n(iPe,"A",{href:!0});var UMt=s(SN);Efo=r(UMt,"SEWConfig"),UMt.forEach(t),Cfo=r(iPe," (SEW model)"),iPe.forEach(t),wfo=i(L),uh=n(L,"LI",{});var dPe=s(uh);Eme=n(dPe,"STRONG",{});var HMt=s(Eme);Afo=r(HMt,"sew-d"),HMt.forEach(t),Lfo=r(dPe," \u2014 "),RN=n(dPe,"A",{href:!0});var JMt=s(RN);yfo=r(JMt,"SEWDConfig"),JMt.forEach(t),xfo=r(dPe," (SEW-D model)"),dPe.forEach(t),$fo=i(L),ph=n(L,"LI",{});var cPe=s(ph);Cme=n(cPe,"STRONG",{});var YMt=s(Cme);kfo=r(YMt,"speech-encoder-decoder"),YMt.forEach(t),Sfo=r(cPe," \u2014 "),PN=n(cPe,"A",{href:!0});var KMt=s(PN);Rfo=r(KMt,"SpeechEncoderDecoderConfig"),KMt.forEach(t),Pfo=r(cPe," (Speech Encoder decoder model)"),cPe.forEach(t),Bfo=i(L),_h=n(L,"LI",{});var mPe=s(_h);wme=n(mPe,"STRONG",{});var ZMt=s(wme);Ifo=r(ZMt,"speech_to_text"),ZMt.forEach(t),Nfo=r(mPe," \u2014 "),BN=n(mPe,"A",{href:!0});var eEt=s(BN);qfo=r(eEt,"Speech2TextConfig"),eEt.forEach(t),jfo=r(mPe," (Speech2Text model)"),mPe.forEach(t),Dfo=i(L),bh=n(L,"LI",{});var fPe=s(bh);Ame=n(fPe,"STRONG",{});var oEt=s(Ame);Gfo=r(oEt,"speech_to_text_2"),oEt.forEach(t),Ofo=r(fPe," \u2014 "),IN=n(fPe,"A",{href:!0});var rEt=s(IN);Vfo=r(rEt,"Speech2Text2Config"),rEt.forEach(t),Xfo=r(fPe," (Speech2Text2 model)"),fPe.forEach(t),zfo=i(L),vh=n(L,"LI",{});var gPe=s(vh);Lme=n(gPe,"STRONG",{});var tEt=s(Lme);Qfo=r(tEt,"splinter"),tEt.forEach(t),Wfo=r(gPe," \u2014 "),NN=n(gPe,"A",{href:!0});var aEt=s(NN);Ufo=r(aEt,"SplinterConfig"),aEt.forEach(t),Hfo=r(gPe," (Splinter model)"),gPe.forEach(t),Jfo=i(L),Fh=n(L,"LI",{});var hPe=s(Fh);yme=n(hPe,"STRONG",{});var nEt=s(yme);Yfo=r(nEt,"squeezebert"),nEt.forEach(t),Kfo=r(hPe," \u2014 "),qN=n(hPe,"A",{href:!0});var sEt=s(qN);Zfo=r(sEt,"SqueezeBertConfig"),sEt.forEach(t),ego=r(hPe," (SqueezeBERT model)"),hPe.forEach(t),ogo=i(L),Th=n(L,"LI",{});var uPe=s(Th);xme=n(uPe,"STRONG",{});var lEt=s(xme);rgo=r(lEt,"swin"),lEt.forEach(t),tgo=r(uPe," \u2014 "),jN=n(uPe,"A",{href:!0});var iEt=s(jN);ago=r(iEt,"SwinConfig"),iEt.forEach(t),ngo=r(uPe," (Swin Transformer model)"),uPe.forEach(t),sgo=i(L),Mh=n(L,"LI",{});var pPe=s(Mh);$me=n(pPe,"STRONG",{});var dEt=s($me);lgo=r(dEt,"swinv2"),dEt.forEach(t),igo=r(pPe," \u2014 "),DN=n(pPe,"A",{href:!0});var cEt=s(DN);dgo=r(cEt,"Swinv2Config"),cEt.forEach(t),cgo=r(pPe," (Swin Transformer V2 model)"),pPe.forEach(t),mgo=i(L),Eh=n(L,"LI",{});var _Pe=s(Eh);kme=n(_Pe,"STRONG",{});var mEt=s(kme);fgo=r(mEt,"t5"),mEt.forEach(t),ggo=r(_Pe," \u2014 "),GN=n(_Pe,"A",{href:!0});var fEt=s(GN);hgo=r(fEt,"T5Config"),fEt.forEach(t),ugo=r(_Pe," (T5 model)"),_Pe.forEach(t),pgo=i(L),Ch=n(L,"LI",{});var bPe=s(Ch);Sme=n(bPe,"STRONG",{});var gEt=s(Sme);_go=r(gEt,"tapas"),gEt.forEach(t),bgo=r(bPe," \u2014 "),ON=n(bPe,"A",{href:!0});var hEt=s(ON);vgo=r(hEt,"TapasConfig"),hEt.forEach(t),Fgo=r(bPe," (TAPAS model)"),bPe.forEach(t),Tgo=i(L),wh=n(L,"LI",{});var vPe=s(wh);Rme=n(vPe,"STRONG",{});var uEt=s(Rme);Mgo=r(uEt,"trajectory_transformer"),uEt.forEach(t),Ego=r(vPe," \u2014 "),VN=n(vPe,"A",{href:!0});var pEt=s(VN);Cgo=r(pEt,"TrajectoryTransformerConfig"),pEt.forEach(t),wgo=r(vPe," (Trajectory Transformer model)"),vPe.forEach(t),Ago=i(L),Ah=n(L,"LI",{});var FPe=s(Ah);Pme=n(FPe,"STRONG",{});var _Et=s(Pme);Lgo=r(_Et,"transfo-xl"),_Et.forEach(t),ygo=r(FPe," \u2014 "),XN=n(FPe,"A",{href:!0});var bEt=s(XN);xgo=r(bEt,"TransfoXLConfig"),bEt.forEach(t),$go=r(FPe," (Transformer-XL model)"),FPe.forEach(t),kgo=i(L),Lh=n(L,"LI",{});var TPe=s(Lh);Bme=n(TPe,"STRONG",{});var vEt=s(Bme);Sgo=r(vEt,"trocr"),vEt.forEach(t),Rgo=r(TPe," \u2014 "),zN=n(TPe,"A",{href:!0});var FEt=s(zN);Pgo=r(FEt,"TrOCRConfig"),FEt.forEach(t),Bgo=r(TPe," (TrOCR model)"),TPe.forEach(t),Igo=i(L),yh=n(L,"LI",{});var MPe=s(yh);Ime=n(MPe,"STRONG",{});var TEt=s(Ime);Ngo=r(TEt,"unispeech"),TEt.forEach(t),qgo=r(MPe," \u2014 "),QN=n(MPe,"A",{href:!0});var MEt=s(QN);jgo=r(MEt,"UniSpeechConfig"),MEt.forEach(t),Dgo=r(MPe," (UniSpeech model)"),MPe.forEach(t),Ggo=i(L),xh=n(L,"LI",{});var EPe=s(xh);Nme=n(EPe,"STRONG",{});var EEt=s(Nme);Ogo=r(EEt,"unispeech-sat"),EEt.forEach(t),Vgo=r(EPe," \u2014 "),WN=n(EPe,"A",{href:!0});var CEt=s(WN);Xgo=r(CEt,"UniSpeechSatConfig"),CEt.forEach(t),zgo=r(EPe," (UniSpeechSat model)"),EPe.forEach(t),Qgo=i(L),$h=n(L,"LI",{});var CPe=s($h);qme=n(CPe,"STRONG",{});var wEt=s(qme);Wgo=r(wEt,"van"),wEt.forEach(t),Ugo=r(CPe," \u2014 "),UN=n(CPe,"A",{href:!0});var AEt=s(UN);Hgo=r(AEt,"VanConfig"),AEt.forEach(t),Jgo=r(CPe," (VAN model)"),CPe.forEach(t),Ygo=i(L),kh=n(L,"LI",{});var wPe=s(kh);jme=n(wPe,"STRONG",{});var LEt=s(jme);Kgo=r(LEt,"videomae"),LEt.forEach(t),Zgo=r(wPe," \u2014 "),HN=n(wPe,"A",{href:!0});var yEt=s(HN);eho=r(yEt,"VideoMAEConfig"),yEt.forEach(t),oho=r(wPe," (VideoMAE model)"),wPe.forEach(t),rho=i(L),Sh=n(L,"LI",{});var APe=s(Sh);Dme=n(APe,"STRONG",{});var xEt=s(Dme);tho=r(xEt,"vilt"),xEt.forEach(t),aho=r(APe," \u2014 "),JN=n(APe,"A",{href:!0});var $Et=s(JN);nho=r($Et,"ViltConfig"),$Et.forEach(t),sho=r(APe," (ViLT model)"),APe.forEach(t),lho=i(L),Rh=n(L,"LI",{});var LPe=s(Rh);Gme=n(LPe,"STRONG",{});var kEt=s(Gme);iho=r(kEt,"vision-encoder-decoder"),kEt.forEach(t),dho=r(LPe," \u2014 "),YN=n(LPe,"A",{href:!0});var SEt=s(YN);cho=r(SEt,"VisionEncoderDecoderConfig"),SEt.forEach(t),mho=r(LPe," (Vision Encoder decoder model)"),LPe.forEach(t),fho=i(L),Ph=n(L,"LI",{});var yPe=s(Ph);Ome=n(yPe,"STRONG",{});var REt=s(Ome);gho=r(REt,"vision-text-dual-encoder"),REt.forEach(t),hho=r(yPe," \u2014 "),KN=n(yPe,"A",{href:!0});var PEt=s(KN);uho=r(PEt,"VisionTextDualEncoderConfig"),PEt.forEach(t),pho=r(yPe," (VisionTextDualEncoder model)"),yPe.forEach(t),_ho=i(L),Bh=n(L,"LI",{});var xPe=s(Bh);Vme=n(xPe,"STRONG",{});var BEt=s(Vme);bho=r(BEt,"visual_bert"),BEt.forEach(t),vho=r(xPe," \u2014 "),ZN=n(xPe,"A",{href:!0});var IEt=s(ZN);Fho=r(IEt,"VisualBertConfig"),IEt.forEach(t),Tho=r(xPe," (VisualBERT model)"),xPe.forEach(t),Mho=i(L),Ih=n(L,"LI",{});var $Pe=s(Ih);Xme=n($Pe,"STRONG",{});var NEt=s(Xme);Eho=r(NEt,"vit"),NEt.forEach(t),Cho=r($Pe," \u2014 "),eq=n($Pe,"A",{href:!0});var qEt=s(eq);who=r(qEt,"ViTConfig"),qEt.forEach(t),Aho=r($Pe," (ViT model)"),$Pe.forEach(t),Lho=i(L),Nh=n(L,"LI",{});var kPe=s(Nh);zme=n(kPe,"STRONG",{});var jEt=s(zme);yho=r(jEt,"vit_mae"),jEt.forEach(t),xho=r(kPe," \u2014 "),oq=n(kPe,"A",{href:!0});var DEt=s(oq);$ho=r(DEt,"ViTMAEConfig"),DEt.forEach(t),kho=r(kPe," (ViTMAE model)"),kPe.forEach(t),Sho=i(L),qh=n(L,"LI",{});var SPe=s(qh);Qme=n(SPe,"STRONG",{});var GEt=s(Qme);Rho=r(GEt,"vit_msn"),GEt.forEach(t),Pho=r(SPe," \u2014 "),rq=n(SPe,"A",{href:!0});var OEt=s(rq);Bho=r(OEt,"ViTMSNConfig"),OEt.forEach(t),Iho=r(SPe," (ViTMSN model)"),SPe.forEach(t),Nho=i(L),jh=n(L,"LI",{});var RPe=s(jh);Wme=n(RPe,"STRONG",{});var VEt=s(Wme);qho=r(VEt,"wav2vec2"),VEt.forEach(t),jho=r(RPe," \u2014 "),tq=n(RPe,"A",{href:!0});var XEt=s(tq);Dho=r(XEt,"Wav2Vec2Config"),XEt.forEach(t),Gho=r(RPe," (Wav2Vec2 model)"),RPe.forEach(t),Oho=i(L),Dh=n(L,"LI",{});var PPe=s(Dh);Ume=n(PPe,"STRONG",{});var zEt=s(Ume);Vho=r(zEt,"wav2vec2-conformer"),zEt.forEach(t),Xho=r(PPe," \u2014 "),aq=n(PPe,"A",{href:!0});var QEt=s(aq);zho=r(QEt,"Wav2Vec2ConformerConfig"),QEt.forEach(t),Qho=r(PPe," (Wav2Vec2-Conformer model)"),PPe.forEach(t),Who=i(L),Gh=n(L,"LI",{});var BPe=s(Gh);Hme=n(BPe,"STRONG",{});var WEt=s(Hme);Uho=r(WEt,"wavlm"),WEt.forEach(t),Hho=r(BPe," \u2014 "),nq=n(BPe,"A",{href:!0});var UEt=s(nq);Jho=r(UEt,"WavLMConfig"),UEt.forEach(t),Yho=r(BPe," (WavLM model)"),BPe.forEach(t),Kho=i(L),Oh=n(L,"LI",{});var IPe=s(Oh);Jme=n(IPe,"STRONG",{});var HEt=s(Jme);Zho=r(HEt,"xclip"),HEt.forEach(t),euo=r(IPe," \u2014 "),sq=n(IPe,"A",{href:!0});var JEt=s(sq);ouo=r(JEt,"XCLIPConfig"),JEt.forEach(t),ruo=r(IPe," (X-CLIP model)"),IPe.forEach(t),tuo=i(L),Vh=n(L,"LI",{});var NPe=s(Vh);Yme=n(NPe,"STRONG",{});var YEt=s(Yme);auo=r(YEt,"xglm"),YEt.forEach(t),nuo=r(NPe," \u2014 "),lq=n(NPe,"A",{href:!0});var KEt=s(lq);suo=r(KEt,"XGLMConfig"),KEt.forEach(t),luo=r(NPe," (XGLM model)"),NPe.forEach(t),iuo=i(L),Xh=n(L,"LI",{});var qPe=s(Xh);Kme=n(qPe,"STRONG",{});var ZEt=s(Kme);duo=r(ZEt,"xlm"),ZEt.forEach(t),cuo=r(qPe," \u2014 "),iq=n(qPe,"A",{href:!0});var e4t=s(iq);muo=r(e4t,"XLMConfig"),e4t.forEach(t),fuo=r(qPe," (XLM model)"),qPe.forEach(t),guo=i(L),zh=n(L,"LI",{});var jPe=s(zh);Zme=n(jPe,"STRONG",{});var o4t=s(Zme);huo=r(o4t,"xlm-prophetnet"),o4t.forEach(t),uuo=r(jPe," \u2014 "),dq=n(jPe,"A",{href:!0});var r4t=s(dq);puo=r(r4t,"XLMProphetNetConfig"),r4t.forEach(t),_uo=r(jPe," (XLM-ProphetNet model)"),jPe.forEach(t),buo=i(L),Qh=n(L,"LI",{});var DPe=s(Qh);efe=n(DPe,"STRONG",{});var t4t=s(efe);vuo=r(t4t,"xlm-roberta"),t4t.forEach(t),Fuo=r(DPe," \u2014 "),cq=n(DPe,"A",{href:!0});var a4t=s(cq);Tuo=r(a4t,"XLMRobertaConfig"),a4t.forEach(t),Muo=r(DPe," (XLM-RoBERTa model)"),DPe.forEach(t),Euo=i(L),Wh=n(L,"LI",{});var GPe=s(Wh);ofe=n(GPe,"STRONG",{});var n4t=s(ofe);Cuo=r(n4t,"xlm-roberta-xl"),n4t.forEach(t),wuo=r(GPe," \u2014 "),mq=n(GPe,"A",{href:!0});var s4t=s(mq);Auo=r(s4t,"XLMRobertaXLConfig"),s4t.forEach(t),Luo=r(GPe," (XLM-RoBERTa-XL model)"),GPe.forEach(t),yuo=i(L),Uh=n(L,"LI",{});var OPe=s(Uh);rfe=n(OPe,"STRONG",{});var l4t=s(rfe);xuo=r(l4t,"xlnet"),l4t.forEach(t),$uo=r(OPe," \u2014 "),fq=n(OPe,"A",{href:!0});var i4t=s(fq);kuo=r(i4t,"XLNetConfig"),i4t.forEach(t),Suo=r(OPe," (XLNet model)"),OPe.forEach(t),Ruo=i(L),Hh=n(L,"LI",{});var VPe=s(Hh);tfe=n(VPe,"STRONG",{});var d4t=s(tfe);Puo=r(d4t,"yolos"),d4t.forEach(t),Buo=r(VPe," \u2014 "),gq=n(VPe,"A",{href:!0});var c4t=s(gq);Iuo=r(c4t,"YolosConfig"),c4t.forEach(t),Nuo=r(VPe," (YOLOS model)"),VPe.forEach(t),quo=i(L),Jh=n(L,"LI",{});var XPe=s(Jh);afe=n(XPe,"STRONG",{});var m4t=s(afe);juo=r(m4t,"yoso"),m4t.forEach(t),Duo=r(XPe," \u2014 "),hq=n(XPe,"A",{href:!0});var f4t=s(hq);Guo=r(f4t,"YosoConfig"),f4t.forEach(t),Ouo=r(XPe," (YOSO model)"),XPe.forEach(t),L.forEach(t),Vuo=i(ut),T(Yh.$$.fragment,ut),ut.forEach(t),Xuo=i(ht),Kh=n(ht,"DIV",{class:!0});var roo=s(Kh);T(U9.$$.fragment,roo),zuo=i(roo),nfe=n(roo,"P",{});var g4t=s(nfe);Quo=r(g4t,"Register a new configuration for this class."),g4t.forEach(t),roo.forEach(t),ht.forEach(t),HKe=i(m),gd=n(m,"H2",{class:!0});var too=s(gd);Zh=n(too,"A",{id:!0,class:!0,href:!0});var h4t=s(Zh);sfe=n(h4t,"SPAN",{});var u4t=s(sfe);T(H9.$$.fragment,u4t),u4t.forEach(t),h4t.forEach(t),Wuo=i(too),lfe=n(too,"SPAN",{});var p4t=s(lfe);Uuo=r(p4t,"AutoTokenizer"),p4t.forEach(t),too.forEach(t),JKe=i(m),ko=n(m,"DIV",{class:!0});var Ml=s(ko);T(J9.$$.fragment,Ml),Huo=i(Ml),Y9=n(Ml,"P",{});var aoo=s(Y9);Juo=r(aoo,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uq=n(aoo,"A",{href:!0});var _4t=s(uq);Yuo=r(_4t,"AutoTokenizer.from_pretrained()"),_4t.forEach(t),Kuo=r(aoo," class method."),aoo.forEach(t),Zuo=i(Ml),K9=n(Ml,"P",{});var noo=s(K9);epo=r(noo,"This class cannot be instantiated directly using "),ife=n(noo,"CODE",{});var b4t=s(ife);opo=r(b4t,"__init__()"),b4t.forEach(t),rpo=r(noo," (throws an error)."),noo.forEach(t),tpo=i(Ml),Br=n(Ml,"DIV",{class:!0});var El=s(Br);T(Z9.$$.fragment,El),apo=i(El),dfe=n(El,"P",{});var v4t=s(dfe);npo=r(v4t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),v4t.forEach(t),spo=i(El),Ua=n(El,"P",{});var Ry=s(Ua);lpo=r(Ry,"The tokenizer class to instantiate is selected based on the "),cfe=n(Ry,"CODE",{});var F4t=s(cfe);ipo=r(F4t,"model_type"),F4t.forEach(t),dpo=r(Ry,` property of the config object (either
passed as an argument or loaded from `),mfe=n(Ry,"CODE",{});var T4t=s(mfe);cpo=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),mpo=r(Ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n(Ry,"CODE",{});var M4t=s(ffe);fpo=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),gpo=r(Ry,":"),Ry.forEach(t),hpo=i(El),k=n(El,"UL",{});var S=s(k);ns=n(S,"LI",{});var CP=s(ns);gfe=n(CP,"STRONG",{});var E4t=s(gfe);upo=r(E4t,"albert"),E4t.forEach(t),ppo=r(CP," \u2014 "),pq=n(CP,"A",{href:!0});var C4t=s(pq);_po=r(C4t,"AlbertTokenizer"),C4t.forEach(t),bpo=r(CP," or "),_q=n(CP,"A",{href:!0});var w4t=s(_q);vpo=r(w4t,"AlbertTokenizerFast"),w4t.forEach(t),Fpo=r(CP," (ALBERT model)"),CP.forEach(t),Tpo=i(S),ss=n(S,"LI",{});var wP=s(ss);hfe=n(wP,"STRONG",{});var A4t=s(hfe);Mpo=r(A4t,"bart"),A4t.forEach(t),Epo=r(wP," \u2014 "),bq=n(wP,"A",{href:!0});var L4t=s(bq);Cpo=r(L4t,"BartTokenizer"),L4t.forEach(t),wpo=r(wP," or "),vq=n(wP,"A",{href:!0});var y4t=s(vq);Apo=r(y4t,"BartTokenizerFast"),y4t.forEach(t),Lpo=r(wP," (BART model)"),wP.forEach(t),ypo=i(S),ls=n(S,"LI",{});var AP=s(ls);ufe=n(AP,"STRONG",{});var x4t=s(ufe);xpo=r(x4t,"barthez"),x4t.forEach(t),$po=r(AP," \u2014 "),Fq=n(AP,"A",{href:!0});var $4t=s(Fq);kpo=r($4t,"BarthezTokenizer"),$4t.forEach(t),Spo=r(AP," or "),Tq=n(AP,"A",{href:!0});var k4t=s(Tq);Rpo=r(k4t,"BarthezTokenizerFast"),k4t.forEach(t),Ppo=r(AP," (BARThez model)"),AP.forEach(t),Bpo=i(S),eu=n(S,"LI",{});var zPe=s(eu);pfe=n(zPe,"STRONG",{});var S4t=s(pfe);Ipo=r(S4t,"bartpho"),S4t.forEach(t),Npo=r(zPe," \u2014 "),Mq=n(zPe,"A",{href:!0});var R4t=s(Mq);qpo=r(R4t,"BartphoTokenizer"),R4t.forEach(t),jpo=r(zPe," (BARTpho model)"),zPe.forEach(t),Dpo=i(S),is=n(S,"LI",{});var LP=s(is);_fe=n(LP,"STRONG",{});var P4t=s(_fe);Gpo=r(P4t,"bert"),P4t.forEach(t),Opo=r(LP," \u2014 "),Eq=n(LP,"A",{href:!0});var B4t=s(Eq);Vpo=r(B4t,"BertTokenizer"),B4t.forEach(t),Xpo=r(LP," or "),Cq=n(LP,"A",{href:!0});var I4t=s(Cq);zpo=r(I4t,"BertTokenizerFast"),I4t.forEach(t),Qpo=r(LP," (BERT model)"),LP.forEach(t),Wpo=i(S),ou=n(S,"LI",{});var QPe=s(ou);bfe=n(QPe,"STRONG",{});var N4t=s(bfe);Upo=r(N4t,"bert-generation"),N4t.forEach(t),Hpo=r(QPe," \u2014 "),wq=n(QPe,"A",{href:!0});var q4t=s(wq);Jpo=r(q4t,"BertGenerationTokenizer"),q4t.forEach(t),Ypo=r(QPe," (Bert Generation model)"),QPe.forEach(t),Kpo=i(S),ru=n(S,"LI",{});var WPe=s(ru);vfe=n(WPe,"STRONG",{});var j4t=s(vfe);Zpo=r(j4t,"bert-japanese"),j4t.forEach(t),e_o=r(WPe," \u2014 "),Aq=n(WPe,"A",{href:!0});var D4t=s(Aq);o_o=r(D4t,"BertJapaneseTokenizer"),D4t.forEach(t),r_o=r(WPe," (BertJapanese model)"),WPe.forEach(t),t_o=i(S),tu=n(S,"LI",{});var UPe=s(tu);Ffe=n(UPe,"STRONG",{});var G4t=s(Ffe);a_o=r(G4t,"bertweet"),G4t.forEach(t),n_o=r(UPe," \u2014 "),Lq=n(UPe,"A",{href:!0});var O4t=s(Lq);s_o=r(O4t,"BertweetTokenizer"),O4t.forEach(t),l_o=r(UPe," (BERTweet model)"),UPe.forEach(t),i_o=i(S),ds=n(S,"LI",{});var yP=s(ds);Tfe=n(yP,"STRONG",{});var V4t=s(Tfe);d_o=r(V4t,"big_bird"),V4t.forEach(t),c_o=r(yP," \u2014 "),yq=n(yP,"A",{href:!0});var X4t=s(yq);m_o=r(X4t,"BigBirdTokenizer"),X4t.forEach(t),f_o=r(yP," or "),xq=n(yP,"A",{href:!0});var z4t=s(xq);g_o=r(z4t,"BigBirdTokenizerFast"),z4t.forEach(t),h_o=r(yP," (BigBird model)"),yP.forEach(t),u_o=i(S),cs=n(S,"LI",{});var xP=s(cs);Mfe=n(xP,"STRONG",{});var Q4t=s(Mfe);p_o=r(Q4t,"bigbird_pegasus"),Q4t.forEach(t),__o=r(xP," \u2014 "),$q=n(xP,"A",{href:!0});var W4t=s($q);b_o=r(W4t,"PegasusTokenizer"),W4t.forEach(t),v_o=r(xP," or "),kq=n(xP,"A",{href:!0});var U4t=s(kq);F_o=r(U4t,"PegasusTokenizerFast"),U4t.forEach(t),T_o=r(xP," (BigBird-Pegasus model)"),xP.forEach(t),M_o=i(S),ms=n(S,"LI",{});var $P=s(ms);Efe=n($P,"STRONG",{});var H4t=s(Efe);E_o=r(H4t,"blenderbot"),H4t.forEach(t),C_o=r($P," \u2014 "),Sq=n($P,"A",{href:!0});var J4t=s(Sq);w_o=r(J4t,"BlenderbotTokenizer"),J4t.forEach(t),A_o=r($P," or "),Rq=n($P,"A",{href:!0});var Y4t=s(Rq);L_o=r(Y4t,"BlenderbotTokenizerFast"),Y4t.forEach(t),y_o=r($P," (Blenderbot model)"),$P.forEach(t),x_o=i(S),au=n(S,"LI",{});var HPe=s(au);Cfe=n(HPe,"STRONG",{});var K4t=s(Cfe);$_o=r(K4t,"blenderbot-small"),K4t.forEach(t),k_o=r(HPe," \u2014 "),Pq=n(HPe,"A",{href:!0});var Z4t=s(Pq);S_o=r(Z4t,"BlenderbotSmallTokenizer"),Z4t.forEach(t),R_o=r(HPe," (BlenderbotSmall model)"),HPe.forEach(t),P_o=i(S),nu=n(S,"LI",{});var JPe=s(nu);wfe=n(JPe,"STRONG",{});var eCt=s(wfe);B_o=r(eCt,"bloom"),eCt.forEach(t),I_o=r(JPe," \u2014 "),Bq=n(JPe,"A",{href:!0});var oCt=s(Bq);N_o=r(oCt,"BloomTokenizerFast"),oCt.forEach(t),q_o=r(JPe," (BLOOM model)"),JPe.forEach(t),j_o=i(S),su=n(S,"LI",{});var YPe=s(su);Afe=n(YPe,"STRONG",{});var rCt=s(Afe);D_o=r(rCt,"byt5"),rCt.forEach(t),G_o=r(YPe," \u2014 "),Iq=n(YPe,"A",{href:!0});var tCt=s(Iq);O_o=r(tCt,"ByT5Tokenizer"),tCt.forEach(t),V_o=r(YPe," (ByT5 model)"),YPe.forEach(t),X_o=i(S),fs=n(S,"LI",{});var kP=s(fs);Lfe=n(kP,"STRONG",{});var aCt=s(Lfe);z_o=r(aCt,"camembert"),aCt.forEach(t),Q_o=r(kP," \u2014 "),Nq=n(kP,"A",{href:!0});var nCt=s(Nq);W_o=r(nCt,"CamembertTokenizer"),nCt.forEach(t),U_o=r(kP," or "),qq=n(kP,"A",{href:!0});var sCt=s(qq);H_o=r(sCt,"CamembertTokenizerFast"),sCt.forEach(t),J_o=r(kP," (CamemBERT model)"),kP.forEach(t),Y_o=i(S),lu=n(S,"LI",{});var KPe=s(lu);yfe=n(KPe,"STRONG",{});var lCt=s(yfe);K_o=r(lCt,"canine"),lCt.forEach(t),Z_o=r(KPe," \u2014 "),jq=n(KPe,"A",{href:!0});var iCt=s(jq);ebo=r(iCt,"CanineTokenizer"),iCt.forEach(t),obo=r(KPe," (CANINE model)"),KPe.forEach(t),rbo=i(S),gs=n(S,"LI",{});var SP=s(gs);xfe=n(SP,"STRONG",{});var dCt=s(xfe);tbo=r(dCt,"clip"),dCt.forEach(t),abo=r(SP," \u2014 "),Dq=n(SP,"A",{href:!0});var cCt=s(Dq);nbo=r(cCt,"CLIPTokenizer"),cCt.forEach(t),sbo=r(SP," or "),Gq=n(SP,"A",{href:!0});var mCt=s(Gq);lbo=r(mCt,"CLIPTokenizerFast"),mCt.forEach(t),ibo=r(SP," (CLIP model)"),SP.forEach(t),dbo=i(S),hs=n(S,"LI",{});var RP=s(hs);$fe=n(RP,"STRONG",{});var fCt=s($fe);cbo=r(fCt,"codegen"),fCt.forEach(t),mbo=r(RP," \u2014 "),Oq=n(RP,"A",{href:!0});var gCt=s(Oq);fbo=r(gCt,"CodeGenTokenizer"),gCt.forEach(t),gbo=r(RP," or "),Vq=n(RP,"A",{href:!0});var hCt=s(Vq);hbo=r(hCt,"CodeGenTokenizerFast"),hCt.forEach(t),ubo=r(RP," (CodeGen model)"),RP.forEach(t),pbo=i(S),us=n(S,"LI",{});var PP=s(us);kfe=n(PP,"STRONG",{});var uCt=s(kfe);_bo=r(uCt,"convbert"),uCt.forEach(t),bbo=r(PP," \u2014 "),Xq=n(PP,"A",{href:!0});var pCt=s(Xq);vbo=r(pCt,"ConvBertTokenizer"),pCt.forEach(t),Fbo=r(PP," or "),zq=n(PP,"A",{href:!0});var _Ct=s(zq);Tbo=r(_Ct,"ConvBertTokenizerFast"),_Ct.forEach(t),Mbo=r(PP," (ConvBERT model)"),PP.forEach(t),Ebo=i(S),ps=n(S,"LI",{});var BP=s(ps);Sfe=n(BP,"STRONG",{});var bCt=s(Sfe);Cbo=r(bCt,"cpm"),bCt.forEach(t),wbo=r(BP," \u2014 "),Qq=n(BP,"A",{href:!0});var vCt=s(Qq);Abo=r(vCt,"CpmTokenizer"),vCt.forEach(t),Lbo=r(BP," or "),Wq=n(BP,"A",{href:!0});var FCt=s(Wq);ybo=r(FCt,"CpmTokenizerFast"),FCt.forEach(t),xbo=r(BP," (CPM model)"),BP.forEach(t),$bo=i(S),iu=n(S,"LI",{});var ZPe=s(iu);Rfe=n(ZPe,"STRONG",{});var TCt=s(Rfe);kbo=r(TCt,"ctrl"),TCt.forEach(t),Sbo=r(ZPe," \u2014 "),Uq=n(ZPe,"A",{href:!0});var MCt=s(Uq);Rbo=r(MCt,"CTRLTokenizer"),MCt.forEach(t),Pbo=r(ZPe," (CTRL model)"),ZPe.forEach(t),Bbo=i(S),_s=n(S,"LI",{});var IP=s(_s);Pfe=n(IP,"STRONG",{});var ECt=s(Pfe);Ibo=r(ECt,"data2vec-text"),ECt.forEach(t),Nbo=r(IP," \u2014 "),Hq=n(IP,"A",{href:!0});var CCt=s(Hq);qbo=r(CCt,"RobertaTokenizer"),CCt.forEach(t),jbo=r(IP," or "),Jq=n(IP,"A",{href:!0});var wCt=s(Jq);Dbo=r(wCt,"RobertaTokenizerFast"),wCt.forEach(t),Gbo=r(IP," (Data2VecText model)"),IP.forEach(t),Obo=i(S),bs=n(S,"LI",{});var NP=s(bs);Bfe=n(NP,"STRONG",{});var ACt=s(Bfe);Vbo=r(ACt,"deberta"),ACt.forEach(t),Xbo=r(NP," \u2014 "),Yq=n(NP,"A",{href:!0});var LCt=s(Yq);zbo=r(LCt,"DebertaTokenizer"),LCt.forEach(t),Qbo=r(NP," or "),Kq=n(NP,"A",{href:!0});var yCt=s(Kq);Wbo=r(yCt,"DebertaTokenizerFast"),yCt.forEach(t),Ubo=r(NP," (DeBERTa model)"),NP.forEach(t),Hbo=i(S),vs=n(S,"LI",{});var qP=s(vs);Ife=n(qP,"STRONG",{});var xCt=s(Ife);Jbo=r(xCt,"deberta-v2"),xCt.forEach(t),Ybo=r(qP," \u2014 "),Zq=n(qP,"A",{href:!0});var $Ct=s(Zq);Kbo=r($Ct,"DebertaV2Tokenizer"),$Ct.forEach(t),Zbo=r(qP," or "),ej=n(qP,"A",{href:!0});var kCt=s(ej);e2o=r(kCt,"DebertaV2TokenizerFast"),kCt.forEach(t),o2o=r(qP," (DeBERTa-v2 model)"),qP.forEach(t),r2o=i(S),Fs=n(S,"LI",{});var jP=s(Fs);Nfe=n(jP,"STRONG",{});var SCt=s(Nfe);t2o=r(SCt,"distilbert"),SCt.forEach(t),a2o=r(jP," \u2014 "),oj=n(jP,"A",{href:!0});var RCt=s(oj);n2o=r(RCt,"DistilBertTokenizer"),RCt.forEach(t),s2o=r(jP," or "),rj=n(jP,"A",{href:!0});var PCt=s(rj);l2o=r(PCt,"DistilBertTokenizerFast"),PCt.forEach(t),i2o=r(jP," (DistilBERT model)"),jP.forEach(t),d2o=i(S),Ts=n(S,"LI",{});var DP=s(Ts);qfe=n(DP,"STRONG",{});var BCt=s(qfe);c2o=r(BCt,"dpr"),BCt.forEach(t),m2o=r(DP," \u2014 "),tj=n(DP,"A",{href:!0});var ICt=s(tj);f2o=r(ICt,"DPRQuestionEncoderTokenizer"),ICt.forEach(t),g2o=r(DP," or "),aj=n(DP,"A",{href:!0});var NCt=s(aj);h2o=r(NCt,"DPRQuestionEncoderTokenizerFast"),NCt.forEach(t),u2o=r(DP," (DPR model)"),DP.forEach(t),p2o=i(S),Ms=n(S,"LI",{});var GP=s(Ms);jfe=n(GP,"STRONG",{});var qCt=s(jfe);_2o=r(qCt,"electra"),qCt.forEach(t),b2o=r(GP," \u2014 "),nj=n(GP,"A",{href:!0});var jCt=s(nj);v2o=r(jCt,"ElectraTokenizer"),jCt.forEach(t),F2o=r(GP," or "),sj=n(GP,"A",{href:!0});var DCt=s(sj);T2o=r(DCt,"ElectraTokenizerFast"),DCt.forEach(t),M2o=r(GP," (ELECTRA model)"),GP.forEach(t),E2o=i(S),Es=n(S,"LI",{});var OP=s(Es);Dfe=n(OP,"STRONG",{});var GCt=s(Dfe);C2o=r(GCt,"ernie"),GCt.forEach(t),w2o=r(OP," \u2014 "),lj=n(OP,"A",{href:!0});var OCt=s(lj);A2o=r(OCt,"BertTokenizer"),OCt.forEach(t),L2o=r(OP," or "),ij=n(OP,"A",{href:!0});var VCt=s(ij);y2o=r(VCt,"BertTokenizerFast"),VCt.forEach(t),x2o=r(OP," (ERNIE model)"),OP.forEach(t),$2o=i(S),du=n(S,"LI",{});var eBe=s(du);Gfe=n(eBe,"STRONG",{});var XCt=s(Gfe);k2o=r(XCt,"flaubert"),XCt.forEach(t),S2o=r(eBe," \u2014 "),dj=n(eBe,"A",{href:!0});var zCt=s(dj);R2o=r(zCt,"FlaubertTokenizer"),zCt.forEach(t),P2o=r(eBe," (FlauBERT model)"),eBe.forEach(t),B2o=i(S),Cs=n(S,"LI",{});var VP=s(Cs);Ofe=n(VP,"STRONG",{});var QCt=s(Ofe);I2o=r(QCt,"fnet"),QCt.forEach(t),N2o=r(VP," \u2014 "),cj=n(VP,"A",{href:!0});var WCt=s(cj);q2o=r(WCt,"FNetTokenizer"),WCt.forEach(t),j2o=r(VP," or "),mj=n(VP,"A",{href:!0});var UCt=s(mj);D2o=r(UCt,"FNetTokenizerFast"),UCt.forEach(t),G2o=r(VP," (FNet model)"),VP.forEach(t),O2o=i(S),cu=n(S,"LI",{});var oBe=s(cu);Vfe=n(oBe,"STRONG",{});var HCt=s(Vfe);V2o=r(HCt,"fsmt"),HCt.forEach(t),X2o=r(oBe," \u2014 "),fj=n(oBe,"A",{href:!0});var JCt=s(fj);z2o=r(JCt,"FSMTTokenizer"),JCt.forEach(t),Q2o=r(oBe," (FairSeq Machine-Translation model)"),oBe.forEach(t),W2o=i(S),ws=n(S,"LI",{});var XP=s(ws);Xfe=n(XP,"STRONG",{});var YCt=s(Xfe);U2o=r(YCt,"funnel"),YCt.forEach(t),H2o=r(XP," \u2014 "),gj=n(XP,"A",{href:!0});var KCt=s(gj);J2o=r(KCt,"FunnelTokenizer"),KCt.forEach(t),Y2o=r(XP," or "),hj=n(XP,"A",{href:!0});var ZCt=s(hj);K2o=r(ZCt,"FunnelTokenizerFast"),ZCt.forEach(t),Z2o=r(XP," (Funnel Transformer model)"),XP.forEach(t),e1o=i(S),As=n(S,"LI",{});var zP=s(As);zfe=n(zP,"STRONG",{});var e3t=s(zfe);o1o=r(e3t,"gpt2"),e3t.forEach(t),r1o=r(zP," \u2014 "),uj=n(zP,"A",{href:!0});var o3t=s(uj);t1o=r(o3t,"GPT2Tokenizer"),o3t.forEach(t),a1o=r(zP," or "),pj=n(zP,"A",{href:!0});var r3t=s(pj);n1o=r(r3t,"GPT2TokenizerFast"),r3t.forEach(t),s1o=r(zP," (OpenAI GPT-2 model)"),zP.forEach(t),l1o=i(S),Ls=n(S,"LI",{});var QP=s(Ls);Qfe=n(QP,"STRONG",{});var t3t=s(Qfe);i1o=r(t3t,"gpt_neo"),t3t.forEach(t),d1o=r(QP," \u2014 "),_j=n(QP,"A",{href:!0});var a3t=s(_j);c1o=r(a3t,"GPT2Tokenizer"),a3t.forEach(t),m1o=r(QP," or "),bj=n(QP,"A",{href:!0});var n3t=s(bj);f1o=r(n3t,"GPT2TokenizerFast"),n3t.forEach(t),g1o=r(QP," (GPT Neo model)"),QP.forEach(t),h1o=i(S),mu=n(S,"LI",{});var rBe=s(mu);Wfe=n(rBe,"STRONG",{});var s3t=s(Wfe);u1o=r(s3t,"gpt_neox"),s3t.forEach(t),p1o=r(rBe," \u2014 "),vj=n(rBe,"A",{href:!0});var l3t=s(vj);_1o=r(l3t,"GPTNeoXTokenizerFast"),l3t.forEach(t),b1o=r(rBe," (GPT NeoX model)"),rBe.forEach(t),v1o=i(S),fu=n(S,"LI",{});var tBe=s(fu);Ufe=n(tBe,"STRONG",{});var i3t=s(Ufe);F1o=r(i3t,"gpt_neox_japanese"),i3t.forEach(t),T1o=r(tBe," \u2014 "),Fj=n(tBe,"A",{href:!0});var d3t=s(Fj);M1o=r(d3t,"GPTNeoXJapaneseTokenizer"),d3t.forEach(t),E1o=r(tBe," (GPT NeoX Japanese model)"),tBe.forEach(t),C1o=i(S),ys=n(S,"LI",{});var WP=s(ys);Hfe=n(WP,"STRONG",{});var c3t=s(Hfe);w1o=r(c3t,"gptj"),c3t.forEach(t),A1o=r(WP," \u2014 "),Tj=n(WP,"A",{href:!0});var m3t=s(Tj);L1o=r(m3t,"GPT2Tokenizer"),m3t.forEach(t),y1o=r(WP," or "),Mj=n(WP,"A",{href:!0});var f3t=s(Mj);x1o=r(f3t,"GPT2TokenizerFast"),f3t.forEach(t),$1o=r(WP," (GPT-J model)"),WP.forEach(t),k1o=i(S),xs=n(S,"LI",{});var UP=s(xs);Jfe=n(UP,"STRONG",{});var g3t=s(Jfe);S1o=r(g3t,"groupvit"),g3t.forEach(t),R1o=r(UP," \u2014 "),Ej=n(UP,"A",{href:!0});var h3t=s(Ej);P1o=r(h3t,"CLIPTokenizer"),h3t.forEach(t),B1o=r(UP," or "),Cj=n(UP,"A",{href:!0});var u3t=s(Cj);I1o=r(u3t,"CLIPTokenizerFast"),u3t.forEach(t),N1o=r(UP," (GroupViT model)"),UP.forEach(t),q1o=i(S),$s=n(S,"LI",{});var HP=s($s);Yfe=n(HP,"STRONG",{});var p3t=s(Yfe);j1o=r(p3t,"herbert"),p3t.forEach(t),D1o=r(HP," \u2014 "),wj=n(HP,"A",{href:!0});var _3t=s(wj);G1o=r(_3t,"HerbertTokenizer"),_3t.forEach(t),O1o=r(HP," or "),Aj=n(HP,"A",{href:!0});var b3t=s(Aj);V1o=r(b3t,"HerbertTokenizerFast"),b3t.forEach(t),X1o=r(HP," (HerBERT model)"),HP.forEach(t),z1o=i(S),gu=n(S,"LI",{});var aBe=s(gu);Kfe=n(aBe,"STRONG",{});var v3t=s(Kfe);Q1o=r(v3t,"hubert"),v3t.forEach(t),W1o=r(aBe," \u2014 "),Lj=n(aBe,"A",{href:!0});var F3t=s(Lj);U1o=r(F3t,"Wav2Vec2CTCTokenizer"),F3t.forEach(t),H1o=r(aBe," (Hubert model)"),aBe.forEach(t),J1o=i(S),ks=n(S,"LI",{});var JP=s(ks);Zfe=n(JP,"STRONG",{});var T3t=s(Zfe);Y1o=r(T3t,"ibert"),T3t.forEach(t),K1o=r(JP," \u2014 "),yj=n(JP,"A",{href:!0});var M3t=s(yj);Z1o=r(M3t,"RobertaTokenizer"),M3t.forEach(t),evo=r(JP," or "),xj=n(JP,"A",{href:!0});var E3t=s(xj);ovo=r(E3t,"RobertaTokenizerFast"),E3t.forEach(t),rvo=r(JP," (I-BERT model)"),JP.forEach(t),tvo=i(S),Ss=n(S,"LI",{});var YP=s(Ss);ege=n(YP,"STRONG",{});var C3t=s(ege);avo=r(C3t,"layoutlm"),C3t.forEach(t),nvo=r(YP," \u2014 "),$j=n(YP,"A",{href:!0});var w3t=s($j);svo=r(w3t,"LayoutLMTokenizer"),w3t.forEach(t),lvo=r(YP," or "),kj=n(YP,"A",{href:!0});var A3t=s(kj);ivo=r(A3t,"LayoutLMTokenizerFast"),A3t.forEach(t),dvo=r(YP," (LayoutLM model)"),YP.forEach(t),cvo=i(S),Rs=n(S,"LI",{});var KP=s(Rs);oge=n(KP,"STRONG",{});var L3t=s(oge);mvo=r(L3t,"layoutlmv2"),L3t.forEach(t),fvo=r(KP," \u2014 "),Sj=n(KP,"A",{href:!0});var y3t=s(Sj);gvo=r(y3t,"LayoutLMv2Tokenizer"),y3t.forEach(t),hvo=r(KP," or "),Rj=n(KP,"A",{href:!0});var x3t=s(Rj);uvo=r(x3t,"LayoutLMv2TokenizerFast"),x3t.forEach(t),pvo=r(KP," (LayoutLMv2 model)"),KP.forEach(t),_vo=i(S),Ps=n(S,"LI",{});var ZP=s(Ps);rge=n(ZP,"STRONG",{});var $3t=s(rge);bvo=r($3t,"layoutlmv3"),$3t.forEach(t),vvo=r(ZP," \u2014 "),Pj=n(ZP,"A",{href:!0});var k3t=s(Pj);Fvo=r(k3t,"LayoutLMv3Tokenizer"),k3t.forEach(t),Tvo=r(ZP," or "),Bj=n(ZP,"A",{href:!0});var S3t=s(Bj);Mvo=r(S3t,"LayoutLMv3TokenizerFast"),S3t.forEach(t),Evo=r(ZP," (LayoutLMv3 model)"),ZP.forEach(t),Cvo=i(S),Bs=n(S,"LI",{});var eB=s(Bs);tge=n(eB,"STRONG",{});var R3t=s(tge);wvo=r(R3t,"layoutxlm"),R3t.forEach(t),Avo=r(eB," \u2014 "),Ij=n(eB,"A",{href:!0});var P3t=s(Ij);Lvo=r(P3t,"LayoutXLMTokenizer"),P3t.forEach(t),yvo=r(eB," or "),Nj=n(eB,"A",{href:!0});var B3t=s(Nj);xvo=r(B3t,"LayoutXLMTokenizerFast"),B3t.forEach(t),$vo=r(eB," (LayoutXLM model)"),eB.forEach(t),kvo=i(S),Is=n(S,"LI",{});var oB=s(Is);age=n(oB,"STRONG",{});var I3t=s(age);Svo=r(I3t,"led"),I3t.forEach(t),Rvo=r(oB," \u2014 "),qj=n(oB,"A",{href:!0});var N3t=s(qj);Pvo=r(N3t,"LEDTokenizer"),N3t.forEach(t),Bvo=r(oB," or "),jj=n(oB,"A",{href:!0});var q3t=s(jj);Ivo=r(q3t,"LEDTokenizerFast"),q3t.forEach(t),Nvo=r(oB," (LED model)"),oB.forEach(t),qvo=i(S),Ns=n(S,"LI",{});var rB=s(Ns);nge=n(rB,"STRONG",{});var j3t=s(nge);jvo=r(j3t,"longformer"),j3t.forEach(t),Dvo=r(rB," \u2014 "),Dj=n(rB,"A",{href:!0});var D3t=s(Dj);Gvo=r(D3t,"LongformerTokenizer"),D3t.forEach(t),Ovo=r(rB," or "),Gj=n(rB,"A",{href:!0});var G3t=s(Gj);Vvo=r(G3t,"LongformerTokenizerFast"),G3t.forEach(t),Xvo=r(rB," (Longformer model)"),rB.forEach(t),zvo=i(S),qs=n(S,"LI",{});var tB=s(qs);sge=n(tB,"STRONG",{});var O3t=s(sge);Qvo=r(O3t,"longt5"),O3t.forEach(t),Wvo=r(tB," \u2014 "),Oj=n(tB,"A",{href:!0});var V3t=s(Oj);Uvo=r(V3t,"T5Tokenizer"),V3t.forEach(t),Hvo=r(tB," or "),Vj=n(tB,"A",{href:!0});var X3t=s(Vj);Jvo=r(X3t,"T5TokenizerFast"),X3t.forEach(t),Yvo=r(tB," (LongT5 model)"),tB.forEach(t),Kvo=i(S),hu=n(S,"LI",{});var nBe=s(hu);lge=n(nBe,"STRONG",{});var z3t=s(lge);Zvo=r(z3t,"luke"),z3t.forEach(t),eFo=r(nBe," \u2014 "),Xj=n(nBe,"A",{href:!0});var Q3t=s(Xj);oFo=r(Q3t,"LukeTokenizer"),Q3t.forEach(t),rFo=r(nBe," (LUKE model)"),nBe.forEach(t),tFo=i(S),js=n(S,"LI",{});var aB=s(js);ige=n(aB,"STRONG",{});var W3t=s(ige);aFo=r(W3t,"lxmert"),W3t.forEach(t),nFo=r(aB," \u2014 "),zj=n(aB,"A",{href:!0});var U3t=s(zj);sFo=r(U3t,"LxmertTokenizer"),U3t.forEach(t),lFo=r(aB," or "),Qj=n(aB,"A",{href:!0});var H3t=s(Qj);iFo=r(H3t,"LxmertTokenizerFast"),H3t.forEach(t),dFo=r(aB," (LXMERT model)"),aB.forEach(t),cFo=i(S),uu=n(S,"LI",{});var sBe=s(uu);dge=n(sBe,"STRONG",{});var J3t=s(dge);mFo=r(J3t,"m2m_100"),J3t.forEach(t),fFo=r(sBe," \u2014 "),Wj=n(sBe,"A",{href:!0});var Y3t=s(Wj);gFo=r(Y3t,"M2M100Tokenizer"),Y3t.forEach(t),hFo=r(sBe," (M2M100 model)"),sBe.forEach(t),uFo=i(S),pu=n(S,"LI",{});var lBe=s(pu);cge=n(lBe,"STRONG",{});var K3t=s(cge);pFo=r(K3t,"marian"),K3t.forEach(t),_Fo=r(lBe," \u2014 "),Uj=n(lBe,"A",{href:!0});var Z3t=s(Uj);bFo=r(Z3t,"MarianTokenizer"),Z3t.forEach(t),vFo=r(lBe," (Marian model)"),lBe.forEach(t),FFo=i(S),Ds=n(S,"LI",{});var nB=s(Ds);mge=n(nB,"STRONG",{});var e5t=s(mge);TFo=r(e5t,"mbart"),e5t.forEach(t),MFo=r(nB," \u2014 "),Hj=n(nB,"A",{href:!0});var o5t=s(Hj);EFo=r(o5t,"MBartTokenizer"),o5t.forEach(t),CFo=r(nB," or "),Jj=n(nB,"A",{href:!0});var r5t=s(Jj);wFo=r(r5t,"MBartTokenizerFast"),r5t.forEach(t),AFo=r(nB," (mBART model)"),nB.forEach(t),LFo=i(S),Gs=n(S,"LI",{});var sB=s(Gs);fge=n(sB,"STRONG",{});var t5t=s(fge);yFo=r(t5t,"mbart50"),t5t.forEach(t),xFo=r(sB," \u2014 "),Yj=n(sB,"A",{href:!0});var a5t=s(Yj);$Fo=r(a5t,"MBart50Tokenizer"),a5t.forEach(t),kFo=r(sB," or "),Kj=n(sB,"A",{href:!0});var n5t=s(Kj);SFo=r(n5t,"MBart50TokenizerFast"),n5t.forEach(t),RFo=r(sB," (mBART-50 model)"),sB.forEach(t),PFo=i(S),Os=n(S,"LI",{});var lB=s(Os);gge=n(lB,"STRONG",{});var s5t=s(gge);BFo=r(s5t,"megatron-bert"),s5t.forEach(t),IFo=r(lB," \u2014 "),Zj=n(lB,"A",{href:!0});var l5t=s(Zj);NFo=r(l5t,"BertTokenizer"),l5t.forEach(t),qFo=r(lB," or "),eD=n(lB,"A",{href:!0});var i5t=s(eD);jFo=r(i5t,"BertTokenizerFast"),i5t.forEach(t),DFo=r(lB," (Megatron-BERT model)"),lB.forEach(t),GFo=i(S),_u=n(S,"LI",{});var iBe=s(_u);hge=n(iBe,"STRONG",{});var d5t=s(hge);OFo=r(d5t,"mluke"),d5t.forEach(t),VFo=r(iBe," \u2014 "),oD=n(iBe,"A",{href:!0});var c5t=s(oD);XFo=r(c5t,"MLukeTokenizer"),c5t.forEach(t),zFo=r(iBe," (mLUKE model)"),iBe.forEach(t),QFo=i(S),Vs=n(S,"LI",{});var iB=s(Vs);uge=n(iB,"STRONG",{});var m5t=s(uge);WFo=r(m5t,"mobilebert"),m5t.forEach(t),UFo=r(iB," \u2014 "),rD=n(iB,"A",{href:!0});var f5t=s(rD);HFo=r(f5t,"MobileBertTokenizer"),f5t.forEach(t),JFo=r(iB," or "),tD=n(iB,"A",{href:!0});var g5t=s(tD);YFo=r(g5t,"MobileBertTokenizerFast"),g5t.forEach(t),KFo=r(iB," (MobileBERT model)"),iB.forEach(t),ZFo=i(S),Xs=n(S,"LI",{});var dB=s(Xs);pge=n(dB,"STRONG",{});var h5t=s(pge);eTo=r(h5t,"mpnet"),h5t.forEach(t),oTo=r(dB," \u2014 "),aD=n(dB,"A",{href:!0});var u5t=s(aD);rTo=r(u5t,"MPNetTokenizer"),u5t.forEach(t),tTo=r(dB," or "),nD=n(dB,"A",{href:!0});var p5t=s(nD);aTo=r(p5t,"MPNetTokenizerFast"),p5t.forEach(t),nTo=r(dB," (MPNet model)"),dB.forEach(t),sTo=i(S),zs=n(S,"LI",{});var cB=s(zs);_ge=n(cB,"STRONG",{});var _5t=s(_ge);lTo=r(_5t,"mt5"),_5t.forEach(t),iTo=r(cB," \u2014 "),sD=n(cB,"A",{href:!0});var b5t=s(sD);dTo=r(b5t,"MT5Tokenizer"),b5t.forEach(t),cTo=r(cB," or "),lD=n(cB,"A",{href:!0});var v5t=s(lD);mTo=r(v5t,"MT5TokenizerFast"),v5t.forEach(t),fTo=r(cB," (MT5 model)"),cB.forEach(t),gTo=i(S),Qs=n(S,"LI",{});var mB=s(Qs);bge=n(mB,"STRONG",{});var F5t=s(bge);hTo=r(F5t,"mvp"),F5t.forEach(t),uTo=r(mB," \u2014 "),iD=n(mB,"A",{href:!0});var T5t=s(iD);pTo=r(T5t,"MvpTokenizer"),T5t.forEach(t),_To=r(mB," or "),dD=n(mB,"A",{href:!0});var M5t=s(dD);bTo=r(M5t,"MvpTokenizerFast"),M5t.forEach(t),vTo=r(mB," (MVP model)"),mB.forEach(t),FTo=i(S),Ws=n(S,"LI",{});var fB=s(Ws);vge=n(fB,"STRONG",{});var E5t=s(vge);TTo=r(E5t,"nezha"),E5t.forEach(t),MTo=r(fB," \u2014 "),cD=n(fB,"A",{href:!0});var C5t=s(cD);ETo=r(C5t,"BertTokenizer"),C5t.forEach(t),CTo=r(fB," or "),mD=n(fB,"A",{href:!0});var w5t=s(mD);wTo=r(w5t,"BertTokenizerFast"),w5t.forEach(t),ATo=r(fB," (Nezha model)"),fB.forEach(t),LTo=i(S),Us=n(S,"LI",{});var gB=s(Us);Fge=n(gB,"STRONG",{});var A5t=s(Fge);yTo=r(A5t,"nllb"),A5t.forEach(t),xTo=r(gB," \u2014 "),fD=n(gB,"A",{href:!0});var L5t=s(fD);$To=r(L5t,"NllbTokenizer"),L5t.forEach(t),kTo=r(gB," or "),gD=n(gB,"A",{href:!0});var y5t=s(gD);STo=r(y5t,"NllbTokenizerFast"),y5t.forEach(t),RTo=r(gB," (NLLB model)"),gB.forEach(t),PTo=i(S),Hs=n(S,"LI",{});var hB=s(Hs);Tge=n(hB,"STRONG",{});var x5t=s(Tge);BTo=r(x5t,"nystromformer"),x5t.forEach(t),ITo=r(hB," \u2014 "),hD=n(hB,"A",{href:!0});var $5t=s(hD);NTo=r($5t,"AlbertTokenizer"),$5t.forEach(t),qTo=r(hB," or "),uD=n(hB,"A",{href:!0});var k5t=s(uD);jTo=r(k5t,"AlbertTokenizerFast"),k5t.forEach(t),DTo=r(hB," (Nystr\xF6mformer model)"),hB.forEach(t),GTo=i(S),Js=n(S,"LI",{});var uB=s(Js);Mge=n(uB,"STRONG",{});var S5t=s(Mge);OTo=r(S5t,"openai-gpt"),S5t.forEach(t),VTo=r(uB," \u2014 "),pD=n(uB,"A",{href:!0});var R5t=s(pD);XTo=r(R5t,"OpenAIGPTTokenizer"),R5t.forEach(t),zTo=r(uB," or "),_D=n(uB,"A",{href:!0});var P5t=s(_D);QTo=r(P5t,"OpenAIGPTTokenizerFast"),P5t.forEach(t),WTo=r(uB," (OpenAI GPT model)"),uB.forEach(t),UTo=i(S),bu=n(S,"LI",{});var dBe=s(bu);Ege=n(dBe,"STRONG",{});var B5t=s(Ege);HTo=r(B5t,"opt"),B5t.forEach(t),JTo=r(dBe," \u2014 "),bD=n(dBe,"A",{href:!0});var I5t=s(bD);YTo=r(I5t,"GPT2Tokenizer"),I5t.forEach(t),KTo=r(dBe," (OPT model)"),dBe.forEach(t),ZTo=i(S),Ys=n(S,"LI",{});var pB=s(Ys);Cge=n(pB,"STRONG",{});var N5t=s(Cge);eMo=r(N5t,"owlvit"),N5t.forEach(t),oMo=r(pB," \u2014 "),vD=n(pB,"A",{href:!0});var q5t=s(vD);rMo=r(q5t,"CLIPTokenizer"),q5t.forEach(t),tMo=r(pB," or "),FD=n(pB,"A",{href:!0});var j5t=s(FD);aMo=r(j5t,"CLIPTokenizerFast"),j5t.forEach(t),nMo=r(pB," (OWL-ViT model)"),pB.forEach(t),sMo=i(S),Ks=n(S,"LI",{});var _B=s(Ks);wge=n(_B,"STRONG",{});var D5t=s(wge);lMo=r(D5t,"pegasus"),D5t.forEach(t),iMo=r(_B," \u2014 "),TD=n(_B,"A",{href:!0});var G5t=s(TD);dMo=r(G5t,"PegasusTokenizer"),G5t.forEach(t),cMo=r(_B," or "),MD=n(_B,"A",{href:!0});var O5t=s(MD);mMo=r(O5t,"PegasusTokenizerFast"),O5t.forEach(t),fMo=r(_B," (Pegasus model)"),_B.forEach(t),gMo=i(S),vu=n(S,"LI",{});var cBe=s(vu);Age=n(cBe,"STRONG",{});var V5t=s(Age);hMo=r(V5t,"perceiver"),V5t.forEach(t),uMo=r(cBe," \u2014 "),ED=n(cBe,"A",{href:!0});var X5t=s(ED);pMo=r(X5t,"PerceiverTokenizer"),X5t.forEach(t),_Mo=r(cBe," (Perceiver model)"),cBe.forEach(t),bMo=i(S),Fu=n(S,"LI",{});var mBe=s(Fu);Lge=n(mBe,"STRONG",{});var z5t=s(Lge);vMo=r(z5t,"phobert"),z5t.forEach(t),FMo=r(mBe," \u2014 "),CD=n(mBe,"A",{href:!0});var Q5t=s(CD);TMo=r(Q5t,"PhobertTokenizer"),Q5t.forEach(t),MMo=r(mBe," (PhoBERT model)"),mBe.forEach(t),EMo=i(S),Tu=n(S,"LI",{});var fBe=s(Tu);yge=n(fBe,"STRONG",{});var W5t=s(yge);CMo=r(W5t,"plbart"),W5t.forEach(t),wMo=r(fBe," \u2014 "),wD=n(fBe,"A",{href:!0});var U5t=s(wD);AMo=r(U5t,"PLBartTokenizer"),U5t.forEach(t),LMo=r(fBe," (PLBart model)"),fBe.forEach(t),yMo=i(S),Mu=n(S,"LI",{});var gBe=s(Mu);xge=n(gBe,"STRONG",{});var H5t=s(xge);xMo=r(H5t,"prophetnet"),H5t.forEach(t),$Mo=r(gBe," \u2014 "),AD=n(gBe,"A",{href:!0});var J5t=s(AD);kMo=r(J5t,"ProphetNetTokenizer"),J5t.forEach(t),SMo=r(gBe," (ProphetNet model)"),gBe.forEach(t),RMo=i(S),Zs=n(S,"LI",{});var bB=s(Zs);$ge=n(bB,"STRONG",{});var Y5t=s($ge);PMo=r(Y5t,"qdqbert"),Y5t.forEach(t),BMo=r(bB," \u2014 "),LD=n(bB,"A",{href:!0});var K5t=s(LD);IMo=r(K5t,"BertTokenizer"),K5t.forEach(t),NMo=r(bB," or "),yD=n(bB,"A",{href:!0});var Z5t=s(yD);qMo=r(Z5t,"BertTokenizerFast"),Z5t.forEach(t),jMo=r(bB," (QDQBert model)"),bB.forEach(t),DMo=i(S),Eu=n(S,"LI",{});var hBe=s(Eu);kge=n(hBe,"STRONG",{});var e0t=s(kge);GMo=r(e0t,"rag"),e0t.forEach(t),OMo=r(hBe," \u2014 "),xD=n(hBe,"A",{href:!0});var o0t=s(xD);VMo=r(o0t,"RagTokenizer"),o0t.forEach(t),XMo=r(hBe," (RAG model)"),hBe.forEach(t),zMo=i(S),el=n(S,"LI",{});var vB=s(el);Sge=n(vB,"STRONG",{});var r0t=s(Sge);QMo=r(r0t,"realm"),r0t.forEach(t),WMo=r(vB," \u2014 "),$D=n(vB,"A",{href:!0});var t0t=s($D);UMo=r(t0t,"RealmTokenizer"),t0t.forEach(t),HMo=r(vB," or "),kD=n(vB,"A",{href:!0});var a0t=s(kD);JMo=r(a0t,"RealmTokenizerFast"),a0t.forEach(t),YMo=r(vB," (REALM model)"),vB.forEach(t),KMo=i(S),ol=n(S,"LI",{});var FB=s(ol);Rge=n(FB,"STRONG",{});var n0t=s(Rge);ZMo=r(n0t,"reformer"),n0t.forEach(t),eEo=r(FB," \u2014 "),SD=n(FB,"A",{href:!0});var s0t=s(SD);oEo=r(s0t,"ReformerTokenizer"),s0t.forEach(t),rEo=r(FB," or "),RD=n(FB,"A",{href:!0});var l0t=s(RD);tEo=r(l0t,"ReformerTokenizerFast"),l0t.forEach(t),aEo=r(FB," (Reformer model)"),FB.forEach(t),nEo=i(S),rl=n(S,"LI",{});var TB=s(rl);Pge=n(TB,"STRONG",{});var i0t=s(Pge);sEo=r(i0t,"rembert"),i0t.forEach(t),lEo=r(TB," \u2014 "),PD=n(TB,"A",{href:!0});var d0t=s(PD);iEo=r(d0t,"RemBertTokenizer"),d0t.forEach(t),dEo=r(TB," or "),BD=n(TB,"A",{href:!0});var c0t=s(BD);cEo=r(c0t,"RemBertTokenizerFast"),c0t.forEach(t),mEo=r(TB," (RemBERT model)"),TB.forEach(t),fEo=i(S),tl=n(S,"LI",{});var MB=s(tl);Bge=n(MB,"STRONG",{});var m0t=s(Bge);gEo=r(m0t,"retribert"),m0t.forEach(t),hEo=r(MB," \u2014 "),ID=n(MB,"A",{href:!0});var f0t=s(ID);uEo=r(f0t,"RetriBertTokenizer"),f0t.forEach(t),pEo=r(MB," or "),ND=n(MB,"A",{href:!0});var g0t=s(ND);_Eo=r(g0t,"RetriBertTokenizerFast"),g0t.forEach(t),bEo=r(MB," (RetriBERT model)"),MB.forEach(t),vEo=i(S),al=n(S,"LI",{});var EB=s(al);Ige=n(EB,"STRONG",{});var h0t=s(Ige);FEo=r(h0t,"roberta"),h0t.forEach(t),TEo=r(EB," \u2014 "),qD=n(EB,"A",{href:!0});var u0t=s(qD);MEo=r(u0t,"RobertaTokenizer"),u0t.forEach(t),EEo=r(EB," or "),jD=n(EB,"A",{href:!0});var p0t=s(jD);CEo=r(p0t,"RobertaTokenizerFast"),p0t.forEach(t),wEo=r(EB," (RoBERTa model)"),EB.forEach(t),AEo=i(S),nl=n(S,"LI",{});var CB=s(nl);Nge=n(CB,"STRONG",{});var _0t=s(Nge);LEo=r(_0t,"roformer"),_0t.forEach(t),yEo=r(CB," \u2014 "),DD=n(CB,"A",{href:!0});var b0t=s(DD);xEo=r(b0t,"RoFormerTokenizer"),b0t.forEach(t),$Eo=r(CB," or "),GD=n(CB,"A",{href:!0});var v0t=s(GD);kEo=r(v0t,"RoFormerTokenizerFast"),v0t.forEach(t),SEo=r(CB," (RoFormer model)"),CB.forEach(t),REo=i(S),Cu=n(S,"LI",{});var uBe=s(Cu);qge=n(uBe,"STRONG",{});var F0t=s(qge);PEo=r(F0t,"speech_to_text"),F0t.forEach(t),BEo=r(uBe," \u2014 "),OD=n(uBe,"A",{href:!0});var T0t=s(OD);IEo=r(T0t,"Speech2TextTokenizer"),T0t.forEach(t),NEo=r(uBe," (Speech2Text model)"),uBe.forEach(t),qEo=i(S),wu=n(S,"LI",{});var pBe=s(wu);jge=n(pBe,"STRONG",{});var M0t=s(jge);jEo=r(M0t,"speech_to_text_2"),M0t.forEach(t),DEo=r(pBe," \u2014 "),VD=n(pBe,"A",{href:!0});var E0t=s(VD);GEo=r(E0t,"Speech2Text2Tokenizer"),E0t.forEach(t),OEo=r(pBe," (Speech2Text2 model)"),pBe.forEach(t),VEo=i(S),sl=n(S,"LI",{});var wB=s(sl);Dge=n(wB,"STRONG",{});var C0t=s(Dge);XEo=r(C0t,"splinter"),C0t.forEach(t),zEo=r(wB," \u2014 "),XD=n(wB,"A",{href:!0});var w0t=s(XD);QEo=r(w0t,"SplinterTokenizer"),w0t.forEach(t),WEo=r(wB," or "),zD=n(wB,"A",{href:!0});var A0t=s(zD);UEo=r(A0t,"SplinterTokenizerFast"),A0t.forEach(t),HEo=r(wB," (Splinter model)"),wB.forEach(t),JEo=i(S),ll=n(S,"LI",{});var AB=s(ll);Gge=n(AB,"STRONG",{});var L0t=s(Gge);YEo=r(L0t,"squeezebert"),L0t.forEach(t),KEo=r(AB," \u2014 "),QD=n(AB,"A",{href:!0});var y0t=s(QD);ZEo=r(y0t,"SqueezeBertTokenizer"),y0t.forEach(t),e4o=r(AB," or "),WD=n(AB,"A",{href:!0});var x0t=s(WD);o4o=r(x0t,"SqueezeBertTokenizerFast"),x0t.forEach(t),r4o=r(AB," (SqueezeBERT model)"),AB.forEach(t),t4o=i(S),il=n(S,"LI",{});var LB=s(il);Oge=n(LB,"STRONG",{});var $0t=s(Oge);a4o=r($0t,"t5"),$0t.forEach(t),n4o=r(LB," \u2014 "),UD=n(LB,"A",{href:!0});var k0t=s(UD);s4o=r(k0t,"T5Tokenizer"),k0t.forEach(t),l4o=r(LB," or "),HD=n(LB,"A",{href:!0});var S0t=s(HD);i4o=r(S0t,"T5TokenizerFast"),S0t.forEach(t),d4o=r(LB," (T5 model)"),LB.forEach(t),c4o=i(S),Au=n(S,"LI",{});var _Be=s(Au);Vge=n(_Be,"STRONG",{});var R0t=s(Vge);m4o=r(R0t,"tapas"),R0t.forEach(t),f4o=r(_Be," \u2014 "),JD=n(_Be,"A",{href:!0});var P0t=s(JD);g4o=r(P0t,"TapasTokenizer"),P0t.forEach(t),h4o=r(_Be," (TAPAS model)"),_Be.forEach(t),u4o=i(S),Lu=n(S,"LI",{});var bBe=s(Lu);Xge=n(bBe,"STRONG",{});var B0t=s(Xge);p4o=r(B0t,"tapex"),B0t.forEach(t),_4o=r(bBe," \u2014 "),YD=n(bBe,"A",{href:!0});var I0t=s(YD);b4o=r(I0t,"TapexTokenizer"),I0t.forEach(t),v4o=r(bBe," (TAPEX model)"),bBe.forEach(t),F4o=i(S),yu=n(S,"LI",{});var vBe=s(yu);zge=n(vBe,"STRONG",{});var N0t=s(zge);T4o=r(N0t,"transfo-xl"),N0t.forEach(t),M4o=r(vBe," \u2014 "),KD=n(vBe,"A",{href:!0});var q0t=s(KD);E4o=r(q0t,"TransfoXLTokenizer"),q0t.forEach(t),C4o=r(vBe," (Transformer-XL model)"),vBe.forEach(t),w4o=i(S),dl=n(S,"LI",{});var yB=s(dl);Qge=n(yB,"STRONG",{});var j0t=s(Qge);A4o=r(j0t,"vilt"),j0t.forEach(t),L4o=r(yB," \u2014 "),ZD=n(yB,"A",{href:!0});var D0t=s(ZD);y4o=r(D0t,"BertTokenizer"),D0t.forEach(t),x4o=r(yB," or "),eG=n(yB,"A",{href:!0});var G0t=s(eG);$4o=r(G0t,"BertTokenizerFast"),G0t.forEach(t),k4o=r(yB," (ViLT model)"),yB.forEach(t),S4o=i(S),cl=n(S,"LI",{});var xB=s(cl);Wge=n(xB,"STRONG",{});var O0t=s(Wge);R4o=r(O0t,"visual_bert"),O0t.forEach(t),P4o=r(xB," \u2014 "),oG=n(xB,"A",{href:!0});var V0t=s(oG);B4o=r(V0t,"BertTokenizer"),V0t.forEach(t),I4o=r(xB," or "),rG=n(xB,"A",{href:!0});var X0t=s(rG);N4o=r(X0t,"BertTokenizerFast"),X0t.forEach(t),q4o=r(xB," (VisualBERT model)"),xB.forEach(t),j4o=i(S),xu=n(S,"LI",{});var FBe=s(xu);Uge=n(FBe,"STRONG",{});var z0t=s(Uge);D4o=r(z0t,"wav2vec2"),z0t.forEach(t),G4o=r(FBe," \u2014 "),tG=n(FBe,"A",{href:!0});var Q0t=s(tG);O4o=r(Q0t,"Wav2Vec2CTCTokenizer"),Q0t.forEach(t),V4o=r(FBe," (Wav2Vec2 model)"),FBe.forEach(t),X4o=i(S),$u=n(S,"LI",{});var TBe=s($u);Hge=n(TBe,"STRONG",{});var W0t=s(Hge);z4o=r(W0t,"wav2vec2-conformer"),W0t.forEach(t),Q4o=r(TBe," \u2014 "),aG=n(TBe,"A",{href:!0});var U0t=s(aG);W4o=r(U0t,"Wav2Vec2CTCTokenizer"),U0t.forEach(t),U4o=r(TBe," (Wav2Vec2-Conformer model)"),TBe.forEach(t),H4o=i(S),ku=n(S,"LI",{});var MBe=s(ku);Jge=n(MBe,"STRONG",{});var H0t=s(Jge);J4o=r(H0t,"wav2vec2_phoneme"),H0t.forEach(t),Y4o=r(MBe," \u2014 "),nG=n(MBe,"A",{href:!0});var J0t=s(nG);K4o=r(J0t,"Wav2Vec2PhonemeCTCTokenizer"),J0t.forEach(t),Z4o=r(MBe," (Wav2Vec2Phoneme model)"),MBe.forEach(t),eCo=i(S),ml=n(S,"LI",{});var $B=s(ml);Yge=n($B,"STRONG",{});var Y0t=s(Yge);oCo=r(Y0t,"xclip"),Y0t.forEach(t),rCo=r($B," \u2014 "),sG=n($B,"A",{href:!0});var K0t=s(sG);tCo=r(K0t,"CLIPTokenizer"),K0t.forEach(t),aCo=r($B," or "),lG=n($B,"A",{href:!0});var Z0t=s(lG);nCo=r(Z0t,"CLIPTokenizerFast"),Z0t.forEach(t),sCo=r($B," (X-CLIP model)"),$B.forEach(t),lCo=i(S),fl=n(S,"LI",{});var kB=s(fl);Kge=n(kB,"STRONG",{});var ewt=s(Kge);iCo=r(ewt,"xglm"),ewt.forEach(t),dCo=r(kB," \u2014 "),iG=n(kB,"A",{href:!0});var owt=s(iG);cCo=r(owt,"XGLMTokenizer"),owt.forEach(t),mCo=r(kB," or "),dG=n(kB,"A",{href:!0});var rwt=s(dG);fCo=r(rwt,"XGLMTokenizerFast"),rwt.forEach(t),gCo=r(kB," (XGLM model)"),kB.forEach(t),hCo=i(S),Su=n(S,"LI",{});var EBe=s(Su);Zge=n(EBe,"STRONG",{});var twt=s(Zge);uCo=r(twt,"xlm"),twt.forEach(t),pCo=r(EBe," \u2014 "),cG=n(EBe,"A",{href:!0});var awt=s(cG);_Co=r(awt,"XLMTokenizer"),awt.forEach(t),bCo=r(EBe," (XLM model)"),EBe.forEach(t),vCo=i(S),Ru=n(S,"LI",{});var CBe=s(Ru);ehe=n(CBe,"STRONG",{});var nwt=s(ehe);FCo=r(nwt,"xlm-prophetnet"),nwt.forEach(t),TCo=r(CBe," \u2014 "),mG=n(CBe,"A",{href:!0});var swt=s(mG);MCo=r(swt,"XLMProphetNetTokenizer"),swt.forEach(t),ECo=r(CBe," (XLM-ProphetNet model)"),CBe.forEach(t),CCo=i(S),gl=n(S,"LI",{});var SB=s(gl);ohe=n(SB,"STRONG",{});var lwt=s(ohe);wCo=r(lwt,"xlm-roberta"),lwt.forEach(t),ACo=r(SB," \u2014 "),fG=n(SB,"A",{href:!0});var iwt=s(fG);LCo=r(iwt,"XLMRobertaTokenizer"),iwt.forEach(t),yCo=r(SB," or "),gG=n(SB,"A",{href:!0});var dwt=s(gG);xCo=r(dwt,"XLMRobertaTokenizerFast"),dwt.forEach(t),$Co=r(SB," (XLM-RoBERTa model)"),SB.forEach(t),kCo=i(S),hl=n(S,"LI",{});var RB=s(hl);rhe=n(RB,"STRONG",{});var cwt=s(rhe);SCo=r(cwt,"xlm-roberta-xl"),cwt.forEach(t),RCo=r(RB," \u2014 "),hG=n(RB,"A",{href:!0});var mwt=s(hG);PCo=r(mwt,"XLMRobertaTokenizer"),mwt.forEach(t),BCo=r(RB," or "),uG=n(RB,"A",{href:!0});var fwt=s(uG);ICo=r(fwt,"XLMRobertaTokenizerFast"),fwt.forEach(t),NCo=r(RB," (XLM-RoBERTa-XL model)"),RB.forEach(t),qCo=i(S),ul=n(S,"LI",{});var PB=s(ul);the=n(PB,"STRONG",{});var gwt=s(the);jCo=r(gwt,"xlnet"),gwt.forEach(t),DCo=r(PB," \u2014 "),pG=n(PB,"A",{href:!0});var hwt=s(pG);GCo=r(hwt,"XLNetTokenizer"),hwt.forEach(t),OCo=r(PB," or "),_G=n(PB,"A",{href:!0});var uwt=s(_G);VCo=r(uwt,"XLNetTokenizerFast"),uwt.forEach(t),XCo=r(PB," (XLNet model)"),PB.forEach(t),zCo=i(S),pl=n(S,"LI",{});var BB=s(pl);ahe=n(BB,"STRONG",{});var pwt=s(ahe);QCo=r(pwt,"yoso"),pwt.forEach(t),WCo=r(BB," \u2014 "),bG=n(BB,"A",{href:!0});var _wt=s(bG);UCo=r(_wt,"AlbertTokenizer"),_wt.forEach(t),HCo=r(BB," or "),vG=n(BB,"A",{href:!0});var bwt=s(vG);JCo=r(bwt,"AlbertTokenizerFast"),bwt.forEach(t),YCo=r(BB," (YOSO model)"),BB.forEach(t),S.forEach(t),KCo=i(El),T(Pu.$$.fragment,El),El.forEach(t),ZCo=i(Ml),Bu=n(Ml,"DIV",{class:!0});var soo=s(Bu);T(ex.$$.fragment,soo),e3o=i(soo),nhe=n(soo,"P",{});var vwt=s(nhe);o3o=r(vwt,"Register a new tokenizer in this mapping."),vwt.forEach(t),soo.forEach(t),Ml.forEach(t),YKe=i(m),hd=n(m,"H2",{class:!0});var loo=s(hd);Iu=n(loo,"A",{id:!0,class:!0,href:!0});var Fwt=s(Iu);she=n(Fwt,"SPAN",{});var Twt=s(she);T(ox.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),r3o=i(loo),lhe=n(loo,"SPAN",{});var Mwt=s(lhe);t3o=r(Mwt,"AutoFeatureExtractor"),Mwt.forEach(t),loo.forEach(t),KKe=i(m),So=n(m,"DIV",{class:!0});var Cl=s(So);T(rx.$$.fragment,Cl),a3o=i(Cl),tx=n(Cl,"P",{});var ioo=s(tx);n3o=r(ioo,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FG=n(ioo,"A",{href:!0});var Ewt=s(FG);s3o=r(Ewt,"AutoFeatureExtractor.from_pretrained()"),Ewt.forEach(t),l3o=r(ioo," class method."),ioo.forEach(t),i3o=i(Cl),ax=n(Cl,"P",{});var doo=s(ax);d3o=r(doo,"This class cannot be instantiated directly using "),ihe=n(doo,"CODE",{});var Cwt=s(ihe);c3o=r(Cwt,"__init__()"),Cwt.forEach(t),m3o=r(doo," (throws an error)."),doo.forEach(t),f3o=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ba=s(Ye);T(nx.$$.fragment,ba),g3o=i(ba),dhe=n(ba,"P",{});var wwt=s(dhe);h3o=r(wwt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wwt.forEach(t),u3o=i(ba),Ha=n(ba,"P",{});var Py=s(Ha);p3o=r(Py,"The feature extractor class to instantiate is selected based on the "),che=n(Py,"CODE",{});var Awt=s(che);_3o=r(Awt,"model_type"),Awt.forEach(t),b3o=r(Py,` property of the config object
(either passed as an argument or loaded from `),mhe=n(Py,"CODE",{});var Lwt=s(mhe);v3o=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),F3o=r(Py,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fhe=n(Py,"CODE",{});var ywt=s(fhe);T3o=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),M3o=r(Py,":"),Py.forEach(t),E3o=i(ba),z=n(ba,"UL",{});var W=s(z);Nu=n(W,"LI",{});var wBe=s(Nu);ghe=n(wBe,"STRONG",{});var xwt=s(ghe);C3o=r(xwt,"beit"),xwt.forEach(t),w3o=r(wBe," \u2014 "),TG=n(wBe,"A",{href:!0});var $wt=s(TG);A3o=r($wt,"BeitFeatureExtractor"),$wt.forEach(t),L3o=r(wBe," (BEiT model)"),wBe.forEach(t),y3o=i(W),qu=n(W,"LI",{});var ABe=s(qu);hhe=n(ABe,"STRONG",{});var kwt=s(hhe);x3o=r(kwt,"clip"),kwt.forEach(t),$3o=r(ABe," \u2014 "),MG=n(ABe,"A",{href:!0});var Swt=s(MG);k3o=r(Swt,"CLIPFeatureExtractor"),Swt.forEach(t),S3o=r(ABe," (CLIP model)"),ABe.forEach(t),R3o=i(W),ju=n(W,"LI",{});var LBe=s(ju);uhe=n(LBe,"STRONG",{});var Rwt=s(uhe);P3o=r(Rwt,"conditional_detr"),Rwt.forEach(t),B3o=r(LBe," \u2014 "),EG=n(LBe,"A",{href:!0});var Pwt=s(EG);I3o=r(Pwt,"ConditionalDetrFeatureExtractor"),Pwt.forEach(t),N3o=r(LBe," (Conditional DETR model)"),LBe.forEach(t),q3o=i(W),Du=n(W,"LI",{});var yBe=s(Du);phe=n(yBe,"STRONG",{});var Bwt=s(phe);j3o=r(Bwt,"convnext"),Bwt.forEach(t),D3o=r(yBe," \u2014 "),CG=n(yBe,"A",{href:!0});var Iwt=s(CG);G3o=r(Iwt,"ConvNextFeatureExtractor"),Iwt.forEach(t),O3o=r(yBe," (ConvNeXT model)"),yBe.forEach(t),V3o=i(W),Gu=n(W,"LI",{});var xBe=s(Gu);_he=n(xBe,"STRONG",{});var Nwt=s(_he);X3o=r(Nwt,"cvt"),Nwt.forEach(t),z3o=r(xBe," \u2014 "),wG=n(xBe,"A",{href:!0});var qwt=s(wG);Q3o=r(qwt,"ConvNextFeatureExtractor"),qwt.forEach(t),W3o=r(xBe," (CvT model)"),xBe.forEach(t),U3o=i(W),Ou=n(W,"LI",{});var $Be=s(Ou);bhe=n($Be,"STRONG",{});var jwt=s(bhe);H3o=r(jwt,"data2vec-audio"),jwt.forEach(t),J3o=r($Be," \u2014 "),AG=n($Be,"A",{href:!0});var Dwt=s(AG);Y3o=r(Dwt,"Wav2Vec2FeatureExtractor"),Dwt.forEach(t),K3o=r($Be," (Data2VecAudio model)"),$Be.forEach(t),Z3o=i(W),Vu=n(W,"LI",{});var kBe=s(Vu);vhe=n(kBe,"STRONG",{});var Gwt=s(vhe);e5o=r(Gwt,"data2vec-vision"),Gwt.forEach(t),o5o=r(kBe," \u2014 "),LG=n(kBe,"A",{href:!0});var Owt=s(LG);r5o=r(Owt,"BeitFeatureExtractor"),Owt.forEach(t),t5o=r(kBe," (Data2VecVision model)"),kBe.forEach(t),a5o=i(W),Xu=n(W,"LI",{});var SBe=s(Xu);Fhe=n(SBe,"STRONG",{});var Vwt=s(Fhe);n5o=r(Vwt,"deformable_detr"),Vwt.forEach(t),s5o=r(SBe," \u2014 "),yG=n(SBe,"A",{href:!0});var Xwt=s(yG);l5o=r(Xwt,"DeformableDetrFeatureExtractor"),Xwt.forEach(t),i5o=r(SBe," (Deformable DETR model)"),SBe.forEach(t),d5o=i(W),zu=n(W,"LI",{});var RBe=s(zu);The=n(RBe,"STRONG",{});var zwt=s(The);c5o=r(zwt,"deit"),zwt.forEach(t),m5o=r(RBe," \u2014 "),xG=n(RBe,"A",{href:!0});var Qwt=s(xG);f5o=r(Qwt,"DeiTFeatureExtractor"),Qwt.forEach(t),g5o=r(RBe," (DeiT model)"),RBe.forEach(t),h5o=i(W),Qu=n(W,"LI",{});var PBe=s(Qu);Mhe=n(PBe,"STRONG",{});var Wwt=s(Mhe);u5o=r(Wwt,"detr"),Wwt.forEach(t),p5o=r(PBe," \u2014 "),$G=n(PBe,"A",{href:!0});var Uwt=s($G);_5o=r(Uwt,"DetrFeatureExtractor"),Uwt.forEach(t),b5o=r(PBe," (DETR model)"),PBe.forEach(t),v5o=i(W),Wu=n(W,"LI",{});var BBe=s(Wu);Ehe=n(BBe,"STRONG",{});var Hwt=s(Ehe);F5o=r(Hwt,"donut"),Hwt.forEach(t),T5o=r(BBe," \u2014 "),kG=n(BBe,"A",{href:!0});var Jwt=s(kG);M5o=r(Jwt,"DonutFeatureExtractor"),Jwt.forEach(t),E5o=r(BBe," (Donut model)"),BBe.forEach(t),C5o=i(W),Uu=n(W,"LI",{});var IBe=s(Uu);Che=n(IBe,"STRONG",{});var Ywt=s(Che);w5o=r(Ywt,"dpt"),Ywt.forEach(t),A5o=r(IBe," \u2014 "),SG=n(IBe,"A",{href:!0});var Kwt=s(SG);L5o=r(Kwt,"DPTFeatureExtractor"),Kwt.forEach(t),y5o=r(IBe," (DPT model)"),IBe.forEach(t),x5o=i(W),Hu=n(W,"LI",{});var NBe=s(Hu);whe=n(NBe,"STRONG",{});var Zwt=s(whe);$5o=r(Zwt,"flava"),Zwt.forEach(t),k5o=r(NBe," \u2014 "),RG=n(NBe,"A",{href:!0});var eAt=s(RG);S5o=r(eAt,"FlavaFeatureExtractor"),eAt.forEach(t),R5o=r(NBe," (FLAVA model)"),NBe.forEach(t),P5o=i(W),Ju=n(W,"LI",{});var qBe=s(Ju);Ahe=n(qBe,"STRONG",{});var oAt=s(Ahe);B5o=r(oAt,"glpn"),oAt.forEach(t),I5o=r(qBe," \u2014 "),PG=n(qBe,"A",{href:!0});var rAt=s(PG);N5o=r(rAt,"GLPNFeatureExtractor"),rAt.forEach(t),q5o=r(qBe," (GLPN model)"),qBe.forEach(t),j5o=i(W),Yu=n(W,"LI",{});var jBe=s(Yu);Lhe=n(jBe,"STRONG",{});var tAt=s(Lhe);D5o=r(tAt,"groupvit"),tAt.forEach(t),G5o=r(jBe," \u2014 "),BG=n(jBe,"A",{href:!0});var aAt=s(BG);O5o=r(aAt,"CLIPFeatureExtractor"),aAt.forEach(t),V5o=r(jBe," (GroupViT model)"),jBe.forEach(t),X5o=i(W),Ku=n(W,"LI",{});var DBe=s(Ku);yhe=n(DBe,"STRONG",{});var nAt=s(yhe);z5o=r(nAt,"hubert"),nAt.forEach(t),Q5o=r(DBe," \u2014 "),IG=n(DBe,"A",{href:!0});var sAt=s(IG);W5o=r(sAt,"Wav2Vec2FeatureExtractor"),sAt.forEach(t),U5o=r(DBe," (Hubert model)"),DBe.forEach(t),H5o=i(W),Zu=n(W,"LI",{});var GBe=s(Zu);xhe=n(GBe,"STRONG",{});var lAt=s(xhe);J5o=r(lAt,"imagegpt"),lAt.forEach(t),Y5o=r(GBe," \u2014 "),NG=n(GBe,"A",{href:!0});var iAt=s(NG);K5o=r(iAt,"ImageGPTFeatureExtractor"),iAt.forEach(t),Z5o=r(GBe," (ImageGPT model)"),GBe.forEach(t),e0o=i(W),ep=n(W,"LI",{});var OBe=s(ep);$he=n(OBe,"STRONG",{});var dAt=s($he);o0o=r(dAt,"layoutlmv2"),dAt.forEach(t),r0o=r(OBe," \u2014 "),qG=n(OBe,"A",{href:!0});var cAt=s(qG);t0o=r(cAt,"LayoutLMv2FeatureExtractor"),cAt.forEach(t),a0o=r(OBe," (LayoutLMv2 model)"),OBe.forEach(t),n0o=i(W),op=n(W,"LI",{});var VBe=s(op);khe=n(VBe,"STRONG",{});var mAt=s(khe);s0o=r(mAt,"layoutlmv3"),mAt.forEach(t),l0o=r(VBe," \u2014 "),jG=n(VBe,"A",{href:!0});var fAt=s(jG);i0o=r(fAt,"LayoutLMv3FeatureExtractor"),fAt.forEach(t),d0o=r(VBe," (LayoutLMv3 model)"),VBe.forEach(t),c0o=i(W),rp=n(W,"LI",{});var XBe=s(rp);She=n(XBe,"STRONG",{});var gAt=s(She);m0o=r(gAt,"levit"),gAt.forEach(t),f0o=r(XBe," \u2014 "),DG=n(XBe,"A",{href:!0});var hAt=s(DG);g0o=r(hAt,"LevitFeatureExtractor"),hAt.forEach(t),h0o=r(XBe," (LeViT model)"),XBe.forEach(t),u0o=i(W),tp=n(W,"LI",{});var zBe=s(tp);Rhe=n(zBe,"STRONG",{});var uAt=s(Rhe);p0o=r(uAt,"maskformer"),uAt.forEach(t),_0o=r(zBe," \u2014 "),GG=n(zBe,"A",{href:!0});var pAt=s(GG);b0o=r(pAt,"MaskFormerFeatureExtractor"),pAt.forEach(t),v0o=r(zBe," (MaskFormer model)"),zBe.forEach(t),F0o=i(W),ap=n(W,"LI",{});var QBe=s(ap);Phe=n(QBe,"STRONG",{});var _At=s(Phe);T0o=r(_At,"mctct"),_At.forEach(t),M0o=r(QBe," \u2014 "),OG=n(QBe,"A",{href:!0});var bAt=s(OG);E0o=r(bAt,"MCTCTFeatureExtractor"),bAt.forEach(t),C0o=r(QBe," (M-CTC-T model)"),QBe.forEach(t),w0o=i(W),np=n(W,"LI",{});var WBe=s(np);Bhe=n(WBe,"STRONG",{});var vAt=s(Bhe);A0o=r(vAt,"mobilevit"),vAt.forEach(t),L0o=r(WBe," \u2014 "),VG=n(WBe,"A",{href:!0});var FAt=s(VG);y0o=r(FAt,"MobileViTFeatureExtractor"),FAt.forEach(t),x0o=r(WBe," (MobileViT model)"),WBe.forEach(t),$0o=i(W),sp=n(W,"LI",{});var UBe=s(sp);Ihe=n(UBe,"STRONG",{});var TAt=s(Ihe);k0o=r(TAt,"owlvit"),TAt.forEach(t),S0o=r(UBe," \u2014 "),XG=n(UBe,"A",{href:!0});var MAt=s(XG);R0o=r(MAt,"OwlViTFeatureExtractor"),MAt.forEach(t),P0o=r(UBe," (OWL-ViT model)"),UBe.forEach(t),B0o=i(W),lp=n(W,"LI",{});var HBe=s(lp);Nhe=n(HBe,"STRONG",{});var EAt=s(Nhe);I0o=r(EAt,"perceiver"),EAt.forEach(t),N0o=r(HBe," \u2014 "),zG=n(HBe,"A",{href:!0});var CAt=s(zG);q0o=r(CAt,"PerceiverFeatureExtractor"),CAt.forEach(t),j0o=r(HBe," (Perceiver model)"),HBe.forEach(t),D0o=i(W),ip=n(W,"LI",{});var JBe=s(ip);qhe=n(JBe,"STRONG",{});var wAt=s(qhe);G0o=r(wAt,"poolformer"),wAt.forEach(t),O0o=r(JBe," \u2014 "),QG=n(JBe,"A",{href:!0});var AAt=s(QG);V0o=r(AAt,"PoolFormerFeatureExtractor"),AAt.forEach(t),X0o=r(JBe," (PoolFormer model)"),JBe.forEach(t),z0o=i(W),dp=n(W,"LI",{});var YBe=s(dp);jhe=n(YBe,"STRONG",{});var LAt=s(jhe);Q0o=r(LAt,"regnet"),LAt.forEach(t),W0o=r(YBe," \u2014 "),WG=n(YBe,"A",{href:!0});var yAt=s(WG);U0o=r(yAt,"ConvNextFeatureExtractor"),yAt.forEach(t),H0o=r(YBe," (RegNet model)"),YBe.forEach(t),J0o=i(W),cp=n(W,"LI",{});var KBe=s(cp);Dhe=n(KBe,"STRONG",{});var xAt=s(Dhe);Y0o=r(xAt,"resnet"),xAt.forEach(t),K0o=r(KBe," \u2014 "),UG=n(KBe,"A",{href:!0});var $At=s(UG);Z0o=r($At,"ConvNextFeatureExtractor"),$At.forEach(t),ewo=r(KBe," (ResNet model)"),KBe.forEach(t),owo=i(W),mp=n(W,"LI",{});var ZBe=s(mp);Ghe=n(ZBe,"STRONG",{});var kAt=s(Ghe);rwo=r(kAt,"segformer"),kAt.forEach(t),two=r(ZBe," \u2014 "),HG=n(ZBe,"A",{href:!0});var SAt=s(HG);awo=r(SAt,"SegformerFeatureExtractor"),SAt.forEach(t),nwo=r(ZBe," (SegFormer model)"),ZBe.forEach(t),swo=i(W),fp=n(W,"LI",{});var eIe=s(fp);Ohe=n(eIe,"STRONG",{});var RAt=s(Ohe);lwo=r(RAt,"speech_to_text"),RAt.forEach(t),iwo=r(eIe," \u2014 "),JG=n(eIe,"A",{href:!0});var PAt=s(JG);dwo=r(PAt,"Speech2TextFeatureExtractor"),PAt.forEach(t),cwo=r(eIe," (Speech2Text model)"),eIe.forEach(t),mwo=i(W),gp=n(W,"LI",{});var oIe=s(gp);Vhe=n(oIe,"STRONG",{});var BAt=s(Vhe);fwo=r(BAt,"swin"),BAt.forEach(t),gwo=r(oIe," \u2014 "),YG=n(oIe,"A",{href:!0});var IAt=s(YG);hwo=r(IAt,"ViTFeatureExtractor"),IAt.forEach(t),uwo=r(oIe," (Swin Transformer model)"),oIe.forEach(t),pwo=i(W),hp=n(W,"LI",{});var rIe=s(hp);Xhe=n(rIe,"STRONG",{});var NAt=s(Xhe);_wo=r(NAt,"swinv2"),NAt.forEach(t),bwo=r(rIe," \u2014 "),KG=n(rIe,"A",{href:!0});var qAt=s(KG);vwo=r(qAt,"ViTFeatureExtractor"),qAt.forEach(t),Fwo=r(rIe," (Swin Transformer V2 model)"),rIe.forEach(t),Two=i(W),up=n(W,"LI",{});var tIe=s(up);zhe=n(tIe,"STRONG",{});var jAt=s(zhe);Mwo=r(jAt,"van"),jAt.forEach(t),Ewo=r(tIe," \u2014 "),ZG=n(tIe,"A",{href:!0});var DAt=s(ZG);Cwo=r(DAt,"ConvNextFeatureExtractor"),DAt.forEach(t),wwo=r(tIe," (VAN model)"),tIe.forEach(t),Awo=i(W),pp=n(W,"LI",{});var aIe=s(pp);Qhe=n(aIe,"STRONG",{});var GAt=s(Qhe);Lwo=r(GAt,"videomae"),GAt.forEach(t),ywo=r(aIe," \u2014 "),eO=n(aIe,"A",{href:!0});var OAt=s(eO);xwo=r(OAt,"VideoMAEFeatureExtractor"),OAt.forEach(t),$wo=r(aIe," (VideoMAE model)"),aIe.forEach(t),kwo=i(W),_p=n(W,"LI",{});var nIe=s(_p);Whe=n(nIe,"STRONG",{});var VAt=s(Whe);Swo=r(VAt,"vilt"),VAt.forEach(t),Rwo=r(nIe," \u2014 "),oO=n(nIe,"A",{href:!0});var XAt=s(oO);Pwo=r(XAt,"ViltFeatureExtractor"),XAt.forEach(t),Bwo=r(nIe," (ViLT model)"),nIe.forEach(t),Iwo=i(W),bp=n(W,"LI",{});var sIe=s(bp);Uhe=n(sIe,"STRONG",{});var zAt=s(Uhe);Nwo=r(zAt,"vit"),zAt.forEach(t),qwo=r(sIe," \u2014 "),rO=n(sIe,"A",{href:!0});var QAt=s(rO);jwo=r(QAt,"ViTFeatureExtractor"),QAt.forEach(t),Dwo=r(sIe," (ViT model)"),sIe.forEach(t),Gwo=i(W),vp=n(W,"LI",{});var lIe=s(vp);Hhe=n(lIe,"STRONG",{});var WAt=s(Hhe);Owo=r(WAt,"vit_mae"),WAt.forEach(t),Vwo=r(lIe," \u2014 "),tO=n(lIe,"A",{href:!0});var UAt=s(tO);Xwo=r(UAt,"ViTFeatureExtractor"),UAt.forEach(t),zwo=r(lIe," (ViTMAE model)"),lIe.forEach(t),Qwo=i(W),Fp=n(W,"LI",{});var iIe=s(Fp);Jhe=n(iIe,"STRONG",{});var HAt=s(Jhe);Wwo=r(HAt,"vit_msn"),HAt.forEach(t),Uwo=r(iIe," \u2014 "),aO=n(iIe,"A",{href:!0});var JAt=s(aO);Hwo=r(JAt,"ViTFeatureExtractor"),JAt.forEach(t),Jwo=r(iIe," (ViTMSN model)"),iIe.forEach(t),Ywo=i(W),Tp=n(W,"LI",{});var dIe=s(Tp);Yhe=n(dIe,"STRONG",{});var YAt=s(Yhe);Kwo=r(YAt,"wav2vec2"),YAt.forEach(t),Zwo=r(dIe," \u2014 "),nO=n(dIe,"A",{href:!0});var KAt=s(nO);eAo=r(KAt,"Wav2Vec2FeatureExtractor"),KAt.forEach(t),oAo=r(dIe," (Wav2Vec2 model)"),dIe.forEach(t),rAo=i(W),Mp=n(W,"LI",{});var cIe=s(Mp);Khe=n(cIe,"STRONG",{});var ZAt=s(Khe);tAo=r(ZAt,"wav2vec2-conformer"),ZAt.forEach(t),aAo=r(cIe," \u2014 "),sO=n(cIe,"A",{href:!0});var e6t=s(sO);nAo=r(e6t,"Wav2Vec2FeatureExtractor"),e6t.forEach(t),sAo=r(cIe," (Wav2Vec2-Conformer model)"),cIe.forEach(t),lAo=i(W),Ep=n(W,"LI",{});var mIe=s(Ep);Zhe=n(mIe,"STRONG",{});var o6t=s(Zhe);iAo=r(o6t,"xclip"),o6t.forEach(t),dAo=r(mIe," \u2014 "),lO=n(mIe,"A",{href:!0});var r6t=s(lO);cAo=r(r6t,"CLIPFeatureExtractor"),r6t.forEach(t),mAo=r(mIe," (X-CLIP model)"),mIe.forEach(t),fAo=i(W),Cp=n(W,"LI",{});var fIe=s(Cp);eue=n(fIe,"STRONG",{});var t6t=s(eue);gAo=r(t6t,"yolos"),t6t.forEach(t),hAo=r(fIe," \u2014 "),iO=n(fIe,"A",{href:!0});var a6t=s(iO);uAo=r(a6t,"YolosFeatureExtractor"),a6t.forEach(t),pAo=r(fIe," (YOLOS model)"),fIe.forEach(t),W.forEach(t),_Ao=i(ba),T(wp.$$.fragment,ba),bAo=i(ba),T(Ap.$$.fragment,ba),ba.forEach(t),vAo=i(Cl),Lp=n(Cl,"DIV",{class:!0});var coo=s(Lp);T(sx.$$.fragment,coo),FAo=i(coo),oue=n(coo,"P",{});var n6t=s(oue);TAo=r(n6t,"Register a new feature extractor for this class."),n6t.forEach(t),coo.forEach(t),Cl.forEach(t),ZKe=i(m),ud=n(m,"H2",{class:!0});var moo=s(ud);yp=n(moo,"A",{id:!0,class:!0,href:!0});var s6t=s(yp);rue=n(s6t,"SPAN",{});var l6t=s(rue);T(lx.$$.fragment,l6t),l6t.forEach(t),s6t.forEach(t),MAo=i(moo),tue=n(moo,"SPAN",{});var i6t=s(tue);EAo=r(i6t,"AutoProcessor"),i6t.forEach(t),moo.forEach(t),eZe=i(m),Ro=n(m,"DIV",{class:!0});var wl=s(Ro);T(ix.$$.fragment,wl),CAo=i(wl),dx=n(wl,"P",{});var foo=s(dx);wAo=r(foo,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dO=n(foo,"A",{href:!0});var d6t=s(dO);AAo=r(d6t,"AutoProcessor.from_pretrained()"),d6t.forEach(t),LAo=r(foo," class method."),foo.forEach(t),yAo=i(wl),cx=n(wl,"P",{});var goo=s(cx);xAo=r(goo,"This class cannot be instantiated directly using "),aue=n(goo,"CODE",{});var c6t=s(aue);$Ao=r(c6t,"__init__()"),c6t.forEach(t),kAo=r(goo," (throws an error)."),goo.forEach(t),SAo=i(wl),Ke=n(wl,"DIV",{class:!0});var va=s(Ke);T(mx.$$.fragment,va),RAo=i(va),nue=n(va,"P",{});var m6t=s(nue);PAo=r(m6t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),m6t.forEach(t),BAo=i(va),pd=n(va,"P",{});var wle=s(pd);IAo=r(wle,"The processor class to instantiate is selected based on the "),sue=n(wle,"CODE",{});var f6t=s(sue);NAo=r(f6t,"model_type"),f6t.forEach(t),qAo=r(wle,` property of the config object (either
passed as an argument or loaded from `),lue=n(wle,"CODE",{});var g6t=s(lue);jAo=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),DAo=r(wle," if possible):"),wle.forEach(t),GAo=i(va),ie=n(va,"UL",{});var ge=s(ie);xp=n(ge,"LI",{});var gIe=s(xp);iue=n(gIe,"STRONG",{});var h6t=s(iue);OAo=r(h6t,"clip"),h6t.forEach(t),VAo=r(gIe," \u2014 "),cO=n(gIe,"A",{href:!0});var u6t=s(cO);XAo=r(u6t,"CLIPProcessor"),u6t.forEach(t),zAo=r(gIe," (CLIP model)"),gIe.forEach(t),QAo=i(ge),$p=n(ge,"LI",{});var hIe=s($p);due=n(hIe,"STRONG",{});var p6t=s(due);WAo=r(p6t,"donut"),p6t.forEach(t),UAo=r(hIe," \u2014 "),mO=n(hIe,"A",{href:!0});var _6t=s(mO);HAo=r(_6t,"DonutProcessor"),_6t.forEach(t),JAo=r(hIe," (Donut model)"),hIe.forEach(t),YAo=i(ge),kp=n(ge,"LI",{});var uIe=s(kp);cue=n(uIe,"STRONG",{});var b6t=s(cue);KAo=r(b6t,"flava"),b6t.forEach(t),ZAo=r(uIe," \u2014 "),fO=n(uIe,"A",{href:!0});var v6t=s(fO);e6o=r(v6t,"FlavaProcessor"),v6t.forEach(t),o6o=r(uIe," (FLAVA model)"),uIe.forEach(t),r6o=i(ge),Sp=n(ge,"LI",{});var pIe=s(Sp);mue=n(pIe,"STRONG",{});var F6t=s(mue);t6o=r(F6t,"groupvit"),F6t.forEach(t),a6o=r(pIe," \u2014 "),gO=n(pIe,"A",{href:!0});var T6t=s(gO);n6o=r(T6t,"CLIPProcessor"),T6t.forEach(t),s6o=r(pIe," (GroupViT model)"),pIe.forEach(t),l6o=i(ge),Rp=n(ge,"LI",{});var _Ie=s(Rp);fue=n(_Ie,"STRONG",{});var M6t=s(fue);i6o=r(M6t,"layoutlmv2"),M6t.forEach(t),d6o=r(_Ie," \u2014 "),hO=n(_Ie,"A",{href:!0});var E6t=s(hO);c6o=r(E6t,"LayoutLMv2Processor"),E6t.forEach(t),m6o=r(_Ie," (LayoutLMv2 model)"),_Ie.forEach(t),f6o=i(ge),Pp=n(ge,"LI",{});var bIe=s(Pp);gue=n(bIe,"STRONG",{});var C6t=s(gue);g6o=r(C6t,"layoutlmv3"),C6t.forEach(t),h6o=r(bIe," \u2014 "),uO=n(bIe,"A",{href:!0});var w6t=s(uO);u6o=r(w6t,"LayoutLMv3Processor"),w6t.forEach(t),p6o=r(bIe," (LayoutLMv3 model)"),bIe.forEach(t),_6o=i(ge),Bp=n(ge,"LI",{});var vIe=s(Bp);hue=n(vIe,"STRONG",{});var A6t=s(hue);b6o=r(A6t,"layoutxlm"),A6t.forEach(t),v6o=r(vIe," \u2014 "),pO=n(vIe,"A",{href:!0});var L6t=s(pO);F6o=r(L6t,"LayoutXLMProcessor"),L6t.forEach(t),T6o=r(vIe," (LayoutXLM model)"),vIe.forEach(t),M6o=i(ge),Ip=n(ge,"LI",{});var FIe=s(Ip);uue=n(FIe,"STRONG",{});var y6t=s(uue);E6o=r(y6t,"owlvit"),y6t.forEach(t),C6o=r(FIe," \u2014 "),_O=n(FIe,"A",{href:!0});var x6t=s(_O);w6o=r(x6t,"OwlViTProcessor"),x6t.forEach(t),A6o=r(FIe," (OWL-ViT model)"),FIe.forEach(t),L6o=i(ge),Np=n(ge,"LI",{});var TIe=s(Np);pue=n(TIe,"STRONG",{});var $6t=s(pue);y6o=r($6t,"sew"),$6t.forEach(t),x6o=r(TIe," \u2014 "),bO=n(TIe,"A",{href:!0});var k6t=s(bO);$6o=r(k6t,"Wav2Vec2Processor"),k6t.forEach(t),k6o=r(TIe," (SEW model)"),TIe.forEach(t),S6o=i(ge),qp=n(ge,"LI",{});var MIe=s(qp);_ue=n(MIe,"STRONG",{});var S6t=s(_ue);R6o=r(S6t,"sew-d"),S6t.forEach(t),P6o=r(MIe," \u2014 "),vO=n(MIe,"A",{href:!0});var R6t=s(vO);B6o=r(R6t,"Wav2Vec2Processor"),R6t.forEach(t),I6o=r(MIe," (SEW-D model)"),MIe.forEach(t),N6o=i(ge),jp=n(ge,"LI",{});var EIe=s(jp);bue=n(EIe,"STRONG",{});var P6t=s(bue);q6o=r(P6t,"speech_to_text"),P6t.forEach(t),j6o=r(EIe," \u2014 "),FO=n(EIe,"A",{href:!0});var B6t=s(FO);D6o=r(B6t,"Speech2TextProcessor"),B6t.forEach(t),G6o=r(EIe," (Speech2Text model)"),EIe.forEach(t),O6o=i(ge),Dp=n(ge,"LI",{});var CIe=s(Dp);vue=n(CIe,"STRONG",{});var I6t=s(vue);V6o=r(I6t,"speech_to_text_2"),I6t.forEach(t),X6o=r(CIe," \u2014 "),TO=n(CIe,"A",{href:!0});var N6t=s(TO);z6o=r(N6t,"Speech2Text2Processor"),N6t.forEach(t),Q6o=r(CIe," (Speech2Text2 model)"),CIe.forEach(t),W6o=i(ge),Gp=n(ge,"LI",{});var wIe=s(Gp);Fue=n(wIe,"STRONG",{});var q6t=s(Fue);U6o=r(q6t,"trocr"),q6t.forEach(t),H6o=r(wIe," \u2014 "),MO=n(wIe,"A",{href:!0});var j6t=s(MO);J6o=r(j6t,"TrOCRProcessor"),j6t.forEach(t),Y6o=r(wIe," (TrOCR model)"),wIe.forEach(t),K6o=i(ge),Op=n(ge,"LI",{});var AIe=s(Op);Tue=n(AIe,"STRONG",{});var D6t=s(Tue);Z6o=r(D6t,"unispeech"),D6t.forEach(t),e7o=r(AIe," \u2014 "),EO=n(AIe,"A",{href:!0});var G6t=s(EO);o7o=r(G6t,"Wav2Vec2Processor"),G6t.forEach(t),r7o=r(AIe," (UniSpeech model)"),AIe.forEach(t),t7o=i(ge),Vp=n(ge,"LI",{});var LIe=s(Vp);Mue=n(LIe,"STRONG",{});var O6t=s(Mue);a7o=r(O6t,"unispeech-sat"),O6t.forEach(t),n7o=r(LIe," \u2014 "),CO=n(LIe,"A",{href:!0});var V6t=s(CO);s7o=r(V6t,"Wav2Vec2Processor"),V6t.forEach(t),l7o=r(LIe," (UniSpeechSat model)"),LIe.forEach(t),i7o=i(ge),Xp=n(ge,"LI",{});var yIe=s(Xp);Eue=n(yIe,"STRONG",{});var X6t=s(Eue);d7o=r(X6t,"vilt"),X6t.forEach(t),c7o=r(yIe," \u2014 "),wO=n(yIe,"A",{href:!0});var z6t=s(wO);m7o=r(z6t,"ViltProcessor"),z6t.forEach(t),f7o=r(yIe," (ViLT model)"),yIe.forEach(t),g7o=i(ge),zp=n(ge,"LI",{});var xIe=s(zp);Cue=n(xIe,"STRONG",{});var Q6t=s(Cue);h7o=r(Q6t,"vision-text-dual-encoder"),Q6t.forEach(t),u7o=r(xIe," \u2014 "),AO=n(xIe,"A",{href:!0});var W6t=s(AO);p7o=r(W6t,"VisionTextDualEncoderProcessor"),W6t.forEach(t),_7o=r(xIe," (VisionTextDualEncoder model)"),xIe.forEach(t),b7o=i(ge),Qp=n(ge,"LI",{});var $Ie=s(Qp);wue=n($Ie,"STRONG",{});var U6t=s(wue);v7o=r(U6t,"wav2vec2"),U6t.forEach(t),F7o=r($Ie," \u2014 "),LO=n($Ie,"A",{href:!0});var H6t=s(LO);T7o=r(H6t,"Wav2Vec2Processor"),H6t.forEach(t),M7o=r($Ie," (Wav2Vec2 model)"),$Ie.forEach(t),E7o=i(ge),Wp=n(ge,"LI",{});var kIe=s(Wp);Aue=n(kIe,"STRONG",{});var J6t=s(Aue);C7o=r(J6t,"wav2vec2-conformer"),J6t.forEach(t),w7o=r(kIe," \u2014 "),yO=n(kIe,"A",{href:!0});var Y6t=s(yO);A7o=r(Y6t,"Wav2Vec2Processor"),Y6t.forEach(t),L7o=r(kIe," (Wav2Vec2-Conformer model)"),kIe.forEach(t),y7o=i(ge),Up=n(ge,"LI",{});var SIe=s(Up);Lue=n(SIe,"STRONG",{});var K6t=s(Lue);x7o=r(K6t,"wavlm"),K6t.forEach(t),$7o=r(SIe," \u2014 "),xO=n(SIe,"A",{href:!0});var Z6t=s(xO);k7o=r(Z6t,"Wav2Vec2Processor"),Z6t.forEach(t),S7o=r(SIe," (WavLM model)"),SIe.forEach(t),R7o=i(ge),Hp=n(ge,"LI",{});var RIe=s(Hp);yue=n(RIe,"STRONG",{});var e7t=s(yue);P7o=r(e7t,"xclip"),e7t.forEach(t),B7o=r(RIe," \u2014 "),$O=n(RIe,"A",{href:!0});var o7t=s($O);I7o=r(o7t,"CLIPProcessor"),o7t.forEach(t),N7o=r(RIe," (X-CLIP model)"),RIe.forEach(t),ge.forEach(t),q7o=i(va),T(Jp.$$.fragment,va),j7o=i(va),T(Yp.$$.fragment,va),va.forEach(t),D7o=i(wl),Kp=n(wl,"DIV",{class:!0});var hoo=s(Kp);T(fx.$$.fragment,hoo),G7o=i(hoo),xue=n(hoo,"P",{});var r7t=s(xue);O7o=r(r7t,"Register a new processor for this class."),r7t.forEach(t),hoo.forEach(t),wl.forEach(t),oZe=i(m),_d=n(m,"H2",{class:!0});var uoo=s(_d);Zp=n(uoo,"A",{id:!0,class:!0,href:!0});var t7t=s(Zp);$ue=n(t7t,"SPAN",{});var a7t=s($ue);T(gx.$$.fragment,a7t),a7t.forEach(t),t7t.forEach(t),V7o=i(uoo),kue=n(uoo,"SPAN",{});var n7t=s(kue);X7o=r(n7t,"AutoModel"),n7t.forEach(t),uoo.forEach(t),rZe=i(m),Po=n(m,"DIV",{class:!0});var Al=s(Po);T(hx.$$.fragment,Al),z7o=i(Al),bd=n(Al,"P",{});var Ale=s(bd);Q7o=r(Ale,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kO=n(Ale,"A",{href:!0});var s7t=s(kO);W7o=r(s7t,"from_pretrained()"),s7t.forEach(t),U7o=r(Ale," class method or the "),SO=n(Ale,"A",{href:!0});var l7t=s(SO);H7o=r(l7t,"from_config()"),l7t.forEach(t),J7o=r(Ale,` class
method.`),Ale.forEach(t),Y7o=i(Al),ux=n(Al,"P",{});var poo=s(ux);K7o=r(poo,"This class cannot be instantiated directly using "),Sue=n(poo,"CODE",{});var i7t=s(Sue);Z7o=r(i7t,"__init__()"),i7t.forEach(t),eLo=r(poo," (throws an error)."),poo.forEach(t),oLo=i(Al),_t=n(Al,"DIV",{class:!0});var By=s(_t);T(px.$$.fragment,By),rLo=i(By),Rue=n(By,"P",{});var d7t=s(Rue);tLo=r(d7t,"Instantiates one of the base model classes of the library from a configuration."),d7t.forEach(t),aLo=i(By),vd=n(By,"P",{});var Lle=s(vd);nLo=r(Lle,`Note:
Loading a model from its configuration file does `),Pue=n(Lle,"STRONG",{});var c7t=s(Pue);sLo=r(c7t,"not"),c7t.forEach(t),lLo=r(Lle,` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=n(Lle,"A",{href:!0});var m7t=s(RO);iLo=r(m7t,"from_pretrained()"),m7t.forEach(t),dLo=r(Lle," to load the model weights."),Lle.forEach(t),cLo=i(By),T(e_.$$.fragment,By),By.forEach(t),mLo=i(Al),Ze=n(Al,"DIV",{class:!0});var Fa=s(Ze);T(_x.$$.fragment,Fa),fLo=i(Fa),Bue=n(Fa,"P",{});var f7t=s(Bue);gLo=r(f7t,"Instantiate one of the base model classes of the library from a pretrained model."),f7t.forEach(t),hLo=i(Fa),Ja=n(Fa,"P",{});var Iy=s(Ja);uLo=r(Iy,"The model class to instantiate is selected based on the "),Iue=n(Iy,"CODE",{});var g7t=s(Iue);pLo=r(g7t,"model_type"),g7t.forEach(t),_Lo=r(Iy,` property of the config object (either
passed as an argument or loaded from `),Nue=n(Iy,"CODE",{});var h7t=s(Nue);bLo=r(h7t,"pretrained_model_name_or_path"),h7t.forEach(t),vLo=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(Iy,"CODE",{});var u7t=s(que);FLo=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),TLo=r(Iy,":"),Iy.forEach(t),MLo=i(Fa),y=n(Fa,"UL",{});var x=s(y);o_=n(x,"LI",{});var PIe=s(o_);jue=n(PIe,"STRONG",{});var p7t=s(jue);ELo=r(p7t,"albert"),p7t.forEach(t),CLo=r(PIe," \u2014 "),PO=n(PIe,"A",{href:!0});var _7t=s(PO);wLo=r(_7t,"AlbertModel"),_7t.forEach(t),ALo=r(PIe," (ALBERT model)"),PIe.forEach(t),LLo=i(x),r_=n(x,"LI",{});var BIe=s(r_);Due=n(BIe,"STRONG",{});var b7t=s(Due);yLo=r(b7t,"bart"),b7t.forEach(t),xLo=r(BIe," \u2014 "),BO=n(BIe,"A",{href:!0});var v7t=s(BO);$Lo=r(v7t,"BartModel"),v7t.forEach(t),kLo=r(BIe," (BART model)"),BIe.forEach(t),SLo=i(x),t_=n(x,"LI",{});var IIe=s(t_);Gue=n(IIe,"STRONG",{});var F7t=s(Gue);RLo=r(F7t,"beit"),F7t.forEach(t),PLo=r(IIe," \u2014 "),IO=n(IIe,"A",{href:!0});var T7t=s(IO);BLo=r(T7t,"BeitModel"),T7t.forEach(t),ILo=r(IIe," (BEiT model)"),IIe.forEach(t),NLo=i(x),a_=n(x,"LI",{});var NIe=s(a_);Oue=n(NIe,"STRONG",{});var M7t=s(Oue);qLo=r(M7t,"bert"),M7t.forEach(t),jLo=r(NIe," \u2014 "),NO=n(NIe,"A",{href:!0});var E7t=s(NO);DLo=r(E7t,"BertModel"),E7t.forEach(t),GLo=r(NIe," (BERT model)"),NIe.forEach(t),OLo=i(x),n_=n(x,"LI",{});var qIe=s(n_);Vue=n(qIe,"STRONG",{});var C7t=s(Vue);VLo=r(C7t,"bert-generation"),C7t.forEach(t),XLo=r(qIe," \u2014 "),qO=n(qIe,"A",{href:!0});var w7t=s(qO);zLo=r(w7t,"BertGenerationEncoder"),w7t.forEach(t),QLo=r(qIe," (Bert Generation model)"),qIe.forEach(t),WLo=i(x),s_=n(x,"LI",{});var jIe=s(s_);Xue=n(jIe,"STRONG",{});var A7t=s(Xue);ULo=r(A7t,"big_bird"),A7t.forEach(t),HLo=r(jIe," \u2014 "),jO=n(jIe,"A",{href:!0});var L7t=s(jO);JLo=r(L7t,"BigBirdModel"),L7t.forEach(t),YLo=r(jIe," (BigBird model)"),jIe.forEach(t),KLo=i(x),l_=n(x,"LI",{});var DIe=s(l_);zue=n(DIe,"STRONG",{});var y7t=s(zue);ZLo=r(y7t,"bigbird_pegasus"),y7t.forEach(t),eyo=r(DIe," \u2014 "),DO=n(DIe,"A",{href:!0});var x7t=s(DO);oyo=r(x7t,"BigBirdPegasusModel"),x7t.forEach(t),ryo=r(DIe," (BigBird-Pegasus model)"),DIe.forEach(t),tyo=i(x),i_=n(x,"LI",{});var GIe=s(i_);Que=n(GIe,"STRONG",{});var $7t=s(Que);ayo=r($7t,"blenderbot"),$7t.forEach(t),nyo=r(GIe," \u2014 "),GO=n(GIe,"A",{href:!0});var k7t=s(GO);syo=r(k7t,"BlenderbotModel"),k7t.forEach(t),lyo=r(GIe," (Blenderbot model)"),GIe.forEach(t),iyo=i(x),d_=n(x,"LI",{});var OIe=s(d_);Wue=n(OIe,"STRONG",{});var S7t=s(Wue);dyo=r(S7t,"blenderbot-small"),S7t.forEach(t),cyo=r(OIe," \u2014 "),OO=n(OIe,"A",{href:!0});var R7t=s(OO);myo=r(R7t,"BlenderbotSmallModel"),R7t.forEach(t),fyo=r(OIe," (BlenderbotSmall model)"),OIe.forEach(t),gyo=i(x),c_=n(x,"LI",{});var VIe=s(c_);Uue=n(VIe,"STRONG",{});var P7t=s(Uue);hyo=r(P7t,"bloom"),P7t.forEach(t),uyo=r(VIe," \u2014 "),VO=n(VIe,"A",{href:!0});var B7t=s(VO);pyo=r(B7t,"BloomModel"),B7t.forEach(t),_yo=r(VIe," (BLOOM model)"),VIe.forEach(t),byo=i(x),m_=n(x,"LI",{});var XIe=s(m_);Hue=n(XIe,"STRONG",{});var I7t=s(Hue);vyo=r(I7t,"camembert"),I7t.forEach(t),Fyo=r(XIe," \u2014 "),XO=n(XIe,"A",{href:!0});var N7t=s(XO);Tyo=r(N7t,"CamembertModel"),N7t.forEach(t),Myo=r(XIe," (CamemBERT model)"),XIe.forEach(t),Eyo=i(x),f_=n(x,"LI",{});var zIe=s(f_);Jue=n(zIe,"STRONG",{});var q7t=s(Jue);Cyo=r(q7t,"canine"),q7t.forEach(t),wyo=r(zIe," \u2014 "),zO=n(zIe,"A",{href:!0});var j7t=s(zO);Ayo=r(j7t,"CanineModel"),j7t.forEach(t),Lyo=r(zIe," (CANINE model)"),zIe.forEach(t),yyo=i(x),g_=n(x,"LI",{});var QIe=s(g_);Yue=n(QIe,"STRONG",{});var D7t=s(Yue);xyo=r(D7t,"clip"),D7t.forEach(t),$yo=r(QIe," \u2014 "),QO=n(QIe,"A",{href:!0});var G7t=s(QO);kyo=r(G7t,"CLIPModel"),G7t.forEach(t),Syo=r(QIe," (CLIP model)"),QIe.forEach(t),Ryo=i(x),h_=n(x,"LI",{});var WIe=s(h_);Kue=n(WIe,"STRONG",{});var O7t=s(Kue);Pyo=r(O7t,"codegen"),O7t.forEach(t),Byo=r(WIe," \u2014 "),WO=n(WIe,"A",{href:!0});var V7t=s(WO);Iyo=r(V7t,"CodeGenModel"),V7t.forEach(t),Nyo=r(WIe," (CodeGen model)"),WIe.forEach(t),qyo=i(x),u_=n(x,"LI",{});var UIe=s(u_);Zue=n(UIe,"STRONG",{});var X7t=s(Zue);jyo=r(X7t,"conditional_detr"),X7t.forEach(t),Dyo=r(UIe," \u2014 "),UO=n(UIe,"A",{href:!0});var z7t=s(UO);Gyo=r(z7t,"ConditionalDetrModel"),z7t.forEach(t),Oyo=r(UIe," (Conditional DETR model)"),UIe.forEach(t),Vyo=i(x),p_=n(x,"LI",{});var HIe=s(p_);epe=n(HIe,"STRONG",{});var Q7t=s(epe);Xyo=r(Q7t,"convbert"),Q7t.forEach(t),zyo=r(HIe," \u2014 "),HO=n(HIe,"A",{href:!0});var W7t=s(HO);Qyo=r(W7t,"ConvBertModel"),W7t.forEach(t),Wyo=r(HIe," (ConvBERT model)"),HIe.forEach(t),Uyo=i(x),__=n(x,"LI",{});var JIe=s(__);ope=n(JIe,"STRONG",{});var U7t=s(ope);Hyo=r(U7t,"convnext"),U7t.forEach(t),Jyo=r(JIe," \u2014 "),JO=n(JIe,"A",{href:!0});var H7t=s(JO);Yyo=r(H7t,"ConvNextModel"),H7t.forEach(t),Kyo=r(JIe," (ConvNeXT model)"),JIe.forEach(t),Zyo=i(x),b_=n(x,"LI",{});var YIe=s(b_);rpe=n(YIe,"STRONG",{});var J7t=s(rpe);e8o=r(J7t,"ctrl"),J7t.forEach(t),o8o=r(YIe," \u2014 "),YO=n(YIe,"A",{href:!0});var Y7t=s(YO);r8o=r(Y7t,"CTRLModel"),Y7t.forEach(t),t8o=r(YIe," (CTRL model)"),YIe.forEach(t),a8o=i(x),v_=n(x,"LI",{});var KIe=s(v_);tpe=n(KIe,"STRONG",{});var K7t=s(tpe);n8o=r(K7t,"cvt"),K7t.forEach(t),s8o=r(KIe," \u2014 "),KO=n(KIe,"A",{href:!0});var Z7t=s(KO);l8o=r(Z7t,"CvtModel"),Z7t.forEach(t),i8o=r(KIe," (CvT model)"),KIe.forEach(t),d8o=i(x),F_=n(x,"LI",{});var ZIe=s(F_);ape=n(ZIe,"STRONG",{});var eLt=s(ape);c8o=r(eLt,"data2vec-audio"),eLt.forEach(t),m8o=r(ZIe," \u2014 "),ZO=n(ZIe,"A",{href:!0});var oLt=s(ZO);f8o=r(oLt,"Data2VecAudioModel"),oLt.forEach(t),g8o=r(ZIe," (Data2VecAudio model)"),ZIe.forEach(t),h8o=i(x),T_=n(x,"LI",{});var eNe=s(T_);npe=n(eNe,"STRONG",{});var rLt=s(npe);u8o=r(rLt,"data2vec-text"),rLt.forEach(t),p8o=r(eNe," \u2014 "),eV=n(eNe,"A",{href:!0});var tLt=s(eV);_8o=r(tLt,"Data2VecTextModel"),tLt.forEach(t),b8o=r(eNe," (Data2VecText model)"),eNe.forEach(t),v8o=i(x),M_=n(x,"LI",{});var oNe=s(M_);spe=n(oNe,"STRONG",{});var aLt=s(spe);F8o=r(aLt,"data2vec-vision"),aLt.forEach(t),T8o=r(oNe," \u2014 "),oV=n(oNe,"A",{href:!0});var nLt=s(oV);M8o=r(nLt,"Data2VecVisionModel"),nLt.forEach(t),E8o=r(oNe," (Data2VecVision model)"),oNe.forEach(t),C8o=i(x),E_=n(x,"LI",{});var rNe=s(E_);lpe=n(rNe,"STRONG",{});var sLt=s(lpe);w8o=r(sLt,"deberta"),sLt.forEach(t),A8o=r(rNe," \u2014 "),rV=n(rNe,"A",{href:!0});var lLt=s(rV);L8o=r(lLt,"DebertaModel"),lLt.forEach(t),y8o=r(rNe," (DeBERTa model)"),rNe.forEach(t),x8o=i(x),C_=n(x,"LI",{});var tNe=s(C_);ipe=n(tNe,"STRONG",{});var iLt=s(ipe);$8o=r(iLt,"deberta-v2"),iLt.forEach(t),k8o=r(tNe," \u2014 "),tV=n(tNe,"A",{href:!0});var dLt=s(tV);S8o=r(dLt,"DebertaV2Model"),dLt.forEach(t),R8o=r(tNe," (DeBERTa-v2 model)"),tNe.forEach(t),P8o=i(x),w_=n(x,"LI",{});var aNe=s(w_);dpe=n(aNe,"STRONG",{});var cLt=s(dpe);B8o=r(cLt,"decision_transformer"),cLt.forEach(t),I8o=r(aNe," \u2014 "),aV=n(aNe,"A",{href:!0});var mLt=s(aV);N8o=r(mLt,"DecisionTransformerModel"),mLt.forEach(t),q8o=r(aNe," (Decision Transformer model)"),aNe.forEach(t),j8o=i(x),A_=n(x,"LI",{});var nNe=s(A_);cpe=n(nNe,"STRONG",{});var fLt=s(cpe);D8o=r(fLt,"deformable_detr"),fLt.forEach(t),G8o=r(nNe," \u2014 "),nV=n(nNe,"A",{href:!0});var gLt=s(nV);O8o=r(gLt,"DeformableDetrModel"),gLt.forEach(t),V8o=r(nNe," (Deformable DETR model)"),nNe.forEach(t),X8o=i(x),L_=n(x,"LI",{});var sNe=s(L_);mpe=n(sNe,"STRONG",{});var hLt=s(mpe);z8o=r(hLt,"deit"),hLt.forEach(t),Q8o=r(sNe," \u2014 "),sV=n(sNe,"A",{href:!0});var uLt=s(sV);W8o=r(uLt,"DeiTModel"),uLt.forEach(t),U8o=r(sNe," (DeiT model)"),sNe.forEach(t),H8o=i(x),y_=n(x,"LI",{});var lNe=s(y_);fpe=n(lNe,"STRONG",{});var pLt=s(fpe);J8o=r(pLt,"detr"),pLt.forEach(t),Y8o=r(lNe," \u2014 "),lV=n(lNe,"A",{href:!0});var _Lt=s(lV);K8o=r(_Lt,"DetrModel"),_Lt.forEach(t),Z8o=r(lNe," (DETR model)"),lNe.forEach(t),e9o=i(x),x_=n(x,"LI",{});var iNe=s(x_);gpe=n(iNe,"STRONG",{});var bLt=s(gpe);o9o=r(bLt,"distilbert"),bLt.forEach(t),r9o=r(iNe," \u2014 "),iV=n(iNe,"A",{href:!0});var vLt=s(iV);t9o=r(vLt,"DistilBertModel"),vLt.forEach(t),a9o=r(iNe," (DistilBERT model)"),iNe.forEach(t),n9o=i(x),$_=n(x,"LI",{});var dNe=s($_);hpe=n(dNe,"STRONG",{});var FLt=s(hpe);s9o=r(FLt,"donut-swin"),FLt.forEach(t),l9o=r(dNe," \u2014 "),dV=n(dNe,"A",{href:!0});var TLt=s(dV);i9o=r(TLt,"DonutSwinModel"),TLt.forEach(t),d9o=r(dNe," (DonutSwin model)"),dNe.forEach(t),c9o=i(x),k_=n(x,"LI",{});var cNe=s(k_);upe=n(cNe,"STRONG",{});var MLt=s(upe);m9o=r(MLt,"dpr"),MLt.forEach(t),f9o=r(cNe," \u2014 "),cV=n(cNe,"A",{href:!0});var ELt=s(cV);g9o=r(ELt,"DPRQuestionEncoder"),ELt.forEach(t),h9o=r(cNe," (DPR model)"),cNe.forEach(t),u9o=i(x),S_=n(x,"LI",{});var mNe=s(S_);ppe=n(mNe,"STRONG",{});var CLt=s(ppe);p9o=r(CLt,"dpt"),CLt.forEach(t),_9o=r(mNe," \u2014 "),mV=n(mNe,"A",{href:!0});var wLt=s(mV);b9o=r(wLt,"DPTModel"),wLt.forEach(t),v9o=r(mNe," (DPT model)"),mNe.forEach(t),F9o=i(x),R_=n(x,"LI",{});var fNe=s(R_);_pe=n(fNe,"STRONG",{});var ALt=s(_pe);T9o=r(ALt,"electra"),ALt.forEach(t),M9o=r(fNe," \u2014 "),fV=n(fNe,"A",{href:!0});var LLt=s(fV);E9o=r(LLt,"ElectraModel"),LLt.forEach(t),C9o=r(fNe," (ELECTRA model)"),fNe.forEach(t),w9o=i(x),P_=n(x,"LI",{});var gNe=s(P_);bpe=n(gNe,"STRONG",{});var yLt=s(bpe);A9o=r(yLt,"ernie"),yLt.forEach(t),L9o=r(gNe," \u2014 "),gV=n(gNe,"A",{href:!0});var xLt=s(gV);y9o=r(xLt,"ErnieModel"),xLt.forEach(t),x9o=r(gNe," (ERNIE model)"),gNe.forEach(t),$9o=i(x),B_=n(x,"LI",{});var hNe=s(B_);vpe=n(hNe,"STRONG",{});var $Lt=s(vpe);k9o=r($Lt,"flaubert"),$Lt.forEach(t),S9o=r(hNe," \u2014 "),hV=n(hNe,"A",{href:!0});var kLt=s(hV);R9o=r(kLt,"FlaubertModel"),kLt.forEach(t),P9o=r(hNe," (FlauBERT model)"),hNe.forEach(t),B9o=i(x),I_=n(x,"LI",{});var uNe=s(I_);Fpe=n(uNe,"STRONG",{});var SLt=s(Fpe);I9o=r(SLt,"flava"),SLt.forEach(t),N9o=r(uNe," \u2014 "),uV=n(uNe,"A",{href:!0});var RLt=s(uV);q9o=r(RLt,"FlavaModel"),RLt.forEach(t),j9o=r(uNe," (FLAVA model)"),uNe.forEach(t),D9o=i(x),N_=n(x,"LI",{});var pNe=s(N_);Tpe=n(pNe,"STRONG",{});var PLt=s(Tpe);G9o=r(PLt,"fnet"),PLt.forEach(t),O9o=r(pNe," \u2014 "),pV=n(pNe,"A",{href:!0});var BLt=s(pV);V9o=r(BLt,"FNetModel"),BLt.forEach(t),X9o=r(pNe," (FNet model)"),pNe.forEach(t),z9o=i(x),q_=n(x,"LI",{});var _Ne=s(q_);Mpe=n(_Ne,"STRONG",{});var ILt=s(Mpe);Q9o=r(ILt,"fsmt"),ILt.forEach(t),W9o=r(_Ne," \u2014 "),_V=n(_Ne,"A",{href:!0});var NLt=s(_V);U9o=r(NLt,"FSMTModel"),NLt.forEach(t),H9o=r(_Ne," (FairSeq Machine-Translation model)"),_Ne.forEach(t),J9o=i(x),_l=n(x,"LI",{});var IB=s(_l);Epe=n(IB,"STRONG",{});var qLt=s(Epe);Y9o=r(qLt,"funnel"),qLt.forEach(t),K9o=r(IB," \u2014 "),bV=n(IB,"A",{href:!0});var jLt=s(bV);Z9o=r(jLt,"FunnelModel"),jLt.forEach(t),exo=r(IB," or "),vV=n(IB,"A",{href:!0});var DLt=s(vV);oxo=r(DLt,"FunnelBaseModel"),DLt.forEach(t),rxo=r(IB," (Funnel Transformer model)"),IB.forEach(t),txo=i(x),j_=n(x,"LI",{});var bNe=s(j_);Cpe=n(bNe,"STRONG",{});var GLt=s(Cpe);axo=r(GLt,"glpn"),GLt.forEach(t),nxo=r(bNe," \u2014 "),FV=n(bNe,"A",{href:!0});var OLt=s(FV);sxo=r(OLt,"GLPNModel"),OLt.forEach(t),lxo=r(bNe," (GLPN model)"),bNe.forEach(t),ixo=i(x),D_=n(x,"LI",{});var vNe=s(D_);wpe=n(vNe,"STRONG",{});var VLt=s(wpe);dxo=r(VLt,"gpt2"),VLt.forEach(t),cxo=r(vNe," \u2014 "),TV=n(vNe,"A",{href:!0});var XLt=s(TV);mxo=r(XLt,"GPT2Model"),XLt.forEach(t),fxo=r(vNe," (OpenAI GPT-2 model)"),vNe.forEach(t),gxo=i(x),G_=n(x,"LI",{});var FNe=s(G_);Ape=n(FNe,"STRONG",{});var zLt=s(Ape);hxo=r(zLt,"gpt_neo"),zLt.forEach(t),uxo=r(FNe," \u2014 "),MV=n(FNe,"A",{href:!0});var QLt=s(MV);pxo=r(QLt,"GPTNeoModel"),QLt.forEach(t),_xo=r(FNe," (GPT Neo model)"),FNe.forEach(t),bxo=i(x),O_=n(x,"LI",{});var TNe=s(O_);Lpe=n(TNe,"STRONG",{});var WLt=s(Lpe);vxo=r(WLt,"gpt_neox"),WLt.forEach(t),Fxo=r(TNe," \u2014 "),EV=n(TNe,"A",{href:!0});var ULt=s(EV);Txo=r(ULt,"GPTNeoXModel"),ULt.forEach(t),Mxo=r(TNe," (GPT NeoX model)"),TNe.forEach(t),Exo=i(x),V_=n(x,"LI",{});var MNe=s(V_);ype=n(MNe,"STRONG",{});var HLt=s(ype);Cxo=r(HLt,"gpt_neox_japanese"),HLt.forEach(t),wxo=r(MNe," \u2014 "),CV=n(MNe,"A",{href:!0});var JLt=s(CV);Axo=r(JLt,"GPTNeoXJapaneseModel"),JLt.forEach(t),Lxo=r(MNe," (GPT NeoX Japanese model)"),MNe.forEach(t),yxo=i(x),X_=n(x,"LI",{});var ENe=s(X_);xpe=n(ENe,"STRONG",{});var YLt=s(xpe);xxo=r(YLt,"gptj"),YLt.forEach(t),$xo=r(ENe," \u2014 "),wV=n(ENe,"A",{href:!0});var KLt=s(wV);kxo=r(KLt,"GPTJModel"),KLt.forEach(t),Sxo=r(ENe," (GPT-J model)"),ENe.forEach(t),Rxo=i(x),z_=n(x,"LI",{});var CNe=s(z_);$pe=n(CNe,"STRONG",{});var ZLt=s($pe);Pxo=r(ZLt,"groupvit"),ZLt.forEach(t),Bxo=r(CNe," \u2014 "),AV=n(CNe,"A",{href:!0});var eyt=s(AV);Ixo=r(eyt,"GroupViTModel"),eyt.forEach(t),Nxo=r(CNe," (GroupViT model)"),CNe.forEach(t),qxo=i(x),Q_=n(x,"LI",{});var wNe=s(Q_);kpe=n(wNe,"STRONG",{});var oyt=s(kpe);jxo=r(oyt,"hubert"),oyt.forEach(t),Dxo=r(wNe," \u2014 "),LV=n(wNe,"A",{href:!0});var ryt=s(LV);Gxo=r(ryt,"HubertModel"),ryt.forEach(t),Oxo=r(wNe," (Hubert model)"),wNe.forEach(t),Vxo=i(x),W_=n(x,"LI",{});var ANe=s(W_);Spe=n(ANe,"STRONG",{});var tyt=s(Spe);Xxo=r(tyt,"ibert"),tyt.forEach(t),zxo=r(ANe," \u2014 "),yV=n(ANe,"A",{href:!0});var ayt=s(yV);Qxo=r(ayt,"IBertModel"),ayt.forEach(t),Wxo=r(ANe," (I-BERT model)"),ANe.forEach(t),Uxo=i(x),U_=n(x,"LI",{});var LNe=s(U_);Rpe=n(LNe,"STRONG",{});var nyt=s(Rpe);Hxo=r(nyt,"imagegpt"),nyt.forEach(t),Jxo=r(LNe," \u2014 "),xV=n(LNe,"A",{href:!0});var syt=s(xV);Yxo=r(syt,"ImageGPTModel"),syt.forEach(t),Kxo=r(LNe," (ImageGPT model)"),LNe.forEach(t),Zxo=i(x),H_=n(x,"LI",{});var yNe=s(H_);Ppe=n(yNe,"STRONG",{});var lyt=s(Ppe);e$o=r(lyt,"layoutlm"),lyt.forEach(t),o$o=r(yNe," \u2014 "),$V=n(yNe,"A",{href:!0});var iyt=s($V);r$o=r(iyt,"LayoutLMModel"),iyt.forEach(t),t$o=r(yNe," (LayoutLM model)"),yNe.forEach(t),a$o=i(x),J_=n(x,"LI",{});var xNe=s(J_);Bpe=n(xNe,"STRONG",{});var dyt=s(Bpe);n$o=r(dyt,"layoutlmv2"),dyt.forEach(t),s$o=r(xNe," \u2014 "),kV=n(xNe,"A",{href:!0});var cyt=s(kV);l$o=r(cyt,"LayoutLMv2Model"),cyt.forEach(t),i$o=r(xNe," (LayoutLMv2 model)"),xNe.forEach(t),d$o=i(x),Y_=n(x,"LI",{});var $Ne=s(Y_);Ipe=n($Ne,"STRONG",{});var myt=s(Ipe);c$o=r(myt,"layoutlmv3"),myt.forEach(t),m$o=r($Ne," \u2014 "),SV=n($Ne,"A",{href:!0});var fyt=s(SV);f$o=r(fyt,"LayoutLMv3Model"),fyt.forEach(t),g$o=r($Ne," (LayoutLMv3 model)"),$Ne.forEach(t),h$o=i(x),K_=n(x,"LI",{});var kNe=s(K_);Npe=n(kNe,"STRONG",{});var gyt=s(Npe);u$o=r(gyt,"led"),gyt.forEach(t),p$o=r(kNe," \u2014 "),RV=n(kNe,"A",{href:!0});var hyt=s(RV);_$o=r(hyt,"LEDModel"),hyt.forEach(t),b$o=r(kNe," (LED model)"),kNe.forEach(t),v$o=i(x),Z_=n(x,"LI",{});var SNe=s(Z_);qpe=n(SNe,"STRONG",{});var uyt=s(qpe);F$o=r(uyt,"levit"),uyt.forEach(t),T$o=r(SNe," \u2014 "),PV=n(SNe,"A",{href:!0});var pyt=s(PV);M$o=r(pyt,"LevitModel"),pyt.forEach(t),E$o=r(SNe," (LeViT model)"),SNe.forEach(t),C$o=i(x),eb=n(x,"LI",{});var RNe=s(eb);jpe=n(RNe,"STRONG",{});var _yt=s(jpe);w$o=r(_yt,"longformer"),_yt.forEach(t),A$o=r(RNe," \u2014 "),BV=n(RNe,"A",{href:!0});var byt=s(BV);L$o=r(byt,"LongformerModel"),byt.forEach(t),y$o=r(RNe," (Longformer model)"),RNe.forEach(t),x$o=i(x),ob=n(x,"LI",{});var PNe=s(ob);Dpe=n(PNe,"STRONG",{});var vyt=s(Dpe);$$o=r(vyt,"longt5"),vyt.forEach(t),k$o=r(PNe," \u2014 "),IV=n(PNe,"A",{href:!0});var Fyt=s(IV);S$o=r(Fyt,"LongT5Model"),Fyt.forEach(t),R$o=r(PNe," (LongT5 model)"),PNe.forEach(t),P$o=i(x),rb=n(x,"LI",{});var BNe=s(rb);Gpe=n(BNe,"STRONG",{});var Tyt=s(Gpe);B$o=r(Tyt,"luke"),Tyt.forEach(t),I$o=r(BNe," \u2014 "),NV=n(BNe,"A",{href:!0});var Myt=s(NV);N$o=r(Myt,"LukeModel"),Myt.forEach(t),q$o=r(BNe," (LUKE model)"),BNe.forEach(t),j$o=i(x),tb=n(x,"LI",{});var INe=s(tb);Ope=n(INe,"STRONG",{});var Eyt=s(Ope);D$o=r(Eyt,"lxmert"),Eyt.forEach(t),G$o=r(INe," \u2014 "),qV=n(INe,"A",{href:!0});var Cyt=s(qV);O$o=r(Cyt,"LxmertModel"),Cyt.forEach(t),V$o=r(INe," (LXMERT model)"),INe.forEach(t),X$o=i(x),ab=n(x,"LI",{});var NNe=s(ab);Vpe=n(NNe,"STRONG",{});var wyt=s(Vpe);z$o=r(wyt,"m2m_100"),wyt.forEach(t),Q$o=r(NNe," \u2014 "),jV=n(NNe,"A",{href:!0});var Ayt=s(jV);W$o=r(Ayt,"M2M100Model"),Ayt.forEach(t),U$o=r(NNe," (M2M100 model)"),NNe.forEach(t),H$o=i(x),nb=n(x,"LI",{});var qNe=s(nb);Xpe=n(qNe,"STRONG",{});var Lyt=s(Xpe);J$o=r(Lyt,"marian"),Lyt.forEach(t),Y$o=r(qNe," \u2014 "),DV=n(qNe,"A",{href:!0});var yyt=s(DV);K$o=r(yyt,"MarianModel"),yyt.forEach(t),Z$o=r(qNe," (Marian model)"),qNe.forEach(t),eko=i(x),sb=n(x,"LI",{});var jNe=s(sb);zpe=n(jNe,"STRONG",{});var xyt=s(zpe);oko=r(xyt,"maskformer"),xyt.forEach(t),rko=r(jNe," \u2014 "),GV=n(jNe,"A",{href:!0});var $yt=s(GV);tko=r($yt,"MaskFormerModel"),$yt.forEach(t),ako=r(jNe," (MaskFormer model)"),jNe.forEach(t),nko=i(x),lb=n(x,"LI",{});var DNe=s(lb);Qpe=n(DNe,"STRONG",{});var kyt=s(Qpe);sko=r(kyt,"mbart"),kyt.forEach(t),lko=r(DNe," \u2014 "),OV=n(DNe,"A",{href:!0});var Syt=s(OV);iko=r(Syt,"MBartModel"),Syt.forEach(t),dko=r(DNe," (mBART model)"),DNe.forEach(t),cko=i(x),ib=n(x,"LI",{});var GNe=s(ib);Wpe=n(GNe,"STRONG",{});var Ryt=s(Wpe);mko=r(Ryt,"mctct"),Ryt.forEach(t),fko=r(GNe," \u2014 "),VV=n(GNe,"A",{href:!0});var Pyt=s(VV);gko=r(Pyt,"MCTCTModel"),Pyt.forEach(t),hko=r(GNe," (M-CTC-T model)"),GNe.forEach(t),uko=i(x),db=n(x,"LI",{});var ONe=s(db);Upe=n(ONe,"STRONG",{});var Byt=s(Upe);pko=r(Byt,"megatron-bert"),Byt.forEach(t),_ko=r(ONe," \u2014 "),XV=n(ONe,"A",{href:!0});var Iyt=s(XV);bko=r(Iyt,"MegatronBertModel"),Iyt.forEach(t),vko=r(ONe," (Megatron-BERT model)"),ONe.forEach(t),Fko=i(x),cb=n(x,"LI",{});var VNe=s(cb);Hpe=n(VNe,"STRONG",{});var Nyt=s(Hpe);Tko=r(Nyt,"mobilebert"),Nyt.forEach(t),Mko=r(VNe," \u2014 "),zV=n(VNe,"A",{href:!0});var qyt=s(zV);Eko=r(qyt,"MobileBertModel"),qyt.forEach(t),Cko=r(VNe," (MobileBERT model)"),VNe.forEach(t),wko=i(x),mb=n(x,"LI",{});var XNe=s(mb);Jpe=n(XNe,"STRONG",{});var jyt=s(Jpe);Ako=r(jyt,"mobilevit"),jyt.forEach(t),Lko=r(XNe," \u2014 "),QV=n(XNe,"A",{href:!0});var Dyt=s(QV);yko=r(Dyt,"MobileViTModel"),Dyt.forEach(t),xko=r(XNe," (MobileViT model)"),XNe.forEach(t),$ko=i(x),fb=n(x,"LI",{});var zNe=s(fb);Ype=n(zNe,"STRONG",{});var Gyt=s(Ype);kko=r(Gyt,"mpnet"),Gyt.forEach(t),Sko=r(zNe," \u2014 "),WV=n(zNe,"A",{href:!0});var Oyt=s(WV);Rko=r(Oyt,"MPNetModel"),Oyt.forEach(t),Pko=r(zNe," (MPNet model)"),zNe.forEach(t),Bko=i(x),gb=n(x,"LI",{});var QNe=s(gb);Kpe=n(QNe,"STRONG",{});var Vyt=s(Kpe);Iko=r(Vyt,"mt5"),Vyt.forEach(t),Nko=r(QNe," \u2014 "),UV=n(QNe,"A",{href:!0});var Xyt=s(UV);qko=r(Xyt,"MT5Model"),Xyt.forEach(t),jko=r(QNe," (MT5 model)"),QNe.forEach(t),Dko=i(x),hb=n(x,"LI",{});var WNe=s(hb);Zpe=n(WNe,"STRONG",{});var zyt=s(Zpe);Gko=r(zyt,"mvp"),zyt.forEach(t),Oko=r(WNe," \u2014 "),HV=n(WNe,"A",{href:!0});var Qyt=s(HV);Vko=r(Qyt,"MvpModel"),Qyt.forEach(t),Xko=r(WNe," (MVP model)"),WNe.forEach(t),zko=i(x),ub=n(x,"LI",{});var UNe=s(ub);e_e=n(UNe,"STRONG",{});var Wyt=s(e_e);Qko=r(Wyt,"nezha"),Wyt.forEach(t),Wko=r(UNe," \u2014 "),JV=n(UNe,"A",{href:!0});var Uyt=s(JV);Uko=r(Uyt,"NezhaModel"),Uyt.forEach(t),Hko=r(UNe," (Nezha model)"),UNe.forEach(t),Jko=i(x),pb=n(x,"LI",{});var HNe=s(pb);o_e=n(HNe,"STRONG",{});var Hyt=s(o_e);Yko=r(Hyt,"nllb"),Hyt.forEach(t),Kko=r(HNe," \u2014 "),YV=n(HNe,"A",{href:!0});var Jyt=s(YV);Zko=r(Jyt,"M2M100Model"),Jyt.forEach(t),eSo=r(HNe," (NLLB model)"),HNe.forEach(t),oSo=i(x),_b=n(x,"LI",{});var JNe=s(_b);r_e=n(JNe,"STRONG",{});var Yyt=s(r_e);rSo=r(Yyt,"nystromformer"),Yyt.forEach(t),tSo=r(JNe," \u2014 "),KV=n(JNe,"A",{href:!0});var Kyt=s(KV);aSo=r(Kyt,"NystromformerModel"),Kyt.forEach(t),nSo=r(JNe," (Nystr\xF6mformer model)"),JNe.forEach(t),sSo=i(x),bb=n(x,"LI",{});var YNe=s(bb);t_e=n(YNe,"STRONG",{});var Zyt=s(t_e);lSo=r(Zyt,"openai-gpt"),Zyt.forEach(t),iSo=r(YNe," \u2014 "),ZV=n(YNe,"A",{href:!0});var e8t=s(ZV);dSo=r(e8t,"OpenAIGPTModel"),e8t.forEach(t),cSo=r(YNe," (OpenAI GPT model)"),YNe.forEach(t),mSo=i(x),vb=n(x,"LI",{});var KNe=s(vb);a_e=n(KNe,"STRONG",{});var o8t=s(a_e);fSo=r(o8t,"opt"),o8t.forEach(t),gSo=r(KNe," \u2014 "),eX=n(KNe,"A",{href:!0});var r8t=s(eX);hSo=r(r8t,"OPTModel"),r8t.forEach(t),uSo=r(KNe," (OPT model)"),KNe.forEach(t),pSo=i(x),Fb=n(x,"LI",{});var ZNe=s(Fb);n_e=n(ZNe,"STRONG",{});var t8t=s(n_e);_So=r(t8t,"owlvit"),t8t.forEach(t),bSo=r(ZNe," \u2014 "),oX=n(ZNe,"A",{href:!0});var a8t=s(oX);vSo=r(a8t,"OwlViTModel"),a8t.forEach(t),FSo=r(ZNe," (OWL-ViT model)"),ZNe.forEach(t),TSo=i(x),Tb=n(x,"LI",{});var eqe=s(Tb);s_e=n(eqe,"STRONG",{});var n8t=s(s_e);MSo=r(n8t,"pegasus"),n8t.forEach(t),ESo=r(eqe," \u2014 "),rX=n(eqe,"A",{href:!0});var s8t=s(rX);CSo=r(s8t,"PegasusModel"),s8t.forEach(t),wSo=r(eqe," (Pegasus model)"),eqe.forEach(t),ASo=i(x),Mb=n(x,"LI",{});var oqe=s(Mb);l_e=n(oqe,"STRONG",{});var l8t=s(l_e);LSo=r(l8t,"pegasus_x"),l8t.forEach(t),ySo=r(oqe," \u2014 "),tX=n(oqe,"A",{href:!0});var i8t=s(tX);xSo=r(i8t,"PegasusXModel"),i8t.forEach(t),$So=r(oqe," (PEGASUS-X model)"),oqe.forEach(t),kSo=i(x),Eb=n(x,"LI",{});var rqe=s(Eb);i_e=n(rqe,"STRONG",{});var d8t=s(i_e);SSo=r(d8t,"perceiver"),d8t.forEach(t),RSo=r(rqe," \u2014 "),aX=n(rqe,"A",{href:!0});var c8t=s(aX);PSo=r(c8t,"PerceiverModel"),c8t.forEach(t),BSo=r(rqe," (Perceiver model)"),rqe.forEach(t),ISo=i(x),Cb=n(x,"LI",{});var tqe=s(Cb);d_e=n(tqe,"STRONG",{});var m8t=s(d_e);NSo=r(m8t,"plbart"),m8t.forEach(t),qSo=r(tqe," \u2014 "),nX=n(tqe,"A",{href:!0});var f8t=s(nX);jSo=r(f8t,"PLBartModel"),f8t.forEach(t),DSo=r(tqe," (PLBart model)"),tqe.forEach(t),GSo=i(x),wb=n(x,"LI",{});var aqe=s(wb);c_e=n(aqe,"STRONG",{});var g8t=s(c_e);OSo=r(g8t,"poolformer"),g8t.forEach(t),VSo=r(aqe," \u2014 "),sX=n(aqe,"A",{href:!0});var h8t=s(sX);XSo=r(h8t,"PoolFormerModel"),h8t.forEach(t),zSo=r(aqe," (PoolFormer model)"),aqe.forEach(t),QSo=i(x),Ab=n(x,"LI",{});var nqe=s(Ab);m_e=n(nqe,"STRONG",{});var u8t=s(m_e);WSo=r(u8t,"prophetnet"),u8t.forEach(t),USo=r(nqe," \u2014 "),lX=n(nqe,"A",{href:!0});var p8t=s(lX);HSo=r(p8t,"ProphetNetModel"),p8t.forEach(t),JSo=r(nqe," (ProphetNet model)"),nqe.forEach(t),YSo=i(x),Lb=n(x,"LI",{});var sqe=s(Lb);f_e=n(sqe,"STRONG",{});var _8t=s(f_e);KSo=r(_8t,"qdqbert"),_8t.forEach(t),ZSo=r(sqe," \u2014 "),iX=n(sqe,"A",{href:!0});var b8t=s(iX);eRo=r(b8t,"QDQBertModel"),b8t.forEach(t),oRo=r(sqe," (QDQBert model)"),sqe.forEach(t),rRo=i(x),yb=n(x,"LI",{});var lqe=s(yb);g_e=n(lqe,"STRONG",{});var v8t=s(g_e);tRo=r(v8t,"reformer"),v8t.forEach(t),aRo=r(lqe," \u2014 "),dX=n(lqe,"A",{href:!0});var F8t=s(dX);nRo=r(F8t,"ReformerModel"),F8t.forEach(t),sRo=r(lqe," (Reformer model)"),lqe.forEach(t),lRo=i(x),xb=n(x,"LI",{});var iqe=s(xb);h_e=n(iqe,"STRONG",{});var T8t=s(h_e);iRo=r(T8t,"regnet"),T8t.forEach(t),dRo=r(iqe," \u2014 "),cX=n(iqe,"A",{href:!0});var M8t=s(cX);cRo=r(M8t,"RegNetModel"),M8t.forEach(t),mRo=r(iqe," (RegNet model)"),iqe.forEach(t),fRo=i(x),$b=n(x,"LI",{});var dqe=s($b);u_e=n(dqe,"STRONG",{});var E8t=s(u_e);gRo=r(E8t,"rembert"),E8t.forEach(t),hRo=r(dqe," \u2014 "),mX=n(dqe,"A",{href:!0});var C8t=s(mX);uRo=r(C8t,"RemBertModel"),C8t.forEach(t),pRo=r(dqe," (RemBERT model)"),dqe.forEach(t),_Ro=i(x),kb=n(x,"LI",{});var cqe=s(kb);p_e=n(cqe,"STRONG",{});var w8t=s(p_e);bRo=r(w8t,"resnet"),w8t.forEach(t),vRo=r(cqe," \u2014 "),fX=n(cqe,"A",{href:!0});var A8t=s(fX);FRo=r(A8t,"ResNetModel"),A8t.forEach(t),TRo=r(cqe," (ResNet model)"),cqe.forEach(t),MRo=i(x),Sb=n(x,"LI",{});var mqe=s(Sb);__e=n(mqe,"STRONG",{});var L8t=s(__e);ERo=r(L8t,"retribert"),L8t.forEach(t),CRo=r(mqe," \u2014 "),gX=n(mqe,"A",{href:!0});var y8t=s(gX);wRo=r(y8t,"RetriBertModel"),y8t.forEach(t),ARo=r(mqe," (RetriBERT model)"),mqe.forEach(t),LRo=i(x),Rb=n(x,"LI",{});var fqe=s(Rb);b_e=n(fqe,"STRONG",{});var x8t=s(b_e);yRo=r(x8t,"roberta"),x8t.forEach(t),xRo=r(fqe," \u2014 "),hX=n(fqe,"A",{href:!0});var $8t=s(hX);$Ro=r($8t,"RobertaModel"),$8t.forEach(t),kRo=r(fqe," (RoBERTa model)"),fqe.forEach(t),SRo=i(x),Pb=n(x,"LI",{});var gqe=s(Pb);v_e=n(gqe,"STRONG",{});var k8t=s(v_e);RRo=r(k8t,"roformer"),k8t.forEach(t),PRo=r(gqe," \u2014 "),uX=n(gqe,"A",{href:!0});var S8t=s(uX);BRo=r(S8t,"RoFormerModel"),S8t.forEach(t),IRo=r(gqe," (RoFormer model)"),gqe.forEach(t),NRo=i(x),Bb=n(x,"LI",{});var hqe=s(Bb);F_e=n(hqe,"STRONG",{});var R8t=s(F_e);qRo=r(R8t,"segformer"),R8t.forEach(t),jRo=r(hqe," \u2014 "),pX=n(hqe,"A",{href:!0});var P8t=s(pX);DRo=r(P8t,"SegformerModel"),P8t.forEach(t),GRo=r(hqe," (SegFormer model)"),hqe.forEach(t),ORo=i(x),Ib=n(x,"LI",{});var uqe=s(Ib);T_e=n(uqe,"STRONG",{});var B8t=s(T_e);VRo=r(B8t,"sew"),B8t.forEach(t),XRo=r(uqe," \u2014 "),_X=n(uqe,"A",{href:!0});var I8t=s(_X);zRo=r(I8t,"SEWModel"),I8t.forEach(t),QRo=r(uqe," (SEW model)"),uqe.forEach(t),WRo=i(x),Nb=n(x,"LI",{});var pqe=s(Nb);M_e=n(pqe,"STRONG",{});var N8t=s(M_e);URo=r(N8t,"sew-d"),N8t.forEach(t),HRo=r(pqe," \u2014 "),bX=n(pqe,"A",{href:!0});var q8t=s(bX);JRo=r(q8t,"SEWDModel"),q8t.forEach(t),YRo=r(pqe," (SEW-D model)"),pqe.forEach(t),KRo=i(x),qb=n(x,"LI",{});var _qe=s(qb);E_e=n(_qe,"STRONG",{});var j8t=s(E_e);ZRo=r(j8t,"speech_to_text"),j8t.forEach(t),ePo=r(_qe," \u2014 "),vX=n(_qe,"A",{href:!0});var D8t=s(vX);oPo=r(D8t,"Speech2TextModel"),D8t.forEach(t),rPo=r(_qe," (Speech2Text model)"),_qe.forEach(t),tPo=i(x),jb=n(x,"LI",{});var bqe=s(jb);C_e=n(bqe,"STRONG",{});var G8t=s(C_e);aPo=r(G8t,"splinter"),G8t.forEach(t),nPo=r(bqe," \u2014 "),FX=n(bqe,"A",{href:!0});var O8t=s(FX);sPo=r(O8t,"SplinterModel"),O8t.forEach(t),lPo=r(bqe," (Splinter model)"),bqe.forEach(t),iPo=i(x),Db=n(x,"LI",{});var vqe=s(Db);w_e=n(vqe,"STRONG",{});var V8t=s(w_e);dPo=r(V8t,"squeezebert"),V8t.forEach(t),cPo=r(vqe," \u2014 "),TX=n(vqe,"A",{href:!0});var X8t=s(TX);mPo=r(X8t,"SqueezeBertModel"),X8t.forEach(t),fPo=r(vqe," (SqueezeBERT model)"),vqe.forEach(t),gPo=i(x),Gb=n(x,"LI",{});var Fqe=s(Gb);A_e=n(Fqe,"STRONG",{});var z8t=s(A_e);hPo=r(z8t,"swin"),z8t.forEach(t),uPo=r(Fqe," \u2014 "),MX=n(Fqe,"A",{href:!0});var Q8t=s(MX);pPo=r(Q8t,"SwinModel"),Q8t.forEach(t),_Po=r(Fqe," (Swin Transformer model)"),Fqe.forEach(t),bPo=i(x),Ob=n(x,"LI",{});var Tqe=s(Ob);L_e=n(Tqe,"STRONG",{});var W8t=s(L_e);vPo=r(W8t,"swinv2"),W8t.forEach(t),FPo=r(Tqe," \u2014 "),EX=n(Tqe,"A",{href:!0});var U8t=s(EX);TPo=r(U8t,"Swinv2Model"),U8t.forEach(t),MPo=r(Tqe," (Swin Transformer V2 model)"),Tqe.forEach(t),EPo=i(x),Vb=n(x,"LI",{});var Mqe=s(Vb);y_e=n(Mqe,"STRONG",{});var H8t=s(y_e);CPo=r(H8t,"t5"),H8t.forEach(t),wPo=r(Mqe," \u2014 "),CX=n(Mqe,"A",{href:!0});var J8t=s(CX);APo=r(J8t,"T5Model"),J8t.forEach(t),LPo=r(Mqe," (T5 model)"),Mqe.forEach(t),yPo=i(x),Xb=n(x,"LI",{});var Eqe=s(Xb);x_e=n(Eqe,"STRONG",{});var Y8t=s(x_e);xPo=r(Y8t,"tapas"),Y8t.forEach(t),$Po=r(Eqe," \u2014 "),wX=n(Eqe,"A",{href:!0});var K8t=s(wX);kPo=r(K8t,"TapasModel"),K8t.forEach(t),SPo=r(Eqe," (TAPAS model)"),Eqe.forEach(t),RPo=i(x),zb=n(x,"LI",{});var Cqe=s(zb);$_e=n(Cqe,"STRONG",{});var Z8t=s($_e);PPo=r(Z8t,"trajectory_transformer"),Z8t.forEach(t),BPo=r(Cqe," \u2014 "),AX=n(Cqe,"A",{href:!0});var e9t=s(AX);IPo=r(e9t,"TrajectoryTransformerModel"),e9t.forEach(t),NPo=r(Cqe," (Trajectory Transformer model)"),Cqe.forEach(t),qPo=i(x),Qb=n(x,"LI",{});var wqe=s(Qb);k_e=n(wqe,"STRONG",{});var o9t=s(k_e);jPo=r(o9t,"transfo-xl"),o9t.forEach(t),DPo=r(wqe," \u2014 "),LX=n(wqe,"A",{href:!0});var r9t=s(LX);GPo=r(r9t,"TransfoXLModel"),r9t.forEach(t),OPo=r(wqe," (Transformer-XL model)"),wqe.forEach(t),VPo=i(x),Wb=n(x,"LI",{});var Aqe=s(Wb);S_e=n(Aqe,"STRONG",{});var t9t=s(S_e);XPo=r(t9t,"unispeech"),t9t.forEach(t),zPo=r(Aqe," \u2014 "),yX=n(Aqe,"A",{href:!0});var a9t=s(yX);QPo=r(a9t,"UniSpeechModel"),a9t.forEach(t),WPo=r(Aqe," (UniSpeech model)"),Aqe.forEach(t),UPo=i(x),Ub=n(x,"LI",{});var Lqe=s(Ub);R_e=n(Lqe,"STRONG",{});var n9t=s(R_e);HPo=r(n9t,"unispeech-sat"),n9t.forEach(t),JPo=r(Lqe," \u2014 "),xX=n(Lqe,"A",{href:!0});var s9t=s(xX);YPo=r(s9t,"UniSpeechSatModel"),s9t.forEach(t),KPo=r(Lqe," (UniSpeechSat model)"),Lqe.forEach(t),ZPo=i(x),Hb=n(x,"LI",{});var yqe=s(Hb);P_e=n(yqe,"STRONG",{});var l9t=s(P_e);eBo=r(l9t,"van"),l9t.forEach(t),oBo=r(yqe," \u2014 "),$X=n(yqe,"A",{href:!0});var i9t=s($X);rBo=r(i9t,"VanModel"),i9t.forEach(t),tBo=r(yqe," (VAN model)"),yqe.forEach(t),aBo=i(x),Jb=n(x,"LI",{});var xqe=s(Jb);B_e=n(xqe,"STRONG",{});var d9t=s(B_e);nBo=r(d9t,"videomae"),d9t.forEach(t),sBo=r(xqe," \u2014 "),kX=n(xqe,"A",{href:!0});var c9t=s(kX);lBo=r(c9t,"VideoMAEModel"),c9t.forEach(t),iBo=r(xqe," (VideoMAE model)"),xqe.forEach(t),dBo=i(x),Yb=n(x,"LI",{});var $qe=s(Yb);I_e=n($qe,"STRONG",{});var m9t=s(I_e);cBo=r(m9t,"vilt"),m9t.forEach(t),mBo=r($qe," \u2014 "),SX=n($qe,"A",{href:!0});var f9t=s(SX);fBo=r(f9t,"ViltModel"),f9t.forEach(t),gBo=r($qe," (ViLT model)"),$qe.forEach(t),hBo=i(x),Kb=n(x,"LI",{});var kqe=s(Kb);N_e=n(kqe,"STRONG",{});var g9t=s(N_e);uBo=r(g9t,"vision-text-dual-encoder"),g9t.forEach(t),pBo=r(kqe," \u2014 "),RX=n(kqe,"A",{href:!0});var h9t=s(RX);_Bo=r(h9t,"VisionTextDualEncoderModel"),h9t.forEach(t),bBo=r(kqe," (VisionTextDualEncoder model)"),kqe.forEach(t),vBo=i(x),Zb=n(x,"LI",{});var Sqe=s(Zb);q_e=n(Sqe,"STRONG",{});var u9t=s(q_e);FBo=r(u9t,"visual_bert"),u9t.forEach(t),TBo=r(Sqe," \u2014 "),PX=n(Sqe,"A",{href:!0});var p9t=s(PX);MBo=r(p9t,"VisualBertModel"),p9t.forEach(t),EBo=r(Sqe," (VisualBERT model)"),Sqe.forEach(t),CBo=i(x),e2=n(x,"LI",{});var Rqe=s(e2);j_e=n(Rqe,"STRONG",{});var _9t=s(j_e);wBo=r(_9t,"vit"),_9t.forEach(t),ABo=r(Rqe," \u2014 "),BX=n(Rqe,"A",{href:!0});var b9t=s(BX);LBo=r(b9t,"ViTModel"),b9t.forEach(t),yBo=r(Rqe," (ViT model)"),Rqe.forEach(t),xBo=i(x),o2=n(x,"LI",{});var Pqe=s(o2);D_e=n(Pqe,"STRONG",{});var v9t=s(D_e);$Bo=r(v9t,"vit_mae"),v9t.forEach(t),kBo=r(Pqe," \u2014 "),IX=n(Pqe,"A",{href:!0});var F9t=s(IX);SBo=r(F9t,"ViTMAEModel"),F9t.forEach(t),RBo=r(Pqe," (ViTMAE model)"),Pqe.forEach(t),PBo=i(x),r2=n(x,"LI",{});var Bqe=s(r2);G_e=n(Bqe,"STRONG",{});var T9t=s(G_e);BBo=r(T9t,"vit_msn"),T9t.forEach(t),IBo=r(Bqe," \u2014 "),NX=n(Bqe,"A",{href:!0});var M9t=s(NX);NBo=r(M9t,"ViTMSNModel"),M9t.forEach(t),qBo=r(Bqe," (ViTMSN model)"),Bqe.forEach(t),jBo=i(x),t2=n(x,"LI",{});var Iqe=s(t2);O_e=n(Iqe,"STRONG",{});var E9t=s(O_e);DBo=r(E9t,"wav2vec2"),E9t.forEach(t),GBo=r(Iqe," \u2014 "),qX=n(Iqe,"A",{href:!0});var C9t=s(qX);OBo=r(C9t,"Wav2Vec2Model"),C9t.forEach(t),VBo=r(Iqe," (Wav2Vec2 model)"),Iqe.forEach(t),XBo=i(x),a2=n(x,"LI",{});var Nqe=s(a2);V_e=n(Nqe,"STRONG",{});var w9t=s(V_e);zBo=r(w9t,"wav2vec2-conformer"),w9t.forEach(t),QBo=r(Nqe," \u2014 "),jX=n(Nqe,"A",{href:!0});var A9t=s(jX);WBo=r(A9t,"Wav2Vec2ConformerModel"),A9t.forEach(t),UBo=r(Nqe," (Wav2Vec2-Conformer model)"),Nqe.forEach(t),HBo=i(x),n2=n(x,"LI",{});var qqe=s(n2);X_e=n(qqe,"STRONG",{});var L9t=s(X_e);JBo=r(L9t,"wavlm"),L9t.forEach(t),YBo=r(qqe," \u2014 "),DX=n(qqe,"A",{href:!0});var y9t=s(DX);KBo=r(y9t,"WavLMModel"),y9t.forEach(t),ZBo=r(qqe," (WavLM model)"),qqe.forEach(t),eIo=i(x),s2=n(x,"LI",{});var jqe=s(s2);z_e=n(jqe,"STRONG",{});var x9t=s(z_e);oIo=r(x9t,"xclip"),x9t.forEach(t),rIo=r(jqe," \u2014 "),GX=n(jqe,"A",{href:!0});var $9t=s(GX);tIo=r($9t,"XCLIPModel"),$9t.forEach(t),aIo=r(jqe," (X-CLIP model)"),jqe.forEach(t),nIo=i(x),l2=n(x,"LI",{});var Dqe=s(l2);Q_e=n(Dqe,"STRONG",{});var k9t=s(Q_e);sIo=r(k9t,"xglm"),k9t.forEach(t),lIo=r(Dqe," \u2014 "),OX=n(Dqe,"A",{href:!0});var S9t=s(OX);iIo=r(S9t,"XGLMModel"),S9t.forEach(t),dIo=r(Dqe," (XGLM model)"),Dqe.forEach(t),cIo=i(x),i2=n(x,"LI",{});var Gqe=s(i2);W_e=n(Gqe,"STRONG",{});var R9t=s(W_e);mIo=r(R9t,"xlm"),R9t.forEach(t),fIo=r(Gqe," \u2014 "),VX=n(Gqe,"A",{href:!0});var P9t=s(VX);gIo=r(P9t,"XLMModel"),P9t.forEach(t),hIo=r(Gqe," (XLM model)"),Gqe.forEach(t),uIo=i(x),d2=n(x,"LI",{});var Oqe=s(d2);U_e=n(Oqe,"STRONG",{});var B9t=s(U_e);pIo=r(B9t,"xlm-prophetnet"),B9t.forEach(t),_Io=r(Oqe," \u2014 "),XX=n(Oqe,"A",{href:!0});var I9t=s(XX);bIo=r(I9t,"XLMProphetNetModel"),I9t.forEach(t),vIo=r(Oqe," (XLM-ProphetNet model)"),Oqe.forEach(t),FIo=i(x),c2=n(x,"LI",{});var Vqe=s(c2);H_e=n(Vqe,"STRONG",{});var N9t=s(H_e);TIo=r(N9t,"xlm-roberta"),N9t.forEach(t),MIo=r(Vqe," \u2014 "),zX=n(Vqe,"A",{href:!0});var q9t=s(zX);EIo=r(q9t,"XLMRobertaModel"),q9t.forEach(t),CIo=r(Vqe," (XLM-RoBERTa model)"),Vqe.forEach(t),wIo=i(x),m2=n(x,"LI",{});var Xqe=s(m2);J_e=n(Xqe,"STRONG",{});var j9t=s(J_e);AIo=r(j9t,"xlm-roberta-xl"),j9t.forEach(t),LIo=r(Xqe," \u2014 "),QX=n(Xqe,"A",{href:!0});var D9t=s(QX);yIo=r(D9t,"XLMRobertaXLModel"),D9t.forEach(t),xIo=r(Xqe," (XLM-RoBERTa-XL model)"),Xqe.forEach(t),$Io=i(x),f2=n(x,"LI",{});var zqe=s(f2);Y_e=n(zqe,"STRONG",{});var G9t=s(Y_e);kIo=r(G9t,"xlnet"),G9t.forEach(t),SIo=r(zqe," \u2014 "),WX=n(zqe,"A",{href:!0});var O9t=s(WX);RIo=r(O9t,"XLNetModel"),O9t.forEach(t),PIo=r(zqe," (XLNet model)"),zqe.forEach(t),BIo=i(x),g2=n(x,"LI",{});var Qqe=s(g2);K_e=n(Qqe,"STRONG",{});var V9t=s(K_e);IIo=r(V9t,"yolos"),V9t.forEach(t),NIo=r(Qqe," \u2014 "),UX=n(Qqe,"A",{href:!0});var X9t=s(UX);qIo=r(X9t,"YolosModel"),X9t.forEach(t),jIo=r(Qqe," (YOLOS model)"),Qqe.forEach(t),DIo=i(x),h2=n(x,"LI",{});var Wqe=s(h2);Z_e=n(Wqe,"STRONG",{});var z9t=s(Z_e);GIo=r(z9t,"yoso"),z9t.forEach(t),OIo=r(Wqe," \u2014 "),HX=n(Wqe,"A",{href:!0});var Q9t=s(HX);VIo=r(Q9t,"YosoModel"),Q9t.forEach(t),XIo=r(Wqe," (YOSO model)"),Wqe.forEach(t),x.forEach(t),zIo=i(Fa),u2=n(Fa,"P",{});var Uqe=s(u2);QIo=r(Uqe,"The model is set in evaluation mode by default using "),ebe=n(Uqe,"CODE",{});var W9t=s(ebe);WIo=r(W9t,"model.eval()"),W9t.forEach(t),UIo=r(Uqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(Uqe,"CODE",{});var U9t=s(obe);HIo=r(U9t,"model.train()"),U9t.forEach(t),Uqe.forEach(t),JIo=i(Fa),T(p2.$$.fragment,Fa),Fa.forEach(t),Al.forEach(t),tZe=i(m),Fd=n(m,"H2",{class:!0});var _oo=s(Fd);_2=n(_oo,"A",{id:!0,class:!0,href:!0});var H9t=s(_2);rbe=n(H9t,"SPAN",{});var J9t=s(rbe);T(bx.$$.fragment,J9t),J9t.forEach(t),H9t.forEach(t),YIo=i(_oo),tbe=n(_oo,"SPAN",{});var Y9t=s(tbe);KIo=r(Y9t,"AutoModelForPreTraining"),Y9t.forEach(t),_oo.forEach(t),aZe=i(m),Bo=n(m,"DIV",{class:!0});var Ll=s(Bo);T(vx.$$.fragment,Ll),ZIo=i(Ll),Td=n(Ll,"P",{});var yle=s(Td);eNo=r(yle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JX=n(yle,"A",{href:!0});var K9t=s(JX);oNo=r(K9t,"from_pretrained()"),K9t.forEach(t),rNo=r(yle," class method or the "),YX=n(yle,"A",{href:!0});var Z9t=s(YX);tNo=r(Z9t,"from_config()"),Z9t.forEach(t),aNo=r(yle,` class
method.`),yle.forEach(t),nNo=i(Ll),Fx=n(Ll,"P",{});var boo=s(Fx);sNo=r(boo,"This class cannot be instantiated directly using "),abe=n(boo,"CODE",{});var ext=s(abe);lNo=r(ext,"__init__()"),ext.forEach(t),iNo=r(boo," (throws an error)."),boo.forEach(t),dNo=i(Ll),bt=n(Ll,"DIV",{class:!0});var Ny=s(bt);T(Tx.$$.fragment,Ny),cNo=i(Ny),nbe=n(Ny,"P",{});var oxt=s(nbe);mNo=r(oxt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oxt.forEach(t),fNo=i(Ny),Md=n(Ny,"P",{});var xle=s(Md);gNo=r(xle,`Note:
Loading a model from its configuration file does `),sbe=n(xle,"STRONG",{});var rxt=s(sbe);hNo=r(rxt,"not"),rxt.forEach(t),uNo=r(xle,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(xle,"A",{href:!0});var txt=s(KX);pNo=r(txt,"from_pretrained()"),txt.forEach(t),_No=r(xle," to load the model weights."),xle.forEach(t),bNo=i(Ny),T(b2.$$.fragment,Ny),Ny.forEach(t),vNo=i(Ll),eo=n(Ll,"DIV",{class:!0});var Ta=s(eo);T(Mx.$$.fragment,Ta),FNo=i(Ta),lbe=n(Ta,"P",{});var axt=s(lbe);TNo=r(axt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),axt.forEach(t),MNo=i(Ta),Ya=n(Ta,"P",{});var qy=s(Ya);ENo=r(qy,"The model class to instantiate is selected based on the "),ibe=n(qy,"CODE",{});var nxt=s(ibe);CNo=r(nxt,"model_type"),nxt.forEach(t),wNo=r(qy,` property of the config object (either
passed as an argument or loaded from `),dbe=n(qy,"CODE",{});var sxt=s(dbe);ANo=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),LNo=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(qy,"CODE",{});var lxt=s(cbe);yNo=r(lxt,"pretrained_model_name_or_path"),lxt.forEach(t),xNo=r(qy,":"),qy.forEach(t),$No=i(Ta),G=n(Ta,"UL",{});var O=s(G);v2=n(O,"LI",{});var Hqe=s(v2);mbe=n(Hqe,"STRONG",{});var ixt=s(mbe);kNo=r(ixt,"albert"),ixt.forEach(t),SNo=r(Hqe," \u2014 "),ZX=n(Hqe,"A",{href:!0});var dxt=s(ZX);RNo=r(dxt,"AlbertForPreTraining"),dxt.forEach(t),PNo=r(Hqe," (ALBERT model)"),Hqe.forEach(t),BNo=i(O),F2=n(O,"LI",{});var Jqe=s(F2);fbe=n(Jqe,"STRONG",{});var cxt=s(fbe);INo=r(cxt,"bart"),cxt.forEach(t),NNo=r(Jqe," \u2014 "),ez=n(Jqe,"A",{href:!0});var mxt=s(ez);qNo=r(mxt,"BartForConditionalGeneration"),mxt.forEach(t),jNo=r(Jqe," (BART model)"),Jqe.forEach(t),DNo=i(O),T2=n(O,"LI",{});var Yqe=s(T2);gbe=n(Yqe,"STRONG",{});var fxt=s(gbe);GNo=r(fxt,"bert"),fxt.forEach(t),ONo=r(Yqe," \u2014 "),oz=n(Yqe,"A",{href:!0});var gxt=s(oz);VNo=r(gxt,"BertForPreTraining"),gxt.forEach(t),XNo=r(Yqe," (BERT model)"),Yqe.forEach(t),zNo=i(O),M2=n(O,"LI",{});var Kqe=s(M2);hbe=n(Kqe,"STRONG",{});var hxt=s(hbe);QNo=r(hxt,"big_bird"),hxt.forEach(t),WNo=r(Kqe," \u2014 "),rz=n(Kqe,"A",{href:!0});var uxt=s(rz);UNo=r(uxt,"BigBirdForPreTraining"),uxt.forEach(t),HNo=r(Kqe," (BigBird model)"),Kqe.forEach(t),JNo=i(O),E2=n(O,"LI",{});var Zqe=s(E2);ube=n(Zqe,"STRONG",{});var pxt=s(ube);YNo=r(pxt,"bloom"),pxt.forEach(t),KNo=r(Zqe," \u2014 "),tz=n(Zqe,"A",{href:!0});var _xt=s(tz);ZNo=r(_xt,"BloomForCausalLM"),_xt.forEach(t),eqo=r(Zqe," (BLOOM model)"),Zqe.forEach(t),oqo=i(O),C2=n(O,"LI",{});var eje=s(C2);pbe=n(eje,"STRONG",{});var bxt=s(pbe);rqo=r(bxt,"camembert"),bxt.forEach(t),tqo=r(eje," \u2014 "),az=n(eje,"A",{href:!0});var vxt=s(az);aqo=r(vxt,"CamembertForMaskedLM"),vxt.forEach(t),nqo=r(eje," (CamemBERT model)"),eje.forEach(t),sqo=i(O),w2=n(O,"LI",{});var oje=s(w2);_be=n(oje,"STRONG",{});var Fxt=s(_be);lqo=r(Fxt,"ctrl"),Fxt.forEach(t),iqo=r(oje," \u2014 "),nz=n(oje,"A",{href:!0});var Txt=s(nz);dqo=r(Txt,"CTRLLMHeadModel"),Txt.forEach(t),cqo=r(oje," (CTRL model)"),oje.forEach(t),mqo=i(O),A2=n(O,"LI",{});var rje=s(A2);bbe=n(rje,"STRONG",{});var Mxt=s(bbe);fqo=r(Mxt,"data2vec-text"),Mxt.forEach(t),gqo=r(rje," \u2014 "),sz=n(rje,"A",{href:!0});var Ext=s(sz);hqo=r(Ext,"Data2VecTextForMaskedLM"),Ext.forEach(t),uqo=r(rje," (Data2VecText model)"),rje.forEach(t),pqo=i(O),L2=n(O,"LI",{});var tje=s(L2);vbe=n(tje,"STRONG",{});var Cxt=s(vbe);_qo=r(Cxt,"deberta"),Cxt.forEach(t),bqo=r(tje," \u2014 "),lz=n(tje,"A",{href:!0});var wxt=s(lz);vqo=r(wxt,"DebertaForMaskedLM"),wxt.forEach(t),Fqo=r(tje," (DeBERTa model)"),tje.forEach(t),Tqo=i(O),y2=n(O,"LI",{});var aje=s(y2);Fbe=n(aje,"STRONG",{});var Axt=s(Fbe);Mqo=r(Axt,"deberta-v2"),Axt.forEach(t),Eqo=r(aje," \u2014 "),iz=n(aje,"A",{href:!0});var Lxt=s(iz);Cqo=r(Lxt,"DebertaV2ForMaskedLM"),Lxt.forEach(t),wqo=r(aje," (DeBERTa-v2 model)"),aje.forEach(t),Aqo=i(O),x2=n(O,"LI",{});var nje=s(x2);Tbe=n(nje,"STRONG",{});var yxt=s(Tbe);Lqo=r(yxt,"distilbert"),yxt.forEach(t),yqo=r(nje," \u2014 "),dz=n(nje,"A",{href:!0});var xxt=s(dz);xqo=r(xxt,"DistilBertForMaskedLM"),xxt.forEach(t),$qo=r(nje," (DistilBERT model)"),nje.forEach(t),kqo=i(O),$2=n(O,"LI",{});var sje=s($2);Mbe=n(sje,"STRONG",{});var $xt=s(Mbe);Sqo=r($xt,"electra"),$xt.forEach(t),Rqo=r(sje," \u2014 "),cz=n(sje,"A",{href:!0});var kxt=s(cz);Pqo=r(kxt,"ElectraForPreTraining"),kxt.forEach(t),Bqo=r(sje," (ELECTRA model)"),sje.forEach(t),Iqo=i(O),k2=n(O,"LI",{});var lje=s(k2);Ebe=n(lje,"STRONG",{});var Sxt=s(Ebe);Nqo=r(Sxt,"ernie"),Sxt.forEach(t),qqo=r(lje," \u2014 "),mz=n(lje,"A",{href:!0});var Rxt=s(mz);jqo=r(Rxt,"ErnieForPreTraining"),Rxt.forEach(t),Dqo=r(lje," (ERNIE model)"),lje.forEach(t),Gqo=i(O),S2=n(O,"LI",{});var ije=s(S2);Cbe=n(ije,"STRONG",{});var Pxt=s(Cbe);Oqo=r(Pxt,"flaubert"),Pxt.forEach(t),Vqo=r(ije," \u2014 "),fz=n(ije,"A",{href:!0});var Bxt=s(fz);Xqo=r(Bxt,"FlaubertWithLMHeadModel"),Bxt.forEach(t),zqo=r(ije," (FlauBERT model)"),ije.forEach(t),Qqo=i(O),R2=n(O,"LI",{});var dje=s(R2);wbe=n(dje,"STRONG",{});var Ixt=s(wbe);Wqo=r(Ixt,"flava"),Ixt.forEach(t),Uqo=r(dje," \u2014 "),gz=n(dje,"A",{href:!0});var Nxt=s(gz);Hqo=r(Nxt,"FlavaForPreTraining"),Nxt.forEach(t),Jqo=r(dje," (FLAVA model)"),dje.forEach(t),Yqo=i(O),P2=n(O,"LI",{});var cje=s(P2);Abe=n(cje,"STRONG",{});var qxt=s(Abe);Kqo=r(qxt,"fnet"),qxt.forEach(t),Zqo=r(cje," \u2014 "),hz=n(cje,"A",{href:!0});var jxt=s(hz);ejo=r(jxt,"FNetForPreTraining"),jxt.forEach(t),ojo=r(cje," (FNet model)"),cje.forEach(t),rjo=i(O),B2=n(O,"LI",{});var mje=s(B2);Lbe=n(mje,"STRONG",{});var Dxt=s(Lbe);tjo=r(Dxt,"fsmt"),Dxt.forEach(t),ajo=r(mje," \u2014 "),uz=n(mje,"A",{href:!0});var Gxt=s(uz);njo=r(Gxt,"FSMTForConditionalGeneration"),Gxt.forEach(t),sjo=r(mje," (FairSeq Machine-Translation model)"),mje.forEach(t),ljo=i(O),I2=n(O,"LI",{});var fje=s(I2);ybe=n(fje,"STRONG",{});var Oxt=s(ybe);ijo=r(Oxt,"funnel"),Oxt.forEach(t),djo=r(fje," \u2014 "),pz=n(fje,"A",{href:!0});var Vxt=s(pz);cjo=r(Vxt,"FunnelForPreTraining"),Vxt.forEach(t),mjo=r(fje," (Funnel Transformer model)"),fje.forEach(t),fjo=i(O),N2=n(O,"LI",{});var gje=s(N2);xbe=n(gje,"STRONG",{});var Xxt=s(xbe);gjo=r(Xxt,"gpt2"),Xxt.forEach(t),hjo=r(gje," \u2014 "),_z=n(gje,"A",{href:!0});var zxt=s(_z);ujo=r(zxt,"GPT2LMHeadModel"),zxt.forEach(t),pjo=r(gje," (OpenAI GPT-2 model)"),gje.forEach(t),_jo=i(O),q2=n(O,"LI",{});var hje=s(q2);$be=n(hje,"STRONG",{});var Qxt=s($be);bjo=r(Qxt,"ibert"),Qxt.forEach(t),vjo=r(hje," \u2014 "),bz=n(hje,"A",{href:!0});var Wxt=s(bz);Fjo=r(Wxt,"IBertForMaskedLM"),Wxt.forEach(t),Tjo=r(hje," (I-BERT model)"),hje.forEach(t),Mjo=i(O),j2=n(O,"LI",{});var uje=s(j2);kbe=n(uje,"STRONG",{});var Uxt=s(kbe);Ejo=r(Uxt,"layoutlm"),Uxt.forEach(t),Cjo=r(uje," \u2014 "),vz=n(uje,"A",{href:!0});var Hxt=s(vz);wjo=r(Hxt,"LayoutLMForMaskedLM"),Hxt.forEach(t),Ajo=r(uje," (LayoutLM model)"),uje.forEach(t),Ljo=i(O),D2=n(O,"LI",{});var pje=s(D2);Sbe=n(pje,"STRONG",{});var Jxt=s(Sbe);yjo=r(Jxt,"longformer"),Jxt.forEach(t),xjo=r(pje," \u2014 "),Fz=n(pje,"A",{href:!0});var Yxt=s(Fz);$jo=r(Yxt,"LongformerForMaskedLM"),Yxt.forEach(t),kjo=r(pje," (Longformer model)"),pje.forEach(t),Sjo=i(O),G2=n(O,"LI",{});var _je=s(G2);Rbe=n(_je,"STRONG",{});var Kxt=s(Rbe);Rjo=r(Kxt,"luke"),Kxt.forEach(t),Pjo=r(_je," \u2014 "),Tz=n(_je,"A",{href:!0});var Zxt=s(Tz);Bjo=r(Zxt,"LukeForMaskedLM"),Zxt.forEach(t),Ijo=r(_je," (LUKE model)"),_je.forEach(t),Njo=i(O),O2=n(O,"LI",{});var bje=s(O2);Pbe=n(bje,"STRONG",{});var e$t=s(Pbe);qjo=r(e$t,"lxmert"),e$t.forEach(t),jjo=r(bje," \u2014 "),Mz=n(bje,"A",{href:!0});var o$t=s(Mz);Djo=r(o$t,"LxmertForPreTraining"),o$t.forEach(t),Gjo=r(bje," (LXMERT model)"),bje.forEach(t),Ojo=i(O),V2=n(O,"LI",{});var vje=s(V2);Bbe=n(vje,"STRONG",{});var r$t=s(Bbe);Vjo=r(r$t,"megatron-bert"),r$t.forEach(t),Xjo=r(vje," \u2014 "),Ez=n(vje,"A",{href:!0});var t$t=s(Ez);zjo=r(t$t,"MegatronBertForPreTraining"),t$t.forEach(t),Qjo=r(vje," (Megatron-BERT model)"),vje.forEach(t),Wjo=i(O),X2=n(O,"LI",{});var Fje=s(X2);Ibe=n(Fje,"STRONG",{});var a$t=s(Ibe);Ujo=r(a$t,"mobilebert"),a$t.forEach(t),Hjo=r(Fje," \u2014 "),Cz=n(Fje,"A",{href:!0});var n$t=s(Cz);Jjo=r(n$t,"MobileBertForPreTraining"),n$t.forEach(t),Yjo=r(Fje," (MobileBERT model)"),Fje.forEach(t),Kjo=i(O),z2=n(O,"LI",{});var Tje=s(z2);Nbe=n(Tje,"STRONG",{});var s$t=s(Nbe);Zjo=r(s$t,"mpnet"),s$t.forEach(t),eDo=r(Tje," \u2014 "),wz=n(Tje,"A",{href:!0});var l$t=s(wz);oDo=r(l$t,"MPNetForMaskedLM"),l$t.forEach(t),rDo=r(Tje," (MPNet model)"),Tje.forEach(t),tDo=i(O),Q2=n(O,"LI",{});var Mje=s(Q2);qbe=n(Mje,"STRONG",{});var i$t=s(qbe);aDo=r(i$t,"mvp"),i$t.forEach(t),nDo=r(Mje," \u2014 "),Az=n(Mje,"A",{href:!0});var d$t=s(Az);sDo=r(d$t,"MvpForConditionalGeneration"),d$t.forEach(t),lDo=r(Mje," (MVP model)"),Mje.forEach(t),iDo=i(O),W2=n(O,"LI",{});var Eje=s(W2);jbe=n(Eje,"STRONG",{});var c$t=s(jbe);dDo=r(c$t,"nezha"),c$t.forEach(t),cDo=r(Eje," \u2014 "),Lz=n(Eje,"A",{href:!0});var m$t=s(Lz);mDo=r(m$t,"NezhaForPreTraining"),m$t.forEach(t),fDo=r(Eje," (Nezha model)"),Eje.forEach(t),gDo=i(O),U2=n(O,"LI",{});var Cje=s(U2);Dbe=n(Cje,"STRONG",{});var f$t=s(Dbe);hDo=r(f$t,"openai-gpt"),f$t.forEach(t),uDo=r(Cje," \u2014 "),yz=n(Cje,"A",{href:!0});var g$t=s(yz);pDo=r(g$t,"OpenAIGPTLMHeadModel"),g$t.forEach(t),_Do=r(Cje," (OpenAI GPT model)"),Cje.forEach(t),bDo=i(O),H2=n(O,"LI",{});var wje=s(H2);Gbe=n(wje,"STRONG",{});var h$t=s(Gbe);vDo=r(h$t,"retribert"),h$t.forEach(t),FDo=r(wje," \u2014 "),xz=n(wje,"A",{href:!0});var u$t=s(xz);TDo=r(u$t,"RetriBertModel"),u$t.forEach(t),MDo=r(wje," (RetriBERT model)"),wje.forEach(t),EDo=i(O),J2=n(O,"LI",{});var Aje=s(J2);Obe=n(Aje,"STRONG",{});var p$t=s(Obe);CDo=r(p$t,"roberta"),p$t.forEach(t),wDo=r(Aje," \u2014 "),$z=n(Aje,"A",{href:!0});var _$t=s($z);ADo=r(_$t,"RobertaForMaskedLM"),_$t.forEach(t),LDo=r(Aje," (RoBERTa model)"),Aje.forEach(t),yDo=i(O),Y2=n(O,"LI",{});var Lje=s(Y2);Vbe=n(Lje,"STRONG",{});var b$t=s(Vbe);xDo=r(b$t,"splinter"),b$t.forEach(t),$Do=r(Lje," \u2014 "),kz=n(Lje,"A",{href:!0});var v$t=s(kz);kDo=r(v$t,"SplinterForPreTraining"),v$t.forEach(t),SDo=r(Lje," (Splinter model)"),Lje.forEach(t),RDo=i(O),K2=n(O,"LI",{});var yje=s(K2);Xbe=n(yje,"STRONG",{});var F$t=s(Xbe);PDo=r(F$t,"squeezebert"),F$t.forEach(t),BDo=r(yje," \u2014 "),Sz=n(yje,"A",{href:!0});var T$t=s(Sz);IDo=r(T$t,"SqueezeBertForMaskedLM"),T$t.forEach(t),NDo=r(yje," (SqueezeBERT model)"),yje.forEach(t),qDo=i(O),Z2=n(O,"LI",{});var xje=s(Z2);zbe=n(xje,"STRONG",{});var M$t=s(zbe);jDo=r(M$t,"t5"),M$t.forEach(t),DDo=r(xje," \u2014 "),Rz=n(xje,"A",{href:!0});var E$t=s(Rz);GDo=r(E$t,"T5ForConditionalGeneration"),E$t.forEach(t),ODo=r(xje," (T5 model)"),xje.forEach(t),VDo=i(O),e1=n(O,"LI",{});var $je=s(e1);Qbe=n($je,"STRONG",{});var C$t=s(Qbe);XDo=r(C$t,"tapas"),C$t.forEach(t),zDo=r($je," \u2014 "),Pz=n($je,"A",{href:!0});var w$t=s(Pz);QDo=r(w$t,"TapasForMaskedLM"),w$t.forEach(t),WDo=r($je," (TAPAS model)"),$je.forEach(t),UDo=i(O),o1=n(O,"LI",{});var kje=s(o1);Wbe=n(kje,"STRONG",{});var A$t=s(Wbe);HDo=r(A$t,"transfo-xl"),A$t.forEach(t),JDo=r(kje," \u2014 "),Bz=n(kje,"A",{href:!0});var L$t=s(Bz);YDo=r(L$t,"TransfoXLLMHeadModel"),L$t.forEach(t),KDo=r(kje," (Transformer-XL model)"),kje.forEach(t),ZDo=i(O),r1=n(O,"LI",{});var Sje=s(r1);Ube=n(Sje,"STRONG",{});var y$t=s(Ube);eGo=r(y$t,"unispeech"),y$t.forEach(t),oGo=r(Sje," \u2014 "),Iz=n(Sje,"A",{href:!0});var x$t=s(Iz);rGo=r(x$t,"UniSpeechForPreTraining"),x$t.forEach(t),tGo=r(Sje," (UniSpeech model)"),Sje.forEach(t),aGo=i(O),t1=n(O,"LI",{});var Rje=s(t1);Hbe=n(Rje,"STRONG",{});var $$t=s(Hbe);nGo=r($$t,"unispeech-sat"),$$t.forEach(t),sGo=r(Rje," \u2014 "),Nz=n(Rje,"A",{href:!0});var k$t=s(Nz);lGo=r(k$t,"UniSpeechSatForPreTraining"),k$t.forEach(t),iGo=r(Rje," (UniSpeechSat model)"),Rje.forEach(t),dGo=i(O),a1=n(O,"LI",{});var Pje=s(a1);Jbe=n(Pje,"STRONG",{});var S$t=s(Jbe);cGo=r(S$t,"videomae"),S$t.forEach(t),mGo=r(Pje," \u2014 "),qz=n(Pje,"A",{href:!0});var R$t=s(qz);fGo=r(R$t,"VideoMAEForPreTraining"),R$t.forEach(t),gGo=r(Pje," (VideoMAE model)"),Pje.forEach(t),hGo=i(O),n1=n(O,"LI",{});var Bje=s(n1);Ybe=n(Bje,"STRONG",{});var P$t=s(Ybe);uGo=r(P$t,"visual_bert"),P$t.forEach(t),pGo=r(Bje," \u2014 "),jz=n(Bje,"A",{href:!0});var B$t=s(jz);_Go=r(B$t,"VisualBertForPreTraining"),B$t.forEach(t),bGo=r(Bje," (VisualBERT model)"),Bje.forEach(t),vGo=i(O),s1=n(O,"LI",{});var Ije=s(s1);Kbe=n(Ije,"STRONG",{});var I$t=s(Kbe);FGo=r(I$t,"vit_mae"),I$t.forEach(t),TGo=r(Ije," \u2014 "),Dz=n(Ije,"A",{href:!0});var N$t=s(Dz);MGo=r(N$t,"ViTMAEForPreTraining"),N$t.forEach(t),EGo=r(Ije," (ViTMAE model)"),Ije.forEach(t),CGo=i(O),l1=n(O,"LI",{});var Nje=s(l1);Zbe=n(Nje,"STRONG",{});var q$t=s(Zbe);wGo=r(q$t,"wav2vec2"),q$t.forEach(t),AGo=r(Nje," \u2014 "),Gz=n(Nje,"A",{href:!0});var j$t=s(Gz);LGo=r(j$t,"Wav2Vec2ForPreTraining"),j$t.forEach(t),yGo=r(Nje," (Wav2Vec2 model)"),Nje.forEach(t),xGo=i(O),i1=n(O,"LI",{});var qje=s(i1);e2e=n(qje,"STRONG",{});var D$t=s(e2e);$Go=r(D$t,"wav2vec2-conformer"),D$t.forEach(t),kGo=r(qje," \u2014 "),Oz=n(qje,"A",{href:!0});var G$t=s(Oz);SGo=r(G$t,"Wav2Vec2ConformerForPreTraining"),G$t.forEach(t),RGo=r(qje," (Wav2Vec2-Conformer model)"),qje.forEach(t),PGo=i(O),d1=n(O,"LI",{});var jje=s(d1);o2e=n(jje,"STRONG",{});var O$t=s(o2e);BGo=r(O$t,"xlm"),O$t.forEach(t),IGo=r(jje," \u2014 "),Vz=n(jje,"A",{href:!0});var V$t=s(Vz);NGo=r(V$t,"XLMWithLMHeadModel"),V$t.forEach(t),qGo=r(jje," (XLM model)"),jje.forEach(t),jGo=i(O),c1=n(O,"LI",{});var Dje=s(c1);r2e=n(Dje,"STRONG",{});var X$t=s(r2e);DGo=r(X$t,"xlm-roberta"),X$t.forEach(t),GGo=r(Dje," \u2014 "),Xz=n(Dje,"A",{href:!0});var z$t=s(Xz);OGo=r(z$t,"XLMRobertaForMaskedLM"),z$t.forEach(t),VGo=r(Dje," (XLM-RoBERTa model)"),Dje.forEach(t),XGo=i(O),m1=n(O,"LI",{});var Gje=s(m1);t2e=n(Gje,"STRONG",{});var Q$t=s(t2e);zGo=r(Q$t,"xlm-roberta-xl"),Q$t.forEach(t),QGo=r(Gje," \u2014 "),zz=n(Gje,"A",{href:!0});var W$t=s(zz);WGo=r(W$t,"XLMRobertaXLForMaskedLM"),W$t.forEach(t),UGo=r(Gje," (XLM-RoBERTa-XL model)"),Gje.forEach(t),HGo=i(O),f1=n(O,"LI",{});var Oje=s(f1);a2e=n(Oje,"STRONG",{});var U$t=s(a2e);JGo=r(U$t,"xlnet"),U$t.forEach(t),YGo=r(Oje," \u2014 "),Qz=n(Oje,"A",{href:!0});var H$t=s(Qz);KGo=r(H$t,"XLNetLMHeadModel"),H$t.forEach(t),ZGo=r(Oje," (XLNet model)"),Oje.forEach(t),O.forEach(t),eOo=i(Ta),g1=n(Ta,"P",{});var Vje=s(g1);oOo=r(Vje,"The model is set in evaluation mode by default using "),n2e=n(Vje,"CODE",{});var J$t=s(n2e);rOo=r(J$t,"model.eval()"),J$t.forEach(t),tOo=r(Vje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=n(Vje,"CODE",{});var Y$t=s(s2e);aOo=r(Y$t,"model.train()"),Y$t.forEach(t),Vje.forEach(t),nOo=i(Ta),T(h1.$$.fragment,Ta),Ta.forEach(t),Ll.forEach(t),nZe=i(m),Ed=n(m,"H2",{class:!0});var voo=s(Ed);u1=n(voo,"A",{id:!0,class:!0,href:!0});var K$t=s(u1);l2e=n(K$t,"SPAN",{});var Z$t=s(l2e);T(Ex.$$.fragment,Z$t),Z$t.forEach(t),K$t.forEach(t),sOo=i(voo),i2e=n(voo,"SPAN",{});var ekt=s(i2e);lOo=r(ekt,"AutoModelForCausalLM"),ekt.forEach(t),voo.forEach(t),sZe=i(m),Io=n(m,"DIV",{class:!0});var yl=s(Io);T(Cx.$$.fragment,yl),iOo=i(yl),Cd=n(yl,"P",{});var $le=s(Cd);dOo=r($le,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wz=n($le,"A",{href:!0});var okt=s(Wz);cOo=r(okt,"from_pretrained()"),okt.forEach(t),mOo=r($le," class method or the "),Uz=n($le,"A",{href:!0});var rkt=s(Uz);fOo=r(rkt,"from_config()"),rkt.forEach(t),gOo=r($le,` class
method.`),$le.forEach(t),hOo=i(yl),wx=n(yl,"P",{});var Foo=s(wx);uOo=r(Foo,"This class cannot be instantiated directly using "),d2e=n(Foo,"CODE",{});var tkt=s(d2e);pOo=r(tkt,"__init__()"),tkt.forEach(t),_Oo=r(Foo," (throws an error)."),Foo.forEach(t),bOo=i(yl),vt=n(yl,"DIV",{class:!0});var jy=s(vt);T(Ax.$$.fragment,jy),vOo=i(jy),c2e=n(jy,"P",{});var akt=s(c2e);FOo=r(akt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),akt.forEach(t),TOo=i(jy),wd=n(jy,"P",{});var kle=s(wd);MOo=r(kle,`Note:
Loading a model from its configuration file does `),m2e=n(kle,"STRONG",{});var nkt=s(m2e);EOo=r(nkt,"not"),nkt.forEach(t),COo=r(kle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(kle,"A",{href:!0});var skt=s(Hz);wOo=r(skt,"from_pretrained()"),skt.forEach(t),AOo=r(kle," to load the model weights."),kle.forEach(t),LOo=i(jy),T(p1.$$.fragment,jy),jy.forEach(t),yOo=i(yl),oo=n(yl,"DIV",{class:!0});var Ma=s(oo);T(Lx.$$.fragment,Ma),xOo=i(Ma),f2e=n(Ma,"P",{});var lkt=s(f2e);$Oo=r(lkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lkt.forEach(t),kOo=i(Ma),Ka=n(Ma,"P",{});var Dy=s(Ka);SOo=r(Dy,"The model class to instantiate is selected based on the "),g2e=n(Dy,"CODE",{});var ikt=s(g2e);ROo=r(ikt,"model_type"),ikt.forEach(t),POo=r(Dy,` property of the config object (either
passed as an argument or loaded from `),h2e=n(Dy,"CODE",{});var dkt=s(h2e);BOo=r(dkt,"pretrained_model_name_or_path"),dkt.forEach(t),IOo=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(Dy,"CODE",{});var ckt=s(u2e);NOo=r(ckt,"pretrained_model_name_or_path"),ckt.forEach(t),qOo=r(Dy,":"),Dy.forEach(t),jOo=i(Ma),Q=n(Ma,"UL",{});var U=s(Q);_1=n(U,"LI",{});var Xje=s(_1);p2e=n(Xje,"STRONG",{});var mkt=s(p2e);DOo=r(mkt,"bart"),mkt.forEach(t),GOo=r(Xje," \u2014 "),Jz=n(Xje,"A",{href:!0});var fkt=s(Jz);OOo=r(fkt,"BartForCausalLM"),fkt.forEach(t),VOo=r(Xje," (BART model)"),Xje.forEach(t),XOo=i(U),b1=n(U,"LI",{});var zje=s(b1);_2e=n(zje,"STRONG",{});var gkt=s(_2e);zOo=r(gkt,"bert"),gkt.forEach(t),QOo=r(zje," \u2014 "),Yz=n(zje,"A",{href:!0});var hkt=s(Yz);WOo=r(hkt,"BertLMHeadModel"),hkt.forEach(t),UOo=r(zje," (BERT model)"),zje.forEach(t),HOo=i(U),v1=n(U,"LI",{});var Qje=s(v1);b2e=n(Qje,"STRONG",{});var ukt=s(b2e);JOo=r(ukt,"bert-generation"),ukt.forEach(t),YOo=r(Qje," \u2014 "),Kz=n(Qje,"A",{href:!0});var pkt=s(Kz);KOo=r(pkt,"BertGenerationDecoder"),pkt.forEach(t),ZOo=r(Qje," (Bert Generation model)"),Qje.forEach(t),eVo=i(U),F1=n(U,"LI",{});var Wje=s(F1);v2e=n(Wje,"STRONG",{});var _kt=s(v2e);oVo=r(_kt,"big_bird"),_kt.forEach(t),rVo=r(Wje," \u2014 "),Zz=n(Wje,"A",{href:!0});var bkt=s(Zz);tVo=r(bkt,"BigBirdForCausalLM"),bkt.forEach(t),aVo=r(Wje," (BigBird model)"),Wje.forEach(t),nVo=i(U),T1=n(U,"LI",{});var Uje=s(T1);F2e=n(Uje,"STRONG",{});var vkt=s(F2e);sVo=r(vkt,"bigbird_pegasus"),vkt.forEach(t),lVo=r(Uje," \u2014 "),eQ=n(Uje,"A",{href:!0});var Fkt=s(eQ);iVo=r(Fkt,"BigBirdPegasusForCausalLM"),Fkt.forEach(t),dVo=r(Uje," (BigBird-Pegasus model)"),Uje.forEach(t),cVo=i(U),M1=n(U,"LI",{});var Hje=s(M1);T2e=n(Hje,"STRONG",{});var Tkt=s(T2e);mVo=r(Tkt,"blenderbot"),Tkt.forEach(t),fVo=r(Hje," \u2014 "),oQ=n(Hje,"A",{href:!0});var Mkt=s(oQ);gVo=r(Mkt,"BlenderbotForCausalLM"),Mkt.forEach(t),hVo=r(Hje," (Blenderbot model)"),Hje.forEach(t),uVo=i(U),E1=n(U,"LI",{});var Jje=s(E1);M2e=n(Jje,"STRONG",{});var Ekt=s(M2e);pVo=r(Ekt,"blenderbot-small"),Ekt.forEach(t),_Vo=r(Jje," \u2014 "),rQ=n(Jje,"A",{href:!0});var Ckt=s(rQ);bVo=r(Ckt,"BlenderbotSmallForCausalLM"),Ckt.forEach(t),vVo=r(Jje," (BlenderbotSmall model)"),Jje.forEach(t),FVo=i(U),C1=n(U,"LI",{});var Yje=s(C1);E2e=n(Yje,"STRONG",{});var wkt=s(E2e);TVo=r(wkt,"bloom"),wkt.forEach(t),MVo=r(Yje," \u2014 "),tQ=n(Yje,"A",{href:!0});var Akt=s(tQ);EVo=r(Akt,"BloomForCausalLM"),Akt.forEach(t),CVo=r(Yje," (BLOOM model)"),Yje.forEach(t),wVo=i(U),w1=n(U,"LI",{});var Kje=s(w1);C2e=n(Kje,"STRONG",{});var Lkt=s(C2e);AVo=r(Lkt,"camembert"),Lkt.forEach(t),LVo=r(Kje," \u2014 "),aQ=n(Kje,"A",{href:!0});var ykt=s(aQ);yVo=r(ykt,"CamembertForCausalLM"),ykt.forEach(t),xVo=r(Kje," (CamemBERT model)"),Kje.forEach(t),$Vo=i(U),A1=n(U,"LI",{});var Zje=s(A1);w2e=n(Zje,"STRONG",{});var xkt=s(w2e);kVo=r(xkt,"codegen"),xkt.forEach(t),SVo=r(Zje," \u2014 "),nQ=n(Zje,"A",{href:!0});var $kt=s(nQ);RVo=r($kt,"CodeGenForCausalLM"),$kt.forEach(t),PVo=r(Zje," (CodeGen model)"),Zje.forEach(t),BVo=i(U),L1=n(U,"LI",{});var eDe=s(L1);A2e=n(eDe,"STRONG",{});var kkt=s(A2e);IVo=r(kkt,"ctrl"),kkt.forEach(t),NVo=r(eDe," \u2014 "),sQ=n(eDe,"A",{href:!0});var Skt=s(sQ);qVo=r(Skt,"CTRLLMHeadModel"),Skt.forEach(t),jVo=r(eDe," (CTRL model)"),eDe.forEach(t),DVo=i(U),y1=n(U,"LI",{});var oDe=s(y1);L2e=n(oDe,"STRONG",{});var Rkt=s(L2e);GVo=r(Rkt,"data2vec-text"),Rkt.forEach(t),OVo=r(oDe," \u2014 "),lQ=n(oDe,"A",{href:!0});var Pkt=s(lQ);VVo=r(Pkt,"Data2VecTextForCausalLM"),Pkt.forEach(t),XVo=r(oDe," (Data2VecText model)"),oDe.forEach(t),zVo=i(U),x1=n(U,"LI",{});var rDe=s(x1);y2e=n(rDe,"STRONG",{});var Bkt=s(y2e);QVo=r(Bkt,"electra"),Bkt.forEach(t),WVo=r(rDe," \u2014 "),iQ=n(rDe,"A",{href:!0});var Ikt=s(iQ);UVo=r(Ikt,"ElectraForCausalLM"),Ikt.forEach(t),HVo=r(rDe," (ELECTRA model)"),rDe.forEach(t),JVo=i(U),$1=n(U,"LI",{});var tDe=s($1);x2e=n(tDe,"STRONG",{});var Nkt=s(x2e);YVo=r(Nkt,"ernie"),Nkt.forEach(t),KVo=r(tDe," \u2014 "),dQ=n(tDe,"A",{href:!0});var qkt=s(dQ);ZVo=r(qkt,"ErnieForCausalLM"),qkt.forEach(t),eXo=r(tDe," (ERNIE model)"),tDe.forEach(t),oXo=i(U),k1=n(U,"LI",{});var aDe=s(k1);$2e=n(aDe,"STRONG",{});var jkt=s($2e);rXo=r(jkt,"gpt2"),jkt.forEach(t),tXo=r(aDe," \u2014 "),cQ=n(aDe,"A",{href:!0});var Dkt=s(cQ);aXo=r(Dkt,"GPT2LMHeadModel"),Dkt.forEach(t),nXo=r(aDe," (OpenAI GPT-2 model)"),aDe.forEach(t),sXo=i(U),S1=n(U,"LI",{});var nDe=s(S1);k2e=n(nDe,"STRONG",{});var Gkt=s(k2e);lXo=r(Gkt,"gpt_neo"),Gkt.forEach(t),iXo=r(nDe," \u2014 "),mQ=n(nDe,"A",{href:!0});var Okt=s(mQ);dXo=r(Okt,"GPTNeoForCausalLM"),Okt.forEach(t),cXo=r(nDe," (GPT Neo model)"),nDe.forEach(t),mXo=i(U),R1=n(U,"LI",{});var sDe=s(R1);S2e=n(sDe,"STRONG",{});var Vkt=s(S2e);fXo=r(Vkt,"gpt_neox"),Vkt.forEach(t),gXo=r(sDe," \u2014 "),fQ=n(sDe,"A",{href:!0});var Xkt=s(fQ);hXo=r(Xkt,"GPTNeoXForCausalLM"),Xkt.forEach(t),uXo=r(sDe," (GPT NeoX model)"),sDe.forEach(t),pXo=i(U),P1=n(U,"LI",{});var lDe=s(P1);R2e=n(lDe,"STRONG",{});var zkt=s(R2e);_Xo=r(zkt,"gpt_neox_japanese"),zkt.forEach(t),bXo=r(lDe," \u2014 "),gQ=n(lDe,"A",{href:!0});var Qkt=s(gQ);vXo=r(Qkt,"GPTNeoXJapaneseForCausalLM"),Qkt.forEach(t),FXo=r(lDe," (GPT NeoX Japanese model)"),lDe.forEach(t),TXo=i(U),B1=n(U,"LI",{});var iDe=s(B1);P2e=n(iDe,"STRONG",{});var Wkt=s(P2e);MXo=r(Wkt,"gptj"),Wkt.forEach(t),EXo=r(iDe," \u2014 "),hQ=n(iDe,"A",{href:!0});var Ukt=s(hQ);CXo=r(Ukt,"GPTJForCausalLM"),Ukt.forEach(t),wXo=r(iDe," (GPT-J model)"),iDe.forEach(t),AXo=i(U),I1=n(U,"LI",{});var dDe=s(I1);B2e=n(dDe,"STRONG",{});var Hkt=s(B2e);LXo=r(Hkt,"marian"),Hkt.forEach(t),yXo=r(dDe," \u2014 "),uQ=n(dDe,"A",{href:!0});var Jkt=s(uQ);xXo=r(Jkt,"MarianForCausalLM"),Jkt.forEach(t),$Xo=r(dDe," (Marian model)"),dDe.forEach(t),kXo=i(U),N1=n(U,"LI",{});var cDe=s(N1);I2e=n(cDe,"STRONG",{});var Ykt=s(I2e);SXo=r(Ykt,"mbart"),Ykt.forEach(t),RXo=r(cDe," \u2014 "),pQ=n(cDe,"A",{href:!0});var Kkt=s(pQ);PXo=r(Kkt,"MBartForCausalLM"),Kkt.forEach(t),BXo=r(cDe," (mBART model)"),cDe.forEach(t),IXo=i(U),q1=n(U,"LI",{});var mDe=s(q1);N2e=n(mDe,"STRONG",{});var Zkt=s(N2e);NXo=r(Zkt,"megatron-bert"),Zkt.forEach(t),qXo=r(mDe," \u2014 "),_Q=n(mDe,"A",{href:!0});var eSt=s(_Q);jXo=r(eSt,"MegatronBertForCausalLM"),eSt.forEach(t),DXo=r(mDe," (Megatron-BERT model)"),mDe.forEach(t),GXo=i(U),j1=n(U,"LI",{});var fDe=s(j1);q2e=n(fDe,"STRONG",{});var oSt=s(q2e);OXo=r(oSt,"mvp"),oSt.forEach(t),VXo=r(fDe," \u2014 "),bQ=n(fDe,"A",{href:!0});var rSt=s(bQ);XXo=r(rSt,"MvpForCausalLM"),rSt.forEach(t),zXo=r(fDe," (MVP model)"),fDe.forEach(t),QXo=i(U),D1=n(U,"LI",{});var gDe=s(D1);j2e=n(gDe,"STRONG",{});var tSt=s(j2e);WXo=r(tSt,"openai-gpt"),tSt.forEach(t),UXo=r(gDe," \u2014 "),vQ=n(gDe,"A",{href:!0});var aSt=s(vQ);HXo=r(aSt,"OpenAIGPTLMHeadModel"),aSt.forEach(t),JXo=r(gDe," (OpenAI GPT model)"),gDe.forEach(t),YXo=i(U),G1=n(U,"LI",{});var hDe=s(G1);D2e=n(hDe,"STRONG",{});var nSt=s(D2e);KXo=r(nSt,"opt"),nSt.forEach(t),ZXo=r(hDe," \u2014 "),FQ=n(hDe,"A",{href:!0});var sSt=s(FQ);ezo=r(sSt,"OPTForCausalLM"),sSt.forEach(t),ozo=r(hDe," (OPT model)"),hDe.forEach(t),rzo=i(U),O1=n(U,"LI",{});var uDe=s(O1);G2e=n(uDe,"STRONG",{});var lSt=s(G2e);tzo=r(lSt,"pegasus"),lSt.forEach(t),azo=r(uDe," \u2014 "),TQ=n(uDe,"A",{href:!0});var iSt=s(TQ);nzo=r(iSt,"PegasusForCausalLM"),iSt.forEach(t),szo=r(uDe," (Pegasus model)"),uDe.forEach(t),lzo=i(U),V1=n(U,"LI",{});var pDe=s(V1);O2e=n(pDe,"STRONG",{});var dSt=s(O2e);izo=r(dSt,"plbart"),dSt.forEach(t),dzo=r(pDe," \u2014 "),MQ=n(pDe,"A",{href:!0});var cSt=s(MQ);czo=r(cSt,"PLBartForCausalLM"),cSt.forEach(t),mzo=r(pDe," (PLBart model)"),pDe.forEach(t),fzo=i(U),X1=n(U,"LI",{});var _De=s(X1);V2e=n(_De,"STRONG",{});var mSt=s(V2e);gzo=r(mSt,"prophetnet"),mSt.forEach(t),hzo=r(_De," \u2014 "),EQ=n(_De,"A",{href:!0});var fSt=s(EQ);uzo=r(fSt,"ProphetNetForCausalLM"),fSt.forEach(t),pzo=r(_De," (ProphetNet model)"),_De.forEach(t),_zo=i(U),z1=n(U,"LI",{});var bDe=s(z1);X2e=n(bDe,"STRONG",{});var gSt=s(X2e);bzo=r(gSt,"qdqbert"),gSt.forEach(t),vzo=r(bDe," \u2014 "),CQ=n(bDe,"A",{href:!0});var hSt=s(CQ);Fzo=r(hSt,"QDQBertLMHeadModel"),hSt.forEach(t),Tzo=r(bDe," (QDQBert model)"),bDe.forEach(t),Mzo=i(U),Q1=n(U,"LI",{});var vDe=s(Q1);z2e=n(vDe,"STRONG",{});var uSt=s(z2e);Ezo=r(uSt,"reformer"),uSt.forEach(t),Czo=r(vDe," \u2014 "),wQ=n(vDe,"A",{href:!0});var pSt=s(wQ);wzo=r(pSt,"ReformerModelWithLMHead"),pSt.forEach(t),Azo=r(vDe," (Reformer model)"),vDe.forEach(t),Lzo=i(U),W1=n(U,"LI",{});var FDe=s(W1);Q2e=n(FDe,"STRONG",{});var _St=s(Q2e);yzo=r(_St,"rembert"),_St.forEach(t),xzo=r(FDe," \u2014 "),AQ=n(FDe,"A",{href:!0});var bSt=s(AQ);$zo=r(bSt,"RemBertForCausalLM"),bSt.forEach(t),kzo=r(FDe," (RemBERT model)"),FDe.forEach(t),Szo=i(U),U1=n(U,"LI",{});var TDe=s(U1);W2e=n(TDe,"STRONG",{});var vSt=s(W2e);Rzo=r(vSt,"roberta"),vSt.forEach(t),Pzo=r(TDe," \u2014 "),LQ=n(TDe,"A",{href:!0});var FSt=s(LQ);Bzo=r(FSt,"RobertaForCausalLM"),FSt.forEach(t),Izo=r(TDe," (RoBERTa model)"),TDe.forEach(t),Nzo=i(U),H1=n(U,"LI",{});var MDe=s(H1);U2e=n(MDe,"STRONG",{});var TSt=s(U2e);qzo=r(TSt,"roformer"),TSt.forEach(t),jzo=r(MDe," \u2014 "),yQ=n(MDe,"A",{href:!0});var MSt=s(yQ);Dzo=r(MSt,"RoFormerForCausalLM"),MSt.forEach(t),Gzo=r(MDe," (RoFormer model)"),MDe.forEach(t),Ozo=i(U),J1=n(U,"LI",{});var EDe=s(J1);H2e=n(EDe,"STRONG",{});var ESt=s(H2e);Vzo=r(ESt,"speech_to_text_2"),ESt.forEach(t),Xzo=r(EDe," \u2014 "),xQ=n(EDe,"A",{href:!0});var CSt=s(xQ);zzo=r(CSt,"Speech2Text2ForCausalLM"),CSt.forEach(t),Qzo=r(EDe," (Speech2Text2 model)"),EDe.forEach(t),Wzo=i(U),Y1=n(U,"LI",{});var CDe=s(Y1);J2e=n(CDe,"STRONG",{});var wSt=s(J2e);Uzo=r(wSt,"transfo-xl"),wSt.forEach(t),Hzo=r(CDe," \u2014 "),$Q=n(CDe,"A",{href:!0});var ASt=s($Q);Jzo=r(ASt,"TransfoXLLMHeadModel"),ASt.forEach(t),Yzo=r(CDe," (Transformer-XL model)"),CDe.forEach(t),Kzo=i(U),K1=n(U,"LI",{});var wDe=s(K1);Y2e=n(wDe,"STRONG",{});var LSt=s(Y2e);Zzo=r(LSt,"trocr"),LSt.forEach(t),eQo=r(wDe," \u2014 "),kQ=n(wDe,"A",{href:!0});var ySt=s(kQ);oQo=r(ySt,"TrOCRForCausalLM"),ySt.forEach(t),rQo=r(wDe," (TrOCR model)"),wDe.forEach(t),tQo=i(U),Z1=n(U,"LI",{});var ADe=s(Z1);K2e=n(ADe,"STRONG",{});var xSt=s(K2e);aQo=r(xSt,"xglm"),xSt.forEach(t),nQo=r(ADe," \u2014 "),SQ=n(ADe,"A",{href:!0});var $St=s(SQ);sQo=r($St,"XGLMForCausalLM"),$St.forEach(t),lQo=r(ADe," (XGLM model)"),ADe.forEach(t),iQo=i(U),ev=n(U,"LI",{});var LDe=s(ev);Z2e=n(LDe,"STRONG",{});var kSt=s(Z2e);dQo=r(kSt,"xlm"),kSt.forEach(t),cQo=r(LDe," \u2014 "),RQ=n(LDe,"A",{href:!0});var SSt=s(RQ);mQo=r(SSt,"XLMWithLMHeadModel"),SSt.forEach(t),fQo=r(LDe," (XLM model)"),LDe.forEach(t),gQo=i(U),ov=n(U,"LI",{});var yDe=s(ov);e1e=n(yDe,"STRONG",{});var RSt=s(e1e);hQo=r(RSt,"xlm-prophetnet"),RSt.forEach(t),uQo=r(yDe," \u2014 "),PQ=n(yDe,"A",{href:!0});var PSt=s(PQ);pQo=r(PSt,"XLMProphetNetForCausalLM"),PSt.forEach(t),_Qo=r(yDe," (XLM-ProphetNet model)"),yDe.forEach(t),bQo=i(U),rv=n(U,"LI",{});var xDe=s(rv);o1e=n(xDe,"STRONG",{});var BSt=s(o1e);vQo=r(BSt,"xlm-roberta"),BSt.forEach(t),FQo=r(xDe," \u2014 "),BQ=n(xDe,"A",{href:!0});var ISt=s(BQ);TQo=r(ISt,"XLMRobertaForCausalLM"),ISt.forEach(t),MQo=r(xDe," (XLM-RoBERTa model)"),xDe.forEach(t),EQo=i(U),tv=n(U,"LI",{});var $De=s(tv);r1e=n($De,"STRONG",{});var NSt=s(r1e);CQo=r(NSt,"xlm-roberta-xl"),NSt.forEach(t),wQo=r($De," \u2014 "),IQ=n($De,"A",{href:!0});var qSt=s(IQ);AQo=r(qSt,"XLMRobertaXLForCausalLM"),qSt.forEach(t),LQo=r($De," (XLM-RoBERTa-XL model)"),$De.forEach(t),yQo=i(U),av=n(U,"LI",{});var kDe=s(av);t1e=n(kDe,"STRONG",{});var jSt=s(t1e);xQo=r(jSt,"xlnet"),jSt.forEach(t),$Qo=r(kDe," \u2014 "),NQ=n(kDe,"A",{href:!0});var DSt=s(NQ);kQo=r(DSt,"XLNetLMHeadModel"),DSt.forEach(t),SQo=r(kDe," (XLNet model)"),kDe.forEach(t),U.forEach(t),RQo=i(Ma),nv=n(Ma,"P",{});var SDe=s(nv);PQo=r(SDe,"The model is set in evaluation mode by default using "),a1e=n(SDe,"CODE",{});var GSt=s(a1e);BQo=r(GSt,"model.eval()"),GSt.forEach(t),IQo=r(SDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(SDe,"CODE",{});var OSt=s(n1e);NQo=r(OSt,"model.train()"),OSt.forEach(t),SDe.forEach(t),qQo=i(Ma),T(sv.$$.fragment,Ma),Ma.forEach(t),yl.forEach(t),lZe=i(m),Ad=n(m,"H2",{class:!0});var Too=s(Ad);lv=n(Too,"A",{id:!0,class:!0,href:!0});var VSt=s(lv);s1e=n(VSt,"SPAN",{});var XSt=s(s1e);T(yx.$$.fragment,XSt),XSt.forEach(t),VSt.forEach(t),jQo=i(Too),l1e=n(Too,"SPAN",{});var zSt=s(l1e);DQo=r(zSt,"AutoModelForMaskedLM"),zSt.forEach(t),Too.forEach(t),iZe=i(m),No=n(m,"DIV",{class:!0});var xl=s(No);T(xx.$$.fragment,xl),GQo=i(xl),Ld=n(xl,"P",{});var Sle=s(Ld);OQo=r(Sle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qQ=n(Sle,"A",{href:!0});var QSt=s(qQ);VQo=r(QSt,"from_pretrained()"),QSt.forEach(t),XQo=r(Sle," class method or the "),jQ=n(Sle,"A",{href:!0});var WSt=s(jQ);zQo=r(WSt,"from_config()"),WSt.forEach(t),QQo=r(Sle,` class
method.`),Sle.forEach(t),WQo=i(xl),$x=n(xl,"P",{});var Moo=s($x);UQo=r(Moo,"This class cannot be instantiated directly using "),i1e=n(Moo,"CODE",{});var USt=s(i1e);HQo=r(USt,"__init__()"),USt.forEach(t),JQo=r(Moo," (throws an error)."),Moo.forEach(t),YQo=i(xl),Ft=n(xl,"DIV",{class:!0});var Gy=s(Ft);T(kx.$$.fragment,Gy),KQo=i(Gy),d1e=n(Gy,"P",{});var HSt=s(d1e);ZQo=r(HSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HSt.forEach(t),eWo=i(Gy),yd=n(Gy,"P",{});var Rle=s(yd);oWo=r(Rle,`Note:
Loading a model from its configuration file does `),c1e=n(Rle,"STRONG",{});var JSt=s(c1e);rWo=r(JSt,"not"),JSt.forEach(t),tWo=r(Rle,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(Rle,"A",{href:!0});var YSt=s(DQ);aWo=r(YSt,"from_pretrained()"),YSt.forEach(t),nWo=r(Rle," to load the model weights."),Rle.forEach(t),sWo=i(Gy),T(iv.$$.fragment,Gy),Gy.forEach(t),lWo=i(xl),ro=n(xl,"DIV",{class:!0});var Ea=s(ro);T(Sx.$$.fragment,Ea),iWo=i(Ea),m1e=n(Ea,"P",{});var KSt=s(m1e);dWo=r(KSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KSt.forEach(t),cWo=i(Ea),Za=n(Ea,"P",{});var Oy=s(Za);mWo=r(Oy,"The model class to instantiate is selected based on the "),f1e=n(Oy,"CODE",{});var ZSt=s(f1e);fWo=r(ZSt,"model_type"),ZSt.forEach(t),gWo=r(Oy,` property of the config object (either
passed as an argument or loaded from `),g1e=n(Oy,"CODE",{});var eRt=s(g1e);hWo=r(eRt,"pretrained_model_name_or_path"),eRt.forEach(t),uWo=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(Oy,"CODE",{});var oRt=s(h1e);pWo=r(oRt,"pretrained_model_name_or_path"),oRt.forEach(t),_Wo=r(Oy,":"),Oy.forEach(t),bWo=i(Ea),H=n(Ea,"UL",{});var Y=s(H);dv=n(Y,"LI",{});var RDe=s(dv);u1e=n(RDe,"STRONG",{});var rRt=s(u1e);vWo=r(rRt,"albert"),rRt.forEach(t),FWo=r(RDe," \u2014 "),GQ=n(RDe,"A",{href:!0});var tRt=s(GQ);TWo=r(tRt,"AlbertForMaskedLM"),tRt.forEach(t),MWo=r(RDe," (ALBERT model)"),RDe.forEach(t),EWo=i(Y),cv=n(Y,"LI",{});var PDe=s(cv);p1e=n(PDe,"STRONG",{});var aRt=s(p1e);CWo=r(aRt,"bart"),aRt.forEach(t),wWo=r(PDe," \u2014 "),OQ=n(PDe,"A",{href:!0});var nRt=s(OQ);AWo=r(nRt,"BartForConditionalGeneration"),nRt.forEach(t),LWo=r(PDe," (BART model)"),PDe.forEach(t),yWo=i(Y),mv=n(Y,"LI",{});var BDe=s(mv);_1e=n(BDe,"STRONG",{});var sRt=s(_1e);xWo=r(sRt,"bert"),sRt.forEach(t),$Wo=r(BDe," \u2014 "),VQ=n(BDe,"A",{href:!0});var lRt=s(VQ);kWo=r(lRt,"BertForMaskedLM"),lRt.forEach(t),SWo=r(BDe," (BERT model)"),BDe.forEach(t),RWo=i(Y),fv=n(Y,"LI",{});var IDe=s(fv);b1e=n(IDe,"STRONG",{});var iRt=s(b1e);PWo=r(iRt,"big_bird"),iRt.forEach(t),BWo=r(IDe," \u2014 "),XQ=n(IDe,"A",{href:!0});var dRt=s(XQ);IWo=r(dRt,"BigBirdForMaskedLM"),dRt.forEach(t),NWo=r(IDe," (BigBird model)"),IDe.forEach(t),qWo=i(Y),gv=n(Y,"LI",{});var NDe=s(gv);v1e=n(NDe,"STRONG",{});var cRt=s(v1e);jWo=r(cRt,"camembert"),cRt.forEach(t),DWo=r(NDe," \u2014 "),zQ=n(NDe,"A",{href:!0});var mRt=s(zQ);GWo=r(mRt,"CamembertForMaskedLM"),mRt.forEach(t),OWo=r(NDe," (CamemBERT model)"),NDe.forEach(t),VWo=i(Y),hv=n(Y,"LI",{});var qDe=s(hv);F1e=n(qDe,"STRONG",{});var fRt=s(F1e);XWo=r(fRt,"convbert"),fRt.forEach(t),zWo=r(qDe," \u2014 "),QQ=n(qDe,"A",{href:!0});var gRt=s(QQ);QWo=r(gRt,"ConvBertForMaskedLM"),gRt.forEach(t),WWo=r(qDe," (ConvBERT model)"),qDe.forEach(t),UWo=i(Y),uv=n(Y,"LI",{});var jDe=s(uv);T1e=n(jDe,"STRONG",{});var hRt=s(T1e);HWo=r(hRt,"data2vec-text"),hRt.forEach(t),JWo=r(jDe," \u2014 "),WQ=n(jDe,"A",{href:!0});var uRt=s(WQ);YWo=r(uRt,"Data2VecTextForMaskedLM"),uRt.forEach(t),KWo=r(jDe," (Data2VecText model)"),jDe.forEach(t),ZWo=i(Y),pv=n(Y,"LI",{});var DDe=s(pv);M1e=n(DDe,"STRONG",{});var pRt=s(M1e);eUo=r(pRt,"deberta"),pRt.forEach(t),oUo=r(DDe," \u2014 "),UQ=n(DDe,"A",{href:!0});var _Rt=s(UQ);rUo=r(_Rt,"DebertaForMaskedLM"),_Rt.forEach(t),tUo=r(DDe," (DeBERTa model)"),DDe.forEach(t),aUo=i(Y),_v=n(Y,"LI",{});var GDe=s(_v);E1e=n(GDe,"STRONG",{});var bRt=s(E1e);nUo=r(bRt,"deberta-v2"),bRt.forEach(t),sUo=r(GDe," \u2014 "),HQ=n(GDe,"A",{href:!0});var vRt=s(HQ);lUo=r(vRt,"DebertaV2ForMaskedLM"),vRt.forEach(t),iUo=r(GDe," (DeBERTa-v2 model)"),GDe.forEach(t),dUo=i(Y),bv=n(Y,"LI",{});var ODe=s(bv);C1e=n(ODe,"STRONG",{});var FRt=s(C1e);cUo=r(FRt,"distilbert"),FRt.forEach(t),mUo=r(ODe," \u2014 "),JQ=n(ODe,"A",{href:!0});var TRt=s(JQ);fUo=r(TRt,"DistilBertForMaskedLM"),TRt.forEach(t),gUo=r(ODe," (DistilBERT model)"),ODe.forEach(t),hUo=i(Y),vv=n(Y,"LI",{});var VDe=s(vv);w1e=n(VDe,"STRONG",{});var MRt=s(w1e);uUo=r(MRt,"electra"),MRt.forEach(t),pUo=r(VDe," \u2014 "),YQ=n(VDe,"A",{href:!0});var ERt=s(YQ);_Uo=r(ERt,"ElectraForMaskedLM"),ERt.forEach(t),bUo=r(VDe," (ELECTRA model)"),VDe.forEach(t),vUo=i(Y),Fv=n(Y,"LI",{});var XDe=s(Fv);A1e=n(XDe,"STRONG",{});var CRt=s(A1e);FUo=r(CRt,"ernie"),CRt.forEach(t),TUo=r(XDe," \u2014 "),KQ=n(XDe,"A",{href:!0});var wRt=s(KQ);MUo=r(wRt,"ErnieForMaskedLM"),wRt.forEach(t),EUo=r(XDe," (ERNIE model)"),XDe.forEach(t),CUo=i(Y),Tv=n(Y,"LI",{});var zDe=s(Tv);L1e=n(zDe,"STRONG",{});var ARt=s(L1e);wUo=r(ARt,"flaubert"),ARt.forEach(t),AUo=r(zDe," \u2014 "),ZQ=n(zDe,"A",{href:!0});var LRt=s(ZQ);LUo=r(LRt,"FlaubertWithLMHeadModel"),LRt.forEach(t),yUo=r(zDe," (FlauBERT model)"),zDe.forEach(t),xUo=i(Y),Mv=n(Y,"LI",{});var QDe=s(Mv);y1e=n(QDe,"STRONG",{});var yRt=s(y1e);$Uo=r(yRt,"fnet"),yRt.forEach(t),kUo=r(QDe," \u2014 "),eW=n(QDe,"A",{href:!0});var xRt=s(eW);SUo=r(xRt,"FNetForMaskedLM"),xRt.forEach(t),RUo=r(QDe," (FNet model)"),QDe.forEach(t),PUo=i(Y),Ev=n(Y,"LI",{});var WDe=s(Ev);x1e=n(WDe,"STRONG",{});var $Rt=s(x1e);BUo=r($Rt,"funnel"),$Rt.forEach(t),IUo=r(WDe," \u2014 "),oW=n(WDe,"A",{href:!0});var kRt=s(oW);NUo=r(kRt,"FunnelForMaskedLM"),kRt.forEach(t),qUo=r(WDe," (Funnel Transformer model)"),WDe.forEach(t),jUo=i(Y),Cv=n(Y,"LI",{});var UDe=s(Cv);$1e=n(UDe,"STRONG",{});var SRt=s($1e);DUo=r(SRt,"ibert"),SRt.forEach(t),GUo=r(UDe," \u2014 "),rW=n(UDe,"A",{href:!0});var RRt=s(rW);OUo=r(RRt,"IBertForMaskedLM"),RRt.forEach(t),VUo=r(UDe," (I-BERT model)"),UDe.forEach(t),XUo=i(Y),wv=n(Y,"LI",{});var HDe=s(wv);k1e=n(HDe,"STRONG",{});var PRt=s(k1e);zUo=r(PRt,"layoutlm"),PRt.forEach(t),QUo=r(HDe," \u2014 "),tW=n(HDe,"A",{href:!0});var BRt=s(tW);WUo=r(BRt,"LayoutLMForMaskedLM"),BRt.forEach(t),UUo=r(HDe," (LayoutLM model)"),HDe.forEach(t),HUo=i(Y),Av=n(Y,"LI",{});var JDe=s(Av);S1e=n(JDe,"STRONG",{});var IRt=s(S1e);JUo=r(IRt,"longformer"),IRt.forEach(t),YUo=r(JDe," \u2014 "),aW=n(JDe,"A",{href:!0});var NRt=s(aW);KUo=r(NRt,"LongformerForMaskedLM"),NRt.forEach(t),ZUo=r(JDe," (Longformer model)"),JDe.forEach(t),eHo=i(Y),Lv=n(Y,"LI",{});var YDe=s(Lv);R1e=n(YDe,"STRONG",{});var qRt=s(R1e);oHo=r(qRt,"luke"),qRt.forEach(t),rHo=r(YDe," \u2014 "),nW=n(YDe,"A",{href:!0});var jRt=s(nW);tHo=r(jRt,"LukeForMaskedLM"),jRt.forEach(t),aHo=r(YDe," (LUKE model)"),YDe.forEach(t),nHo=i(Y),yv=n(Y,"LI",{});var KDe=s(yv);P1e=n(KDe,"STRONG",{});var DRt=s(P1e);sHo=r(DRt,"mbart"),DRt.forEach(t),lHo=r(KDe," \u2014 "),sW=n(KDe,"A",{href:!0});var GRt=s(sW);iHo=r(GRt,"MBartForConditionalGeneration"),GRt.forEach(t),dHo=r(KDe," (mBART model)"),KDe.forEach(t),cHo=i(Y),xv=n(Y,"LI",{});var ZDe=s(xv);B1e=n(ZDe,"STRONG",{});var ORt=s(B1e);mHo=r(ORt,"megatron-bert"),ORt.forEach(t),fHo=r(ZDe," \u2014 "),lW=n(ZDe,"A",{href:!0});var VRt=s(lW);gHo=r(VRt,"MegatronBertForMaskedLM"),VRt.forEach(t),hHo=r(ZDe," (Megatron-BERT model)"),ZDe.forEach(t),uHo=i(Y),$v=n(Y,"LI",{});var eGe=s($v);I1e=n(eGe,"STRONG",{});var XRt=s(I1e);pHo=r(XRt,"mobilebert"),XRt.forEach(t),_Ho=r(eGe," \u2014 "),iW=n(eGe,"A",{href:!0});var zRt=s(iW);bHo=r(zRt,"MobileBertForMaskedLM"),zRt.forEach(t),vHo=r(eGe," (MobileBERT model)"),eGe.forEach(t),FHo=i(Y),kv=n(Y,"LI",{});var oGe=s(kv);N1e=n(oGe,"STRONG",{});var QRt=s(N1e);THo=r(QRt,"mpnet"),QRt.forEach(t),MHo=r(oGe," \u2014 "),dW=n(oGe,"A",{href:!0});var WRt=s(dW);EHo=r(WRt,"MPNetForMaskedLM"),WRt.forEach(t),CHo=r(oGe," (MPNet model)"),oGe.forEach(t),wHo=i(Y),Sv=n(Y,"LI",{});var rGe=s(Sv);q1e=n(rGe,"STRONG",{});var URt=s(q1e);AHo=r(URt,"mvp"),URt.forEach(t),LHo=r(rGe," \u2014 "),cW=n(rGe,"A",{href:!0});var HRt=s(cW);yHo=r(HRt,"MvpForConditionalGeneration"),HRt.forEach(t),xHo=r(rGe," (MVP model)"),rGe.forEach(t),$Ho=i(Y),Rv=n(Y,"LI",{});var tGe=s(Rv);j1e=n(tGe,"STRONG",{});var JRt=s(j1e);kHo=r(JRt,"nezha"),JRt.forEach(t),SHo=r(tGe," \u2014 "),mW=n(tGe,"A",{href:!0});var YRt=s(mW);RHo=r(YRt,"NezhaForMaskedLM"),YRt.forEach(t),PHo=r(tGe," (Nezha model)"),tGe.forEach(t),BHo=i(Y),Pv=n(Y,"LI",{});var aGe=s(Pv);D1e=n(aGe,"STRONG",{});var KRt=s(D1e);IHo=r(KRt,"nystromformer"),KRt.forEach(t),NHo=r(aGe," \u2014 "),fW=n(aGe,"A",{href:!0});var ZRt=s(fW);qHo=r(ZRt,"NystromformerForMaskedLM"),ZRt.forEach(t),jHo=r(aGe," (Nystr\xF6mformer model)"),aGe.forEach(t),DHo=i(Y),Bv=n(Y,"LI",{});var nGe=s(Bv);G1e=n(nGe,"STRONG",{});var ePt=s(G1e);GHo=r(ePt,"perceiver"),ePt.forEach(t),OHo=r(nGe," \u2014 "),gW=n(nGe,"A",{href:!0});var oPt=s(gW);VHo=r(oPt,"PerceiverForMaskedLM"),oPt.forEach(t),XHo=r(nGe," (Perceiver model)"),nGe.forEach(t),zHo=i(Y),Iv=n(Y,"LI",{});var sGe=s(Iv);O1e=n(sGe,"STRONG",{});var rPt=s(O1e);QHo=r(rPt,"qdqbert"),rPt.forEach(t),WHo=r(sGe," \u2014 "),hW=n(sGe,"A",{href:!0});var tPt=s(hW);UHo=r(tPt,"QDQBertForMaskedLM"),tPt.forEach(t),HHo=r(sGe," (QDQBert model)"),sGe.forEach(t),JHo=i(Y),Nv=n(Y,"LI",{});var lGe=s(Nv);V1e=n(lGe,"STRONG",{});var aPt=s(V1e);YHo=r(aPt,"reformer"),aPt.forEach(t),KHo=r(lGe," \u2014 "),uW=n(lGe,"A",{href:!0});var nPt=s(uW);ZHo=r(nPt,"ReformerForMaskedLM"),nPt.forEach(t),eJo=r(lGe," (Reformer model)"),lGe.forEach(t),oJo=i(Y),qv=n(Y,"LI",{});var iGe=s(qv);X1e=n(iGe,"STRONG",{});var sPt=s(X1e);rJo=r(sPt,"rembert"),sPt.forEach(t),tJo=r(iGe," \u2014 "),pW=n(iGe,"A",{href:!0});var lPt=s(pW);aJo=r(lPt,"RemBertForMaskedLM"),lPt.forEach(t),nJo=r(iGe," (RemBERT model)"),iGe.forEach(t),sJo=i(Y),jv=n(Y,"LI",{});var dGe=s(jv);z1e=n(dGe,"STRONG",{});var iPt=s(z1e);lJo=r(iPt,"roberta"),iPt.forEach(t),iJo=r(dGe," \u2014 "),_W=n(dGe,"A",{href:!0});var dPt=s(_W);dJo=r(dPt,"RobertaForMaskedLM"),dPt.forEach(t),cJo=r(dGe," (RoBERTa model)"),dGe.forEach(t),mJo=i(Y),Dv=n(Y,"LI",{});var cGe=s(Dv);Q1e=n(cGe,"STRONG",{});var cPt=s(Q1e);fJo=r(cPt,"roformer"),cPt.forEach(t),gJo=r(cGe," \u2014 "),bW=n(cGe,"A",{href:!0});var mPt=s(bW);hJo=r(mPt,"RoFormerForMaskedLM"),mPt.forEach(t),uJo=r(cGe," (RoFormer model)"),cGe.forEach(t),pJo=i(Y),Gv=n(Y,"LI",{});var mGe=s(Gv);W1e=n(mGe,"STRONG",{});var fPt=s(W1e);_Jo=r(fPt,"squeezebert"),fPt.forEach(t),bJo=r(mGe," \u2014 "),vW=n(mGe,"A",{href:!0});var gPt=s(vW);vJo=r(gPt,"SqueezeBertForMaskedLM"),gPt.forEach(t),FJo=r(mGe," (SqueezeBERT model)"),mGe.forEach(t),TJo=i(Y),Ov=n(Y,"LI",{});var fGe=s(Ov);U1e=n(fGe,"STRONG",{});var hPt=s(U1e);MJo=r(hPt,"tapas"),hPt.forEach(t),EJo=r(fGe," \u2014 "),FW=n(fGe,"A",{href:!0});var uPt=s(FW);CJo=r(uPt,"TapasForMaskedLM"),uPt.forEach(t),wJo=r(fGe," (TAPAS model)"),fGe.forEach(t),AJo=i(Y),Vv=n(Y,"LI",{});var gGe=s(Vv);H1e=n(gGe,"STRONG",{});var pPt=s(H1e);LJo=r(pPt,"wav2vec2"),pPt.forEach(t),yJo=r(gGe," \u2014 "),J1e=n(gGe,"CODE",{});var _Pt=s(J1e);xJo=r(_Pt,"Wav2Vec2ForMaskedLM"),_Pt.forEach(t),$Jo=r(gGe," (Wav2Vec2 model)"),gGe.forEach(t),kJo=i(Y),Xv=n(Y,"LI",{});var hGe=s(Xv);Y1e=n(hGe,"STRONG",{});var bPt=s(Y1e);SJo=r(bPt,"xlm"),bPt.forEach(t),RJo=r(hGe," \u2014 "),TW=n(hGe,"A",{href:!0});var vPt=s(TW);PJo=r(vPt,"XLMWithLMHeadModel"),vPt.forEach(t),BJo=r(hGe," (XLM model)"),hGe.forEach(t),IJo=i(Y),zv=n(Y,"LI",{});var uGe=s(zv);K1e=n(uGe,"STRONG",{});var FPt=s(K1e);NJo=r(FPt,"xlm-roberta"),FPt.forEach(t),qJo=r(uGe," \u2014 "),MW=n(uGe,"A",{href:!0});var TPt=s(MW);jJo=r(TPt,"XLMRobertaForMaskedLM"),TPt.forEach(t),DJo=r(uGe," (XLM-RoBERTa model)"),uGe.forEach(t),GJo=i(Y),Qv=n(Y,"LI",{});var pGe=s(Qv);Z1e=n(pGe,"STRONG",{});var MPt=s(Z1e);OJo=r(MPt,"xlm-roberta-xl"),MPt.forEach(t),VJo=r(pGe," \u2014 "),EW=n(pGe,"A",{href:!0});var EPt=s(EW);XJo=r(EPt,"XLMRobertaXLForMaskedLM"),EPt.forEach(t),zJo=r(pGe," (XLM-RoBERTa-XL model)"),pGe.forEach(t),QJo=i(Y),Wv=n(Y,"LI",{});var _Ge=s(Wv);eve=n(_Ge,"STRONG",{});var CPt=s(eve);WJo=r(CPt,"yoso"),CPt.forEach(t),UJo=r(_Ge," \u2014 "),CW=n(_Ge,"A",{href:!0});var wPt=s(CW);HJo=r(wPt,"YosoForMaskedLM"),wPt.forEach(t),JJo=r(_Ge," (YOSO model)"),_Ge.forEach(t),Y.forEach(t),YJo=i(Ea),Uv=n(Ea,"P",{});var bGe=s(Uv);KJo=r(bGe,"The model is set in evaluation mode by default using "),ove=n(bGe,"CODE",{});var APt=s(ove);ZJo=r(APt,"model.eval()"),APt.forEach(t),eYo=r(bGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=n(bGe,"CODE",{});var LPt=s(rve);oYo=r(LPt,"model.train()"),LPt.forEach(t),bGe.forEach(t),rYo=i(Ea),T(Hv.$$.fragment,Ea),Ea.forEach(t),xl.forEach(t),dZe=i(m),xd=n(m,"H2",{class:!0});var Eoo=s(xd);Jv=n(Eoo,"A",{id:!0,class:!0,href:!0});var yPt=s(Jv);tve=n(yPt,"SPAN",{});var xPt=s(tve);T(Rx.$$.fragment,xPt),xPt.forEach(t),yPt.forEach(t),tYo=i(Eoo),ave=n(Eoo,"SPAN",{});var $Pt=s(ave);aYo=r($Pt,"AutoModelForSeq2SeqLM"),$Pt.forEach(t),Eoo.forEach(t),cZe=i(m),qo=n(m,"DIV",{class:!0});var $l=s(qo);T(Px.$$.fragment,$l),nYo=i($l),$d=n($l,"P",{});var Ple=s($d);sYo=r(Ple,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wW=n(Ple,"A",{href:!0});var kPt=s(wW);lYo=r(kPt,"from_pretrained()"),kPt.forEach(t),iYo=r(Ple," class method or the "),AW=n(Ple,"A",{href:!0});var SPt=s(AW);dYo=r(SPt,"from_config()"),SPt.forEach(t),cYo=r(Ple,` class
method.`),Ple.forEach(t),mYo=i($l),Bx=n($l,"P",{});var Coo=s(Bx);fYo=r(Coo,"This class cannot be instantiated directly using "),nve=n(Coo,"CODE",{});var RPt=s(nve);gYo=r(RPt,"__init__()"),RPt.forEach(t),hYo=r(Coo," (throws an error)."),Coo.forEach(t),uYo=i($l),Tt=n($l,"DIV",{class:!0});var Vy=s(Tt);T(Ix.$$.fragment,Vy),pYo=i(Vy),sve=n(Vy,"P",{});var PPt=s(sve);_Yo=r(PPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PPt.forEach(t),bYo=i(Vy),kd=n(Vy,"P",{});var Ble=s(kd);vYo=r(Ble,`Note:
Loading a model from its configuration file does `),lve=n(Ble,"STRONG",{});var BPt=s(lve);FYo=r(BPt,"not"),BPt.forEach(t),TYo=r(Ble,` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=n(Ble,"A",{href:!0});var IPt=s(LW);MYo=r(IPt,"from_pretrained()"),IPt.forEach(t),EYo=r(Ble," to load the model weights."),Ble.forEach(t),CYo=i(Vy),T(Yv.$$.fragment,Vy),Vy.forEach(t),wYo=i($l),to=n($l,"DIV",{class:!0});var Ca=s(to);T(Nx.$$.fragment,Ca),AYo=i(Ca),ive=n(Ca,"P",{});var NPt=s(ive);LYo=r(NPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NPt.forEach(t),yYo=i(Ca),en=n(Ca,"P",{});var Xy=s(en);xYo=r(Xy,"The model class to instantiate is selected based on the "),dve=n(Xy,"CODE",{});var qPt=s(dve);$Yo=r(qPt,"model_type"),qPt.forEach(t),kYo=r(Xy,` property of the config object (either
passed as an argument or loaded from `),cve=n(Xy,"CODE",{});var jPt=s(cve);SYo=r(jPt,"pretrained_model_name_or_path"),jPt.forEach(t),RYo=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(Xy,"CODE",{});var DPt=s(mve);PYo=r(DPt,"pretrained_model_name_or_path"),DPt.forEach(t),BYo=r(Xy,":"),Xy.forEach(t),IYo=i(Ca),me=n(Ca,"UL",{});var pe=s(me);Kv=n(pe,"LI",{});var vGe=s(Kv);fve=n(vGe,"STRONG",{});var GPt=s(fve);NYo=r(GPt,"bart"),GPt.forEach(t),qYo=r(vGe," \u2014 "),yW=n(vGe,"A",{href:!0});var OPt=s(yW);jYo=r(OPt,"BartForConditionalGeneration"),OPt.forEach(t),DYo=r(vGe," (BART model)"),vGe.forEach(t),GYo=i(pe),Zv=n(pe,"LI",{});var FGe=s(Zv);gve=n(FGe,"STRONG",{});var VPt=s(gve);OYo=r(VPt,"bigbird_pegasus"),VPt.forEach(t),VYo=r(FGe," \u2014 "),xW=n(FGe,"A",{href:!0});var XPt=s(xW);XYo=r(XPt,"BigBirdPegasusForConditionalGeneration"),XPt.forEach(t),zYo=r(FGe," (BigBird-Pegasus model)"),FGe.forEach(t),QYo=i(pe),eF=n(pe,"LI",{});var TGe=s(eF);hve=n(TGe,"STRONG",{});var zPt=s(hve);WYo=r(zPt,"blenderbot"),zPt.forEach(t),UYo=r(TGe," \u2014 "),$W=n(TGe,"A",{href:!0});var QPt=s($W);HYo=r(QPt,"BlenderbotForConditionalGeneration"),QPt.forEach(t),JYo=r(TGe," (Blenderbot model)"),TGe.forEach(t),YYo=i(pe),oF=n(pe,"LI",{});var MGe=s(oF);uve=n(MGe,"STRONG",{});var WPt=s(uve);KYo=r(WPt,"blenderbot-small"),WPt.forEach(t),ZYo=r(MGe," \u2014 "),kW=n(MGe,"A",{href:!0});var UPt=s(kW);eKo=r(UPt,"BlenderbotSmallForConditionalGeneration"),UPt.forEach(t),oKo=r(MGe," (BlenderbotSmall model)"),MGe.forEach(t),rKo=i(pe),rF=n(pe,"LI",{});var EGe=s(rF);pve=n(EGe,"STRONG",{});var HPt=s(pve);tKo=r(HPt,"encoder-decoder"),HPt.forEach(t),aKo=r(EGe," \u2014 "),SW=n(EGe,"A",{href:!0});var JPt=s(SW);nKo=r(JPt,"EncoderDecoderModel"),JPt.forEach(t),sKo=r(EGe," (Encoder decoder model)"),EGe.forEach(t),lKo=i(pe),tF=n(pe,"LI",{});var CGe=s(tF);_ve=n(CGe,"STRONG",{});var YPt=s(_ve);iKo=r(YPt,"fsmt"),YPt.forEach(t),dKo=r(CGe," \u2014 "),RW=n(CGe,"A",{href:!0});var KPt=s(RW);cKo=r(KPt,"FSMTForConditionalGeneration"),KPt.forEach(t),mKo=r(CGe," (FairSeq Machine-Translation model)"),CGe.forEach(t),fKo=i(pe),aF=n(pe,"LI",{});var wGe=s(aF);bve=n(wGe,"STRONG",{});var ZPt=s(bve);gKo=r(ZPt,"led"),ZPt.forEach(t),hKo=r(wGe," \u2014 "),PW=n(wGe,"A",{href:!0});var eBt=s(PW);uKo=r(eBt,"LEDForConditionalGeneration"),eBt.forEach(t),pKo=r(wGe," (LED model)"),wGe.forEach(t),_Ko=i(pe),nF=n(pe,"LI",{});var AGe=s(nF);vve=n(AGe,"STRONG",{});var oBt=s(vve);bKo=r(oBt,"longt5"),oBt.forEach(t),vKo=r(AGe," \u2014 "),BW=n(AGe,"A",{href:!0});var rBt=s(BW);FKo=r(rBt,"LongT5ForConditionalGeneration"),rBt.forEach(t),TKo=r(AGe," (LongT5 model)"),AGe.forEach(t),MKo=i(pe),sF=n(pe,"LI",{});var LGe=s(sF);Fve=n(LGe,"STRONG",{});var tBt=s(Fve);EKo=r(tBt,"m2m_100"),tBt.forEach(t),CKo=r(LGe," \u2014 "),IW=n(LGe,"A",{href:!0});var aBt=s(IW);wKo=r(aBt,"M2M100ForConditionalGeneration"),aBt.forEach(t),AKo=r(LGe," (M2M100 model)"),LGe.forEach(t),LKo=i(pe),lF=n(pe,"LI",{});var yGe=s(lF);Tve=n(yGe,"STRONG",{});var nBt=s(Tve);yKo=r(nBt,"marian"),nBt.forEach(t),xKo=r(yGe," \u2014 "),NW=n(yGe,"A",{href:!0});var sBt=s(NW);$Ko=r(sBt,"MarianMTModel"),sBt.forEach(t),kKo=r(yGe," (Marian model)"),yGe.forEach(t),SKo=i(pe),iF=n(pe,"LI",{});var xGe=s(iF);Mve=n(xGe,"STRONG",{});var lBt=s(Mve);RKo=r(lBt,"mbart"),lBt.forEach(t),PKo=r(xGe," \u2014 "),qW=n(xGe,"A",{href:!0});var iBt=s(qW);BKo=r(iBt,"MBartForConditionalGeneration"),iBt.forEach(t),IKo=r(xGe," (mBART model)"),xGe.forEach(t),NKo=i(pe),dF=n(pe,"LI",{});var $Ge=s(dF);Eve=n($Ge,"STRONG",{});var dBt=s(Eve);qKo=r(dBt,"mt5"),dBt.forEach(t),jKo=r($Ge," \u2014 "),jW=n($Ge,"A",{href:!0});var cBt=s(jW);DKo=r(cBt,"MT5ForConditionalGeneration"),cBt.forEach(t),GKo=r($Ge," (MT5 model)"),$Ge.forEach(t),OKo=i(pe),cF=n(pe,"LI",{});var kGe=s(cF);Cve=n(kGe,"STRONG",{});var mBt=s(Cve);VKo=r(mBt,"mvp"),mBt.forEach(t),XKo=r(kGe," \u2014 "),DW=n(kGe,"A",{href:!0});var fBt=s(DW);zKo=r(fBt,"MvpForConditionalGeneration"),fBt.forEach(t),QKo=r(kGe," (MVP model)"),kGe.forEach(t),WKo=i(pe),mF=n(pe,"LI",{});var SGe=s(mF);wve=n(SGe,"STRONG",{});var gBt=s(wve);UKo=r(gBt,"nllb"),gBt.forEach(t),HKo=r(SGe," \u2014 "),GW=n(SGe,"A",{href:!0});var hBt=s(GW);JKo=r(hBt,"M2M100ForConditionalGeneration"),hBt.forEach(t),YKo=r(SGe," (NLLB model)"),SGe.forEach(t),KKo=i(pe),fF=n(pe,"LI",{});var RGe=s(fF);Ave=n(RGe,"STRONG",{});var uBt=s(Ave);ZKo=r(uBt,"pegasus"),uBt.forEach(t),eZo=r(RGe," \u2014 "),OW=n(RGe,"A",{href:!0});var pBt=s(OW);oZo=r(pBt,"PegasusForConditionalGeneration"),pBt.forEach(t),rZo=r(RGe," (Pegasus model)"),RGe.forEach(t),tZo=i(pe),gF=n(pe,"LI",{});var PGe=s(gF);Lve=n(PGe,"STRONG",{});var _Bt=s(Lve);aZo=r(_Bt,"pegasus_x"),_Bt.forEach(t),nZo=r(PGe," \u2014 "),VW=n(PGe,"A",{href:!0});var bBt=s(VW);sZo=r(bBt,"PegasusXForConditionalGeneration"),bBt.forEach(t),lZo=r(PGe," (PEGASUS-X model)"),PGe.forEach(t),iZo=i(pe),hF=n(pe,"LI",{});var BGe=s(hF);yve=n(BGe,"STRONG",{});var vBt=s(yve);dZo=r(vBt,"plbart"),vBt.forEach(t),cZo=r(BGe," \u2014 "),XW=n(BGe,"A",{href:!0});var FBt=s(XW);mZo=r(FBt,"PLBartForConditionalGeneration"),FBt.forEach(t),fZo=r(BGe," (PLBart model)"),BGe.forEach(t),gZo=i(pe),uF=n(pe,"LI",{});var IGe=s(uF);xve=n(IGe,"STRONG",{});var TBt=s(xve);hZo=r(TBt,"prophetnet"),TBt.forEach(t),uZo=r(IGe," \u2014 "),zW=n(IGe,"A",{href:!0});var MBt=s(zW);pZo=r(MBt,"ProphetNetForConditionalGeneration"),MBt.forEach(t),_Zo=r(IGe," (ProphetNet model)"),IGe.forEach(t),bZo=i(pe),pF=n(pe,"LI",{});var NGe=s(pF);$ve=n(NGe,"STRONG",{});var EBt=s($ve);vZo=r(EBt,"t5"),EBt.forEach(t),FZo=r(NGe," \u2014 "),QW=n(NGe,"A",{href:!0});var CBt=s(QW);TZo=r(CBt,"T5ForConditionalGeneration"),CBt.forEach(t),MZo=r(NGe," (T5 model)"),NGe.forEach(t),EZo=i(pe),_F=n(pe,"LI",{});var qGe=s(_F);kve=n(qGe,"STRONG",{});var wBt=s(kve);CZo=r(wBt,"xlm-prophetnet"),wBt.forEach(t),wZo=r(qGe," \u2014 "),WW=n(qGe,"A",{href:!0});var ABt=s(WW);AZo=r(ABt,"XLMProphetNetForConditionalGeneration"),ABt.forEach(t),LZo=r(qGe," (XLM-ProphetNet model)"),qGe.forEach(t),pe.forEach(t),yZo=i(Ca),bF=n(Ca,"P",{});var jGe=s(bF);xZo=r(jGe,"The model is set in evaluation mode by default using "),Sve=n(jGe,"CODE",{});var LBt=s(Sve);$Zo=r(LBt,"model.eval()"),LBt.forEach(t),kZo=r(jGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=n(jGe,"CODE",{});var yBt=s(Rve);SZo=r(yBt,"model.train()"),yBt.forEach(t),jGe.forEach(t),RZo=i(Ca),T(vF.$$.fragment,Ca),Ca.forEach(t),$l.forEach(t),mZe=i(m),Sd=n(m,"H2",{class:!0});var woo=s(Sd);FF=n(woo,"A",{id:!0,class:!0,href:!0});var xBt=s(FF);Pve=n(xBt,"SPAN",{});var $Bt=s(Pve);T(qx.$$.fragment,$Bt),$Bt.forEach(t),xBt.forEach(t),PZo=i(woo),Bve=n(woo,"SPAN",{});var kBt=s(Bve);BZo=r(kBt,"AutoModelForSequenceClassification"),kBt.forEach(t),woo.forEach(t),fZe=i(m),jo=n(m,"DIV",{class:!0});var kl=s(jo);T(jx.$$.fragment,kl),IZo=i(kl),Rd=n(kl,"P",{});var Ile=s(Rd);NZo=r(Ile,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UW=n(Ile,"A",{href:!0});var SBt=s(UW);qZo=r(SBt,"from_pretrained()"),SBt.forEach(t),jZo=r(Ile," class method or the "),HW=n(Ile,"A",{href:!0});var RBt=s(HW);DZo=r(RBt,"from_config()"),RBt.forEach(t),GZo=r(Ile,` class
method.`),Ile.forEach(t),OZo=i(kl),Dx=n(kl,"P",{});var Aoo=s(Dx);VZo=r(Aoo,"This class cannot be instantiated directly using "),Ive=n(Aoo,"CODE",{});var PBt=s(Ive);XZo=r(PBt,"__init__()"),PBt.forEach(t),zZo=r(Aoo," (throws an error)."),Aoo.forEach(t),QZo=i(kl),Mt=n(kl,"DIV",{class:!0});var zy=s(Mt);T(Gx.$$.fragment,zy),WZo=i(zy),Nve=n(zy,"P",{});var BBt=s(Nve);UZo=r(BBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BBt.forEach(t),HZo=i(zy),Pd=n(zy,"P",{});var Nle=s(Pd);JZo=r(Nle,`Note:
Loading a model from its configuration file does `),qve=n(Nle,"STRONG",{});var IBt=s(qve);YZo=r(IBt,"not"),IBt.forEach(t),KZo=r(Nle,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(Nle,"A",{href:!0});var NBt=s(JW);ZZo=r(NBt,"from_pretrained()"),NBt.forEach(t),eer=r(Nle," to load the model weights."),Nle.forEach(t),oer=i(zy),T(TF.$$.fragment,zy),zy.forEach(t),rer=i(kl),ao=n(kl,"DIV",{class:!0});var wa=s(ao);T(Ox.$$.fragment,wa),ter=i(wa),jve=n(wa,"P",{});var qBt=s(jve);aer=r(qBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qBt.forEach(t),ner=i(wa),on=n(wa,"P",{});var Qy=s(on);ser=r(Qy,"The model class to instantiate is selected based on the "),Dve=n(Qy,"CODE",{});var jBt=s(Dve);ler=r(jBt,"model_type"),jBt.forEach(t),ier=r(Qy,` property of the config object (either
passed as an argument or loaded from `),Gve=n(Qy,"CODE",{});var DBt=s(Gve);der=r(DBt,"pretrained_model_name_or_path"),DBt.forEach(t),cer=r(Qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(Qy,"CODE",{});var GBt=s(Ove);mer=r(GBt,"pretrained_model_name_or_path"),GBt.forEach(t),fer=r(Qy,":"),Qy.forEach(t),ger=i(wa),q=n(wa,"UL",{});var D=s(q);MF=n(D,"LI",{});var DGe=s(MF);Vve=n(DGe,"STRONG",{});var OBt=s(Vve);her=r(OBt,"albert"),OBt.forEach(t),uer=r(DGe," \u2014 "),YW=n(DGe,"A",{href:!0});var VBt=s(YW);per=r(VBt,"AlbertForSequenceClassification"),VBt.forEach(t),_er=r(DGe," (ALBERT model)"),DGe.forEach(t),ber=i(D),EF=n(D,"LI",{});var GGe=s(EF);Xve=n(GGe,"STRONG",{});var XBt=s(Xve);ver=r(XBt,"bart"),XBt.forEach(t),Fer=r(GGe," \u2014 "),KW=n(GGe,"A",{href:!0});var zBt=s(KW);Ter=r(zBt,"BartForSequenceClassification"),zBt.forEach(t),Mer=r(GGe," (BART model)"),GGe.forEach(t),Eer=i(D),CF=n(D,"LI",{});var OGe=s(CF);zve=n(OGe,"STRONG",{});var QBt=s(zve);Cer=r(QBt,"bert"),QBt.forEach(t),wer=r(OGe," \u2014 "),ZW=n(OGe,"A",{href:!0});var WBt=s(ZW);Aer=r(WBt,"BertForSequenceClassification"),WBt.forEach(t),Ler=r(OGe," (BERT model)"),OGe.forEach(t),yer=i(D),wF=n(D,"LI",{});var VGe=s(wF);Qve=n(VGe,"STRONG",{});var UBt=s(Qve);xer=r(UBt,"big_bird"),UBt.forEach(t),$er=r(VGe," \u2014 "),eU=n(VGe,"A",{href:!0});var HBt=s(eU);ker=r(HBt,"BigBirdForSequenceClassification"),HBt.forEach(t),Ser=r(VGe," (BigBird model)"),VGe.forEach(t),Rer=i(D),AF=n(D,"LI",{});var XGe=s(AF);Wve=n(XGe,"STRONG",{});var JBt=s(Wve);Per=r(JBt,"bigbird_pegasus"),JBt.forEach(t),Ber=r(XGe," \u2014 "),oU=n(XGe,"A",{href:!0});var YBt=s(oU);Ier=r(YBt,"BigBirdPegasusForSequenceClassification"),YBt.forEach(t),Ner=r(XGe," (BigBird-Pegasus model)"),XGe.forEach(t),qer=i(D),LF=n(D,"LI",{});var zGe=s(LF);Uve=n(zGe,"STRONG",{});var KBt=s(Uve);jer=r(KBt,"bloom"),KBt.forEach(t),Der=r(zGe," \u2014 "),rU=n(zGe,"A",{href:!0});var ZBt=s(rU);Ger=r(ZBt,"BloomForSequenceClassification"),ZBt.forEach(t),Oer=r(zGe," (BLOOM model)"),zGe.forEach(t),Ver=i(D),yF=n(D,"LI",{});var QGe=s(yF);Hve=n(QGe,"STRONG",{});var eIt=s(Hve);Xer=r(eIt,"camembert"),eIt.forEach(t),zer=r(QGe," \u2014 "),tU=n(QGe,"A",{href:!0});var oIt=s(tU);Qer=r(oIt,"CamembertForSequenceClassification"),oIt.forEach(t),Wer=r(QGe," (CamemBERT model)"),QGe.forEach(t),Uer=i(D),xF=n(D,"LI",{});var WGe=s(xF);Jve=n(WGe,"STRONG",{});var rIt=s(Jve);Her=r(rIt,"canine"),rIt.forEach(t),Jer=r(WGe," \u2014 "),aU=n(WGe,"A",{href:!0});var tIt=s(aU);Yer=r(tIt,"CanineForSequenceClassification"),tIt.forEach(t),Ker=r(WGe," (CANINE model)"),WGe.forEach(t),Zer=i(D),$F=n(D,"LI",{});var UGe=s($F);Yve=n(UGe,"STRONG",{});var aIt=s(Yve);eor=r(aIt,"convbert"),aIt.forEach(t),oor=r(UGe," \u2014 "),nU=n(UGe,"A",{href:!0});var nIt=s(nU);ror=r(nIt,"ConvBertForSequenceClassification"),nIt.forEach(t),tor=r(UGe," (ConvBERT model)"),UGe.forEach(t),aor=i(D),kF=n(D,"LI",{});var HGe=s(kF);Kve=n(HGe,"STRONG",{});var sIt=s(Kve);nor=r(sIt,"ctrl"),sIt.forEach(t),sor=r(HGe," \u2014 "),sU=n(HGe,"A",{href:!0});var lIt=s(sU);lor=r(lIt,"CTRLForSequenceClassification"),lIt.forEach(t),ior=r(HGe," (CTRL model)"),HGe.forEach(t),dor=i(D),SF=n(D,"LI",{});var JGe=s(SF);Zve=n(JGe,"STRONG",{});var iIt=s(Zve);cor=r(iIt,"data2vec-text"),iIt.forEach(t),mor=r(JGe," \u2014 "),lU=n(JGe,"A",{href:!0});var dIt=s(lU);gor=r(dIt,"Data2VecTextForSequenceClassification"),dIt.forEach(t),hor=r(JGe," (Data2VecText model)"),JGe.forEach(t),uor=i(D),RF=n(D,"LI",{});var YGe=s(RF);eFe=n(YGe,"STRONG",{});var cIt=s(eFe);por=r(cIt,"deberta"),cIt.forEach(t),_or=r(YGe," \u2014 "),iU=n(YGe,"A",{href:!0});var mIt=s(iU);bor=r(mIt,"DebertaForSequenceClassification"),mIt.forEach(t),vor=r(YGe," (DeBERTa model)"),YGe.forEach(t),For=i(D),PF=n(D,"LI",{});var KGe=s(PF);oFe=n(KGe,"STRONG",{});var fIt=s(oFe);Tor=r(fIt,"deberta-v2"),fIt.forEach(t),Mor=r(KGe," \u2014 "),dU=n(KGe,"A",{href:!0});var gIt=s(dU);Eor=r(gIt,"DebertaV2ForSequenceClassification"),gIt.forEach(t),Cor=r(KGe," (DeBERTa-v2 model)"),KGe.forEach(t),wor=i(D),BF=n(D,"LI",{});var ZGe=s(BF);rFe=n(ZGe,"STRONG",{});var hIt=s(rFe);Aor=r(hIt,"distilbert"),hIt.forEach(t),Lor=r(ZGe," \u2014 "),cU=n(ZGe,"A",{href:!0});var uIt=s(cU);yor=r(uIt,"DistilBertForSequenceClassification"),uIt.forEach(t),xor=r(ZGe," (DistilBERT model)"),ZGe.forEach(t),$or=i(D),IF=n(D,"LI",{});var eOe=s(IF);tFe=n(eOe,"STRONG",{});var pIt=s(tFe);kor=r(pIt,"electra"),pIt.forEach(t),Sor=r(eOe," \u2014 "),mU=n(eOe,"A",{href:!0});var _It=s(mU);Ror=r(_It,"ElectraForSequenceClassification"),_It.forEach(t),Por=r(eOe," (ELECTRA model)"),eOe.forEach(t),Bor=i(D),NF=n(D,"LI",{});var oOe=s(NF);aFe=n(oOe,"STRONG",{});var bIt=s(aFe);Ior=r(bIt,"ernie"),bIt.forEach(t),Nor=r(oOe," \u2014 "),fU=n(oOe,"A",{href:!0});var vIt=s(fU);qor=r(vIt,"ErnieForSequenceClassification"),vIt.forEach(t),jor=r(oOe," (ERNIE model)"),oOe.forEach(t),Dor=i(D),qF=n(D,"LI",{});var rOe=s(qF);nFe=n(rOe,"STRONG",{});var FIt=s(nFe);Gor=r(FIt,"flaubert"),FIt.forEach(t),Oor=r(rOe," \u2014 "),gU=n(rOe,"A",{href:!0});var TIt=s(gU);Vor=r(TIt,"FlaubertForSequenceClassification"),TIt.forEach(t),Xor=r(rOe," (FlauBERT model)"),rOe.forEach(t),zor=i(D),jF=n(D,"LI",{});var tOe=s(jF);sFe=n(tOe,"STRONG",{});var MIt=s(sFe);Qor=r(MIt,"fnet"),MIt.forEach(t),Wor=r(tOe," \u2014 "),hU=n(tOe,"A",{href:!0});var EIt=s(hU);Uor=r(EIt,"FNetForSequenceClassification"),EIt.forEach(t),Hor=r(tOe," (FNet model)"),tOe.forEach(t),Jor=i(D),DF=n(D,"LI",{});var aOe=s(DF);lFe=n(aOe,"STRONG",{});var CIt=s(lFe);Yor=r(CIt,"funnel"),CIt.forEach(t),Kor=r(aOe," \u2014 "),uU=n(aOe,"A",{href:!0});var wIt=s(uU);Zor=r(wIt,"FunnelForSequenceClassification"),wIt.forEach(t),err=r(aOe," (Funnel Transformer model)"),aOe.forEach(t),orr=i(D),GF=n(D,"LI",{});var nOe=s(GF);iFe=n(nOe,"STRONG",{});var AIt=s(iFe);rrr=r(AIt,"gpt2"),AIt.forEach(t),trr=r(nOe," \u2014 "),pU=n(nOe,"A",{href:!0});var LIt=s(pU);arr=r(LIt,"GPT2ForSequenceClassification"),LIt.forEach(t),nrr=r(nOe," (OpenAI GPT-2 model)"),nOe.forEach(t),srr=i(D),OF=n(D,"LI",{});var sOe=s(OF);dFe=n(sOe,"STRONG",{});var yIt=s(dFe);lrr=r(yIt,"gpt_neo"),yIt.forEach(t),irr=r(sOe," \u2014 "),_U=n(sOe,"A",{href:!0});var xIt=s(_U);drr=r(xIt,"GPTNeoForSequenceClassification"),xIt.forEach(t),crr=r(sOe," (GPT Neo model)"),sOe.forEach(t),mrr=i(D),VF=n(D,"LI",{});var lOe=s(VF);cFe=n(lOe,"STRONG",{});var $It=s(cFe);frr=r($It,"gptj"),$It.forEach(t),grr=r(lOe," \u2014 "),bU=n(lOe,"A",{href:!0});var kIt=s(bU);hrr=r(kIt,"GPTJForSequenceClassification"),kIt.forEach(t),urr=r(lOe," (GPT-J model)"),lOe.forEach(t),prr=i(D),XF=n(D,"LI",{});var iOe=s(XF);mFe=n(iOe,"STRONG",{});var SIt=s(mFe);_rr=r(SIt,"ibert"),SIt.forEach(t),brr=r(iOe," \u2014 "),vU=n(iOe,"A",{href:!0});var RIt=s(vU);vrr=r(RIt,"IBertForSequenceClassification"),RIt.forEach(t),Frr=r(iOe," (I-BERT model)"),iOe.forEach(t),Trr=i(D),zF=n(D,"LI",{});var dOe=s(zF);fFe=n(dOe,"STRONG",{});var PIt=s(fFe);Mrr=r(PIt,"layoutlm"),PIt.forEach(t),Err=r(dOe," \u2014 "),FU=n(dOe,"A",{href:!0});var BIt=s(FU);Crr=r(BIt,"LayoutLMForSequenceClassification"),BIt.forEach(t),wrr=r(dOe," (LayoutLM model)"),dOe.forEach(t),Arr=i(D),QF=n(D,"LI",{});var cOe=s(QF);gFe=n(cOe,"STRONG",{});var IIt=s(gFe);Lrr=r(IIt,"layoutlmv2"),IIt.forEach(t),yrr=r(cOe," \u2014 "),TU=n(cOe,"A",{href:!0});var NIt=s(TU);xrr=r(NIt,"LayoutLMv2ForSequenceClassification"),NIt.forEach(t),$rr=r(cOe," (LayoutLMv2 model)"),cOe.forEach(t),krr=i(D),WF=n(D,"LI",{});var mOe=s(WF);hFe=n(mOe,"STRONG",{});var qIt=s(hFe);Srr=r(qIt,"layoutlmv3"),qIt.forEach(t),Rrr=r(mOe," \u2014 "),MU=n(mOe,"A",{href:!0});var jIt=s(MU);Prr=r(jIt,"LayoutLMv3ForSequenceClassification"),jIt.forEach(t),Brr=r(mOe," (LayoutLMv3 model)"),mOe.forEach(t),Irr=i(D),UF=n(D,"LI",{});var fOe=s(UF);uFe=n(fOe,"STRONG",{});var DIt=s(uFe);Nrr=r(DIt,"led"),DIt.forEach(t),qrr=r(fOe," \u2014 "),EU=n(fOe,"A",{href:!0});var GIt=s(EU);jrr=r(GIt,"LEDForSequenceClassification"),GIt.forEach(t),Drr=r(fOe," (LED model)"),fOe.forEach(t),Grr=i(D),HF=n(D,"LI",{});var gOe=s(HF);pFe=n(gOe,"STRONG",{});var OIt=s(pFe);Orr=r(OIt,"longformer"),OIt.forEach(t),Vrr=r(gOe," \u2014 "),CU=n(gOe,"A",{href:!0});var VIt=s(CU);Xrr=r(VIt,"LongformerForSequenceClassification"),VIt.forEach(t),zrr=r(gOe," (Longformer model)"),gOe.forEach(t),Qrr=i(D),JF=n(D,"LI",{});var hOe=s(JF);_Fe=n(hOe,"STRONG",{});var XIt=s(_Fe);Wrr=r(XIt,"luke"),XIt.forEach(t),Urr=r(hOe," \u2014 "),wU=n(hOe,"A",{href:!0});var zIt=s(wU);Hrr=r(zIt,"LukeForSequenceClassification"),zIt.forEach(t),Jrr=r(hOe," (LUKE model)"),hOe.forEach(t),Yrr=i(D),YF=n(D,"LI",{});var uOe=s(YF);bFe=n(uOe,"STRONG",{});var QIt=s(bFe);Krr=r(QIt,"mbart"),QIt.forEach(t),Zrr=r(uOe," \u2014 "),AU=n(uOe,"A",{href:!0});var WIt=s(AU);etr=r(WIt,"MBartForSequenceClassification"),WIt.forEach(t),otr=r(uOe," (mBART model)"),uOe.forEach(t),rtr=i(D),KF=n(D,"LI",{});var pOe=s(KF);vFe=n(pOe,"STRONG",{});var UIt=s(vFe);ttr=r(UIt,"megatron-bert"),UIt.forEach(t),atr=r(pOe," \u2014 "),LU=n(pOe,"A",{href:!0});var HIt=s(LU);ntr=r(HIt,"MegatronBertForSequenceClassification"),HIt.forEach(t),str=r(pOe," (Megatron-BERT model)"),pOe.forEach(t),ltr=i(D),ZF=n(D,"LI",{});var _Oe=s(ZF);FFe=n(_Oe,"STRONG",{});var JIt=s(FFe);itr=r(JIt,"mobilebert"),JIt.forEach(t),dtr=r(_Oe," \u2014 "),yU=n(_Oe,"A",{href:!0});var YIt=s(yU);ctr=r(YIt,"MobileBertForSequenceClassification"),YIt.forEach(t),mtr=r(_Oe," (MobileBERT model)"),_Oe.forEach(t),ftr=i(D),eT=n(D,"LI",{});var bOe=s(eT);TFe=n(bOe,"STRONG",{});var KIt=s(TFe);gtr=r(KIt,"mpnet"),KIt.forEach(t),htr=r(bOe," \u2014 "),xU=n(bOe,"A",{href:!0});var ZIt=s(xU);utr=r(ZIt,"MPNetForSequenceClassification"),ZIt.forEach(t),ptr=r(bOe," (MPNet model)"),bOe.forEach(t),_tr=i(D),oT=n(D,"LI",{});var vOe=s(oT);MFe=n(vOe,"STRONG",{});var eNt=s(MFe);btr=r(eNt,"mvp"),eNt.forEach(t),vtr=r(vOe," \u2014 "),$U=n(vOe,"A",{href:!0});var oNt=s($U);Ftr=r(oNt,"MvpForSequenceClassification"),oNt.forEach(t),Ttr=r(vOe," (MVP model)"),vOe.forEach(t),Mtr=i(D),rT=n(D,"LI",{});var FOe=s(rT);EFe=n(FOe,"STRONG",{});var rNt=s(EFe);Etr=r(rNt,"nezha"),rNt.forEach(t),Ctr=r(FOe," \u2014 "),kU=n(FOe,"A",{href:!0});var tNt=s(kU);wtr=r(tNt,"NezhaForSequenceClassification"),tNt.forEach(t),Atr=r(FOe," (Nezha model)"),FOe.forEach(t),Ltr=i(D),tT=n(D,"LI",{});var TOe=s(tT);CFe=n(TOe,"STRONG",{});var aNt=s(CFe);ytr=r(aNt,"nystromformer"),aNt.forEach(t),xtr=r(TOe," \u2014 "),SU=n(TOe,"A",{href:!0});var nNt=s(SU);$tr=r(nNt,"NystromformerForSequenceClassification"),nNt.forEach(t),ktr=r(TOe," (Nystr\xF6mformer model)"),TOe.forEach(t),Str=i(D),aT=n(D,"LI",{});var MOe=s(aT);wFe=n(MOe,"STRONG",{});var sNt=s(wFe);Rtr=r(sNt,"openai-gpt"),sNt.forEach(t),Ptr=r(MOe," \u2014 "),RU=n(MOe,"A",{href:!0});var lNt=s(RU);Btr=r(lNt,"OpenAIGPTForSequenceClassification"),lNt.forEach(t),Itr=r(MOe," (OpenAI GPT model)"),MOe.forEach(t),Ntr=i(D),nT=n(D,"LI",{});var EOe=s(nT);AFe=n(EOe,"STRONG",{});var iNt=s(AFe);qtr=r(iNt,"opt"),iNt.forEach(t),jtr=r(EOe," \u2014 "),PU=n(EOe,"A",{href:!0});var dNt=s(PU);Dtr=r(dNt,"OPTForSequenceClassification"),dNt.forEach(t),Gtr=r(EOe," (OPT model)"),EOe.forEach(t),Otr=i(D),sT=n(D,"LI",{});var COe=s(sT);LFe=n(COe,"STRONG",{});var cNt=s(LFe);Vtr=r(cNt,"perceiver"),cNt.forEach(t),Xtr=r(COe," \u2014 "),BU=n(COe,"A",{href:!0});var mNt=s(BU);ztr=r(mNt,"PerceiverForSequenceClassification"),mNt.forEach(t),Qtr=r(COe," (Perceiver model)"),COe.forEach(t),Wtr=i(D),lT=n(D,"LI",{});var wOe=s(lT);yFe=n(wOe,"STRONG",{});var fNt=s(yFe);Utr=r(fNt,"plbart"),fNt.forEach(t),Htr=r(wOe," \u2014 "),IU=n(wOe,"A",{href:!0});var gNt=s(IU);Jtr=r(gNt,"PLBartForSequenceClassification"),gNt.forEach(t),Ytr=r(wOe," (PLBart model)"),wOe.forEach(t),Ktr=i(D),iT=n(D,"LI",{});var AOe=s(iT);xFe=n(AOe,"STRONG",{});var hNt=s(xFe);Ztr=r(hNt,"qdqbert"),hNt.forEach(t),ear=r(AOe," \u2014 "),NU=n(AOe,"A",{href:!0});var uNt=s(NU);oar=r(uNt,"QDQBertForSequenceClassification"),uNt.forEach(t),rar=r(AOe," (QDQBert model)"),AOe.forEach(t),tar=i(D),dT=n(D,"LI",{});var LOe=s(dT);$Fe=n(LOe,"STRONG",{});var pNt=s($Fe);aar=r(pNt,"reformer"),pNt.forEach(t),nar=r(LOe," \u2014 "),qU=n(LOe,"A",{href:!0});var _Nt=s(qU);sar=r(_Nt,"ReformerForSequenceClassification"),_Nt.forEach(t),lar=r(LOe," (Reformer model)"),LOe.forEach(t),iar=i(D),cT=n(D,"LI",{});var yOe=s(cT);kFe=n(yOe,"STRONG",{});var bNt=s(kFe);dar=r(bNt,"rembert"),bNt.forEach(t),car=r(yOe," \u2014 "),jU=n(yOe,"A",{href:!0});var vNt=s(jU);mar=r(vNt,"RemBertForSequenceClassification"),vNt.forEach(t),far=r(yOe," (RemBERT model)"),yOe.forEach(t),gar=i(D),mT=n(D,"LI",{});var xOe=s(mT);SFe=n(xOe,"STRONG",{});var FNt=s(SFe);har=r(FNt,"roberta"),FNt.forEach(t),uar=r(xOe," \u2014 "),DU=n(xOe,"A",{href:!0});var TNt=s(DU);par=r(TNt,"RobertaForSequenceClassification"),TNt.forEach(t),_ar=r(xOe," (RoBERTa model)"),xOe.forEach(t),bar=i(D),fT=n(D,"LI",{});var $Oe=s(fT);RFe=n($Oe,"STRONG",{});var MNt=s(RFe);Far=r(MNt,"roformer"),MNt.forEach(t),Tar=r($Oe," \u2014 "),GU=n($Oe,"A",{href:!0});var ENt=s(GU);Mar=r(ENt,"RoFormerForSequenceClassification"),ENt.forEach(t),Ear=r($Oe," (RoFormer model)"),$Oe.forEach(t),Car=i(D),gT=n(D,"LI",{});var kOe=s(gT);PFe=n(kOe,"STRONG",{});var CNt=s(PFe);war=r(CNt,"squeezebert"),CNt.forEach(t),Aar=r(kOe," \u2014 "),OU=n(kOe,"A",{href:!0});var wNt=s(OU);Lar=r(wNt,"SqueezeBertForSequenceClassification"),wNt.forEach(t),yar=r(kOe," (SqueezeBERT model)"),kOe.forEach(t),xar=i(D),hT=n(D,"LI",{});var SOe=s(hT);BFe=n(SOe,"STRONG",{});var ANt=s(BFe);$ar=r(ANt,"tapas"),ANt.forEach(t),kar=r(SOe," \u2014 "),VU=n(SOe,"A",{href:!0});var LNt=s(VU);Sar=r(LNt,"TapasForSequenceClassification"),LNt.forEach(t),Rar=r(SOe," (TAPAS model)"),SOe.forEach(t),Par=i(D),uT=n(D,"LI",{});var ROe=s(uT);IFe=n(ROe,"STRONG",{});var yNt=s(IFe);Bar=r(yNt,"transfo-xl"),yNt.forEach(t),Iar=r(ROe," \u2014 "),XU=n(ROe,"A",{href:!0});var xNt=s(XU);Nar=r(xNt,"TransfoXLForSequenceClassification"),xNt.forEach(t),qar=r(ROe," (Transformer-XL model)"),ROe.forEach(t),jar=i(D),pT=n(D,"LI",{});var POe=s(pT);NFe=n(POe,"STRONG",{});var $Nt=s(NFe);Dar=r($Nt,"xlm"),$Nt.forEach(t),Gar=r(POe," \u2014 "),zU=n(POe,"A",{href:!0});var kNt=s(zU);Oar=r(kNt,"XLMForSequenceClassification"),kNt.forEach(t),Var=r(POe," (XLM model)"),POe.forEach(t),Xar=i(D),_T=n(D,"LI",{});var BOe=s(_T);qFe=n(BOe,"STRONG",{});var SNt=s(qFe);zar=r(SNt,"xlm-roberta"),SNt.forEach(t),Qar=r(BOe," \u2014 "),QU=n(BOe,"A",{href:!0});var RNt=s(QU);War=r(RNt,"XLMRobertaForSequenceClassification"),RNt.forEach(t),Uar=r(BOe," (XLM-RoBERTa model)"),BOe.forEach(t),Har=i(D),bT=n(D,"LI",{});var IOe=s(bT);jFe=n(IOe,"STRONG",{});var PNt=s(jFe);Jar=r(PNt,"xlm-roberta-xl"),PNt.forEach(t),Yar=r(IOe," \u2014 "),WU=n(IOe,"A",{href:!0});var BNt=s(WU);Kar=r(BNt,"XLMRobertaXLForSequenceClassification"),BNt.forEach(t),Zar=r(IOe," (XLM-RoBERTa-XL model)"),IOe.forEach(t),enr=i(D),vT=n(D,"LI",{});var NOe=s(vT);DFe=n(NOe,"STRONG",{});var INt=s(DFe);onr=r(INt,"xlnet"),INt.forEach(t),rnr=r(NOe," \u2014 "),UU=n(NOe,"A",{href:!0});var NNt=s(UU);tnr=r(NNt,"XLNetForSequenceClassification"),NNt.forEach(t),anr=r(NOe," (XLNet model)"),NOe.forEach(t),nnr=i(D),FT=n(D,"LI",{});var qOe=s(FT);GFe=n(qOe,"STRONG",{});var qNt=s(GFe);snr=r(qNt,"yoso"),qNt.forEach(t),lnr=r(qOe," \u2014 "),HU=n(qOe,"A",{href:!0});var jNt=s(HU);inr=r(jNt,"YosoForSequenceClassification"),jNt.forEach(t),dnr=r(qOe," (YOSO model)"),qOe.forEach(t),D.forEach(t),cnr=i(wa),TT=n(wa,"P",{});var jOe=s(TT);mnr=r(jOe,"The model is set in evaluation mode by default using "),OFe=n(jOe,"CODE",{});var DNt=s(OFe);fnr=r(DNt,"model.eval()"),DNt.forEach(t),gnr=r(jOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=n(jOe,"CODE",{});var GNt=s(VFe);hnr=r(GNt,"model.train()"),GNt.forEach(t),jOe.forEach(t),unr=i(wa),T(MT.$$.fragment,wa),wa.forEach(t),kl.forEach(t),gZe=i(m),Bd=n(m,"H2",{class:!0});var Loo=s(Bd);ET=n(Loo,"A",{id:!0,class:!0,href:!0});var ONt=s(ET);XFe=n(ONt,"SPAN",{});var VNt=s(XFe);T(Vx.$$.fragment,VNt),VNt.forEach(t),ONt.forEach(t),pnr=i(Loo),zFe=n(Loo,"SPAN",{});var XNt=s(zFe);_nr=r(XNt,"AutoModelForMultipleChoice"),XNt.forEach(t),Loo.forEach(t),hZe=i(m),Do=n(m,"DIV",{class:!0});var Sl=s(Do);T(Xx.$$.fragment,Sl),bnr=i(Sl),Id=n(Sl,"P",{});var qle=s(Id);vnr=r(qle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JU=n(qle,"A",{href:!0});var zNt=s(JU);Fnr=r(zNt,"from_pretrained()"),zNt.forEach(t),Tnr=r(qle," class method or the "),YU=n(qle,"A",{href:!0});var QNt=s(YU);Mnr=r(QNt,"from_config()"),QNt.forEach(t),Enr=r(qle,` class
method.`),qle.forEach(t),Cnr=i(Sl),zx=n(Sl,"P",{});var yoo=s(zx);wnr=r(yoo,"This class cannot be instantiated directly using "),QFe=n(yoo,"CODE",{});var WNt=s(QFe);Anr=r(WNt,"__init__()"),WNt.forEach(t),Lnr=r(yoo," (throws an error)."),yoo.forEach(t),ynr=i(Sl),Et=n(Sl,"DIV",{class:!0});var Wy=s(Et);T(Qx.$$.fragment,Wy),xnr=i(Wy),WFe=n(Wy,"P",{});var UNt=s(WFe);$nr=r(UNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UNt.forEach(t),knr=i(Wy),Nd=n(Wy,"P",{});var jle=s(Nd);Snr=r(jle,`Note:
Loading a model from its configuration file does `),UFe=n(jle,"STRONG",{});var HNt=s(UFe);Rnr=r(HNt,"not"),HNt.forEach(t),Pnr=r(jle,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(jle,"A",{href:!0});var JNt=s(KU);Bnr=r(JNt,"from_pretrained()"),JNt.forEach(t),Inr=r(jle," to load the model weights."),jle.forEach(t),Nnr=i(Wy),T(CT.$$.fragment,Wy),Wy.forEach(t),qnr=i(Sl),no=n(Sl,"DIV",{class:!0});var Aa=s(no);T(Wx.$$.fragment,Aa),jnr=i(Aa),HFe=n(Aa,"P",{});var YNt=s(HFe);Dnr=r(YNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YNt.forEach(t),Gnr=i(Aa),rn=n(Aa,"P",{});var Uy=s(rn);Onr=r(Uy,"The model class to instantiate is selected based on the "),JFe=n(Uy,"CODE",{});var KNt=s(JFe);Vnr=r(KNt,"model_type"),KNt.forEach(t),Xnr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),YFe=n(Uy,"CODE",{});var ZNt=s(YFe);znr=r(ZNt,"pretrained_model_name_or_path"),ZNt.forEach(t),Qnr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(Uy,"CODE",{});var eqt=s(KFe);Wnr=r(eqt,"pretrained_model_name_or_path"),eqt.forEach(t),Unr=r(Uy,":"),Uy.forEach(t),Hnr=i(Aa),Z=n(Aa,"UL",{});var ee=s(Z);wT=n(ee,"LI",{});var DOe=s(wT);ZFe=n(DOe,"STRONG",{});var oqt=s(ZFe);Jnr=r(oqt,"albert"),oqt.forEach(t),Ynr=r(DOe," \u2014 "),ZU=n(DOe,"A",{href:!0});var rqt=s(ZU);Knr=r(rqt,"AlbertForMultipleChoice"),rqt.forEach(t),Znr=r(DOe," (ALBERT model)"),DOe.forEach(t),esr=i(ee),AT=n(ee,"LI",{});var GOe=s(AT);eTe=n(GOe,"STRONG",{});var tqt=s(eTe);osr=r(tqt,"bert"),tqt.forEach(t),rsr=r(GOe," \u2014 "),eH=n(GOe,"A",{href:!0});var aqt=s(eH);tsr=r(aqt,"BertForMultipleChoice"),aqt.forEach(t),asr=r(GOe," (BERT model)"),GOe.forEach(t),nsr=i(ee),LT=n(ee,"LI",{});var OOe=s(LT);oTe=n(OOe,"STRONG",{});var nqt=s(oTe);ssr=r(nqt,"big_bird"),nqt.forEach(t),lsr=r(OOe," \u2014 "),oH=n(OOe,"A",{href:!0});var sqt=s(oH);isr=r(sqt,"BigBirdForMultipleChoice"),sqt.forEach(t),dsr=r(OOe," (BigBird model)"),OOe.forEach(t),csr=i(ee),yT=n(ee,"LI",{});var VOe=s(yT);rTe=n(VOe,"STRONG",{});var lqt=s(rTe);msr=r(lqt,"camembert"),lqt.forEach(t),fsr=r(VOe," \u2014 "),rH=n(VOe,"A",{href:!0});var iqt=s(rH);gsr=r(iqt,"CamembertForMultipleChoice"),iqt.forEach(t),hsr=r(VOe," (CamemBERT model)"),VOe.forEach(t),usr=i(ee),xT=n(ee,"LI",{});var XOe=s(xT);tTe=n(XOe,"STRONG",{});var dqt=s(tTe);psr=r(dqt,"canine"),dqt.forEach(t),_sr=r(XOe," \u2014 "),tH=n(XOe,"A",{href:!0});var cqt=s(tH);bsr=r(cqt,"CanineForMultipleChoice"),cqt.forEach(t),vsr=r(XOe," (CANINE model)"),XOe.forEach(t),Fsr=i(ee),$T=n(ee,"LI",{});var zOe=s($T);aTe=n(zOe,"STRONG",{});var mqt=s(aTe);Tsr=r(mqt,"convbert"),mqt.forEach(t),Msr=r(zOe," \u2014 "),aH=n(zOe,"A",{href:!0});var fqt=s(aH);Esr=r(fqt,"ConvBertForMultipleChoice"),fqt.forEach(t),Csr=r(zOe," (ConvBERT model)"),zOe.forEach(t),wsr=i(ee),kT=n(ee,"LI",{});var QOe=s(kT);nTe=n(QOe,"STRONG",{});var gqt=s(nTe);Asr=r(gqt,"data2vec-text"),gqt.forEach(t),Lsr=r(QOe," \u2014 "),nH=n(QOe,"A",{href:!0});var hqt=s(nH);ysr=r(hqt,"Data2VecTextForMultipleChoice"),hqt.forEach(t),xsr=r(QOe," (Data2VecText model)"),QOe.forEach(t),$sr=i(ee),ST=n(ee,"LI",{});var WOe=s(ST);sTe=n(WOe,"STRONG",{});var uqt=s(sTe);ksr=r(uqt,"deberta-v2"),uqt.forEach(t),Ssr=r(WOe," \u2014 "),sH=n(WOe,"A",{href:!0});var pqt=s(sH);Rsr=r(pqt,"DebertaV2ForMultipleChoice"),pqt.forEach(t),Psr=r(WOe," (DeBERTa-v2 model)"),WOe.forEach(t),Bsr=i(ee),RT=n(ee,"LI",{});var UOe=s(RT);lTe=n(UOe,"STRONG",{});var _qt=s(lTe);Isr=r(_qt,"distilbert"),_qt.forEach(t),Nsr=r(UOe," \u2014 "),lH=n(UOe,"A",{href:!0});var bqt=s(lH);qsr=r(bqt,"DistilBertForMultipleChoice"),bqt.forEach(t),jsr=r(UOe," (DistilBERT model)"),UOe.forEach(t),Dsr=i(ee),PT=n(ee,"LI",{});var HOe=s(PT);iTe=n(HOe,"STRONG",{});var vqt=s(iTe);Gsr=r(vqt,"electra"),vqt.forEach(t),Osr=r(HOe," \u2014 "),iH=n(HOe,"A",{href:!0});var Fqt=s(iH);Vsr=r(Fqt,"ElectraForMultipleChoice"),Fqt.forEach(t),Xsr=r(HOe," (ELECTRA model)"),HOe.forEach(t),zsr=i(ee),BT=n(ee,"LI",{});var JOe=s(BT);dTe=n(JOe,"STRONG",{});var Tqt=s(dTe);Qsr=r(Tqt,"ernie"),Tqt.forEach(t),Wsr=r(JOe," \u2014 "),dH=n(JOe,"A",{href:!0});var Mqt=s(dH);Usr=r(Mqt,"ErnieForMultipleChoice"),Mqt.forEach(t),Hsr=r(JOe," (ERNIE model)"),JOe.forEach(t),Jsr=i(ee),IT=n(ee,"LI",{});var YOe=s(IT);cTe=n(YOe,"STRONG",{});var Eqt=s(cTe);Ysr=r(Eqt,"flaubert"),Eqt.forEach(t),Ksr=r(YOe," \u2014 "),cH=n(YOe,"A",{href:!0});var Cqt=s(cH);Zsr=r(Cqt,"FlaubertForMultipleChoice"),Cqt.forEach(t),elr=r(YOe," (FlauBERT model)"),YOe.forEach(t),olr=i(ee),NT=n(ee,"LI",{});var KOe=s(NT);mTe=n(KOe,"STRONG",{});var wqt=s(mTe);rlr=r(wqt,"fnet"),wqt.forEach(t),tlr=r(KOe," \u2014 "),mH=n(KOe,"A",{href:!0});var Aqt=s(mH);alr=r(Aqt,"FNetForMultipleChoice"),Aqt.forEach(t),nlr=r(KOe," (FNet model)"),KOe.forEach(t),slr=i(ee),qT=n(ee,"LI",{});var ZOe=s(qT);fTe=n(ZOe,"STRONG",{});var Lqt=s(fTe);llr=r(Lqt,"funnel"),Lqt.forEach(t),ilr=r(ZOe," \u2014 "),fH=n(ZOe,"A",{href:!0});var yqt=s(fH);dlr=r(yqt,"FunnelForMultipleChoice"),yqt.forEach(t),clr=r(ZOe," (Funnel Transformer model)"),ZOe.forEach(t),mlr=i(ee),jT=n(ee,"LI",{});var eVe=s(jT);gTe=n(eVe,"STRONG",{});var xqt=s(gTe);flr=r(xqt,"ibert"),xqt.forEach(t),glr=r(eVe," \u2014 "),gH=n(eVe,"A",{href:!0});var $qt=s(gH);hlr=r($qt,"IBertForMultipleChoice"),$qt.forEach(t),ulr=r(eVe," (I-BERT model)"),eVe.forEach(t),plr=i(ee),DT=n(ee,"LI",{});var oVe=s(DT);hTe=n(oVe,"STRONG",{});var kqt=s(hTe);_lr=r(kqt,"longformer"),kqt.forEach(t),blr=r(oVe," \u2014 "),hH=n(oVe,"A",{href:!0});var Sqt=s(hH);vlr=r(Sqt,"LongformerForMultipleChoice"),Sqt.forEach(t),Flr=r(oVe," (Longformer model)"),oVe.forEach(t),Tlr=i(ee),GT=n(ee,"LI",{});var rVe=s(GT);uTe=n(rVe,"STRONG",{});var Rqt=s(uTe);Mlr=r(Rqt,"luke"),Rqt.forEach(t),Elr=r(rVe," \u2014 "),uH=n(rVe,"A",{href:!0});var Pqt=s(uH);Clr=r(Pqt,"LukeForMultipleChoice"),Pqt.forEach(t),wlr=r(rVe," (LUKE model)"),rVe.forEach(t),Alr=i(ee),OT=n(ee,"LI",{});var tVe=s(OT);pTe=n(tVe,"STRONG",{});var Bqt=s(pTe);Llr=r(Bqt,"megatron-bert"),Bqt.forEach(t),ylr=r(tVe," \u2014 "),pH=n(tVe,"A",{href:!0});var Iqt=s(pH);xlr=r(Iqt,"MegatronBertForMultipleChoice"),Iqt.forEach(t),$lr=r(tVe," (Megatron-BERT model)"),tVe.forEach(t),klr=i(ee),VT=n(ee,"LI",{});var aVe=s(VT);_Te=n(aVe,"STRONG",{});var Nqt=s(_Te);Slr=r(Nqt,"mobilebert"),Nqt.forEach(t),Rlr=r(aVe," \u2014 "),_H=n(aVe,"A",{href:!0});var qqt=s(_H);Plr=r(qqt,"MobileBertForMultipleChoice"),qqt.forEach(t),Blr=r(aVe," (MobileBERT model)"),aVe.forEach(t),Ilr=i(ee),XT=n(ee,"LI",{});var nVe=s(XT);bTe=n(nVe,"STRONG",{});var jqt=s(bTe);Nlr=r(jqt,"mpnet"),jqt.forEach(t),qlr=r(nVe," \u2014 "),bH=n(nVe,"A",{href:!0});var Dqt=s(bH);jlr=r(Dqt,"MPNetForMultipleChoice"),Dqt.forEach(t),Dlr=r(nVe," (MPNet model)"),nVe.forEach(t),Glr=i(ee),zT=n(ee,"LI",{});var sVe=s(zT);vTe=n(sVe,"STRONG",{});var Gqt=s(vTe);Olr=r(Gqt,"nezha"),Gqt.forEach(t),Vlr=r(sVe," \u2014 "),vH=n(sVe,"A",{href:!0});var Oqt=s(vH);Xlr=r(Oqt,"NezhaForMultipleChoice"),Oqt.forEach(t),zlr=r(sVe," (Nezha model)"),sVe.forEach(t),Qlr=i(ee),QT=n(ee,"LI",{});var lVe=s(QT);FTe=n(lVe,"STRONG",{});var Vqt=s(FTe);Wlr=r(Vqt,"nystromformer"),Vqt.forEach(t),Ulr=r(lVe," \u2014 "),FH=n(lVe,"A",{href:!0});var Xqt=s(FH);Hlr=r(Xqt,"NystromformerForMultipleChoice"),Xqt.forEach(t),Jlr=r(lVe," (Nystr\xF6mformer model)"),lVe.forEach(t),Ylr=i(ee),WT=n(ee,"LI",{});var iVe=s(WT);TTe=n(iVe,"STRONG",{});var zqt=s(TTe);Klr=r(zqt,"qdqbert"),zqt.forEach(t),Zlr=r(iVe," \u2014 "),TH=n(iVe,"A",{href:!0});var Qqt=s(TH);eir=r(Qqt,"QDQBertForMultipleChoice"),Qqt.forEach(t),oir=r(iVe," (QDQBert model)"),iVe.forEach(t),rir=i(ee),UT=n(ee,"LI",{});var dVe=s(UT);MTe=n(dVe,"STRONG",{});var Wqt=s(MTe);tir=r(Wqt,"rembert"),Wqt.forEach(t),air=r(dVe," \u2014 "),MH=n(dVe,"A",{href:!0});var Uqt=s(MH);nir=r(Uqt,"RemBertForMultipleChoice"),Uqt.forEach(t),sir=r(dVe," (RemBERT model)"),dVe.forEach(t),lir=i(ee),HT=n(ee,"LI",{});var cVe=s(HT);ETe=n(cVe,"STRONG",{});var Hqt=s(ETe);iir=r(Hqt,"roberta"),Hqt.forEach(t),dir=r(cVe," \u2014 "),EH=n(cVe,"A",{href:!0});var Jqt=s(EH);cir=r(Jqt,"RobertaForMultipleChoice"),Jqt.forEach(t),mir=r(cVe," (RoBERTa model)"),cVe.forEach(t),fir=i(ee),JT=n(ee,"LI",{});var mVe=s(JT);CTe=n(mVe,"STRONG",{});var Yqt=s(CTe);gir=r(Yqt,"roformer"),Yqt.forEach(t),hir=r(mVe," \u2014 "),CH=n(mVe,"A",{href:!0});var Kqt=s(CH);uir=r(Kqt,"RoFormerForMultipleChoice"),Kqt.forEach(t),pir=r(mVe," (RoFormer model)"),mVe.forEach(t),_ir=i(ee),YT=n(ee,"LI",{});var fVe=s(YT);wTe=n(fVe,"STRONG",{});var Zqt=s(wTe);bir=r(Zqt,"squeezebert"),Zqt.forEach(t),vir=r(fVe," \u2014 "),wH=n(fVe,"A",{href:!0});var ejt=s(wH);Fir=r(ejt,"SqueezeBertForMultipleChoice"),ejt.forEach(t),Tir=r(fVe," (SqueezeBERT model)"),fVe.forEach(t),Mir=i(ee),KT=n(ee,"LI",{});var gVe=s(KT);ATe=n(gVe,"STRONG",{});var ojt=s(ATe);Eir=r(ojt,"xlm"),ojt.forEach(t),Cir=r(gVe," \u2014 "),AH=n(gVe,"A",{href:!0});var rjt=s(AH);wir=r(rjt,"XLMForMultipleChoice"),rjt.forEach(t),Air=r(gVe," (XLM model)"),gVe.forEach(t),Lir=i(ee),ZT=n(ee,"LI",{});var hVe=s(ZT);LTe=n(hVe,"STRONG",{});var tjt=s(LTe);yir=r(tjt,"xlm-roberta"),tjt.forEach(t),xir=r(hVe," \u2014 "),LH=n(hVe,"A",{href:!0});var ajt=s(LH);$ir=r(ajt,"XLMRobertaForMultipleChoice"),ajt.forEach(t),kir=r(hVe," (XLM-RoBERTa model)"),hVe.forEach(t),Sir=i(ee),eM=n(ee,"LI",{});var uVe=s(eM);yTe=n(uVe,"STRONG",{});var njt=s(yTe);Rir=r(njt,"xlm-roberta-xl"),njt.forEach(t),Pir=r(uVe," \u2014 "),yH=n(uVe,"A",{href:!0});var sjt=s(yH);Bir=r(sjt,"XLMRobertaXLForMultipleChoice"),sjt.forEach(t),Iir=r(uVe," (XLM-RoBERTa-XL model)"),uVe.forEach(t),Nir=i(ee),oM=n(ee,"LI",{});var pVe=s(oM);xTe=n(pVe,"STRONG",{});var ljt=s(xTe);qir=r(ljt,"xlnet"),ljt.forEach(t),jir=r(pVe," \u2014 "),xH=n(pVe,"A",{href:!0});var ijt=s(xH);Dir=r(ijt,"XLNetForMultipleChoice"),ijt.forEach(t),Gir=r(pVe," (XLNet model)"),pVe.forEach(t),Oir=i(ee),rM=n(ee,"LI",{});var _Ve=s(rM);$Te=n(_Ve,"STRONG",{});var djt=s($Te);Vir=r(djt,"yoso"),djt.forEach(t),Xir=r(_Ve," \u2014 "),$H=n(_Ve,"A",{href:!0});var cjt=s($H);zir=r(cjt,"YosoForMultipleChoice"),cjt.forEach(t),Qir=r(_Ve," (YOSO model)"),_Ve.forEach(t),ee.forEach(t),Wir=i(Aa),tM=n(Aa,"P",{});var bVe=s(tM);Uir=r(bVe,"The model is set in evaluation mode by default using "),kTe=n(bVe,"CODE",{});var mjt=s(kTe);Hir=r(mjt,"model.eval()"),mjt.forEach(t),Jir=r(bVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),STe=n(bVe,"CODE",{});var fjt=s(STe);Yir=r(fjt,"model.train()"),fjt.forEach(t),bVe.forEach(t),Kir=i(Aa),T(aM.$$.fragment,Aa),Aa.forEach(t),Sl.forEach(t),uZe=i(m),qd=n(m,"H2",{class:!0});var xoo=s(qd);nM=n(xoo,"A",{id:!0,class:!0,href:!0});var gjt=s(nM);RTe=n(gjt,"SPAN",{});var hjt=s(RTe);T(Ux.$$.fragment,hjt),hjt.forEach(t),gjt.forEach(t),Zir=i(xoo),PTe=n(xoo,"SPAN",{});var ujt=s(PTe);edr=r(ujt,"AutoModelForNextSentencePrediction"),ujt.forEach(t),xoo.forEach(t),pZe=i(m),Go=n(m,"DIV",{class:!0});var Rl=s(Go);T(Hx.$$.fragment,Rl),odr=i(Rl),jd=n(Rl,"P",{});var Dle=s(jd);rdr=r(Dle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kH=n(Dle,"A",{href:!0});var pjt=s(kH);tdr=r(pjt,"from_pretrained()"),pjt.forEach(t),adr=r(Dle," class method or the "),SH=n(Dle,"A",{href:!0});var _jt=s(SH);ndr=r(_jt,"from_config()"),_jt.forEach(t),sdr=r(Dle,` class
method.`),Dle.forEach(t),ldr=i(Rl),Jx=n(Rl,"P",{});var $oo=s(Jx);idr=r($oo,"This class cannot be instantiated directly using "),BTe=n($oo,"CODE",{});var bjt=s(BTe);ddr=r(bjt,"__init__()"),bjt.forEach(t),cdr=r($oo," (throws an error)."),$oo.forEach(t),mdr=i(Rl),Ct=n(Rl,"DIV",{class:!0});var Hy=s(Ct);T(Yx.$$.fragment,Hy),fdr=i(Hy),ITe=n(Hy,"P",{});var vjt=s(ITe);gdr=r(vjt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vjt.forEach(t),hdr=i(Hy),Dd=n(Hy,"P",{});var Gle=s(Dd);udr=r(Gle,`Note:
Loading a model from its configuration file does `),NTe=n(Gle,"STRONG",{});var Fjt=s(NTe);pdr=r(Fjt,"not"),Fjt.forEach(t),_dr=r(Gle,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Gle,"A",{href:!0});var Tjt=s(RH);bdr=r(Tjt,"from_pretrained()"),Tjt.forEach(t),vdr=r(Gle," to load the model weights."),Gle.forEach(t),Fdr=i(Hy),T(sM.$$.fragment,Hy),Hy.forEach(t),Tdr=i(Rl),so=n(Rl,"DIV",{class:!0});var La=s(so);T(Kx.$$.fragment,La),Mdr=i(La),qTe=n(La,"P",{});var Mjt=s(qTe);Edr=r(Mjt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mjt.forEach(t),Cdr=i(La),tn=n(La,"P",{});var Jy=s(tn);wdr=r(Jy,"The model class to instantiate is selected based on the "),jTe=n(Jy,"CODE",{});var Ejt=s(jTe);Adr=r(Ejt,"model_type"),Ejt.forEach(t),Ldr=r(Jy,` property of the config object (either
passed as an argument or loaded from `),DTe=n(Jy,"CODE",{});var Cjt=s(DTe);ydr=r(Cjt,"pretrained_model_name_or_path"),Cjt.forEach(t),xdr=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(Jy,"CODE",{});var wjt=s(GTe);$dr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),kdr=r(Jy,":"),Jy.forEach(t),Sdr=i(La),Ue=n(La,"UL",{});var ct=s(Ue);lM=n(ct,"LI",{});var vVe=s(lM);OTe=n(vVe,"STRONG",{});var Ajt=s(OTe);Rdr=r(Ajt,"bert"),Ajt.forEach(t),Pdr=r(vVe," \u2014 "),PH=n(vVe,"A",{href:!0});var Ljt=s(PH);Bdr=r(Ljt,"BertForNextSentencePrediction"),Ljt.forEach(t),Idr=r(vVe," (BERT model)"),vVe.forEach(t),Ndr=i(ct),iM=n(ct,"LI",{});var FVe=s(iM);VTe=n(FVe,"STRONG",{});var yjt=s(VTe);qdr=r(yjt,"ernie"),yjt.forEach(t),jdr=r(FVe," \u2014 "),BH=n(FVe,"A",{href:!0});var xjt=s(BH);Ddr=r(xjt,"ErnieForNextSentencePrediction"),xjt.forEach(t),Gdr=r(FVe," (ERNIE model)"),FVe.forEach(t),Odr=i(ct),dM=n(ct,"LI",{});var TVe=s(dM);XTe=n(TVe,"STRONG",{});var $jt=s(XTe);Vdr=r($jt,"fnet"),$jt.forEach(t),Xdr=r(TVe," \u2014 "),IH=n(TVe,"A",{href:!0});var kjt=s(IH);zdr=r(kjt,"FNetForNextSentencePrediction"),kjt.forEach(t),Qdr=r(TVe," (FNet model)"),TVe.forEach(t),Wdr=i(ct),cM=n(ct,"LI",{});var MVe=s(cM);zTe=n(MVe,"STRONG",{});var Sjt=s(zTe);Udr=r(Sjt,"megatron-bert"),Sjt.forEach(t),Hdr=r(MVe," \u2014 "),NH=n(MVe,"A",{href:!0});var Rjt=s(NH);Jdr=r(Rjt,"MegatronBertForNextSentencePrediction"),Rjt.forEach(t),Ydr=r(MVe," (Megatron-BERT model)"),MVe.forEach(t),Kdr=i(ct),mM=n(ct,"LI",{});var EVe=s(mM);QTe=n(EVe,"STRONG",{});var Pjt=s(QTe);Zdr=r(Pjt,"mobilebert"),Pjt.forEach(t),ecr=r(EVe," \u2014 "),qH=n(EVe,"A",{href:!0});var Bjt=s(qH);ocr=r(Bjt,"MobileBertForNextSentencePrediction"),Bjt.forEach(t),rcr=r(EVe," (MobileBERT model)"),EVe.forEach(t),tcr=i(ct),fM=n(ct,"LI",{});var CVe=s(fM);WTe=n(CVe,"STRONG",{});var Ijt=s(WTe);acr=r(Ijt,"nezha"),Ijt.forEach(t),ncr=r(CVe," \u2014 "),jH=n(CVe,"A",{href:!0});var Njt=s(jH);scr=r(Njt,"NezhaForNextSentencePrediction"),Njt.forEach(t),lcr=r(CVe," (Nezha model)"),CVe.forEach(t),icr=i(ct),gM=n(ct,"LI",{});var wVe=s(gM);UTe=n(wVe,"STRONG",{});var qjt=s(UTe);dcr=r(qjt,"qdqbert"),qjt.forEach(t),ccr=r(wVe," \u2014 "),DH=n(wVe,"A",{href:!0});var jjt=s(DH);mcr=r(jjt,"QDQBertForNextSentencePrediction"),jjt.forEach(t),fcr=r(wVe," (QDQBert model)"),wVe.forEach(t),ct.forEach(t),gcr=i(La),hM=n(La,"P",{});var AVe=s(hM);hcr=r(AVe,"The model is set in evaluation mode by default using "),HTe=n(AVe,"CODE",{});var Djt=s(HTe);ucr=r(Djt,"model.eval()"),Djt.forEach(t),pcr=r(AVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JTe=n(AVe,"CODE",{});var Gjt=s(JTe);_cr=r(Gjt,"model.train()"),Gjt.forEach(t),AVe.forEach(t),bcr=i(La),T(uM.$$.fragment,La),La.forEach(t),Rl.forEach(t),_Ze=i(m),Gd=n(m,"H2",{class:!0});var koo=s(Gd);pM=n(koo,"A",{id:!0,class:!0,href:!0});var Ojt=s(pM);YTe=n(Ojt,"SPAN",{});var Vjt=s(YTe);T(Zx.$$.fragment,Vjt),Vjt.forEach(t),Ojt.forEach(t),vcr=i(koo),KTe=n(koo,"SPAN",{});var Xjt=s(KTe);Fcr=r(Xjt,"AutoModelForTokenClassification"),Xjt.forEach(t),koo.forEach(t),bZe=i(m),Oo=n(m,"DIV",{class:!0});var Pl=s(Oo);T(e$.$$.fragment,Pl),Tcr=i(Pl),Od=n(Pl,"P",{});var Ole=s(Od);Mcr=r(Ole,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GH=n(Ole,"A",{href:!0});var zjt=s(GH);Ecr=r(zjt,"from_pretrained()"),zjt.forEach(t),Ccr=r(Ole," class method or the "),OH=n(Ole,"A",{href:!0});var Qjt=s(OH);wcr=r(Qjt,"from_config()"),Qjt.forEach(t),Acr=r(Ole,` class
method.`),Ole.forEach(t),Lcr=i(Pl),o$=n(Pl,"P",{});var Soo=s(o$);ycr=r(Soo,"This class cannot be instantiated directly using "),ZTe=n(Soo,"CODE",{});var Wjt=s(ZTe);xcr=r(Wjt,"__init__()"),Wjt.forEach(t),$cr=r(Soo," (throws an error)."),Soo.forEach(t),kcr=i(Pl),wt=n(Pl,"DIV",{class:!0});var Yy=s(wt);T(r$.$$.fragment,Yy),Scr=i(Yy),eMe=n(Yy,"P",{});var Ujt=s(eMe);Rcr=r(Ujt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ujt.forEach(t),Pcr=i(Yy),Vd=n(Yy,"P",{});var Vle=s(Vd);Bcr=r(Vle,`Note:
Loading a model from its configuration file does `),oMe=n(Vle,"STRONG",{});var Hjt=s(oMe);Icr=r(Hjt,"not"),Hjt.forEach(t),Ncr=r(Vle,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(Vle,"A",{href:!0});var Jjt=s(VH);qcr=r(Jjt,"from_pretrained()"),Jjt.forEach(t),jcr=r(Vle," to load the model weights."),Vle.forEach(t),Dcr=i(Yy),T(_M.$$.fragment,Yy),Yy.forEach(t),Gcr=i(Pl),lo=n(Pl,"DIV",{class:!0});var ya=s(lo);T(t$.$$.fragment,ya),Ocr=i(ya),rMe=n(ya,"P",{});var Yjt=s(rMe);Vcr=r(Yjt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yjt.forEach(t),Xcr=i(ya),an=n(ya,"P",{});var Ky=s(an);zcr=r(Ky,"The model class to instantiate is selected based on the "),tMe=n(Ky,"CODE",{});var Kjt=s(tMe);Qcr=r(Kjt,"model_type"),Kjt.forEach(t),Wcr=r(Ky,` property of the config object (either
passed as an argument or loaded from `),aMe=n(Ky,"CODE",{});var Zjt=s(aMe);Ucr=r(Zjt,"pretrained_model_name_or_path"),Zjt.forEach(t),Hcr=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(Ky,"CODE",{});var eDt=s(nMe);Jcr=r(eDt,"pretrained_model_name_or_path"),eDt.forEach(t),Ycr=r(Ky,":"),Ky.forEach(t),Kcr=i(ya),J=n(ya,"UL",{});var K=s(J);bM=n(K,"LI",{});var LVe=s(bM);sMe=n(LVe,"STRONG",{});var oDt=s(sMe);Zcr=r(oDt,"albert"),oDt.forEach(t),emr=r(LVe," \u2014 "),XH=n(LVe,"A",{href:!0});var rDt=s(XH);omr=r(rDt,"AlbertForTokenClassification"),rDt.forEach(t),rmr=r(LVe," (ALBERT model)"),LVe.forEach(t),tmr=i(K),vM=n(K,"LI",{});var yVe=s(vM);lMe=n(yVe,"STRONG",{});var tDt=s(lMe);amr=r(tDt,"bert"),tDt.forEach(t),nmr=r(yVe," \u2014 "),zH=n(yVe,"A",{href:!0});var aDt=s(zH);smr=r(aDt,"BertForTokenClassification"),aDt.forEach(t),lmr=r(yVe," (BERT model)"),yVe.forEach(t),imr=i(K),FM=n(K,"LI",{});var xVe=s(FM);iMe=n(xVe,"STRONG",{});var nDt=s(iMe);dmr=r(nDt,"big_bird"),nDt.forEach(t),cmr=r(xVe," \u2014 "),QH=n(xVe,"A",{href:!0});var sDt=s(QH);mmr=r(sDt,"BigBirdForTokenClassification"),sDt.forEach(t),fmr=r(xVe," (BigBird model)"),xVe.forEach(t),gmr=i(K),TM=n(K,"LI",{});var $Ve=s(TM);dMe=n($Ve,"STRONG",{});var lDt=s(dMe);hmr=r(lDt,"bloom"),lDt.forEach(t),umr=r($Ve," \u2014 "),WH=n($Ve,"A",{href:!0});var iDt=s(WH);pmr=r(iDt,"BloomForTokenClassification"),iDt.forEach(t),_mr=r($Ve," (BLOOM model)"),$Ve.forEach(t),bmr=i(K),MM=n(K,"LI",{});var kVe=s(MM);cMe=n(kVe,"STRONG",{});var dDt=s(cMe);vmr=r(dDt,"camembert"),dDt.forEach(t),Fmr=r(kVe," \u2014 "),UH=n(kVe,"A",{href:!0});var cDt=s(UH);Tmr=r(cDt,"CamembertForTokenClassification"),cDt.forEach(t),Mmr=r(kVe," (CamemBERT model)"),kVe.forEach(t),Emr=i(K),EM=n(K,"LI",{});var SVe=s(EM);mMe=n(SVe,"STRONG",{});var mDt=s(mMe);Cmr=r(mDt,"canine"),mDt.forEach(t),wmr=r(SVe," \u2014 "),HH=n(SVe,"A",{href:!0});var fDt=s(HH);Amr=r(fDt,"CanineForTokenClassification"),fDt.forEach(t),Lmr=r(SVe," (CANINE model)"),SVe.forEach(t),ymr=i(K),CM=n(K,"LI",{});var RVe=s(CM);fMe=n(RVe,"STRONG",{});var gDt=s(fMe);xmr=r(gDt,"convbert"),gDt.forEach(t),$mr=r(RVe," \u2014 "),JH=n(RVe,"A",{href:!0});var hDt=s(JH);kmr=r(hDt,"ConvBertForTokenClassification"),hDt.forEach(t),Smr=r(RVe," (ConvBERT model)"),RVe.forEach(t),Rmr=i(K),wM=n(K,"LI",{});var PVe=s(wM);gMe=n(PVe,"STRONG",{});var uDt=s(gMe);Pmr=r(uDt,"data2vec-text"),uDt.forEach(t),Bmr=r(PVe," \u2014 "),YH=n(PVe,"A",{href:!0});var pDt=s(YH);Imr=r(pDt,"Data2VecTextForTokenClassification"),pDt.forEach(t),Nmr=r(PVe," (Data2VecText model)"),PVe.forEach(t),qmr=i(K),AM=n(K,"LI",{});var BVe=s(AM);hMe=n(BVe,"STRONG",{});var _Dt=s(hMe);jmr=r(_Dt,"deberta"),_Dt.forEach(t),Dmr=r(BVe," \u2014 "),KH=n(BVe,"A",{href:!0});var bDt=s(KH);Gmr=r(bDt,"DebertaForTokenClassification"),bDt.forEach(t),Omr=r(BVe," (DeBERTa model)"),BVe.forEach(t),Vmr=i(K),LM=n(K,"LI",{});var IVe=s(LM);uMe=n(IVe,"STRONG",{});var vDt=s(uMe);Xmr=r(vDt,"deberta-v2"),vDt.forEach(t),zmr=r(IVe," \u2014 "),ZH=n(IVe,"A",{href:!0});var FDt=s(ZH);Qmr=r(FDt,"DebertaV2ForTokenClassification"),FDt.forEach(t),Wmr=r(IVe," (DeBERTa-v2 model)"),IVe.forEach(t),Umr=i(K),yM=n(K,"LI",{});var NVe=s(yM);pMe=n(NVe,"STRONG",{});var TDt=s(pMe);Hmr=r(TDt,"distilbert"),TDt.forEach(t),Jmr=r(NVe," \u2014 "),eJ=n(NVe,"A",{href:!0});var MDt=s(eJ);Ymr=r(MDt,"DistilBertForTokenClassification"),MDt.forEach(t),Kmr=r(NVe," (DistilBERT model)"),NVe.forEach(t),Zmr=i(K),xM=n(K,"LI",{});var qVe=s(xM);_Me=n(qVe,"STRONG",{});var EDt=s(_Me);efr=r(EDt,"electra"),EDt.forEach(t),ofr=r(qVe," \u2014 "),oJ=n(qVe,"A",{href:!0});var CDt=s(oJ);rfr=r(CDt,"ElectraForTokenClassification"),CDt.forEach(t),tfr=r(qVe," (ELECTRA model)"),qVe.forEach(t),afr=i(K),$M=n(K,"LI",{});var jVe=s($M);bMe=n(jVe,"STRONG",{});var wDt=s(bMe);nfr=r(wDt,"ernie"),wDt.forEach(t),sfr=r(jVe," \u2014 "),rJ=n(jVe,"A",{href:!0});var ADt=s(rJ);lfr=r(ADt,"ErnieForTokenClassification"),ADt.forEach(t),ifr=r(jVe," (ERNIE model)"),jVe.forEach(t),dfr=i(K),kM=n(K,"LI",{});var DVe=s(kM);vMe=n(DVe,"STRONG",{});var LDt=s(vMe);cfr=r(LDt,"flaubert"),LDt.forEach(t),mfr=r(DVe," \u2014 "),tJ=n(DVe,"A",{href:!0});var yDt=s(tJ);ffr=r(yDt,"FlaubertForTokenClassification"),yDt.forEach(t),gfr=r(DVe," (FlauBERT model)"),DVe.forEach(t),hfr=i(K),SM=n(K,"LI",{});var GVe=s(SM);FMe=n(GVe,"STRONG",{});var xDt=s(FMe);ufr=r(xDt,"fnet"),xDt.forEach(t),pfr=r(GVe," \u2014 "),aJ=n(GVe,"A",{href:!0});var $Dt=s(aJ);_fr=r($Dt,"FNetForTokenClassification"),$Dt.forEach(t),bfr=r(GVe," (FNet model)"),GVe.forEach(t),vfr=i(K),RM=n(K,"LI",{});var OVe=s(RM);TMe=n(OVe,"STRONG",{});var kDt=s(TMe);Ffr=r(kDt,"funnel"),kDt.forEach(t),Tfr=r(OVe," \u2014 "),nJ=n(OVe,"A",{href:!0});var SDt=s(nJ);Mfr=r(SDt,"FunnelForTokenClassification"),SDt.forEach(t),Efr=r(OVe," (Funnel Transformer model)"),OVe.forEach(t),Cfr=i(K),PM=n(K,"LI",{});var VVe=s(PM);MMe=n(VVe,"STRONG",{});var RDt=s(MMe);wfr=r(RDt,"gpt2"),RDt.forEach(t),Afr=r(VVe," \u2014 "),sJ=n(VVe,"A",{href:!0});var PDt=s(sJ);Lfr=r(PDt,"GPT2ForTokenClassification"),PDt.forEach(t),yfr=r(VVe," (OpenAI GPT-2 model)"),VVe.forEach(t),xfr=i(K),BM=n(K,"LI",{});var XVe=s(BM);EMe=n(XVe,"STRONG",{});var BDt=s(EMe);$fr=r(BDt,"ibert"),BDt.forEach(t),kfr=r(XVe," \u2014 "),lJ=n(XVe,"A",{href:!0});var IDt=s(lJ);Sfr=r(IDt,"IBertForTokenClassification"),IDt.forEach(t),Rfr=r(XVe," (I-BERT model)"),XVe.forEach(t),Pfr=i(K),IM=n(K,"LI",{});var zVe=s(IM);CMe=n(zVe,"STRONG",{});var NDt=s(CMe);Bfr=r(NDt,"layoutlm"),NDt.forEach(t),Ifr=r(zVe," \u2014 "),iJ=n(zVe,"A",{href:!0});var qDt=s(iJ);Nfr=r(qDt,"LayoutLMForTokenClassification"),qDt.forEach(t),qfr=r(zVe," (LayoutLM model)"),zVe.forEach(t),jfr=i(K),NM=n(K,"LI",{});var QVe=s(NM);wMe=n(QVe,"STRONG",{});var jDt=s(wMe);Dfr=r(jDt,"layoutlmv2"),jDt.forEach(t),Gfr=r(QVe," \u2014 "),dJ=n(QVe,"A",{href:!0});var DDt=s(dJ);Ofr=r(DDt,"LayoutLMv2ForTokenClassification"),DDt.forEach(t),Vfr=r(QVe," (LayoutLMv2 model)"),QVe.forEach(t),Xfr=i(K),qM=n(K,"LI",{});var WVe=s(qM);AMe=n(WVe,"STRONG",{});var GDt=s(AMe);zfr=r(GDt,"layoutlmv3"),GDt.forEach(t),Qfr=r(WVe," \u2014 "),cJ=n(WVe,"A",{href:!0});var ODt=s(cJ);Wfr=r(ODt,"LayoutLMv3ForTokenClassification"),ODt.forEach(t),Ufr=r(WVe," (LayoutLMv3 model)"),WVe.forEach(t),Hfr=i(K),jM=n(K,"LI",{});var UVe=s(jM);LMe=n(UVe,"STRONG",{});var VDt=s(LMe);Jfr=r(VDt,"longformer"),VDt.forEach(t),Yfr=r(UVe," \u2014 "),mJ=n(UVe,"A",{href:!0});var XDt=s(mJ);Kfr=r(XDt,"LongformerForTokenClassification"),XDt.forEach(t),Zfr=r(UVe," (Longformer model)"),UVe.forEach(t),egr=i(K),DM=n(K,"LI",{});var HVe=s(DM);yMe=n(HVe,"STRONG",{});var zDt=s(yMe);ogr=r(zDt,"luke"),zDt.forEach(t),rgr=r(HVe," \u2014 "),fJ=n(HVe,"A",{href:!0});var QDt=s(fJ);tgr=r(QDt,"LukeForTokenClassification"),QDt.forEach(t),agr=r(HVe," (LUKE model)"),HVe.forEach(t),ngr=i(K),GM=n(K,"LI",{});var JVe=s(GM);xMe=n(JVe,"STRONG",{});var WDt=s(xMe);sgr=r(WDt,"megatron-bert"),WDt.forEach(t),lgr=r(JVe," \u2014 "),gJ=n(JVe,"A",{href:!0});var UDt=s(gJ);igr=r(UDt,"MegatronBertForTokenClassification"),UDt.forEach(t),dgr=r(JVe," (Megatron-BERT model)"),JVe.forEach(t),cgr=i(K),OM=n(K,"LI",{});var YVe=s(OM);$Me=n(YVe,"STRONG",{});var HDt=s($Me);mgr=r(HDt,"mobilebert"),HDt.forEach(t),fgr=r(YVe," \u2014 "),hJ=n(YVe,"A",{href:!0});var JDt=s(hJ);ggr=r(JDt,"MobileBertForTokenClassification"),JDt.forEach(t),hgr=r(YVe," (MobileBERT model)"),YVe.forEach(t),ugr=i(K),VM=n(K,"LI",{});var KVe=s(VM);kMe=n(KVe,"STRONG",{});var YDt=s(kMe);pgr=r(YDt,"mpnet"),YDt.forEach(t),_gr=r(KVe," \u2014 "),uJ=n(KVe,"A",{href:!0});var KDt=s(uJ);bgr=r(KDt,"MPNetForTokenClassification"),KDt.forEach(t),vgr=r(KVe," (MPNet model)"),KVe.forEach(t),Fgr=i(K),XM=n(K,"LI",{});var ZVe=s(XM);SMe=n(ZVe,"STRONG",{});var ZDt=s(SMe);Tgr=r(ZDt,"nezha"),ZDt.forEach(t),Mgr=r(ZVe," \u2014 "),pJ=n(ZVe,"A",{href:!0});var eGt=s(pJ);Egr=r(eGt,"NezhaForTokenClassification"),eGt.forEach(t),Cgr=r(ZVe," (Nezha model)"),ZVe.forEach(t),wgr=i(K),zM=n(K,"LI",{});var eXe=s(zM);RMe=n(eXe,"STRONG",{});var oGt=s(RMe);Agr=r(oGt,"nystromformer"),oGt.forEach(t),Lgr=r(eXe," \u2014 "),_J=n(eXe,"A",{href:!0});var rGt=s(_J);ygr=r(rGt,"NystromformerForTokenClassification"),rGt.forEach(t),xgr=r(eXe," (Nystr\xF6mformer model)"),eXe.forEach(t),$gr=i(K),QM=n(K,"LI",{});var oXe=s(QM);PMe=n(oXe,"STRONG",{});var tGt=s(PMe);kgr=r(tGt,"qdqbert"),tGt.forEach(t),Sgr=r(oXe," \u2014 "),bJ=n(oXe,"A",{href:!0});var aGt=s(bJ);Rgr=r(aGt,"QDQBertForTokenClassification"),aGt.forEach(t),Pgr=r(oXe," (QDQBert model)"),oXe.forEach(t),Bgr=i(K),WM=n(K,"LI",{});var rXe=s(WM);BMe=n(rXe,"STRONG",{});var nGt=s(BMe);Igr=r(nGt,"rembert"),nGt.forEach(t),Ngr=r(rXe," \u2014 "),vJ=n(rXe,"A",{href:!0});var sGt=s(vJ);qgr=r(sGt,"RemBertForTokenClassification"),sGt.forEach(t),jgr=r(rXe," (RemBERT model)"),rXe.forEach(t),Dgr=i(K),UM=n(K,"LI",{});var tXe=s(UM);IMe=n(tXe,"STRONG",{});var lGt=s(IMe);Ggr=r(lGt,"roberta"),lGt.forEach(t),Ogr=r(tXe," \u2014 "),FJ=n(tXe,"A",{href:!0});var iGt=s(FJ);Vgr=r(iGt,"RobertaForTokenClassification"),iGt.forEach(t),Xgr=r(tXe," (RoBERTa model)"),tXe.forEach(t),zgr=i(K),HM=n(K,"LI",{});var aXe=s(HM);NMe=n(aXe,"STRONG",{});var dGt=s(NMe);Qgr=r(dGt,"roformer"),dGt.forEach(t),Wgr=r(aXe," \u2014 "),TJ=n(aXe,"A",{href:!0});var cGt=s(TJ);Ugr=r(cGt,"RoFormerForTokenClassification"),cGt.forEach(t),Hgr=r(aXe," (RoFormer model)"),aXe.forEach(t),Jgr=i(K),JM=n(K,"LI",{});var nXe=s(JM);qMe=n(nXe,"STRONG",{});var mGt=s(qMe);Ygr=r(mGt,"squeezebert"),mGt.forEach(t),Kgr=r(nXe," \u2014 "),MJ=n(nXe,"A",{href:!0});var fGt=s(MJ);Zgr=r(fGt,"SqueezeBertForTokenClassification"),fGt.forEach(t),ehr=r(nXe," (SqueezeBERT model)"),nXe.forEach(t),ohr=i(K),YM=n(K,"LI",{});var sXe=s(YM);jMe=n(sXe,"STRONG",{});var gGt=s(jMe);rhr=r(gGt,"xlm"),gGt.forEach(t),thr=r(sXe," \u2014 "),EJ=n(sXe,"A",{href:!0});var hGt=s(EJ);ahr=r(hGt,"XLMForTokenClassification"),hGt.forEach(t),nhr=r(sXe," (XLM model)"),sXe.forEach(t),shr=i(K),KM=n(K,"LI",{});var lXe=s(KM);DMe=n(lXe,"STRONG",{});var uGt=s(DMe);lhr=r(uGt,"xlm-roberta"),uGt.forEach(t),ihr=r(lXe," \u2014 "),CJ=n(lXe,"A",{href:!0});var pGt=s(CJ);dhr=r(pGt,"XLMRobertaForTokenClassification"),pGt.forEach(t),chr=r(lXe," (XLM-RoBERTa model)"),lXe.forEach(t),mhr=i(K),ZM=n(K,"LI",{});var iXe=s(ZM);GMe=n(iXe,"STRONG",{});var _Gt=s(GMe);fhr=r(_Gt,"xlm-roberta-xl"),_Gt.forEach(t),ghr=r(iXe," \u2014 "),wJ=n(iXe,"A",{href:!0});var bGt=s(wJ);hhr=r(bGt,"XLMRobertaXLForTokenClassification"),bGt.forEach(t),uhr=r(iXe," (XLM-RoBERTa-XL model)"),iXe.forEach(t),phr=i(K),eE=n(K,"LI",{});var dXe=s(eE);OMe=n(dXe,"STRONG",{});var vGt=s(OMe);_hr=r(vGt,"xlnet"),vGt.forEach(t),bhr=r(dXe," \u2014 "),AJ=n(dXe,"A",{href:!0});var FGt=s(AJ);vhr=r(FGt,"XLNetForTokenClassification"),FGt.forEach(t),Fhr=r(dXe," (XLNet model)"),dXe.forEach(t),Thr=i(K),oE=n(K,"LI",{});var cXe=s(oE);VMe=n(cXe,"STRONG",{});var TGt=s(VMe);Mhr=r(TGt,"yoso"),TGt.forEach(t),Ehr=r(cXe," \u2014 "),LJ=n(cXe,"A",{href:!0});var MGt=s(LJ);Chr=r(MGt,"YosoForTokenClassification"),MGt.forEach(t),whr=r(cXe," (YOSO model)"),cXe.forEach(t),K.forEach(t),Ahr=i(ya),rE=n(ya,"P",{});var mXe=s(rE);Lhr=r(mXe,"The model is set in evaluation mode by default using "),XMe=n(mXe,"CODE",{});var EGt=s(XMe);yhr=r(EGt,"model.eval()"),EGt.forEach(t),xhr=r(mXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zMe=n(mXe,"CODE",{});var CGt=s(zMe);$hr=r(CGt,"model.train()"),CGt.forEach(t),mXe.forEach(t),khr=i(ya),T(tE.$$.fragment,ya),ya.forEach(t),Pl.forEach(t),vZe=i(m),Xd=n(m,"H2",{class:!0});var Roo=s(Xd);aE=n(Roo,"A",{id:!0,class:!0,href:!0});var wGt=s(aE);QMe=n(wGt,"SPAN",{});var AGt=s(QMe);T(a$.$$.fragment,AGt),AGt.forEach(t),wGt.forEach(t),Shr=i(Roo),WMe=n(Roo,"SPAN",{});var LGt=s(WMe);Rhr=r(LGt,"AutoModelForQuestionAnswering"),LGt.forEach(t),Roo.forEach(t),FZe=i(m),Vo=n(m,"DIV",{class:!0});var Bl=s(Vo);T(n$.$$.fragment,Bl),Phr=i(Bl),zd=n(Bl,"P",{});var Xle=s(zd);Bhr=r(Xle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yJ=n(Xle,"A",{href:!0});var yGt=s(yJ);Ihr=r(yGt,"from_pretrained()"),yGt.forEach(t),Nhr=r(Xle," class method or the "),xJ=n(Xle,"A",{href:!0});var xGt=s(xJ);qhr=r(xGt,"from_config()"),xGt.forEach(t),jhr=r(Xle,` class
method.`),Xle.forEach(t),Dhr=i(Bl),s$=n(Bl,"P",{});var Poo=s(s$);Ghr=r(Poo,"This class cannot be instantiated directly using "),UMe=n(Poo,"CODE",{});var $Gt=s(UMe);Ohr=r($Gt,"__init__()"),$Gt.forEach(t),Vhr=r(Poo," (throws an error)."),Poo.forEach(t),Xhr=i(Bl),At=n(Bl,"DIV",{class:!0});var Zy=s(At);T(l$.$$.fragment,Zy),zhr=i(Zy),HMe=n(Zy,"P",{});var kGt=s(HMe);Qhr=r(kGt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kGt.forEach(t),Whr=i(Zy),Qd=n(Zy,"P",{});var zle=s(Qd);Uhr=r(zle,`Note:
Loading a model from its configuration file does `),JMe=n(zle,"STRONG",{});var SGt=s(JMe);Hhr=r(SGt,"not"),SGt.forEach(t),Jhr=r(zle,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(zle,"A",{href:!0});var RGt=s($J);Yhr=r(RGt,"from_pretrained()"),RGt.forEach(t),Khr=r(zle," to load the model weights."),zle.forEach(t),Zhr=i(Zy),T(nE.$$.fragment,Zy),Zy.forEach(t),eur=i(Bl),io=n(Bl,"DIV",{class:!0});var xa=s(io);T(i$.$$.fragment,xa),our=i(xa),YMe=n(xa,"P",{});var PGt=s(YMe);rur=r(PGt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PGt.forEach(t),tur=i(xa),nn=n(xa,"P",{});var e8=s(nn);aur=r(e8,"The model class to instantiate is selected based on the "),KMe=n(e8,"CODE",{});var BGt=s(KMe);nur=r(BGt,"model_type"),BGt.forEach(t),sur=r(e8,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(e8,"CODE",{});var IGt=s(ZMe);lur=r(IGt,"pretrained_model_name_or_path"),IGt.forEach(t),iur=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(e8,"CODE",{});var NGt=s(eEe);dur=r(NGt,"pretrained_model_name_or_path"),NGt.forEach(t),cur=r(e8,":"),e8.forEach(t),mur=i(xa),V=n(xa,"UL",{});var X=s(V);sE=n(X,"LI",{});var fXe=s(sE);oEe=n(fXe,"STRONG",{});var qGt=s(oEe);fur=r(qGt,"albert"),qGt.forEach(t),gur=r(fXe," \u2014 "),kJ=n(fXe,"A",{href:!0});var jGt=s(kJ);hur=r(jGt,"AlbertForQuestionAnswering"),jGt.forEach(t),uur=r(fXe," (ALBERT model)"),fXe.forEach(t),pur=i(X),lE=n(X,"LI",{});var gXe=s(lE);rEe=n(gXe,"STRONG",{});var DGt=s(rEe);_ur=r(DGt,"bart"),DGt.forEach(t),bur=r(gXe," \u2014 "),SJ=n(gXe,"A",{href:!0});var GGt=s(SJ);vur=r(GGt,"BartForQuestionAnswering"),GGt.forEach(t),Fur=r(gXe," (BART model)"),gXe.forEach(t),Tur=i(X),iE=n(X,"LI",{});var hXe=s(iE);tEe=n(hXe,"STRONG",{});var OGt=s(tEe);Mur=r(OGt,"bert"),OGt.forEach(t),Eur=r(hXe," \u2014 "),RJ=n(hXe,"A",{href:!0});var VGt=s(RJ);Cur=r(VGt,"BertForQuestionAnswering"),VGt.forEach(t),wur=r(hXe," (BERT model)"),hXe.forEach(t),Aur=i(X),dE=n(X,"LI",{});var uXe=s(dE);aEe=n(uXe,"STRONG",{});var XGt=s(aEe);Lur=r(XGt,"big_bird"),XGt.forEach(t),yur=r(uXe," \u2014 "),PJ=n(uXe,"A",{href:!0});var zGt=s(PJ);xur=r(zGt,"BigBirdForQuestionAnswering"),zGt.forEach(t),$ur=r(uXe," (BigBird model)"),uXe.forEach(t),kur=i(X),cE=n(X,"LI",{});var pXe=s(cE);nEe=n(pXe,"STRONG",{});var QGt=s(nEe);Sur=r(QGt,"bigbird_pegasus"),QGt.forEach(t),Rur=r(pXe," \u2014 "),BJ=n(pXe,"A",{href:!0});var WGt=s(BJ);Pur=r(WGt,"BigBirdPegasusForQuestionAnswering"),WGt.forEach(t),Bur=r(pXe," (BigBird-Pegasus model)"),pXe.forEach(t),Iur=i(X),mE=n(X,"LI",{});var _Xe=s(mE);sEe=n(_Xe,"STRONG",{});var UGt=s(sEe);Nur=r(UGt,"camembert"),UGt.forEach(t),qur=r(_Xe," \u2014 "),IJ=n(_Xe,"A",{href:!0});var HGt=s(IJ);jur=r(HGt,"CamembertForQuestionAnswering"),HGt.forEach(t),Dur=r(_Xe," (CamemBERT model)"),_Xe.forEach(t),Gur=i(X),fE=n(X,"LI",{});var bXe=s(fE);lEe=n(bXe,"STRONG",{});var JGt=s(lEe);Our=r(JGt,"canine"),JGt.forEach(t),Vur=r(bXe," \u2014 "),NJ=n(bXe,"A",{href:!0});var YGt=s(NJ);Xur=r(YGt,"CanineForQuestionAnswering"),YGt.forEach(t),zur=r(bXe," (CANINE model)"),bXe.forEach(t),Qur=i(X),gE=n(X,"LI",{});var vXe=s(gE);iEe=n(vXe,"STRONG",{});var KGt=s(iEe);Wur=r(KGt,"convbert"),KGt.forEach(t),Uur=r(vXe," \u2014 "),qJ=n(vXe,"A",{href:!0});var ZGt=s(qJ);Hur=r(ZGt,"ConvBertForQuestionAnswering"),ZGt.forEach(t),Jur=r(vXe," (ConvBERT model)"),vXe.forEach(t),Yur=i(X),hE=n(X,"LI",{});var FXe=s(hE);dEe=n(FXe,"STRONG",{});var eOt=s(dEe);Kur=r(eOt,"data2vec-text"),eOt.forEach(t),Zur=r(FXe," \u2014 "),jJ=n(FXe,"A",{href:!0});var oOt=s(jJ);epr=r(oOt,"Data2VecTextForQuestionAnswering"),oOt.forEach(t),opr=r(FXe," (Data2VecText model)"),FXe.forEach(t),rpr=i(X),uE=n(X,"LI",{});var TXe=s(uE);cEe=n(TXe,"STRONG",{});var rOt=s(cEe);tpr=r(rOt,"deberta"),rOt.forEach(t),apr=r(TXe," \u2014 "),DJ=n(TXe,"A",{href:!0});var tOt=s(DJ);npr=r(tOt,"DebertaForQuestionAnswering"),tOt.forEach(t),spr=r(TXe," (DeBERTa model)"),TXe.forEach(t),lpr=i(X),pE=n(X,"LI",{});var MXe=s(pE);mEe=n(MXe,"STRONG",{});var aOt=s(mEe);ipr=r(aOt,"deberta-v2"),aOt.forEach(t),dpr=r(MXe," \u2014 "),GJ=n(MXe,"A",{href:!0});var nOt=s(GJ);cpr=r(nOt,"DebertaV2ForQuestionAnswering"),nOt.forEach(t),mpr=r(MXe," (DeBERTa-v2 model)"),MXe.forEach(t),fpr=i(X),_E=n(X,"LI",{});var EXe=s(_E);fEe=n(EXe,"STRONG",{});var sOt=s(fEe);gpr=r(sOt,"distilbert"),sOt.forEach(t),hpr=r(EXe," \u2014 "),OJ=n(EXe,"A",{href:!0});var lOt=s(OJ);upr=r(lOt,"DistilBertForQuestionAnswering"),lOt.forEach(t),ppr=r(EXe," (DistilBERT model)"),EXe.forEach(t),_pr=i(X),bE=n(X,"LI",{});var CXe=s(bE);gEe=n(CXe,"STRONG",{});var iOt=s(gEe);bpr=r(iOt,"electra"),iOt.forEach(t),vpr=r(CXe," \u2014 "),VJ=n(CXe,"A",{href:!0});var dOt=s(VJ);Fpr=r(dOt,"ElectraForQuestionAnswering"),dOt.forEach(t),Tpr=r(CXe," (ELECTRA model)"),CXe.forEach(t),Mpr=i(X),vE=n(X,"LI",{});var wXe=s(vE);hEe=n(wXe,"STRONG",{});var cOt=s(hEe);Epr=r(cOt,"ernie"),cOt.forEach(t),Cpr=r(wXe," \u2014 "),XJ=n(wXe,"A",{href:!0});var mOt=s(XJ);wpr=r(mOt,"ErnieForQuestionAnswering"),mOt.forEach(t),Apr=r(wXe," (ERNIE model)"),wXe.forEach(t),Lpr=i(X),FE=n(X,"LI",{});var AXe=s(FE);uEe=n(AXe,"STRONG",{});var fOt=s(uEe);ypr=r(fOt,"flaubert"),fOt.forEach(t),xpr=r(AXe," \u2014 "),zJ=n(AXe,"A",{href:!0});var gOt=s(zJ);$pr=r(gOt,"FlaubertForQuestionAnsweringSimple"),gOt.forEach(t),kpr=r(AXe," (FlauBERT model)"),AXe.forEach(t),Spr=i(X),TE=n(X,"LI",{});var LXe=s(TE);pEe=n(LXe,"STRONG",{});var hOt=s(pEe);Rpr=r(hOt,"fnet"),hOt.forEach(t),Ppr=r(LXe," \u2014 "),QJ=n(LXe,"A",{href:!0});var uOt=s(QJ);Bpr=r(uOt,"FNetForQuestionAnswering"),uOt.forEach(t),Ipr=r(LXe," (FNet model)"),LXe.forEach(t),Npr=i(X),ME=n(X,"LI",{});var yXe=s(ME);_Ee=n(yXe,"STRONG",{});var pOt=s(_Ee);qpr=r(pOt,"funnel"),pOt.forEach(t),jpr=r(yXe," \u2014 "),WJ=n(yXe,"A",{href:!0});var _Ot=s(WJ);Dpr=r(_Ot,"FunnelForQuestionAnswering"),_Ot.forEach(t),Gpr=r(yXe," (Funnel Transformer model)"),yXe.forEach(t),Opr=i(X),EE=n(X,"LI",{});var xXe=s(EE);bEe=n(xXe,"STRONG",{});var bOt=s(bEe);Vpr=r(bOt,"gptj"),bOt.forEach(t),Xpr=r(xXe," \u2014 "),UJ=n(xXe,"A",{href:!0});var vOt=s(UJ);zpr=r(vOt,"GPTJForQuestionAnswering"),vOt.forEach(t),Qpr=r(xXe," (GPT-J model)"),xXe.forEach(t),Wpr=i(X),CE=n(X,"LI",{});var $Xe=s(CE);vEe=n($Xe,"STRONG",{});var FOt=s(vEe);Upr=r(FOt,"ibert"),FOt.forEach(t),Hpr=r($Xe," \u2014 "),HJ=n($Xe,"A",{href:!0});var TOt=s(HJ);Jpr=r(TOt,"IBertForQuestionAnswering"),TOt.forEach(t),Ypr=r($Xe," (I-BERT model)"),$Xe.forEach(t),Kpr=i(X),wE=n(X,"LI",{});var kXe=s(wE);FEe=n(kXe,"STRONG",{});var MOt=s(FEe);Zpr=r(MOt,"layoutlmv2"),MOt.forEach(t),e_r=r(kXe," \u2014 "),JJ=n(kXe,"A",{href:!0});var EOt=s(JJ);o_r=r(EOt,"LayoutLMv2ForQuestionAnswering"),EOt.forEach(t),r_r=r(kXe," (LayoutLMv2 model)"),kXe.forEach(t),t_r=i(X),AE=n(X,"LI",{});var SXe=s(AE);TEe=n(SXe,"STRONG",{});var COt=s(TEe);a_r=r(COt,"layoutlmv3"),COt.forEach(t),n_r=r(SXe," \u2014 "),YJ=n(SXe,"A",{href:!0});var wOt=s(YJ);s_r=r(wOt,"LayoutLMv3ForQuestionAnswering"),wOt.forEach(t),l_r=r(SXe," (LayoutLMv3 model)"),SXe.forEach(t),i_r=i(X),LE=n(X,"LI",{});var RXe=s(LE);MEe=n(RXe,"STRONG",{});var AOt=s(MEe);d_r=r(AOt,"led"),AOt.forEach(t),c_r=r(RXe," \u2014 "),KJ=n(RXe,"A",{href:!0});var LOt=s(KJ);m_r=r(LOt,"LEDForQuestionAnswering"),LOt.forEach(t),f_r=r(RXe," (LED model)"),RXe.forEach(t),g_r=i(X),yE=n(X,"LI",{});var PXe=s(yE);EEe=n(PXe,"STRONG",{});var yOt=s(EEe);h_r=r(yOt,"longformer"),yOt.forEach(t),u_r=r(PXe," \u2014 "),ZJ=n(PXe,"A",{href:!0});var xOt=s(ZJ);p_r=r(xOt,"LongformerForQuestionAnswering"),xOt.forEach(t),__r=r(PXe," (Longformer model)"),PXe.forEach(t),b_r=i(X),xE=n(X,"LI",{});var BXe=s(xE);CEe=n(BXe,"STRONG",{});var $Ot=s(CEe);v_r=r($Ot,"luke"),$Ot.forEach(t),F_r=r(BXe," \u2014 "),eY=n(BXe,"A",{href:!0});var kOt=s(eY);T_r=r(kOt,"LukeForQuestionAnswering"),kOt.forEach(t),M_r=r(BXe," (LUKE model)"),BXe.forEach(t),E_r=i(X),$E=n(X,"LI",{});var IXe=s($E);wEe=n(IXe,"STRONG",{});var SOt=s(wEe);C_r=r(SOt,"lxmert"),SOt.forEach(t),w_r=r(IXe," \u2014 "),oY=n(IXe,"A",{href:!0});var ROt=s(oY);A_r=r(ROt,"LxmertForQuestionAnswering"),ROt.forEach(t),L_r=r(IXe," (LXMERT model)"),IXe.forEach(t),y_r=i(X),kE=n(X,"LI",{});var NXe=s(kE);AEe=n(NXe,"STRONG",{});var POt=s(AEe);x_r=r(POt,"mbart"),POt.forEach(t),$_r=r(NXe," \u2014 "),rY=n(NXe,"A",{href:!0});var BOt=s(rY);k_r=r(BOt,"MBartForQuestionAnswering"),BOt.forEach(t),S_r=r(NXe," (mBART model)"),NXe.forEach(t),R_r=i(X),SE=n(X,"LI",{});var qXe=s(SE);LEe=n(qXe,"STRONG",{});var IOt=s(LEe);P_r=r(IOt,"megatron-bert"),IOt.forEach(t),B_r=r(qXe," \u2014 "),tY=n(qXe,"A",{href:!0});var NOt=s(tY);I_r=r(NOt,"MegatronBertForQuestionAnswering"),NOt.forEach(t),N_r=r(qXe," (Megatron-BERT model)"),qXe.forEach(t),q_r=i(X),RE=n(X,"LI",{});var jXe=s(RE);yEe=n(jXe,"STRONG",{});var qOt=s(yEe);j_r=r(qOt,"mobilebert"),qOt.forEach(t),D_r=r(jXe," \u2014 "),aY=n(jXe,"A",{href:!0});var jOt=s(aY);G_r=r(jOt,"MobileBertForQuestionAnswering"),jOt.forEach(t),O_r=r(jXe," (MobileBERT model)"),jXe.forEach(t),V_r=i(X),PE=n(X,"LI",{});var DXe=s(PE);xEe=n(DXe,"STRONG",{});var DOt=s(xEe);X_r=r(DOt,"mpnet"),DOt.forEach(t),z_r=r(DXe," \u2014 "),nY=n(DXe,"A",{href:!0});var GOt=s(nY);Q_r=r(GOt,"MPNetForQuestionAnswering"),GOt.forEach(t),W_r=r(DXe," (MPNet model)"),DXe.forEach(t),U_r=i(X),BE=n(X,"LI",{});var GXe=s(BE);$Ee=n(GXe,"STRONG",{});var OOt=s($Ee);H_r=r(OOt,"mvp"),OOt.forEach(t),J_r=r(GXe," \u2014 "),sY=n(GXe,"A",{href:!0});var VOt=s(sY);Y_r=r(VOt,"MvpForQuestionAnswering"),VOt.forEach(t),K_r=r(GXe," (MVP model)"),GXe.forEach(t),Z_r=i(X),IE=n(X,"LI",{});var OXe=s(IE);kEe=n(OXe,"STRONG",{});var XOt=s(kEe);ebr=r(XOt,"nezha"),XOt.forEach(t),obr=r(OXe," \u2014 "),lY=n(OXe,"A",{href:!0});var zOt=s(lY);rbr=r(zOt,"NezhaForQuestionAnswering"),zOt.forEach(t),tbr=r(OXe," (Nezha model)"),OXe.forEach(t),abr=i(X),NE=n(X,"LI",{});var VXe=s(NE);SEe=n(VXe,"STRONG",{});var QOt=s(SEe);nbr=r(QOt,"nystromformer"),QOt.forEach(t),sbr=r(VXe," \u2014 "),iY=n(VXe,"A",{href:!0});var WOt=s(iY);lbr=r(WOt,"NystromformerForQuestionAnswering"),WOt.forEach(t),ibr=r(VXe," (Nystr\xF6mformer model)"),VXe.forEach(t),dbr=i(X),qE=n(X,"LI",{});var XXe=s(qE);REe=n(XXe,"STRONG",{});var UOt=s(REe);cbr=r(UOt,"qdqbert"),UOt.forEach(t),mbr=r(XXe," \u2014 "),dY=n(XXe,"A",{href:!0});var HOt=s(dY);fbr=r(HOt,"QDQBertForQuestionAnswering"),HOt.forEach(t),gbr=r(XXe," (QDQBert model)"),XXe.forEach(t),hbr=i(X),jE=n(X,"LI",{});var zXe=s(jE);PEe=n(zXe,"STRONG",{});var JOt=s(PEe);ubr=r(JOt,"reformer"),JOt.forEach(t),pbr=r(zXe," \u2014 "),cY=n(zXe,"A",{href:!0});var YOt=s(cY);_br=r(YOt,"ReformerForQuestionAnswering"),YOt.forEach(t),bbr=r(zXe," (Reformer model)"),zXe.forEach(t),vbr=i(X),DE=n(X,"LI",{});var QXe=s(DE);BEe=n(QXe,"STRONG",{});var KOt=s(BEe);Fbr=r(KOt,"rembert"),KOt.forEach(t),Tbr=r(QXe," \u2014 "),mY=n(QXe,"A",{href:!0});var ZOt=s(mY);Mbr=r(ZOt,"RemBertForQuestionAnswering"),ZOt.forEach(t),Ebr=r(QXe," (RemBERT model)"),QXe.forEach(t),Cbr=i(X),GE=n(X,"LI",{});var WXe=s(GE);IEe=n(WXe,"STRONG",{});var eVt=s(IEe);wbr=r(eVt,"roberta"),eVt.forEach(t),Abr=r(WXe," \u2014 "),fY=n(WXe,"A",{href:!0});var oVt=s(fY);Lbr=r(oVt,"RobertaForQuestionAnswering"),oVt.forEach(t),ybr=r(WXe," (RoBERTa model)"),WXe.forEach(t),xbr=i(X),OE=n(X,"LI",{});var UXe=s(OE);NEe=n(UXe,"STRONG",{});var rVt=s(NEe);$br=r(rVt,"roformer"),rVt.forEach(t),kbr=r(UXe," \u2014 "),gY=n(UXe,"A",{href:!0});var tVt=s(gY);Sbr=r(tVt,"RoFormerForQuestionAnswering"),tVt.forEach(t),Rbr=r(UXe," (RoFormer model)"),UXe.forEach(t),Pbr=i(X),VE=n(X,"LI",{});var HXe=s(VE);qEe=n(HXe,"STRONG",{});var aVt=s(qEe);Bbr=r(aVt,"splinter"),aVt.forEach(t),Ibr=r(HXe," \u2014 "),hY=n(HXe,"A",{href:!0});var nVt=s(hY);Nbr=r(nVt,"SplinterForQuestionAnswering"),nVt.forEach(t),qbr=r(HXe," (Splinter model)"),HXe.forEach(t),jbr=i(X),XE=n(X,"LI",{});var JXe=s(XE);jEe=n(JXe,"STRONG",{});var sVt=s(jEe);Dbr=r(sVt,"squeezebert"),sVt.forEach(t),Gbr=r(JXe," \u2014 "),uY=n(JXe,"A",{href:!0});var lVt=s(uY);Obr=r(lVt,"SqueezeBertForQuestionAnswering"),lVt.forEach(t),Vbr=r(JXe," (SqueezeBERT model)"),JXe.forEach(t),Xbr=i(X),zE=n(X,"LI",{});var YXe=s(zE);DEe=n(YXe,"STRONG",{});var iVt=s(DEe);zbr=r(iVt,"xlm"),iVt.forEach(t),Qbr=r(YXe," \u2014 "),pY=n(YXe,"A",{href:!0});var dVt=s(pY);Wbr=r(dVt,"XLMForQuestionAnsweringSimple"),dVt.forEach(t),Ubr=r(YXe," (XLM model)"),YXe.forEach(t),Hbr=i(X),QE=n(X,"LI",{});var KXe=s(QE);GEe=n(KXe,"STRONG",{});var cVt=s(GEe);Jbr=r(cVt,"xlm-roberta"),cVt.forEach(t),Ybr=r(KXe," \u2014 "),_Y=n(KXe,"A",{href:!0});var mVt=s(_Y);Kbr=r(mVt,"XLMRobertaForQuestionAnswering"),mVt.forEach(t),Zbr=r(KXe," (XLM-RoBERTa model)"),KXe.forEach(t),e2r=i(X),WE=n(X,"LI",{});var ZXe=s(WE);OEe=n(ZXe,"STRONG",{});var fVt=s(OEe);o2r=r(fVt,"xlm-roberta-xl"),fVt.forEach(t),r2r=r(ZXe," \u2014 "),bY=n(ZXe,"A",{href:!0});var gVt=s(bY);t2r=r(gVt,"XLMRobertaXLForQuestionAnswering"),gVt.forEach(t),a2r=r(ZXe," (XLM-RoBERTa-XL model)"),ZXe.forEach(t),n2r=i(X),UE=n(X,"LI",{});var eze=s(UE);VEe=n(eze,"STRONG",{});var hVt=s(VEe);s2r=r(hVt,"xlnet"),hVt.forEach(t),l2r=r(eze," \u2014 "),vY=n(eze,"A",{href:!0});var uVt=s(vY);i2r=r(uVt,"XLNetForQuestionAnsweringSimple"),uVt.forEach(t),d2r=r(eze," (XLNet model)"),eze.forEach(t),c2r=i(X),HE=n(X,"LI",{});var oze=s(HE);XEe=n(oze,"STRONG",{});var pVt=s(XEe);m2r=r(pVt,"yoso"),pVt.forEach(t),f2r=r(oze," \u2014 "),FY=n(oze,"A",{href:!0});var _Vt=s(FY);g2r=r(_Vt,"YosoForQuestionAnswering"),_Vt.forEach(t),h2r=r(oze," (YOSO model)"),oze.forEach(t),X.forEach(t),u2r=i(xa),JE=n(xa,"P",{});var rze=s(JE);p2r=r(rze,"The model is set in evaluation mode by default using "),zEe=n(rze,"CODE",{});var bVt=s(zEe);_2r=r(bVt,"model.eval()"),bVt.forEach(t),b2r=r(rze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QEe=n(rze,"CODE",{});var vVt=s(QEe);v2r=r(vVt,"model.train()"),vVt.forEach(t),rze.forEach(t),F2r=i(xa),T(YE.$$.fragment,xa),xa.forEach(t),Bl.forEach(t),TZe=i(m),Wd=n(m,"H2",{class:!0});var Boo=s(Wd);KE=n(Boo,"A",{id:!0,class:!0,href:!0});var FVt=s(KE);WEe=n(FVt,"SPAN",{});var TVt=s(WEe);T(d$.$$.fragment,TVt),TVt.forEach(t),FVt.forEach(t),T2r=i(Boo),UEe=n(Boo,"SPAN",{});var MVt=s(UEe);M2r=r(MVt,"AutoModelForTableQuestionAnswering"),MVt.forEach(t),Boo.forEach(t),MZe=i(m),Xo=n(m,"DIV",{class:!0});var Il=s(Xo);T(c$.$$.fragment,Il),E2r=i(Il),Ud=n(Il,"P",{});var Qle=s(Ud);C2r=r(Qle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TY=n(Qle,"A",{href:!0});var EVt=s(TY);w2r=r(EVt,"from_pretrained()"),EVt.forEach(t),A2r=r(Qle," class method or the "),MY=n(Qle,"A",{href:!0});var CVt=s(MY);L2r=r(CVt,"from_config()"),CVt.forEach(t),y2r=r(Qle,` class
method.`),Qle.forEach(t),x2r=i(Il),m$=n(Il,"P",{});var Ioo=s(m$);$2r=r(Ioo,"This class cannot be instantiated directly using "),HEe=n(Ioo,"CODE",{});var wVt=s(HEe);k2r=r(wVt,"__init__()"),wVt.forEach(t),S2r=r(Ioo," (throws an error)."),Ioo.forEach(t),R2r=i(Il),Lt=n(Il,"DIV",{class:!0});var o8=s(Lt);T(f$.$$.fragment,o8),P2r=i(o8),JEe=n(o8,"P",{});var AVt=s(JEe);B2r=r(AVt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),AVt.forEach(t),I2r=i(o8),Hd=n(o8,"P",{});var Wle=s(Hd);N2r=r(Wle,`Note:
Loading a model from its configuration file does `),YEe=n(Wle,"STRONG",{});var LVt=s(YEe);q2r=r(LVt,"not"),LVt.forEach(t),j2r=r(Wle,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Wle,"A",{href:!0});var yVt=s(EY);D2r=r(yVt,"from_pretrained()"),yVt.forEach(t),G2r=r(Wle," to load the model weights."),Wle.forEach(t),O2r=i(o8),T(ZE.$$.fragment,o8),o8.forEach(t),V2r=i(Il),co=n(Il,"DIV",{class:!0});var $a=s(co);T(g$.$$.fragment,$a),X2r=i($a),KEe=n($a,"P",{});var xVt=s(KEe);z2r=r(xVt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xVt.forEach(t),Q2r=i($a),sn=n($a,"P",{});var r8=s(sn);W2r=r(r8,"The model class to instantiate is selected based on the "),ZEe=n(r8,"CODE",{});var $Vt=s(ZEe);U2r=r($Vt,"model_type"),$Vt.forEach(t),H2r=r(r8,` property of the config object (either
passed as an argument or loaded from `),e4e=n(r8,"CODE",{});var kVt=s(e4e);J2r=r(kVt,"pretrained_model_name_or_path"),kVt.forEach(t),Y2r=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(r8,"CODE",{});var SVt=s(o4e);K2r=r(SVt,"pretrained_model_name_or_path"),SVt.forEach(t),Z2r=r(r8,":"),r8.forEach(t),e1r=i($a),r4e=n($a,"UL",{});var RVt=s(r4e);e4=n(RVt,"LI",{});var tze=s(e4);t4e=n(tze,"STRONG",{});var PVt=s(t4e);o1r=r(PVt,"tapas"),PVt.forEach(t),r1r=r(tze," \u2014 "),CY=n(tze,"A",{href:!0});var BVt=s(CY);t1r=r(BVt,"TapasForQuestionAnswering"),BVt.forEach(t),a1r=r(tze," (TAPAS model)"),tze.forEach(t),RVt.forEach(t),n1r=i($a),o4=n($a,"P",{});var aze=s(o4);s1r=r(aze,"The model is set in evaluation mode by default using "),a4e=n(aze,"CODE",{});var IVt=s(a4e);l1r=r(IVt,"model.eval()"),IVt.forEach(t),i1r=r(aze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n4e=n(aze,"CODE",{});var NVt=s(n4e);d1r=r(NVt,"model.train()"),NVt.forEach(t),aze.forEach(t),c1r=i($a),T(r4.$$.fragment,$a),$a.forEach(t),Il.forEach(t),EZe=i(m),Jd=n(m,"H2",{class:!0});var Noo=s(Jd);t4=n(Noo,"A",{id:!0,class:!0,href:!0});var qVt=s(t4);s4e=n(qVt,"SPAN",{});var jVt=s(s4e);T(h$.$$.fragment,jVt),jVt.forEach(t),qVt.forEach(t),m1r=i(Noo),l4e=n(Noo,"SPAN",{});var DVt=s(l4e);f1r=r(DVt,"AutoModelForDocumentQuestionAnswering"),DVt.forEach(t),Noo.forEach(t),CZe=i(m),zo=n(m,"DIV",{class:!0});var Nl=s(zo);T(u$.$$.fragment,Nl),g1r=i(Nl),Yd=n(Nl,"P",{});var Ule=s(Yd);h1r=r(Ule,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),wY=n(Ule,"A",{href:!0});var GVt=s(wY);u1r=r(GVt,"from_pretrained()"),GVt.forEach(t),p1r=r(Ule," class method or the "),AY=n(Ule,"A",{href:!0});var OVt=s(AY);_1r=r(OVt,"from_config()"),OVt.forEach(t),b1r=r(Ule,` class
method.`),Ule.forEach(t),v1r=i(Nl),p$=n(Nl,"P",{});var qoo=s(p$);F1r=r(qoo,"This class cannot be instantiated directly using "),i4e=n(qoo,"CODE",{});var VVt=s(i4e);T1r=r(VVt,"__init__()"),VVt.forEach(t),M1r=r(qoo," (throws an error)."),qoo.forEach(t),E1r=i(Nl),yt=n(Nl,"DIV",{class:!0});var t8=s(yt);T(_$.$$.fragment,t8),C1r=i(t8),d4e=n(t8,"P",{});var XVt=s(d4e);w1r=r(XVt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),XVt.forEach(t),A1r=i(t8),Kd=n(t8,"P",{});var Hle=s(Kd);L1r=r(Hle,`Note:
Loading a model from its configuration file does `),c4e=n(Hle,"STRONG",{});var zVt=s(c4e);y1r=r(zVt,"not"),zVt.forEach(t),x1r=r(Hle,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(Hle,"A",{href:!0});var QVt=s(LY);$1r=r(QVt,"from_pretrained()"),QVt.forEach(t),k1r=r(Hle," to load the model weights."),Hle.forEach(t),S1r=i(t8),T(a4.$$.fragment,t8),t8.forEach(t),R1r=i(Nl),mo=n(Nl,"DIV",{class:!0});var ka=s(mo);T(b$.$$.fragment,ka),P1r=i(ka),m4e=n(ka,"P",{});var WVt=s(m4e);B1r=r(WVt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),WVt.forEach(t),I1r=i(ka),ln=n(ka,"P",{});var a8=s(ln);N1r=r(a8,"The model class to instantiate is selected based on the "),f4e=n(a8,"CODE",{});var UVt=s(f4e);q1r=r(UVt,"model_type"),UVt.forEach(t),j1r=r(a8,` property of the config object (either
passed as an argument or loaded from `),g4e=n(a8,"CODE",{});var HVt=s(g4e);D1r=r(HVt,"pretrained_model_name_or_path"),HVt.forEach(t),G1r=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(a8,"CODE",{});var JVt=s(h4e);O1r=r(JVt,"pretrained_model_name_or_path"),JVt.forEach(t),V1r=r(a8,":"),a8.forEach(t),X1r=i(ka),Zd=n(ka,"UL",{});var Jle=s(Zd);n4=n(Jle,"LI",{});var nze=s(n4);u4e=n(nze,"STRONG",{});var YVt=s(u4e);z1r=r(YVt,"layoutlm"),YVt.forEach(t),Q1r=r(nze," \u2014 "),yY=n(nze,"A",{href:!0});var KVt=s(yY);W1r=r(KVt,"LayoutLMForQuestionAnswering"),KVt.forEach(t),U1r=r(nze," (LayoutLM model)"),nze.forEach(t),H1r=i(Jle),s4=n(Jle,"LI",{});var sze=s(s4);p4e=n(sze,"STRONG",{});var ZVt=s(p4e);J1r=r(ZVt,"layoutlmv2"),ZVt.forEach(t),Y1r=r(sze," \u2014 "),xY=n(sze,"A",{href:!0});var eXt=s(xY);K1r=r(eXt,"LayoutLMv2ForQuestionAnswering"),eXt.forEach(t),Z1r=r(sze," (LayoutLMv2 model)"),sze.forEach(t),evr=i(Jle),l4=n(Jle,"LI",{});var lze=s(l4);_4e=n(lze,"STRONG",{});var oXt=s(_4e);ovr=r(oXt,"layoutlmv3"),oXt.forEach(t),rvr=r(lze," \u2014 "),$Y=n(lze,"A",{href:!0});var rXt=s($Y);tvr=r(rXt,"LayoutLMv3ForQuestionAnswering"),rXt.forEach(t),avr=r(lze," (LayoutLMv3 model)"),lze.forEach(t),Jle.forEach(t),nvr=i(ka),i4=n(ka,"P",{});var ize=s(i4);svr=r(ize,"The model is set in evaluation mode by default using "),b4e=n(ize,"CODE",{});var tXt=s(b4e);lvr=r(tXt,"model.eval()"),tXt.forEach(t),ivr=r(ize,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v4e=n(ize,"CODE",{});var aXt=s(v4e);dvr=r(aXt,"model.train()"),aXt.forEach(t),ize.forEach(t),cvr=i(ka),T(d4.$$.fragment,ka),ka.forEach(t),Nl.forEach(t),wZe=i(m),ec=n(m,"H2",{class:!0});var joo=s(ec);c4=n(joo,"A",{id:!0,class:!0,href:!0});var nXt=s(c4);F4e=n(nXt,"SPAN",{});var sXt=s(F4e);T(v$.$$.fragment,sXt),sXt.forEach(t),nXt.forEach(t),mvr=i(joo),T4e=n(joo,"SPAN",{});var lXt=s(T4e);fvr=r(lXt,"AutoModelForImageClassification"),lXt.forEach(t),joo.forEach(t),AZe=i(m),Qo=n(m,"DIV",{class:!0});var ql=s(Qo);T(F$.$$.fragment,ql),gvr=i(ql),oc=n(ql,"P",{});var Yle=s(oc);hvr=r(Yle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kY=n(Yle,"A",{href:!0});var iXt=s(kY);uvr=r(iXt,"from_pretrained()"),iXt.forEach(t),pvr=r(Yle," class method or the "),SY=n(Yle,"A",{href:!0});var dXt=s(SY);_vr=r(dXt,"from_config()"),dXt.forEach(t),bvr=r(Yle,` class
method.`),Yle.forEach(t),vvr=i(ql),T$=n(ql,"P",{});var Doo=s(T$);Fvr=r(Doo,"This class cannot be instantiated directly using "),M4e=n(Doo,"CODE",{});var cXt=s(M4e);Tvr=r(cXt,"__init__()"),cXt.forEach(t),Mvr=r(Doo," (throws an error)."),Doo.forEach(t),Evr=i(ql),xt=n(ql,"DIV",{class:!0});var n8=s(xt);T(M$.$$.fragment,n8),Cvr=i(n8),E4e=n(n8,"P",{});var mXt=s(E4e);wvr=r(mXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mXt.forEach(t),Avr=i(n8),rc=n(n8,"P",{});var Kle=s(rc);Lvr=r(Kle,`Note:
Loading a model from its configuration file does `),C4e=n(Kle,"STRONG",{});var fXt=s(C4e);yvr=r(fXt,"not"),fXt.forEach(t),xvr=r(Kle,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Kle,"A",{href:!0});var gXt=s(RY);$vr=r(gXt,"from_pretrained()"),gXt.forEach(t),kvr=r(Kle," to load the model weights."),Kle.forEach(t),Svr=i(n8),T(m4.$$.fragment,n8),n8.forEach(t),Rvr=i(ql),fo=n(ql,"DIV",{class:!0});var Sa=s(fo);T(E$.$$.fragment,Sa),Pvr=i(Sa),w4e=n(Sa,"P",{});var hXt=s(w4e);Bvr=r(hXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hXt.forEach(t),Ivr=i(Sa),dn=n(Sa,"P",{});var s8=s(dn);Nvr=r(s8,"The model class to instantiate is selected based on the "),A4e=n(s8,"CODE",{});var uXt=s(A4e);qvr=r(uXt,"model_type"),uXt.forEach(t),jvr=r(s8,` property of the config object (either
passed as an argument or loaded from `),L4e=n(s8,"CODE",{});var pXt=s(L4e);Dvr=r(pXt,"pretrained_model_name_or_path"),pXt.forEach(t),Gvr=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(s8,"CODE",{});var _Xt=s(y4e);Ovr=r(_Xt,"pretrained_model_name_or_path"),_Xt.forEach(t),Vvr=r(s8,":"),s8.forEach(t),Xvr=i(Sa),be=n(Sa,"UL",{});var Fe=s(be);f4=n(Fe,"LI",{});var dze=s(f4);x4e=n(dze,"STRONG",{});var bXt=s(x4e);zvr=r(bXt,"beit"),bXt.forEach(t),Qvr=r(dze," \u2014 "),PY=n(dze,"A",{href:!0});var vXt=s(PY);Wvr=r(vXt,"BeitForImageClassification"),vXt.forEach(t),Uvr=r(dze," (BEiT model)"),dze.forEach(t),Hvr=i(Fe),g4=n(Fe,"LI",{});var cze=s(g4);$4e=n(cze,"STRONG",{});var FXt=s($4e);Jvr=r(FXt,"convnext"),FXt.forEach(t),Yvr=r(cze," \u2014 "),BY=n(cze,"A",{href:!0});var TXt=s(BY);Kvr=r(TXt,"ConvNextForImageClassification"),TXt.forEach(t),Zvr=r(cze," (ConvNeXT model)"),cze.forEach(t),eFr=i(Fe),h4=n(Fe,"LI",{});var mze=s(h4);k4e=n(mze,"STRONG",{});var MXt=s(k4e);oFr=r(MXt,"cvt"),MXt.forEach(t),rFr=r(mze," \u2014 "),IY=n(mze,"A",{href:!0});var EXt=s(IY);tFr=r(EXt,"CvtForImageClassification"),EXt.forEach(t),aFr=r(mze," (CvT model)"),mze.forEach(t),nFr=i(Fe),u4=n(Fe,"LI",{});var fze=s(u4);S4e=n(fze,"STRONG",{});var CXt=s(S4e);sFr=r(CXt,"data2vec-vision"),CXt.forEach(t),lFr=r(fze," \u2014 "),NY=n(fze,"A",{href:!0});var wXt=s(NY);iFr=r(wXt,"Data2VecVisionForImageClassification"),wXt.forEach(t),dFr=r(fze," (Data2VecVision model)"),fze.forEach(t),cFr=i(Fe),bl=n(Fe,"LI",{});var NB=s(bl);R4e=n(NB,"STRONG",{});var AXt=s(R4e);mFr=r(AXt,"deit"),AXt.forEach(t),fFr=r(NB," \u2014 "),qY=n(NB,"A",{href:!0});var LXt=s(qY);gFr=r(LXt,"DeiTForImageClassification"),LXt.forEach(t),hFr=r(NB," or "),jY=n(NB,"A",{href:!0});var yXt=s(jY);uFr=r(yXt,"DeiTForImageClassificationWithTeacher"),yXt.forEach(t),pFr=r(NB," (DeiT model)"),NB.forEach(t),_Fr=i(Fe),p4=n(Fe,"LI",{});var gze=s(p4);P4e=n(gze,"STRONG",{});var xXt=s(P4e);bFr=r(xXt,"imagegpt"),xXt.forEach(t),vFr=r(gze," \u2014 "),DY=n(gze,"A",{href:!0});var $Xt=s(DY);FFr=r($Xt,"ImageGPTForImageClassification"),$Xt.forEach(t),TFr=r(gze," (ImageGPT model)"),gze.forEach(t),MFr=i(Fe),vl=n(Fe,"LI",{});var qB=s(vl);B4e=n(qB,"STRONG",{});var kXt=s(B4e);EFr=r(kXt,"levit"),kXt.forEach(t),CFr=r(qB," \u2014 "),GY=n(qB,"A",{href:!0});var SXt=s(GY);wFr=r(SXt,"LevitForImageClassification"),SXt.forEach(t),AFr=r(qB," or "),OY=n(qB,"A",{href:!0});var RXt=s(OY);LFr=r(RXt,"LevitForImageClassificationWithTeacher"),RXt.forEach(t),yFr=r(qB," (LeViT model)"),qB.forEach(t),xFr=i(Fe),_4=n(Fe,"LI",{});var hze=s(_4);I4e=n(hze,"STRONG",{});var PXt=s(I4e);$Fr=r(PXt,"mobilevit"),PXt.forEach(t),kFr=r(hze," \u2014 "),VY=n(hze,"A",{href:!0});var BXt=s(VY);SFr=r(BXt,"MobileViTForImageClassification"),BXt.forEach(t),RFr=r(hze," (MobileViT model)"),hze.forEach(t),PFr=i(Fe),$t=n(Fe,"LI",{});var Mf=s($t);N4e=n(Mf,"STRONG",{});var IXt=s(N4e);BFr=r(IXt,"perceiver"),IXt.forEach(t),IFr=r(Mf," \u2014 "),XY=n(Mf,"A",{href:!0});var NXt=s(XY);NFr=r(NXt,"PerceiverForImageClassificationLearned"),NXt.forEach(t),qFr=r(Mf," or "),zY=n(Mf,"A",{href:!0});var qXt=s(zY);jFr=r(qXt,"PerceiverForImageClassificationFourier"),qXt.forEach(t),DFr=r(Mf," or "),QY=n(Mf,"A",{href:!0});var jXt=s(QY);GFr=r(jXt,"PerceiverForImageClassificationConvProcessing"),jXt.forEach(t),OFr=r(Mf," (Perceiver model)"),Mf.forEach(t),VFr=i(Fe),b4=n(Fe,"LI",{});var uze=s(b4);q4e=n(uze,"STRONG",{});var DXt=s(q4e);XFr=r(DXt,"poolformer"),DXt.forEach(t),zFr=r(uze," \u2014 "),WY=n(uze,"A",{href:!0});var GXt=s(WY);QFr=r(GXt,"PoolFormerForImageClassification"),GXt.forEach(t),WFr=r(uze," (PoolFormer model)"),uze.forEach(t),UFr=i(Fe),v4=n(Fe,"LI",{});var pze=s(v4);j4e=n(pze,"STRONG",{});var OXt=s(j4e);HFr=r(OXt,"regnet"),OXt.forEach(t),JFr=r(pze," \u2014 "),UY=n(pze,"A",{href:!0});var VXt=s(UY);YFr=r(VXt,"RegNetForImageClassification"),VXt.forEach(t),KFr=r(pze," (RegNet model)"),pze.forEach(t),ZFr=i(Fe),F4=n(Fe,"LI",{});var _ze=s(F4);D4e=n(_ze,"STRONG",{});var XXt=s(D4e);eTr=r(XXt,"resnet"),XXt.forEach(t),oTr=r(_ze," \u2014 "),HY=n(_ze,"A",{href:!0});var zXt=s(HY);rTr=r(zXt,"ResNetForImageClassification"),zXt.forEach(t),tTr=r(_ze," (ResNet model)"),_ze.forEach(t),aTr=i(Fe),T4=n(Fe,"LI",{});var bze=s(T4);G4e=n(bze,"STRONG",{});var QXt=s(G4e);nTr=r(QXt,"segformer"),QXt.forEach(t),sTr=r(bze," \u2014 "),JY=n(bze,"A",{href:!0});var WXt=s(JY);lTr=r(WXt,"SegformerForImageClassification"),WXt.forEach(t),iTr=r(bze," (SegFormer model)"),bze.forEach(t),dTr=i(Fe),M4=n(Fe,"LI",{});var vze=s(M4);O4e=n(vze,"STRONG",{});var UXt=s(O4e);cTr=r(UXt,"swin"),UXt.forEach(t),mTr=r(vze," \u2014 "),YY=n(vze,"A",{href:!0});var HXt=s(YY);fTr=r(HXt,"SwinForImageClassification"),HXt.forEach(t),gTr=r(vze," (Swin Transformer model)"),vze.forEach(t),hTr=i(Fe),E4=n(Fe,"LI",{});var Fze=s(E4);V4e=n(Fze,"STRONG",{});var JXt=s(V4e);uTr=r(JXt,"swinv2"),JXt.forEach(t),pTr=r(Fze," \u2014 "),KY=n(Fze,"A",{href:!0});var YXt=s(KY);_Tr=r(YXt,"Swinv2ForImageClassification"),YXt.forEach(t),bTr=r(Fze," (Swin Transformer V2 model)"),Fze.forEach(t),vTr=i(Fe),C4=n(Fe,"LI",{});var Tze=s(C4);X4e=n(Tze,"STRONG",{});var KXt=s(X4e);FTr=r(KXt,"van"),KXt.forEach(t),TTr=r(Tze," \u2014 "),ZY=n(Tze,"A",{href:!0});var ZXt=s(ZY);MTr=r(ZXt,"VanForImageClassification"),ZXt.forEach(t),ETr=r(Tze," (VAN model)"),Tze.forEach(t),CTr=i(Fe),w4=n(Fe,"LI",{});var Mze=s(w4);z4e=n(Mze,"STRONG",{});var ezt=s(z4e);wTr=r(ezt,"vit"),ezt.forEach(t),ATr=r(Mze," \u2014 "),eK=n(Mze,"A",{href:!0});var ozt=s(eK);LTr=r(ozt,"ViTForImageClassification"),ozt.forEach(t),yTr=r(Mze," (ViT model)"),Mze.forEach(t),xTr=i(Fe),A4=n(Fe,"LI",{});var Eze=s(A4);Q4e=n(Eze,"STRONG",{});var rzt=s(Q4e);$Tr=r(rzt,"vit_msn"),rzt.forEach(t),kTr=r(Eze," \u2014 "),oK=n(Eze,"A",{href:!0});var tzt=s(oK);STr=r(tzt,"ViTMSNForImageClassification"),tzt.forEach(t),RTr=r(Eze," (ViTMSN model)"),Eze.forEach(t),Fe.forEach(t),PTr=i(Sa),L4=n(Sa,"P",{});var Cze=s(L4);BTr=r(Cze,"The model is set in evaluation mode by default using "),W4e=n(Cze,"CODE",{});var azt=s(W4e);ITr=r(azt,"model.eval()"),azt.forEach(t),NTr=r(Cze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U4e=n(Cze,"CODE",{});var nzt=s(U4e);qTr=r(nzt,"model.train()"),nzt.forEach(t),Cze.forEach(t),jTr=i(Sa),T(y4.$$.fragment,Sa),Sa.forEach(t),ql.forEach(t),LZe=i(m),tc=n(m,"H2",{class:!0});var Goo=s(tc);x4=n(Goo,"A",{id:!0,class:!0,href:!0});var szt=s(x4);H4e=n(szt,"SPAN",{});var lzt=s(H4e);T(C$.$$.fragment,lzt),lzt.forEach(t),szt.forEach(t),DTr=i(Goo),J4e=n(Goo,"SPAN",{});var izt=s(J4e);GTr=r(izt,"AutoModelForVideoClassification"),izt.forEach(t),Goo.forEach(t),yZe=i(m),Wo=n(m,"DIV",{class:!0});var jl=s(Wo);T(w$.$$.fragment,jl),OTr=i(jl),ac=n(jl,"P",{});var Zle=s(ac);VTr=r(Zle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),rK=n(Zle,"A",{href:!0});var dzt=s(rK);XTr=r(dzt,"from_pretrained()"),dzt.forEach(t),zTr=r(Zle," class method or the "),tK=n(Zle,"A",{href:!0});var czt=s(tK);QTr=r(czt,"from_config()"),czt.forEach(t),WTr=r(Zle,` class
method.`),Zle.forEach(t),UTr=i(jl),A$=n(jl,"P",{});var Ooo=s(A$);HTr=r(Ooo,"This class cannot be instantiated directly using "),Y4e=n(Ooo,"CODE",{});var mzt=s(Y4e);JTr=r(mzt,"__init__()"),mzt.forEach(t),YTr=r(Ooo," (throws an error)."),Ooo.forEach(t),KTr=i(jl),kt=n(jl,"DIV",{class:!0});var l8=s(kt);T(L$.$$.fragment,l8),ZTr=i(l8),K4e=n(l8,"P",{});var fzt=s(K4e);eMr=r(fzt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),fzt.forEach(t),oMr=i(l8),nc=n(l8,"P",{});var eie=s(nc);rMr=r(eie,`Note:
Loading a model from its configuration file does `),Z4e=n(eie,"STRONG",{});var gzt=s(Z4e);tMr=r(gzt,"not"),gzt.forEach(t),aMr=r(eie,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(eie,"A",{href:!0});var hzt=s(aK);nMr=r(hzt,"from_pretrained()"),hzt.forEach(t),sMr=r(eie," to load the model weights."),eie.forEach(t),lMr=i(l8),T($4.$$.fragment,l8),l8.forEach(t),iMr=i(jl),go=n(jl,"DIV",{class:!0});var Ra=s(go);T(y$.$$.fragment,Ra),dMr=i(Ra),eCe=n(Ra,"P",{});var uzt=s(eCe);cMr=r(uzt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),uzt.forEach(t),mMr=i(Ra),cn=n(Ra,"P",{});var i8=s(cn);fMr=r(i8,"The model class to instantiate is selected based on the "),oCe=n(i8,"CODE",{});var pzt=s(oCe);gMr=r(pzt,"model_type"),pzt.forEach(t),hMr=r(i8,` property of the config object (either
passed as an argument or loaded from `),rCe=n(i8,"CODE",{});var _zt=s(rCe);uMr=r(_zt,"pretrained_model_name_or_path"),_zt.forEach(t),pMr=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(i8,"CODE",{});var bzt=s(tCe);_Mr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),bMr=r(i8,":"),i8.forEach(t),vMr=i(Ra),aCe=n(Ra,"UL",{});var vzt=s(aCe);k4=n(vzt,"LI",{});var wze=s(k4);nCe=n(wze,"STRONG",{});var Fzt=s(nCe);FMr=r(Fzt,"videomae"),Fzt.forEach(t),TMr=r(wze," \u2014 "),nK=n(wze,"A",{href:!0});var Tzt=s(nK);MMr=r(Tzt,"VideoMAEForVideoClassification"),Tzt.forEach(t),EMr=r(wze," (VideoMAE model)"),wze.forEach(t),vzt.forEach(t),CMr=i(Ra),S4=n(Ra,"P",{});var Aze=s(S4);wMr=r(Aze,"The model is set in evaluation mode by default using "),sCe=n(Aze,"CODE",{});var Mzt=s(sCe);AMr=r(Mzt,"model.eval()"),Mzt.forEach(t),LMr=r(Aze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lCe=n(Aze,"CODE",{});var Ezt=s(lCe);yMr=r(Ezt,"model.train()"),Ezt.forEach(t),Aze.forEach(t),xMr=i(Ra),T(R4.$$.fragment,Ra),Ra.forEach(t),jl.forEach(t),xZe=i(m),sc=n(m,"H2",{class:!0});var Voo=s(sc);P4=n(Voo,"A",{id:!0,class:!0,href:!0});var Czt=s(P4);iCe=n(Czt,"SPAN",{});var wzt=s(iCe);T(x$.$$.fragment,wzt),wzt.forEach(t),Czt.forEach(t),$Mr=i(Voo),dCe=n(Voo,"SPAN",{});var Azt=s(dCe);kMr=r(Azt,"AutoModelForVision2Seq"),Azt.forEach(t),Voo.forEach(t),$Ze=i(m),Uo=n(m,"DIV",{class:!0});var Dl=s(Uo);T($$.$$.fragment,Dl),SMr=i(Dl),lc=n(Dl,"P",{});var oie=s(lc);RMr=r(oie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sK=n(oie,"A",{href:!0});var Lzt=s(sK);PMr=r(Lzt,"from_pretrained()"),Lzt.forEach(t),BMr=r(oie," class method or the "),lK=n(oie,"A",{href:!0});var yzt=s(lK);IMr=r(yzt,"from_config()"),yzt.forEach(t),NMr=r(oie,` class
method.`),oie.forEach(t),qMr=i(Dl),k$=n(Dl,"P",{});var Xoo=s(k$);jMr=r(Xoo,"This class cannot be instantiated directly using "),cCe=n(Xoo,"CODE",{});var xzt=s(cCe);DMr=r(xzt,"__init__()"),xzt.forEach(t),GMr=r(Xoo," (throws an error)."),Xoo.forEach(t),OMr=i(Dl),St=n(Dl,"DIV",{class:!0});var d8=s(St);T(S$.$$.fragment,d8),VMr=i(d8),mCe=n(d8,"P",{});var $zt=s(mCe);XMr=r($zt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$zt.forEach(t),zMr=i(d8),ic=n(d8,"P",{});var rie=s(ic);QMr=r(rie,`Note:
Loading a model from its configuration file does `),fCe=n(rie,"STRONG",{});var kzt=s(fCe);WMr=r(kzt,"not"),kzt.forEach(t),UMr=r(rie,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(rie,"A",{href:!0});var Szt=s(iK);HMr=r(Szt,"from_pretrained()"),Szt.forEach(t),JMr=r(rie," to load the model weights."),rie.forEach(t),YMr=i(d8),T(B4.$$.fragment,d8),d8.forEach(t),KMr=i(Dl),ho=n(Dl,"DIV",{class:!0});var Pa=s(ho);T(R$.$$.fragment,Pa),ZMr=i(Pa),gCe=n(Pa,"P",{});var Rzt=s(gCe);eEr=r(Rzt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Rzt.forEach(t),oEr=i(Pa),mn=n(Pa,"P",{});var c8=s(mn);rEr=r(c8,"The model class to instantiate is selected based on the "),hCe=n(c8,"CODE",{});var Pzt=s(hCe);tEr=r(Pzt,"model_type"),Pzt.forEach(t),aEr=r(c8,` property of the config object (either
passed as an argument or loaded from `),uCe=n(c8,"CODE",{});var Bzt=s(uCe);nEr=r(Bzt,"pretrained_model_name_or_path"),Bzt.forEach(t),sEr=r(c8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(c8,"CODE",{});var Izt=s(pCe);lEr=r(Izt,"pretrained_model_name_or_path"),Izt.forEach(t),iEr=r(c8,":"),c8.forEach(t),dEr=i(Pa),_Ce=n(Pa,"UL",{});var Nzt=s(_Ce);I4=n(Nzt,"LI",{});var Lze=s(I4);bCe=n(Lze,"STRONG",{});var qzt=s(bCe);cEr=r(qzt,"vision-encoder-decoder"),qzt.forEach(t),mEr=r(Lze," \u2014 "),dK=n(Lze,"A",{href:!0});var jzt=s(dK);fEr=r(jzt,"VisionEncoderDecoderModel"),jzt.forEach(t),gEr=r(Lze," (Vision Encoder decoder model)"),Lze.forEach(t),Nzt.forEach(t),hEr=i(Pa),N4=n(Pa,"P",{});var yze=s(N4);uEr=r(yze,"The model is set in evaluation mode by default using "),vCe=n(yze,"CODE",{});var Dzt=s(vCe);pEr=r(Dzt,"model.eval()"),Dzt.forEach(t),_Er=r(yze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FCe=n(yze,"CODE",{});var Gzt=s(FCe);bEr=r(Gzt,"model.train()"),Gzt.forEach(t),yze.forEach(t),vEr=i(Pa),T(q4.$$.fragment,Pa),Pa.forEach(t),Dl.forEach(t),kZe=i(m),dc=n(m,"H2",{class:!0});var zoo=s(dc);j4=n(zoo,"A",{id:!0,class:!0,href:!0});var Ozt=s(j4);TCe=n(Ozt,"SPAN",{});var Vzt=s(TCe);T(P$.$$.fragment,Vzt),Vzt.forEach(t),Ozt.forEach(t),FEr=i(zoo),MCe=n(zoo,"SPAN",{});var Xzt=s(MCe);TEr=r(Xzt,"AutoModelForVisualQuestionAnswering"),Xzt.forEach(t),zoo.forEach(t),SZe=i(m),Ho=n(m,"DIV",{class:!0});var Gl=s(Ho);T(B$.$$.fragment,Gl),MEr=i(Gl),cc=n(Gl,"P",{});var tie=s(cc);EEr=r(tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),cK=n(tie,"A",{href:!0});var zzt=s(cK);CEr=r(zzt,"from_pretrained()"),zzt.forEach(t),wEr=r(tie," class method or the "),mK=n(tie,"A",{href:!0});var Qzt=s(mK);AEr=r(Qzt,"from_config()"),Qzt.forEach(t),LEr=r(tie,` class
method.`),tie.forEach(t),yEr=i(Gl),I$=n(Gl,"P",{});var Qoo=s(I$);xEr=r(Qoo,"This class cannot be instantiated directly using "),ECe=n(Qoo,"CODE",{});var Wzt=s(ECe);$Er=r(Wzt,"__init__()"),Wzt.forEach(t),kEr=r(Qoo," (throws an error)."),Qoo.forEach(t),SEr=i(Gl),Rt=n(Gl,"DIV",{class:!0});var m8=s(Rt);T(N$.$$.fragment,m8),REr=i(m8),CCe=n(m8,"P",{});var Uzt=s(CCe);PEr=r(Uzt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Uzt.forEach(t),BEr=i(m8),mc=n(m8,"P",{});var aie=s(mc);IEr=r(aie,`Note:
Loading a model from its configuration file does `),wCe=n(aie,"STRONG",{});var Hzt=s(wCe);NEr=r(Hzt,"not"),Hzt.forEach(t),qEr=r(aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(aie,"A",{href:!0});var Jzt=s(fK);jEr=r(Jzt,"from_pretrained()"),Jzt.forEach(t),DEr=r(aie," to load the model weights."),aie.forEach(t),GEr=i(m8),T(D4.$$.fragment,m8),m8.forEach(t),OEr=i(Gl),uo=n(Gl,"DIV",{class:!0});var Ba=s(uo);T(q$.$$.fragment,Ba),VEr=i(Ba),ACe=n(Ba,"P",{});var Yzt=s(ACe);XEr=r(Yzt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Yzt.forEach(t),zEr=i(Ba),fn=n(Ba,"P",{});var f8=s(fn);QEr=r(f8,"The model class to instantiate is selected based on the "),LCe=n(f8,"CODE",{});var Kzt=s(LCe);WEr=r(Kzt,"model_type"),Kzt.forEach(t),UEr=r(f8,` property of the config object (either
passed as an argument or loaded from `),yCe=n(f8,"CODE",{});var Zzt=s(yCe);HEr=r(Zzt,"pretrained_model_name_or_path"),Zzt.forEach(t),JEr=r(f8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(f8,"CODE",{});var eQt=s(xCe);YEr=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),KEr=r(f8,":"),f8.forEach(t),ZEr=i(Ba),$Ce=n(Ba,"UL",{});var oQt=s($Ce);G4=n(oQt,"LI",{});var xze=s(G4);kCe=n(xze,"STRONG",{});var rQt=s(kCe);e4r=r(rQt,"vilt"),rQt.forEach(t),o4r=r(xze," \u2014 "),gK=n(xze,"A",{href:!0});var tQt=s(gK);r4r=r(tQt,"ViltForQuestionAnswering"),tQt.forEach(t),t4r=r(xze," (ViLT model)"),xze.forEach(t),oQt.forEach(t),a4r=i(Ba),O4=n(Ba,"P",{});var $ze=s(O4);n4r=r($ze,"The model is set in evaluation mode by default using "),SCe=n($ze,"CODE",{});var aQt=s(SCe);s4r=r(aQt,"model.eval()"),aQt.forEach(t),l4r=r($ze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RCe=n($ze,"CODE",{});var nQt=s(RCe);i4r=r(nQt,"model.train()"),nQt.forEach(t),$ze.forEach(t),d4r=i(Ba),T(V4.$$.fragment,Ba),Ba.forEach(t),Gl.forEach(t),RZe=i(m),fc=n(m,"H2",{class:!0});var Woo=s(fc);X4=n(Woo,"A",{id:!0,class:!0,href:!0});var sQt=s(X4);PCe=n(sQt,"SPAN",{});var lQt=s(PCe);T(j$.$$.fragment,lQt),lQt.forEach(t),sQt.forEach(t),c4r=i(Woo),BCe=n(Woo,"SPAN",{});var iQt=s(BCe);m4r=r(iQt,"AutoModelForAudioClassification"),iQt.forEach(t),Woo.forEach(t),PZe=i(m),Jo=n(m,"DIV",{class:!0});var Ol=s(Jo);T(D$.$$.fragment,Ol),f4r=i(Ol),gc=n(Ol,"P",{});var nie=s(gc);g4r=r(nie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hK=n(nie,"A",{href:!0});var dQt=s(hK);h4r=r(dQt,"from_pretrained()"),dQt.forEach(t),u4r=r(nie," class method or the "),uK=n(nie,"A",{href:!0});var cQt=s(uK);p4r=r(cQt,"from_config()"),cQt.forEach(t),_4r=r(nie,` class
method.`),nie.forEach(t),b4r=i(Ol),G$=n(Ol,"P",{});var Uoo=s(G$);v4r=r(Uoo,"This class cannot be instantiated directly using "),ICe=n(Uoo,"CODE",{});var mQt=s(ICe);F4r=r(mQt,"__init__()"),mQt.forEach(t),T4r=r(Uoo," (throws an error)."),Uoo.forEach(t),M4r=i(Ol),Pt=n(Ol,"DIV",{class:!0});var g8=s(Pt);T(O$.$$.fragment,g8),E4r=i(g8),NCe=n(g8,"P",{});var fQt=s(NCe);C4r=r(fQt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fQt.forEach(t),w4r=i(g8),hc=n(g8,"P",{});var sie=s(hc);A4r=r(sie,`Note:
Loading a model from its configuration file does `),qCe=n(sie,"STRONG",{});var gQt=s(qCe);L4r=r(gQt,"not"),gQt.forEach(t),y4r=r(sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(sie,"A",{href:!0});var hQt=s(pK);x4r=r(hQt,"from_pretrained()"),hQt.forEach(t),$4r=r(sie," to load the model weights."),sie.forEach(t),k4r=i(g8),T(z4.$$.fragment,g8),g8.forEach(t),S4r=i(Ol),po=n(Ol,"DIV",{class:!0});var Ia=s(po);T(V$.$$.fragment,Ia),R4r=i(Ia),jCe=n(Ia,"P",{});var uQt=s(jCe);P4r=r(uQt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uQt.forEach(t),B4r=i(Ia),gn=n(Ia,"P",{});var h8=s(gn);I4r=r(h8,"The model class to instantiate is selected based on the "),DCe=n(h8,"CODE",{});var pQt=s(DCe);N4r=r(pQt,"model_type"),pQt.forEach(t),q4r=r(h8,` property of the config object (either
passed as an argument or loaded from `),GCe=n(h8,"CODE",{});var _Qt=s(GCe);j4r=r(_Qt,"pretrained_model_name_or_path"),_Qt.forEach(t),D4r=r(h8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(h8,"CODE",{});var bQt=s(OCe);G4r=r(bQt,"pretrained_model_name_or_path"),bQt.forEach(t),O4r=r(h8,":"),h8.forEach(t),V4r=i(Ia),Pe=n(Ia,"UL",{});var Qe=s(Pe);Q4=n(Qe,"LI",{});var kze=s(Q4);VCe=n(kze,"STRONG",{});var vQt=s(VCe);X4r=r(vQt,"data2vec-audio"),vQt.forEach(t),z4r=r(kze," \u2014 "),_K=n(kze,"A",{href:!0});var FQt=s(_K);Q4r=r(FQt,"Data2VecAudioForSequenceClassification"),FQt.forEach(t),W4r=r(kze," (Data2VecAudio model)"),kze.forEach(t),U4r=i(Qe),W4=n(Qe,"LI",{});var Sze=s(W4);XCe=n(Sze,"STRONG",{});var TQt=s(XCe);H4r=r(TQt,"hubert"),TQt.forEach(t),J4r=r(Sze," \u2014 "),bK=n(Sze,"A",{href:!0});var MQt=s(bK);Y4r=r(MQt,"HubertForSequenceClassification"),MQt.forEach(t),K4r=r(Sze," (Hubert model)"),Sze.forEach(t),Z4r=i(Qe),U4=n(Qe,"LI",{});var Rze=s(U4);zCe=n(Rze,"STRONG",{});var EQt=s(zCe);eCr=r(EQt,"sew"),EQt.forEach(t),oCr=r(Rze," \u2014 "),vK=n(Rze,"A",{href:!0});var CQt=s(vK);rCr=r(CQt,"SEWForSequenceClassification"),CQt.forEach(t),tCr=r(Rze," (SEW model)"),Rze.forEach(t),aCr=i(Qe),H4=n(Qe,"LI",{});var Pze=s(H4);QCe=n(Pze,"STRONG",{});var wQt=s(QCe);nCr=r(wQt,"sew-d"),wQt.forEach(t),sCr=r(Pze," \u2014 "),FK=n(Pze,"A",{href:!0});var AQt=s(FK);lCr=r(AQt,"SEWDForSequenceClassification"),AQt.forEach(t),iCr=r(Pze," (SEW-D model)"),Pze.forEach(t),dCr=i(Qe),J4=n(Qe,"LI",{});var Bze=s(J4);WCe=n(Bze,"STRONG",{});var LQt=s(WCe);cCr=r(LQt,"unispeech"),LQt.forEach(t),mCr=r(Bze," \u2014 "),TK=n(Bze,"A",{href:!0});var yQt=s(TK);fCr=r(yQt,"UniSpeechForSequenceClassification"),yQt.forEach(t),gCr=r(Bze," (UniSpeech model)"),Bze.forEach(t),hCr=i(Qe),Y4=n(Qe,"LI",{});var Ize=s(Y4);UCe=n(Ize,"STRONG",{});var xQt=s(UCe);uCr=r(xQt,"unispeech-sat"),xQt.forEach(t),pCr=r(Ize," \u2014 "),MK=n(Ize,"A",{href:!0});var $Qt=s(MK);_Cr=r($Qt,"UniSpeechSatForSequenceClassification"),$Qt.forEach(t),bCr=r(Ize," (UniSpeechSat model)"),Ize.forEach(t),vCr=i(Qe),K4=n(Qe,"LI",{});var Nze=s(K4);HCe=n(Nze,"STRONG",{});var kQt=s(HCe);FCr=r(kQt,"wav2vec2"),kQt.forEach(t),TCr=r(Nze," \u2014 "),EK=n(Nze,"A",{href:!0});var SQt=s(EK);MCr=r(SQt,"Wav2Vec2ForSequenceClassification"),SQt.forEach(t),ECr=r(Nze," (Wav2Vec2 model)"),Nze.forEach(t),CCr=i(Qe),Z4=n(Qe,"LI",{});var qze=s(Z4);JCe=n(qze,"STRONG",{});var RQt=s(JCe);wCr=r(RQt,"wav2vec2-conformer"),RQt.forEach(t),ACr=r(qze," \u2014 "),CK=n(qze,"A",{href:!0});var PQt=s(CK);LCr=r(PQt,"Wav2Vec2ConformerForSequenceClassification"),PQt.forEach(t),yCr=r(qze," (Wav2Vec2-Conformer model)"),qze.forEach(t),xCr=i(Qe),eC=n(Qe,"LI",{});var jze=s(eC);YCe=n(jze,"STRONG",{});var BQt=s(YCe);$Cr=r(BQt,"wavlm"),BQt.forEach(t),kCr=r(jze," \u2014 "),wK=n(jze,"A",{href:!0});var IQt=s(wK);SCr=r(IQt,"WavLMForSequenceClassification"),IQt.forEach(t),RCr=r(jze," (WavLM model)"),jze.forEach(t),Qe.forEach(t),PCr=i(Ia),oC=n(Ia,"P",{});var Dze=s(oC);BCr=r(Dze,"The model is set in evaluation mode by default using "),KCe=n(Dze,"CODE",{});var NQt=s(KCe);ICr=r(NQt,"model.eval()"),NQt.forEach(t),NCr=r(Dze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZCe=n(Dze,"CODE",{});var qQt=s(ZCe);qCr=r(qQt,"model.train()"),qQt.forEach(t),Dze.forEach(t),jCr=i(Ia),T(rC.$$.fragment,Ia),Ia.forEach(t),Ol.forEach(t),BZe=i(m),uc=n(m,"H2",{class:!0});var Hoo=s(uc);tC=n(Hoo,"A",{id:!0,class:!0,href:!0});var jQt=s(tC);e3e=n(jQt,"SPAN",{});var DQt=s(e3e);T(X$.$$.fragment,DQt),DQt.forEach(t),jQt.forEach(t),DCr=i(Hoo),o3e=n(Hoo,"SPAN",{});var GQt=s(o3e);GCr=r(GQt,"AutoModelForAudioFrameClassification"),GQt.forEach(t),Hoo.forEach(t),IZe=i(m),Yo=n(m,"DIV",{class:!0});var Vl=s(Yo);T(z$.$$.fragment,Vl),OCr=i(Vl),pc=n(Vl,"P",{});var lie=s(pc);VCr=r(lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AK=n(lie,"A",{href:!0});var OQt=s(AK);XCr=r(OQt,"from_pretrained()"),OQt.forEach(t),zCr=r(lie," class method or the "),LK=n(lie,"A",{href:!0});var VQt=s(LK);QCr=r(VQt,"from_config()"),VQt.forEach(t),WCr=r(lie,` class
method.`),lie.forEach(t),UCr=i(Vl),Q$=n(Vl,"P",{});var Joo=s(Q$);HCr=r(Joo,"This class cannot be instantiated directly using "),r3e=n(Joo,"CODE",{});var XQt=s(r3e);JCr=r(XQt,"__init__()"),XQt.forEach(t),YCr=r(Joo," (throws an error)."),Joo.forEach(t),KCr=i(Vl),Bt=n(Vl,"DIV",{class:!0});var u8=s(Bt);T(W$.$$.fragment,u8),ZCr=i(u8),t3e=n(u8,"P",{});var zQt=s(t3e);e3r=r(zQt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),zQt.forEach(t),o3r=i(u8),_c=n(u8,"P",{});var iie=s(_c);r3r=r(iie,`Note:
Loading a model from its configuration file does `),a3e=n(iie,"STRONG",{});var QQt=s(a3e);t3r=r(QQt,"not"),QQt.forEach(t),a3r=r(iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(iie,"A",{href:!0});var WQt=s(yK);n3r=r(WQt,"from_pretrained()"),WQt.forEach(t),s3r=r(iie," to load the model weights."),iie.forEach(t),l3r=i(u8),T(aC.$$.fragment,u8),u8.forEach(t),i3r=i(Vl),_o=n(Vl,"DIV",{class:!0});var Na=s(_o);T(U$.$$.fragment,Na),d3r=i(Na),n3e=n(Na,"P",{});var UQt=s(n3e);c3r=r(UQt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),UQt.forEach(t),m3r=i(Na),hn=n(Na,"P",{});var p8=s(hn);f3r=r(p8,"The model class to instantiate is selected based on the "),s3e=n(p8,"CODE",{});var HQt=s(s3e);g3r=r(HQt,"model_type"),HQt.forEach(t),h3r=r(p8,` property of the config object (either
passed as an argument or loaded from `),l3e=n(p8,"CODE",{});var JQt=s(l3e);u3r=r(JQt,"pretrained_model_name_or_path"),JQt.forEach(t),p3r=r(p8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(p8,"CODE",{});var YQt=s(i3e);_3r=r(YQt,"pretrained_model_name_or_path"),YQt.forEach(t),b3r=r(p8,":"),p8.forEach(t),v3r=i(Na),mt=n(Na,"UL",{});var Xl=s(mt);nC=n(Xl,"LI",{});var Gze=s(nC);d3e=n(Gze,"STRONG",{});var KQt=s(d3e);F3r=r(KQt,"data2vec-audio"),KQt.forEach(t),T3r=r(Gze," \u2014 "),xK=n(Gze,"A",{href:!0});var ZQt=s(xK);M3r=r(ZQt,"Data2VecAudioForAudioFrameClassification"),ZQt.forEach(t),E3r=r(Gze," (Data2VecAudio model)"),Gze.forEach(t),C3r=i(Xl),sC=n(Xl,"LI",{});var Oze=s(sC);c3e=n(Oze,"STRONG",{});var eWt=s(c3e);w3r=r(eWt,"unispeech-sat"),eWt.forEach(t),A3r=r(Oze," \u2014 "),$K=n(Oze,"A",{href:!0});var oWt=s($K);L3r=r(oWt,"UniSpeechSatForAudioFrameClassification"),oWt.forEach(t),y3r=r(Oze," (UniSpeechSat model)"),Oze.forEach(t),x3r=i(Xl),lC=n(Xl,"LI",{});var Vze=s(lC);m3e=n(Vze,"STRONG",{});var rWt=s(m3e);$3r=r(rWt,"wav2vec2"),rWt.forEach(t),k3r=r(Vze," \u2014 "),kK=n(Vze,"A",{href:!0});var tWt=s(kK);S3r=r(tWt,"Wav2Vec2ForAudioFrameClassification"),tWt.forEach(t),R3r=r(Vze," (Wav2Vec2 model)"),Vze.forEach(t),P3r=i(Xl),iC=n(Xl,"LI",{});var Xze=s(iC);f3e=n(Xze,"STRONG",{});var aWt=s(f3e);B3r=r(aWt,"wav2vec2-conformer"),aWt.forEach(t),I3r=r(Xze," \u2014 "),SK=n(Xze,"A",{href:!0});var nWt=s(SK);N3r=r(nWt,"Wav2Vec2ConformerForAudioFrameClassification"),nWt.forEach(t),q3r=r(Xze," (Wav2Vec2-Conformer model)"),Xze.forEach(t),j3r=i(Xl),dC=n(Xl,"LI",{});var zze=s(dC);g3e=n(zze,"STRONG",{});var sWt=s(g3e);D3r=r(sWt,"wavlm"),sWt.forEach(t),G3r=r(zze," \u2014 "),RK=n(zze,"A",{href:!0});var lWt=s(RK);O3r=r(lWt,"WavLMForAudioFrameClassification"),lWt.forEach(t),V3r=r(zze," (WavLM model)"),zze.forEach(t),Xl.forEach(t),X3r=i(Na),cC=n(Na,"P",{});var Qze=s(cC);z3r=r(Qze,"The model is set in evaluation mode by default using "),h3e=n(Qze,"CODE",{});var iWt=s(h3e);Q3r=r(iWt,"model.eval()"),iWt.forEach(t),W3r=r(Qze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u3e=n(Qze,"CODE",{});var dWt=s(u3e);U3r=r(dWt,"model.train()"),dWt.forEach(t),Qze.forEach(t),H3r=i(Na),T(mC.$$.fragment,Na),Na.forEach(t),Vl.forEach(t),NZe=i(m),bc=n(m,"H2",{class:!0});var Yoo=s(bc);fC=n(Yoo,"A",{id:!0,class:!0,href:!0});var cWt=s(fC);p3e=n(cWt,"SPAN",{});var mWt=s(p3e);T(H$.$$.fragment,mWt),mWt.forEach(t),cWt.forEach(t),J3r=i(Yoo),_3e=n(Yoo,"SPAN",{});var fWt=s(_3e);Y3r=r(fWt,"AutoModelForCTC"),fWt.forEach(t),Yoo.forEach(t),qZe=i(m),Ko=n(m,"DIV",{class:!0});var zl=s(Ko);T(J$.$$.fragment,zl),K3r=i(zl),vc=n(zl,"P",{});var die=s(vc);Z3r=r(die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PK=n(die,"A",{href:!0});var gWt=s(PK);e5r=r(gWt,"from_pretrained()"),gWt.forEach(t),o5r=r(die," class method or the "),BK=n(die,"A",{href:!0});var hWt=s(BK);r5r=r(hWt,"from_config()"),hWt.forEach(t),t5r=r(die,` class
method.`),die.forEach(t),a5r=i(zl),Y$=n(zl,"P",{});var Koo=s(Y$);n5r=r(Koo,"This class cannot be instantiated directly using "),b3e=n(Koo,"CODE",{});var uWt=s(b3e);s5r=r(uWt,"__init__()"),uWt.forEach(t),l5r=r(Koo," (throws an error)."),Koo.forEach(t),i5r=i(zl),It=n(zl,"DIV",{class:!0});var _8=s(It);T(K$.$$.fragment,_8),d5r=i(_8),v3e=n(_8,"P",{});var pWt=s(v3e);c5r=r(pWt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pWt.forEach(t),m5r=i(_8),Fc=n(_8,"P",{});var cie=s(Fc);f5r=r(cie,`Note:
Loading a model from its configuration file does `),F3e=n(cie,"STRONG",{});var _Wt=s(F3e);g5r=r(_Wt,"not"),_Wt.forEach(t),h5r=r(cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(cie,"A",{href:!0});var bWt=s(IK);u5r=r(bWt,"from_pretrained()"),bWt.forEach(t),p5r=r(cie," to load the model weights."),cie.forEach(t),_5r=i(_8),T(gC.$$.fragment,_8),_8.forEach(t),b5r=i(zl),bo=n(zl,"DIV",{class:!0});var qa=s(bo);T(Z$.$$.fragment,qa),v5r=i(qa),T3e=n(qa,"P",{});var vWt=s(T3e);F5r=r(vWt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vWt.forEach(t),T5r=i(qa),un=n(qa,"P",{});var b8=s(un);M5r=r(b8,"The model class to instantiate is selected based on the "),M3e=n(b8,"CODE",{});var FWt=s(M3e);E5r=r(FWt,"model_type"),FWt.forEach(t),C5r=r(b8,` property of the config object (either
passed as an argument or loaded from `),E3e=n(b8,"CODE",{});var TWt=s(E3e);w5r=r(TWt,"pretrained_model_name_or_path"),TWt.forEach(t),A5r=r(b8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=n(b8,"CODE",{});var MWt=s(C3e);L5r=r(MWt,"pretrained_model_name_or_path"),MWt.forEach(t),y5r=r(b8,":"),b8.forEach(t),x5r=i(qa),Le=n(qa,"UL",{});var Ie=s(Le);hC=n(Ie,"LI",{});var Wze=s(hC);w3e=n(Wze,"STRONG",{});var EWt=s(w3e);$5r=r(EWt,"data2vec-audio"),EWt.forEach(t),k5r=r(Wze," \u2014 "),NK=n(Wze,"A",{href:!0});var CWt=s(NK);S5r=r(CWt,"Data2VecAudioForCTC"),CWt.forEach(t),R5r=r(Wze," (Data2VecAudio model)"),Wze.forEach(t),P5r=i(Ie),uC=n(Ie,"LI",{});var Uze=s(uC);A3e=n(Uze,"STRONG",{});var wWt=s(A3e);B5r=r(wWt,"hubert"),wWt.forEach(t),I5r=r(Uze," \u2014 "),qK=n(Uze,"A",{href:!0});var AWt=s(qK);N5r=r(AWt,"HubertForCTC"),AWt.forEach(t),q5r=r(Uze," (Hubert model)"),Uze.forEach(t),j5r=i(Ie),pC=n(Ie,"LI",{});var Hze=s(pC);L3e=n(Hze,"STRONG",{});var LWt=s(L3e);D5r=r(LWt,"mctct"),LWt.forEach(t),G5r=r(Hze," \u2014 "),jK=n(Hze,"A",{href:!0});var yWt=s(jK);O5r=r(yWt,"MCTCTForCTC"),yWt.forEach(t),V5r=r(Hze," (M-CTC-T model)"),Hze.forEach(t),X5r=i(Ie),_C=n(Ie,"LI",{});var Jze=s(_C);y3e=n(Jze,"STRONG",{});var xWt=s(y3e);z5r=r(xWt,"sew"),xWt.forEach(t),Q5r=r(Jze," \u2014 "),DK=n(Jze,"A",{href:!0});var $Wt=s(DK);W5r=r($Wt,"SEWForCTC"),$Wt.forEach(t),U5r=r(Jze," (SEW model)"),Jze.forEach(t),H5r=i(Ie),bC=n(Ie,"LI",{});var Yze=s(bC);x3e=n(Yze,"STRONG",{});var kWt=s(x3e);J5r=r(kWt,"sew-d"),kWt.forEach(t),Y5r=r(Yze," \u2014 "),GK=n(Yze,"A",{href:!0});var SWt=s(GK);K5r=r(SWt,"SEWDForCTC"),SWt.forEach(t),Z5r=r(Yze," (SEW-D model)"),Yze.forEach(t),e0r=i(Ie),vC=n(Ie,"LI",{});var Kze=s(vC);$3e=n(Kze,"STRONG",{});var RWt=s($3e);o0r=r(RWt,"unispeech"),RWt.forEach(t),r0r=r(Kze," \u2014 "),OK=n(Kze,"A",{href:!0});var PWt=s(OK);t0r=r(PWt,"UniSpeechForCTC"),PWt.forEach(t),a0r=r(Kze," (UniSpeech model)"),Kze.forEach(t),n0r=i(Ie),FC=n(Ie,"LI",{});var Zze=s(FC);k3e=n(Zze,"STRONG",{});var BWt=s(k3e);s0r=r(BWt,"unispeech-sat"),BWt.forEach(t),l0r=r(Zze," \u2014 "),VK=n(Zze,"A",{href:!0});var IWt=s(VK);i0r=r(IWt,"UniSpeechSatForCTC"),IWt.forEach(t),d0r=r(Zze," (UniSpeechSat model)"),Zze.forEach(t),c0r=i(Ie),TC=n(Ie,"LI",{});var eQe=s(TC);S3e=n(eQe,"STRONG",{});var NWt=s(S3e);m0r=r(NWt,"wav2vec2"),NWt.forEach(t),f0r=r(eQe," \u2014 "),XK=n(eQe,"A",{href:!0});var qWt=s(XK);g0r=r(qWt,"Wav2Vec2ForCTC"),qWt.forEach(t),h0r=r(eQe," (Wav2Vec2 model)"),eQe.forEach(t),u0r=i(Ie),MC=n(Ie,"LI",{});var oQe=s(MC);R3e=n(oQe,"STRONG",{});var jWt=s(R3e);p0r=r(jWt,"wav2vec2-conformer"),jWt.forEach(t),_0r=r(oQe," \u2014 "),zK=n(oQe,"A",{href:!0});var DWt=s(zK);b0r=r(DWt,"Wav2Vec2ConformerForCTC"),DWt.forEach(t),v0r=r(oQe," (Wav2Vec2-Conformer model)"),oQe.forEach(t),F0r=i(Ie),EC=n(Ie,"LI",{});var rQe=s(EC);P3e=n(rQe,"STRONG",{});var GWt=s(P3e);T0r=r(GWt,"wavlm"),GWt.forEach(t),M0r=r(rQe," \u2014 "),QK=n(rQe,"A",{href:!0});var OWt=s(QK);E0r=r(OWt,"WavLMForCTC"),OWt.forEach(t),C0r=r(rQe," (WavLM model)"),rQe.forEach(t),Ie.forEach(t),w0r=i(qa),CC=n(qa,"P",{});var tQe=s(CC);A0r=r(tQe,"The model is set in evaluation mode by default using "),B3e=n(tQe,"CODE",{});var VWt=s(B3e);L0r=r(VWt,"model.eval()"),VWt.forEach(t),y0r=r(tQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I3e=n(tQe,"CODE",{});var XWt=s(I3e);x0r=r(XWt,"model.train()"),XWt.forEach(t),tQe.forEach(t),$0r=i(qa),T(wC.$$.fragment,qa),qa.forEach(t),zl.forEach(t),jZe=i(m),Tc=n(m,"H2",{class:!0});var Zoo=s(Tc);AC=n(Zoo,"A",{id:!0,class:!0,href:!0});var zWt=s(AC);N3e=n(zWt,"SPAN",{});var QWt=s(N3e);T(ek.$$.fragment,QWt),QWt.forEach(t),zWt.forEach(t),k0r=i(Zoo),q3e=n(Zoo,"SPAN",{});var WWt=s(q3e);S0r=r(WWt,"AutoModelForSpeechSeq2Seq"),WWt.forEach(t),Zoo.forEach(t),DZe=i(m),Zo=n(m,"DIV",{class:!0});var Ql=s(Zo);T(ok.$$.fragment,Ql),R0r=i(Ql),Mc=n(Ql,"P",{});var mie=s(Mc);P0r=r(mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WK=n(mie,"A",{href:!0});var UWt=s(WK);B0r=r(UWt,"from_pretrained()"),UWt.forEach(t),I0r=r(mie," class method or the "),UK=n(mie,"A",{href:!0});var HWt=s(UK);N0r=r(HWt,"from_config()"),HWt.forEach(t),q0r=r(mie,` class
method.`),mie.forEach(t),j0r=i(Ql),rk=n(Ql,"P",{});var ero=s(rk);D0r=r(ero,"This class cannot be instantiated directly using "),j3e=n(ero,"CODE",{});var JWt=s(j3e);G0r=r(JWt,"__init__()"),JWt.forEach(t),O0r=r(ero," (throws an error)."),ero.forEach(t),V0r=i(Ql),Nt=n(Ql,"DIV",{class:!0});var v8=s(Nt);T(tk.$$.fragment,v8),X0r=i(v8),D3e=n(v8,"P",{});var YWt=s(D3e);z0r=r(YWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YWt.forEach(t),Q0r=i(v8),Ec=n(v8,"P",{});var fie=s(Ec);W0r=r(fie,`Note:
Loading a model from its configuration file does `),G3e=n(fie,"STRONG",{});var KWt=s(G3e);U0r=r(KWt,"not"),KWt.forEach(t),H0r=r(fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(fie,"A",{href:!0});var ZWt=s(HK);J0r=r(ZWt,"from_pretrained()"),ZWt.forEach(t),Y0r=r(fie," to load the model weights."),fie.forEach(t),K0r=i(v8),T(LC.$$.fragment,v8),v8.forEach(t),Z0r=i(Ql),vo=n(Ql,"DIV",{class:!0});var ja=s(vo);T(ak.$$.fragment,ja),ewr=i(ja),O3e=n(ja,"P",{});var eUt=s(O3e);owr=r(eUt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eUt.forEach(t),rwr=i(ja),pn=n(ja,"P",{});var F8=s(pn);twr=r(F8,"The model class to instantiate is selected based on the "),V3e=n(F8,"CODE",{});var oUt=s(V3e);awr=r(oUt,"model_type"),oUt.forEach(t),nwr=r(F8,` property of the config object (either
passed as an argument or loaded from `),X3e=n(F8,"CODE",{});var rUt=s(X3e);swr=r(rUt,"pretrained_model_name_or_path"),rUt.forEach(t),lwr=r(F8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=n(F8,"CODE",{});var tUt=s(z3e);iwr=r(tUt,"pretrained_model_name_or_path"),tUt.forEach(t),dwr=r(F8,":"),F8.forEach(t),cwr=i(ja),nk=n(ja,"UL",{});var oro=s(nk);yC=n(oro,"LI",{});var aQe=s(yC);Q3e=n(aQe,"STRONG",{});var aUt=s(Q3e);mwr=r(aUt,"speech-encoder-decoder"),aUt.forEach(t),fwr=r(aQe," \u2014 "),JK=n(aQe,"A",{href:!0});var nUt=s(JK);gwr=r(nUt,"SpeechEncoderDecoderModel"),nUt.forEach(t),hwr=r(aQe," (Speech Encoder decoder model)"),aQe.forEach(t),uwr=i(oro),xC=n(oro,"LI",{});var nQe=s(xC);W3e=n(nQe,"STRONG",{});var sUt=s(W3e);pwr=r(sUt,"speech_to_text"),sUt.forEach(t),_wr=r(nQe," \u2014 "),YK=n(nQe,"A",{href:!0});var lUt=s(YK);bwr=r(lUt,"Speech2TextForConditionalGeneration"),lUt.forEach(t),vwr=r(nQe," (Speech2Text model)"),nQe.forEach(t),oro.forEach(t),Fwr=i(ja),$C=n(ja,"P",{});var sQe=s($C);Twr=r(sQe,"The model is set in evaluation mode by default using "),U3e=n(sQe,"CODE",{});var iUt=s(U3e);Mwr=r(iUt,"model.eval()"),iUt.forEach(t),Ewr=r(sQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H3e=n(sQe,"CODE",{});var dUt=s(H3e);Cwr=r(dUt,"model.train()"),dUt.forEach(t),sQe.forEach(t),wwr=i(ja),T(kC.$$.fragment,ja),ja.forEach(t),Ql.forEach(t),GZe=i(m),Cc=n(m,"H2",{class:!0});var rro=s(Cc);SC=n(rro,"A",{id:!0,class:!0,href:!0});var cUt=s(SC);J3e=n(cUt,"SPAN",{});var mUt=s(J3e);T(sk.$$.fragment,mUt),mUt.forEach(t),cUt.forEach(t),Awr=i(rro),Y3e=n(rro,"SPAN",{});var fUt=s(Y3e);Lwr=r(fUt,"AutoModelForAudioXVector"),fUt.forEach(t),rro.forEach(t),OZe=i(m),er=n(m,"DIV",{class:!0});var Wl=s(er);T(lk.$$.fragment,Wl),ywr=i(Wl),wc=n(Wl,"P",{});var gie=s(wc);xwr=r(gie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KK=n(gie,"A",{href:!0});var gUt=s(KK);$wr=r(gUt,"from_pretrained()"),gUt.forEach(t),kwr=r(gie," class method or the "),ZK=n(gie,"A",{href:!0});var hUt=s(ZK);Swr=r(hUt,"from_config()"),hUt.forEach(t),Rwr=r(gie,` class
method.`),gie.forEach(t),Pwr=i(Wl),ik=n(Wl,"P",{});var tro=s(ik);Bwr=r(tro,"This class cannot be instantiated directly using "),K3e=n(tro,"CODE",{});var uUt=s(K3e);Iwr=r(uUt,"__init__()"),uUt.forEach(t),Nwr=r(tro," (throws an error)."),tro.forEach(t),qwr=i(Wl),qt=n(Wl,"DIV",{class:!0});var T8=s(qt);T(dk.$$.fragment,T8),jwr=i(T8),Z3e=n(T8,"P",{});var pUt=s(Z3e);Dwr=r(pUt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pUt.forEach(t),Gwr=i(T8),Ac=n(T8,"P",{});var hie=s(Ac);Owr=r(hie,`Note:
Loading a model from its configuration file does `),e5e=n(hie,"STRONG",{});var _Ut=s(e5e);Vwr=r(_Ut,"not"),_Ut.forEach(t),Xwr=r(hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(hie,"A",{href:!0});var bUt=s(eZ);zwr=r(bUt,"from_pretrained()"),bUt.forEach(t),Qwr=r(hie," to load the model weights."),hie.forEach(t),Wwr=i(T8),T(RC.$$.fragment,T8),T8.forEach(t),Uwr=i(Wl),Fo=n(Wl,"DIV",{class:!0});var Da=s(Fo);T(ck.$$.fragment,Da),Hwr=i(Da),o5e=n(Da,"P",{});var vUt=s(o5e);Jwr=r(vUt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vUt.forEach(t),Ywr=i(Da),_n=n(Da,"P",{});var M8=s(_n);Kwr=r(M8,"The model class to instantiate is selected based on the "),r5e=n(M8,"CODE",{});var FUt=s(r5e);Zwr=r(FUt,"model_type"),FUt.forEach(t),eAr=r(M8,` property of the config object (either
passed as an argument or loaded from `),t5e=n(M8,"CODE",{});var TUt=s(t5e);oAr=r(TUt,"pretrained_model_name_or_path"),TUt.forEach(t),rAr=r(M8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(M8,"CODE",{});var MUt=s(a5e);tAr=r(MUt,"pretrained_model_name_or_path"),MUt.forEach(t),aAr=r(M8,":"),M8.forEach(t),nAr=i(Da),ft=n(Da,"UL",{});var Ul=s(ft);PC=n(Ul,"LI",{});var lQe=s(PC);n5e=n(lQe,"STRONG",{});var EUt=s(n5e);sAr=r(EUt,"data2vec-audio"),EUt.forEach(t),lAr=r(lQe," \u2014 "),oZ=n(lQe,"A",{href:!0});var CUt=s(oZ);iAr=r(CUt,"Data2VecAudioForXVector"),CUt.forEach(t),dAr=r(lQe," (Data2VecAudio model)"),lQe.forEach(t),cAr=i(Ul),BC=n(Ul,"LI",{});var iQe=s(BC);s5e=n(iQe,"STRONG",{});var wUt=s(s5e);mAr=r(wUt,"unispeech-sat"),wUt.forEach(t),fAr=r(iQe," \u2014 "),rZ=n(iQe,"A",{href:!0});var AUt=s(rZ);gAr=r(AUt,"UniSpeechSatForXVector"),AUt.forEach(t),hAr=r(iQe," (UniSpeechSat model)"),iQe.forEach(t),uAr=i(Ul),IC=n(Ul,"LI",{});var dQe=s(IC);l5e=n(dQe,"STRONG",{});var LUt=s(l5e);pAr=r(LUt,"wav2vec2"),LUt.forEach(t),_Ar=r(dQe," \u2014 "),tZ=n(dQe,"A",{href:!0});var yUt=s(tZ);bAr=r(yUt,"Wav2Vec2ForXVector"),yUt.forEach(t),vAr=r(dQe," (Wav2Vec2 model)"),dQe.forEach(t),FAr=i(Ul),NC=n(Ul,"LI",{});var cQe=s(NC);i5e=n(cQe,"STRONG",{});var xUt=s(i5e);TAr=r(xUt,"wav2vec2-conformer"),xUt.forEach(t),MAr=r(cQe," \u2014 "),aZ=n(cQe,"A",{href:!0});var $Ut=s(aZ);EAr=r($Ut,"Wav2Vec2ConformerForXVector"),$Ut.forEach(t),CAr=r(cQe," (Wav2Vec2-Conformer model)"),cQe.forEach(t),wAr=i(Ul),qC=n(Ul,"LI",{});var mQe=s(qC);d5e=n(mQe,"STRONG",{});var kUt=s(d5e);AAr=r(kUt,"wavlm"),kUt.forEach(t),LAr=r(mQe," \u2014 "),nZ=n(mQe,"A",{href:!0});var SUt=s(nZ);yAr=r(SUt,"WavLMForXVector"),SUt.forEach(t),xAr=r(mQe," (WavLM model)"),mQe.forEach(t),Ul.forEach(t),$Ar=i(Da),jC=n(Da,"P",{});var fQe=s(jC);kAr=r(fQe,"The model is set in evaluation mode by default using "),c5e=n(fQe,"CODE",{});var RUt=s(c5e);SAr=r(RUt,"model.eval()"),RUt.forEach(t),RAr=r(fQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m5e=n(fQe,"CODE",{});var PUt=s(m5e);PAr=r(PUt,"model.train()"),PUt.forEach(t),fQe.forEach(t),BAr=i(Da),T(DC.$$.fragment,Da),Da.forEach(t),Wl.forEach(t),VZe=i(m),Lc=n(m,"H2",{class:!0});var aro=s(Lc);GC=n(aro,"A",{id:!0,class:!0,href:!0});var BUt=s(GC);f5e=n(BUt,"SPAN",{});var IUt=s(f5e);T(mk.$$.fragment,IUt),IUt.forEach(t),BUt.forEach(t),IAr=i(aro),g5e=n(aro,"SPAN",{});var NUt=s(g5e);NAr=r(NUt,"AutoModelForMaskedImageModeling"),NUt.forEach(t),aro.forEach(t),XZe=i(m),or=n(m,"DIV",{class:!0});var Hl=s(or);T(fk.$$.fragment,Hl),qAr=i(Hl),yc=n(Hl,"P",{});var uie=s(yc);jAr=r(uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sZ=n(uie,"A",{href:!0});var qUt=s(sZ);DAr=r(qUt,"from_pretrained()"),qUt.forEach(t),GAr=r(uie," class method or the "),lZ=n(uie,"A",{href:!0});var jUt=s(lZ);OAr=r(jUt,"from_config()"),jUt.forEach(t),VAr=r(uie,` class
method.`),uie.forEach(t),XAr=i(Hl),gk=n(Hl,"P",{});var nro=s(gk);zAr=r(nro,"This class cannot be instantiated directly using "),h5e=n(nro,"CODE",{});var DUt=s(h5e);QAr=r(DUt,"__init__()"),DUt.forEach(t),WAr=r(nro," (throws an error)."),nro.forEach(t),UAr=i(Hl),jt=n(Hl,"DIV",{class:!0});var E8=s(jt);T(hk.$$.fragment,E8),HAr=i(E8),u5e=n(E8,"P",{});var GUt=s(u5e);JAr=r(GUt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),GUt.forEach(t),YAr=i(E8),xc=n(E8,"P",{});var pie=s(xc);KAr=r(pie,`Note:
Loading a model from its configuration file does `),p5e=n(pie,"STRONG",{});var OUt=s(p5e);ZAr=r(OUt,"not"),OUt.forEach(t),e6r=r(pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(pie,"A",{href:!0});var VUt=s(iZ);o6r=r(VUt,"from_pretrained()"),VUt.forEach(t),r6r=r(pie," to load the model weights."),pie.forEach(t),t6r=i(E8),T(OC.$$.fragment,E8),E8.forEach(t),a6r=i(Hl),To=n(Hl,"DIV",{class:!0});var Ga=s(To);T(uk.$$.fragment,Ga),n6r=i(Ga),_5e=n(Ga,"P",{});var XUt=s(_5e);s6r=r(XUt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),XUt.forEach(t),l6r=i(Ga),bn=n(Ga,"P",{});var C8=s(bn);i6r=r(C8,"The model class to instantiate is selected based on the "),b5e=n(C8,"CODE",{});var zUt=s(b5e);d6r=r(zUt,"model_type"),zUt.forEach(t),c6r=r(C8,` property of the config object (either
passed as an argument or loaded from `),v5e=n(C8,"CODE",{});var QUt=s(v5e);m6r=r(QUt,"pretrained_model_name_or_path"),QUt.forEach(t),f6r=r(C8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(C8,"CODE",{});var WUt=s(F5e);g6r=r(WUt,"pretrained_model_name_or_path"),WUt.forEach(t),h6r=r(C8,":"),C8.forEach(t),u6r=i(Ga),vn=n(Ga,"UL",{});var w8=s(vn);VC=n(w8,"LI",{});var gQe=s(VC);T5e=n(gQe,"STRONG",{});var UUt=s(T5e);p6r=r(UUt,"deit"),UUt.forEach(t),_6r=r(gQe," \u2014 "),dZ=n(gQe,"A",{href:!0});var HUt=s(dZ);b6r=r(HUt,"DeiTForMaskedImageModeling"),HUt.forEach(t),v6r=r(gQe," (DeiT model)"),gQe.forEach(t),F6r=i(w8),XC=n(w8,"LI",{});var hQe=s(XC);M5e=n(hQe,"STRONG",{});var JUt=s(M5e);T6r=r(JUt,"swin"),JUt.forEach(t),M6r=r(hQe," \u2014 "),cZ=n(hQe,"A",{href:!0});var YUt=s(cZ);E6r=r(YUt,"SwinForMaskedImageModeling"),YUt.forEach(t),C6r=r(hQe," (Swin Transformer model)"),hQe.forEach(t),w6r=i(w8),zC=n(w8,"LI",{});var uQe=s(zC);E5e=n(uQe,"STRONG",{});var KUt=s(E5e);A6r=r(KUt,"swinv2"),KUt.forEach(t),L6r=r(uQe," \u2014 "),mZ=n(uQe,"A",{href:!0});var ZUt=s(mZ);y6r=r(ZUt,"Swinv2ForMaskedImageModeling"),ZUt.forEach(t),x6r=r(uQe," (Swin Transformer V2 model)"),uQe.forEach(t),$6r=i(w8),QC=n(w8,"LI",{});var pQe=s(QC);C5e=n(pQe,"STRONG",{});var eHt=s(C5e);k6r=r(eHt,"vit"),eHt.forEach(t),S6r=r(pQe," \u2014 "),fZ=n(pQe,"A",{href:!0});var oHt=s(fZ);R6r=r(oHt,"ViTForMaskedImageModeling"),oHt.forEach(t),P6r=r(pQe," (ViT model)"),pQe.forEach(t),w8.forEach(t),B6r=i(Ga),WC=n(Ga,"P",{});var _Qe=s(WC);I6r=r(_Qe,"The model is set in evaluation mode by default using "),w5e=n(_Qe,"CODE",{});var rHt=s(w5e);N6r=r(rHt,"model.eval()"),rHt.forEach(t),q6r=r(_Qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A5e=n(_Qe,"CODE",{});var tHt=s(A5e);j6r=r(tHt,"model.train()"),tHt.forEach(t),_Qe.forEach(t),D6r=i(Ga),T(UC.$$.fragment,Ga),Ga.forEach(t),Hl.forEach(t),zZe=i(m),$c=n(m,"H2",{class:!0});var sro=s($c);HC=n(sro,"A",{id:!0,class:!0,href:!0});var aHt=s(HC);L5e=n(aHt,"SPAN",{});var nHt=s(L5e);T(pk.$$.fragment,nHt),nHt.forEach(t),aHt.forEach(t),G6r=i(sro),y5e=n(sro,"SPAN",{});var sHt=s(y5e);O6r=r(sHt,"AutoModelForObjectDetection"),sHt.forEach(t),sro.forEach(t),QZe=i(m),rr=n(m,"DIV",{class:!0});var Jl=s(rr);T(_k.$$.fragment,Jl),V6r=i(Jl),kc=n(Jl,"P",{});var _ie=s(kc);X6r=r(_ie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gZ=n(_ie,"A",{href:!0});var lHt=s(gZ);z6r=r(lHt,"from_pretrained()"),lHt.forEach(t),Q6r=r(_ie," class method or the "),hZ=n(_ie,"A",{href:!0});var iHt=s(hZ);W6r=r(iHt,"from_config()"),iHt.forEach(t),U6r=r(_ie,` class
method.`),_ie.forEach(t),H6r=i(Jl),bk=n(Jl,"P",{});var lro=s(bk);J6r=r(lro,"This class cannot be instantiated directly using "),x5e=n(lro,"CODE",{});var dHt=s(x5e);Y6r=r(dHt,"__init__()"),dHt.forEach(t),K6r=r(lro," (throws an error)."),lro.forEach(t),Z6r=i(Jl),Dt=n(Jl,"DIV",{class:!0});var A8=s(Dt);T(vk.$$.fragment,A8),e7r=i(A8),$5e=n(A8,"P",{});var cHt=s($5e);o7r=r(cHt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cHt.forEach(t),r7r=i(A8),Sc=n(A8,"P",{});var bie=s(Sc);t7r=r(bie,`Note:
Loading a model from its configuration file does `),k5e=n(bie,"STRONG",{});var mHt=s(k5e);a7r=r(mHt,"not"),mHt.forEach(t),n7r=r(bie,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(bie,"A",{href:!0});var fHt=s(uZ);s7r=r(fHt,"from_pretrained()"),fHt.forEach(t),l7r=r(bie," to load the model weights."),bie.forEach(t),i7r=i(A8),T(JC.$$.fragment,A8),A8.forEach(t),d7r=i(Jl),Mo=n(Jl,"DIV",{class:!0});var Oa=s(Mo);T(Fk.$$.fragment,Oa),c7r=i(Oa),S5e=n(Oa,"P",{});var gHt=s(S5e);m7r=r(gHt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gHt.forEach(t),f7r=i(Oa),Fn=n(Oa,"P",{});var L8=s(Fn);g7r=r(L8,"The model class to instantiate is selected based on the "),R5e=n(L8,"CODE",{});var hHt=s(R5e);h7r=r(hHt,"model_type"),hHt.forEach(t),u7r=r(L8,` property of the config object (either
passed as an argument or loaded from `),P5e=n(L8,"CODE",{});var uHt=s(P5e);p7r=r(uHt,"pretrained_model_name_or_path"),uHt.forEach(t),_7r=r(L8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(L8,"CODE",{});var pHt=s(B5e);b7r=r(pHt,"pretrained_model_name_or_path"),pHt.forEach(t),v7r=r(L8,":"),L8.forEach(t),F7r=i(Oa),Tn=n(Oa,"UL",{});var y8=s(Tn);YC=n(y8,"LI",{});var bQe=s(YC);I5e=n(bQe,"STRONG",{});var _Ht=s(I5e);T7r=r(_Ht,"conditional_detr"),_Ht.forEach(t),M7r=r(bQe," \u2014 "),pZ=n(bQe,"A",{href:!0});var bHt=s(pZ);E7r=r(bHt,"ConditionalDetrForObjectDetection"),bHt.forEach(t),C7r=r(bQe," (Conditional DETR model)"),bQe.forEach(t),w7r=i(y8),KC=n(y8,"LI",{});var vQe=s(KC);N5e=n(vQe,"STRONG",{});var vHt=s(N5e);A7r=r(vHt,"deformable_detr"),vHt.forEach(t),L7r=r(vQe," \u2014 "),_Z=n(vQe,"A",{href:!0});var FHt=s(_Z);y7r=r(FHt,"DeformableDetrForObjectDetection"),FHt.forEach(t),x7r=r(vQe," (Deformable DETR model)"),vQe.forEach(t),$7r=i(y8),ZC=n(y8,"LI",{});var FQe=s(ZC);q5e=n(FQe,"STRONG",{});var THt=s(q5e);k7r=r(THt,"detr"),THt.forEach(t),S7r=r(FQe," \u2014 "),bZ=n(FQe,"A",{href:!0});var MHt=s(bZ);R7r=r(MHt,"DetrForObjectDetection"),MHt.forEach(t),P7r=r(FQe," (DETR model)"),FQe.forEach(t),B7r=i(y8),e3=n(y8,"LI",{});var TQe=s(e3);j5e=n(TQe,"STRONG",{});var EHt=s(j5e);I7r=r(EHt,"yolos"),EHt.forEach(t),N7r=r(TQe," \u2014 "),vZ=n(TQe,"A",{href:!0});var CHt=s(vZ);q7r=r(CHt,"YolosForObjectDetection"),CHt.forEach(t),j7r=r(TQe," (YOLOS model)"),TQe.forEach(t),y8.forEach(t),D7r=i(Oa),o3=n(Oa,"P",{});var MQe=s(o3);G7r=r(MQe,"The model is set in evaluation mode by default using "),D5e=n(MQe,"CODE",{});var wHt=s(D5e);O7r=r(wHt,"model.eval()"),wHt.forEach(t),V7r=r(MQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G5e=n(MQe,"CODE",{});var AHt=s(G5e);X7r=r(AHt,"model.train()"),AHt.forEach(t),MQe.forEach(t),z7r=i(Oa),T(r3.$$.fragment,Oa),Oa.forEach(t),Jl.forEach(t),WZe=i(m),Rc=n(m,"H2",{class:!0});var iro=s(Rc);t3=n(iro,"A",{id:!0,class:!0,href:!0});var LHt=s(t3);O5e=n(LHt,"SPAN",{});var yHt=s(O5e);T(Tk.$$.fragment,yHt),yHt.forEach(t),LHt.forEach(t),Q7r=i(iro),V5e=n(iro,"SPAN",{});var xHt=s(V5e);W7r=r(xHt,"AutoModelForImageSegmentation"),xHt.forEach(t),iro.forEach(t),UZe=i(m),tr=n(m,"DIV",{class:!0});var Yl=s(tr);T(Mk.$$.fragment,Yl),U7r=i(Yl),Pc=n(Yl,"P",{});var vie=s(Pc);H7r=r(vie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FZ=n(vie,"A",{href:!0});var $Ht=s(FZ);J7r=r($Ht,"from_pretrained()"),$Ht.forEach(t),Y7r=r(vie," class method or the "),TZ=n(vie,"A",{href:!0});var kHt=s(TZ);K7r=r(kHt,"from_config()"),kHt.forEach(t),Z7r=r(vie,` class
method.`),vie.forEach(t),eLr=i(Yl),Ek=n(Yl,"P",{});var dro=s(Ek);oLr=r(dro,"This class cannot be instantiated directly using "),X5e=n(dro,"CODE",{});var SHt=s(X5e);rLr=r(SHt,"__init__()"),SHt.forEach(t),tLr=r(dro," (throws an error)."),dro.forEach(t),aLr=i(Yl),Gt=n(Yl,"DIV",{class:!0});var x8=s(Gt);T(Ck.$$.fragment,x8),nLr=i(x8),z5e=n(x8,"P",{});var RHt=s(z5e);sLr=r(RHt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),RHt.forEach(t),lLr=i(x8),Bc=n(x8,"P",{});var Fie=s(Bc);iLr=r(Fie,`Note:
Loading a model from its configuration file does `),Q5e=n(Fie,"STRONG",{});var PHt=s(Q5e);dLr=r(PHt,"not"),PHt.forEach(t),cLr=r(Fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(Fie,"A",{href:!0});var BHt=s(MZ);mLr=r(BHt,"from_pretrained()"),BHt.forEach(t),fLr=r(Fie," to load the model weights."),Fie.forEach(t),gLr=i(x8),T(a3.$$.fragment,x8),x8.forEach(t),hLr=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Va=s(Eo);T(wk.$$.fragment,Va),uLr=i(Va),W5e=n(Va,"P",{});var IHt=s(W5e);pLr=r(IHt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),IHt.forEach(t),_Lr=i(Va),Mn=n(Va,"P",{});var $8=s(Mn);bLr=r($8,"The model class to instantiate is selected based on the "),U5e=n($8,"CODE",{});var NHt=s(U5e);vLr=r(NHt,"model_type"),NHt.forEach(t),FLr=r($8,` property of the config object (either
passed as an argument or loaded from `),H5e=n($8,"CODE",{});var qHt=s(H5e);TLr=r(qHt,"pretrained_model_name_or_path"),qHt.forEach(t),MLr=r($8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n($8,"CODE",{});var jHt=s(J5e);ELr=r(jHt,"pretrained_model_name_or_path"),jHt.forEach(t),CLr=r($8,":"),$8.forEach(t),wLr=i(Va),Y5e=n(Va,"UL",{});var DHt=s(Y5e);n3=n(DHt,"LI",{});var EQe=s(n3);K5e=n(EQe,"STRONG",{});var GHt=s(K5e);ALr=r(GHt,"detr"),GHt.forEach(t),LLr=r(EQe," \u2014 "),EZ=n(EQe,"A",{href:!0});var OHt=s(EZ);yLr=r(OHt,"DetrForSegmentation"),OHt.forEach(t),xLr=r(EQe," (DETR model)"),EQe.forEach(t),DHt.forEach(t),$Lr=i(Va),s3=n(Va,"P",{});var CQe=s(s3);kLr=r(CQe,"The model is set in evaluation mode by default using "),Z5e=n(CQe,"CODE",{});var VHt=s(Z5e);SLr=r(VHt,"model.eval()"),VHt.forEach(t),RLr=r(CQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e0e=n(CQe,"CODE",{});var XHt=s(e0e);PLr=r(XHt,"model.train()"),XHt.forEach(t),CQe.forEach(t),BLr=i(Va),T(l3.$$.fragment,Va),Va.forEach(t),Yl.forEach(t),HZe=i(m),Ic=n(m,"H2",{class:!0});var cro=s(Ic);i3=n(cro,"A",{id:!0,class:!0,href:!0});var zHt=s(i3);o0e=n(zHt,"SPAN",{});var QHt=s(o0e);T(Ak.$$.fragment,QHt),QHt.forEach(t),zHt.forEach(t),ILr=i(cro),r0e=n(cro,"SPAN",{});var WHt=s(r0e);NLr=r(WHt,"AutoModelForSemanticSegmentation"),WHt.forEach(t),cro.forEach(t),JZe=i(m),ar=n(m,"DIV",{class:!0});var Kl=s(ar);T(Lk.$$.fragment,Kl),qLr=i(Kl),Nc=n(Kl,"P",{});var Tie=s(Nc);jLr=r(Tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CZ=n(Tie,"A",{href:!0});var UHt=s(CZ);DLr=r(UHt,"from_pretrained()"),UHt.forEach(t),GLr=r(Tie," class method or the "),wZ=n(Tie,"A",{href:!0});var HHt=s(wZ);OLr=r(HHt,"from_config()"),HHt.forEach(t),VLr=r(Tie,` class
method.`),Tie.forEach(t),XLr=i(Kl),yk=n(Kl,"P",{});var mro=s(yk);zLr=r(mro,"This class cannot be instantiated directly using "),t0e=n(mro,"CODE",{});var JHt=s(t0e);QLr=r(JHt,"__init__()"),JHt.forEach(t),WLr=r(mro," (throws an error)."),mro.forEach(t),ULr=i(Kl),Ot=n(Kl,"DIV",{class:!0});var k8=s(Ot);T(xk.$$.fragment,k8),HLr=i(k8),a0e=n(k8,"P",{});var YHt=s(a0e);JLr=r(YHt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),YHt.forEach(t),YLr=i(k8),qc=n(k8,"P",{});var Mie=s(qc);KLr=r(Mie,`Note:
Loading a model from its configuration file does `),n0e=n(Mie,"STRONG",{});var KHt=s(n0e);ZLr=r(KHt,"not"),KHt.forEach(t),eyr=r(Mie,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(Mie,"A",{href:!0});var ZHt=s(AZ);oyr=r(ZHt,"from_pretrained()"),ZHt.forEach(t),ryr=r(Mie," to load the model weights."),Mie.forEach(t),tyr=i(k8),T(d3.$$.fragment,k8),k8.forEach(t),ayr=i(Kl),Co=n(Kl,"DIV",{class:!0});var Xa=s(Co);T($k.$$.fragment,Xa),nyr=i(Xa),s0e=n(Xa,"P",{});var eJt=s(s0e);syr=r(eJt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eJt.forEach(t),lyr=i(Xa),En=n(Xa,"P",{});var S8=s(En);iyr=r(S8,"The model class to instantiate is selected based on the "),l0e=n(S8,"CODE",{});var oJt=s(l0e);dyr=r(oJt,"model_type"),oJt.forEach(t),cyr=r(S8,` property of the config object (either
passed as an argument or loaded from `),i0e=n(S8,"CODE",{});var rJt=s(i0e);myr=r(rJt,"pretrained_model_name_or_path"),rJt.forEach(t),fyr=r(S8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=n(S8,"CODE",{});var tJt=s(d0e);gyr=r(tJt,"pretrained_model_name_or_path"),tJt.forEach(t),hyr=r(S8,":"),S8.forEach(t),uyr=i(Xa),gt=n(Xa,"UL",{});var Zl=s(gt);c3=n(Zl,"LI",{});var wQe=s(c3);c0e=n(wQe,"STRONG",{});var aJt=s(c0e);pyr=r(aJt,"beit"),aJt.forEach(t),_yr=r(wQe," \u2014 "),LZ=n(wQe,"A",{href:!0});var nJt=s(LZ);byr=r(nJt,"BeitForSemanticSegmentation"),nJt.forEach(t),vyr=r(wQe," (BEiT model)"),wQe.forEach(t),Fyr=i(Zl),m3=n(Zl,"LI",{});var AQe=s(m3);m0e=n(AQe,"STRONG",{});var sJt=s(m0e);Tyr=r(sJt,"data2vec-vision"),sJt.forEach(t),Myr=r(AQe," \u2014 "),yZ=n(AQe,"A",{href:!0});var lJt=s(yZ);Eyr=r(lJt,"Data2VecVisionForSemanticSegmentation"),lJt.forEach(t),Cyr=r(AQe," (Data2VecVision model)"),AQe.forEach(t),wyr=i(Zl),f3=n(Zl,"LI",{});var LQe=s(f3);f0e=n(LQe,"STRONG",{});var iJt=s(f0e);Ayr=r(iJt,"dpt"),iJt.forEach(t),Lyr=r(LQe," \u2014 "),xZ=n(LQe,"A",{href:!0});var dJt=s(xZ);yyr=r(dJt,"DPTForSemanticSegmentation"),dJt.forEach(t),xyr=r(LQe," (DPT model)"),LQe.forEach(t),$yr=i(Zl),g3=n(Zl,"LI",{});var yQe=s(g3);g0e=n(yQe,"STRONG",{});var cJt=s(g0e);kyr=r(cJt,"mobilevit"),cJt.forEach(t),Syr=r(yQe," \u2014 "),$Z=n(yQe,"A",{href:!0});var mJt=s($Z);Ryr=r(mJt,"MobileViTForSemanticSegmentation"),mJt.forEach(t),Pyr=r(yQe," (MobileViT model)"),yQe.forEach(t),Byr=i(Zl),h3=n(Zl,"LI",{});var xQe=s(h3);h0e=n(xQe,"STRONG",{});var fJt=s(h0e);Iyr=r(fJt,"segformer"),fJt.forEach(t),Nyr=r(xQe," \u2014 "),kZ=n(xQe,"A",{href:!0});var gJt=s(kZ);qyr=r(gJt,"SegformerForSemanticSegmentation"),gJt.forEach(t),jyr=r(xQe," (SegFormer model)"),xQe.forEach(t),Zl.forEach(t),Dyr=i(Xa),u3=n(Xa,"P",{});var $Qe=s(u3);Gyr=r($Qe,"The model is set in evaluation mode by default using "),u0e=n($Qe,"CODE",{});var hJt=s(u0e);Oyr=r(hJt,"model.eval()"),hJt.forEach(t),Vyr=r($Qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p0e=n($Qe,"CODE",{});var uJt=s(p0e);Xyr=r(uJt,"model.train()"),uJt.forEach(t),$Qe.forEach(t),zyr=i(Xa),T(p3.$$.fragment,Xa),Xa.forEach(t),Kl.forEach(t),YZe=i(m),jc=n(m,"H2",{class:!0});var fro=s(jc);_3=n(fro,"A",{id:!0,class:!0,href:!0});var pJt=s(_3);_0e=n(pJt,"SPAN",{});var _Jt=s(_0e);T(kk.$$.fragment,_Jt),_Jt.forEach(t),pJt.forEach(t),Qyr=i(fro),b0e=n(fro,"SPAN",{});var bJt=s(b0e);Wyr=r(bJt,"AutoModelForInstanceSegmentation"),bJt.forEach(t),fro.forEach(t),KZe=i(m),nr=n(m,"DIV",{class:!0});var ei=s(nr);T(Sk.$$.fragment,ei),Uyr=i(ei),Dc=n(ei,"P",{});var Eie=s(Dc);Hyr=r(Eie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SZ=n(Eie,"A",{href:!0});var vJt=s(SZ);Jyr=r(vJt,"from_pretrained()"),vJt.forEach(t),Yyr=r(Eie," class method or the "),RZ=n(Eie,"A",{href:!0});var FJt=s(RZ);Kyr=r(FJt,"from_config()"),FJt.forEach(t),Zyr=r(Eie,` class
method.`),Eie.forEach(t),e8r=i(ei),Rk=n(ei,"P",{});var gro=s(Rk);o8r=r(gro,"This class cannot be instantiated directly using "),v0e=n(gro,"CODE",{});var TJt=s(v0e);r8r=r(TJt,"__init__()"),TJt.forEach(t),t8r=r(gro," (throws an error)."),gro.forEach(t),a8r=i(ei),Vt=n(ei,"DIV",{class:!0});var R8=s(Vt);T(Pk.$$.fragment,R8),n8r=i(R8),F0e=n(R8,"P",{});var MJt=s(F0e);s8r=r(MJt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),MJt.forEach(t),l8r=i(R8),Gc=n(R8,"P",{});var Cie=s(Gc);i8r=r(Cie,`Note:
Loading a model from its configuration file does `),T0e=n(Cie,"STRONG",{});var EJt=s(T0e);d8r=r(EJt,"not"),EJt.forEach(t),c8r=r(Cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(Cie,"A",{href:!0});var CJt=s(PZ);m8r=r(CJt,"from_pretrained()"),CJt.forEach(t),f8r=r(Cie," to load the model weights."),Cie.forEach(t),g8r=i(R8),T(b3.$$.fragment,R8),R8.forEach(t),h8r=i(ei),wo=n(ei,"DIV",{class:!0});var za=s(wo);T(Bk.$$.fragment,za),u8r=i(za),M0e=n(za,"P",{});var wJt=s(M0e);p8r=r(wJt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wJt.forEach(t),_8r=i(za),Cn=n(za,"P",{});var P8=s(Cn);b8r=r(P8,"The model class to instantiate is selected based on the "),E0e=n(P8,"CODE",{});var AJt=s(E0e);v8r=r(AJt,"model_type"),AJt.forEach(t),F8r=r(P8,` property of the config object (either
passed as an argument or loaded from `),C0e=n(P8,"CODE",{});var LJt=s(C0e);T8r=r(LJt,"pretrained_model_name_or_path"),LJt.forEach(t),M8r=r(P8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=n(P8,"CODE",{});var yJt=s(w0e);E8r=r(yJt,"pretrained_model_name_or_path"),yJt.forEach(t),C8r=r(P8,":"),P8.forEach(t),w8r=i(za),A0e=n(za,"UL",{});var xJt=s(A0e);v3=n(xJt,"LI",{});var kQe=s(v3);L0e=n(kQe,"STRONG",{});var $Jt=s(L0e);A8r=r($Jt,"maskformer"),$Jt.forEach(t),L8r=r(kQe," \u2014 "),BZ=n(kQe,"A",{href:!0});var kJt=s(BZ);y8r=r(kJt,"MaskFormerForInstanceSegmentation"),kJt.forEach(t),x8r=r(kQe," (MaskFormer model)"),kQe.forEach(t),xJt.forEach(t),$8r=i(za),F3=n(za,"P",{});var SQe=s(F3);k8r=r(SQe,"The model is set in evaluation mode by default using "),y0e=n(SQe,"CODE",{});var SJt=s(y0e);S8r=r(SJt,"model.eval()"),SJt.forEach(t),R8r=r(SQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x0e=n(SQe,"CODE",{});var RJt=s(x0e);P8r=r(RJt,"model.train()"),RJt.forEach(t),SQe.forEach(t),B8r=i(za),T(T3.$$.fragment,za),za.forEach(t),ei.forEach(t),ZZe=i(m),Oc=n(m,"H2",{class:!0});var hro=s(Oc);M3=n(hro,"A",{id:!0,class:!0,href:!0});var PJt=s(M3);$0e=n(PJt,"SPAN",{});var BJt=s($0e);T(Ik.$$.fragment,BJt),BJt.forEach(t),PJt.forEach(t),I8r=i(hro),k0e=n(hro,"SPAN",{});var IJt=s(k0e);N8r=r(IJt,"TFAutoModel"),IJt.forEach(t),hro.forEach(t),eeo=i(m),sr=n(m,"DIV",{class:!0});var oi=s(sr);T(Nk.$$.fragment,oi),q8r=i(oi),Vc=n(oi,"P",{});var wie=s(Vc);j8r=r(wie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IZ=n(wie,"A",{href:!0});var NJt=s(IZ);D8r=r(NJt,"from_pretrained()"),NJt.forEach(t),G8r=r(wie," class method or the "),NZ=n(wie,"A",{href:!0});var qJt=s(NZ);O8r=r(qJt,"from_config()"),qJt.forEach(t),V8r=r(wie,` class
method.`),wie.forEach(t),X8r=i(oi),qk=n(oi,"P",{});var uro=s(qk);z8r=r(uro,"This class cannot be instantiated directly using "),S0e=n(uro,"CODE",{});var jJt=s(S0e);Q8r=r(jJt,"__init__()"),jJt.forEach(t),W8r=r(uro," (throws an error)."),uro.forEach(t),U8r=i(oi),Xt=n(oi,"DIV",{class:!0});var B8=s(Xt);T(jk.$$.fragment,B8),H8r=i(B8),R0e=n(B8,"P",{});var DJt=s(R0e);J8r=r(DJt,"Instantiates one of the base model classes of the library from a configuration."),DJt.forEach(t),Y8r=i(B8),Xc=n(B8,"P",{});var Aie=s(Xc);K8r=r(Aie,`Note:
Loading a model from its configuration file does `),P0e=n(Aie,"STRONG",{});var GJt=s(P0e);Z8r=r(GJt,"not"),GJt.forEach(t),e9r=r(Aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Aie,"A",{href:!0});var OJt=s(qZ);o9r=r(OJt,"from_pretrained()"),OJt.forEach(t),r9r=r(Aie," to load the model weights."),Aie.forEach(t),t9r=i(B8),T(E3.$$.fragment,B8),B8.forEach(t),a9r=i(oi),Ir=n(oi,"DIV",{class:!0});var ri=s(Ir);T(Dk.$$.fragment,ri),n9r=i(ri),B0e=n(ri,"P",{});var VJt=s(B0e);s9r=r(VJt,"Instantiate one of the base model classes of the library from a pretrained model."),VJt.forEach(t),l9r=i(ri),wn=n(ri,"P",{});var I8=s(wn);i9r=r(I8,"The model class to instantiate is selected based on the "),I0e=n(I8,"CODE",{});var XJt=s(I0e);d9r=r(XJt,"model_type"),XJt.forEach(t),c9r=r(I8,` property of the config object (either
passed as an argument or loaded from `),N0e=n(I8,"CODE",{});var zJt=s(N0e);m9r=r(zJt,"pretrained_model_name_or_path"),zJt.forEach(t),f9r=r(I8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(I8,"CODE",{});var QJt=s(q0e);g9r=r(QJt,"pretrained_model_name_or_path"),QJt.forEach(t),h9r=r(I8,":"),I8.forEach(t),u9r=i(ri),N=n(ri,"UL",{});var j=s(N);C3=n(j,"LI",{});var RQe=s(C3);j0e=n(RQe,"STRONG",{});var WJt=s(j0e);p9r=r(WJt,"albert"),WJt.forEach(t),_9r=r(RQe," \u2014 "),jZ=n(RQe,"A",{href:!0});var UJt=s(jZ);b9r=r(UJt,"TFAlbertModel"),UJt.forEach(t),v9r=r(RQe," (ALBERT model)"),RQe.forEach(t),F9r=i(j),w3=n(j,"LI",{});var PQe=s(w3);D0e=n(PQe,"STRONG",{});var HJt=s(D0e);T9r=r(HJt,"bart"),HJt.forEach(t),M9r=r(PQe," \u2014 "),DZ=n(PQe,"A",{href:!0});var JJt=s(DZ);E9r=r(JJt,"TFBartModel"),JJt.forEach(t),C9r=r(PQe," (BART model)"),PQe.forEach(t),w9r=i(j),A3=n(j,"LI",{});var BQe=s(A3);G0e=n(BQe,"STRONG",{});var YJt=s(G0e);A9r=r(YJt,"bert"),YJt.forEach(t),L9r=r(BQe," \u2014 "),GZ=n(BQe,"A",{href:!0});var KJt=s(GZ);y9r=r(KJt,"TFBertModel"),KJt.forEach(t),x9r=r(BQe," (BERT model)"),BQe.forEach(t),$9r=i(j),L3=n(j,"LI",{});var IQe=s(L3);O0e=n(IQe,"STRONG",{});var ZJt=s(O0e);k9r=r(ZJt,"blenderbot"),ZJt.forEach(t),S9r=r(IQe," \u2014 "),OZ=n(IQe,"A",{href:!0});var eYt=s(OZ);R9r=r(eYt,"TFBlenderbotModel"),eYt.forEach(t),P9r=r(IQe," (Blenderbot model)"),IQe.forEach(t),B9r=i(j),y3=n(j,"LI",{});var NQe=s(y3);V0e=n(NQe,"STRONG",{});var oYt=s(V0e);I9r=r(oYt,"blenderbot-small"),oYt.forEach(t),N9r=r(NQe," \u2014 "),VZ=n(NQe,"A",{href:!0});var rYt=s(VZ);q9r=r(rYt,"TFBlenderbotSmallModel"),rYt.forEach(t),j9r=r(NQe," (BlenderbotSmall model)"),NQe.forEach(t),D9r=i(j),x3=n(j,"LI",{});var qQe=s(x3);X0e=n(qQe,"STRONG",{});var tYt=s(X0e);G9r=r(tYt,"camembert"),tYt.forEach(t),O9r=r(qQe," \u2014 "),XZ=n(qQe,"A",{href:!0});var aYt=s(XZ);V9r=r(aYt,"TFCamembertModel"),aYt.forEach(t),X9r=r(qQe," (CamemBERT model)"),qQe.forEach(t),z9r=i(j),$3=n(j,"LI",{});var jQe=s($3);z0e=n(jQe,"STRONG",{});var nYt=s(z0e);Q9r=r(nYt,"clip"),nYt.forEach(t),W9r=r(jQe," \u2014 "),zZ=n(jQe,"A",{href:!0});var sYt=s(zZ);U9r=r(sYt,"TFCLIPModel"),sYt.forEach(t),H9r=r(jQe," (CLIP model)"),jQe.forEach(t),J9r=i(j),k3=n(j,"LI",{});var DQe=s(k3);Q0e=n(DQe,"STRONG",{});var lYt=s(Q0e);Y9r=r(lYt,"convbert"),lYt.forEach(t),K9r=r(DQe," \u2014 "),QZ=n(DQe,"A",{href:!0});var iYt=s(QZ);Z9r=r(iYt,"TFConvBertModel"),iYt.forEach(t),exr=r(DQe," (ConvBERT model)"),DQe.forEach(t),oxr=i(j),S3=n(j,"LI",{});var GQe=s(S3);W0e=n(GQe,"STRONG",{});var dYt=s(W0e);rxr=r(dYt,"convnext"),dYt.forEach(t),txr=r(GQe," \u2014 "),WZ=n(GQe,"A",{href:!0});var cYt=s(WZ);axr=r(cYt,"TFConvNextModel"),cYt.forEach(t),nxr=r(GQe," (ConvNeXT model)"),GQe.forEach(t),sxr=i(j),R3=n(j,"LI",{});var OQe=s(R3);U0e=n(OQe,"STRONG",{});var mYt=s(U0e);lxr=r(mYt,"ctrl"),mYt.forEach(t),ixr=r(OQe," \u2014 "),UZ=n(OQe,"A",{href:!0});var fYt=s(UZ);dxr=r(fYt,"TFCTRLModel"),fYt.forEach(t),cxr=r(OQe," (CTRL model)"),OQe.forEach(t),mxr=i(j),P3=n(j,"LI",{});var VQe=s(P3);H0e=n(VQe,"STRONG",{});var gYt=s(H0e);fxr=r(gYt,"data2vec-vision"),gYt.forEach(t),gxr=r(VQe," \u2014 "),HZ=n(VQe,"A",{href:!0});var hYt=s(HZ);hxr=r(hYt,"TFData2VecVisionModel"),hYt.forEach(t),uxr=r(VQe," (Data2VecVision model)"),VQe.forEach(t),pxr=i(j),B3=n(j,"LI",{});var XQe=s(B3);J0e=n(XQe,"STRONG",{});var uYt=s(J0e);_xr=r(uYt,"deberta"),uYt.forEach(t),bxr=r(XQe," \u2014 "),JZ=n(XQe,"A",{href:!0});var pYt=s(JZ);vxr=r(pYt,"TFDebertaModel"),pYt.forEach(t),Fxr=r(XQe," (DeBERTa model)"),XQe.forEach(t),Txr=i(j),I3=n(j,"LI",{});var zQe=s(I3);Y0e=n(zQe,"STRONG",{});var _Yt=s(Y0e);Mxr=r(_Yt,"deberta-v2"),_Yt.forEach(t),Exr=r(zQe," \u2014 "),YZ=n(zQe,"A",{href:!0});var bYt=s(YZ);Cxr=r(bYt,"TFDebertaV2Model"),bYt.forEach(t),wxr=r(zQe," (DeBERTa-v2 model)"),zQe.forEach(t),Axr=i(j),N3=n(j,"LI",{});var QQe=s(N3);K0e=n(QQe,"STRONG",{});var vYt=s(K0e);Lxr=r(vYt,"deit"),vYt.forEach(t),yxr=r(QQe," \u2014 "),KZ=n(QQe,"A",{href:!0});var FYt=s(KZ);xxr=r(FYt,"TFDeiTModel"),FYt.forEach(t),$xr=r(QQe," (DeiT model)"),QQe.forEach(t),kxr=i(j),q3=n(j,"LI",{});var WQe=s(q3);Z0e=n(WQe,"STRONG",{});var TYt=s(Z0e);Sxr=r(TYt,"distilbert"),TYt.forEach(t),Rxr=r(WQe," \u2014 "),ZZ=n(WQe,"A",{href:!0});var MYt=s(ZZ);Pxr=r(MYt,"TFDistilBertModel"),MYt.forEach(t),Bxr=r(WQe," (DistilBERT model)"),WQe.forEach(t),Ixr=i(j),j3=n(j,"LI",{});var UQe=s(j3);ewe=n(UQe,"STRONG",{});var EYt=s(ewe);Nxr=r(EYt,"dpr"),EYt.forEach(t),qxr=r(UQe," \u2014 "),eee=n(UQe,"A",{href:!0});var CYt=s(eee);jxr=r(CYt,"TFDPRQuestionEncoder"),CYt.forEach(t),Dxr=r(UQe," (DPR model)"),UQe.forEach(t),Gxr=i(j),D3=n(j,"LI",{});var HQe=s(D3);owe=n(HQe,"STRONG",{});var wYt=s(owe);Oxr=r(wYt,"electra"),wYt.forEach(t),Vxr=r(HQe," \u2014 "),oee=n(HQe,"A",{href:!0});var AYt=s(oee);Xxr=r(AYt,"TFElectraModel"),AYt.forEach(t),zxr=r(HQe," (ELECTRA model)"),HQe.forEach(t),Qxr=i(j),G3=n(j,"LI",{});var JQe=s(G3);rwe=n(JQe,"STRONG",{});var LYt=s(rwe);Wxr=r(LYt,"flaubert"),LYt.forEach(t),Uxr=r(JQe," \u2014 "),ree=n(JQe,"A",{href:!0});var yYt=s(ree);Hxr=r(yYt,"TFFlaubertModel"),yYt.forEach(t),Jxr=r(JQe," (FlauBERT model)"),JQe.forEach(t),Yxr=i(j),Fl=n(j,"LI",{});var jB=s(Fl);twe=n(jB,"STRONG",{});var xYt=s(twe);Kxr=r(xYt,"funnel"),xYt.forEach(t),Zxr=r(jB," \u2014 "),tee=n(jB,"A",{href:!0});var $Yt=s(tee);e$r=r($Yt,"TFFunnelModel"),$Yt.forEach(t),o$r=r(jB," or "),aee=n(jB,"A",{href:!0});var kYt=s(aee);r$r=r(kYt,"TFFunnelBaseModel"),kYt.forEach(t),t$r=r(jB," (Funnel Transformer model)"),jB.forEach(t),a$r=i(j),O3=n(j,"LI",{});var YQe=s(O3);awe=n(YQe,"STRONG",{});var SYt=s(awe);n$r=r(SYt,"gpt2"),SYt.forEach(t),s$r=r(YQe," \u2014 "),nee=n(YQe,"A",{href:!0});var RYt=s(nee);l$r=r(RYt,"TFGPT2Model"),RYt.forEach(t),i$r=r(YQe," (OpenAI GPT-2 model)"),YQe.forEach(t),d$r=i(j),V3=n(j,"LI",{});var KQe=s(V3);nwe=n(KQe,"STRONG",{});var PYt=s(nwe);c$r=r(PYt,"gptj"),PYt.forEach(t),m$r=r(KQe," \u2014 "),see=n(KQe,"A",{href:!0});var BYt=s(see);f$r=r(BYt,"TFGPTJModel"),BYt.forEach(t),g$r=r(KQe," (GPT-J model)"),KQe.forEach(t),h$r=i(j),X3=n(j,"LI",{});var ZQe=s(X3);swe=n(ZQe,"STRONG",{});var IYt=s(swe);u$r=r(IYt,"hubert"),IYt.forEach(t),p$r=r(ZQe," \u2014 "),lee=n(ZQe,"A",{href:!0});var NYt=s(lee);_$r=r(NYt,"TFHubertModel"),NYt.forEach(t),b$r=r(ZQe," (Hubert model)"),ZQe.forEach(t),v$r=i(j),z3=n(j,"LI",{});var eWe=s(z3);lwe=n(eWe,"STRONG",{});var qYt=s(lwe);F$r=r(qYt,"layoutlm"),qYt.forEach(t),T$r=r(eWe," \u2014 "),iee=n(eWe,"A",{href:!0});var jYt=s(iee);M$r=r(jYt,"TFLayoutLMModel"),jYt.forEach(t),E$r=r(eWe," (LayoutLM model)"),eWe.forEach(t),C$r=i(j),Q3=n(j,"LI",{});var oWe=s(Q3);iwe=n(oWe,"STRONG",{});var DYt=s(iwe);w$r=r(DYt,"layoutlmv3"),DYt.forEach(t),A$r=r(oWe," \u2014 "),dee=n(oWe,"A",{href:!0});var GYt=s(dee);L$r=r(GYt,"TFLayoutLMv3Model"),GYt.forEach(t),y$r=r(oWe," (LayoutLMv3 model)"),oWe.forEach(t),x$r=i(j),W3=n(j,"LI",{});var rWe=s(W3);dwe=n(rWe,"STRONG",{});var OYt=s(dwe);$$r=r(OYt,"led"),OYt.forEach(t),k$r=r(rWe," \u2014 "),cee=n(rWe,"A",{href:!0});var VYt=s(cee);S$r=r(VYt,"TFLEDModel"),VYt.forEach(t),R$r=r(rWe," (LED model)"),rWe.forEach(t),P$r=i(j),U3=n(j,"LI",{});var tWe=s(U3);cwe=n(tWe,"STRONG",{});var XYt=s(cwe);B$r=r(XYt,"longformer"),XYt.forEach(t),I$r=r(tWe," \u2014 "),mee=n(tWe,"A",{href:!0});var zYt=s(mee);N$r=r(zYt,"TFLongformerModel"),zYt.forEach(t),q$r=r(tWe," (Longformer model)"),tWe.forEach(t),j$r=i(j),H3=n(j,"LI",{});var aWe=s(H3);mwe=n(aWe,"STRONG",{});var QYt=s(mwe);D$r=r(QYt,"lxmert"),QYt.forEach(t),G$r=r(aWe," \u2014 "),fee=n(aWe,"A",{href:!0});var WYt=s(fee);O$r=r(WYt,"TFLxmertModel"),WYt.forEach(t),V$r=r(aWe," (LXMERT model)"),aWe.forEach(t),X$r=i(j),J3=n(j,"LI",{});var nWe=s(J3);fwe=n(nWe,"STRONG",{});var UYt=s(fwe);z$r=r(UYt,"marian"),UYt.forEach(t),Q$r=r(nWe," \u2014 "),gee=n(nWe,"A",{href:!0});var HYt=s(gee);W$r=r(HYt,"TFMarianModel"),HYt.forEach(t),U$r=r(nWe," (Marian model)"),nWe.forEach(t),H$r=i(j),Y3=n(j,"LI",{});var sWe=s(Y3);gwe=n(sWe,"STRONG",{});var JYt=s(gwe);J$r=r(JYt,"mbart"),JYt.forEach(t),Y$r=r(sWe," \u2014 "),hee=n(sWe,"A",{href:!0});var YYt=s(hee);K$r=r(YYt,"TFMBartModel"),YYt.forEach(t),Z$r=r(sWe," (mBART model)"),sWe.forEach(t),ekr=i(j),K3=n(j,"LI",{});var lWe=s(K3);hwe=n(lWe,"STRONG",{});var KYt=s(hwe);okr=r(KYt,"mobilebert"),KYt.forEach(t),rkr=r(lWe," \u2014 "),uee=n(lWe,"A",{href:!0});var ZYt=s(uee);tkr=r(ZYt,"TFMobileBertModel"),ZYt.forEach(t),akr=r(lWe," (MobileBERT model)"),lWe.forEach(t),nkr=i(j),Z3=n(j,"LI",{});var iWe=s(Z3);uwe=n(iWe,"STRONG",{});var eKt=s(uwe);skr=r(eKt,"mobilevit"),eKt.forEach(t),lkr=r(iWe," \u2014 "),pee=n(iWe,"A",{href:!0});var oKt=s(pee);ikr=r(oKt,"TFMobileViTModel"),oKt.forEach(t),dkr=r(iWe," (MobileViT model)"),iWe.forEach(t),ckr=i(j),e5=n(j,"LI",{});var dWe=s(e5);pwe=n(dWe,"STRONG",{});var rKt=s(pwe);mkr=r(rKt,"mpnet"),rKt.forEach(t),fkr=r(dWe," \u2014 "),_ee=n(dWe,"A",{href:!0});var tKt=s(_ee);gkr=r(tKt,"TFMPNetModel"),tKt.forEach(t),hkr=r(dWe," (MPNet model)"),dWe.forEach(t),ukr=i(j),o5=n(j,"LI",{});var cWe=s(o5);_we=n(cWe,"STRONG",{});var aKt=s(_we);pkr=r(aKt,"mt5"),aKt.forEach(t),_kr=r(cWe," \u2014 "),bee=n(cWe,"A",{href:!0});var nKt=s(bee);bkr=r(nKt,"TFMT5Model"),nKt.forEach(t),vkr=r(cWe," (MT5 model)"),cWe.forEach(t),Fkr=i(j),r5=n(j,"LI",{});var mWe=s(r5);bwe=n(mWe,"STRONG",{});var sKt=s(bwe);Tkr=r(sKt,"openai-gpt"),sKt.forEach(t),Mkr=r(mWe," \u2014 "),vee=n(mWe,"A",{href:!0});var lKt=s(vee);Ekr=r(lKt,"TFOpenAIGPTModel"),lKt.forEach(t),Ckr=r(mWe," (OpenAI GPT model)"),mWe.forEach(t),wkr=i(j),t5=n(j,"LI",{});var fWe=s(t5);vwe=n(fWe,"STRONG",{});var iKt=s(vwe);Akr=r(iKt,"opt"),iKt.forEach(t),Lkr=r(fWe," \u2014 "),Fee=n(fWe,"A",{href:!0});var dKt=s(Fee);ykr=r(dKt,"TFOPTModel"),dKt.forEach(t),xkr=r(fWe," (OPT model)"),fWe.forEach(t),$kr=i(j),a5=n(j,"LI",{});var gWe=s(a5);Fwe=n(gWe,"STRONG",{});var cKt=s(Fwe);kkr=r(cKt,"pegasus"),cKt.forEach(t),Skr=r(gWe," \u2014 "),Tee=n(gWe,"A",{href:!0});var mKt=s(Tee);Rkr=r(mKt,"TFPegasusModel"),mKt.forEach(t),Pkr=r(gWe," (Pegasus model)"),gWe.forEach(t),Bkr=i(j),n5=n(j,"LI",{});var hWe=s(n5);Twe=n(hWe,"STRONG",{});var fKt=s(Twe);Ikr=r(fKt,"regnet"),fKt.forEach(t),Nkr=r(hWe," \u2014 "),Mee=n(hWe,"A",{href:!0});var gKt=s(Mee);qkr=r(gKt,"TFRegNetModel"),gKt.forEach(t),jkr=r(hWe," (RegNet model)"),hWe.forEach(t),Dkr=i(j),s5=n(j,"LI",{});var uWe=s(s5);Mwe=n(uWe,"STRONG",{});var hKt=s(Mwe);Gkr=r(hKt,"rembert"),hKt.forEach(t),Okr=r(uWe," \u2014 "),Eee=n(uWe,"A",{href:!0});var uKt=s(Eee);Vkr=r(uKt,"TFRemBertModel"),uKt.forEach(t),Xkr=r(uWe," (RemBERT model)"),uWe.forEach(t),zkr=i(j),l5=n(j,"LI",{});var pWe=s(l5);Ewe=n(pWe,"STRONG",{});var pKt=s(Ewe);Qkr=r(pKt,"resnet"),pKt.forEach(t),Wkr=r(pWe," \u2014 "),Cee=n(pWe,"A",{href:!0});var _Kt=s(Cee);Ukr=r(_Kt,"TFResNetModel"),_Kt.forEach(t),Hkr=r(pWe," (ResNet model)"),pWe.forEach(t),Jkr=i(j),i5=n(j,"LI",{});var _We=s(i5);Cwe=n(_We,"STRONG",{});var bKt=s(Cwe);Ykr=r(bKt,"roberta"),bKt.forEach(t),Kkr=r(_We," \u2014 "),wee=n(_We,"A",{href:!0});var vKt=s(wee);Zkr=r(vKt,"TFRobertaModel"),vKt.forEach(t),eSr=r(_We," (RoBERTa model)"),_We.forEach(t),oSr=i(j),d5=n(j,"LI",{});var bWe=s(d5);wwe=n(bWe,"STRONG",{});var FKt=s(wwe);rSr=r(FKt,"roformer"),FKt.forEach(t),tSr=r(bWe," \u2014 "),Aee=n(bWe,"A",{href:!0});var TKt=s(Aee);aSr=r(TKt,"TFRoFormerModel"),TKt.forEach(t),nSr=r(bWe," (RoFormer model)"),bWe.forEach(t),sSr=i(j),c5=n(j,"LI",{});var vWe=s(c5);Awe=n(vWe,"STRONG",{});var MKt=s(Awe);lSr=r(MKt,"segformer"),MKt.forEach(t),iSr=r(vWe," \u2014 "),Lee=n(vWe,"A",{href:!0});var EKt=s(Lee);dSr=r(EKt,"TFSegformerModel"),EKt.forEach(t),cSr=r(vWe," (SegFormer model)"),vWe.forEach(t),mSr=i(j),m5=n(j,"LI",{});var FWe=s(m5);Lwe=n(FWe,"STRONG",{});var CKt=s(Lwe);fSr=r(CKt,"speech_to_text"),CKt.forEach(t),gSr=r(FWe," \u2014 "),yee=n(FWe,"A",{href:!0});var wKt=s(yee);hSr=r(wKt,"TFSpeech2TextModel"),wKt.forEach(t),uSr=r(FWe," (Speech2Text model)"),FWe.forEach(t),pSr=i(j),f5=n(j,"LI",{});var TWe=s(f5);ywe=n(TWe,"STRONG",{});var AKt=s(ywe);_Sr=r(AKt,"swin"),AKt.forEach(t),bSr=r(TWe," \u2014 "),xee=n(TWe,"A",{href:!0});var LKt=s(xee);vSr=r(LKt,"TFSwinModel"),LKt.forEach(t),FSr=r(TWe," (Swin Transformer model)"),TWe.forEach(t),TSr=i(j),g5=n(j,"LI",{});var MWe=s(g5);xwe=n(MWe,"STRONG",{});var yKt=s(xwe);MSr=r(yKt,"t5"),yKt.forEach(t),ESr=r(MWe," \u2014 "),$ee=n(MWe,"A",{href:!0});var xKt=s($ee);CSr=r(xKt,"TFT5Model"),xKt.forEach(t),wSr=r(MWe," (T5 model)"),MWe.forEach(t),ASr=i(j),h5=n(j,"LI",{});var EWe=s(h5);$we=n(EWe,"STRONG",{});var $Kt=s($we);LSr=r($Kt,"tapas"),$Kt.forEach(t),ySr=r(EWe," \u2014 "),kee=n(EWe,"A",{href:!0});var kKt=s(kee);xSr=r(kKt,"TFTapasModel"),kKt.forEach(t),$Sr=r(EWe," (TAPAS model)"),EWe.forEach(t),kSr=i(j),u5=n(j,"LI",{});var CWe=s(u5);kwe=n(CWe,"STRONG",{});var SKt=s(kwe);SSr=r(SKt,"transfo-xl"),SKt.forEach(t),RSr=r(CWe," \u2014 "),See=n(CWe,"A",{href:!0});var RKt=s(See);PSr=r(RKt,"TFTransfoXLModel"),RKt.forEach(t),BSr=r(CWe," (Transformer-XL model)"),CWe.forEach(t),ISr=i(j),p5=n(j,"LI",{});var wWe=s(p5);Swe=n(wWe,"STRONG",{});var PKt=s(Swe);NSr=r(PKt,"vit"),PKt.forEach(t),qSr=r(wWe," \u2014 "),Ree=n(wWe,"A",{href:!0});var BKt=s(Ree);jSr=r(BKt,"TFViTModel"),BKt.forEach(t),DSr=r(wWe," (ViT model)"),wWe.forEach(t),GSr=i(j),_5=n(j,"LI",{});var AWe=s(_5);Rwe=n(AWe,"STRONG",{});var IKt=s(Rwe);OSr=r(IKt,"vit_mae"),IKt.forEach(t),VSr=r(AWe," \u2014 "),Pee=n(AWe,"A",{href:!0});var NKt=s(Pee);XSr=r(NKt,"TFViTMAEModel"),NKt.forEach(t),zSr=r(AWe," (ViTMAE model)"),AWe.forEach(t),QSr=i(j),b5=n(j,"LI",{});var LWe=s(b5);Pwe=n(LWe,"STRONG",{});var qKt=s(Pwe);WSr=r(qKt,"wav2vec2"),qKt.forEach(t),USr=r(LWe," \u2014 "),Bee=n(LWe,"A",{href:!0});var jKt=s(Bee);HSr=r(jKt,"TFWav2Vec2Model"),jKt.forEach(t),JSr=r(LWe," (Wav2Vec2 model)"),LWe.forEach(t),YSr=i(j),v5=n(j,"LI",{});var yWe=s(v5);Bwe=n(yWe,"STRONG",{});var DKt=s(Bwe);KSr=r(DKt,"xglm"),DKt.forEach(t),ZSr=r(yWe," \u2014 "),Iee=n(yWe,"A",{href:!0});var GKt=s(Iee);eRr=r(GKt,"TFXGLMModel"),GKt.forEach(t),oRr=r(yWe," (XGLM model)"),yWe.forEach(t),rRr=i(j),F5=n(j,"LI",{});var xWe=s(F5);Iwe=n(xWe,"STRONG",{});var OKt=s(Iwe);tRr=r(OKt,"xlm"),OKt.forEach(t),aRr=r(xWe," \u2014 "),Nee=n(xWe,"A",{href:!0});var VKt=s(Nee);nRr=r(VKt,"TFXLMModel"),VKt.forEach(t),sRr=r(xWe," (XLM model)"),xWe.forEach(t),lRr=i(j),T5=n(j,"LI",{});var $We=s(T5);Nwe=n($We,"STRONG",{});var XKt=s(Nwe);iRr=r(XKt,"xlm-roberta"),XKt.forEach(t),dRr=r($We," \u2014 "),qee=n($We,"A",{href:!0});var zKt=s(qee);cRr=r(zKt,"TFXLMRobertaModel"),zKt.forEach(t),mRr=r($We," (XLM-RoBERTa model)"),$We.forEach(t),fRr=i(j),M5=n(j,"LI",{});var kWe=s(M5);qwe=n(kWe,"STRONG",{});var QKt=s(qwe);gRr=r(QKt,"xlnet"),QKt.forEach(t),hRr=r(kWe," \u2014 "),jee=n(kWe,"A",{href:!0});var WKt=s(jee);uRr=r(WKt,"TFXLNetModel"),WKt.forEach(t),pRr=r(kWe," (XLNet model)"),kWe.forEach(t),j.forEach(t),_Rr=i(ri),T(E5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),oeo=i(m),zc=n(m,"H2",{class:!0});var pro=s(zc);C5=n(pro,"A",{id:!0,class:!0,href:!0});var UKt=s(C5);jwe=n(UKt,"SPAN",{});var HKt=s(jwe);T(Gk.$$.fragment,HKt),HKt.forEach(t),UKt.forEach(t),bRr=i(pro),Dwe=n(pro,"SPAN",{});var JKt=s(Dwe);vRr=r(JKt,"TFAutoModelForPreTraining"),JKt.forEach(t),pro.forEach(t),reo=i(m),lr=n(m,"DIV",{class:!0});var ti=s(lr);T(Ok.$$.fragment,ti),FRr=i(ti),Qc=n(ti,"P",{});var Lie=s(Qc);TRr=r(Lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dee=n(Lie,"A",{href:!0});var YKt=s(Dee);MRr=r(YKt,"from_pretrained()"),YKt.forEach(t),ERr=r(Lie," class method or the "),Gee=n(Lie,"A",{href:!0});var KKt=s(Gee);CRr=r(KKt,"from_config()"),KKt.forEach(t),wRr=r(Lie,` class
method.`),Lie.forEach(t),ARr=i(ti),Vk=n(ti,"P",{});var _ro=s(Vk);LRr=r(_ro,"This class cannot be instantiated directly using "),Gwe=n(_ro,"CODE",{});var ZKt=s(Gwe);yRr=r(ZKt,"__init__()"),ZKt.forEach(t),xRr=r(_ro," (throws an error)."),_ro.forEach(t),$Rr=i(ti),zt=n(ti,"DIV",{class:!0});var N8=s(zt);T(Xk.$$.fragment,N8),kRr=i(N8),Owe=n(N8,"P",{});var eZt=s(Owe);SRr=r(eZt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eZt.forEach(t),RRr=i(N8),Wc=n(N8,"P",{});var yie=s(Wc);PRr=r(yie,`Note:
Loading a model from its configuration file does `),Vwe=n(yie,"STRONG",{});var oZt=s(Vwe);BRr=r(oZt,"not"),oZt.forEach(t),IRr=r(yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=n(yie,"A",{href:!0});var rZt=s(Oee);NRr=r(rZt,"from_pretrained()"),rZt.forEach(t),qRr=r(yie," to load the model weights."),yie.forEach(t),jRr=i(N8),T(w5.$$.fragment,N8),N8.forEach(t),DRr=i(ti),Nr=n(ti,"DIV",{class:!0});var ai=s(Nr);T(zk.$$.fragment,ai),GRr=i(ai),Xwe=n(ai,"P",{});var tZt=s(Xwe);ORr=r(tZt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tZt.forEach(t),VRr=i(ai),An=n(ai,"P",{});var q8=s(An);XRr=r(q8,"The model class to instantiate is selected based on the "),zwe=n(q8,"CODE",{});var aZt=s(zwe);zRr=r(aZt,"model_type"),aZt.forEach(t),QRr=r(q8,` property of the config object (either
passed as an argument or loaded from `),Qwe=n(q8,"CODE",{});var nZt=s(Qwe);WRr=r(nZt,"pretrained_model_name_or_path"),nZt.forEach(t),URr=r(q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wwe=n(q8,"CODE",{});var sZt=s(Wwe);HRr=r(sZt,"pretrained_model_name_or_path"),sZt.forEach(t),JRr=r(q8,":"),q8.forEach(t),YRr=i(ai),se=n(ai,"UL",{});var le=s(se);A5=n(le,"LI",{});var SWe=s(A5);Uwe=n(SWe,"STRONG",{});var lZt=s(Uwe);KRr=r(lZt,"albert"),lZt.forEach(t),ZRr=r(SWe," \u2014 "),Vee=n(SWe,"A",{href:!0});var iZt=s(Vee);ePr=r(iZt,"TFAlbertForPreTraining"),iZt.forEach(t),oPr=r(SWe," (ALBERT model)"),SWe.forEach(t),rPr=i(le),L5=n(le,"LI",{});var RWe=s(L5);Hwe=n(RWe,"STRONG",{});var dZt=s(Hwe);tPr=r(dZt,"bart"),dZt.forEach(t),aPr=r(RWe," \u2014 "),Xee=n(RWe,"A",{href:!0});var cZt=s(Xee);nPr=r(cZt,"TFBartForConditionalGeneration"),cZt.forEach(t),sPr=r(RWe," (BART model)"),RWe.forEach(t),lPr=i(le),y5=n(le,"LI",{});var PWe=s(y5);Jwe=n(PWe,"STRONG",{});var mZt=s(Jwe);iPr=r(mZt,"bert"),mZt.forEach(t),dPr=r(PWe," \u2014 "),zee=n(PWe,"A",{href:!0});var fZt=s(zee);cPr=r(fZt,"TFBertForPreTraining"),fZt.forEach(t),mPr=r(PWe," (BERT model)"),PWe.forEach(t),fPr=i(le),x5=n(le,"LI",{});var BWe=s(x5);Ywe=n(BWe,"STRONG",{});var gZt=s(Ywe);gPr=r(gZt,"camembert"),gZt.forEach(t),hPr=r(BWe," \u2014 "),Qee=n(BWe,"A",{href:!0});var hZt=s(Qee);uPr=r(hZt,"TFCamembertForMaskedLM"),hZt.forEach(t),pPr=r(BWe," (CamemBERT model)"),BWe.forEach(t),_Pr=i(le),$5=n(le,"LI",{});var IWe=s($5);Kwe=n(IWe,"STRONG",{});var uZt=s(Kwe);bPr=r(uZt,"ctrl"),uZt.forEach(t),vPr=r(IWe," \u2014 "),Wee=n(IWe,"A",{href:!0});var pZt=s(Wee);FPr=r(pZt,"TFCTRLLMHeadModel"),pZt.forEach(t),TPr=r(IWe," (CTRL model)"),IWe.forEach(t),MPr=i(le),k5=n(le,"LI",{});var NWe=s(k5);Zwe=n(NWe,"STRONG",{});var _Zt=s(Zwe);EPr=r(_Zt,"distilbert"),_Zt.forEach(t),CPr=r(NWe," \u2014 "),Uee=n(NWe,"A",{href:!0});var bZt=s(Uee);wPr=r(bZt,"TFDistilBertForMaskedLM"),bZt.forEach(t),APr=r(NWe," (DistilBERT model)"),NWe.forEach(t),LPr=i(le),S5=n(le,"LI",{});var qWe=s(S5);eAe=n(qWe,"STRONG",{});var vZt=s(eAe);yPr=r(vZt,"electra"),vZt.forEach(t),xPr=r(qWe," \u2014 "),Hee=n(qWe,"A",{href:!0});var FZt=s(Hee);$Pr=r(FZt,"TFElectraForPreTraining"),FZt.forEach(t),kPr=r(qWe," (ELECTRA model)"),qWe.forEach(t),SPr=i(le),R5=n(le,"LI",{});var jWe=s(R5);oAe=n(jWe,"STRONG",{});var TZt=s(oAe);RPr=r(TZt,"flaubert"),TZt.forEach(t),PPr=r(jWe," \u2014 "),Jee=n(jWe,"A",{href:!0});var MZt=s(Jee);BPr=r(MZt,"TFFlaubertWithLMHeadModel"),MZt.forEach(t),IPr=r(jWe," (FlauBERT model)"),jWe.forEach(t),NPr=i(le),P5=n(le,"LI",{});var DWe=s(P5);rAe=n(DWe,"STRONG",{});var EZt=s(rAe);qPr=r(EZt,"funnel"),EZt.forEach(t),jPr=r(DWe," \u2014 "),Yee=n(DWe,"A",{href:!0});var CZt=s(Yee);DPr=r(CZt,"TFFunnelForPreTraining"),CZt.forEach(t),GPr=r(DWe," (Funnel Transformer model)"),DWe.forEach(t),OPr=i(le),B5=n(le,"LI",{});var GWe=s(B5);tAe=n(GWe,"STRONG",{});var wZt=s(tAe);VPr=r(wZt,"gpt2"),wZt.forEach(t),XPr=r(GWe," \u2014 "),Kee=n(GWe,"A",{href:!0});var AZt=s(Kee);zPr=r(AZt,"TFGPT2LMHeadModel"),AZt.forEach(t),QPr=r(GWe," (OpenAI GPT-2 model)"),GWe.forEach(t),WPr=i(le),I5=n(le,"LI",{});var OWe=s(I5);aAe=n(OWe,"STRONG",{});var LZt=s(aAe);UPr=r(LZt,"layoutlm"),LZt.forEach(t),HPr=r(OWe," \u2014 "),Zee=n(OWe,"A",{href:!0});var yZt=s(Zee);JPr=r(yZt,"TFLayoutLMForMaskedLM"),yZt.forEach(t),YPr=r(OWe," (LayoutLM model)"),OWe.forEach(t),KPr=i(le),N5=n(le,"LI",{});var VWe=s(N5);nAe=n(VWe,"STRONG",{});var xZt=s(nAe);ZPr=r(xZt,"lxmert"),xZt.forEach(t),eBr=r(VWe," \u2014 "),eoe=n(VWe,"A",{href:!0});var $Zt=s(eoe);oBr=r($Zt,"TFLxmertForPreTraining"),$Zt.forEach(t),rBr=r(VWe," (LXMERT model)"),VWe.forEach(t),tBr=i(le),q5=n(le,"LI",{});var XWe=s(q5);sAe=n(XWe,"STRONG",{});var kZt=s(sAe);aBr=r(kZt,"mobilebert"),kZt.forEach(t),nBr=r(XWe," \u2014 "),ooe=n(XWe,"A",{href:!0});var SZt=s(ooe);sBr=r(SZt,"TFMobileBertForPreTraining"),SZt.forEach(t),lBr=r(XWe," (MobileBERT model)"),XWe.forEach(t),iBr=i(le),j5=n(le,"LI",{});var zWe=s(j5);lAe=n(zWe,"STRONG",{});var RZt=s(lAe);dBr=r(RZt,"mpnet"),RZt.forEach(t),cBr=r(zWe," \u2014 "),roe=n(zWe,"A",{href:!0});var PZt=s(roe);mBr=r(PZt,"TFMPNetForMaskedLM"),PZt.forEach(t),fBr=r(zWe," (MPNet model)"),zWe.forEach(t),gBr=i(le),D5=n(le,"LI",{});var QWe=s(D5);iAe=n(QWe,"STRONG",{});var BZt=s(iAe);hBr=r(BZt,"openai-gpt"),BZt.forEach(t),uBr=r(QWe," \u2014 "),toe=n(QWe,"A",{href:!0});var IZt=s(toe);pBr=r(IZt,"TFOpenAIGPTLMHeadModel"),IZt.forEach(t),_Br=r(QWe," (OpenAI GPT model)"),QWe.forEach(t),bBr=i(le),G5=n(le,"LI",{});var WWe=s(G5);dAe=n(WWe,"STRONG",{});var NZt=s(dAe);vBr=r(NZt,"roberta"),NZt.forEach(t),FBr=r(WWe," \u2014 "),aoe=n(WWe,"A",{href:!0});var qZt=s(aoe);TBr=r(qZt,"TFRobertaForMaskedLM"),qZt.forEach(t),MBr=r(WWe," (RoBERTa model)"),WWe.forEach(t),EBr=i(le),O5=n(le,"LI",{});var UWe=s(O5);cAe=n(UWe,"STRONG",{});var jZt=s(cAe);CBr=r(jZt,"t5"),jZt.forEach(t),wBr=r(UWe," \u2014 "),noe=n(UWe,"A",{href:!0});var DZt=s(noe);ABr=r(DZt,"TFT5ForConditionalGeneration"),DZt.forEach(t),LBr=r(UWe," (T5 model)"),UWe.forEach(t),yBr=i(le),V5=n(le,"LI",{});var HWe=s(V5);mAe=n(HWe,"STRONG",{});var GZt=s(mAe);xBr=r(GZt,"tapas"),GZt.forEach(t),$Br=r(HWe," \u2014 "),soe=n(HWe,"A",{href:!0});var OZt=s(soe);kBr=r(OZt,"TFTapasForMaskedLM"),OZt.forEach(t),SBr=r(HWe," (TAPAS model)"),HWe.forEach(t),RBr=i(le),X5=n(le,"LI",{});var JWe=s(X5);fAe=n(JWe,"STRONG",{});var VZt=s(fAe);PBr=r(VZt,"transfo-xl"),VZt.forEach(t),BBr=r(JWe," \u2014 "),loe=n(JWe,"A",{href:!0});var XZt=s(loe);IBr=r(XZt,"TFTransfoXLLMHeadModel"),XZt.forEach(t),NBr=r(JWe," (Transformer-XL model)"),JWe.forEach(t),qBr=i(le),z5=n(le,"LI",{});var YWe=s(z5);gAe=n(YWe,"STRONG",{});var zZt=s(gAe);jBr=r(zZt,"vit_mae"),zZt.forEach(t),DBr=r(YWe," \u2014 "),ioe=n(YWe,"A",{href:!0});var QZt=s(ioe);GBr=r(QZt,"TFViTMAEForPreTraining"),QZt.forEach(t),OBr=r(YWe," (ViTMAE model)"),YWe.forEach(t),VBr=i(le),Q5=n(le,"LI",{});var KWe=s(Q5);hAe=n(KWe,"STRONG",{});var WZt=s(hAe);XBr=r(WZt,"xlm"),WZt.forEach(t),zBr=r(KWe," \u2014 "),doe=n(KWe,"A",{href:!0});var UZt=s(doe);QBr=r(UZt,"TFXLMWithLMHeadModel"),UZt.forEach(t),WBr=r(KWe," (XLM model)"),KWe.forEach(t),UBr=i(le),W5=n(le,"LI",{});var ZWe=s(W5);uAe=n(ZWe,"STRONG",{});var HZt=s(uAe);HBr=r(HZt,"xlm-roberta"),HZt.forEach(t),JBr=r(ZWe," \u2014 "),coe=n(ZWe,"A",{href:!0});var JZt=s(coe);YBr=r(JZt,"TFXLMRobertaForMaskedLM"),JZt.forEach(t),KBr=r(ZWe," (XLM-RoBERTa model)"),ZWe.forEach(t),ZBr=i(le),U5=n(le,"LI",{});var eUe=s(U5);pAe=n(eUe,"STRONG",{});var YZt=s(pAe);eIr=r(YZt,"xlnet"),YZt.forEach(t),oIr=r(eUe," \u2014 "),moe=n(eUe,"A",{href:!0});var KZt=s(moe);rIr=r(KZt,"TFXLNetLMHeadModel"),KZt.forEach(t),tIr=r(eUe," (XLNet model)"),eUe.forEach(t),le.forEach(t),aIr=i(ai),T(H5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),teo=i(m),Uc=n(m,"H2",{class:!0});var bro=s(Uc);J5=n(bro,"A",{id:!0,class:!0,href:!0});var ZZt=s(J5);_Ae=n(ZZt,"SPAN",{});var eea=s(_Ae);T(Qk.$$.fragment,eea),eea.forEach(t),ZZt.forEach(t),nIr=i(bro),bAe=n(bro,"SPAN",{});var oea=s(bAe);sIr=r(oea,"TFAutoModelForCausalLM"),oea.forEach(t),bro.forEach(t),aeo=i(m),ir=n(m,"DIV",{class:!0});var ni=s(ir);T(Wk.$$.fragment,ni),lIr=i(ni),Hc=n(ni,"P",{});var xie=s(Hc);iIr=r(xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),foe=n(xie,"A",{href:!0});var rea=s(foe);dIr=r(rea,"from_pretrained()"),rea.forEach(t),cIr=r(xie," class method or the "),goe=n(xie,"A",{href:!0});var tea=s(goe);mIr=r(tea,"from_config()"),tea.forEach(t),fIr=r(xie,` class
method.`),xie.forEach(t),gIr=i(ni),Uk=n(ni,"P",{});var vro=s(Uk);hIr=r(vro,"This class cannot be instantiated directly using "),vAe=n(vro,"CODE",{});var aea=s(vAe);uIr=r(aea,"__init__()"),aea.forEach(t),pIr=r(vro," (throws an error)."),vro.forEach(t),_Ir=i(ni),Qt=n(ni,"DIV",{class:!0});var j8=s(Qt);T(Hk.$$.fragment,j8),bIr=i(j8),FAe=n(j8,"P",{});var nea=s(FAe);vIr=r(nea,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nea.forEach(t),FIr=i(j8),Jc=n(j8,"P",{});var $ie=s(Jc);TIr=r($ie,`Note:
Loading a model from its configuration file does `),TAe=n($ie,"STRONG",{});var sea=s(TAe);MIr=r(sea,"not"),sea.forEach(t),EIr=r($ie,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n($ie,"A",{href:!0});var lea=s(hoe);CIr=r(lea,"from_pretrained()"),lea.forEach(t),wIr=r($ie," to load the model weights."),$ie.forEach(t),AIr=i(j8),T(Y5.$$.fragment,j8),j8.forEach(t),LIr=i(ni),qr=n(ni,"DIV",{class:!0});var si=s(qr);T(Jk.$$.fragment,si),yIr=i(si),MAe=n(si,"P",{});var iea=s(MAe);xIr=r(iea,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iea.forEach(t),$Ir=i(si),Ln=n(si,"P",{});var D8=s(Ln);kIr=r(D8,"The model class to instantiate is selected based on the "),EAe=n(D8,"CODE",{});var dea=s(EAe);SIr=r(dea,"model_type"),dea.forEach(t),RIr=r(D8,` property of the config object (either
passed as an argument or loaded from `),CAe=n(D8,"CODE",{});var cea=s(CAe);PIr=r(cea,"pretrained_model_name_or_path"),cea.forEach(t),BIr=r(D8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wAe=n(D8,"CODE",{});var mea=s(wAe);IIr=r(mea,"pretrained_model_name_or_path"),mea.forEach(t),NIr=r(D8,":"),D8.forEach(t),qIr=i(si),Me=n(si,"UL",{});var Ce=s(Me);K5=n(Ce,"LI",{});var oUe=s(K5);AAe=n(oUe,"STRONG",{});var fea=s(AAe);jIr=r(fea,"bert"),fea.forEach(t),DIr=r(oUe," \u2014 "),uoe=n(oUe,"A",{href:!0});var gea=s(uoe);GIr=r(gea,"TFBertLMHeadModel"),gea.forEach(t),OIr=r(oUe," (BERT model)"),oUe.forEach(t),VIr=i(Ce),Z5=n(Ce,"LI",{});var rUe=s(Z5);LAe=n(rUe,"STRONG",{});var hea=s(LAe);XIr=r(hea,"camembert"),hea.forEach(t),zIr=r(rUe," \u2014 "),poe=n(rUe,"A",{href:!0});var uea=s(poe);QIr=r(uea,"TFCamembertForCausalLM"),uea.forEach(t),WIr=r(rUe," (CamemBERT model)"),rUe.forEach(t),UIr=i(Ce),e0=n(Ce,"LI",{});var tUe=s(e0);yAe=n(tUe,"STRONG",{});var pea=s(yAe);HIr=r(pea,"ctrl"),pea.forEach(t),JIr=r(tUe," \u2014 "),_oe=n(tUe,"A",{href:!0});var _ea=s(_oe);YIr=r(_ea,"TFCTRLLMHeadModel"),_ea.forEach(t),KIr=r(tUe," (CTRL model)"),tUe.forEach(t),ZIr=i(Ce),o0=n(Ce,"LI",{});var aUe=s(o0);xAe=n(aUe,"STRONG",{});var bea=s(xAe);eNr=r(bea,"gpt2"),bea.forEach(t),oNr=r(aUe," \u2014 "),boe=n(aUe,"A",{href:!0});var vea=s(boe);rNr=r(vea,"TFGPT2LMHeadModel"),vea.forEach(t),tNr=r(aUe," (OpenAI GPT-2 model)"),aUe.forEach(t),aNr=i(Ce),r0=n(Ce,"LI",{});var nUe=s(r0);$Ae=n(nUe,"STRONG",{});var Fea=s($Ae);nNr=r(Fea,"gptj"),Fea.forEach(t),sNr=r(nUe," \u2014 "),voe=n(nUe,"A",{href:!0});var Tea=s(voe);lNr=r(Tea,"TFGPTJForCausalLM"),Tea.forEach(t),iNr=r(nUe," (GPT-J model)"),nUe.forEach(t),dNr=i(Ce),t0=n(Ce,"LI",{});var sUe=s(t0);kAe=n(sUe,"STRONG",{});var Mea=s(kAe);cNr=r(Mea,"openai-gpt"),Mea.forEach(t),mNr=r(sUe," \u2014 "),Foe=n(sUe,"A",{href:!0});var Eea=s(Foe);fNr=r(Eea,"TFOpenAIGPTLMHeadModel"),Eea.forEach(t),gNr=r(sUe," (OpenAI GPT model)"),sUe.forEach(t),hNr=i(Ce),a0=n(Ce,"LI",{});var lUe=s(a0);SAe=n(lUe,"STRONG",{});var Cea=s(SAe);uNr=r(Cea,"opt"),Cea.forEach(t),pNr=r(lUe," \u2014 "),Toe=n(lUe,"A",{href:!0});var wea=s(Toe);_Nr=r(wea,"TFOPTForCausalLM"),wea.forEach(t),bNr=r(lUe," (OPT model)"),lUe.forEach(t),vNr=i(Ce),n0=n(Ce,"LI",{});var iUe=s(n0);RAe=n(iUe,"STRONG",{});var Aea=s(RAe);FNr=r(Aea,"rembert"),Aea.forEach(t),TNr=r(iUe," \u2014 "),Moe=n(iUe,"A",{href:!0});var Lea=s(Moe);MNr=r(Lea,"TFRemBertForCausalLM"),Lea.forEach(t),ENr=r(iUe," (RemBERT model)"),iUe.forEach(t),CNr=i(Ce),s0=n(Ce,"LI",{});var dUe=s(s0);PAe=n(dUe,"STRONG",{});var yea=s(PAe);wNr=r(yea,"roberta"),yea.forEach(t),ANr=r(dUe," \u2014 "),Eoe=n(dUe,"A",{href:!0});var xea=s(Eoe);LNr=r(xea,"TFRobertaForCausalLM"),xea.forEach(t),yNr=r(dUe," (RoBERTa model)"),dUe.forEach(t),xNr=i(Ce),l0=n(Ce,"LI",{});var cUe=s(l0);BAe=n(cUe,"STRONG",{});var $ea=s(BAe);$Nr=r($ea,"roformer"),$ea.forEach(t),kNr=r(cUe," \u2014 "),Coe=n(cUe,"A",{href:!0});var kea=s(Coe);SNr=r(kea,"TFRoFormerForCausalLM"),kea.forEach(t),RNr=r(cUe," (RoFormer model)"),cUe.forEach(t),PNr=i(Ce),i0=n(Ce,"LI",{});var mUe=s(i0);IAe=n(mUe,"STRONG",{});var Sea=s(IAe);BNr=r(Sea,"transfo-xl"),Sea.forEach(t),INr=r(mUe," \u2014 "),woe=n(mUe,"A",{href:!0});var Rea=s(woe);NNr=r(Rea,"TFTransfoXLLMHeadModel"),Rea.forEach(t),qNr=r(mUe," (Transformer-XL model)"),mUe.forEach(t),jNr=i(Ce),d0=n(Ce,"LI",{});var fUe=s(d0);NAe=n(fUe,"STRONG",{});var Pea=s(NAe);DNr=r(Pea,"xglm"),Pea.forEach(t),GNr=r(fUe," \u2014 "),Aoe=n(fUe,"A",{href:!0});var Bea=s(Aoe);ONr=r(Bea,"TFXGLMForCausalLM"),Bea.forEach(t),VNr=r(fUe," (XGLM model)"),fUe.forEach(t),XNr=i(Ce),c0=n(Ce,"LI",{});var gUe=s(c0);qAe=n(gUe,"STRONG",{});var Iea=s(qAe);zNr=r(Iea,"xlm"),Iea.forEach(t),QNr=r(gUe," \u2014 "),Loe=n(gUe,"A",{href:!0});var Nea=s(Loe);WNr=r(Nea,"TFXLMWithLMHeadModel"),Nea.forEach(t),UNr=r(gUe," (XLM model)"),gUe.forEach(t),HNr=i(Ce),m0=n(Ce,"LI",{});var hUe=s(m0);jAe=n(hUe,"STRONG",{});var qea=s(jAe);JNr=r(qea,"xlnet"),qea.forEach(t),YNr=r(hUe," \u2014 "),yoe=n(hUe,"A",{href:!0});var jea=s(yoe);KNr=r(jea,"TFXLNetLMHeadModel"),jea.forEach(t),ZNr=r(hUe," (XLNet model)"),hUe.forEach(t),Ce.forEach(t),eqr=i(si),T(f0.$$.fragment,si),si.forEach(t),ni.forEach(t),neo=i(m),Yc=n(m,"H2",{class:!0});var Fro=s(Yc);g0=n(Fro,"A",{id:!0,class:!0,href:!0});var Dea=s(g0);DAe=n(Dea,"SPAN",{});var Gea=s(DAe);T(Yk.$$.fragment,Gea),Gea.forEach(t),Dea.forEach(t),oqr=i(Fro),GAe=n(Fro,"SPAN",{});var Oea=s(GAe);rqr=r(Oea,"TFAutoModelForImageClassification"),Oea.forEach(t),Fro.forEach(t),seo=i(m),dr=n(m,"DIV",{class:!0});var li=s(dr);T(Kk.$$.fragment,li),tqr=i(li),Kc=n(li,"P",{});var kie=s(Kc);aqr=r(kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xoe=n(kie,"A",{href:!0});var Vea=s(xoe);nqr=r(Vea,"from_pretrained()"),Vea.forEach(t),sqr=r(kie," class method or the "),$oe=n(kie,"A",{href:!0});var Xea=s($oe);lqr=r(Xea,"from_config()"),Xea.forEach(t),iqr=r(kie,` class
method.`),kie.forEach(t),dqr=i(li),Zk=n(li,"P",{});var Tro=s(Zk);cqr=r(Tro,"This class cannot be instantiated directly using "),OAe=n(Tro,"CODE",{});var zea=s(OAe);mqr=r(zea,"__init__()"),zea.forEach(t),fqr=r(Tro," (throws an error)."),Tro.forEach(t),gqr=i(li),Wt=n(li,"DIV",{class:!0});var G8=s(Wt);T(eS.$$.fragment,G8),hqr=i(G8),VAe=n(G8,"P",{});var Qea=s(VAe);uqr=r(Qea,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qea.forEach(t),pqr=i(G8),Zc=n(G8,"P",{});var Sie=s(Zc);_qr=r(Sie,`Note:
Loading a model from its configuration file does `),XAe=n(Sie,"STRONG",{});var Wea=s(XAe);bqr=r(Wea,"not"),Wea.forEach(t),vqr=r(Sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(Sie,"A",{href:!0});var Uea=s(koe);Fqr=r(Uea,"from_pretrained()"),Uea.forEach(t),Tqr=r(Sie," to load the model weights."),Sie.forEach(t),Mqr=i(G8),T(h0.$$.fragment,G8),G8.forEach(t),Eqr=i(li),jr=n(li,"DIV",{class:!0});var ii=s(jr);T(oS.$$.fragment,ii),Cqr=i(ii),zAe=n(ii,"P",{});var Hea=s(zAe);wqr=r(Hea,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hea.forEach(t),Aqr=i(ii),yn=n(ii,"P",{});var O8=s(yn);Lqr=r(O8,"The model class to instantiate is selected based on the "),QAe=n(O8,"CODE",{});var Jea=s(QAe);yqr=r(Jea,"model_type"),Jea.forEach(t),xqr=r(O8,` property of the config object (either
passed as an argument or loaded from `),WAe=n(O8,"CODE",{});var Yea=s(WAe);$qr=r(Yea,"pretrained_model_name_or_path"),Yea.forEach(t),kqr=r(O8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UAe=n(O8,"CODE",{});var Kea=s(UAe);Sqr=r(Kea,"pretrained_model_name_or_path"),Kea.forEach(t),Rqr=r(O8,":"),O8.forEach(t),Pqr=i(ii),Be=n(ii,"UL",{});var We=s(Be);u0=n(We,"LI",{});var uUe=s(u0);HAe=n(uUe,"STRONG",{});var Zea=s(HAe);Bqr=r(Zea,"convnext"),Zea.forEach(t),Iqr=r(uUe," \u2014 "),Soe=n(uUe,"A",{href:!0});var eoa=s(Soe);Nqr=r(eoa,"TFConvNextForImageClassification"),eoa.forEach(t),qqr=r(uUe," (ConvNeXT model)"),uUe.forEach(t),jqr=i(We),p0=n(We,"LI",{});var pUe=s(p0);JAe=n(pUe,"STRONG",{});var ooa=s(JAe);Dqr=r(ooa,"data2vec-vision"),ooa.forEach(t),Gqr=r(pUe," \u2014 "),Roe=n(pUe,"A",{href:!0});var roa=s(Roe);Oqr=r(roa,"TFData2VecVisionForImageClassification"),roa.forEach(t),Vqr=r(pUe," (Data2VecVision model)"),pUe.forEach(t),Xqr=i(We),Tl=n(We,"LI",{});var DB=s(Tl);YAe=n(DB,"STRONG",{});var toa=s(YAe);zqr=r(toa,"deit"),toa.forEach(t),Qqr=r(DB," \u2014 "),Poe=n(DB,"A",{href:!0});var aoa=s(Poe);Wqr=r(aoa,"TFDeiTForImageClassification"),aoa.forEach(t),Uqr=r(DB," or "),Boe=n(DB,"A",{href:!0});var noa=s(Boe);Hqr=r(noa,"TFDeiTForImageClassificationWithTeacher"),noa.forEach(t),Jqr=r(DB," (DeiT model)"),DB.forEach(t),Yqr=i(We),_0=n(We,"LI",{});var _Ue=s(_0);KAe=n(_Ue,"STRONG",{});var soa=s(KAe);Kqr=r(soa,"mobilevit"),soa.forEach(t),Zqr=r(_Ue," \u2014 "),Ioe=n(_Ue,"A",{href:!0});var loa=s(Ioe);ejr=r(loa,"TFMobileViTForImageClassification"),loa.forEach(t),ojr=r(_Ue," (MobileViT model)"),_Ue.forEach(t),rjr=i(We),b0=n(We,"LI",{});var bUe=s(b0);ZAe=n(bUe,"STRONG",{});var ioa=s(ZAe);tjr=r(ioa,"regnet"),ioa.forEach(t),ajr=r(bUe," \u2014 "),Noe=n(bUe,"A",{href:!0});var doa=s(Noe);njr=r(doa,"TFRegNetForImageClassification"),doa.forEach(t),sjr=r(bUe," (RegNet model)"),bUe.forEach(t),ljr=i(We),v0=n(We,"LI",{});var vUe=s(v0);e6e=n(vUe,"STRONG",{});var coa=s(e6e);ijr=r(coa,"resnet"),coa.forEach(t),djr=r(vUe," \u2014 "),qoe=n(vUe,"A",{href:!0});var moa=s(qoe);cjr=r(moa,"TFResNetForImageClassification"),moa.forEach(t),mjr=r(vUe," (ResNet model)"),vUe.forEach(t),fjr=i(We),F0=n(We,"LI",{});var FUe=s(F0);o6e=n(FUe,"STRONG",{});var foa=s(o6e);gjr=r(foa,"segformer"),foa.forEach(t),hjr=r(FUe," \u2014 "),joe=n(FUe,"A",{href:!0});var goa=s(joe);ujr=r(goa,"TFSegformerForImageClassification"),goa.forEach(t),pjr=r(FUe," (SegFormer model)"),FUe.forEach(t),_jr=i(We),T0=n(We,"LI",{});var TUe=s(T0);r6e=n(TUe,"STRONG",{});var hoa=s(r6e);bjr=r(hoa,"swin"),hoa.forEach(t),vjr=r(TUe," \u2014 "),Doe=n(TUe,"A",{href:!0});var uoa=s(Doe);Fjr=r(uoa,"TFSwinForImageClassification"),uoa.forEach(t),Tjr=r(TUe," (Swin Transformer model)"),TUe.forEach(t),Mjr=i(We),M0=n(We,"LI",{});var MUe=s(M0);t6e=n(MUe,"STRONG",{});var poa=s(t6e);Ejr=r(poa,"vit"),poa.forEach(t),Cjr=r(MUe," \u2014 "),Goe=n(MUe,"A",{href:!0});var _oa=s(Goe);wjr=r(_oa,"TFViTForImageClassification"),_oa.forEach(t),Ajr=r(MUe," (ViT model)"),MUe.forEach(t),We.forEach(t),Ljr=i(ii),T(E0.$$.fragment,ii),ii.forEach(t),li.forEach(t),leo=i(m),em=n(m,"H2",{class:!0});var Mro=s(em);C0=n(Mro,"A",{id:!0,class:!0,href:!0});var boa=s(C0);a6e=n(boa,"SPAN",{});var voa=s(a6e);T(rS.$$.fragment,voa),voa.forEach(t),boa.forEach(t),yjr=i(Mro),n6e=n(Mro,"SPAN",{});var Foa=s(n6e);xjr=r(Foa,"TFAutoModelForSemanticSegmentation"),Foa.forEach(t),Mro.forEach(t),ieo=i(m),cr=n(m,"DIV",{class:!0});var di=s(cr);T(tS.$$.fragment,di),$jr=i(di),om=n(di,"P",{});var Rie=s(om);kjr=r(Rie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ooe=n(Rie,"A",{href:!0});var Toa=s(Ooe);Sjr=r(Toa,"from_pretrained()"),Toa.forEach(t),Rjr=r(Rie," class method or the "),Voe=n(Rie,"A",{href:!0});var Moa=s(Voe);Pjr=r(Moa,"from_config()"),Moa.forEach(t),Bjr=r(Rie,` class
method.`),Rie.forEach(t),Ijr=i(di),aS=n(di,"P",{});var Ero=s(aS);Njr=r(Ero,"This class cannot be instantiated directly using "),s6e=n(Ero,"CODE",{});var Eoa=s(s6e);qjr=r(Eoa,"__init__()"),Eoa.forEach(t),jjr=r(Ero," (throws an error)."),Ero.forEach(t),Djr=i(di),Ut=n(di,"DIV",{class:!0});var V8=s(Ut);T(nS.$$.fragment,V8),Gjr=i(V8),l6e=n(V8,"P",{});var Coa=s(l6e);Ojr=r(Coa,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Coa.forEach(t),Vjr=i(V8),rm=n(V8,"P",{});var Pie=s(rm);Xjr=r(Pie,`Note:
Loading a model from its configuration file does `),i6e=n(Pie,"STRONG",{});var woa=s(i6e);zjr=r(woa,"not"),woa.forEach(t),Qjr=r(Pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xoe=n(Pie,"A",{href:!0});var Aoa=s(Xoe);Wjr=r(Aoa,"from_pretrained()"),Aoa.forEach(t),Ujr=r(Pie," to load the model weights."),Pie.forEach(t),Hjr=i(V8),T(w0.$$.fragment,V8),V8.forEach(t),Jjr=i(di),Dr=n(di,"DIV",{class:!0});var ci=s(Dr);T(sS.$$.fragment,ci),Yjr=i(ci),d6e=n(ci,"P",{});var Loa=s(d6e);Kjr=r(Loa,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Loa.forEach(t),Zjr=i(ci),xn=n(ci,"P",{});var X8=s(xn);eDr=r(X8,"The model class to instantiate is selected based on the "),c6e=n(X8,"CODE",{});var yoa=s(c6e);oDr=r(yoa,"model_type"),yoa.forEach(t),rDr=r(X8,` property of the config object (either
passed as an argument or loaded from `),m6e=n(X8,"CODE",{});var xoa=s(m6e);tDr=r(xoa,"pretrained_model_name_or_path"),xoa.forEach(t),aDr=r(X8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=n(X8,"CODE",{});var $oa=s(f6e);nDr=r($oa,"pretrained_model_name_or_path"),$oa.forEach(t),sDr=r(X8,":"),X8.forEach(t),lDr=i(ci),tm=n(ci,"UL",{});var Bie=s(tm);A0=n(Bie,"LI",{});var EUe=s(A0);g6e=n(EUe,"STRONG",{});var koa=s(g6e);iDr=r(koa,"data2vec-vision"),koa.forEach(t),dDr=r(EUe," \u2014 "),zoe=n(EUe,"A",{href:!0});var Soa=s(zoe);cDr=r(Soa,"TFData2VecVisionForSemanticSegmentation"),Soa.forEach(t),mDr=r(EUe," (Data2VecVision model)"),EUe.forEach(t),fDr=i(Bie),L0=n(Bie,"LI",{});var CUe=s(L0);h6e=n(CUe,"STRONG",{});var Roa=s(h6e);gDr=r(Roa,"mobilevit"),Roa.forEach(t),hDr=r(CUe," \u2014 "),Qoe=n(CUe,"A",{href:!0});var Poa=s(Qoe);uDr=r(Poa,"TFMobileViTForSemanticSegmentation"),Poa.forEach(t),pDr=r(CUe," (MobileViT model)"),CUe.forEach(t),_Dr=i(Bie),y0=n(Bie,"LI",{});var wUe=s(y0);u6e=n(wUe,"STRONG",{});var Boa=s(u6e);bDr=r(Boa,"segformer"),Boa.forEach(t),vDr=r(wUe," \u2014 "),Woe=n(wUe,"A",{href:!0});var Ioa=s(Woe);FDr=r(Ioa,"TFSegformerForSemanticSegmentation"),Ioa.forEach(t),TDr=r(wUe," (SegFormer model)"),wUe.forEach(t),Bie.forEach(t),MDr=i(ci),T(x0.$$.fragment,ci),ci.forEach(t),di.forEach(t),deo=i(m),am=n(m,"H2",{class:!0});var Cro=s(am);$0=n(Cro,"A",{id:!0,class:!0,href:!0});var Noa=s($0);p6e=n(Noa,"SPAN",{});var qoa=s(p6e);T(lS.$$.fragment,qoa),qoa.forEach(t),Noa.forEach(t),EDr=i(Cro),_6e=n(Cro,"SPAN",{});var joa=s(_6e);CDr=r(joa,"TFAutoModelForMaskedLM"),joa.forEach(t),Cro.forEach(t),ceo=i(m),mr=n(m,"DIV",{class:!0});var mi=s(mr);T(iS.$$.fragment,mi),wDr=i(mi),nm=n(mi,"P",{});var Iie=s(nm);ADr=r(Iie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Uoe=n(Iie,"A",{href:!0});var Doa=s(Uoe);LDr=r(Doa,"from_pretrained()"),Doa.forEach(t),yDr=r(Iie," class method or the "),Hoe=n(Iie,"A",{href:!0});var Goa=s(Hoe);xDr=r(Goa,"from_config()"),Goa.forEach(t),$Dr=r(Iie,` class
method.`),Iie.forEach(t),kDr=i(mi),dS=n(mi,"P",{});var wro=s(dS);SDr=r(wro,"This class cannot be instantiated directly using "),b6e=n(wro,"CODE",{});var Ooa=s(b6e);RDr=r(Ooa,"__init__()"),Ooa.forEach(t),PDr=r(wro," (throws an error)."),wro.forEach(t),BDr=i(mi),Ht=n(mi,"DIV",{class:!0});var z8=s(Ht);T(cS.$$.fragment,z8),IDr=i(z8),v6e=n(z8,"P",{});var Voa=s(v6e);NDr=r(Voa,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Voa.forEach(t),qDr=i(z8),sm=n(z8,"P",{});var Nie=s(sm);jDr=r(Nie,`Note:
Loading a model from its configuration file does `),F6e=n(Nie,"STRONG",{});var Xoa=s(F6e);DDr=r(Xoa,"not"),Xoa.forEach(t),GDr=r(Nie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=n(Nie,"A",{href:!0});var zoa=s(Joe);ODr=r(zoa,"from_pretrained()"),zoa.forEach(t),VDr=r(Nie," to load the model weights."),Nie.forEach(t),XDr=i(z8),T(k0.$$.fragment,z8),z8.forEach(t),zDr=i(mi),Gr=n(mi,"DIV",{class:!0});var fi=s(Gr);T(mS.$$.fragment,fi),QDr=i(fi),T6e=n(fi,"P",{});var Qoa=s(T6e);WDr=r(Qoa,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qoa.forEach(t),UDr=i(fi),$n=n(fi,"P",{});var Q8=s($n);HDr=r(Q8,"The model class to instantiate is selected based on the "),M6e=n(Q8,"CODE",{});var Woa=s(M6e);JDr=r(Woa,"model_type"),Woa.forEach(t),YDr=r(Q8,` property of the config object (either
passed as an argument or loaded from `),E6e=n(Q8,"CODE",{});var Uoa=s(E6e);KDr=r(Uoa,"pretrained_model_name_or_path"),Uoa.forEach(t),ZDr=r(Q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(Q8,"CODE",{});var Hoa=s(C6e);eGr=r(Hoa,"pretrained_model_name_or_path"),Hoa.forEach(t),oGr=r(Q8,":"),Q8.forEach(t),rGr=i(fi),fe=n(fi,"UL",{});var _e=s(fe);S0=n(_e,"LI",{});var AUe=s(S0);w6e=n(AUe,"STRONG",{});var Joa=s(w6e);tGr=r(Joa,"albert"),Joa.forEach(t),aGr=r(AUe," \u2014 "),Yoe=n(AUe,"A",{href:!0});var Yoa=s(Yoe);nGr=r(Yoa,"TFAlbertForMaskedLM"),Yoa.forEach(t),sGr=r(AUe," (ALBERT model)"),AUe.forEach(t),lGr=i(_e),R0=n(_e,"LI",{});var LUe=s(R0);A6e=n(LUe,"STRONG",{});var Koa=s(A6e);iGr=r(Koa,"bert"),Koa.forEach(t),dGr=r(LUe," \u2014 "),Koe=n(LUe,"A",{href:!0});var Zoa=s(Koe);cGr=r(Zoa,"TFBertForMaskedLM"),Zoa.forEach(t),mGr=r(LUe," (BERT model)"),LUe.forEach(t),fGr=i(_e),P0=n(_e,"LI",{});var yUe=s(P0);L6e=n(yUe,"STRONG",{});var era=s(L6e);gGr=r(era,"camembert"),era.forEach(t),hGr=r(yUe," \u2014 "),Zoe=n(yUe,"A",{href:!0});var ora=s(Zoe);uGr=r(ora,"TFCamembertForMaskedLM"),ora.forEach(t),pGr=r(yUe," (CamemBERT model)"),yUe.forEach(t),_Gr=i(_e),B0=n(_e,"LI",{});var xUe=s(B0);y6e=n(xUe,"STRONG",{});var rra=s(y6e);bGr=r(rra,"convbert"),rra.forEach(t),vGr=r(xUe," \u2014 "),ere=n(xUe,"A",{href:!0});var tra=s(ere);FGr=r(tra,"TFConvBertForMaskedLM"),tra.forEach(t),TGr=r(xUe," (ConvBERT model)"),xUe.forEach(t),MGr=i(_e),I0=n(_e,"LI",{});var $Ue=s(I0);x6e=n($Ue,"STRONG",{});var ara=s(x6e);EGr=r(ara,"deberta"),ara.forEach(t),CGr=r($Ue," \u2014 "),ore=n($Ue,"A",{href:!0});var nra=s(ore);wGr=r(nra,"TFDebertaForMaskedLM"),nra.forEach(t),AGr=r($Ue," (DeBERTa model)"),$Ue.forEach(t),LGr=i(_e),N0=n(_e,"LI",{});var kUe=s(N0);$6e=n(kUe,"STRONG",{});var sra=s($6e);yGr=r(sra,"deberta-v2"),sra.forEach(t),xGr=r(kUe," \u2014 "),rre=n(kUe,"A",{href:!0});var lra=s(rre);$Gr=r(lra,"TFDebertaV2ForMaskedLM"),lra.forEach(t),kGr=r(kUe," (DeBERTa-v2 model)"),kUe.forEach(t),SGr=i(_e),q0=n(_e,"LI",{});var SUe=s(q0);k6e=n(SUe,"STRONG",{});var ira=s(k6e);RGr=r(ira,"distilbert"),ira.forEach(t),PGr=r(SUe," \u2014 "),tre=n(SUe,"A",{href:!0});var dra=s(tre);BGr=r(dra,"TFDistilBertForMaskedLM"),dra.forEach(t),IGr=r(SUe," (DistilBERT model)"),SUe.forEach(t),NGr=i(_e),j0=n(_e,"LI",{});var RUe=s(j0);S6e=n(RUe,"STRONG",{});var cra=s(S6e);qGr=r(cra,"electra"),cra.forEach(t),jGr=r(RUe," \u2014 "),are=n(RUe,"A",{href:!0});var mra=s(are);DGr=r(mra,"TFElectraForMaskedLM"),mra.forEach(t),GGr=r(RUe," (ELECTRA model)"),RUe.forEach(t),OGr=i(_e),D0=n(_e,"LI",{});var PUe=s(D0);R6e=n(PUe,"STRONG",{});var fra=s(R6e);VGr=r(fra,"flaubert"),fra.forEach(t),XGr=r(PUe," \u2014 "),nre=n(PUe,"A",{href:!0});var gra=s(nre);zGr=r(gra,"TFFlaubertWithLMHeadModel"),gra.forEach(t),QGr=r(PUe," (FlauBERT model)"),PUe.forEach(t),WGr=i(_e),G0=n(_e,"LI",{});var BUe=s(G0);P6e=n(BUe,"STRONG",{});var hra=s(P6e);UGr=r(hra,"funnel"),hra.forEach(t),HGr=r(BUe," \u2014 "),sre=n(BUe,"A",{href:!0});var ura=s(sre);JGr=r(ura,"TFFunnelForMaskedLM"),ura.forEach(t),YGr=r(BUe," (Funnel Transformer model)"),BUe.forEach(t),KGr=i(_e),O0=n(_e,"LI",{});var IUe=s(O0);B6e=n(IUe,"STRONG",{});var pra=s(B6e);ZGr=r(pra,"layoutlm"),pra.forEach(t),eOr=r(IUe," \u2014 "),lre=n(IUe,"A",{href:!0});var _ra=s(lre);oOr=r(_ra,"TFLayoutLMForMaskedLM"),_ra.forEach(t),rOr=r(IUe," (LayoutLM model)"),IUe.forEach(t),tOr=i(_e),V0=n(_e,"LI",{});var NUe=s(V0);I6e=n(NUe,"STRONG",{});var bra=s(I6e);aOr=r(bra,"longformer"),bra.forEach(t),nOr=r(NUe," \u2014 "),ire=n(NUe,"A",{href:!0});var vra=s(ire);sOr=r(vra,"TFLongformerForMaskedLM"),vra.forEach(t),lOr=r(NUe," (Longformer model)"),NUe.forEach(t),iOr=i(_e),X0=n(_e,"LI",{});var qUe=s(X0);N6e=n(qUe,"STRONG",{});var Fra=s(N6e);dOr=r(Fra,"mobilebert"),Fra.forEach(t),cOr=r(qUe," \u2014 "),dre=n(qUe,"A",{href:!0});var Tra=s(dre);mOr=r(Tra,"TFMobileBertForMaskedLM"),Tra.forEach(t),fOr=r(qUe," (MobileBERT model)"),qUe.forEach(t),gOr=i(_e),z0=n(_e,"LI",{});var jUe=s(z0);q6e=n(jUe,"STRONG",{});var Mra=s(q6e);hOr=r(Mra,"mpnet"),Mra.forEach(t),uOr=r(jUe," \u2014 "),cre=n(jUe,"A",{href:!0});var Era=s(cre);pOr=r(Era,"TFMPNetForMaskedLM"),Era.forEach(t),_Or=r(jUe," (MPNet model)"),jUe.forEach(t),bOr=i(_e),Q0=n(_e,"LI",{});var DUe=s(Q0);j6e=n(DUe,"STRONG",{});var Cra=s(j6e);vOr=r(Cra,"rembert"),Cra.forEach(t),FOr=r(DUe," \u2014 "),mre=n(DUe,"A",{href:!0});var wra=s(mre);TOr=r(wra,"TFRemBertForMaskedLM"),wra.forEach(t),MOr=r(DUe," (RemBERT model)"),DUe.forEach(t),EOr=i(_e),W0=n(_e,"LI",{});var GUe=s(W0);D6e=n(GUe,"STRONG",{});var Ara=s(D6e);COr=r(Ara,"roberta"),Ara.forEach(t),wOr=r(GUe," \u2014 "),fre=n(GUe,"A",{href:!0});var Lra=s(fre);AOr=r(Lra,"TFRobertaForMaskedLM"),Lra.forEach(t),LOr=r(GUe," (RoBERTa model)"),GUe.forEach(t),yOr=i(_e),U0=n(_e,"LI",{});var OUe=s(U0);G6e=n(OUe,"STRONG",{});var yra=s(G6e);xOr=r(yra,"roformer"),yra.forEach(t),$Or=r(OUe," \u2014 "),gre=n(OUe,"A",{href:!0});var xra=s(gre);kOr=r(xra,"TFRoFormerForMaskedLM"),xra.forEach(t),SOr=r(OUe," (RoFormer model)"),OUe.forEach(t),ROr=i(_e),H0=n(_e,"LI",{});var VUe=s(H0);O6e=n(VUe,"STRONG",{});var $ra=s(O6e);POr=r($ra,"tapas"),$ra.forEach(t),BOr=r(VUe," \u2014 "),hre=n(VUe,"A",{href:!0});var kra=s(hre);IOr=r(kra,"TFTapasForMaskedLM"),kra.forEach(t),NOr=r(VUe," (TAPAS model)"),VUe.forEach(t),qOr=i(_e),J0=n(_e,"LI",{});var XUe=s(J0);V6e=n(XUe,"STRONG",{});var Sra=s(V6e);jOr=r(Sra,"xlm"),Sra.forEach(t),DOr=r(XUe," \u2014 "),ure=n(XUe,"A",{href:!0});var Rra=s(ure);GOr=r(Rra,"TFXLMWithLMHeadModel"),Rra.forEach(t),OOr=r(XUe," (XLM model)"),XUe.forEach(t),VOr=i(_e),Y0=n(_e,"LI",{});var zUe=s(Y0);X6e=n(zUe,"STRONG",{});var Pra=s(X6e);XOr=r(Pra,"xlm-roberta"),Pra.forEach(t),zOr=r(zUe," \u2014 "),pre=n(zUe,"A",{href:!0});var Bra=s(pre);QOr=r(Bra,"TFXLMRobertaForMaskedLM"),Bra.forEach(t),WOr=r(zUe," (XLM-RoBERTa model)"),zUe.forEach(t),_e.forEach(t),UOr=i(fi),T(K0.$$.fragment,fi),fi.forEach(t),mi.forEach(t),meo=i(m),lm=n(m,"H2",{class:!0});var Aro=s(lm);Z0=n(Aro,"A",{id:!0,class:!0,href:!0});var Ira=s(Z0);z6e=n(Ira,"SPAN",{});var Nra=s(z6e);T(fS.$$.fragment,Nra),Nra.forEach(t),Ira.forEach(t),HOr=i(Aro),Q6e=n(Aro,"SPAN",{});var qra=s(Q6e);JOr=r(qra,"TFAutoModelForSeq2SeqLM"),qra.forEach(t),Aro.forEach(t),feo=i(m),fr=n(m,"DIV",{class:!0});var gi=s(fr);T(gS.$$.fragment,gi),YOr=i(gi),im=n(gi,"P",{});var qie=s(im);KOr=r(qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_re=n(qie,"A",{href:!0});var jra=s(_re);ZOr=r(jra,"from_pretrained()"),jra.forEach(t),eVr=r(qie," class method or the "),bre=n(qie,"A",{href:!0});var Dra=s(bre);oVr=r(Dra,"from_config()"),Dra.forEach(t),rVr=r(qie,` class
method.`),qie.forEach(t),tVr=i(gi),hS=n(gi,"P",{});var Lro=s(hS);aVr=r(Lro,"This class cannot be instantiated directly using "),W6e=n(Lro,"CODE",{});var Gra=s(W6e);nVr=r(Gra,"__init__()"),Gra.forEach(t),sVr=r(Lro," (throws an error)."),Lro.forEach(t),lVr=i(gi),Jt=n(gi,"DIV",{class:!0});var W8=s(Jt);T(uS.$$.fragment,W8),iVr=i(W8),U6e=n(W8,"P",{});var Ora=s(U6e);dVr=r(Ora,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ora.forEach(t),cVr=i(W8),dm=n(W8,"P",{});var jie=s(dm);mVr=r(jie,`Note:
Loading a model from its configuration file does `),H6e=n(jie,"STRONG",{});var Vra=s(H6e);fVr=r(Vra,"not"),Vra.forEach(t),gVr=r(jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(jie,"A",{href:!0});var Xra=s(vre);hVr=r(Xra,"from_pretrained()"),Xra.forEach(t),uVr=r(jie," to load the model weights."),jie.forEach(t),pVr=i(W8),T(ew.$$.fragment,W8),W8.forEach(t),_Vr=i(gi),Or=n(gi,"DIV",{class:!0});var hi=s(Or);T(pS.$$.fragment,hi),bVr=i(hi),J6e=n(hi,"P",{});var zra=s(J6e);vVr=r(zra,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zra.forEach(t),FVr=i(hi),kn=n(hi,"P",{});var U8=s(kn);TVr=r(U8,"The model class to instantiate is selected based on the "),Y6e=n(U8,"CODE",{});var Qra=s(Y6e);MVr=r(Qra,"model_type"),Qra.forEach(t),EVr=r(U8,` property of the config object (either
passed as an argument or loaded from `),K6e=n(U8,"CODE",{});var Wra=s(K6e);CVr=r(Wra,"pretrained_model_name_or_path"),Wra.forEach(t),wVr=r(U8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(U8,"CODE",{});var Ura=s(Z6e);AVr=r(Ura,"pretrained_model_name_or_path"),Ura.forEach(t),LVr=r(U8,":"),U8.forEach(t),yVr=i(hi),ye=n(hi,"UL",{});var Ne=s(ye);ow=n(Ne,"LI",{});var QUe=s(ow);e7e=n(QUe,"STRONG",{});var Hra=s(e7e);xVr=r(Hra,"bart"),Hra.forEach(t),$Vr=r(QUe," \u2014 "),Fre=n(QUe,"A",{href:!0});var Jra=s(Fre);kVr=r(Jra,"TFBartForConditionalGeneration"),Jra.forEach(t),SVr=r(QUe," (BART model)"),QUe.forEach(t),RVr=i(Ne),rw=n(Ne,"LI",{});var WUe=s(rw);o7e=n(WUe,"STRONG",{});var Yra=s(o7e);PVr=r(Yra,"blenderbot"),Yra.forEach(t),BVr=r(WUe," \u2014 "),Tre=n(WUe,"A",{href:!0});var Kra=s(Tre);IVr=r(Kra,"TFBlenderbotForConditionalGeneration"),Kra.forEach(t),NVr=r(WUe," (Blenderbot model)"),WUe.forEach(t),qVr=i(Ne),tw=n(Ne,"LI",{});var UUe=s(tw);r7e=n(UUe,"STRONG",{});var Zra=s(r7e);jVr=r(Zra,"blenderbot-small"),Zra.forEach(t),DVr=r(UUe," \u2014 "),Mre=n(UUe,"A",{href:!0});var eta=s(Mre);GVr=r(eta,"TFBlenderbotSmallForConditionalGeneration"),eta.forEach(t),OVr=r(UUe," (BlenderbotSmall model)"),UUe.forEach(t),VVr=i(Ne),aw=n(Ne,"LI",{});var HUe=s(aw);t7e=n(HUe,"STRONG",{});var ota=s(t7e);XVr=r(ota,"encoder-decoder"),ota.forEach(t),zVr=r(HUe," \u2014 "),Ere=n(HUe,"A",{href:!0});var rta=s(Ere);QVr=r(rta,"TFEncoderDecoderModel"),rta.forEach(t),WVr=r(HUe," (Encoder decoder model)"),HUe.forEach(t),UVr=i(Ne),nw=n(Ne,"LI",{});var JUe=s(nw);a7e=n(JUe,"STRONG",{});var tta=s(a7e);HVr=r(tta,"led"),tta.forEach(t),JVr=r(JUe," \u2014 "),Cre=n(JUe,"A",{href:!0});var ata=s(Cre);YVr=r(ata,"TFLEDForConditionalGeneration"),ata.forEach(t),KVr=r(JUe," (LED model)"),JUe.forEach(t),ZVr=i(Ne),sw=n(Ne,"LI",{});var YUe=s(sw);n7e=n(YUe,"STRONG",{});var nta=s(n7e);eXr=r(nta,"marian"),nta.forEach(t),oXr=r(YUe," \u2014 "),wre=n(YUe,"A",{href:!0});var sta=s(wre);rXr=r(sta,"TFMarianMTModel"),sta.forEach(t),tXr=r(YUe," (Marian model)"),YUe.forEach(t),aXr=i(Ne),lw=n(Ne,"LI",{});var KUe=s(lw);s7e=n(KUe,"STRONG",{});var lta=s(s7e);nXr=r(lta,"mbart"),lta.forEach(t),sXr=r(KUe," \u2014 "),Are=n(KUe,"A",{href:!0});var ita=s(Are);lXr=r(ita,"TFMBartForConditionalGeneration"),ita.forEach(t),iXr=r(KUe," (mBART model)"),KUe.forEach(t),dXr=i(Ne),iw=n(Ne,"LI",{});var ZUe=s(iw);l7e=n(ZUe,"STRONG",{});var dta=s(l7e);cXr=r(dta,"mt5"),dta.forEach(t),mXr=r(ZUe," \u2014 "),Lre=n(ZUe,"A",{href:!0});var cta=s(Lre);fXr=r(cta,"TFMT5ForConditionalGeneration"),cta.forEach(t),gXr=r(ZUe," (MT5 model)"),ZUe.forEach(t),hXr=i(Ne),dw=n(Ne,"LI",{});var eHe=s(dw);i7e=n(eHe,"STRONG",{});var mta=s(i7e);uXr=r(mta,"pegasus"),mta.forEach(t),pXr=r(eHe," \u2014 "),yre=n(eHe,"A",{href:!0});var fta=s(yre);_Xr=r(fta,"TFPegasusForConditionalGeneration"),fta.forEach(t),bXr=r(eHe," (Pegasus model)"),eHe.forEach(t),vXr=i(Ne),cw=n(Ne,"LI",{});var oHe=s(cw);d7e=n(oHe,"STRONG",{});var gta=s(d7e);FXr=r(gta,"t5"),gta.forEach(t),TXr=r(oHe," \u2014 "),xre=n(oHe,"A",{href:!0});var hta=s(xre);MXr=r(hta,"TFT5ForConditionalGeneration"),hta.forEach(t),EXr=r(oHe," (T5 model)"),oHe.forEach(t),Ne.forEach(t),CXr=i(hi),T(mw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),geo=i(m),cm=n(m,"H2",{class:!0});var yro=s(cm);fw=n(yro,"A",{id:!0,class:!0,href:!0});var uta=s(fw);c7e=n(uta,"SPAN",{});var pta=s(c7e);T(_S.$$.fragment,pta),pta.forEach(t),uta.forEach(t),wXr=i(yro),m7e=n(yro,"SPAN",{});var _ta=s(m7e);AXr=r(_ta,"TFAutoModelForSequenceClassification"),_ta.forEach(t),yro.forEach(t),heo=i(m),gr=n(m,"DIV",{class:!0});var ui=s(gr);T(bS.$$.fragment,ui),LXr=i(ui),mm=n(ui,"P",{});var Die=s(mm);yXr=r(Die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$re=n(Die,"A",{href:!0});var bta=s($re);xXr=r(bta,"from_pretrained()"),bta.forEach(t),$Xr=r(Die," class method or the "),kre=n(Die,"A",{href:!0});var vta=s(kre);kXr=r(vta,"from_config()"),vta.forEach(t),SXr=r(Die,` class
method.`),Die.forEach(t),RXr=i(ui),vS=n(ui,"P",{});var xro=s(vS);PXr=r(xro,"This class cannot be instantiated directly using "),f7e=n(xro,"CODE",{});var Fta=s(f7e);BXr=r(Fta,"__init__()"),Fta.forEach(t),IXr=r(xro," (throws an error)."),xro.forEach(t),NXr=i(ui),Yt=n(ui,"DIV",{class:!0});var H8=s(Yt);T(FS.$$.fragment,H8),qXr=i(H8),g7e=n(H8,"P",{});var Tta=s(g7e);jXr=r(Tta,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tta.forEach(t),DXr=i(H8),fm=n(H8,"P",{});var Gie=s(fm);GXr=r(Gie,`Note:
Loading a model from its configuration file does `),h7e=n(Gie,"STRONG",{});var Mta=s(h7e);OXr=r(Mta,"not"),Mta.forEach(t),VXr=r(Gie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(Gie,"A",{href:!0});var Eta=s(Sre);XXr=r(Eta,"from_pretrained()"),Eta.forEach(t),zXr=r(Gie," to load the model weights."),Gie.forEach(t),QXr=i(H8),T(gw.$$.fragment,H8),H8.forEach(t),WXr=i(ui),Vr=n(ui,"DIV",{class:!0});var pi=s(Vr);T(TS.$$.fragment,pi),UXr=i(pi),u7e=n(pi,"P",{});var Cta=s(u7e);HXr=r(Cta,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cta.forEach(t),JXr=i(pi),Sn=n(pi,"P",{});var J8=s(Sn);YXr=r(J8,"The model class to instantiate is selected based on the "),p7e=n(J8,"CODE",{});var wta=s(p7e);KXr=r(wta,"model_type"),wta.forEach(t),ZXr=r(J8,` property of the config object (either
passed as an argument or loaded from `),_7e=n(J8,"CODE",{});var Ata=s(_7e);ezr=r(Ata,"pretrained_model_name_or_path"),Ata.forEach(t),ozr=r(J8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(J8,"CODE",{});var Lta=s(b7e);rzr=r(Lta,"pretrained_model_name_or_path"),Lta.forEach(t),tzr=r(J8,":"),J8.forEach(t),azr=i(pi),re=n(pi,"UL",{});var ae=s(re);hw=n(ae,"LI",{});var rHe=s(hw);v7e=n(rHe,"STRONG",{});var yta=s(v7e);nzr=r(yta,"albert"),yta.forEach(t),szr=r(rHe," \u2014 "),Rre=n(rHe,"A",{href:!0});var xta=s(Rre);lzr=r(xta,"TFAlbertForSequenceClassification"),xta.forEach(t),izr=r(rHe," (ALBERT model)"),rHe.forEach(t),dzr=i(ae),uw=n(ae,"LI",{});var tHe=s(uw);F7e=n(tHe,"STRONG",{});var $ta=s(F7e);czr=r($ta,"bert"),$ta.forEach(t),mzr=r(tHe," \u2014 "),Pre=n(tHe,"A",{href:!0});var kta=s(Pre);fzr=r(kta,"TFBertForSequenceClassification"),kta.forEach(t),gzr=r(tHe," (BERT model)"),tHe.forEach(t),hzr=i(ae),pw=n(ae,"LI",{});var aHe=s(pw);T7e=n(aHe,"STRONG",{});var Sta=s(T7e);uzr=r(Sta,"camembert"),Sta.forEach(t),pzr=r(aHe," \u2014 "),Bre=n(aHe,"A",{href:!0});var Rta=s(Bre);_zr=r(Rta,"TFCamembertForSequenceClassification"),Rta.forEach(t),bzr=r(aHe," (CamemBERT model)"),aHe.forEach(t),vzr=i(ae),_w=n(ae,"LI",{});var nHe=s(_w);M7e=n(nHe,"STRONG",{});var Pta=s(M7e);Fzr=r(Pta,"convbert"),Pta.forEach(t),Tzr=r(nHe," \u2014 "),Ire=n(nHe,"A",{href:!0});var Bta=s(Ire);Mzr=r(Bta,"TFConvBertForSequenceClassification"),Bta.forEach(t),Ezr=r(nHe," (ConvBERT model)"),nHe.forEach(t),Czr=i(ae),bw=n(ae,"LI",{});var sHe=s(bw);E7e=n(sHe,"STRONG",{});var Ita=s(E7e);wzr=r(Ita,"ctrl"),Ita.forEach(t),Azr=r(sHe," \u2014 "),Nre=n(sHe,"A",{href:!0});var Nta=s(Nre);Lzr=r(Nta,"TFCTRLForSequenceClassification"),Nta.forEach(t),yzr=r(sHe," (CTRL model)"),sHe.forEach(t),xzr=i(ae),vw=n(ae,"LI",{});var lHe=s(vw);C7e=n(lHe,"STRONG",{});var qta=s(C7e);$zr=r(qta,"deberta"),qta.forEach(t),kzr=r(lHe," \u2014 "),qre=n(lHe,"A",{href:!0});var jta=s(qre);Szr=r(jta,"TFDebertaForSequenceClassification"),jta.forEach(t),Rzr=r(lHe," (DeBERTa model)"),lHe.forEach(t),Pzr=i(ae),Fw=n(ae,"LI",{});var iHe=s(Fw);w7e=n(iHe,"STRONG",{});var Dta=s(w7e);Bzr=r(Dta,"deberta-v2"),Dta.forEach(t),Izr=r(iHe," \u2014 "),jre=n(iHe,"A",{href:!0});var Gta=s(jre);Nzr=r(Gta,"TFDebertaV2ForSequenceClassification"),Gta.forEach(t),qzr=r(iHe," (DeBERTa-v2 model)"),iHe.forEach(t),jzr=i(ae),Tw=n(ae,"LI",{});var dHe=s(Tw);A7e=n(dHe,"STRONG",{});var Ota=s(A7e);Dzr=r(Ota,"distilbert"),Ota.forEach(t),Gzr=r(dHe," \u2014 "),Dre=n(dHe,"A",{href:!0});var Vta=s(Dre);Ozr=r(Vta,"TFDistilBertForSequenceClassification"),Vta.forEach(t),Vzr=r(dHe," (DistilBERT model)"),dHe.forEach(t),Xzr=i(ae),Mw=n(ae,"LI",{});var cHe=s(Mw);L7e=n(cHe,"STRONG",{});var Xta=s(L7e);zzr=r(Xta,"electra"),Xta.forEach(t),Qzr=r(cHe," \u2014 "),Gre=n(cHe,"A",{href:!0});var zta=s(Gre);Wzr=r(zta,"TFElectraForSequenceClassification"),zta.forEach(t),Uzr=r(cHe," (ELECTRA model)"),cHe.forEach(t),Hzr=i(ae),Ew=n(ae,"LI",{});var mHe=s(Ew);y7e=n(mHe,"STRONG",{});var Qta=s(y7e);Jzr=r(Qta,"flaubert"),Qta.forEach(t),Yzr=r(mHe," \u2014 "),Ore=n(mHe,"A",{href:!0});var Wta=s(Ore);Kzr=r(Wta,"TFFlaubertForSequenceClassification"),Wta.forEach(t),Zzr=r(mHe," (FlauBERT model)"),mHe.forEach(t),eQr=i(ae),Cw=n(ae,"LI",{});var fHe=s(Cw);x7e=n(fHe,"STRONG",{});var Uta=s(x7e);oQr=r(Uta,"funnel"),Uta.forEach(t),rQr=r(fHe," \u2014 "),Vre=n(fHe,"A",{href:!0});var Hta=s(Vre);tQr=r(Hta,"TFFunnelForSequenceClassification"),Hta.forEach(t),aQr=r(fHe," (Funnel Transformer model)"),fHe.forEach(t),nQr=i(ae),ww=n(ae,"LI",{});var gHe=s(ww);$7e=n(gHe,"STRONG",{});var Jta=s($7e);sQr=r(Jta,"gpt2"),Jta.forEach(t),lQr=r(gHe," \u2014 "),Xre=n(gHe,"A",{href:!0});var Yta=s(Xre);iQr=r(Yta,"TFGPT2ForSequenceClassification"),Yta.forEach(t),dQr=r(gHe," (OpenAI GPT-2 model)"),gHe.forEach(t),cQr=i(ae),Aw=n(ae,"LI",{});var hHe=s(Aw);k7e=n(hHe,"STRONG",{});var Kta=s(k7e);mQr=r(Kta,"gptj"),Kta.forEach(t),fQr=r(hHe," \u2014 "),zre=n(hHe,"A",{href:!0});var Zta=s(zre);gQr=r(Zta,"TFGPTJForSequenceClassification"),Zta.forEach(t),hQr=r(hHe," (GPT-J model)"),hHe.forEach(t),uQr=i(ae),Lw=n(ae,"LI",{});var uHe=s(Lw);S7e=n(uHe,"STRONG",{});var eaa=s(S7e);pQr=r(eaa,"layoutlm"),eaa.forEach(t),_Qr=r(uHe," \u2014 "),Qre=n(uHe,"A",{href:!0});var oaa=s(Qre);bQr=r(oaa,"TFLayoutLMForSequenceClassification"),oaa.forEach(t),vQr=r(uHe," (LayoutLM model)"),uHe.forEach(t),FQr=i(ae),yw=n(ae,"LI",{});var pHe=s(yw);R7e=n(pHe,"STRONG",{});var raa=s(R7e);TQr=r(raa,"layoutlmv3"),raa.forEach(t),MQr=r(pHe," \u2014 "),Wre=n(pHe,"A",{href:!0});var taa=s(Wre);EQr=r(taa,"TFLayoutLMv3ForSequenceClassification"),taa.forEach(t),CQr=r(pHe," (LayoutLMv3 model)"),pHe.forEach(t),wQr=i(ae),xw=n(ae,"LI",{});var _He=s(xw);P7e=n(_He,"STRONG",{});var aaa=s(P7e);AQr=r(aaa,"longformer"),aaa.forEach(t),LQr=r(_He," \u2014 "),Ure=n(_He,"A",{href:!0});var naa=s(Ure);yQr=r(naa,"TFLongformerForSequenceClassification"),naa.forEach(t),xQr=r(_He," (Longformer model)"),_He.forEach(t),$Qr=i(ae),$w=n(ae,"LI",{});var bHe=s($w);B7e=n(bHe,"STRONG",{});var saa=s(B7e);kQr=r(saa,"mobilebert"),saa.forEach(t),SQr=r(bHe," \u2014 "),Hre=n(bHe,"A",{href:!0});var laa=s(Hre);RQr=r(laa,"TFMobileBertForSequenceClassification"),laa.forEach(t),PQr=r(bHe," (MobileBERT model)"),bHe.forEach(t),BQr=i(ae),kw=n(ae,"LI",{});var vHe=s(kw);I7e=n(vHe,"STRONG",{});var iaa=s(I7e);IQr=r(iaa,"mpnet"),iaa.forEach(t),NQr=r(vHe," \u2014 "),Jre=n(vHe,"A",{href:!0});var daa=s(Jre);qQr=r(daa,"TFMPNetForSequenceClassification"),daa.forEach(t),jQr=r(vHe," (MPNet model)"),vHe.forEach(t),DQr=i(ae),Sw=n(ae,"LI",{});var FHe=s(Sw);N7e=n(FHe,"STRONG",{});var caa=s(N7e);GQr=r(caa,"openai-gpt"),caa.forEach(t),OQr=r(FHe," \u2014 "),Yre=n(FHe,"A",{href:!0});var maa=s(Yre);VQr=r(maa,"TFOpenAIGPTForSequenceClassification"),maa.forEach(t),XQr=r(FHe," (OpenAI GPT model)"),FHe.forEach(t),zQr=i(ae),Rw=n(ae,"LI",{});var THe=s(Rw);q7e=n(THe,"STRONG",{});var faa=s(q7e);QQr=r(faa,"rembert"),faa.forEach(t),WQr=r(THe," \u2014 "),Kre=n(THe,"A",{href:!0});var gaa=s(Kre);UQr=r(gaa,"TFRemBertForSequenceClassification"),gaa.forEach(t),HQr=r(THe," (RemBERT model)"),THe.forEach(t),JQr=i(ae),Pw=n(ae,"LI",{});var MHe=s(Pw);j7e=n(MHe,"STRONG",{});var haa=s(j7e);YQr=r(haa,"roberta"),haa.forEach(t),KQr=r(MHe," \u2014 "),Zre=n(MHe,"A",{href:!0});var uaa=s(Zre);ZQr=r(uaa,"TFRobertaForSequenceClassification"),uaa.forEach(t),eWr=r(MHe," (RoBERTa model)"),MHe.forEach(t),oWr=i(ae),Bw=n(ae,"LI",{});var EHe=s(Bw);D7e=n(EHe,"STRONG",{});var paa=s(D7e);rWr=r(paa,"roformer"),paa.forEach(t),tWr=r(EHe," \u2014 "),ete=n(EHe,"A",{href:!0});var _aa=s(ete);aWr=r(_aa,"TFRoFormerForSequenceClassification"),_aa.forEach(t),nWr=r(EHe," (RoFormer model)"),EHe.forEach(t),sWr=i(ae),Iw=n(ae,"LI",{});var CHe=s(Iw);G7e=n(CHe,"STRONG",{});var baa=s(G7e);lWr=r(baa,"tapas"),baa.forEach(t),iWr=r(CHe," \u2014 "),ote=n(CHe,"A",{href:!0});var vaa=s(ote);dWr=r(vaa,"TFTapasForSequenceClassification"),vaa.forEach(t),cWr=r(CHe," (TAPAS model)"),CHe.forEach(t),mWr=i(ae),Nw=n(ae,"LI",{});var wHe=s(Nw);O7e=n(wHe,"STRONG",{});var Faa=s(O7e);fWr=r(Faa,"transfo-xl"),Faa.forEach(t),gWr=r(wHe," \u2014 "),rte=n(wHe,"A",{href:!0});var Taa=s(rte);hWr=r(Taa,"TFTransfoXLForSequenceClassification"),Taa.forEach(t),uWr=r(wHe," (Transformer-XL model)"),wHe.forEach(t),pWr=i(ae),qw=n(ae,"LI",{});var AHe=s(qw);V7e=n(AHe,"STRONG",{});var Maa=s(V7e);_Wr=r(Maa,"xlm"),Maa.forEach(t),bWr=r(AHe," \u2014 "),tte=n(AHe,"A",{href:!0});var Eaa=s(tte);vWr=r(Eaa,"TFXLMForSequenceClassification"),Eaa.forEach(t),FWr=r(AHe," (XLM model)"),AHe.forEach(t),TWr=i(ae),jw=n(ae,"LI",{});var LHe=s(jw);X7e=n(LHe,"STRONG",{});var Caa=s(X7e);MWr=r(Caa,"xlm-roberta"),Caa.forEach(t),EWr=r(LHe," \u2014 "),ate=n(LHe,"A",{href:!0});var waa=s(ate);CWr=r(waa,"TFXLMRobertaForSequenceClassification"),waa.forEach(t),wWr=r(LHe," (XLM-RoBERTa model)"),LHe.forEach(t),AWr=i(ae),Dw=n(ae,"LI",{});var yHe=s(Dw);z7e=n(yHe,"STRONG",{});var Aaa=s(z7e);LWr=r(Aaa,"xlnet"),Aaa.forEach(t),yWr=r(yHe," \u2014 "),nte=n(yHe,"A",{href:!0});var Laa=s(nte);xWr=r(Laa,"TFXLNetForSequenceClassification"),Laa.forEach(t),$Wr=r(yHe," (XLNet model)"),yHe.forEach(t),ae.forEach(t),kWr=i(pi),T(Gw.$$.fragment,pi),pi.forEach(t),ui.forEach(t),ueo=i(m),gm=n(m,"H2",{class:!0});var $ro=s(gm);Ow=n($ro,"A",{id:!0,class:!0,href:!0});var yaa=s(Ow);Q7e=n(yaa,"SPAN",{});var xaa=s(Q7e);T(MS.$$.fragment,xaa),xaa.forEach(t),yaa.forEach(t),SWr=i($ro),W7e=n($ro,"SPAN",{});var $aa=s(W7e);RWr=r($aa,"TFAutoModelForMultipleChoice"),$aa.forEach(t),$ro.forEach(t),peo=i(m),hr=n(m,"DIV",{class:!0});var _i=s(hr);T(ES.$$.fragment,_i),PWr=i(_i),hm=n(_i,"P",{});var Oie=s(hm);BWr=r(Oie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ste=n(Oie,"A",{href:!0});var kaa=s(ste);IWr=r(kaa,"from_pretrained()"),kaa.forEach(t),NWr=r(Oie," class method or the "),lte=n(Oie,"A",{href:!0});var Saa=s(lte);qWr=r(Saa,"from_config()"),Saa.forEach(t),jWr=r(Oie,` class
method.`),Oie.forEach(t),DWr=i(_i),CS=n(_i,"P",{});var kro=s(CS);GWr=r(kro,"This class cannot be instantiated directly using "),U7e=n(kro,"CODE",{});var Raa=s(U7e);OWr=r(Raa,"__init__()"),Raa.forEach(t),VWr=r(kro," (throws an error)."),kro.forEach(t),XWr=i(_i),Kt=n(_i,"DIV",{class:!0});var Y8=s(Kt);T(wS.$$.fragment,Y8),zWr=i(Y8),H7e=n(Y8,"P",{});var Paa=s(H7e);QWr=r(Paa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Paa.forEach(t),WWr=i(Y8),um=n(Y8,"P",{});var Vie=s(um);UWr=r(Vie,`Note:
Loading a model from its configuration file does `),J7e=n(Vie,"STRONG",{});var Baa=s(J7e);HWr=r(Baa,"not"),Baa.forEach(t),JWr=r(Vie,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(Vie,"A",{href:!0});var Iaa=s(ite);YWr=r(Iaa,"from_pretrained()"),Iaa.forEach(t),KWr=r(Vie," to load the model weights."),Vie.forEach(t),ZWr=i(Y8),T(Vw.$$.fragment,Y8),Y8.forEach(t),eUr=i(_i),Xr=n(_i,"DIV",{class:!0});var bi=s(Xr);T(AS.$$.fragment,bi),oUr=i(bi),Y7e=n(bi,"P",{});var Naa=s(Y7e);rUr=r(Naa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Naa.forEach(t),tUr=i(bi),Rn=n(bi,"P",{});var K8=s(Rn);aUr=r(K8,"The model class to instantiate is selected based on the "),K7e=n(K8,"CODE",{});var qaa=s(K7e);nUr=r(qaa,"model_type"),qaa.forEach(t),sUr=r(K8,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(K8,"CODE",{});var jaa=s(Z7e);lUr=r(jaa,"pretrained_model_name_or_path"),jaa.forEach(t),iUr=r(K8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eLe=n(K8,"CODE",{});var Daa=s(eLe);dUr=r(Daa,"pretrained_model_name_or_path"),Daa.forEach(t),cUr=r(K8,":"),K8.forEach(t),mUr=i(bi),ve=n(bi,"UL",{});var Te=s(ve);Xw=n(Te,"LI",{});var xHe=s(Xw);oLe=n(xHe,"STRONG",{});var Gaa=s(oLe);fUr=r(Gaa,"albert"),Gaa.forEach(t),gUr=r(xHe," \u2014 "),dte=n(xHe,"A",{href:!0});var Oaa=s(dte);hUr=r(Oaa,"TFAlbertForMultipleChoice"),Oaa.forEach(t),uUr=r(xHe," (ALBERT model)"),xHe.forEach(t),pUr=i(Te),zw=n(Te,"LI",{});var $He=s(zw);rLe=n($He,"STRONG",{});var Vaa=s(rLe);_Ur=r(Vaa,"bert"),Vaa.forEach(t),bUr=r($He," \u2014 "),cte=n($He,"A",{href:!0});var Xaa=s(cte);vUr=r(Xaa,"TFBertForMultipleChoice"),Xaa.forEach(t),FUr=r($He," (BERT model)"),$He.forEach(t),TUr=i(Te),Qw=n(Te,"LI",{});var kHe=s(Qw);tLe=n(kHe,"STRONG",{});var zaa=s(tLe);MUr=r(zaa,"camembert"),zaa.forEach(t),EUr=r(kHe," \u2014 "),mte=n(kHe,"A",{href:!0});var Qaa=s(mte);CUr=r(Qaa,"TFCamembertForMultipleChoice"),Qaa.forEach(t),wUr=r(kHe," (CamemBERT model)"),kHe.forEach(t),AUr=i(Te),Ww=n(Te,"LI",{});var SHe=s(Ww);aLe=n(SHe,"STRONG",{});var Waa=s(aLe);LUr=r(Waa,"convbert"),Waa.forEach(t),yUr=r(SHe," \u2014 "),fte=n(SHe,"A",{href:!0});var Uaa=s(fte);xUr=r(Uaa,"TFConvBertForMultipleChoice"),Uaa.forEach(t),$Ur=r(SHe," (ConvBERT model)"),SHe.forEach(t),kUr=i(Te),Uw=n(Te,"LI",{});var RHe=s(Uw);nLe=n(RHe,"STRONG",{});var Haa=s(nLe);SUr=r(Haa,"distilbert"),Haa.forEach(t),RUr=r(RHe," \u2014 "),gte=n(RHe,"A",{href:!0});var Jaa=s(gte);PUr=r(Jaa,"TFDistilBertForMultipleChoice"),Jaa.forEach(t),BUr=r(RHe," (DistilBERT model)"),RHe.forEach(t),IUr=i(Te),Hw=n(Te,"LI",{});var PHe=s(Hw);sLe=n(PHe,"STRONG",{});var Yaa=s(sLe);NUr=r(Yaa,"electra"),Yaa.forEach(t),qUr=r(PHe," \u2014 "),hte=n(PHe,"A",{href:!0});var Kaa=s(hte);jUr=r(Kaa,"TFElectraForMultipleChoice"),Kaa.forEach(t),DUr=r(PHe," (ELECTRA model)"),PHe.forEach(t),GUr=i(Te),Jw=n(Te,"LI",{});var BHe=s(Jw);lLe=n(BHe,"STRONG",{});var Zaa=s(lLe);OUr=r(Zaa,"flaubert"),Zaa.forEach(t),VUr=r(BHe," \u2014 "),ute=n(BHe,"A",{href:!0});var ena=s(ute);XUr=r(ena,"TFFlaubertForMultipleChoice"),ena.forEach(t),zUr=r(BHe," (FlauBERT model)"),BHe.forEach(t),QUr=i(Te),Yw=n(Te,"LI",{});var IHe=s(Yw);iLe=n(IHe,"STRONG",{});var ona=s(iLe);WUr=r(ona,"funnel"),ona.forEach(t),UUr=r(IHe," \u2014 "),pte=n(IHe,"A",{href:!0});var rna=s(pte);HUr=r(rna,"TFFunnelForMultipleChoice"),rna.forEach(t),JUr=r(IHe," (Funnel Transformer model)"),IHe.forEach(t),YUr=i(Te),Kw=n(Te,"LI",{});var NHe=s(Kw);dLe=n(NHe,"STRONG",{});var tna=s(dLe);KUr=r(tna,"longformer"),tna.forEach(t),ZUr=r(NHe," \u2014 "),_te=n(NHe,"A",{href:!0});var ana=s(_te);eHr=r(ana,"TFLongformerForMultipleChoice"),ana.forEach(t),oHr=r(NHe," (Longformer model)"),NHe.forEach(t),rHr=i(Te),Zw=n(Te,"LI",{});var qHe=s(Zw);cLe=n(qHe,"STRONG",{});var nna=s(cLe);tHr=r(nna,"mobilebert"),nna.forEach(t),aHr=r(qHe," \u2014 "),bte=n(qHe,"A",{href:!0});var sna=s(bte);nHr=r(sna,"TFMobileBertForMultipleChoice"),sna.forEach(t),sHr=r(qHe," (MobileBERT model)"),qHe.forEach(t),lHr=i(Te),eA=n(Te,"LI",{});var jHe=s(eA);mLe=n(jHe,"STRONG",{});var lna=s(mLe);iHr=r(lna,"mpnet"),lna.forEach(t),dHr=r(jHe," \u2014 "),vte=n(jHe,"A",{href:!0});var ina=s(vte);cHr=r(ina,"TFMPNetForMultipleChoice"),ina.forEach(t),mHr=r(jHe," (MPNet model)"),jHe.forEach(t),fHr=i(Te),oA=n(Te,"LI",{});var DHe=s(oA);fLe=n(DHe,"STRONG",{});var dna=s(fLe);gHr=r(dna,"rembert"),dna.forEach(t),hHr=r(DHe," \u2014 "),Fte=n(DHe,"A",{href:!0});var cna=s(Fte);uHr=r(cna,"TFRemBertForMultipleChoice"),cna.forEach(t),pHr=r(DHe," (RemBERT model)"),DHe.forEach(t),_Hr=i(Te),rA=n(Te,"LI",{});var GHe=s(rA);gLe=n(GHe,"STRONG",{});var mna=s(gLe);bHr=r(mna,"roberta"),mna.forEach(t),vHr=r(GHe," \u2014 "),Tte=n(GHe,"A",{href:!0});var fna=s(Tte);FHr=r(fna,"TFRobertaForMultipleChoice"),fna.forEach(t),THr=r(GHe," (RoBERTa model)"),GHe.forEach(t),MHr=i(Te),tA=n(Te,"LI",{});var OHe=s(tA);hLe=n(OHe,"STRONG",{});var gna=s(hLe);EHr=r(gna,"roformer"),gna.forEach(t),CHr=r(OHe," \u2014 "),Mte=n(OHe,"A",{href:!0});var hna=s(Mte);wHr=r(hna,"TFRoFormerForMultipleChoice"),hna.forEach(t),AHr=r(OHe," (RoFormer model)"),OHe.forEach(t),LHr=i(Te),aA=n(Te,"LI",{});var VHe=s(aA);uLe=n(VHe,"STRONG",{});var una=s(uLe);yHr=r(una,"xlm"),una.forEach(t),xHr=r(VHe," \u2014 "),Ete=n(VHe,"A",{href:!0});var pna=s(Ete);$Hr=r(pna,"TFXLMForMultipleChoice"),pna.forEach(t),kHr=r(VHe," (XLM model)"),VHe.forEach(t),SHr=i(Te),nA=n(Te,"LI",{});var XHe=s(nA);pLe=n(XHe,"STRONG",{});var _na=s(pLe);RHr=r(_na,"xlm-roberta"),_na.forEach(t),PHr=r(XHe," \u2014 "),Cte=n(XHe,"A",{href:!0});var bna=s(Cte);BHr=r(bna,"TFXLMRobertaForMultipleChoice"),bna.forEach(t),IHr=r(XHe," (XLM-RoBERTa model)"),XHe.forEach(t),NHr=i(Te),sA=n(Te,"LI",{});var zHe=s(sA);_Le=n(zHe,"STRONG",{});var vna=s(_Le);qHr=r(vna,"xlnet"),vna.forEach(t),jHr=r(zHe," \u2014 "),wte=n(zHe,"A",{href:!0});var Fna=s(wte);DHr=r(Fna,"TFXLNetForMultipleChoice"),Fna.forEach(t),GHr=r(zHe," (XLNet model)"),zHe.forEach(t),Te.forEach(t),OHr=i(bi),T(lA.$$.fragment,bi),bi.forEach(t),_i.forEach(t),_eo=i(m),pm=n(m,"H2",{class:!0});var Sro=s(pm);iA=n(Sro,"A",{id:!0,class:!0,href:!0});var Tna=s(iA);bLe=n(Tna,"SPAN",{});var Mna=s(bLe);T(LS.$$.fragment,Mna),Mna.forEach(t),Tna.forEach(t),VHr=i(Sro),vLe=n(Sro,"SPAN",{});var Ena=s(vLe);XHr=r(Ena,"TFAutoModelForNextSentencePrediction"),Ena.forEach(t),Sro.forEach(t),beo=i(m),ur=n(m,"DIV",{class:!0});var vi=s(ur);T(yS.$$.fragment,vi),zHr=i(vi),_m=n(vi,"P",{});var Xie=s(_m);QHr=r(Xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ate=n(Xie,"A",{href:!0});var Cna=s(Ate);WHr=r(Cna,"from_pretrained()"),Cna.forEach(t),UHr=r(Xie," class method or the "),Lte=n(Xie,"A",{href:!0});var wna=s(Lte);HHr=r(wna,"from_config()"),wna.forEach(t),JHr=r(Xie,` class
method.`),Xie.forEach(t),YHr=i(vi),xS=n(vi,"P",{});var Rro=s(xS);KHr=r(Rro,"This class cannot be instantiated directly using "),FLe=n(Rro,"CODE",{});var Ana=s(FLe);ZHr=r(Ana,"__init__()"),Ana.forEach(t),eJr=r(Rro," (throws an error)."),Rro.forEach(t),oJr=i(vi),Zt=n(vi,"DIV",{class:!0});var Z8=s(Zt);T($S.$$.fragment,Z8),rJr=i(Z8),TLe=n(Z8,"P",{});var Lna=s(TLe);tJr=r(Lna,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lna.forEach(t),aJr=i(Z8),bm=n(Z8,"P",{});var zie=s(bm);nJr=r(zie,`Note:
Loading a model from its configuration file does `),MLe=n(zie,"STRONG",{});var yna=s(MLe);sJr=r(yna,"not"),yna.forEach(t),lJr=r(zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),yte=n(zie,"A",{href:!0});var xna=s(yte);iJr=r(xna,"from_pretrained()"),xna.forEach(t),dJr=r(zie," to load the model weights."),zie.forEach(t),cJr=i(Z8),T(dA.$$.fragment,Z8),Z8.forEach(t),mJr=i(vi),zr=n(vi,"DIV",{class:!0});var Fi=s(zr);T(kS.$$.fragment,Fi),fJr=i(Fi),ELe=n(Fi,"P",{});var $na=s(ELe);gJr=r($na,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$na.forEach(t),hJr=i(Fi),Pn=n(Fi,"P",{});var e9=s(Pn);uJr=r(e9,"The model class to instantiate is selected based on the "),CLe=n(e9,"CODE",{});var kna=s(CLe);pJr=r(kna,"model_type"),kna.forEach(t),_Jr=r(e9,` property of the config object (either
passed as an argument or loaded from `),wLe=n(e9,"CODE",{});var Sna=s(wLe);bJr=r(Sna,"pretrained_model_name_or_path"),Sna.forEach(t),vJr=r(e9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ALe=n(e9,"CODE",{});var Rna=s(ALe);FJr=r(Rna,"pretrained_model_name_or_path"),Rna.forEach(t),TJr=r(e9,":"),e9.forEach(t),MJr=i(Fi),SS=n(Fi,"UL",{});var Pro=s(SS);cA=n(Pro,"LI",{});var QHe=s(cA);LLe=n(QHe,"STRONG",{});var Pna=s(LLe);EJr=r(Pna,"bert"),Pna.forEach(t),CJr=r(QHe," \u2014 "),xte=n(QHe,"A",{href:!0});var Bna=s(xte);wJr=r(Bna,"TFBertForNextSentencePrediction"),Bna.forEach(t),AJr=r(QHe," (BERT model)"),QHe.forEach(t),LJr=i(Pro),mA=n(Pro,"LI",{});var WHe=s(mA);yLe=n(WHe,"STRONG",{});var Ina=s(yLe);yJr=r(Ina,"mobilebert"),Ina.forEach(t),xJr=r(WHe," \u2014 "),$te=n(WHe,"A",{href:!0});var Nna=s($te);$Jr=r(Nna,"TFMobileBertForNextSentencePrediction"),Nna.forEach(t),kJr=r(WHe," (MobileBERT model)"),WHe.forEach(t),Pro.forEach(t),SJr=i(Fi),T(fA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),veo=i(m),vm=n(m,"H2",{class:!0});var Bro=s(vm);gA=n(Bro,"A",{id:!0,class:!0,href:!0});var qna=s(gA);xLe=n(qna,"SPAN",{});var jna=s(xLe);T(RS.$$.fragment,jna),jna.forEach(t),qna.forEach(t),RJr=i(Bro),$Le=n(Bro,"SPAN",{});var Dna=s($Le);PJr=r(Dna,"TFAutoModelForTableQuestionAnswering"),Dna.forEach(t),Bro.forEach(t),Feo=i(m),pr=n(m,"DIV",{class:!0});var Ti=s(pr);T(PS.$$.fragment,Ti),BJr=i(Ti),Fm=n(Ti,"P",{});var Qie=s(Fm);IJr=r(Qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kte=n(Qie,"A",{href:!0});var Gna=s(kte);NJr=r(Gna,"from_pretrained()"),Gna.forEach(t),qJr=r(Qie," class method or the "),Ste=n(Qie,"A",{href:!0});var Ona=s(Ste);jJr=r(Ona,"from_config()"),Ona.forEach(t),DJr=r(Qie,` class
method.`),Qie.forEach(t),GJr=i(Ti),BS=n(Ti,"P",{});var Iro=s(BS);OJr=r(Iro,"This class cannot be instantiated directly using "),kLe=n(Iro,"CODE",{});var Vna=s(kLe);VJr=r(Vna,"__init__()"),Vna.forEach(t),XJr=r(Iro," (throws an error)."),Iro.forEach(t),zJr=i(Ti),ea=n(Ti,"DIV",{class:!0});var o9=s(ea);T(IS.$$.fragment,o9),QJr=i(o9),SLe=n(o9,"P",{});var Xna=s(SLe);WJr=r(Xna,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xna.forEach(t),UJr=i(o9),Tm=n(o9,"P",{});var Wie=s(Tm);HJr=r(Wie,`Note:
Loading a model from its configuration file does `),RLe=n(Wie,"STRONG",{});var zna=s(RLe);JJr=r(zna,"not"),zna.forEach(t),YJr=r(Wie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rte=n(Wie,"A",{href:!0});var Qna=s(Rte);KJr=r(Qna,"from_pretrained()"),Qna.forEach(t),ZJr=r(Wie," to load the model weights."),Wie.forEach(t),eYr=i(o9),T(hA.$$.fragment,o9),o9.forEach(t),oYr=i(Ti),Qr=n(Ti,"DIV",{class:!0});var Mi=s(Qr);T(NS.$$.fragment,Mi),rYr=i(Mi),PLe=n(Mi,"P",{});var Wna=s(PLe);tYr=r(Wna,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wna.forEach(t),aYr=i(Mi),Bn=n(Mi,"P",{});var r9=s(Bn);nYr=r(r9,"The model class to instantiate is selected based on the "),BLe=n(r9,"CODE",{});var Una=s(BLe);sYr=r(Una,"model_type"),Una.forEach(t),lYr=r(r9,` property of the config object (either
passed as an argument or loaded from `),ILe=n(r9,"CODE",{});var Hna=s(ILe);iYr=r(Hna,"pretrained_model_name_or_path"),Hna.forEach(t),dYr=r(r9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NLe=n(r9,"CODE",{});var Jna=s(NLe);cYr=r(Jna,"pretrained_model_name_or_path"),Jna.forEach(t),mYr=r(r9,":"),r9.forEach(t),fYr=i(Mi),qLe=n(Mi,"UL",{});var Yna=s(qLe);uA=n(Yna,"LI",{});var UHe=s(uA);jLe=n(UHe,"STRONG",{});var Kna=s(jLe);gYr=r(Kna,"tapas"),Kna.forEach(t),hYr=r(UHe," \u2014 "),Pte=n(UHe,"A",{href:!0});var Zna=s(Pte);uYr=r(Zna,"TFTapasForQuestionAnswering"),Zna.forEach(t),pYr=r(UHe," (TAPAS model)"),UHe.forEach(t),Yna.forEach(t),_Yr=i(Mi),T(pA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),Teo=i(m),Mm=n(m,"H2",{class:!0});var Nro=s(Mm);_A=n(Nro,"A",{id:!0,class:!0,href:!0});var esa=s(_A);DLe=n(esa,"SPAN",{});var osa=s(DLe);T(qS.$$.fragment,osa),osa.forEach(t),esa.forEach(t),bYr=i(Nro),GLe=n(Nro,"SPAN",{});var rsa=s(GLe);vYr=r(rsa,"TFAutoModelForDocumentQuestionAnswering"),rsa.forEach(t),Nro.forEach(t),Meo=i(m),_r=n(m,"DIV",{class:!0});var Ei=s(_r);T(jS.$$.fragment,Ei),FYr=i(Ei),Em=n(Ei,"P",{});var Uie=s(Em);TYr=r(Uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Bte=n(Uie,"A",{href:!0});var tsa=s(Bte);MYr=r(tsa,"from_pretrained()"),tsa.forEach(t),EYr=r(Uie," class method or the "),Ite=n(Uie,"A",{href:!0});var asa=s(Ite);CYr=r(asa,"from_config()"),asa.forEach(t),wYr=r(Uie,` class
method.`),Uie.forEach(t),AYr=i(Ei),DS=n(Ei,"P",{});var qro=s(DS);LYr=r(qro,"This class cannot be instantiated directly using "),OLe=n(qro,"CODE",{});var nsa=s(OLe);yYr=r(nsa,"__init__()"),nsa.forEach(t),xYr=r(qro," (throws an error)."),qro.forEach(t),$Yr=i(Ei),oa=n(Ei,"DIV",{class:!0});var t9=s(oa);T(GS.$$.fragment,t9),kYr=i(t9),VLe=n(t9,"P",{});var ssa=s(VLe);SYr=r(ssa,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),ssa.forEach(t),RYr=i(t9),Cm=n(t9,"P",{});var Hie=s(Cm);PYr=r(Hie,`Note:
Loading a model from its configuration file does `),XLe=n(Hie,"STRONG",{});var lsa=s(XLe);BYr=r(lsa,"not"),lsa.forEach(t),IYr=r(Hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nte=n(Hie,"A",{href:!0});var isa=s(Nte);NYr=r(isa,"from_pretrained()"),isa.forEach(t),qYr=r(Hie," to load the model weights."),Hie.forEach(t),jYr=i(t9),T(bA.$$.fragment,t9),t9.forEach(t),DYr=i(Ei),Wr=n(Ei,"DIV",{class:!0});var Ci=s(Wr);T(OS.$$.fragment,Ci),GYr=i(Ci),zLe=n(Ci,"P",{});var dsa=s(zLe);OYr=r(dsa,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),dsa.forEach(t),VYr=i(Ci),In=n(Ci,"P",{});var a9=s(In);XYr=r(a9,"The model class to instantiate is selected based on the "),QLe=n(a9,"CODE",{});var csa=s(QLe);zYr=r(csa,"model_type"),csa.forEach(t),QYr=r(a9,` property of the config object (either
passed as an argument or loaded from `),WLe=n(a9,"CODE",{});var msa=s(WLe);WYr=r(msa,"pretrained_model_name_or_path"),msa.forEach(t),UYr=r(a9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ULe=n(a9,"CODE",{});var fsa=s(ULe);HYr=r(fsa,"pretrained_model_name_or_path"),fsa.forEach(t),JYr=r(a9,":"),a9.forEach(t),YYr=i(Ci),HLe=n(Ci,"UL",{});var gsa=s(HLe);vA=n(gsa,"LI",{});var HHe=s(vA);JLe=n(HHe,"STRONG",{});var hsa=s(JLe);KYr=r(hsa,"layoutlm"),hsa.forEach(t),ZYr=r(HHe," \u2014 "),qte=n(HHe,"A",{href:!0});var usa=s(qte);eKr=r(usa,"TFLayoutLMForQuestionAnswering"),usa.forEach(t),oKr=r(HHe," (LayoutLM model)"),HHe.forEach(t),gsa.forEach(t),rKr=i(Ci),T(FA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),Eeo=i(m),wm=n(m,"H2",{class:!0});var jro=s(wm);TA=n(jro,"A",{id:!0,class:!0,href:!0});var psa=s(TA);YLe=n(psa,"SPAN",{});var _sa=s(YLe);T(VS.$$.fragment,_sa),_sa.forEach(t),psa.forEach(t),tKr=i(jro),KLe=n(jro,"SPAN",{});var bsa=s(KLe);aKr=r(bsa,"TFAutoModelForTokenClassification"),bsa.forEach(t),jro.forEach(t),Ceo=i(m),br=n(m,"DIV",{class:!0});var wi=s(br);T(XS.$$.fragment,wi),nKr=i(wi),Am=n(wi,"P",{});var Jie=s(Am);sKr=r(Jie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jte=n(Jie,"A",{href:!0});var vsa=s(jte);lKr=r(vsa,"from_pretrained()"),vsa.forEach(t),iKr=r(Jie," class method or the "),Dte=n(Jie,"A",{href:!0});var Fsa=s(Dte);dKr=r(Fsa,"from_config()"),Fsa.forEach(t),cKr=r(Jie,` class
method.`),Jie.forEach(t),mKr=i(wi),zS=n(wi,"P",{});var Dro=s(zS);fKr=r(Dro,"This class cannot be instantiated directly using "),ZLe=n(Dro,"CODE",{});var Tsa=s(ZLe);gKr=r(Tsa,"__init__()"),Tsa.forEach(t),hKr=r(Dro," (throws an error)."),Dro.forEach(t),uKr=i(wi),ra=n(wi,"DIV",{class:!0});var n9=s(ra);T(QS.$$.fragment,n9),pKr=i(n9),eye=n(n9,"P",{});var Msa=s(eye);_Kr=r(Msa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Msa.forEach(t),bKr=i(n9),Lm=n(n9,"P",{});var Yie=s(Lm);vKr=r(Yie,`Note:
Loading a model from its configuration file does `),oye=n(Yie,"STRONG",{});var Esa=s(oye);FKr=r(Esa,"not"),Esa.forEach(t),TKr=r(Yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gte=n(Yie,"A",{href:!0});var Csa=s(Gte);MKr=r(Csa,"from_pretrained()"),Csa.forEach(t),EKr=r(Yie," to load the model weights."),Yie.forEach(t),CKr=i(n9),T(MA.$$.fragment,n9),n9.forEach(t),wKr=i(wi),Ur=n(wi,"DIV",{class:!0});var Ai=s(Ur);T(WS.$$.fragment,Ai),AKr=i(Ai),rye=n(Ai,"P",{});var wsa=s(rye);LKr=r(wsa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wsa.forEach(t),yKr=i(Ai),Nn=n(Ai,"P",{});var s9=s(Nn);xKr=r(s9,"The model class to instantiate is selected based on the "),tye=n(s9,"CODE",{});var Asa=s(tye);$Kr=r(Asa,"model_type"),Asa.forEach(t),kKr=r(s9,` property of the config object (either
passed as an argument or loaded from `),aye=n(s9,"CODE",{});var Lsa=s(aye);SKr=r(Lsa,"pretrained_model_name_or_path"),Lsa.forEach(t),RKr=r(s9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nye=n(s9,"CODE",{});var ysa=s(nye);PKr=r(ysa,"pretrained_model_name_or_path"),ysa.forEach(t),BKr=r(s9,":"),s9.forEach(t),IKr=i(Ai),de=n(Ai,"UL",{});var he=s(de);EA=n(he,"LI",{});var JHe=s(EA);sye=n(JHe,"STRONG",{});var xsa=s(sye);NKr=r(xsa,"albert"),xsa.forEach(t),qKr=r(JHe," \u2014 "),Ote=n(JHe,"A",{href:!0});var $sa=s(Ote);jKr=r($sa,"TFAlbertForTokenClassification"),$sa.forEach(t),DKr=r(JHe," (ALBERT model)"),JHe.forEach(t),GKr=i(he),CA=n(he,"LI",{});var YHe=s(CA);lye=n(YHe,"STRONG",{});var ksa=s(lye);OKr=r(ksa,"bert"),ksa.forEach(t),VKr=r(YHe," \u2014 "),Vte=n(YHe,"A",{href:!0});var Ssa=s(Vte);XKr=r(Ssa,"TFBertForTokenClassification"),Ssa.forEach(t),zKr=r(YHe," (BERT model)"),YHe.forEach(t),QKr=i(he),wA=n(he,"LI",{});var KHe=s(wA);iye=n(KHe,"STRONG",{});var Rsa=s(iye);WKr=r(Rsa,"camembert"),Rsa.forEach(t),UKr=r(KHe," \u2014 "),Xte=n(KHe,"A",{href:!0});var Psa=s(Xte);HKr=r(Psa,"TFCamembertForTokenClassification"),Psa.forEach(t),JKr=r(KHe," (CamemBERT model)"),KHe.forEach(t),YKr=i(he),AA=n(he,"LI",{});var ZHe=s(AA);dye=n(ZHe,"STRONG",{});var Bsa=s(dye);KKr=r(Bsa,"convbert"),Bsa.forEach(t),ZKr=r(ZHe," \u2014 "),zte=n(ZHe,"A",{href:!0});var Isa=s(zte);eZr=r(Isa,"TFConvBertForTokenClassification"),Isa.forEach(t),oZr=r(ZHe," (ConvBERT model)"),ZHe.forEach(t),rZr=i(he),LA=n(he,"LI",{});var eJe=s(LA);cye=n(eJe,"STRONG",{});var Nsa=s(cye);tZr=r(Nsa,"deberta"),Nsa.forEach(t),aZr=r(eJe," \u2014 "),Qte=n(eJe,"A",{href:!0});var qsa=s(Qte);nZr=r(qsa,"TFDebertaForTokenClassification"),qsa.forEach(t),sZr=r(eJe," (DeBERTa model)"),eJe.forEach(t),lZr=i(he),yA=n(he,"LI",{});var oJe=s(yA);mye=n(oJe,"STRONG",{});var jsa=s(mye);iZr=r(jsa,"deberta-v2"),jsa.forEach(t),dZr=r(oJe," \u2014 "),Wte=n(oJe,"A",{href:!0});var Dsa=s(Wte);cZr=r(Dsa,"TFDebertaV2ForTokenClassification"),Dsa.forEach(t),mZr=r(oJe," (DeBERTa-v2 model)"),oJe.forEach(t),fZr=i(he),xA=n(he,"LI",{});var rJe=s(xA);fye=n(rJe,"STRONG",{});var Gsa=s(fye);gZr=r(Gsa,"distilbert"),Gsa.forEach(t),hZr=r(rJe," \u2014 "),Ute=n(rJe,"A",{href:!0});var Osa=s(Ute);uZr=r(Osa,"TFDistilBertForTokenClassification"),Osa.forEach(t),pZr=r(rJe," (DistilBERT model)"),rJe.forEach(t),_Zr=i(he),$A=n(he,"LI",{});var tJe=s($A);gye=n(tJe,"STRONG",{});var Vsa=s(gye);bZr=r(Vsa,"electra"),Vsa.forEach(t),vZr=r(tJe," \u2014 "),Hte=n(tJe,"A",{href:!0});var Xsa=s(Hte);FZr=r(Xsa,"TFElectraForTokenClassification"),Xsa.forEach(t),TZr=r(tJe," (ELECTRA model)"),tJe.forEach(t),MZr=i(he),kA=n(he,"LI",{});var aJe=s(kA);hye=n(aJe,"STRONG",{});var zsa=s(hye);EZr=r(zsa,"flaubert"),zsa.forEach(t),CZr=r(aJe," \u2014 "),Jte=n(aJe,"A",{href:!0});var Qsa=s(Jte);wZr=r(Qsa,"TFFlaubertForTokenClassification"),Qsa.forEach(t),AZr=r(aJe," (FlauBERT model)"),aJe.forEach(t),LZr=i(he),SA=n(he,"LI",{});var nJe=s(SA);uye=n(nJe,"STRONG",{});var Wsa=s(uye);yZr=r(Wsa,"funnel"),Wsa.forEach(t),xZr=r(nJe," \u2014 "),Yte=n(nJe,"A",{href:!0});var Usa=s(Yte);$Zr=r(Usa,"TFFunnelForTokenClassification"),Usa.forEach(t),kZr=r(nJe," (Funnel Transformer model)"),nJe.forEach(t),SZr=i(he),RA=n(he,"LI",{});var sJe=s(RA);pye=n(sJe,"STRONG",{});var Hsa=s(pye);RZr=r(Hsa,"layoutlm"),Hsa.forEach(t),PZr=r(sJe," \u2014 "),Kte=n(sJe,"A",{href:!0});var Jsa=s(Kte);BZr=r(Jsa,"TFLayoutLMForTokenClassification"),Jsa.forEach(t),IZr=r(sJe," (LayoutLM model)"),sJe.forEach(t),NZr=i(he),PA=n(he,"LI",{});var lJe=s(PA);_ye=n(lJe,"STRONG",{});var Ysa=s(_ye);qZr=r(Ysa,"layoutlmv3"),Ysa.forEach(t),jZr=r(lJe," \u2014 "),Zte=n(lJe,"A",{href:!0});var Ksa=s(Zte);DZr=r(Ksa,"TFLayoutLMv3ForTokenClassification"),Ksa.forEach(t),GZr=r(lJe," (LayoutLMv3 model)"),lJe.forEach(t),OZr=i(he),BA=n(he,"LI",{});var iJe=s(BA);bye=n(iJe,"STRONG",{});var Zsa=s(bye);VZr=r(Zsa,"longformer"),Zsa.forEach(t),XZr=r(iJe," \u2014 "),eae=n(iJe,"A",{href:!0});var ela=s(eae);zZr=r(ela,"TFLongformerForTokenClassification"),ela.forEach(t),QZr=r(iJe," (Longformer model)"),iJe.forEach(t),WZr=i(he),IA=n(he,"LI",{});var dJe=s(IA);vye=n(dJe,"STRONG",{});var ola=s(vye);UZr=r(ola,"mobilebert"),ola.forEach(t),HZr=r(dJe," \u2014 "),oae=n(dJe,"A",{href:!0});var rla=s(oae);JZr=r(rla,"TFMobileBertForTokenClassification"),rla.forEach(t),YZr=r(dJe," (MobileBERT model)"),dJe.forEach(t),KZr=i(he),NA=n(he,"LI",{});var cJe=s(NA);Fye=n(cJe,"STRONG",{});var tla=s(Fye);ZZr=r(tla,"mpnet"),tla.forEach(t),eet=r(cJe," \u2014 "),rae=n(cJe,"A",{href:!0});var ala=s(rae);oet=r(ala,"TFMPNetForTokenClassification"),ala.forEach(t),ret=r(cJe," (MPNet model)"),cJe.forEach(t),tet=i(he),qA=n(he,"LI",{});var mJe=s(qA);Tye=n(mJe,"STRONG",{});var nla=s(Tye);aet=r(nla,"rembert"),nla.forEach(t),net=r(mJe," \u2014 "),tae=n(mJe,"A",{href:!0});var sla=s(tae);set=r(sla,"TFRemBertForTokenClassification"),sla.forEach(t),iet=r(mJe," (RemBERT model)"),mJe.forEach(t),det=i(he),jA=n(he,"LI",{});var fJe=s(jA);Mye=n(fJe,"STRONG",{});var lla=s(Mye);cet=r(lla,"roberta"),lla.forEach(t),met=r(fJe," \u2014 "),aae=n(fJe,"A",{href:!0});var ila=s(aae);fet=r(ila,"TFRobertaForTokenClassification"),ila.forEach(t),get=r(fJe," (RoBERTa model)"),fJe.forEach(t),het=i(he),DA=n(he,"LI",{});var gJe=s(DA);Eye=n(gJe,"STRONG",{});var dla=s(Eye);uet=r(dla,"roformer"),dla.forEach(t),pet=r(gJe," \u2014 "),nae=n(gJe,"A",{href:!0});var cla=s(nae);_et=r(cla,"TFRoFormerForTokenClassification"),cla.forEach(t),bet=r(gJe," (RoFormer model)"),gJe.forEach(t),vet=i(he),GA=n(he,"LI",{});var hJe=s(GA);Cye=n(hJe,"STRONG",{});var mla=s(Cye);Fet=r(mla,"xlm"),mla.forEach(t),Tet=r(hJe," \u2014 "),sae=n(hJe,"A",{href:!0});var fla=s(sae);Met=r(fla,"TFXLMForTokenClassification"),fla.forEach(t),Eet=r(hJe," (XLM model)"),hJe.forEach(t),Cet=i(he),OA=n(he,"LI",{});var uJe=s(OA);wye=n(uJe,"STRONG",{});var gla=s(wye);wet=r(gla,"xlm-roberta"),gla.forEach(t),Aet=r(uJe," \u2014 "),lae=n(uJe,"A",{href:!0});var hla=s(lae);Let=r(hla,"TFXLMRobertaForTokenClassification"),hla.forEach(t),yet=r(uJe," (XLM-RoBERTa model)"),uJe.forEach(t),xet=i(he),VA=n(he,"LI",{});var pJe=s(VA);Aye=n(pJe,"STRONG",{});var ula=s(Aye);$et=r(ula,"xlnet"),ula.forEach(t),ket=r(pJe," \u2014 "),iae=n(pJe,"A",{href:!0});var pla=s(iae);Set=r(pla,"TFXLNetForTokenClassification"),pla.forEach(t),Ret=r(pJe," (XLNet model)"),pJe.forEach(t),he.forEach(t),Pet=i(Ai),T(XA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),weo=i(m),ym=n(m,"H2",{class:!0});var Gro=s(ym);zA=n(Gro,"A",{id:!0,class:!0,href:!0});var _la=s(zA);Lye=n(_la,"SPAN",{});var bla=s(Lye);T(US.$$.fragment,bla),bla.forEach(t),_la.forEach(t),Bet=i(Gro),yye=n(Gro,"SPAN",{});var vla=s(yye);Iet=r(vla,"TFAutoModelForQuestionAnswering"),vla.forEach(t),Gro.forEach(t),Aeo=i(m),vr=n(m,"DIV",{class:!0});var Li=s(vr);T(HS.$$.fragment,Li),Net=i(Li),xm=n(Li,"P",{});var Kie=s(xm);qet=r(Kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dae=n(Kie,"A",{href:!0});var Fla=s(dae);jet=r(Fla,"from_pretrained()"),Fla.forEach(t),Det=r(Kie," class method or the "),cae=n(Kie,"A",{href:!0});var Tla=s(cae);Get=r(Tla,"from_config()"),Tla.forEach(t),Oet=r(Kie,` class
method.`),Kie.forEach(t),Vet=i(Li),JS=n(Li,"P",{});var Oro=s(JS);Xet=r(Oro,"This class cannot be instantiated directly using "),xye=n(Oro,"CODE",{});var Mla=s(xye);zet=r(Mla,"__init__()"),Mla.forEach(t),Qet=r(Oro," (throws an error)."),Oro.forEach(t),Wet=i(Li),ta=n(Li,"DIV",{class:!0});var l9=s(ta);T(YS.$$.fragment,l9),Uet=i(l9),$ye=n(l9,"P",{});var Ela=s($ye);Het=r(Ela,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ela.forEach(t),Jet=i(l9),$m=n(l9,"P",{});var Zie=s($m);Yet=r(Zie,`Note:
Loading a model from its configuration file does `),kye=n(Zie,"STRONG",{});var Cla=s(kye);Ket=r(Cla,"not"),Cla.forEach(t),Zet=r(Zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=n(Zie,"A",{href:!0});var wla=s(mae);eot=r(wla,"from_pretrained()"),wla.forEach(t),oot=r(Zie," to load the model weights."),Zie.forEach(t),rot=i(l9),T(QA.$$.fragment,l9),l9.forEach(t),tot=i(Li),Hr=n(Li,"DIV",{class:!0});var yi=s(Hr);T(KS.$$.fragment,yi),aot=i(yi),Sye=n(yi,"P",{});var Ala=s(Sye);not=r(Ala,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ala.forEach(t),sot=i(yi),qn=n(yi,"P",{});var i9=s(qn);lot=r(i9,"The model class to instantiate is selected based on the "),Rye=n(i9,"CODE",{});var Lla=s(Rye);iot=r(Lla,"model_type"),Lla.forEach(t),dot=r(i9,` property of the config object (either
passed as an argument or loaded from `),Pye=n(i9,"CODE",{});var yla=s(Pye);cot=r(yla,"pretrained_model_name_or_path"),yla.forEach(t),mot=r(i9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bye=n(i9,"CODE",{});var xla=s(Bye);fot=r(xla,"pretrained_model_name_or_path"),xla.forEach(t),got=r(i9,":"),i9.forEach(t),hot=i(yi),ce=n(yi,"UL",{});var ue=s(ce);WA=n(ue,"LI",{});var _Je=s(WA);Iye=n(_Je,"STRONG",{});var $la=s(Iye);uot=r($la,"albert"),$la.forEach(t),pot=r(_Je," \u2014 "),fae=n(_Je,"A",{href:!0});var kla=s(fae);_ot=r(kla,"TFAlbertForQuestionAnswering"),kla.forEach(t),bot=r(_Je," (ALBERT model)"),_Je.forEach(t),vot=i(ue),UA=n(ue,"LI",{});var bJe=s(UA);Nye=n(bJe,"STRONG",{});var Sla=s(Nye);Fot=r(Sla,"bert"),Sla.forEach(t),Tot=r(bJe," \u2014 "),gae=n(bJe,"A",{href:!0});var Rla=s(gae);Mot=r(Rla,"TFBertForQuestionAnswering"),Rla.forEach(t),Eot=r(bJe," (BERT model)"),bJe.forEach(t),Cot=i(ue),HA=n(ue,"LI",{});var vJe=s(HA);qye=n(vJe,"STRONG",{});var Pla=s(qye);wot=r(Pla,"camembert"),Pla.forEach(t),Aot=r(vJe," \u2014 "),hae=n(vJe,"A",{href:!0});var Bla=s(hae);Lot=r(Bla,"TFCamembertForQuestionAnswering"),Bla.forEach(t),yot=r(vJe," (CamemBERT model)"),vJe.forEach(t),xot=i(ue),JA=n(ue,"LI",{});var FJe=s(JA);jye=n(FJe,"STRONG",{});var Ila=s(jye);$ot=r(Ila,"convbert"),Ila.forEach(t),kot=r(FJe," \u2014 "),uae=n(FJe,"A",{href:!0});var Nla=s(uae);Sot=r(Nla,"TFConvBertForQuestionAnswering"),Nla.forEach(t),Rot=r(FJe," (ConvBERT model)"),FJe.forEach(t),Pot=i(ue),YA=n(ue,"LI",{});var TJe=s(YA);Dye=n(TJe,"STRONG",{});var qla=s(Dye);Bot=r(qla,"deberta"),qla.forEach(t),Iot=r(TJe," \u2014 "),pae=n(TJe,"A",{href:!0});var jla=s(pae);Not=r(jla,"TFDebertaForQuestionAnswering"),jla.forEach(t),qot=r(TJe," (DeBERTa model)"),TJe.forEach(t),jot=i(ue),KA=n(ue,"LI",{});var MJe=s(KA);Gye=n(MJe,"STRONG",{});var Dla=s(Gye);Dot=r(Dla,"deberta-v2"),Dla.forEach(t),Got=r(MJe," \u2014 "),_ae=n(MJe,"A",{href:!0});var Gla=s(_ae);Oot=r(Gla,"TFDebertaV2ForQuestionAnswering"),Gla.forEach(t),Vot=r(MJe," (DeBERTa-v2 model)"),MJe.forEach(t),Xot=i(ue),ZA=n(ue,"LI",{});var EJe=s(ZA);Oye=n(EJe,"STRONG",{});var Ola=s(Oye);zot=r(Ola,"distilbert"),Ola.forEach(t),Qot=r(EJe," \u2014 "),bae=n(EJe,"A",{href:!0});var Vla=s(bae);Wot=r(Vla,"TFDistilBertForQuestionAnswering"),Vla.forEach(t),Uot=r(EJe," (DistilBERT model)"),EJe.forEach(t),Hot=i(ue),e6=n(ue,"LI",{});var CJe=s(e6);Vye=n(CJe,"STRONG",{});var Xla=s(Vye);Jot=r(Xla,"electra"),Xla.forEach(t),Yot=r(CJe," \u2014 "),vae=n(CJe,"A",{href:!0});var zla=s(vae);Kot=r(zla,"TFElectraForQuestionAnswering"),zla.forEach(t),Zot=r(CJe," (ELECTRA model)"),CJe.forEach(t),ert=i(ue),o6=n(ue,"LI",{});var wJe=s(o6);Xye=n(wJe,"STRONG",{});var Qla=s(Xye);ort=r(Qla,"flaubert"),Qla.forEach(t),rrt=r(wJe," \u2014 "),Fae=n(wJe,"A",{href:!0});var Wla=s(Fae);trt=r(Wla,"TFFlaubertForQuestionAnsweringSimple"),Wla.forEach(t),art=r(wJe," (FlauBERT model)"),wJe.forEach(t),nrt=i(ue),r6=n(ue,"LI",{});var AJe=s(r6);zye=n(AJe,"STRONG",{});var Ula=s(zye);srt=r(Ula,"funnel"),Ula.forEach(t),lrt=r(AJe," \u2014 "),Tae=n(AJe,"A",{href:!0});var Hla=s(Tae);irt=r(Hla,"TFFunnelForQuestionAnswering"),Hla.forEach(t),drt=r(AJe," (Funnel Transformer model)"),AJe.forEach(t),crt=i(ue),t6=n(ue,"LI",{});var LJe=s(t6);Qye=n(LJe,"STRONG",{});var Jla=s(Qye);mrt=r(Jla,"gptj"),Jla.forEach(t),frt=r(LJe," \u2014 "),Mae=n(LJe,"A",{href:!0});var Yla=s(Mae);grt=r(Yla,"TFGPTJForQuestionAnswering"),Yla.forEach(t),hrt=r(LJe," (GPT-J model)"),LJe.forEach(t),urt=i(ue),a6=n(ue,"LI",{});var yJe=s(a6);Wye=n(yJe,"STRONG",{});var Kla=s(Wye);prt=r(Kla,"layoutlmv3"),Kla.forEach(t),_rt=r(yJe," \u2014 "),Eae=n(yJe,"A",{href:!0});var Zla=s(Eae);brt=r(Zla,"TFLayoutLMv3ForQuestionAnswering"),Zla.forEach(t),vrt=r(yJe," (LayoutLMv3 model)"),yJe.forEach(t),Frt=i(ue),n6=n(ue,"LI",{});var xJe=s(n6);Uye=n(xJe,"STRONG",{});var eia=s(Uye);Trt=r(eia,"longformer"),eia.forEach(t),Mrt=r(xJe," \u2014 "),Cae=n(xJe,"A",{href:!0});var oia=s(Cae);Ert=r(oia,"TFLongformerForQuestionAnswering"),oia.forEach(t),Crt=r(xJe," (Longformer model)"),xJe.forEach(t),wrt=i(ue),s6=n(ue,"LI",{});var $Je=s(s6);Hye=n($Je,"STRONG",{});var ria=s(Hye);Art=r(ria,"mobilebert"),ria.forEach(t),Lrt=r($Je," \u2014 "),wae=n($Je,"A",{href:!0});var tia=s(wae);yrt=r(tia,"TFMobileBertForQuestionAnswering"),tia.forEach(t),xrt=r($Je," (MobileBERT model)"),$Je.forEach(t),$rt=i(ue),l6=n(ue,"LI",{});var kJe=s(l6);Jye=n(kJe,"STRONG",{});var aia=s(Jye);krt=r(aia,"mpnet"),aia.forEach(t),Srt=r(kJe," \u2014 "),Aae=n(kJe,"A",{href:!0});var nia=s(Aae);Rrt=r(nia,"TFMPNetForQuestionAnswering"),nia.forEach(t),Prt=r(kJe," (MPNet model)"),kJe.forEach(t),Brt=i(ue),i6=n(ue,"LI",{});var SJe=s(i6);Yye=n(SJe,"STRONG",{});var sia=s(Yye);Irt=r(sia,"rembert"),sia.forEach(t),Nrt=r(SJe," \u2014 "),Lae=n(SJe,"A",{href:!0});var lia=s(Lae);qrt=r(lia,"TFRemBertForQuestionAnswering"),lia.forEach(t),jrt=r(SJe," (RemBERT model)"),SJe.forEach(t),Drt=i(ue),d6=n(ue,"LI",{});var RJe=s(d6);Kye=n(RJe,"STRONG",{});var iia=s(Kye);Grt=r(iia,"roberta"),iia.forEach(t),Ort=r(RJe," \u2014 "),yae=n(RJe,"A",{href:!0});var dia=s(yae);Vrt=r(dia,"TFRobertaForQuestionAnswering"),dia.forEach(t),Xrt=r(RJe," (RoBERTa model)"),RJe.forEach(t),zrt=i(ue),c6=n(ue,"LI",{});var PJe=s(c6);Zye=n(PJe,"STRONG",{});var cia=s(Zye);Qrt=r(cia,"roformer"),cia.forEach(t),Wrt=r(PJe," \u2014 "),xae=n(PJe,"A",{href:!0});var mia=s(xae);Urt=r(mia,"TFRoFormerForQuestionAnswering"),mia.forEach(t),Hrt=r(PJe," (RoFormer model)"),PJe.forEach(t),Jrt=i(ue),m6=n(ue,"LI",{});var BJe=s(m6);e8e=n(BJe,"STRONG",{});var fia=s(e8e);Yrt=r(fia,"xlm"),fia.forEach(t),Krt=r(BJe," \u2014 "),$ae=n(BJe,"A",{href:!0});var gia=s($ae);Zrt=r(gia,"TFXLMForQuestionAnsweringSimple"),gia.forEach(t),ett=r(BJe," (XLM model)"),BJe.forEach(t),ott=i(ue),f6=n(ue,"LI",{});var IJe=s(f6);o8e=n(IJe,"STRONG",{});var hia=s(o8e);rtt=r(hia,"xlm-roberta"),hia.forEach(t),ttt=r(IJe," \u2014 "),kae=n(IJe,"A",{href:!0});var uia=s(kae);att=r(uia,"TFXLMRobertaForQuestionAnswering"),uia.forEach(t),ntt=r(IJe," (XLM-RoBERTa model)"),IJe.forEach(t),stt=i(ue),g6=n(ue,"LI",{});var NJe=s(g6);r8e=n(NJe,"STRONG",{});var pia=s(r8e);ltt=r(pia,"xlnet"),pia.forEach(t),itt=r(NJe," \u2014 "),Sae=n(NJe,"A",{href:!0});var _ia=s(Sae);dtt=r(_ia,"TFXLNetForQuestionAnsweringSimple"),_ia.forEach(t),ctt=r(NJe," (XLNet model)"),NJe.forEach(t),ue.forEach(t),mtt=i(yi),T(h6.$$.fragment,yi),yi.forEach(t),Li.forEach(t),Leo=i(m),km=n(m,"H2",{class:!0});var Vro=s(km);u6=n(Vro,"A",{id:!0,class:!0,href:!0});var bia=s(u6);t8e=n(bia,"SPAN",{});var via=s(t8e);T(ZS.$$.fragment,via),via.forEach(t),bia.forEach(t),ftt=i(Vro),a8e=n(Vro,"SPAN",{});var Fia=s(a8e);gtt=r(Fia,"TFAutoModelForVision2Seq"),Fia.forEach(t),Vro.forEach(t),yeo=i(m),Fr=n(m,"DIV",{class:!0});var xi=s(Fr);T(eR.$$.fragment,xi),htt=i(xi),Sm=n(xi,"P",{});var ede=s(Sm);utt=r(ede,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Rae=n(ede,"A",{href:!0});var Tia=s(Rae);ptt=r(Tia,"from_pretrained()"),Tia.forEach(t),_tt=r(ede," class method or the "),Pae=n(ede,"A",{href:!0});var Mia=s(Pae);btt=r(Mia,"from_config()"),Mia.forEach(t),vtt=r(ede,` class
method.`),ede.forEach(t),Ftt=i(xi),oR=n(xi,"P",{});var Xro=s(oR);Ttt=r(Xro,"This class cannot be instantiated directly using "),n8e=n(Xro,"CODE",{});var Eia=s(n8e);Mtt=r(Eia,"__init__()"),Eia.forEach(t),Ett=r(Xro," (throws an error)."),Xro.forEach(t),Ctt=i(xi),aa=n(xi,"DIV",{class:!0});var d9=s(aa);T(rR.$$.fragment,d9),wtt=i(d9),s8e=n(d9,"P",{});var Cia=s(s8e);Att=r(Cia,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cia.forEach(t),Ltt=i(d9),Rm=n(d9,"P",{});var ode=s(Rm);ytt=r(ode,`Note:
Loading a model from its configuration file does `),l8e=n(ode,"STRONG",{});var wia=s(l8e);xtt=r(wia,"not"),wia.forEach(t),$tt=r(ode,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=n(ode,"A",{href:!0});var Aia=s(Bae);ktt=r(Aia,"from_pretrained()"),Aia.forEach(t),Stt=r(ode," to load the model weights."),ode.forEach(t),Rtt=i(d9),T(p6.$$.fragment,d9),d9.forEach(t),Ptt=i(xi),Jr=n(xi,"DIV",{class:!0});var $i=s(Jr);T(tR.$$.fragment,$i),Btt=i($i),i8e=n($i,"P",{});var Lia=s(i8e);Itt=r(Lia,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lia.forEach(t),Ntt=i($i),jn=n($i,"P",{});var c9=s(jn);qtt=r(c9,"The model class to instantiate is selected based on the "),d8e=n(c9,"CODE",{});var yia=s(d8e);jtt=r(yia,"model_type"),yia.forEach(t),Dtt=r(c9,` property of the config object (either
passed as an argument or loaded from `),c8e=n(c9,"CODE",{});var xia=s(c8e);Gtt=r(xia,"pretrained_model_name_or_path"),xia.forEach(t),Ott=r(c9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m8e=n(c9,"CODE",{});var $ia=s(m8e);Vtt=r($ia,"pretrained_model_name_or_path"),$ia.forEach(t),Xtt=r(c9,":"),c9.forEach(t),ztt=i($i),f8e=n($i,"UL",{});var kia=s(f8e);_6=n(kia,"LI",{});var qJe=s(_6);g8e=n(qJe,"STRONG",{});var Sia=s(g8e);Qtt=r(Sia,"vision-encoder-decoder"),Sia.forEach(t),Wtt=r(qJe," \u2014 "),Iae=n(qJe,"A",{href:!0});var Ria=s(Iae);Utt=r(Ria,"TFVisionEncoderDecoderModel"),Ria.forEach(t),Htt=r(qJe," (Vision Encoder decoder model)"),qJe.forEach(t),kia.forEach(t),Jtt=i($i),T(b6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),xeo=i(m),Pm=n(m,"H2",{class:!0});var zro=s(Pm);v6=n(zro,"A",{id:!0,class:!0,href:!0});var Pia=s(v6);h8e=n(Pia,"SPAN",{});var Bia=s(h8e);T(aR.$$.fragment,Bia),Bia.forEach(t),Pia.forEach(t),Ytt=i(zro),u8e=n(zro,"SPAN",{});var Iia=s(u8e);Ktt=r(Iia,"TFAutoModelForSpeechSeq2Seq"),Iia.forEach(t),zro.forEach(t),$eo=i(m),Tr=n(m,"DIV",{class:!0});var ki=s(Tr);T(nR.$$.fragment,ki),Ztt=i(ki),Bm=n(ki,"P",{});var rde=s(Bm);eat=r(rde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Nae=n(rde,"A",{href:!0});var Nia=s(Nae);oat=r(Nia,"from_pretrained()"),Nia.forEach(t),rat=r(rde," class method or the "),qae=n(rde,"A",{href:!0});var qia=s(qae);tat=r(qia,"from_config()"),qia.forEach(t),aat=r(rde,` class
method.`),rde.forEach(t),nat=i(ki),sR=n(ki,"P",{});var Qro=s(sR);sat=r(Qro,"This class cannot be instantiated directly using "),p8e=n(Qro,"CODE",{});var jia=s(p8e);lat=r(jia,"__init__()"),jia.forEach(t),iat=r(Qro," (throws an error)."),Qro.forEach(t),dat=i(ki),na=n(ki,"DIV",{class:!0});var m9=s(na);T(lR.$$.fragment,m9),cat=i(m9),_8e=n(m9,"P",{});var Dia=s(_8e);mat=r(Dia,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dia.forEach(t),fat=i(m9),Im=n(m9,"P",{});var tde=s(Im);gat=r(tde,`Note:
Loading a model from its configuration file does `),b8e=n(tde,"STRONG",{});var Gia=s(b8e);hat=r(Gia,"not"),Gia.forEach(t),uat=r(tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=n(tde,"A",{href:!0});var Oia=s(jae);pat=r(Oia,"from_pretrained()"),Oia.forEach(t),_at=r(tde," to load the model weights."),tde.forEach(t),bat=i(m9),T(F6.$$.fragment,m9),m9.forEach(t),vat=i(ki),Yr=n(ki,"DIV",{class:!0});var Si=s(Yr);T(iR.$$.fragment,Si),Fat=i(Si),v8e=n(Si,"P",{});var Via=s(v8e);Tat=r(Via,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Via.forEach(t),Mat=i(Si),Dn=n(Si,"P",{});var f9=s(Dn);Eat=r(f9,"The model class to instantiate is selected based on the "),F8e=n(f9,"CODE",{});var Xia=s(F8e);Cat=r(Xia,"model_type"),Xia.forEach(t),wat=r(f9,` property of the config object (either
passed as an argument or loaded from `),T8e=n(f9,"CODE",{});var zia=s(T8e);Aat=r(zia,"pretrained_model_name_or_path"),zia.forEach(t),Lat=r(f9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=n(f9,"CODE",{});var Qia=s(M8e);yat=r(Qia,"pretrained_model_name_or_path"),Qia.forEach(t),xat=r(f9,":"),f9.forEach(t),$at=i(Si),E8e=n(Si,"UL",{});var Wia=s(E8e);T6=n(Wia,"LI",{});var jJe=s(T6);C8e=n(jJe,"STRONG",{});var Uia=s(C8e);kat=r(Uia,"speech_to_text"),Uia.forEach(t),Sat=r(jJe," \u2014 "),Dae=n(jJe,"A",{href:!0});var Hia=s(Dae);Rat=r(Hia,"TFSpeech2TextForConditionalGeneration"),Hia.forEach(t),Pat=r(jJe," (Speech2Text model)"),jJe.forEach(t),Wia.forEach(t),Bat=i(Si),T(M6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),keo=i(m),Nm=n(m,"H2",{class:!0});var Wro=s(Nm);E6=n(Wro,"A",{id:!0,class:!0,href:!0});var Jia=s(E6);w8e=n(Jia,"SPAN",{});var Yia=s(w8e);T(dR.$$.fragment,Yia),Yia.forEach(t),Jia.forEach(t),Iat=i(Wro),A8e=n(Wro,"SPAN",{});var Kia=s(A8e);Nat=r(Kia,"FlaxAutoModel"),Kia.forEach(t),Wro.forEach(t),Seo=i(m),Mr=n(m,"DIV",{class:!0});var Ri=s(Mr);T(cR.$$.fragment,Ri),qat=i(Ri),qm=n(Ri,"P",{});var ade=s(qm);jat=r(ade,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gae=n(ade,"A",{href:!0});var Zia=s(Gae);Dat=r(Zia,"from_pretrained()"),Zia.forEach(t),Gat=r(ade," class method or the "),Oae=n(ade,"A",{href:!0});var eda=s(Oae);Oat=r(eda,"from_config()"),eda.forEach(t),Vat=r(ade,` class
method.`),ade.forEach(t),Xat=i(Ri),mR=n(Ri,"P",{});var Uro=s(mR);zat=r(Uro,"This class cannot be instantiated directly using "),L8e=n(Uro,"CODE",{});var oda=s(L8e);Qat=r(oda,"__init__()"),oda.forEach(t),Wat=r(Uro," (throws an error)."),Uro.forEach(t),Uat=i(Ri),sa=n(Ri,"DIV",{class:!0});var g9=s(sa);T(fR.$$.fragment,g9),Hat=i(g9),y8e=n(g9,"P",{});var rda=s(y8e);Jat=r(rda,"Instantiates one of the base model classes of the library from a configuration."),rda.forEach(t),Yat=i(g9),jm=n(g9,"P",{});var nde=s(jm);Kat=r(nde,`Note:
Loading a model from its configuration file does `),x8e=n(nde,"STRONG",{});var tda=s(x8e);Zat=r(tda,"not"),tda.forEach(t),ent=r(nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vae=n(nde,"A",{href:!0});var ada=s(Vae);ont=r(ada,"from_pretrained()"),ada.forEach(t),rnt=r(nde," to load the model weights."),nde.forEach(t),tnt=i(g9),T(C6.$$.fragment,g9),g9.forEach(t),ant=i(Ri),Kr=n(Ri,"DIV",{class:!0});var Pi=s(Kr);T(gR.$$.fragment,Pi),nnt=i(Pi),$8e=n(Pi,"P",{});var nda=s($8e);snt=r(nda,"Instantiate one of the base model classes of the library from a pretrained model."),nda.forEach(t),lnt=i(Pi),Gn=n(Pi,"P",{});var h9=s(Gn);int=r(h9,"The model class to instantiate is selected based on the "),k8e=n(h9,"CODE",{});var sda=s(k8e);dnt=r(sda,"model_type"),sda.forEach(t),cnt=r(h9,` property of the config object (either
passed as an argument or loaded from `),S8e=n(h9,"CODE",{});var lda=s(S8e);mnt=r(lda,"pretrained_model_name_or_path"),lda.forEach(t),fnt=r(h9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R8e=n(h9,"CODE",{});var ida=s(R8e);gnt=r(ida,"pretrained_model_name_or_path"),ida.forEach(t),hnt=r(h9,":"),h9.forEach(t),unt=i(Pi),te=n(Pi,"UL",{});var ne=s(te);w6=n(ne,"LI",{});var DJe=s(w6);P8e=n(DJe,"STRONG",{});var dda=s(P8e);pnt=r(dda,"albert"),dda.forEach(t),_nt=r(DJe," \u2014 "),Xae=n(DJe,"A",{href:!0});var cda=s(Xae);bnt=r(cda,"FlaxAlbertModel"),cda.forEach(t),vnt=r(DJe," (ALBERT model)"),DJe.forEach(t),Fnt=i(ne),A6=n(ne,"LI",{});var GJe=s(A6);B8e=n(GJe,"STRONG",{});var mda=s(B8e);Tnt=r(mda,"bart"),mda.forEach(t),Mnt=r(GJe," \u2014 "),zae=n(GJe,"A",{href:!0});var fda=s(zae);Ent=r(fda,"FlaxBartModel"),fda.forEach(t),Cnt=r(GJe," (BART model)"),GJe.forEach(t),wnt=i(ne),L6=n(ne,"LI",{});var OJe=s(L6);I8e=n(OJe,"STRONG",{});var gda=s(I8e);Ant=r(gda,"beit"),gda.forEach(t),Lnt=r(OJe," \u2014 "),Qae=n(OJe,"A",{href:!0});var hda=s(Qae);ynt=r(hda,"FlaxBeitModel"),hda.forEach(t),xnt=r(OJe," (BEiT model)"),OJe.forEach(t),$nt=i(ne),y6=n(ne,"LI",{});var VJe=s(y6);N8e=n(VJe,"STRONG",{});var uda=s(N8e);knt=r(uda,"bert"),uda.forEach(t),Snt=r(VJe," \u2014 "),Wae=n(VJe,"A",{href:!0});var pda=s(Wae);Rnt=r(pda,"FlaxBertModel"),pda.forEach(t),Pnt=r(VJe," (BERT model)"),VJe.forEach(t),Bnt=i(ne),x6=n(ne,"LI",{});var XJe=s(x6);q8e=n(XJe,"STRONG",{});var _da=s(q8e);Int=r(_da,"big_bird"),_da.forEach(t),Nnt=r(XJe," \u2014 "),Uae=n(XJe,"A",{href:!0});var bda=s(Uae);qnt=r(bda,"FlaxBigBirdModel"),bda.forEach(t),jnt=r(XJe," (BigBird model)"),XJe.forEach(t),Dnt=i(ne),$6=n(ne,"LI",{});var zJe=s($6);j8e=n(zJe,"STRONG",{});var vda=s(j8e);Gnt=r(vda,"blenderbot"),vda.forEach(t),Ont=r(zJe," \u2014 "),Hae=n(zJe,"A",{href:!0});var Fda=s(Hae);Vnt=r(Fda,"FlaxBlenderbotModel"),Fda.forEach(t),Xnt=r(zJe," (Blenderbot model)"),zJe.forEach(t),znt=i(ne),k6=n(ne,"LI",{});var QJe=s(k6);D8e=n(QJe,"STRONG",{});var Tda=s(D8e);Qnt=r(Tda,"blenderbot-small"),Tda.forEach(t),Wnt=r(QJe," \u2014 "),Jae=n(QJe,"A",{href:!0});var Mda=s(Jae);Unt=r(Mda,"FlaxBlenderbotSmallModel"),Mda.forEach(t),Hnt=r(QJe," (BlenderbotSmall model)"),QJe.forEach(t),Jnt=i(ne),S6=n(ne,"LI",{});var WJe=s(S6);G8e=n(WJe,"STRONG",{});var Eda=s(G8e);Ynt=r(Eda,"clip"),Eda.forEach(t),Knt=r(WJe," \u2014 "),Yae=n(WJe,"A",{href:!0});var Cda=s(Yae);Znt=r(Cda,"FlaxCLIPModel"),Cda.forEach(t),est=r(WJe," (CLIP model)"),WJe.forEach(t),ost=i(ne),R6=n(ne,"LI",{});var UJe=s(R6);O8e=n(UJe,"STRONG",{});var wda=s(O8e);rst=r(wda,"distilbert"),wda.forEach(t),tst=r(UJe," \u2014 "),Kae=n(UJe,"A",{href:!0});var Ada=s(Kae);ast=r(Ada,"FlaxDistilBertModel"),Ada.forEach(t),nst=r(UJe," (DistilBERT model)"),UJe.forEach(t),sst=i(ne),P6=n(ne,"LI",{});var HJe=s(P6);V8e=n(HJe,"STRONG",{});var Lda=s(V8e);lst=r(Lda,"electra"),Lda.forEach(t),ist=r(HJe," \u2014 "),Zae=n(HJe,"A",{href:!0});var yda=s(Zae);dst=r(yda,"FlaxElectraModel"),yda.forEach(t),cst=r(HJe," (ELECTRA model)"),HJe.forEach(t),mst=i(ne),B6=n(ne,"LI",{});var JJe=s(B6);X8e=n(JJe,"STRONG",{});var xda=s(X8e);fst=r(xda,"gpt2"),xda.forEach(t),gst=r(JJe," \u2014 "),ene=n(JJe,"A",{href:!0});var $da=s(ene);hst=r($da,"FlaxGPT2Model"),$da.forEach(t),ust=r(JJe," (OpenAI GPT-2 model)"),JJe.forEach(t),pst=i(ne),I6=n(ne,"LI",{});var YJe=s(I6);z8e=n(YJe,"STRONG",{});var kda=s(z8e);_st=r(kda,"gpt_neo"),kda.forEach(t),bst=r(YJe," \u2014 "),one=n(YJe,"A",{href:!0});var Sda=s(one);vst=r(Sda,"FlaxGPTNeoModel"),Sda.forEach(t),Fst=r(YJe," (GPT Neo model)"),YJe.forEach(t),Tst=i(ne),N6=n(ne,"LI",{});var KJe=s(N6);Q8e=n(KJe,"STRONG",{});var Rda=s(Q8e);Mst=r(Rda,"gptj"),Rda.forEach(t),Est=r(KJe," \u2014 "),rne=n(KJe,"A",{href:!0});var Pda=s(rne);Cst=r(Pda,"FlaxGPTJModel"),Pda.forEach(t),wst=r(KJe," (GPT-J model)"),KJe.forEach(t),Ast=i(ne),q6=n(ne,"LI",{});var ZJe=s(q6);W8e=n(ZJe,"STRONG",{});var Bda=s(W8e);Lst=r(Bda,"longt5"),Bda.forEach(t),yst=r(ZJe," \u2014 "),tne=n(ZJe,"A",{href:!0});var Ida=s(tne);xst=r(Ida,"FlaxLongT5Model"),Ida.forEach(t),$st=r(ZJe," (LongT5 model)"),ZJe.forEach(t),kst=i(ne),j6=n(ne,"LI",{});var eYe=s(j6);U8e=n(eYe,"STRONG",{});var Nda=s(U8e);Sst=r(Nda,"marian"),Nda.forEach(t),Rst=r(eYe," \u2014 "),ane=n(eYe,"A",{href:!0});var qda=s(ane);Pst=r(qda,"FlaxMarianModel"),qda.forEach(t),Bst=r(eYe," (Marian model)"),eYe.forEach(t),Ist=i(ne),D6=n(ne,"LI",{});var oYe=s(D6);H8e=n(oYe,"STRONG",{});var jda=s(H8e);Nst=r(jda,"mbart"),jda.forEach(t),qst=r(oYe," \u2014 "),nne=n(oYe,"A",{href:!0});var Dda=s(nne);jst=r(Dda,"FlaxMBartModel"),Dda.forEach(t),Dst=r(oYe," (mBART model)"),oYe.forEach(t),Gst=i(ne),G6=n(ne,"LI",{});var rYe=s(G6);J8e=n(rYe,"STRONG",{});var Gda=s(J8e);Ost=r(Gda,"mt5"),Gda.forEach(t),Vst=r(rYe," \u2014 "),sne=n(rYe,"A",{href:!0});var Oda=s(sne);Xst=r(Oda,"FlaxMT5Model"),Oda.forEach(t),zst=r(rYe," (MT5 model)"),rYe.forEach(t),Qst=i(ne),O6=n(ne,"LI",{});var tYe=s(O6);Y8e=n(tYe,"STRONG",{});var Vda=s(Y8e);Wst=r(Vda,"opt"),Vda.forEach(t),Ust=r(tYe," \u2014 "),lne=n(tYe,"A",{href:!0});var Xda=s(lne);Hst=r(Xda,"FlaxOPTModel"),Xda.forEach(t),Jst=r(tYe," (OPT model)"),tYe.forEach(t),Yst=i(ne),V6=n(ne,"LI",{});var aYe=s(V6);K8e=n(aYe,"STRONG",{});var zda=s(K8e);Kst=r(zda,"pegasus"),zda.forEach(t),Zst=r(aYe," \u2014 "),ine=n(aYe,"A",{href:!0});var Qda=s(ine);elt=r(Qda,"FlaxPegasusModel"),Qda.forEach(t),olt=r(aYe," (Pegasus model)"),aYe.forEach(t),rlt=i(ne),X6=n(ne,"LI",{});var nYe=s(X6);Z8e=n(nYe,"STRONG",{});var Wda=s(Z8e);tlt=r(Wda,"roberta"),Wda.forEach(t),alt=r(nYe," \u2014 "),dne=n(nYe,"A",{href:!0});var Uda=s(dne);nlt=r(Uda,"FlaxRobertaModel"),Uda.forEach(t),slt=r(nYe," (RoBERTa model)"),nYe.forEach(t),llt=i(ne),z6=n(ne,"LI",{});var sYe=s(z6);e9e=n(sYe,"STRONG",{});var Hda=s(e9e);ilt=r(Hda,"roformer"),Hda.forEach(t),dlt=r(sYe," \u2014 "),cne=n(sYe,"A",{href:!0});var Jda=s(cne);clt=r(Jda,"FlaxRoFormerModel"),Jda.forEach(t),mlt=r(sYe," (RoFormer model)"),sYe.forEach(t),flt=i(ne),Q6=n(ne,"LI",{});var lYe=s(Q6);o9e=n(lYe,"STRONG",{});var Yda=s(o9e);glt=r(Yda,"t5"),Yda.forEach(t),hlt=r(lYe," \u2014 "),mne=n(lYe,"A",{href:!0});var Kda=s(mne);ult=r(Kda,"FlaxT5Model"),Kda.forEach(t),plt=r(lYe," (T5 model)"),lYe.forEach(t),_lt=i(ne),W6=n(ne,"LI",{});var iYe=s(W6);r9e=n(iYe,"STRONG",{});var Zda=s(r9e);blt=r(Zda,"vision-text-dual-encoder"),Zda.forEach(t),vlt=r(iYe," \u2014 "),fne=n(iYe,"A",{href:!0});var eca=s(fne);Flt=r(eca,"FlaxVisionTextDualEncoderModel"),eca.forEach(t),Tlt=r(iYe," (VisionTextDualEncoder model)"),iYe.forEach(t),Mlt=i(ne),U6=n(ne,"LI",{});var dYe=s(U6);t9e=n(dYe,"STRONG",{});var oca=s(t9e);Elt=r(oca,"vit"),oca.forEach(t),Clt=r(dYe," \u2014 "),gne=n(dYe,"A",{href:!0});var rca=s(gne);wlt=r(rca,"FlaxViTModel"),rca.forEach(t),Alt=r(dYe," (ViT model)"),dYe.forEach(t),Llt=i(ne),H6=n(ne,"LI",{});var cYe=s(H6);a9e=n(cYe,"STRONG",{});var tca=s(a9e);ylt=r(tca,"wav2vec2"),tca.forEach(t),xlt=r(cYe," \u2014 "),hne=n(cYe,"A",{href:!0});var aca=s(hne);$lt=r(aca,"FlaxWav2Vec2Model"),aca.forEach(t),klt=r(cYe," (Wav2Vec2 model)"),cYe.forEach(t),Slt=i(ne),J6=n(ne,"LI",{});var mYe=s(J6);n9e=n(mYe,"STRONG",{});var nca=s(n9e);Rlt=r(nca,"xglm"),nca.forEach(t),Plt=r(mYe," \u2014 "),une=n(mYe,"A",{href:!0});var sca=s(une);Blt=r(sca,"FlaxXGLMModel"),sca.forEach(t),Ilt=r(mYe," (XGLM model)"),mYe.forEach(t),Nlt=i(ne),Y6=n(ne,"LI",{});var fYe=s(Y6);s9e=n(fYe,"STRONG",{});var lca=s(s9e);qlt=r(lca,"xlm-roberta"),lca.forEach(t),jlt=r(fYe," \u2014 "),pne=n(fYe,"A",{href:!0});var ica=s(pne);Dlt=r(ica,"FlaxXLMRobertaModel"),ica.forEach(t),Glt=r(fYe," (XLM-RoBERTa model)"),fYe.forEach(t),ne.forEach(t),Olt=i(Pi),T(K6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),Reo=i(m),Dm=n(m,"H2",{class:!0});var Hro=s(Dm);Z6=n(Hro,"A",{id:!0,class:!0,href:!0});var dca=s(Z6);l9e=n(dca,"SPAN",{});var cca=s(l9e);T(hR.$$.fragment,cca),cca.forEach(t),dca.forEach(t),Vlt=i(Hro),i9e=n(Hro,"SPAN",{});var mca=s(i9e);Xlt=r(mca,"FlaxAutoModelForCausalLM"),mca.forEach(t),Hro.forEach(t),Peo=i(m),Er=n(m,"DIV",{class:!0});var Bi=s(Er);T(uR.$$.fragment,Bi),zlt=i(Bi),Gm=n(Bi,"P",{});var sde=s(Gm);Qlt=r(sde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_ne=n(sde,"A",{href:!0});var fca=s(_ne);Wlt=r(fca,"from_pretrained()"),fca.forEach(t),Ult=r(sde," class method or the "),bne=n(sde,"A",{href:!0});var gca=s(bne);Hlt=r(gca,"from_config()"),gca.forEach(t),Jlt=r(sde,` class
method.`),sde.forEach(t),Ylt=i(Bi),pR=n(Bi,"P",{});var Jro=s(pR);Klt=r(Jro,"This class cannot be instantiated directly using "),d9e=n(Jro,"CODE",{});var hca=s(d9e);Zlt=r(hca,"__init__()"),hca.forEach(t),eit=r(Jro," (throws an error)."),Jro.forEach(t),oit=i(Bi),la=n(Bi,"DIV",{class:!0});var u9=s(la);T(_R.$$.fragment,u9),rit=i(u9),c9e=n(u9,"P",{});var uca=s(c9e);tit=r(uca,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uca.forEach(t),ait=i(u9),Om=n(u9,"P",{});var lde=s(Om);nit=r(lde,`Note:
Loading a model from its configuration file does `),m9e=n(lde,"STRONG",{});var pca=s(m9e);sit=r(pca,"not"),pca.forEach(t),lit=r(lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),vne=n(lde,"A",{href:!0});var _ca=s(vne);iit=r(_ca,"from_pretrained()"),_ca.forEach(t),dit=r(lde," to load the model weights."),lde.forEach(t),cit=i(u9),T(e7.$$.fragment,u9),u9.forEach(t),mit=i(Bi),Zr=n(Bi,"DIV",{class:!0});var Ii=s(Zr);T(bR.$$.fragment,Ii),fit=i(Ii),f9e=n(Ii,"P",{});var bca=s(f9e);git=r(bca,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bca.forEach(t),hit=i(Ii),On=n(Ii,"P",{});var p9=s(On);uit=r(p9,"The model class to instantiate is selected based on the "),g9e=n(p9,"CODE",{});var vca=s(g9e);pit=r(vca,"model_type"),vca.forEach(t),_it=r(p9,` property of the config object (either
passed as an argument or loaded from `),h9e=n(p9,"CODE",{});var Fca=s(h9e);bit=r(Fca,"pretrained_model_name_or_path"),Fca.forEach(t),vit=r(p9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=n(p9,"CODE",{});var Tca=s(u9e);Fit=r(Tca,"pretrained_model_name_or_path"),Tca.forEach(t),Tit=r(p9,":"),p9.forEach(t),Mit=i(Ii),xe=n(Ii,"UL",{});var qe=s(xe);o7=n(qe,"LI",{});var gYe=s(o7);p9e=n(gYe,"STRONG",{});var Mca=s(p9e);Eit=r(Mca,"bart"),Mca.forEach(t),Cit=r(gYe," \u2014 "),Fne=n(gYe,"A",{href:!0});var Eca=s(Fne);wit=r(Eca,"FlaxBartForCausalLM"),Eca.forEach(t),Ait=r(gYe," (BART model)"),gYe.forEach(t),Lit=i(qe),r7=n(qe,"LI",{});var hYe=s(r7);_9e=n(hYe,"STRONG",{});var Cca=s(_9e);yit=r(Cca,"bert"),Cca.forEach(t),xit=r(hYe," \u2014 "),Tne=n(hYe,"A",{href:!0});var wca=s(Tne);$it=r(wca,"FlaxBertForCausalLM"),wca.forEach(t),kit=r(hYe," (BERT model)"),hYe.forEach(t),Sit=i(qe),t7=n(qe,"LI",{});var uYe=s(t7);b9e=n(uYe,"STRONG",{});var Aca=s(b9e);Rit=r(Aca,"big_bird"),Aca.forEach(t),Pit=r(uYe," \u2014 "),Mne=n(uYe,"A",{href:!0});var Lca=s(Mne);Bit=r(Lca,"FlaxBigBirdForCausalLM"),Lca.forEach(t),Iit=r(uYe," (BigBird model)"),uYe.forEach(t),Nit=i(qe),a7=n(qe,"LI",{});var pYe=s(a7);v9e=n(pYe,"STRONG",{});var yca=s(v9e);qit=r(yca,"electra"),yca.forEach(t),jit=r(pYe," \u2014 "),Ene=n(pYe,"A",{href:!0});var xca=s(Ene);Dit=r(xca,"FlaxElectraForCausalLM"),xca.forEach(t),Git=r(pYe," (ELECTRA model)"),pYe.forEach(t),Oit=i(qe),n7=n(qe,"LI",{});var _Ye=s(n7);F9e=n(_Ye,"STRONG",{});var $ca=s(F9e);Vit=r($ca,"gpt2"),$ca.forEach(t),Xit=r(_Ye," \u2014 "),Cne=n(_Ye,"A",{href:!0});var kca=s(Cne);zit=r(kca,"FlaxGPT2LMHeadModel"),kca.forEach(t),Qit=r(_Ye," (OpenAI GPT-2 model)"),_Ye.forEach(t),Wit=i(qe),s7=n(qe,"LI",{});var bYe=s(s7);T9e=n(bYe,"STRONG",{});var Sca=s(T9e);Uit=r(Sca,"gpt_neo"),Sca.forEach(t),Hit=r(bYe," \u2014 "),wne=n(bYe,"A",{href:!0});var Rca=s(wne);Jit=r(Rca,"FlaxGPTNeoForCausalLM"),Rca.forEach(t),Yit=r(bYe," (GPT Neo model)"),bYe.forEach(t),Kit=i(qe),l7=n(qe,"LI",{});var vYe=s(l7);M9e=n(vYe,"STRONG",{});var Pca=s(M9e);Zit=r(Pca,"gptj"),Pca.forEach(t),edt=r(vYe," \u2014 "),Ane=n(vYe,"A",{href:!0});var Bca=s(Ane);odt=r(Bca,"FlaxGPTJForCausalLM"),Bca.forEach(t),rdt=r(vYe," (GPT-J model)"),vYe.forEach(t),tdt=i(qe),i7=n(qe,"LI",{});var FYe=s(i7);E9e=n(FYe,"STRONG",{});var Ica=s(E9e);adt=r(Ica,"opt"),Ica.forEach(t),ndt=r(FYe," \u2014 "),Lne=n(FYe,"A",{href:!0});var Nca=s(Lne);sdt=r(Nca,"FlaxOPTForCausalLM"),Nca.forEach(t),ldt=r(FYe," (OPT model)"),FYe.forEach(t),idt=i(qe),d7=n(qe,"LI",{});var TYe=s(d7);C9e=n(TYe,"STRONG",{});var qca=s(C9e);ddt=r(qca,"roberta"),qca.forEach(t),cdt=r(TYe," \u2014 "),yne=n(TYe,"A",{href:!0});var jca=s(yne);mdt=r(jca,"FlaxRobertaForCausalLM"),jca.forEach(t),fdt=r(TYe," (RoBERTa model)"),TYe.forEach(t),gdt=i(qe),c7=n(qe,"LI",{});var MYe=s(c7);w9e=n(MYe,"STRONG",{});var Dca=s(w9e);hdt=r(Dca,"xglm"),Dca.forEach(t),udt=r(MYe," \u2014 "),xne=n(MYe,"A",{href:!0});var Gca=s(xne);pdt=r(Gca,"FlaxXGLMForCausalLM"),Gca.forEach(t),_dt=r(MYe," (XGLM model)"),MYe.forEach(t),qe.forEach(t),bdt=i(Ii),T(m7.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),Beo=i(m),Vm=n(m,"H2",{class:!0});var Yro=s(Vm);f7=n(Yro,"A",{id:!0,class:!0,href:!0});var Oca=s(f7);A9e=n(Oca,"SPAN",{});var Vca=s(A9e);T(vR.$$.fragment,Vca),Vca.forEach(t),Oca.forEach(t),vdt=i(Yro),L9e=n(Yro,"SPAN",{});var Xca=s(L9e);Fdt=r(Xca,"FlaxAutoModelForPreTraining"),Xca.forEach(t),Yro.forEach(t),Ieo=i(m),Cr=n(m,"DIV",{class:!0});var Ni=s(Cr);T(FR.$$.fragment,Ni),Tdt=i(Ni),Xm=n(Ni,"P",{});var ide=s(Xm);Mdt=r(ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$ne=n(ide,"A",{href:!0});var zca=s($ne);Edt=r(zca,"from_pretrained()"),zca.forEach(t),Cdt=r(ide," class method or the "),kne=n(ide,"A",{href:!0});var Qca=s(kne);wdt=r(Qca,"from_config()"),Qca.forEach(t),Adt=r(ide,` class
method.`),ide.forEach(t),Ldt=i(Ni),TR=n(Ni,"P",{});var Kro=s(TR);ydt=r(Kro,"This class cannot be instantiated directly using "),y9e=n(Kro,"CODE",{});var Wca=s(y9e);xdt=r(Wca,"__init__()"),Wca.forEach(t),$dt=r(Kro," (throws an error)."),Kro.forEach(t),kdt=i(Ni),ia=n(Ni,"DIV",{class:!0});var _9=s(ia);T(MR.$$.fragment,_9),Sdt=i(_9),x9e=n(_9,"P",{});var Uca=s(x9e);Rdt=r(Uca,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uca.forEach(t),Pdt=i(_9),zm=n(_9,"P",{});var dde=s(zm);Bdt=r(dde,`Note:
Loading a model from its configuration file does `),$9e=n(dde,"STRONG",{});var Hca=s($9e);Idt=r(Hca,"not"),Hca.forEach(t),Ndt=r(dde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=n(dde,"A",{href:!0});var Jca=s(Sne);qdt=r(Jca,"from_pretrained()"),Jca.forEach(t),jdt=r(dde," to load the model weights."),dde.forEach(t),Ddt=i(_9),T(g7.$$.fragment,_9),_9.forEach(t),Gdt=i(Ni),et=n(Ni,"DIV",{class:!0});var qi=s(et);T(ER.$$.fragment,qi),Odt=i(qi),k9e=n(qi,"P",{});var Yca=s(k9e);Vdt=r(Yca,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yca.forEach(t),Xdt=i(qi),Vn=n(qi,"P",{});var b9=s(Vn);zdt=r(b9,"The model class to instantiate is selected based on the "),S9e=n(b9,"CODE",{});var Kca=s(S9e);Qdt=r(Kca,"model_type"),Kca.forEach(t),Wdt=r(b9,` property of the config object (either
passed as an argument or loaded from `),R9e=n(b9,"CODE",{});var Zca=s(R9e);Udt=r(Zca,"pretrained_model_name_or_path"),Zca.forEach(t),Hdt=r(b9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=n(b9,"CODE",{});var ema=s(P9e);Jdt=r(ema,"pretrained_model_name_or_path"),ema.forEach(t),Ydt=r(b9,":"),b9.forEach(t),Kdt=i(qi),Ee=n(qi,"UL",{});var we=s(Ee);h7=n(we,"LI",{});var EYe=s(h7);B9e=n(EYe,"STRONG",{});var oma=s(B9e);Zdt=r(oma,"albert"),oma.forEach(t),ect=r(EYe," \u2014 "),Rne=n(EYe,"A",{href:!0});var rma=s(Rne);oct=r(rma,"FlaxAlbertForPreTraining"),rma.forEach(t),rct=r(EYe," (ALBERT model)"),EYe.forEach(t),tct=i(we),u7=n(we,"LI",{});var CYe=s(u7);I9e=n(CYe,"STRONG",{});var tma=s(I9e);act=r(tma,"bart"),tma.forEach(t),nct=r(CYe," \u2014 "),Pne=n(CYe,"A",{href:!0});var ama=s(Pne);sct=r(ama,"FlaxBartForConditionalGeneration"),ama.forEach(t),lct=r(CYe," (BART model)"),CYe.forEach(t),ict=i(we),p7=n(we,"LI",{});var wYe=s(p7);N9e=n(wYe,"STRONG",{});var nma=s(N9e);dct=r(nma,"bert"),nma.forEach(t),cct=r(wYe," \u2014 "),Bne=n(wYe,"A",{href:!0});var sma=s(Bne);mct=r(sma,"FlaxBertForPreTraining"),sma.forEach(t),fct=r(wYe," (BERT model)"),wYe.forEach(t),gct=i(we),_7=n(we,"LI",{});var AYe=s(_7);q9e=n(AYe,"STRONG",{});var lma=s(q9e);hct=r(lma,"big_bird"),lma.forEach(t),uct=r(AYe," \u2014 "),Ine=n(AYe,"A",{href:!0});var ima=s(Ine);pct=r(ima,"FlaxBigBirdForPreTraining"),ima.forEach(t),_ct=r(AYe," (BigBird model)"),AYe.forEach(t),bct=i(we),b7=n(we,"LI",{});var LYe=s(b7);j9e=n(LYe,"STRONG",{});var dma=s(j9e);vct=r(dma,"electra"),dma.forEach(t),Fct=r(LYe," \u2014 "),Nne=n(LYe,"A",{href:!0});var cma=s(Nne);Tct=r(cma,"FlaxElectraForPreTraining"),cma.forEach(t),Mct=r(LYe," (ELECTRA model)"),LYe.forEach(t),Ect=i(we),v7=n(we,"LI",{});var yYe=s(v7);D9e=n(yYe,"STRONG",{});var mma=s(D9e);Cct=r(mma,"longt5"),mma.forEach(t),wct=r(yYe," \u2014 "),qne=n(yYe,"A",{href:!0});var fma=s(qne);Act=r(fma,"FlaxLongT5ForConditionalGeneration"),fma.forEach(t),Lct=r(yYe," (LongT5 model)"),yYe.forEach(t),yct=i(we),F7=n(we,"LI",{});var xYe=s(F7);G9e=n(xYe,"STRONG",{});var gma=s(G9e);xct=r(gma,"mbart"),gma.forEach(t),$ct=r(xYe," \u2014 "),jne=n(xYe,"A",{href:!0});var hma=s(jne);kct=r(hma,"FlaxMBartForConditionalGeneration"),hma.forEach(t),Sct=r(xYe," (mBART model)"),xYe.forEach(t),Rct=i(we),T7=n(we,"LI",{});var $Ye=s(T7);O9e=n($Ye,"STRONG",{});var uma=s(O9e);Pct=r(uma,"mt5"),uma.forEach(t),Bct=r($Ye," \u2014 "),Dne=n($Ye,"A",{href:!0});var pma=s(Dne);Ict=r(pma,"FlaxMT5ForConditionalGeneration"),pma.forEach(t),Nct=r($Ye," (MT5 model)"),$Ye.forEach(t),qct=i(we),M7=n(we,"LI",{});var kYe=s(M7);V9e=n(kYe,"STRONG",{});var _ma=s(V9e);jct=r(_ma,"roberta"),_ma.forEach(t),Dct=r(kYe," \u2014 "),Gne=n(kYe,"A",{href:!0});var bma=s(Gne);Gct=r(bma,"FlaxRobertaForMaskedLM"),bma.forEach(t),Oct=r(kYe," (RoBERTa model)"),kYe.forEach(t),Vct=i(we),E7=n(we,"LI",{});var SYe=s(E7);X9e=n(SYe,"STRONG",{});var vma=s(X9e);Xct=r(vma,"roformer"),vma.forEach(t),zct=r(SYe," \u2014 "),One=n(SYe,"A",{href:!0});var Fma=s(One);Qct=r(Fma,"FlaxRoFormerForMaskedLM"),Fma.forEach(t),Wct=r(SYe," (RoFormer model)"),SYe.forEach(t),Uct=i(we),C7=n(we,"LI",{});var RYe=s(C7);z9e=n(RYe,"STRONG",{});var Tma=s(z9e);Hct=r(Tma,"t5"),Tma.forEach(t),Jct=r(RYe," \u2014 "),Vne=n(RYe,"A",{href:!0});var Mma=s(Vne);Yct=r(Mma,"FlaxT5ForConditionalGeneration"),Mma.forEach(t),Kct=r(RYe," (T5 model)"),RYe.forEach(t),Zct=i(we),w7=n(we,"LI",{});var PYe=s(w7);Q9e=n(PYe,"STRONG",{});var Ema=s(Q9e);emt=r(Ema,"wav2vec2"),Ema.forEach(t),omt=r(PYe," \u2014 "),Xne=n(PYe,"A",{href:!0});var Cma=s(Xne);rmt=r(Cma,"FlaxWav2Vec2ForPreTraining"),Cma.forEach(t),tmt=r(PYe," (Wav2Vec2 model)"),PYe.forEach(t),amt=i(we),A7=n(we,"LI",{});var BYe=s(A7);W9e=n(BYe,"STRONG",{});var wma=s(W9e);nmt=r(wma,"xlm-roberta"),wma.forEach(t),smt=r(BYe," \u2014 "),zne=n(BYe,"A",{href:!0});var Ama=s(zne);lmt=r(Ama,"FlaxXLMRobertaForMaskedLM"),Ama.forEach(t),imt=r(BYe," (XLM-RoBERTa model)"),BYe.forEach(t),we.forEach(t),dmt=i(qi),T(L7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),Neo=i(m),Qm=n(m,"H2",{class:!0});var Zro=s(Qm);y7=n(Zro,"A",{id:!0,class:!0,href:!0});var Lma=s(y7);U9e=n(Lma,"SPAN",{});var yma=s(U9e);T(CR.$$.fragment,yma),yma.forEach(t),Lma.forEach(t),cmt=i(Zro),H9e=n(Zro,"SPAN",{});var xma=s(H9e);mmt=r(xma,"FlaxAutoModelForMaskedLM"),xma.forEach(t),Zro.forEach(t),qeo=i(m),wr=n(m,"DIV",{class:!0});var ji=s(wr);T(wR.$$.fragment,ji),fmt=i(ji),Wm=n(ji,"P",{});var cde=s(Wm);gmt=r(cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qne=n(cde,"A",{href:!0});var $ma=s(Qne);hmt=r($ma,"from_pretrained()"),$ma.forEach(t),umt=r(cde," class method or the "),Wne=n(cde,"A",{href:!0});var kma=s(Wne);pmt=r(kma,"from_config()"),kma.forEach(t),_mt=r(cde,` class
method.`),cde.forEach(t),bmt=i(ji),AR=n(ji,"P",{});var eto=s(AR);vmt=r(eto,"This class cannot be instantiated directly using "),J9e=n(eto,"CODE",{});var Sma=s(J9e);Fmt=r(Sma,"__init__()"),Sma.forEach(t),Tmt=r(eto," (throws an error)."),eto.forEach(t),Mmt=i(ji),da=n(ji,"DIV",{class:!0});var v9=s(da);T(LR.$$.fragment,v9),Emt=i(v9),Y9e=n(v9,"P",{});var Rma=s(Y9e);Cmt=r(Rma,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rma.forEach(t),wmt=i(v9),Um=n(v9,"P",{});var mde=s(Um);Amt=r(mde,`Note:
Loading a model from its configuration file does `),K9e=n(mde,"STRONG",{});var Pma=s(K9e);Lmt=r(Pma,"not"),Pma.forEach(t),ymt=r(mde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Une=n(mde,"A",{href:!0});var Bma=s(Une);xmt=r(Bma,"from_pretrained()"),Bma.forEach(t),$mt=r(mde," to load the model weights."),mde.forEach(t),kmt=i(v9),T(x7.$$.fragment,v9),v9.forEach(t),Smt=i(ji),ot=n(ji,"DIV",{class:!0});var Di=s(ot);T(yR.$$.fragment,Di),Rmt=i(Di),Z9e=n(Di,"P",{});var Ima=s(Z9e);Pmt=r(Ima,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ima.forEach(t),Bmt=i(Di),Xn=n(Di,"P",{});var F9=s(Xn);Imt=r(F9,"The model class to instantiate is selected based on the "),exe=n(F9,"CODE",{});var Nma=s(exe);Nmt=r(Nma,"model_type"),Nma.forEach(t),qmt=r(F9,` property of the config object (either
passed as an argument or loaded from `),oxe=n(F9,"CODE",{});var qma=s(oxe);jmt=r(qma,"pretrained_model_name_or_path"),qma.forEach(t),Dmt=r(F9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rxe=n(F9,"CODE",{});var jma=s(rxe);Gmt=r(jma,"pretrained_model_name_or_path"),jma.forEach(t),Omt=r(F9,":"),F9.forEach(t),Vmt=i(Di),$e=n(Di,"UL",{});var je=s($e);$7=n(je,"LI",{});var IYe=s($7);txe=n(IYe,"STRONG",{});var Dma=s(txe);Xmt=r(Dma,"albert"),Dma.forEach(t),zmt=r(IYe," \u2014 "),Hne=n(IYe,"A",{href:!0});var Gma=s(Hne);Qmt=r(Gma,"FlaxAlbertForMaskedLM"),Gma.forEach(t),Wmt=r(IYe," (ALBERT model)"),IYe.forEach(t),Umt=i(je),k7=n(je,"LI",{});var NYe=s(k7);axe=n(NYe,"STRONG",{});var Oma=s(axe);Hmt=r(Oma,"bart"),Oma.forEach(t),Jmt=r(NYe," \u2014 "),Jne=n(NYe,"A",{href:!0});var Vma=s(Jne);Ymt=r(Vma,"FlaxBartForConditionalGeneration"),Vma.forEach(t),Kmt=r(NYe," (BART model)"),NYe.forEach(t),Zmt=i(je),S7=n(je,"LI",{});var qYe=s(S7);nxe=n(qYe,"STRONG",{});var Xma=s(nxe);eft=r(Xma,"bert"),Xma.forEach(t),oft=r(qYe," \u2014 "),Yne=n(qYe,"A",{href:!0});var zma=s(Yne);rft=r(zma,"FlaxBertForMaskedLM"),zma.forEach(t),tft=r(qYe," (BERT model)"),qYe.forEach(t),aft=i(je),R7=n(je,"LI",{});var jYe=s(R7);sxe=n(jYe,"STRONG",{});var Qma=s(sxe);nft=r(Qma,"big_bird"),Qma.forEach(t),sft=r(jYe," \u2014 "),Kne=n(jYe,"A",{href:!0});var Wma=s(Kne);lft=r(Wma,"FlaxBigBirdForMaskedLM"),Wma.forEach(t),ift=r(jYe," (BigBird model)"),jYe.forEach(t),dft=i(je),P7=n(je,"LI",{});var DYe=s(P7);lxe=n(DYe,"STRONG",{});var Uma=s(lxe);cft=r(Uma,"distilbert"),Uma.forEach(t),mft=r(DYe," \u2014 "),Zne=n(DYe,"A",{href:!0});var Hma=s(Zne);fft=r(Hma,"FlaxDistilBertForMaskedLM"),Hma.forEach(t),gft=r(DYe," (DistilBERT model)"),DYe.forEach(t),hft=i(je),B7=n(je,"LI",{});var GYe=s(B7);ixe=n(GYe,"STRONG",{});var Jma=s(ixe);uft=r(Jma,"electra"),Jma.forEach(t),pft=r(GYe," \u2014 "),ese=n(GYe,"A",{href:!0});var Yma=s(ese);_ft=r(Yma,"FlaxElectraForMaskedLM"),Yma.forEach(t),bft=r(GYe," (ELECTRA model)"),GYe.forEach(t),vft=i(je),I7=n(je,"LI",{});var OYe=s(I7);dxe=n(OYe,"STRONG",{});var Kma=s(dxe);Fft=r(Kma,"mbart"),Kma.forEach(t),Tft=r(OYe," \u2014 "),ose=n(OYe,"A",{href:!0});var Zma=s(ose);Mft=r(Zma,"FlaxMBartForConditionalGeneration"),Zma.forEach(t),Eft=r(OYe," (mBART model)"),OYe.forEach(t),Cft=i(je),N7=n(je,"LI",{});var VYe=s(N7);cxe=n(VYe,"STRONG",{});var efa=s(cxe);wft=r(efa,"roberta"),efa.forEach(t),Aft=r(VYe," \u2014 "),rse=n(VYe,"A",{href:!0});var ofa=s(rse);Lft=r(ofa,"FlaxRobertaForMaskedLM"),ofa.forEach(t),yft=r(VYe," (RoBERTa model)"),VYe.forEach(t),xft=i(je),q7=n(je,"LI",{});var XYe=s(q7);mxe=n(XYe,"STRONG",{});var rfa=s(mxe);$ft=r(rfa,"roformer"),rfa.forEach(t),kft=r(XYe," \u2014 "),tse=n(XYe,"A",{href:!0});var tfa=s(tse);Sft=r(tfa,"FlaxRoFormerForMaskedLM"),tfa.forEach(t),Rft=r(XYe," (RoFormer model)"),XYe.forEach(t),Pft=i(je),j7=n(je,"LI",{});var zYe=s(j7);fxe=n(zYe,"STRONG",{});var afa=s(fxe);Bft=r(afa,"xlm-roberta"),afa.forEach(t),Ift=r(zYe," \u2014 "),ase=n(zYe,"A",{href:!0});var nfa=s(ase);Nft=r(nfa,"FlaxXLMRobertaForMaskedLM"),nfa.forEach(t),qft=r(zYe," (XLM-RoBERTa model)"),zYe.forEach(t),je.forEach(t),jft=i(Di),T(D7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),jeo=i(m),Hm=n(m,"H2",{class:!0});var oto=s(Hm);G7=n(oto,"A",{id:!0,class:!0,href:!0});var sfa=s(G7);gxe=n(sfa,"SPAN",{});var lfa=s(gxe);T(xR.$$.fragment,lfa),lfa.forEach(t),sfa.forEach(t),Dft=i(oto),hxe=n(oto,"SPAN",{});var ifa=s(hxe);Gft=r(ifa,"FlaxAutoModelForSeq2SeqLM"),ifa.forEach(t),oto.forEach(t),Deo=i(m),Ar=n(m,"DIV",{class:!0});var Gi=s(Ar);T($R.$$.fragment,Gi),Oft=i(Gi),Jm=n(Gi,"P",{});var fde=s(Jm);Vft=r(fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nse=n(fde,"A",{href:!0});var dfa=s(nse);Xft=r(dfa,"from_pretrained()"),dfa.forEach(t),zft=r(fde," class method or the "),sse=n(fde,"A",{href:!0});var cfa=s(sse);Qft=r(cfa,"from_config()"),cfa.forEach(t),Wft=r(fde,` class
method.`),fde.forEach(t),Uft=i(Gi),kR=n(Gi,"P",{});var rto=s(kR);Hft=r(rto,"This class cannot be instantiated directly using "),uxe=n(rto,"CODE",{});var mfa=s(uxe);Jft=r(mfa,"__init__()"),mfa.forEach(t),Yft=r(rto," (throws an error)."),rto.forEach(t),Kft=i(Gi),ca=n(Gi,"DIV",{class:!0});var T9=s(ca);T(SR.$$.fragment,T9),Zft=i(T9),pxe=n(T9,"P",{});var ffa=s(pxe);egt=r(ffa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ffa.forEach(t),ogt=i(T9),Ym=n(T9,"P",{});var gde=s(Ym);rgt=r(gde,`Note:
Loading a model from its configuration file does `),_xe=n(gde,"STRONG",{});var gfa=s(_xe);tgt=r(gfa,"not"),gfa.forEach(t),agt=r(gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),lse=n(gde,"A",{href:!0});var hfa=s(lse);ngt=r(hfa,"from_pretrained()"),hfa.forEach(t),sgt=r(gde," to load the model weights."),gde.forEach(t),lgt=i(T9),T(O7.$$.fragment,T9),T9.forEach(t),igt=i(Gi),rt=n(Gi,"DIV",{class:!0});var Oi=s(rt);T(RR.$$.fragment,Oi),dgt=i(Oi),bxe=n(Oi,"P",{});var ufa=s(bxe);cgt=r(ufa,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ufa.forEach(t),mgt=i(Oi),zn=n(Oi,"P",{});var M9=s(zn);fgt=r(M9,"The model class to instantiate is selected based on the "),vxe=n(M9,"CODE",{});var pfa=s(vxe);ggt=r(pfa,"model_type"),pfa.forEach(t),hgt=r(M9,` property of the config object (either
passed as an argument or loaded from `),Fxe=n(M9,"CODE",{});var _fa=s(Fxe);ugt=r(_fa,"pretrained_model_name_or_path"),_fa.forEach(t),pgt=r(M9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Txe=n(M9,"CODE",{});var bfa=s(Txe);_gt=r(bfa,"pretrained_model_name_or_path"),bfa.forEach(t),bgt=r(M9,":"),M9.forEach(t),vgt=i(Oi),ke=n(Oi,"UL",{});var De=s(ke);V7=n(De,"LI",{});var QYe=s(V7);Mxe=n(QYe,"STRONG",{});var vfa=s(Mxe);Fgt=r(vfa,"bart"),vfa.forEach(t),Tgt=r(QYe," \u2014 "),ise=n(QYe,"A",{href:!0});var Ffa=s(ise);Mgt=r(Ffa,"FlaxBartForConditionalGeneration"),Ffa.forEach(t),Egt=r(QYe," (BART model)"),QYe.forEach(t),Cgt=i(De),X7=n(De,"LI",{});var WYe=s(X7);Exe=n(WYe,"STRONG",{});var Tfa=s(Exe);wgt=r(Tfa,"blenderbot"),Tfa.forEach(t),Agt=r(WYe," \u2014 "),dse=n(WYe,"A",{href:!0});var Mfa=s(dse);Lgt=r(Mfa,"FlaxBlenderbotForConditionalGeneration"),Mfa.forEach(t),ygt=r(WYe," (Blenderbot model)"),WYe.forEach(t),xgt=i(De),z7=n(De,"LI",{});var UYe=s(z7);Cxe=n(UYe,"STRONG",{});var Efa=s(Cxe);$gt=r(Efa,"blenderbot-small"),Efa.forEach(t),kgt=r(UYe," \u2014 "),cse=n(UYe,"A",{href:!0});var Cfa=s(cse);Sgt=r(Cfa,"FlaxBlenderbotSmallForConditionalGeneration"),Cfa.forEach(t),Rgt=r(UYe," (BlenderbotSmall model)"),UYe.forEach(t),Pgt=i(De),Q7=n(De,"LI",{});var HYe=s(Q7);wxe=n(HYe,"STRONG",{});var wfa=s(wxe);Bgt=r(wfa,"encoder-decoder"),wfa.forEach(t),Igt=r(HYe," \u2014 "),mse=n(HYe,"A",{href:!0});var Afa=s(mse);Ngt=r(Afa,"FlaxEncoderDecoderModel"),Afa.forEach(t),qgt=r(HYe," (Encoder decoder model)"),HYe.forEach(t),jgt=i(De),W7=n(De,"LI",{});var JYe=s(W7);Axe=n(JYe,"STRONG",{});var Lfa=s(Axe);Dgt=r(Lfa,"longt5"),Lfa.forEach(t),Ggt=r(JYe," \u2014 "),fse=n(JYe,"A",{href:!0});var yfa=s(fse);Ogt=r(yfa,"FlaxLongT5ForConditionalGeneration"),yfa.forEach(t),Vgt=r(JYe," (LongT5 model)"),JYe.forEach(t),Xgt=i(De),U7=n(De,"LI",{});var YYe=s(U7);Lxe=n(YYe,"STRONG",{});var xfa=s(Lxe);zgt=r(xfa,"marian"),xfa.forEach(t),Qgt=r(YYe," \u2014 "),gse=n(YYe,"A",{href:!0});var $fa=s(gse);Wgt=r($fa,"FlaxMarianMTModel"),$fa.forEach(t),Ugt=r(YYe," (Marian model)"),YYe.forEach(t),Hgt=i(De),H7=n(De,"LI",{});var KYe=s(H7);yxe=n(KYe,"STRONG",{});var kfa=s(yxe);Jgt=r(kfa,"mbart"),kfa.forEach(t),Ygt=r(KYe," \u2014 "),hse=n(KYe,"A",{href:!0});var Sfa=s(hse);Kgt=r(Sfa,"FlaxMBartForConditionalGeneration"),Sfa.forEach(t),Zgt=r(KYe," (mBART model)"),KYe.forEach(t),eht=i(De),J7=n(De,"LI",{});var ZYe=s(J7);xxe=n(ZYe,"STRONG",{});var Rfa=s(xxe);oht=r(Rfa,"mt5"),Rfa.forEach(t),rht=r(ZYe," \u2014 "),use=n(ZYe,"A",{href:!0});var Pfa=s(use);tht=r(Pfa,"FlaxMT5ForConditionalGeneration"),Pfa.forEach(t),aht=r(ZYe," (MT5 model)"),ZYe.forEach(t),nht=i(De),Y7=n(De,"LI",{});var eKe=s(Y7);$xe=n(eKe,"STRONG",{});var Bfa=s($xe);sht=r(Bfa,"pegasus"),Bfa.forEach(t),lht=r(eKe," \u2014 "),pse=n(eKe,"A",{href:!0});var Ifa=s(pse);iht=r(Ifa,"FlaxPegasusForConditionalGeneration"),Ifa.forEach(t),dht=r(eKe," (Pegasus model)"),eKe.forEach(t),cht=i(De),K7=n(De,"LI",{});var oKe=s(K7);kxe=n(oKe,"STRONG",{});var Nfa=s(kxe);mht=r(Nfa,"t5"),Nfa.forEach(t),fht=r(oKe," \u2014 "),_se=n(oKe,"A",{href:!0});var qfa=s(_se);ght=r(qfa,"FlaxT5ForConditionalGeneration"),qfa.forEach(t),hht=r(oKe," (T5 model)"),oKe.forEach(t),De.forEach(t),uht=i(Oi),T(Z7.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),Geo=i(m),Km=n(m,"H2",{class:!0});var tto=s(Km);eL=n(tto,"A",{id:!0,class:!0,href:!0});var jfa=s(eL);Sxe=n(jfa,"SPAN",{});var Dfa=s(Sxe);T(PR.$$.fragment,Dfa),Dfa.forEach(t),jfa.forEach(t),pht=i(tto),Rxe=n(tto,"SPAN",{});var Gfa=s(Rxe);_ht=r(Gfa,"FlaxAutoModelForSequenceClassification"),Gfa.forEach(t),tto.forEach(t),Oeo=i(m),Lr=n(m,"DIV",{class:!0});var Vi=s(Lr);T(BR.$$.fragment,Vi),bht=i(Vi),Zm=n(Vi,"P",{});var hde=s(Zm);vht=r(hde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bse=n(hde,"A",{href:!0});var Ofa=s(bse);Fht=r(Ofa,"from_pretrained()"),Ofa.forEach(t),Tht=r(hde," class method or the "),vse=n(hde,"A",{href:!0});var Vfa=s(vse);Mht=r(Vfa,"from_config()"),Vfa.forEach(t),Eht=r(hde,` class
method.`),hde.forEach(t),Cht=i(Vi),IR=n(Vi,"P",{});var ato=s(IR);wht=r(ato,"This class cannot be instantiated directly using "),Pxe=n(ato,"CODE",{});var Xfa=s(Pxe);Aht=r(Xfa,"__init__()"),Xfa.forEach(t),Lht=r(ato," (throws an error)."),ato.forEach(t),yht=i(Vi),ma=n(Vi,"DIV",{class:!0});var E9=s(ma);T(NR.$$.fragment,E9),xht=i(E9),Bxe=n(E9,"P",{});var zfa=s(Bxe);$ht=r(zfa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zfa.forEach(t),kht=i(E9),ef=n(E9,"P",{});var ude=s(ef);Sht=r(ude,`Note:
Loading a model from its configuration file does `),Ixe=n(ude,"STRONG",{});var Qfa=s(Ixe);Rht=r(Qfa,"not"),Qfa.forEach(t),Pht=r(ude,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fse=n(ude,"A",{href:!0});var Wfa=s(Fse);Bht=r(Wfa,"from_pretrained()"),Wfa.forEach(t),Iht=r(ude," to load the model weights."),ude.forEach(t),Nht=i(E9),T(oL.$$.fragment,E9),E9.forEach(t),qht=i(Vi),tt=n(Vi,"DIV",{class:!0});var Xi=s(tt);T(qR.$$.fragment,Xi),jht=i(Xi),Nxe=n(Xi,"P",{});var Ufa=s(Nxe);Dht=r(Ufa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ufa.forEach(t),Ght=i(Xi),Qn=n(Xi,"P",{});var C9=s(Qn);Oht=r(C9,"The model class to instantiate is selected based on the "),qxe=n(C9,"CODE",{});var Hfa=s(qxe);Vht=r(Hfa,"model_type"),Hfa.forEach(t),Xht=r(C9,` property of the config object (either
passed as an argument or loaded from `),jxe=n(C9,"CODE",{});var Jfa=s(jxe);zht=r(Jfa,"pretrained_model_name_or_path"),Jfa.forEach(t),Qht=r(C9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dxe=n(C9,"CODE",{});var Yfa=s(Dxe);Wht=r(Yfa,"pretrained_model_name_or_path"),Yfa.forEach(t),Uht=r(C9,":"),C9.forEach(t),Hht=i(Xi),Se=n(Xi,"UL",{});var Ge=s(Se);rL=n(Ge,"LI",{});var rKe=s(rL);Gxe=n(rKe,"STRONG",{});var Kfa=s(Gxe);Jht=r(Kfa,"albert"),Kfa.forEach(t),Yht=r(rKe," \u2014 "),Tse=n(rKe,"A",{href:!0});var Zfa=s(Tse);Kht=r(Zfa,"FlaxAlbertForSequenceClassification"),Zfa.forEach(t),Zht=r(rKe," (ALBERT model)"),rKe.forEach(t),eut=i(Ge),tL=n(Ge,"LI",{});var tKe=s(tL);Oxe=n(tKe,"STRONG",{});var ega=s(Oxe);out=r(ega,"bart"),ega.forEach(t),rut=r(tKe," \u2014 "),Mse=n(tKe,"A",{href:!0});var oga=s(Mse);tut=r(oga,"FlaxBartForSequenceClassification"),oga.forEach(t),aut=r(tKe," (BART model)"),tKe.forEach(t),nut=i(Ge),aL=n(Ge,"LI",{});var aKe=s(aL);Vxe=n(aKe,"STRONG",{});var rga=s(Vxe);sut=r(rga,"bert"),rga.forEach(t),lut=r(aKe," \u2014 "),Ese=n(aKe,"A",{href:!0});var tga=s(Ese);iut=r(tga,"FlaxBertForSequenceClassification"),tga.forEach(t),dut=r(aKe," (BERT model)"),aKe.forEach(t),cut=i(Ge),nL=n(Ge,"LI",{});var nKe=s(nL);Xxe=n(nKe,"STRONG",{});var aga=s(Xxe);mut=r(aga,"big_bird"),aga.forEach(t),fut=r(nKe," \u2014 "),Cse=n(nKe,"A",{href:!0});var nga=s(Cse);gut=r(nga,"FlaxBigBirdForSequenceClassification"),nga.forEach(t),hut=r(nKe," (BigBird model)"),nKe.forEach(t),uut=i(Ge),sL=n(Ge,"LI",{});var sKe=s(sL);zxe=n(sKe,"STRONG",{});var sga=s(zxe);put=r(sga,"distilbert"),sga.forEach(t),_ut=r(sKe," \u2014 "),wse=n(sKe,"A",{href:!0});var lga=s(wse);but=r(lga,"FlaxDistilBertForSequenceClassification"),lga.forEach(t),vut=r(sKe," (DistilBERT model)"),sKe.forEach(t),Fut=i(Ge),lL=n(Ge,"LI",{});var lKe=s(lL);Qxe=n(lKe,"STRONG",{});var iga=s(Qxe);Tut=r(iga,"electra"),iga.forEach(t),Mut=r(lKe," \u2014 "),Ase=n(lKe,"A",{href:!0});var dga=s(Ase);Eut=r(dga,"FlaxElectraForSequenceClassification"),dga.forEach(t),Cut=r(lKe," (ELECTRA model)"),lKe.forEach(t),wut=i(Ge),iL=n(Ge,"LI",{});var iKe=s(iL);Wxe=n(iKe,"STRONG",{});var cga=s(Wxe);Aut=r(cga,"mbart"),cga.forEach(t),Lut=r(iKe," \u2014 "),Lse=n(iKe,"A",{href:!0});var mga=s(Lse);yut=r(mga,"FlaxMBartForSequenceClassification"),mga.forEach(t),xut=r(iKe," (mBART model)"),iKe.forEach(t),$ut=i(Ge),dL=n(Ge,"LI",{});var dKe=s(dL);Uxe=n(dKe,"STRONG",{});var fga=s(Uxe);kut=r(fga,"roberta"),fga.forEach(t),Sut=r(dKe," \u2014 "),yse=n(dKe,"A",{href:!0});var gga=s(yse);Rut=r(gga,"FlaxRobertaForSequenceClassification"),gga.forEach(t),Put=r(dKe," (RoBERTa model)"),dKe.forEach(t),But=i(Ge),cL=n(Ge,"LI",{});var cKe=s(cL);Hxe=n(cKe,"STRONG",{});var hga=s(Hxe);Iut=r(hga,"roformer"),hga.forEach(t),Nut=r(cKe," \u2014 "),xse=n(cKe,"A",{href:!0});var uga=s(xse);qut=r(uga,"FlaxRoFormerForSequenceClassification"),uga.forEach(t),jut=r(cKe," (RoFormer model)"),cKe.forEach(t),Dut=i(Ge),mL=n(Ge,"LI",{});var mKe=s(mL);Jxe=n(mKe,"STRONG",{});var pga=s(Jxe);Gut=r(pga,"xlm-roberta"),pga.forEach(t),Out=r(mKe," \u2014 "),$se=n(mKe,"A",{href:!0});var _ga=s($se);Vut=r(_ga,"FlaxXLMRobertaForSequenceClassification"),_ga.forEach(t),Xut=r(mKe," (XLM-RoBERTa model)"),mKe.forEach(t),Ge.forEach(t),zut=i(Xi),T(fL.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),Veo=i(m),of=n(m,"H2",{class:!0});var nto=s(of);gL=n(nto,"A",{id:!0,class:!0,href:!0});var bga=s(gL);Yxe=n(bga,"SPAN",{});var vga=s(Yxe);T(jR.$$.fragment,vga),vga.forEach(t),bga.forEach(t),Qut=i(nto),Kxe=n(nto,"SPAN",{});var Fga=s(Kxe);Wut=r(Fga,"FlaxAutoModelForQuestionAnswering"),Fga.forEach(t),nto.forEach(t),Xeo=i(m),yr=n(m,"DIV",{class:!0});var zi=s(yr);T(DR.$$.fragment,zi),Uut=i(zi),rf=n(zi,"P",{});var pde=s(rf);Hut=r(pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kse=n(pde,"A",{href:!0});var Tga=s(kse);Jut=r(Tga,"from_pretrained()"),Tga.forEach(t),Yut=r(pde," class method or the "),Sse=n(pde,"A",{href:!0});var Mga=s(Sse);Kut=r(Mga,"from_config()"),Mga.forEach(t),Zut=r(pde,` class
method.`),pde.forEach(t),ept=i(zi),GR=n(zi,"P",{});var sto=s(GR);opt=r(sto,"This class cannot be instantiated directly using "),Zxe=n(sto,"CODE",{});var Ega=s(Zxe);rpt=r(Ega,"__init__()"),Ega.forEach(t),tpt=r(sto," (throws an error)."),sto.forEach(t),apt=i(zi),fa=n(zi,"DIV",{class:!0});var w9=s(fa);T(OR.$$.fragment,w9),npt=i(w9),e$e=n(w9,"P",{});var Cga=s(e$e);spt=r(Cga,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cga.forEach(t),lpt=i(w9),tf=n(w9,"P",{});var _de=s(tf);ipt=r(_de,`Note:
Loading a model from its configuration file does `),o$e=n(_de,"STRONG",{});var wga=s(o$e);dpt=r(wga,"not"),wga.forEach(t),cpt=r(_de,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rse=n(_de,"A",{href:!0});var Aga=s(Rse);mpt=r(Aga,"from_pretrained()"),Aga.forEach(t),fpt=r(_de," to load the model weights."),_de.forEach(t),gpt=i(w9),T(hL.$$.fragment,w9),w9.forEach(t),hpt=i(zi),at=n(zi,"DIV",{class:!0});var Qi=s(at);T(VR.$$.fragment,Qi),upt=i(Qi),r$e=n(Qi,"P",{});var Lga=s(r$e);ppt=r(Lga,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lga.forEach(t),_pt=i(Qi),Wn=n(Qi,"P",{});var A9=s(Wn);bpt=r(A9,"The model class to instantiate is selected based on the "),t$e=n(A9,"CODE",{});var yga=s(t$e);vpt=r(yga,"model_type"),yga.forEach(t),Fpt=r(A9,` property of the config object (either
passed as an argument or loaded from `),a$e=n(A9,"CODE",{});var xga=s(a$e);Tpt=r(xga,"pretrained_model_name_or_path"),xga.forEach(t),Mpt=r(A9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n$e=n(A9,"CODE",{});var $ga=s(n$e);Ept=r($ga,"pretrained_model_name_or_path"),$ga.forEach(t),Cpt=r(A9,":"),A9.forEach(t),wpt=i(Qi),Re=n(Qi,"UL",{});var Oe=s(Re);uL=n(Oe,"LI",{});var fKe=s(uL);s$e=n(fKe,"STRONG",{});var kga=s(s$e);Apt=r(kga,"albert"),kga.forEach(t),Lpt=r(fKe," \u2014 "),Pse=n(fKe,"A",{href:!0});var Sga=s(Pse);ypt=r(Sga,"FlaxAlbertForQuestionAnswering"),Sga.forEach(t),xpt=r(fKe," (ALBERT model)"),fKe.forEach(t),$pt=i(Oe),pL=n(Oe,"LI",{});var gKe=s(pL);l$e=n(gKe,"STRONG",{});var Rga=s(l$e);kpt=r(Rga,"bart"),Rga.forEach(t),Spt=r(gKe," \u2014 "),Bse=n(gKe,"A",{href:!0});var Pga=s(Bse);Rpt=r(Pga,"FlaxBartForQuestionAnswering"),Pga.forEach(t),Ppt=r(gKe," (BART model)"),gKe.forEach(t),Bpt=i(Oe),_L=n(Oe,"LI",{});var hKe=s(_L);i$e=n(hKe,"STRONG",{});var Bga=s(i$e);Ipt=r(Bga,"bert"),Bga.forEach(t),Npt=r(hKe," \u2014 "),Ise=n(hKe,"A",{href:!0});var Iga=s(Ise);qpt=r(Iga,"FlaxBertForQuestionAnswering"),Iga.forEach(t),jpt=r(hKe," (BERT model)"),hKe.forEach(t),Dpt=i(Oe),bL=n(Oe,"LI",{});var uKe=s(bL);d$e=n(uKe,"STRONG",{});var Nga=s(d$e);Gpt=r(Nga,"big_bird"),Nga.forEach(t),Opt=r(uKe," \u2014 "),Nse=n(uKe,"A",{href:!0});var qga=s(Nse);Vpt=r(qga,"FlaxBigBirdForQuestionAnswering"),qga.forEach(t),Xpt=r(uKe," (BigBird model)"),uKe.forEach(t),zpt=i(Oe),vL=n(Oe,"LI",{});var pKe=s(vL);c$e=n(pKe,"STRONG",{});var jga=s(c$e);Qpt=r(jga,"distilbert"),jga.forEach(t),Wpt=r(pKe," \u2014 "),qse=n(pKe,"A",{href:!0});var Dga=s(qse);Upt=r(Dga,"FlaxDistilBertForQuestionAnswering"),Dga.forEach(t),Hpt=r(pKe," (DistilBERT model)"),pKe.forEach(t),Jpt=i(Oe),FL=n(Oe,"LI",{});var _Ke=s(FL);m$e=n(_Ke,"STRONG",{});var Gga=s(m$e);Ypt=r(Gga,"electra"),Gga.forEach(t),Kpt=r(_Ke," \u2014 "),jse=n(_Ke,"A",{href:!0});var Oga=s(jse);Zpt=r(Oga,"FlaxElectraForQuestionAnswering"),Oga.forEach(t),e_t=r(_Ke," (ELECTRA model)"),_Ke.forEach(t),o_t=i(Oe),TL=n(Oe,"LI",{});var bKe=s(TL);f$e=n(bKe,"STRONG",{});var Vga=s(f$e);r_t=r(Vga,"mbart"),Vga.forEach(t),t_t=r(bKe," \u2014 "),Dse=n(bKe,"A",{href:!0});var Xga=s(Dse);a_t=r(Xga,"FlaxMBartForQuestionAnswering"),Xga.forEach(t),n_t=r(bKe," (mBART model)"),bKe.forEach(t),s_t=i(Oe),ML=n(Oe,"LI",{});var vKe=s(ML);g$e=n(vKe,"STRONG",{});var zga=s(g$e);l_t=r(zga,"roberta"),zga.forEach(t),i_t=r(vKe," \u2014 "),Gse=n(vKe,"A",{href:!0});var Qga=s(Gse);d_t=r(Qga,"FlaxRobertaForQuestionAnswering"),Qga.forEach(t),c_t=r(vKe," (RoBERTa model)"),vKe.forEach(t),m_t=i(Oe),EL=n(Oe,"LI",{});var FKe=s(EL);h$e=n(FKe,"STRONG",{});var Wga=s(h$e);f_t=r(Wga,"roformer"),Wga.forEach(t),g_t=r(FKe," \u2014 "),Ose=n(FKe,"A",{href:!0});var Uga=s(Ose);h_t=r(Uga,"FlaxRoFormerForQuestionAnswering"),Uga.forEach(t),u_t=r(FKe," (RoFormer model)"),FKe.forEach(t),p_t=i(Oe),CL=n(Oe,"LI",{});var TKe=s(CL);u$e=n(TKe,"STRONG",{});var Hga=s(u$e);__t=r(Hga,"xlm-roberta"),Hga.forEach(t),b_t=r(TKe," \u2014 "),Vse=n(TKe,"A",{href:!0});var Jga=s(Vse);v_t=r(Jga,"FlaxXLMRobertaForQuestionAnswering"),Jga.forEach(t),F_t=r(TKe," (XLM-RoBERTa model)"),TKe.forEach(t),Oe.forEach(t),T_t=i(Qi),T(wL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),zeo=i(m),af=n(m,"H2",{class:!0});var lto=s(af);AL=n(lto,"A",{id:!0,class:!0,href:!0});var Yga=s(AL);p$e=n(Yga,"SPAN",{});var Kga=s(p$e);T(XR.$$.fragment,Kga),Kga.forEach(t),Yga.forEach(t),M_t=i(lto),_$e=n(lto,"SPAN",{});var Zga=s(_$e);E_t=r(Zga,"FlaxAutoModelForTokenClassification"),Zga.forEach(t),lto.forEach(t),Qeo=i(m),xr=n(m,"DIV",{class:!0});var Wi=s(xr);T(zR.$$.fragment,Wi),C_t=i(Wi),nf=n(Wi,"P",{});var bde=s(nf);w_t=r(bde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xse=n(bde,"A",{href:!0});var eha=s(Xse);A_t=r(eha,"from_pretrained()"),eha.forEach(t),L_t=r(bde," class method or the "),zse=n(bde,"A",{href:!0});var oha=s(zse);y_t=r(oha,"from_config()"),oha.forEach(t),x_t=r(bde,` class
method.`),bde.forEach(t),$_t=i(Wi),QR=n(Wi,"P",{});var ito=s(QR);k_t=r(ito,"This class cannot be instantiated directly using "),b$e=n(ito,"CODE",{});var rha=s(b$e);S_t=r(rha,"__init__()"),rha.forEach(t),R_t=r(ito," (throws an error)."),ito.forEach(t),P_t=i(Wi),ga=n(Wi,"DIV",{class:!0});var L9=s(ga);T(WR.$$.fragment,L9),B_t=i(L9),v$e=n(L9,"P",{});var tha=s(v$e);I_t=r(tha,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tha.forEach(t),N_t=i(L9),sf=n(L9,"P",{});var vde=s(sf);q_t=r(vde,`Note:
Loading a model from its configuration file does `),F$e=n(vde,"STRONG",{});var aha=s(F$e);j_t=r(aha,"not"),aha.forEach(t),D_t=r(vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qse=n(vde,"A",{href:!0});var nha=s(Qse);G_t=r(nha,"from_pretrained()"),nha.forEach(t),O_t=r(vde," to load the model weights."),vde.forEach(t),V_t=i(L9),T(LL.$$.fragment,L9),L9.forEach(t),X_t=i(Wi),nt=n(Wi,"DIV",{class:!0});var Ui=s(nt);T(UR.$$.fragment,Ui),z_t=i(Ui),T$e=n(Ui,"P",{});var sha=s(T$e);Q_t=r(sha,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sha.forEach(t),W_t=i(Ui),Un=n(Ui,"P",{});var y9=s(Un);U_t=r(y9,"The model class to instantiate is selected based on the "),M$e=n(y9,"CODE",{});var lha=s(M$e);H_t=r(lha,"model_type"),lha.forEach(t),J_t=r(y9,` property of the config object (either
passed as an argument or loaded from `),E$e=n(y9,"CODE",{});var iha=s(E$e);Y_t=r(iha,"pretrained_model_name_or_path"),iha.forEach(t),K_t=r(y9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C$e=n(y9,"CODE",{});var dha=s(C$e);Z_t=r(dha,"pretrained_model_name_or_path"),dha.forEach(t),ebt=r(y9,":"),y9.forEach(t),obt=i(Ui),Xe=n(Ui,"UL",{});var Ao=s(Xe);yL=n(Ao,"LI",{});var MKe=s(yL);w$e=n(MKe,"STRONG",{});var cha=s(w$e);rbt=r(cha,"albert"),cha.forEach(t),tbt=r(MKe," \u2014 "),Wse=n(MKe,"A",{href:!0});var mha=s(Wse);abt=r(mha,"FlaxAlbertForTokenClassification"),mha.forEach(t),nbt=r(MKe," (ALBERT model)"),MKe.forEach(t),sbt=i(Ao),xL=n(Ao,"LI",{});var EKe=s(xL);A$e=n(EKe,"STRONG",{});var fha=s(A$e);lbt=r(fha,"bert"),fha.forEach(t),ibt=r(EKe," \u2014 "),Use=n(EKe,"A",{href:!0});var gha=s(Use);dbt=r(gha,"FlaxBertForTokenClassification"),gha.forEach(t),cbt=r(EKe," (BERT model)"),EKe.forEach(t),mbt=i(Ao),$L=n(Ao,"LI",{});var CKe=s($L);L$e=n(CKe,"STRONG",{});var hha=s(L$e);fbt=r(hha,"big_bird"),hha.forEach(t),gbt=r(CKe," \u2014 "),Hse=n(CKe,"A",{href:!0});var uha=s(Hse);hbt=r(uha,"FlaxBigBirdForTokenClassification"),uha.forEach(t),ubt=r(CKe," (BigBird model)"),CKe.forEach(t),pbt=i(Ao),kL=n(Ao,"LI",{});var wKe=s(kL);y$e=n(wKe,"STRONG",{});var pha=s(y$e);_bt=r(pha,"distilbert"),pha.forEach(t),bbt=r(wKe," \u2014 "),Jse=n(wKe,"A",{href:!0});var _ha=s(Jse);vbt=r(_ha,"FlaxDistilBertForTokenClassification"),_ha.forEach(t),Fbt=r(wKe," (DistilBERT model)"),wKe.forEach(t),Tbt=i(Ao),SL=n(Ao,"LI",{});var AKe=s(SL);x$e=n(AKe,"STRONG",{});var bha=s(x$e);Mbt=r(bha,"electra"),bha.forEach(t),Ebt=r(AKe," \u2014 "),Yse=n(AKe,"A",{href:!0});var vha=s(Yse);Cbt=r(vha,"FlaxElectraForTokenClassification"),vha.forEach(t),wbt=r(AKe," (ELECTRA model)"),AKe.forEach(t),Abt=i(Ao),RL=n(Ao,"LI",{});var LKe=s(RL);$$e=n(LKe,"STRONG",{});var Fha=s($$e);Lbt=r(Fha,"roberta"),Fha.forEach(t),ybt=r(LKe," \u2014 "),Kse=n(LKe,"A",{href:!0});var Tha=s(Kse);xbt=r(Tha,"FlaxRobertaForTokenClassification"),Tha.forEach(t),$bt=r(LKe," (RoBERTa model)"),LKe.forEach(t),kbt=i(Ao),PL=n(Ao,"LI",{});var yKe=s(PL);k$e=n(yKe,"STRONG",{});var Mha=s(k$e);Sbt=r(Mha,"roformer"),Mha.forEach(t),Rbt=r(yKe," \u2014 "),Zse=n(yKe,"A",{href:!0});var Eha=s(Zse);Pbt=r(Eha,"FlaxRoFormerForTokenClassification"),Eha.forEach(t),Bbt=r(yKe," (RoFormer model)"),yKe.forEach(t),Ibt=i(Ao),BL=n(Ao,"LI",{});var xKe=s(BL);S$e=n(xKe,"STRONG",{});var Cha=s(S$e);Nbt=r(Cha,"xlm-roberta"),Cha.forEach(t),qbt=r(xKe," \u2014 "),ele=n(xKe,"A",{href:!0});var wha=s(ele);jbt=r(wha,"FlaxXLMRobertaForTokenClassification"),wha.forEach(t),Dbt=r(xKe," (XLM-RoBERTa model)"),xKe.forEach(t),Ao.forEach(t),Gbt=i(Ui),T(IL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),Weo=i(m),lf=n(m,"H2",{class:!0});var dto=s(lf);NL=n(dto,"A",{id:!0,class:!0,href:!0});var Aha=s(NL);R$e=n(Aha,"SPAN",{});var Lha=s(R$e);T(HR.$$.fragment,Lha),Lha.forEach(t),Aha.forEach(t),Obt=i(dto),P$e=n(dto,"SPAN",{});var yha=s(P$e);Vbt=r(yha,"FlaxAutoModelForMultipleChoice"),yha.forEach(t),dto.forEach(t),Ueo=i(m),$r=n(m,"DIV",{class:!0});var Hi=s($r);T(JR.$$.fragment,Hi),Xbt=i(Hi),df=n(Hi,"P",{});var Fde=s(df);zbt=r(Fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ole=n(Fde,"A",{href:!0});var xha=s(ole);Qbt=r(xha,"from_pretrained()"),xha.forEach(t),Wbt=r(Fde," class method or the "),rle=n(Fde,"A",{href:!0});var $ha=s(rle);Ubt=r($ha,"from_config()"),$ha.forEach(t),Hbt=r(Fde,` class
method.`),Fde.forEach(t),Jbt=i(Hi),YR=n(Hi,"P",{});var cto=s(YR);Ybt=r(cto,"This class cannot be instantiated directly using "),B$e=n(cto,"CODE",{});var kha=s(B$e);Kbt=r(kha,"__init__()"),kha.forEach(t),Zbt=r(cto," (throws an error)."),cto.forEach(t),e2t=i(Hi),ha=n(Hi,"DIV",{class:!0});var x9=s(ha);T(KR.$$.fragment,x9),o2t=i(x9),I$e=n(x9,"P",{});var Sha=s(I$e);r2t=r(Sha,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sha.forEach(t),t2t=i(x9),cf=n(x9,"P",{});var Tde=s(cf);a2t=r(Tde,`Note:
Loading a model from its configuration file does `),N$e=n(Tde,"STRONG",{});var Rha=s(N$e);n2t=r(Rha,"not"),Rha.forEach(t),s2t=r(Tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),tle=n(Tde,"A",{href:!0});var Pha=s(tle);l2t=r(Pha,"from_pretrained()"),Pha.forEach(t),i2t=r(Tde," to load the model weights."),Tde.forEach(t),d2t=i(x9),T(qL.$$.fragment,x9),x9.forEach(t),c2t=i(Hi),st=n(Hi,"DIV",{class:!0});var Ji=s(st);T(ZR.$$.fragment,Ji),m2t=i(Ji),q$e=n(Ji,"P",{});var Bha=s(q$e);f2t=r(Bha,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bha.forEach(t),g2t=i(Ji),Hn=n(Ji,"P",{});var $9=s(Hn);h2t=r($9,"The model class to instantiate is selected based on the "),j$e=n($9,"CODE",{});var Iha=s(j$e);u2t=r(Iha,"model_type"),Iha.forEach(t),p2t=r($9,` property of the config object (either
passed as an argument or loaded from `),D$e=n($9,"CODE",{});var Nha=s(D$e);_2t=r(Nha,"pretrained_model_name_or_path"),Nha.forEach(t),b2t=r($9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G$e=n($9,"CODE",{});var qha=s(G$e);v2t=r(qha,"pretrained_model_name_or_path"),qha.forEach(t),F2t=r($9,":"),$9.forEach(t),T2t=i(Ji),ze=n(Ji,"UL",{});var Lo=s(ze);jL=n(Lo,"LI",{});var $Ke=s(jL);O$e=n($Ke,"STRONG",{});var jha=s(O$e);M2t=r(jha,"albert"),jha.forEach(t),E2t=r($Ke," \u2014 "),ale=n($Ke,"A",{href:!0});var Dha=s(ale);C2t=r(Dha,"FlaxAlbertForMultipleChoice"),Dha.forEach(t),w2t=r($Ke," (ALBERT model)"),$Ke.forEach(t),A2t=i(Lo),DL=n(Lo,"LI",{});var kKe=s(DL);V$e=n(kKe,"STRONG",{});var Gha=s(V$e);L2t=r(Gha,"bert"),Gha.forEach(t),y2t=r(kKe," \u2014 "),nle=n(kKe,"A",{href:!0});var Oha=s(nle);x2t=r(Oha,"FlaxBertForMultipleChoice"),Oha.forEach(t),$2t=r(kKe," (BERT model)"),kKe.forEach(t),k2t=i(Lo),GL=n(Lo,"LI",{});var SKe=s(GL);X$e=n(SKe,"STRONG",{});var Vha=s(X$e);S2t=r(Vha,"big_bird"),Vha.forEach(t),R2t=r(SKe," \u2014 "),sle=n(SKe,"A",{href:!0});var Xha=s(sle);P2t=r(Xha,"FlaxBigBirdForMultipleChoice"),Xha.forEach(t),B2t=r(SKe," (BigBird model)"),SKe.forEach(t),I2t=i(Lo),OL=n(Lo,"LI",{});var RKe=s(OL);z$e=n(RKe,"STRONG",{});var zha=s(z$e);N2t=r(zha,"distilbert"),zha.forEach(t),q2t=r(RKe," \u2014 "),lle=n(RKe,"A",{href:!0});var Qha=s(lle);j2t=r(Qha,"FlaxDistilBertForMultipleChoice"),Qha.forEach(t),D2t=r(RKe," (DistilBERT model)"),RKe.forEach(t),G2t=i(Lo),VL=n(Lo,"LI",{});var PKe=s(VL);Q$e=n(PKe,"STRONG",{});var Wha=s(Q$e);O2t=r(Wha,"electra"),Wha.forEach(t),V2t=r(PKe," \u2014 "),ile=n(PKe,"A",{href:!0});var Uha=s(ile);X2t=r(Uha,"FlaxElectraForMultipleChoice"),Uha.forEach(t),z2t=r(PKe," (ELECTRA model)"),PKe.forEach(t),Q2t=i(Lo),XL=n(Lo,"LI",{});var BKe=s(XL);W$e=n(BKe,"STRONG",{});var Hha=s(W$e);W2t=r(Hha,"roberta"),Hha.forEach(t),U2t=r(BKe," \u2014 "),dle=n(BKe,"A",{href:!0});var Jha=s(dle);H2t=r(Jha,"FlaxRobertaForMultipleChoice"),Jha.forEach(t),J2t=r(BKe," (RoBERTa model)"),BKe.forEach(t),Y2t=i(Lo),zL=n(Lo,"LI",{});var IKe=s(zL);U$e=n(IKe,"STRONG",{});var Yha=s(U$e);K2t=r(Yha,"roformer"),Yha.forEach(t),Z2t=r(IKe," \u2014 "),cle=n(IKe,"A",{href:!0});var Kha=s(cle);e1t=r(Kha,"FlaxRoFormerForMultipleChoice"),Kha.forEach(t),o1t=r(IKe," (RoFormer model)"),IKe.forEach(t),r1t=i(Lo),QL=n(Lo,"LI",{});var NKe=s(QL);H$e=n(NKe,"STRONG",{});var Zha=s(H$e);t1t=r(Zha,"xlm-roberta"),Zha.forEach(t),a1t=r(NKe," \u2014 "),mle=n(NKe,"A",{href:!0});var eua=s(mle);n1t=r(eua,"FlaxXLMRobertaForMultipleChoice"),eua.forEach(t),s1t=r(NKe," (XLM-RoBERTa model)"),NKe.forEach(t),Lo.forEach(t),l1t=i(Ji),T(WL.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),Heo=i(m),mf=n(m,"H2",{class:!0});var mto=s(mf);UL=n(mto,"A",{id:!0,class:!0,href:!0});var oua=s(UL);J$e=n(oua,"SPAN",{});var rua=s(J$e);T(eP.$$.fragment,rua),rua.forEach(t),oua.forEach(t),i1t=i(mto),Y$e=n(mto,"SPAN",{});var tua=s(Y$e);d1t=r(tua,"FlaxAutoModelForNextSentencePrediction"),tua.forEach(t),mto.forEach(t),Jeo=i(m),kr=n(m,"DIV",{class:!0});var Yi=s(kr);T(oP.$$.fragment,Yi),c1t=i(Yi),ff=n(Yi,"P",{});var Mde=s(ff);m1t=r(Mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fle=n(Mde,"A",{href:!0});var aua=s(fle);f1t=r(aua,"from_pretrained()"),aua.forEach(t),g1t=r(Mde," class method or the "),gle=n(Mde,"A",{href:!0});var nua=s(gle);h1t=r(nua,"from_config()"),nua.forEach(t),u1t=r(Mde,` class
method.`),Mde.forEach(t),p1t=i(Yi),rP=n(Yi,"P",{});var fto=s(rP);_1t=r(fto,"This class cannot be instantiated directly using "),K$e=n(fto,"CODE",{});var sua=s(K$e);b1t=r(sua,"__init__()"),sua.forEach(t),v1t=r(fto," (throws an error)."),fto.forEach(t),F1t=i(Yi),ua=n(Yi,"DIV",{class:!0});var k9=s(ua);T(tP.$$.fragment,k9),T1t=i(k9),Z$e=n(k9,"P",{});var lua=s(Z$e);M1t=r(lua,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lua.forEach(t),E1t=i(k9),gf=n(k9,"P",{});var Ede=s(gf);C1t=r(Ede,`Note:
Loading a model from its configuration file does `),eke=n(Ede,"STRONG",{});var iua=s(eke);w1t=r(iua,"not"),iua.forEach(t),A1t=r(Ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),hle=n(Ede,"A",{href:!0});var dua=s(hle);L1t=r(dua,"from_pretrained()"),dua.forEach(t),y1t=r(Ede," to load the model weights."),Ede.forEach(t),x1t=i(k9),T(HL.$$.fragment,k9),k9.forEach(t),$1t=i(Yi),lt=n(Yi,"DIV",{class:!0});var Ki=s(lt);T(aP.$$.fragment,Ki),k1t=i(Ki),oke=n(Ki,"P",{});var cua=s(oke);S1t=r(cua,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cua.forEach(t),R1t=i(Ki),Jn=n(Ki,"P",{});var S9=s(Jn);P1t=r(S9,"The model class to instantiate is selected based on the "),rke=n(S9,"CODE",{});var mua=s(rke);B1t=r(mua,"model_type"),mua.forEach(t),I1t=r(S9,` property of the config object (either
passed as an argument or loaded from `),tke=n(S9,"CODE",{});var fua=s(tke);N1t=r(fua,"pretrained_model_name_or_path"),fua.forEach(t),q1t=r(S9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ake=n(S9,"CODE",{});var gua=s(ake);j1t=r(gua,"pretrained_model_name_or_path"),gua.forEach(t),D1t=r(S9,":"),S9.forEach(t),G1t=i(Ki),nke=n(Ki,"UL",{});var hua=s(nke);JL=n(hua,"LI",{});var qKe=s(JL);ske=n(qKe,"STRONG",{});var uua=s(ske);O1t=r(uua,"bert"),uua.forEach(t),V1t=r(qKe," \u2014 "),ule=n(qKe,"A",{href:!0});var pua=s(ule);X1t=r(pua,"FlaxBertForNextSentencePrediction"),pua.forEach(t),z1t=r(qKe," (BERT model)"),qKe.forEach(t),hua.forEach(t),Q1t=i(Ki),T(YL.$$.fragment,Ki),Ki.forEach(t),Yi.forEach(t),Yeo=i(m),hf=n(m,"H2",{class:!0});var gto=s(hf);KL=n(gto,"A",{id:!0,class:!0,href:!0});var _ua=s(KL);lke=n(_ua,"SPAN",{});var bua=s(lke);T(nP.$$.fragment,bua),bua.forEach(t),_ua.forEach(t),W1t=i(gto),ike=n(gto,"SPAN",{});var vua=s(ike);U1t=r(vua,"FlaxAutoModelForImageClassification"),vua.forEach(t),gto.forEach(t),Keo=i(m),Sr=n(m,"DIV",{class:!0});var Zi=s(Sr);T(sP.$$.fragment,Zi),H1t=i(Zi),uf=n(Zi,"P",{});var Cde=s(uf);J1t=r(Cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ple=n(Cde,"A",{href:!0});var Fua=s(ple);Y1t=r(Fua,"from_pretrained()"),Fua.forEach(t),K1t=r(Cde," class method or the "),_le=n(Cde,"A",{href:!0});var Tua=s(_le);Z1t=r(Tua,"from_config()"),Tua.forEach(t),evt=r(Cde,` class
method.`),Cde.forEach(t),ovt=i(Zi),lP=n(Zi,"P",{});var hto=s(lP);rvt=r(hto,"This class cannot be instantiated directly using "),dke=n(hto,"CODE",{});var Mua=s(dke);tvt=r(Mua,"__init__()"),Mua.forEach(t),avt=r(hto," (throws an error)."),hto.forEach(t),nvt=i(Zi),pa=n(Zi,"DIV",{class:!0});var R9=s(pa);T(iP.$$.fragment,R9),svt=i(R9),cke=n(R9,"P",{});var Eua=s(cke);lvt=r(Eua,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Eua.forEach(t),ivt=i(R9),pf=n(R9,"P",{});var wde=s(pf);dvt=r(wde,`Note:
Loading a model from its configuration file does `),mke=n(wde,"STRONG",{});var Cua=s(mke);cvt=r(Cua,"not"),Cua.forEach(t),mvt=r(wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=n(wde,"A",{href:!0});var wua=s(ble);fvt=r(wua,"from_pretrained()"),wua.forEach(t),gvt=r(wde," to load the model weights."),wde.forEach(t),hvt=i(R9),T(ZL.$$.fragment,R9),R9.forEach(t),uvt=i(Zi),it=n(Zi,"DIV",{class:!0});var ed=s(it);T(dP.$$.fragment,ed),pvt=i(ed),fke=n(ed,"P",{});var Aua=s(fke);_vt=r(Aua,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Aua.forEach(t),bvt=i(ed),Yn=n(ed,"P",{});var P9=s(Yn);vvt=r(P9,"The model class to instantiate is selected based on the "),gke=n(P9,"CODE",{});var Lua=s(gke);Fvt=r(Lua,"model_type"),Lua.forEach(t),Tvt=r(P9,` property of the config object (either
passed as an argument or loaded from `),hke=n(P9,"CODE",{});var yua=s(hke);Mvt=r(yua,"pretrained_model_name_or_path"),yua.forEach(t),Evt=r(P9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uke=n(P9,"CODE",{});var xua=s(uke);Cvt=r(xua,"pretrained_model_name_or_path"),xua.forEach(t),wvt=r(P9,":"),P9.forEach(t),Avt=i(ed),cP=n(ed,"UL",{});var uto=s(cP);ey=n(uto,"LI",{});var jKe=s(ey);pke=n(jKe,"STRONG",{});var $ua=s(pke);Lvt=r($ua,"beit"),$ua.forEach(t),yvt=r(jKe," \u2014 "),vle=n(jKe,"A",{href:!0});var kua=s(vle);xvt=r(kua,"FlaxBeitForImageClassification"),kua.forEach(t),$vt=r(jKe," (BEiT model)"),jKe.forEach(t),kvt=i(uto),oy=n(uto,"LI",{});var DKe=s(oy);_ke=n(DKe,"STRONG",{});var Sua=s(_ke);Svt=r(Sua,"vit"),Sua.forEach(t),Rvt=r(DKe," \u2014 "),Fle=n(DKe,"A",{href:!0});var Rua=s(Fle);Pvt=r(Rua,"FlaxViTForImageClassification"),Rua.forEach(t),Bvt=r(DKe," (ViT model)"),DKe.forEach(t),uto.forEach(t),Ivt=i(ed),T(ry.$$.fragment,ed),ed.forEach(t),Zi.forEach(t),Zeo=i(m),_f=n(m,"H2",{class:!0});var pto=s(_f);ty=n(pto,"A",{id:!0,class:!0,href:!0});var Pua=s(ty);bke=n(Pua,"SPAN",{});var Bua=s(bke);T(mP.$$.fragment,Bua),Bua.forEach(t),Pua.forEach(t),Nvt=i(pto),vke=n(pto,"SPAN",{});var Iua=s(vke);qvt=r(Iua,"FlaxAutoModelForVision2Seq"),Iua.forEach(t),pto.forEach(t),eoo=i(m),Rr=n(m,"DIV",{class:!0});var od=s(Rr);T(fP.$$.fragment,od),jvt=i(od),bf=n(od,"P",{});var Ade=s(bf);Dvt=r(Ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Tle=n(Ade,"A",{href:!0});var Nua=s(Tle);Gvt=r(Nua,"from_pretrained()"),Nua.forEach(t),Ovt=r(Ade," class method or the "),Mle=n(Ade,"A",{href:!0});var qua=s(Mle);Vvt=r(qua,"from_config()"),qua.forEach(t),Xvt=r(Ade,` class
method.`),Ade.forEach(t),zvt=i(od),gP=n(od,"P",{});var _to=s(gP);Qvt=r(_to,"This class cannot be instantiated directly using "),Fke=n(_to,"CODE",{});var jua=s(Fke);Wvt=r(jua,"__init__()"),jua.forEach(t),Uvt=r(_to," (throws an error)."),_to.forEach(t),Hvt=i(od),_a=n(od,"DIV",{class:!0});var B9=s(_a);T(hP.$$.fragment,B9),Jvt=i(B9),Tke=n(B9,"P",{});var Dua=s(Tke);Yvt=r(Dua,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dua.forEach(t),Kvt=i(B9),vf=n(B9,"P",{});var Lde=s(vf);Zvt=r(Lde,`Note:
Loading a model from its configuration file does `),Mke=n(Lde,"STRONG",{});var Gua=s(Mke);eFt=r(Gua,"not"),Gua.forEach(t),oFt=r(Lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ele=n(Lde,"A",{href:!0});var Oua=s(Ele);rFt=r(Oua,"from_pretrained()"),Oua.forEach(t),tFt=r(Lde," to load the model weights."),Lde.forEach(t),aFt=i(B9),T(ay.$$.fragment,B9),B9.forEach(t),nFt=i(od),dt=n(od,"DIV",{class:!0});var rd=s(dt);T(uP.$$.fragment,rd),sFt=i(rd),Eke=n(rd,"P",{});var Vua=s(Eke);lFt=r(Vua,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vua.forEach(t),iFt=i(rd),Kn=n(rd,"P",{});var I9=s(Kn);dFt=r(I9,"The model class to instantiate is selected based on the "),Cke=n(I9,"CODE",{});var Xua=s(Cke);cFt=r(Xua,"model_type"),Xua.forEach(t),mFt=r(I9,` property of the config object (either
passed as an argument or loaded from `),wke=n(I9,"CODE",{});var zua=s(wke);fFt=r(zua,"pretrained_model_name_or_path"),zua.forEach(t),gFt=r(I9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ake=n(I9,"CODE",{});var Qua=s(Ake);hFt=r(Qua,"pretrained_model_name_or_path"),Qua.forEach(t),uFt=r(I9,":"),I9.forEach(t),pFt=i(rd),Lke=n(rd,"UL",{});var Wua=s(Lke);ny=n(Wua,"LI",{});var GKe=s(ny);yke=n(GKe,"STRONG",{});var Uua=s(yke);_Ft=r(Uua,"vision-encoder-decoder"),Uua.forEach(t),bFt=r(GKe," \u2014 "),Cle=n(GKe,"A",{href:!0});var Hua=s(Cle);vFt=r(Hua,"FlaxVisionEncoderDecoderModel"),Hua.forEach(t),FFt=r(GKe," (Vision Encoder decoder model)"),GKe.forEach(t),Wua.forEach(t),TFt=i(rd),T(sy.$$.fragment,rd),rd.forEach(t),od.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dba)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(es,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(rs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(ts,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(dd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(cd,"class","relative group"),c(xf,"id","transformers.AutoConfig"),c(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xf,"href","#transformers.AutoConfig"),c(md,"class","relative group"),c(WB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(UB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(aI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(lI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(iI,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(bI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c($I,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(SI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(RI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(PI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(BI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(II,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(NI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(qI,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(jI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(DI,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(GI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(OI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(VI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(XI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(QI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(WI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(UI,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(YI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(KI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(eN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(aN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(nN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(dN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(cN,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(LN,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(xN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c($N,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(kN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(SN,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(RN,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(BN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(IN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(NN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(qN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(jN,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(DN,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(GN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(ON,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(VN,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(XN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(zN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(QN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(WN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(UN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(HN,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(JN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(YN,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(KN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(ZN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(eq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(oq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(rq,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),c(tq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(aq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(nq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(sq,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(lq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(iq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(dq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(cq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(mq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(fq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(gq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(hq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"id","transformers.AutoTokenizer"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoTokenizer"),c(gd,"class","relative group"),c(uq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(pq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(_q,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(bq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(vq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(Fq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Tq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Mq,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Eq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Cq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(wq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Aq,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Lq,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(yq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(xq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c($q,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(kq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Sq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Rq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Pq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Bq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(Iq,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Nq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(jq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(Dq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Oq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(Vq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(Xq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Qq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(Wq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(Uq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(Hq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Jq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Yq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Kq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(Zq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ej,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(oj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(rj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(tj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(aj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(nj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(sj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(lj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(ij,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(dj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(cj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(fj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(hj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(uj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_j,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(Fj,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(Tj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Mj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Ej,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Cj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Aj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Lj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($j,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(kj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Sj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Rj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Pj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(Bj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(Ij,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Nj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(qj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(jj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(Dj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Oj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(Vj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(Xj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(zj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Qj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Wj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Uj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(Hj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(Jj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Yj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Kj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Zj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(eD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(oD,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(rD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(tD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(aD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(nD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(sD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(lD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(iD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(dD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(cD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(mD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(fD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(gD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(hD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(uD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(pD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(_D,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(bD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ED,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(CD,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(wD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(AD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(LD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(yD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(xD,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c($D,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(kD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(SD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(RD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(PD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(BD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(ID,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(ND,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(qD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(GD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(OD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(VD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(XD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(zD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(QD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(WD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(UD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(HD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(JD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(YD,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(KD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ZD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(eG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(oG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(rG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(tG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nG,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(sG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(lG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(iG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(dG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(cG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(mG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(fG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(gG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(hG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(uG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(pG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(_G,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(bG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(vG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoFeatureExtractor"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoFeatureExtractor"),c(hd,"class","relative group"),c(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(TG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(MG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(EG,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),c(CG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(LG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(yG,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),c(xG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c($G,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(kG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(SG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(RG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(PG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(BG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(IG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(qG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(jG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(DG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(GG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(OG,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(VG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(XG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(zG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(QG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(WG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(JG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(YG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(KG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ZG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(oO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(rO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoProcessor"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoProcessor"),c(ud,"class","relative group"),c(dO,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(cO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(mO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(fO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(gO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(hO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(uO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(pO,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(_O,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(bO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(TO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(MO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(EO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(AO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(LO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($O,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zp,"id","transformers.AutoModel"),c(Zp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zp,"href","#transformers.AutoModel"),c(_d,"class","relative group"),c(kO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(BO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(IO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(NO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(qO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(DO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(XO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(zO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(QO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(WO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(UO,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),c(HO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(JO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(YO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(KO,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(ZO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(tV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aV,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nV,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(sV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(lV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(iV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(dV,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(cV,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mV,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(fV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(gV,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),c(hV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(uV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(pV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(_V,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(bV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(vV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(FV,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(TV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(MV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(EV,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(CV,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(wV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(AV,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(LV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(yV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(xV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c($V,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(kV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(SV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(RV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(PV,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(BV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(IV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(NV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(qV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(jV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(DV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(GV,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(OV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(VV,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(XV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(zV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(QV,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(WV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(UV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(HV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(JV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(YV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(KV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(ZV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(eX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(oX,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(rX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(tX,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(aX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(nX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(sX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(cX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(mX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(fX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(gX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(hX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(uX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(pX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(_X,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(bX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(vX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(FX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(TX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(MX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(EX,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(CX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(wX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(AX,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(LX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(yX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($X,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(kX,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(SX,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(RX,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(PX,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(BX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(IX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(NX,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),c(qX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(jX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(DX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(GX,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(OX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(VX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(XX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(zX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(QX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(WX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(UX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(HX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForPreTraining"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForPreTraining"),c(Fd,"class","relative group"),c(JX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(ez,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(rz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(tz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(az,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mz,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(fz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uz,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_z,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Fz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(Mz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Ez,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Cz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(wz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Az,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Lz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(yz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(xz,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c($z,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Sz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Rz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Pz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Bz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Nz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(qz,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(jz,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Dz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Gz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Oz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Vz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Qz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u1,"id","transformers.AutoModelForCausalLM"),c(u1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u1,"href","#transformers.AutoModelForCausalLM"),c(Ed,"class","relative group"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Zz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nQ,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mQ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(wQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(AQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c($Q,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kQ,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PQ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(IQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lv,"id","transformers.AutoModelForMaskedLM"),c(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lv,"href","#transformers.AutoModelForMaskedLM"),c(Ad,"class","relative group"),c(qQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(eW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(oW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(rW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(sW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(iW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(dW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(cW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(mW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(fW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(gW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(hW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(uW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(pW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(_W,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(vW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(FW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(EW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(CW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForSeq2SeqLM"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForSeq2SeqLM"),c(xd,"class","relative group"),c(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c($W,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(kW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(SW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(RW,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(PW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(BW,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(IW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(NW,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(qW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(DW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(VW,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(XW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(zW,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(QW,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(WW,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForSequenceClassification"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForSequenceClassification"),c(Sd,"class","relative group"),c(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(KW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(ZW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(CU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(wU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(AU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(LU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(yU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c($U,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(SU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(RU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(PU,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(BU,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(IU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(NU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(qU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(OU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(VU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(XU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(zU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForMultipleChoice"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForMultipleChoice"),c(Bd,"class","relative group"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(eH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(oH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(rH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(tH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(aH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(nH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(sH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(lH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(iH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(dH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c(cH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(mH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(fH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(pH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_H,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(bH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(vH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(FH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(TH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(MH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(EH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(CH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(wH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(AH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(LH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(yH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(xH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c($H,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.AutoModelForNextSentencePrediction"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.AutoModelForNextSentencePrediction"),c(qd,"class","relative group"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(BH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(IH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(NH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(qH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(jH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(DH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForTokenClassification"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForTokenClassification"),c(Gd,"class","relative group"),c(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(pJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(_J,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(bJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(vJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(FJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(TJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(MJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(EJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(CJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(wJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(AJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(LJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.AutoModelForQuestionAnswering"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.AutoModelForQuestionAnswering"),c(Xd,"class","relative group"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(SJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(RJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(PJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(BJ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(IJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(NJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(qJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(jJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(DJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(GJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(OJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(VJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(XJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c(zJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(QJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(WJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(UJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(HJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(JJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(KJ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(oY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(rY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(tY,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(aY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(nY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(sY,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(lY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(iY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(dY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(cY,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(mY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(fY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(gY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(hY,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(uY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(pY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(_Y,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(bY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(vY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(FY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.AutoModelForTableQuestionAnswering"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Wd,"class","relative group"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Jd,"class","relative group"),c(wY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(xY,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c($Y,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.AutoModelForImageClassification"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.AutoModelForImageClassification"),c(ec,"class","relative group"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(BY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IY,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(NY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(jY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(DY,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(GY,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(OY,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(VY,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(XY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(zY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(QY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WY,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(UY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(HY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YY,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(KY,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(ZY,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.AutoModelForVideoClassification"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.AutoModelForVideoClassification"),c(tc,"class","relative group"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForVision2Seq"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForVision2Seq"),c(sc,"class","relative group"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.AutoModelForVisualQuestionAnswering"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(dc,"class","relative group"),c(cK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.AutoModelForAudioClassification"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.AutoModelForAudioClassification"),c(fc,"class","relative group"),c(hK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.AutoModelForAudioFrameClassification"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.AutoModelForAudioFrameClassification"),c(uc,"class","relative group"),c(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c($K,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(kK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(SK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(RK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.AutoModelForCTC"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.AutoModelForCTC"),c(bc,"class","relative group"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(qK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(jK,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(DK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(GK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(OK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(VK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(XK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(zK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(QK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.AutoModelForSpeechSeq2Seq"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Tc,"class","relative group"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(YK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.AutoModelForAudioXVector"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.AutoModelForAudioXVector"),c(Cc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(rZ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(tZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(aZ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(nZ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.AutoModelForMaskedImageModeling"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.AutoModelForMaskedImageModeling"),c(Lc,"class","relative group"),c(sZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(cZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(mZ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(fZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.AutoModelForObjectDetection"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.AutoModelForObjectDetection"),c($c,"class","relative group"),c(gZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pZ,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),c(_Z,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(bZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(vZ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.AutoModelForImageSegmentation"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.AutoModelForImageSegmentation"),c(Rc,"class","relative group"),c(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.AutoModelForSemanticSegmentation"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ic,"class","relative group"),c(CZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(yZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(xZ,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c($Z,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(kZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.AutoModelForInstanceSegmentation"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.AutoModelForInstanceSegmentation"),c(jc,"class","relative group"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.TFAutoModel"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.TFAutoModel"),c(Oc,"class","relative group"),c(IZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(DZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(GZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(OZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(VZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(XZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(zZ,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(QZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(WZ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(UZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(HZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(JZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(YZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(KZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(ZZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(eee,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(oee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(ree,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(tee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(aee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(nee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(see,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(lee,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(iee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(dee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(cee,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(mee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(fee,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(gee,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(hee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(uee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(pee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(_ee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(bee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(vee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Fee,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(Tee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Mee,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(Eee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(Cee,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(wee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Aee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Lee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(yee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(xee,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c($ee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(kee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(See,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Ree,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(Pee,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Bee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Iee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(Nee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(qee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(jee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.TFAutoModelForPreTraining"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.TFAutoModelForPreTraining"),c(zc,"class","relative group"),c(Dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Xee,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(zee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Qee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Wee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Uee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Hee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Jee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Yee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Kee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Zee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(eoe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(ooe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(roe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(toe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(aoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(noe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(soe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(loe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ioe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(doe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(coe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(moe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForCausalLM"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForCausalLM"),c(Uc,"class","relative group"),c(foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(poe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(_oe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(boe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(voe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Foe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Toe,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(Moe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Eoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Coe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(woe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Aoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(Loe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yoe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g0,"id","transformers.TFAutoModelForImageClassification"),c(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g0,"href","#transformers.TFAutoModelForImageClassification"),c(Yc,"class","relative group"),c(xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Soe,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Roe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(Poe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(Ioe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(Noe,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(qoe,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(Doe,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(Goe,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.TFAutoModelForSemanticSegmentation"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(em,"class","relative group"),c(Ooe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zoe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(Qoe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(Woe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.TFAutoModelForMaskedLM"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.TFAutoModelForMaskedLM"),c(am,"class","relative group"),c(Uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Koe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Zoe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(ere,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(ore,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(rre,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(tre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(are,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(nre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(sre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(lre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ire,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(dre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(cre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(fre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(gre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(hre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(ure,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z0,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z0,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(lm,"class","relative group"),c(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fre,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Tre,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Mre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Ere,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Cre,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(wre,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(Are,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(Lre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(yre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(xre,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.TFAutoModelForSequenceClassification"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.TFAutoModelForSequenceClassification"),c(cm,"class","relative group"),c($re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Pre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Bre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Ire,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Nre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(qre,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(jre,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Dre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Gre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Ore,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Vre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Xre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(zre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(Qre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Wre,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(Ure,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Hre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Jre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Yre,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Kre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Zre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(ete,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(ote,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(rte,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(tte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(ate,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(nte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ow,"id","transformers.TFAutoModelForMultipleChoice"),c(Ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ow,"href","#transformers.TFAutoModelForMultipleChoice"),c(gm,"class","relative group"),c(ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(cte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(mte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(fte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(gte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(hte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(ute,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(pte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(_te,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(bte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(vte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Fte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Tte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Mte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Ete,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Cte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(wte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(iA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(pm,"class","relative group"),c(Ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c($te,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gA,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(gA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(vm,"class","relative group"),c(kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pte,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_A,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(_A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_A,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Mm,"class","relative group"),c(Bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TA,"id","transformers.TFAutoModelForTokenClassification"),c(TA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TA,"href","#transformers.TFAutoModelForTokenClassification"),c(wm,"class","relative group"),c(jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ote,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Vte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Xte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(zte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(Qte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Wte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Ute,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Hte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Jte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Yte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Kte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Zte,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(eae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(oae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(rae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(tae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(aae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(nae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(lae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(iae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zA,"id","transformers.TFAutoModelForQuestionAnswering"),c(zA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zA,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ym,"class","relative group"),c(dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(gae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(hae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(uae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(pae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(_ae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(bae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(vae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Fae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Tae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Mae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Eae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(Cae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(wae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Aae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Lae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(yae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(xae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c($ae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(kae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Sae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.TFAutoModelForVision2Seq"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.TFAutoModelForVision2Seq"),c(km,"class","relative group"),c(Rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iae,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Pm,"class","relative group"),c(Nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dae,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.FlaxAutoModel"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.FlaxAutoModel"),c(Nm,"class","relative group"),c(Gae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(zae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(Qae,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(Wae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(Uae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Hae,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Jae,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Yae,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Kae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Zae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(ene,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(one,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(rne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(tne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(ane,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(nne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(sne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(lne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(ine,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(dne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(cne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(mne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(fne,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(gne,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(hne,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(une,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(pne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.FlaxAutoModelForCausalLM"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.FlaxAutoModelForCausalLM"),c(Dm,"class","relative group"),c(_ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Tne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Mne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Ene,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Cne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(wne,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Ane,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Lne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(yne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(xne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f7,"id","transformers.FlaxAutoModelForPreTraining"),c(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f7,"href","#transformers.FlaxAutoModelForPreTraining"),c(Vm,"class","relative group"),c($ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Pne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Bne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Ine,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Nne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(qne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(jne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Dne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Gne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(One,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Vne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Xne,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(zne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.FlaxAutoModelForMaskedLM"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Qm,"class","relative group"),c(Qne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Une,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Jne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Yne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Kne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Zne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ese,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ose,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ase,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Hm,"class","relative group"),c(nse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ise,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dse,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(cse,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(mse,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(fse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(gse,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(hse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(use,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pse,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_se,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eL,"id","transformers.FlaxAutoModelForSequenceClassification"),c(eL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eL,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Km,"class","relative group"),c(bse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Mse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Ese,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Cse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(wse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ase,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Lse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(yse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(xse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c($se,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gL,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(gL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(of,"class","relative group"),c(kse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Bse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Ise,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Nse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(qse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(jse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Dse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Gse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Ose,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Vse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AL,"id","transformers.FlaxAutoModelForTokenClassification"),c(AL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AL,"href","#transformers.FlaxAutoModelForTokenClassification"),c(af,"class","relative group"),c(Xse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Use,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Hse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Jse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Yse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Kse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Zse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ele,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NL,"id","transformers.FlaxAutoModelForMultipleChoice"),c(NL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NL,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(lf,"class","relative group"),c(ole,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ale,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(nle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(sle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(lle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(ile,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(dle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(cle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(mle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UL,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(UL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UL,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(mf,"class","relative group"),c(fle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ule,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KL,"id","transformers.FlaxAutoModelForImageClassification"),c(KL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KL,"href","#transformers.FlaxAutoModelForImageClassification"),c(hf,"class","relative group"),c(ple,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_le,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ble,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vle,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Fle,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ty,"id","transformers.FlaxAutoModelForVision2Seq"),c(ty,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ty,"href","#transformers.FlaxAutoModelForVision2Seq"),c(_f,"class","relative group"),c(Tle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ele,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cle,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,yo),e(yo,td),b(m,Ef,_),b(m,pt,_),e(pt,ad),e(pt,nd),e(nd,N9),e(pt,Cf),b(m,Ve,_),b(m,He,_),e(He,sd),e(He,es),e(es,q9),e(He,os),e(He,rs),e(rs,j9),e(He,ld),e(He,ts),e(ts,D9),e(He,id),b(m,wf,_),M(Qa,m,_),b(m,Je,_),b(m,Ae,_),e(Ae,GB),e(Ae,dd),e(dd,OB),e(Ae,VB),b(m,xo,_),b(m,Wa,_),e(Wa,XB),e(Wa,Af),e(Af,zB),e(Wa,bto),b(m,OKe,_),b(m,cd,_),e(cd,Lf),e(Lf,yde),M(G9,yde,null),e(cd,vto),e(cd,xde),e(xde,Fto),b(m,VKe,_),b(m,as,_),e(as,Tto),e(as,$de),e($de,Mto),e(as,Eto),e(as,kde),e(kde,Cto),e(as,wto),b(m,XKe,_),M(O9,m,_),b(m,zKe,_),b(m,QB,_),e(QB,Ato),b(m,QKe,_),M(yf,m,_),b(m,WKe,_),b(m,md,_),e(md,xf),e(xf,Sde),M(V9,Sde,null),e(md,Lto),e(md,Rde),e(Rde,yto),b(m,UKe,_),b(m,$o,_),M(X9,$o,null),e($o,xto),e($o,z9),e(z9,$to),e(z9,WB),e(WB,kto),e(z9,Sto),e($o,Rto),e($o,Q9),e(Q9,Pto),e(Q9,Pde),e(Pde,Bto),e(Q9,Ito),e($o,Nto),e($o,Pr),M(W9,Pr,null),e(Pr,qto),e(Pr,Bde),e(Bde,jto),e(Pr,Dto),e(Pr,fd),e(fd,Gto),e(fd,Ide),e(Ide,Oto),e(fd,Vto),e(fd,Nde),e(Nde,Xto),e(fd,zto),e(Pr,Qto),e(Pr,A),e(A,$f),e($f,qde),e(qde,Wto),e($f,Uto),e($f,UB),e(UB,Hto),e($f,Jto),e(A,Yto),e(A,kf),e(kf,jde),e(jde,Kto),e(kf,Zto),e(kf,HB),e(HB,eao),e(kf,oao),e(A,rao),e(A,Sf),e(Sf,Dde),e(Dde,tao),e(Sf,aao),e(Sf,JB),e(JB,nao),e(Sf,sao),e(A,lao),e(A,Rf),e(Rf,Gde),e(Gde,iao),e(Rf,dao),e(Rf,YB),e(YB,cao),e(Rf,mao),e(A,fao),e(A,Pf),e(Pf,Ode),e(Ode,gao),e(Pf,hao),e(Pf,KB),e(KB,uao),e(Pf,pao),e(A,_ao),e(A,Bf),e(Bf,Vde),e(Vde,bao),e(Bf,vao),e(Bf,ZB),e(ZB,Fao),e(Bf,Tao),e(A,Mao),e(A,If),e(If,Xde),e(Xde,Eao),e(If,Cao),e(If,eI),e(eI,wao),e(If,Aao),e(A,Lao),e(A,Nf),e(Nf,zde),e(zde,yao),e(Nf,xao),e(Nf,oI),e(oI,$ao),e(Nf,kao),e(A,Sao),e(A,qf),e(qf,Qde),e(Qde,Rao),e(qf,Pao),e(qf,rI),e(rI,Bao),e(qf,Iao),e(A,Nao),e(A,jf),e(jf,Wde),e(Wde,qao),e(jf,jao),e(jf,tI),e(tI,Dao),e(jf,Gao),e(A,Oao),e(A,Df),e(Df,Ude),e(Ude,Vao),e(Df,Xao),e(Df,aI),e(aI,zao),e(Df,Qao),e(A,Wao),e(A,Gf),e(Gf,Hde),e(Hde,Uao),e(Gf,Hao),e(Gf,nI),e(nI,Jao),e(Gf,Yao),e(A,Kao),e(A,Of),e(Of,Jde),e(Jde,Zao),e(Of,eno),e(Of,sI),e(sI,ono),e(Of,rno),e(A,tno),e(A,Vf),e(Vf,Yde),e(Yde,ano),e(Vf,nno),e(Vf,lI),e(lI,sno),e(Vf,lno),e(A,ino),e(A,Xf),e(Xf,Kde),e(Kde,dno),e(Xf,cno),e(Xf,iI),e(iI,mno),e(Xf,fno),e(A,gno),e(A,zf),e(zf,Zde),e(Zde,hno),e(zf,uno),e(zf,dI),e(dI,pno),e(zf,_no),e(A,bno),e(A,Qf),e(Qf,ece),e(ece,vno),e(Qf,Fno),e(Qf,cI),e(cI,Tno),e(Qf,Mno),e(A,Eno),e(A,Wf),e(Wf,oce),e(oce,Cno),e(Wf,wno),e(Wf,mI),e(mI,Ano),e(Wf,Lno),e(A,yno),e(A,Uf),e(Uf,rce),e(rce,xno),e(Uf,$no),e(Uf,fI),e(fI,kno),e(Uf,Sno),e(A,Rno),e(A,Hf),e(Hf,tce),e(tce,Pno),e(Hf,Bno),e(Hf,gI),e(gI,Ino),e(Hf,Nno),e(A,qno),e(A,Jf),e(Jf,ace),e(ace,jno),e(Jf,Dno),e(Jf,hI),e(hI,Gno),e(Jf,Ono),e(A,Vno),e(A,Yf),e(Yf,nce),e(nce,Xno),e(Yf,zno),e(Yf,uI),e(uI,Qno),e(Yf,Wno),e(A,Uno),e(A,Kf),e(Kf,sce),e(sce,Hno),e(Kf,Jno),e(Kf,pI),e(pI,Yno),e(Kf,Kno),e(A,Zno),e(A,Zf),e(Zf,lce),e(lce,eso),e(Zf,oso),e(Zf,_I),e(_I,rso),e(Zf,tso),e(A,aso),e(A,eg),e(eg,ice),e(ice,nso),e(eg,sso),e(eg,bI),e(bI,lso),e(eg,iso),e(A,dso),e(A,og),e(og,dce),e(dce,cso),e(og,mso),e(og,vI),e(vI,fso),e(og,gso),e(A,hso),e(A,rg),e(rg,cce),e(cce,uso),e(rg,pso),e(rg,FI),e(FI,_so),e(rg,bso),e(A,vso),e(A,tg),e(tg,mce),e(mce,Fso),e(tg,Tso),e(tg,TI),e(TI,Mso),e(tg,Eso),e(A,Cso),e(A,ag),e(ag,fce),e(fce,wso),e(ag,Aso),e(ag,MI),e(MI,Lso),e(ag,yso),e(A,xso),e(A,ng),e(ng,gce),e(gce,$so),e(ng,kso),e(ng,EI),e(EI,Sso),e(ng,Rso),e(A,Pso),e(A,sg),e(sg,hce),e(hce,Bso),e(sg,Iso),e(sg,CI),e(CI,Nso),e(sg,qso),e(A,jso),e(A,lg),e(lg,uce),e(uce,Dso),e(lg,Gso),e(lg,wI),e(wI,Oso),e(lg,Vso),e(A,Xso),e(A,ig),e(ig,pce),e(pce,zso),e(ig,Qso),e(ig,AI),e(AI,Wso),e(ig,Uso),e(A,Hso),e(A,dg),e(dg,_ce),e(_ce,Jso),e(dg,Yso),e(dg,LI),e(LI,Kso),e(dg,Zso),e(A,elo),e(A,cg),e(cg,bce),e(bce,olo),e(cg,rlo),e(cg,yI),e(yI,tlo),e(cg,alo),e(A,nlo),e(A,mg),e(mg,vce),e(vce,slo),e(mg,llo),e(mg,xI),e(xI,ilo),e(mg,dlo),e(A,clo),e(A,fg),e(fg,Fce),e(Fce,mlo),e(fg,flo),e(fg,$I),e($I,glo),e(fg,hlo),e(A,ulo),e(A,gg),e(gg,Tce),e(Tce,plo),e(gg,_lo),e(gg,kI),e(kI,blo),e(gg,vlo),e(A,Flo),e(A,hg),e(hg,Mce),e(Mce,Tlo),e(hg,Mlo),e(hg,SI),e(SI,Elo),e(hg,Clo),e(A,wlo),e(A,ug),e(ug,Ece),e(Ece,Alo),e(ug,Llo),e(ug,RI),e(RI,ylo),e(ug,xlo),e(A,$lo),e(A,pg),e(pg,Cce),e(Cce,klo),e(pg,Slo),e(pg,PI),e(PI,Rlo),e(pg,Plo),e(A,Blo),e(A,_g),e(_g,wce),e(wce,Ilo),e(_g,Nlo),e(_g,BI),e(BI,qlo),e(_g,jlo),e(A,Dlo),e(A,bg),e(bg,Ace),e(Ace,Glo),e(bg,Olo),e(bg,II),e(II,Vlo),e(bg,Xlo),e(A,zlo),e(A,vg),e(vg,Lce),e(Lce,Qlo),e(vg,Wlo),e(vg,NI),e(NI,Ulo),e(vg,Hlo),e(A,Jlo),e(A,Fg),e(Fg,yce),e(yce,Ylo),e(Fg,Klo),e(Fg,qI),e(qI,Zlo),e(Fg,eio),e(A,oio),e(A,Tg),e(Tg,xce),e(xce,rio),e(Tg,tio),e(Tg,jI),e(jI,aio),e(Tg,nio),e(A,sio),e(A,Mg),e(Mg,$ce),e($ce,lio),e(Mg,iio),e(Mg,DI),e(DI,dio),e(Mg,cio),e(A,mio),e(A,Eg),e(Eg,kce),e(kce,fio),e(Eg,gio),e(Eg,GI),e(GI,hio),e(Eg,uio),e(A,pio),e(A,Cg),e(Cg,Sce),e(Sce,_io),e(Cg,bio),e(Cg,OI),e(OI,vio),e(Cg,Fio),e(A,Tio),e(A,wg),e(wg,Rce),e(Rce,Mio),e(wg,Eio),e(wg,VI),e(VI,Cio),e(wg,wio),e(A,Aio),e(A,Ag),e(Ag,Pce),e(Pce,Lio),e(Ag,yio),e(Ag,XI),e(XI,xio),e(Ag,$io),e(A,kio),e(A,Lg),e(Lg,Bce),e(Bce,Sio),e(Lg,Rio),e(Lg,zI),e(zI,Pio),e(Lg,Bio),e(A,Iio),e(A,yg),e(yg,Ice),e(Ice,Nio),e(yg,qio),e(yg,QI),e(QI,jio),e(yg,Dio),e(A,Gio),e(A,xg),e(xg,Nce),e(Nce,Oio),e(xg,Vio),e(xg,WI),e(WI,Xio),e(xg,zio),e(A,Qio),e(A,$g),e($g,qce),e(qce,Wio),e($g,Uio),e($g,UI),e(UI,Hio),e($g,Jio),e(A,Yio),e(A,kg),e(kg,jce),e(jce,Kio),e(kg,Zio),e(kg,HI),e(HI,edo),e(kg,odo),e(A,rdo),e(A,Sg),e(Sg,Dce),e(Dce,tdo),e(Sg,ado),e(Sg,JI),e(JI,ndo),e(Sg,sdo),e(A,ldo),e(A,Rg),e(Rg,Gce),e(Gce,ido),e(Rg,ddo),e(Rg,YI),e(YI,cdo),e(Rg,mdo),e(A,fdo),e(A,Pg),e(Pg,Oce),e(Oce,gdo),e(Pg,hdo),e(Pg,KI),e(KI,udo),e(Pg,pdo),e(A,_do),e(A,Bg),e(Bg,Vce),e(Vce,bdo),e(Bg,vdo),e(Bg,ZI),e(ZI,Fdo),e(Bg,Tdo),e(A,Mdo),e(A,Ig),e(Ig,Xce),e(Xce,Edo),e(Ig,Cdo),e(Ig,eN),e(eN,wdo),e(Ig,Ado),e(A,Ldo),e(A,Ng),e(Ng,zce),e(zce,ydo),e(Ng,xdo),e(Ng,oN),e(oN,$do),e(Ng,kdo),e(A,Sdo),e(A,qg),e(qg,Qce),e(Qce,Rdo),e(qg,Pdo),e(qg,rN),e(rN,Bdo),e(qg,Ido),e(A,Ndo),e(A,jg),e(jg,Wce),e(Wce,qdo),e(jg,jdo),e(jg,tN),e(tN,Ddo),e(jg,Gdo),e(A,Odo),e(A,Dg),e(Dg,Uce),e(Uce,Vdo),e(Dg,Xdo),e(Dg,aN),e(aN,zdo),e(Dg,Qdo),e(A,Wdo),e(A,Gg),e(Gg,Hce),e(Hce,Udo),e(Gg,Hdo),e(Gg,nN),e(nN,Jdo),e(Gg,Ydo),e(A,Kdo),e(A,Og),e(Og,Jce),e(Jce,Zdo),e(Og,eco),e(Og,sN),e(sN,oco),e(Og,rco),e(A,tco),e(A,Vg),e(Vg,Yce),e(Yce,aco),e(Vg,nco),e(Vg,lN),e(lN,sco),e(Vg,lco),e(A,ico),e(A,Xg),e(Xg,Kce),e(Kce,dco),e(Xg,cco),e(Xg,iN),e(iN,mco),e(Xg,fco),e(A,gco),e(A,zg),e(zg,Zce),e(Zce,hco),e(zg,uco),e(zg,dN),e(dN,pco),e(zg,_co),e(A,bco),e(A,Qg),e(Qg,eme),e(eme,vco),e(Qg,Fco),e(Qg,cN),e(cN,Tco),e(Qg,Mco),e(A,Eco),e(A,Wg),e(Wg,ome),e(ome,Cco),e(Wg,wco),e(Wg,mN),e(mN,Aco),e(Wg,Lco),e(A,yco),e(A,Ug),e(Ug,rme),e(rme,xco),e(Ug,$co),e(Ug,fN),e(fN,kco),e(Ug,Sco),e(A,Rco),e(A,Hg),e(Hg,tme),e(tme,Pco),e(Hg,Bco),e(Hg,gN),e(gN,Ico),e(Hg,Nco),e(A,qco),e(A,Jg),e(Jg,ame),e(ame,jco),e(Jg,Dco),e(Jg,hN),e(hN,Gco),e(Jg,Oco),e(A,Vco),e(A,Yg),e(Yg,nme),e(nme,Xco),e(Yg,zco),e(Yg,uN),e(uN,Qco),e(Yg,Wco),e(A,Uco),e(A,Kg),e(Kg,sme),e(sme,Hco),e(Kg,Jco),e(Kg,pN),e(pN,Yco),e(Kg,Kco),e(A,Zco),e(A,Zg),e(Zg,lme),e(lme,emo),e(Zg,omo),e(Zg,_N),e(_N,rmo),e(Zg,tmo),e(A,amo),e(A,eh),e(eh,ime),e(ime,nmo),e(eh,smo),e(eh,bN),e(bN,lmo),e(eh,imo),e(A,dmo),e(A,oh),e(oh,dme),e(dme,cmo),e(oh,mmo),e(oh,vN),e(vN,fmo),e(oh,gmo),e(A,hmo),e(A,rh),e(rh,cme),e(cme,umo),e(rh,pmo),e(rh,FN),e(FN,_mo),e(rh,bmo),e(A,vmo),e(A,th),e(th,mme),e(mme,Fmo),e(th,Tmo),e(th,TN),e(TN,Mmo),e(th,Emo),e(A,Cmo),e(A,ah),e(ah,fme),e(fme,wmo),e(ah,Amo),e(ah,MN),e(MN,Lmo),e(ah,ymo),e(A,xmo),e(A,nh),e(nh,gme),e(gme,$mo),e(nh,kmo),e(nh,EN),e(EN,Smo),e(nh,Rmo),e(A,Pmo),e(A,sh),e(sh,hme),e(hme,Bmo),e(sh,Imo),e(sh,CN),e(CN,Nmo),e(sh,qmo),e(A,jmo),e(A,lh),e(lh,ume),e(ume,Dmo),e(lh,Gmo),e(lh,wN),e(wN,Omo),e(lh,Vmo),e(A,Xmo),e(A,ih),e(ih,pme),e(pme,zmo),e(ih,Qmo),e(ih,AN),e(AN,Wmo),e(ih,Umo),e(A,Hmo),e(A,dh),e(dh,_me),e(_me,Jmo),e(dh,Ymo),e(dh,LN),e(LN,Kmo),e(dh,Zmo),e(A,efo),e(A,ch),e(ch,bme),e(bme,ofo),e(ch,rfo),e(ch,yN),e(yN,tfo),e(ch,afo),e(A,nfo),e(A,mh),e(mh,vme),e(vme,sfo),e(mh,lfo),e(mh,xN),e(xN,ifo),e(mh,dfo),e(A,cfo),e(A,fh),e(fh,Fme),e(Fme,mfo),e(fh,ffo),e(fh,$N),e($N,gfo),e(fh,hfo),e(A,ufo),e(A,gh),e(gh,Tme),e(Tme,pfo),e(gh,_fo),e(gh,kN),e(kN,bfo),e(gh,vfo),e(A,Ffo),e(A,hh),e(hh,Mme),e(Mme,Tfo),e(hh,Mfo),e(hh,SN),e(SN,Efo),e(hh,Cfo),e(A,wfo),e(A,uh),e(uh,Eme),e(Eme,Afo),e(uh,Lfo),e(uh,RN),e(RN,yfo),e(uh,xfo),e(A,$fo),e(A,ph),e(ph,Cme),e(Cme,kfo),e(ph,Sfo),e(ph,PN),e(PN,Rfo),e(ph,Pfo),e(A,Bfo),e(A,_h),e(_h,wme),e(wme,Ifo),e(_h,Nfo),e(_h,BN),e(BN,qfo),e(_h,jfo),e(A,Dfo),e(A,bh),e(bh,Ame),e(Ame,Gfo),e(bh,Ofo),e(bh,IN),e(IN,Vfo),e(bh,Xfo),e(A,zfo),e(A,vh),e(vh,Lme),e(Lme,Qfo),e(vh,Wfo),e(vh,NN),e(NN,Ufo),e(vh,Hfo),e(A,Jfo),e(A,Fh),e(Fh,yme),e(yme,Yfo),e(Fh,Kfo),e(Fh,qN),e(qN,Zfo),e(Fh,ego),e(A,ogo),e(A,Th),e(Th,xme),e(xme,rgo),e(Th,tgo),e(Th,jN),e(jN,ago),e(Th,ngo),e(A,sgo),e(A,Mh),e(Mh,$me),e($me,lgo),e(Mh,igo),e(Mh,DN),e(DN,dgo),e(Mh,cgo),e(A,mgo),e(A,Eh),e(Eh,kme),e(kme,fgo),e(Eh,ggo),e(Eh,GN),e(GN,hgo),e(Eh,ugo),e(A,pgo),e(A,Ch),e(Ch,Sme),e(Sme,_go),e(Ch,bgo),e(Ch,ON),e(ON,vgo),e(Ch,Fgo),e(A,Tgo),e(A,wh),e(wh,Rme),e(Rme,Mgo),e(wh,Ego),e(wh,VN),e(VN,Cgo),e(wh,wgo),e(A,Ago),e(A,Ah),e(Ah,Pme),e(Pme,Lgo),e(Ah,ygo),e(Ah,XN),e(XN,xgo),e(Ah,$go),e(A,kgo),e(A,Lh),e(Lh,Bme),e(Bme,Sgo),e(Lh,Rgo),e(Lh,zN),e(zN,Pgo),e(Lh,Bgo),e(A,Igo),e(A,yh),e(yh,Ime),e(Ime,Ngo),e(yh,qgo),e(yh,QN),e(QN,jgo),e(yh,Dgo),e(A,Ggo),e(A,xh),e(xh,Nme),e(Nme,Ogo),e(xh,Vgo),e(xh,WN),e(WN,Xgo),e(xh,zgo),e(A,Qgo),e(A,$h),e($h,qme),e(qme,Wgo),e($h,Ugo),e($h,UN),e(UN,Hgo),e($h,Jgo),e(A,Ygo),e(A,kh),e(kh,jme),e(jme,Kgo),e(kh,Zgo),e(kh,HN),e(HN,eho),e(kh,oho),e(A,rho),e(A,Sh),e(Sh,Dme),e(Dme,tho),e(Sh,aho),e(Sh,JN),e(JN,nho),e(Sh,sho),e(A,lho),e(A,Rh),e(Rh,Gme),e(Gme,iho),e(Rh,dho),e(Rh,YN),e(YN,cho),e(Rh,mho),e(A,fho),e(A,Ph),e(Ph,Ome),e(Ome,gho),e(Ph,hho),e(Ph,KN),e(KN,uho),e(Ph,pho),e(A,_ho),e(A,Bh),e(Bh,Vme),e(Vme,bho),e(Bh,vho),e(Bh,ZN),e(ZN,Fho),e(Bh,Tho),e(A,Mho),e(A,Ih),e(Ih,Xme),e(Xme,Eho),e(Ih,Cho),e(Ih,eq),e(eq,who),e(Ih,Aho),e(A,Lho),e(A,Nh),e(Nh,zme),e(zme,yho),e(Nh,xho),e(Nh,oq),e(oq,$ho),e(Nh,kho),e(A,Sho),e(A,qh),e(qh,Qme),e(Qme,Rho),e(qh,Pho),e(qh,rq),e(rq,Bho),e(qh,Iho),e(A,Nho),e(A,jh),e(jh,Wme),e(Wme,qho),e(jh,jho),e(jh,tq),e(tq,Dho),e(jh,Gho),e(A,Oho),e(A,Dh),e(Dh,Ume),e(Ume,Vho),e(Dh,Xho),e(Dh,aq),e(aq,zho),e(Dh,Qho),e(A,Who),e(A,Gh),e(Gh,Hme),e(Hme,Uho),e(Gh,Hho),e(Gh,nq),e(nq,Jho),e(Gh,Yho),e(A,Kho),e(A,Oh),e(Oh,Jme),e(Jme,Zho),e(Oh,euo),e(Oh,sq),e(sq,ouo),e(Oh,ruo),e(A,tuo),e(A,Vh),e(Vh,Yme),e(Yme,auo),e(Vh,nuo),e(Vh,lq),e(lq,suo),e(Vh,luo),e(A,iuo),e(A,Xh),e(Xh,Kme),e(Kme,duo),e(Xh,cuo),e(Xh,iq),e(iq,muo),e(Xh,fuo),e(A,guo),e(A,zh),e(zh,Zme),e(Zme,huo),e(zh,uuo),e(zh,dq),e(dq,puo),e(zh,_uo),e(A,buo),e(A,Qh),e(Qh,efe),e(efe,vuo),e(Qh,Fuo),e(Qh,cq),e(cq,Tuo),e(Qh,Muo),e(A,Euo),e(A,Wh),e(Wh,ofe),e(ofe,Cuo),e(Wh,wuo),e(Wh,mq),e(mq,Auo),e(Wh,Luo),e(A,yuo),e(A,Uh),e(Uh,rfe),e(rfe,xuo),e(Uh,$uo),e(Uh,fq),e(fq,kuo),e(Uh,Suo),e(A,Ruo),e(A,Hh),e(Hh,tfe),e(tfe,Puo),e(Hh,Buo),e(Hh,gq),e(gq,Iuo),e(Hh,Nuo),e(A,quo),e(A,Jh),e(Jh,afe),e(afe,juo),e(Jh,Duo),e(Jh,hq),e(hq,Guo),e(Jh,Ouo),e(Pr,Vuo),M(Yh,Pr,null),e($o,Xuo),e($o,Kh),M(U9,Kh,null),e(Kh,zuo),e(Kh,nfe),e(nfe,Quo),b(m,HKe,_),b(m,gd,_),e(gd,Zh),e(Zh,sfe),M(H9,sfe,null),e(gd,Wuo),e(gd,lfe),e(lfe,Uuo),b(m,JKe,_),b(m,ko,_),M(J9,ko,null),e(ko,Huo),e(ko,Y9),e(Y9,Juo),e(Y9,uq),e(uq,Yuo),e(Y9,Kuo),e(ko,Zuo),e(ko,K9),e(K9,epo),e(K9,ife),e(ife,opo),e(K9,rpo),e(ko,tpo),e(ko,Br),M(Z9,Br,null),e(Br,apo),e(Br,dfe),e(dfe,npo),e(Br,spo),e(Br,Ua),e(Ua,lpo),e(Ua,cfe),e(cfe,ipo),e(Ua,dpo),e(Ua,mfe),e(mfe,cpo),e(Ua,mpo),e(Ua,ffe),e(ffe,fpo),e(Ua,gpo),e(Br,hpo),e(Br,k),e(k,ns),e(ns,gfe),e(gfe,upo),e(ns,ppo),e(ns,pq),e(pq,_po),e(ns,bpo),e(ns,_q),e(_q,vpo),e(ns,Fpo),e(k,Tpo),e(k,ss),e(ss,hfe),e(hfe,Mpo),e(ss,Epo),e(ss,bq),e(bq,Cpo),e(ss,wpo),e(ss,vq),e(vq,Apo),e(ss,Lpo),e(k,ypo),e(k,ls),e(ls,ufe),e(ufe,xpo),e(ls,$po),e(ls,Fq),e(Fq,kpo),e(ls,Spo),e(ls,Tq),e(Tq,Rpo),e(ls,Ppo),e(k,Bpo),e(k,eu),e(eu,pfe),e(pfe,Ipo),e(eu,Npo),e(eu,Mq),e(Mq,qpo),e(eu,jpo),e(k,Dpo),e(k,is),e(is,_fe),e(_fe,Gpo),e(is,Opo),e(is,Eq),e(Eq,Vpo),e(is,Xpo),e(is,Cq),e(Cq,zpo),e(is,Qpo),e(k,Wpo),e(k,ou),e(ou,bfe),e(bfe,Upo),e(ou,Hpo),e(ou,wq),e(wq,Jpo),e(ou,Ypo),e(k,Kpo),e(k,ru),e(ru,vfe),e(vfe,Zpo),e(ru,e_o),e(ru,Aq),e(Aq,o_o),e(ru,r_o),e(k,t_o),e(k,tu),e(tu,Ffe),e(Ffe,a_o),e(tu,n_o),e(tu,Lq),e(Lq,s_o),e(tu,l_o),e(k,i_o),e(k,ds),e(ds,Tfe),e(Tfe,d_o),e(ds,c_o),e(ds,yq),e(yq,m_o),e(ds,f_o),e(ds,xq),e(xq,g_o),e(ds,h_o),e(k,u_o),e(k,cs),e(cs,Mfe),e(Mfe,p_o),e(cs,__o),e(cs,$q),e($q,b_o),e(cs,v_o),e(cs,kq),e(kq,F_o),e(cs,T_o),e(k,M_o),e(k,ms),e(ms,Efe),e(Efe,E_o),e(ms,C_o),e(ms,Sq),e(Sq,w_o),e(ms,A_o),e(ms,Rq),e(Rq,L_o),e(ms,y_o),e(k,x_o),e(k,au),e(au,Cfe),e(Cfe,$_o),e(au,k_o),e(au,Pq),e(Pq,S_o),e(au,R_o),e(k,P_o),e(k,nu),e(nu,wfe),e(wfe,B_o),e(nu,I_o),e(nu,Bq),e(Bq,N_o),e(nu,q_o),e(k,j_o),e(k,su),e(su,Afe),e(Afe,D_o),e(su,G_o),e(su,Iq),e(Iq,O_o),e(su,V_o),e(k,X_o),e(k,fs),e(fs,Lfe),e(Lfe,z_o),e(fs,Q_o),e(fs,Nq),e(Nq,W_o),e(fs,U_o),e(fs,qq),e(qq,H_o),e(fs,J_o),e(k,Y_o),e(k,lu),e(lu,yfe),e(yfe,K_o),e(lu,Z_o),e(lu,jq),e(jq,ebo),e(lu,obo),e(k,rbo),e(k,gs),e(gs,xfe),e(xfe,tbo),e(gs,abo),e(gs,Dq),e(Dq,nbo),e(gs,sbo),e(gs,Gq),e(Gq,lbo),e(gs,ibo),e(k,dbo),e(k,hs),e(hs,$fe),e($fe,cbo),e(hs,mbo),e(hs,Oq),e(Oq,fbo),e(hs,gbo),e(hs,Vq),e(Vq,hbo),e(hs,ubo),e(k,pbo),e(k,us),e(us,kfe),e(kfe,_bo),e(us,bbo),e(us,Xq),e(Xq,vbo),e(us,Fbo),e(us,zq),e(zq,Tbo),e(us,Mbo),e(k,Ebo),e(k,ps),e(ps,Sfe),e(Sfe,Cbo),e(ps,wbo),e(ps,Qq),e(Qq,Abo),e(ps,Lbo),e(ps,Wq),e(Wq,ybo),e(ps,xbo),e(k,$bo),e(k,iu),e(iu,Rfe),e(Rfe,kbo),e(iu,Sbo),e(iu,Uq),e(Uq,Rbo),e(iu,Pbo),e(k,Bbo),e(k,_s),e(_s,Pfe),e(Pfe,Ibo),e(_s,Nbo),e(_s,Hq),e(Hq,qbo),e(_s,jbo),e(_s,Jq),e(Jq,Dbo),e(_s,Gbo),e(k,Obo),e(k,bs),e(bs,Bfe),e(Bfe,Vbo),e(bs,Xbo),e(bs,Yq),e(Yq,zbo),e(bs,Qbo),e(bs,Kq),e(Kq,Wbo),e(bs,Ubo),e(k,Hbo),e(k,vs),e(vs,Ife),e(Ife,Jbo),e(vs,Ybo),e(vs,Zq),e(Zq,Kbo),e(vs,Zbo),e(vs,ej),e(ej,e2o),e(vs,o2o),e(k,r2o),e(k,Fs),e(Fs,Nfe),e(Nfe,t2o),e(Fs,a2o),e(Fs,oj),e(oj,n2o),e(Fs,s2o),e(Fs,rj),e(rj,l2o),e(Fs,i2o),e(k,d2o),e(k,Ts),e(Ts,qfe),e(qfe,c2o),e(Ts,m2o),e(Ts,tj),e(tj,f2o),e(Ts,g2o),e(Ts,aj),e(aj,h2o),e(Ts,u2o),e(k,p2o),e(k,Ms),e(Ms,jfe),e(jfe,_2o),e(Ms,b2o),e(Ms,nj),e(nj,v2o),e(Ms,F2o),e(Ms,sj),e(sj,T2o),e(Ms,M2o),e(k,E2o),e(k,Es),e(Es,Dfe),e(Dfe,C2o),e(Es,w2o),e(Es,lj),e(lj,A2o),e(Es,L2o),e(Es,ij),e(ij,y2o),e(Es,x2o),e(k,$2o),e(k,du),e(du,Gfe),e(Gfe,k2o),e(du,S2o),e(du,dj),e(dj,R2o),e(du,P2o),e(k,B2o),e(k,Cs),e(Cs,Ofe),e(Ofe,I2o),e(Cs,N2o),e(Cs,cj),e(cj,q2o),e(Cs,j2o),e(Cs,mj),e(mj,D2o),e(Cs,G2o),e(k,O2o),e(k,cu),e(cu,Vfe),e(Vfe,V2o),e(cu,X2o),e(cu,fj),e(fj,z2o),e(cu,Q2o),e(k,W2o),e(k,ws),e(ws,Xfe),e(Xfe,U2o),e(ws,H2o),e(ws,gj),e(gj,J2o),e(ws,Y2o),e(ws,hj),e(hj,K2o),e(ws,Z2o),e(k,e1o),e(k,As),e(As,zfe),e(zfe,o1o),e(As,r1o),e(As,uj),e(uj,t1o),e(As,a1o),e(As,pj),e(pj,n1o),e(As,s1o),e(k,l1o),e(k,Ls),e(Ls,Qfe),e(Qfe,i1o),e(Ls,d1o),e(Ls,_j),e(_j,c1o),e(Ls,m1o),e(Ls,bj),e(bj,f1o),e(Ls,g1o),e(k,h1o),e(k,mu),e(mu,Wfe),e(Wfe,u1o),e(mu,p1o),e(mu,vj),e(vj,_1o),e(mu,b1o),e(k,v1o),e(k,fu),e(fu,Ufe),e(Ufe,F1o),e(fu,T1o),e(fu,Fj),e(Fj,M1o),e(fu,E1o),e(k,C1o),e(k,ys),e(ys,Hfe),e(Hfe,w1o),e(ys,A1o),e(ys,Tj),e(Tj,L1o),e(ys,y1o),e(ys,Mj),e(Mj,x1o),e(ys,$1o),e(k,k1o),e(k,xs),e(xs,Jfe),e(Jfe,S1o),e(xs,R1o),e(xs,Ej),e(Ej,P1o),e(xs,B1o),e(xs,Cj),e(Cj,I1o),e(xs,N1o),e(k,q1o),e(k,$s),e($s,Yfe),e(Yfe,j1o),e($s,D1o),e($s,wj),e(wj,G1o),e($s,O1o),e($s,Aj),e(Aj,V1o),e($s,X1o),e(k,z1o),e(k,gu),e(gu,Kfe),e(Kfe,Q1o),e(gu,W1o),e(gu,Lj),e(Lj,U1o),e(gu,H1o),e(k,J1o),e(k,ks),e(ks,Zfe),e(Zfe,Y1o),e(ks,K1o),e(ks,yj),e(yj,Z1o),e(ks,evo),e(ks,xj),e(xj,ovo),e(ks,rvo),e(k,tvo),e(k,Ss),e(Ss,ege),e(ege,avo),e(Ss,nvo),e(Ss,$j),e($j,svo),e(Ss,lvo),e(Ss,kj),e(kj,ivo),e(Ss,dvo),e(k,cvo),e(k,Rs),e(Rs,oge),e(oge,mvo),e(Rs,fvo),e(Rs,Sj),e(Sj,gvo),e(Rs,hvo),e(Rs,Rj),e(Rj,uvo),e(Rs,pvo),e(k,_vo),e(k,Ps),e(Ps,rge),e(rge,bvo),e(Ps,vvo),e(Ps,Pj),e(Pj,Fvo),e(Ps,Tvo),e(Ps,Bj),e(Bj,Mvo),e(Ps,Evo),e(k,Cvo),e(k,Bs),e(Bs,tge),e(tge,wvo),e(Bs,Avo),e(Bs,Ij),e(Ij,Lvo),e(Bs,yvo),e(Bs,Nj),e(Nj,xvo),e(Bs,$vo),e(k,kvo),e(k,Is),e(Is,age),e(age,Svo),e(Is,Rvo),e(Is,qj),e(qj,Pvo),e(Is,Bvo),e(Is,jj),e(jj,Ivo),e(Is,Nvo),e(k,qvo),e(k,Ns),e(Ns,nge),e(nge,jvo),e(Ns,Dvo),e(Ns,Dj),e(Dj,Gvo),e(Ns,Ovo),e(Ns,Gj),e(Gj,Vvo),e(Ns,Xvo),e(k,zvo),e(k,qs),e(qs,sge),e(sge,Qvo),e(qs,Wvo),e(qs,Oj),e(Oj,Uvo),e(qs,Hvo),e(qs,Vj),e(Vj,Jvo),e(qs,Yvo),e(k,Kvo),e(k,hu),e(hu,lge),e(lge,Zvo),e(hu,eFo),e(hu,Xj),e(Xj,oFo),e(hu,rFo),e(k,tFo),e(k,js),e(js,ige),e(ige,aFo),e(js,nFo),e(js,zj),e(zj,sFo),e(js,lFo),e(js,Qj),e(Qj,iFo),e(js,dFo),e(k,cFo),e(k,uu),e(uu,dge),e(dge,mFo),e(uu,fFo),e(uu,Wj),e(Wj,gFo),e(uu,hFo),e(k,uFo),e(k,pu),e(pu,cge),e(cge,pFo),e(pu,_Fo),e(pu,Uj),e(Uj,bFo),e(pu,vFo),e(k,FFo),e(k,Ds),e(Ds,mge),e(mge,TFo),e(Ds,MFo),e(Ds,Hj),e(Hj,EFo),e(Ds,CFo),e(Ds,Jj),e(Jj,wFo),e(Ds,AFo),e(k,LFo),e(k,Gs),e(Gs,fge),e(fge,yFo),e(Gs,xFo),e(Gs,Yj),e(Yj,$Fo),e(Gs,kFo),e(Gs,Kj),e(Kj,SFo),e(Gs,RFo),e(k,PFo),e(k,Os),e(Os,gge),e(gge,BFo),e(Os,IFo),e(Os,Zj),e(Zj,NFo),e(Os,qFo),e(Os,eD),e(eD,jFo),e(Os,DFo),e(k,GFo),e(k,_u),e(_u,hge),e(hge,OFo),e(_u,VFo),e(_u,oD),e(oD,XFo),e(_u,zFo),e(k,QFo),e(k,Vs),e(Vs,uge),e(uge,WFo),e(Vs,UFo),e(Vs,rD),e(rD,HFo),e(Vs,JFo),e(Vs,tD),e(tD,YFo),e(Vs,KFo),e(k,ZFo),e(k,Xs),e(Xs,pge),e(pge,eTo),e(Xs,oTo),e(Xs,aD),e(aD,rTo),e(Xs,tTo),e(Xs,nD),e(nD,aTo),e(Xs,nTo),e(k,sTo),e(k,zs),e(zs,_ge),e(_ge,lTo),e(zs,iTo),e(zs,sD),e(sD,dTo),e(zs,cTo),e(zs,lD),e(lD,mTo),e(zs,fTo),e(k,gTo),e(k,Qs),e(Qs,bge),e(bge,hTo),e(Qs,uTo),e(Qs,iD),e(iD,pTo),e(Qs,_To),e(Qs,dD),e(dD,bTo),e(Qs,vTo),e(k,FTo),e(k,Ws),e(Ws,vge),e(vge,TTo),e(Ws,MTo),e(Ws,cD),e(cD,ETo),e(Ws,CTo),e(Ws,mD),e(mD,wTo),e(Ws,ATo),e(k,LTo),e(k,Us),e(Us,Fge),e(Fge,yTo),e(Us,xTo),e(Us,fD),e(fD,$To),e(Us,kTo),e(Us,gD),e(gD,STo),e(Us,RTo),e(k,PTo),e(k,Hs),e(Hs,Tge),e(Tge,BTo),e(Hs,ITo),e(Hs,hD),e(hD,NTo),e(Hs,qTo),e(Hs,uD),e(uD,jTo),e(Hs,DTo),e(k,GTo),e(k,Js),e(Js,Mge),e(Mge,OTo),e(Js,VTo),e(Js,pD),e(pD,XTo),e(Js,zTo),e(Js,_D),e(_D,QTo),e(Js,WTo),e(k,UTo),e(k,bu),e(bu,Ege),e(Ege,HTo),e(bu,JTo),e(bu,bD),e(bD,YTo),e(bu,KTo),e(k,ZTo),e(k,Ys),e(Ys,Cge),e(Cge,eMo),e(Ys,oMo),e(Ys,vD),e(vD,rMo),e(Ys,tMo),e(Ys,FD),e(FD,aMo),e(Ys,nMo),e(k,sMo),e(k,Ks),e(Ks,wge),e(wge,lMo),e(Ks,iMo),e(Ks,TD),e(TD,dMo),e(Ks,cMo),e(Ks,MD),e(MD,mMo),e(Ks,fMo),e(k,gMo),e(k,vu),e(vu,Age),e(Age,hMo),e(vu,uMo),e(vu,ED),e(ED,pMo),e(vu,_Mo),e(k,bMo),e(k,Fu),e(Fu,Lge),e(Lge,vMo),e(Fu,FMo),e(Fu,CD),e(CD,TMo),e(Fu,MMo),e(k,EMo),e(k,Tu),e(Tu,yge),e(yge,CMo),e(Tu,wMo),e(Tu,wD),e(wD,AMo),e(Tu,LMo),e(k,yMo),e(k,Mu),e(Mu,xge),e(xge,xMo),e(Mu,$Mo),e(Mu,AD),e(AD,kMo),e(Mu,SMo),e(k,RMo),e(k,Zs),e(Zs,$ge),e($ge,PMo),e(Zs,BMo),e(Zs,LD),e(LD,IMo),e(Zs,NMo),e(Zs,yD),e(yD,qMo),e(Zs,jMo),e(k,DMo),e(k,Eu),e(Eu,kge),e(kge,GMo),e(Eu,OMo),e(Eu,xD),e(xD,VMo),e(Eu,XMo),e(k,zMo),e(k,el),e(el,Sge),e(Sge,QMo),e(el,WMo),e(el,$D),e($D,UMo),e(el,HMo),e(el,kD),e(kD,JMo),e(el,YMo),e(k,KMo),e(k,ol),e(ol,Rge),e(Rge,ZMo),e(ol,eEo),e(ol,SD),e(SD,oEo),e(ol,rEo),e(ol,RD),e(RD,tEo),e(ol,aEo),e(k,nEo),e(k,rl),e(rl,Pge),e(Pge,sEo),e(rl,lEo),e(rl,PD),e(PD,iEo),e(rl,dEo),e(rl,BD),e(BD,cEo),e(rl,mEo),e(k,fEo),e(k,tl),e(tl,Bge),e(Bge,gEo),e(tl,hEo),e(tl,ID),e(ID,uEo),e(tl,pEo),e(tl,ND),e(ND,_Eo),e(tl,bEo),e(k,vEo),e(k,al),e(al,Ige),e(Ige,FEo),e(al,TEo),e(al,qD),e(qD,MEo),e(al,EEo),e(al,jD),e(jD,CEo),e(al,wEo),e(k,AEo),e(k,nl),e(nl,Nge),e(Nge,LEo),e(nl,yEo),e(nl,DD),e(DD,xEo),e(nl,$Eo),e(nl,GD),e(GD,kEo),e(nl,SEo),e(k,REo),e(k,Cu),e(Cu,qge),e(qge,PEo),e(Cu,BEo),e(Cu,OD),e(OD,IEo),e(Cu,NEo),e(k,qEo),e(k,wu),e(wu,jge),e(jge,jEo),e(wu,DEo),e(wu,VD),e(VD,GEo),e(wu,OEo),e(k,VEo),e(k,sl),e(sl,Dge),e(Dge,XEo),e(sl,zEo),e(sl,XD),e(XD,QEo),e(sl,WEo),e(sl,zD),e(zD,UEo),e(sl,HEo),e(k,JEo),e(k,ll),e(ll,Gge),e(Gge,YEo),e(ll,KEo),e(ll,QD),e(QD,ZEo),e(ll,e4o),e(ll,WD),e(WD,o4o),e(ll,r4o),e(k,t4o),e(k,il),e(il,Oge),e(Oge,a4o),e(il,n4o),e(il,UD),e(UD,s4o),e(il,l4o),e(il,HD),e(HD,i4o),e(il,d4o),e(k,c4o),e(k,Au),e(Au,Vge),e(Vge,m4o),e(Au,f4o),e(Au,JD),e(JD,g4o),e(Au,h4o),e(k,u4o),e(k,Lu),e(Lu,Xge),e(Xge,p4o),e(Lu,_4o),e(Lu,YD),e(YD,b4o),e(Lu,v4o),e(k,F4o),e(k,yu),e(yu,zge),e(zge,T4o),e(yu,M4o),e(yu,KD),e(KD,E4o),e(yu,C4o),e(k,w4o),e(k,dl),e(dl,Qge),e(Qge,A4o),e(dl,L4o),e(dl,ZD),e(ZD,y4o),e(dl,x4o),e(dl,eG),e(eG,$4o),e(dl,k4o),e(k,S4o),e(k,cl),e(cl,Wge),e(Wge,R4o),e(cl,P4o),e(cl,oG),e(oG,B4o),e(cl,I4o),e(cl,rG),e(rG,N4o),e(cl,q4o),e(k,j4o),e(k,xu),e(xu,Uge),e(Uge,D4o),e(xu,G4o),e(xu,tG),e(tG,O4o),e(xu,V4o),e(k,X4o),e(k,$u),e($u,Hge),e(Hge,z4o),e($u,Q4o),e($u,aG),e(aG,W4o),e($u,U4o),e(k,H4o),e(k,ku),e(ku,Jge),e(Jge,J4o),e(ku,Y4o),e(ku,nG),e(nG,K4o),e(ku,Z4o),e(k,eCo),e(k,ml),e(ml,Yge),e(Yge,oCo),e(ml,rCo),e(ml,sG),e(sG,tCo),e(ml,aCo),e(ml,lG),e(lG,nCo),e(ml,sCo),e(k,lCo),e(k,fl),e(fl,Kge),e(Kge,iCo),e(fl,dCo),e(fl,iG),e(iG,cCo),e(fl,mCo),e(fl,dG),e(dG,fCo),e(fl,gCo),e(k,hCo),e(k,Su),e(Su,Zge),e(Zge,uCo),e(Su,pCo),e(Su,cG),e(cG,_Co),e(Su,bCo),e(k,vCo),e(k,Ru),e(Ru,ehe),e(ehe,FCo),e(Ru,TCo),e(Ru,mG),e(mG,MCo),e(Ru,ECo),e(k,CCo),e(k,gl),e(gl,ohe),e(ohe,wCo),e(gl,ACo),e(gl,fG),e(fG,LCo),e(gl,yCo),e(gl,gG),e(gG,xCo),e(gl,$Co),e(k,kCo),e(k,hl),e(hl,rhe),e(rhe,SCo),e(hl,RCo),e(hl,hG),e(hG,PCo),e(hl,BCo),e(hl,uG),e(uG,ICo),e(hl,NCo),e(k,qCo),e(k,ul),e(ul,the),e(the,jCo),e(ul,DCo),e(ul,pG),e(pG,GCo),e(ul,OCo),e(ul,_G),e(_G,VCo),e(ul,XCo),e(k,zCo),e(k,pl),e(pl,ahe),e(ahe,QCo),e(pl,WCo),e(pl,bG),e(bG,UCo),e(pl,HCo),e(pl,vG),e(vG,JCo),e(pl,YCo),e(Br,KCo),M(Pu,Br,null),e(ko,ZCo),e(ko,Bu),M(ex,Bu,null),e(Bu,e3o),e(Bu,nhe),e(nhe,o3o),b(m,YKe,_),b(m,hd,_),e(hd,Iu),e(Iu,she),M(ox,she,null),e(hd,r3o),e(hd,lhe),e(lhe,t3o),b(m,KKe,_),b(m,So,_),M(rx,So,null),e(So,a3o),e(So,tx),e(tx,n3o),e(tx,FG),e(FG,s3o),e(tx,l3o),e(So,i3o),e(So,ax),e(ax,d3o),e(ax,ihe),e(ihe,c3o),e(ax,m3o),e(So,f3o),e(So,Ye),M(nx,Ye,null),e(Ye,g3o),e(Ye,dhe),e(dhe,h3o),e(Ye,u3o),e(Ye,Ha),e(Ha,p3o),e(Ha,che),e(che,_3o),e(Ha,b3o),e(Ha,mhe),e(mhe,v3o),e(Ha,F3o),e(Ha,fhe),e(fhe,T3o),e(Ha,M3o),e(Ye,E3o),e(Ye,z),e(z,Nu),e(Nu,ghe),e(ghe,C3o),e(Nu,w3o),e(Nu,TG),e(TG,A3o),e(Nu,L3o),e(z,y3o),e(z,qu),e(qu,hhe),e(hhe,x3o),e(qu,$3o),e(qu,MG),e(MG,k3o),e(qu,S3o),e(z,R3o),e(z,ju),e(ju,uhe),e(uhe,P3o),e(ju,B3o),e(ju,EG),e(EG,I3o),e(ju,N3o),e(z,q3o),e(z,Du),e(Du,phe),e(phe,j3o),e(Du,D3o),e(Du,CG),e(CG,G3o),e(Du,O3o),e(z,V3o),e(z,Gu),e(Gu,_he),e(_he,X3o),e(Gu,z3o),e(Gu,wG),e(wG,Q3o),e(Gu,W3o),e(z,U3o),e(z,Ou),e(Ou,bhe),e(bhe,H3o),e(Ou,J3o),e(Ou,AG),e(AG,Y3o),e(Ou,K3o),e(z,Z3o),e(z,Vu),e(Vu,vhe),e(vhe,e5o),e(Vu,o5o),e(Vu,LG),e(LG,r5o),e(Vu,t5o),e(z,a5o),e(z,Xu),e(Xu,Fhe),e(Fhe,n5o),e(Xu,s5o),e(Xu,yG),e(yG,l5o),e(Xu,i5o),e(z,d5o),e(z,zu),e(zu,The),e(The,c5o),e(zu,m5o),e(zu,xG),e(xG,f5o),e(zu,g5o),e(z,h5o),e(z,Qu),e(Qu,Mhe),e(Mhe,u5o),e(Qu,p5o),e(Qu,$G),e($G,_5o),e(Qu,b5o),e(z,v5o),e(z,Wu),e(Wu,Ehe),e(Ehe,F5o),e(Wu,T5o),e(Wu,kG),e(kG,M5o),e(Wu,E5o),e(z,C5o),e(z,Uu),e(Uu,Che),e(Che,w5o),e(Uu,A5o),e(Uu,SG),e(SG,L5o),e(Uu,y5o),e(z,x5o),e(z,Hu),e(Hu,whe),e(whe,$5o),e(Hu,k5o),e(Hu,RG),e(RG,S5o),e(Hu,R5o),e(z,P5o),e(z,Ju),e(Ju,Ahe),e(Ahe,B5o),e(Ju,I5o),e(Ju,PG),e(PG,N5o),e(Ju,q5o),e(z,j5o),e(z,Yu),e(Yu,Lhe),e(Lhe,D5o),e(Yu,G5o),e(Yu,BG),e(BG,O5o),e(Yu,V5o),e(z,X5o),e(z,Ku),e(Ku,yhe),e(yhe,z5o),e(Ku,Q5o),e(Ku,IG),e(IG,W5o),e(Ku,U5o),e(z,H5o),e(z,Zu),e(Zu,xhe),e(xhe,J5o),e(Zu,Y5o),e(Zu,NG),e(NG,K5o),e(Zu,Z5o),e(z,e0o),e(z,ep),e(ep,$he),e($he,o0o),e(ep,r0o),e(ep,qG),e(qG,t0o),e(ep,a0o),e(z,n0o),e(z,op),e(op,khe),e(khe,s0o),e(op,l0o),e(op,jG),e(jG,i0o),e(op,d0o),e(z,c0o),e(z,rp),e(rp,She),e(She,m0o),e(rp,f0o),e(rp,DG),e(DG,g0o),e(rp,h0o),e(z,u0o),e(z,tp),e(tp,Rhe),e(Rhe,p0o),e(tp,_0o),e(tp,GG),e(GG,b0o),e(tp,v0o),e(z,F0o),e(z,ap),e(ap,Phe),e(Phe,T0o),e(ap,M0o),e(ap,OG),e(OG,E0o),e(ap,C0o),e(z,w0o),e(z,np),e(np,Bhe),e(Bhe,A0o),e(np,L0o),e(np,VG),e(VG,y0o),e(np,x0o),e(z,$0o),e(z,sp),e(sp,Ihe),e(Ihe,k0o),e(sp,S0o),e(sp,XG),e(XG,R0o),e(sp,P0o),e(z,B0o),e(z,lp),e(lp,Nhe),e(Nhe,I0o),e(lp,N0o),e(lp,zG),e(zG,q0o),e(lp,j0o),e(z,D0o),e(z,ip),e(ip,qhe),e(qhe,G0o),e(ip,O0o),e(ip,QG),e(QG,V0o),e(ip,X0o),e(z,z0o),e(z,dp),e(dp,jhe),e(jhe,Q0o),e(dp,W0o),e(dp,WG),e(WG,U0o),e(dp,H0o),e(z,J0o),e(z,cp),e(cp,Dhe),e(Dhe,Y0o),e(cp,K0o),e(cp,UG),e(UG,Z0o),e(cp,ewo),e(z,owo),e(z,mp),e(mp,Ghe),e(Ghe,rwo),e(mp,two),e(mp,HG),e(HG,awo),e(mp,nwo),e(z,swo),e(z,fp),e(fp,Ohe),e(Ohe,lwo),e(fp,iwo),e(fp,JG),e(JG,dwo),e(fp,cwo),e(z,mwo),e(z,gp),e(gp,Vhe),e(Vhe,fwo),e(gp,gwo),e(gp,YG),e(YG,hwo),e(gp,uwo),e(z,pwo),e(z,hp),e(hp,Xhe),e(Xhe,_wo),e(hp,bwo),e(hp,KG),e(KG,vwo),e(hp,Fwo),e(z,Two),e(z,up),e(up,zhe),e(zhe,Mwo),e(up,Ewo),e(up,ZG),e(ZG,Cwo),e(up,wwo),e(z,Awo),e(z,pp),e(pp,Qhe),e(Qhe,Lwo),e(pp,ywo),e(pp,eO),e(eO,xwo),e(pp,$wo),e(z,kwo),e(z,_p),e(_p,Whe),e(Whe,Swo),e(_p,Rwo),e(_p,oO),e(oO,Pwo),e(_p,Bwo),e(z,Iwo),e(z,bp),e(bp,Uhe),e(Uhe,Nwo),e(bp,qwo),e(bp,rO),e(rO,jwo),e(bp,Dwo),e(z,Gwo),e(z,vp),e(vp,Hhe),e(Hhe,Owo),e(vp,Vwo),e(vp,tO),e(tO,Xwo),e(vp,zwo),e(z,Qwo),e(z,Fp),e(Fp,Jhe),e(Jhe,Wwo),e(Fp,Uwo),e(Fp,aO),e(aO,Hwo),e(Fp,Jwo),e(z,Ywo),e(z,Tp),e(Tp,Yhe),e(Yhe,Kwo),e(Tp,Zwo),e(Tp,nO),e(nO,eAo),e(Tp,oAo),e(z,rAo),e(z,Mp),e(Mp,Khe),e(Khe,tAo),e(Mp,aAo),e(Mp,sO),e(sO,nAo),e(Mp,sAo),e(z,lAo),e(z,Ep),e(Ep,Zhe),e(Zhe,iAo),e(Ep,dAo),e(Ep,lO),e(lO,cAo),e(Ep,mAo),e(z,fAo),e(z,Cp),e(Cp,eue),e(eue,gAo),e(Cp,hAo),e(Cp,iO),e(iO,uAo),e(Cp,pAo),e(Ye,_Ao),M(wp,Ye,null),e(Ye,bAo),M(Ap,Ye,null),e(So,vAo),e(So,Lp),M(sx,Lp,null),e(Lp,FAo),e(Lp,oue),e(oue,TAo),b(m,ZKe,_),b(m,ud,_),e(ud,yp),e(yp,rue),M(lx,rue,null),e(ud,MAo),e(ud,tue),e(tue,EAo),b(m,eZe,_),b(m,Ro,_),M(ix,Ro,null),e(Ro,CAo),e(Ro,dx),e(dx,wAo),e(dx,dO),e(dO,AAo),e(dx,LAo),e(Ro,yAo),e(Ro,cx),e(cx,xAo),e(cx,aue),e(aue,$Ao),e(cx,kAo),e(Ro,SAo),e(Ro,Ke),M(mx,Ke,null),e(Ke,RAo),e(Ke,nue),e(nue,PAo),e(Ke,BAo),e(Ke,pd),e(pd,IAo),e(pd,sue),e(sue,NAo),e(pd,qAo),e(pd,lue),e(lue,jAo),e(pd,DAo),e(Ke,GAo),e(Ke,ie),e(ie,xp),e(xp,iue),e(iue,OAo),e(xp,VAo),e(xp,cO),e(cO,XAo),e(xp,zAo),e(ie,QAo),e(ie,$p),e($p,due),e(due,WAo),e($p,UAo),e($p,mO),e(mO,HAo),e($p,JAo),e(ie,YAo),e(ie,kp),e(kp,cue),e(cue,KAo),e(kp,ZAo),e(kp,fO),e(fO,e6o),e(kp,o6o),e(ie,r6o),e(ie,Sp),e(Sp,mue),e(mue,t6o),e(Sp,a6o),e(Sp,gO),e(gO,n6o),e(Sp,s6o),e(ie,l6o),e(ie,Rp),e(Rp,fue),e(fue,i6o),e(Rp,d6o),e(Rp,hO),e(hO,c6o),e(Rp,m6o),e(ie,f6o),e(ie,Pp),e(Pp,gue),e(gue,g6o),e(Pp,h6o),e(Pp,uO),e(uO,u6o),e(Pp,p6o),e(ie,_6o),e(ie,Bp),e(Bp,hue),e(hue,b6o),e(Bp,v6o),e(Bp,pO),e(pO,F6o),e(Bp,T6o),e(ie,M6o),e(ie,Ip),e(Ip,uue),e(uue,E6o),e(Ip,C6o),e(Ip,_O),e(_O,w6o),e(Ip,A6o),e(ie,L6o),e(ie,Np),e(Np,pue),e(pue,y6o),e(Np,x6o),e(Np,bO),e(bO,$6o),e(Np,k6o),e(ie,S6o),e(ie,qp),e(qp,_ue),e(_ue,R6o),e(qp,P6o),e(qp,vO),e(vO,B6o),e(qp,I6o),e(ie,N6o),e(ie,jp),e(jp,bue),e(bue,q6o),e(jp,j6o),e(jp,FO),e(FO,D6o),e(jp,G6o),e(ie,O6o),e(ie,Dp),e(Dp,vue),e(vue,V6o),e(Dp,X6o),e(Dp,TO),e(TO,z6o),e(Dp,Q6o),e(ie,W6o),e(ie,Gp),e(Gp,Fue),e(Fue,U6o),e(Gp,H6o),e(Gp,MO),e(MO,J6o),e(Gp,Y6o),e(ie,K6o),e(ie,Op),e(Op,Tue),e(Tue,Z6o),e(Op,e7o),e(Op,EO),e(EO,o7o),e(Op,r7o),e(ie,t7o),e(ie,Vp),e(Vp,Mue),e(Mue,a7o),e(Vp,n7o),e(Vp,CO),e(CO,s7o),e(Vp,l7o),e(ie,i7o),e(ie,Xp),e(Xp,Eue),e(Eue,d7o),e(Xp,c7o),e(Xp,wO),e(wO,m7o),e(Xp,f7o),e(ie,g7o),e(ie,zp),e(zp,Cue),e(Cue,h7o),e(zp,u7o),e(zp,AO),e(AO,p7o),e(zp,_7o),e(ie,b7o),e(ie,Qp),e(Qp,wue),e(wue,v7o),e(Qp,F7o),e(Qp,LO),e(LO,T7o),e(Qp,M7o),e(ie,E7o),e(ie,Wp),e(Wp,Aue),e(Aue,C7o),e(Wp,w7o),e(Wp,yO),e(yO,A7o),e(Wp,L7o),e(ie,y7o),e(ie,Up),e(Up,Lue),e(Lue,x7o),e(Up,$7o),e(Up,xO),e(xO,k7o),e(Up,S7o),e(ie,R7o),e(ie,Hp),e(Hp,yue),e(yue,P7o),e(Hp,B7o),e(Hp,$O),e($O,I7o),e(Hp,N7o),e(Ke,q7o),M(Jp,Ke,null),e(Ke,j7o),M(Yp,Ke,null),e(Ro,D7o),e(Ro,Kp),M(fx,Kp,null),e(Kp,G7o),e(Kp,xue),e(xue,O7o),b(m,oZe,_),b(m,_d,_),e(_d,Zp),e(Zp,$ue),M(gx,$ue,null),e(_d,V7o),e(_d,kue),e(kue,X7o),b(m,rZe,_),b(m,Po,_),M(hx,Po,null),e(Po,z7o),e(Po,bd),e(bd,Q7o),e(bd,kO),e(kO,W7o),e(bd,U7o),e(bd,SO),e(SO,H7o),e(bd,J7o),e(Po,Y7o),e(Po,ux),e(ux,K7o),e(ux,Sue),e(Sue,Z7o),e(ux,eLo),e(Po,oLo),e(Po,_t),M(px,_t,null),e(_t,rLo),e(_t,Rue),e(Rue,tLo),e(_t,aLo),e(_t,vd),e(vd,nLo),e(vd,Pue),e(Pue,sLo),e(vd,lLo),e(vd,RO),e(RO,iLo),e(vd,dLo),e(_t,cLo),M(e_,_t,null),e(Po,mLo),e(Po,Ze),M(_x,Ze,null),e(Ze,fLo),e(Ze,Bue),e(Bue,gLo),e(Ze,hLo),e(Ze,Ja),e(Ja,uLo),e(Ja,Iue),e(Iue,pLo),e(Ja,_Lo),e(Ja,Nue),e(Nue,bLo),e(Ja,vLo),e(Ja,que),e(que,FLo),e(Ja,TLo),e(Ze,MLo),e(Ze,y),e(y,o_),e(o_,jue),e(jue,ELo),e(o_,CLo),e(o_,PO),e(PO,wLo),e(o_,ALo),e(y,LLo),e(y,r_),e(r_,Due),e(Due,yLo),e(r_,xLo),e(r_,BO),e(BO,$Lo),e(r_,kLo),e(y,SLo),e(y,t_),e(t_,Gue),e(Gue,RLo),e(t_,PLo),e(t_,IO),e(IO,BLo),e(t_,ILo),e(y,NLo),e(y,a_),e(a_,Oue),e(Oue,qLo),e(a_,jLo),e(a_,NO),e(NO,DLo),e(a_,GLo),e(y,OLo),e(y,n_),e(n_,Vue),e(Vue,VLo),e(n_,XLo),e(n_,qO),e(qO,zLo),e(n_,QLo),e(y,WLo),e(y,s_),e(s_,Xue),e(Xue,ULo),e(s_,HLo),e(s_,jO),e(jO,JLo),e(s_,YLo),e(y,KLo),e(y,l_),e(l_,zue),e(zue,ZLo),e(l_,eyo),e(l_,DO),e(DO,oyo),e(l_,ryo),e(y,tyo),e(y,i_),e(i_,Que),e(Que,ayo),e(i_,nyo),e(i_,GO),e(GO,syo),e(i_,lyo),e(y,iyo),e(y,d_),e(d_,Wue),e(Wue,dyo),e(d_,cyo),e(d_,OO),e(OO,myo),e(d_,fyo),e(y,gyo),e(y,c_),e(c_,Uue),e(Uue,hyo),e(c_,uyo),e(c_,VO),e(VO,pyo),e(c_,_yo),e(y,byo),e(y,m_),e(m_,Hue),e(Hue,vyo),e(m_,Fyo),e(m_,XO),e(XO,Tyo),e(m_,Myo),e(y,Eyo),e(y,f_),e(f_,Jue),e(Jue,Cyo),e(f_,wyo),e(f_,zO),e(zO,Ayo),e(f_,Lyo),e(y,yyo),e(y,g_),e(g_,Yue),e(Yue,xyo),e(g_,$yo),e(g_,QO),e(QO,kyo),e(g_,Syo),e(y,Ryo),e(y,h_),e(h_,Kue),e(Kue,Pyo),e(h_,Byo),e(h_,WO),e(WO,Iyo),e(h_,Nyo),e(y,qyo),e(y,u_),e(u_,Zue),e(Zue,jyo),e(u_,Dyo),e(u_,UO),e(UO,Gyo),e(u_,Oyo),e(y,Vyo),e(y,p_),e(p_,epe),e(epe,Xyo),e(p_,zyo),e(p_,HO),e(HO,Qyo),e(p_,Wyo),e(y,Uyo),e(y,__),e(__,ope),e(ope,Hyo),e(__,Jyo),e(__,JO),e(JO,Yyo),e(__,Kyo),e(y,Zyo),e(y,b_),e(b_,rpe),e(rpe,e8o),e(b_,o8o),e(b_,YO),e(YO,r8o),e(b_,t8o),e(y,a8o),e(y,v_),e(v_,tpe),e(tpe,n8o),e(v_,s8o),e(v_,KO),e(KO,l8o),e(v_,i8o),e(y,d8o),e(y,F_),e(F_,ape),e(ape,c8o),e(F_,m8o),e(F_,ZO),e(ZO,f8o),e(F_,g8o),e(y,h8o),e(y,T_),e(T_,npe),e(npe,u8o),e(T_,p8o),e(T_,eV),e(eV,_8o),e(T_,b8o),e(y,v8o),e(y,M_),e(M_,spe),e(spe,F8o),e(M_,T8o),e(M_,oV),e(oV,M8o),e(M_,E8o),e(y,C8o),e(y,E_),e(E_,lpe),e(lpe,w8o),e(E_,A8o),e(E_,rV),e(rV,L8o),e(E_,y8o),e(y,x8o),e(y,C_),e(C_,ipe),e(ipe,$8o),e(C_,k8o),e(C_,tV),e(tV,S8o),e(C_,R8o),e(y,P8o),e(y,w_),e(w_,dpe),e(dpe,B8o),e(w_,I8o),e(w_,aV),e(aV,N8o),e(w_,q8o),e(y,j8o),e(y,A_),e(A_,cpe),e(cpe,D8o),e(A_,G8o),e(A_,nV),e(nV,O8o),e(A_,V8o),e(y,X8o),e(y,L_),e(L_,mpe),e(mpe,z8o),e(L_,Q8o),e(L_,sV),e(sV,W8o),e(L_,U8o),e(y,H8o),e(y,y_),e(y_,fpe),e(fpe,J8o),e(y_,Y8o),e(y_,lV),e(lV,K8o),e(y_,Z8o),e(y,e9o),e(y,x_),e(x_,gpe),e(gpe,o9o),e(x_,r9o),e(x_,iV),e(iV,t9o),e(x_,a9o),e(y,n9o),e(y,$_),e($_,hpe),e(hpe,s9o),e($_,l9o),e($_,dV),e(dV,i9o),e($_,d9o),e(y,c9o),e(y,k_),e(k_,upe),e(upe,m9o),e(k_,f9o),e(k_,cV),e(cV,g9o),e(k_,h9o),e(y,u9o),e(y,S_),e(S_,ppe),e(ppe,p9o),e(S_,_9o),e(S_,mV),e(mV,b9o),e(S_,v9o),e(y,F9o),e(y,R_),e(R_,_pe),e(_pe,T9o),e(R_,M9o),e(R_,fV),e(fV,E9o),e(R_,C9o),e(y,w9o),e(y,P_),e(P_,bpe),e(bpe,A9o),e(P_,L9o),e(P_,gV),e(gV,y9o),e(P_,x9o),e(y,$9o),e(y,B_),e(B_,vpe),e(vpe,k9o),e(B_,S9o),e(B_,hV),e(hV,R9o),e(B_,P9o),e(y,B9o),e(y,I_),e(I_,Fpe),e(Fpe,I9o),e(I_,N9o),e(I_,uV),e(uV,q9o),e(I_,j9o),e(y,D9o),e(y,N_),e(N_,Tpe),e(Tpe,G9o),e(N_,O9o),e(N_,pV),e(pV,V9o),e(N_,X9o),e(y,z9o),e(y,q_),e(q_,Mpe),e(Mpe,Q9o),e(q_,W9o),e(q_,_V),e(_V,U9o),e(q_,H9o),e(y,J9o),e(y,_l),e(_l,Epe),e(Epe,Y9o),e(_l,K9o),e(_l,bV),e(bV,Z9o),e(_l,exo),e(_l,vV),e(vV,oxo),e(_l,rxo),e(y,txo),e(y,j_),e(j_,Cpe),e(Cpe,axo),e(j_,nxo),e(j_,FV),e(FV,sxo),e(j_,lxo),e(y,ixo),e(y,D_),e(D_,wpe),e(wpe,dxo),e(D_,cxo),e(D_,TV),e(TV,mxo),e(D_,fxo),e(y,gxo),e(y,G_),e(G_,Ape),e(Ape,hxo),e(G_,uxo),e(G_,MV),e(MV,pxo),e(G_,_xo),e(y,bxo),e(y,O_),e(O_,Lpe),e(Lpe,vxo),e(O_,Fxo),e(O_,EV),e(EV,Txo),e(O_,Mxo),e(y,Exo),e(y,V_),e(V_,ype),e(ype,Cxo),e(V_,wxo),e(V_,CV),e(CV,Axo),e(V_,Lxo),e(y,yxo),e(y,X_),e(X_,xpe),e(xpe,xxo),e(X_,$xo),e(X_,wV),e(wV,kxo),e(X_,Sxo),e(y,Rxo),e(y,z_),e(z_,$pe),e($pe,Pxo),e(z_,Bxo),e(z_,AV),e(AV,Ixo),e(z_,Nxo),e(y,qxo),e(y,Q_),e(Q_,kpe),e(kpe,jxo),e(Q_,Dxo),e(Q_,LV),e(LV,Gxo),e(Q_,Oxo),e(y,Vxo),e(y,W_),e(W_,Spe),e(Spe,Xxo),e(W_,zxo),e(W_,yV),e(yV,Qxo),e(W_,Wxo),e(y,Uxo),e(y,U_),e(U_,Rpe),e(Rpe,Hxo),e(U_,Jxo),e(U_,xV),e(xV,Yxo),e(U_,Kxo),e(y,Zxo),e(y,H_),e(H_,Ppe),e(Ppe,e$o),e(H_,o$o),e(H_,$V),e($V,r$o),e(H_,t$o),e(y,a$o),e(y,J_),e(J_,Bpe),e(Bpe,n$o),e(J_,s$o),e(J_,kV),e(kV,l$o),e(J_,i$o),e(y,d$o),e(y,Y_),e(Y_,Ipe),e(Ipe,c$o),e(Y_,m$o),e(Y_,SV),e(SV,f$o),e(Y_,g$o),e(y,h$o),e(y,K_),e(K_,Npe),e(Npe,u$o),e(K_,p$o),e(K_,RV),e(RV,_$o),e(K_,b$o),e(y,v$o),e(y,Z_),e(Z_,qpe),e(qpe,F$o),e(Z_,T$o),e(Z_,PV),e(PV,M$o),e(Z_,E$o),e(y,C$o),e(y,eb),e(eb,jpe),e(jpe,w$o),e(eb,A$o),e(eb,BV),e(BV,L$o),e(eb,y$o),e(y,x$o),e(y,ob),e(ob,Dpe),e(Dpe,$$o),e(ob,k$o),e(ob,IV),e(IV,S$o),e(ob,R$o),e(y,P$o),e(y,rb),e(rb,Gpe),e(Gpe,B$o),e(rb,I$o),e(rb,NV),e(NV,N$o),e(rb,q$o),e(y,j$o),e(y,tb),e(tb,Ope),e(Ope,D$o),e(tb,G$o),e(tb,qV),e(qV,O$o),e(tb,V$o),e(y,X$o),e(y,ab),e(ab,Vpe),e(Vpe,z$o),e(ab,Q$o),e(ab,jV),e(jV,W$o),e(ab,U$o),e(y,H$o),e(y,nb),e(nb,Xpe),e(Xpe,J$o),e(nb,Y$o),e(nb,DV),e(DV,K$o),e(nb,Z$o),e(y,eko),e(y,sb),e(sb,zpe),e(zpe,oko),e(sb,rko),e(sb,GV),e(GV,tko),e(sb,ako),e(y,nko),e(y,lb),e(lb,Qpe),e(Qpe,sko),e(lb,lko),e(lb,OV),e(OV,iko),e(lb,dko),e(y,cko),e(y,ib),e(ib,Wpe),e(Wpe,mko),e(ib,fko),e(ib,VV),e(VV,gko),e(ib,hko),e(y,uko),e(y,db),e(db,Upe),e(Upe,pko),e(db,_ko),e(db,XV),e(XV,bko),e(db,vko),e(y,Fko),e(y,cb),e(cb,Hpe),e(Hpe,Tko),e(cb,Mko),e(cb,zV),e(zV,Eko),e(cb,Cko),e(y,wko),e(y,mb),e(mb,Jpe),e(Jpe,Ako),e(mb,Lko),e(mb,QV),e(QV,yko),e(mb,xko),e(y,$ko),e(y,fb),e(fb,Ype),e(Ype,kko),e(fb,Sko),e(fb,WV),e(WV,Rko),e(fb,Pko),e(y,Bko),e(y,gb),e(gb,Kpe),e(Kpe,Iko),e(gb,Nko),e(gb,UV),e(UV,qko),e(gb,jko),e(y,Dko),e(y,hb),e(hb,Zpe),e(Zpe,Gko),e(hb,Oko),e(hb,HV),e(HV,Vko),e(hb,Xko),e(y,zko),e(y,ub),e(ub,e_e),e(e_e,Qko),e(ub,Wko),e(ub,JV),e(JV,Uko),e(ub,Hko),e(y,Jko),e(y,pb),e(pb,o_e),e(o_e,Yko),e(pb,Kko),e(pb,YV),e(YV,Zko),e(pb,eSo),e(y,oSo),e(y,_b),e(_b,r_e),e(r_e,rSo),e(_b,tSo),e(_b,KV),e(KV,aSo),e(_b,nSo),e(y,sSo),e(y,bb),e(bb,t_e),e(t_e,lSo),e(bb,iSo),e(bb,ZV),e(ZV,dSo),e(bb,cSo),e(y,mSo),e(y,vb),e(vb,a_e),e(a_e,fSo),e(vb,gSo),e(vb,eX),e(eX,hSo),e(vb,uSo),e(y,pSo),e(y,Fb),e(Fb,n_e),e(n_e,_So),e(Fb,bSo),e(Fb,oX),e(oX,vSo),e(Fb,FSo),e(y,TSo),e(y,Tb),e(Tb,s_e),e(s_e,MSo),e(Tb,ESo),e(Tb,rX),e(rX,CSo),e(Tb,wSo),e(y,ASo),e(y,Mb),e(Mb,l_e),e(l_e,LSo),e(Mb,ySo),e(Mb,tX),e(tX,xSo),e(Mb,$So),e(y,kSo),e(y,Eb),e(Eb,i_e),e(i_e,SSo),e(Eb,RSo),e(Eb,aX),e(aX,PSo),e(Eb,BSo),e(y,ISo),e(y,Cb),e(Cb,d_e),e(d_e,NSo),e(Cb,qSo),e(Cb,nX),e(nX,jSo),e(Cb,DSo),e(y,GSo),e(y,wb),e(wb,c_e),e(c_e,OSo),e(wb,VSo),e(wb,sX),e(sX,XSo),e(wb,zSo),e(y,QSo),e(y,Ab),e(Ab,m_e),e(m_e,WSo),e(Ab,USo),e(Ab,lX),e(lX,HSo),e(Ab,JSo),e(y,YSo),e(y,Lb),e(Lb,f_e),e(f_e,KSo),e(Lb,ZSo),e(Lb,iX),e(iX,eRo),e(Lb,oRo),e(y,rRo),e(y,yb),e(yb,g_e),e(g_e,tRo),e(yb,aRo),e(yb,dX),e(dX,nRo),e(yb,sRo),e(y,lRo),e(y,xb),e(xb,h_e),e(h_e,iRo),e(xb,dRo),e(xb,cX),e(cX,cRo),e(xb,mRo),e(y,fRo),e(y,$b),e($b,u_e),e(u_e,gRo),e($b,hRo),e($b,mX),e(mX,uRo),e($b,pRo),e(y,_Ro),e(y,kb),e(kb,p_e),e(p_e,bRo),e(kb,vRo),e(kb,fX),e(fX,FRo),e(kb,TRo),e(y,MRo),e(y,Sb),e(Sb,__e),e(__e,ERo),e(Sb,CRo),e(Sb,gX),e(gX,wRo),e(Sb,ARo),e(y,LRo),e(y,Rb),e(Rb,b_e),e(b_e,yRo),e(Rb,xRo),e(Rb,hX),e(hX,$Ro),e(Rb,kRo),e(y,SRo),e(y,Pb),e(Pb,v_e),e(v_e,RRo),e(Pb,PRo),e(Pb,uX),e(uX,BRo),e(Pb,IRo),e(y,NRo),e(y,Bb),e(Bb,F_e),e(F_e,qRo),e(Bb,jRo),e(Bb,pX),e(pX,DRo),e(Bb,GRo),e(y,ORo),e(y,Ib),e(Ib,T_e),e(T_e,VRo),e(Ib,XRo),e(Ib,_X),e(_X,zRo),e(Ib,QRo),e(y,WRo),e(y,Nb),e(Nb,M_e),e(M_e,URo),e(Nb,HRo),e(Nb,bX),e(bX,JRo),e(Nb,YRo),e(y,KRo),e(y,qb),e(qb,E_e),e(E_e,ZRo),e(qb,ePo),e(qb,vX),e(vX,oPo),e(qb,rPo),e(y,tPo),e(y,jb),e(jb,C_e),e(C_e,aPo),e(jb,nPo),e(jb,FX),e(FX,sPo),e(jb,lPo),e(y,iPo),e(y,Db),e(Db,w_e),e(w_e,dPo),e(Db,cPo),e(Db,TX),e(TX,mPo),e(Db,fPo),e(y,gPo),e(y,Gb),e(Gb,A_e),e(A_e,hPo),e(Gb,uPo),e(Gb,MX),e(MX,pPo),e(Gb,_Po),e(y,bPo),e(y,Ob),e(Ob,L_e),e(L_e,vPo),e(Ob,FPo),e(Ob,EX),e(EX,TPo),e(Ob,MPo),e(y,EPo),e(y,Vb),e(Vb,y_e),e(y_e,CPo),e(Vb,wPo),e(Vb,CX),e(CX,APo),e(Vb,LPo),e(y,yPo),e(y,Xb),e(Xb,x_e),e(x_e,xPo),e(Xb,$Po),e(Xb,wX),e(wX,kPo),e(Xb,SPo),e(y,RPo),e(y,zb),e(zb,$_e),e($_e,PPo),e(zb,BPo),e(zb,AX),e(AX,IPo),e(zb,NPo),e(y,qPo),e(y,Qb),e(Qb,k_e),e(k_e,jPo),e(Qb,DPo),e(Qb,LX),e(LX,GPo),e(Qb,OPo),e(y,VPo),e(y,Wb),e(Wb,S_e),e(S_e,XPo),e(Wb,zPo),e(Wb,yX),e(yX,QPo),e(Wb,WPo),e(y,UPo),e(y,Ub),e(Ub,R_e),e(R_e,HPo),e(Ub,JPo),e(Ub,xX),e(xX,YPo),e(Ub,KPo),e(y,ZPo),e(y,Hb),e(Hb,P_e),e(P_e,eBo),e(Hb,oBo),e(Hb,$X),e($X,rBo),e(Hb,tBo),e(y,aBo),e(y,Jb),e(Jb,B_e),e(B_e,nBo),e(Jb,sBo),e(Jb,kX),e(kX,lBo),e(Jb,iBo),e(y,dBo),e(y,Yb),e(Yb,I_e),e(I_e,cBo),e(Yb,mBo),e(Yb,SX),e(SX,fBo),e(Yb,gBo),e(y,hBo),e(y,Kb),e(Kb,N_e),e(N_e,uBo),e(Kb,pBo),e(Kb,RX),e(RX,_Bo),e(Kb,bBo),e(y,vBo),e(y,Zb),e(Zb,q_e),e(q_e,FBo),e(Zb,TBo),e(Zb,PX),e(PX,MBo),e(Zb,EBo),e(y,CBo),e(y,e2),e(e2,j_e),e(j_e,wBo),e(e2,ABo),e(e2,BX),e(BX,LBo),e(e2,yBo),e(y,xBo),e(y,o2),e(o2,D_e),e(D_e,$Bo),e(o2,kBo),e(o2,IX),e(IX,SBo),e(o2,RBo),e(y,PBo),e(y,r2),e(r2,G_e),e(G_e,BBo),e(r2,IBo),e(r2,NX),e(NX,NBo),e(r2,qBo),e(y,jBo),e(y,t2),e(t2,O_e),e(O_e,DBo),e(t2,GBo),e(t2,qX),e(qX,OBo),e(t2,VBo),e(y,XBo),e(y,a2),e(a2,V_e),e(V_e,zBo),e(a2,QBo),e(a2,jX),e(jX,WBo),e(a2,UBo),e(y,HBo),e(y,n2),e(n2,X_e),e(X_e,JBo),e(n2,YBo),e(n2,DX),e(DX,KBo),e(n2,ZBo),e(y,eIo),e(y,s2),e(s2,z_e),e(z_e,oIo),e(s2,rIo),e(s2,GX),e(GX,tIo),e(s2,aIo),e(y,nIo),e(y,l2),e(l2,Q_e),e(Q_e,sIo),e(l2,lIo),e(l2,OX),e(OX,iIo),e(l2,dIo),e(y,cIo),e(y,i2),e(i2,W_e),e(W_e,mIo),e(i2,fIo),e(i2,VX),e(VX,gIo),e(i2,hIo),e(y,uIo),e(y,d2),e(d2,U_e),e(U_e,pIo),e(d2,_Io),e(d2,XX),e(XX,bIo),e(d2,vIo),e(y,FIo),e(y,c2),e(c2,H_e),e(H_e,TIo),e(c2,MIo),e(c2,zX),e(zX,EIo),e(c2,CIo),e(y,wIo),e(y,m2),e(m2,J_e),e(J_e,AIo),e(m2,LIo),e(m2,QX),e(QX,yIo),e(m2,xIo),e(y,$Io),e(y,f2),e(f2,Y_e),e(Y_e,kIo),e(f2,SIo),e(f2,WX),e(WX,RIo),e(f2,PIo),e(y,BIo),e(y,g2),e(g2,K_e),e(K_e,IIo),e(g2,NIo),e(g2,UX),e(UX,qIo),e(g2,jIo),e(y,DIo),e(y,h2),e(h2,Z_e),e(Z_e,GIo),e(h2,OIo),e(h2,HX),e(HX,VIo),e(h2,XIo),e(Ze,zIo),e(Ze,u2),e(u2,QIo),e(u2,ebe),e(ebe,WIo),e(u2,UIo),e(u2,obe),e(obe,HIo),e(Ze,JIo),M(p2,Ze,null),b(m,tZe,_),b(m,Fd,_),e(Fd,_2),e(_2,rbe),M(bx,rbe,null),e(Fd,YIo),e(Fd,tbe),e(tbe,KIo),b(m,aZe,_),b(m,Bo,_),M(vx,Bo,null),e(Bo,ZIo),e(Bo,Td),e(Td,eNo),e(Td,JX),e(JX,oNo),e(Td,rNo),e(Td,YX),e(YX,tNo),e(Td,aNo),e(Bo,nNo),e(Bo,Fx),e(Fx,sNo),e(Fx,abe),e(abe,lNo),e(Fx,iNo),e(Bo,dNo),e(Bo,bt),M(Tx,bt,null),e(bt,cNo),e(bt,nbe),e(nbe,mNo),e(bt,fNo),e(bt,Md),e(Md,gNo),e(Md,sbe),e(sbe,hNo),e(Md,uNo),e(Md,KX),e(KX,pNo),e(Md,_No),e(bt,bNo),M(b2,bt,null),e(Bo,vNo),e(Bo,eo),M(Mx,eo,null),e(eo,FNo),e(eo,lbe),e(lbe,TNo),e(eo,MNo),e(eo,Ya),e(Ya,ENo),e(Ya,ibe),e(ibe,CNo),e(Ya,wNo),e(Ya,dbe),e(dbe,ANo),e(Ya,LNo),e(Ya,cbe),e(cbe,yNo),e(Ya,xNo),e(eo,$No),e(eo,G),e(G,v2),e(v2,mbe),e(mbe,kNo),e(v2,SNo),e(v2,ZX),e(ZX,RNo),e(v2,PNo),e(G,BNo),e(G,F2),e(F2,fbe),e(fbe,INo),e(F2,NNo),e(F2,ez),e(ez,qNo),e(F2,jNo),e(G,DNo),e(G,T2),e(T2,gbe),e(gbe,GNo),e(T2,ONo),e(T2,oz),e(oz,VNo),e(T2,XNo),e(G,zNo),e(G,M2),e(M2,hbe),e(hbe,QNo),e(M2,WNo),e(M2,rz),e(rz,UNo),e(M2,HNo),e(G,JNo),e(G,E2),e(E2,ube),e(ube,YNo),e(E2,KNo),e(E2,tz),e(tz,ZNo),e(E2,eqo),e(G,oqo),e(G,C2),e(C2,pbe),e(pbe,rqo),e(C2,tqo),e(C2,az),e(az,aqo),e(C2,nqo),e(G,sqo),e(G,w2),e(w2,_be),e(_be,lqo),e(w2,iqo),e(w2,nz),e(nz,dqo),e(w2,cqo),e(G,mqo),e(G,A2),e(A2,bbe),e(bbe,fqo),e(A2,gqo),e(A2,sz),e(sz,hqo),e(A2,uqo),e(G,pqo),e(G,L2),e(L2,vbe),e(vbe,_qo),e(L2,bqo),e(L2,lz),e(lz,vqo),e(L2,Fqo),e(G,Tqo),e(G,y2),e(y2,Fbe),e(Fbe,Mqo),e(y2,Eqo),e(y2,iz),e(iz,Cqo),e(y2,wqo),e(G,Aqo),e(G,x2),e(x2,Tbe),e(Tbe,Lqo),e(x2,yqo),e(x2,dz),e(dz,xqo),e(x2,$qo),e(G,kqo),e(G,$2),e($2,Mbe),e(Mbe,Sqo),e($2,Rqo),e($2,cz),e(cz,Pqo),e($2,Bqo),e(G,Iqo),e(G,k2),e(k2,Ebe),e(Ebe,Nqo),e(k2,qqo),e(k2,mz),e(mz,jqo),e(k2,Dqo),e(G,Gqo),e(G,S2),e(S2,Cbe),e(Cbe,Oqo),e(S2,Vqo),e(S2,fz),e(fz,Xqo),e(S2,zqo),e(G,Qqo),e(G,R2),e(R2,wbe),e(wbe,Wqo),e(R2,Uqo),e(R2,gz),e(gz,Hqo),e(R2,Jqo),e(G,Yqo),e(G,P2),e(P2,Abe),e(Abe,Kqo),e(P2,Zqo),e(P2,hz),e(hz,ejo),e(P2,ojo),e(G,rjo),e(G,B2),e(B2,Lbe),e(Lbe,tjo),e(B2,ajo),e(B2,uz),e(uz,njo),e(B2,sjo),e(G,ljo),e(G,I2),e(I2,ybe),e(ybe,ijo),e(I2,djo),e(I2,pz),e(pz,cjo),e(I2,mjo),e(G,fjo),e(G,N2),e(N2,xbe),e(xbe,gjo),e(N2,hjo),e(N2,_z),e(_z,ujo),e(N2,pjo),e(G,_jo),e(G,q2),e(q2,$be),e($be,bjo),e(q2,vjo),e(q2,bz),e(bz,Fjo),e(q2,Tjo),e(G,Mjo),e(G,j2),e(j2,kbe),e(kbe,Ejo),e(j2,Cjo),e(j2,vz),e(vz,wjo),e(j2,Ajo),e(G,Ljo),e(G,D2),e(D2,Sbe),e(Sbe,yjo),e(D2,xjo),e(D2,Fz),e(Fz,$jo),e(D2,kjo),e(G,Sjo),e(G,G2),e(G2,Rbe),e(Rbe,Rjo),e(G2,Pjo),e(G2,Tz),e(Tz,Bjo),e(G2,Ijo),e(G,Njo),e(G,O2),e(O2,Pbe),e(Pbe,qjo),e(O2,jjo),e(O2,Mz),e(Mz,Djo),e(O2,Gjo),e(G,Ojo),e(G,V2),e(V2,Bbe),e(Bbe,Vjo),e(V2,Xjo),e(V2,Ez),e(Ez,zjo),e(V2,Qjo),e(G,Wjo),e(G,X2),e(X2,Ibe),e(Ibe,Ujo),e(X2,Hjo),e(X2,Cz),e(Cz,Jjo),e(X2,Yjo),e(G,Kjo),e(G,z2),e(z2,Nbe),e(Nbe,Zjo),e(z2,eDo),e(z2,wz),e(wz,oDo),e(z2,rDo),e(G,tDo),e(G,Q2),e(Q2,qbe),e(qbe,aDo),e(Q2,nDo),e(Q2,Az),e(Az,sDo),e(Q2,lDo),e(G,iDo),e(G,W2),e(W2,jbe),e(jbe,dDo),e(W2,cDo),e(W2,Lz),e(Lz,mDo),e(W2,fDo),e(G,gDo),e(G,U2),e(U2,Dbe),e(Dbe,hDo),e(U2,uDo),e(U2,yz),e(yz,pDo),e(U2,_Do),e(G,bDo),e(G,H2),e(H2,Gbe),e(Gbe,vDo),e(H2,FDo),e(H2,xz),e(xz,TDo),e(H2,MDo),e(G,EDo),e(G,J2),e(J2,Obe),e(Obe,CDo),e(J2,wDo),e(J2,$z),e($z,ADo),e(J2,LDo),e(G,yDo),e(G,Y2),e(Y2,Vbe),e(Vbe,xDo),e(Y2,$Do),e(Y2,kz),e(kz,kDo),e(Y2,SDo),e(G,RDo),e(G,K2),e(K2,Xbe),e(Xbe,PDo),e(K2,BDo),e(K2,Sz),e(Sz,IDo),e(K2,NDo),e(G,qDo),e(G,Z2),e(Z2,zbe),e(zbe,jDo),e(Z2,DDo),e(Z2,Rz),e(Rz,GDo),e(Z2,ODo),e(G,VDo),e(G,e1),e(e1,Qbe),e(Qbe,XDo),e(e1,zDo),e(e1,Pz),e(Pz,QDo),e(e1,WDo),e(G,UDo),e(G,o1),e(o1,Wbe),e(Wbe,HDo),e(o1,JDo),e(o1,Bz),e(Bz,YDo),e(o1,KDo),e(G,ZDo),e(G,r1),e(r1,Ube),e(Ube,eGo),e(r1,oGo),e(r1,Iz),e(Iz,rGo),e(r1,tGo),e(G,aGo),e(G,t1),e(t1,Hbe),e(Hbe,nGo),e(t1,sGo),e(t1,Nz),e(Nz,lGo),e(t1,iGo),e(G,dGo),e(G,a1),e(a1,Jbe),e(Jbe,cGo),e(a1,mGo),e(a1,qz),e(qz,fGo),e(a1,gGo),e(G,hGo),e(G,n1),e(n1,Ybe),e(Ybe,uGo),e(n1,pGo),e(n1,jz),e(jz,_Go),e(n1,bGo),e(G,vGo),e(G,s1),e(s1,Kbe),e(Kbe,FGo),e(s1,TGo),e(s1,Dz),e(Dz,MGo),e(s1,EGo),e(G,CGo),e(G,l1),e(l1,Zbe),e(Zbe,wGo),e(l1,AGo),e(l1,Gz),e(Gz,LGo),e(l1,yGo),e(G,xGo),e(G,i1),e(i1,e2e),e(e2e,$Go),e(i1,kGo),e(i1,Oz),e(Oz,SGo),e(i1,RGo),e(G,PGo),e(G,d1),e(d1,o2e),e(o2e,BGo),e(d1,IGo),e(d1,Vz),e(Vz,NGo),e(d1,qGo),e(G,jGo),e(G,c1),e(c1,r2e),e(r2e,DGo),e(c1,GGo),e(c1,Xz),e(Xz,OGo),e(c1,VGo),e(G,XGo),e(G,m1),e(m1,t2e),e(t2e,zGo),e(m1,QGo),e(m1,zz),e(zz,WGo),e(m1,UGo),e(G,HGo),e(G,f1),e(f1,a2e),e(a2e,JGo),e(f1,YGo),e(f1,Qz),e(Qz,KGo),e(f1,ZGo),e(eo,eOo),e(eo,g1),e(g1,oOo),e(g1,n2e),e(n2e,rOo),e(g1,tOo),e(g1,s2e),e(s2e,aOo),e(eo,nOo),M(h1,eo,null),b(m,nZe,_),b(m,Ed,_),e(Ed,u1),e(u1,l2e),M(Ex,l2e,null),e(Ed,sOo),e(Ed,i2e),e(i2e,lOo),b(m,sZe,_),b(m,Io,_),M(Cx,Io,null),e(Io,iOo),e(Io,Cd),e(Cd,dOo),e(Cd,Wz),e(Wz,cOo),e(Cd,mOo),e(Cd,Uz),e(Uz,fOo),e(Cd,gOo),e(Io,hOo),e(Io,wx),e(wx,uOo),e(wx,d2e),e(d2e,pOo),e(wx,_Oo),e(Io,bOo),e(Io,vt),M(Ax,vt,null),e(vt,vOo),e(vt,c2e),e(c2e,FOo),e(vt,TOo),e(vt,wd),e(wd,MOo),e(wd,m2e),e(m2e,EOo),e(wd,COo),e(wd,Hz),e(Hz,wOo),e(wd,AOo),e(vt,LOo),M(p1,vt,null),e(Io,yOo),e(Io,oo),M(Lx,oo,null),e(oo,xOo),e(oo,f2e),e(f2e,$Oo),e(oo,kOo),e(oo,Ka),e(Ka,SOo),e(Ka,g2e),e(g2e,ROo),e(Ka,POo),e(Ka,h2e),e(h2e,BOo),e(Ka,IOo),e(Ka,u2e),e(u2e,NOo),e(Ka,qOo),e(oo,jOo),e(oo,Q),e(Q,_1),e(_1,p2e),e(p2e,DOo),e(_1,GOo),e(_1,Jz),e(Jz,OOo),e(_1,VOo),e(Q,XOo),e(Q,b1),e(b1,_2e),e(_2e,zOo),e(b1,QOo),e(b1,Yz),e(Yz,WOo),e(b1,UOo),e(Q,HOo),e(Q,v1),e(v1,b2e),e(b2e,JOo),e(v1,YOo),e(v1,Kz),e(Kz,KOo),e(v1,ZOo),e(Q,eVo),e(Q,F1),e(F1,v2e),e(v2e,oVo),e(F1,rVo),e(F1,Zz),e(Zz,tVo),e(F1,aVo),e(Q,nVo),e(Q,T1),e(T1,F2e),e(F2e,sVo),e(T1,lVo),e(T1,eQ),e(eQ,iVo),e(T1,dVo),e(Q,cVo),e(Q,M1),e(M1,T2e),e(T2e,mVo),e(M1,fVo),e(M1,oQ),e(oQ,gVo),e(M1,hVo),e(Q,uVo),e(Q,E1),e(E1,M2e),e(M2e,pVo),e(E1,_Vo),e(E1,rQ),e(rQ,bVo),e(E1,vVo),e(Q,FVo),e(Q,C1),e(C1,E2e),e(E2e,TVo),e(C1,MVo),e(C1,tQ),e(tQ,EVo),e(C1,CVo),e(Q,wVo),e(Q,w1),e(w1,C2e),e(C2e,AVo),e(w1,LVo),e(w1,aQ),e(aQ,yVo),e(w1,xVo),e(Q,$Vo),e(Q,A1),e(A1,w2e),e(w2e,kVo),e(A1,SVo),e(A1,nQ),e(nQ,RVo),e(A1,PVo),e(Q,BVo),e(Q,L1),e(L1,A2e),e(A2e,IVo),e(L1,NVo),e(L1,sQ),e(sQ,qVo),e(L1,jVo),e(Q,DVo),e(Q,y1),e(y1,L2e),e(L2e,GVo),e(y1,OVo),e(y1,lQ),e(lQ,VVo),e(y1,XVo),e(Q,zVo),e(Q,x1),e(x1,y2e),e(y2e,QVo),e(x1,WVo),e(x1,iQ),e(iQ,UVo),e(x1,HVo),e(Q,JVo),e(Q,$1),e($1,x2e),e(x2e,YVo),e($1,KVo),e($1,dQ),e(dQ,ZVo),e($1,eXo),e(Q,oXo),e(Q,k1),e(k1,$2e),e($2e,rXo),e(k1,tXo),e(k1,cQ),e(cQ,aXo),e(k1,nXo),e(Q,sXo),e(Q,S1),e(S1,k2e),e(k2e,lXo),e(S1,iXo),e(S1,mQ),e(mQ,dXo),e(S1,cXo),e(Q,mXo),e(Q,R1),e(R1,S2e),e(S2e,fXo),e(R1,gXo),e(R1,fQ),e(fQ,hXo),e(R1,uXo),e(Q,pXo),e(Q,P1),e(P1,R2e),e(R2e,_Xo),e(P1,bXo),e(P1,gQ),e(gQ,vXo),e(P1,FXo),e(Q,TXo),e(Q,B1),e(B1,P2e),e(P2e,MXo),e(B1,EXo),e(B1,hQ),e(hQ,CXo),e(B1,wXo),e(Q,AXo),e(Q,I1),e(I1,B2e),e(B2e,LXo),e(I1,yXo),e(I1,uQ),e(uQ,xXo),e(I1,$Xo),e(Q,kXo),e(Q,N1),e(N1,I2e),e(I2e,SXo),e(N1,RXo),e(N1,pQ),e(pQ,PXo),e(N1,BXo),e(Q,IXo),e(Q,q1),e(q1,N2e),e(N2e,NXo),e(q1,qXo),e(q1,_Q),e(_Q,jXo),e(q1,DXo),e(Q,GXo),e(Q,j1),e(j1,q2e),e(q2e,OXo),e(j1,VXo),e(j1,bQ),e(bQ,XXo),e(j1,zXo),e(Q,QXo),e(Q,D1),e(D1,j2e),e(j2e,WXo),e(D1,UXo),e(D1,vQ),e(vQ,HXo),e(D1,JXo),e(Q,YXo),e(Q,G1),e(G1,D2e),e(D2e,KXo),e(G1,ZXo),e(G1,FQ),e(FQ,ezo),e(G1,ozo),e(Q,rzo),e(Q,O1),e(O1,G2e),e(G2e,tzo),e(O1,azo),e(O1,TQ),e(TQ,nzo),e(O1,szo),e(Q,lzo),e(Q,V1),e(V1,O2e),e(O2e,izo),e(V1,dzo),e(V1,MQ),e(MQ,czo),e(V1,mzo),e(Q,fzo),e(Q,X1),e(X1,V2e),e(V2e,gzo),e(X1,hzo),e(X1,EQ),e(EQ,uzo),e(X1,pzo),e(Q,_zo),e(Q,z1),e(z1,X2e),e(X2e,bzo),e(z1,vzo),e(z1,CQ),e(CQ,Fzo),e(z1,Tzo),e(Q,Mzo),e(Q,Q1),e(Q1,z2e),e(z2e,Ezo),e(Q1,Czo),e(Q1,wQ),e(wQ,wzo),e(Q1,Azo),e(Q,Lzo),e(Q,W1),e(W1,Q2e),e(Q2e,yzo),e(W1,xzo),e(W1,AQ),e(AQ,$zo),e(W1,kzo),e(Q,Szo),e(Q,U1),e(U1,W2e),e(W2e,Rzo),e(U1,Pzo),e(U1,LQ),e(LQ,Bzo),e(U1,Izo),e(Q,Nzo),e(Q,H1),e(H1,U2e),e(U2e,qzo),e(H1,jzo),e(H1,yQ),e(yQ,Dzo),e(H1,Gzo),e(Q,Ozo),e(Q,J1),e(J1,H2e),e(H2e,Vzo),e(J1,Xzo),e(J1,xQ),e(xQ,zzo),e(J1,Qzo),e(Q,Wzo),e(Q,Y1),e(Y1,J2e),e(J2e,Uzo),e(Y1,Hzo),e(Y1,$Q),e($Q,Jzo),e(Y1,Yzo),e(Q,Kzo),e(Q,K1),e(K1,Y2e),e(Y2e,Zzo),e(K1,eQo),e(K1,kQ),e(kQ,oQo),e(K1,rQo),e(Q,tQo),e(Q,Z1),e(Z1,K2e),e(K2e,aQo),e(Z1,nQo),e(Z1,SQ),e(SQ,sQo),e(Z1,lQo),e(Q,iQo),e(Q,ev),e(ev,Z2e),e(Z2e,dQo),e(ev,cQo),e(ev,RQ),e(RQ,mQo),e(ev,fQo),e(Q,gQo),e(Q,ov),e(ov,e1e),e(e1e,hQo),e(ov,uQo),e(ov,PQ),e(PQ,pQo),e(ov,_Qo),e(Q,bQo),e(Q,rv),e(rv,o1e),e(o1e,vQo),e(rv,FQo),e(rv,BQ),e(BQ,TQo),e(rv,MQo),e(Q,EQo),e(Q,tv),e(tv,r1e),e(r1e,CQo),e(tv,wQo),e(tv,IQ),e(IQ,AQo),e(tv,LQo),e(Q,yQo),e(Q,av),e(av,t1e),e(t1e,xQo),e(av,$Qo),e(av,NQ),e(NQ,kQo),e(av,SQo),e(oo,RQo),e(oo,nv),e(nv,PQo),e(nv,a1e),e(a1e,BQo),e(nv,IQo),e(nv,n1e),e(n1e,NQo),e(oo,qQo),M(sv,oo,null),b(m,lZe,_),b(m,Ad,_),e(Ad,lv),e(lv,s1e),M(yx,s1e,null),e(Ad,jQo),e(Ad,l1e),e(l1e,DQo),b(m,iZe,_),b(m,No,_),M(xx,No,null),e(No,GQo),e(No,Ld),e(Ld,OQo),e(Ld,qQ),e(qQ,VQo),e(Ld,XQo),e(Ld,jQ),e(jQ,zQo),e(Ld,QQo),e(No,WQo),e(No,$x),e($x,UQo),e($x,i1e),e(i1e,HQo),e($x,JQo),e(No,YQo),e(No,Ft),M(kx,Ft,null),e(Ft,KQo),e(Ft,d1e),e(d1e,ZQo),e(Ft,eWo),e(Ft,yd),e(yd,oWo),e(yd,c1e),e(c1e,rWo),e(yd,tWo),e(yd,DQ),e(DQ,aWo),e(yd,nWo),e(Ft,sWo),M(iv,Ft,null),e(No,lWo),e(No,ro),M(Sx,ro,null),e(ro,iWo),e(ro,m1e),e(m1e,dWo),e(ro,cWo),e(ro,Za),e(Za,mWo),e(Za,f1e),e(f1e,fWo),e(Za,gWo),e(Za,g1e),e(g1e,hWo),e(Za,uWo),e(Za,h1e),e(h1e,pWo),e(Za,_Wo),e(ro,bWo),e(ro,H),e(H,dv),e(dv,u1e),e(u1e,vWo),e(dv,FWo),e(dv,GQ),e(GQ,TWo),e(dv,MWo),e(H,EWo),e(H,cv),e(cv,p1e),e(p1e,CWo),e(cv,wWo),e(cv,OQ),e(OQ,AWo),e(cv,LWo),e(H,yWo),e(H,mv),e(mv,_1e),e(_1e,xWo),e(mv,$Wo),e(mv,VQ),e(VQ,kWo),e(mv,SWo),e(H,RWo),e(H,fv),e(fv,b1e),e(b1e,PWo),e(fv,BWo),e(fv,XQ),e(XQ,IWo),e(fv,NWo),e(H,qWo),e(H,gv),e(gv,v1e),e(v1e,jWo),e(gv,DWo),e(gv,zQ),e(zQ,GWo),e(gv,OWo),e(H,VWo),e(H,hv),e(hv,F1e),e(F1e,XWo),e(hv,zWo),e(hv,QQ),e(QQ,QWo),e(hv,WWo),e(H,UWo),e(H,uv),e(uv,T1e),e(T1e,HWo),e(uv,JWo),e(uv,WQ),e(WQ,YWo),e(uv,KWo),e(H,ZWo),e(H,pv),e(pv,M1e),e(M1e,eUo),e(pv,oUo),e(pv,UQ),e(UQ,rUo),e(pv,tUo),e(H,aUo),e(H,_v),e(_v,E1e),e(E1e,nUo),e(_v,sUo),e(_v,HQ),e(HQ,lUo),e(_v,iUo),e(H,dUo),e(H,bv),e(bv,C1e),e(C1e,cUo),e(bv,mUo),e(bv,JQ),e(JQ,fUo),e(bv,gUo),e(H,hUo),e(H,vv),e(vv,w1e),e(w1e,uUo),e(vv,pUo),e(vv,YQ),e(YQ,_Uo),e(vv,bUo),e(H,vUo),e(H,Fv),e(Fv,A1e),e(A1e,FUo),e(Fv,TUo),e(Fv,KQ),e(KQ,MUo),e(Fv,EUo),e(H,CUo),e(H,Tv),e(Tv,L1e),e(L1e,wUo),e(Tv,AUo),e(Tv,ZQ),e(ZQ,LUo),e(Tv,yUo),e(H,xUo),e(H,Mv),e(Mv,y1e),e(y1e,$Uo),e(Mv,kUo),e(Mv,eW),e(eW,SUo),e(Mv,RUo),e(H,PUo),e(H,Ev),e(Ev,x1e),e(x1e,BUo),e(Ev,IUo),e(Ev,oW),e(oW,NUo),e(Ev,qUo),e(H,jUo),e(H,Cv),e(Cv,$1e),e($1e,DUo),e(Cv,GUo),e(Cv,rW),e(rW,OUo),e(Cv,VUo),e(H,XUo),e(H,wv),e(wv,k1e),e(k1e,zUo),e(wv,QUo),e(wv,tW),e(tW,WUo),e(wv,UUo),e(H,HUo),e(H,Av),e(Av,S1e),e(S1e,JUo),e(Av,YUo),e(Av,aW),e(aW,KUo),e(Av,ZUo),e(H,eHo),e(H,Lv),e(Lv,R1e),e(R1e,oHo),e(Lv,rHo),e(Lv,nW),e(nW,tHo),e(Lv,aHo),e(H,nHo),e(H,yv),e(yv,P1e),e(P1e,sHo),e(yv,lHo),e(yv,sW),e(sW,iHo),e(yv,dHo),e(H,cHo),e(H,xv),e(xv,B1e),e(B1e,mHo),e(xv,fHo),e(xv,lW),e(lW,gHo),e(xv,hHo),e(H,uHo),e(H,$v),e($v,I1e),e(I1e,pHo),e($v,_Ho),e($v,iW),e(iW,bHo),e($v,vHo),e(H,FHo),e(H,kv),e(kv,N1e),e(N1e,THo),e(kv,MHo),e(kv,dW),e(dW,EHo),e(kv,CHo),e(H,wHo),e(H,Sv),e(Sv,q1e),e(q1e,AHo),e(Sv,LHo),e(Sv,cW),e(cW,yHo),e(Sv,xHo),e(H,$Ho),e(H,Rv),e(Rv,j1e),e(j1e,kHo),e(Rv,SHo),e(Rv,mW),e(mW,RHo),e(Rv,PHo),e(H,BHo),e(H,Pv),e(Pv,D1e),e(D1e,IHo),e(Pv,NHo),e(Pv,fW),e(fW,qHo),e(Pv,jHo),e(H,DHo),e(H,Bv),e(Bv,G1e),e(G1e,GHo),e(Bv,OHo),e(Bv,gW),e(gW,VHo),e(Bv,XHo),e(H,zHo),e(H,Iv),e(Iv,O1e),e(O1e,QHo),e(Iv,WHo),e(Iv,hW),e(hW,UHo),e(Iv,HHo),e(H,JHo),e(H,Nv),e(Nv,V1e),e(V1e,YHo),e(Nv,KHo),e(Nv,uW),e(uW,ZHo),e(Nv,eJo),e(H,oJo),e(H,qv),e(qv,X1e),e(X1e,rJo),e(qv,tJo),e(qv,pW),e(pW,aJo),e(qv,nJo),e(H,sJo),e(H,jv),e(jv,z1e),e(z1e,lJo),e(jv,iJo),e(jv,_W),e(_W,dJo),e(jv,cJo),e(H,mJo),e(H,Dv),e(Dv,Q1e),e(Q1e,fJo),e(Dv,gJo),e(Dv,bW),e(bW,hJo),e(Dv,uJo),e(H,pJo),e(H,Gv),e(Gv,W1e),e(W1e,_Jo),e(Gv,bJo),e(Gv,vW),e(vW,vJo),e(Gv,FJo),e(H,TJo),e(H,Ov),e(Ov,U1e),e(U1e,MJo),e(Ov,EJo),e(Ov,FW),e(FW,CJo),e(Ov,wJo),e(H,AJo),e(H,Vv),e(Vv,H1e),e(H1e,LJo),e(Vv,yJo),e(Vv,J1e),e(J1e,xJo),e(Vv,$Jo),e(H,kJo),e(H,Xv),e(Xv,Y1e),e(Y1e,SJo),e(Xv,RJo),e(Xv,TW),e(TW,PJo),e(Xv,BJo),e(H,IJo),e(H,zv),e(zv,K1e),e(K1e,NJo),e(zv,qJo),e(zv,MW),e(MW,jJo),e(zv,DJo),e(H,GJo),e(H,Qv),e(Qv,Z1e),e(Z1e,OJo),e(Qv,VJo),e(Qv,EW),e(EW,XJo),e(Qv,zJo),e(H,QJo),e(H,Wv),e(Wv,eve),e(eve,WJo),e(Wv,UJo),e(Wv,CW),e(CW,HJo),e(Wv,JJo),e(ro,YJo),e(ro,Uv),e(Uv,KJo),e(Uv,ove),e(ove,ZJo),e(Uv,eYo),e(Uv,rve),e(rve,oYo),e(ro,rYo),M(Hv,ro,null),b(m,dZe,_),b(m,xd,_),e(xd,Jv),e(Jv,tve),M(Rx,tve,null),e(xd,tYo),e(xd,ave),e(ave,aYo),b(m,cZe,_),b(m,qo,_),M(Px,qo,null),e(qo,nYo),e(qo,$d),e($d,sYo),e($d,wW),e(wW,lYo),e($d,iYo),e($d,AW),e(AW,dYo),e($d,cYo),e(qo,mYo),e(qo,Bx),e(Bx,fYo),e(Bx,nve),e(nve,gYo),e(Bx,hYo),e(qo,uYo),e(qo,Tt),M(Ix,Tt,null),e(Tt,pYo),e(Tt,sve),e(sve,_Yo),e(Tt,bYo),e(Tt,kd),e(kd,vYo),e(kd,lve),e(lve,FYo),e(kd,TYo),e(kd,LW),e(LW,MYo),e(kd,EYo),e(Tt,CYo),M(Yv,Tt,null),e(qo,wYo),e(qo,to),M(Nx,to,null),e(to,AYo),e(to,ive),e(ive,LYo),e(to,yYo),e(to,en),e(en,xYo),e(en,dve),e(dve,$Yo),e(en,kYo),e(en,cve),e(cve,SYo),e(en,RYo),e(en,mve),e(mve,PYo),e(en,BYo),e(to,IYo),e(to,me),e(me,Kv),e(Kv,fve),e(fve,NYo),e(Kv,qYo),e(Kv,yW),e(yW,jYo),e(Kv,DYo),e(me,GYo),e(me,Zv),e(Zv,gve),e(gve,OYo),e(Zv,VYo),e(Zv,xW),e(xW,XYo),e(Zv,zYo),e(me,QYo),e(me,eF),e(eF,hve),e(hve,WYo),e(eF,UYo),e(eF,$W),e($W,HYo),e(eF,JYo),e(me,YYo),e(me,oF),e(oF,uve),e(uve,KYo),e(oF,ZYo),e(oF,kW),e(kW,eKo),e(oF,oKo),e(me,rKo),e(me,rF),e(rF,pve),e(pve,tKo),e(rF,aKo),e(rF,SW),e(SW,nKo),e(rF,sKo),e(me,lKo),e(me,tF),e(tF,_ve),e(_ve,iKo),e(tF,dKo),e(tF,RW),e(RW,cKo),e(tF,mKo),e(me,fKo),e(me,aF),e(aF,bve),e(bve,gKo),e(aF,hKo),e(aF,PW),e(PW,uKo),e(aF,pKo),e(me,_Ko),e(me,nF),e(nF,vve),e(vve,bKo),e(nF,vKo),e(nF,BW),e(BW,FKo),e(nF,TKo),e(me,MKo),e(me,sF),e(sF,Fve),e(Fve,EKo),e(sF,CKo),e(sF,IW),e(IW,wKo),e(sF,AKo),e(me,LKo),e(me,lF),e(lF,Tve),e(Tve,yKo),e(lF,xKo),e(lF,NW),e(NW,$Ko),e(lF,kKo),e(me,SKo),e(me,iF),e(iF,Mve),e(Mve,RKo),e(iF,PKo),e(iF,qW),e(qW,BKo),e(iF,IKo),e(me,NKo),e(me,dF),e(dF,Eve),e(Eve,qKo),e(dF,jKo),e(dF,jW),e(jW,DKo),e(dF,GKo),e(me,OKo),e(me,cF),e(cF,Cve),e(Cve,VKo),e(cF,XKo),e(cF,DW),e(DW,zKo),e(cF,QKo),e(me,WKo),e(me,mF),e(mF,wve),e(wve,UKo),e(mF,HKo),e(mF,GW),e(GW,JKo),e(mF,YKo),e(me,KKo),e(me,fF),e(fF,Ave),e(Ave,ZKo),e(fF,eZo),e(fF,OW),e(OW,oZo),e(fF,rZo),e(me,tZo),e(me,gF),e(gF,Lve),e(Lve,aZo),e(gF,nZo),e(gF,VW),e(VW,sZo),e(gF,lZo),e(me,iZo),e(me,hF),e(hF,yve),e(yve,dZo),e(hF,cZo),e(hF,XW),e(XW,mZo),e(hF,fZo),e(me,gZo),e(me,uF),e(uF,xve),e(xve,hZo),e(uF,uZo),e(uF,zW),e(zW,pZo),e(uF,_Zo),e(me,bZo),e(me,pF),e(pF,$ve),e($ve,vZo),e(pF,FZo),e(pF,QW),e(QW,TZo),e(pF,MZo),e(me,EZo),e(me,_F),e(_F,kve),e(kve,CZo),e(_F,wZo),e(_F,WW),e(WW,AZo),e(_F,LZo),e(to,yZo),e(to,bF),e(bF,xZo),e(bF,Sve),e(Sve,$Zo),e(bF,kZo),e(bF,Rve),e(Rve,SZo),e(to,RZo),M(vF,to,null),b(m,mZe,_),b(m,Sd,_),e(Sd,FF),e(FF,Pve),M(qx,Pve,null),e(Sd,PZo),e(Sd,Bve),e(Bve,BZo),b(m,fZe,_),b(m,jo,_),M(jx,jo,null),e(jo,IZo),e(jo,Rd),e(Rd,NZo),e(Rd,UW),e(UW,qZo),e(Rd,jZo),e(Rd,HW),e(HW,DZo),e(Rd,GZo),e(jo,OZo),e(jo,Dx),e(Dx,VZo),e(Dx,Ive),e(Ive,XZo),e(Dx,zZo),e(jo,QZo),e(jo,Mt),M(Gx,Mt,null),e(Mt,WZo),e(Mt,Nve),e(Nve,UZo),e(Mt,HZo),e(Mt,Pd),e(Pd,JZo),e(Pd,qve),e(qve,YZo),e(Pd,KZo),e(Pd,JW),e(JW,ZZo),e(Pd,eer),e(Mt,oer),M(TF,Mt,null),e(jo,rer),e(jo,ao),M(Ox,ao,null),e(ao,ter),e(ao,jve),e(jve,aer),e(ao,ner),e(ao,on),e(on,ser),e(on,Dve),e(Dve,ler),e(on,ier),e(on,Gve),e(Gve,der),e(on,cer),e(on,Ove),e(Ove,mer),e(on,fer),e(ao,ger),e(ao,q),e(q,MF),e(MF,Vve),e(Vve,her),e(MF,uer),e(MF,YW),e(YW,per),e(MF,_er),e(q,ber),e(q,EF),e(EF,Xve),e(Xve,ver),e(EF,Fer),e(EF,KW),e(KW,Ter),e(EF,Mer),e(q,Eer),e(q,CF),e(CF,zve),e(zve,Cer),e(CF,wer),e(CF,ZW),e(ZW,Aer),e(CF,Ler),e(q,yer),e(q,wF),e(wF,Qve),e(Qve,xer),e(wF,$er),e(wF,eU),e(eU,ker),e(wF,Ser),e(q,Rer),e(q,AF),e(AF,Wve),e(Wve,Per),e(AF,Ber),e(AF,oU),e(oU,Ier),e(AF,Ner),e(q,qer),e(q,LF),e(LF,Uve),e(Uve,jer),e(LF,Der),e(LF,rU),e(rU,Ger),e(LF,Oer),e(q,Ver),e(q,yF),e(yF,Hve),e(Hve,Xer),e(yF,zer),e(yF,tU),e(tU,Qer),e(yF,Wer),e(q,Uer),e(q,xF),e(xF,Jve),e(Jve,Her),e(xF,Jer),e(xF,aU),e(aU,Yer),e(xF,Ker),e(q,Zer),e(q,$F),e($F,Yve),e(Yve,eor),e($F,oor),e($F,nU),e(nU,ror),e($F,tor),e(q,aor),e(q,kF),e(kF,Kve),e(Kve,nor),e(kF,sor),e(kF,sU),e(sU,lor),e(kF,ior),e(q,dor),e(q,SF),e(SF,Zve),e(Zve,cor),e(SF,mor),e(SF,lU),e(lU,gor),e(SF,hor),e(q,uor),e(q,RF),e(RF,eFe),e(eFe,por),e(RF,_or),e(RF,iU),e(iU,bor),e(RF,vor),e(q,For),e(q,PF),e(PF,oFe),e(oFe,Tor),e(PF,Mor),e(PF,dU),e(dU,Eor),e(PF,Cor),e(q,wor),e(q,BF),e(BF,rFe),e(rFe,Aor),e(BF,Lor),e(BF,cU),e(cU,yor),e(BF,xor),e(q,$or),e(q,IF),e(IF,tFe),e(tFe,kor),e(IF,Sor),e(IF,mU),e(mU,Ror),e(IF,Por),e(q,Bor),e(q,NF),e(NF,aFe),e(aFe,Ior),e(NF,Nor),e(NF,fU),e(fU,qor),e(NF,jor),e(q,Dor),e(q,qF),e(qF,nFe),e(nFe,Gor),e(qF,Oor),e(qF,gU),e(gU,Vor),e(qF,Xor),e(q,zor),e(q,jF),e(jF,sFe),e(sFe,Qor),e(jF,Wor),e(jF,hU),e(hU,Uor),e(jF,Hor),e(q,Jor),e(q,DF),e(DF,lFe),e(lFe,Yor),e(DF,Kor),e(DF,uU),e(uU,Zor),e(DF,err),e(q,orr),e(q,GF),e(GF,iFe),e(iFe,rrr),e(GF,trr),e(GF,pU),e(pU,arr),e(GF,nrr),e(q,srr),e(q,OF),e(OF,dFe),e(dFe,lrr),e(OF,irr),e(OF,_U),e(_U,drr),e(OF,crr),e(q,mrr),e(q,VF),e(VF,cFe),e(cFe,frr),e(VF,grr),e(VF,bU),e(bU,hrr),e(VF,urr),e(q,prr),e(q,XF),e(XF,mFe),e(mFe,_rr),e(XF,brr),e(XF,vU),e(vU,vrr),e(XF,Frr),e(q,Trr),e(q,zF),e(zF,fFe),e(fFe,Mrr),e(zF,Err),e(zF,FU),e(FU,Crr),e(zF,wrr),e(q,Arr),e(q,QF),e(QF,gFe),e(gFe,Lrr),e(QF,yrr),e(QF,TU),e(TU,xrr),e(QF,$rr),e(q,krr),e(q,WF),e(WF,hFe),e(hFe,Srr),e(WF,Rrr),e(WF,MU),e(MU,Prr),e(WF,Brr),e(q,Irr),e(q,UF),e(UF,uFe),e(uFe,Nrr),e(UF,qrr),e(UF,EU),e(EU,jrr),e(UF,Drr),e(q,Grr),e(q,HF),e(HF,pFe),e(pFe,Orr),e(HF,Vrr),e(HF,CU),e(CU,Xrr),e(HF,zrr),e(q,Qrr),e(q,JF),e(JF,_Fe),e(_Fe,Wrr),e(JF,Urr),e(JF,wU),e(wU,Hrr),e(JF,Jrr),e(q,Yrr),e(q,YF),e(YF,bFe),e(bFe,Krr),e(YF,Zrr),e(YF,AU),e(AU,etr),e(YF,otr),e(q,rtr),e(q,KF),e(KF,vFe),e(vFe,ttr),e(KF,atr),e(KF,LU),e(LU,ntr),e(KF,str),e(q,ltr),e(q,ZF),e(ZF,FFe),e(FFe,itr),e(ZF,dtr),e(ZF,yU),e(yU,ctr),e(ZF,mtr),e(q,ftr),e(q,eT),e(eT,TFe),e(TFe,gtr),e(eT,htr),e(eT,xU),e(xU,utr),e(eT,ptr),e(q,_tr),e(q,oT),e(oT,MFe),e(MFe,btr),e(oT,vtr),e(oT,$U),e($U,Ftr),e(oT,Ttr),e(q,Mtr),e(q,rT),e(rT,EFe),e(EFe,Etr),e(rT,Ctr),e(rT,kU),e(kU,wtr),e(rT,Atr),e(q,Ltr),e(q,tT),e(tT,CFe),e(CFe,ytr),e(tT,xtr),e(tT,SU),e(SU,$tr),e(tT,ktr),e(q,Str),e(q,aT),e(aT,wFe),e(wFe,Rtr),e(aT,Ptr),e(aT,RU),e(RU,Btr),e(aT,Itr),e(q,Ntr),e(q,nT),e(nT,AFe),e(AFe,qtr),e(nT,jtr),e(nT,PU),e(PU,Dtr),e(nT,Gtr),e(q,Otr),e(q,sT),e(sT,LFe),e(LFe,Vtr),e(sT,Xtr),e(sT,BU),e(BU,ztr),e(sT,Qtr),e(q,Wtr),e(q,lT),e(lT,yFe),e(yFe,Utr),e(lT,Htr),e(lT,IU),e(IU,Jtr),e(lT,Ytr),e(q,Ktr),e(q,iT),e(iT,xFe),e(xFe,Ztr),e(iT,ear),e(iT,NU),e(NU,oar),e(iT,rar),e(q,tar),e(q,dT),e(dT,$Fe),e($Fe,aar),e(dT,nar),e(dT,qU),e(qU,sar),e(dT,lar),e(q,iar),e(q,cT),e(cT,kFe),e(kFe,dar),e(cT,car),e(cT,jU),e(jU,mar),e(cT,far),e(q,gar),e(q,mT),e(mT,SFe),e(SFe,har),e(mT,uar),e(mT,DU),e(DU,par),e(mT,_ar),e(q,bar),e(q,fT),e(fT,RFe),e(RFe,Far),e(fT,Tar),e(fT,GU),e(GU,Mar),e(fT,Ear),e(q,Car),e(q,gT),e(gT,PFe),e(PFe,war),e(gT,Aar),e(gT,OU),e(OU,Lar),e(gT,yar),e(q,xar),e(q,hT),e(hT,BFe),e(BFe,$ar),e(hT,kar),e(hT,VU),e(VU,Sar),e(hT,Rar),e(q,Par),e(q,uT),e(uT,IFe),e(IFe,Bar),e(uT,Iar),e(uT,XU),e(XU,Nar),e(uT,qar),e(q,jar),e(q,pT),e(pT,NFe),e(NFe,Dar),e(pT,Gar),e(pT,zU),e(zU,Oar),e(pT,Var),e(q,Xar),e(q,_T),e(_T,qFe),e(qFe,zar),e(_T,Qar),e(_T,QU),e(QU,War),e(_T,Uar),e(q,Har),e(q,bT),e(bT,jFe),e(jFe,Jar),e(bT,Yar),e(bT,WU),e(WU,Kar),e(bT,Zar),e(q,enr),e(q,vT),e(vT,DFe),e(DFe,onr),e(vT,rnr),e(vT,UU),e(UU,tnr),e(vT,anr),e(q,nnr),e(q,FT),e(FT,GFe),e(GFe,snr),e(FT,lnr),e(FT,HU),e(HU,inr),e(FT,dnr),e(ao,cnr),e(ao,TT),e(TT,mnr),e(TT,OFe),e(OFe,fnr),e(TT,gnr),e(TT,VFe),e(VFe,hnr),e(ao,unr),M(MT,ao,null),b(m,gZe,_),b(m,Bd,_),e(Bd,ET),e(ET,XFe),M(Vx,XFe,null),e(Bd,pnr),e(Bd,zFe),e(zFe,_nr),b(m,hZe,_),b(m,Do,_),M(Xx,Do,null),e(Do,bnr),e(Do,Id),e(Id,vnr),e(Id,JU),e(JU,Fnr),e(Id,Tnr),e(Id,YU),e(YU,Mnr),e(Id,Enr),e(Do,Cnr),e(Do,zx),e(zx,wnr),e(zx,QFe),e(QFe,Anr),e(zx,Lnr),e(Do,ynr),e(Do,Et),M(Qx,Et,null),e(Et,xnr),e(Et,WFe),e(WFe,$nr),e(Et,knr),e(Et,Nd),e(Nd,Snr),e(Nd,UFe),e(UFe,Rnr),e(Nd,Pnr),e(Nd,KU),e(KU,Bnr),e(Nd,Inr),e(Et,Nnr),M(CT,Et,null),e(Do,qnr),e(Do,no),M(Wx,no,null),e(no,jnr),e(no,HFe),e(HFe,Dnr),e(no,Gnr),e(no,rn),e(rn,Onr),e(rn,JFe),e(JFe,Vnr),e(rn,Xnr),e(rn,YFe),e(YFe,znr),e(rn,Qnr),e(rn,KFe),e(KFe,Wnr),e(rn,Unr),e(no,Hnr),e(no,Z),e(Z,wT),e(wT,ZFe),e(ZFe,Jnr),e(wT,Ynr),e(wT,ZU),e(ZU,Knr),e(wT,Znr),e(Z,esr),e(Z,AT),e(AT,eTe),e(eTe,osr),e(AT,rsr),e(AT,eH),e(eH,tsr),e(AT,asr),e(Z,nsr),e(Z,LT),e(LT,oTe),e(oTe,ssr),e(LT,lsr),e(LT,oH),e(oH,isr),e(LT,dsr),e(Z,csr),e(Z,yT),e(yT,rTe),e(rTe,msr),e(yT,fsr),e(yT,rH),e(rH,gsr),e(yT,hsr),e(Z,usr),e(Z,xT),e(xT,tTe),e(tTe,psr),e(xT,_sr),e(xT,tH),e(tH,bsr),e(xT,vsr),e(Z,Fsr),e(Z,$T),e($T,aTe),e(aTe,Tsr),e($T,Msr),e($T,aH),e(aH,Esr),e($T,Csr),e(Z,wsr),e(Z,kT),e(kT,nTe),e(nTe,Asr),e(kT,Lsr),e(kT,nH),e(nH,ysr),e(kT,xsr),e(Z,$sr),e(Z,ST),e(ST,sTe),e(sTe,ksr),e(ST,Ssr),e(ST,sH),e(sH,Rsr),e(ST,Psr),e(Z,Bsr),e(Z,RT),e(RT,lTe),e(lTe,Isr),e(RT,Nsr),e(RT,lH),e(lH,qsr),e(RT,jsr),e(Z,Dsr),e(Z,PT),e(PT,iTe),e(iTe,Gsr),e(PT,Osr),e(PT,iH),e(iH,Vsr),e(PT,Xsr),e(Z,zsr),e(Z,BT),e(BT,dTe),e(dTe,Qsr),e(BT,Wsr),e(BT,dH),e(dH,Usr),e(BT,Hsr),e(Z,Jsr),e(Z,IT),e(IT,cTe),e(cTe,Ysr),e(IT,Ksr),e(IT,cH),e(cH,Zsr),e(IT,elr),e(Z,olr),e(Z,NT),e(NT,mTe),e(mTe,rlr),e(NT,tlr),e(NT,mH),e(mH,alr),e(NT,nlr),e(Z,slr),e(Z,qT),e(qT,fTe),e(fTe,llr),e(qT,ilr),e(qT,fH),e(fH,dlr),e(qT,clr),e(Z,mlr),e(Z,jT),e(jT,gTe),e(gTe,flr),e(jT,glr),e(jT,gH),e(gH,hlr),e(jT,ulr),e(Z,plr),e(Z,DT),e(DT,hTe),e(hTe,_lr),e(DT,blr),e(DT,hH),e(hH,vlr),e(DT,Flr),e(Z,Tlr),e(Z,GT),e(GT,uTe),e(uTe,Mlr),e(GT,Elr),e(GT,uH),e(uH,Clr),e(GT,wlr),e(Z,Alr),e(Z,OT),e(OT,pTe),e(pTe,Llr),e(OT,ylr),e(OT,pH),e(pH,xlr),e(OT,$lr),e(Z,klr),e(Z,VT),e(VT,_Te),e(_Te,Slr),e(VT,Rlr),e(VT,_H),e(_H,Plr),e(VT,Blr),e(Z,Ilr),e(Z,XT),e(XT,bTe),e(bTe,Nlr),e(XT,qlr),e(XT,bH),e(bH,jlr),e(XT,Dlr),e(Z,Glr),e(Z,zT),e(zT,vTe),e(vTe,Olr),e(zT,Vlr),e(zT,vH),e(vH,Xlr),e(zT,zlr),e(Z,Qlr),e(Z,QT),e(QT,FTe),e(FTe,Wlr),e(QT,Ulr),e(QT,FH),e(FH,Hlr),e(QT,Jlr),e(Z,Ylr),e(Z,WT),e(WT,TTe),e(TTe,Klr),e(WT,Zlr),e(WT,TH),e(TH,eir),e(WT,oir),e(Z,rir),e(Z,UT),e(UT,MTe),e(MTe,tir),e(UT,air),e(UT,MH),e(MH,nir),e(UT,sir),e(Z,lir),e(Z,HT),e(HT,ETe),e(ETe,iir),e(HT,dir),e(HT,EH),e(EH,cir),e(HT,mir),e(Z,fir),e(Z,JT),e(JT,CTe),e(CTe,gir),e(JT,hir),e(JT,CH),e(CH,uir),e(JT,pir),e(Z,_ir),e(Z,YT),e(YT,wTe),e(wTe,bir),e(YT,vir),e(YT,wH),e(wH,Fir),e(YT,Tir),e(Z,Mir),e(Z,KT),e(KT,ATe),e(ATe,Eir),e(KT,Cir),e(KT,AH),e(AH,wir),e(KT,Air),e(Z,Lir),e(Z,ZT),e(ZT,LTe),e(LTe,yir),e(ZT,xir),e(ZT,LH),e(LH,$ir),e(ZT,kir),e(Z,Sir),e(Z,eM),e(eM,yTe),e(yTe,Rir),e(eM,Pir),e(eM,yH),e(yH,Bir),e(eM,Iir),e(Z,Nir),e(Z,oM),e(oM,xTe),e(xTe,qir),e(oM,jir),e(oM,xH),e(xH,Dir),e(oM,Gir),e(Z,Oir),e(Z,rM),e(rM,$Te),e($Te,Vir),e(rM,Xir),e(rM,$H),e($H,zir),e(rM,Qir),e(no,Wir),e(no,tM),e(tM,Uir),e(tM,kTe),e(kTe,Hir),e(tM,Jir),e(tM,STe),e(STe,Yir),e(no,Kir),M(aM,no,null),b(m,uZe,_),b(m,qd,_),e(qd,nM),e(nM,RTe),M(Ux,RTe,null),e(qd,Zir),e(qd,PTe),e(PTe,edr),b(m,pZe,_),b(m,Go,_),M(Hx,Go,null),e(Go,odr),e(Go,jd),e(jd,rdr),e(jd,kH),e(kH,tdr),e(jd,adr),e(jd,SH),e(SH,ndr),e(jd,sdr),e(Go,ldr),e(Go,Jx),e(Jx,idr),e(Jx,BTe),e(BTe,ddr),e(Jx,cdr),e(Go,mdr),e(Go,Ct),M(Yx,Ct,null),e(Ct,fdr),e(Ct,ITe),e(ITe,gdr),e(Ct,hdr),e(Ct,Dd),e(Dd,udr),e(Dd,NTe),e(NTe,pdr),e(Dd,_dr),e(Dd,RH),e(RH,bdr),e(Dd,vdr),e(Ct,Fdr),M(sM,Ct,null),e(Go,Tdr),e(Go,so),M(Kx,so,null),e(so,Mdr),e(so,qTe),e(qTe,Edr),e(so,Cdr),e(so,tn),e(tn,wdr),e(tn,jTe),e(jTe,Adr),e(tn,Ldr),e(tn,DTe),e(DTe,ydr),e(tn,xdr),e(tn,GTe),e(GTe,$dr),e(tn,kdr),e(so,Sdr),e(so,Ue),e(Ue,lM),e(lM,OTe),e(OTe,Rdr),e(lM,Pdr),e(lM,PH),e(PH,Bdr),e(lM,Idr),e(Ue,Ndr),e(Ue,iM),e(iM,VTe),e(VTe,qdr),e(iM,jdr),e(iM,BH),e(BH,Ddr),e(iM,Gdr),e(Ue,Odr),e(Ue,dM),e(dM,XTe),e(XTe,Vdr),e(dM,Xdr),e(dM,IH),e(IH,zdr),e(dM,Qdr),e(Ue,Wdr),e(Ue,cM),e(cM,zTe),e(zTe,Udr),e(cM,Hdr),e(cM,NH),e(NH,Jdr),e(cM,Ydr),e(Ue,Kdr),e(Ue,mM),e(mM,QTe),e(QTe,Zdr),e(mM,ecr),e(mM,qH),e(qH,ocr),e(mM,rcr),e(Ue,tcr),e(Ue,fM),e(fM,WTe),e(WTe,acr),e(fM,ncr),e(fM,jH),e(jH,scr),e(fM,lcr),e(Ue,icr),e(Ue,gM),e(gM,UTe),e(UTe,dcr),e(gM,ccr),e(gM,DH),e(DH,mcr),e(gM,fcr),e(so,gcr),e(so,hM),e(hM,hcr),e(hM,HTe),e(HTe,ucr),e(hM,pcr),e(hM,JTe),e(JTe,_cr),e(so,bcr),M(uM,so,null),b(m,_Ze,_),b(m,Gd,_),e(Gd,pM),e(pM,YTe),M(Zx,YTe,null),e(Gd,vcr),e(Gd,KTe),e(KTe,Fcr),b(m,bZe,_),b(m,Oo,_),M(e$,Oo,null),e(Oo,Tcr),e(Oo,Od),e(Od,Mcr),e(Od,GH),e(GH,Ecr),e(Od,Ccr),e(Od,OH),e(OH,wcr),e(Od,Acr),e(Oo,Lcr),e(Oo,o$),e(o$,ycr),e(o$,ZTe),e(ZTe,xcr),e(o$,$cr),e(Oo,kcr),e(Oo,wt),M(r$,wt,null),e(wt,Scr),e(wt,eMe),e(eMe,Rcr),e(wt,Pcr),e(wt,Vd),e(Vd,Bcr),e(Vd,oMe),e(oMe,Icr),e(Vd,Ncr),e(Vd,VH),e(VH,qcr),e(Vd,jcr),e(wt,Dcr),M(_M,wt,null),e(Oo,Gcr),e(Oo,lo),M(t$,lo,null),e(lo,Ocr),e(lo,rMe),e(rMe,Vcr),e(lo,Xcr),e(lo,an),e(an,zcr),e(an,tMe),e(tMe,Qcr),e(an,Wcr),e(an,aMe),e(aMe,Ucr),e(an,Hcr),e(an,nMe),e(nMe,Jcr),e(an,Ycr),e(lo,Kcr),e(lo,J),e(J,bM),e(bM,sMe),e(sMe,Zcr),e(bM,emr),e(bM,XH),e(XH,omr),e(bM,rmr),e(J,tmr),e(J,vM),e(vM,lMe),e(lMe,amr),e(vM,nmr),e(vM,zH),e(zH,smr),e(vM,lmr),e(J,imr),e(J,FM),e(FM,iMe),e(iMe,dmr),e(FM,cmr),e(FM,QH),e(QH,mmr),e(FM,fmr),e(J,gmr),e(J,TM),e(TM,dMe),e(dMe,hmr),e(TM,umr),e(TM,WH),e(WH,pmr),e(TM,_mr),e(J,bmr),e(J,MM),e(MM,cMe),e(cMe,vmr),e(MM,Fmr),e(MM,UH),e(UH,Tmr),e(MM,Mmr),e(J,Emr),e(J,EM),e(EM,mMe),e(mMe,Cmr),e(EM,wmr),e(EM,HH),e(HH,Amr),e(EM,Lmr),e(J,ymr),e(J,CM),e(CM,fMe),e(fMe,xmr),e(CM,$mr),e(CM,JH),e(JH,kmr),e(CM,Smr),e(J,Rmr),e(J,wM),e(wM,gMe),e(gMe,Pmr),e(wM,Bmr),e(wM,YH),e(YH,Imr),e(wM,Nmr),e(J,qmr),e(J,AM),e(AM,hMe),e(hMe,jmr),e(AM,Dmr),e(AM,KH),e(KH,Gmr),e(AM,Omr),e(J,Vmr),e(J,LM),e(LM,uMe),e(uMe,Xmr),e(LM,zmr),e(LM,ZH),e(ZH,Qmr),e(LM,Wmr),e(J,Umr),e(J,yM),e(yM,pMe),e(pMe,Hmr),e(yM,Jmr),e(yM,eJ),e(eJ,Ymr),e(yM,Kmr),e(J,Zmr),e(J,xM),e(xM,_Me),e(_Me,efr),e(xM,ofr),e(xM,oJ),e(oJ,rfr),e(xM,tfr),e(J,afr),e(J,$M),e($M,bMe),e(bMe,nfr),e($M,sfr),e($M,rJ),e(rJ,lfr),e($M,ifr),e(J,dfr),e(J,kM),e(kM,vMe),e(vMe,cfr),e(kM,mfr),e(kM,tJ),e(tJ,ffr),e(kM,gfr),e(J,hfr),e(J,SM),e(SM,FMe),e(FMe,ufr),e(SM,pfr),e(SM,aJ),e(aJ,_fr),e(SM,bfr),e(J,vfr),e(J,RM),e(RM,TMe),e(TMe,Ffr),e(RM,Tfr),e(RM,nJ),e(nJ,Mfr),e(RM,Efr),e(J,Cfr),e(J,PM),e(PM,MMe),e(MMe,wfr),e(PM,Afr),e(PM,sJ),e(sJ,Lfr),e(PM,yfr),e(J,xfr),e(J,BM),e(BM,EMe),e(EMe,$fr),e(BM,kfr),e(BM,lJ),e(lJ,Sfr),e(BM,Rfr),e(J,Pfr),e(J,IM),e(IM,CMe),e(CMe,Bfr),e(IM,Ifr),e(IM,iJ),e(iJ,Nfr),e(IM,qfr),e(J,jfr),e(J,NM),e(NM,wMe),e(wMe,Dfr),e(NM,Gfr),e(NM,dJ),e(dJ,Ofr),e(NM,Vfr),e(J,Xfr),e(J,qM),e(qM,AMe),e(AMe,zfr),e(qM,Qfr),e(qM,cJ),e(cJ,Wfr),e(qM,Ufr),e(J,Hfr),e(J,jM),e(jM,LMe),e(LMe,Jfr),e(jM,Yfr),e(jM,mJ),e(mJ,Kfr),e(jM,Zfr),e(J,egr),e(J,DM),e(DM,yMe),e(yMe,ogr),e(DM,rgr),e(DM,fJ),e(fJ,tgr),e(DM,agr),e(J,ngr),e(J,GM),e(GM,xMe),e(xMe,sgr),e(GM,lgr),e(GM,gJ),e(gJ,igr),e(GM,dgr),e(J,cgr),e(J,OM),e(OM,$Me),e($Me,mgr),e(OM,fgr),e(OM,hJ),e(hJ,ggr),e(OM,hgr),e(J,ugr),e(J,VM),e(VM,kMe),e(kMe,pgr),e(VM,_gr),e(VM,uJ),e(uJ,bgr),e(VM,vgr),e(J,Fgr),e(J,XM),e(XM,SMe),e(SMe,Tgr),e(XM,Mgr),e(XM,pJ),e(pJ,Egr),e(XM,Cgr),e(J,wgr),e(J,zM),e(zM,RMe),e(RMe,Agr),e(zM,Lgr),e(zM,_J),e(_J,ygr),e(zM,xgr),e(J,$gr),e(J,QM),e(QM,PMe),e(PMe,kgr),e(QM,Sgr),e(QM,bJ),e(bJ,Rgr),e(QM,Pgr),e(J,Bgr),e(J,WM),e(WM,BMe),e(BMe,Igr),e(WM,Ngr),e(WM,vJ),e(vJ,qgr),e(WM,jgr),e(J,Dgr),e(J,UM),e(UM,IMe),e(IMe,Ggr),e(UM,Ogr),e(UM,FJ),e(FJ,Vgr),e(UM,Xgr),e(J,zgr),e(J,HM),e(HM,NMe),e(NMe,Qgr),e(HM,Wgr),e(HM,TJ),e(TJ,Ugr),e(HM,Hgr),e(J,Jgr),e(J,JM),e(JM,qMe),e(qMe,Ygr),e(JM,Kgr),e(JM,MJ),e(MJ,Zgr),e(JM,ehr),e(J,ohr),e(J,YM),e(YM,jMe),e(jMe,rhr),e(YM,thr),e(YM,EJ),e(EJ,ahr),e(YM,nhr),e(J,shr),e(J,KM),e(KM,DMe),e(DMe,lhr),e(KM,ihr),e(KM,CJ),e(CJ,dhr),e(KM,chr),e(J,mhr),e(J,ZM),e(ZM,GMe),e(GMe,fhr),e(ZM,ghr),e(ZM,wJ),e(wJ,hhr),e(ZM,uhr),e(J,phr),e(J,eE),e(eE,OMe),e(OMe,_hr),e(eE,bhr),e(eE,AJ),e(AJ,vhr),e(eE,Fhr),e(J,Thr),e(J,oE),e(oE,VMe),e(VMe,Mhr),e(oE,Ehr),e(oE,LJ),e(LJ,Chr),e(oE,whr),e(lo,Ahr),e(lo,rE),e(rE,Lhr),e(rE,XMe),e(XMe,yhr),e(rE,xhr),e(rE,zMe),e(zMe,$hr),e(lo,khr),M(tE,lo,null),b(m,vZe,_),b(m,Xd,_),e(Xd,aE),e(aE,QMe),M(a$,QMe,null),e(Xd,Shr),e(Xd,WMe),e(WMe,Rhr),b(m,FZe,_),b(m,Vo,_),M(n$,Vo,null),e(Vo,Phr),e(Vo,zd),e(zd,Bhr),e(zd,yJ),e(yJ,Ihr),e(zd,Nhr),e(zd,xJ),e(xJ,qhr),e(zd,jhr),e(Vo,Dhr),e(Vo,s$),e(s$,Ghr),e(s$,UMe),e(UMe,Ohr),e(s$,Vhr),e(Vo,Xhr),e(Vo,At),M(l$,At,null),e(At,zhr),e(At,HMe),e(HMe,Qhr),e(At,Whr),e(At,Qd),e(Qd,Uhr),e(Qd,JMe),e(JMe,Hhr),e(Qd,Jhr),e(Qd,$J),e($J,Yhr),e(Qd,Khr),e(At,Zhr),M(nE,At,null),e(Vo,eur),e(Vo,io),M(i$,io,null),e(io,our),e(io,YMe),e(YMe,rur),e(io,tur),e(io,nn),e(nn,aur),e(nn,KMe),e(KMe,nur),e(nn,sur),e(nn,ZMe),e(ZMe,lur),e(nn,iur),e(nn,eEe),e(eEe,dur),e(nn,cur),e(io,mur),e(io,V),e(V,sE),e(sE,oEe),e(oEe,fur),e(sE,gur),e(sE,kJ),e(kJ,hur),e(sE,uur),e(V,pur),e(V,lE),e(lE,rEe),e(rEe,_ur),e(lE,bur),e(lE,SJ),e(SJ,vur),e(lE,Fur),e(V,Tur),e(V,iE),e(iE,tEe),e(tEe,Mur),e(iE,Eur),e(iE,RJ),e(RJ,Cur),e(iE,wur),e(V,Aur),e(V,dE),e(dE,aEe),e(aEe,Lur),e(dE,yur),e(dE,PJ),e(PJ,xur),e(dE,$ur),e(V,kur),e(V,cE),e(cE,nEe),e(nEe,Sur),e(cE,Rur),e(cE,BJ),e(BJ,Pur),e(cE,Bur),e(V,Iur),e(V,mE),e(mE,sEe),e(sEe,Nur),e(mE,qur),e(mE,IJ),e(IJ,jur),e(mE,Dur),e(V,Gur),e(V,fE),e(fE,lEe),e(lEe,Our),e(fE,Vur),e(fE,NJ),e(NJ,Xur),e(fE,zur),e(V,Qur),e(V,gE),e(gE,iEe),e(iEe,Wur),e(gE,Uur),e(gE,qJ),e(qJ,Hur),e(gE,Jur),e(V,Yur),e(V,hE),e(hE,dEe),e(dEe,Kur),e(hE,Zur),e(hE,jJ),e(jJ,epr),e(hE,opr),e(V,rpr),e(V,uE),e(uE,cEe),e(cEe,tpr),e(uE,apr),e(uE,DJ),e(DJ,npr),e(uE,spr),e(V,lpr),e(V,pE),e(pE,mEe),e(mEe,ipr),e(pE,dpr),e(pE,GJ),e(GJ,cpr),e(pE,mpr),e(V,fpr),e(V,_E),e(_E,fEe),e(fEe,gpr),e(_E,hpr),e(_E,OJ),e(OJ,upr),e(_E,ppr),e(V,_pr),e(V,bE),e(bE,gEe),e(gEe,bpr),e(bE,vpr),e(bE,VJ),e(VJ,Fpr),e(bE,Tpr),e(V,Mpr),e(V,vE),e(vE,hEe),e(hEe,Epr),e(vE,Cpr),e(vE,XJ),e(XJ,wpr),e(vE,Apr),e(V,Lpr),e(V,FE),e(FE,uEe),e(uEe,ypr),e(FE,xpr),e(FE,zJ),e(zJ,$pr),e(FE,kpr),e(V,Spr),e(V,TE),e(TE,pEe),e(pEe,Rpr),e(TE,Ppr),e(TE,QJ),e(QJ,Bpr),e(TE,Ipr),e(V,Npr),e(V,ME),e(ME,_Ee),e(_Ee,qpr),e(ME,jpr),e(ME,WJ),e(WJ,Dpr),e(ME,Gpr),e(V,Opr),e(V,EE),e(EE,bEe),e(bEe,Vpr),e(EE,Xpr),e(EE,UJ),e(UJ,zpr),e(EE,Qpr),e(V,Wpr),e(V,CE),e(CE,vEe),e(vEe,Upr),e(CE,Hpr),e(CE,HJ),e(HJ,Jpr),e(CE,Ypr),e(V,Kpr),e(V,wE),e(wE,FEe),e(FEe,Zpr),e(wE,e_r),e(wE,JJ),e(JJ,o_r),e(wE,r_r),e(V,t_r),e(V,AE),e(AE,TEe),e(TEe,a_r),e(AE,n_r),e(AE,YJ),e(YJ,s_r),e(AE,l_r),e(V,i_r),e(V,LE),e(LE,MEe),e(MEe,d_r),e(LE,c_r),e(LE,KJ),e(KJ,m_r),e(LE,f_r),e(V,g_r),e(V,yE),e(yE,EEe),e(EEe,h_r),e(yE,u_r),e(yE,ZJ),e(ZJ,p_r),e(yE,__r),e(V,b_r),e(V,xE),e(xE,CEe),e(CEe,v_r),e(xE,F_r),e(xE,eY),e(eY,T_r),e(xE,M_r),e(V,E_r),e(V,$E),e($E,wEe),e(wEe,C_r),e($E,w_r),e($E,oY),e(oY,A_r),e($E,L_r),e(V,y_r),e(V,kE),e(kE,AEe),e(AEe,x_r),e(kE,$_r),e(kE,rY),e(rY,k_r),e(kE,S_r),e(V,R_r),e(V,SE),e(SE,LEe),e(LEe,P_r),e(SE,B_r),e(SE,tY),e(tY,I_r),e(SE,N_r),e(V,q_r),e(V,RE),e(RE,yEe),e(yEe,j_r),e(RE,D_r),e(RE,aY),e(aY,G_r),e(RE,O_r),e(V,V_r),e(V,PE),e(PE,xEe),e(xEe,X_r),e(PE,z_r),e(PE,nY),e(nY,Q_r),e(PE,W_r),e(V,U_r),e(V,BE),e(BE,$Ee),e($Ee,H_r),e(BE,J_r),e(BE,sY),e(sY,Y_r),e(BE,K_r),e(V,Z_r),e(V,IE),e(IE,kEe),e(kEe,ebr),e(IE,obr),e(IE,lY),e(lY,rbr),e(IE,tbr),e(V,abr),e(V,NE),e(NE,SEe),e(SEe,nbr),e(NE,sbr),e(NE,iY),e(iY,lbr),e(NE,ibr),e(V,dbr),e(V,qE),e(qE,REe),e(REe,cbr),e(qE,mbr),e(qE,dY),e(dY,fbr),e(qE,gbr),e(V,hbr),e(V,jE),e(jE,PEe),e(PEe,ubr),e(jE,pbr),e(jE,cY),e(cY,_br),e(jE,bbr),e(V,vbr),e(V,DE),e(DE,BEe),e(BEe,Fbr),e(DE,Tbr),e(DE,mY),e(mY,Mbr),e(DE,Ebr),e(V,Cbr),e(V,GE),e(GE,IEe),e(IEe,wbr),e(GE,Abr),e(GE,fY),e(fY,Lbr),e(GE,ybr),e(V,xbr),e(V,OE),e(OE,NEe),e(NEe,$br),e(OE,kbr),e(OE,gY),e(gY,Sbr),e(OE,Rbr),e(V,Pbr),e(V,VE),e(VE,qEe),e(qEe,Bbr),e(VE,Ibr),e(VE,hY),e(hY,Nbr),e(VE,qbr),e(V,jbr),e(V,XE),e(XE,jEe),e(jEe,Dbr),e(XE,Gbr),e(XE,uY),e(uY,Obr),e(XE,Vbr),e(V,Xbr),e(V,zE),e(zE,DEe),e(DEe,zbr),e(zE,Qbr),e(zE,pY),e(pY,Wbr),e(zE,Ubr),e(V,Hbr),e(V,QE),e(QE,GEe),e(GEe,Jbr),e(QE,Ybr),e(QE,_Y),e(_Y,Kbr),e(QE,Zbr),e(V,e2r),e(V,WE),e(WE,OEe),e(OEe,o2r),e(WE,r2r),e(WE,bY),e(bY,t2r),e(WE,a2r),e(V,n2r),e(V,UE),e(UE,VEe),e(VEe,s2r),e(UE,l2r),e(UE,vY),e(vY,i2r),e(UE,d2r),e(V,c2r),e(V,HE),e(HE,XEe),e(XEe,m2r),e(HE,f2r),e(HE,FY),e(FY,g2r),e(HE,h2r),e(io,u2r),e(io,JE),e(JE,p2r),e(JE,zEe),e(zEe,_2r),e(JE,b2r),e(JE,QEe),e(QEe,v2r),e(io,F2r),M(YE,io,null),b(m,TZe,_),b(m,Wd,_),e(Wd,KE),e(KE,WEe),M(d$,WEe,null),e(Wd,T2r),e(Wd,UEe),e(UEe,M2r),b(m,MZe,_),b(m,Xo,_),M(c$,Xo,null),e(Xo,E2r),e(Xo,Ud),e(Ud,C2r),e(Ud,TY),e(TY,w2r),e(Ud,A2r),e(Ud,MY),e(MY,L2r),e(Ud,y2r),e(Xo,x2r),e(Xo,m$),e(m$,$2r),e(m$,HEe),e(HEe,k2r),e(m$,S2r),e(Xo,R2r),e(Xo,Lt),M(f$,Lt,null),e(Lt,P2r),e(Lt,JEe),e(JEe,B2r),e(Lt,I2r),e(Lt,Hd),e(Hd,N2r),e(Hd,YEe),e(YEe,q2r),e(Hd,j2r),e(Hd,EY),e(EY,D2r),e(Hd,G2r),e(Lt,O2r),M(ZE,Lt,null),e(Xo,V2r),e(Xo,co),M(g$,co,null),e(co,X2r),e(co,KEe),e(KEe,z2r),e(co,Q2r),e(co,sn),e(sn,W2r),e(sn,ZEe),e(ZEe,U2r),e(sn,H2r),e(sn,e4e),e(e4e,J2r),e(sn,Y2r),e(sn,o4e),e(o4e,K2r),e(sn,Z2r),e(co,e1r),e(co,r4e),e(r4e,e4),e(e4,t4e),e(t4e,o1r),e(e4,r1r),e(e4,CY),e(CY,t1r),e(e4,a1r),e(co,n1r),e(co,o4),e(o4,s1r),e(o4,a4e),e(a4e,l1r),e(o4,i1r),e(o4,n4e),e(n4e,d1r),e(co,c1r),M(r4,co,null),b(m,EZe,_),b(m,Jd,_),e(Jd,t4),e(t4,s4e),M(h$,s4e,null),e(Jd,m1r),e(Jd,l4e),e(l4e,f1r),b(m,CZe,_),b(m,zo,_),M(u$,zo,null),e(zo,g1r),e(zo,Yd),e(Yd,h1r),e(Yd,wY),e(wY,u1r),e(Yd,p1r),e(Yd,AY),e(AY,_1r),e(Yd,b1r),e(zo,v1r),e(zo,p$),e(p$,F1r),e(p$,i4e),e(i4e,T1r),e(p$,M1r),e(zo,E1r),e(zo,yt),M(_$,yt,null),e(yt,C1r),e(yt,d4e),e(d4e,w1r),e(yt,A1r),e(yt,Kd),e(Kd,L1r),e(Kd,c4e),e(c4e,y1r),e(Kd,x1r),e(Kd,LY),e(LY,$1r),e(Kd,k1r),e(yt,S1r),M(a4,yt,null),e(zo,R1r),e(zo,mo),M(b$,mo,null),e(mo,P1r),e(mo,m4e),e(m4e,B1r),e(mo,I1r),e(mo,ln),e(ln,N1r),e(ln,f4e),e(f4e,q1r),e(ln,j1r),e(ln,g4e),e(g4e,D1r),e(ln,G1r),e(ln,h4e),e(h4e,O1r),e(ln,V1r),e(mo,X1r),e(mo,Zd),e(Zd,n4),e(n4,u4e),e(u4e,z1r),e(n4,Q1r),e(n4,yY),e(yY,W1r),e(n4,U1r),e(Zd,H1r),e(Zd,s4),e(s4,p4e),e(p4e,J1r),e(s4,Y1r),e(s4,xY),e(xY,K1r),e(s4,Z1r),e(Zd,evr),e(Zd,l4),e(l4,_4e),e(_4e,ovr),e(l4,rvr),e(l4,$Y),e($Y,tvr),e(l4,avr),e(mo,nvr),e(mo,i4),e(i4,svr),e(i4,b4e),e(b4e,lvr),e(i4,ivr),e(i4,v4e),e(v4e,dvr),e(mo,cvr),M(d4,mo,null),b(m,wZe,_),b(m,ec,_),e(ec,c4),e(c4,F4e),M(v$,F4e,null),e(ec,mvr),e(ec,T4e),e(T4e,fvr),b(m,AZe,_),b(m,Qo,_),M(F$,Qo,null),e(Qo,gvr),e(Qo,oc),e(oc,hvr),e(oc,kY),e(kY,uvr),e(oc,pvr),e(oc,SY),e(SY,_vr),e(oc,bvr),e(Qo,vvr),e(Qo,T$),e(T$,Fvr),e(T$,M4e),e(M4e,Tvr),e(T$,Mvr),e(Qo,Evr),e(Qo,xt),M(M$,xt,null),e(xt,Cvr),e(xt,E4e),e(E4e,wvr),e(xt,Avr),e(xt,rc),e(rc,Lvr),e(rc,C4e),e(C4e,yvr),e(rc,xvr),e(rc,RY),e(RY,$vr),e(rc,kvr),e(xt,Svr),M(m4,xt,null),e(Qo,Rvr),e(Qo,fo),M(E$,fo,null),e(fo,Pvr),e(fo,w4e),e(w4e,Bvr),e(fo,Ivr),e(fo,dn),e(dn,Nvr),e(dn,A4e),e(A4e,qvr),e(dn,jvr),e(dn,L4e),e(L4e,Dvr),e(dn,Gvr),e(dn,y4e),e(y4e,Ovr),e(dn,Vvr),e(fo,Xvr),e(fo,be),e(be,f4),e(f4,x4e),e(x4e,zvr),e(f4,Qvr),e(f4,PY),e(PY,Wvr),e(f4,Uvr),e(be,Hvr),e(be,g4),e(g4,$4e),e($4e,Jvr),e(g4,Yvr),e(g4,BY),e(BY,Kvr),e(g4,Zvr),e(be,eFr),e(be,h4),e(h4,k4e),e(k4e,oFr),e(h4,rFr),e(h4,IY),e(IY,tFr),e(h4,aFr),e(be,nFr),e(be,u4),e(u4,S4e),e(S4e,sFr),e(u4,lFr),e(u4,NY),e(NY,iFr),e(u4,dFr),e(be,cFr),e(be,bl),e(bl,R4e),e(R4e,mFr),e(bl,fFr),e(bl,qY),e(qY,gFr),e(bl,hFr),e(bl,jY),e(jY,uFr),e(bl,pFr),e(be,_Fr),e(be,p4),e(p4,P4e),e(P4e,bFr),e(p4,vFr),e(p4,DY),e(DY,FFr),e(p4,TFr),e(be,MFr),e(be,vl),e(vl,B4e),e(B4e,EFr),e(vl,CFr),e(vl,GY),e(GY,wFr),e(vl,AFr),e(vl,OY),e(OY,LFr),e(vl,yFr),e(be,xFr),e(be,_4),e(_4,I4e),e(I4e,$Fr),e(_4,kFr),e(_4,VY),e(VY,SFr),e(_4,RFr),e(be,PFr),e(be,$t),e($t,N4e),e(N4e,BFr),e($t,IFr),e($t,XY),e(XY,NFr),e($t,qFr),e($t,zY),e(zY,jFr),e($t,DFr),e($t,QY),e(QY,GFr),e($t,OFr),e(be,VFr),e(be,b4),e(b4,q4e),e(q4e,XFr),e(b4,zFr),e(b4,WY),e(WY,QFr),e(b4,WFr),e(be,UFr),e(be,v4),e(v4,j4e),e(j4e,HFr),e(v4,JFr),e(v4,UY),e(UY,YFr),e(v4,KFr),e(be,ZFr),e(be,F4),e(F4,D4e),e(D4e,eTr),e(F4,oTr),e(F4,HY),e(HY,rTr),e(F4,tTr),e(be,aTr),e(be,T4),e(T4,G4e),e(G4e,nTr),e(T4,sTr),e(T4,JY),e(JY,lTr),e(T4,iTr),e(be,dTr),e(be,M4),e(M4,O4e),e(O4e,cTr),e(M4,mTr),e(M4,YY),e(YY,fTr),e(M4,gTr),e(be,hTr),e(be,E4),e(E4,V4e),e(V4e,uTr),e(E4,pTr),e(E4,KY),e(KY,_Tr),e(E4,bTr),e(be,vTr),e(be,C4),e(C4,X4e),e(X4e,FTr),e(C4,TTr),e(C4,ZY),e(ZY,MTr),e(C4,ETr),e(be,CTr),e(be,w4),e(w4,z4e),e(z4e,wTr),e(w4,ATr),e(w4,eK),e(eK,LTr),e(w4,yTr),e(be,xTr),e(be,A4),e(A4,Q4e),e(Q4e,$Tr),e(A4,kTr),e(A4,oK),e(oK,STr),e(A4,RTr),e(fo,PTr),e(fo,L4),e(L4,BTr),e(L4,W4e),e(W4e,ITr),e(L4,NTr),e(L4,U4e),e(U4e,qTr),e(fo,jTr),M(y4,fo,null),b(m,LZe,_),b(m,tc,_),e(tc,x4),e(x4,H4e),M(C$,H4e,null),e(tc,DTr),e(tc,J4e),e(J4e,GTr),b(m,yZe,_),b(m,Wo,_),M(w$,Wo,null),e(Wo,OTr),e(Wo,ac),e(ac,VTr),e(ac,rK),e(rK,XTr),e(ac,zTr),e(ac,tK),e(tK,QTr),e(ac,WTr),e(Wo,UTr),e(Wo,A$),e(A$,HTr),e(A$,Y4e),e(Y4e,JTr),e(A$,YTr),e(Wo,KTr),e(Wo,kt),M(L$,kt,null),e(kt,ZTr),e(kt,K4e),e(K4e,eMr),e(kt,oMr),e(kt,nc),e(nc,rMr),e(nc,Z4e),e(Z4e,tMr),e(nc,aMr),e(nc,aK),e(aK,nMr),e(nc,sMr),e(kt,lMr),M($4,kt,null),e(Wo,iMr),e(Wo,go),M(y$,go,null),e(go,dMr),e(go,eCe),e(eCe,cMr),e(go,mMr),e(go,cn),e(cn,fMr),e(cn,oCe),e(oCe,gMr),e(cn,hMr),e(cn,rCe),e(rCe,uMr),e(cn,pMr),e(cn,tCe),e(tCe,_Mr),e(cn,bMr),e(go,vMr),e(go,aCe),e(aCe,k4),e(k4,nCe),e(nCe,FMr),e(k4,TMr),e(k4,nK),e(nK,MMr),e(k4,EMr),e(go,CMr),e(go,S4),e(S4,wMr),e(S4,sCe),e(sCe,AMr),e(S4,LMr),e(S4,lCe),e(lCe,yMr),e(go,xMr),M(R4,go,null),b(m,xZe,_),b(m,sc,_),e(sc,P4),e(P4,iCe),M(x$,iCe,null),e(sc,$Mr),e(sc,dCe),e(dCe,kMr),b(m,$Ze,_),b(m,Uo,_),M($$,Uo,null),e(Uo,SMr),e(Uo,lc),e(lc,RMr),e(lc,sK),e(sK,PMr),e(lc,BMr),e(lc,lK),e(lK,IMr),e(lc,NMr),e(Uo,qMr),e(Uo,k$),e(k$,jMr),e(k$,cCe),e(cCe,DMr),e(k$,GMr),e(Uo,OMr),e(Uo,St),M(S$,St,null),e(St,VMr),e(St,mCe),e(mCe,XMr),e(St,zMr),e(St,ic),e(ic,QMr),e(ic,fCe),e(fCe,WMr),e(ic,UMr),e(ic,iK),e(iK,HMr),e(ic,JMr),e(St,YMr),M(B4,St,null),e(Uo,KMr),e(Uo,ho),M(R$,ho,null),e(ho,ZMr),e(ho,gCe),e(gCe,eEr),e(ho,oEr),e(ho,mn),e(mn,rEr),e(mn,hCe),e(hCe,tEr),e(mn,aEr),e(mn,uCe),e(uCe,nEr),e(mn,sEr),e(mn,pCe),e(pCe,lEr),e(mn,iEr),e(ho,dEr),e(ho,_Ce),e(_Ce,I4),e(I4,bCe),e(bCe,cEr),e(I4,mEr),e(I4,dK),e(dK,fEr),e(I4,gEr),e(ho,hEr),e(ho,N4),e(N4,uEr),e(N4,vCe),e(vCe,pEr),e(N4,_Er),e(N4,FCe),e(FCe,bEr),e(ho,vEr),M(q4,ho,null),b(m,kZe,_),b(m,dc,_),e(dc,j4),e(j4,TCe),M(P$,TCe,null),e(dc,FEr),e(dc,MCe),e(MCe,TEr),b(m,SZe,_),b(m,Ho,_),M(B$,Ho,null),e(Ho,MEr),e(Ho,cc),e(cc,EEr),e(cc,cK),e(cK,CEr),e(cc,wEr),e(cc,mK),e(mK,AEr),e(cc,LEr),e(Ho,yEr),e(Ho,I$),e(I$,xEr),e(I$,ECe),e(ECe,$Er),e(I$,kEr),e(Ho,SEr),e(Ho,Rt),M(N$,Rt,null),e(Rt,REr),e(Rt,CCe),e(CCe,PEr),e(Rt,BEr),e(Rt,mc),e(mc,IEr),e(mc,wCe),e(wCe,NEr),e(mc,qEr),e(mc,fK),e(fK,jEr),e(mc,DEr),e(Rt,GEr),M(D4,Rt,null),e(Ho,OEr),e(Ho,uo),M(q$,uo,null),e(uo,VEr),e(uo,ACe),e(ACe,XEr),e(uo,zEr),e(uo,fn),e(fn,QEr),e(fn,LCe),e(LCe,WEr),e(fn,UEr),e(fn,yCe),e(yCe,HEr),e(fn,JEr),e(fn,xCe),e(xCe,YEr),e(fn,KEr),e(uo,ZEr),e(uo,$Ce),e($Ce,G4),e(G4,kCe),e(kCe,e4r),e(G4,o4r),e(G4,gK),e(gK,r4r),e(G4,t4r),e(uo,a4r),e(uo,O4),e(O4,n4r),e(O4,SCe),e(SCe,s4r),e(O4,l4r),e(O4,RCe),e(RCe,i4r),e(uo,d4r),M(V4,uo,null),b(m,RZe,_),b(m,fc,_),e(fc,X4),e(X4,PCe),M(j$,PCe,null),e(fc,c4r),e(fc,BCe),e(BCe,m4r),b(m,PZe,_),b(m,Jo,_),M(D$,Jo,null),e(Jo,f4r),e(Jo,gc),e(gc,g4r),e(gc,hK),e(hK,h4r),e(gc,u4r),e(gc,uK),e(uK,p4r),e(gc,_4r),e(Jo,b4r),e(Jo,G$),e(G$,v4r),e(G$,ICe),e(ICe,F4r),e(G$,T4r),e(Jo,M4r),e(Jo,Pt),M(O$,Pt,null),e(Pt,E4r),e(Pt,NCe),e(NCe,C4r),e(Pt,w4r),e(Pt,hc),e(hc,A4r),e(hc,qCe),e(qCe,L4r),e(hc,y4r),e(hc,pK),e(pK,x4r),e(hc,$4r),e(Pt,k4r),M(z4,Pt,null),e(Jo,S4r),e(Jo,po),M(V$,po,null),e(po,R4r),e(po,jCe),e(jCe,P4r),e(po,B4r),e(po,gn),e(gn,I4r),e(gn,DCe),e(DCe,N4r),e(gn,q4r),e(gn,GCe),e(GCe,j4r),e(gn,D4r),e(gn,OCe),e(OCe,G4r),e(gn,O4r),e(po,V4r),e(po,Pe),e(Pe,Q4),e(Q4,VCe),e(VCe,X4r),e(Q4,z4r),e(Q4,_K),e(_K,Q4r),e(Q4,W4r),e(Pe,U4r),e(Pe,W4),e(W4,XCe),e(XCe,H4r),e(W4,J4r),e(W4,bK),e(bK,Y4r),e(W4,K4r),e(Pe,Z4r),e(Pe,U4),e(U4,zCe),e(zCe,eCr),e(U4,oCr),e(U4,vK),e(vK,rCr),e(U4,tCr),e(Pe,aCr),e(Pe,H4),e(H4,QCe),e(QCe,nCr),e(H4,sCr),e(H4,FK),e(FK,lCr),e(H4,iCr),e(Pe,dCr),e(Pe,J4),e(J4,WCe),e(WCe,cCr),e(J4,mCr),e(J4,TK),e(TK,fCr),e(J4,gCr),e(Pe,hCr),e(Pe,Y4),e(Y4,UCe),e(UCe,uCr),e(Y4,pCr),e(Y4,MK),e(MK,_Cr),e(Y4,bCr),e(Pe,vCr),e(Pe,K4),e(K4,HCe),e(HCe,FCr),e(K4,TCr),e(K4,EK),e(EK,MCr),e(K4,ECr),e(Pe,CCr),e(Pe,Z4),e(Z4,JCe),e(JCe,wCr),e(Z4,ACr),e(Z4,CK),e(CK,LCr),e(Z4,yCr),e(Pe,xCr),e(Pe,eC),e(eC,YCe),e(YCe,$Cr),e(eC,kCr),e(eC,wK),e(wK,SCr),e(eC,RCr),e(po,PCr),e(po,oC),e(oC,BCr),e(oC,KCe),e(KCe,ICr),e(oC,NCr),e(oC,ZCe),e(ZCe,qCr),e(po,jCr),M(rC,po,null),b(m,BZe,_),b(m,uc,_),e(uc,tC),e(tC,e3e),M(X$,e3e,null),e(uc,DCr),e(uc,o3e),e(o3e,GCr),b(m,IZe,_),b(m,Yo,_),M(z$,Yo,null),e(Yo,OCr),e(Yo,pc),e(pc,VCr),e(pc,AK),e(AK,XCr),e(pc,zCr),e(pc,LK),e(LK,QCr),e(pc,WCr),e(Yo,UCr),e(Yo,Q$),e(Q$,HCr),e(Q$,r3e),e(r3e,JCr),e(Q$,YCr),e(Yo,KCr),e(Yo,Bt),M(W$,Bt,null),e(Bt,ZCr),e(Bt,t3e),e(t3e,e3r),e(Bt,o3r),e(Bt,_c),e(_c,r3r),e(_c,a3e),e(a3e,t3r),e(_c,a3r),e(_c,yK),e(yK,n3r),e(_c,s3r),e(Bt,l3r),M(aC,Bt,null),e(Yo,i3r),e(Yo,_o),M(U$,_o,null),e(_o,d3r),e(_o,n3e),e(n3e,c3r),e(_o,m3r),e(_o,hn),e(hn,f3r),e(hn,s3e),e(s3e,g3r),e(hn,h3r),e(hn,l3e),e(l3e,u3r),e(hn,p3r),e(hn,i3e),e(i3e,_3r),e(hn,b3r),e(_o,v3r),e(_o,mt),e(mt,nC),e(nC,d3e),e(d3e,F3r),e(nC,T3r),e(nC,xK),e(xK,M3r),e(nC,E3r),e(mt,C3r),e(mt,sC),e(sC,c3e),e(c3e,w3r),e(sC,A3r),e(sC,$K),e($K,L3r),e(sC,y3r),e(mt,x3r),e(mt,lC),e(lC,m3e),e(m3e,$3r),e(lC,k3r),e(lC,kK),e(kK,S3r),e(lC,R3r),e(mt,P3r),e(mt,iC),e(iC,f3e),e(f3e,B3r),e(iC,I3r),e(iC,SK),e(SK,N3r),e(iC,q3r),e(mt,j3r),e(mt,dC),e(dC,g3e),e(g3e,D3r),e(dC,G3r),e(dC,RK),e(RK,O3r),e(dC,V3r),e(_o,X3r),e(_o,cC),e(cC,z3r),e(cC,h3e),e(h3e,Q3r),e(cC,W3r),e(cC,u3e),e(u3e,U3r),e(_o,H3r),M(mC,_o,null),b(m,NZe,_),b(m,bc,_),e(bc,fC),e(fC,p3e),M(H$,p3e,null),e(bc,J3r),e(bc,_3e),e(_3e,Y3r),b(m,qZe,_),b(m,Ko,_),M(J$,Ko,null),e(Ko,K3r),e(Ko,vc),e(vc,Z3r),e(vc,PK),e(PK,e5r),e(vc,o5r),e(vc,BK),e(BK,r5r),e(vc,t5r),e(Ko,a5r),e(Ko,Y$),e(Y$,n5r),e(Y$,b3e),e(b3e,s5r),e(Y$,l5r),e(Ko,i5r),e(Ko,It),M(K$,It,null),e(It,d5r),e(It,v3e),e(v3e,c5r),e(It,m5r),e(It,Fc),e(Fc,f5r),e(Fc,F3e),e(F3e,g5r),e(Fc,h5r),e(Fc,IK),e(IK,u5r),e(Fc,p5r),e(It,_5r),M(gC,It,null),e(Ko,b5r),e(Ko,bo),M(Z$,bo,null),e(bo,v5r),e(bo,T3e),e(T3e,F5r),e(bo,T5r),e(bo,un),e(un,M5r),e(un,M3e),e(M3e,E5r),e(un,C5r),e(un,E3e),e(E3e,w5r),e(un,A5r),e(un,C3e),e(C3e,L5r),e(un,y5r),e(bo,x5r),e(bo,Le),e(Le,hC),e(hC,w3e),e(w3e,$5r),e(hC,k5r),e(hC,NK),e(NK,S5r),e(hC,R5r),e(Le,P5r),e(Le,uC),e(uC,A3e),e(A3e,B5r),e(uC,I5r),e(uC,qK),e(qK,N5r),e(uC,q5r),e(Le,j5r),e(Le,pC),e(pC,L3e),e(L3e,D5r),e(pC,G5r),e(pC,jK),e(jK,O5r),e(pC,V5r),e(Le,X5r),e(Le,_C),e(_C,y3e),e(y3e,z5r),e(_C,Q5r),e(_C,DK),e(DK,W5r),e(_C,U5r),e(Le,H5r),e(Le,bC),e(bC,x3e),e(x3e,J5r),e(bC,Y5r),e(bC,GK),e(GK,K5r),e(bC,Z5r),e(Le,e0r),e(Le,vC),e(vC,$3e),e($3e,o0r),e(vC,r0r),e(vC,OK),e(OK,t0r),e(vC,a0r),e(Le,n0r),e(Le,FC),e(FC,k3e),e(k3e,s0r),e(FC,l0r),e(FC,VK),e(VK,i0r),e(FC,d0r),e(Le,c0r),e(Le,TC),e(TC,S3e),e(S3e,m0r),e(TC,f0r),e(TC,XK),e(XK,g0r),e(TC,h0r),e(Le,u0r),e(Le,MC),e(MC,R3e),e(R3e,p0r),e(MC,_0r),e(MC,zK),e(zK,b0r),e(MC,v0r),e(Le,F0r),e(Le,EC),e(EC,P3e),e(P3e,T0r),e(EC,M0r),e(EC,QK),e(QK,E0r),e(EC,C0r),e(bo,w0r),e(bo,CC),e(CC,A0r),e(CC,B3e),e(B3e,L0r),e(CC,y0r),e(CC,I3e),e(I3e,x0r),e(bo,$0r),M(wC,bo,null),b(m,jZe,_),b(m,Tc,_),e(Tc,AC),e(AC,N3e),M(ek,N3e,null),e(Tc,k0r),e(Tc,q3e),e(q3e,S0r),b(m,DZe,_),b(m,Zo,_),M(ok,Zo,null),e(Zo,R0r),e(Zo,Mc),e(Mc,P0r),e(Mc,WK),e(WK,B0r),e(Mc,I0r),e(Mc,UK),e(UK,N0r),e(Mc,q0r),e(Zo,j0r),e(Zo,rk),e(rk,D0r),e(rk,j3e),e(j3e,G0r),e(rk,O0r),e(Zo,V0r),e(Zo,Nt),M(tk,Nt,null),e(Nt,X0r),e(Nt,D3e),e(D3e,z0r),e(Nt,Q0r),e(Nt,Ec),e(Ec,W0r),e(Ec,G3e),e(G3e,U0r),e(Ec,H0r),e(Ec,HK),e(HK,J0r),e(Ec,Y0r),e(Nt,K0r),M(LC,Nt,null),e(Zo,Z0r),e(Zo,vo),M(ak,vo,null),e(vo,ewr),e(vo,O3e),e(O3e,owr),e(vo,rwr),e(vo,pn),e(pn,twr),e(pn,V3e),e(V3e,awr),e(pn,nwr),e(pn,X3e),e(X3e,swr),e(pn,lwr),e(pn,z3e),e(z3e,iwr),e(pn,dwr),e(vo,cwr),e(vo,nk),e(nk,yC),e(yC,Q3e),e(Q3e,mwr),e(yC,fwr),e(yC,JK),e(JK,gwr),e(yC,hwr),e(nk,uwr),e(nk,xC),e(xC,W3e),e(W3e,pwr),e(xC,_wr),e(xC,YK),e(YK,bwr),e(xC,vwr),e(vo,Fwr),e(vo,$C),e($C,Twr),e($C,U3e),e(U3e,Mwr),e($C,Ewr),e($C,H3e),e(H3e,Cwr),e(vo,wwr),M(kC,vo,null),b(m,GZe,_),b(m,Cc,_),e(Cc,SC),e(SC,J3e),M(sk,J3e,null),e(Cc,Awr),e(Cc,Y3e),e(Y3e,Lwr),b(m,OZe,_),b(m,er,_),M(lk,er,null),e(er,ywr),e(er,wc),e(wc,xwr),e(wc,KK),e(KK,$wr),e(wc,kwr),e(wc,ZK),e(ZK,Swr),e(wc,Rwr),e(er,Pwr),e(er,ik),e(ik,Bwr),e(ik,K3e),e(K3e,Iwr),e(ik,Nwr),e(er,qwr),e(er,qt),M(dk,qt,null),e(qt,jwr),e(qt,Z3e),e(Z3e,Dwr),e(qt,Gwr),e(qt,Ac),e(Ac,Owr),e(Ac,e5e),e(e5e,Vwr),e(Ac,Xwr),e(Ac,eZ),e(eZ,zwr),e(Ac,Qwr),e(qt,Wwr),M(RC,qt,null),e(er,Uwr),e(er,Fo),M(ck,Fo,null),e(Fo,Hwr),e(Fo,o5e),e(o5e,Jwr),e(Fo,Ywr),e(Fo,_n),e(_n,Kwr),e(_n,r5e),e(r5e,Zwr),e(_n,eAr),e(_n,t5e),e(t5e,oAr),e(_n,rAr),e(_n,a5e),e(a5e,tAr),e(_n,aAr),e(Fo,nAr),e(Fo,ft),e(ft,PC),e(PC,n5e),e(n5e,sAr),e(PC,lAr),e(PC,oZ),e(oZ,iAr),e(PC,dAr),e(ft,cAr),e(ft,BC),e(BC,s5e),e(s5e,mAr),e(BC,fAr),e(BC,rZ),e(rZ,gAr),e(BC,hAr),e(ft,uAr),e(ft,IC),e(IC,l5e),e(l5e,pAr),e(IC,_Ar),e(IC,tZ),e(tZ,bAr),e(IC,vAr),e(ft,FAr),e(ft,NC),e(NC,i5e),e(i5e,TAr),e(NC,MAr),e(NC,aZ),e(aZ,EAr),e(NC,CAr),e(ft,wAr),e(ft,qC),e(qC,d5e),e(d5e,AAr),e(qC,LAr),e(qC,nZ),e(nZ,yAr),e(qC,xAr),e(Fo,$Ar),e(Fo,jC),e(jC,kAr),e(jC,c5e),e(c5e,SAr),e(jC,RAr),e(jC,m5e),e(m5e,PAr),e(Fo,BAr),M(DC,Fo,null),b(m,VZe,_),b(m,Lc,_),e(Lc,GC),e(GC,f5e),M(mk,f5e,null),e(Lc,IAr),e(Lc,g5e),e(g5e,NAr),b(m,XZe,_),b(m,or,_),M(fk,or,null),e(or,qAr),e(or,yc),e(yc,jAr),e(yc,sZ),e(sZ,DAr),e(yc,GAr),e(yc,lZ),e(lZ,OAr),e(yc,VAr),e(or,XAr),e(or,gk),e(gk,zAr),e(gk,h5e),e(h5e,QAr),e(gk,WAr),e(or,UAr),e(or,jt),M(hk,jt,null),e(jt,HAr),e(jt,u5e),e(u5e,JAr),e(jt,YAr),e(jt,xc),e(xc,KAr),e(xc,p5e),e(p5e,ZAr),e(xc,e6r),e(xc,iZ),e(iZ,o6r),e(xc,r6r),e(jt,t6r),M(OC,jt,null),e(or,a6r),e(or,To),M(uk,To,null),e(To,n6r),e(To,_5e),e(_5e,s6r),e(To,l6r),e(To,bn),e(bn,i6r),e(bn,b5e),e(b5e,d6r),e(bn,c6r),e(bn,v5e),e(v5e,m6r),e(bn,f6r),e(bn,F5e),e(F5e,g6r),e(bn,h6r),e(To,u6r),e(To,vn),e(vn,VC),e(VC,T5e),e(T5e,p6r),e(VC,_6r),e(VC,dZ),e(dZ,b6r),e(VC,v6r),e(vn,F6r),e(vn,XC),e(XC,M5e),e(M5e,T6r),e(XC,M6r),e(XC,cZ),e(cZ,E6r),e(XC,C6r),e(vn,w6r),e(vn,zC),e(zC,E5e),e(E5e,A6r),e(zC,L6r),e(zC,mZ),e(mZ,y6r),e(zC,x6r),e(vn,$6r),e(vn,QC),e(QC,C5e),e(C5e,k6r),e(QC,S6r),e(QC,fZ),e(fZ,R6r),e(QC,P6r),e(To,B6r),e(To,WC),e(WC,I6r),e(WC,w5e),e(w5e,N6r),e(WC,q6r),e(WC,A5e),e(A5e,j6r),e(To,D6r),M(UC,To,null),b(m,zZe,_),b(m,$c,_),e($c,HC),e(HC,L5e),M(pk,L5e,null),e($c,G6r),e($c,y5e),e(y5e,O6r),b(m,QZe,_),b(m,rr,_),M(_k,rr,null),e(rr,V6r),e(rr,kc),e(kc,X6r),e(kc,gZ),e(gZ,z6r),e(kc,Q6r),e(kc,hZ),e(hZ,W6r),e(kc,U6r),e(rr,H6r),e(rr,bk),e(bk,J6r),e(bk,x5e),e(x5e,Y6r),e(bk,K6r),e(rr,Z6r),e(rr,Dt),M(vk,Dt,null),e(Dt,e7r),e(Dt,$5e),e($5e,o7r),e(Dt,r7r),e(Dt,Sc),e(Sc,t7r),e(Sc,k5e),e(k5e,a7r),e(Sc,n7r),e(Sc,uZ),e(uZ,s7r),e(Sc,l7r),e(Dt,i7r),M(JC,Dt,null),e(rr,d7r),e(rr,Mo),M(Fk,Mo,null),e(Mo,c7r),e(Mo,S5e),e(S5e,m7r),e(Mo,f7r),e(Mo,Fn),e(Fn,g7r),e(Fn,R5e),e(R5e,h7r),e(Fn,u7r),e(Fn,P5e),e(P5e,p7r),e(Fn,_7r),e(Fn,B5e),e(B5e,b7r),e(Fn,v7r),e(Mo,F7r),e(Mo,Tn),e(Tn,YC),e(YC,I5e),e(I5e,T7r),e(YC,M7r),e(YC,pZ),e(pZ,E7r),e(YC,C7r),e(Tn,w7r),e(Tn,KC),e(KC,N5e),e(N5e,A7r),e(KC,L7r),e(KC,_Z),e(_Z,y7r),e(KC,x7r),e(Tn,$7r),e(Tn,ZC),e(ZC,q5e),e(q5e,k7r),e(ZC,S7r),e(ZC,bZ),e(bZ,R7r),e(ZC,P7r),e(Tn,B7r),e(Tn,e3),e(e3,j5e),e(j5e,I7r),e(e3,N7r),e(e3,vZ),e(vZ,q7r),e(e3,j7r),e(Mo,D7r),e(Mo,o3),e(o3,G7r),e(o3,D5e),e(D5e,O7r),e(o3,V7r),e(o3,G5e),e(G5e,X7r),e(Mo,z7r),M(r3,Mo,null),b(m,WZe,_),b(m,Rc,_),e(Rc,t3),e(t3,O5e),M(Tk,O5e,null),e(Rc,Q7r),e(Rc,V5e),e(V5e,W7r),b(m,UZe,_),b(m,tr,_),M(Mk,tr,null),e(tr,U7r),e(tr,Pc),e(Pc,H7r),e(Pc,FZ),e(FZ,J7r),e(Pc,Y7r),e(Pc,TZ),e(TZ,K7r),e(Pc,Z7r),e(tr,eLr),e(tr,Ek),e(Ek,oLr),e(Ek,X5e),e(X5e,rLr),e(Ek,tLr),e(tr,aLr),e(tr,Gt),M(Ck,Gt,null),e(Gt,nLr),e(Gt,z5e),e(z5e,sLr),e(Gt,lLr),e(Gt,Bc),e(Bc,iLr),e(Bc,Q5e),e(Q5e,dLr),e(Bc,cLr),e(Bc,MZ),e(MZ,mLr),e(Bc,fLr),e(Gt,gLr),M(a3,Gt,null),e(tr,hLr),e(tr,Eo),M(wk,Eo,null),e(Eo,uLr),e(Eo,W5e),e(W5e,pLr),e(Eo,_Lr),e(Eo,Mn),e(Mn,bLr),e(Mn,U5e),e(U5e,vLr),e(Mn,FLr),e(Mn,H5e),e(H5e,TLr),e(Mn,MLr),e(Mn,J5e),e(J5e,ELr),e(Mn,CLr),e(Eo,wLr),e(Eo,Y5e),e(Y5e,n3),e(n3,K5e),e(K5e,ALr),e(n3,LLr),e(n3,EZ),e(EZ,yLr),e(n3,xLr),e(Eo,$Lr),e(Eo,s3),e(s3,kLr),e(s3,Z5e),e(Z5e,SLr),e(s3,RLr),e(s3,e0e),e(e0e,PLr),e(Eo,BLr),M(l3,Eo,null),b(m,HZe,_),b(m,Ic,_),e(Ic,i3),e(i3,o0e),M(Ak,o0e,null),e(Ic,ILr),e(Ic,r0e),e(r0e,NLr),b(m,JZe,_),b(m,ar,_),M(Lk,ar,null),e(ar,qLr),e(ar,Nc),e(Nc,jLr),e(Nc,CZ),e(CZ,DLr),e(Nc,GLr),e(Nc,wZ),e(wZ,OLr),e(Nc,VLr),e(ar,XLr),e(ar,yk),e(yk,zLr),e(yk,t0e),e(t0e,QLr),e(yk,WLr),e(ar,ULr),e(ar,Ot),M(xk,Ot,null),e(Ot,HLr),e(Ot,a0e),e(a0e,JLr),e(Ot,YLr),e(Ot,qc),e(qc,KLr),e(qc,n0e),e(n0e,ZLr),e(qc,eyr),e(qc,AZ),e(AZ,oyr),e(qc,ryr),e(Ot,tyr),M(d3,Ot,null),e(ar,ayr),e(ar,Co),M($k,Co,null),e(Co,nyr),e(Co,s0e),e(s0e,syr),e(Co,lyr),e(Co,En),e(En,iyr),e(En,l0e),e(l0e,dyr),e(En,cyr),e(En,i0e),e(i0e,myr),e(En,fyr),e(En,d0e),e(d0e,gyr),e(En,hyr),e(Co,uyr),e(Co,gt),e(gt,c3),e(c3,c0e),e(c0e,pyr),e(c3,_yr),e(c3,LZ),e(LZ,byr),e(c3,vyr),e(gt,Fyr),e(gt,m3),e(m3,m0e),e(m0e,Tyr),e(m3,Myr),e(m3,yZ),e(yZ,Eyr),e(m3,Cyr),e(gt,wyr),e(gt,f3),e(f3,f0e),e(f0e,Ayr),e(f3,Lyr),e(f3,xZ),e(xZ,yyr),e(f3,xyr),e(gt,$yr),e(gt,g3),e(g3,g0e),e(g0e,kyr),e(g3,Syr),e(g3,$Z),e($Z,Ryr),e(g3,Pyr),e(gt,Byr),e(gt,h3),e(h3,h0e),e(h0e,Iyr),e(h3,Nyr),e(h3,kZ),e(kZ,qyr),e(h3,jyr),e(Co,Dyr),e(Co,u3),e(u3,Gyr),e(u3,u0e),e(u0e,Oyr),e(u3,Vyr),e(u3,p0e),e(p0e,Xyr),e(Co,zyr),M(p3,Co,null),b(m,YZe,_),b(m,jc,_),e(jc,_3),e(_3,_0e),M(kk,_0e,null),e(jc,Qyr),e(jc,b0e),e(b0e,Wyr),b(m,KZe,_),b(m,nr,_),M(Sk,nr,null),e(nr,Uyr),e(nr,Dc),e(Dc,Hyr),e(Dc,SZ),e(SZ,Jyr),e(Dc,Yyr),e(Dc,RZ),e(RZ,Kyr),e(Dc,Zyr),e(nr,e8r),e(nr,Rk),e(Rk,o8r),e(Rk,v0e),e(v0e,r8r),e(Rk,t8r),e(nr,a8r),e(nr,Vt),M(Pk,Vt,null),e(Vt,n8r),e(Vt,F0e),e(F0e,s8r),e(Vt,l8r),e(Vt,Gc),e(Gc,i8r),e(Gc,T0e),e(T0e,d8r),e(Gc,c8r),e(Gc,PZ),e(PZ,m8r),e(Gc,f8r),e(Vt,g8r),M(b3,Vt,null),e(nr,h8r),e(nr,wo),M(Bk,wo,null),e(wo,u8r),e(wo,M0e),e(M0e,p8r),e(wo,_8r),e(wo,Cn),e(Cn,b8r),e(Cn,E0e),e(E0e,v8r),e(Cn,F8r),e(Cn,C0e),e(C0e,T8r),e(Cn,M8r),e(Cn,w0e),e(w0e,E8r),e(Cn,C8r),e(wo,w8r),e(wo,A0e),e(A0e,v3),e(v3,L0e),e(L0e,A8r),e(v3,L8r),e(v3,BZ),e(BZ,y8r),e(v3,x8r),e(wo,$8r),e(wo,F3),e(F3,k8r),e(F3,y0e),e(y0e,S8r),e(F3,R8r),e(F3,x0e),e(x0e,P8r),e(wo,B8r),M(T3,wo,null),b(m,ZZe,_),b(m,Oc,_),e(Oc,M3),e(M3,$0e),M(Ik,$0e,null),e(Oc,I8r),e(Oc,k0e),e(k0e,N8r),b(m,eeo,_),b(m,sr,_),M(Nk,sr,null),e(sr,q8r),e(sr,Vc),e(Vc,j8r),e(Vc,IZ),e(IZ,D8r),e(Vc,G8r),e(Vc,NZ),e(NZ,O8r),e(Vc,V8r),e(sr,X8r),e(sr,qk),e(qk,z8r),e(qk,S0e),e(S0e,Q8r),e(qk,W8r),e(sr,U8r),e(sr,Xt),M(jk,Xt,null),e(Xt,H8r),e(Xt,R0e),e(R0e,J8r),e(Xt,Y8r),e(Xt,Xc),e(Xc,K8r),e(Xc,P0e),e(P0e,Z8r),e(Xc,e9r),e(Xc,qZ),e(qZ,o9r),e(Xc,r9r),e(Xt,t9r),M(E3,Xt,null),e(sr,a9r),e(sr,Ir),M(Dk,Ir,null),e(Ir,n9r),e(Ir,B0e),e(B0e,s9r),e(Ir,l9r),e(Ir,wn),e(wn,i9r),e(wn,I0e),e(I0e,d9r),e(wn,c9r),e(wn,N0e),e(N0e,m9r),e(wn,f9r),e(wn,q0e),e(q0e,g9r),e(wn,h9r),e(Ir,u9r),e(Ir,N),e(N,C3),e(C3,j0e),e(j0e,p9r),e(C3,_9r),e(C3,jZ),e(jZ,b9r),e(C3,v9r),e(N,F9r),e(N,w3),e(w3,D0e),e(D0e,T9r),e(w3,M9r),e(w3,DZ),e(DZ,E9r),e(w3,C9r),e(N,w9r),e(N,A3),e(A3,G0e),e(G0e,A9r),e(A3,L9r),e(A3,GZ),e(GZ,y9r),e(A3,x9r),e(N,$9r),e(N,L3),e(L3,O0e),e(O0e,k9r),e(L3,S9r),e(L3,OZ),e(OZ,R9r),e(L3,P9r),e(N,B9r),e(N,y3),e(y3,V0e),e(V0e,I9r),e(y3,N9r),e(y3,VZ),e(VZ,q9r),e(y3,j9r),e(N,D9r),e(N,x3),e(x3,X0e),e(X0e,G9r),e(x3,O9r),e(x3,XZ),e(XZ,V9r),e(x3,X9r),e(N,z9r),e(N,$3),e($3,z0e),e(z0e,Q9r),e($3,W9r),e($3,zZ),e(zZ,U9r),e($3,H9r),e(N,J9r),e(N,k3),e(k3,Q0e),e(Q0e,Y9r),e(k3,K9r),e(k3,QZ),e(QZ,Z9r),e(k3,exr),e(N,oxr),e(N,S3),e(S3,W0e),e(W0e,rxr),e(S3,txr),e(S3,WZ),e(WZ,axr),e(S3,nxr),e(N,sxr),e(N,R3),e(R3,U0e),e(U0e,lxr),e(R3,ixr),e(R3,UZ),e(UZ,dxr),e(R3,cxr),e(N,mxr),e(N,P3),e(P3,H0e),e(H0e,fxr),e(P3,gxr),e(P3,HZ),e(HZ,hxr),e(P3,uxr),e(N,pxr),e(N,B3),e(B3,J0e),e(J0e,_xr),e(B3,bxr),e(B3,JZ),e(JZ,vxr),e(B3,Fxr),e(N,Txr),e(N,I3),e(I3,Y0e),e(Y0e,Mxr),e(I3,Exr),e(I3,YZ),e(YZ,Cxr),e(I3,wxr),e(N,Axr),e(N,N3),e(N3,K0e),e(K0e,Lxr),e(N3,yxr),e(N3,KZ),e(KZ,xxr),e(N3,$xr),e(N,kxr),e(N,q3),e(q3,Z0e),e(Z0e,Sxr),e(q3,Rxr),e(q3,ZZ),e(ZZ,Pxr),e(q3,Bxr),e(N,Ixr),e(N,j3),e(j3,ewe),e(ewe,Nxr),e(j3,qxr),e(j3,eee),e(eee,jxr),e(j3,Dxr),e(N,Gxr),e(N,D3),e(D3,owe),e(owe,Oxr),e(D3,Vxr),e(D3,oee),e(oee,Xxr),e(D3,zxr),e(N,Qxr),e(N,G3),e(G3,rwe),e(rwe,Wxr),e(G3,Uxr),e(G3,ree),e(ree,Hxr),e(G3,Jxr),e(N,Yxr),e(N,Fl),e(Fl,twe),e(twe,Kxr),e(Fl,Zxr),e(Fl,tee),e(tee,e$r),e(Fl,o$r),e(Fl,aee),e(aee,r$r),e(Fl,t$r),e(N,a$r),e(N,O3),e(O3,awe),e(awe,n$r),e(O3,s$r),e(O3,nee),e(nee,l$r),e(O3,i$r),e(N,d$r),e(N,V3),e(V3,nwe),e(nwe,c$r),e(V3,m$r),e(V3,see),e(see,f$r),e(V3,g$r),e(N,h$r),e(N,X3),e(X3,swe),e(swe,u$r),e(X3,p$r),e(X3,lee),e(lee,_$r),e(X3,b$r),e(N,v$r),e(N,z3),e(z3,lwe),e(lwe,F$r),e(z3,T$r),e(z3,iee),e(iee,M$r),e(z3,E$r),e(N,C$r),e(N,Q3),e(Q3,iwe),e(iwe,w$r),e(Q3,A$r),e(Q3,dee),e(dee,L$r),e(Q3,y$r),e(N,x$r),e(N,W3),e(W3,dwe),e(dwe,$$r),e(W3,k$r),e(W3,cee),e(cee,S$r),e(W3,R$r),e(N,P$r),e(N,U3),e(U3,cwe),e(cwe,B$r),e(U3,I$r),e(U3,mee),e(mee,N$r),e(U3,q$r),e(N,j$r),e(N,H3),e(H3,mwe),e(mwe,D$r),e(H3,G$r),e(H3,fee),e(fee,O$r),e(H3,V$r),e(N,X$r),e(N,J3),e(J3,fwe),e(fwe,z$r),e(J3,Q$r),e(J3,gee),e(gee,W$r),e(J3,U$r),e(N,H$r),e(N,Y3),e(Y3,gwe),e(gwe,J$r),e(Y3,Y$r),e(Y3,hee),e(hee,K$r),e(Y3,Z$r),e(N,ekr),e(N,K3),e(K3,hwe),e(hwe,okr),e(K3,rkr),e(K3,uee),e(uee,tkr),e(K3,akr),e(N,nkr),e(N,Z3),e(Z3,uwe),e(uwe,skr),e(Z3,lkr),e(Z3,pee),e(pee,ikr),e(Z3,dkr),e(N,ckr),e(N,e5),e(e5,pwe),e(pwe,mkr),e(e5,fkr),e(e5,_ee),e(_ee,gkr),e(e5,hkr),e(N,ukr),e(N,o5),e(o5,_we),e(_we,pkr),e(o5,_kr),e(o5,bee),e(bee,bkr),e(o5,vkr),e(N,Fkr),e(N,r5),e(r5,bwe),e(bwe,Tkr),e(r5,Mkr),e(r5,vee),e(vee,Ekr),e(r5,Ckr),e(N,wkr),e(N,t5),e(t5,vwe),e(vwe,Akr),e(t5,Lkr),e(t5,Fee),e(Fee,ykr),e(t5,xkr),e(N,$kr),e(N,a5),e(a5,Fwe),e(Fwe,kkr),e(a5,Skr),e(a5,Tee),e(Tee,Rkr),e(a5,Pkr),e(N,Bkr),e(N,n5),e(n5,Twe),e(Twe,Ikr),e(n5,Nkr),e(n5,Mee),e(Mee,qkr),e(n5,jkr),e(N,Dkr),e(N,s5),e(s5,Mwe),e(Mwe,Gkr),e(s5,Okr),e(s5,Eee),e(Eee,Vkr),e(s5,Xkr),e(N,zkr),e(N,l5),e(l5,Ewe),e(Ewe,Qkr),e(l5,Wkr),e(l5,Cee),e(Cee,Ukr),e(l5,Hkr),e(N,Jkr),e(N,i5),e(i5,Cwe),e(Cwe,Ykr),e(i5,Kkr),e(i5,wee),e(wee,Zkr),e(i5,eSr),e(N,oSr),e(N,d5),e(d5,wwe),e(wwe,rSr),e(d5,tSr),e(d5,Aee),e(Aee,aSr),e(d5,nSr),e(N,sSr),e(N,c5),e(c5,Awe),e(Awe,lSr),e(c5,iSr),e(c5,Lee),e(Lee,dSr),e(c5,cSr),e(N,mSr),e(N,m5),e(m5,Lwe),e(Lwe,fSr),e(m5,gSr),e(m5,yee),e(yee,hSr),e(m5,uSr),e(N,pSr),e(N,f5),e(f5,ywe),e(ywe,_Sr),e(f5,bSr),e(f5,xee),e(xee,vSr),e(f5,FSr),e(N,TSr),e(N,g5),e(g5,xwe),e(xwe,MSr),e(g5,ESr),e(g5,$ee),e($ee,CSr),e(g5,wSr),e(N,ASr),e(N,h5),e(h5,$we),e($we,LSr),e(h5,ySr),e(h5,kee),e(kee,xSr),e(h5,$Sr),e(N,kSr),e(N,u5),e(u5,kwe),e(kwe,SSr),e(u5,RSr),e(u5,See),e(See,PSr),e(u5,BSr),e(N,ISr),e(N,p5),e(p5,Swe),e(Swe,NSr),e(p5,qSr),e(p5,Ree),e(Ree,jSr),e(p5,DSr),e(N,GSr),e(N,_5),e(_5,Rwe),e(Rwe,OSr),e(_5,VSr),e(_5,Pee),e(Pee,XSr),e(_5,zSr),e(N,QSr),e(N,b5),e(b5,Pwe),e(Pwe,WSr),e(b5,USr),e(b5,Bee),e(Bee,HSr),e(b5,JSr),e(N,YSr),e(N,v5),e(v5,Bwe),e(Bwe,KSr),e(v5,ZSr),e(v5,Iee),e(Iee,eRr),e(v5,oRr),e(N,rRr),e(N,F5),e(F5,Iwe),e(Iwe,tRr),e(F5,aRr),e(F5,Nee),e(Nee,nRr),e(F5,sRr),e(N,lRr),e(N,T5),e(T5,Nwe),e(Nwe,iRr),e(T5,dRr),e(T5,qee),e(qee,cRr),e(T5,mRr),e(N,fRr),e(N,M5),e(M5,qwe),e(qwe,gRr),e(M5,hRr),e(M5,jee),e(jee,uRr),e(M5,pRr),e(Ir,_Rr),M(E5,Ir,null),b(m,oeo,_),b(m,zc,_),e(zc,C5),e(C5,jwe),M(Gk,jwe,null),e(zc,bRr),e(zc,Dwe),e(Dwe,vRr),b(m,reo,_),b(m,lr,_),M(Ok,lr,null),e(lr,FRr),e(lr,Qc),e(Qc,TRr),e(Qc,Dee),e(Dee,MRr),e(Qc,ERr),e(Qc,Gee),e(Gee,CRr),e(Qc,wRr),e(lr,ARr),e(lr,Vk),e(Vk,LRr),e(Vk,Gwe),e(Gwe,yRr),e(Vk,xRr),e(lr,$Rr),e(lr,zt),M(Xk,zt,null),e(zt,kRr),e(zt,Owe),e(Owe,SRr),e(zt,RRr),e(zt,Wc),e(Wc,PRr),e(Wc,Vwe),e(Vwe,BRr),e(Wc,IRr),e(Wc,Oee),e(Oee,NRr),e(Wc,qRr),e(zt,jRr),M(w5,zt,null),e(lr,DRr),e(lr,Nr),M(zk,Nr,null),e(Nr,GRr),e(Nr,Xwe),e(Xwe,ORr),e(Nr,VRr),e(Nr,An),e(An,XRr),e(An,zwe),e(zwe,zRr),e(An,QRr),e(An,Qwe),e(Qwe,WRr),e(An,URr),e(An,Wwe),e(Wwe,HRr),e(An,JRr),e(Nr,YRr),e(Nr,se),e(se,A5),e(A5,Uwe),e(Uwe,KRr),e(A5,ZRr),e(A5,Vee),e(Vee,ePr),e(A5,oPr),e(se,rPr),e(se,L5),e(L5,Hwe),e(Hwe,tPr),e(L5,aPr),e(L5,Xee),e(Xee,nPr),e(L5,sPr),e(se,lPr),e(se,y5),e(y5,Jwe),e(Jwe,iPr),e(y5,dPr),e(y5,zee),e(zee,cPr),e(y5,mPr),e(se,fPr),e(se,x5),e(x5,Ywe),e(Ywe,gPr),e(x5,hPr),e(x5,Qee),e(Qee,uPr),e(x5,pPr),e(se,_Pr),e(se,$5),e($5,Kwe),e(Kwe,bPr),e($5,vPr),e($5,Wee),e(Wee,FPr),e($5,TPr),e(se,MPr),e(se,k5),e(k5,Zwe),e(Zwe,EPr),e(k5,CPr),e(k5,Uee),e(Uee,wPr),e(k5,APr),e(se,LPr),e(se,S5),e(S5,eAe),e(eAe,yPr),e(S5,xPr),e(S5,Hee),e(Hee,$Pr),e(S5,kPr),e(se,SPr),e(se,R5),e(R5,oAe),e(oAe,RPr),e(R5,PPr),e(R5,Jee),e(Jee,BPr),e(R5,IPr),e(se,NPr),e(se,P5),e(P5,rAe),e(rAe,qPr),e(P5,jPr),e(P5,Yee),e(Yee,DPr),e(P5,GPr),e(se,OPr),e(se,B5),e(B5,tAe),e(tAe,VPr),e(B5,XPr),e(B5,Kee),e(Kee,zPr),e(B5,QPr),e(se,WPr),e(se,I5),e(I5,aAe),e(aAe,UPr),e(I5,HPr),e(I5,Zee),e(Zee,JPr),e(I5,YPr),e(se,KPr),e(se,N5),e(N5,nAe),e(nAe,ZPr),e(N5,eBr),e(N5,eoe),e(eoe,oBr),e(N5,rBr),e(se,tBr),e(se,q5),e(q5,sAe),e(sAe,aBr),e(q5,nBr),e(q5,ooe),e(ooe,sBr),e(q5,lBr),e(se,iBr),e(se,j5),e(j5,lAe),e(lAe,dBr),e(j5,cBr),e(j5,roe),e(roe,mBr),e(j5,fBr),e(se,gBr),e(se,D5),e(D5,iAe),e(iAe,hBr),e(D5,uBr),e(D5,toe),e(toe,pBr),e(D5,_Br),e(se,bBr),e(se,G5),e(G5,dAe),e(dAe,vBr),e(G5,FBr),e(G5,aoe),e(aoe,TBr),e(G5,MBr),e(se,EBr),e(se,O5),e(O5,cAe),e(cAe,CBr),e(O5,wBr),e(O5,noe),e(noe,ABr),e(O5,LBr),e(se,yBr),e(se,V5),e(V5,mAe),e(mAe,xBr),e(V5,$Br),e(V5,soe),e(soe,kBr),e(V5,SBr),e(se,RBr),e(se,X5),e(X5,fAe),e(fAe,PBr),e(X5,BBr),e(X5,loe),e(loe,IBr),e(X5,NBr),e(se,qBr),e(se,z5),e(z5,gAe),e(gAe,jBr),e(z5,DBr),e(z5,ioe),e(ioe,GBr),e(z5,OBr),e(se,VBr),e(se,Q5),e(Q5,hAe),e(hAe,XBr),e(Q5,zBr),e(Q5,doe),e(doe,QBr),e(Q5,WBr),e(se,UBr),e(se,W5),e(W5,uAe),e(uAe,HBr),e(W5,JBr),e(W5,coe),e(coe,YBr),e(W5,KBr),e(se,ZBr),e(se,U5),e(U5,pAe),e(pAe,eIr),e(U5,oIr),e(U5,moe),e(moe,rIr),e(U5,tIr),e(Nr,aIr),M(H5,Nr,null),b(m,teo,_),b(m,Uc,_),e(Uc,J5),e(J5,_Ae),M(Qk,_Ae,null),e(Uc,nIr),e(Uc,bAe),e(bAe,sIr),b(m,aeo,_),b(m,ir,_),M(Wk,ir,null),e(ir,lIr),e(ir,Hc),e(Hc,iIr),e(Hc,foe),e(foe,dIr),e(Hc,cIr),e(Hc,goe),e(goe,mIr),e(Hc,fIr),e(ir,gIr),e(ir,Uk),e(Uk,hIr),e(Uk,vAe),e(vAe,uIr),e(Uk,pIr),e(ir,_Ir),e(ir,Qt),M(Hk,Qt,null),e(Qt,bIr),e(Qt,FAe),e(FAe,vIr),e(Qt,FIr),e(Qt,Jc),e(Jc,TIr),e(Jc,TAe),e(TAe,MIr),e(Jc,EIr),e(Jc,hoe),e(hoe,CIr),e(Jc,wIr),e(Qt,AIr),M(Y5,Qt,null),e(ir,LIr),e(ir,qr),M(Jk,qr,null),e(qr,yIr),e(qr,MAe),e(MAe,xIr),e(qr,$Ir),e(qr,Ln),e(Ln,kIr),e(Ln,EAe),e(EAe,SIr),e(Ln,RIr),e(Ln,CAe),e(CAe,PIr),e(Ln,BIr),e(Ln,wAe),e(wAe,IIr),e(Ln,NIr),e(qr,qIr),e(qr,Me),e(Me,K5),e(K5,AAe),e(AAe,jIr),e(K5,DIr),e(K5,uoe),e(uoe,GIr),e(K5,OIr),e(Me,VIr),e(Me,Z5),e(Z5,LAe),e(LAe,XIr),e(Z5,zIr),e(Z5,poe),e(poe,QIr),e(Z5,WIr),e(Me,UIr),e(Me,e0),e(e0,yAe),e(yAe,HIr),e(e0,JIr),e(e0,_oe),e(_oe,YIr),e(e0,KIr),e(Me,ZIr),e(Me,o0),e(o0,xAe),e(xAe,eNr),e(o0,oNr),e(o0,boe),e(boe,rNr),e(o0,tNr),e(Me,aNr),e(Me,r0),e(r0,$Ae),e($Ae,nNr),e(r0,sNr),e(r0,voe),e(voe,lNr),e(r0,iNr),e(Me,dNr),e(Me,t0),e(t0,kAe),e(kAe,cNr),e(t0,mNr),e(t0,Foe),e(Foe,fNr),e(t0,gNr),e(Me,hNr),e(Me,a0),e(a0,SAe),e(SAe,uNr),e(a0,pNr),e(a0,Toe),e(Toe,_Nr),e(a0,bNr),e(Me,vNr),e(Me,n0),e(n0,RAe),e(RAe,FNr),e(n0,TNr),e(n0,Moe),e(Moe,MNr),e(n0,ENr),e(Me,CNr),e(Me,s0),e(s0,PAe),e(PAe,wNr),e(s0,ANr),e(s0,Eoe),e(Eoe,LNr),e(s0,yNr),e(Me,xNr),e(Me,l0),e(l0,BAe),e(BAe,$Nr),e(l0,kNr),e(l0,Coe),e(Coe,SNr),e(l0,RNr),e(Me,PNr),e(Me,i0),e(i0,IAe),e(IAe,BNr),e(i0,INr),e(i0,woe),e(woe,NNr),e(i0,qNr),e(Me,jNr),e(Me,d0),e(d0,NAe),e(NAe,DNr),e(d0,GNr),e(d0,Aoe),e(Aoe,ONr),e(d0,VNr),e(Me,XNr),e(Me,c0),e(c0,qAe),e(qAe,zNr),e(c0,QNr),e(c0,Loe),e(Loe,WNr),e(c0,UNr),e(Me,HNr),e(Me,m0),e(m0,jAe),e(jAe,JNr),e(m0,YNr),e(m0,yoe),e(yoe,KNr),e(m0,ZNr),e(qr,eqr),M(f0,qr,null),b(m,neo,_),b(m,Yc,_),e(Yc,g0),e(g0,DAe),M(Yk,DAe,null),e(Yc,oqr),e(Yc,GAe),e(GAe,rqr),b(m,seo,_),b(m,dr,_),M(Kk,dr,null),e(dr,tqr),e(dr,Kc),e(Kc,aqr),e(Kc,xoe),e(xoe,nqr),e(Kc,sqr),e(Kc,$oe),e($oe,lqr),e(Kc,iqr),e(dr,dqr),e(dr,Zk),e(Zk,cqr),e(Zk,OAe),e(OAe,mqr),e(Zk,fqr),e(dr,gqr),e(dr,Wt),M(eS,Wt,null),e(Wt,hqr),e(Wt,VAe),e(VAe,uqr),e(Wt,pqr),e(Wt,Zc),e(Zc,_qr),e(Zc,XAe),e(XAe,bqr),e(Zc,vqr),e(Zc,koe),e(koe,Fqr),e(Zc,Tqr),e(Wt,Mqr),M(h0,Wt,null),e(dr,Eqr),e(dr,jr),M(oS,jr,null),e(jr,Cqr),e(jr,zAe),e(zAe,wqr),e(jr,Aqr),e(jr,yn),e(yn,Lqr),e(yn,QAe),e(QAe,yqr),e(yn,xqr),e(yn,WAe),e(WAe,$qr),e(yn,kqr),e(yn,UAe),e(UAe,Sqr),e(yn,Rqr),e(jr,Pqr),e(jr,Be),e(Be,u0),e(u0,HAe),e(HAe,Bqr),e(u0,Iqr),e(u0,Soe),e(Soe,Nqr),e(u0,qqr),e(Be,jqr),e(Be,p0),e(p0,JAe),e(JAe,Dqr),e(p0,Gqr),e(p0,Roe),e(Roe,Oqr),e(p0,Vqr),e(Be,Xqr),e(Be,Tl),e(Tl,YAe),e(YAe,zqr),e(Tl,Qqr),e(Tl,Poe),e(Poe,Wqr),e(Tl,Uqr),e(Tl,Boe),e(Boe,Hqr),e(Tl,Jqr),e(Be,Yqr),e(Be,_0),e(_0,KAe),e(KAe,Kqr),e(_0,Zqr),e(_0,Ioe),e(Ioe,ejr),e(_0,ojr),e(Be,rjr),e(Be,b0),e(b0,ZAe),e(ZAe,tjr),e(b0,ajr),e(b0,Noe),e(Noe,njr),e(b0,sjr),e(Be,ljr),e(Be,v0),e(v0,e6e),e(e6e,ijr),e(v0,djr),e(v0,qoe),e(qoe,cjr),e(v0,mjr),e(Be,fjr),e(Be,F0),e(F0,o6e),e(o6e,gjr),e(F0,hjr),e(F0,joe),e(joe,ujr),e(F0,pjr),e(Be,_jr),e(Be,T0),e(T0,r6e),e(r6e,bjr),e(T0,vjr),e(T0,Doe),e(Doe,Fjr),e(T0,Tjr),e(Be,Mjr),e(Be,M0),e(M0,t6e),e(t6e,Ejr),e(M0,Cjr),e(M0,Goe),e(Goe,wjr),e(M0,Ajr),e(jr,Ljr),M(E0,jr,null),b(m,leo,_),b(m,em,_),e(em,C0),e(C0,a6e),M(rS,a6e,null),e(em,yjr),e(em,n6e),e(n6e,xjr),b(m,ieo,_),b(m,cr,_),M(tS,cr,null),e(cr,$jr),e(cr,om),e(om,kjr),e(om,Ooe),e(Ooe,Sjr),e(om,Rjr),e(om,Voe),e(Voe,Pjr),e(om,Bjr),e(cr,Ijr),e(cr,aS),e(aS,Njr),e(aS,s6e),e(s6e,qjr),e(aS,jjr),e(cr,Djr),e(cr,Ut),M(nS,Ut,null),e(Ut,Gjr),e(Ut,l6e),e(l6e,Ojr),e(Ut,Vjr),e(Ut,rm),e(rm,Xjr),e(rm,i6e),e(i6e,zjr),e(rm,Qjr),e(rm,Xoe),e(Xoe,Wjr),e(rm,Ujr),e(Ut,Hjr),M(w0,Ut,null),e(cr,Jjr),e(cr,Dr),M(sS,Dr,null),e(Dr,Yjr),e(Dr,d6e),e(d6e,Kjr),e(Dr,Zjr),e(Dr,xn),e(xn,eDr),e(xn,c6e),e(c6e,oDr),e(xn,rDr),e(xn,m6e),e(m6e,tDr),e(xn,aDr),e(xn,f6e),e(f6e,nDr),e(xn,sDr),e(Dr,lDr),e(Dr,tm),e(tm,A0),e(A0,g6e),e(g6e,iDr),e(A0,dDr),e(A0,zoe),e(zoe,cDr),e(A0,mDr),e(tm,fDr),e(tm,L0),e(L0,h6e),e(h6e,gDr),e(L0,hDr),e(L0,Qoe),e(Qoe,uDr),e(L0,pDr),e(tm,_Dr),e(tm,y0),e(y0,u6e),e(u6e,bDr),e(y0,vDr),e(y0,Woe),e(Woe,FDr),e(y0,TDr),e(Dr,MDr),M(x0,Dr,null),b(m,deo,_),b(m,am,_),e(am,$0),e($0,p6e),M(lS,p6e,null),e(am,EDr),e(am,_6e),e(_6e,CDr),b(m,ceo,_),b(m,mr,_),M(iS,mr,null),e(mr,wDr),e(mr,nm),e(nm,ADr),e(nm,Uoe),e(Uoe,LDr),e(nm,yDr),e(nm,Hoe),e(Hoe,xDr),e(nm,$Dr),e(mr,kDr),e(mr,dS),e(dS,SDr),e(dS,b6e),e(b6e,RDr),e(dS,PDr),e(mr,BDr),e(mr,Ht),M(cS,Ht,null),e(Ht,IDr),e(Ht,v6e),e(v6e,NDr),e(Ht,qDr),e(Ht,sm),e(sm,jDr),e(sm,F6e),e(F6e,DDr),e(sm,GDr),e(sm,Joe),e(Joe,ODr),e(sm,VDr),e(Ht,XDr),M(k0,Ht,null),e(mr,zDr),e(mr,Gr),M(mS,Gr,null),e(Gr,QDr),e(Gr,T6e),e(T6e,WDr),e(Gr,UDr),e(Gr,$n),e($n,HDr),e($n,M6e),e(M6e,JDr),e($n,YDr),e($n,E6e),e(E6e,KDr),e($n,ZDr),e($n,C6e),e(C6e,eGr),e($n,oGr),e(Gr,rGr),e(Gr,fe),e(fe,S0),e(S0,w6e),e(w6e,tGr),e(S0,aGr),e(S0,Yoe),e(Yoe,nGr),e(S0,sGr),e(fe,lGr),e(fe,R0),e(R0,A6e),e(A6e,iGr),e(R0,dGr),e(R0,Koe),e(Koe,cGr),e(R0,mGr),e(fe,fGr),e(fe,P0),e(P0,L6e),e(L6e,gGr),e(P0,hGr),e(P0,Zoe),e(Zoe,uGr),e(P0,pGr),e(fe,_Gr),e(fe,B0),e(B0,y6e),e(y6e,bGr),e(B0,vGr),e(B0,ere),e(ere,FGr),e(B0,TGr),e(fe,MGr),e(fe,I0),e(I0,x6e),e(x6e,EGr),e(I0,CGr),e(I0,ore),e(ore,wGr),e(I0,AGr),e(fe,LGr),e(fe,N0),e(N0,$6e),e($6e,yGr),e(N0,xGr),e(N0,rre),e(rre,$Gr),e(N0,kGr),e(fe,SGr),e(fe,q0),e(q0,k6e),e(k6e,RGr),e(q0,PGr),e(q0,tre),e(tre,BGr),e(q0,IGr),e(fe,NGr),e(fe,j0),e(j0,S6e),e(S6e,qGr),e(j0,jGr),e(j0,are),e(are,DGr),e(j0,GGr),e(fe,OGr),e(fe,D0),e(D0,R6e),e(R6e,VGr),e(D0,XGr),e(D0,nre),e(nre,zGr),e(D0,QGr),e(fe,WGr),e(fe,G0),e(G0,P6e),e(P6e,UGr),e(G0,HGr),e(G0,sre),e(sre,JGr),e(G0,YGr),e(fe,KGr),e(fe,O0),e(O0,B6e),e(B6e,ZGr),e(O0,eOr),e(O0,lre),e(lre,oOr),e(O0,rOr),e(fe,tOr),e(fe,V0),e(V0,I6e),e(I6e,aOr),e(V0,nOr),e(V0,ire),e(ire,sOr),e(V0,lOr),e(fe,iOr),e(fe,X0),e(X0,N6e),e(N6e,dOr),e(X0,cOr),e(X0,dre),e(dre,mOr),e(X0,fOr),e(fe,gOr),e(fe,z0),e(z0,q6e),e(q6e,hOr),e(z0,uOr),e(z0,cre),e(cre,pOr),e(z0,_Or),e(fe,bOr),e(fe,Q0),e(Q0,j6e),e(j6e,vOr),e(Q0,FOr),e(Q0,mre),e(mre,TOr),e(Q0,MOr),e(fe,EOr),e(fe,W0),e(W0,D6e),e(D6e,COr),e(W0,wOr),e(W0,fre),e(fre,AOr),e(W0,LOr),e(fe,yOr),e(fe,U0),e(U0,G6e),e(G6e,xOr),e(U0,$Or),e(U0,gre),e(gre,kOr),e(U0,SOr),e(fe,ROr),e(fe,H0),e(H0,O6e),e(O6e,POr),e(H0,BOr),e(H0,hre),e(hre,IOr),e(H0,NOr),e(fe,qOr),e(fe,J0),e(J0,V6e),e(V6e,jOr),e(J0,DOr),e(J0,ure),e(ure,GOr),e(J0,OOr),e(fe,VOr),e(fe,Y0),e(Y0,X6e),e(X6e,XOr),e(Y0,zOr),e(Y0,pre),e(pre,QOr),e(Y0,WOr),e(Gr,UOr),M(K0,Gr,null),b(m,meo,_),b(m,lm,_),e(lm,Z0),e(Z0,z6e),M(fS,z6e,null),e(lm,HOr),e(lm,Q6e),e(Q6e,JOr),b(m,feo,_),b(m,fr,_),M(gS,fr,null),e(fr,YOr),e(fr,im),e(im,KOr),e(im,_re),e(_re,ZOr),e(im,eVr),e(im,bre),e(bre,oVr),e(im,rVr),e(fr,tVr),e(fr,hS),e(hS,aVr),e(hS,W6e),e(W6e,nVr),e(hS,sVr),e(fr,lVr),e(fr,Jt),M(uS,Jt,null),e(Jt,iVr),e(Jt,U6e),e(U6e,dVr),e(Jt,cVr),e(Jt,dm),e(dm,mVr),e(dm,H6e),e(H6e,fVr),e(dm,gVr),e(dm,vre),e(vre,hVr),e(dm,uVr),e(Jt,pVr),M(ew,Jt,null),e(fr,_Vr),e(fr,Or),M(pS,Or,null),e(Or,bVr),e(Or,J6e),e(J6e,vVr),e(Or,FVr),e(Or,kn),e(kn,TVr),e(kn,Y6e),e(Y6e,MVr),e(kn,EVr),e(kn,K6e),e(K6e,CVr),e(kn,wVr),e(kn,Z6e),e(Z6e,AVr),e(kn,LVr),e(Or,yVr),e(Or,ye),e(ye,ow),e(ow,e7e),e(e7e,xVr),e(ow,$Vr),e(ow,Fre),e(Fre,kVr),e(ow,SVr),e(ye,RVr),e(ye,rw),e(rw,o7e),e(o7e,PVr),e(rw,BVr),e(rw,Tre),e(Tre,IVr),e(rw,NVr),e(ye,qVr),e(ye,tw),e(tw,r7e),e(r7e,jVr),e(tw,DVr),e(tw,Mre),e(Mre,GVr),e(tw,OVr),e(ye,VVr),e(ye,aw),e(aw,t7e),e(t7e,XVr),e(aw,zVr),e(aw,Ere),e(Ere,QVr),e(aw,WVr),e(ye,UVr),e(ye,nw),e(nw,a7e),e(a7e,HVr),e(nw,JVr),e(nw,Cre),e(Cre,YVr),e(nw,KVr),e(ye,ZVr),e(ye,sw),e(sw,n7e),e(n7e,eXr),e(sw,oXr),e(sw,wre),e(wre,rXr),e(sw,tXr),e(ye,aXr),e(ye,lw),e(lw,s7e),e(s7e,nXr),e(lw,sXr),e(lw,Are),e(Are,lXr),e(lw,iXr),e(ye,dXr),e(ye,iw),e(iw,l7e),e(l7e,cXr),e(iw,mXr),e(iw,Lre),e(Lre,fXr),e(iw,gXr),e(ye,hXr),e(ye,dw),e(dw,i7e),e(i7e,uXr),e(dw,pXr),e(dw,yre),e(yre,_Xr),e(dw,bXr),e(ye,vXr),e(ye,cw),e(cw,d7e),e(d7e,FXr),e(cw,TXr),e(cw,xre),e(xre,MXr),e(cw,EXr),e(Or,CXr),M(mw,Or,null),b(m,geo,_),b(m,cm,_),e(cm,fw),e(fw,c7e),M(_S,c7e,null),e(cm,wXr),e(cm,m7e),e(m7e,AXr),b(m,heo,_),b(m,gr,_),M(bS,gr,null),e(gr,LXr),e(gr,mm),e(mm,yXr),e(mm,$re),e($re,xXr),e(mm,$Xr),e(mm,kre),e(kre,kXr),e(mm,SXr),e(gr,RXr),e(gr,vS),e(vS,PXr),e(vS,f7e),e(f7e,BXr),e(vS,IXr),e(gr,NXr),e(gr,Yt),M(FS,Yt,null),e(Yt,qXr),e(Yt,g7e),e(g7e,jXr),e(Yt,DXr),e(Yt,fm),e(fm,GXr),e(fm,h7e),e(h7e,OXr),e(fm,VXr),e(fm,Sre),e(Sre,XXr),e(fm,zXr),e(Yt,QXr),M(gw,Yt,null),e(gr,WXr),e(gr,Vr),M(TS,Vr,null),e(Vr,UXr),e(Vr,u7e),e(u7e,HXr),e(Vr,JXr),e(Vr,Sn),e(Sn,YXr),e(Sn,p7e),e(p7e,KXr),e(Sn,ZXr),e(Sn,_7e),e(_7e,ezr),e(Sn,ozr),e(Sn,b7e),e(b7e,rzr),e(Sn,tzr),e(Vr,azr),e(Vr,re),e(re,hw),e(hw,v7e),e(v7e,nzr),e(hw,szr),e(hw,Rre),e(Rre,lzr),e(hw,izr),e(re,dzr),e(re,uw),e(uw,F7e),e(F7e,czr),e(uw,mzr),e(uw,Pre),e(Pre,fzr),e(uw,gzr),e(re,hzr),e(re,pw),e(pw,T7e),e(T7e,uzr),e(pw,pzr),e(pw,Bre),e(Bre,_zr),e(pw,bzr),e(re,vzr),e(re,_w),e(_w,M7e),e(M7e,Fzr),e(_w,Tzr),e(_w,Ire),e(Ire,Mzr),e(_w,Ezr),e(re,Czr),e(re,bw),e(bw,E7e),e(E7e,wzr),e(bw,Azr),e(bw,Nre),e(Nre,Lzr),e(bw,yzr),e(re,xzr),e(re,vw),e(vw,C7e),e(C7e,$zr),e(vw,kzr),e(vw,qre),e(qre,Szr),e(vw,Rzr),e(re,Pzr),e(re,Fw),e(Fw,w7e),e(w7e,Bzr),e(Fw,Izr),e(Fw,jre),e(jre,Nzr),e(Fw,qzr),e(re,jzr),e(re,Tw),e(Tw,A7e),e(A7e,Dzr),e(Tw,Gzr),e(Tw,Dre),e(Dre,Ozr),e(Tw,Vzr),e(re,Xzr),e(re,Mw),e(Mw,L7e),e(L7e,zzr),e(Mw,Qzr),e(Mw,Gre),e(Gre,Wzr),e(Mw,Uzr),e(re,Hzr),e(re,Ew),e(Ew,y7e),e(y7e,Jzr),e(Ew,Yzr),e(Ew,Ore),e(Ore,Kzr),e(Ew,Zzr),e(re,eQr),e(re,Cw),e(Cw,x7e),e(x7e,oQr),e(Cw,rQr),e(Cw,Vre),e(Vre,tQr),e(Cw,aQr),e(re,nQr),e(re,ww),e(ww,$7e),e($7e,sQr),e(ww,lQr),e(ww,Xre),e(Xre,iQr),e(ww,dQr),e(re,cQr),e(re,Aw),e(Aw,k7e),e(k7e,mQr),e(Aw,fQr),e(Aw,zre),e(zre,gQr),e(Aw,hQr),e(re,uQr),e(re,Lw),e(Lw,S7e),e(S7e,pQr),e(Lw,_Qr),e(Lw,Qre),e(Qre,bQr),e(Lw,vQr),e(re,FQr),e(re,yw),e(yw,R7e),e(R7e,TQr),e(yw,MQr),e(yw,Wre),e(Wre,EQr),e(yw,CQr),e(re,wQr),e(re,xw),e(xw,P7e),e(P7e,AQr),e(xw,LQr),e(xw,Ure),e(Ure,yQr),e(xw,xQr),e(re,$Qr),e(re,$w),e($w,B7e),e(B7e,kQr),e($w,SQr),e($w,Hre),e(Hre,RQr),e($w,PQr),e(re,BQr),e(re,kw),e(kw,I7e),e(I7e,IQr),e(kw,NQr),e(kw,Jre),e(Jre,qQr),e(kw,jQr),e(re,DQr),e(re,Sw),e(Sw,N7e),e(N7e,GQr),e(Sw,OQr),e(Sw,Yre),e(Yre,VQr),e(Sw,XQr),e(re,zQr),e(re,Rw),e(Rw,q7e),e(q7e,QQr),e(Rw,WQr),e(Rw,Kre),e(Kre,UQr),e(Rw,HQr),e(re,JQr),e(re,Pw),e(Pw,j7e),e(j7e,YQr),e(Pw,KQr),e(Pw,Zre),e(Zre,ZQr),e(Pw,eWr),e(re,oWr),e(re,Bw),e(Bw,D7e),e(D7e,rWr),e(Bw,tWr),e(Bw,ete),e(ete,aWr),e(Bw,nWr),e(re,sWr),e(re,Iw),e(Iw,G7e),e(G7e,lWr),e(Iw,iWr),e(Iw,ote),e(ote,dWr),e(Iw,cWr),e(re,mWr),e(re,Nw),e(Nw,O7e),e(O7e,fWr),e(Nw,gWr),e(Nw,rte),e(rte,hWr),e(Nw,uWr),e(re,pWr),e(re,qw),e(qw,V7e),e(V7e,_Wr),e(qw,bWr),e(qw,tte),e(tte,vWr),e(qw,FWr),e(re,TWr),e(re,jw),e(jw,X7e),e(X7e,MWr),e(jw,EWr),e(jw,ate),e(ate,CWr),e(jw,wWr),e(re,AWr),e(re,Dw),e(Dw,z7e),e(z7e,LWr),e(Dw,yWr),e(Dw,nte),e(nte,xWr),e(Dw,$Wr),e(Vr,kWr),M(Gw,Vr,null),b(m,ueo,_),b(m,gm,_),e(gm,Ow),e(Ow,Q7e),M(MS,Q7e,null),e(gm,SWr),e(gm,W7e),e(W7e,RWr),b(m,peo,_),b(m,hr,_),M(ES,hr,null),e(hr,PWr),e(hr,hm),e(hm,BWr),e(hm,ste),e(ste,IWr),e(hm,NWr),e(hm,lte),e(lte,qWr),e(hm,jWr),e(hr,DWr),e(hr,CS),e(CS,GWr),e(CS,U7e),e(U7e,OWr),e(CS,VWr),e(hr,XWr),e(hr,Kt),M(wS,Kt,null),e(Kt,zWr),e(Kt,H7e),e(H7e,QWr),e(Kt,WWr),e(Kt,um),e(um,UWr),e(um,J7e),e(J7e,HWr),e(um,JWr),e(um,ite),e(ite,YWr),e(um,KWr),e(Kt,ZWr),M(Vw,Kt,null),e(hr,eUr),e(hr,Xr),M(AS,Xr,null),e(Xr,oUr),e(Xr,Y7e),e(Y7e,rUr),e(Xr,tUr),e(Xr,Rn),e(Rn,aUr),e(Rn,K7e),e(K7e,nUr),e(Rn,sUr),e(Rn,Z7e),e(Z7e,lUr),e(Rn,iUr),e(Rn,eLe),e(eLe,dUr),e(Rn,cUr),e(Xr,mUr),e(Xr,ve),e(ve,Xw),e(Xw,oLe),e(oLe,fUr),e(Xw,gUr),e(Xw,dte),e(dte,hUr),e(Xw,uUr),e(ve,pUr),e(ve,zw),e(zw,rLe),e(rLe,_Ur),e(zw,bUr),e(zw,cte),e(cte,vUr),e(zw,FUr),e(ve,TUr),e(ve,Qw),e(Qw,tLe),e(tLe,MUr),e(Qw,EUr),e(Qw,mte),e(mte,CUr),e(Qw,wUr),e(ve,AUr),e(ve,Ww),e(Ww,aLe),e(aLe,LUr),e(Ww,yUr),e(Ww,fte),e(fte,xUr),e(Ww,$Ur),e(ve,kUr),e(ve,Uw),e(Uw,nLe),e(nLe,SUr),e(Uw,RUr),e(Uw,gte),e(gte,PUr),e(Uw,BUr),e(ve,IUr),e(ve,Hw),e(Hw,sLe),e(sLe,NUr),e(Hw,qUr),e(Hw,hte),e(hte,jUr),e(Hw,DUr),e(ve,GUr),e(ve,Jw),e(Jw,lLe),e(lLe,OUr),e(Jw,VUr),e(Jw,ute),e(ute,XUr),e(Jw,zUr),e(ve,QUr),e(ve,Yw),e(Yw,iLe),e(iLe,WUr),e(Yw,UUr),e(Yw,pte),e(pte,HUr),e(Yw,JUr),e(ve,YUr),e(ve,Kw),e(Kw,dLe),e(dLe,KUr),e(Kw,ZUr),e(Kw,_te),e(_te,eHr),e(Kw,oHr),e(ve,rHr),e(ve,Zw),e(Zw,cLe),e(cLe,tHr),e(Zw,aHr),e(Zw,bte),e(bte,nHr),e(Zw,sHr),e(ve,lHr),e(ve,eA),e(eA,mLe),e(mLe,iHr),e(eA,dHr),e(eA,vte),e(vte,cHr),e(eA,mHr),e(ve,fHr),e(ve,oA),e(oA,fLe),e(fLe,gHr),e(oA,hHr),e(oA,Fte),e(Fte,uHr),e(oA,pHr),e(ve,_Hr),e(ve,rA),e(rA,gLe),e(gLe,bHr),e(rA,vHr),e(rA,Tte),e(Tte,FHr),e(rA,THr),e(ve,MHr),e(ve,tA),e(tA,hLe),e(hLe,EHr),e(tA,CHr),e(tA,Mte),e(Mte,wHr),e(tA,AHr),e(ve,LHr),e(ve,aA),e(aA,uLe),e(uLe,yHr),e(aA,xHr),e(aA,Ete),e(Ete,$Hr),e(aA,kHr),e(ve,SHr),e(ve,nA),e(nA,pLe),e(pLe,RHr),e(nA,PHr),e(nA,Cte),e(Cte,BHr),e(nA,IHr),e(ve,NHr),e(ve,sA),e(sA,_Le),e(_Le,qHr),e(sA,jHr),e(sA,wte),e(wte,DHr),e(sA,GHr),e(Xr,OHr),M(lA,Xr,null),b(m,_eo,_),b(m,pm,_),e(pm,iA),e(iA,bLe),M(LS,bLe,null),e(pm,VHr),e(pm,vLe),e(vLe,XHr),b(m,beo,_),b(m,ur,_),M(yS,ur,null),e(ur,zHr),e(ur,_m),e(_m,QHr),e(_m,Ate),e(Ate,WHr),e(_m,UHr),e(_m,Lte),e(Lte,HHr),e(_m,JHr),e(ur,YHr),e(ur,xS),e(xS,KHr),e(xS,FLe),e(FLe,ZHr),e(xS,eJr),e(ur,oJr),e(ur,Zt),M($S,Zt,null),e(Zt,rJr),e(Zt,TLe),e(TLe,tJr),e(Zt,aJr),e(Zt,bm),e(bm,nJr),e(bm,MLe),e(MLe,sJr),e(bm,lJr),e(bm,yte),e(yte,iJr),e(bm,dJr),e(Zt,cJr),M(dA,Zt,null),e(ur,mJr),e(ur,zr),M(kS,zr,null),e(zr,fJr),e(zr,ELe),e(ELe,gJr),e(zr,hJr),e(zr,Pn),e(Pn,uJr),e(Pn,CLe),e(CLe,pJr),e(Pn,_Jr),e(Pn,wLe),e(wLe,bJr),e(Pn,vJr),e(Pn,ALe),e(ALe,FJr),e(Pn,TJr),e(zr,MJr),e(zr,SS),e(SS,cA),e(cA,LLe),e(LLe,EJr),e(cA,CJr),e(cA,xte),e(xte,wJr),e(cA,AJr),e(SS,LJr),e(SS,mA),e(mA,yLe),e(yLe,yJr),e(mA,xJr),e(mA,$te),e($te,$Jr),e(mA,kJr),e(zr,SJr),M(fA,zr,null),b(m,veo,_),b(m,vm,_),e(vm,gA),e(gA,xLe),M(RS,xLe,null),e(vm,RJr),e(vm,$Le),e($Le,PJr),b(m,Feo,_),b(m,pr,_),M(PS,pr,null),e(pr,BJr),e(pr,Fm),e(Fm,IJr),e(Fm,kte),e(kte,NJr),e(Fm,qJr),e(Fm,Ste),e(Ste,jJr),e(Fm,DJr),e(pr,GJr),e(pr,BS),e(BS,OJr),e(BS,kLe),e(kLe,VJr),e(BS,XJr),e(pr,zJr),e(pr,ea),M(IS,ea,null),e(ea,QJr),e(ea,SLe),e(SLe,WJr),e(ea,UJr),e(ea,Tm),e(Tm,HJr),e(Tm,RLe),e(RLe,JJr),e(Tm,YJr),e(Tm,Rte),e(Rte,KJr),e(Tm,ZJr),e(ea,eYr),M(hA,ea,null),e(pr,oYr),e(pr,Qr),M(NS,Qr,null),e(Qr,rYr),e(Qr,PLe),e(PLe,tYr),e(Qr,aYr),e(Qr,Bn),e(Bn,nYr),e(Bn,BLe),e(BLe,sYr),e(Bn,lYr),e(Bn,ILe),e(ILe,iYr),e(Bn,dYr),e(Bn,NLe),e(NLe,cYr),e(Bn,mYr),e(Qr,fYr),e(Qr,qLe),e(qLe,uA),e(uA,jLe),e(jLe,gYr),e(uA,hYr),e(uA,Pte),e(Pte,uYr),e(uA,pYr),e(Qr,_Yr),M(pA,Qr,null),b(m,Teo,_),b(m,Mm,_),e(Mm,_A),e(_A,DLe),M(qS,DLe,null),e(Mm,bYr),e(Mm,GLe),e(GLe,vYr),b(m,Meo,_),b(m,_r,_),M(jS,_r,null),e(_r,FYr),e(_r,Em),e(Em,TYr),e(Em,Bte),e(Bte,MYr),e(Em,EYr),e(Em,Ite),e(Ite,CYr),e(Em,wYr),e(_r,AYr),e(_r,DS),e(DS,LYr),e(DS,OLe),e(OLe,yYr),e(DS,xYr),e(_r,$Yr),e(_r,oa),M(GS,oa,null),e(oa,kYr),e(oa,VLe),e(VLe,SYr),e(oa,RYr),e(oa,Cm),e(Cm,PYr),e(Cm,XLe),e(XLe,BYr),e(Cm,IYr),e(Cm,Nte),e(Nte,NYr),e(Cm,qYr),e(oa,jYr),M(bA,oa,null),e(_r,DYr),e(_r,Wr),M(OS,Wr,null),e(Wr,GYr),e(Wr,zLe),e(zLe,OYr),e(Wr,VYr),e(Wr,In),e(In,XYr),e(In,QLe),e(QLe,zYr),e(In,QYr),e(In,WLe),e(WLe,WYr),e(In,UYr),e(In,ULe),e(ULe,HYr),e(In,JYr),e(Wr,YYr),e(Wr,HLe),e(HLe,vA),e(vA,JLe),e(JLe,KYr),e(vA,ZYr),e(vA,qte),e(qte,eKr),e(vA,oKr),e(Wr,rKr),M(FA,Wr,null),b(m,Eeo,_),b(m,wm,_),e(wm,TA),e(TA,YLe),M(VS,YLe,null),e(wm,tKr),e(wm,KLe),e(KLe,aKr),b(m,Ceo,_),b(m,br,_),M(XS,br,null),e(br,nKr),e(br,Am),e(Am,sKr),e(Am,jte),e(jte,lKr),e(Am,iKr),e(Am,Dte),e(Dte,dKr),e(Am,cKr),e(br,mKr),e(br,zS),e(zS,fKr),e(zS,ZLe),e(ZLe,gKr),e(zS,hKr),e(br,uKr),e(br,ra),M(QS,ra,null),e(ra,pKr),e(ra,eye),e(eye,_Kr),e(ra,bKr),e(ra,Lm),e(Lm,vKr),e(Lm,oye),e(oye,FKr),e(Lm,TKr),e(Lm,Gte),e(Gte,MKr),e(Lm,EKr),e(ra,CKr),M(MA,ra,null),e(br,wKr),e(br,Ur),M(WS,Ur,null),e(Ur,AKr),e(Ur,rye),e(rye,LKr),e(Ur,yKr),e(Ur,Nn),e(Nn,xKr),e(Nn,tye),e(tye,$Kr),e(Nn,kKr),e(Nn,aye),e(aye,SKr),e(Nn,RKr),e(Nn,nye),e(nye,PKr),e(Nn,BKr),e(Ur,IKr),e(Ur,de),e(de,EA),e(EA,sye),e(sye,NKr),e(EA,qKr),e(EA,Ote),e(Ote,jKr),e(EA,DKr),e(de,GKr),e(de,CA),e(CA,lye),e(lye,OKr),e(CA,VKr),e(CA,Vte),e(Vte,XKr),e(CA,zKr),e(de,QKr),e(de,wA),e(wA,iye),e(iye,WKr),e(wA,UKr),e(wA,Xte),e(Xte,HKr),e(wA,JKr),e(de,YKr),e(de,AA),e(AA,dye),e(dye,KKr),e(AA,ZKr),e(AA,zte),e(zte,eZr),e(AA,oZr),e(de,rZr),e(de,LA),e(LA,cye),e(cye,tZr),e(LA,aZr),e(LA,Qte),e(Qte,nZr),e(LA,sZr),e(de,lZr),e(de,yA),e(yA,mye),e(mye,iZr),e(yA,dZr),e(yA,Wte),e(Wte,cZr),e(yA,mZr),e(de,fZr),e(de,xA),e(xA,fye),e(fye,gZr),e(xA,hZr),e(xA,Ute),e(Ute,uZr),e(xA,pZr),e(de,_Zr),e(de,$A),e($A,gye),e(gye,bZr),e($A,vZr),e($A,Hte),e(Hte,FZr),e($A,TZr),e(de,MZr),e(de,kA),e(kA,hye),e(hye,EZr),e(kA,CZr),e(kA,Jte),e(Jte,wZr),e(kA,AZr),e(de,LZr),e(de,SA),e(SA,uye),e(uye,yZr),e(SA,xZr),e(SA,Yte),e(Yte,$Zr),e(SA,kZr),e(de,SZr),e(de,RA),e(RA,pye),e(pye,RZr),e(RA,PZr),e(RA,Kte),e(Kte,BZr),e(RA,IZr),e(de,NZr),e(de,PA),e(PA,_ye),e(_ye,qZr),e(PA,jZr),e(PA,Zte),e(Zte,DZr),e(PA,GZr),e(de,OZr),e(de,BA),e(BA,bye),e(bye,VZr),e(BA,XZr),e(BA,eae),e(eae,zZr),e(BA,QZr),e(de,WZr),e(de,IA),e(IA,vye),e(vye,UZr),e(IA,HZr),e(IA,oae),e(oae,JZr),e(IA,YZr),e(de,KZr),e(de,NA),e(NA,Fye),e(Fye,ZZr),e(NA,eet),e(NA,rae),e(rae,oet),e(NA,ret),e(de,tet),e(de,qA),e(qA,Tye),e(Tye,aet),e(qA,net),e(qA,tae),e(tae,set),e(qA,iet),e(de,det),e(de,jA),e(jA,Mye),e(Mye,cet),e(jA,met),e(jA,aae),e(aae,fet),e(jA,get),e(de,het),e(de,DA),e(DA,Eye),e(Eye,uet),e(DA,pet),e(DA,nae),e(nae,_et),e(DA,bet),e(de,vet),e(de,GA),e(GA,Cye),e(Cye,Fet),e(GA,Tet),e(GA,sae),e(sae,Met),e(GA,Eet),e(de,Cet),e(de,OA),e(OA,wye),e(wye,wet),e(OA,Aet),e(OA,lae),e(lae,Let),e(OA,yet),e(de,xet),e(de,VA),e(VA,Aye),e(Aye,$et),e(VA,ket),e(VA,iae),e(iae,Set),e(VA,Ret),e(Ur,Pet),M(XA,Ur,null),b(m,weo,_),b(m,ym,_),e(ym,zA),e(zA,Lye),M(US,Lye,null),e(ym,Bet),e(ym,yye),e(yye,Iet),b(m,Aeo,_),b(m,vr,_),M(HS,vr,null),e(vr,Net),e(vr,xm),e(xm,qet),e(xm,dae),e(dae,jet),e(xm,Det),e(xm,cae),e(cae,Get),e(xm,Oet),e(vr,Vet),e(vr,JS),e(JS,Xet),e(JS,xye),e(xye,zet),e(JS,Qet),e(vr,Wet),e(vr,ta),M(YS,ta,null),e(ta,Uet),e(ta,$ye),e($ye,Het),e(ta,Jet),e(ta,$m),e($m,Yet),e($m,kye),e(kye,Ket),e($m,Zet),e($m,mae),e(mae,eot),e($m,oot),e(ta,rot),M(QA,ta,null),e(vr,tot),e(vr,Hr),M(KS,Hr,null),e(Hr,aot),e(Hr,Sye),e(Sye,not),e(Hr,sot),e(Hr,qn),e(qn,lot),e(qn,Rye),e(Rye,iot),e(qn,dot),e(qn,Pye),e(Pye,cot),e(qn,mot),e(qn,Bye),e(Bye,fot),e(qn,got),e(Hr,hot),e(Hr,ce),e(ce,WA),e(WA,Iye),e(Iye,uot),e(WA,pot),e(WA,fae),e(fae,_ot),e(WA,bot),e(ce,vot),e(ce,UA),e(UA,Nye),e(Nye,Fot),e(UA,Tot),e(UA,gae),e(gae,Mot),e(UA,Eot),e(ce,Cot),e(ce,HA),e(HA,qye),e(qye,wot),e(HA,Aot),e(HA,hae),e(hae,Lot),e(HA,yot),e(ce,xot),e(ce,JA),e(JA,jye),e(jye,$ot),e(JA,kot),e(JA,uae),e(uae,Sot),e(JA,Rot),e(ce,Pot),e(ce,YA),e(YA,Dye),e(Dye,Bot),e(YA,Iot),e(YA,pae),e(pae,Not),e(YA,qot),e(ce,jot),e(ce,KA),e(KA,Gye),e(Gye,Dot),e(KA,Got),e(KA,_ae),e(_ae,Oot),e(KA,Vot),e(ce,Xot),e(ce,ZA),e(ZA,Oye),e(Oye,zot),e(ZA,Qot),e(ZA,bae),e(bae,Wot),e(ZA,Uot),e(ce,Hot),e(ce,e6),e(e6,Vye),e(Vye,Jot),e(e6,Yot),e(e6,vae),e(vae,Kot),e(e6,Zot),e(ce,ert),e(ce,o6),e(o6,Xye),e(Xye,ort),e(o6,rrt),e(o6,Fae),e(Fae,trt),e(o6,art),e(ce,nrt),e(ce,r6),e(r6,zye),e(zye,srt),e(r6,lrt),e(r6,Tae),e(Tae,irt),e(r6,drt),e(ce,crt),e(ce,t6),e(t6,Qye),e(Qye,mrt),e(t6,frt),e(t6,Mae),e(Mae,grt),e(t6,hrt),e(ce,urt),e(ce,a6),e(a6,Wye),e(Wye,prt),e(a6,_rt),e(a6,Eae),e(Eae,brt),e(a6,vrt),e(ce,Frt),e(ce,n6),e(n6,Uye),e(Uye,Trt),e(n6,Mrt),e(n6,Cae),e(Cae,Ert),e(n6,Crt),e(ce,wrt),e(ce,s6),e(s6,Hye),e(Hye,Art),e(s6,Lrt),e(s6,wae),e(wae,yrt),e(s6,xrt),e(ce,$rt),e(ce,l6),e(l6,Jye),e(Jye,krt),e(l6,Srt),e(l6,Aae),e(Aae,Rrt),e(l6,Prt),e(ce,Brt),e(ce,i6),e(i6,Yye),e(Yye,Irt),e(i6,Nrt),e(i6,Lae),e(Lae,qrt),e(i6,jrt),e(ce,Drt),e(ce,d6),e(d6,Kye),e(Kye,Grt),e(d6,Ort),e(d6,yae),e(yae,Vrt),e(d6,Xrt),e(ce,zrt),e(ce,c6),e(c6,Zye),e(Zye,Qrt),e(c6,Wrt),e(c6,xae),e(xae,Urt),e(c6,Hrt),e(ce,Jrt),e(ce,m6),e(m6,e8e),e(e8e,Yrt),e(m6,Krt),e(m6,$ae),e($ae,Zrt),e(m6,ett),e(ce,ott),e(ce,f6),e(f6,o8e),e(o8e,rtt),e(f6,ttt),e(f6,kae),e(kae,att),e(f6,ntt),e(ce,stt),e(ce,g6),e(g6,r8e),e(r8e,ltt),e(g6,itt),e(g6,Sae),e(Sae,dtt),e(g6,ctt),e(Hr,mtt),M(h6,Hr,null),b(m,Leo,_),b(m,km,_),e(km,u6),e(u6,t8e),M(ZS,t8e,null),e(km,ftt),e(km,a8e),e(a8e,gtt),b(m,yeo,_),b(m,Fr,_),M(eR,Fr,null),e(Fr,htt),e(Fr,Sm),e(Sm,utt),e(Sm,Rae),e(Rae,ptt),e(Sm,_tt),e(Sm,Pae),e(Pae,btt),e(Sm,vtt),e(Fr,Ftt),e(Fr,oR),e(oR,Ttt),e(oR,n8e),e(n8e,Mtt),e(oR,Ett),e(Fr,Ctt),e(Fr,aa),M(rR,aa,null),e(aa,wtt),e(aa,s8e),e(s8e,Att),e(aa,Ltt),e(aa,Rm),e(Rm,ytt),e(Rm,l8e),e(l8e,xtt),e(Rm,$tt),e(Rm,Bae),e(Bae,ktt),e(Rm,Stt),e(aa,Rtt),M(p6,aa,null),e(Fr,Ptt),e(Fr,Jr),M(tR,Jr,null),e(Jr,Btt),e(Jr,i8e),e(i8e,Itt),e(Jr,Ntt),e(Jr,jn),e(jn,qtt),e(jn,d8e),e(d8e,jtt),e(jn,Dtt),e(jn,c8e),e(c8e,Gtt),e(jn,Ott),e(jn,m8e),e(m8e,Vtt),e(jn,Xtt),e(Jr,ztt),e(Jr,f8e),e(f8e,_6),e(_6,g8e),e(g8e,Qtt),e(_6,Wtt),e(_6,Iae),e(Iae,Utt),e(_6,Htt),e(Jr,Jtt),M(b6,Jr,null),b(m,xeo,_),b(m,Pm,_),e(Pm,v6),e(v6,h8e),M(aR,h8e,null),e(Pm,Ytt),e(Pm,u8e),e(u8e,Ktt),b(m,$eo,_),b(m,Tr,_),M(nR,Tr,null),e(Tr,Ztt),e(Tr,Bm),e(Bm,eat),e(Bm,Nae),e(Nae,oat),e(Bm,rat),e(Bm,qae),e(qae,tat),e(Bm,aat),e(Tr,nat),e(Tr,sR),e(sR,sat),e(sR,p8e),e(p8e,lat),e(sR,iat),e(Tr,dat),e(Tr,na),M(lR,na,null),e(na,cat),e(na,_8e),e(_8e,mat),e(na,fat),e(na,Im),e(Im,gat),e(Im,b8e),e(b8e,hat),e(Im,uat),e(Im,jae),e(jae,pat),e(Im,_at),e(na,bat),M(F6,na,null),e(Tr,vat),e(Tr,Yr),M(iR,Yr,null),e(Yr,Fat),e(Yr,v8e),e(v8e,Tat),e(Yr,Mat),e(Yr,Dn),e(Dn,Eat),e(Dn,F8e),e(F8e,Cat),e(Dn,wat),e(Dn,T8e),e(T8e,Aat),e(Dn,Lat),e(Dn,M8e),e(M8e,yat),e(Dn,xat),e(Yr,$at),e(Yr,E8e),e(E8e,T6),e(T6,C8e),e(C8e,kat),e(T6,Sat),e(T6,Dae),e(Dae,Rat),e(T6,Pat),e(Yr,Bat),M(M6,Yr,null),b(m,keo,_),b(m,Nm,_),e(Nm,E6),e(E6,w8e),M(dR,w8e,null),e(Nm,Iat),e(Nm,A8e),e(A8e,Nat),b(m,Seo,_),b(m,Mr,_),M(cR,Mr,null),e(Mr,qat),e(Mr,qm),e(qm,jat),e(qm,Gae),e(Gae,Dat),e(qm,Gat),e(qm,Oae),e(Oae,Oat),e(qm,Vat),e(Mr,Xat),e(Mr,mR),e(mR,zat),e(mR,L8e),e(L8e,Qat),e(mR,Wat),e(Mr,Uat),e(Mr,sa),M(fR,sa,null),e(sa,Hat),e(sa,y8e),e(y8e,Jat),e(sa,Yat),e(sa,jm),e(jm,Kat),e(jm,x8e),e(x8e,Zat),e(jm,ent),e(jm,Vae),e(Vae,ont),e(jm,rnt),e(sa,tnt),M(C6,sa,null),e(Mr,ant),e(Mr,Kr),M(gR,Kr,null),e(Kr,nnt),e(Kr,$8e),e($8e,snt),e(Kr,lnt),e(Kr,Gn),e(Gn,int),e(Gn,k8e),e(k8e,dnt),e(Gn,cnt),e(Gn,S8e),e(S8e,mnt),e(Gn,fnt),e(Gn,R8e),e(R8e,gnt),e(Gn,hnt),e(Kr,unt),e(Kr,te),e(te,w6),e(w6,P8e),e(P8e,pnt),e(w6,_nt),e(w6,Xae),e(Xae,bnt),e(w6,vnt),e(te,Fnt),e(te,A6),e(A6,B8e),e(B8e,Tnt),e(A6,Mnt),e(A6,zae),e(zae,Ent),e(A6,Cnt),e(te,wnt),e(te,L6),e(L6,I8e),e(I8e,Ant),e(L6,Lnt),e(L6,Qae),e(Qae,ynt),e(L6,xnt),e(te,$nt),e(te,y6),e(y6,N8e),e(N8e,knt),e(y6,Snt),e(y6,Wae),e(Wae,Rnt),e(y6,Pnt),e(te,Bnt),e(te,x6),e(x6,q8e),e(q8e,Int),e(x6,Nnt),e(x6,Uae),e(Uae,qnt),e(x6,jnt),e(te,Dnt),e(te,$6),e($6,j8e),e(j8e,Gnt),e($6,Ont),e($6,Hae),e(Hae,Vnt),e($6,Xnt),e(te,znt),e(te,k6),e(k6,D8e),e(D8e,Qnt),e(k6,Wnt),e(k6,Jae),e(Jae,Unt),e(k6,Hnt),e(te,Jnt),e(te,S6),e(S6,G8e),e(G8e,Ynt),e(S6,Knt),e(S6,Yae),e(Yae,Znt),e(S6,est),e(te,ost),e(te,R6),e(R6,O8e),e(O8e,rst),e(R6,tst),e(R6,Kae),e(Kae,ast),e(R6,nst),e(te,sst),e(te,P6),e(P6,V8e),e(V8e,lst),e(P6,ist),e(P6,Zae),e(Zae,dst),e(P6,cst),e(te,mst),e(te,B6),e(B6,X8e),e(X8e,fst),e(B6,gst),e(B6,ene),e(ene,hst),e(B6,ust),e(te,pst),e(te,I6),e(I6,z8e),e(z8e,_st),e(I6,bst),e(I6,one),e(one,vst),e(I6,Fst),e(te,Tst),e(te,N6),e(N6,Q8e),e(Q8e,Mst),e(N6,Est),e(N6,rne),e(rne,Cst),e(N6,wst),e(te,Ast),e(te,q6),e(q6,W8e),e(W8e,Lst),e(q6,yst),e(q6,tne),e(tne,xst),e(q6,$st),e(te,kst),e(te,j6),e(j6,U8e),e(U8e,Sst),e(j6,Rst),e(j6,ane),e(ane,Pst),e(j6,Bst),e(te,Ist),e(te,D6),e(D6,H8e),e(H8e,Nst),e(D6,qst),e(D6,nne),e(nne,jst),e(D6,Dst),e(te,Gst),e(te,G6),e(G6,J8e),e(J8e,Ost),e(G6,Vst),e(G6,sne),e(sne,Xst),e(G6,zst),e(te,Qst),e(te,O6),e(O6,Y8e),e(Y8e,Wst),e(O6,Ust),e(O6,lne),e(lne,Hst),e(O6,Jst),e(te,Yst),e(te,V6),e(V6,K8e),e(K8e,Kst),e(V6,Zst),e(V6,ine),e(ine,elt),e(V6,olt),e(te,rlt),e(te,X6),e(X6,Z8e),e(Z8e,tlt),e(X6,alt),e(X6,dne),e(dne,nlt),e(X6,slt),e(te,llt),e(te,z6),e(z6,e9e),e(e9e,ilt),e(z6,dlt),e(z6,cne),e(cne,clt),e(z6,mlt),e(te,flt),e(te,Q6),e(Q6,o9e),e(o9e,glt),e(Q6,hlt),e(Q6,mne),e(mne,ult),e(Q6,plt),e(te,_lt),e(te,W6),e(W6,r9e),e(r9e,blt),e(W6,vlt),e(W6,fne),e(fne,Flt),e(W6,Tlt),e(te,Mlt),e(te,U6),e(U6,t9e),e(t9e,Elt),e(U6,Clt),e(U6,gne),e(gne,wlt),e(U6,Alt),e(te,Llt),e(te,H6),e(H6,a9e),e(a9e,ylt),e(H6,xlt),e(H6,hne),e(hne,$lt),e(H6,klt),e(te,Slt),e(te,J6),e(J6,n9e),e(n9e,Rlt),e(J6,Plt),e(J6,une),e(une,Blt),e(J6,Ilt),e(te,Nlt),e(te,Y6),e(Y6,s9e),e(s9e,qlt),e(Y6,jlt),e(Y6,pne),e(pne,Dlt),e(Y6,Glt),e(Kr,Olt),M(K6,Kr,null),b(m,Reo,_),b(m,Dm,_),e(Dm,Z6),e(Z6,l9e),M(hR,l9e,null),e(Dm,Vlt),e(Dm,i9e),e(i9e,Xlt),b(m,Peo,_),b(m,Er,_),M(uR,Er,null),e(Er,zlt),e(Er,Gm),e(Gm,Qlt),e(Gm,_ne),e(_ne,Wlt),e(Gm,Ult),e(Gm,bne),e(bne,Hlt),e(Gm,Jlt),e(Er,Ylt),e(Er,pR),e(pR,Klt),e(pR,d9e),e(d9e,Zlt),e(pR,eit),e(Er,oit),e(Er,la),M(_R,la,null),e(la,rit),e(la,c9e),e(c9e,tit),e(la,ait),e(la,Om),e(Om,nit),e(Om,m9e),e(m9e,sit),e(Om,lit),e(Om,vne),e(vne,iit),e(Om,dit),e(la,cit),M(e7,la,null),e(Er,mit),e(Er,Zr),M(bR,Zr,null),e(Zr,fit),e(Zr,f9e),e(f9e,git),e(Zr,hit),e(Zr,On),e(On,uit),e(On,g9e),e(g9e,pit),e(On,_it),e(On,h9e),e(h9e,bit),e(On,vit),e(On,u9e),e(u9e,Fit),e(On,Tit),e(Zr,Mit),e(Zr,xe),e(xe,o7),e(o7,p9e),e(p9e,Eit),e(o7,Cit),e(o7,Fne),e(Fne,wit),e(o7,Ait),e(xe,Lit),e(xe,r7),e(r7,_9e),e(_9e,yit),e(r7,xit),e(r7,Tne),e(Tne,$it),e(r7,kit),e(xe,Sit),e(xe,t7),e(t7,b9e),e(b9e,Rit),e(t7,Pit),e(t7,Mne),e(Mne,Bit),e(t7,Iit),e(xe,Nit),e(xe,a7),e(a7,v9e),e(v9e,qit),e(a7,jit),e(a7,Ene),e(Ene,Dit),e(a7,Git),e(xe,Oit),e(xe,n7),e(n7,F9e),e(F9e,Vit),e(n7,Xit),e(n7,Cne),e(Cne,zit),e(n7,Qit),e(xe,Wit),e(xe,s7),e(s7,T9e),e(T9e,Uit),e(s7,Hit),e(s7,wne),e(wne,Jit),e(s7,Yit),e(xe,Kit),e(xe,l7),e(l7,M9e),e(M9e,Zit),e(l7,edt),e(l7,Ane),e(Ane,odt),e(l7,rdt),e(xe,tdt),e(xe,i7),e(i7,E9e),e(E9e,adt),e(i7,ndt),e(i7,Lne),e(Lne,sdt),e(i7,ldt),e(xe,idt),e(xe,d7),e(d7,C9e),e(C9e,ddt),e(d7,cdt),e(d7,yne),e(yne,mdt),e(d7,fdt),e(xe,gdt),e(xe,c7),e(c7,w9e),e(w9e,hdt),e(c7,udt),e(c7,xne),e(xne,pdt),e(c7,_dt),e(Zr,bdt),M(m7,Zr,null),b(m,Beo,_),b(m,Vm,_),e(Vm,f7),e(f7,A9e),M(vR,A9e,null),e(Vm,vdt),e(Vm,L9e),e(L9e,Fdt),b(m,Ieo,_),b(m,Cr,_),M(FR,Cr,null),e(Cr,Tdt),e(Cr,Xm),e(Xm,Mdt),e(Xm,$ne),e($ne,Edt),e(Xm,Cdt),e(Xm,kne),e(kne,wdt),e(Xm,Adt),e(Cr,Ldt),e(Cr,TR),e(TR,ydt),e(TR,y9e),e(y9e,xdt),e(TR,$dt),e(Cr,kdt),e(Cr,ia),M(MR,ia,null),e(ia,Sdt),e(ia,x9e),e(x9e,Rdt),e(ia,Pdt),e(ia,zm),e(zm,Bdt),e(zm,$9e),e($9e,Idt),e(zm,Ndt),e(zm,Sne),e(Sne,qdt),e(zm,jdt),e(ia,Ddt),M(g7,ia,null),e(Cr,Gdt),e(Cr,et),M(ER,et,null),e(et,Odt),e(et,k9e),e(k9e,Vdt),e(et,Xdt),e(et,Vn),e(Vn,zdt),e(Vn,S9e),e(S9e,Qdt),e(Vn,Wdt),e(Vn,R9e),e(R9e,Udt),e(Vn,Hdt),e(Vn,P9e),e(P9e,Jdt),e(Vn,Ydt),e(et,Kdt),e(et,Ee),e(Ee,h7),e(h7,B9e),e(B9e,Zdt),e(h7,ect),e(h7,Rne),e(Rne,oct),e(h7,rct),e(Ee,tct),e(Ee,u7),e(u7,I9e),e(I9e,act),e(u7,nct),e(u7,Pne),e(Pne,sct),e(u7,lct),e(Ee,ict),e(Ee,p7),e(p7,N9e),e(N9e,dct),e(p7,cct),e(p7,Bne),e(Bne,mct),e(p7,fct),e(Ee,gct),e(Ee,_7),e(_7,q9e),e(q9e,hct),e(_7,uct),e(_7,Ine),e(Ine,pct),e(_7,_ct),e(Ee,bct),e(Ee,b7),e(b7,j9e),e(j9e,vct),e(b7,Fct),e(b7,Nne),e(Nne,Tct),e(b7,Mct),e(Ee,Ect),e(Ee,v7),e(v7,D9e),e(D9e,Cct),e(v7,wct),e(v7,qne),e(qne,Act),e(v7,Lct),e(Ee,yct),e(Ee,F7),e(F7,G9e),e(G9e,xct),e(F7,$ct),e(F7,jne),e(jne,kct),e(F7,Sct),e(Ee,Rct),e(Ee,T7),e(T7,O9e),e(O9e,Pct),e(T7,Bct),e(T7,Dne),e(Dne,Ict),e(T7,Nct),e(Ee,qct),e(Ee,M7),e(M7,V9e),e(V9e,jct),e(M7,Dct),e(M7,Gne),e(Gne,Gct),e(M7,Oct),e(Ee,Vct),e(Ee,E7),e(E7,X9e),e(X9e,Xct),e(E7,zct),e(E7,One),e(One,Qct),e(E7,Wct),e(Ee,Uct),e(Ee,C7),e(C7,z9e),e(z9e,Hct),e(C7,Jct),e(C7,Vne),e(Vne,Yct),e(C7,Kct),e(Ee,Zct),e(Ee,w7),e(w7,Q9e),e(Q9e,emt),e(w7,omt),e(w7,Xne),e(Xne,rmt),e(w7,tmt),e(Ee,amt),e(Ee,A7),e(A7,W9e),e(W9e,nmt),e(A7,smt),e(A7,zne),e(zne,lmt),e(A7,imt),e(et,dmt),M(L7,et,null),b(m,Neo,_),b(m,Qm,_),e(Qm,y7),e(y7,U9e),M(CR,U9e,null),e(Qm,cmt),e(Qm,H9e),e(H9e,mmt),b(m,qeo,_),b(m,wr,_),M(wR,wr,null),e(wr,fmt),e(wr,Wm),e(Wm,gmt),e(Wm,Qne),e(Qne,hmt),e(Wm,umt),e(Wm,Wne),e(Wne,pmt),e(Wm,_mt),e(wr,bmt),e(wr,AR),e(AR,vmt),e(AR,J9e),e(J9e,Fmt),e(AR,Tmt),e(wr,Mmt),e(wr,da),M(LR,da,null),e(da,Emt),e(da,Y9e),e(Y9e,Cmt),e(da,wmt),e(da,Um),e(Um,Amt),e(Um,K9e),e(K9e,Lmt),e(Um,ymt),e(Um,Une),e(Une,xmt),e(Um,$mt),e(da,kmt),M(x7,da,null),e(wr,Smt),e(wr,ot),M(yR,ot,null),e(ot,Rmt),e(ot,Z9e),e(Z9e,Pmt),e(ot,Bmt),e(ot,Xn),e(Xn,Imt),e(Xn,exe),e(exe,Nmt),e(Xn,qmt),e(Xn,oxe),e(oxe,jmt),e(Xn,Dmt),e(Xn,rxe),e(rxe,Gmt),e(Xn,Omt),e(ot,Vmt),e(ot,$e),e($e,$7),e($7,txe),e(txe,Xmt),e($7,zmt),e($7,Hne),e(Hne,Qmt),e($7,Wmt),e($e,Umt),e($e,k7),e(k7,axe),e(axe,Hmt),e(k7,Jmt),e(k7,Jne),e(Jne,Ymt),e(k7,Kmt),e($e,Zmt),e($e,S7),e(S7,nxe),e(nxe,eft),e(S7,oft),e(S7,Yne),e(Yne,rft),e(S7,tft),e($e,aft),e($e,R7),e(R7,sxe),e(sxe,nft),e(R7,sft),e(R7,Kne),e(Kne,lft),e(R7,ift),e($e,dft),e($e,P7),e(P7,lxe),e(lxe,cft),e(P7,mft),e(P7,Zne),e(Zne,fft),e(P7,gft),e($e,hft),e($e,B7),e(B7,ixe),e(ixe,uft),e(B7,pft),e(B7,ese),e(ese,_ft),e(B7,bft),e($e,vft),e($e,I7),e(I7,dxe),e(dxe,Fft),e(I7,Tft),e(I7,ose),e(ose,Mft),e(I7,Eft),e($e,Cft),e($e,N7),e(N7,cxe),e(cxe,wft),e(N7,Aft),e(N7,rse),e(rse,Lft),e(N7,yft),e($e,xft),e($e,q7),e(q7,mxe),e(mxe,$ft),e(q7,kft),e(q7,tse),e(tse,Sft),e(q7,Rft),e($e,Pft),e($e,j7),e(j7,fxe),e(fxe,Bft),e(j7,Ift),e(j7,ase),e(ase,Nft),e(j7,qft),e(ot,jft),M(D7,ot,null),b(m,jeo,_),b(m,Hm,_),e(Hm,G7),e(G7,gxe),M(xR,gxe,null),e(Hm,Dft),e(Hm,hxe),e(hxe,Gft),b(m,Deo,_),b(m,Ar,_),M($R,Ar,null),e(Ar,Oft),e(Ar,Jm),e(Jm,Vft),e(Jm,nse),e(nse,Xft),e(Jm,zft),e(Jm,sse),e(sse,Qft),e(Jm,Wft),e(Ar,Uft),e(Ar,kR),e(kR,Hft),e(kR,uxe),e(uxe,Jft),e(kR,Yft),e(Ar,Kft),e(Ar,ca),M(SR,ca,null),e(ca,Zft),e(ca,pxe),e(pxe,egt),e(ca,ogt),e(ca,Ym),e(Ym,rgt),e(Ym,_xe),e(_xe,tgt),e(Ym,agt),e(Ym,lse),e(lse,ngt),e(Ym,sgt),e(ca,lgt),M(O7,ca,null),e(Ar,igt),e(Ar,rt),M(RR,rt,null),e(rt,dgt),e(rt,bxe),e(bxe,cgt),e(rt,mgt),e(rt,zn),e(zn,fgt),e(zn,vxe),e(vxe,ggt),e(zn,hgt),e(zn,Fxe),e(Fxe,ugt),e(zn,pgt),e(zn,Txe),e(Txe,_gt),e(zn,bgt),e(rt,vgt),e(rt,ke),e(ke,V7),e(V7,Mxe),e(Mxe,Fgt),e(V7,Tgt),e(V7,ise),e(ise,Mgt),e(V7,Egt),e(ke,Cgt),e(ke,X7),e(X7,Exe),e(Exe,wgt),e(X7,Agt),e(X7,dse),e(dse,Lgt),e(X7,ygt),e(ke,xgt),e(ke,z7),e(z7,Cxe),e(Cxe,$gt),e(z7,kgt),e(z7,cse),e(cse,Sgt),e(z7,Rgt),e(ke,Pgt),e(ke,Q7),e(Q7,wxe),e(wxe,Bgt),e(Q7,Igt),e(Q7,mse),e(mse,Ngt),e(Q7,qgt),e(ke,jgt),e(ke,W7),e(W7,Axe),e(Axe,Dgt),e(W7,Ggt),e(W7,fse),e(fse,Ogt),e(W7,Vgt),e(ke,Xgt),e(ke,U7),e(U7,Lxe),e(Lxe,zgt),e(U7,Qgt),e(U7,gse),e(gse,Wgt),e(U7,Ugt),e(ke,Hgt),e(ke,H7),e(H7,yxe),e(yxe,Jgt),e(H7,Ygt),e(H7,hse),e(hse,Kgt),e(H7,Zgt),e(ke,eht),e(ke,J7),e(J7,xxe),e(xxe,oht),e(J7,rht),e(J7,use),e(use,tht),e(J7,aht),e(ke,nht),e(ke,Y7),e(Y7,$xe),e($xe,sht),e(Y7,lht),e(Y7,pse),e(pse,iht),e(Y7,dht),e(ke,cht),e(ke,K7),e(K7,kxe),e(kxe,mht),e(K7,fht),e(K7,_se),e(_se,ght),e(K7,hht),e(rt,uht),M(Z7,rt,null),b(m,Geo,_),b(m,Km,_),e(Km,eL),e(eL,Sxe),M(PR,Sxe,null),e(Km,pht),e(Km,Rxe),e(Rxe,_ht),b(m,Oeo,_),b(m,Lr,_),M(BR,Lr,null),e(Lr,bht),e(Lr,Zm),e(Zm,vht),e(Zm,bse),e(bse,Fht),e(Zm,Tht),e(Zm,vse),e(vse,Mht),e(Zm,Eht),e(Lr,Cht),e(Lr,IR),e(IR,wht),e(IR,Pxe),e(Pxe,Aht),e(IR,Lht),e(Lr,yht),e(Lr,ma),M(NR,ma,null),e(ma,xht),e(ma,Bxe),e(Bxe,$ht),e(ma,kht),e(ma,ef),e(ef,Sht),e(ef,Ixe),e(Ixe,Rht),e(ef,Pht),e(ef,Fse),e(Fse,Bht),e(ef,Iht),e(ma,Nht),M(oL,ma,null),e(Lr,qht),e(Lr,tt),M(qR,tt,null),e(tt,jht),e(tt,Nxe),e(Nxe,Dht),e(tt,Ght),e(tt,Qn),e(Qn,Oht),e(Qn,qxe),e(qxe,Vht),e(Qn,Xht),e(Qn,jxe),e(jxe,zht),e(Qn,Qht),e(Qn,Dxe),e(Dxe,Wht),e(Qn,Uht),e(tt,Hht),e(tt,Se),e(Se,rL),e(rL,Gxe),e(Gxe,Jht),e(rL,Yht),e(rL,Tse),e(Tse,Kht),e(rL,Zht),e(Se,eut),e(Se,tL),e(tL,Oxe),e(Oxe,out),e(tL,rut),e(tL,Mse),e(Mse,tut),e(tL,aut),e(Se,nut),e(Se,aL),e(aL,Vxe),e(Vxe,sut),e(aL,lut),e(aL,Ese),e(Ese,iut),e(aL,dut),e(Se,cut),e(Se,nL),e(nL,Xxe),e(Xxe,mut),e(nL,fut),e(nL,Cse),e(Cse,gut),e(nL,hut),e(Se,uut),e(Se,sL),e(sL,zxe),e(zxe,put),e(sL,_ut),e(sL,wse),e(wse,but),e(sL,vut),e(Se,Fut),e(Se,lL),e(lL,Qxe),e(Qxe,Tut),e(lL,Mut),e(lL,Ase),e(Ase,Eut),e(lL,Cut),e(Se,wut),e(Se,iL),e(iL,Wxe),e(Wxe,Aut),e(iL,Lut),e(iL,Lse),e(Lse,yut),e(iL,xut),e(Se,$ut),e(Se,dL),e(dL,Uxe),e(Uxe,kut),e(dL,Sut),e(dL,yse),e(yse,Rut),e(dL,Put),e(Se,But),e(Se,cL),e(cL,Hxe),e(Hxe,Iut),e(cL,Nut),e(cL,xse),e(xse,qut),e(cL,jut),e(Se,Dut),e(Se,mL),e(mL,Jxe),e(Jxe,Gut),e(mL,Out),e(mL,$se),e($se,Vut),e(mL,Xut),e(tt,zut),M(fL,tt,null),b(m,Veo,_),b(m,of,_),e(of,gL),e(gL,Yxe),M(jR,Yxe,null),e(of,Qut),e(of,Kxe),e(Kxe,Wut),b(m,Xeo,_),b(m,yr,_),M(DR,yr,null),e(yr,Uut),e(yr,rf),e(rf,Hut),e(rf,kse),e(kse,Jut),e(rf,Yut),e(rf,Sse),e(Sse,Kut),e(rf,Zut),e(yr,ept),e(yr,GR),e(GR,opt),e(GR,Zxe),e(Zxe,rpt),e(GR,tpt),e(yr,apt),e(yr,fa),M(OR,fa,null),e(fa,npt),e(fa,e$e),e(e$e,spt),e(fa,lpt),e(fa,tf),e(tf,ipt),e(tf,o$e),e(o$e,dpt),e(tf,cpt),e(tf,Rse),e(Rse,mpt),e(tf,fpt),e(fa,gpt),M(hL,fa,null),e(yr,hpt),e(yr,at),M(VR,at,null),e(at,upt),e(at,r$e),e(r$e,ppt),e(at,_pt),e(at,Wn),e(Wn,bpt),e(Wn,t$e),e(t$e,vpt),e(Wn,Fpt),e(Wn,a$e),e(a$e,Tpt),e(Wn,Mpt),e(Wn,n$e),e(n$e,Ept),e(Wn,Cpt),e(at,wpt),e(at,Re),e(Re,uL),e(uL,s$e),e(s$e,Apt),e(uL,Lpt),e(uL,Pse),e(Pse,ypt),e(uL,xpt),e(Re,$pt),e(Re,pL),e(pL,l$e),e(l$e,kpt),e(pL,Spt),e(pL,Bse),e(Bse,Rpt),e(pL,Ppt),e(Re,Bpt),e(Re,_L),e(_L,i$e),e(i$e,Ipt),e(_L,Npt),e(_L,Ise),e(Ise,qpt),e(_L,jpt),e(Re,Dpt),e(Re,bL),e(bL,d$e),e(d$e,Gpt),e(bL,Opt),e(bL,Nse),e(Nse,Vpt),e(bL,Xpt),e(Re,zpt),e(Re,vL),e(vL,c$e),e(c$e,Qpt),e(vL,Wpt),e(vL,qse),e(qse,Upt),e(vL,Hpt),e(Re,Jpt),e(Re,FL),e(FL,m$e),e(m$e,Ypt),e(FL,Kpt),e(FL,jse),e(jse,Zpt),e(FL,e_t),e(Re,o_t),e(Re,TL),e(TL,f$e),e(f$e,r_t),e(TL,t_t),e(TL,Dse),e(Dse,a_t),e(TL,n_t),e(Re,s_t),e(Re,ML),e(ML,g$e),e(g$e,l_t),e(ML,i_t),e(ML,Gse),e(Gse,d_t),e(ML,c_t),e(Re,m_t),e(Re,EL),e(EL,h$e),e(h$e,f_t),e(EL,g_t),e(EL,Ose),e(Ose,h_t),e(EL,u_t),e(Re,p_t),e(Re,CL),e(CL,u$e),e(u$e,__t),e(CL,b_t),e(CL,Vse),e(Vse,v_t),e(CL,F_t),e(at,T_t),M(wL,at,null),b(m,zeo,_),b(m,af,_),e(af,AL),e(AL,p$e),M(XR,p$e,null),e(af,M_t),e(af,_$e),e(_$e,E_t),b(m,Qeo,_),b(m,xr,_),M(zR,xr,null),e(xr,C_t),e(xr,nf),e(nf,w_t),e(nf,Xse),e(Xse,A_t),e(nf,L_t),e(nf,zse),e(zse,y_t),e(nf,x_t),e(xr,$_t),e(xr,QR),e(QR,k_t),e(QR,b$e),e(b$e,S_t),e(QR,R_t),e(xr,P_t),e(xr,ga),M(WR,ga,null),e(ga,B_t),e(ga,v$e),e(v$e,I_t),e(ga,N_t),e(ga,sf),e(sf,q_t),e(sf,F$e),e(F$e,j_t),e(sf,D_t),e(sf,Qse),e(Qse,G_t),e(sf,O_t),e(ga,V_t),M(LL,ga,null),e(xr,X_t),e(xr,nt),M(UR,nt,null),e(nt,z_t),e(nt,T$e),e(T$e,Q_t),e(nt,W_t),e(nt,Un),e(Un,U_t),e(Un,M$e),e(M$e,H_t),e(Un,J_t),e(Un,E$e),e(E$e,Y_t),e(Un,K_t),e(Un,C$e),e(C$e,Z_t),e(Un,ebt),e(nt,obt),e(nt,Xe),e(Xe,yL),e(yL,w$e),e(w$e,rbt),e(yL,tbt),e(yL,Wse),e(Wse,abt),e(yL,nbt),e(Xe,sbt),e(Xe,xL),e(xL,A$e),e(A$e,lbt),e(xL,ibt),e(xL,Use),e(Use,dbt),e(xL,cbt),e(Xe,mbt),e(Xe,$L),e($L,L$e),e(L$e,fbt),e($L,gbt),e($L,Hse),e(Hse,hbt),e($L,ubt),e(Xe,pbt),e(Xe,kL),e(kL,y$e),e(y$e,_bt),e(kL,bbt),e(kL,Jse),e(Jse,vbt),e(kL,Fbt),e(Xe,Tbt),e(Xe,SL),e(SL,x$e),e(x$e,Mbt),e(SL,Ebt),e(SL,Yse),e(Yse,Cbt),e(SL,wbt),e(Xe,Abt),e(Xe,RL),e(RL,$$e),e($$e,Lbt),e(RL,ybt),e(RL,Kse),e(Kse,xbt),e(RL,$bt),e(Xe,kbt),e(Xe,PL),e(PL,k$e),e(k$e,Sbt),e(PL,Rbt),e(PL,Zse),e(Zse,Pbt),e(PL,Bbt),e(Xe,Ibt),e(Xe,BL),e(BL,S$e),e(S$e,Nbt),e(BL,qbt),e(BL,ele),e(ele,jbt),e(BL,Dbt),e(nt,Gbt),M(IL,nt,null),b(m,Weo,_),b(m,lf,_),e(lf,NL),e(NL,R$e),M(HR,R$e,null),e(lf,Obt),e(lf,P$e),e(P$e,Vbt),b(m,Ueo,_),b(m,$r,_),M(JR,$r,null),e($r,Xbt),e($r,df),e(df,zbt),e(df,ole),e(ole,Qbt),e(df,Wbt),e(df,rle),e(rle,Ubt),e(df,Hbt),e($r,Jbt),e($r,YR),e(YR,Ybt),e(YR,B$e),e(B$e,Kbt),e(YR,Zbt),e($r,e2t),e($r,ha),M(KR,ha,null),e(ha,o2t),e(ha,I$e),e(I$e,r2t),e(ha,t2t),e(ha,cf),e(cf,a2t),e(cf,N$e),e(N$e,n2t),e(cf,s2t),e(cf,tle),e(tle,l2t),e(cf,i2t),e(ha,d2t),M(qL,ha,null),e($r,c2t),e($r,st),M(ZR,st,null),e(st,m2t),e(st,q$e),e(q$e,f2t),e(st,g2t),e(st,Hn),e(Hn,h2t),e(Hn,j$e),e(j$e,u2t),e(Hn,p2t),e(Hn,D$e),e(D$e,_2t),e(Hn,b2t),e(Hn,G$e),e(G$e,v2t),e(Hn,F2t),e(st,T2t),e(st,ze),e(ze,jL),e(jL,O$e),e(O$e,M2t),e(jL,E2t),e(jL,ale),e(ale,C2t),e(jL,w2t),e(ze,A2t),e(ze,DL),e(DL,V$e),e(V$e,L2t),e(DL,y2t),e(DL,nle),e(nle,x2t),e(DL,$2t),e(ze,k2t),e(ze,GL),e(GL,X$e),e(X$e,S2t),e(GL,R2t),e(GL,sle),e(sle,P2t),e(GL,B2t),e(ze,I2t),e(ze,OL),e(OL,z$e),e(z$e,N2t),e(OL,q2t),e(OL,lle),e(lle,j2t),e(OL,D2t),e(ze,G2t),e(ze,VL),e(VL,Q$e),e(Q$e,O2t),e(VL,V2t),e(VL,ile),e(ile,X2t),e(VL,z2t),e(ze,Q2t),e(ze,XL),e(XL,W$e),e(W$e,W2t),e(XL,U2t),e(XL,dle),e(dle,H2t),e(XL,J2t),e(ze,Y2t),e(ze,zL),e(zL,U$e),e(U$e,K2t),e(zL,Z2t),e(zL,cle),e(cle,e1t),e(zL,o1t),e(ze,r1t),e(ze,QL),e(QL,H$e),e(H$e,t1t),e(QL,a1t),e(QL,mle),e(mle,n1t),e(QL,s1t),e(st,l1t),M(WL,st,null),b(m,Heo,_),b(m,mf,_),e(mf,UL),e(UL,J$e),M(eP,J$e,null),e(mf,i1t),e(mf,Y$e),e(Y$e,d1t),b(m,Jeo,_),b(m,kr,_),M(oP,kr,null),e(kr,c1t),e(kr,ff),e(ff,m1t),e(ff,fle),e(fle,f1t),e(ff,g1t),e(ff,gle),e(gle,h1t),e(ff,u1t),e(kr,p1t),e(kr,rP),e(rP,_1t),e(rP,K$e),e(K$e,b1t),e(rP,v1t),e(kr,F1t),e(kr,ua),M(tP,ua,null),e(ua,T1t),e(ua,Z$e),e(Z$e,M1t),e(ua,E1t),e(ua,gf),e(gf,C1t),e(gf,eke),e(eke,w1t),e(gf,A1t),e(gf,hle),e(hle,L1t),e(gf,y1t),e(ua,x1t),M(HL,ua,null),e(kr,$1t),e(kr,lt),M(aP,lt,null),e(lt,k1t),e(lt,oke),e(oke,S1t),e(lt,R1t),e(lt,Jn),e(Jn,P1t),e(Jn,rke),e(rke,B1t),e(Jn,I1t),e(Jn,tke),e(tke,N1t),e(Jn,q1t),e(Jn,ake),e(ake,j1t),e(Jn,D1t),e(lt,G1t),e(lt,nke),e(nke,JL),e(JL,ske),e(ske,O1t),e(JL,V1t),e(JL,ule),e(ule,X1t),e(JL,z1t),e(lt,Q1t),M(YL,lt,null),b(m,Yeo,_),b(m,hf,_),e(hf,KL),e(KL,lke),M(nP,lke,null),e(hf,W1t),e(hf,ike),e(ike,U1t),b(m,Keo,_),b(m,Sr,_),M(sP,Sr,null),e(Sr,H1t),e(Sr,uf),e(uf,J1t),e(uf,ple),e(ple,Y1t),e(uf,K1t),e(uf,_le),e(_le,Z1t),e(uf,evt),e(Sr,ovt),e(Sr,lP),e(lP,rvt),e(lP,dke),e(dke,tvt),e(lP,avt),e(Sr,nvt),e(Sr,pa),M(iP,pa,null),e(pa,svt),e(pa,cke),e(cke,lvt),e(pa,ivt),e(pa,pf),e(pf,dvt),e(pf,mke),e(mke,cvt),e(pf,mvt),e(pf,ble),e(ble,fvt),e(pf,gvt),e(pa,hvt),M(ZL,pa,null),e(Sr,uvt),e(Sr,it),M(dP,it,null),e(it,pvt),e(it,fke),e(fke,_vt),e(it,bvt),e(it,Yn),e(Yn,vvt),e(Yn,gke),e(gke,Fvt),e(Yn,Tvt),e(Yn,hke),e(hke,Mvt),e(Yn,Evt),e(Yn,uke),e(uke,Cvt),e(Yn,wvt),e(it,Avt),e(it,cP),e(cP,ey),e(ey,pke),e(pke,Lvt),e(ey,yvt),e(ey,vle),e(vle,xvt),e(ey,$vt),e(cP,kvt),e(cP,oy),e(oy,_ke),e(_ke,Svt),e(oy,Rvt),e(oy,Fle),e(Fle,Pvt),e(oy,Bvt),e(it,Ivt),M(ry,it,null),b(m,Zeo,_),b(m,_f,_),e(_f,ty),e(ty,bke),M(mP,bke,null),e(_f,Nvt),e(_f,vke),e(vke,qvt),b(m,eoo,_),b(m,Rr,_),M(fP,Rr,null),e(Rr,jvt),e(Rr,bf),e(bf,Dvt),e(bf,Tle),e(Tle,Gvt),e(bf,Ovt),e(bf,Mle),e(Mle,Vvt),e(bf,Xvt),e(Rr,zvt),e(Rr,gP),e(gP,Qvt),e(gP,Fke),e(Fke,Wvt),e(gP,Uvt),e(Rr,Hvt),e(Rr,_a),M(hP,_a,null),e(_a,Jvt),e(_a,Tke),e(Tke,Yvt),e(_a,Kvt),e(_a,vf),e(vf,Zvt),e(vf,Mke),e(Mke,eFt),e(vf,oFt),e(vf,Ele),e(Ele,rFt),e(vf,tFt),e(_a,aFt),M(ay,_a,null),e(Rr,nFt),e(Rr,dt),M(uP,dt,null),e(dt,sFt),e(dt,Eke),e(Eke,lFt),e(dt,iFt),e(dt,Kn),e(Kn,dFt),e(Kn,Cke),e(Cke,cFt),e(Kn,mFt),e(Kn,wke),e(wke,fFt),e(Kn,gFt),e(Kn,Ake),e(Ake,hFt),e(Kn,uFt),e(dt,pFt),e(dt,Lke),e(Lke,ny),e(ny,yke),e(yke,_Ft),e(ny,bFt),e(ny,Cle),e(Cle,vFt),e(ny,FFt),e(dt,TFt),M(sy,dt,null),ooo=!0},p(m,[_]){const pP={};_&2&&(pP.$$scope={dirty:_,ctx:m}),yf.$set(pP);const xke={};_&2&&(xke.$$scope={dirty:_,ctx:m}),Yh.$set(xke);const $ke={};_&2&&($ke.$$scope={dirty:_,ctx:m}),Pu.$set($ke);const kke={};_&2&&(kke.$$scope={dirty:_,ctx:m}),wp.$set(kke);const _P={};_&2&&(_P.$$scope={dirty:_,ctx:m}),Ap.$set(_P);const Ske={};_&2&&(Ske.$$scope={dirty:_,ctx:m}),Jp.$set(Ske);const Zn={};_&2&&(Zn.$$scope={dirty:_,ctx:m}),Yp.$set(Zn);const Rke={};_&2&&(Rke.$$scope={dirty:_,ctx:m}),e_.$set(Rke);const Pke={};_&2&&(Pke.$$scope={dirty:_,ctx:m}),p2.$set(Pke);const Bke={};_&2&&(Bke.$$scope={dirty:_,ctx:m}),b2.$set(Bke);const bP={};_&2&&(bP.$$scope={dirty:_,ctx:m}),h1.$set(bP);const Ike={};_&2&&(Ike.$$scope={dirty:_,ctx:m}),p1.$set(Ike);const vP={};_&2&&(vP.$$scope={dirty:_,ctx:m}),sv.$set(vP);const Nke={};_&2&&(Nke.$$scope={dirty:_,ctx:m}),iv.$set(Nke);const FP={};_&2&&(FP.$$scope={dirty:_,ctx:m}),Hv.$set(FP);const qke={};_&2&&(qke.$$scope={dirty:_,ctx:m}),Yv.$set(qke);const jke={};_&2&&(jke.$$scope={dirty:_,ctx:m}),vF.$set(jke);const Dke={};_&2&&(Dke.$$scope={dirty:_,ctx:m}),TF.$set(Dke);const Ff={};_&2&&(Ff.$$scope={dirty:_,ctx:m}),MT.$set(Ff);const Gke={};_&2&&(Gke.$$scope={dirty:_,ctx:m}),CT.$set(Gke);const Oke={};_&2&&(Oke.$$scope={dirty:_,ctx:m}),aM.$set(Oke);const Vke={};_&2&&(Vke.$$scope={dirty:_,ctx:m}),sM.$set(Vke);const TP={};_&2&&(TP.$$scope={dirty:_,ctx:m}),uM.$set(TP);const Xke={};_&2&&(Xke.$$scope={dirty:_,ctx:m}),_M.$set(Xke);const zke={};_&2&&(zke.$$scope={dirty:_,ctx:m}),tE.$set(zke);const Qke={};_&2&&(Qke.$$scope={dirty:_,ctx:m}),nE.$set(Qke);const ht={};_&2&&(ht.$$scope={dirty:_,ctx:m}),YE.$set(ht);const MP={};_&2&&(MP.$$scope={dirty:_,ctx:m}),ZE.$set(MP);const Wke={};_&2&&(Wke.$$scope={dirty:_,ctx:m}),r4.$set(Wke);const EP={};_&2&&(EP.$$scope={dirty:_,ctx:m}),a4.$set(EP);const Uke={};_&2&&(Uke.$$scope={dirty:_,ctx:m}),d4.$set(Uke);const ut={};_&2&&(ut.$$scope={dirty:_,ctx:m}),m4.$set(ut);const Hke={};_&2&&(Hke.$$scope={dirty:_,ctx:m}),y4.$set(Hke);const Tf={};_&2&&(Tf.$$scope={dirty:_,ctx:m}),$4.$set(Tf);const Jke={};_&2&&(Jke.$$scope={dirty:_,ctx:m}),R4.$set(Jke);const Yke={};_&2&&(Yke.$$scope={dirty:_,ctx:m}),B4.$set(Yke);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),q4.$set(L);const ly={};_&2&&(ly.$$scope={dirty:_,ctx:m}),D4.$set(ly);const Kke={};_&2&&(Kke.$$scope={dirty:_,ctx:m}),V4.$set(Kke);const Zke={};_&2&&(Zke.$$scope={dirty:_,ctx:m}),z4.$set(Zke);const iy={};_&2&&(iy.$$scope={dirty:_,ctx:m}),rC.$set(iy);const eSe={};_&2&&(eSe.$$scope={dirty:_,ctx:m}),aC.$set(eSe);const oSe={};_&2&&(oSe.$$scope={dirty:_,ctx:m}),mC.$set(oSe);const dy={};_&2&&(dy.$$scope={dirty:_,ctx:m}),gC.$set(dy);const rSe={};_&2&&(rSe.$$scope={dirty:_,ctx:m}),wC.$set(rSe);const tSe={};_&2&&(tSe.$$scope={dirty:_,ctx:m}),LC.$set(tSe);const cy={};_&2&&(cy.$$scope={dirty:_,ctx:m}),kC.$set(cy);const aSe={};_&2&&(aSe.$$scope={dirty:_,ctx:m}),RC.$set(aSe);const nSe={};_&2&&(nSe.$$scope={dirty:_,ctx:m}),DC.$set(nSe);const my={};_&2&&(my.$$scope={dirty:_,ctx:m}),OC.$set(my);const sSe={};_&2&&(sSe.$$scope={dirty:_,ctx:m}),UC.$set(sSe);const lSe={};_&2&&(lSe.$$scope={dirty:_,ctx:m}),JC.$set(lSe);const fy={};_&2&&(fy.$$scope={dirty:_,ctx:m}),r3.$set(fy);const iSe={};_&2&&(iSe.$$scope={dirty:_,ctx:m}),a3.$set(iSe);const dSe={};_&2&&(dSe.$$scope={dirty:_,ctx:m}),l3.$set(dSe);const gy={};_&2&&(gy.$$scope={dirty:_,ctx:m}),d3.$set(gy);const cSe={};_&2&&(cSe.$$scope={dirty:_,ctx:m}),p3.$set(cSe);const mSe={};_&2&&(mSe.$$scope={dirty:_,ctx:m}),b3.$set(mSe);const hy={};_&2&&(hy.$$scope={dirty:_,ctx:m}),T3.$set(hy);const fSe={};_&2&&(fSe.$$scope={dirty:_,ctx:m}),E3.$set(fSe);const gSe={};_&2&&(gSe.$$scope={dirty:_,ctx:m}),E5.$set(gSe);const uy={};_&2&&(uy.$$scope={dirty:_,ctx:m}),w5.$set(uy);const hSe={};_&2&&(hSe.$$scope={dirty:_,ctx:m}),H5.$set(hSe);const uSe={};_&2&&(uSe.$$scope={dirty:_,ctx:m}),Y5.$set(uSe);const py={};_&2&&(py.$$scope={dirty:_,ctx:m}),f0.$set(py);const pSe={};_&2&&(pSe.$$scope={dirty:_,ctx:m}),h0.$set(pSe);const _Se={};_&2&&(_Se.$$scope={dirty:_,ctx:m}),E0.$set(_Se);const _y={};_&2&&(_y.$$scope={dirty:_,ctx:m}),w0.$set(_y);const bSe={};_&2&&(bSe.$$scope={dirty:_,ctx:m}),x0.$set(bSe);const vSe={};_&2&&(vSe.$$scope={dirty:_,ctx:m}),k0.$set(vSe);const by={};_&2&&(by.$$scope={dirty:_,ctx:m}),K0.$set(by);const FSe={};_&2&&(FSe.$$scope={dirty:_,ctx:m}),ew.$set(FSe);const TSe={};_&2&&(TSe.$$scope={dirty:_,ctx:m}),mw.$set(TSe);const vy={};_&2&&(vy.$$scope={dirty:_,ctx:m}),gw.$set(vy);const MSe={};_&2&&(MSe.$$scope={dirty:_,ctx:m}),Gw.$set(MSe);const ESe={};_&2&&(ESe.$$scope={dirty:_,ctx:m}),Vw.$set(ESe);const Fy={};_&2&&(Fy.$$scope={dirty:_,ctx:m}),lA.$set(Fy);const CSe={};_&2&&(CSe.$$scope={dirty:_,ctx:m}),dA.$set(CSe);const wSe={};_&2&&(wSe.$$scope={dirty:_,ctx:m}),fA.$set(wSe);const Ty={};_&2&&(Ty.$$scope={dirty:_,ctx:m}),hA.$set(Ty);const ASe={};_&2&&(ASe.$$scope={dirty:_,ctx:m}),pA.$set(ASe);const LSe={};_&2&&(LSe.$$scope={dirty:_,ctx:m}),bA.$set(LSe);const My={};_&2&&(My.$$scope={dirty:_,ctx:m}),FA.$set(My);const ySe={};_&2&&(ySe.$$scope={dirty:_,ctx:m}),MA.$set(ySe);const xSe={};_&2&&(xSe.$$scope={dirty:_,ctx:m}),XA.$set(xSe);const Ey={};_&2&&(Ey.$$scope={dirty:_,ctx:m}),QA.$set(Ey);const $Se={};_&2&&($Se.$$scope={dirty:_,ctx:m}),h6.$set($Se);const kSe={};_&2&&(kSe.$$scope={dirty:_,ctx:m}),p6.$set(kSe);const Cy={};_&2&&(Cy.$$scope={dirty:_,ctx:m}),b6.$set(Cy);const SSe={};_&2&&(SSe.$$scope={dirty:_,ctx:m}),F6.$set(SSe);const RSe={};_&2&&(RSe.$$scope={dirty:_,ctx:m}),M6.$set(RSe);const wy={};_&2&&(wy.$$scope={dirty:_,ctx:m}),C6.$set(wy);const PSe={};_&2&&(PSe.$$scope={dirty:_,ctx:m}),K6.$set(PSe);const BSe={};_&2&&(BSe.$$scope={dirty:_,ctx:m}),e7.$set(BSe);const Ay={};_&2&&(Ay.$$scope={dirty:_,ctx:m}),m7.$set(Ay);const ISe={};_&2&&(ISe.$$scope={dirty:_,ctx:m}),g7.$set(ISe);const NSe={};_&2&&(NSe.$$scope={dirty:_,ctx:m}),L7.$set(NSe);const Ly={};_&2&&(Ly.$$scope={dirty:_,ctx:m}),x7.$set(Ly);const qSe={};_&2&&(qSe.$$scope={dirty:_,ctx:m}),D7.$set(qSe);const jSe={};_&2&&(jSe.$$scope={dirty:_,ctx:m}),O7.$set(jSe);const yy={};_&2&&(yy.$$scope={dirty:_,ctx:m}),Z7.$set(yy);const DSe={};_&2&&(DSe.$$scope={dirty:_,ctx:m}),oL.$set(DSe);const GSe={};_&2&&(GSe.$$scope={dirty:_,ctx:m}),fL.$set(GSe);const xy={};_&2&&(xy.$$scope={dirty:_,ctx:m}),hL.$set(xy);const OSe={};_&2&&(OSe.$$scope={dirty:_,ctx:m}),wL.$set(OSe);const VSe={};_&2&&(VSe.$$scope={dirty:_,ctx:m}),LL.$set(VSe);const $y={};_&2&&($y.$$scope={dirty:_,ctx:m}),IL.$set($y);const XSe={};_&2&&(XSe.$$scope={dirty:_,ctx:m}),qL.$set(XSe);const zSe={};_&2&&(zSe.$$scope={dirty:_,ctx:m}),WL.$set(zSe);const ky={};_&2&&(ky.$$scope={dirty:_,ctx:m}),HL.$set(ky);const QSe={};_&2&&(QSe.$$scope={dirty:_,ctx:m}),YL.$set(QSe);const WSe={};_&2&&(WSe.$$scope={dirty:_,ctx:m}),ZL.$set(WSe);const Sy={};_&2&&(Sy.$$scope={dirty:_,ctx:m}),ry.$set(Sy);const USe={};_&2&&(USe.$$scope={dirty:_,ctx:m}),ay.$set(USe);const HSe={};_&2&&(HSe.$$scope={dirty:_,ctx:m}),sy.$set(HSe)},i(m){ooo||(E(d.$$.fragment,m),E(Qa.$$.fragment,m),E(G9.$$.fragment,m),E(O9.$$.fragment,m),E(yf.$$.fragment,m),E(V9.$$.fragment,m),E(X9.$$.fragment,m),E(W9.$$.fragment,m),E(Yh.$$.fragment,m),E(U9.$$.fragment,m),E(H9.$$.fragment,m),E(J9.$$.fragment,m),E(Z9.$$.fragment,m),E(Pu.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(nx.$$.fragment,m),E(wp.$$.fragment,m),E(Ap.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(ix.$$.fragment,m),E(mx.$$.fragment,m),E(Jp.$$.fragment,m),E(Yp.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(px.$$.fragment,m),E(e_.$$.fragment,m),E(_x.$$.fragment,m),E(p2.$$.fragment,m),E(bx.$$.fragment,m),E(vx.$$.fragment,m),E(Tx.$$.fragment,m),E(b2.$$.fragment,m),E(Mx.$$.fragment,m),E(h1.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(p1.$$.fragment,m),E(Lx.$$.fragment,m),E(sv.$$.fragment,m),E(yx.$$.fragment,m),E(xx.$$.fragment,m),E(kx.$$.fragment,m),E(iv.$$.fragment,m),E(Sx.$$.fragment,m),E(Hv.$$.fragment,m),E(Rx.$$.fragment,m),E(Px.$$.fragment,m),E(Ix.$$.fragment,m),E(Yv.$$.fragment,m),E(Nx.$$.fragment,m),E(vF.$$.fragment,m),E(qx.$$.fragment,m),E(jx.$$.fragment,m),E(Gx.$$.fragment,m),E(TF.$$.fragment,m),E(Ox.$$.fragment,m),E(MT.$$.fragment,m),E(Vx.$$.fragment,m),E(Xx.$$.fragment,m),E(Qx.$$.fragment,m),E(CT.$$.fragment,m),E(Wx.$$.fragment,m),E(aM.$$.fragment,m),E(Ux.$$.fragment,m),E(Hx.$$.fragment,m),E(Yx.$$.fragment,m),E(sM.$$.fragment,m),E(Kx.$$.fragment,m),E(uM.$$.fragment,m),E(Zx.$$.fragment,m),E(e$.$$.fragment,m),E(r$.$$.fragment,m),E(_M.$$.fragment,m),E(t$.$$.fragment,m),E(tE.$$.fragment,m),E(a$.$$.fragment,m),E(n$.$$.fragment,m),E(l$.$$.fragment,m),E(nE.$$.fragment,m),E(i$.$$.fragment,m),E(YE.$$.fragment,m),E(d$.$$.fragment,m),E(c$.$$.fragment,m),E(f$.$$.fragment,m),E(ZE.$$.fragment,m),E(g$.$$.fragment,m),E(r4.$$.fragment,m),E(h$.$$.fragment,m),E(u$.$$.fragment,m),E(_$.$$.fragment,m),E(a4.$$.fragment,m),E(b$.$$.fragment,m),E(d4.$$.fragment,m),E(v$.$$.fragment,m),E(F$.$$.fragment,m),E(M$.$$.fragment,m),E(m4.$$.fragment,m),E(E$.$$.fragment,m),E(y4.$$.fragment,m),E(C$.$$.fragment,m),E(w$.$$.fragment,m),E(L$.$$.fragment,m),E($4.$$.fragment,m),E(y$.$$.fragment,m),E(R4.$$.fragment,m),E(x$.$$.fragment,m),E($$.$$.fragment,m),E(S$.$$.fragment,m),E(B4.$$.fragment,m),E(R$.$$.fragment,m),E(q4.$$.fragment,m),E(P$.$$.fragment,m),E(B$.$$.fragment,m),E(N$.$$.fragment,m),E(D4.$$.fragment,m),E(q$.$$.fragment,m),E(V4.$$.fragment,m),E(j$.$$.fragment,m),E(D$.$$.fragment,m),E(O$.$$.fragment,m),E(z4.$$.fragment,m),E(V$.$$.fragment,m),E(rC.$$.fragment,m),E(X$.$$.fragment,m),E(z$.$$.fragment,m),E(W$.$$.fragment,m),E(aC.$$.fragment,m),E(U$.$$.fragment,m),E(mC.$$.fragment,m),E(H$.$$.fragment,m),E(J$.$$.fragment,m),E(K$.$$.fragment,m),E(gC.$$.fragment,m),E(Z$.$$.fragment,m),E(wC.$$.fragment,m),E(ek.$$.fragment,m),E(ok.$$.fragment,m),E(tk.$$.fragment,m),E(LC.$$.fragment,m),E(ak.$$.fragment,m),E(kC.$$.fragment,m),E(sk.$$.fragment,m),E(lk.$$.fragment,m),E(dk.$$.fragment,m),E(RC.$$.fragment,m),E(ck.$$.fragment,m),E(DC.$$.fragment,m),E(mk.$$.fragment,m),E(fk.$$.fragment,m),E(hk.$$.fragment,m),E(OC.$$.fragment,m),E(uk.$$.fragment,m),E(UC.$$.fragment,m),E(pk.$$.fragment,m),E(_k.$$.fragment,m),E(vk.$$.fragment,m),E(JC.$$.fragment,m),E(Fk.$$.fragment,m),E(r3.$$.fragment,m),E(Tk.$$.fragment,m),E(Mk.$$.fragment,m),E(Ck.$$.fragment,m),E(a3.$$.fragment,m),E(wk.$$.fragment,m),E(l3.$$.fragment,m),E(Ak.$$.fragment,m),E(Lk.$$.fragment,m),E(xk.$$.fragment,m),E(d3.$$.fragment,m),E($k.$$.fragment,m),E(p3.$$.fragment,m),E(kk.$$.fragment,m),E(Sk.$$.fragment,m),E(Pk.$$.fragment,m),E(b3.$$.fragment,m),E(Bk.$$.fragment,m),E(T3.$$.fragment,m),E(Ik.$$.fragment,m),E(Nk.$$.fragment,m),E(jk.$$.fragment,m),E(E3.$$.fragment,m),E(Dk.$$.fragment,m),E(E5.$$.fragment,m),E(Gk.$$.fragment,m),E(Ok.$$.fragment,m),E(Xk.$$.fragment,m),E(w5.$$.fragment,m),E(zk.$$.fragment,m),E(H5.$$.fragment,m),E(Qk.$$.fragment,m),E(Wk.$$.fragment,m),E(Hk.$$.fragment,m),E(Y5.$$.fragment,m),E(Jk.$$.fragment,m),E(f0.$$.fragment,m),E(Yk.$$.fragment,m),E(Kk.$$.fragment,m),E(eS.$$.fragment,m),E(h0.$$.fragment,m),E(oS.$$.fragment,m),E(E0.$$.fragment,m),E(rS.$$.fragment,m),E(tS.$$.fragment,m),E(nS.$$.fragment,m),E(w0.$$.fragment,m),E(sS.$$.fragment,m),E(x0.$$.fragment,m),E(lS.$$.fragment,m),E(iS.$$.fragment,m),E(cS.$$.fragment,m),E(k0.$$.fragment,m),E(mS.$$.fragment,m),E(K0.$$.fragment,m),E(fS.$$.fragment,m),E(gS.$$.fragment,m),E(uS.$$.fragment,m),E(ew.$$.fragment,m),E(pS.$$.fragment,m),E(mw.$$.fragment,m),E(_S.$$.fragment,m),E(bS.$$.fragment,m),E(FS.$$.fragment,m),E(gw.$$.fragment,m),E(TS.$$.fragment,m),E(Gw.$$.fragment,m),E(MS.$$.fragment,m),E(ES.$$.fragment,m),E(wS.$$.fragment,m),E(Vw.$$.fragment,m),E(AS.$$.fragment,m),E(lA.$$.fragment,m),E(LS.$$.fragment,m),E(yS.$$.fragment,m),E($S.$$.fragment,m),E(dA.$$.fragment,m),E(kS.$$.fragment,m),E(fA.$$.fragment,m),E(RS.$$.fragment,m),E(PS.$$.fragment,m),E(IS.$$.fragment,m),E(hA.$$.fragment,m),E(NS.$$.fragment,m),E(pA.$$.fragment,m),E(qS.$$.fragment,m),E(jS.$$.fragment,m),E(GS.$$.fragment,m),E(bA.$$.fragment,m),E(OS.$$.fragment,m),E(FA.$$.fragment,m),E(VS.$$.fragment,m),E(XS.$$.fragment,m),E(QS.$$.fragment,m),E(MA.$$.fragment,m),E(WS.$$.fragment,m),E(XA.$$.fragment,m),E(US.$$.fragment,m),E(HS.$$.fragment,m),E(YS.$$.fragment,m),E(QA.$$.fragment,m),E(KS.$$.fragment,m),E(h6.$$.fragment,m),E(ZS.$$.fragment,m),E(eR.$$.fragment,m),E(rR.$$.fragment,m),E(p6.$$.fragment,m),E(tR.$$.fragment,m),E(b6.$$.fragment,m),E(aR.$$.fragment,m),E(nR.$$.fragment,m),E(lR.$$.fragment,m),E(F6.$$.fragment,m),E(iR.$$.fragment,m),E(M6.$$.fragment,m),E(dR.$$.fragment,m),E(cR.$$.fragment,m),E(fR.$$.fragment,m),E(C6.$$.fragment,m),E(gR.$$.fragment,m),E(K6.$$.fragment,m),E(hR.$$.fragment,m),E(uR.$$.fragment,m),E(_R.$$.fragment,m),E(e7.$$.fragment,m),E(bR.$$.fragment,m),E(m7.$$.fragment,m),E(vR.$$.fragment,m),E(FR.$$.fragment,m),E(MR.$$.fragment,m),E(g7.$$.fragment,m),E(ER.$$.fragment,m),E(L7.$$.fragment,m),E(CR.$$.fragment,m),E(wR.$$.fragment,m),E(LR.$$.fragment,m),E(x7.$$.fragment,m),E(yR.$$.fragment,m),E(D7.$$.fragment,m),E(xR.$$.fragment,m),E($R.$$.fragment,m),E(SR.$$.fragment,m),E(O7.$$.fragment,m),E(RR.$$.fragment,m),E(Z7.$$.fragment,m),E(PR.$$.fragment,m),E(BR.$$.fragment,m),E(NR.$$.fragment,m),E(oL.$$.fragment,m),E(qR.$$.fragment,m),E(fL.$$.fragment,m),E(jR.$$.fragment,m),E(DR.$$.fragment,m),E(OR.$$.fragment,m),E(hL.$$.fragment,m),E(VR.$$.fragment,m),E(wL.$$.fragment,m),E(XR.$$.fragment,m),E(zR.$$.fragment,m),E(WR.$$.fragment,m),E(LL.$$.fragment,m),E(UR.$$.fragment,m),E(IL.$$.fragment,m),E(HR.$$.fragment,m),E(JR.$$.fragment,m),E(KR.$$.fragment,m),E(qL.$$.fragment,m),E(ZR.$$.fragment,m),E(WL.$$.fragment,m),E(eP.$$.fragment,m),E(oP.$$.fragment,m),E(tP.$$.fragment,m),E(HL.$$.fragment,m),E(aP.$$.fragment,m),E(YL.$$.fragment,m),E(nP.$$.fragment,m),E(sP.$$.fragment,m),E(iP.$$.fragment,m),E(ZL.$$.fragment,m),E(dP.$$.fragment,m),E(ry.$$.fragment,m),E(mP.$$.fragment,m),E(fP.$$.fragment,m),E(hP.$$.fragment,m),E(ay.$$.fragment,m),E(uP.$$.fragment,m),E(sy.$$.fragment,m),ooo=!0)},o(m){C(d.$$.fragment,m),C(Qa.$$.fragment,m),C(G9.$$.fragment,m),C(O9.$$.fragment,m),C(yf.$$.fragment,m),C(V9.$$.fragment,m),C(X9.$$.fragment,m),C(W9.$$.fragment,m),C(Yh.$$.fragment,m),C(U9.$$.fragment,m),C(H9.$$.fragment,m),C(J9.$$.fragment,m),C(Z9.$$.fragment,m),C(Pu.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(nx.$$.fragment,m),C(wp.$$.fragment,m),C(Ap.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(ix.$$.fragment,m),C(mx.$$.fragment,m),C(Jp.$$.fragment,m),C(Yp.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(px.$$.fragment,m),C(e_.$$.fragment,m),C(_x.$$.fragment,m),C(p2.$$.fragment,m),C(bx.$$.fragment,m),C(vx.$$.fragment,m),C(Tx.$$.fragment,m),C(b2.$$.fragment,m),C(Mx.$$.fragment,m),C(h1.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(p1.$$.fragment,m),C(Lx.$$.fragment,m),C(sv.$$.fragment,m),C(yx.$$.fragment,m),C(xx.$$.fragment,m),C(kx.$$.fragment,m),C(iv.$$.fragment,m),C(Sx.$$.fragment,m),C(Hv.$$.fragment,m),C(Rx.$$.fragment,m),C(Px.$$.fragment,m),C(Ix.$$.fragment,m),C(Yv.$$.fragment,m),C(Nx.$$.fragment,m),C(vF.$$.fragment,m),C(qx.$$.fragment,m),C(jx.$$.fragment,m),C(Gx.$$.fragment,m),C(TF.$$.fragment,m),C(Ox.$$.fragment,m),C(MT.$$.fragment,m),C(Vx.$$.fragment,m),C(Xx.$$.fragment,m),C(Qx.$$.fragment,m),C(CT.$$.fragment,m),C(Wx.$$.fragment,m),C(aM.$$.fragment,m),C(Ux.$$.fragment,m),C(Hx.$$.fragment,m),C(Yx.$$.fragment,m),C(sM.$$.fragment,m),C(Kx.$$.fragment,m),C(uM.$$.fragment,m),C(Zx.$$.fragment,m),C(e$.$$.fragment,m),C(r$.$$.fragment,m),C(_M.$$.fragment,m),C(t$.$$.fragment,m),C(tE.$$.fragment,m),C(a$.$$.fragment,m),C(n$.$$.fragment,m),C(l$.$$.fragment,m),C(nE.$$.fragment,m),C(i$.$$.fragment,m),C(YE.$$.fragment,m),C(d$.$$.fragment,m),C(c$.$$.fragment,m),C(f$.$$.fragment,m),C(ZE.$$.fragment,m),C(g$.$$.fragment,m),C(r4.$$.fragment,m),C(h$.$$.fragment,m),C(u$.$$.fragment,m),C(_$.$$.fragment,m),C(a4.$$.fragment,m),C(b$.$$.fragment,m),C(d4.$$.fragment,m),C(v$.$$.fragment,m),C(F$.$$.fragment,m),C(M$.$$.fragment,m),C(m4.$$.fragment,m),C(E$.$$.fragment,m),C(y4.$$.fragment,m),C(C$.$$.fragment,m),C(w$.$$.fragment,m),C(L$.$$.fragment,m),C($4.$$.fragment,m),C(y$.$$.fragment,m),C(R4.$$.fragment,m),C(x$.$$.fragment,m),C($$.$$.fragment,m),C(S$.$$.fragment,m),C(B4.$$.fragment,m),C(R$.$$.fragment,m),C(q4.$$.fragment,m),C(P$.$$.fragment,m),C(B$.$$.fragment,m),C(N$.$$.fragment,m),C(D4.$$.fragment,m),C(q$.$$.fragment,m),C(V4.$$.fragment,m),C(j$.$$.fragment,m),C(D$.$$.fragment,m),C(O$.$$.fragment,m),C(z4.$$.fragment,m),C(V$.$$.fragment,m),C(rC.$$.fragment,m),C(X$.$$.fragment,m),C(z$.$$.fragment,m),C(W$.$$.fragment,m),C(aC.$$.fragment,m),C(U$.$$.fragment,m),C(mC.$$.fragment,m),C(H$.$$.fragment,m),C(J$.$$.fragment,m),C(K$.$$.fragment,m),C(gC.$$.fragment,m),C(Z$.$$.fragment,m),C(wC.$$.fragment,m),C(ek.$$.fragment,m),C(ok.$$.fragment,m),C(tk.$$.fragment,m),C(LC.$$.fragment,m),C(ak.$$.fragment,m),C(kC.$$.fragment,m),C(sk.$$.fragment,m),C(lk.$$.fragment,m),C(dk.$$.fragment,m),C(RC.$$.fragment,m),C(ck.$$.fragment,m),C(DC.$$.fragment,m),C(mk.$$.fragment,m),C(fk.$$.fragment,m),C(hk.$$.fragment,m),C(OC.$$.fragment,m),C(uk.$$.fragment,m),C(UC.$$.fragment,m),C(pk.$$.fragment,m),C(_k.$$.fragment,m),C(vk.$$.fragment,m),C(JC.$$.fragment,m),C(Fk.$$.fragment,m),C(r3.$$.fragment,m),C(Tk.$$.fragment,m),C(Mk.$$.fragment,m),C(Ck.$$.fragment,m),C(a3.$$.fragment,m),C(wk.$$.fragment,m),C(l3.$$.fragment,m),C(Ak.$$.fragment,m),C(Lk.$$.fragment,m),C(xk.$$.fragment,m),C(d3.$$.fragment,m),C($k.$$.fragment,m),C(p3.$$.fragment,m),C(kk.$$.fragment,m),C(Sk.$$.fragment,m),C(Pk.$$.fragment,m),C(b3.$$.fragment,m),C(Bk.$$.fragment,m),C(T3.$$.fragment,m),C(Ik.$$.fragment,m),C(Nk.$$.fragment,m),C(jk.$$.fragment,m),C(E3.$$.fragment,m),C(Dk.$$.fragment,m),C(E5.$$.fragment,m),C(Gk.$$.fragment,m),C(Ok.$$.fragment,m),C(Xk.$$.fragment,m),C(w5.$$.fragment,m),C(zk.$$.fragment,m),C(H5.$$.fragment,m),C(Qk.$$.fragment,m),C(Wk.$$.fragment,m),C(Hk.$$.fragment,m),C(Y5.$$.fragment,m),C(Jk.$$.fragment,m),C(f0.$$.fragment,m),C(Yk.$$.fragment,m),C(Kk.$$.fragment,m),C(eS.$$.fragment,m),C(h0.$$.fragment,m),C(oS.$$.fragment,m),C(E0.$$.fragment,m),C(rS.$$.fragment,m),C(tS.$$.fragment,m),C(nS.$$.fragment,m),C(w0.$$.fragment,m),C(sS.$$.fragment,m),C(x0.$$.fragment,m),C(lS.$$.fragment,m),C(iS.$$.fragment,m),C(cS.$$.fragment,m),C(k0.$$.fragment,m),C(mS.$$.fragment,m),C(K0.$$.fragment,m),C(fS.$$.fragment,m),C(gS.$$.fragment,m),C(uS.$$.fragment,m),C(ew.$$.fragment,m),C(pS.$$.fragment,m),C(mw.$$.fragment,m),C(_S.$$.fragment,m),C(bS.$$.fragment,m),C(FS.$$.fragment,m),C(gw.$$.fragment,m),C(TS.$$.fragment,m),C(Gw.$$.fragment,m),C(MS.$$.fragment,m),C(ES.$$.fragment,m),C(wS.$$.fragment,m),C(Vw.$$.fragment,m),C(AS.$$.fragment,m),C(lA.$$.fragment,m),C(LS.$$.fragment,m),C(yS.$$.fragment,m),C($S.$$.fragment,m),C(dA.$$.fragment,m),C(kS.$$.fragment,m),C(fA.$$.fragment,m),C(RS.$$.fragment,m),C(PS.$$.fragment,m),C(IS.$$.fragment,m),C(hA.$$.fragment,m),C(NS.$$.fragment,m),C(pA.$$.fragment,m),C(qS.$$.fragment,m),C(jS.$$.fragment,m),C(GS.$$.fragment,m),C(bA.$$.fragment,m),C(OS.$$.fragment,m),C(FA.$$.fragment,m),C(VS.$$.fragment,m),C(XS.$$.fragment,m),C(QS.$$.fragment,m),C(MA.$$.fragment,m),C(WS.$$.fragment,m),C(XA.$$.fragment,m),C(US.$$.fragment,m),C(HS.$$.fragment,m),C(YS.$$.fragment,m),C(QA.$$.fragment,m),C(KS.$$.fragment,m),C(h6.$$.fragment,m),C(ZS.$$.fragment,m),C(eR.$$.fragment,m),C(rR.$$.fragment,m),C(p6.$$.fragment,m),C(tR.$$.fragment,m),C(b6.$$.fragment,m),C(aR.$$.fragment,m),C(nR.$$.fragment,m),C(lR.$$.fragment,m),C(F6.$$.fragment,m),C(iR.$$.fragment,m),C(M6.$$.fragment,m),C(dR.$$.fragment,m),C(cR.$$.fragment,m),C(fR.$$.fragment,m),C(C6.$$.fragment,m),C(gR.$$.fragment,m),C(K6.$$.fragment,m),C(hR.$$.fragment,m),C(uR.$$.fragment,m),C(_R.$$.fragment,m),C(e7.$$.fragment,m),C(bR.$$.fragment,m),C(m7.$$.fragment,m),C(vR.$$.fragment,m),C(FR.$$.fragment,m),C(MR.$$.fragment,m),C(g7.$$.fragment,m),C(ER.$$.fragment,m),C(L7.$$.fragment,m),C(CR.$$.fragment,m),C(wR.$$.fragment,m),C(LR.$$.fragment,m),C(x7.$$.fragment,m),C(yR.$$.fragment,m),C(D7.$$.fragment,m),C(xR.$$.fragment,m),C($R.$$.fragment,m),C(SR.$$.fragment,m),C(O7.$$.fragment,m),C(RR.$$.fragment,m),C(Z7.$$.fragment,m),C(PR.$$.fragment,m),C(BR.$$.fragment,m),C(NR.$$.fragment,m),C(oL.$$.fragment,m),C(qR.$$.fragment,m),C(fL.$$.fragment,m),C(jR.$$.fragment,m),C(DR.$$.fragment,m),C(OR.$$.fragment,m),C(hL.$$.fragment,m),C(VR.$$.fragment,m),C(wL.$$.fragment,m),C(XR.$$.fragment,m),C(zR.$$.fragment,m),C(WR.$$.fragment,m),C(LL.$$.fragment,m),C(UR.$$.fragment,m),C(IL.$$.fragment,m),C(HR.$$.fragment,m),C(JR.$$.fragment,m),C(KR.$$.fragment,m),C(qL.$$.fragment,m),C(ZR.$$.fragment,m),C(WL.$$.fragment,m),C(eP.$$.fragment,m),C(oP.$$.fragment,m),C(tP.$$.fragment,m),C(HL.$$.fragment,m),C(aP.$$.fragment,m),C(YL.$$.fragment,m),C(nP.$$.fragment,m),C(sP.$$.fragment,m),C(iP.$$.fragment,m),C(ZL.$$.fragment,m),C(dP.$$.fragment,m),C(ry.$$.fragment,m),C(mP.$$.fragment,m),C(fP.$$.fragment,m),C(hP.$$.fragment,m),C(ay.$$.fragment,m),C(uP.$$.fragment,m),C(sy.$$.fragment,m),ooo=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Ef),m&&t(pt),m&&t(Ve),m&&t(He),m&&t(wf),w(Qa,m),m&&t(Je),m&&t(Ae),m&&t(xo),m&&t(Wa),m&&t(OKe),m&&t(cd),w(G9),m&&t(VKe),m&&t(as),m&&t(XKe),w(O9,m),m&&t(zKe),m&&t(QB),m&&t(QKe),w(yf,m),m&&t(WKe),m&&t(md),w(V9),m&&t(UKe),m&&t($o),w(X9),w(W9),w(Yh),w(U9),m&&t(HKe),m&&t(gd),w(H9),m&&t(JKe),m&&t(ko),w(J9),w(Z9),w(Pu),w(ex),m&&t(YKe),m&&t(hd),w(ox),m&&t(KKe),m&&t(So),w(rx),w(nx),w(wp),w(Ap),w(sx),m&&t(ZKe),m&&t(ud),w(lx),m&&t(eZe),m&&t(Ro),w(ix),w(mx),w(Jp),w(Yp),w(fx),m&&t(oZe),m&&t(_d),w(gx),m&&t(rZe),m&&t(Po),w(hx),w(px),w(e_),w(_x),w(p2),m&&t(tZe),m&&t(Fd),w(bx),m&&t(aZe),m&&t(Bo),w(vx),w(Tx),w(b2),w(Mx),w(h1),m&&t(nZe),m&&t(Ed),w(Ex),m&&t(sZe),m&&t(Io),w(Cx),w(Ax),w(p1),w(Lx),w(sv),m&&t(lZe),m&&t(Ad),w(yx),m&&t(iZe),m&&t(No),w(xx),w(kx),w(iv),w(Sx),w(Hv),m&&t(dZe),m&&t(xd),w(Rx),m&&t(cZe),m&&t(qo),w(Px),w(Ix),w(Yv),w(Nx),w(vF),m&&t(mZe),m&&t(Sd),w(qx),m&&t(fZe),m&&t(jo),w(jx),w(Gx),w(TF),w(Ox),w(MT),m&&t(gZe),m&&t(Bd),w(Vx),m&&t(hZe),m&&t(Do),w(Xx),w(Qx),w(CT),w(Wx),w(aM),m&&t(uZe),m&&t(qd),w(Ux),m&&t(pZe),m&&t(Go),w(Hx),w(Yx),w(sM),w(Kx),w(uM),m&&t(_Ze),m&&t(Gd),w(Zx),m&&t(bZe),m&&t(Oo),w(e$),w(r$),w(_M),w(t$),w(tE),m&&t(vZe),m&&t(Xd),w(a$),m&&t(FZe),m&&t(Vo),w(n$),w(l$),w(nE),w(i$),w(YE),m&&t(TZe),m&&t(Wd),w(d$),m&&t(MZe),m&&t(Xo),w(c$),w(f$),w(ZE),w(g$),w(r4),m&&t(EZe),m&&t(Jd),w(h$),m&&t(CZe),m&&t(zo),w(u$),w(_$),w(a4),w(b$),w(d4),m&&t(wZe),m&&t(ec),w(v$),m&&t(AZe),m&&t(Qo),w(F$),w(M$),w(m4),w(E$),w(y4),m&&t(LZe),m&&t(tc),w(C$),m&&t(yZe),m&&t(Wo),w(w$),w(L$),w($4),w(y$),w(R4),m&&t(xZe),m&&t(sc),w(x$),m&&t($Ze),m&&t(Uo),w($$),w(S$),w(B4),w(R$),w(q4),m&&t(kZe),m&&t(dc),w(P$),m&&t(SZe),m&&t(Ho),w(B$),w(N$),w(D4),w(q$),w(V4),m&&t(RZe),m&&t(fc),w(j$),m&&t(PZe),m&&t(Jo),w(D$),w(O$),w(z4),w(V$),w(rC),m&&t(BZe),m&&t(uc),w(X$),m&&t(IZe),m&&t(Yo),w(z$),w(W$),w(aC),w(U$),w(mC),m&&t(NZe),m&&t(bc),w(H$),m&&t(qZe),m&&t(Ko),w(J$),w(K$),w(gC),w(Z$),w(wC),m&&t(jZe),m&&t(Tc),w(ek),m&&t(DZe),m&&t(Zo),w(ok),w(tk),w(LC),w(ak),w(kC),m&&t(GZe),m&&t(Cc),w(sk),m&&t(OZe),m&&t(er),w(lk),w(dk),w(RC),w(ck),w(DC),m&&t(VZe),m&&t(Lc),w(mk),m&&t(XZe),m&&t(or),w(fk),w(hk),w(OC),w(uk),w(UC),m&&t(zZe),m&&t($c),w(pk),m&&t(QZe),m&&t(rr),w(_k),w(vk),w(JC),w(Fk),w(r3),m&&t(WZe),m&&t(Rc),w(Tk),m&&t(UZe),m&&t(tr),w(Mk),w(Ck),w(a3),w(wk),w(l3),m&&t(HZe),m&&t(Ic),w(Ak),m&&t(JZe),m&&t(ar),w(Lk),w(xk),w(d3),w($k),w(p3),m&&t(YZe),m&&t(jc),w(kk),m&&t(KZe),m&&t(nr),w(Sk),w(Pk),w(b3),w(Bk),w(T3),m&&t(ZZe),m&&t(Oc),w(Ik),m&&t(eeo),m&&t(sr),w(Nk),w(jk),w(E3),w(Dk),w(E5),m&&t(oeo),m&&t(zc),w(Gk),m&&t(reo),m&&t(lr),w(Ok),w(Xk),w(w5),w(zk),w(H5),m&&t(teo),m&&t(Uc),w(Qk),m&&t(aeo),m&&t(ir),w(Wk),w(Hk),w(Y5),w(Jk),w(f0),m&&t(neo),m&&t(Yc),w(Yk),m&&t(seo),m&&t(dr),w(Kk),w(eS),w(h0),w(oS),w(E0),m&&t(leo),m&&t(em),w(rS),m&&t(ieo),m&&t(cr),w(tS),w(nS),w(w0),w(sS),w(x0),m&&t(deo),m&&t(am),w(lS),m&&t(ceo),m&&t(mr),w(iS),w(cS),w(k0),w(mS),w(K0),m&&t(meo),m&&t(lm),w(fS),m&&t(feo),m&&t(fr),w(gS),w(uS),w(ew),w(pS),w(mw),m&&t(geo),m&&t(cm),w(_S),m&&t(heo),m&&t(gr),w(bS),w(FS),w(gw),w(TS),w(Gw),m&&t(ueo),m&&t(gm),w(MS),m&&t(peo),m&&t(hr),w(ES),w(wS),w(Vw),w(AS),w(lA),m&&t(_eo),m&&t(pm),w(LS),m&&t(beo),m&&t(ur),w(yS),w($S),w(dA),w(kS),w(fA),m&&t(veo),m&&t(vm),w(RS),m&&t(Feo),m&&t(pr),w(PS),w(IS),w(hA),w(NS),w(pA),m&&t(Teo),m&&t(Mm),w(qS),m&&t(Meo),m&&t(_r),w(jS),w(GS),w(bA),w(OS),w(FA),m&&t(Eeo),m&&t(wm),w(VS),m&&t(Ceo),m&&t(br),w(XS),w(QS),w(MA),w(WS),w(XA),m&&t(weo),m&&t(ym),w(US),m&&t(Aeo),m&&t(vr),w(HS),w(YS),w(QA),w(KS),w(h6),m&&t(Leo),m&&t(km),w(ZS),m&&t(yeo),m&&t(Fr),w(eR),w(rR),w(p6),w(tR),w(b6),m&&t(xeo),m&&t(Pm),w(aR),m&&t($eo),m&&t(Tr),w(nR),w(lR),w(F6),w(iR),w(M6),m&&t(keo),m&&t(Nm),w(dR),m&&t(Seo),m&&t(Mr),w(cR),w(fR),w(C6),w(gR),w(K6),m&&t(Reo),m&&t(Dm),w(hR),m&&t(Peo),m&&t(Er),w(uR),w(_R),w(e7),w(bR),w(m7),m&&t(Beo),m&&t(Vm),w(vR),m&&t(Ieo),m&&t(Cr),w(FR),w(MR),w(g7),w(ER),w(L7),m&&t(Neo),m&&t(Qm),w(CR),m&&t(qeo),m&&t(wr),w(wR),w(LR),w(x7),w(yR),w(D7),m&&t(jeo),m&&t(Hm),w(xR),m&&t(Deo),m&&t(Ar),w($R),w(SR),w(O7),w(RR),w(Z7),m&&t(Geo),m&&t(Km),w(PR),m&&t(Oeo),m&&t(Lr),w(BR),w(NR),w(oL),w(qR),w(fL),m&&t(Veo),m&&t(of),w(jR),m&&t(Xeo),m&&t(yr),w(DR),w(OR),w(hL),w(VR),w(wL),m&&t(zeo),m&&t(af),w(XR),m&&t(Qeo),m&&t(xr),w(zR),w(WR),w(LL),w(UR),w(IL),m&&t(Weo),m&&t(lf),w(HR),m&&t(Ueo),m&&t($r),w(JR),w(KR),w(qL),w(ZR),w(WL),m&&t(Heo),m&&t(mf),w(eP),m&&t(Jeo),m&&t(kr),w(oP),w(tP),w(HL),w(aP),w(YL),m&&t(Yeo),m&&t(hf),w(nP),m&&t(Keo),m&&t(Sr),w(sP),w(iP),w(ZL),w(dP),w(ry),m&&t(Zeo),m&&t(_f),w(mP),m&&t(eoo),m&&t(Rr),w(fP),w(hP),w(ay),w(uP),w(sy)}}}const dba={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cba($){return epa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _ba extends Jua{constructor(g){super();Yua(this,g,cba,iba,Kua,{})}}export{_ba as default,dba as metadata};
