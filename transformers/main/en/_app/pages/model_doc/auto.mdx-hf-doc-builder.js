import{S as pha,i as _ha,s as bha,e as a,k as l,w as F,t as o,M as vha,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Fha,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as avt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Tha($){let g,v,u,f,p,d,h,yo,rd,Ef,pt,td,ad,y9,Cf,Ve,He,nd,Zn,x9,es,os,$9,sd,rs,k9,ld,wf,Qa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),rd=a("code"),Ef=o("model_type"),pt=o(" attribute is set to the same key you use when registering the config (here "),td=a("code"),ad=o('"new-model"'),y9=o(")."),Cf=l(),Ve=a("p"),He=o("Likewise, if your "),nd=a("code"),Zn=o("NewModel"),x9=o(" is a subclass of "),es=a("a"),os=o("PreTrainedModel"),$9=o(`, make sure its
`),sd=a("code"),rs=o("config_class"),k9=o(` attribute is set to the same class you use when registering the model (here
`),ld=a("code"),wf=o("NewModelConfig"),Qa=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var SB=s(u);f=r(SB,"NewModelConfig"),SB.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var id=s(d);h=r(id,"PretrainedConfig"),id.forEach(t),yo=r(Ae,`, make sure its
`),rd=n(Ae,"CODE",{});var RB=s(rd);Ef=r(RB,"model_type"),RB.forEach(t),pt=r(Ae," attribute is set to the same key you use when registering the config (here "),td=n(Ae,"CODE",{});var PB=s(td);ad=r(PB,'"new-model"'),PB.forEach(t),y9=r(Ae,")."),Ae.forEach(t),Cf=i(Je),Ve=n(Je,"P",{});var xo=s(Ve);He=r(xo,"Likewise, if your "),nd=n(xo,"CODE",{});var Wa=s(nd);Zn=r(Wa,"NewModel"),Wa.forEach(t),x9=r(xo," is a subclass of "),es=n(xo,"A",{href:!0});var BB=s(es);os=r(BB,"PreTrainedModel"),BB.forEach(t),$9=r(xo,`, make sure its
`),sd=n(xo,"CODE",{});var Af=s(sd);rs=r(Af,"config_class"),Af.forEach(t),k9=r(xo,` attribute is set to the same class you use when registering the model (here
`),ld=n(xo,"CODE",{});var IB=s(ld);wf=r(IB,"NewModelConfig"),IB.forEach(t),Qa=r(xo,")."),xo.forEach(t),this.h()},h(){c(es,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,yo),e(g,rd),e(rd,Ef),e(g,pt),e(g,td),e(td,ad),e(g,y9),b(Je,Cf,Ae),b(Je,Ve,Ae),e(Ve,He),e(Ve,nd),e(nd,Zn),e(Ve,x9),e(Ve,es),e(es,os),e(Ve,$9),e(Ve,sd),e(sd,rs),e(Ve,k9),e(Ve,ld),e(ld,wf),e(Ve,Qa)},d(Je){Je&&t(g),Je&&t(Cf),Je&&t(Ve)}}}function Mha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cha($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function wha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aha($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function Lha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zha($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function epa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function opa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function apa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function npa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function spa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ipa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function upa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ppa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _pa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Epa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Apa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ypa($){let g,v,u,f,p,d,h,yo,rd,Ef,pt,td,ad,y9,Cf,Ve,He,nd,Zn,x9,es,os,$9,sd,rs,k9,ld,wf,Qa,Je,Ae,SB,id,RB,PB,xo,Wa,BB,Af,IB,Dro,cKe,dd,Lf,fde,S9,Gro,gde,Oro,mKe,ts,Vro,hde,Xro,zro,ude,Qro,Wro,fKe,R9,gKe,NB,Uro,hKe,yf,uKe,cd,xf,pde,P9,Hro,_de,Jro,pKe,$o,B9,Yro,I9,Kro,qB,Zro,eto,oto,N9,rto,bde,tto,ato,nto,Pr,q9,sto,vde,lto,ito,md,dto,Fde,cto,mto,Tde,fto,gto,hto,A,$f,Mde,uto,pto,jB,_to,bto,vto,kf,Ede,Fto,Tto,DB,Mto,Eto,Cto,Sf,Cde,wto,Ato,GB,Lto,yto,xto,Rf,wde,$to,kto,OB,Sto,Rto,Pto,Pf,Ade,Bto,Ito,VB,Nto,qto,jto,Bf,Lde,Dto,Gto,XB,Oto,Vto,Xto,If,yde,zto,Qto,zB,Wto,Uto,Hto,Nf,xde,Jto,Yto,QB,Kto,Zto,eao,qf,$de,oao,rao,WB,tao,aao,nao,jf,kde,sao,lao,UB,iao,dao,cao,Df,Sde,mao,fao,HB,gao,hao,uao,Gf,Rde,pao,_ao,JB,bao,vao,Fao,Of,Pde,Tao,Mao,YB,Eao,Cao,wao,Vf,Bde,Aao,Lao,KB,yao,xao,$ao,Xf,Ide,kao,Sao,ZB,Rao,Pao,Bao,zf,Nde,Iao,Nao,eI,qao,jao,Dao,Qf,qde,Gao,Oao,oI,Vao,Xao,zao,Wf,jde,Qao,Wao,rI,Uao,Hao,Jao,Uf,Dde,Yao,Kao,tI,Zao,eno,ono,Hf,Gde,rno,tno,aI,ano,nno,sno,Jf,Ode,lno,ino,nI,dno,cno,mno,Yf,Vde,fno,gno,sI,hno,uno,pno,Kf,Xde,_no,bno,lI,vno,Fno,Tno,Zf,zde,Mno,Eno,iI,Cno,wno,Ano,eg,Qde,Lno,yno,dI,xno,$no,kno,og,Wde,Sno,Rno,cI,Pno,Bno,Ino,rg,Ude,Nno,qno,mI,jno,Dno,Gno,tg,Hde,Ono,Vno,fI,Xno,zno,Qno,ag,Jde,Wno,Uno,gI,Hno,Jno,Yno,ng,Yde,Kno,Zno,hI,eso,oso,rso,sg,Kde,tso,aso,uI,nso,sso,lso,lg,Zde,iso,dso,pI,cso,mso,fso,ig,ece,gso,hso,_I,uso,pso,_so,dg,oce,bso,vso,bI,Fso,Tso,Mso,cg,rce,Eso,Cso,vI,wso,Aso,Lso,mg,tce,yso,xso,FI,$so,kso,Sso,fg,ace,Rso,Pso,TI,Bso,Iso,Nso,gg,nce,qso,jso,MI,Dso,Gso,Oso,hg,sce,Vso,Xso,EI,zso,Qso,Wso,ug,lce,Uso,Hso,CI,Jso,Yso,Kso,pg,ice,Zso,elo,wI,olo,rlo,tlo,_g,dce,alo,nlo,AI,slo,llo,ilo,bg,cce,dlo,clo,LI,mlo,flo,glo,vg,mce,hlo,ulo,yI,plo,_lo,blo,Fg,fce,vlo,Flo,xI,Tlo,Mlo,Elo,Tg,gce,Clo,wlo,$I,Alo,Llo,ylo,Mg,hce,xlo,$lo,kI,klo,Slo,Rlo,Eg,uce,Plo,Blo,SI,Ilo,Nlo,qlo,Cg,pce,jlo,Dlo,RI,Glo,Olo,Vlo,wg,_ce,Xlo,zlo,PI,Qlo,Wlo,Ulo,Ag,bce,Hlo,Jlo,BI,Ylo,Klo,Zlo,Lg,vce,eio,oio,II,rio,tio,aio,yg,Fce,nio,sio,NI,lio,iio,dio,xg,Tce,cio,mio,qI,fio,gio,hio,$g,Mce,uio,pio,jI,_io,bio,vio,kg,Ece,Fio,Tio,DI,Mio,Eio,Cio,Sg,Cce,wio,Aio,GI,Lio,yio,xio,Rg,wce,$io,kio,OI,Sio,Rio,Pio,Pg,Ace,Bio,Iio,VI,Nio,qio,jio,Bg,Lce,Dio,Gio,XI,Oio,Vio,Xio,Ig,yce,zio,Qio,zI,Wio,Uio,Hio,Ng,xce,Jio,Yio,QI,Kio,Zio,edo,qg,$ce,odo,rdo,WI,tdo,ado,ndo,jg,kce,sdo,ldo,UI,ido,ddo,cdo,Dg,Sce,mdo,fdo,HI,gdo,hdo,udo,Gg,Rce,pdo,_do,JI,bdo,vdo,Fdo,Og,Pce,Tdo,Mdo,YI,Edo,Cdo,wdo,Vg,Bce,Ado,Ldo,KI,ydo,xdo,$do,Xg,Ice,kdo,Sdo,ZI,Rdo,Pdo,Bdo,zg,Nce,Ido,Ndo,eN,qdo,jdo,Ddo,Qg,qce,Gdo,Odo,oN,Vdo,Xdo,zdo,Wg,jce,Qdo,Wdo,rN,Udo,Hdo,Jdo,Ug,Dce,Ydo,Kdo,tN,Zdo,eco,oco,Hg,Gce,rco,tco,aN,aco,nco,sco,Jg,Oce,lco,ico,nN,dco,cco,mco,Yg,Vce,fco,gco,sN,hco,uco,pco,Kg,Xce,_co,bco,lN,vco,Fco,Tco,Zg,zce,Mco,Eco,iN,Cco,wco,Aco,eh,Qce,Lco,yco,dN,xco,$co,kco,oh,Wce,Sco,Rco,cN,Pco,Bco,Ico,rh,Uce,Nco,qco,mN,jco,Dco,Gco,th,Hce,Oco,Vco,fN,Xco,zco,Qco,ah,Jce,Wco,Uco,gN,Hco,Jco,Yco,nh,Yce,Kco,Zco,hN,emo,omo,rmo,sh,Kce,tmo,amo,uN,nmo,smo,lmo,lh,Zce,imo,dmo,pN,cmo,mmo,fmo,ih,eme,gmo,hmo,_N,umo,pmo,_mo,dh,ome,bmo,vmo,bN,Fmo,Tmo,Mmo,ch,rme,Emo,Cmo,vN,wmo,Amo,Lmo,mh,tme,ymo,xmo,FN,$mo,kmo,Smo,fh,ame,Rmo,Pmo,TN,Bmo,Imo,Nmo,gh,nme,qmo,jmo,MN,Dmo,Gmo,Omo,hh,sme,Vmo,Xmo,EN,zmo,Qmo,Wmo,uh,lme,Umo,Hmo,CN,Jmo,Ymo,Kmo,ph,ime,Zmo,efo,wN,ofo,rfo,tfo,_h,dme,afo,nfo,AN,sfo,lfo,ifo,bh,cme,dfo,cfo,LN,mfo,ffo,gfo,vh,mme,hfo,ufo,yN,pfo,_fo,bfo,Fh,fme,vfo,Ffo,xN,Tfo,Mfo,Efo,Th,gme,Cfo,wfo,$N,Afo,Lfo,yfo,Mh,hme,xfo,$fo,kN,kfo,Sfo,Rfo,Eh,ume,Pfo,Bfo,SN,Ifo,Nfo,qfo,Ch,pme,jfo,Dfo,RN,Gfo,Ofo,Vfo,wh,_me,Xfo,zfo,PN,Qfo,Wfo,Ufo,Ah,bme,Hfo,Jfo,BN,Yfo,Kfo,Zfo,Lh,vme,ego,ogo,IN,rgo,tgo,ago,yh,Fme,ngo,sgo,NN,lgo,igo,dgo,xh,Tme,cgo,mgo,qN,fgo,ggo,hgo,$h,Mme,ugo,pgo,jN,_go,bgo,vgo,kh,Eme,Fgo,Tgo,DN,Mgo,Ego,Cgo,Sh,Cme,wgo,Ago,GN,Lgo,ygo,xgo,Rh,wme,$go,kgo,ON,Sgo,Rgo,Pgo,Ph,Ame,Bgo,Igo,VN,Ngo,qgo,jgo,Bh,Lme,Dgo,Ggo,XN,Ogo,Vgo,Xgo,Ih,yme,zgo,Qgo,zN,Wgo,Ugo,Hgo,Nh,xme,Jgo,Ygo,QN,Kgo,Zgo,eho,qh,$me,oho,rho,WN,tho,aho,nho,jh,kme,sho,lho,UN,iho,dho,cho,Dh,Sme,mho,fho,HN,gho,hho,uho,Gh,Rme,pho,_ho,JN,bho,vho,Fho,Oh,Pme,Tho,Mho,YN,Eho,Cho,who,Vh,Bme,Aho,Lho,KN,yho,xho,$ho,Xh,Ime,kho,Sho,ZN,Rho,Pho,Bho,zh,Nme,Iho,Nho,eq,qho,jho,Dho,Qh,qme,Gho,Oho,oq,Vho,Xho,zho,Wh,jme,Qho,Who,rq,Uho,Hho,Jho,Uh,Dme,Yho,Kho,tq,Zho,euo,ouo,Hh,ruo,Jh,j9,tuo,Gme,auo,_Ke,fd,Yh,Ome,D9,nuo,Vme,suo,bKe,ko,G9,luo,O9,iuo,aq,duo,cuo,muo,V9,fuo,Xme,guo,huo,uuo,Br,X9,puo,zme,_uo,buo,Ua,vuo,Qme,Fuo,Tuo,Wme,Muo,Euo,Ume,Cuo,wuo,Auo,k,as,Hme,Luo,yuo,nq,xuo,$uo,sq,kuo,Suo,Ruo,ns,Jme,Puo,Buo,lq,Iuo,Nuo,iq,quo,juo,Duo,ss,Yme,Guo,Ouo,dq,Vuo,Xuo,cq,zuo,Quo,Wuo,Kh,Kme,Uuo,Huo,mq,Juo,Yuo,Kuo,ls,Zme,Zuo,epo,fq,opo,rpo,gq,tpo,apo,npo,Zh,efe,spo,lpo,hq,ipo,dpo,cpo,eu,ofe,mpo,fpo,uq,gpo,hpo,upo,ou,rfe,ppo,_po,pq,bpo,vpo,Fpo,is,tfe,Tpo,Mpo,_q,Epo,Cpo,bq,wpo,Apo,Lpo,ds,afe,ypo,xpo,vq,$po,kpo,Fq,Spo,Rpo,Ppo,cs,nfe,Bpo,Ipo,Tq,Npo,qpo,Mq,jpo,Dpo,Gpo,ru,sfe,Opo,Vpo,Eq,Xpo,zpo,Qpo,tu,lfe,Wpo,Upo,Cq,Hpo,Jpo,Ypo,au,ife,Kpo,Zpo,wq,e_o,o_o,r_o,ms,dfe,t_o,a_o,Aq,n_o,s_o,Lq,l_o,i_o,d_o,nu,cfe,c_o,m_o,yq,f_o,g_o,h_o,fs,mfe,u_o,p_o,xq,__o,b_o,$q,v_o,F_o,T_o,gs,ffe,M_o,E_o,kq,C_o,w_o,Sq,A_o,L_o,y_o,hs,gfe,x_o,$_o,Rq,k_o,S_o,Pq,R_o,P_o,B_o,us,hfe,I_o,N_o,Bq,q_o,j_o,Iq,D_o,G_o,O_o,su,ufe,V_o,X_o,Nq,z_o,Q_o,W_o,ps,pfe,U_o,H_o,qq,J_o,Y_o,jq,K_o,Z_o,ebo,_s,_fe,obo,rbo,Dq,tbo,abo,Gq,nbo,sbo,lbo,bs,bfe,ibo,dbo,Oq,cbo,mbo,Vq,fbo,gbo,hbo,vs,vfe,ubo,pbo,Xq,_bo,bbo,zq,vbo,Fbo,Tbo,Fs,Ffe,Mbo,Ebo,Qq,Cbo,wbo,Wq,Abo,Lbo,ybo,Ts,Tfe,xbo,$bo,Uq,kbo,Sbo,Hq,Rbo,Pbo,Bbo,Ms,Mfe,Ibo,Nbo,Jq,qbo,jbo,Yq,Dbo,Gbo,Obo,lu,Efe,Vbo,Xbo,Kq,zbo,Qbo,Wbo,Es,Cfe,Ubo,Hbo,Zq,Jbo,Ybo,ej,Kbo,Zbo,e2o,iu,wfe,o2o,r2o,oj,t2o,a2o,n2o,Cs,Afe,s2o,l2o,rj,i2o,d2o,tj,c2o,m2o,f2o,ws,Lfe,g2o,h2o,aj,u2o,p2o,nj,_2o,b2o,v2o,As,yfe,F2o,T2o,sj,M2o,E2o,lj,C2o,w2o,A2o,du,xfe,L2o,y2o,ij,x2o,$2o,k2o,cu,$fe,S2o,R2o,dj,P2o,B2o,I2o,Ls,kfe,N2o,q2o,cj,j2o,D2o,mj,G2o,O2o,V2o,ys,Sfe,X2o,z2o,fj,Q2o,W2o,gj,U2o,H2o,J2o,xs,Rfe,Y2o,K2o,hj,Z2o,e1o,uj,o1o,r1o,t1o,mu,Pfe,a1o,n1o,pj,s1o,l1o,i1o,$s,Bfe,d1o,c1o,_j,m1o,f1o,bj,g1o,h1o,u1o,ks,Ife,p1o,_1o,vj,b1o,v1o,Fj,F1o,T1o,M1o,Ss,Nfe,E1o,C1o,Tj,w1o,A1o,Mj,L1o,y1o,x1o,Rs,qfe,$1o,k1o,Ej,S1o,R1o,Cj,P1o,B1o,I1o,Ps,jfe,N1o,q1o,wj,j1o,D1o,Aj,G1o,O1o,V1o,Bs,Dfe,X1o,z1o,Lj,Q1o,W1o,yj,U1o,H1o,J1o,Is,Gfe,Y1o,K1o,xj,Z1o,evo,$j,ovo,rvo,tvo,Ns,Ofe,avo,nvo,kj,svo,lvo,Sj,ivo,dvo,cvo,fu,Vfe,mvo,fvo,Rj,gvo,hvo,uvo,qs,Xfe,pvo,_vo,Pj,bvo,vvo,Bj,Fvo,Tvo,Mvo,gu,zfe,Evo,Cvo,Ij,wvo,Avo,Lvo,hu,Qfe,yvo,xvo,Nj,$vo,kvo,Svo,js,Wfe,Rvo,Pvo,qj,Bvo,Ivo,jj,Nvo,qvo,jvo,Ds,Ufe,Dvo,Gvo,Dj,Ovo,Vvo,Gj,Xvo,zvo,Qvo,Gs,Hfe,Wvo,Uvo,Oj,Hvo,Jvo,Vj,Yvo,Kvo,Zvo,uu,Jfe,eFo,oFo,Xj,rFo,tFo,aFo,Os,Yfe,nFo,sFo,zj,lFo,iFo,Qj,dFo,cFo,mFo,Vs,Kfe,fFo,gFo,Wj,hFo,uFo,Uj,pFo,_Fo,bFo,Xs,Zfe,vFo,FFo,Hj,TFo,MFo,Jj,EFo,CFo,wFo,zs,ege,AFo,LFo,Yj,yFo,xFo,Kj,$Fo,kFo,SFo,Qs,oge,RFo,PFo,Zj,BFo,IFo,eD,NFo,qFo,jFo,Ws,rge,DFo,GFo,oD,OFo,VFo,rD,XFo,zFo,QFo,Us,tge,WFo,UFo,tD,HFo,JFo,aD,YFo,KFo,ZFo,Hs,age,eTo,oTo,nD,rTo,tTo,sD,aTo,nTo,sTo,pu,nge,lTo,iTo,lD,dTo,cTo,mTo,Js,sge,fTo,gTo,iD,hTo,uTo,dD,pTo,_To,bTo,Ys,lge,vTo,FTo,cD,TTo,MTo,mD,ETo,CTo,wTo,_u,ige,ATo,LTo,fD,yTo,xTo,$To,bu,dge,kTo,STo,gD,RTo,PTo,BTo,vu,cge,ITo,NTo,hD,qTo,jTo,DTo,Fu,mge,GTo,OTo,uD,VTo,XTo,zTo,Ks,fge,QTo,WTo,pD,UTo,HTo,_D,JTo,YTo,KTo,Tu,gge,ZTo,eMo,bD,oMo,rMo,tMo,Zs,hge,aMo,nMo,vD,sMo,lMo,FD,iMo,dMo,cMo,el,uge,mMo,fMo,TD,gMo,hMo,MD,uMo,pMo,_Mo,ol,pge,bMo,vMo,ED,FMo,TMo,CD,MMo,EMo,CMo,rl,_ge,wMo,AMo,wD,LMo,yMo,AD,xMo,$Mo,kMo,tl,bge,SMo,RMo,LD,PMo,BMo,yD,IMo,NMo,qMo,al,vge,jMo,DMo,xD,GMo,OMo,$D,VMo,XMo,zMo,Mu,Fge,QMo,WMo,kD,UMo,HMo,JMo,Eu,Tge,YMo,KMo,SD,ZMo,eEo,oEo,nl,Mge,rEo,tEo,RD,aEo,nEo,PD,sEo,lEo,iEo,sl,Ege,dEo,cEo,BD,mEo,fEo,ID,gEo,hEo,uEo,ll,Cge,pEo,_Eo,ND,bEo,vEo,qD,FEo,TEo,MEo,Cu,wge,EEo,CEo,jD,wEo,AEo,LEo,wu,Age,yEo,xEo,DD,$Eo,kEo,SEo,Au,Lge,REo,PEo,GD,BEo,IEo,NEo,il,yge,qEo,jEo,OD,DEo,GEo,VD,OEo,VEo,XEo,dl,xge,zEo,QEo,XD,WEo,UEo,zD,HEo,JEo,YEo,Lu,$ge,KEo,ZEo,QD,e4o,o4o,r4o,yu,kge,t4o,a4o,WD,n4o,s4o,l4o,xu,Sge,i4o,d4o,UD,c4o,m4o,f4o,cl,Rge,g4o,h4o,HD,u4o,p4o,JD,_4o,b4o,v4o,ml,Pge,F4o,T4o,YD,M4o,E4o,KD,C4o,w4o,A4o,$u,Bge,L4o,y4o,ZD,x4o,$4o,k4o,ku,Ige,S4o,R4o,eG,P4o,B4o,I4o,fl,Nge,N4o,q4o,oG,j4o,D4o,rG,G4o,O4o,V4o,gl,qge,X4o,z4o,tG,Q4o,W4o,aG,U4o,H4o,J4o,hl,jge,Y4o,K4o,nG,Z4o,eCo,sG,oCo,rCo,tCo,ul,Dge,aCo,nCo,lG,sCo,lCo,iG,iCo,dCo,cCo,Su,mCo,Ru,z9,fCo,Gge,gCo,vKe,gd,Pu,Oge,Q9,hCo,Vge,uCo,FKe,So,W9,pCo,U9,_Co,dG,bCo,vCo,FCo,H9,TCo,Xge,MCo,ECo,CCo,Ye,J9,wCo,zge,ACo,LCo,Ha,yCo,Qge,xCo,$Co,Wge,kCo,SCo,Uge,RCo,PCo,BCo,W,Bu,Hge,ICo,NCo,cG,qCo,jCo,DCo,Iu,Jge,GCo,OCo,mG,VCo,XCo,zCo,Nu,Yge,QCo,WCo,fG,UCo,HCo,JCo,qu,Kge,YCo,KCo,gG,ZCo,e3o,o3o,ju,Zge,r3o,t3o,hG,a3o,n3o,s3o,Du,ehe,l3o,i3o,uG,d3o,c3o,m3o,Gu,ohe,f3o,g3o,pG,h3o,u3o,p3o,Ou,rhe,_3o,b3o,_G,v3o,F3o,T3o,Vu,the,M3o,E3o,bG,C3o,w3o,A3o,Xu,ahe,L3o,y3o,vG,x3o,$3o,k3o,zu,nhe,S3o,R3o,FG,P3o,B3o,I3o,Qu,she,N3o,q3o,TG,j3o,D3o,G3o,Wu,lhe,O3o,V3o,MG,X3o,z3o,Q3o,Uu,ihe,W3o,U3o,EG,H3o,J3o,Y3o,Hu,dhe,K3o,Z3o,CG,e5o,o5o,r5o,Ju,che,t5o,a5o,wG,n5o,s5o,l5o,Yu,mhe,i5o,d5o,AG,c5o,m5o,f5o,Ku,fhe,g5o,h5o,LG,u5o,p5o,_5o,Zu,ghe,b5o,v5o,yG,F5o,T5o,M5o,ep,hhe,E5o,C5o,xG,w5o,A5o,L5o,op,uhe,y5o,x5o,$G,$5o,k5o,S5o,rp,phe,R5o,P5o,kG,B5o,I5o,N5o,tp,_he,q5o,j5o,SG,D5o,G5o,O5o,ap,bhe,V5o,X5o,RG,z5o,Q5o,W5o,np,vhe,U5o,H5o,PG,J5o,Y5o,K5o,sp,Fhe,Z5o,e0o,BG,o0o,r0o,t0o,lp,The,a0o,n0o,IG,s0o,l0o,i0o,ip,Mhe,d0o,c0o,NG,m0o,f0o,g0o,dp,Ehe,h0o,u0o,qG,p0o,_0o,b0o,cp,Che,v0o,F0o,jG,T0o,M0o,E0o,mp,whe,C0o,w0o,DG,A0o,L0o,y0o,fp,Ahe,x0o,$0o,GG,k0o,S0o,R0o,gp,Lhe,P0o,B0o,OG,I0o,N0o,q0o,hp,yhe,j0o,D0o,VG,G0o,O0o,V0o,up,xhe,X0o,z0o,XG,Q0o,W0o,U0o,pp,$he,H0o,J0o,zG,Y0o,K0o,Z0o,_p,khe,ewo,owo,QG,rwo,two,awo,bp,She,nwo,swo,WG,lwo,iwo,dwo,vp,Rhe,cwo,mwo,UG,fwo,gwo,hwo,Fp,Phe,uwo,pwo,HG,_wo,bwo,vwo,Tp,Fwo,Mp,Two,Ep,Y9,Mwo,Bhe,Ewo,TKe,hd,Cp,Ihe,K9,Cwo,Nhe,wwo,MKe,Ro,Z9,Awo,ex,Lwo,JG,ywo,xwo,$wo,ox,kwo,qhe,Swo,Rwo,Pwo,Ke,rx,Bwo,jhe,Iwo,Nwo,ud,qwo,Dhe,jwo,Dwo,Ghe,Gwo,Owo,Vwo,ie,wp,Ohe,Xwo,zwo,YG,Qwo,Wwo,Uwo,Ap,Vhe,Hwo,Jwo,KG,Ywo,Kwo,Zwo,Lp,Xhe,eAo,oAo,ZG,rAo,tAo,aAo,yp,zhe,nAo,sAo,eO,lAo,iAo,dAo,xp,Qhe,cAo,mAo,oO,fAo,gAo,hAo,$p,Whe,uAo,pAo,rO,_Ao,bAo,vAo,kp,Uhe,FAo,TAo,tO,MAo,EAo,CAo,Sp,Hhe,wAo,AAo,aO,LAo,yAo,xAo,Rp,Jhe,$Ao,kAo,nO,SAo,RAo,PAo,Pp,Yhe,BAo,IAo,sO,NAo,qAo,jAo,Bp,Khe,DAo,GAo,lO,OAo,VAo,XAo,Ip,Zhe,zAo,QAo,iO,WAo,UAo,HAo,Np,eue,JAo,YAo,dO,KAo,ZAo,e6o,qp,oue,o6o,r6o,cO,t6o,a6o,n6o,jp,rue,s6o,l6o,mO,i6o,d6o,c6o,Dp,tue,m6o,f6o,fO,g6o,h6o,u6o,Gp,aue,p6o,_6o,gO,b6o,v6o,F6o,Op,nue,T6o,M6o,hO,E6o,C6o,w6o,Vp,sue,A6o,L6o,uO,y6o,x6o,$6o,Xp,lue,k6o,S6o,pO,R6o,P6o,B6o,zp,iue,I6o,N6o,_O,q6o,j6o,D6o,Qp,G6o,Wp,O6o,Up,tx,V6o,due,X6o,EKe,pd,Hp,cue,ax,z6o,mue,Q6o,CKe,Po,nx,W6o,_d,U6o,bO,H6o,J6o,vO,Y6o,K6o,Z6o,sx,e7o,fue,o7o,r7o,t7o,_t,lx,a7o,gue,n7o,s7o,bd,l7o,hue,i7o,d7o,FO,c7o,m7o,f7o,Jp,g7o,Ze,ix,h7o,uue,u7o,p7o,Ja,_7o,pue,b7o,v7o,_ue,F7o,T7o,bue,M7o,E7o,C7o,y,Yp,vue,w7o,A7o,TO,L7o,y7o,x7o,Kp,Fue,$7o,k7o,MO,S7o,R7o,P7o,Zp,Tue,B7o,I7o,EO,N7o,q7o,j7o,e_,Mue,D7o,G7o,CO,O7o,V7o,X7o,o_,Eue,z7o,Q7o,wO,W7o,U7o,H7o,r_,Cue,J7o,Y7o,AO,K7o,Z7o,eLo,t_,wue,oLo,rLo,LO,tLo,aLo,nLo,a_,Aue,sLo,lLo,yO,iLo,dLo,cLo,n_,Lue,mLo,fLo,xO,gLo,hLo,uLo,s_,yue,pLo,_Lo,$O,bLo,vLo,FLo,l_,xue,TLo,MLo,kO,ELo,CLo,wLo,i_,$ue,ALo,LLo,SO,yLo,xLo,$Lo,d_,kue,kLo,SLo,RO,RLo,PLo,BLo,c_,Sue,ILo,NLo,PO,qLo,jLo,DLo,m_,Rue,GLo,OLo,BO,VLo,XLo,zLo,f_,Pue,QLo,WLo,IO,ULo,HLo,JLo,g_,Bue,YLo,KLo,NO,ZLo,eyo,oyo,h_,Iue,ryo,tyo,qO,ayo,nyo,syo,u_,Nue,lyo,iyo,jO,dyo,cyo,myo,p_,que,fyo,gyo,DO,hyo,uyo,pyo,__,jue,_yo,byo,GO,vyo,Fyo,Tyo,b_,Due,Myo,Eyo,OO,Cyo,wyo,Ayo,v_,Gue,Lyo,yyo,VO,xyo,$yo,kyo,F_,Oue,Syo,Ryo,XO,Pyo,Byo,Iyo,T_,Vue,Nyo,qyo,zO,jyo,Dyo,Gyo,M_,Xue,Oyo,Vyo,QO,Xyo,zyo,Qyo,E_,zue,Wyo,Uyo,WO,Hyo,Jyo,Yyo,C_,Que,Kyo,Zyo,UO,e8o,o8o,r8o,w_,Wue,t8o,a8o,HO,n8o,s8o,l8o,A_,Uue,i8o,d8o,JO,c8o,m8o,f8o,L_,Hue,g8o,h8o,YO,u8o,p8o,_8o,y_,Jue,b8o,v8o,KO,F8o,T8o,M8o,x_,Yue,E8o,C8o,ZO,w8o,A8o,L8o,$_,Kue,y8o,x8o,eV,$8o,k8o,S8o,k_,Zue,R8o,P8o,oV,B8o,I8o,N8o,S_,epe,q8o,j8o,rV,D8o,G8o,O8o,R_,ope,V8o,X8o,tV,z8o,Q8o,W8o,pl,rpe,U8o,H8o,aV,J8o,Y8o,nV,K8o,Z8o,e9o,P_,tpe,o9o,r9o,sV,t9o,a9o,n9o,B_,ape,s9o,l9o,lV,i9o,d9o,c9o,I_,npe,m9o,f9o,iV,g9o,h9o,u9o,N_,spe,p9o,_9o,dV,b9o,v9o,F9o,q_,lpe,T9o,M9o,cV,E9o,C9o,w9o,j_,ipe,A9o,L9o,mV,y9o,x9o,$9o,D_,dpe,k9o,S9o,fV,R9o,P9o,B9o,G_,cpe,I9o,N9o,gV,q9o,j9o,D9o,O_,mpe,G9o,O9o,hV,V9o,X9o,z9o,V_,fpe,Q9o,W9o,uV,U9o,H9o,J9o,X_,gpe,Y9o,K9o,pV,Z9o,exo,oxo,z_,hpe,rxo,txo,_V,axo,nxo,sxo,Q_,upe,lxo,ixo,bV,dxo,cxo,mxo,W_,ppe,fxo,gxo,vV,hxo,uxo,pxo,U_,_pe,_xo,bxo,FV,vxo,Fxo,Txo,H_,bpe,Mxo,Exo,TV,Cxo,wxo,Axo,J_,vpe,Lxo,yxo,MV,xxo,$xo,kxo,Y_,Fpe,Sxo,Rxo,EV,Pxo,Bxo,Ixo,K_,Tpe,Nxo,qxo,CV,jxo,Dxo,Gxo,Z_,Mpe,Oxo,Vxo,wV,Xxo,zxo,Qxo,eb,Epe,Wxo,Uxo,AV,Hxo,Jxo,Yxo,ob,Cpe,Kxo,Zxo,LV,e$o,o$o,r$o,rb,wpe,t$o,a$o,yV,n$o,s$o,l$o,tb,Ape,i$o,d$o,xV,c$o,m$o,f$o,ab,Lpe,g$o,h$o,$V,u$o,p$o,_$o,nb,ype,b$o,v$o,kV,F$o,T$o,M$o,sb,xpe,E$o,C$o,SV,w$o,A$o,L$o,lb,$pe,y$o,x$o,RV,$$o,k$o,S$o,ib,kpe,R$o,P$o,PV,B$o,I$o,N$o,db,Spe,q$o,j$o,BV,D$o,G$o,O$o,cb,Rpe,V$o,X$o,IV,z$o,Q$o,W$o,mb,Ppe,U$o,H$o,NV,J$o,Y$o,K$o,fb,Bpe,Z$o,eko,qV,oko,rko,tko,gb,Ipe,ako,nko,jV,sko,lko,iko,hb,Npe,dko,cko,DV,mko,fko,gko,ub,qpe,hko,uko,GV,pko,_ko,bko,pb,jpe,vko,Fko,OV,Tko,Mko,Eko,_b,Dpe,Cko,wko,VV,Ako,Lko,yko,bb,Gpe,xko,$ko,XV,kko,Sko,Rko,vb,Ope,Pko,Bko,zV,Iko,Nko,qko,Fb,Vpe,jko,Dko,QV,Gko,Oko,Vko,Tb,Xpe,Xko,zko,WV,Qko,Wko,Uko,Mb,zpe,Hko,Jko,UV,Yko,Kko,Zko,Eb,Qpe,eSo,oSo,HV,rSo,tSo,aSo,Cb,Wpe,nSo,sSo,JV,lSo,iSo,dSo,wb,Upe,cSo,mSo,YV,fSo,gSo,hSo,Ab,Hpe,uSo,pSo,KV,_So,bSo,vSo,Lb,Jpe,FSo,TSo,ZV,MSo,ESo,CSo,yb,Ype,wSo,ASo,eX,LSo,ySo,xSo,xb,Kpe,$So,kSo,oX,SSo,RSo,PSo,$b,Zpe,BSo,ISo,rX,NSo,qSo,jSo,kb,e_e,DSo,GSo,tX,OSo,VSo,XSo,Sb,o_e,zSo,QSo,aX,WSo,USo,HSo,Rb,r_e,JSo,YSo,nX,KSo,ZSo,eRo,Pb,t_e,oRo,rRo,sX,tRo,aRo,nRo,Bb,a_e,sRo,lRo,lX,iRo,dRo,cRo,Ib,n_e,mRo,fRo,iX,gRo,hRo,uRo,Nb,s_e,pRo,_Ro,dX,bRo,vRo,FRo,qb,l_e,TRo,MRo,cX,ERo,CRo,wRo,jb,i_e,ARo,LRo,mX,yRo,xRo,$Ro,Db,d_e,kRo,SRo,fX,RRo,PRo,BRo,Gb,c_e,IRo,NRo,gX,qRo,jRo,DRo,Ob,m_e,GRo,ORo,hX,VRo,XRo,zRo,Vb,f_e,QRo,WRo,uX,URo,HRo,JRo,Xb,g_e,YRo,KRo,pX,ZRo,ePo,oPo,zb,h_e,rPo,tPo,_X,aPo,nPo,sPo,Qb,u_e,lPo,iPo,bX,dPo,cPo,mPo,Wb,p_e,fPo,gPo,vX,hPo,uPo,pPo,Ub,__e,_Po,bPo,FX,vPo,FPo,TPo,Hb,b_e,MPo,EPo,TX,CPo,wPo,APo,Jb,v_e,LPo,yPo,MX,xPo,$Po,kPo,Yb,F_e,SPo,RPo,EX,PPo,BPo,IPo,Kb,T_e,NPo,qPo,CX,jPo,DPo,GPo,Zb,M_e,OPo,VPo,wX,XPo,zPo,QPo,e2,E_e,WPo,UPo,AX,HPo,JPo,YPo,o2,C_e,KPo,ZPo,LX,eBo,oBo,rBo,r2,w_e,tBo,aBo,yX,nBo,sBo,lBo,t2,A_e,iBo,dBo,xX,cBo,mBo,fBo,a2,L_e,gBo,hBo,$X,uBo,pBo,_Bo,n2,y_e,bBo,vBo,kX,FBo,TBo,MBo,s2,x_e,EBo,CBo,SX,wBo,ABo,LBo,l2,$_e,yBo,xBo,RX,$Bo,kBo,SBo,i2,k_e,RBo,PBo,PX,BBo,IBo,NBo,d2,qBo,S_e,jBo,DBo,R_e,GBo,OBo,c2,wKe,vd,m2,P_e,dx,VBo,B_e,XBo,AKe,Bo,cx,zBo,Fd,QBo,BX,WBo,UBo,IX,HBo,JBo,YBo,mx,KBo,I_e,ZBo,eIo,oIo,bt,fx,rIo,N_e,tIo,aIo,Td,nIo,q_e,sIo,lIo,NX,iIo,dIo,cIo,f2,mIo,eo,gx,fIo,j_e,gIo,hIo,Ya,uIo,D_e,pIo,_Io,G_e,bIo,vIo,O_e,FIo,TIo,MIo,G,g2,V_e,EIo,CIo,qX,wIo,AIo,LIo,h2,X_e,yIo,xIo,jX,$Io,kIo,SIo,u2,z_e,RIo,PIo,DX,BIo,IIo,NIo,p2,Q_e,qIo,jIo,GX,DIo,GIo,OIo,_2,W_e,VIo,XIo,OX,zIo,QIo,WIo,b2,U_e,UIo,HIo,VX,JIo,YIo,KIo,v2,H_e,ZIo,eNo,XX,oNo,rNo,tNo,F2,J_e,aNo,nNo,zX,sNo,lNo,iNo,T2,Y_e,dNo,cNo,QX,mNo,fNo,gNo,M2,K_e,hNo,uNo,WX,pNo,_No,bNo,E2,Z_e,vNo,FNo,UX,TNo,MNo,ENo,C2,ebe,CNo,wNo,HX,ANo,LNo,yNo,w2,obe,xNo,$No,JX,kNo,SNo,RNo,A2,rbe,PNo,BNo,YX,INo,NNo,qNo,L2,tbe,jNo,DNo,KX,GNo,ONo,VNo,y2,abe,XNo,zNo,ZX,QNo,WNo,UNo,x2,nbe,HNo,JNo,ez,YNo,KNo,ZNo,$2,sbe,eqo,oqo,oz,rqo,tqo,aqo,k2,lbe,nqo,sqo,rz,lqo,iqo,dqo,S2,ibe,cqo,mqo,tz,fqo,gqo,hqo,R2,dbe,uqo,pqo,az,_qo,bqo,vqo,P2,cbe,Fqo,Tqo,nz,Mqo,Eqo,Cqo,B2,mbe,wqo,Aqo,sz,Lqo,yqo,xqo,I2,fbe,$qo,kqo,lz,Sqo,Rqo,Pqo,N2,gbe,Bqo,Iqo,iz,Nqo,qqo,jqo,q2,hbe,Dqo,Gqo,dz,Oqo,Vqo,Xqo,j2,ube,zqo,Qqo,cz,Wqo,Uqo,Hqo,D2,pbe,Jqo,Yqo,mz,Kqo,Zqo,ejo,G2,_be,ojo,rjo,fz,tjo,ajo,njo,O2,bbe,sjo,ljo,gz,ijo,djo,cjo,V2,vbe,mjo,fjo,hz,gjo,hjo,ujo,X2,Fbe,pjo,_jo,uz,bjo,vjo,Fjo,z2,Tbe,Tjo,Mjo,pz,Ejo,Cjo,wjo,Q2,Mbe,Ajo,Ljo,_z,yjo,xjo,$jo,W2,Ebe,kjo,Sjo,bz,Rjo,Pjo,Bjo,U2,Cbe,Ijo,Njo,vz,qjo,jjo,Djo,H2,wbe,Gjo,Ojo,Fz,Vjo,Xjo,zjo,J2,Abe,Qjo,Wjo,Tz,Ujo,Hjo,Jjo,Y2,Lbe,Yjo,Kjo,Mz,Zjo,eDo,oDo,K2,ybe,rDo,tDo,Ez,aDo,nDo,sDo,Z2,xbe,lDo,iDo,Cz,dDo,cDo,mDo,e1,$be,fDo,gDo,wz,hDo,uDo,pDo,o1,kbe,_Do,bDo,Az,vDo,FDo,TDo,r1,Sbe,MDo,EDo,Lz,CDo,wDo,ADo,t1,Rbe,LDo,yDo,yz,xDo,$Do,kDo,a1,Pbe,SDo,RDo,xz,PDo,BDo,IDo,n1,Bbe,NDo,qDo,$z,jDo,DDo,GDo,s1,Ibe,ODo,VDo,kz,XDo,zDo,QDo,l1,WDo,Nbe,UDo,HDo,qbe,JDo,YDo,i1,LKe,Md,d1,jbe,hx,KDo,Dbe,ZDo,yKe,Io,ux,eGo,Ed,oGo,Sz,rGo,tGo,Rz,aGo,nGo,sGo,px,lGo,Gbe,iGo,dGo,cGo,vt,_x,mGo,Obe,fGo,gGo,Cd,hGo,Vbe,uGo,pGo,Pz,_Go,bGo,vGo,c1,FGo,oo,bx,TGo,Xbe,MGo,EGo,Ka,CGo,zbe,wGo,AGo,Qbe,LGo,yGo,Wbe,xGo,$Go,kGo,z,m1,Ube,SGo,RGo,Bz,PGo,BGo,IGo,f1,Hbe,NGo,qGo,Iz,jGo,DGo,GGo,g1,Jbe,OGo,VGo,Nz,XGo,zGo,QGo,h1,Ybe,WGo,UGo,qz,HGo,JGo,YGo,u1,Kbe,KGo,ZGo,jz,eOo,oOo,rOo,p1,Zbe,tOo,aOo,Dz,nOo,sOo,lOo,_1,e2e,iOo,dOo,Gz,cOo,mOo,fOo,b1,o2e,gOo,hOo,Oz,uOo,pOo,_Oo,v1,r2e,bOo,vOo,Vz,FOo,TOo,MOo,F1,t2e,EOo,COo,Xz,wOo,AOo,LOo,T1,a2e,yOo,xOo,zz,$Oo,kOo,SOo,M1,n2e,ROo,POo,Qz,BOo,IOo,NOo,E1,s2e,qOo,jOo,Wz,DOo,GOo,OOo,C1,l2e,VOo,XOo,Uz,zOo,QOo,WOo,w1,i2e,UOo,HOo,Hz,JOo,YOo,KOo,A1,d2e,ZOo,eVo,Jz,oVo,rVo,tVo,L1,c2e,aVo,nVo,Yz,sVo,lVo,iVo,y1,m2e,dVo,cVo,Kz,mVo,fVo,gVo,x1,f2e,hVo,uVo,Zz,pVo,_Vo,bVo,$1,g2e,vVo,FVo,eQ,TVo,MVo,EVo,k1,h2e,CVo,wVo,oQ,AVo,LVo,yVo,S1,u2e,xVo,$Vo,rQ,kVo,SVo,RVo,R1,p2e,PVo,BVo,tQ,IVo,NVo,qVo,P1,_2e,jVo,DVo,aQ,GVo,OVo,VVo,B1,b2e,XVo,zVo,nQ,QVo,WVo,UVo,I1,v2e,HVo,JVo,sQ,YVo,KVo,ZVo,N1,F2e,eXo,oXo,lQ,rXo,tXo,aXo,q1,T2e,nXo,sXo,iQ,lXo,iXo,dXo,j1,M2e,cXo,mXo,dQ,fXo,gXo,hXo,D1,E2e,uXo,pXo,cQ,_Xo,bXo,vXo,G1,C2e,FXo,TXo,mQ,MXo,EXo,CXo,O1,w2e,wXo,AXo,fQ,LXo,yXo,xXo,V1,A2e,$Xo,kXo,gQ,SXo,RXo,PXo,X1,L2e,BXo,IXo,hQ,NXo,qXo,jXo,z1,y2e,DXo,GXo,uQ,OXo,VXo,XXo,Q1,x2e,zXo,QXo,pQ,WXo,UXo,HXo,W1,$2e,JXo,YXo,_Q,KXo,ZXo,ezo,U1,k2e,ozo,rzo,bQ,tzo,azo,nzo,H1,S2e,szo,lzo,vQ,izo,dzo,czo,J1,R2e,mzo,fzo,FQ,gzo,hzo,uzo,Y1,P2e,pzo,_zo,TQ,bzo,vzo,Fzo,K1,B2e,Tzo,Mzo,MQ,Ezo,Czo,wzo,Z1,Azo,I2e,Lzo,yzo,N2e,xzo,$zo,ev,xKe,wd,ov,q2e,vx,kzo,j2e,Szo,$Ke,No,Fx,Rzo,Ad,Pzo,EQ,Bzo,Izo,CQ,Nzo,qzo,jzo,Tx,Dzo,D2e,Gzo,Ozo,Vzo,Ft,Mx,Xzo,G2e,zzo,Qzo,Ld,Wzo,O2e,Uzo,Hzo,wQ,Jzo,Yzo,Kzo,rv,Zzo,ro,Ex,eQo,V2e,oQo,rQo,Za,tQo,X2e,aQo,nQo,z2e,sQo,lQo,Q2e,iQo,dQo,cQo,U,tv,W2e,mQo,fQo,AQ,gQo,hQo,uQo,av,U2e,pQo,_Qo,LQ,bQo,vQo,FQo,nv,H2e,TQo,MQo,yQ,EQo,CQo,wQo,sv,J2e,AQo,LQo,xQ,yQo,xQo,$Qo,lv,Y2e,kQo,SQo,$Q,RQo,PQo,BQo,iv,K2e,IQo,NQo,kQ,qQo,jQo,DQo,dv,Z2e,GQo,OQo,SQ,VQo,XQo,zQo,cv,e1e,QQo,WQo,RQ,UQo,HQo,JQo,mv,o1e,YQo,KQo,PQ,ZQo,eWo,oWo,fv,r1e,rWo,tWo,BQ,aWo,nWo,sWo,gv,t1e,lWo,iWo,IQ,dWo,cWo,mWo,hv,a1e,fWo,gWo,NQ,hWo,uWo,pWo,uv,n1e,_Wo,bWo,qQ,vWo,FWo,TWo,pv,s1e,MWo,EWo,jQ,CWo,wWo,AWo,_v,l1e,LWo,yWo,DQ,xWo,$Wo,kWo,bv,i1e,SWo,RWo,GQ,PWo,BWo,IWo,vv,d1e,NWo,qWo,OQ,jWo,DWo,GWo,Fv,c1e,OWo,VWo,VQ,XWo,zWo,QWo,Tv,m1e,WWo,UWo,XQ,HWo,JWo,YWo,Mv,f1e,KWo,ZWo,zQ,eUo,oUo,rUo,Ev,g1e,tUo,aUo,QQ,nUo,sUo,lUo,Cv,h1e,iUo,dUo,WQ,cUo,mUo,fUo,wv,u1e,gUo,hUo,UQ,uUo,pUo,_Uo,Av,p1e,bUo,vUo,HQ,FUo,TUo,MUo,Lv,_1e,EUo,CUo,JQ,wUo,AUo,LUo,yv,b1e,yUo,xUo,YQ,$Uo,kUo,SUo,xv,v1e,RUo,PUo,KQ,BUo,IUo,NUo,$v,F1e,qUo,jUo,ZQ,DUo,GUo,OUo,kv,T1e,VUo,XUo,eW,zUo,QUo,WUo,Sv,M1e,UUo,HUo,oW,JUo,YUo,KUo,Rv,E1e,ZUo,eHo,rW,oHo,rHo,tHo,Pv,C1e,aHo,nHo,tW,sHo,lHo,iHo,Bv,w1e,dHo,cHo,aW,mHo,fHo,gHo,Iv,A1e,hHo,uHo,nW,pHo,_Ho,bHo,Nv,L1e,vHo,FHo,y1e,THo,MHo,EHo,qv,x1e,CHo,wHo,sW,AHo,LHo,yHo,jv,$1e,xHo,$Ho,lW,kHo,SHo,RHo,Dv,k1e,PHo,BHo,iW,IHo,NHo,qHo,Gv,S1e,jHo,DHo,dW,GHo,OHo,VHo,Ov,XHo,R1e,zHo,QHo,P1e,WHo,UHo,Vv,kKe,yd,Xv,B1e,Cx,HHo,I1e,JHo,SKe,qo,wx,YHo,xd,KHo,cW,ZHo,eJo,mW,oJo,rJo,tJo,Ax,aJo,N1e,nJo,sJo,lJo,Tt,Lx,iJo,q1e,dJo,cJo,$d,mJo,j1e,fJo,gJo,fW,hJo,uJo,pJo,zv,_Jo,to,yx,bJo,D1e,vJo,FJo,en,TJo,G1e,MJo,EJo,O1e,CJo,wJo,V1e,AJo,LJo,yJo,me,Qv,X1e,xJo,$Jo,gW,kJo,SJo,RJo,Wv,z1e,PJo,BJo,hW,IJo,NJo,qJo,Uv,Q1e,jJo,DJo,uW,GJo,OJo,VJo,Hv,W1e,XJo,zJo,pW,QJo,WJo,UJo,Jv,U1e,HJo,JJo,_W,YJo,KJo,ZJo,Yv,H1e,eYo,oYo,bW,rYo,tYo,aYo,Kv,J1e,nYo,sYo,vW,lYo,iYo,dYo,Zv,Y1e,cYo,mYo,FW,fYo,gYo,hYo,eF,K1e,uYo,pYo,TW,_Yo,bYo,vYo,oF,Z1e,FYo,TYo,MW,MYo,EYo,CYo,rF,eve,wYo,AYo,EW,LYo,yYo,xYo,tF,ove,$Yo,kYo,CW,SYo,RYo,PYo,aF,rve,BYo,IYo,wW,NYo,qYo,jYo,nF,tve,DYo,GYo,AW,OYo,VYo,XYo,sF,ave,zYo,QYo,LW,WYo,UYo,HYo,lF,nve,JYo,YYo,yW,KYo,ZYo,eKo,iF,sve,oKo,rKo,xW,tKo,aKo,nKo,dF,lve,sKo,lKo,$W,iKo,dKo,cKo,cF,ive,mKo,fKo,kW,gKo,hKo,uKo,mF,dve,pKo,_Ko,SW,bKo,vKo,FKo,fF,TKo,cve,MKo,EKo,mve,CKo,wKo,gF,RKe,kd,hF,fve,xx,AKo,gve,LKo,PKe,jo,$x,yKo,Sd,xKo,RW,$Ko,kKo,PW,SKo,RKo,PKo,kx,BKo,hve,IKo,NKo,qKo,Mt,Sx,jKo,uve,DKo,GKo,Rd,OKo,pve,VKo,XKo,BW,zKo,QKo,WKo,uF,UKo,ao,Rx,HKo,_ve,JKo,YKo,on,KKo,bve,ZKo,eZo,vve,oZo,rZo,Fve,tZo,aZo,nZo,q,pF,Tve,sZo,lZo,IW,iZo,dZo,cZo,_F,Mve,mZo,fZo,NW,gZo,hZo,uZo,bF,Eve,pZo,_Zo,qW,bZo,vZo,FZo,vF,Cve,TZo,MZo,jW,EZo,CZo,wZo,FF,wve,AZo,LZo,DW,yZo,xZo,$Zo,TF,Ave,kZo,SZo,GW,RZo,PZo,BZo,MF,Lve,IZo,NZo,OW,qZo,jZo,DZo,EF,yve,GZo,OZo,VW,VZo,XZo,zZo,CF,xve,QZo,WZo,XW,UZo,HZo,JZo,wF,$ve,YZo,KZo,zW,ZZo,eer,oer,AF,kve,rer,ter,QW,aer,ner,ser,LF,Sve,ler,ier,WW,der,cer,mer,yF,Rve,fer,ger,UW,her,uer,per,xF,Pve,_er,ber,HW,ver,Fer,Ter,$F,Bve,Mer,Eer,JW,Cer,wer,Aer,kF,Ive,Ler,yer,YW,xer,$er,ker,SF,Nve,Ser,Rer,KW,Per,Ber,Ier,RF,qve,Ner,qer,ZW,jer,Der,Ger,PF,jve,Oer,Ver,eU,Xer,zer,Qer,BF,Dve,Wer,Uer,oU,Her,Jer,Yer,IF,Gve,Ker,Zer,rU,eor,oor,ror,NF,Ove,tor,aor,tU,nor,sor,lor,qF,Vve,ior,dor,aU,cor,mor,gor,jF,Xve,hor,uor,nU,por,_or,bor,DF,zve,vor,For,sU,Tor,Mor,Eor,GF,Qve,Cor,wor,lU,Aor,Lor,yor,OF,Wve,xor,$or,iU,kor,Sor,Ror,VF,Uve,Por,Bor,dU,Ior,Nor,qor,XF,Hve,jor,Dor,cU,Gor,Oor,Vor,zF,Jve,Xor,zor,mU,Qor,Wor,Uor,QF,Yve,Hor,Jor,fU,Yor,Kor,Zor,WF,Kve,err,orr,gU,rrr,trr,arr,UF,Zve,nrr,srr,hU,lrr,irr,drr,HF,eFe,crr,mrr,uU,frr,grr,hrr,JF,oFe,urr,prr,pU,_rr,brr,vrr,YF,rFe,Frr,Trr,_U,Mrr,Err,Crr,KF,tFe,wrr,Arr,bU,Lrr,yrr,xrr,ZF,aFe,$rr,krr,vU,Srr,Rrr,Prr,eT,nFe,Brr,Irr,FU,Nrr,qrr,jrr,oT,sFe,Drr,Grr,TU,Orr,Vrr,Xrr,rT,lFe,zrr,Qrr,MU,Wrr,Urr,Hrr,tT,iFe,Jrr,Yrr,EU,Krr,Zrr,etr,aT,dFe,otr,rtr,CU,ttr,atr,ntr,nT,cFe,str,ltr,wU,itr,dtr,ctr,sT,mFe,mtr,ftr,AU,gtr,htr,utr,lT,fFe,ptr,_tr,LU,btr,vtr,Ftr,iT,gFe,Ttr,Mtr,yU,Etr,Ctr,wtr,dT,hFe,Atr,Ltr,xU,ytr,xtr,$tr,cT,uFe,ktr,Str,$U,Rtr,Ptr,Btr,mT,pFe,Itr,Ntr,kU,qtr,jtr,Dtr,fT,_Fe,Gtr,Otr,SU,Vtr,Xtr,ztr,gT,bFe,Qtr,Wtr,RU,Utr,Htr,Jtr,hT,vFe,Ytr,Ktr,PU,Ztr,ear,oar,uT,rar,FFe,tar,aar,TFe,nar,sar,pT,BKe,Pd,_T,MFe,Px,lar,EFe,iar,IKe,Do,Bx,dar,Bd,car,BU,mar,far,IU,gar,har,uar,Ix,par,CFe,_ar,bar,Far,Et,Nx,Tar,wFe,Mar,Ear,Id,Car,AFe,war,Aar,NU,Lar,yar,xar,bT,$ar,no,qx,kar,LFe,Sar,Rar,rn,Par,yFe,Bar,Iar,xFe,Nar,qar,$Fe,jar,Dar,Gar,Z,vT,kFe,Oar,Var,qU,Xar,zar,Qar,FT,SFe,War,Uar,jU,Har,Jar,Yar,TT,RFe,Kar,Zar,DU,enr,onr,rnr,MT,PFe,tnr,anr,GU,nnr,snr,lnr,ET,BFe,inr,dnr,OU,cnr,mnr,fnr,CT,IFe,gnr,hnr,VU,unr,pnr,_nr,wT,NFe,bnr,vnr,XU,Fnr,Tnr,Mnr,AT,qFe,Enr,Cnr,zU,wnr,Anr,Lnr,LT,jFe,ynr,xnr,QU,$nr,knr,Snr,yT,DFe,Rnr,Pnr,WU,Bnr,Inr,Nnr,xT,GFe,qnr,jnr,UU,Dnr,Gnr,Onr,$T,OFe,Vnr,Xnr,HU,znr,Qnr,Wnr,kT,VFe,Unr,Hnr,JU,Jnr,Ynr,Knr,ST,XFe,Znr,esr,YU,osr,rsr,tsr,RT,zFe,asr,nsr,KU,ssr,lsr,isr,PT,QFe,dsr,csr,ZU,msr,fsr,gsr,BT,WFe,hsr,usr,eH,psr,_sr,bsr,IT,UFe,vsr,Fsr,oH,Tsr,Msr,Esr,NT,HFe,Csr,wsr,rH,Asr,Lsr,ysr,qT,JFe,xsr,$sr,tH,ksr,Ssr,Rsr,jT,YFe,Psr,Bsr,aH,Isr,Nsr,qsr,DT,KFe,jsr,Dsr,nH,Gsr,Osr,Vsr,GT,ZFe,Xsr,zsr,sH,Qsr,Wsr,Usr,OT,eTe,Hsr,Jsr,lH,Ysr,Ksr,Zsr,VT,oTe,elr,olr,iH,rlr,tlr,alr,XT,rTe,nlr,slr,dH,llr,ilr,dlr,zT,tTe,clr,mlr,cH,flr,glr,hlr,QT,aTe,ulr,plr,mH,_lr,blr,vlr,WT,nTe,Flr,Tlr,fH,Mlr,Elr,Clr,UT,sTe,wlr,Alr,gH,Llr,ylr,xlr,HT,lTe,$lr,klr,hH,Slr,Rlr,Plr,JT,iTe,Blr,Ilr,uH,Nlr,qlr,jlr,YT,Dlr,dTe,Glr,Olr,cTe,Vlr,Xlr,KT,NKe,Nd,ZT,mTe,jx,zlr,fTe,Qlr,qKe,Go,Dx,Wlr,qd,Ulr,pH,Hlr,Jlr,_H,Ylr,Klr,Zlr,Gx,eir,gTe,oir,rir,tir,Ct,Ox,air,hTe,nir,sir,jd,lir,uTe,iir,dir,bH,cir,mir,fir,eM,gir,so,Vx,hir,pTe,uir,pir,tn,_ir,_Te,bir,vir,bTe,Fir,Tir,vTe,Mir,Eir,Cir,Ue,oM,FTe,wir,Air,vH,Lir,yir,xir,rM,TTe,$ir,kir,FH,Sir,Rir,Pir,tM,MTe,Bir,Iir,TH,Nir,qir,jir,aM,ETe,Dir,Gir,MH,Oir,Vir,Xir,nM,CTe,zir,Qir,EH,Wir,Uir,Hir,sM,wTe,Jir,Yir,CH,Kir,Zir,edr,lM,ATe,odr,rdr,wH,tdr,adr,ndr,iM,sdr,LTe,ldr,idr,yTe,ddr,cdr,dM,jKe,Dd,cM,xTe,Xx,mdr,$Te,fdr,DKe,Oo,zx,gdr,Gd,hdr,AH,udr,pdr,LH,_dr,bdr,vdr,Qx,Fdr,kTe,Tdr,Mdr,Edr,wt,Wx,Cdr,STe,wdr,Adr,Od,Ldr,RTe,ydr,xdr,yH,$dr,kdr,Sdr,mM,Rdr,lo,Ux,Pdr,PTe,Bdr,Idr,an,Ndr,BTe,qdr,jdr,ITe,Ddr,Gdr,NTe,Odr,Vdr,Xdr,J,fM,qTe,zdr,Qdr,xH,Wdr,Udr,Hdr,gM,jTe,Jdr,Ydr,$H,Kdr,Zdr,ecr,hM,DTe,ocr,rcr,kH,tcr,acr,ncr,uM,GTe,scr,lcr,SH,icr,dcr,ccr,pM,OTe,mcr,fcr,RH,gcr,hcr,ucr,_M,VTe,pcr,_cr,PH,bcr,vcr,Fcr,bM,XTe,Tcr,Mcr,BH,Ecr,Ccr,wcr,vM,zTe,Acr,Lcr,IH,ycr,xcr,$cr,FM,QTe,kcr,Scr,NH,Rcr,Pcr,Bcr,TM,WTe,Icr,Ncr,qH,qcr,jcr,Dcr,MM,UTe,Gcr,Ocr,jH,Vcr,Xcr,zcr,EM,HTe,Qcr,Wcr,DH,Ucr,Hcr,Jcr,CM,JTe,Ycr,Kcr,GH,Zcr,emr,omr,wM,YTe,rmr,tmr,OH,amr,nmr,smr,AM,KTe,lmr,imr,VH,dmr,cmr,mmr,LM,ZTe,fmr,gmr,XH,hmr,umr,pmr,yM,eMe,_mr,bmr,zH,vmr,Fmr,Tmr,xM,oMe,Mmr,Emr,QH,Cmr,wmr,Amr,$M,rMe,Lmr,ymr,WH,xmr,$mr,kmr,kM,tMe,Smr,Rmr,UH,Pmr,Bmr,Imr,SM,aMe,Nmr,qmr,HH,jmr,Dmr,Gmr,RM,nMe,Omr,Vmr,JH,Xmr,zmr,Qmr,PM,sMe,Wmr,Umr,YH,Hmr,Jmr,Ymr,BM,lMe,Kmr,Zmr,KH,efr,ofr,rfr,IM,iMe,tfr,afr,ZH,nfr,sfr,lfr,NM,dMe,ifr,dfr,eJ,cfr,mfr,ffr,qM,cMe,gfr,hfr,oJ,ufr,pfr,_fr,jM,mMe,bfr,vfr,rJ,Ffr,Tfr,Mfr,DM,fMe,Efr,Cfr,tJ,wfr,Afr,Lfr,GM,gMe,yfr,xfr,aJ,$fr,kfr,Sfr,OM,hMe,Rfr,Pfr,nJ,Bfr,Ifr,Nfr,VM,uMe,qfr,jfr,sJ,Dfr,Gfr,Ofr,XM,pMe,Vfr,Xfr,lJ,zfr,Qfr,Wfr,zM,_Me,Ufr,Hfr,iJ,Jfr,Yfr,Kfr,QM,bMe,Zfr,egr,dJ,ogr,rgr,tgr,WM,vMe,agr,ngr,cJ,sgr,lgr,igr,UM,FMe,dgr,cgr,mJ,mgr,fgr,ggr,HM,TMe,hgr,ugr,fJ,pgr,_gr,bgr,JM,vgr,MMe,Fgr,Tgr,EMe,Mgr,Egr,YM,GKe,Vd,KM,CMe,Hx,Cgr,wMe,wgr,OKe,Vo,Jx,Agr,Xd,Lgr,gJ,ygr,xgr,hJ,$gr,kgr,Sgr,Yx,Rgr,AMe,Pgr,Bgr,Igr,At,Kx,Ngr,LMe,qgr,jgr,zd,Dgr,yMe,Ggr,Ogr,uJ,Vgr,Xgr,zgr,ZM,Qgr,io,Zx,Wgr,xMe,Ugr,Hgr,nn,Jgr,$Me,Ygr,Kgr,kMe,Zgr,ehr,SMe,ohr,rhr,thr,V,eE,RMe,ahr,nhr,pJ,shr,lhr,ihr,oE,PMe,dhr,chr,_J,mhr,fhr,ghr,rE,BMe,hhr,uhr,bJ,phr,_hr,bhr,tE,IMe,vhr,Fhr,vJ,Thr,Mhr,Ehr,aE,NMe,Chr,whr,FJ,Ahr,Lhr,yhr,nE,qMe,xhr,$hr,TJ,khr,Shr,Rhr,sE,jMe,Phr,Bhr,MJ,Ihr,Nhr,qhr,lE,DMe,jhr,Dhr,EJ,Ghr,Ohr,Vhr,iE,GMe,Xhr,zhr,CJ,Qhr,Whr,Uhr,dE,OMe,Hhr,Jhr,wJ,Yhr,Khr,Zhr,cE,VMe,eur,our,AJ,rur,tur,aur,mE,XMe,nur,sur,LJ,lur,iur,dur,fE,zMe,cur,mur,yJ,fur,gur,hur,gE,QMe,uur,pur,xJ,_ur,bur,vur,hE,WMe,Fur,Tur,$J,Mur,Eur,Cur,uE,UMe,wur,Aur,kJ,Lur,yur,xur,pE,HMe,$ur,kur,SJ,Sur,Rur,Pur,_E,JMe,Bur,Iur,RJ,Nur,qur,jur,bE,YMe,Dur,Gur,PJ,Our,Vur,Xur,vE,KMe,zur,Qur,BJ,Wur,Uur,Hur,FE,ZMe,Jur,Yur,IJ,Kur,Zur,epr,TE,eEe,opr,rpr,NJ,tpr,apr,npr,ME,oEe,spr,lpr,qJ,ipr,dpr,cpr,EE,rEe,mpr,fpr,jJ,gpr,hpr,upr,CE,tEe,ppr,_pr,DJ,bpr,vpr,Fpr,wE,aEe,Tpr,Mpr,GJ,Epr,Cpr,wpr,AE,nEe,Apr,Lpr,OJ,ypr,xpr,$pr,LE,sEe,kpr,Spr,VJ,Rpr,Ppr,Bpr,yE,lEe,Ipr,Npr,XJ,qpr,jpr,Dpr,xE,iEe,Gpr,Opr,zJ,Vpr,Xpr,zpr,$E,dEe,Qpr,Wpr,QJ,Upr,Hpr,Jpr,kE,cEe,Ypr,Kpr,WJ,Zpr,e_r,o_r,SE,mEe,r_r,t_r,UJ,a_r,n_r,s_r,RE,fEe,l_r,i_r,HJ,d_r,c_r,m_r,PE,gEe,f_r,g_r,JJ,h_r,u_r,p_r,BE,hEe,__r,b_r,YJ,v_r,F_r,T_r,IE,uEe,M_r,E_r,KJ,C_r,w_r,A_r,NE,pEe,L_r,y_r,ZJ,x_r,$_r,k_r,qE,_Ee,S_r,R_r,eY,P_r,B_r,I_r,jE,bEe,N_r,q_r,oY,j_r,D_r,G_r,DE,vEe,O_r,V_r,rY,X_r,z_r,Q_r,GE,FEe,W_r,U_r,tY,H_r,J_r,Y_r,OE,TEe,K_r,Z_r,aY,ebr,obr,rbr,VE,MEe,tbr,abr,nY,nbr,sbr,lbr,XE,ibr,EEe,dbr,cbr,CEe,mbr,fbr,zE,VKe,Qd,QE,wEe,e$,gbr,AEe,hbr,XKe,Xo,o$,ubr,Wd,pbr,sY,_br,bbr,lY,vbr,Fbr,Tbr,r$,Mbr,LEe,Ebr,Cbr,wbr,Lt,t$,Abr,yEe,Lbr,ybr,Ud,xbr,xEe,$br,kbr,iY,Sbr,Rbr,Pbr,WE,Bbr,co,a$,Ibr,$Ee,Nbr,qbr,sn,jbr,kEe,Dbr,Gbr,SEe,Obr,Vbr,REe,Xbr,zbr,Qbr,PEe,UE,BEe,Wbr,Ubr,dY,Hbr,Jbr,Ybr,HE,Kbr,IEe,Zbr,e2r,NEe,o2r,r2r,JE,zKe,Hd,YE,qEe,n$,t2r,jEe,a2r,QKe,zo,s$,n2r,Jd,s2r,cY,l2r,i2r,mY,d2r,c2r,m2r,l$,f2r,DEe,g2r,h2r,u2r,yt,i$,p2r,GEe,_2r,b2r,Yd,v2r,OEe,F2r,T2r,fY,M2r,E2r,C2r,KE,w2r,mo,d$,A2r,VEe,L2r,y2r,ln,x2r,XEe,$2r,k2r,zEe,S2r,R2r,QEe,P2r,B2r,I2r,Kd,ZE,WEe,N2r,q2r,gY,j2r,D2r,G2r,e4,UEe,O2r,V2r,hY,X2r,z2r,Q2r,o4,HEe,W2r,U2r,uY,H2r,J2r,Y2r,r4,K2r,JEe,Z2r,e1r,YEe,o1r,r1r,t4,WKe,Zd,a4,KEe,c$,t1r,ZEe,a1r,UKe,Qo,m$,n1r,ec,s1r,pY,l1r,i1r,_Y,d1r,c1r,m1r,f$,f1r,e4e,g1r,h1r,u1r,xt,g$,p1r,o4e,_1r,b1r,oc,v1r,r4e,F1r,T1r,bY,M1r,E1r,C1r,n4,w1r,fo,h$,A1r,t4e,L1r,y1r,dn,x1r,a4e,$1r,k1r,n4e,S1r,R1r,s4e,P1r,B1r,I1r,be,s4,l4e,N1r,q1r,vY,j1r,D1r,G1r,l4,i4e,O1r,V1r,FY,X1r,z1r,Q1r,i4,d4e,W1r,U1r,TY,H1r,J1r,Y1r,d4,c4e,K1r,Z1r,MY,evr,ovr,rvr,_l,m4e,tvr,avr,EY,nvr,svr,CY,lvr,ivr,dvr,c4,f4e,cvr,mvr,wY,fvr,gvr,hvr,bl,g4e,uvr,pvr,AY,_vr,bvr,LY,vvr,Fvr,Tvr,m4,h4e,Mvr,Evr,yY,Cvr,wvr,Avr,$t,u4e,Lvr,yvr,xY,xvr,$vr,$Y,kvr,Svr,kY,Rvr,Pvr,Bvr,f4,p4e,Ivr,Nvr,SY,qvr,jvr,Dvr,g4,_4e,Gvr,Ovr,RY,Vvr,Xvr,zvr,h4,b4e,Qvr,Wvr,PY,Uvr,Hvr,Jvr,u4,v4e,Yvr,Kvr,BY,Zvr,eFr,oFr,p4,F4e,rFr,tFr,IY,aFr,nFr,sFr,_4,T4e,lFr,iFr,NY,dFr,cFr,mFr,b4,M4e,fFr,gFr,qY,hFr,uFr,pFr,v4,E4e,_Fr,bFr,jY,vFr,FFr,TFr,F4,MFr,C4e,EFr,CFr,w4e,wFr,AFr,T4,HKe,rc,M4,A4e,u$,LFr,L4e,yFr,JKe,Wo,p$,xFr,tc,$Fr,DY,kFr,SFr,GY,RFr,PFr,BFr,_$,IFr,y4e,NFr,qFr,jFr,kt,b$,DFr,x4e,GFr,OFr,ac,VFr,$4e,XFr,zFr,OY,QFr,WFr,UFr,E4,HFr,go,v$,JFr,k4e,YFr,KFr,cn,ZFr,S4e,eTr,oTr,R4e,rTr,tTr,P4e,aTr,nTr,sTr,B4e,C4,I4e,lTr,iTr,VY,dTr,cTr,mTr,w4,fTr,N4e,gTr,hTr,q4e,uTr,pTr,A4,YKe,nc,L4,j4e,F$,_Tr,D4e,bTr,KKe,Uo,T$,vTr,sc,FTr,XY,TTr,MTr,zY,ETr,CTr,wTr,M$,ATr,G4e,LTr,yTr,xTr,St,E$,$Tr,O4e,kTr,STr,lc,RTr,V4e,PTr,BTr,QY,ITr,NTr,qTr,y4,jTr,ho,C$,DTr,X4e,GTr,OTr,mn,VTr,z4e,XTr,zTr,Q4e,QTr,WTr,W4e,UTr,HTr,JTr,U4e,x4,H4e,YTr,KTr,WY,ZTr,eMr,oMr,$4,rMr,J4e,tMr,aMr,Y4e,nMr,sMr,k4,ZKe,ic,S4,K4e,w$,lMr,Z4e,iMr,eZe,Ho,A$,dMr,dc,cMr,UY,mMr,fMr,HY,gMr,hMr,uMr,L$,pMr,eCe,_Mr,bMr,vMr,Rt,y$,FMr,oCe,TMr,MMr,cc,EMr,rCe,CMr,wMr,JY,AMr,LMr,yMr,R4,xMr,uo,x$,$Mr,tCe,kMr,SMr,fn,RMr,aCe,PMr,BMr,nCe,IMr,NMr,sCe,qMr,jMr,DMr,lCe,P4,iCe,GMr,OMr,YY,VMr,XMr,zMr,B4,QMr,dCe,WMr,UMr,cCe,HMr,JMr,I4,oZe,mc,N4,mCe,$$,YMr,fCe,KMr,rZe,Jo,k$,ZMr,fc,eEr,KY,oEr,rEr,ZY,tEr,aEr,nEr,S$,sEr,gCe,lEr,iEr,dEr,Pt,R$,cEr,hCe,mEr,fEr,gc,gEr,uCe,hEr,uEr,eK,pEr,_Er,bEr,q4,vEr,po,P$,FEr,pCe,TEr,MEr,gn,EEr,_Ce,CEr,wEr,bCe,AEr,LEr,vCe,yEr,xEr,$Er,Pe,j4,FCe,kEr,SEr,oK,REr,PEr,BEr,D4,TCe,IEr,NEr,rK,qEr,jEr,DEr,G4,MCe,GEr,OEr,tK,VEr,XEr,zEr,O4,ECe,QEr,WEr,aK,UEr,HEr,JEr,V4,CCe,YEr,KEr,nK,ZEr,e4r,o4r,X4,wCe,r4r,t4r,sK,a4r,n4r,s4r,z4,ACe,l4r,i4r,lK,d4r,c4r,m4r,Q4,LCe,f4r,g4r,iK,h4r,u4r,p4r,W4,yCe,_4r,b4r,dK,v4r,F4r,T4r,U4,M4r,xCe,E4r,C4r,$Ce,w4r,A4r,H4,tZe,hc,J4,kCe,B$,L4r,SCe,y4r,aZe,Yo,I$,x4r,uc,$4r,cK,k4r,S4r,mK,R4r,P4r,B4r,N$,I4r,RCe,N4r,q4r,j4r,Bt,q$,D4r,PCe,G4r,O4r,pc,V4r,BCe,X4r,z4r,fK,Q4r,W4r,U4r,Y4,H4r,_o,j$,J4r,ICe,Y4r,K4r,hn,Z4r,NCe,eCr,oCr,qCe,rCr,tCr,jCe,aCr,nCr,sCr,mt,K4,DCe,lCr,iCr,gK,dCr,cCr,mCr,Z4,GCe,fCr,gCr,hK,hCr,uCr,pCr,eC,OCe,_Cr,bCr,uK,vCr,FCr,TCr,oC,VCe,MCr,ECr,pK,CCr,wCr,ACr,rC,XCe,LCr,yCr,_K,xCr,$Cr,kCr,tC,SCr,zCe,RCr,PCr,QCe,BCr,ICr,aC,nZe,_c,nC,WCe,D$,NCr,UCe,qCr,sZe,Ko,G$,jCr,bc,DCr,bK,GCr,OCr,vK,VCr,XCr,zCr,O$,QCr,HCe,WCr,UCr,HCr,It,V$,JCr,JCe,YCr,KCr,vc,ZCr,YCe,e3r,o3r,FK,r3r,t3r,a3r,sC,n3r,bo,X$,s3r,KCe,l3r,i3r,un,d3r,ZCe,c3r,m3r,e3e,f3r,g3r,o3e,h3r,u3r,p3r,Le,lC,r3e,_3r,b3r,TK,v3r,F3r,T3r,iC,t3e,M3r,E3r,MK,C3r,w3r,A3r,dC,a3e,L3r,y3r,EK,x3r,$3r,k3r,cC,n3e,S3r,R3r,CK,P3r,B3r,I3r,mC,s3e,N3r,q3r,wK,j3r,D3r,G3r,fC,l3e,O3r,V3r,AK,X3r,z3r,Q3r,gC,i3e,W3r,U3r,LK,H3r,J3r,Y3r,hC,d3e,K3r,Z3r,yK,e5r,o5r,r5r,uC,c3e,t5r,a5r,xK,n5r,s5r,l5r,pC,m3e,i5r,d5r,$K,c5r,m5r,f5r,_C,g5r,f3e,h5r,u5r,g3e,p5r,_5r,bC,lZe,Fc,vC,h3e,z$,b5r,u3e,v5r,iZe,Zo,Q$,F5r,Tc,T5r,kK,M5r,E5r,SK,C5r,w5r,A5r,W$,L5r,p3e,y5r,x5r,$5r,Nt,U$,k5r,_3e,S5r,R5r,Mc,P5r,b3e,B5r,I5r,RK,N5r,q5r,j5r,FC,D5r,vo,H$,G5r,v3e,O5r,V5r,pn,X5r,F3e,z5r,Q5r,T3e,W5r,U5r,M3e,H5r,J5r,Y5r,J$,TC,E3e,K5r,Z5r,PK,e0r,o0r,r0r,MC,C3e,t0r,a0r,BK,n0r,s0r,l0r,EC,i0r,w3e,d0r,c0r,A3e,m0r,f0r,CC,dZe,Ec,wC,L3e,Y$,g0r,y3e,h0r,cZe,er,K$,u0r,Cc,p0r,IK,_0r,b0r,NK,v0r,F0r,T0r,Z$,M0r,x3e,E0r,C0r,w0r,qt,ek,A0r,$3e,L0r,y0r,wc,x0r,k3e,$0r,k0r,qK,S0r,R0r,P0r,AC,B0r,Fo,ok,I0r,S3e,N0r,q0r,_n,j0r,R3e,D0r,G0r,P3e,O0r,V0r,B3e,X0r,z0r,Q0r,ft,LC,I3e,W0r,U0r,jK,H0r,J0r,Y0r,yC,N3e,K0r,Z0r,DK,ewr,owr,rwr,xC,q3e,twr,awr,GK,nwr,swr,lwr,$C,j3e,iwr,dwr,OK,cwr,mwr,fwr,kC,D3e,gwr,hwr,VK,uwr,pwr,_wr,SC,bwr,G3e,vwr,Fwr,O3e,Twr,Mwr,RC,mZe,Ac,PC,V3e,rk,Ewr,X3e,Cwr,fZe,or,tk,wwr,Lc,Awr,XK,Lwr,ywr,zK,xwr,$wr,kwr,ak,Swr,z3e,Rwr,Pwr,Bwr,jt,nk,Iwr,Q3e,Nwr,qwr,yc,jwr,W3e,Dwr,Gwr,QK,Owr,Vwr,Xwr,BC,zwr,To,sk,Qwr,U3e,Wwr,Uwr,bn,Hwr,H3e,Jwr,Ywr,J3e,Kwr,Zwr,Y3e,eAr,oAr,rAr,vn,IC,K3e,tAr,aAr,WK,nAr,sAr,lAr,NC,Z3e,iAr,dAr,UK,cAr,mAr,fAr,qC,e5e,gAr,hAr,HK,uAr,pAr,_Ar,jC,o5e,bAr,vAr,JK,FAr,TAr,MAr,DC,EAr,r5e,CAr,wAr,t5e,AAr,LAr,GC,gZe,xc,OC,a5e,lk,yAr,n5e,xAr,hZe,rr,ik,$Ar,$c,kAr,YK,SAr,RAr,KK,PAr,BAr,IAr,dk,NAr,s5e,qAr,jAr,DAr,Dt,ck,GAr,l5e,OAr,VAr,kc,XAr,i5e,zAr,QAr,ZK,WAr,UAr,HAr,VC,JAr,Mo,mk,YAr,d5e,KAr,ZAr,Fn,e6r,c5e,o6r,r6r,m5e,t6r,a6r,f5e,n6r,s6r,l6r,Sc,XC,g5e,i6r,d6r,eZ,c6r,m6r,f6r,zC,h5e,g6r,h6r,oZ,u6r,p6r,_6r,QC,u5e,b6r,v6r,rZ,F6r,T6r,M6r,WC,E6r,p5e,C6r,w6r,_5e,A6r,L6r,UC,uZe,Rc,HC,b5e,fk,y6r,v5e,x6r,pZe,tr,gk,$6r,Pc,k6r,tZ,S6r,R6r,aZ,P6r,B6r,I6r,hk,N6r,F5e,q6r,j6r,D6r,Gt,uk,G6r,T5e,O6r,V6r,Bc,X6r,M5e,z6r,Q6r,nZ,W6r,U6r,H6r,JC,J6r,Eo,pk,Y6r,E5e,K6r,Z6r,Tn,e7r,C5e,o7r,r7r,w5e,t7r,a7r,A5e,n7r,s7r,l7r,L5e,YC,y5e,i7r,d7r,sZ,c7r,m7r,f7r,KC,g7r,x5e,h7r,u7r,$5e,p7r,_7r,ZC,_Ze,Ic,e3,k5e,_k,b7r,S5e,v7r,bZe,ar,bk,F7r,Nc,T7r,lZ,M7r,E7r,iZ,C7r,w7r,A7r,vk,L7r,R5e,y7r,x7r,$7r,Ot,Fk,k7r,P5e,S7r,R7r,qc,P7r,B5e,B7r,I7r,dZ,N7r,q7r,j7r,o3,D7r,Co,Tk,G7r,I5e,O7r,V7r,Mn,X7r,N5e,z7r,Q7r,q5e,W7r,U7r,j5e,H7r,J7r,Y7r,gt,r3,D5e,K7r,Z7r,cZ,eLr,oLr,rLr,t3,G5e,tLr,aLr,mZ,nLr,sLr,lLr,a3,O5e,iLr,dLr,fZ,cLr,mLr,fLr,n3,V5e,gLr,hLr,gZ,uLr,pLr,_Lr,s3,X5e,bLr,vLr,hZ,FLr,TLr,MLr,l3,ELr,z5e,CLr,wLr,Q5e,ALr,LLr,i3,vZe,jc,d3,W5e,Mk,yLr,U5e,xLr,FZe,nr,Ek,$Lr,Dc,kLr,uZ,SLr,RLr,pZ,PLr,BLr,ILr,Ck,NLr,H5e,qLr,jLr,DLr,Vt,wk,GLr,J5e,OLr,VLr,Gc,XLr,Y5e,zLr,QLr,_Z,WLr,ULr,HLr,c3,JLr,wo,Ak,YLr,K5e,KLr,ZLr,En,eyr,Z5e,oyr,ryr,e0e,tyr,ayr,o0e,nyr,syr,lyr,r0e,m3,t0e,iyr,dyr,bZ,cyr,myr,fyr,f3,gyr,a0e,hyr,uyr,n0e,pyr,_yr,g3,TZe,Oc,h3,s0e,Lk,byr,l0e,vyr,MZe,sr,yk,Fyr,Vc,Tyr,vZ,Myr,Eyr,FZ,Cyr,wyr,Ayr,xk,Lyr,i0e,yyr,xyr,$yr,Xt,$k,kyr,d0e,Syr,Ryr,Xc,Pyr,c0e,Byr,Iyr,TZ,Nyr,qyr,jyr,u3,Dyr,Ir,kk,Gyr,m0e,Oyr,Vyr,Cn,Xyr,f0e,zyr,Qyr,g0e,Wyr,Uyr,h0e,Hyr,Jyr,Yyr,N,p3,u0e,Kyr,Zyr,MZ,e8r,o8r,r8r,_3,p0e,t8r,a8r,EZ,n8r,s8r,l8r,b3,_0e,i8r,d8r,CZ,c8r,m8r,f8r,v3,b0e,g8r,h8r,wZ,u8r,p8r,_8r,F3,v0e,b8r,v8r,AZ,F8r,T8r,M8r,T3,F0e,E8r,C8r,LZ,w8r,A8r,L8r,M3,T0e,y8r,x8r,yZ,$8r,k8r,S8r,E3,M0e,R8r,P8r,xZ,B8r,I8r,N8r,C3,E0e,q8r,j8r,$Z,D8r,G8r,O8r,w3,C0e,V8r,X8r,kZ,z8r,Q8r,W8r,A3,w0e,U8r,H8r,SZ,J8r,Y8r,K8r,L3,A0e,Z8r,e9r,RZ,o9r,r9r,t9r,y3,L0e,a9r,n9r,PZ,s9r,l9r,i9r,x3,y0e,d9r,c9r,BZ,m9r,f9r,g9r,$3,x0e,h9r,u9r,IZ,p9r,_9r,b9r,k3,$0e,v9r,F9r,NZ,T9r,M9r,E9r,S3,k0e,C9r,w9r,qZ,A9r,L9r,y9r,R3,S0e,x9r,$9r,jZ,k9r,S9r,R9r,vl,R0e,P9r,B9r,DZ,I9r,N9r,GZ,q9r,j9r,D9r,P3,P0e,G9r,O9r,OZ,V9r,X9r,z9r,B3,B0e,Q9r,W9r,VZ,U9r,H9r,J9r,I3,I0e,Y9r,K9r,XZ,Z9r,exr,oxr,N3,N0e,rxr,txr,zZ,axr,nxr,sxr,q3,q0e,lxr,ixr,QZ,dxr,cxr,mxr,j3,j0e,fxr,gxr,WZ,hxr,uxr,pxr,D3,D0e,_xr,bxr,UZ,vxr,Fxr,Txr,G3,G0e,Mxr,Exr,HZ,Cxr,wxr,Axr,O3,O0e,Lxr,yxr,JZ,xxr,$xr,kxr,V3,V0e,Sxr,Rxr,YZ,Pxr,Bxr,Ixr,X3,X0e,Nxr,qxr,KZ,jxr,Dxr,Gxr,z3,z0e,Oxr,Vxr,ZZ,Xxr,zxr,Qxr,Q3,Q0e,Wxr,Uxr,eee,Hxr,Jxr,Yxr,W3,W0e,Kxr,Zxr,oee,e$r,o$r,r$r,U3,U0e,t$r,a$r,ree,n$r,s$r,l$r,H3,H0e,i$r,d$r,tee,c$r,m$r,f$r,J3,J0e,g$r,h$r,aee,u$r,p$r,_$r,Y3,Y0e,b$r,v$r,nee,F$r,T$r,M$r,K3,K0e,E$r,C$r,see,w$r,A$r,L$r,Z3,Z0e,y$r,x$r,lee,$$r,k$r,S$r,e5,ewe,R$r,P$r,iee,B$r,I$r,N$r,o5,owe,q$r,j$r,dee,D$r,G$r,O$r,r5,rwe,V$r,X$r,cee,z$r,Q$r,W$r,t5,twe,U$r,H$r,mee,J$r,Y$r,K$r,a5,awe,Z$r,ekr,fee,okr,rkr,tkr,n5,nwe,akr,nkr,gee,skr,lkr,ikr,s5,swe,dkr,ckr,hee,mkr,fkr,gkr,l5,lwe,hkr,ukr,uee,pkr,_kr,bkr,i5,iwe,vkr,Fkr,pee,Tkr,Mkr,Ekr,d5,dwe,Ckr,wkr,_ee,Akr,Lkr,ykr,c5,cwe,xkr,$kr,bee,kkr,Skr,Rkr,m5,mwe,Pkr,Bkr,vee,Ikr,Nkr,qkr,f5,fwe,jkr,Dkr,Fee,Gkr,Okr,Vkr,g5,gwe,Xkr,zkr,Tee,Qkr,Wkr,Ukr,h5,hwe,Hkr,Jkr,Mee,Ykr,Kkr,Zkr,u5,EZe,zc,p5,uwe,Sk,eSr,pwe,oSr,CZe,lr,Rk,rSr,Qc,tSr,Eee,aSr,nSr,Cee,sSr,lSr,iSr,Pk,dSr,_we,cSr,mSr,fSr,zt,Bk,gSr,bwe,hSr,uSr,Wc,pSr,vwe,_Sr,bSr,wee,vSr,FSr,TSr,_5,MSr,Nr,Ik,ESr,Fwe,CSr,wSr,wn,ASr,Twe,LSr,ySr,Mwe,xSr,$Sr,Ewe,kSr,SSr,RSr,se,b5,Cwe,PSr,BSr,Aee,ISr,NSr,qSr,v5,wwe,jSr,DSr,Lee,GSr,OSr,VSr,F5,Awe,XSr,zSr,yee,QSr,WSr,USr,T5,Lwe,HSr,JSr,xee,YSr,KSr,ZSr,M5,ywe,eRr,oRr,$ee,rRr,tRr,aRr,E5,xwe,nRr,sRr,kee,lRr,iRr,dRr,C5,$we,cRr,mRr,See,fRr,gRr,hRr,w5,kwe,uRr,pRr,Ree,_Rr,bRr,vRr,A5,Swe,FRr,TRr,Pee,MRr,ERr,CRr,L5,Rwe,wRr,ARr,Bee,LRr,yRr,xRr,y5,Pwe,$Rr,kRr,Iee,SRr,RRr,PRr,x5,Bwe,BRr,IRr,Nee,NRr,qRr,jRr,$5,Iwe,DRr,GRr,qee,ORr,VRr,XRr,k5,Nwe,zRr,QRr,jee,WRr,URr,HRr,S5,qwe,JRr,YRr,Dee,KRr,ZRr,ePr,R5,jwe,oPr,rPr,Gee,tPr,aPr,nPr,P5,Dwe,sPr,lPr,Oee,iPr,dPr,cPr,B5,Gwe,mPr,fPr,Vee,gPr,hPr,uPr,I5,Owe,pPr,_Pr,Xee,bPr,vPr,FPr,N5,Vwe,TPr,MPr,zee,EPr,CPr,wPr,q5,Xwe,APr,LPr,Qee,yPr,xPr,$Pr,j5,zwe,kPr,SPr,Wee,RPr,PPr,BPr,D5,Qwe,IPr,NPr,Uee,qPr,jPr,DPr,G5,wZe,Uc,O5,Wwe,Nk,GPr,Uwe,OPr,AZe,ir,qk,VPr,Hc,XPr,Hee,zPr,QPr,Jee,WPr,UPr,HPr,jk,JPr,Hwe,YPr,KPr,ZPr,Qt,Dk,eBr,Jwe,oBr,rBr,Jc,tBr,Ywe,aBr,nBr,Yee,sBr,lBr,iBr,V5,dBr,qr,Gk,cBr,Kwe,mBr,fBr,An,gBr,Zwe,hBr,uBr,eAe,pBr,_Br,oAe,bBr,vBr,FBr,Me,X5,rAe,TBr,MBr,Kee,EBr,CBr,wBr,z5,tAe,ABr,LBr,Zee,yBr,xBr,$Br,Q5,aAe,kBr,SBr,eoe,RBr,PBr,BBr,W5,nAe,IBr,NBr,ooe,qBr,jBr,DBr,U5,sAe,GBr,OBr,roe,VBr,XBr,zBr,H5,lAe,QBr,WBr,toe,UBr,HBr,JBr,J5,iAe,YBr,KBr,aoe,ZBr,eIr,oIr,Y5,dAe,rIr,tIr,noe,aIr,nIr,sIr,K5,cAe,lIr,iIr,soe,dIr,cIr,mIr,Z5,mAe,fIr,gIr,loe,hIr,uIr,pIr,e0,fAe,_Ir,bIr,ioe,vIr,FIr,TIr,o0,gAe,MIr,EIr,doe,CIr,wIr,AIr,r0,hAe,LIr,yIr,coe,xIr,$Ir,kIr,t0,uAe,SIr,RIr,moe,PIr,BIr,IIr,a0,LZe,Yc,n0,pAe,Ok,NIr,_Ae,qIr,yZe,dr,Vk,jIr,Kc,DIr,foe,GIr,OIr,goe,VIr,XIr,zIr,Xk,QIr,bAe,WIr,UIr,HIr,Wt,zk,JIr,vAe,YIr,KIr,Zc,ZIr,FAe,eNr,oNr,hoe,rNr,tNr,aNr,s0,nNr,jr,Qk,sNr,TAe,lNr,iNr,Ln,dNr,MAe,cNr,mNr,EAe,fNr,gNr,CAe,hNr,uNr,pNr,Be,l0,wAe,_Nr,bNr,uoe,vNr,FNr,TNr,i0,AAe,MNr,ENr,poe,CNr,wNr,ANr,Fl,LAe,LNr,yNr,_oe,xNr,$Nr,boe,kNr,SNr,RNr,d0,yAe,PNr,BNr,voe,INr,NNr,qNr,c0,xAe,jNr,DNr,Foe,GNr,ONr,VNr,m0,$Ae,XNr,zNr,Toe,QNr,WNr,UNr,f0,kAe,HNr,JNr,Moe,YNr,KNr,ZNr,g0,SAe,eqr,oqr,Eoe,rqr,tqr,aqr,h0,RAe,nqr,sqr,Coe,lqr,iqr,dqr,u0,xZe,em,p0,PAe,Wk,cqr,BAe,mqr,$Ze,cr,Uk,fqr,om,gqr,woe,hqr,uqr,Aoe,pqr,_qr,bqr,Hk,vqr,IAe,Fqr,Tqr,Mqr,Ut,Jk,Eqr,NAe,Cqr,wqr,rm,Aqr,qAe,Lqr,yqr,Loe,xqr,$qr,kqr,_0,Sqr,Dr,Yk,Rqr,jAe,Pqr,Bqr,yn,Iqr,DAe,Nqr,qqr,GAe,jqr,Dqr,OAe,Gqr,Oqr,Vqr,tm,b0,VAe,Xqr,zqr,yoe,Qqr,Wqr,Uqr,v0,XAe,Hqr,Jqr,xoe,Yqr,Kqr,Zqr,F0,zAe,ejr,ojr,$oe,rjr,tjr,ajr,T0,kZe,am,M0,QAe,Kk,njr,WAe,sjr,SZe,mr,Zk,ljr,nm,ijr,koe,djr,cjr,Soe,mjr,fjr,gjr,eS,hjr,UAe,ujr,pjr,_jr,Ht,oS,bjr,HAe,vjr,Fjr,sm,Tjr,JAe,Mjr,Ejr,Roe,Cjr,wjr,Ajr,E0,Ljr,Gr,rS,yjr,YAe,xjr,$jr,xn,kjr,KAe,Sjr,Rjr,ZAe,Pjr,Bjr,e6e,Ijr,Njr,qjr,fe,C0,o6e,jjr,Djr,Poe,Gjr,Ojr,Vjr,w0,r6e,Xjr,zjr,Boe,Qjr,Wjr,Ujr,A0,t6e,Hjr,Jjr,Ioe,Yjr,Kjr,Zjr,L0,a6e,eDr,oDr,Noe,rDr,tDr,aDr,y0,n6e,nDr,sDr,qoe,lDr,iDr,dDr,x0,s6e,cDr,mDr,joe,fDr,gDr,hDr,$0,l6e,uDr,pDr,Doe,_Dr,bDr,vDr,k0,i6e,FDr,TDr,Goe,MDr,EDr,CDr,S0,d6e,wDr,ADr,Ooe,LDr,yDr,xDr,R0,c6e,$Dr,kDr,Voe,SDr,RDr,PDr,P0,m6e,BDr,IDr,Xoe,NDr,qDr,jDr,B0,f6e,DDr,GDr,zoe,ODr,VDr,XDr,I0,g6e,zDr,QDr,Qoe,WDr,UDr,HDr,N0,h6e,JDr,YDr,Woe,KDr,ZDr,eGr,q0,u6e,oGr,rGr,Uoe,tGr,aGr,nGr,j0,p6e,sGr,lGr,Hoe,iGr,dGr,cGr,D0,_6e,mGr,fGr,Joe,gGr,hGr,uGr,G0,b6e,pGr,_Gr,Yoe,bGr,vGr,FGr,O0,v6e,TGr,MGr,Koe,EGr,CGr,wGr,V0,F6e,AGr,LGr,Zoe,yGr,xGr,$Gr,X0,RZe,lm,z0,T6e,tS,kGr,M6e,SGr,PZe,fr,aS,RGr,im,PGr,ere,BGr,IGr,ore,NGr,qGr,jGr,nS,DGr,E6e,GGr,OGr,VGr,Jt,sS,XGr,C6e,zGr,QGr,dm,WGr,w6e,UGr,HGr,rre,JGr,YGr,KGr,Q0,ZGr,Or,lS,eOr,A6e,oOr,rOr,$n,tOr,L6e,aOr,nOr,y6e,sOr,lOr,x6e,iOr,dOr,cOr,ye,W0,$6e,mOr,fOr,tre,gOr,hOr,uOr,U0,k6e,pOr,_Or,are,bOr,vOr,FOr,H0,S6e,TOr,MOr,nre,EOr,COr,wOr,J0,R6e,AOr,LOr,sre,yOr,xOr,$Or,Y0,P6e,kOr,SOr,lre,ROr,POr,BOr,K0,B6e,IOr,NOr,ire,qOr,jOr,DOr,Z0,I6e,GOr,OOr,dre,VOr,XOr,zOr,ew,N6e,QOr,WOr,cre,UOr,HOr,JOr,ow,q6e,YOr,KOr,mre,ZOr,eVr,oVr,rw,j6e,rVr,tVr,fre,aVr,nVr,sVr,tw,BZe,cm,aw,D6e,iS,lVr,G6e,iVr,IZe,gr,dS,dVr,mm,cVr,gre,mVr,fVr,hre,gVr,hVr,uVr,cS,pVr,O6e,_Vr,bVr,vVr,Yt,mS,FVr,V6e,TVr,MVr,fm,EVr,X6e,CVr,wVr,ure,AVr,LVr,yVr,nw,xVr,Vr,fS,$Vr,z6e,kVr,SVr,kn,RVr,Q6e,PVr,BVr,W6e,IVr,NVr,U6e,qVr,jVr,DVr,re,sw,H6e,GVr,OVr,pre,VVr,XVr,zVr,lw,J6e,QVr,WVr,_re,UVr,HVr,JVr,iw,Y6e,YVr,KVr,bre,ZVr,eXr,oXr,dw,K6e,rXr,tXr,vre,aXr,nXr,sXr,cw,Z6e,lXr,iXr,Fre,dXr,cXr,mXr,mw,e7e,fXr,gXr,Tre,hXr,uXr,pXr,fw,o7e,_Xr,bXr,Mre,vXr,FXr,TXr,gw,r7e,MXr,EXr,Ere,CXr,wXr,AXr,hw,t7e,LXr,yXr,Cre,xXr,$Xr,kXr,uw,a7e,SXr,RXr,wre,PXr,BXr,IXr,pw,n7e,NXr,qXr,Are,jXr,DXr,GXr,_w,s7e,OXr,VXr,Lre,XXr,zXr,QXr,bw,l7e,WXr,UXr,yre,HXr,JXr,YXr,vw,i7e,KXr,ZXr,xre,ezr,ozr,rzr,Fw,d7e,tzr,azr,$re,nzr,szr,lzr,Tw,c7e,izr,dzr,kre,czr,mzr,fzr,Mw,m7e,gzr,hzr,Sre,uzr,pzr,_zr,Ew,f7e,bzr,vzr,Rre,Fzr,Tzr,Mzr,Cw,g7e,Ezr,Czr,Pre,wzr,Azr,Lzr,ww,h7e,yzr,xzr,Bre,$zr,kzr,Szr,Aw,u7e,Rzr,Pzr,Ire,Bzr,Izr,Nzr,Lw,p7e,qzr,jzr,Nre,Dzr,Gzr,Ozr,yw,_7e,Vzr,Xzr,qre,zzr,Qzr,Wzr,xw,b7e,Uzr,Hzr,jre,Jzr,Yzr,Kzr,$w,v7e,Zzr,eQr,Dre,oQr,rQr,tQr,kw,F7e,aQr,nQr,Gre,sQr,lQr,iQr,Sw,T7e,dQr,cQr,Ore,mQr,fQr,gQr,Rw,NZe,gm,Pw,M7e,gS,hQr,E7e,uQr,qZe,hr,hS,pQr,hm,_Qr,Vre,bQr,vQr,Xre,FQr,TQr,MQr,uS,EQr,C7e,CQr,wQr,AQr,Kt,pS,LQr,w7e,yQr,xQr,um,$Qr,A7e,kQr,SQr,zre,RQr,PQr,BQr,Bw,IQr,Xr,_S,NQr,L7e,qQr,jQr,Sn,DQr,y7e,GQr,OQr,x7e,VQr,XQr,$7e,zQr,QQr,WQr,ve,Iw,k7e,UQr,HQr,Qre,JQr,YQr,KQr,Nw,S7e,ZQr,eWr,Wre,oWr,rWr,tWr,qw,R7e,aWr,nWr,Ure,sWr,lWr,iWr,jw,P7e,dWr,cWr,Hre,mWr,fWr,gWr,Dw,B7e,hWr,uWr,Jre,pWr,_Wr,bWr,Gw,I7e,vWr,FWr,Yre,TWr,MWr,EWr,Ow,N7e,CWr,wWr,Kre,AWr,LWr,yWr,Vw,q7e,xWr,$Wr,Zre,kWr,SWr,RWr,Xw,j7e,PWr,BWr,ete,IWr,NWr,qWr,zw,D7e,jWr,DWr,ote,GWr,OWr,VWr,Qw,G7e,XWr,zWr,rte,QWr,WWr,UWr,Ww,O7e,HWr,JWr,tte,YWr,KWr,ZWr,Uw,V7e,eUr,oUr,ate,rUr,tUr,aUr,Hw,X7e,nUr,sUr,nte,lUr,iUr,dUr,Jw,z7e,cUr,mUr,ste,fUr,gUr,hUr,Yw,Q7e,uUr,pUr,lte,_Ur,bUr,vUr,Kw,W7e,FUr,TUr,ite,MUr,EUr,CUr,Zw,jZe,pm,eA,U7e,bS,wUr,H7e,AUr,DZe,ur,vS,LUr,_m,yUr,dte,xUr,$Ur,cte,kUr,SUr,RUr,FS,PUr,J7e,BUr,IUr,NUr,Zt,TS,qUr,Y7e,jUr,DUr,bm,GUr,K7e,OUr,VUr,mte,XUr,zUr,QUr,oA,WUr,zr,MS,UUr,Z7e,HUr,JUr,Rn,YUr,eLe,KUr,ZUr,oLe,eHr,oHr,rLe,rHr,tHr,aHr,ES,rA,tLe,nHr,sHr,fte,lHr,iHr,dHr,tA,aLe,cHr,mHr,gte,fHr,gHr,hHr,aA,GZe,vm,nA,nLe,CS,uHr,sLe,pHr,OZe,pr,wS,_Hr,Fm,bHr,hte,vHr,FHr,ute,THr,MHr,EHr,AS,CHr,lLe,wHr,AHr,LHr,ea,LS,yHr,iLe,xHr,$Hr,Tm,kHr,dLe,SHr,RHr,pte,PHr,BHr,IHr,sA,NHr,Qr,yS,qHr,cLe,jHr,DHr,Pn,GHr,mLe,OHr,VHr,fLe,XHr,zHr,gLe,QHr,WHr,UHr,hLe,lA,uLe,HHr,JHr,_te,YHr,KHr,ZHr,iA,VZe,Mm,dA,pLe,xS,eJr,_Le,oJr,XZe,_r,$S,rJr,Em,tJr,bte,aJr,nJr,vte,sJr,lJr,iJr,kS,dJr,bLe,cJr,mJr,fJr,oa,SS,gJr,vLe,hJr,uJr,Cm,pJr,FLe,_Jr,bJr,Fte,vJr,FJr,TJr,cA,MJr,Wr,RS,EJr,TLe,CJr,wJr,Bn,AJr,MLe,LJr,yJr,ELe,xJr,$Jr,CLe,kJr,SJr,RJr,wLe,mA,ALe,PJr,BJr,Tte,IJr,NJr,qJr,fA,zZe,wm,gA,LLe,PS,jJr,yLe,DJr,QZe,br,BS,GJr,Am,OJr,Mte,VJr,XJr,Ete,zJr,QJr,WJr,IS,UJr,xLe,HJr,JJr,YJr,ra,NS,KJr,$Le,ZJr,eYr,Lm,oYr,kLe,rYr,tYr,Cte,aYr,nYr,sYr,hA,lYr,Ur,qS,iYr,SLe,dYr,cYr,In,mYr,RLe,fYr,gYr,PLe,hYr,uYr,BLe,pYr,_Yr,bYr,de,uA,ILe,vYr,FYr,wte,TYr,MYr,EYr,pA,NLe,CYr,wYr,Ate,AYr,LYr,yYr,_A,qLe,xYr,$Yr,Lte,kYr,SYr,RYr,bA,jLe,PYr,BYr,yte,IYr,NYr,qYr,vA,DLe,jYr,DYr,xte,GYr,OYr,VYr,FA,GLe,XYr,zYr,$te,QYr,WYr,UYr,TA,OLe,HYr,JYr,kte,YYr,KYr,ZYr,MA,VLe,eKr,oKr,Ste,rKr,tKr,aKr,EA,XLe,nKr,sKr,Rte,lKr,iKr,dKr,CA,zLe,cKr,mKr,Pte,fKr,gKr,hKr,wA,QLe,uKr,pKr,Bte,_Kr,bKr,vKr,AA,WLe,FKr,TKr,Ite,MKr,EKr,CKr,LA,ULe,wKr,AKr,Nte,LKr,yKr,xKr,yA,HLe,$Kr,kKr,qte,SKr,RKr,PKr,xA,JLe,BKr,IKr,jte,NKr,qKr,jKr,$A,YLe,DKr,GKr,Dte,OKr,VKr,XKr,kA,KLe,zKr,QKr,Gte,WKr,UKr,HKr,SA,ZLe,JKr,YKr,Ote,KKr,ZKr,eZr,RA,eye,oZr,rZr,Vte,tZr,aZr,nZr,PA,oye,sZr,lZr,Xte,iZr,dZr,cZr,BA,rye,mZr,fZr,zte,gZr,hZr,uZr,IA,WZe,ym,NA,tye,jS,pZr,aye,_Zr,UZe,vr,DS,bZr,xm,vZr,Qte,FZr,TZr,Wte,MZr,EZr,CZr,GS,wZr,nye,AZr,LZr,yZr,ta,OS,xZr,sye,$Zr,kZr,$m,SZr,lye,RZr,PZr,Ute,BZr,IZr,NZr,qA,qZr,Hr,VS,jZr,iye,DZr,GZr,Nn,OZr,dye,VZr,XZr,cye,zZr,QZr,mye,WZr,UZr,HZr,ce,jA,fye,JZr,YZr,Hte,KZr,ZZr,eet,DA,gye,oet,ret,Jte,tet,aet,net,GA,hye,set,iet,Yte,det,cet,met,OA,uye,fet,get,Kte,het,uet,pet,VA,pye,_et,bet,Zte,vet,Fet,Tet,XA,_ye,Met,Eet,eae,Cet,wet,Aet,zA,bye,Let,yet,oae,xet,$et,ket,QA,vye,Set,Ret,rae,Pet,Bet,Iet,WA,Fye,Net,qet,tae,jet,Det,Get,UA,Tye,Oet,Vet,aae,Xet,zet,Qet,HA,Mye,Wet,Uet,nae,Het,Jet,Yet,JA,Eye,Ket,Zet,sae,eot,oot,rot,YA,Cye,tot,aot,lae,not,sot,lot,KA,wye,iot,dot,iae,cot,mot,fot,ZA,Aye,got,hot,dae,uot,pot,_ot,e6,Lye,bot,vot,cae,Fot,Tot,Mot,o6,yye,Eot,Cot,mae,wot,Aot,Lot,r6,xye,yot,xot,fae,$ot,kot,Sot,t6,$ye,Rot,Pot,gae,Bot,Iot,Not,a6,kye,qot,jot,hae,Dot,Got,Oot,n6,Sye,Vot,Xot,uae,zot,Qot,Wot,s6,HZe,km,l6,Rye,XS,Uot,Pye,Hot,JZe,Fr,zS,Jot,Sm,Yot,pae,Kot,Zot,_ae,ert,ort,rrt,QS,trt,Bye,art,nrt,srt,aa,WS,lrt,Iye,irt,drt,Rm,crt,Nye,mrt,frt,bae,grt,hrt,urt,i6,prt,Jr,US,_rt,qye,brt,vrt,qn,Frt,jye,Trt,Mrt,Dye,Ert,Crt,Gye,wrt,Art,Lrt,Oye,d6,Vye,yrt,xrt,vae,$rt,krt,Srt,c6,YZe,Pm,m6,Xye,HS,Rrt,zye,Prt,KZe,Tr,JS,Brt,Bm,Irt,Fae,Nrt,qrt,Tae,jrt,Drt,Grt,YS,Ort,Qye,Vrt,Xrt,zrt,na,KS,Qrt,Wye,Wrt,Urt,Im,Hrt,Uye,Jrt,Yrt,Mae,Krt,Zrt,ett,f6,ott,Yr,ZS,rtt,Hye,ttt,att,jn,ntt,Jye,stt,ltt,Yye,itt,dtt,Kye,ctt,mtt,ftt,Zye,g6,e8e,gtt,htt,Eae,utt,ptt,_tt,h6,ZZe,Nm,u6,o8e,eR,btt,r8e,vtt,eeo,Mr,oR,Ftt,qm,Ttt,Cae,Mtt,Ett,wae,Ctt,wtt,Att,rR,Ltt,t8e,ytt,xtt,$tt,sa,tR,ktt,a8e,Stt,Rtt,jm,Ptt,n8e,Btt,Itt,Aae,Ntt,qtt,jtt,p6,Dtt,Kr,aR,Gtt,s8e,Ott,Vtt,Dn,Xtt,l8e,ztt,Qtt,i8e,Wtt,Utt,d8e,Htt,Jtt,Ytt,te,_6,c8e,Ktt,Ztt,Lae,eat,oat,rat,b6,m8e,tat,aat,yae,nat,sat,lat,v6,f8e,iat,dat,xae,cat,mat,fat,F6,g8e,gat,hat,$ae,uat,pat,_at,T6,h8e,bat,vat,kae,Fat,Tat,Mat,M6,u8e,Eat,Cat,Sae,wat,Aat,Lat,E6,p8e,yat,xat,Rae,$at,kat,Sat,C6,_8e,Rat,Pat,Pae,Bat,Iat,Nat,w6,b8e,qat,jat,Bae,Dat,Gat,Oat,A6,v8e,Vat,Xat,Iae,zat,Qat,Wat,L6,F8e,Uat,Hat,Nae,Jat,Yat,Kat,y6,T8e,Zat,ent,qae,ont,rnt,tnt,x6,M8e,ant,nnt,jae,snt,lnt,int,$6,E8e,dnt,cnt,Dae,mnt,fnt,gnt,k6,C8e,hnt,unt,Gae,pnt,_nt,bnt,S6,w8e,vnt,Fnt,Oae,Tnt,Mnt,Ent,R6,A8e,Cnt,wnt,Vae,Ant,Lnt,ynt,P6,L8e,xnt,$nt,Xae,knt,Snt,Rnt,B6,y8e,Pnt,Bnt,zae,Int,Nnt,qnt,I6,x8e,jnt,Dnt,Qae,Gnt,Ont,Vnt,N6,$8e,Xnt,znt,Wae,Qnt,Wnt,Unt,q6,k8e,Hnt,Jnt,Uae,Ynt,Knt,Znt,j6,S8e,est,ost,Hae,rst,tst,ast,D6,R8e,nst,sst,Jae,lst,ist,dst,G6,P8e,cst,mst,Yae,fst,gst,hst,O6,B8e,ust,pst,Kae,_st,bst,vst,V6,I8e,Fst,Tst,Zae,Mst,Est,Cst,X6,oeo,Dm,z6,N8e,nR,wst,q8e,Ast,reo,Er,sR,Lst,Gm,yst,ene,xst,$st,one,kst,Sst,Rst,lR,Pst,j8e,Bst,Ist,Nst,la,iR,qst,D8e,jst,Dst,Om,Gst,G8e,Ost,Vst,rne,Xst,zst,Qst,Q6,Wst,Zr,dR,Ust,O8e,Hst,Jst,Gn,Yst,V8e,Kst,Zst,X8e,elt,olt,z8e,rlt,tlt,alt,xe,W6,Q8e,nlt,slt,tne,llt,ilt,dlt,U6,W8e,clt,mlt,ane,flt,glt,hlt,H6,U8e,ult,plt,nne,_lt,blt,vlt,J6,H8e,Flt,Tlt,sne,Mlt,Elt,Clt,Y6,J8e,wlt,Alt,lne,Llt,ylt,xlt,K6,Y8e,$lt,klt,ine,Slt,Rlt,Plt,Z6,K8e,Blt,Ilt,dne,Nlt,qlt,jlt,e7,Z8e,Dlt,Glt,cne,Olt,Vlt,Xlt,o7,e9e,zlt,Qlt,mne,Wlt,Ult,Hlt,r7,o9e,Jlt,Ylt,fne,Klt,Zlt,eit,t7,teo,Vm,a7,r9e,cR,oit,t9e,rit,aeo,Cr,mR,tit,Xm,ait,gne,nit,sit,hne,lit,iit,dit,fR,cit,a9e,mit,fit,git,ia,gR,hit,n9e,uit,pit,zm,_it,s9e,bit,vit,une,Fit,Tit,Mit,n7,Eit,et,hR,Cit,l9e,wit,Ait,On,Lit,i9e,yit,xit,d9e,$it,kit,c9e,Sit,Rit,Pit,Ee,s7,m9e,Bit,Iit,pne,Nit,qit,jit,l7,f9e,Dit,Git,_ne,Oit,Vit,Xit,i7,g9e,zit,Qit,bne,Wit,Uit,Hit,d7,h9e,Jit,Yit,vne,Kit,Zit,edt,c7,u9e,odt,rdt,Fne,tdt,adt,ndt,m7,p9e,sdt,ldt,Tne,idt,ddt,cdt,f7,_9e,mdt,fdt,Mne,gdt,hdt,udt,g7,b9e,pdt,_dt,Ene,bdt,vdt,Fdt,h7,v9e,Tdt,Mdt,Cne,Edt,Cdt,wdt,u7,F9e,Adt,Ldt,wne,ydt,xdt,$dt,p7,T9e,kdt,Sdt,Ane,Rdt,Pdt,Bdt,_7,M9e,Idt,Ndt,Lne,qdt,jdt,Ddt,b7,E9e,Gdt,Odt,yne,Vdt,Xdt,zdt,v7,neo,Qm,F7,C9e,uR,Qdt,w9e,Wdt,seo,wr,pR,Udt,Wm,Hdt,xne,Jdt,Ydt,$ne,Kdt,Zdt,ect,_R,oct,A9e,rct,tct,act,da,bR,nct,L9e,sct,lct,Um,ict,y9e,dct,cct,kne,mct,fct,gct,T7,hct,ot,vR,uct,x9e,pct,_ct,Vn,bct,$9e,vct,Fct,k9e,Tct,Mct,S9e,Ect,Cct,wct,$e,M7,R9e,Act,Lct,Sne,yct,xct,$ct,E7,P9e,kct,Sct,Rne,Rct,Pct,Bct,C7,B9e,Ict,Nct,Pne,qct,jct,Dct,w7,I9e,Gct,Oct,Bne,Vct,Xct,zct,A7,N9e,Qct,Wct,Ine,Uct,Hct,Jct,L7,q9e,Yct,Kct,Nne,Zct,emt,omt,y7,j9e,rmt,tmt,qne,amt,nmt,smt,x7,D9e,lmt,imt,jne,dmt,cmt,mmt,$7,G9e,fmt,gmt,Dne,hmt,umt,pmt,k7,O9e,_mt,bmt,Gne,vmt,Fmt,Tmt,S7,leo,Hm,R7,V9e,FR,Mmt,X9e,Emt,ieo,Ar,TR,Cmt,Jm,wmt,One,Amt,Lmt,Vne,ymt,xmt,$mt,MR,kmt,z9e,Smt,Rmt,Pmt,ca,ER,Bmt,Q9e,Imt,Nmt,Ym,qmt,W9e,jmt,Dmt,Xne,Gmt,Omt,Vmt,P7,Xmt,rt,CR,zmt,U9e,Qmt,Wmt,Xn,Umt,H9e,Hmt,Jmt,J9e,Ymt,Kmt,Y9e,Zmt,eft,oft,ke,B7,K9e,rft,tft,zne,aft,nft,sft,I7,Z9e,lft,ift,Qne,dft,cft,mft,N7,exe,fft,gft,Wne,hft,uft,pft,q7,oxe,_ft,bft,Une,vft,Fft,Tft,j7,rxe,Mft,Eft,Hne,Cft,wft,Aft,D7,txe,Lft,yft,Jne,xft,$ft,kft,G7,axe,Sft,Rft,Yne,Pft,Bft,Ift,O7,nxe,Nft,qft,Kne,jft,Dft,Gft,V7,sxe,Oft,Vft,Zne,Xft,zft,Qft,X7,lxe,Wft,Uft,ese,Hft,Jft,Yft,z7,deo,Km,Q7,ixe,wR,Kft,dxe,Zft,ceo,Lr,AR,egt,Zm,ogt,ose,rgt,tgt,rse,agt,ngt,sgt,LR,lgt,cxe,igt,dgt,cgt,ma,yR,mgt,mxe,fgt,ggt,ef,hgt,fxe,ugt,pgt,tse,_gt,bgt,vgt,W7,Fgt,tt,xR,Tgt,gxe,Mgt,Egt,zn,Cgt,hxe,wgt,Agt,uxe,Lgt,ygt,pxe,xgt,$gt,kgt,Se,U7,_xe,Sgt,Rgt,ase,Pgt,Bgt,Igt,H7,bxe,Ngt,qgt,nse,jgt,Dgt,Ggt,J7,vxe,Ogt,Vgt,sse,Xgt,zgt,Qgt,Y7,Fxe,Wgt,Ugt,lse,Hgt,Jgt,Ygt,K7,Txe,Kgt,Zgt,ise,eht,oht,rht,Z7,Mxe,tht,aht,dse,nht,sht,lht,eL,Exe,iht,dht,cse,cht,mht,fht,oL,Cxe,ght,hht,mse,uht,pht,_ht,rL,wxe,bht,vht,fse,Fht,Tht,Mht,tL,Axe,Eht,Cht,gse,wht,Aht,Lht,aL,meo,of,nL,Lxe,$R,yht,yxe,xht,feo,yr,kR,$ht,rf,kht,hse,Sht,Rht,use,Pht,Bht,Iht,SR,Nht,xxe,qht,jht,Dht,fa,RR,Ght,$xe,Oht,Vht,tf,Xht,kxe,zht,Qht,pse,Wht,Uht,Hht,sL,Jht,at,PR,Yht,Sxe,Kht,Zht,Qn,eut,Rxe,out,rut,Pxe,tut,aut,Bxe,nut,sut,lut,Re,lL,Ixe,iut,dut,_se,cut,mut,fut,iL,Nxe,gut,hut,bse,uut,put,_ut,dL,qxe,but,vut,vse,Fut,Tut,Mut,cL,jxe,Eut,Cut,Fse,wut,Aut,Lut,mL,Dxe,yut,xut,Tse,$ut,kut,Sut,fL,Gxe,Rut,Put,Mse,But,Iut,Nut,gL,Oxe,qut,jut,Ese,Dut,Gut,Out,hL,Vxe,Vut,Xut,Cse,zut,Qut,Wut,uL,Xxe,Uut,Hut,wse,Jut,Yut,Kut,pL,zxe,Zut,ept,Ase,opt,rpt,tpt,_L,geo,af,bL,Qxe,BR,apt,Wxe,npt,heo,xr,IR,spt,nf,lpt,Lse,ipt,dpt,yse,cpt,mpt,fpt,NR,gpt,Uxe,hpt,upt,ppt,ga,qR,_pt,Hxe,bpt,vpt,sf,Fpt,Jxe,Tpt,Mpt,xse,Ept,Cpt,wpt,vL,Apt,nt,jR,Lpt,Yxe,ypt,xpt,Wn,$pt,Kxe,kpt,Spt,Zxe,Rpt,Ppt,e$e,Bpt,Ipt,Npt,Xe,FL,o$e,qpt,jpt,$se,Dpt,Gpt,Opt,TL,r$e,Vpt,Xpt,kse,zpt,Qpt,Wpt,ML,t$e,Upt,Hpt,Sse,Jpt,Ypt,Kpt,EL,a$e,Zpt,e_t,Rse,o_t,r_t,t_t,CL,n$e,a_t,n_t,Pse,s_t,l_t,i_t,wL,s$e,d_t,c_t,Bse,m_t,f_t,g_t,AL,l$e,h_t,u_t,Ise,p_t,__t,b_t,LL,i$e,v_t,F_t,Nse,T_t,M_t,E_t,yL,ueo,lf,xL,d$e,DR,C_t,c$e,w_t,peo,$r,GR,A_t,df,L_t,qse,y_t,x_t,jse,$_t,k_t,S_t,OR,R_t,m$e,P_t,B_t,I_t,ha,VR,N_t,f$e,q_t,j_t,cf,D_t,g$e,G_t,O_t,Dse,V_t,X_t,z_t,$L,Q_t,st,XR,W_t,h$e,U_t,H_t,Un,J_t,u$e,Y_t,K_t,p$e,Z_t,ebt,_$e,obt,rbt,tbt,ze,kL,b$e,abt,nbt,Gse,sbt,lbt,ibt,SL,v$e,dbt,cbt,Ose,mbt,fbt,gbt,RL,F$e,hbt,ubt,Vse,pbt,_bt,bbt,PL,T$e,vbt,Fbt,Xse,Tbt,Mbt,Ebt,BL,M$e,Cbt,wbt,zse,Abt,Lbt,ybt,IL,E$e,xbt,$bt,Qse,kbt,Sbt,Rbt,NL,C$e,Pbt,Bbt,Wse,Ibt,Nbt,qbt,qL,w$e,jbt,Dbt,Use,Gbt,Obt,Vbt,jL,_eo,mf,DL,A$e,zR,Xbt,L$e,zbt,beo,kr,QR,Qbt,ff,Wbt,Hse,Ubt,Hbt,Jse,Jbt,Ybt,Kbt,WR,Zbt,y$e,e2t,o2t,r2t,ua,UR,t2t,x$e,a2t,n2t,gf,s2t,$$e,l2t,i2t,Yse,d2t,c2t,m2t,GL,f2t,lt,HR,g2t,k$e,h2t,u2t,Hn,p2t,S$e,_2t,b2t,R$e,v2t,F2t,P$e,T2t,M2t,E2t,B$e,OL,I$e,C2t,w2t,Kse,A2t,L2t,y2t,VL,veo,hf,XL,N$e,JR,x2t,q$e,$2t,Feo,Sr,YR,k2t,uf,S2t,Zse,R2t,P2t,ele,B2t,I2t,N2t,KR,q2t,j$e,j2t,D2t,G2t,pa,ZR,O2t,D$e,V2t,X2t,pf,z2t,G$e,Q2t,W2t,ole,U2t,H2t,J2t,zL,Y2t,it,eP,K2t,O$e,Z2t,e1t,Jn,o1t,V$e,r1t,t1t,X$e,a1t,n1t,z$e,s1t,l1t,i1t,oP,QL,Q$e,d1t,c1t,rle,m1t,f1t,g1t,WL,W$e,h1t,u1t,tle,p1t,_1t,b1t,UL,Teo,_f,HL,U$e,rP,v1t,H$e,F1t,Meo,Rr,tP,T1t,bf,M1t,ale,E1t,C1t,nle,w1t,A1t,L1t,aP,y1t,J$e,x1t,$1t,k1t,_a,nP,S1t,Y$e,R1t,P1t,vf,B1t,K$e,I1t,N1t,sle,q1t,j1t,D1t,JL,G1t,dt,sP,O1t,Z$e,V1t,X1t,Yn,z1t,eke,Q1t,W1t,oke,U1t,H1t,rke,J1t,Y1t,K1t,tke,YL,ake,Z1t,evt,lle,ovt,rvt,tvt,KL,Eeo;return d=new oe({}),Qa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),S9=new oe({}),R9=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),yf=new avt({props:{warning:!0,$$slots:{default:[Tha]},$$scope:{ctx:$}}}),P9=new oe({}),B9=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L641"}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L664"}}),Hh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Mha]},$$scope:{ctx:$}}}),j9=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L787"}}),D9=new oe({}),G9=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L427"}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L441"}}),Su=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Eha]},$$scope:{ctx:$}}}),z9=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L642"}}),Q9=new oe({}),W9=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L215"}}),Tp=new avt({props:{$$slots:{default:[Cha]},$$scope:{ctx:$}}}),Mp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[wha]},$$scope:{ctx:$}}}),Y9=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L342"}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L94"}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L108"}}),Qp=new avt({props:{$$slots:{default:[Aha]},$$scope:{ctx:$}}}),Wp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Lha]},$$scope:{ctx:$}}}),tx=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L275"}}),ax=new oe({}),nx=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L838"}}),lx=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Jp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[yha]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c2=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[xha]},$$scope:{ctx:$}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L845"}}),fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[$ha]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kha]},$$scope:{ctx:$}}}),hx=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),_x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Sha]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Rha]},$$scope:{ctx:$}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Pha]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Bha]},$$scope:{ctx:$}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L874"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Iha]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Nha]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[qha]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jha]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L939"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Dha]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Gha]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L946"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Oha]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Vha]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L932"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Xha]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zha]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L892"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Qha]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Wha]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L899"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Uha]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Hha]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L921"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Jha]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t4=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Yha]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L955"}}),g$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Kha]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Zha]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L994"}}),b$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[eua]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[oua]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1001"}}),E$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[rua]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tua]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L910"}}),y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[aua]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[nua]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1008"}}),R$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[sua]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[lua]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1031"}}),q$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[iua]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[dua]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1015"}}),V$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[cua]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[mua]},$$scope:{ctx:$}}}),z$=new oe({}),Q$=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1022"}}),U$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[fua]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[gua]},$$scope:{ctx:$}}}),Y$=new oe({}),K$=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1040"}}),ek=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[hua]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[uua]},$$scope:{ctx:$}}}),rk=new oe({}),tk=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1047"}}),nk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[pua]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[_ua]},$$scope:{ctx:$}}}),lk=new oe({}),ik=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L987"}}),ck=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[bua]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[vua]},$$scope:{ctx:$}}}),fk=new oe({}),gk=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L962"}}),uk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Fua]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Tua]},$$scope:{ctx:$}}}),_k=new oe({}),bk=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L969"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Mua]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Eua]},$$scope:{ctx:$}}}),Mk=new oe({}),Ek=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L978"}}),wk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Cua]},$$scope:{ctx:$}}}),Ak=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[wua]},$$scope:{ctx:$}}}),Lk=new oe({}),yk=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),$k=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Aua]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Lua]},$$scope:{ctx:$}}}),Sk=new oe({}),Rk=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Bk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[yua]},$$scope:{ctx:$}}}),Ik=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xua]},$$scope:{ctx:$}}}),Nk=new oe({}),qk=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),Dk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[$ua]},$$scope:{ctx:$}}}),Gk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kua]},$$scope:{ctx:$}}}),Ok=new oe({}),Vk=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),zk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Sua]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Rua]},$$scope:{ctx:$}}}),Wk=new oe({}),Uk=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Jk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Pua]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Bua]},$$scope:{ctx:$}}}),Kk=new oe({}),Zk=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),oS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Iua]},$$scope:{ctx:$}}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Nua]},$$scope:{ctx:$}}}),tS=new oe({}),aS=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),sS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qua]},$$scope:{ctx:$}}}),lS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jua]},$$scope:{ctx:$}}}),iS=new oe({}),dS=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),mS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Dua]},$$scope:{ctx:$}}}),fS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Gua]},$$scope:{ctx:$}}}),gS=new oe({}),hS=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L559"}}),pS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Oua]},$$scope:{ctx:$}}}),_S=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zw=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Vua]},$$scope:{ctx:$}}}),bS=new oe({}),vS=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L566"}}),TS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oA=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Xua]},$$scope:{ctx:$}}}),MS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zua]},$$scope:{ctx:$}}}),CS=new oe({}),wS=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),LS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Qua]},$$scope:{ctx:$}}}),yS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Wua]},$$scope:{ctx:$}}}),xS=new oe({}),$S=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),SS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cA=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Uua]},$$scope:{ctx:$}}}),RS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Hua]},$$scope:{ctx:$}}}),PS=new oe({}),BS=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),NS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Jua]},$$scope:{ctx:$}}}),qS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Yua]},$$scope:{ctx:$}}}),jS=new oe({}),DS=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),OS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qA=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Kua]},$$scope:{ctx:$}}}),VS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Zua]},$$scope:{ctx:$}}}),XS=new oe({}),zS=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),WS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[epa]},$$scope:{ctx:$}}}),US=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[opa]},$$scope:{ctx:$}}}),HS=new oe({}),JS=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L575"}}),KS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[rpa]},$$scope:{ctx:$}}}),ZS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[tpa]},$$scope:{ctx:$}}}),eR=new oe({}),oR=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),tR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[apa]},$$scope:{ctx:$}}}),aR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[npa]},$$scope:{ctx:$}}}),nR=new oe({}),sR=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),iR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[spa]},$$scope:{ctx:$}}}),dR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lpa]},$$scope:{ctx:$}}}),cR=new oe({}),mR=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),gR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ipa]},$$scope:{ctx:$}}}),hR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dpa]},$$scope:{ctx:$}}}),uR=new oe({}),pR=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),bR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[cpa]},$$scope:{ctx:$}}}),vR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mpa]},$$scope:{ctx:$}}}),FR=new oe({}),TR=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),ER=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fpa]},$$scope:{ctx:$}}}),CR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gpa]},$$scope:{ctx:$}}}),wR=new oe({}),AR=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),yR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hpa]},$$scope:{ctx:$}}}),xR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aL=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[upa]},$$scope:{ctx:$}}}),$R=new oe({}),kR=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),RR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sL=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ppa]},$$scope:{ctx:$}}}),PR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_L=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_pa]},$$scope:{ctx:$}}}),BR=new oe({}),IR=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),qR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vL=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[bpa]},$$scope:{ctx:$}}}),jR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yL=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vpa]},$$scope:{ctx:$}}}),DR=new oe({}),GR=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),VR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$L=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Fpa]},$$scope:{ctx:$}}}),XR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jL=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Tpa]},$$scope:{ctx:$}}}),zR=new oe({}),QR=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),UR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GL=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Mpa]},$$scope:{ctx:$}}}),HR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VL=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Epa]},$$scope:{ctx:$}}}),JR=new oe({}),YR=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ZR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zL=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Cpa]},$$scope:{ctx:$}}}),eP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UL=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wpa]},$$scope:{ctx:$}}}),rP=new oe({}),tP=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),nP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JL=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Apa]},$$scope:{ctx:$}}}),sP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KL=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Lpa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),rd=o("Auto Classes"),Ef=l(),pt=a("p"),td=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ad=a("code"),y9=o("from_pretrained()"),Cf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),nd=o("Instantiating one of "),Zn=a("a"),x9=o("AutoConfig"),es=o(", "),os=a("a"),$9=o("AutoModel"),sd=o(`, and
`),rs=a("a"),k9=o("AutoTokenizer"),ld=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),F(Qa.$$.fragment),Je=l(),Ae=a("p"),SB=o("will create a model that is an instance of "),id=a("a"),RB=o("BertModel"),PB=o("."),xo=l(),Wa=a("p"),BB=o("There is one class of "),Af=a("code"),IB=o("AutoModel"),Dro=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cKe=l(),dd=a("h2"),Lf=a("a"),fde=a("span"),F(S9.$$.fragment),Gro=l(),gde=a("span"),Oro=o("Extending the Auto Classes"),mKe=l(),ts=a("p"),Vro=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hde=a("code"),Xro=o("NewModel"),zro=o(", make sure you have a "),ude=a("code"),Qro=o("NewModelConfig"),Wro=o(` then you can add those to the auto
classes like this:`),fKe=l(),F(R9.$$.fragment),gKe=l(),NB=a("p"),Uro=o("You will then be able to use the auto classes like you would usually do!"),hKe=l(),F(yf.$$.fragment),uKe=l(),cd=a("h2"),xf=a("a"),pde=a("span"),F(P9.$$.fragment),Hro=l(),_de=a("span"),Jro=o("AutoConfig"),pKe=l(),$o=a("div"),F(B9.$$.fragment),Yro=l(),I9=a("p"),Kro=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qB=a("a"),Zro=o("from_pretrained()"),eto=o(" class method."),oto=l(),N9=a("p"),rto=o("This class cannot be instantiated directly using "),bde=a("code"),tto=o("__init__()"),ato=o(" (throws an error)."),nto=l(),Pr=a("div"),F(q9.$$.fragment),sto=l(),vde=a("p"),lto=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),ito=l(),md=a("p"),dto=o("The configuration class to instantiate is selected based on the "),Fde=a("code"),cto=o("model_type"),mto=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Tde=a("code"),fto=o("pretrained_model_name_or_path"),gto=o(":"),hto=l(),A=a("ul"),$f=a("li"),Mde=a("strong"),uto=o("albert"),pto=o(" \u2014 "),jB=a("a"),_to=o("AlbertConfig"),bto=o(" (ALBERT model)"),vto=l(),kf=a("li"),Ede=a("strong"),Fto=o("bart"),Tto=o(" \u2014 "),DB=a("a"),Mto=o("BartConfig"),Eto=o(" (BART model)"),Cto=l(),Sf=a("li"),Cde=a("strong"),wto=o("beit"),Ato=o(" \u2014 "),GB=a("a"),Lto=o("BeitConfig"),yto=o(" (BEiT model)"),xto=l(),Rf=a("li"),wde=a("strong"),$to=o("bert"),kto=o(" \u2014 "),OB=a("a"),Sto=o("BertConfig"),Rto=o(" (BERT model)"),Pto=l(),Pf=a("li"),Ade=a("strong"),Bto=o("bert-generation"),Ito=o(" \u2014 "),VB=a("a"),Nto=o("BertGenerationConfig"),qto=o(" (Bert Generation model)"),jto=l(),Bf=a("li"),Lde=a("strong"),Dto=o("big_bird"),Gto=o(" \u2014 "),XB=a("a"),Oto=o("BigBirdConfig"),Vto=o(" (BigBird model)"),Xto=l(),If=a("li"),yde=a("strong"),zto=o("bigbird_pegasus"),Qto=o(" \u2014 "),zB=a("a"),Wto=o("BigBirdPegasusConfig"),Uto=o(" (BigBird-Pegasus model)"),Hto=l(),Nf=a("li"),xde=a("strong"),Jto=o("blenderbot"),Yto=o(" \u2014 "),QB=a("a"),Kto=o("BlenderbotConfig"),Zto=o(" (Blenderbot model)"),eao=l(),qf=a("li"),$de=a("strong"),oao=o("blenderbot-small"),rao=o(" \u2014 "),WB=a("a"),tao=o("BlenderbotSmallConfig"),aao=o(" (BlenderbotSmall model)"),nao=l(),jf=a("li"),kde=a("strong"),sao=o("bloom"),lao=o(" \u2014 "),UB=a("a"),iao=o("BloomConfig"),dao=o(" (BLOOM model)"),cao=l(),Df=a("li"),Sde=a("strong"),mao=o("camembert"),fao=o(" \u2014 "),HB=a("a"),gao=o("CamembertConfig"),hao=o(" (CamemBERT model)"),uao=l(),Gf=a("li"),Rde=a("strong"),pao=o("canine"),_ao=o(" \u2014 "),JB=a("a"),bao=o("CanineConfig"),vao=o(" (CANINE model)"),Fao=l(),Of=a("li"),Pde=a("strong"),Tao=o("clip"),Mao=o(" \u2014 "),YB=a("a"),Eao=o("CLIPConfig"),Cao=o(" (CLIP model)"),wao=l(),Vf=a("li"),Bde=a("strong"),Aao=o("codegen"),Lao=o(" \u2014 "),KB=a("a"),yao=o("CodeGenConfig"),xao=o(" (CodeGen model)"),$ao=l(),Xf=a("li"),Ide=a("strong"),kao=o("convbert"),Sao=o(" \u2014 "),ZB=a("a"),Rao=o("ConvBertConfig"),Pao=o(" (ConvBERT model)"),Bao=l(),zf=a("li"),Nde=a("strong"),Iao=o("convnext"),Nao=o(" \u2014 "),eI=a("a"),qao=o("ConvNextConfig"),jao=o(" (ConvNeXT model)"),Dao=l(),Qf=a("li"),qde=a("strong"),Gao=o("ctrl"),Oao=o(" \u2014 "),oI=a("a"),Vao=o("CTRLConfig"),Xao=o(" (CTRL model)"),zao=l(),Wf=a("li"),jde=a("strong"),Qao=o("cvt"),Wao=o(" \u2014 "),rI=a("a"),Uao=o("CvtConfig"),Hao=o(" (CvT model)"),Jao=l(),Uf=a("li"),Dde=a("strong"),Yao=o("data2vec-audio"),Kao=o(" \u2014 "),tI=a("a"),Zao=o("Data2VecAudioConfig"),eno=o(" (Data2VecAudio model)"),ono=l(),Hf=a("li"),Gde=a("strong"),rno=o("data2vec-text"),tno=o(" \u2014 "),aI=a("a"),ano=o("Data2VecTextConfig"),nno=o(" (Data2VecText model)"),sno=l(),Jf=a("li"),Ode=a("strong"),lno=o("data2vec-vision"),ino=o(" \u2014 "),nI=a("a"),dno=o("Data2VecVisionConfig"),cno=o(" (Data2VecVision model)"),mno=l(),Yf=a("li"),Vde=a("strong"),fno=o("deberta"),gno=o(" \u2014 "),sI=a("a"),hno=o("DebertaConfig"),uno=o(" (DeBERTa model)"),pno=l(),Kf=a("li"),Xde=a("strong"),_no=o("deberta-v2"),bno=o(" \u2014 "),lI=a("a"),vno=o("DebertaV2Config"),Fno=o(" (DeBERTa-v2 model)"),Tno=l(),Zf=a("li"),zde=a("strong"),Mno=o("decision_transformer"),Eno=o(" \u2014 "),iI=a("a"),Cno=o("DecisionTransformerConfig"),wno=o(" (Decision Transformer model)"),Ano=l(),eg=a("li"),Qde=a("strong"),Lno=o("deformable_detr"),yno=o(" \u2014 "),dI=a("a"),xno=o("DeformableDetrConfig"),$no=o(" (Deformable DETR model)"),kno=l(),og=a("li"),Wde=a("strong"),Sno=o("deit"),Rno=o(" \u2014 "),cI=a("a"),Pno=o("DeiTConfig"),Bno=o(" (DeiT model)"),Ino=l(),rg=a("li"),Ude=a("strong"),Nno=o("detr"),qno=o(" \u2014 "),mI=a("a"),jno=o("DetrConfig"),Dno=o(" (DETR model)"),Gno=l(),tg=a("li"),Hde=a("strong"),Ono=o("distilbert"),Vno=o(" \u2014 "),fI=a("a"),Xno=o("DistilBertConfig"),zno=o(" (DistilBERT model)"),Qno=l(),ag=a("li"),Jde=a("strong"),Wno=o("donut-swin"),Uno=o(" \u2014 "),gI=a("a"),Hno=o("DonutSwinConfig"),Jno=o(" (DonutSwin model)"),Yno=l(),ng=a("li"),Yde=a("strong"),Kno=o("dpr"),Zno=o(" \u2014 "),hI=a("a"),eso=o("DPRConfig"),oso=o(" (DPR model)"),rso=l(),sg=a("li"),Kde=a("strong"),tso=o("dpt"),aso=o(" \u2014 "),uI=a("a"),nso=o("DPTConfig"),sso=o(" (DPT model)"),lso=l(),lg=a("li"),Zde=a("strong"),iso=o("electra"),dso=o(" \u2014 "),pI=a("a"),cso=o("ElectraConfig"),mso=o(" (ELECTRA model)"),fso=l(),ig=a("li"),ece=a("strong"),gso=o("encoder-decoder"),hso=o(" \u2014 "),_I=a("a"),uso=o("EncoderDecoderConfig"),pso=o(" (Encoder decoder model)"),_so=l(),dg=a("li"),oce=a("strong"),bso=o("ernie"),vso=o(" \u2014 "),bI=a("a"),Fso=o("ErnieConfig"),Tso=o(" (ERNIE model)"),Mso=l(),cg=a("li"),rce=a("strong"),Eso=o("flaubert"),Cso=o(" \u2014 "),vI=a("a"),wso=o("FlaubertConfig"),Aso=o(" (FlauBERT model)"),Lso=l(),mg=a("li"),tce=a("strong"),yso=o("flava"),xso=o(" \u2014 "),FI=a("a"),$so=o("FlavaConfig"),kso=o(" (FLAVA model)"),Sso=l(),fg=a("li"),ace=a("strong"),Rso=o("fnet"),Pso=o(" \u2014 "),TI=a("a"),Bso=o("FNetConfig"),Iso=o(" (FNet model)"),Nso=l(),gg=a("li"),nce=a("strong"),qso=o("fsmt"),jso=o(" \u2014 "),MI=a("a"),Dso=o("FSMTConfig"),Gso=o(" (FairSeq Machine-Translation model)"),Oso=l(),hg=a("li"),sce=a("strong"),Vso=o("funnel"),Xso=o(" \u2014 "),EI=a("a"),zso=o("FunnelConfig"),Qso=o(" (Funnel Transformer model)"),Wso=l(),ug=a("li"),lce=a("strong"),Uso=o("glpn"),Hso=o(" \u2014 "),CI=a("a"),Jso=o("GLPNConfig"),Yso=o(" (GLPN model)"),Kso=l(),pg=a("li"),ice=a("strong"),Zso=o("gpt2"),elo=o(" \u2014 "),wI=a("a"),olo=o("GPT2Config"),rlo=o(" (OpenAI GPT-2 model)"),tlo=l(),_g=a("li"),dce=a("strong"),alo=o("gpt_neo"),nlo=o(" \u2014 "),AI=a("a"),slo=o("GPTNeoConfig"),llo=o(" (GPT Neo model)"),ilo=l(),bg=a("li"),cce=a("strong"),dlo=o("gpt_neox"),clo=o(" \u2014 "),LI=a("a"),mlo=o("GPTNeoXConfig"),flo=o(" (GPT NeoX model)"),glo=l(),vg=a("li"),mce=a("strong"),hlo=o("gpt_neox_japanese"),ulo=o(" \u2014 "),yI=a("a"),plo=o("GPTNeoXJapaneseConfig"),_lo=o(" (GPT NeoX Japanese model)"),blo=l(),Fg=a("li"),fce=a("strong"),vlo=o("gptj"),Flo=o(" \u2014 "),xI=a("a"),Tlo=o("GPTJConfig"),Mlo=o(" (GPT-J model)"),Elo=l(),Tg=a("li"),gce=a("strong"),Clo=o("groupvit"),wlo=o(" \u2014 "),$I=a("a"),Alo=o("GroupViTConfig"),Llo=o(" (GroupViT model)"),ylo=l(),Mg=a("li"),hce=a("strong"),xlo=o("hubert"),$lo=o(" \u2014 "),kI=a("a"),klo=o("HubertConfig"),Slo=o(" (Hubert model)"),Rlo=l(),Eg=a("li"),uce=a("strong"),Plo=o("ibert"),Blo=o(" \u2014 "),SI=a("a"),Ilo=o("IBertConfig"),Nlo=o(" (I-BERT model)"),qlo=l(),Cg=a("li"),pce=a("strong"),jlo=o("imagegpt"),Dlo=o(" \u2014 "),RI=a("a"),Glo=o("ImageGPTConfig"),Olo=o(" (ImageGPT model)"),Vlo=l(),wg=a("li"),_ce=a("strong"),Xlo=o("layoutlm"),zlo=o(" \u2014 "),PI=a("a"),Qlo=o("LayoutLMConfig"),Wlo=o(" (LayoutLM model)"),Ulo=l(),Ag=a("li"),bce=a("strong"),Hlo=o("layoutlmv2"),Jlo=o(" \u2014 "),BI=a("a"),Ylo=o("LayoutLMv2Config"),Klo=o(" (LayoutLMv2 model)"),Zlo=l(),Lg=a("li"),vce=a("strong"),eio=o("layoutlmv3"),oio=o(" \u2014 "),II=a("a"),rio=o("LayoutLMv3Config"),tio=o(" (LayoutLMv3 model)"),aio=l(),yg=a("li"),Fce=a("strong"),nio=o("led"),sio=o(" \u2014 "),NI=a("a"),lio=o("LEDConfig"),iio=o(" (LED model)"),dio=l(),xg=a("li"),Tce=a("strong"),cio=o("levit"),mio=o(" \u2014 "),qI=a("a"),fio=o("LevitConfig"),gio=o(" (LeViT model)"),hio=l(),$g=a("li"),Mce=a("strong"),uio=o("longformer"),pio=o(" \u2014 "),jI=a("a"),_io=o("LongformerConfig"),bio=o(" (Longformer model)"),vio=l(),kg=a("li"),Ece=a("strong"),Fio=o("longt5"),Tio=o(" \u2014 "),DI=a("a"),Mio=o("LongT5Config"),Eio=o(" (LongT5 model)"),Cio=l(),Sg=a("li"),Cce=a("strong"),wio=o("luke"),Aio=o(" \u2014 "),GI=a("a"),Lio=o("LukeConfig"),yio=o(" (LUKE model)"),xio=l(),Rg=a("li"),wce=a("strong"),$io=o("lxmert"),kio=o(" \u2014 "),OI=a("a"),Sio=o("LxmertConfig"),Rio=o(" (LXMERT model)"),Pio=l(),Pg=a("li"),Ace=a("strong"),Bio=o("m2m_100"),Iio=o(" \u2014 "),VI=a("a"),Nio=o("M2M100Config"),qio=o(" (M2M100 model)"),jio=l(),Bg=a("li"),Lce=a("strong"),Dio=o("marian"),Gio=o(" \u2014 "),XI=a("a"),Oio=o("MarianConfig"),Vio=o(" (Marian model)"),Xio=l(),Ig=a("li"),yce=a("strong"),zio=o("maskformer"),Qio=o(" \u2014 "),zI=a("a"),Wio=o("MaskFormerConfig"),Uio=o(" (MaskFormer model)"),Hio=l(),Ng=a("li"),xce=a("strong"),Jio=o("mbart"),Yio=o(" \u2014 "),QI=a("a"),Kio=o("MBartConfig"),Zio=o(" (mBART model)"),edo=l(),qg=a("li"),$ce=a("strong"),odo=o("mctct"),rdo=o(" \u2014 "),WI=a("a"),tdo=o("MCTCTConfig"),ado=o(" (M-CTC-T model)"),ndo=l(),jg=a("li"),kce=a("strong"),sdo=o("megatron-bert"),ldo=o(" \u2014 "),UI=a("a"),ido=o("MegatronBertConfig"),ddo=o(" (Megatron-BERT model)"),cdo=l(),Dg=a("li"),Sce=a("strong"),mdo=o("mobilebert"),fdo=o(" \u2014 "),HI=a("a"),gdo=o("MobileBertConfig"),hdo=o(" (MobileBERT model)"),udo=l(),Gg=a("li"),Rce=a("strong"),pdo=o("mobilevit"),_do=o(" \u2014 "),JI=a("a"),bdo=o("MobileViTConfig"),vdo=o(" (MobileViT model)"),Fdo=l(),Og=a("li"),Pce=a("strong"),Tdo=o("mpnet"),Mdo=o(" \u2014 "),YI=a("a"),Edo=o("MPNetConfig"),Cdo=o(" (MPNet model)"),wdo=l(),Vg=a("li"),Bce=a("strong"),Ado=o("mt5"),Ldo=o(" \u2014 "),KI=a("a"),ydo=o("MT5Config"),xdo=o(" (MT5 model)"),$do=l(),Xg=a("li"),Ice=a("strong"),kdo=o("mvp"),Sdo=o(" \u2014 "),ZI=a("a"),Rdo=o("MvpConfig"),Pdo=o(" (MVP model)"),Bdo=l(),zg=a("li"),Nce=a("strong"),Ido=o("nezha"),Ndo=o(" \u2014 "),eN=a("a"),qdo=o("NezhaConfig"),jdo=o(" (Nezha model)"),Ddo=l(),Qg=a("li"),qce=a("strong"),Gdo=o("nystromformer"),Odo=o(" \u2014 "),oN=a("a"),Vdo=o("NystromformerConfig"),Xdo=o(" (Nystr\xF6mformer model)"),zdo=l(),Wg=a("li"),jce=a("strong"),Qdo=o("openai-gpt"),Wdo=o(" \u2014 "),rN=a("a"),Udo=o("OpenAIGPTConfig"),Hdo=o(" (OpenAI GPT model)"),Jdo=l(),Ug=a("li"),Dce=a("strong"),Ydo=o("opt"),Kdo=o(" \u2014 "),tN=a("a"),Zdo=o("OPTConfig"),eco=o(" (OPT model)"),oco=l(),Hg=a("li"),Gce=a("strong"),rco=o("owlvit"),tco=o(" \u2014 "),aN=a("a"),aco=o("OwlViTConfig"),nco=o(" (OWL-ViT model)"),sco=l(),Jg=a("li"),Oce=a("strong"),lco=o("pegasus"),ico=o(" \u2014 "),nN=a("a"),dco=o("PegasusConfig"),cco=o(" (Pegasus model)"),mco=l(),Yg=a("li"),Vce=a("strong"),fco=o("pegasus_x"),gco=o(" \u2014 "),sN=a("a"),hco=o("PegasusXConfig"),uco=o(" (PEGASUS-X model)"),pco=l(),Kg=a("li"),Xce=a("strong"),_co=o("perceiver"),bco=o(" \u2014 "),lN=a("a"),vco=o("PerceiverConfig"),Fco=o(" (Perceiver model)"),Tco=l(),Zg=a("li"),zce=a("strong"),Mco=o("plbart"),Eco=o(" \u2014 "),iN=a("a"),Cco=o("PLBartConfig"),wco=o(" (PLBart model)"),Aco=l(),eh=a("li"),Qce=a("strong"),Lco=o("poolformer"),yco=o(" \u2014 "),dN=a("a"),xco=o("PoolFormerConfig"),$co=o(" (PoolFormer model)"),kco=l(),oh=a("li"),Wce=a("strong"),Sco=o("prophetnet"),Rco=o(" \u2014 "),cN=a("a"),Pco=o("ProphetNetConfig"),Bco=o(" (ProphetNet model)"),Ico=l(),rh=a("li"),Uce=a("strong"),Nco=o("qdqbert"),qco=o(" \u2014 "),mN=a("a"),jco=o("QDQBertConfig"),Dco=o(" (QDQBert model)"),Gco=l(),th=a("li"),Hce=a("strong"),Oco=o("rag"),Vco=o(" \u2014 "),fN=a("a"),Xco=o("RagConfig"),zco=o(" (RAG model)"),Qco=l(),ah=a("li"),Jce=a("strong"),Wco=o("realm"),Uco=o(" \u2014 "),gN=a("a"),Hco=o("RealmConfig"),Jco=o(" (REALM model)"),Yco=l(),nh=a("li"),Yce=a("strong"),Kco=o("reformer"),Zco=o(" \u2014 "),hN=a("a"),emo=o("ReformerConfig"),omo=o(" (Reformer model)"),rmo=l(),sh=a("li"),Kce=a("strong"),tmo=o("regnet"),amo=o(" \u2014 "),uN=a("a"),nmo=o("RegNetConfig"),smo=o(" (RegNet model)"),lmo=l(),lh=a("li"),Zce=a("strong"),imo=o("rembert"),dmo=o(" \u2014 "),pN=a("a"),cmo=o("RemBertConfig"),mmo=o(" (RemBERT model)"),fmo=l(),ih=a("li"),eme=a("strong"),gmo=o("resnet"),hmo=o(" \u2014 "),_N=a("a"),umo=o("ResNetConfig"),pmo=o(" (ResNet model)"),_mo=l(),dh=a("li"),ome=a("strong"),bmo=o("retribert"),vmo=o(" \u2014 "),bN=a("a"),Fmo=o("RetriBertConfig"),Tmo=o(" (RetriBERT model)"),Mmo=l(),ch=a("li"),rme=a("strong"),Emo=o("roberta"),Cmo=o(" \u2014 "),vN=a("a"),wmo=o("RobertaConfig"),Amo=o(" (RoBERTa model)"),Lmo=l(),mh=a("li"),tme=a("strong"),ymo=o("roformer"),xmo=o(" \u2014 "),FN=a("a"),$mo=o("RoFormerConfig"),kmo=o(" (RoFormer model)"),Smo=l(),fh=a("li"),ame=a("strong"),Rmo=o("segformer"),Pmo=o(" \u2014 "),TN=a("a"),Bmo=o("SegformerConfig"),Imo=o(" (SegFormer model)"),Nmo=l(),gh=a("li"),nme=a("strong"),qmo=o("sew"),jmo=o(" \u2014 "),MN=a("a"),Dmo=o("SEWConfig"),Gmo=o(" (SEW model)"),Omo=l(),hh=a("li"),sme=a("strong"),Vmo=o("sew-d"),Xmo=o(" \u2014 "),EN=a("a"),zmo=o("SEWDConfig"),Qmo=o(" (SEW-D model)"),Wmo=l(),uh=a("li"),lme=a("strong"),Umo=o("speech-encoder-decoder"),Hmo=o(" \u2014 "),CN=a("a"),Jmo=o("SpeechEncoderDecoderConfig"),Ymo=o(" (Speech Encoder decoder model)"),Kmo=l(),ph=a("li"),ime=a("strong"),Zmo=o("speech_to_text"),efo=o(" \u2014 "),wN=a("a"),ofo=o("Speech2TextConfig"),rfo=o(" (Speech2Text model)"),tfo=l(),_h=a("li"),dme=a("strong"),afo=o("speech_to_text_2"),nfo=o(" \u2014 "),AN=a("a"),sfo=o("Speech2Text2Config"),lfo=o(" (Speech2Text2 model)"),ifo=l(),bh=a("li"),cme=a("strong"),dfo=o("splinter"),cfo=o(" \u2014 "),LN=a("a"),mfo=o("SplinterConfig"),ffo=o(" (Splinter model)"),gfo=l(),vh=a("li"),mme=a("strong"),hfo=o("squeezebert"),ufo=o(" \u2014 "),yN=a("a"),pfo=o("SqueezeBertConfig"),_fo=o(" (SqueezeBERT model)"),bfo=l(),Fh=a("li"),fme=a("strong"),vfo=o("swin"),Ffo=o(" \u2014 "),xN=a("a"),Tfo=o("SwinConfig"),Mfo=o(" (Swin Transformer model)"),Efo=l(),Th=a("li"),gme=a("strong"),Cfo=o("swinv2"),wfo=o(" \u2014 "),$N=a("a"),Afo=o("Swinv2Config"),Lfo=o(" (Swin Transformer V2 model)"),yfo=l(),Mh=a("li"),hme=a("strong"),xfo=o("t5"),$fo=o(" \u2014 "),kN=a("a"),kfo=o("T5Config"),Sfo=o(" (T5 model)"),Rfo=l(),Eh=a("li"),ume=a("strong"),Pfo=o("tapas"),Bfo=o(" \u2014 "),SN=a("a"),Ifo=o("TapasConfig"),Nfo=o(" (TAPAS model)"),qfo=l(),Ch=a("li"),pme=a("strong"),jfo=o("trajectory_transformer"),Dfo=o(" \u2014 "),RN=a("a"),Gfo=o("TrajectoryTransformerConfig"),Ofo=o(" (Trajectory Transformer model)"),Vfo=l(),wh=a("li"),_me=a("strong"),Xfo=o("transfo-xl"),zfo=o(" \u2014 "),PN=a("a"),Qfo=o("TransfoXLConfig"),Wfo=o(" (Transformer-XL model)"),Ufo=l(),Ah=a("li"),bme=a("strong"),Hfo=o("trocr"),Jfo=o(" \u2014 "),BN=a("a"),Yfo=o("TrOCRConfig"),Kfo=o(" (TrOCR model)"),Zfo=l(),Lh=a("li"),vme=a("strong"),ego=o("unispeech"),ogo=o(" \u2014 "),IN=a("a"),rgo=o("UniSpeechConfig"),tgo=o(" (UniSpeech model)"),ago=l(),yh=a("li"),Fme=a("strong"),ngo=o("unispeech-sat"),sgo=o(" \u2014 "),NN=a("a"),lgo=o("UniSpeechSatConfig"),igo=o(" (UniSpeechSat model)"),dgo=l(),xh=a("li"),Tme=a("strong"),cgo=o("van"),mgo=o(" \u2014 "),qN=a("a"),fgo=o("VanConfig"),ggo=o(" (VAN model)"),hgo=l(),$h=a("li"),Mme=a("strong"),ugo=o("videomae"),pgo=o(" \u2014 "),jN=a("a"),_go=o("VideoMAEConfig"),bgo=o(" (VideoMAE model)"),vgo=l(),kh=a("li"),Eme=a("strong"),Fgo=o("vilt"),Tgo=o(" \u2014 "),DN=a("a"),Mgo=o("ViltConfig"),Ego=o(" (ViLT model)"),Cgo=l(),Sh=a("li"),Cme=a("strong"),wgo=o("vision-encoder-decoder"),Ago=o(" \u2014 "),GN=a("a"),Lgo=o("VisionEncoderDecoderConfig"),ygo=o(" (Vision Encoder decoder model)"),xgo=l(),Rh=a("li"),wme=a("strong"),$go=o("vision-text-dual-encoder"),kgo=o(" \u2014 "),ON=a("a"),Sgo=o("VisionTextDualEncoderConfig"),Rgo=o(" (VisionTextDualEncoder model)"),Pgo=l(),Ph=a("li"),Ame=a("strong"),Bgo=o("visual_bert"),Igo=o(" \u2014 "),VN=a("a"),Ngo=o("VisualBertConfig"),qgo=o(" (VisualBERT model)"),jgo=l(),Bh=a("li"),Lme=a("strong"),Dgo=o("vit"),Ggo=o(" \u2014 "),XN=a("a"),Ogo=o("ViTConfig"),Vgo=o(" (ViT model)"),Xgo=l(),Ih=a("li"),yme=a("strong"),zgo=o("vit_mae"),Qgo=o(" \u2014 "),zN=a("a"),Wgo=o("ViTMAEConfig"),Ugo=o(" (ViTMAE model)"),Hgo=l(),Nh=a("li"),xme=a("strong"),Jgo=o("wav2vec2"),Ygo=o(" \u2014 "),QN=a("a"),Kgo=o("Wav2Vec2Config"),Zgo=o(" (Wav2Vec2 model)"),eho=l(),qh=a("li"),$me=a("strong"),oho=o("wav2vec2-conformer"),rho=o(" \u2014 "),WN=a("a"),tho=o("Wav2Vec2ConformerConfig"),aho=o(" (Wav2Vec2-Conformer model)"),nho=l(),jh=a("li"),kme=a("strong"),sho=o("wavlm"),lho=o(" \u2014 "),UN=a("a"),iho=o("WavLMConfig"),dho=o(" (WavLM model)"),cho=l(),Dh=a("li"),Sme=a("strong"),mho=o("xclip"),fho=o(" \u2014 "),HN=a("a"),gho=o("XCLIPConfig"),hho=o(" (X-CLIP model)"),uho=l(),Gh=a("li"),Rme=a("strong"),pho=o("xglm"),_ho=o(" \u2014 "),JN=a("a"),bho=o("XGLMConfig"),vho=o(" (XGLM model)"),Fho=l(),Oh=a("li"),Pme=a("strong"),Tho=o("xlm"),Mho=o(" \u2014 "),YN=a("a"),Eho=o("XLMConfig"),Cho=o(" (XLM model)"),who=l(),Vh=a("li"),Bme=a("strong"),Aho=o("xlm-prophetnet"),Lho=o(" \u2014 "),KN=a("a"),yho=o("XLMProphetNetConfig"),xho=o(" (XLM-ProphetNet model)"),$ho=l(),Xh=a("li"),Ime=a("strong"),kho=o("xlm-roberta"),Sho=o(" \u2014 "),ZN=a("a"),Rho=o("XLMRobertaConfig"),Pho=o(" (XLM-RoBERTa model)"),Bho=l(),zh=a("li"),Nme=a("strong"),Iho=o("xlm-roberta-xl"),Nho=o(" \u2014 "),eq=a("a"),qho=o("XLMRobertaXLConfig"),jho=o(" (XLM-RoBERTa-XL model)"),Dho=l(),Qh=a("li"),qme=a("strong"),Gho=o("xlnet"),Oho=o(" \u2014 "),oq=a("a"),Vho=o("XLNetConfig"),Xho=o(" (XLNet model)"),zho=l(),Wh=a("li"),jme=a("strong"),Qho=o("yolos"),Who=o(" \u2014 "),rq=a("a"),Uho=o("YolosConfig"),Hho=o(" (YOLOS model)"),Jho=l(),Uh=a("li"),Dme=a("strong"),Yho=o("yoso"),Kho=o(" \u2014 "),tq=a("a"),Zho=o("YosoConfig"),euo=o(" (YOSO model)"),ouo=l(),F(Hh.$$.fragment),ruo=l(),Jh=a("div"),F(j9.$$.fragment),tuo=l(),Gme=a("p"),auo=o("Register a new configuration for this class."),_Ke=l(),fd=a("h2"),Yh=a("a"),Ome=a("span"),F(D9.$$.fragment),nuo=l(),Vme=a("span"),suo=o("AutoTokenizer"),bKe=l(),ko=a("div"),F(G9.$$.fragment),luo=l(),O9=a("p"),iuo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aq=a("a"),duo=o("AutoTokenizer.from_pretrained()"),cuo=o(" class method."),muo=l(),V9=a("p"),fuo=o("This class cannot be instantiated directly using "),Xme=a("code"),guo=o("__init__()"),huo=o(" (throws an error)."),uuo=l(),Br=a("div"),F(X9.$$.fragment),puo=l(),zme=a("p"),_uo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),buo=l(),Ua=a("p"),vuo=o("The tokenizer class to instantiate is selected based on the "),Qme=a("code"),Fuo=o("model_type"),Tuo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),Muo=o("pretrained_model_name_or_path"),Euo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),Cuo=o("pretrained_model_name_or_path"),wuo=o(":"),Auo=l(),k=a("ul"),as=a("li"),Hme=a("strong"),Luo=o("albert"),yuo=o(" \u2014 "),nq=a("a"),xuo=o("AlbertTokenizer"),$uo=o(" or "),sq=a("a"),kuo=o("AlbertTokenizerFast"),Suo=o(" (ALBERT model)"),Ruo=l(),ns=a("li"),Jme=a("strong"),Puo=o("bart"),Buo=o(" \u2014 "),lq=a("a"),Iuo=o("BartTokenizer"),Nuo=o(" or "),iq=a("a"),quo=o("BartTokenizerFast"),juo=o(" (BART model)"),Duo=l(),ss=a("li"),Yme=a("strong"),Guo=o("barthez"),Ouo=o(" \u2014 "),dq=a("a"),Vuo=o("BarthezTokenizer"),Xuo=o(" or "),cq=a("a"),zuo=o("BarthezTokenizerFast"),Quo=o(" (BARThez model)"),Wuo=l(),Kh=a("li"),Kme=a("strong"),Uuo=o("bartpho"),Huo=o(" \u2014 "),mq=a("a"),Juo=o("BartphoTokenizer"),Yuo=o(" (BARTpho model)"),Kuo=l(),ls=a("li"),Zme=a("strong"),Zuo=o("bert"),epo=o(" \u2014 "),fq=a("a"),opo=o("BertTokenizer"),rpo=o(" or "),gq=a("a"),tpo=o("BertTokenizerFast"),apo=o(" (BERT model)"),npo=l(),Zh=a("li"),efe=a("strong"),spo=o("bert-generation"),lpo=o(" \u2014 "),hq=a("a"),ipo=o("BertGenerationTokenizer"),dpo=o(" (Bert Generation model)"),cpo=l(),eu=a("li"),ofe=a("strong"),mpo=o("bert-japanese"),fpo=o(" \u2014 "),uq=a("a"),gpo=o("BertJapaneseTokenizer"),hpo=o(" (BertJapanese model)"),upo=l(),ou=a("li"),rfe=a("strong"),ppo=o("bertweet"),_po=o(" \u2014 "),pq=a("a"),bpo=o("BertweetTokenizer"),vpo=o(" (BERTweet model)"),Fpo=l(),is=a("li"),tfe=a("strong"),Tpo=o("big_bird"),Mpo=o(" \u2014 "),_q=a("a"),Epo=o("BigBirdTokenizer"),Cpo=o(" or "),bq=a("a"),wpo=o("BigBirdTokenizerFast"),Apo=o(" (BigBird model)"),Lpo=l(),ds=a("li"),afe=a("strong"),ypo=o("bigbird_pegasus"),xpo=o(" \u2014 "),vq=a("a"),$po=o("PegasusTokenizer"),kpo=o(" or "),Fq=a("a"),Spo=o("PegasusTokenizerFast"),Rpo=o(" (BigBird-Pegasus model)"),Ppo=l(),cs=a("li"),nfe=a("strong"),Bpo=o("blenderbot"),Ipo=o(" \u2014 "),Tq=a("a"),Npo=o("BlenderbotTokenizer"),qpo=o(" or "),Mq=a("a"),jpo=o("BlenderbotTokenizerFast"),Dpo=o(" (Blenderbot model)"),Gpo=l(),ru=a("li"),sfe=a("strong"),Opo=o("blenderbot-small"),Vpo=o(" \u2014 "),Eq=a("a"),Xpo=o("BlenderbotSmallTokenizer"),zpo=o(" (BlenderbotSmall model)"),Qpo=l(),tu=a("li"),lfe=a("strong"),Wpo=o("bloom"),Upo=o(" \u2014 "),Cq=a("a"),Hpo=o("BloomTokenizerFast"),Jpo=o(" (BLOOM model)"),Ypo=l(),au=a("li"),ife=a("strong"),Kpo=o("byt5"),Zpo=o(" \u2014 "),wq=a("a"),e_o=o("ByT5Tokenizer"),o_o=o(" (ByT5 model)"),r_o=l(),ms=a("li"),dfe=a("strong"),t_o=o("camembert"),a_o=o(" \u2014 "),Aq=a("a"),n_o=o("CamembertTokenizer"),s_o=o(" or "),Lq=a("a"),l_o=o("CamembertTokenizerFast"),i_o=o(" (CamemBERT model)"),d_o=l(),nu=a("li"),cfe=a("strong"),c_o=o("canine"),m_o=o(" \u2014 "),yq=a("a"),f_o=o("CanineTokenizer"),g_o=o(" (CANINE model)"),h_o=l(),fs=a("li"),mfe=a("strong"),u_o=o("clip"),p_o=o(" \u2014 "),xq=a("a"),__o=o("CLIPTokenizer"),b_o=o(" or "),$q=a("a"),v_o=o("CLIPTokenizerFast"),F_o=o(" (CLIP model)"),T_o=l(),gs=a("li"),ffe=a("strong"),M_o=o("codegen"),E_o=o(" \u2014 "),kq=a("a"),C_o=o("CodeGenTokenizer"),w_o=o(" or "),Sq=a("a"),A_o=o("CodeGenTokenizerFast"),L_o=o(" (CodeGen model)"),y_o=l(),hs=a("li"),gfe=a("strong"),x_o=o("convbert"),$_o=o(" \u2014 "),Rq=a("a"),k_o=o("ConvBertTokenizer"),S_o=o(" or "),Pq=a("a"),R_o=o("ConvBertTokenizerFast"),P_o=o(" (ConvBERT model)"),B_o=l(),us=a("li"),hfe=a("strong"),I_o=o("cpm"),N_o=o(" \u2014 "),Bq=a("a"),q_o=o("CpmTokenizer"),j_o=o(" or "),Iq=a("a"),D_o=o("CpmTokenizerFast"),G_o=o(" (CPM model)"),O_o=l(),su=a("li"),ufe=a("strong"),V_o=o("ctrl"),X_o=o(" \u2014 "),Nq=a("a"),z_o=o("CTRLTokenizer"),Q_o=o(" (CTRL model)"),W_o=l(),ps=a("li"),pfe=a("strong"),U_o=o("data2vec-text"),H_o=o(" \u2014 "),qq=a("a"),J_o=o("RobertaTokenizer"),Y_o=o(" or "),jq=a("a"),K_o=o("RobertaTokenizerFast"),Z_o=o(" (Data2VecText model)"),ebo=l(),_s=a("li"),_fe=a("strong"),obo=o("deberta"),rbo=o(" \u2014 "),Dq=a("a"),tbo=o("DebertaTokenizer"),abo=o(" or "),Gq=a("a"),nbo=o("DebertaTokenizerFast"),sbo=o(" (DeBERTa model)"),lbo=l(),bs=a("li"),bfe=a("strong"),ibo=o("deberta-v2"),dbo=o(" \u2014 "),Oq=a("a"),cbo=o("DebertaV2Tokenizer"),mbo=o(" or "),Vq=a("a"),fbo=o("DebertaV2TokenizerFast"),gbo=o(" (DeBERTa-v2 model)"),hbo=l(),vs=a("li"),vfe=a("strong"),ubo=o("distilbert"),pbo=o(" \u2014 "),Xq=a("a"),_bo=o("DistilBertTokenizer"),bbo=o(" or "),zq=a("a"),vbo=o("DistilBertTokenizerFast"),Fbo=o(" (DistilBERT model)"),Tbo=l(),Fs=a("li"),Ffe=a("strong"),Mbo=o("dpr"),Ebo=o(" \u2014 "),Qq=a("a"),Cbo=o("DPRQuestionEncoderTokenizer"),wbo=o(" or "),Wq=a("a"),Abo=o("DPRQuestionEncoderTokenizerFast"),Lbo=o(" (DPR model)"),ybo=l(),Ts=a("li"),Tfe=a("strong"),xbo=o("electra"),$bo=o(" \u2014 "),Uq=a("a"),kbo=o("ElectraTokenizer"),Sbo=o(" or "),Hq=a("a"),Rbo=o("ElectraTokenizerFast"),Pbo=o(" (ELECTRA model)"),Bbo=l(),Ms=a("li"),Mfe=a("strong"),Ibo=o("ernie"),Nbo=o(" \u2014 "),Jq=a("a"),qbo=o("BertTokenizer"),jbo=o(" or "),Yq=a("a"),Dbo=o("BertTokenizerFast"),Gbo=o(" (ERNIE model)"),Obo=l(),lu=a("li"),Efe=a("strong"),Vbo=o("flaubert"),Xbo=o(" \u2014 "),Kq=a("a"),zbo=o("FlaubertTokenizer"),Qbo=o(" (FlauBERT model)"),Wbo=l(),Es=a("li"),Cfe=a("strong"),Ubo=o("fnet"),Hbo=o(" \u2014 "),Zq=a("a"),Jbo=o("FNetTokenizer"),Ybo=o(" or "),ej=a("a"),Kbo=o("FNetTokenizerFast"),Zbo=o(" (FNet model)"),e2o=l(),iu=a("li"),wfe=a("strong"),o2o=o("fsmt"),r2o=o(" \u2014 "),oj=a("a"),t2o=o("FSMTTokenizer"),a2o=o(" (FairSeq Machine-Translation model)"),n2o=l(),Cs=a("li"),Afe=a("strong"),s2o=o("funnel"),l2o=o(" \u2014 "),rj=a("a"),i2o=o("FunnelTokenizer"),d2o=o(" or "),tj=a("a"),c2o=o("FunnelTokenizerFast"),m2o=o(" (Funnel Transformer model)"),f2o=l(),ws=a("li"),Lfe=a("strong"),g2o=o("gpt2"),h2o=o(" \u2014 "),aj=a("a"),u2o=o("GPT2Tokenizer"),p2o=o(" or "),nj=a("a"),_2o=o("GPT2TokenizerFast"),b2o=o(" (OpenAI GPT-2 model)"),v2o=l(),As=a("li"),yfe=a("strong"),F2o=o("gpt_neo"),T2o=o(" \u2014 "),sj=a("a"),M2o=o("GPT2Tokenizer"),E2o=o(" or "),lj=a("a"),C2o=o("GPT2TokenizerFast"),w2o=o(" (GPT Neo model)"),A2o=l(),du=a("li"),xfe=a("strong"),L2o=o("gpt_neox"),y2o=o(" \u2014 "),ij=a("a"),x2o=o("GPTNeoXTokenizerFast"),$2o=o(" (GPT NeoX model)"),k2o=l(),cu=a("li"),$fe=a("strong"),S2o=o("gpt_neox_japanese"),R2o=o(" \u2014 "),dj=a("a"),P2o=o("GPTNeoXJapaneseTokenizer"),B2o=o(" (GPT NeoX Japanese model)"),I2o=l(),Ls=a("li"),kfe=a("strong"),N2o=o("gptj"),q2o=o(" \u2014 "),cj=a("a"),j2o=o("GPT2Tokenizer"),D2o=o(" or "),mj=a("a"),G2o=o("GPT2TokenizerFast"),O2o=o(" (GPT-J model)"),V2o=l(),ys=a("li"),Sfe=a("strong"),X2o=o("groupvit"),z2o=o(" \u2014 "),fj=a("a"),Q2o=o("CLIPTokenizer"),W2o=o(" or "),gj=a("a"),U2o=o("CLIPTokenizerFast"),H2o=o(" (GroupViT model)"),J2o=l(),xs=a("li"),Rfe=a("strong"),Y2o=o("herbert"),K2o=o(" \u2014 "),hj=a("a"),Z2o=o("HerbertTokenizer"),e1o=o(" or "),uj=a("a"),o1o=o("HerbertTokenizerFast"),r1o=o(" (HerBERT model)"),t1o=l(),mu=a("li"),Pfe=a("strong"),a1o=o("hubert"),n1o=o(" \u2014 "),pj=a("a"),s1o=o("Wav2Vec2CTCTokenizer"),l1o=o(" (Hubert model)"),i1o=l(),$s=a("li"),Bfe=a("strong"),d1o=o("ibert"),c1o=o(" \u2014 "),_j=a("a"),m1o=o("RobertaTokenizer"),f1o=o(" or "),bj=a("a"),g1o=o("RobertaTokenizerFast"),h1o=o(" (I-BERT model)"),u1o=l(),ks=a("li"),Ife=a("strong"),p1o=o("layoutlm"),_1o=o(" \u2014 "),vj=a("a"),b1o=o("LayoutLMTokenizer"),v1o=o(" or "),Fj=a("a"),F1o=o("LayoutLMTokenizerFast"),T1o=o(" (LayoutLM model)"),M1o=l(),Ss=a("li"),Nfe=a("strong"),E1o=o("layoutlmv2"),C1o=o(" \u2014 "),Tj=a("a"),w1o=o("LayoutLMv2Tokenizer"),A1o=o(" or "),Mj=a("a"),L1o=o("LayoutLMv2TokenizerFast"),y1o=o(" (LayoutLMv2 model)"),x1o=l(),Rs=a("li"),qfe=a("strong"),$1o=o("layoutlmv3"),k1o=o(" \u2014 "),Ej=a("a"),S1o=o("LayoutLMv3Tokenizer"),R1o=o(" or "),Cj=a("a"),P1o=o("LayoutLMv3TokenizerFast"),B1o=o(" (LayoutLMv3 model)"),I1o=l(),Ps=a("li"),jfe=a("strong"),N1o=o("layoutxlm"),q1o=o(" \u2014 "),wj=a("a"),j1o=o("LayoutXLMTokenizer"),D1o=o(" or "),Aj=a("a"),G1o=o("LayoutXLMTokenizerFast"),O1o=o(" (LayoutXLM model)"),V1o=l(),Bs=a("li"),Dfe=a("strong"),X1o=o("led"),z1o=o(" \u2014 "),Lj=a("a"),Q1o=o("LEDTokenizer"),W1o=o(" or "),yj=a("a"),U1o=o("LEDTokenizerFast"),H1o=o(" (LED model)"),J1o=l(),Is=a("li"),Gfe=a("strong"),Y1o=o("longformer"),K1o=o(" \u2014 "),xj=a("a"),Z1o=o("LongformerTokenizer"),evo=o(" or "),$j=a("a"),ovo=o("LongformerTokenizerFast"),rvo=o(" (Longformer model)"),tvo=l(),Ns=a("li"),Ofe=a("strong"),avo=o("longt5"),nvo=o(" \u2014 "),kj=a("a"),svo=o("T5Tokenizer"),lvo=o(" or "),Sj=a("a"),ivo=o("T5TokenizerFast"),dvo=o(" (LongT5 model)"),cvo=l(),fu=a("li"),Vfe=a("strong"),mvo=o("luke"),fvo=o(" \u2014 "),Rj=a("a"),gvo=o("LukeTokenizer"),hvo=o(" (LUKE model)"),uvo=l(),qs=a("li"),Xfe=a("strong"),pvo=o("lxmert"),_vo=o(" \u2014 "),Pj=a("a"),bvo=o("LxmertTokenizer"),vvo=o(" or "),Bj=a("a"),Fvo=o("LxmertTokenizerFast"),Tvo=o(" (LXMERT model)"),Mvo=l(),gu=a("li"),zfe=a("strong"),Evo=o("m2m_100"),Cvo=o(" \u2014 "),Ij=a("a"),wvo=o("M2M100Tokenizer"),Avo=o(" (M2M100 model)"),Lvo=l(),hu=a("li"),Qfe=a("strong"),yvo=o("marian"),xvo=o(" \u2014 "),Nj=a("a"),$vo=o("MarianTokenizer"),kvo=o(" (Marian model)"),Svo=l(),js=a("li"),Wfe=a("strong"),Rvo=o("mbart"),Pvo=o(" \u2014 "),qj=a("a"),Bvo=o("MBartTokenizer"),Ivo=o(" or "),jj=a("a"),Nvo=o("MBartTokenizerFast"),qvo=o(" (mBART model)"),jvo=l(),Ds=a("li"),Ufe=a("strong"),Dvo=o("mbart50"),Gvo=o(" \u2014 "),Dj=a("a"),Ovo=o("MBart50Tokenizer"),Vvo=o(" or "),Gj=a("a"),Xvo=o("MBart50TokenizerFast"),zvo=o(" (mBART-50 model)"),Qvo=l(),Gs=a("li"),Hfe=a("strong"),Wvo=o("megatron-bert"),Uvo=o(" \u2014 "),Oj=a("a"),Hvo=o("BertTokenizer"),Jvo=o(" or "),Vj=a("a"),Yvo=o("BertTokenizerFast"),Kvo=o(" (Megatron-BERT model)"),Zvo=l(),uu=a("li"),Jfe=a("strong"),eFo=o("mluke"),oFo=o(" \u2014 "),Xj=a("a"),rFo=o("MLukeTokenizer"),tFo=o(" (mLUKE model)"),aFo=l(),Os=a("li"),Yfe=a("strong"),nFo=o("mobilebert"),sFo=o(" \u2014 "),zj=a("a"),lFo=o("MobileBertTokenizer"),iFo=o(" or "),Qj=a("a"),dFo=o("MobileBertTokenizerFast"),cFo=o(" (MobileBERT model)"),mFo=l(),Vs=a("li"),Kfe=a("strong"),fFo=o("mpnet"),gFo=o(" \u2014 "),Wj=a("a"),hFo=o("MPNetTokenizer"),uFo=o(" or "),Uj=a("a"),pFo=o("MPNetTokenizerFast"),_Fo=o(" (MPNet model)"),bFo=l(),Xs=a("li"),Zfe=a("strong"),vFo=o("mt5"),FFo=o(" \u2014 "),Hj=a("a"),TFo=o("MT5Tokenizer"),MFo=o(" or "),Jj=a("a"),EFo=o("MT5TokenizerFast"),CFo=o(" (MT5 model)"),wFo=l(),zs=a("li"),ege=a("strong"),AFo=o("mvp"),LFo=o(" \u2014 "),Yj=a("a"),yFo=o("MvpTokenizer"),xFo=o(" or "),Kj=a("a"),$Fo=o("MvpTokenizerFast"),kFo=o(" (MVP model)"),SFo=l(),Qs=a("li"),oge=a("strong"),RFo=o("nezha"),PFo=o(" \u2014 "),Zj=a("a"),BFo=o("BertTokenizer"),IFo=o(" or "),eD=a("a"),NFo=o("BertTokenizerFast"),qFo=o(" (Nezha model)"),jFo=l(),Ws=a("li"),rge=a("strong"),DFo=o("nllb"),GFo=o(" \u2014 "),oD=a("a"),OFo=o("NllbTokenizer"),VFo=o(" or "),rD=a("a"),XFo=o("NllbTokenizerFast"),zFo=o(" (NLLB model)"),QFo=l(),Us=a("li"),tge=a("strong"),WFo=o("nystromformer"),UFo=o(" \u2014 "),tD=a("a"),HFo=o("AlbertTokenizer"),JFo=o(" or "),aD=a("a"),YFo=o("AlbertTokenizerFast"),KFo=o(" (Nystr\xF6mformer model)"),ZFo=l(),Hs=a("li"),age=a("strong"),eTo=o("openai-gpt"),oTo=o(" \u2014 "),nD=a("a"),rTo=o("OpenAIGPTTokenizer"),tTo=o(" or "),sD=a("a"),aTo=o("OpenAIGPTTokenizerFast"),nTo=o(" (OpenAI GPT model)"),sTo=l(),pu=a("li"),nge=a("strong"),lTo=o("opt"),iTo=o(" \u2014 "),lD=a("a"),dTo=o("GPT2Tokenizer"),cTo=o(" (OPT model)"),mTo=l(),Js=a("li"),sge=a("strong"),fTo=o("owlvit"),gTo=o(" \u2014 "),iD=a("a"),hTo=o("CLIPTokenizer"),uTo=o(" or "),dD=a("a"),pTo=o("CLIPTokenizerFast"),_To=o(" (OWL-ViT model)"),bTo=l(),Ys=a("li"),lge=a("strong"),vTo=o("pegasus"),FTo=o(" \u2014 "),cD=a("a"),TTo=o("PegasusTokenizer"),MTo=o(" or "),mD=a("a"),ETo=o("PegasusTokenizerFast"),CTo=o(" (Pegasus model)"),wTo=l(),_u=a("li"),ige=a("strong"),ATo=o("perceiver"),LTo=o(" \u2014 "),fD=a("a"),yTo=o("PerceiverTokenizer"),xTo=o(" (Perceiver model)"),$To=l(),bu=a("li"),dge=a("strong"),kTo=o("phobert"),STo=o(" \u2014 "),gD=a("a"),RTo=o("PhobertTokenizer"),PTo=o(" (PhoBERT model)"),BTo=l(),vu=a("li"),cge=a("strong"),ITo=o("plbart"),NTo=o(" \u2014 "),hD=a("a"),qTo=o("PLBartTokenizer"),jTo=o(" (PLBart model)"),DTo=l(),Fu=a("li"),mge=a("strong"),GTo=o("prophetnet"),OTo=o(" \u2014 "),uD=a("a"),VTo=o("ProphetNetTokenizer"),XTo=o(" (ProphetNet model)"),zTo=l(),Ks=a("li"),fge=a("strong"),QTo=o("qdqbert"),WTo=o(" \u2014 "),pD=a("a"),UTo=o("BertTokenizer"),HTo=o(" or "),_D=a("a"),JTo=o("BertTokenizerFast"),YTo=o(" (QDQBert model)"),KTo=l(),Tu=a("li"),gge=a("strong"),ZTo=o("rag"),eMo=o(" \u2014 "),bD=a("a"),oMo=o("RagTokenizer"),rMo=o(" (RAG model)"),tMo=l(),Zs=a("li"),hge=a("strong"),aMo=o("realm"),nMo=o(" \u2014 "),vD=a("a"),sMo=o("RealmTokenizer"),lMo=o(" or "),FD=a("a"),iMo=o("RealmTokenizerFast"),dMo=o(" (REALM model)"),cMo=l(),el=a("li"),uge=a("strong"),mMo=o("reformer"),fMo=o(" \u2014 "),TD=a("a"),gMo=o("ReformerTokenizer"),hMo=o(" or "),MD=a("a"),uMo=o("ReformerTokenizerFast"),pMo=o(" (Reformer model)"),_Mo=l(),ol=a("li"),pge=a("strong"),bMo=o("rembert"),vMo=o(" \u2014 "),ED=a("a"),FMo=o("RemBertTokenizer"),TMo=o(" or "),CD=a("a"),MMo=o("RemBertTokenizerFast"),EMo=o(" (RemBERT model)"),CMo=l(),rl=a("li"),_ge=a("strong"),wMo=o("retribert"),AMo=o(" \u2014 "),wD=a("a"),LMo=o("RetriBertTokenizer"),yMo=o(" or "),AD=a("a"),xMo=o("RetriBertTokenizerFast"),$Mo=o(" (RetriBERT model)"),kMo=l(),tl=a("li"),bge=a("strong"),SMo=o("roberta"),RMo=o(" \u2014 "),LD=a("a"),PMo=o("RobertaTokenizer"),BMo=o(" or "),yD=a("a"),IMo=o("RobertaTokenizerFast"),NMo=o(" (RoBERTa model)"),qMo=l(),al=a("li"),vge=a("strong"),jMo=o("roformer"),DMo=o(" \u2014 "),xD=a("a"),GMo=o("RoFormerTokenizer"),OMo=o(" or "),$D=a("a"),VMo=o("RoFormerTokenizerFast"),XMo=o(" (RoFormer model)"),zMo=l(),Mu=a("li"),Fge=a("strong"),QMo=o("speech_to_text"),WMo=o(" \u2014 "),kD=a("a"),UMo=o("Speech2TextTokenizer"),HMo=o(" (Speech2Text model)"),JMo=l(),Eu=a("li"),Tge=a("strong"),YMo=o("speech_to_text_2"),KMo=o(" \u2014 "),SD=a("a"),ZMo=o("Speech2Text2Tokenizer"),eEo=o(" (Speech2Text2 model)"),oEo=l(),nl=a("li"),Mge=a("strong"),rEo=o("splinter"),tEo=o(" \u2014 "),RD=a("a"),aEo=o("SplinterTokenizer"),nEo=o(" or "),PD=a("a"),sEo=o("SplinterTokenizerFast"),lEo=o(" (Splinter model)"),iEo=l(),sl=a("li"),Ege=a("strong"),dEo=o("squeezebert"),cEo=o(" \u2014 "),BD=a("a"),mEo=o("SqueezeBertTokenizer"),fEo=o(" or "),ID=a("a"),gEo=o("SqueezeBertTokenizerFast"),hEo=o(" (SqueezeBERT model)"),uEo=l(),ll=a("li"),Cge=a("strong"),pEo=o("t5"),_Eo=o(" \u2014 "),ND=a("a"),bEo=o("T5Tokenizer"),vEo=o(" or "),qD=a("a"),FEo=o("T5TokenizerFast"),TEo=o(" (T5 model)"),MEo=l(),Cu=a("li"),wge=a("strong"),EEo=o("tapas"),CEo=o(" \u2014 "),jD=a("a"),wEo=o("TapasTokenizer"),AEo=o(" (TAPAS model)"),LEo=l(),wu=a("li"),Age=a("strong"),yEo=o("tapex"),xEo=o(" \u2014 "),DD=a("a"),$Eo=o("TapexTokenizer"),kEo=o(" (TAPEX model)"),SEo=l(),Au=a("li"),Lge=a("strong"),REo=o("transfo-xl"),PEo=o(" \u2014 "),GD=a("a"),BEo=o("TransfoXLTokenizer"),IEo=o(" (Transformer-XL model)"),NEo=l(),il=a("li"),yge=a("strong"),qEo=o("vilt"),jEo=o(" \u2014 "),OD=a("a"),DEo=o("BertTokenizer"),GEo=o(" or "),VD=a("a"),OEo=o("BertTokenizerFast"),VEo=o(" (ViLT model)"),XEo=l(),dl=a("li"),xge=a("strong"),zEo=o("visual_bert"),QEo=o(" \u2014 "),XD=a("a"),WEo=o("BertTokenizer"),UEo=o(" or "),zD=a("a"),HEo=o("BertTokenizerFast"),JEo=o(" (VisualBERT model)"),YEo=l(),Lu=a("li"),$ge=a("strong"),KEo=o("wav2vec2"),ZEo=o(" \u2014 "),QD=a("a"),e4o=o("Wav2Vec2CTCTokenizer"),o4o=o(" (Wav2Vec2 model)"),r4o=l(),yu=a("li"),kge=a("strong"),t4o=o("wav2vec2-conformer"),a4o=o(" \u2014 "),WD=a("a"),n4o=o("Wav2Vec2CTCTokenizer"),s4o=o(" (Wav2Vec2-Conformer model)"),l4o=l(),xu=a("li"),Sge=a("strong"),i4o=o("wav2vec2_phoneme"),d4o=o(" \u2014 "),UD=a("a"),c4o=o("Wav2Vec2PhonemeCTCTokenizer"),m4o=o(" (Wav2Vec2Phoneme model)"),f4o=l(),cl=a("li"),Rge=a("strong"),g4o=o("xclip"),h4o=o(" \u2014 "),HD=a("a"),u4o=o("CLIPTokenizer"),p4o=o(" or "),JD=a("a"),_4o=o("CLIPTokenizerFast"),b4o=o(" (X-CLIP model)"),v4o=l(),ml=a("li"),Pge=a("strong"),F4o=o("xglm"),T4o=o(" \u2014 "),YD=a("a"),M4o=o("XGLMTokenizer"),E4o=o(" or "),KD=a("a"),C4o=o("XGLMTokenizerFast"),w4o=o(" (XGLM model)"),A4o=l(),$u=a("li"),Bge=a("strong"),L4o=o("xlm"),y4o=o(" \u2014 "),ZD=a("a"),x4o=o("XLMTokenizer"),$4o=o(" (XLM model)"),k4o=l(),ku=a("li"),Ige=a("strong"),S4o=o("xlm-prophetnet"),R4o=o(" \u2014 "),eG=a("a"),P4o=o("XLMProphetNetTokenizer"),B4o=o(" (XLM-ProphetNet model)"),I4o=l(),fl=a("li"),Nge=a("strong"),N4o=o("xlm-roberta"),q4o=o(" \u2014 "),oG=a("a"),j4o=o("XLMRobertaTokenizer"),D4o=o(" or "),rG=a("a"),G4o=o("XLMRobertaTokenizerFast"),O4o=o(" (XLM-RoBERTa model)"),V4o=l(),gl=a("li"),qge=a("strong"),X4o=o("xlm-roberta-xl"),z4o=o(" \u2014 "),tG=a("a"),Q4o=o("XLMRobertaTokenizer"),W4o=o(" or "),aG=a("a"),U4o=o("XLMRobertaTokenizerFast"),H4o=o(" (XLM-RoBERTa-XL model)"),J4o=l(),hl=a("li"),jge=a("strong"),Y4o=o("xlnet"),K4o=o(" \u2014 "),nG=a("a"),Z4o=o("XLNetTokenizer"),eCo=o(" or "),sG=a("a"),oCo=o("XLNetTokenizerFast"),rCo=o(" (XLNet model)"),tCo=l(),ul=a("li"),Dge=a("strong"),aCo=o("yoso"),nCo=o(" \u2014 "),lG=a("a"),sCo=o("AlbertTokenizer"),lCo=o(" or "),iG=a("a"),iCo=o("AlbertTokenizerFast"),dCo=o(" (YOSO model)"),cCo=l(),F(Su.$$.fragment),mCo=l(),Ru=a("div"),F(z9.$$.fragment),fCo=l(),Gge=a("p"),gCo=o("Register a new tokenizer in this mapping."),vKe=l(),gd=a("h2"),Pu=a("a"),Oge=a("span"),F(Q9.$$.fragment),hCo=l(),Vge=a("span"),uCo=o("AutoFeatureExtractor"),FKe=l(),So=a("div"),F(W9.$$.fragment),pCo=l(),U9=a("p"),_Co=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dG=a("a"),bCo=o("AutoFeatureExtractor.from_pretrained()"),vCo=o(" class method."),FCo=l(),H9=a("p"),TCo=o("This class cannot be instantiated directly using "),Xge=a("code"),MCo=o("__init__()"),ECo=o(" (throws an error)."),CCo=l(),Ye=a("div"),F(J9.$$.fragment),wCo=l(),zge=a("p"),ACo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),LCo=l(),Ha=a("p"),yCo=o("The feature extractor class to instantiate is selected based on the "),Qge=a("code"),xCo=o("model_type"),$Co=o(` property of the config object
(either passed as an argument or loaded from `),Wge=a("code"),kCo=o("pretrained_model_name_or_path"),SCo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Uge=a("code"),RCo=o("pretrained_model_name_or_path"),PCo=o(":"),BCo=l(),W=a("ul"),Bu=a("li"),Hge=a("strong"),ICo=o("beit"),NCo=o(" \u2014 "),cG=a("a"),qCo=o("BeitFeatureExtractor"),jCo=o(" (BEiT model)"),DCo=l(),Iu=a("li"),Jge=a("strong"),GCo=o("clip"),OCo=o(" \u2014 "),mG=a("a"),VCo=o("CLIPFeatureExtractor"),XCo=o(" (CLIP model)"),zCo=l(),Nu=a("li"),Yge=a("strong"),QCo=o("convnext"),WCo=o(" \u2014 "),fG=a("a"),UCo=o("ConvNextFeatureExtractor"),HCo=o(" (ConvNeXT model)"),JCo=l(),qu=a("li"),Kge=a("strong"),YCo=o("cvt"),KCo=o(" \u2014 "),gG=a("a"),ZCo=o("ConvNextFeatureExtractor"),e3o=o(" (CvT model)"),o3o=l(),ju=a("li"),Zge=a("strong"),r3o=o("data2vec-audio"),t3o=o(" \u2014 "),hG=a("a"),a3o=o("Wav2Vec2FeatureExtractor"),n3o=o(" (Data2VecAudio model)"),s3o=l(),Du=a("li"),ehe=a("strong"),l3o=o("data2vec-vision"),i3o=o(" \u2014 "),uG=a("a"),d3o=o("BeitFeatureExtractor"),c3o=o(" (Data2VecVision model)"),m3o=l(),Gu=a("li"),ohe=a("strong"),f3o=o("deformable_detr"),g3o=o(" \u2014 "),pG=a("a"),h3o=o("DetrFeatureExtractor"),u3o=o(" (Deformable DETR model)"),p3o=l(),Ou=a("li"),rhe=a("strong"),_3o=o("deit"),b3o=o(" \u2014 "),_G=a("a"),v3o=o("DeiTFeatureExtractor"),F3o=o(" (DeiT model)"),T3o=l(),Vu=a("li"),the=a("strong"),M3o=o("detr"),E3o=o(" \u2014 "),bG=a("a"),C3o=o("DetrFeatureExtractor"),w3o=o(" (DETR model)"),A3o=l(),Xu=a("li"),ahe=a("strong"),L3o=o("donut"),y3o=o(" \u2014 "),vG=a("a"),x3o=o("DonutFeatureExtractor"),$3o=o(" (Donut model)"),k3o=l(),zu=a("li"),nhe=a("strong"),S3o=o("dpt"),R3o=o(" \u2014 "),FG=a("a"),P3o=o("DPTFeatureExtractor"),B3o=o(" (DPT model)"),I3o=l(),Qu=a("li"),she=a("strong"),N3o=o("flava"),q3o=o(" \u2014 "),TG=a("a"),j3o=o("FlavaFeatureExtractor"),D3o=o(" (FLAVA model)"),G3o=l(),Wu=a("li"),lhe=a("strong"),O3o=o("glpn"),V3o=o(" \u2014 "),MG=a("a"),X3o=o("GLPNFeatureExtractor"),z3o=o(" (GLPN model)"),Q3o=l(),Uu=a("li"),ihe=a("strong"),W3o=o("groupvit"),U3o=o(" \u2014 "),EG=a("a"),H3o=o("CLIPFeatureExtractor"),J3o=o(" (GroupViT model)"),Y3o=l(),Hu=a("li"),dhe=a("strong"),K3o=o("hubert"),Z3o=o(" \u2014 "),CG=a("a"),e5o=o("Wav2Vec2FeatureExtractor"),o5o=o(" (Hubert model)"),r5o=l(),Ju=a("li"),che=a("strong"),t5o=o("imagegpt"),a5o=o(" \u2014 "),wG=a("a"),n5o=o("ImageGPTFeatureExtractor"),s5o=o(" (ImageGPT model)"),l5o=l(),Yu=a("li"),mhe=a("strong"),i5o=o("layoutlmv2"),d5o=o(" \u2014 "),AG=a("a"),c5o=o("LayoutLMv2FeatureExtractor"),m5o=o(" (LayoutLMv2 model)"),f5o=l(),Ku=a("li"),fhe=a("strong"),g5o=o("layoutlmv3"),h5o=o(" \u2014 "),LG=a("a"),u5o=o("LayoutLMv3FeatureExtractor"),p5o=o(" (LayoutLMv3 model)"),_5o=l(),Zu=a("li"),ghe=a("strong"),b5o=o("levit"),v5o=o(" \u2014 "),yG=a("a"),F5o=o("LevitFeatureExtractor"),T5o=o(" (LeViT model)"),M5o=l(),ep=a("li"),hhe=a("strong"),E5o=o("maskformer"),C5o=o(" \u2014 "),xG=a("a"),w5o=o("MaskFormerFeatureExtractor"),A5o=o(" (MaskFormer model)"),L5o=l(),op=a("li"),uhe=a("strong"),y5o=o("mctct"),x5o=o(" \u2014 "),$G=a("a"),$5o=o("MCTCTFeatureExtractor"),k5o=o(" (M-CTC-T model)"),S5o=l(),rp=a("li"),phe=a("strong"),R5o=o("mobilevit"),P5o=o(" \u2014 "),kG=a("a"),B5o=o("MobileViTFeatureExtractor"),I5o=o(" (MobileViT model)"),N5o=l(),tp=a("li"),_he=a("strong"),q5o=o("owlvit"),j5o=o(" \u2014 "),SG=a("a"),D5o=o("OwlViTFeatureExtractor"),G5o=o(" (OWL-ViT model)"),O5o=l(),ap=a("li"),bhe=a("strong"),V5o=o("perceiver"),X5o=o(" \u2014 "),RG=a("a"),z5o=o("PerceiverFeatureExtractor"),Q5o=o(" (Perceiver model)"),W5o=l(),np=a("li"),vhe=a("strong"),U5o=o("poolformer"),H5o=o(" \u2014 "),PG=a("a"),J5o=o("PoolFormerFeatureExtractor"),Y5o=o(" (PoolFormer model)"),K5o=l(),sp=a("li"),Fhe=a("strong"),Z5o=o("regnet"),e0o=o(" \u2014 "),BG=a("a"),o0o=o("ConvNextFeatureExtractor"),r0o=o(" (RegNet model)"),t0o=l(),lp=a("li"),The=a("strong"),a0o=o("resnet"),n0o=o(" \u2014 "),IG=a("a"),s0o=o("ConvNextFeatureExtractor"),l0o=o(" (ResNet model)"),i0o=l(),ip=a("li"),Mhe=a("strong"),d0o=o("segformer"),c0o=o(" \u2014 "),NG=a("a"),m0o=o("SegformerFeatureExtractor"),f0o=o(" (SegFormer model)"),g0o=l(),dp=a("li"),Ehe=a("strong"),h0o=o("speech_to_text"),u0o=o(" \u2014 "),qG=a("a"),p0o=o("Speech2TextFeatureExtractor"),_0o=o(" (Speech2Text model)"),b0o=l(),cp=a("li"),Che=a("strong"),v0o=o("swin"),F0o=o(" \u2014 "),jG=a("a"),T0o=o("ViTFeatureExtractor"),M0o=o(" (Swin Transformer model)"),E0o=l(),mp=a("li"),whe=a("strong"),C0o=o("swinv2"),w0o=o(" \u2014 "),DG=a("a"),A0o=o("ViTFeatureExtractor"),L0o=o(" (Swin Transformer V2 model)"),y0o=l(),fp=a("li"),Ahe=a("strong"),x0o=o("van"),$0o=o(" \u2014 "),GG=a("a"),k0o=o("ConvNextFeatureExtractor"),S0o=o(" (VAN model)"),R0o=l(),gp=a("li"),Lhe=a("strong"),P0o=o("videomae"),B0o=o(" \u2014 "),OG=a("a"),I0o=o("VideoMAEFeatureExtractor"),N0o=o(" (VideoMAE model)"),q0o=l(),hp=a("li"),yhe=a("strong"),j0o=o("vilt"),D0o=o(" \u2014 "),VG=a("a"),G0o=o("ViltFeatureExtractor"),O0o=o(" (ViLT model)"),V0o=l(),up=a("li"),xhe=a("strong"),X0o=o("vit"),z0o=o(" \u2014 "),XG=a("a"),Q0o=o("ViTFeatureExtractor"),W0o=o(" (ViT model)"),U0o=l(),pp=a("li"),$he=a("strong"),H0o=o("vit_mae"),J0o=o(" \u2014 "),zG=a("a"),Y0o=o("ViTFeatureExtractor"),K0o=o(" (ViTMAE model)"),Z0o=l(),_p=a("li"),khe=a("strong"),ewo=o("wav2vec2"),owo=o(" \u2014 "),QG=a("a"),rwo=o("Wav2Vec2FeatureExtractor"),two=o(" (Wav2Vec2 model)"),awo=l(),bp=a("li"),She=a("strong"),nwo=o("wav2vec2-conformer"),swo=o(" \u2014 "),WG=a("a"),lwo=o("Wav2Vec2FeatureExtractor"),iwo=o(" (Wav2Vec2-Conformer model)"),dwo=l(),vp=a("li"),Rhe=a("strong"),cwo=o("xclip"),mwo=o(" \u2014 "),UG=a("a"),fwo=o("CLIPFeatureExtractor"),gwo=o(" (X-CLIP model)"),hwo=l(),Fp=a("li"),Phe=a("strong"),uwo=o("yolos"),pwo=o(" \u2014 "),HG=a("a"),_wo=o("YolosFeatureExtractor"),bwo=o(" (YOLOS model)"),vwo=l(),F(Tp.$$.fragment),Fwo=l(),F(Mp.$$.fragment),Two=l(),Ep=a("div"),F(Y9.$$.fragment),Mwo=l(),Bhe=a("p"),Ewo=o("Register a new feature extractor for this class."),TKe=l(),hd=a("h2"),Cp=a("a"),Ihe=a("span"),F(K9.$$.fragment),Cwo=l(),Nhe=a("span"),wwo=o("AutoProcessor"),MKe=l(),Ro=a("div"),F(Z9.$$.fragment),Awo=l(),ex=a("p"),Lwo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),JG=a("a"),ywo=o("AutoProcessor.from_pretrained()"),xwo=o(" class method."),$wo=l(),ox=a("p"),kwo=o("This class cannot be instantiated directly using "),qhe=a("code"),Swo=o("__init__()"),Rwo=o(" (throws an error)."),Pwo=l(),Ke=a("div"),F(rx.$$.fragment),Bwo=l(),jhe=a("p"),Iwo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Nwo=l(),ud=a("p"),qwo=o("The processor class to instantiate is selected based on the "),Dhe=a("code"),jwo=o("model_type"),Dwo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),Gwo=o("pretrained_model_name_or_path"),Owo=o(" if possible):"),Vwo=l(),ie=a("ul"),wp=a("li"),Ohe=a("strong"),Xwo=o("clip"),zwo=o(" \u2014 "),YG=a("a"),Qwo=o("CLIPProcessor"),Wwo=o(" (CLIP model)"),Uwo=l(),Ap=a("li"),Vhe=a("strong"),Hwo=o("donut"),Jwo=o(" \u2014 "),KG=a("a"),Ywo=o("DonutProcessor"),Kwo=o(" (Donut model)"),Zwo=l(),Lp=a("li"),Xhe=a("strong"),eAo=o("flava"),oAo=o(" \u2014 "),ZG=a("a"),rAo=o("FlavaProcessor"),tAo=o(" (FLAVA model)"),aAo=l(),yp=a("li"),zhe=a("strong"),nAo=o("groupvit"),sAo=o(" \u2014 "),eO=a("a"),lAo=o("CLIPProcessor"),iAo=o(" (GroupViT model)"),dAo=l(),xp=a("li"),Qhe=a("strong"),cAo=o("layoutlmv2"),mAo=o(" \u2014 "),oO=a("a"),fAo=o("LayoutLMv2Processor"),gAo=o(" (LayoutLMv2 model)"),hAo=l(),$p=a("li"),Whe=a("strong"),uAo=o("layoutlmv3"),pAo=o(" \u2014 "),rO=a("a"),_Ao=o("LayoutLMv3Processor"),bAo=o(" (LayoutLMv3 model)"),vAo=l(),kp=a("li"),Uhe=a("strong"),FAo=o("layoutxlm"),TAo=o(" \u2014 "),tO=a("a"),MAo=o("LayoutXLMProcessor"),EAo=o(" (LayoutXLM model)"),CAo=l(),Sp=a("li"),Hhe=a("strong"),wAo=o("owlvit"),AAo=o(" \u2014 "),aO=a("a"),LAo=o("OwlViTProcessor"),yAo=o(" (OWL-ViT model)"),xAo=l(),Rp=a("li"),Jhe=a("strong"),$Ao=o("sew"),kAo=o(" \u2014 "),nO=a("a"),SAo=o("Wav2Vec2Processor"),RAo=o(" (SEW model)"),PAo=l(),Pp=a("li"),Yhe=a("strong"),BAo=o("sew-d"),IAo=o(" \u2014 "),sO=a("a"),NAo=o("Wav2Vec2Processor"),qAo=o(" (SEW-D model)"),jAo=l(),Bp=a("li"),Khe=a("strong"),DAo=o("speech_to_text"),GAo=o(" \u2014 "),lO=a("a"),OAo=o("Speech2TextProcessor"),VAo=o(" (Speech2Text model)"),XAo=l(),Ip=a("li"),Zhe=a("strong"),zAo=o("speech_to_text_2"),QAo=o(" \u2014 "),iO=a("a"),WAo=o("Speech2Text2Processor"),UAo=o(" (Speech2Text2 model)"),HAo=l(),Np=a("li"),eue=a("strong"),JAo=o("trocr"),YAo=o(" \u2014 "),dO=a("a"),KAo=o("TrOCRProcessor"),ZAo=o(" (TrOCR model)"),e6o=l(),qp=a("li"),oue=a("strong"),o6o=o("unispeech"),r6o=o(" \u2014 "),cO=a("a"),t6o=o("Wav2Vec2Processor"),a6o=o(" (UniSpeech model)"),n6o=l(),jp=a("li"),rue=a("strong"),s6o=o("unispeech-sat"),l6o=o(" \u2014 "),mO=a("a"),i6o=o("Wav2Vec2Processor"),d6o=o(" (UniSpeechSat model)"),c6o=l(),Dp=a("li"),tue=a("strong"),m6o=o("vilt"),f6o=o(" \u2014 "),fO=a("a"),g6o=o("ViltProcessor"),h6o=o(" (ViLT model)"),u6o=l(),Gp=a("li"),aue=a("strong"),p6o=o("vision-text-dual-encoder"),_6o=o(" \u2014 "),gO=a("a"),b6o=o("VisionTextDualEncoderProcessor"),v6o=o(" (VisionTextDualEncoder model)"),F6o=l(),Op=a("li"),nue=a("strong"),T6o=o("wav2vec2"),M6o=o(" \u2014 "),hO=a("a"),E6o=o("Wav2Vec2Processor"),C6o=o(" (Wav2Vec2 model)"),w6o=l(),Vp=a("li"),sue=a("strong"),A6o=o("wav2vec2-conformer"),L6o=o(" \u2014 "),uO=a("a"),y6o=o("Wav2Vec2Processor"),x6o=o(" (Wav2Vec2-Conformer model)"),$6o=l(),Xp=a("li"),lue=a("strong"),k6o=o("wavlm"),S6o=o(" \u2014 "),pO=a("a"),R6o=o("Wav2Vec2Processor"),P6o=o(" (WavLM model)"),B6o=l(),zp=a("li"),iue=a("strong"),I6o=o("xclip"),N6o=o(" \u2014 "),_O=a("a"),q6o=o("CLIPProcessor"),j6o=o(" (X-CLIP model)"),D6o=l(),F(Qp.$$.fragment),G6o=l(),F(Wp.$$.fragment),O6o=l(),Up=a("div"),F(tx.$$.fragment),V6o=l(),due=a("p"),X6o=o("Register a new processor for this class."),EKe=l(),pd=a("h2"),Hp=a("a"),cue=a("span"),F(ax.$$.fragment),z6o=l(),mue=a("span"),Q6o=o("AutoModel"),CKe=l(),Po=a("div"),F(nx.$$.fragment),W6o=l(),_d=a("p"),U6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bO=a("a"),H6o=o("from_pretrained()"),J6o=o(" class method or the "),vO=a("a"),Y6o=o("from_config()"),K6o=o(` class
method.`),Z6o=l(),sx=a("p"),e7o=o("This class cannot be instantiated directly using "),fue=a("code"),o7o=o("__init__()"),r7o=o(" (throws an error)."),t7o=l(),_t=a("div"),F(lx.$$.fragment),a7o=l(),gue=a("p"),n7o=o("Instantiates one of the base model classes of the library from a configuration."),s7o=l(),bd=a("p"),l7o=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),i7o=o("not"),d7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),c7o=o("from_pretrained()"),m7o=o(" to load the model weights."),f7o=l(),F(Jp.$$.fragment),g7o=l(),Ze=a("div"),F(ix.$$.fragment),h7o=l(),uue=a("p"),u7o=o("Instantiate one of the base model classes of the library from a pretrained model."),p7o=l(),Ja=a("p"),_7o=o("The model class to instantiate is selected based on the "),pue=a("code"),b7o=o("model_type"),v7o=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),F7o=o("pretrained_model_name_or_path"),T7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),M7o=o("pretrained_model_name_or_path"),E7o=o(":"),C7o=l(),y=a("ul"),Yp=a("li"),vue=a("strong"),w7o=o("albert"),A7o=o(" \u2014 "),TO=a("a"),L7o=o("AlbertModel"),y7o=o(" (ALBERT model)"),x7o=l(),Kp=a("li"),Fue=a("strong"),$7o=o("bart"),k7o=o(" \u2014 "),MO=a("a"),S7o=o("BartModel"),R7o=o(" (BART model)"),P7o=l(),Zp=a("li"),Tue=a("strong"),B7o=o("beit"),I7o=o(" \u2014 "),EO=a("a"),N7o=o("BeitModel"),q7o=o(" (BEiT model)"),j7o=l(),e_=a("li"),Mue=a("strong"),D7o=o("bert"),G7o=o(" \u2014 "),CO=a("a"),O7o=o("BertModel"),V7o=o(" (BERT model)"),X7o=l(),o_=a("li"),Eue=a("strong"),z7o=o("bert-generation"),Q7o=o(" \u2014 "),wO=a("a"),W7o=o("BertGenerationEncoder"),U7o=o(" (Bert Generation model)"),H7o=l(),r_=a("li"),Cue=a("strong"),J7o=o("big_bird"),Y7o=o(" \u2014 "),AO=a("a"),K7o=o("BigBirdModel"),Z7o=o(" (BigBird model)"),eLo=l(),t_=a("li"),wue=a("strong"),oLo=o("bigbird_pegasus"),rLo=o(" \u2014 "),LO=a("a"),tLo=o("BigBirdPegasusModel"),aLo=o(" (BigBird-Pegasus model)"),nLo=l(),a_=a("li"),Aue=a("strong"),sLo=o("blenderbot"),lLo=o(" \u2014 "),yO=a("a"),iLo=o("BlenderbotModel"),dLo=o(" (Blenderbot model)"),cLo=l(),n_=a("li"),Lue=a("strong"),mLo=o("blenderbot-small"),fLo=o(" \u2014 "),xO=a("a"),gLo=o("BlenderbotSmallModel"),hLo=o(" (BlenderbotSmall model)"),uLo=l(),s_=a("li"),yue=a("strong"),pLo=o("bloom"),_Lo=o(" \u2014 "),$O=a("a"),bLo=o("BloomModel"),vLo=o(" (BLOOM model)"),FLo=l(),l_=a("li"),xue=a("strong"),TLo=o("camembert"),MLo=o(" \u2014 "),kO=a("a"),ELo=o("CamembertModel"),CLo=o(" (CamemBERT model)"),wLo=l(),i_=a("li"),$ue=a("strong"),ALo=o("canine"),LLo=o(" \u2014 "),SO=a("a"),yLo=o("CanineModel"),xLo=o(" (CANINE model)"),$Lo=l(),d_=a("li"),kue=a("strong"),kLo=o("clip"),SLo=o(" \u2014 "),RO=a("a"),RLo=o("CLIPModel"),PLo=o(" (CLIP model)"),BLo=l(),c_=a("li"),Sue=a("strong"),ILo=o("codegen"),NLo=o(" \u2014 "),PO=a("a"),qLo=o("CodeGenModel"),jLo=o(" (CodeGen model)"),DLo=l(),m_=a("li"),Rue=a("strong"),GLo=o("convbert"),OLo=o(" \u2014 "),BO=a("a"),VLo=o("ConvBertModel"),XLo=o(" (ConvBERT model)"),zLo=l(),f_=a("li"),Pue=a("strong"),QLo=o("convnext"),WLo=o(" \u2014 "),IO=a("a"),ULo=o("ConvNextModel"),HLo=o(" (ConvNeXT model)"),JLo=l(),g_=a("li"),Bue=a("strong"),YLo=o("ctrl"),KLo=o(" \u2014 "),NO=a("a"),ZLo=o("CTRLModel"),eyo=o(" (CTRL model)"),oyo=l(),h_=a("li"),Iue=a("strong"),ryo=o("cvt"),tyo=o(" \u2014 "),qO=a("a"),ayo=o("CvtModel"),nyo=o(" (CvT model)"),syo=l(),u_=a("li"),Nue=a("strong"),lyo=o("data2vec-audio"),iyo=o(" \u2014 "),jO=a("a"),dyo=o("Data2VecAudioModel"),cyo=o(" (Data2VecAudio model)"),myo=l(),p_=a("li"),que=a("strong"),fyo=o("data2vec-text"),gyo=o(" \u2014 "),DO=a("a"),hyo=o("Data2VecTextModel"),uyo=o(" (Data2VecText model)"),pyo=l(),__=a("li"),jue=a("strong"),_yo=o("data2vec-vision"),byo=o(" \u2014 "),GO=a("a"),vyo=o("Data2VecVisionModel"),Fyo=o(" (Data2VecVision model)"),Tyo=l(),b_=a("li"),Due=a("strong"),Myo=o("deberta"),Eyo=o(" \u2014 "),OO=a("a"),Cyo=o("DebertaModel"),wyo=o(" (DeBERTa model)"),Ayo=l(),v_=a("li"),Gue=a("strong"),Lyo=o("deberta-v2"),yyo=o(" \u2014 "),VO=a("a"),xyo=o("DebertaV2Model"),$yo=o(" (DeBERTa-v2 model)"),kyo=l(),F_=a("li"),Oue=a("strong"),Syo=o("decision_transformer"),Ryo=o(" \u2014 "),XO=a("a"),Pyo=o("DecisionTransformerModel"),Byo=o(" (Decision Transformer model)"),Iyo=l(),T_=a("li"),Vue=a("strong"),Nyo=o("deformable_detr"),qyo=o(" \u2014 "),zO=a("a"),jyo=o("DeformableDetrModel"),Dyo=o(" (Deformable DETR model)"),Gyo=l(),M_=a("li"),Xue=a("strong"),Oyo=o("deit"),Vyo=o(" \u2014 "),QO=a("a"),Xyo=o("DeiTModel"),zyo=o(" (DeiT model)"),Qyo=l(),E_=a("li"),zue=a("strong"),Wyo=o("detr"),Uyo=o(" \u2014 "),WO=a("a"),Hyo=o("DetrModel"),Jyo=o(" (DETR model)"),Yyo=l(),C_=a("li"),Que=a("strong"),Kyo=o("distilbert"),Zyo=o(" \u2014 "),UO=a("a"),e8o=o("DistilBertModel"),o8o=o(" (DistilBERT model)"),r8o=l(),w_=a("li"),Wue=a("strong"),t8o=o("donut-swin"),a8o=o(" \u2014 "),HO=a("a"),n8o=o("DonutSwinModel"),s8o=o(" (DonutSwin model)"),l8o=l(),A_=a("li"),Uue=a("strong"),i8o=o("dpr"),d8o=o(" \u2014 "),JO=a("a"),c8o=o("DPRQuestionEncoder"),m8o=o(" (DPR model)"),f8o=l(),L_=a("li"),Hue=a("strong"),g8o=o("dpt"),h8o=o(" \u2014 "),YO=a("a"),u8o=o("DPTModel"),p8o=o(" (DPT model)"),_8o=l(),y_=a("li"),Jue=a("strong"),b8o=o("electra"),v8o=o(" \u2014 "),KO=a("a"),F8o=o("ElectraModel"),T8o=o(" (ELECTRA model)"),M8o=l(),x_=a("li"),Yue=a("strong"),E8o=o("ernie"),C8o=o(" \u2014 "),ZO=a("a"),w8o=o("ErnieModel"),A8o=o(" (ERNIE model)"),L8o=l(),$_=a("li"),Kue=a("strong"),y8o=o("flaubert"),x8o=o(" \u2014 "),eV=a("a"),$8o=o("FlaubertModel"),k8o=o(" (FlauBERT model)"),S8o=l(),k_=a("li"),Zue=a("strong"),R8o=o("flava"),P8o=o(" \u2014 "),oV=a("a"),B8o=o("FlavaModel"),I8o=o(" (FLAVA model)"),N8o=l(),S_=a("li"),epe=a("strong"),q8o=o("fnet"),j8o=o(" \u2014 "),rV=a("a"),D8o=o("FNetModel"),G8o=o(" (FNet model)"),O8o=l(),R_=a("li"),ope=a("strong"),V8o=o("fsmt"),X8o=o(" \u2014 "),tV=a("a"),z8o=o("FSMTModel"),Q8o=o(" (FairSeq Machine-Translation model)"),W8o=l(),pl=a("li"),rpe=a("strong"),U8o=o("funnel"),H8o=o(" \u2014 "),aV=a("a"),J8o=o("FunnelModel"),Y8o=o(" or "),nV=a("a"),K8o=o("FunnelBaseModel"),Z8o=o(" (Funnel Transformer model)"),e9o=l(),P_=a("li"),tpe=a("strong"),o9o=o("glpn"),r9o=o(" \u2014 "),sV=a("a"),t9o=o("GLPNModel"),a9o=o(" (GLPN model)"),n9o=l(),B_=a("li"),ape=a("strong"),s9o=o("gpt2"),l9o=o(" \u2014 "),lV=a("a"),i9o=o("GPT2Model"),d9o=o(" (OpenAI GPT-2 model)"),c9o=l(),I_=a("li"),npe=a("strong"),m9o=o("gpt_neo"),f9o=o(" \u2014 "),iV=a("a"),g9o=o("GPTNeoModel"),h9o=o(" (GPT Neo model)"),u9o=l(),N_=a("li"),spe=a("strong"),p9o=o("gpt_neox"),_9o=o(" \u2014 "),dV=a("a"),b9o=o("GPTNeoXModel"),v9o=o(" (GPT NeoX model)"),F9o=l(),q_=a("li"),lpe=a("strong"),T9o=o("gpt_neox_japanese"),M9o=o(" \u2014 "),cV=a("a"),E9o=o("GPTNeoXJapaneseModel"),C9o=o(" (GPT NeoX Japanese model)"),w9o=l(),j_=a("li"),ipe=a("strong"),A9o=o("gptj"),L9o=o(" \u2014 "),mV=a("a"),y9o=o("GPTJModel"),x9o=o(" (GPT-J model)"),$9o=l(),D_=a("li"),dpe=a("strong"),k9o=o("groupvit"),S9o=o(" \u2014 "),fV=a("a"),R9o=o("GroupViTModel"),P9o=o(" (GroupViT model)"),B9o=l(),G_=a("li"),cpe=a("strong"),I9o=o("hubert"),N9o=o(" \u2014 "),gV=a("a"),q9o=o("HubertModel"),j9o=o(" (Hubert model)"),D9o=l(),O_=a("li"),mpe=a("strong"),G9o=o("ibert"),O9o=o(" \u2014 "),hV=a("a"),V9o=o("IBertModel"),X9o=o(" (I-BERT model)"),z9o=l(),V_=a("li"),fpe=a("strong"),Q9o=o("imagegpt"),W9o=o(" \u2014 "),uV=a("a"),U9o=o("ImageGPTModel"),H9o=o(" (ImageGPT model)"),J9o=l(),X_=a("li"),gpe=a("strong"),Y9o=o("layoutlm"),K9o=o(" \u2014 "),pV=a("a"),Z9o=o("LayoutLMModel"),exo=o(" (LayoutLM model)"),oxo=l(),z_=a("li"),hpe=a("strong"),rxo=o("layoutlmv2"),txo=o(" \u2014 "),_V=a("a"),axo=o("LayoutLMv2Model"),nxo=o(" (LayoutLMv2 model)"),sxo=l(),Q_=a("li"),upe=a("strong"),lxo=o("layoutlmv3"),ixo=o(" \u2014 "),bV=a("a"),dxo=o("LayoutLMv3Model"),cxo=o(" (LayoutLMv3 model)"),mxo=l(),W_=a("li"),ppe=a("strong"),fxo=o("led"),gxo=o(" \u2014 "),vV=a("a"),hxo=o("LEDModel"),uxo=o(" (LED model)"),pxo=l(),U_=a("li"),_pe=a("strong"),_xo=o("levit"),bxo=o(" \u2014 "),FV=a("a"),vxo=o("LevitModel"),Fxo=o(" (LeViT model)"),Txo=l(),H_=a("li"),bpe=a("strong"),Mxo=o("longformer"),Exo=o(" \u2014 "),TV=a("a"),Cxo=o("LongformerModel"),wxo=o(" (Longformer model)"),Axo=l(),J_=a("li"),vpe=a("strong"),Lxo=o("longt5"),yxo=o(" \u2014 "),MV=a("a"),xxo=o("LongT5Model"),$xo=o(" (LongT5 model)"),kxo=l(),Y_=a("li"),Fpe=a("strong"),Sxo=o("luke"),Rxo=o(" \u2014 "),EV=a("a"),Pxo=o("LukeModel"),Bxo=o(" (LUKE model)"),Ixo=l(),K_=a("li"),Tpe=a("strong"),Nxo=o("lxmert"),qxo=o(" \u2014 "),CV=a("a"),jxo=o("LxmertModel"),Dxo=o(" (LXMERT model)"),Gxo=l(),Z_=a("li"),Mpe=a("strong"),Oxo=o("m2m_100"),Vxo=o(" \u2014 "),wV=a("a"),Xxo=o("M2M100Model"),zxo=o(" (M2M100 model)"),Qxo=l(),eb=a("li"),Epe=a("strong"),Wxo=o("marian"),Uxo=o(" \u2014 "),AV=a("a"),Hxo=o("MarianModel"),Jxo=o(" (Marian model)"),Yxo=l(),ob=a("li"),Cpe=a("strong"),Kxo=o("maskformer"),Zxo=o(" \u2014 "),LV=a("a"),e$o=o("MaskFormerModel"),o$o=o(" (MaskFormer model)"),r$o=l(),rb=a("li"),wpe=a("strong"),t$o=o("mbart"),a$o=o(" \u2014 "),yV=a("a"),n$o=o("MBartModel"),s$o=o(" (mBART model)"),l$o=l(),tb=a("li"),Ape=a("strong"),i$o=o("mctct"),d$o=o(" \u2014 "),xV=a("a"),c$o=o("MCTCTModel"),m$o=o(" (M-CTC-T model)"),f$o=l(),ab=a("li"),Lpe=a("strong"),g$o=o("megatron-bert"),h$o=o(" \u2014 "),$V=a("a"),u$o=o("MegatronBertModel"),p$o=o(" (Megatron-BERT model)"),_$o=l(),nb=a("li"),ype=a("strong"),b$o=o("mobilebert"),v$o=o(" \u2014 "),kV=a("a"),F$o=o("MobileBertModel"),T$o=o(" (MobileBERT model)"),M$o=l(),sb=a("li"),xpe=a("strong"),E$o=o("mobilevit"),C$o=o(" \u2014 "),SV=a("a"),w$o=o("MobileViTModel"),A$o=o(" (MobileViT model)"),L$o=l(),lb=a("li"),$pe=a("strong"),y$o=o("mpnet"),x$o=o(" \u2014 "),RV=a("a"),$$o=o("MPNetModel"),k$o=o(" (MPNet model)"),S$o=l(),ib=a("li"),kpe=a("strong"),R$o=o("mt5"),P$o=o(" \u2014 "),PV=a("a"),B$o=o("MT5Model"),I$o=o(" (MT5 model)"),N$o=l(),db=a("li"),Spe=a("strong"),q$o=o("mvp"),j$o=o(" \u2014 "),BV=a("a"),D$o=o("MvpModel"),G$o=o(" (MVP model)"),O$o=l(),cb=a("li"),Rpe=a("strong"),V$o=o("nezha"),X$o=o(" \u2014 "),IV=a("a"),z$o=o("NezhaModel"),Q$o=o(" (Nezha model)"),W$o=l(),mb=a("li"),Ppe=a("strong"),U$o=o("nllb"),H$o=o(" \u2014 "),NV=a("a"),J$o=o("M2M100Model"),Y$o=o(" (NLLB model)"),K$o=l(),fb=a("li"),Bpe=a("strong"),Z$o=o("nystromformer"),eko=o(" \u2014 "),qV=a("a"),oko=o("NystromformerModel"),rko=o(" (Nystr\xF6mformer model)"),tko=l(),gb=a("li"),Ipe=a("strong"),ako=o("openai-gpt"),nko=o(" \u2014 "),jV=a("a"),sko=o("OpenAIGPTModel"),lko=o(" (OpenAI GPT model)"),iko=l(),hb=a("li"),Npe=a("strong"),dko=o("opt"),cko=o(" \u2014 "),DV=a("a"),mko=o("OPTModel"),fko=o(" (OPT model)"),gko=l(),ub=a("li"),qpe=a("strong"),hko=o("owlvit"),uko=o(" \u2014 "),GV=a("a"),pko=o("OwlViTModel"),_ko=o(" (OWL-ViT model)"),bko=l(),pb=a("li"),jpe=a("strong"),vko=o("pegasus"),Fko=o(" \u2014 "),OV=a("a"),Tko=o("PegasusModel"),Mko=o(" (Pegasus model)"),Eko=l(),_b=a("li"),Dpe=a("strong"),Cko=o("pegasus_x"),wko=o(" \u2014 "),VV=a("a"),Ako=o("PegasusXModel"),Lko=o(" (PEGASUS-X model)"),yko=l(),bb=a("li"),Gpe=a("strong"),xko=o("perceiver"),$ko=o(" \u2014 "),XV=a("a"),kko=o("PerceiverModel"),Sko=o(" (Perceiver model)"),Rko=l(),vb=a("li"),Ope=a("strong"),Pko=o("plbart"),Bko=o(" \u2014 "),zV=a("a"),Iko=o("PLBartModel"),Nko=o(" (PLBart model)"),qko=l(),Fb=a("li"),Vpe=a("strong"),jko=o("poolformer"),Dko=o(" \u2014 "),QV=a("a"),Gko=o("PoolFormerModel"),Oko=o(" (PoolFormer model)"),Vko=l(),Tb=a("li"),Xpe=a("strong"),Xko=o("prophetnet"),zko=o(" \u2014 "),WV=a("a"),Qko=o("ProphetNetModel"),Wko=o(" (ProphetNet model)"),Uko=l(),Mb=a("li"),zpe=a("strong"),Hko=o("qdqbert"),Jko=o(" \u2014 "),UV=a("a"),Yko=o("QDQBertModel"),Kko=o(" (QDQBert model)"),Zko=l(),Eb=a("li"),Qpe=a("strong"),eSo=o("reformer"),oSo=o(" \u2014 "),HV=a("a"),rSo=o("ReformerModel"),tSo=o(" (Reformer model)"),aSo=l(),Cb=a("li"),Wpe=a("strong"),nSo=o("regnet"),sSo=o(" \u2014 "),JV=a("a"),lSo=o("RegNetModel"),iSo=o(" (RegNet model)"),dSo=l(),wb=a("li"),Upe=a("strong"),cSo=o("rembert"),mSo=o(" \u2014 "),YV=a("a"),fSo=o("RemBertModel"),gSo=o(" (RemBERT model)"),hSo=l(),Ab=a("li"),Hpe=a("strong"),uSo=o("resnet"),pSo=o(" \u2014 "),KV=a("a"),_So=o("ResNetModel"),bSo=o(" (ResNet model)"),vSo=l(),Lb=a("li"),Jpe=a("strong"),FSo=o("retribert"),TSo=o(" \u2014 "),ZV=a("a"),MSo=o("RetriBertModel"),ESo=o(" (RetriBERT model)"),CSo=l(),yb=a("li"),Ype=a("strong"),wSo=o("roberta"),ASo=o(" \u2014 "),eX=a("a"),LSo=o("RobertaModel"),ySo=o(" (RoBERTa model)"),xSo=l(),xb=a("li"),Kpe=a("strong"),$So=o("roformer"),kSo=o(" \u2014 "),oX=a("a"),SSo=o("RoFormerModel"),RSo=o(" (RoFormer model)"),PSo=l(),$b=a("li"),Zpe=a("strong"),BSo=o("segformer"),ISo=o(" \u2014 "),rX=a("a"),NSo=o("SegformerModel"),qSo=o(" (SegFormer model)"),jSo=l(),kb=a("li"),e_e=a("strong"),DSo=o("sew"),GSo=o(" \u2014 "),tX=a("a"),OSo=o("SEWModel"),VSo=o(" (SEW model)"),XSo=l(),Sb=a("li"),o_e=a("strong"),zSo=o("sew-d"),QSo=o(" \u2014 "),aX=a("a"),WSo=o("SEWDModel"),USo=o(" (SEW-D model)"),HSo=l(),Rb=a("li"),r_e=a("strong"),JSo=o("speech_to_text"),YSo=o(" \u2014 "),nX=a("a"),KSo=o("Speech2TextModel"),ZSo=o(" (Speech2Text model)"),eRo=l(),Pb=a("li"),t_e=a("strong"),oRo=o("splinter"),rRo=o(" \u2014 "),sX=a("a"),tRo=o("SplinterModel"),aRo=o(" (Splinter model)"),nRo=l(),Bb=a("li"),a_e=a("strong"),sRo=o("squeezebert"),lRo=o(" \u2014 "),lX=a("a"),iRo=o("SqueezeBertModel"),dRo=o(" (SqueezeBERT model)"),cRo=l(),Ib=a("li"),n_e=a("strong"),mRo=o("swin"),fRo=o(" \u2014 "),iX=a("a"),gRo=o("SwinModel"),hRo=o(" (Swin Transformer model)"),uRo=l(),Nb=a("li"),s_e=a("strong"),pRo=o("swinv2"),_Ro=o(" \u2014 "),dX=a("a"),bRo=o("Swinv2Model"),vRo=o(" (Swin Transformer V2 model)"),FRo=l(),qb=a("li"),l_e=a("strong"),TRo=o("t5"),MRo=o(" \u2014 "),cX=a("a"),ERo=o("T5Model"),CRo=o(" (T5 model)"),wRo=l(),jb=a("li"),i_e=a("strong"),ARo=o("tapas"),LRo=o(" \u2014 "),mX=a("a"),yRo=o("TapasModel"),xRo=o(" (TAPAS model)"),$Ro=l(),Db=a("li"),d_e=a("strong"),kRo=o("trajectory_transformer"),SRo=o(" \u2014 "),fX=a("a"),RRo=o("TrajectoryTransformerModel"),PRo=o(" (Trajectory Transformer model)"),BRo=l(),Gb=a("li"),c_e=a("strong"),IRo=o("transfo-xl"),NRo=o(" \u2014 "),gX=a("a"),qRo=o("TransfoXLModel"),jRo=o(" (Transformer-XL model)"),DRo=l(),Ob=a("li"),m_e=a("strong"),GRo=o("unispeech"),ORo=o(" \u2014 "),hX=a("a"),VRo=o("UniSpeechModel"),XRo=o(" (UniSpeech model)"),zRo=l(),Vb=a("li"),f_e=a("strong"),QRo=o("unispeech-sat"),WRo=o(" \u2014 "),uX=a("a"),URo=o("UniSpeechSatModel"),HRo=o(" (UniSpeechSat model)"),JRo=l(),Xb=a("li"),g_e=a("strong"),YRo=o("van"),KRo=o(" \u2014 "),pX=a("a"),ZRo=o("VanModel"),ePo=o(" (VAN model)"),oPo=l(),zb=a("li"),h_e=a("strong"),rPo=o("videomae"),tPo=o(" \u2014 "),_X=a("a"),aPo=o("VideoMAEModel"),nPo=o(" (VideoMAE model)"),sPo=l(),Qb=a("li"),u_e=a("strong"),lPo=o("vilt"),iPo=o(" \u2014 "),bX=a("a"),dPo=o("ViltModel"),cPo=o(" (ViLT model)"),mPo=l(),Wb=a("li"),p_e=a("strong"),fPo=o("vision-text-dual-encoder"),gPo=o(" \u2014 "),vX=a("a"),hPo=o("VisionTextDualEncoderModel"),uPo=o(" (VisionTextDualEncoder model)"),pPo=l(),Ub=a("li"),__e=a("strong"),_Po=o("visual_bert"),bPo=o(" \u2014 "),FX=a("a"),vPo=o("VisualBertModel"),FPo=o(" (VisualBERT model)"),TPo=l(),Hb=a("li"),b_e=a("strong"),MPo=o("vit"),EPo=o(" \u2014 "),TX=a("a"),CPo=o("ViTModel"),wPo=o(" (ViT model)"),APo=l(),Jb=a("li"),v_e=a("strong"),LPo=o("vit_mae"),yPo=o(" \u2014 "),MX=a("a"),xPo=o("ViTMAEModel"),$Po=o(" (ViTMAE model)"),kPo=l(),Yb=a("li"),F_e=a("strong"),SPo=o("wav2vec2"),RPo=o(" \u2014 "),EX=a("a"),PPo=o("Wav2Vec2Model"),BPo=o(" (Wav2Vec2 model)"),IPo=l(),Kb=a("li"),T_e=a("strong"),NPo=o("wav2vec2-conformer"),qPo=o(" \u2014 "),CX=a("a"),jPo=o("Wav2Vec2ConformerModel"),DPo=o(" (Wav2Vec2-Conformer model)"),GPo=l(),Zb=a("li"),M_e=a("strong"),OPo=o("wavlm"),VPo=o(" \u2014 "),wX=a("a"),XPo=o("WavLMModel"),zPo=o(" (WavLM model)"),QPo=l(),e2=a("li"),E_e=a("strong"),WPo=o("xclip"),UPo=o(" \u2014 "),AX=a("a"),HPo=o("XCLIPModel"),JPo=o(" (X-CLIP model)"),YPo=l(),o2=a("li"),C_e=a("strong"),KPo=o("xglm"),ZPo=o(" \u2014 "),LX=a("a"),eBo=o("XGLMModel"),oBo=o(" (XGLM model)"),rBo=l(),r2=a("li"),w_e=a("strong"),tBo=o("xlm"),aBo=o(" \u2014 "),yX=a("a"),nBo=o("XLMModel"),sBo=o(" (XLM model)"),lBo=l(),t2=a("li"),A_e=a("strong"),iBo=o("xlm-prophetnet"),dBo=o(" \u2014 "),xX=a("a"),cBo=o("XLMProphetNetModel"),mBo=o(" (XLM-ProphetNet model)"),fBo=l(),a2=a("li"),L_e=a("strong"),gBo=o("xlm-roberta"),hBo=o(" \u2014 "),$X=a("a"),uBo=o("XLMRobertaModel"),pBo=o(" (XLM-RoBERTa model)"),_Bo=l(),n2=a("li"),y_e=a("strong"),bBo=o("xlm-roberta-xl"),vBo=o(" \u2014 "),kX=a("a"),FBo=o("XLMRobertaXLModel"),TBo=o(" (XLM-RoBERTa-XL model)"),MBo=l(),s2=a("li"),x_e=a("strong"),EBo=o("xlnet"),CBo=o(" \u2014 "),SX=a("a"),wBo=o("XLNetModel"),ABo=o(" (XLNet model)"),LBo=l(),l2=a("li"),$_e=a("strong"),yBo=o("yolos"),xBo=o(" \u2014 "),RX=a("a"),$Bo=o("YolosModel"),kBo=o(" (YOLOS model)"),SBo=l(),i2=a("li"),k_e=a("strong"),RBo=o("yoso"),PBo=o(" \u2014 "),PX=a("a"),BBo=o("YosoModel"),IBo=o(" (YOSO model)"),NBo=l(),d2=a("p"),qBo=o("The model is set in evaluation mode by default using "),S_e=a("code"),jBo=o("model.eval()"),DBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),GBo=o("model.train()"),OBo=l(),F(c2.$$.fragment),wKe=l(),vd=a("h2"),m2=a("a"),P_e=a("span"),F(dx.$$.fragment),VBo=l(),B_e=a("span"),XBo=o("AutoModelForPreTraining"),AKe=l(),Bo=a("div"),F(cx.$$.fragment),zBo=l(),Fd=a("p"),QBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BX=a("a"),WBo=o("from_pretrained()"),UBo=o(" class method or the "),IX=a("a"),HBo=o("from_config()"),JBo=o(` class
method.`),YBo=l(),mx=a("p"),KBo=o("This class cannot be instantiated directly using "),I_e=a("code"),ZBo=o("__init__()"),eIo=o(" (throws an error)."),oIo=l(),bt=a("div"),F(fx.$$.fragment),rIo=l(),N_e=a("p"),tIo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aIo=l(),Td=a("p"),nIo=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),sIo=o("not"),lIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),iIo=o("from_pretrained()"),dIo=o(" to load the model weights."),cIo=l(),F(f2.$$.fragment),mIo=l(),eo=a("div"),F(gx.$$.fragment),fIo=l(),j_e=a("p"),gIo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hIo=l(),Ya=a("p"),uIo=o("The model class to instantiate is selected based on the "),D_e=a("code"),pIo=o("model_type"),_Io=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),FIo=o("pretrained_model_name_or_path"),TIo=o(":"),MIo=l(),G=a("ul"),g2=a("li"),V_e=a("strong"),EIo=o("albert"),CIo=o(" \u2014 "),qX=a("a"),wIo=o("AlbertForPreTraining"),AIo=o(" (ALBERT model)"),LIo=l(),h2=a("li"),X_e=a("strong"),yIo=o("bart"),xIo=o(" \u2014 "),jX=a("a"),$Io=o("BartForConditionalGeneration"),kIo=o(" (BART model)"),SIo=l(),u2=a("li"),z_e=a("strong"),RIo=o("bert"),PIo=o(" \u2014 "),DX=a("a"),BIo=o("BertForPreTraining"),IIo=o(" (BERT model)"),NIo=l(),p2=a("li"),Q_e=a("strong"),qIo=o("big_bird"),jIo=o(" \u2014 "),GX=a("a"),DIo=o("BigBirdForPreTraining"),GIo=o(" (BigBird model)"),OIo=l(),_2=a("li"),W_e=a("strong"),VIo=o("bloom"),XIo=o(" \u2014 "),OX=a("a"),zIo=o("BloomForCausalLM"),QIo=o(" (BLOOM model)"),WIo=l(),b2=a("li"),U_e=a("strong"),UIo=o("camembert"),HIo=o(" \u2014 "),VX=a("a"),JIo=o("CamembertForMaskedLM"),YIo=o(" (CamemBERT model)"),KIo=l(),v2=a("li"),H_e=a("strong"),ZIo=o("ctrl"),eNo=o(" \u2014 "),XX=a("a"),oNo=o("CTRLLMHeadModel"),rNo=o(" (CTRL model)"),tNo=l(),F2=a("li"),J_e=a("strong"),aNo=o("data2vec-text"),nNo=o(" \u2014 "),zX=a("a"),sNo=o("Data2VecTextForMaskedLM"),lNo=o(" (Data2VecText model)"),iNo=l(),T2=a("li"),Y_e=a("strong"),dNo=o("deberta"),cNo=o(" \u2014 "),QX=a("a"),mNo=o("DebertaForMaskedLM"),fNo=o(" (DeBERTa model)"),gNo=l(),M2=a("li"),K_e=a("strong"),hNo=o("deberta-v2"),uNo=o(" \u2014 "),WX=a("a"),pNo=o("DebertaV2ForMaskedLM"),_No=o(" (DeBERTa-v2 model)"),bNo=l(),E2=a("li"),Z_e=a("strong"),vNo=o("distilbert"),FNo=o(" \u2014 "),UX=a("a"),TNo=o("DistilBertForMaskedLM"),MNo=o(" (DistilBERT model)"),ENo=l(),C2=a("li"),ebe=a("strong"),CNo=o("electra"),wNo=o(" \u2014 "),HX=a("a"),ANo=o("ElectraForPreTraining"),LNo=o(" (ELECTRA model)"),yNo=l(),w2=a("li"),obe=a("strong"),xNo=o("ernie"),$No=o(" \u2014 "),JX=a("a"),kNo=o("ErnieForPreTraining"),SNo=o(" (ERNIE model)"),RNo=l(),A2=a("li"),rbe=a("strong"),PNo=o("flaubert"),BNo=o(" \u2014 "),YX=a("a"),INo=o("FlaubertWithLMHeadModel"),NNo=o(" (FlauBERT model)"),qNo=l(),L2=a("li"),tbe=a("strong"),jNo=o("flava"),DNo=o(" \u2014 "),KX=a("a"),GNo=o("FlavaForPreTraining"),ONo=o(" (FLAVA model)"),VNo=l(),y2=a("li"),abe=a("strong"),XNo=o("fnet"),zNo=o(" \u2014 "),ZX=a("a"),QNo=o("FNetForPreTraining"),WNo=o(" (FNet model)"),UNo=l(),x2=a("li"),nbe=a("strong"),HNo=o("fsmt"),JNo=o(" \u2014 "),ez=a("a"),YNo=o("FSMTForConditionalGeneration"),KNo=o(" (FairSeq Machine-Translation model)"),ZNo=l(),$2=a("li"),sbe=a("strong"),eqo=o("funnel"),oqo=o(" \u2014 "),oz=a("a"),rqo=o("FunnelForPreTraining"),tqo=o(" (Funnel Transformer model)"),aqo=l(),k2=a("li"),lbe=a("strong"),nqo=o("gpt2"),sqo=o(" \u2014 "),rz=a("a"),lqo=o("GPT2LMHeadModel"),iqo=o(" (OpenAI GPT-2 model)"),dqo=l(),S2=a("li"),ibe=a("strong"),cqo=o("ibert"),mqo=o(" \u2014 "),tz=a("a"),fqo=o("IBertForMaskedLM"),gqo=o(" (I-BERT model)"),hqo=l(),R2=a("li"),dbe=a("strong"),uqo=o("layoutlm"),pqo=o(" \u2014 "),az=a("a"),_qo=o("LayoutLMForMaskedLM"),bqo=o(" (LayoutLM model)"),vqo=l(),P2=a("li"),cbe=a("strong"),Fqo=o("longformer"),Tqo=o(" \u2014 "),nz=a("a"),Mqo=o("LongformerForMaskedLM"),Eqo=o(" (Longformer model)"),Cqo=l(),B2=a("li"),mbe=a("strong"),wqo=o("luke"),Aqo=o(" \u2014 "),sz=a("a"),Lqo=o("LukeForMaskedLM"),yqo=o(" (LUKE model)"),xqo=l(),I2=a("li"),fbe=a("strong"),$qo=o("lxmert"),kqo=o(" \u2014 "),lz=a("a"),Sqo=o("LxmertForPreTraining"),Rqo=o(" (LXMERT model)"),Pqo=l(),N2=a("li"),gbe=a("strong"),Bqo=o("megatron-bert"),Iqo=o(" \u2014 "),iz=a("a"),Nqo=o("MegatronBertForPreTraining"),qqo=o(" (Megatron-BERT model)"),jqo=l(),q2=a("li"),hbe=a("strong"),Dqo=o("mobilebert"),Gqo=o(" \u2014 "),dz=a("a"),Oqo=o("MobileBertForPreTraining"),Vqo=o(" (MobileBERT model)"),Xqo=l(),j2=a("li"),ube=a("strong"),zqo=o("mpnet"),Qqo=o(" \u2014 "),cz=a("a"),Wqo=o("MPNetForMaskedLM"),Uqo=o(" (MPNet model)"),Hqo=l(),D2=a("li"),pbe=a("strong"),Jqo=o("mvp"),Yqo=o(" \u2014 "),mz=a("a"),Kqo=o("MvpForConditionalGeneration"),Zqo=o(" (MVP model)"),ejo=l(),G2=a("li"),_be=a("strong"),ojo=o("nezha"),rjo=o(" \u2014 "),fz=a("a"),tjo=o("NezhaForPreTraining"),ajo=o(" (Nezha model)"),njo=l(),O2=a("li"),bbe=a("strong"),sjo=o("openai-gpt"),ljo=o(" \u2014 "),gz=a("a"),ijo=o("OpenAIGPTLMHeadModel"),djo=o(" (OpenAI GPT model)"),cjo=l(),V2=a("li"),vbe=a("strong"),mjo=o("retribert"),fjo=o(" \u2014 "),hz=a("a"),gjo=o("RetriBertModel"),hjo=o(" (RetriBERT model)"),ujo=l(),X2=a("li"),Fbe=a("strong"),pjo=o("roberta"),_jo=o(" \u2014 "),uz=a("a"),bjo=o("RobertaForMaskedLM"),vjo=o(" (RoBERTa model)"),Fjo=l(),z2=a("li"),Tbe=a("strong"),Tjo=o("splinter"),Mjo=o(" \u2014 "),pz=a("a"),Ejo=o("SplinterForPreTraining"),Cjo=o(" (Splinter model)"),wjo=l(),Q2=a("li"),Mbe=a("strong"),Ajo=o("squeezebert"),Ljo=o(" \u2014 "),_z=a("a"),yjo=o("SqueezeBertForMaskedLM"),xjo=o(" (SqueezeBERT model)"),$jo=l(),W2=a("li"),Ebe=a("strong"),kjo=o("t5"),Sjo=o(" \u2014 "),bz=a("a"),Rjo=o("T5ForConditionalGeneration"),Pjo=o(" (T5 model)"),Bjo=l(),U2=a("li"),Cbe=a("strong"),Ijo=o("tapas"),Njo=o(" \u2014 "),vz=a("a"),qjo=o("TapasForMaskedLM"),jjo=o(" (TAPAS model)"),Djo=l(),H2=a("li"),wbe=a("strong"),Gjo=o("transfo-xl"),Ojo=o(" \u2014 "),Fz=a("a"),Vjo=o("TransfoXLLMHeadModel"),Xjo=o(" (Transformer-XL model)"),zjo=l(),J2=a("li"),Abe=a("strong"),Qjo=o("unispeech"),Wjo=o(" \u2014 "),Tz=a("a"),Ujo=o("UniSpeechForPreTraining"),Hjo=o(" (UniSpeech model)"),Jjo=l(),Y2=a("li"),Lbe=a("strong"),Yjo=o("unispeech-sat"),Kjo=o(" \u2014 "),Mz=a("a"),Zjo=o("UniSpeechSatForPreTraining"),eDo=o(" (UniSpeechSat model)"),oDo=l(),K2=a("li"),ybe=a("strong"),rDo=o("videomae"),tDo=o(" \u2014 "),Ez=a("a"),aDo=o("VideoMAEForPreTraining"),nDo=o(" (VideoMAE model)"),sDo=l(),Z2=a("li"),xbe=a("strong"),lDo=o("visual_bert"),iDo=o(" \u2014 "),Cz=a("a"),dDo=o("VisualBertForPreTraining"),cDo=o(" (VisualBERT model)"),mDo=l(),e1=a("li"),$be=a("strong"),fDo=o("vit_mae"),gDo=o(" \u2014 "),wz=a("a"),hDo=o("ViTMAEForPreTraining"),uDo=o(" (ViTMAE model)"),pDo=l(),o1=a("li"),kbe=a("strong"),_Do=o("wav2vec2"),bDo=o(" \u2014 "),Az=a("a"),vDo=o("Wav2Vec2ForPreTraining"),FDo=o(" (Wav2Vec2 model)"),TDo=l(),r1=a("li"),Sbe=a("strong"),MDo=o("wav2vec2-conformer"),EDo=o(" \u2014 "),Lz=a("a"),CDo=o("Wav2Vec2ConformerForPreTraining"),wDo=o(" (Wav2Vec2-Conformer model)"),ADo=l(),t1=a("li"),Rbe=a("strong"),LDo=o("xlm"),yDo=o(" \u2014 "),yz=a("a"),xDo=o("XLMWithLMHeadModel"),$Do=o(" (XLM model)"),kDo=l(),a1=a("li"),Pbe=a("strong"),SDo=o("xlm-roberta"),RDo=o(" \u2014 "),xz=a("a"),PDo=o("XLMRobertaForMaskedLM"),BDo=o(" (XLM-RoBERTa model)"),IDo=l(),n1=a("li"),Bbe=a("strong"),NDo=o("xlm-roberta-xl"),qDo=o(" \u2014 "),$z=a("a"),jDo=o("XLMRobertaXLForMaskedLM"),DDo=o(" (XLM-RoBERTa-XL model)"),GDo=l(),s1=a("li"),Ibe=a("strong"),ODo=o("xlnet"),VDo=o(" \u2014 "),kz=a("a"),XDo=o("XLNetLMHeadModel"),zDo=o(" (XLNet model)"),QDo=l(),l1=a("p"),WDo=o("The model is set in evaluation mode by default using "),Nbe=a("code"),UDo=o("model.eval()"),HDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),JDo=o("model.train()"),YDo=l(),F(i1.$$.fragment),LKe=l(),Md=a("h2"),d1=a("a"),jbe=a("span"),F(hx.$$.fragment),KDo=l(),Dbe=a("span"),ZDo=o("AutoModelForCausalLM"),yKe=l(),Io=a("div"),F(ux.$$.fragment),eGo=l(),Ed=a("p"),oGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Sz=a("a"),rGo=o("from_pretrained()"),tGo=o(" class method or the "),Rz=a("a"),aGo=o("from_config()"),nGo=o(` class
method.`),sGo=l(),px=a("p"),lGo=o("This class cannot be instantiated directly using "),Gbe=a("code"),iGo=o("__init__()"),dGo=o(" (throws an error)."),cGo=l(),vt=a("div"),F(_x.$$.fragment),mGo=l(),Obe=a("p"),fGo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gGo=l(),Cd=a("p"),hGo=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),uGo=o("not"),pGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),_Go=o("from_pretrained()"),bGo=o(" to load the model weights."),vGo=l(),F(c1.$$.fragment),FGo=l(),oo=a("div"),F(bx.$$.fragment),TGo=l(),Xbe=a("p"),MGo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EGo=l(),Ka=a("p"),CGo=o("The model class to instantiate is selected based on the "),zbe=a("code"),wGo=o("model_type"),AGo=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),LGo=o("pretrained_model_name_or_path"),yGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),xGo=o("pretrained_model_name_or_path"),$Go=o(":"),kGo=l(),z=a("ul"),m1=a("li"),Ube=a("strong"),SGo=o("bart"),RGo=o(" \u2014 "),Bz=a("a"),PGo=o("BartForCausalLM"),BGo=o(" (BART model)"),IGo=l(),f1=a("li"),Hbe=a("strong"),NGo=o("bert"),qGo=o(" \u2014 "),Iz=a("a"),jGo=o("BertLMHeadModel"),DGo=o(" (BERT model)"),GGo=l(),g1=a("li"),Jbe=a("strong"),OGo=o("bert-generation"),VGo=o(" \u2014 "),Nz=a("a"),XGo=o("BertGenerationDecoder"),zGo=o(" (Bert Generation model)"),QGo=l(),h1=a("li"),Ybe=a("strong"),WGo=o("big_bird"),UGo=o(" \u2014 "),qz=a("a"),HGo=o("BigBirdForCausalLM"),JGo=o(" (BigBird model)"),YGo=l(),u1=a("li"),Kbe=a("strong"),KGo=o("bigbird_pegasus"),ZGo=o(" \u2014 "),jz=a("a"),eOo=o("BigBirdPegasusForCausalLM"),oOo=o(" (BigBird-Pegasus model)"),rOo=l(),p1=a("li"),Zbe=a("strong"),tOo=o("blenderbot"),aOo=o(" \u2014 "),Dz=a("a"),nOo=o("BlenderbotForCausalLM"),sOo=o(" (Blenderbot model)"),lOo=l(),_1=a("li"),e2e=a("strong"),iOo=o("blenderbot-small"),dOo=o(" \u2014 "),Gz=a("a"),cOo=o("BlenderbotSmallForCausalLM"),mOo=o(" (BlenderbotSmall model)"),fOo=l(),b1=a("li"),o2e=a("strong"),gOo=o("bloom"),hOo=o(" \u2014 "),Oz=a("a"),uOo=o("BloomForCausalLM"),pOo=o(" (BLOOM model)"),_Oo=l(),v1=a("li"),r2e=a("strong"),bOo=o("camembert"),vOo=o(" \u2014 "),Vz=a("a"),FOo=o("CamembertForCausalLM"),TOo=o(" (CamemBERT model)"),MOo=l(),F1=a("li"),t2e=a("strong"),EOo=o("codegen"),COo=o(" \u2014 "),Xz=a("a"),wOo=o("CodeGenForCausalLM"),AOo=o(" (CodeGen model)"),LOo=l(),T1=a("li"),a2e=a("strong"),yOo=o("ctrl"),xOo=o(" \u2014 "),zz=a("a"),$Oo=o("CTRLLMHeadModel"),kOo=o(" (CTRL model)"),SOo=l(),M1=a("li"),n2e=a("strong"),ROo=o("data2vec-text"),POo=o(" \u2014 "),Qz=a("a"),BOo=o("Data2VecTextForCausalLM"),IOo=o(" (Data2VecText model)"),NOo=l(),E1=a("li"),s2e=a("strong"),qOo=o("electra"),jOo=o(" \u2014 "),Wz=a("a"),DOo=o("ElectraForCausalLM"),GOo=o(" (ELECTRA model)"),OOo=l(),C1=a("li"),l2e=a("strong"),VOo=o("ernie"),XOo=o(" \u2014 "),Uz=a("a"),zOo=o("ErnieForCausalLM"),QOo=o(" (ERNIE model)"),WOo=l(),w1=a("li"),i2e=a("strong"),UOo=o("gpt2"),HOo=o(" \u2014 "),Hz=a("a"),JOo=o("GPT2LMHeadModel"),YOo=o(" (OpenAI GPT-2 model)"),KOo=l(),A1=a("li"),d2e=a("strong"),ZOo=o("gpt_neo"),eVo=o(" \u2014 "),Jz=a("a"),oVo=o("GPTNeoForCausalLM"),rVo=o(" (GPT Neo model)"),tVo=l(),L1=a("li"),c2e=a("strong"),aVo=o("gpt_neox"),nVo=o(" \u2014 "),Yz=a("a"),sVo=o("GPTNeoXForCausalLM"),lVo=o(" (GPT NeoX model)"),iVo=l(),y1=a("li"),m2e=a("strong"),dVo=o("gpt_neox_japanese"),cVo=o(" \u2014 "),Kz=a("a"),mVo=o("GPTNeoXJapaneseForCausalLM"),fVo=o(" (GPT NeoX Japanese model)"),gVo=l(),x1=a("li"),f2e=a("strong"),hVo=o("gptj"),uVo=o(" \u2014 "),Zz=a("a"),pVo=o("GPTJForCausalLM"),_Vo=o(" (GPT-J model)"),bVo=l(),$1=a("li"),g2e=a("strong"),vVo=o("marian"),FVo=o(" \u2014 "),eQ=a("a"),TVo=o("MarianForCausalLM"),MVo=o(" (Marian model)"),EVo=l(),k1=a("li"),h2e=a("strong"),CVo=o("mbart"),wVo=o(" \u2014 "),oQ=a("a"),AVo=o("MBartForCausalLM"),LVo=o(" (mBART model)"),yVo=l(),S1=a("li"),u2e=a("strong"),xVo=o("megatron-bert"),$Vo=o(" \u2014 "),rQ=a("a"),kVo=o("MegatronBertForCausalLM"),SVo=o(" (Megatron-BERT model)"),RVo=l(),R1=a("li"),p2e=a("strong"),PVo=o("mvp"),BVo=o(" \u2014 "),tQ=a("a"),IVo=o("MvpForCausalLM"),NVo=o(" (MVP model)"),qVo=l(),P1=a("li"),_2e=a("strong"),jVo=o("openai-gpt"),DVo=o(" \u2014 "),aQ=a("a"),GVo=o("OpenAIGPTLMHeadModel"),OVo=o(" (OpenAI GPT model)"),VVo=l(),B1=a("li"),b2e=a("strong"),XVo=o("opt"),zVo=o(" \u2014 "),nQ=a("a"),QVo=o("OPTForCausalLM"),WVo=o(" (OPT model)"),UVo=l(),I1=a("li"),v2e=a("strong"),HVo=o("pegasus"),JVo=o(" \u2014 "),sQ=a("a"),YVo=o("PegasusForCausalLM"),KVo=o(" (Pegasus model)"),ZVo=l(),N1=a("li"),F2e=a("strong"),eXo=o("plbart"),oXo=o(" \u2014 "),lQ=a("a"),rXo=o("PLBartForCausalLM"),tXo=o(" (PLBart model)"),aXo=l(),q1=a("li"),T2e=a("strong"),nXo=o("prophetnet"),sXo=o(" \u2014 "),iQ=a("a"),lXo=o("ProphetNetForCausalLM"),iXo=o(" (ProphetNet model)"),dXo=l(),j1=a("li"),M2e=a("strong"),cXo=o("qdqbert"),mXo=o(" \u2014 "),dQ=a("a"),fXo=o("QDQBertLMHeadModel"),gXo=o(" (QDQBert model)"),hXo=l(),D1=a("li"),E2e=a("strong"),uXo=o("reformer"),pXo=o(" \u2014 "),cQ=a("a"),_Xo=o("ReformerModelWithLMHead"),bXo=o(" (Reformer model)"),vXo=l(),G1=a("li"),C2e=a("strong"),FXo=o("rembert"),TXo=o(" \u2014 "),mQ=a("a"),MXo=o("RemBertForCausalLM"),EXo=o(" (RemBERT model)"),CXo=l(),O1=a("li"),w2e=a("strong"),wXo=o("roberta"),AXo=o(" \u2014 "),fQ=a("a"),LXo=o("RobertaForCausalLM"),yXo=o(" (RoBERTa model)"),xXo=l(),V1=a("li"),A2e=a("strong"),$Xo=o("roformer"),kXo=o(" \u2014 "),gQ=a("a"),SXo=o("RoFormerForCausalLM"),RXo=o(" (RoFormer model)"),PXo=l(),X1=a("li"),L2e=a("strong"),BXo=o("speech_to_text_2"),IXo=o(" \u2014 "),hQ=a("a"),NXo=o("Speech2Text2ForCausalLM"),qXo=o(" (Speech2Text2 model)"),jXo=l(),z1=a("li"),y2e=a("strong"),DXo=o("transfo-xl"),GXo=o(" \u2014 "),uQ=a("a"),OXo=o("TransfoXLLMHeadModel"),VXo=o(" (Transformer-XL model)"),XXo=l(),Q1=a("li"),x2e=a("strong"),zXo=o("trocr"),QXo=o(" \u2014 "),pQ=a("a"),WXo=o("TrOCRForCausalLM"),UXo=o(" (TrOCR model)"),HXo=l(),W1=a("li"),$2e=a("strong"),JXo=o("xglm"),YXo=o(" \u2014 "),_Q=a("a"),KXo=o("XGLMForCausalLM"),ZXo=o(" (XGLM model)"),ezo=l(),U1=a("li"),k2e=a("strong"),ozo=o("xlm"),rzo=o(" \u2014 "),bQ=a("a"),tzo=o("XLMWithLMHeadModel"),azo=o(" (XLM model)"),nzo=l(),H1=a("li"),S2e=a("strong"),szo=o("xlm-prophetnet"),lzo=o(" \u2014 "),vQ=a("a"),izo=o("XLMProphetNetForCausalLM"),dzo=o(" (XLM-ProphetNet model)"),czo=l(),J1=a("li"),R2e=a("strong"),mzo=o("xlm-roberta"),fzo=o(" \u2014 "),FQ=a("a"),gzo=o("XLMRobertaForCausalLM"),hzo=o(" (XLM-RoBERTa model)"),uzo=l(),Y1=a("li"),P2e=a("strong"),pzo=o("xlm-roberta-xl"),_zo=o(" \u2014 "),TQ=a("a"),bzo=o("XLMRobertaXLForCausalLM"),vzo=o(" (XLM-RoBERTa-XL model)"),Fzo=l(),K1=a("li"),B2e=a("strong"),Tzo=o("xlnet"),Mzo=o(" \u2014 "),MQ=a("a"),Ezo=o("XLNetLMHeadModel"),Czo=o(" (XLNet model)"),wzo=l(),Z1=a("p"),Azo=o("The model is set in evaluation mode by default using "),I2e=a("code"),Lzo=o("model.eval()"),yzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=a("code"),xzo=o("model.train()"),$zo=l(),F(ev.$$.fragment),xKe=l(),wd=a("h2"),ov=a("a"),q2e=a("span"),F(vx.$$.fragment),kzo=l(),j2e=a("span"),Szo=o("AutoModelForMaskedLM"),$Ke=l(),No=a("div"),F(Fx.$$.fragment),Rzo=l(),Ad=a("p"),Pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=a("a"),Bzo=o("from_pretrained()"),Izo=o(" class method or the "),CQ=a("a"),Nzo=o("from_config()"),qzo=o(` class
method.`),jzo=l(),Tx=a("p"),Dzo=o("This class cannot be instantiated directly using "),D2e=a("code"),Gzo=o("__init__()"),Ozo=o(" (throws an error)."),Vzo=l(),Ft=a("div"),F(Mx.$$.fragment),Xzo=l(),G2e=a("p"),zzo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qzo=l(),Ld=a("p"),Wzo=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),Uzo=o("not"),Hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" to load the model weights."),Kzo=l(),F(rv.$$.fragment),Zzo=l(),ro=a("div"),F(Ex.$$.fragment),eQo=l(),V2e=a("p"),oQo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rQo=l(),Za=a("p"),tQo=o("The model class to instantiate is selected based on the "),X2e=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),U=a("ul"),tv=a("li"),W2e=a("strong"),mQo=o("albert"),fQo=o(" \u2014 "),AQ=a("a"),gQo=o("AlbertForMaskedLM"),hQo=o(" (ALBERT model)"),uQo=l(),av=a("li"),U2e=a("strong"),pQo=o("bart"),_Qo=o(" \u2014 "),LQ=a("a"),bQo=o("BartForConditionalGeneration"),vQo=o(" (BART model)"),FQo=l(),nv=a("li"),H2e=a("strong"),TQo=o("bert"),MQo=o(" \u2014 "),yQ=a("a"),EQo=o("BertForMaskedLM"),CQo=o(" (BERT model)"),wQo=l(),sv=a("li"),J2e=a("strong"),AQo=o("big_bird"),LQo=o(" \u2014 "),xQ=a("a"),yQo=o("BigBirdForMaskedLM"),xQo=o(" (BigBird model)"),$Qo=l(),lv=a("li"),Y2e=a("strong"),kQo=o("camembert"),SQo=o(" \u2014 "),$Q=a("a"),RQo=o("CamembertForMaskedLM"),PQo=o(" (CamemBERT model)"),BQo=l(),iv=a("li"),K2e=a("strong"),IQo=o("convbert"),NQo=o(" \u2014 "),kQ=a("a"),qQo=o("ConvBertForMaskedLM"),jQo=o(" (ConvBERT model)"),DQo=l(),dv=a("li"),Z2e=a("strong"),GQo=o("data2vec-text"),OQo=o(" \u2014 "),SQ=a("a"),VQo=o("Data2VecTextForMaskedLM"),XQo=o(" (Data2VecText model)"),zQo=l(),cv=a("li"),e1e=a("strong"),QQo=o("deberta"),WQo=o(" \u2014 "),RQ=a("a"),UQo=o("DebertaForMaskedLM"),HQo=o(" (DeBERTa model)"),JQo=l(),mv=a("li"),o1e=a("strong"),YQo=o("deberta-v2"),KQo=o(" \u2014 "),PQ=a("a"),ZQo=o("DebertaV2ForMaskedLM"),eWo=o(" (DeBERTa-v2 model)"),oWo=l(),fv=a("li"),r1e=a("strong"),rWo=o("distilbert"),tWo=o(" \u2014 "),BQ=a("a"),aWo=o("DistilBertForMaskedLM"),nWo=o(" (DistilBERT model)"),sWo=l(),gv=a("li"),t1e=a("strong"),lWo=o("electra"),iWo=o(" \u2014 "),IQ=a("a"),dWo=o("ElectraForMaskedLM"),cWo=o(" (ELECTRA model)"),mWo=l(),hv=a("li"),a1e=a("strong"),fWo=o("ernie"),gWo=o(" \u2014 "),NQ=a("a"),hWo=o("ErnieForMaskedLM"),uWo=o(" (ERNIE model)"),pWo=l(),uv=a("li"),n1e=a("strong"),_Wo=o("flaubert"),bWo=o(" \u2014 "),qQ=a("a"),vWo=o("FlaubertWithLMHeadModel"),FWo=o(" (FlauBERT model)"),TWo=l(),pv=a("li"),s1e=a("strong"),MWo=o("fnet"),EWo=o(" \u2014 "),jQ=a("a"),CWo=o("FNetForMaskedLM"),wWo=o(" (FNet model)"),AWo=l(),_v=a("li"),l1e=a("strong"),LWo=o("funnel"),yWo=o(" \u2014 "),DQ=a("a"),xWo=o("FunnelForMaskedLM"),$Wo=o(" (Funnel Transformer model)"),kWo=l(),bv=a("li"),i1e=a("strong"),SWo=o("ibert"),RWo=o(" \u2014 "),GQ=a("a"),PWo=o("IBertForMaskedLM"),BWo=o(" (I-BERT model)"),IWo=l(),vv=a("li"),d1e=a("strong"),NWo=o("layoutlm"),qWo=o(" \u2014 "),OQ=a("a"),jWo=o("LayoutLMForMaskedLM"),DWo=o(" (LayoutLM model)"),GWo=l(),Fv=a("li"),c1e=a("strong"),OWo=o("longformer"),VWo=o(" \u2014 "),VQ=a("a"),XWo=o("LongformerForMaskedLM"),zWo=o(" (Longformer model)"),QWo=l(),Tv=a("li"),m1e=a("strong"),WWo=o("luke"),UWo=o(" \u2014 "),XQ=a("a"),HWo=o("LukeForMaskedLM"),JWo=o(" (LUKE model)"),YWo=l(),Mv=a("li"),f1e=a("strong"),KWo=o("mbart"),ZWo=o(" \u2014 "),zQ=a("a"),eUo=o("MBartForConditionalGeneration"),oUo=o(" (mBART model)"),rUo=l(),Ev=a("li"),g1e=a("strong"),tUo=o("megatron-bert"),aUo=o(" \u2014 "),QQ=a("a"),nUo=o("MegatronBertForMaskedLM"),sUo=o(" (Megatron-BERT model)"),lUo=l(),Cv=a("li"),h1e=a("strong"),iUo=o("mobilebert"),dUo=o(" \u2014 "),WQ=a("a"),cUo=o("MobileBertForMaskedLM"),mUo=o(" (MobileBERT model)"),fUo=l(),wv=a("li"),u1e=a("strong"),gUo=o("mpnet"),hUo=o(" \u2014 "),UQ=a("a"),uUo=o("MPNetForMaskedLM"),pUo=o(" (MPNet model)"),_Uo=l(),Av=a("li"),p1e=a("strong"),bUo=o("mvp"),vUo=o(" \u2014 "),HQ=a("a"),FUo=o("MvpForConditionalGeneration"),TUo=o(" (MVP model)"),MUo=l(),Lv=a("li"),_1e=a("strong"),EUo=o("nezha"),CUo=o(" \u2014 "),JQ=a("a"),wUo=o("NezhaForMaskedLM"),AUo=o(" (Nezha model)"),LUo=l(),yv=a("li"),b1e=a("strong"),yUo=o("nystromformer"),xUo=o(" \u2014 "),YQ=a("a"),$Uo=o("NystromformerForMaskedLM"),kUo=o(" (Nystr\xF6mformer model)"),SUo=l(),xv=a("li"),v1e=a("strong"),RUo=o("perceiver"),PUo=o(" \u2014 "),KQ=a("a"),BUo=o("PerceiverForMaskedLM"),IUo=o(" (Perceiver model)"),NUo=l(),$v=a("li"),F1e=a("strong"),qUo=o("qdqbert"),jUo=o(" \u2014 "),ZQ=a("a"),DUo=o("QDQBertForMaskedLM"),GUo=o(" (QDQBert model)"),OUo=l(),kv=a("li"),T1e=a("strong"),VUo=o("reformer"),XUo=o(" \u2014 "),eW=a("a"),zUo=o("ReformerForMaskedLM"),QUo=o(" (Reformer model)"),WUo=l(),Sv=a("li"),M1e=a("strong"),UUo=o("rembert"),HUo=o(" \u2014 "),oW=a("a"),JUo=o("RemBertForMaskedLM"),YUo=o(" (RemBERT model)"),KUo=l(),Rv=a("li"),E1e=a("strong"),ZUo=o("roberta"),eHo=o(" \u2014 "),rW=a("a"),oHo=o("RobertaForMaskedLM"),rHo=o(" (RoBERTa model)"),tHo=l(),Pv=a("li"),C1e=a("strong"),aHo=o("roformer"),nHo=o(" \u2014 "),tW=a("a"),sHo=o("RoFormerForMaskedLM"),lHo=o(" (RoFormer model)"),iHo=l(),Bv=a("li"),w1e=a("strong"),dHo=o("squeezebert"),cHo=o(" \u2014 "),aW=a("a"),mHo=o("SqueezeBertForMaskedLM"),fHo=o(" (SqueezeBERT model)"),gHo=l(),Iv=a("li"),A1e=a("strong"),hHo=o("tapas"),uHo=o(" \u2014 "),nW=a("a"),pHo=o("TapasForMaskedLM"),_Ho=o(" (TAPAS model)"),bHo=l(),Nv=a("li"),L1e=a("strong"),vHo=o("wav2vec2"),FHo=o(" \u2014 "),y1e=a("code"),THo=o("Wav2Vec2ForMaskedLM"),MHo=o(" (Wav2Vec2 model)"),EHo=l(),qv=a("li"),x1e=a("strong"),CHo=o("xlm"),wHo=o(" \u2014 "),sW=a("a"),AHo=o("XLMWithLMHeadModel"),LHo=o(" (XLM model)"),yHo=l(),jv=a("li"),$1e=a("strong"),xHo=o("xlm-roberta"),$Ho=o(" \u2014 "),lW=a("a"),kHo=o("XLMRobertaForMaskedLM"),SHo=o(" (XLM-RoBERTa model)"),RHo=l(),Dv=a("li"),k1e=a("strong"),PHo=o("xlm-roberta-xl"),BHo=o(" \u2014 "),iW=a("a"),IHo=o("XLMRobertaXLForMaskedLM"),NHo=o(" (XLM-RoBERTa-XL model)"),qHo=l(),Gv=a("li"),S1e=a("strong"),jHo=o("yoso"),DHo=o(" \u2014 "),dW=a("a"),GHo=o("YosoForMaskedLM"),OHo=o(" (YOSO model)"),VHo=l(),Ov=a("p"),XHo=o("The model is set in evaluation mode by default using "),R1e=a("code"),zHo=o("model.eval()"),QHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),WHo=o("model.train()"),UHo=l(),F(Vv.$$.fragment),kKe=l(),yd=a("h2"),Xv=a("a"),B1e=a("span"),F(Cx.$$.fragment),HHo=l(),I1e=a("span"),JHo=o("AutoModelForSeq2SeqLM"),SKe=l(),qo=a("div"),F(wx.$$.fragment),YHo=l(),xd=a("p"),KHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cW=a("a"),ZHo=o("from_pretrained()"),eJo=o(" class method or the "),mW=a("a"),oJo=o("from_config()"),rJo=o(` class
method.`),tJo=l(),Ax=a("p"),aJo=o("This class cannot be instantiated directly using "),N1e=a("code"),nJo=o("__init__()"),sJo=o(" (throws an error)."),lJo=l(),Tt=a("div"),F(Lx.$$.fragment),iJo=l(),q1e=a("p"),dJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cJo=l(),$d=a("p"),mJo=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),fJo=o("not"),gJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),hJo=o("from_pretrained()"),uJo=o(" to load the model weights."),pJo=l(),F(zv.$$.fragment),_Jo=l(),to=a("div"),F(yx.$$.fragment),bJo=l(),D1e=a("p"),vJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FJo=l(),en=a("p"),TJo=o("The model class to instantiate is selected based on the "),G1e=a("code"),MJo=o("model_type"),EJo=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),CJo=o("pretrained_model_name_or_path"),wJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),AJo=o("pretrained_model_name_or_path"),LJo=o(":"),yJo=l(),me=a("ul"),Qv=a("li"),X1e=a("strong"),xJo=o("bart"),$Jo=o(" \u2014 "),gW=a("a"),kJo=o("BartForConditionalGeneration"),SJo=o(" (BART model)"),RJo=l(),Wv=a("li"),z1e=a("strong"),PJo=o("bigbird_pegasus"),BJo=o(" \u2014 "),hW=a("a"),IJo=o("BigBirdPegasusForConditionalGeneration"),NJo=o(" (BigBird-Pegasus model)"),qJo=l(),Uv=a("li"),Q1e=a("strong"),jJo=o("blenderbot"),DJo=o(" \u2014 "),uW=a("a"),GJo=o("BlenderbotForConditionalGeneration"),OJo=o(" (Blenderbot model)"),VJo=l(),Hv=a("li"),W1e=a("strong"),XJo=o("blenderbot-small"),zJo=o(" \u2014 "),pW=a("a"),QJo=o("BlenderbotSmallForConditionalGeneration"),WJo=o(" (BlenderbotSmall model)"),UJo=l(),Jv=a("li"),U1e=a("strong"),HJo=o("encoder-decoder"),JJo=o(" \u2014 "),_W=a("a"),YJo=o("EncoderDecoderModel"),KJo=o(" (Encoder decoder model)"),ZJo=l(),Yv=a("li"),H1e=a("strong"),eYo=o("fsmt"),oYo=o(" \u2014 "),bW=a("a"),rYo=o("FSMTForConditionalGeneration"),tYo=o(" (FairSeq Machine-Translation model)"),aYo=l(),Kv=a("li"),J1e=a("strong"),nYo=o("led"),sYo=o(" \u2014 "),vW=a("a"),lYo=o("LEDForConditionalGeneration"),iYo=o(" (LED model)"),dYo=l(),Zv=a("li"),Y1e=a("strong"),cYo=o("longt5"),mYo=o(" \u2014 "),FW=a("a"),fYo=o("LongT5ForConditionalGeneration"),gYo=o(" (LongT5 model)"),hYo=l(),eF=a("li"),K1e=a("strong"),uYo=o("m2m_100"),pYo=o(" \u2014 "),TW=a("a"),_Yo=o("M2M100ForConditionalGeneration"),bYo=o(" (M2M100 model)"),vYo=l(),oF=a("li"),Z1e=a("strong"),FYo=o("marian"),TYo=o(" \u2014 "),MW=a("a"),MYo=o("MarianMTModel"),EYo=o(" (Marian model)"),CYo=l(),rF=a("li"),eve=a("strong"),wYo=o("mbart"),AYo=o(" \u2014 "),EW=a("a"),LYo=o("MBartForConditionalGeneration"),yYo=o(" (mBART model)"),xYo=l(),tF=a("li"),ove=a("strong"),$Yo=o("mt5"),kYo=o(" \u2014 "),CW=a("a"),SYo=o("MT5ForConditionalGeneration"),RYo=o(" (MT5 model)"),PYo=l(),aF=a("li"),rve=a("strong"),BYo=o("mvp"),IYo=o(" \u2014 "),wW=a("a"),NYo=o("MvpForConditionalGeneration"),qYo=o(" (MVP model)"),jYo=l(),nF=a("li"),tve=a("strong"),DYo=o("nllb"),GYo=o(" \u2014 "),AW=a("a"),OYo=o("M2M100ForConditionalGeneration"),VYo=o(" (NLLB model)"),XYo=l(),sF=a("li"),ave=a("strong"),zYo=o("pegasus"),QYo=o(" \u2014 "),LW=a("a"),WYo=o("PegasusForConditionalGeneration"),UYo=o(" (Pegasus model)"),HYo=l(),lF=a("li"),nve=a("strong"),JYo=o("pegasus_x"),YYo=o(" \u2014 "),yW=a("a"),KYo=o("PegasusXForConditionalGeneration"),ZYo=o(" (PEGASUS-X model)"),eKo=l(),iF=a("li"),sve=a("strong"),oKo=o("plbart"),rKo=o(" \u2014 "),xW=a("a"),tKo=o("PLBartForConditionalGeneration"),aKo=o(" (PLBart model)"),nKo=l(),dF=a("li"),lve=a("strong"),sKo=o("prophetnet"),lKo=o(" \u2014 "),$W=a("a"),iKo=o("ProphetNetForConditionalGeneration"),dKo=o(" (ProphetNet model)"),cKo=l(),cF=a("li"),ive=a("strong"),mKo=o("t5"),fKo=o(" \u2014 "),kW=a("a"),gKo=o("T5ForConditionalGeneration"),hKo=o(" (T5 model)"),uKo=l(),mF=a("li"),dve=a("strong"),pKo=o("xlm-prophetnet"),_Ko=o(" \u2014 "),SW=a("a"),bKo=o("XLMProphetNetForConditionalGeneration"),vKo=o(" (XLM-ProphetNet model)"),FKo=l(),fF=a("p"),TKo=o("The model is set in evaluation mode by default using "),cve=a("code"),MKo=o("model.eval()"),EKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=a("code"),CKo=o("model.train()"),wKo=l(),F(gF.$$.fragment),RKe=l(),kd=a("h2"),hF=a("a"),fve=a("span"),F(xx.$$.fragment),AKo=l(),gve=a("span"),LKo=o("AutoModelForSequenceClassification"),PKe=l(),jo=a("div"),F($x.$$.fragment),yKo=l(),Sd=a("p"),xKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RW=a("a"),$Ko=o("from_pretrained()"),kKo=o(" class method or the "),PW=a("a"),SKo=o("from_config()"),RKo=o(` class
method.`),PKo=l(),kx=a("p"),BKo=o("This class cannot be instantiated directly using "),hve=a("code"),IKo=o("__init__()"),NKo=o(" (throws an error)."),qKo=l(),Mt=a("div"),F(Sx.$$.fragment),jKo=l(),uve=a("p"),DKo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GKo=l(),Rd=a("p"),OKo=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),VKo=o("not"),XKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),zKo=o("from_pretrained()"),QKo=o(" to load the model weights."),WKo=l(),F(uF.$$.fragment),UKo=l(),ao=a("div"),F(Rx.$$.fragment),HKo=l(),_ve=a("p"),JKo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YKo=l(),on=a("p"),KKo=o("The model class to instantiate is selected based on the "),bve=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),q=a("ul"),pF=a("li"),Tve=a("strong"),sZo=o("albert"),lZo=o(" \u2014 "),IW=a("a"),iZo=o("AlbertForSequenceClassification"),dZo=o(" (ALBERT model)"),cZo=l(),_F=a("li"),Mve=a("strong"),mZo=o("bart"),fZo=o(" \u2014 "),NW=a("a"),gZo=o("BartForSequenceClassification"),hZo=o(" (BART model)"),uZo=l(),bF=a("li"),Eve=a("strong"),pZo=o("bert"),_Zo=o(" \u2014 "),qW=a("a"),bZo=o("BertForSequenceClassification"),vZo=o(" (BERT model)"),FZo=l(),vF=a("li"),Cve=a("strong"),TZo=o("big_bird"),MZo=o(" \u2014 "),jW=a("a"),EZo=o("BigBirdForSequenceClassification"),CZo=o(" (BigBird model)"),wZo=l(),FF=a("li"),wve=a("strong"),AZo=o("bigbird_pegasus"),LZo=o(" \u2014 "),DW=a("a"),yZo=o("BigBirdPegasusForSequenceClassification"),xZo=o(" (BigBird-Pegasus model)"),$Zo=l(),TF=a("li"),Ave=a("strong"),kZo=o("bloom"),SZo=o(" \u2014 "),GW=a("a"),RZo=o("BloomForSequenceClassification"),PZo=o(" (BLOOM model)"),BZo=l(),MF=a("li"),Lve=a("strong"),IZo=o("camembert"),NZo=o(" \u2014 "),OW=a("a"),qZo=o("CamembertForSequenceClassification"),jZo=o(" (CamemBERT model)"),DZo=l(),EF=a("li"),yve=a("strong"),GZo=o("canine"),OZo=o(" \u2014 "),VW=a("a"),VZo=o("CanineForSequenceClassification"),XZo=o(" (CANINE model)"),zZo=l(),CF=a("li"),xve=a("strong"),QZo=o("convbert"),WZo=o(" \u2014 "),XW=a("a"),UZo=o("ConvBertForSequenceClassification"),HZo=o(" (ConvBERT model)"),JZo=l(),wF=a("li"),$ve=a("strong"),YZo=o("ctrl"),KZo=o(" \u2014 "),zW=a("a"),ZZo=o("CTRLForSequenceClassification"),eer=o(" (CTRL model)"),oer=l(),AF=a("li"),kve=a("strong"),rer=o("data2vec-text"),ter=o(" \u2014 "),QW=a("a"),aer=o("Data2VecTextForSequenceClassification"),ner=o(" (Data2VecText model)"),ser=l(),LF=a("li"),Sve=a("strong"),ler=o("deberta"),ier=o(" \u2014 "),WW=a("a"),der=o("DebertaForSequenceClassification"),cer=o(" (DeBERTa model)"),mer=l(),yF=a("li"),Rve=a("strong"),fer=o("deberta-v2"),ger=o(" \u2014 "),UW=a("a"),her=o("DebertaV2ForSequenceClassification"),uer=o(" (DeBERTa-v2 model)"),per=l(),xF=a("li"),Pve=a("strong"),_er=o("distilbert"),ber=o(" \u2014 "),HW=a("a"),ver=o("DistilBertForSequenceClassification"),Fer=o(" (DistilBERT model)"),Ter=l(),$F=a("li"),Bve=a("strong"),Mer=o("electra"),Eer=o(" \u2014 "),JW=a("a"),Cer=o("ElectraForSequenceClassification"),wer=o(" (ELECTRA model)"),Aer=l(),kF=a("li"),Ive=a("strong"),Ler=o("ernie"),yer=o(" \u2014 "),YW=a("a"),xer=o("ErnieForSequenceClassification"),$er=o(" (ERNIE model)"),ker=l(),SF=a("li"),Nve=a("strong"),Ser=o("flaubert"),Rer=o(" \u2014 "),KW=a("a"),Per=o("FlaubertForSequenceClassification"),Ber=o(" (FlauBERT model)"),Ier=l(),RF=a("li"),qve=a("strong"),Ner=o("fnet"),qer=o(" \u2014 "),ZW=a("a"),jer=o("FNetForSequenceClassification"),Der=o(" (FNet model)"),Ger=l(),PF=a("li"),jve=a("strong"),Oer=o("funnel"),Ver=o(" \u2014 "),eU=a("a"),Xer=o("FunnelForSequenceClassification"),zer=o(" (Funnel Transformer model)"),Qer=l(),BF=a("li"),Dve=a("strong"),Wer=o("gpt2"),Uer=o(" \u2014 "),oU=a("a"),Her=o("GPT2ForSequenceClassification"),Jer=o(" (OpenAI GPT-2 model)"),Yer=l(),IF=a("li"),Gve=a("strong"),Ker=o("gpt_neo"),Zer=o(" \u2014 "),rU=a("a"),eor=o("GPTNeoForSequenceClassification"),oor=o(" (GPT Neo model)"),ror=l(),NF=a("li"),Ove=a("strong"),tor=o("gptj"),aor=o(" \u2014 "),tU=a("a"),nor=o("GPTJForSequenceClassification"),sor=o(" (GPT-J model)"),lor=l(),qF=a("li"),Vve=a("strong"),ior=o("ibert"),dor=o(" \u2014 "),aU=a("a"),cor=o("IBertForSequenceClassification"),mor=o(" (I-BERT model)"),gor=l(),jF=a("li"),Xve=a("strong"),hor=o("layoutlm"),uor=o(" \u2014 "),nU=a("a"),por=o("LayoutLMForSequenceClassification"),_or=o(" (LayoutLM model)"),bor=l(),DF=a("li"),zve=a("strong"),vor=o("layoutlmv2"),For=o(" \u2014 "),sU=a("a"),Tor=o("LayoutLMv2ForSequenceClassification"),Mor=o(" (LayoutLMv2 model)"),Eor=l(),GF=a("li"),Qve=a("strong"),Cor=o("layoutlmv3"),wor=o(" \u2014 "),lU=a("a"),Aor=o("LayoutLMv3ForSequenceClassification"),Lor=o(" (LayoutLMv3 model)"),yor=l(),OF=a("li"),Wve=a("strong"),xor=o("led"),$or=o(" \u2014 "),iU=a("a"),kor=o("LEDForSequenceClassification"),Sor=o(" (LED model)"),Ror=l(),VF=a("li"),Uve=a("strong"),Por=o("longformer"),Bor=o(" \u2014 "),dU=a("a"),Ior=o("LongformerForSequenceClassification"),Nor=o(" (Longformer model)"),qor=l(),XF=a("li"),Hve=a("strong"),jor=o("luke"),Dor=o(" \u2014 "),cU=a("a"),Gor=o("LukeForSequenceClassification"),Oor=o(" (LUKE model)"),Vor=l(),zF=a("li"),Jve=a("strong"),Xor=o("mbart"),zor=o(" \u2014 "),mU=a("a"),Qor=o("MBartForSequenceClassification"),Wor=o(" (mBART model)"),Uor=l(),QF=a("li"),Yve=a("strong"),Hor=o("megatron-bert"),Jor=o(" \u2014 "),fU=a("a"),Yor=o("MegatronBertForSequenceClassification"),Kor=o(" (Megatron-BERT model)"),Zor=l(),WF=a("li"),Kve=a("strong"),err=o("mobilebert"),orr=o(" \u2014 "),gU=a("a"),rrr=o("MobileBertForSequenceClassification"),trr=o(" (MobileBERT model)"),arr=l(),UF=a("li"),Zve=a("strong"),nrr=o("mpnet"),srr=o(" \u2014 "),hU=a("a"),lrr=o("MPNetForSequenceClassification"),irr=o(" (MPNet model)"),drr=l(),HF=a("li"),eFe=a("strong"),crr=o("mvp"),mrr=o(" \u2014 "),uU=a("a"),frr=o("MvpForSequenceClassification"),grr=o(" (MVP model)"),hrr=l(),JF=a("li"),oFe=a("strong"),urr=o("nezha"),prr=o(" \u2014 "),pU=a("a"),_rr=o("NezhaForSequenceClassification"),brr=o(" (Nezha model)"),vrr=l(),YF=a("li"),rFe=a("strong"),Frr=o("nystromformer"),Trr=o(" \u2014 "),_U=a("a"),Mrr=o("NystromformerForSequenceClassification"),Err=o(" (Nystr\xF6mformer model)"),Crr=l(),KF=a("li"),tFe=a("strong"),wrr=o("openai-gpt"),Arr=o(" \u2014 "),bU=a("a"),Lrr=o("OpenAIGPTForSequenceClassification"),yrr=o(" (OpenAI GPT model)"),xrr=l(),ZF=a("li"),aFe=a("strong"),$rr=o("opt"),krr=o(" \u2014 "),vU=a("a"),Srr=o("OPTForSequenceClassification"),Rrr=o(" (OPT model)"),Prr=l(),eT=a("li"),nFe=a("strong"),Brr=o("perceiver"),Irr=o(" \u2014 "),FU=a("a"),Nrr=o("PerceiverForSequenceClassification"),qrr=o(" (Perceiver model)"),jrr=l(),oT=a("li"),sFe=a("strong"),Drr=o("plbart"),Grr=o(" \u2014 "),TU=a("a"),Orr=o("PLBartForSequenceClassification"),Vrr=o(" (PLBart model)"),Xrr=l(),rT=a("li"),lFe=a("strong"),zrr=o("qdqbert"),Qrr=o(" \u2014 "),MU=a("a"),Wrr=o("QDQBertForSequenceClassification"),Urr=o(" (QDQBert model)"),Hrr=l(),tT=a("li"),iFe=a("strong"),Jrr=o("reformer"),Yrr=o(" \u2014 "),EU=a("a"),Krr=o("ReformerForSequenceClassification"),Zrr=o(" (Reformer model)"),etr=l(),aT=a("li"),dFe=a("strong"),otr=o("rembert"),rtr=o(" \u2014 "),CU=a("a"),ttr=o("RemBertForSequenceClassification"),atr=o(" (RemBERT model)"),ntr=l(),nT=a("li"),cFe=a("strong"),str=o("roberta"),ltr=o(" \u2014 "),wU=a("a"),itr=o("RobertaForSequenceClassification"),dtr=o(" (RoBERTa model)"),ctr=l(),sT=a("li"),mFe=a("strong"),mtr=o("roformer"),ftr=o(" \u2014 "),AU=a("a"),gtr=o("RoFormerForSequenceClassification"),htr=o(" (RoFormer model)"),utr=l(),lT=a("li"),fFe=a("strong"),ptr=o("squeezebert"),_tr=o(" \u2014 "),LU=a("a"),btr=o("SqueezeBertForSequenceClassification"),vtr=o(" (SqueezeBERT model)"),Ftr=l(),iT=a("li"),gFe=a("strong"),Ttr=o("tapas"),Mtr=o(" \u2014 "),yU=a("a"),Etr=o("TapasForSequenceClassification"),Ctr=o(" (TAPAS model)"),wtr=l(),dT=a("li"),hFe=a("strong"),Atr=o("transfo-xl"),Ltr=o(" \u2014 "),xU=a("a"),ytr=o("TransfoXLForSequenceClassification"),xtr=o(" (Transformer-XL model)"),$tr=l(),cT=a("li"),uFe=a("strong"),ktr=o("xlm"),Str=o(" \u2014 "),$U=a("a"),Rtr=o("XLMForSequenceClassification"),Ptr=o(" (XLM model)"),Btr=l(),mT=a("li"),pFe=a("strong"),Itr=o("xlm-roberta"),Ntr=o(" \u2014 "),kU=a("a"),qtr=o("XLMRobertaForSequenceClassification"),jtr=o(" (XLM-RoBERTa model)"),Dtr=l(),fT=a("li"),_Fe=a("strong"),Gtr=o("xlm-roberta-xl"),Otr=o(" \u2014 "),SU=a("a"),Vtr=o("XLMRobertaXLForSequenceClassification"),Xtr=o(" (XLM-RoBERTa-XL model)"),ztr=l(),gT=a("li"),bFe=a("strong"),Qtr=o("xlnet"),Wtr=o(" \u2014 "),RU=a("a"),Utr=o("XLNetForSequenceClassification"),Htr=o(" (XLNet model)"),Jtr=l(),hT=a("li"),vFe=a("strong"),Ytr=o("yoso"),Ktr=o(" \u2014 "),PU=a("a"),Ztr=o("YosoForSequenceClassification"),ear=o(" (YOSO model)"),oar=l(),uT=a("p"),rar=o("The model is set in evaluation mode by default using "),FFe=a("code"),tar=o("model.eval()"),aar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=a("code"),nar=o("model.train()"),sar=l(),F(pT.$$.fragment),BKe=l(),Pd=a("h2"),_T=a("a"),MFe=a("span"),F(Px.$$.fragment),lar=l(),EFe=a("span"),iar=o("AutoModelForMultipleChoice"),IKe=l(),Do=a("div"),F(Bx.$$.fragment),dar=l(),Bd=a("p"),car=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BU=a("a"),mar=o("from_pretrained()"),far=o(" class method or the "),IU=a("a"),gar=o("from_config()"),har=o(` class
method.`),uar=l(),Ix=a("p"),par=o("This class cannot be instantiated directly using "),CFe=a("code"),_ar=o("__init__()"),bar=o(" (throws an error)."),Far=l(),Et=a("div"),F(Nx.$$.fragment),Tar=l(),wFe=a("p"),Mar=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ear=l(),Id=a("p"),Car=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),war=o("not"),Aar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),Lar=o("from_pretrained()"),yar=o(" to load the model weights."),xar=l(),F(bT.$$.fragment),$ar=l(),no=a("div"),F(qx.$$.fragment),kar=l(),LFe=a("p"),Sar=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rar=l(),rn=a("p"),Par=o("The model class to instantiate is selected based on the "),yFe=a("code"),Bar=o("model_type"),Iar=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),Nar=o("pretrained_model_name_or_path"),qar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),jar=o("pretrained_model_name_or_path"),Dar=o(":"),Gar=l(),Z=a("ul"),vT=a("li"),kFe=a("strong"),Oar=o("albert"),Var=o(" \u2014 "),qU=a("a"),Xar=o("AlbertForMultipleChoice"),zar=o(" (ALBERT model)"),Qar=l(),FT=a("li"),SFe=a("strong"),War=o("bert"),Uar=o(" \u2014 "),jU=a("a"),Har=o("BertForMultipleChoice"),Jar=o(" (BERT model)"),Yar=l(),TT=a("li"),RFe=a("strong"),Kar=o("big_bird"),Zar=o(" \u2014 "),DU=a("a"),enr=o("BigBirdForMultipleChoice"),onr=o(" (BigBird model)"),rnr=l(),MT=a("li"),PFe=a("strong"),tnr=o("camembert"),anr=o(" \u2014 "),GU=a("a"),nnr=o("CamembertForMultipleChoice"),snr=o(" (CamemBERT model)"),lnr=l(),ET=a("li"),BFe=a("strong"),inr=o("canine"),dnr=o(" \u2014 "),OU=a("a"),cnr=o("CanineForMultipleChoice"),mnr=o(" (CANINE model)"),fnr=l(),CT=a("li"),IFe=a("strong"),gnr=o("convbert"),hnr=o(" \u2014 "),VU=a("a"),unr=o("ConvBertForMultipleChoice"),pnr=o(" (ConvBERT model)"),_nr=l(),wT=a("li"),NFe=a("strong"),bnr=o("data2vec-text"),vnr=o(" \u2014 "),XU=a("a"),Fnr=o("Data2VecTextForMultipleChoice"),Tnr=o(" (Data2VecText model)"),Mnr=l(),AT=a("li"),qFe=a("strong"),Enr=o("deberta-v2"),Cnr=o(" \u2014 "),zU=a("a"),wnr=o("DebertaV2ForMultipleChoice"),Anr=o(" (DeBERTa-v2 model)"),Lnr=l(),LT=a("li"),jFe=a("strong"),ynr=o("distilbert"),xnr=o(" \u2014 "),QU=a("a"),$nr=o("DistilBertForMultipleChoice"),knr=o(" (DistilBERT model)"),Snr=l(),yT=a("li"),DFe=a("strong"),Rnr=o("electra"),Pnr=o(" \u2014 "),WU=a("a"),Bnr=o("ElectraForMultipleChoice"),Inr=o(" (ELECTRA model)"),Nnr=l(),xT=a("li"),GFe=a("strong"),qnr=o("ernie"),jnr=o(" \u2014 "),UU=a("a"),Dnr=o("ErnieForMultipleChoice"),Gnr=o(" (ERNIE model)"),Onr=l(),$T=a("li"),OFe=a("strong"),Vnr=o("flaubert"),Xnr=o(" \u2014 "),HU=a("a"),znr=o("FlaubertForMultipleChoice"),Qnr=o(" (FlauBERT model)"),Wnr=l(),kT=a("li"),VFe=a("strong"),Unr=o("fnet"),Hnr=o(" \u2014 "),JU=a("a"),Jnr=o("FNetForMultipleChoice"),Ynr=o(" (FNet model)"),Knr=l(),ST=a("li"),XFe=a("strong"),Znr=o("funnel"),esr=o(" \u2014 "),YU=a("a"),osr=o("FunnelForMultipleChoice"),rsr=o(" (Funnel Transformer model)"),tsr=l(),RT=a("li"),zFe=a("strong"),asr=o("ibert"),nsr=o(" \u2014 "),KU=a("a"),ssr=o("IBertForMultipleChoice"),lsr=o(" (I-BERT model)"),isr=l(),PT=a("li"),QFe=a("strong"),dsr=o("longformer"),csr=o(" \u2014 "),ZU=a("a"),msr=o("LongformerForMultipleChoice"),fsr=o(" (Longformer model)"),gsr=l(),BT=a("li"),WFe=a("strong"),hsr=o("luke"),usr=o(" \u2014 "),eH=a("a"),psr=o("LukeForMultipleChoice"),_sr=o(" (LUKE model)"),bsr=l(),IT=a("li"),UFe=a("strong"),vsr=o("megatron-bert"),Fsr=o(" \u2014 "),oH=a("a"),Tsr=o("MegatronBertForMultipleChoice"),Msr=o(" (Megatron-BERT model)"),Esr=l(),NT=a("li"),HFe=a("strong"),Csr=o("mobilebert"),wsr=o(" \u2014 "),rH=a("a"),Asr=o("MobileBertForMultipleChoice"),Lsr=o(" (MobileBERT model)"),ysr=l(),qT=a("li"),JFe=a("strong"),xsr=o("mpnet"),$sr=o(" \u2014 "),tH=a("a"),ksr=o("MPNetForMultipleChoice"),Ssr=o(" (MPNet model)"),Rsr=l(),jT=a("li"),YFe=a("strong"),Psr=o("nezha"),Bsr=o(" \u2014 "),aH=a("a"),Isr=o("NezhaForMultipleChoice"),Nsr=o(" (Nezha model)"),qsr=l(),DT=a("li"),KFe=a("strong"),jsr=o("nystromformer"),Dsr=o(" \u2014 "),nH=a("a"),Gsr=o("NystromformerForMultipleChoice"),Osr=o(" (Nystr\xF6mformer model)"),Vsr=l(),GT=a("li"),ZFe=a("strong"),Xsr=o("qdqbert"),zsr=o(" \u2014 "),sH=a("a"),Qsr=o("QDQBertForMultipleChoice"),Wsr=o(" (QDQBert model)"),Usr=l(),OT=a("li"),eTe=a("strong"),Hsr=o("rembert"),Jsr=o(" \u2014 "),lH=a("a"),Ysr=o("RemBertForMultipleChoice"),Ksr=o(" (RemBERT model)"),Zsr=l(),VT=a("li"),oTe=a("strong"),elr=o("roberta"),olr=o(" \u2014 "),iH=a("a"),rlr=o("RobertaForMultipleChoice"),tlr=o(" (RoBERTa model)"),alr=l(),XT=a("li"),rTe=a("strong"),nlr=o("roformer"),slr=o(" \u2014 "),dH=a("a"),llr=o("RoFormerForMultipleChoice"),ilr=o(" (RoFormer model)"),dlr=l(),zT=a("li"),tTe=a("strong"),clr=o("squeezebert"),mlr=o(" \u2014 "),cH=a("a"),flr=o("SqueezeBertForMultipleChoice"),glr=o(" (SqueezeBERT model)"),hlr=l(),QT=a("li"),aTe=a("strong"),ulr=o("xlm"),plr=o(" \u2014 "),mH=a("a"),_lr=o("XLMForMultipleChoice"),blr=o(" (XLM model)"),vlr=l(),WT=a("li"),nTe=a("strong"),Flr=o("xlm-roberta"),Tlr=o(" \u2014 "),fH=a("a"),Mlr=o("XLMRobertaForMultipleChoice"),Elr=o(" (XLM-RoBERTa model)"),Clr=l(),UT=a("li"),sTe=a("strong"),wlr=o("xlm-roberta-xl"),Alr=o(" \u2014 "),gH=a("a"),Llr=o("XLMRobertaXLForMultipleChoice"),ylr=o(" (XLM-RoBERTa-XL model)"),xlr=l(),HT=a("li"),lTe=a("strong"),$lr=o("xlnet"),klr=o(" \u2014 "),hH=a("a"),Slr=o("XLNetForMultipleChoice"),Rlr=o(" (XLNet model)"),Plr=l(),JT=a("li"),iTe=a("strong"),Blr=o("yoso"),Ilr=o(" \u2014 "),uH=a("a"),Nlr=o("YosoForMultipleChoice"),qlr=o(" (YOSO model)"),jlr=l(),YT=a("p"),Dlr=o("The model is set in evaluation mode by default using "),dTe=a("code"),Glr=o("model.eval()"),Olr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=a("code"),Vlr=o("model.train()"),Xlr=l(),F(KT.$$.fragment),NKe=l(),Nd=a("h2"),ZT=a("a"),mTe=a("span"),F(jx.$$.fragment),zlr=l(),fTe=a("span"),Qlr=o("AutoModelForNextSentencePrediction"),qKe=l(),Go=a("div"),F(Dx.$$.fragment),Wlr=l(),qd=a("p"),Ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pH=a("a"),Hlr=o("from_pretrained()"),Jlr=o(" class method or the "),_H=a("a"),Ylr=o("from_config()"),Klr=o(` class
method.`),Zlr=l(),Gx=a("p"),eir=o("This class cannot be instantiated directly using "),gTe=a("code"),oir=o("__init__()"),rir=o(" (throws an error)."),tir=l(),Ct=a("div"),F(Ox.$$.fragment),air=l(),hTe=a("p"),nir=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sir=l(),jd=a("p"),lir=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),iir=o("not"),dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),cir=o("from_pretrained()"),mir=o(" to load the model weights."),fir=l(),F(eM.$$.fragment),gir=l(),so=a("div"),F(Vx.$$.fragment),hir=l(),pTe=a("p"),uir=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pir=l(),tn=a("p"),_ir=o("The model class to instantiate is selected based on the "),_Te=a("code"),bir=o("model_type"),vir=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),Fir=o("pretrained_model_name_or_path"),Tir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),Mir=o("pretrained_model_name_or_path"),Eir=o(":"),Cir=l(),Ue=a("ul"),oM=a("li"),FTe=a("strong"),wir=o("bert"),Air=o(" \u2014 "),vH=a("a"),Lir=o("BertForNextSentencePrediction"),yir=o(" (BERT model)"),xir=l(),rM=a("li"),TTe=a("strong"),$ir=o("ernie"),kir=o(" \u2014 "),FH=a("a"),Sir=o("ErnieForNextSentencePrediction"),Rir=o(" (ERNIE model)"),Pir=l(),tM=a("li"),MTe=a("strong"),Bir=o("fnet"),Iir=o(" \u2014 "),TH=a("a"),Nir=o("FNetForNextSentencePrediction"),qir=o(" (FNet model)"),jir=l(),aM=a("li"),ETe=a("strong"),Dir=o("megatron-bert"),Gir=o(" \u2014 "),MH=a("a"),Oir=o("MegatronBertForNextSentencePrediction"),Vir=o(" (Megatron-BERT model)"),Xir=l(),nM=a("li"),CTe=a("strong"),zir=o("mobilebert"),Qir=o(" \u2014 "),EH=a("a"),Wir=o("MobileBertForNextSentencePrediction"),Uir=o(" (MobileBERT model)"),Hir=l(),sM=a("li"),wTe=a("strong"),Jir=o("nezha"),Yir=o(" \u2014 "),CH=a("a"),Kir=o("NezhaForNextSentencePrediction"),Zir=o(" (Nezha model)"),edr=l(),lM=a("li"),ATe=a("strong"),odr=o("qdqbert"),rdr=o(" \u2014 "),wH=a("a"),tdr=o("QDQBertForNextSentencePrediction"),adr=o(" (QDQBert model)"),ndr=l(),iM=a("p"),sdr=o("The model is set in evaluation mode by default using "),LTe=a("code"),ldr=o("model.eval()"),idr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yTe=a("code"),ddr=o("model.train()"),cdr=l(),F(dM.$$.fragment),jKe=l(),Dd=a("h2"),cM=a("a"),xTe=a("span"),F(Xx.$$.fragment),mdr=l(),$Te=a("span"),fdr=o("AutoModelForTokenClassification"),DKe=l(),Oo=a("div"),F(zx.$$.fragment),gdr=l(),Gd=a("p"),hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AH=a("a"),udr=o("from_pretrained()"),pdr=o(" class method or the "),LH=a("a"),_dr=o("from_config()"),bdr=o(` class
method.`),vdr=l(),Qx=a("p"),Fdr=o("This class cannot be instantiated directly using "),kTe=a("code"),Tdr=o("__init__()"),Mdr=o(" (throws an error)."),Edr=l(),wt=a("div"),F(Wx.$$.fragment),Cdr=l(),STe=a("p"),wdr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Adr=l(),Od=a("p"),Ldr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),ydr=o("not"),xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),$dr=o("from_pretrained()"),kdr=o(" to load the model weights."),Sdr=l(),F(mM.$$.fragment),Rdr=l(),lo=a("div"),F(Ux.$$.fragment),Pdr=l(),PTe=a("p"),Bdr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Idr=l(),an=a("p"),Ndr=o("The model class to instantiate is selected based on the "),BTe=a("code"),qdr=o("model_type"),jdr=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),Ddr=o("pretrained_model_name_or_path"),Gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),Odr=o("pretrained_model_name_or_path"),Vdr=o(":"),Xdr=l(),J=a("ul"),fM=a("li"),qTe=a("strong"),zdr=o("albert"),Qdr=o(" \u2014 "),xH=a("a"),Wdr=o("AlbertForTokenClassification"),Udr=o(" (ALBERT model)"),Hdr=l(),gM=a("li"),jTe=a("strong"),Jdr=o("bert"),Ydr=o(" \u2014 "),$H=a("a"),Kdr=o("BertForTokenClassification"),Zdr=o(" (BERT model)"),ecr=l(),hM=a("li"),DTe=a("strong"),ocr=o("big_bird"),rcr=o(" \u2014 "),kH=a("a"),tcr=o("BigBirdForTokenClassification"),acr=o(" (BigBird model)"),ncr=l(),uM=a("li"),GTe=a("strong"),scr=o("bloom"),lcr=o(" \u2014 "),SH=a("a"),icr=o("BloomForTokenClassification"),dcr=o(" (BLOOM model)"),ccr=l(),pM=a("li"),OTe=a("strong"),mcr=o("camembert"),fcr=o(" \u2014 "),RH=a("a"),gcr=o("CamembertForTokenClassification"),hcr=o(" (CamemBERT model)"),ucr=l(),_M=a("li"),VTe=a("strong"),pcr=o("canine"),_cr=o(" \u2014 "),PH=a("a"),bcr=o("CanineForTokenClassification"),vcr=o(" (CANINE model)"),Fcr=l(),bM=a("li"),XTe=a("strong"),Tcr=o("convbert"),Mcr=o(" \u2014 "),BH=a("a"),Ecr=o("ConvBertForTokenClassification"),Ccr=o(" (ConvBERT model)"),wcr=l(),vM=a("li"),zTe=a("strong"),Acr=o("data2vec-text"),Lcr=o(" \u2014 "),IH=a("a"),ycr=o("Data2VecTextForTokenClassification"),xcr=o(" (Data2VecText model)"),$cr=l(),FM=a("li"),QTe=a("strong"),kcr=o("deberta"),Scr=o(" \u2014 "),NH=a("a"),Rcr=o("DebertaForTokenClassification"),Pcr=o(" (DeBERTa model)"),Bcr=l(),TM=a("li"),WTe=a("strong"),Icr=o("deberta-v2"),Ncr=o(" \u2014 "),qH=a("a"),qcr=o("DebertaV2ForTokenClassification"),jcr=o(" (DeBERTa-v2 model)"),Dcr=l(),MM=a("li"),UTe=a("strong"),Gcr=o("distilbert"),Ocr=o(" \u2014 "),jH=a("a"),Vcr=o("DistilBertForTokenClassification"),Xcr=o(" (DistilBERT model)"),zcr=l(),EM=a("li"),HTe=a("strong"),Qcr=o("electra"),Wcr=o(" \u2014 "),DH=a("a"),Ucr=o("ElectraForTokenClassification"),Hcr=o(" (ELECTRA model)"),Jcr=l(),CM=a("li"),JTe=a("strong"),Ycr=o("ernie"),Kcr=o(" \u2014 "),GH=a("a"),Zcr=o("ErnieForTokenClassification"),emr=o(" (ERNIE model)"),omr=l(),wM=a("li"),YTe=a("strong"),rmr=o("flaubert"),tmr=o(" \u2014 "),OH=a("a"),amr=o("FlaubertForTokenClassification"),nmr=o(" (FlauBERT model)"),smr=l(),AM=a("li"),KTe=a("strong"),lmr=o("fnet"),imr=o(" \u2014 "),VH=a("a"),dmr=o("FNetForTokenClassification"),cmr=o(" (FNet model)"),mmr=l(),LM=a("li"),ZTe=a("strong"),fmr=o("funnel"),gmr=o(" \u2014 "),XH=a("a"),hmr=o("FunnelForTokenClassification"),umr=o(" (Funnel Transformer model)"),pmr=l(),yM=a("li"),eMe=a("strong"),_mr=o("gpt2"),bmr=o(" \u2014 "),zH=a("a"),vmr=o("GPT2ForTokenClassification"),Fmr=o(" (OpenAI GPT-2 model)"),Tmr=l(),xM=a("li"),oMe=a("strong"),Mmr=o("ibert"),Emr=o(" \u2014 "),QH=a("a"),Cmr=o("IBertForTokenClassification"),wmr=o(" (I-BERT model)"),Amr=l(),$M=a("li"),rMe=a("strong"),Lmr=o("layoutlm"),ymr=o(" \u2014 "),WH=a("a"),xmr=o("LayoutLMForTokenClassification"),$mr=o(" (LayoutLM model)"),kmr=l(),kM=a("li"),tMe=a("strong"),Smr=o("layoutlmv2"),Rmr=o(" \u2014 "),UH=a("a"),Pmr=o("LayoutLMv2ForTokenClassification"),Bmr=o(" (LayoutLMv2 model)"),Imr=l(),SM=a("li"),aMe=a("strong"),Nmr=o("layoutlmv3"),qmr=o(" \u2014 "),HH=a("a"),jmr=o("LayoutLMv3ForTokenClassification"),Dmr=o(" (LayoutLMv3 model)"),Gmr=l(),RM=a("li"),nMe=a("strong"),Omr=o("longformer"),Vmr=o(" \u2014 "),JH=a("a"),Xmr=o("LongformerForTokenClassification"),zmr=o(" (Longformer model)"),Qmr=l(),PM=a("li"),sMe=a("strong"),Wmr=o("luke"),Umr=o(" \u2014 "),YH=a("a"),Hmr=o("LukeForTokenClassification"),Jmr=o(" (LUKE model)"),Ymr=l(),BM=a("li"),lMe=a("strong"),Kmr=o("megatron-bert"),Zmr=o(" \u2014 "),KH=a("a"),efr=o("MegatronBertForTokenClassification"),ofr=o(" (Megatron-BERT model)"),rfr=l(),IM=a("li"),iMe=a("strong"),tfr=o("mobilebert"),afr=o(" \u2014 "),ZH=a("a"),nfr=o("MobileBertForTokenClassification"),sfr=o(" (MobileBERT model)"),lfr=l(),NM=a("li"),dMe=a("strong"),ifr=o("mpnet"),dfr=o(" \u2014 "),eJ=a("a"),cfr=o("MPNetForTokenClassification"),mfr=o(" (MPNet model)"),ffr=l(),qM=a("li"),cMe=a("strong"),gfr=o("nezha"),hfr=o(" \u2014 "),oJ=a("a"),ufr=o("NezhaForTokenClassification"),pfr=o(" (Nezha model)"),_fr=l(),jM=a("li"),mMe=a("strong"),bfr=o("nystromformer"),vfr=o(" \u2014 "),rJ=a("a"),Ffr=o("NystromformerForTokenClassification"),Tfr=o(" (Nystr\xF6mformer model)"),Mfr=l(),DM=a("li"),fMe=a("strong"),Efr=o("qdqbert"),Cfr=o(" \u2014 "),tJ=a("a"),wfr=o("QDQBertForTokenClassification"),Afr=o(" (QDQBert model)"),Lfr=l(),GM=a("li"),gMe=a("strong"),yfr=o("rembert"),xfr=o(" \u2014 "),aJ=a("a"),$fr=o("RemBertForTokenClassification"),kfr=o(" (RemBERT model)"),Sfr=l(),OM=a("li"),hMe=a("strong"),Rfr=o("roberta"),Pfr=o(" \u2014 "),nJ=a("a"),Bfr=o("RobertaForTokenClassification"),Ifr=o(" (RoBERTa model)"),Nfr=l(),VM=a("li"),uMe=a("strong"),qfr=o("roformer"),jfr=o(" \u2014 "),sJ=a("a"),Dfr=o("RoFormerForTokenClassification"),Gfr=o(" (RoFormer model)"),Ofr=l(),XM=a("li"),pMe=a("strong"),Vfr=o("squeezebert"),Xfr=o(" \u2014 "),lJ=a("a"),zfr=o("SqueezeBertForTokenClassification"),Qfr=o(" (SqueezeBERT model)"),Wfr=l(),zM=a("li"),_Me=a("strong"),Ufr=o("xlm"),Hfr=o(" \u2014 "),iJ=a("a"),Jfr=o("XLMForTokenClassification"),Yfr=o(" (XLM model)"),Kfr=l(),QM=a("li"),bMe=a("strong"),Zfr=o("xlm-roberta"),egr=o(" \u2014 "),dJ=a("a"),ogr=o("XLMRobertaForTokenClassification"),rgr=o(" (XLM-RoBERTa model)"),tgr=l(),WM=a("li"),vMe=a("strong"),agr=o("xlm-roberta-xl"),ngr=o(" \u2014 "),cJ=a("a"),sgr=o("XLMRobertaXLForTokenClassification"),lgr=o(" (XLM-RoBERTa-XL model)"),igr=l(),UM=a("li"),FMe=a("strong"),dgr=o("xlnet"),cgr=o(" \u2014 "),mJ=a("a"),mgr=o("XLNetForTokenClassification"),fgr=o(" (XLNet model)"),ggr=l(),HM=a("li"),TMe=a("strong"),hgr=o("yoso"),ugr=o(" \u2014 "),fJ=a("a"),pgr=o("YosoForTokenClassification"),_gr=o(" (YOSO model)"),bgr=l(),JM=a("p"),vgr=o("The model is set in evaluation mode by default using "),MMe=a("code"),Fgr=o("model.eval()"),Tgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EMe=a("code"),Mgr=o("model.train()"),Egr=l(),F(YM.$$.fragment),GKe=l(),Vd=a("h2"),KM=a("a"),CMe=a("span"),F(Hx.$$.fragment),Cgr=l(),wMe=a("span"),wgr=o("AutoModelForQuestionAnswering"),OKe=l(),Vo=a("div"),F(Jx.$$.fragment),Agr=l(),Xd=a("p"),Lgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gJ=a("a"),ygr=o("from_pretrained()"),xgr=o(" class method or the "),hJ=a("a"),$gr=o("from_config()"),kgr=o(` class
method.`),Sgr=l(),Yx=a("p"),Rgr=o("This class cannot be instantiated directly using "),AMe=a("code"),Pgr=o("__init__()"),Bgr=o(" (throws an error)."),Igr=l(),At=a("div"),F(Kx.$$.fragment),Ngr=l(),LMe=a("p"),qgr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jgr=l(),zd=a("p"),Dgr=o(`Note:
Loading a model from its configuration file does `),yMe=a("strong"),Ggr=o("not"),Ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" to load the model weights."),zgr=l(),F(ZM.$$.fragment),Qgr=l(),io=a("div"),F(Zx.$$.fragment),Wgr=l(),xMe=a("p"),Ugr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hgr=l(),nn=a("p"),Jgr=o("The model class to instantiate is selected based on the "),$Me=a("code"),Ygr=o("model_type"),Kgr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),Zgr=o("pretrained_model_name_or_path"),ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(":"),thr=l(),V=a("ul"),eE=a("li"),RMe=a("strong"),ahr=o("albert"),nhr=o(" \u2014 "),pJ=a("a"),shr=o("AlbertForQuestionAnswering"),lhr=o(" (ALBERT model)"),ihr=l(),oE=a("li"),PMe=a("strong"),dhr=o("bart"),chr=o(" \u2014 "),_J=a("a"),mhr=o("BartForQuestionAnswering"),fhr=o(" (BART model)"),ghr=l(),rE=a("li"),BMe=a("strong"),hhr=o("bert"),uhr=o(" \u2014 "),bJ=a("a"),phr=o("BertForQuestionAnswering"),_hr=o(" (BERT model)"),bhr=l(),tE=a("li"),IMe=a("strong"),vhr=o("big_bird"),Fhr=o(" \u2014 "),vJ=a("a"),Thr=o("BigBirdForQuestionAnswering"),Mhr=o(" (BigBird model)"),Ehr=l(),aE=a("li"),NMe=a("strong"),Chr=o("bigbird_pegasus"),whr=o(" \u2014 "),FJ=a("a"),Ahr=o("BigBirdPegasusForQuestionAnswering"),Lhr=o(" (BigBird-Pegasus model)"),yhr=l(),nE=a("li"),qMe=a("strong"),xhr=o("camembert"),$hr=o(" \u2014 "),TJ=a("a"),khr=o("CamembertForQuestionAnswering"),Shr=o(" (CamemBERT model)"),Rhr=l(),sE=a("li"),jMe=a("strong"),Phr=o("canine"),Bhr=o(" \u2014 "),MJ=a("a"),Ihr=o("CanineForQuestionAnswering"),Nhr=o(" (CANINE model)"),qhr=l(),lE=a("li"),DMe=a("strong"),jhr=o("convbert"),Dhr=o(" \u2014 "),EJ=a("a"),Ghr=o("ConvBertForQuestionAnswering"),Ohr=o(" (ConvBERT model)"),Vhr=l(),iE=a("li"),GMe=a("strong"),Xhr=o("data2vec-text"),zhr=o(" \u2014 "),CJ=a("a"),Qhr=o("Data2VecTextForQuestionAnswering"),Whr=o(" (Data2VecText model)"),Uhr=l(),dE=a("li"),OMe=a("strong"),Hhr=o("deberta"),Jhr=o(" \u2014 "),wJ=a("a"),Yhr=o("DebertaForQuestionAnswering"),Khr=o(" (DeBERTa model)"),Zhr=l(),cE=a("li"),VMe=a("strong"),eur=o("deberta-v2"),our=o(" \u2014 "),AJ=a("a"),rur=o("DebertaV2ForQuestionAnswering"),tur=o(" (DeBERTa-v2 model)"),aur=l(),mE=a("li"),XMe=a("strong"),nur=o("distilbert"),sur=o(" \u2014 "),LJ=a("a"),lur=o("DistilBertForQuestionAnswering"),iur=o(" (DistilBERT model)"),dur=l(),fE=a("li"),zMe=a("strong"),cur=o("electra"),mur=o(" \u2014 "),yJ=a("a"),fur=o("ElectraForQuestionAnswering"),gur=o(" (ELECTRA model)"),hur=l(),gE=a("li"),QMe=a("strong"),uur=o("ernie"),pur=o(" \u2014 "),xJ=a("a"),_ur=o("ErnieForQuestionAnswering"),bur=o(" (ERNIE model)"),vur=l(),hE=a("li"),WMe=a("strong"),Fur=o("flaubert"),Tur=o(" \u2014 "),$J=a("a"),Mur=o("FlaubertForQuestionAnsweringSimple"),Eur=o(" (FlauBERT model)"),Cur=l(),uE=a("li"),UMe=a("strong"),wur=o("fnet"),Aur=o(" \u2014 "),kJ=a("a"),Lur=o("FNetForQuestionAnswering"),yur=o(" (FNet model)"),xur=l(),pE=a("li"),HMe=a("strong"),$ur=o("funnel"),kur=o(" \u2014 "),SJ=a("a"),Sur=o("FunnelForQuestionAnswering"),Rur=o(" (Funnel Transformer model)"),Pur=l(),_E=a("li"),JMe=a("strong"),Bur=o("gptj"),Iur=o(" \u2014 "),RJ=a("a"),Nur=o("GPTJForQuestionAnswering"),qur=o(" (GPT-J model)"),jur=l(),bE=a("li"),YMe=a("strong"),Dur=o("ibert"),Gur=o(" \u2014 "),PJ=a("a"),Our=o("IBertForQuestionAnswering"),Vur=o(" (I-BERT model)"),Xur=l(),vE=a("li"),KMe=a("strong"),zur=o("layoutlmv2"),Qur=o(" \u2014 "),BJ=a("a"),Wur=o("LayoutLMv2ForQuestionAnswering"),Uur=o(" (LayoutLMv2 model)"),Hur=l(),FE=a("li"),ZMe=a("strong"),Jur=o("layoutlmv3"),Yur=o(" \u2014 "),IJ=a("a"),Kur=o("LayoutLMv3ForQuestionAnswering"),Zur=o(" (LayoutLMv3 model)"),epr=l(),TE=a("li"),eEe=a("strong"),opr=o("led"),rpr=o(" \u2014 "),NJ=a("a"),tpr=o("LEDForQuestionAnswering"),apr=o(" (LED model)"),npr=l(),ME=a("li"),oEe=a("strong"),spr=o("longformer"),lpr=o(" \u2014 "),qJ=a("a"),ipr=o("LongformerForQuestionAnswering"),dpr=o(" (Longformer model)"),cpr=l(),EE=a("li"),rEe=a("strong"),mpr=o("luke"),fpr=o(" \u2014 "),jJ=a("a"),gpr=o("LukeForQuestionAnswering"),hpr=o(" (LUKE model)"),upr=l(),CE=a("li"),tEe=a("strong"),ppr=o("lxmert"),_pr=o(" \u2014 "),DJ=a("a"),bpr=o("LxmertForQuestionAnswering"),vpr=o(" (LXMERT model)"),Fpr=l(),wE=a("li"),aEe=a("strong"),Tpr=o("mbart"),Mpr=o(" \u2014 "),GJ=a("a"),Epr=o("MBartForQuestionAnswering"),Cpr=o(" (mBART model)"),wpr=l(),AE=a("li"),nEe=a("strong"),Apr=o("megatron-bert"),Lpr=o(" \u2014 "),OJ=a("a"),ypr=o("MegatronBertForQuestionAnswering"),xpr=o(" (Megatron-BERT model)"),$pr=l(),LE=a("li"),sEe=a("strong"),kpr=o("mobilebert"),Spr=o(" \u2014 "),VJ=a("a"),Rpr=o("MobileBertForQuestionAnswering"),Ppr=o(" (MobileBERT model)"),Bpr=l(),yE=a("li"),lEe=a("strong"),Ipr=o("mpnet"),Npr=o(" \u2014 "),XJ=a("a"),qpr=o("MPNetForQuestionAnswering"),jpr=o(" (MPNet model)"),Dpr=l(),xE=a("li"),iEe=a("strong"),Gpr=o("mvp"),Opr=o(" \u2014 "),zJ=a("a"),Vpr=o("MvpForQuestionAnswering"),Xpr=o(" (MVP model)"),zpr=l(),$E=a("li"),dEe=a("strong"),Qpr=o("nezha"),Wpr=o(" \u2014 "),QJ=a("a"),Upr=o("NezhaForQuestionAnswering"),Hpr=o(" (Nezha model)"),Jpr=l(),kE=a("li"),cEe=a("strong"),Ypr=o("nystromformer"),Kpr=o(" \u2014 "),WJ=a("a"),Zpr=o("NystromformerForQuestionAnswering"),e_r=o(" (Nystr\xF6mformer model)"),o_r=l(),SE=a("li"),mEe=a("strong"),r_r=o("qdqbert"),t_r=o(" \u2014 "),UJ=a("a"),a_r=o("QDQBertForQuestionAnswering"),n_r=o(" (QDQBert model)"),s_r=l(),RE=a("li"),fEe=a("strong"),l_r=o("reformer"),i_r=o(" \u2014 "),HJ=a("a"),d_r=o("ReformerForQuestionAnswering"),c_r=o(" (Reformer model)"),m_r=l(),PE=a("li"),gEe=a("strong"),f_r=o("rembert"),g_r=o(" \u2014 "),JJ=a("a"),h_r=o("RemBertForQuestionAnswering"),u_r=o(" (RemBERT model)"),p_r=l(),BE=a("li"),hEe=a("strong"),__r=o("roberta"),b_r=o(" \u2014 "),YJ=a("a"),v_r=o("RobertaForQuestionAnswering"),F_r=o(" (RoBERTa model)"),T_r=l(),IE=a("li"),uEe=a("strong"),M_r=o("roformer"),E_r=o(" \u2014 "),KJ=a("a"),C_r=o("RoFormerForQuestionAnswering"),w_r=o(" (RoFormer model)"),A_r=l(),NE=a("li"),pEe=a("strong"),L_r=o("splinter"),y_r=o(" \u2014 "),ZJ=a("a"),x_r=o("SplinterForQuestionAnswering"),$_r=o(" (Splinter model)"),k_r=l(),qE=a("li"),_Ee=a("strong"),S_r=o("squeezebert"),R_r=o(" \u2014 "),eY=a("a"),P_r=o("SqueezeBertForQuestionAnswering"),B_r=o(" (SqueezeBERT model)"),I_r=l(),jE=a("li"),bEe=a("strong"),N_r=o("xlm"),q_r=o(" \u2014 "),oY=a("a"),j_r=o("XLMForQuestionAnsweringSimple"),D_r=o(" (XLM model)"),G_r=l(),DE=a("li"),vEe=a("strong"),O_r=o("xlm-roberta"),V_r=o(" \u2014 "),rY=a("a"),X_r=o("XLMRobertaForQuestionAnswering"),z_r=o(" (XLM-RoBERTa model)"),Q_r=l(),GE=a("li"),FEe=a("strong"),W_r=o("xlm-roberta-xl"),U_r=o(" \u2014 "),tY=a("a"),H_r=o("XLMRobertaXLForQuestionAnswering"),J_r=o(" (XLM-RoBERTa-XL model)"),Y_r=l(),OE=a("li"),TEe=a("strong"),K_r=o("xlnet"),Z_r=o(" \u2014 "),aY=a("a"),ebr=o("XLNetForQuestionAnsweringSimple"),obr=o(" (XLNet model)"),rbr=l(),VE=a("li"),MEe=a("strong"),tbr=o("yoso"),abr=o(" \u2014 "),nY=a("a"),nbr=o("YosoForQuestionAnswering"),sbr=o(" (YOSO model)"),lbr=l(),XE=a("p"),ibr=o("The model is set in evaluation mode by default using "),EEe=a("code"),dbr=o("model.eval()"),cbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CEe=a("code"),mbr=o("model.train()"),fbr=l(),F(zE.$$.fragment),VKe=l(),Qd=a("h2"),QE=a("a"),wEe=a("span"),F(e$.$$.fragment),gbr=l(),AEe=a("span"),hbr=o("AutoModelForTableQuestionAnswering"),XKe=l(),Xo=a("div"),F(o$.$$.fragment),ubr=l(),Wd=a("p"),pbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sY=a("a"),_br=o("from_pretrained()"),bbr=o(" class method or the "),lY=a("a"),vbr=o("from_config()"),Fbr=o(` class
method.`),Tbr=l(),r$=a("p"),Mbr=o("This class cannot be instantiated directly using "),LEe=a("code"),Ebr=o("__init__()"),Cbr=o(" (throws an error)."),wbr=l(),Lt=a("div"),F(t$.$$.fragment),Abr=l(),yEe=a("p"),Lbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ybr=l(),Ud=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),$br=o("not"),kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" to load the model weights."),Pbr=l(),F(WE.$$.fragment),Bbr=l(),co=a("div"),F(a$.$$.fragment),Ibr=l(),$Ee=a("p"),Nbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qbr=l(),sn=a("p"),jbr=o("The model class to instantiate is selected based on the "),kEe=a("code"),Dbr=o("model_type"),Gbr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),Xbr=o("pretrained_model_name_or_path"),zbr=o(":"),Qbr=l(),PEe=a("ul"),UE=a("li"),BEe=a("strong"),Wbr=o("tapas"),Ubr=o(" \u2014 "),dY=a("a"),Hbr=o("TapasForQuestionAnswering"),Jbr=o(" (TAPAS model)"),Ybr=l(),HE=a("p"),Kbr=o("The model is set in evaluation mode by default using "),IEe=a("code"),Zbr=o("model.eval()"),e2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NEe=a("code"),o2r=o("model.train()"),r2r=l(),F(JE.$$.fragment),zKe=l(),Hd=a("h2"),YE=a("a"),qEe=a("span"),F(n$.$$.fragment),t2r=l(),jEe=a("span"),a2r=o("AutoModelForDocumentQuestionAnswering"),QKe=l(),zo=a("div"),F(s$.$$.fragment),n2r=l(),Jd=a("p"),s2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),cY=a("a"),l2r=o("from_pretrained()"),i2r=o(" class method or the "),mY=a("a"),d2r=o("from_config()"),c2r=o(` class
method.`),m2r=l(),l$=a("p"),f2r=o("This class cannot be instantiated directly using "),DEe=a("code"),g2r=o("__init__()"),h2r=o(" (throws an error)."),u2r=l(),yt=a("div"),F(i$.$$.fragment),p2r=l(),GEe=a("p"),_2r=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),b2r=l(),Yd=a("p"),v2r=o(`Note:
Loading a model from its configuration file does `),OEe=a("strong"),F2r=o("not"),T2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),M2r=o("from_pretrained()"),E2r=o(" to load the model weights."),C2r=l(),F(KE.$$.fragment),w2r=l(),mo=a("div"),F(d$.$$.fragment),A2r=l(),VEe=a("p"),L2r=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),y2r=l(),ln=a("p"),x2r=o("The model class to instantiate is selected based on the "),XEe=a("code"),$2r=o("model_type"),k2r=o(` property of the config object (either
passed as an argument or loaded from `),zEe=a("code"),S2r=o("pretrained_model_name_or_path"),R2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),P2r=o("pretrained_model_name_or_path"),B2r=o(":"),I2r=l(),Kd=a("ul"),ZE=a("li"),WEe=a("strong"),N2r=o("layoutlm"),q2r=o(" \u2014 "),gY=a("a"),j2r=o("LayoutLMForQuestionAnswering"),D2r=o(" (LayoutLM model)"),G2r=l(),e4=a("li"),UEe=a("strong"),O2r=o("layoutlmv2"),V2r=o(" \u2014 "),hY=a("a"),X2r=o("LayoutLMv2ForQuestionAnswering"),z2r=o(" (LayoutLMv2 model)"),Q2r=l(),o4=a("li"),HEe=a("strong"),W2r=o("layoutlmv3"),U2r=o(" \u2014 "),uY=a("a"),H2r=o("LayoutLMv3ForQuestionAnswering"),J2r=o(" (LayoutLMv3 model)"),Y2r=l(),r4=a("p"),K2r=o("The model is set in evaluation mode by default using "),JEe=a("code"),Z2r=o("model.eval()"),e1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YEe=a("code"),o1r=o("model.train()"),r1r=l(),F(t4.$$.fragment),WKe=l(),Zd=a("h2"),a4=a("a"),KEe=a("span"),F(c$.$$.fragment),t1r=l(),ZEe=a("span"),a1r=o("AutoModelForImageClassification"),UKe=l(),Qo=a("div"),F(m$.$$.fragment),n1r=l(),ec=a("p"),s1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pY=a("a"),l1r=o("from_pretrained()"),i1r=o(" class method or the "),_Y=a("a"),d1r=o("from_config()"),c1r=o(` class
method.`),m1r=l(),f$=a("p"),f1r=o("This class cannot be instantiated directly using "),e4e=a("code"),g1r=o("__init__()"),h1r=o(" (throws an error)."),u1r=l(),xt=a("div"),F(g$.$$.fragment),p1r=l(),o4e=a("p"),_1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b1r=l(),oc=a("p"),v1r=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),F1r=o("not"),T1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),M1r=o("from_pretrained()"),E1r=o(" to load the model weights."),C1r=l(),F(n4.$$.fragment),w1r=l(),fo=a("div"),F(h$.$$.fragment),A1r=l(),t4e=a("p"),L1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y1r=l(),dn=a("p"),x1r=o("The model class to instantiate is selected based on the "),a4e=a("code"),$1r=o("model_type"),k1r=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),S1r=o("pretrained_model_name_or_path"),R1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),P1r=o("pretrained_model_name_or_path"),B1r=o(":"),I1r=l(),be=a("ul"),s4=a("li"),l4e=a("strong"),N1r=o("beit"),q1r=o(" \u2014 "),vY=a("a"),j1r=o("BeitForImageClassification"),D1r=o(" (BEiT model)"),G1r=l(),l4=a("li"),i4e=a("strong"),O1r=o("convnext"),V1r=o(" \u2014 "),FY=a("a"),X1r=o("ConvNextForImageClassification"),z1r=o(" (ConvNeXT model)"),Q1r=l(),i4=a("li"),d4e=a("strong"),W1r=o("cvt"),U1r=o(" \u2014 "),TY=a("a"),H1r=o("CvtForImageClassification"),J1r=o(" (CvT model)"),Y1r=l(),d4=a("li"),c4e=a("strong"),K1r=o("data2vec-vision"),Z1r=o(" \u2014 "),MY=a("a"),evr=o("Data2VecVisionForImageClassification"),ovr=o(" (Data2VecVision model)"),rvr=l(),_l=a("li"),m4e=a("strong"),tvr=o("deit"),avr=o(" \u2014 "),EY=a("a"),nvr=o("DeiTForImageClassification"),svr=o(" or "),CY=a("a"),lvr=o("DeiTForImageClassificationWithTeacher"),ivr=o(" (DeiT model)"),dvr=l(),c4=a("li"),f4e=a("strong"),cvr=o("imagegpt"),mvr=o(" \u2014 "),wY=a("a"),fvr=o("ImageGPTForImageClassification"),gvr=o(" (ImageGPT model)"),hvr=l(),bl=a("li"),g4e=a("strong"),uvr=o("levit"),pvr=o(" \u2014 "),AY=a("a"),_vr=o("LevitForImageClassification"),bvr=o(" or "),LY=a("a"),vvr=o("LevitForImageClassificationWithTeacher"),Fvr=o(" (LeViT model)"),Tvr=l(),m4=a("li"),h4e=a("strong"),Mvr=o("mobilevit"),Evr=o(" \u2014 "),yY=a("a"),Cvr=o("MobileViTForImageClassification"),wvr=o(" (MobileViT model)"),Avr=l(),$t=a("li"),u4e=a("strong"),Lvr=o("perceiver"),yvr=o(" \u2014 "),xY=a("a"),xvr=o("PerceiverForImageClassificationLearned"),$vr=o(" or "),$Y=a("a"),kvr=o("PerceiverForImageClassificationFourier"),Svr=o(" or "),kY=a("a"),Rvr=o("PerceiverForImageClassificationConvProcessing"),Pvr=o(" (Perceiver model)"),Bvr=l(),f4=a("li"),p4e=a("strong"),Ivr=o("poolformer"),Nvr=o(" \u2014 "),SY=a("a"),qvr=o("PoolFormerForImageClassification"),jvr=o(" (PoolFormer model)"),Dvr=l(),g4=a("li"),_4e=a("strong"),Gvr=o("regnet"),Ovr=o(" \u2014 "),RY=a("a"),Vvr=o("RegNetForImageClassification"),Xvr=o(" (RegNet model)"),zvr=l(),h4=a("li"),b4e=a("strong"),Qvr=o("resnet"),Wvr=o(" \u2014 "),PY=a("a"),Uvr=o("ResNetForImageClassification"),Hvr=o(" (ResNet model)"),Jvr=l(),u4=a("li"),v4e=a("strong"),Yvr=o("segformer"),Kvr=o(" \u2014 "),BY=a("a"),Zvr=o("SegformerForImageClassification"),eFr=o(" (SegFormer model)"),oFr=l(),p4=a("li"),F4e=a("strong"),rFr=o("swin"),tFr=o(" \u2014 "),IY=a("a"),aFr=o("SwinForImageClassification"),nFr=o(" (Swin Transformer model)"),sFr=l(),_4=a("li"),T4e=a("strong"),lFr=o("swinv2"),iFr=o(" \u2014 "),NY=a("a"),dFr=o("Swinv2ForImageClassification"),cFr=o(" (Swin Transformer V2 model)"),mFr=l(),b4=a("li"),M4e=a("strong"),fFr=o("van"),gFr=o(" \u2014 "),qY=a("a"),hFr=o("VanForImageClassification"),uFr=o(" (VAN model)"),pFr=l(),v4=a("li"),E4e=a("strong"),_Fr=o("vit"),bFr=o(" \u2014 "),jY=a("a"),vFr=o("ViTForImageClassification"),FFr=o(" (ViT model)"),TFr=l(),F4=a("p"),MFr=o("The model is set in evaluation mode by default using "),C4e=a("code"),EFr=o("model.eval()"),CFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w4e=a("code"),wFr=o("model.train()"),AFr=l(),F(T4.$$.fragment),HKe=l(),rc=a("h2"),M4=a("a"),A4e=a("span"),F(u$.$$.fragment),LFr=l(),L4e=a("span"),yFr=o("AutoModelForVideoClassification"),JKe=l(),Wo=a("div"),F(p$.$$.fragment),xFr=l(),tc=a("p"),$Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),DY=a("a"),kFr=o("from_pretrained()"),SFr=o(" class method or the "),GY=a("a"),RFr=o("from_config()"),PFr=o(` class
method.`),BFr=l(),_$=a("p"),IFr=o("This class cannot be instantiated directly using "),y4e=a("code"),NFr=o("__init__()"),qFr=o(" (throws an error)."),jFr=l(),kt=a("div"),F(b$.$$.fragment),DFr=l(),x4e=a("p"),GFr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),OFr=l(),ac=a("p"),VFr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),XFr=o("not"),zFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),QFr=o("from_pretrained()"),WFr=o(" to load the model weights."),UFr=l(),F(E4.$$.fragment),HFr=l(),go=a("div"),F(v$.$$.fragment),JFr=l(),k4e=a("p"),YFr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),KFr=l(),cn=a("p"),ZFr=o("The model class to instantiate is selected based on the "),S4e=a("code"),eTr=o("model_type"),oTr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),aTr=o("pretrained_model_name_or_path"),nTr=o(":"),sTr=l(),B4e=a("ul"),C4=a("li"),I4e=a("strong"),lTr=o("videomae"),iTr=o(" \u2014 "),VY=a("a"),dTr=o("VideoMAEForVideoClassification"),cTr=o(" (VideoMAE model)"),mTr=l(),w4=a("p"),fTr=o("The model is set in evaluation mode by default using "),N4e=a("code"),gTr=o("model.eval()"),hTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=a("code"),uTr=o("model.train()"),pTr=l(),F(A4.$$.fragment),YKe=l(),nc=a("h2"),L4=a("a"),j4e=a("span"),F(F$.$$.fragment),_Tr=l(),D4e=a("span"),bTr=o("AutoModelForVision2Seq"),KKe=l(),Uo=a("div"),F(T$.$$.fragment),vTr=l(),sc=a("p"),FTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XY=a("a"),TTr=o("from_pretrained()"),MTr=o(" class method or the "),zY=a("a"),ETr=o("from_config()"),CTr=o(` class
method.`),wTr=l(),M$=a("p"),ATr=o("This class cannot be instantiated directly using "),G4e=a("code"),LTr=o("__init__()"),yTr=o(" (throws an error)."),xTr=l(),St=a("div"),F(E$.$$.fragment),$Tr=l(),O4e=a("p"),kTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),STr=l(),lc=a("p"),RTr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),PTr=o("not"),BTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),ITr=o("from_pretrained()"),NTr=o(" to load the model weights."),qTr=l(),F(y4.$$.fragment),jTr=l(),ho=a("div"),F(C$.$$.fragment),DTr=l(),X4e=a("p"),GTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OTr=l(),mn=a("p"),VTr=o("The model class to instantiate is selected based on the "),z4e=a("code"),XTr=o("model_type"),zTr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),QTr=o("pretrained_model_name_or_path"),WTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),UTr=o("pretrained_model_name_or_path"),HTr=o(":"),JTr=l(),U4e=a("ul"),x4=a("li"),H4e=a("strong"),YTr=o("vision-encoder-decoder"),KTr=o(" \u2014 "),WY=a("a"),ZTr=o("VisionEncoderDecoderModel"),eMr=o(" (Vision Encoder decoder model)"),oMr=l(),$4=a("p"),rMr=o("The model is set in evaluation mode by default using "),J4e=a("code"),tMr=o("model.eval()"),aMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=a("code"),nMr=o("model.train()"),sMr=l(),F(k4.$$.fragment),ZKe=l(),ic=a("h2"),S4=a("a"),K4e=a("span"),F(w$.$$.fragment),lMr=l(),Z4e=a("span"),iMr=o("AutoModelForVisualQuestionAnswering"),eZe=l(),Ho=a("div"),F(A$.$$.fragment),dMr=l(),dc=a("p"),cMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),UY=a("a"),mMr=o("from_pretrained()"),fMr=o(" class method or the "),HY=a("a"),gMr=o("from_config()"),hMr=o(` class
method.`),uMr=l(),L$=a("p"),pMr=o("This class cannot be instantiated directly using "),eCe=a("code"),_Mr=o("__init__()"),bMr=o(" (throws an error)."),vMr=l(),Rt=a("div"),F(y$.$$.fragment),FMr=l(),oCe=a("p"),TMr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),MMr=l(),cc=a("p"),EMr=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),CMr=o("not"),wMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),AMr=o("from_pretrained()"),LMr=o(" to load the model weights."),yMr=l(),F(R4.$$.fragment),xMr=l(),uo=a("div"),F(x$.$$.fragment),$Mr=l(),tCe=a("p"),kMr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),SMr=l(),fn=a("p"),RMr=o("The model class to instantiate is selected based on the "),aCe=a("code"),PMr=o("model_type"),BMr=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),IMr=o("pretrained_model_name_or_path"),NMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),qMr=o("pretrained_model_name_or_path"),jMr=o(":"),DMr=l(),lCe=a("ul"),P4=a("li"),iCe=a("strong"),GMr=o("vilt"),OMr=o(" \u2014 "),YY=a("a"),VMr=o("ViltForQuestionAnswering"),XMr=o(" (ViLT model)"),zMr=l(),B4=a("p"),QMr=o("The model is set in evaluation mode by default using "),dCe=a("code"),WMr=o("model.eval()"),UMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cCe=a("code"),HMr=o("model.train()"),JMr=l(),F(I4.$$.fragment),oZe=l(),mc=a("h2"),N4=a("a"),mCe=a("span"),F($$.$$.fragment),YMr=l(),fCe=a("span"),KMr=o("AutoModelForAudioClassification"),rZe=l(),Jo=a("div"),F(k$.$$.fragment),ZMr=l(),fc=a("p"),eEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KY=a("a"),oEr=o("from_pretrained()"),rEr=o(" class method or the "),ZY=a("a"),tEr=o("from_config()"),aEr=o(` class
method.`),nEr=l(),S$=a("p"),sEr=o("This class cannot be instantiated directly using "),gCe=a("code"),lEr=o("__init__()"),iEr=o(" (throws an error)."),dEr=l(),Pt=a("div"),F(R$.$$.fragment),cEr=l(),hCe=a("p"),mEr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fEr=l(),gc=a("p"),gEr=o(`Note:
Loading a model from its configuration file does `),uCe=a("strong"),hEr=o("not"),uEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),pEr=o("from_pretrained()"),_Er=o(" to load the model weights."),bEr=l(),F(q4.$$.fragment),vEr=l(),po=a("div"),F(P$.$$.fragment),FEr=l(),pCe=a("p"),TEr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),MEr=l(),gn=a("p"),EEr=o("The model class to instantiate is selected based on the "),_Ce=a("code"),CEr=o("model_type"),wEr=o(` property of the config object (either
passed as an argument or loaded from `),bCe=a("code"),AEr=o("pretrained_model_name_or_path"),LEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=a("code"),yEr=o("pretrained_model_name_or_path"),xEr=o(":"),$Er=l(),Pe=a("ul"),j4=a("li"),FCe=a("strong"),kEr=o("data2vec-audio"),SEr=o(" \u2014 "),oK=a("a"),REr=o("Data2VecAudioForSequenceClassification"),PEr=o(" (Data2VecAudio model)"),BEr=l(),D4=a("li"),TCe=a("strong"),IEr=o("hubert"),NEr=o(" \u2014 "),rK=a("a"),qEr=o("HubertForSequenceClassification"),jEr=o(" (Hubert model)"),DEr=l(),G4=a("li"),MCe=a("strong"),GEr=o("sew"),OEr=o(" \u2014 "),tK=a("a"),VEr=o("SEWForSequenceClassification"),XEr=o(" (SEW model)"),zEr=l(),O4=a("li"),ECe=a("strong"),QEr=o("sew-d"),WEr=o(" \u2014 "),aK=a("a"),UEr=o("SEWDForSequenceClassification"),HEr=o(" (SEW-D model)"),JEr=l(),V4=a("li"),CCe=a("strong"),YEr=o("unispeech"),KEr=o(" \u2014 "),nK=a("a"),ZEr=o("UniSpeechForSequenceClassification"),e4r=o(" (UniSpeech model)"),o4r=l(),X4=a("li"),wCe=a("strong"),r4r=o("unispeech-sat"),t4r=o(" \u2014 "),sK=a("a"),a4r=o("UniSpeechSatForSequenceClassification"),n4r=o(" (UniSpeechSat model)"),s4r=l(),z4=a("li"),ACe=a("strong"),l4r=o("wav2vec2"),i4r=o(" \u2014 "),lK=a("a"),d4r=o("Wav2Vec2ForSequenceClassification"),c4r=o(" (Wav2Vec2 model)"),m4r=l(),Q4=a("li"),LCe=a("strong"),f4r=o("wav2vec2-conformer"),g4r=o(" \u2014 "),iK=a("a"),h4r=o("Wav2Vec2ConformerForSequenceClassification"),u4r=o(" (Wav2Vec2-Conformer model)"),p4r=l(),W4=a("li"),yCe=a("strong"),_4r=o("wavlm"),b4r=o(" \u2014 "),dK=a("a"),v4r=o("WavLMForSequenceClassification"),F4r=o(" (WavLM model)"),T4r=l(),U4=a("p"),M4r=o("The model is set in evaluation mode by default using "),xCe=a("code"),E4r=o("model.eval()"),C4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Ce=a("code"),w4r=o("model.train()"),A4r=l(),F(H4.$$.fragment),tZe=l(),hc=a("h2"),J4=a("a"),kCe=a("span"),F(B$.$$.fragment),L4r=l(),SCe=a("span"),y4r=o("AutoModelForAudioFrameClassification"),aZe=l(),Yo=a("div"),F(I$.$$.fragment),x4r=l(),uc=a("p"),$4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cK=a("a"),k4r=o("from_pretrained()"),S4r=o(" class method or the "),mK=a("a"),R4r=o("from_config()"),P4r=o(` class
method.`),B4r=l(),N$=a("p"),I4r=o("This class cannot be instantiated directly using "),RCe=a("code"),N4r=o("__init__()"),q4r=o(" (throws an error)."),j4r=l(),Bt=a("div"),F(q$.$$.fragment),D4r=l(),PCe=a("p"),G4r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),O4r=l(),pc=a("p"),V4r=o(`Note:
Loading a model from its configuration file does `),BCe=a("strong"),X4r=o("not"),z4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),Q4r=o("from_pretrained()"),W4r=o(" to load the model weights."),U4r=l(),F(Y4.$$.fragment),H4r=l(),_o=a("div"),F(j$.$$.fragment),J4r=l(),ICe=a("p"),Y4r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),K4r=l(),hn=a("p"),Z4r=o("The model class to instantiate is selected based on the "),NCe=a("code"),eCr=o("model_type"),oCr=o(` property of the config object (either
passed as an argument or loaded from `),qCe=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(":"),sCr=l(),mt=a("ul"),K4=a("li"),DCe=a("strong"),lCr=o("data2vec-audio"),iCr=o(" \u2014 "),gK=a("a"),dCr=o("Data2VecAudioForAudioFrameClassification"),cCr=o(" (Data2VecAudio model)"),mCr=l(),Z4=a("li"),GCe=a("strong"),fCr=o("unispeech-sat"),gCr=o(" \u2014 "),hK=a("a"),hCr=o("UniSpeechSatForAudioFrameClassification"),uCr=o(" (UniSpeechSat model)"),pCr=l(),eC=a("li"),OCe=a("strong"),_Cr=o("wav2vec2"),bCr=o(" \u2014 "),uK=a("a"),vCr=o("Wav2Vec2ForAudioFrameClassification"),FCr=o(" (Wav2Vec2 model)"),TCr=l(),oC=a("li"),VCe=a("strong"),MCr=o("wav2vec2-conformer"),ECr=o(" \u2014 "),pK=a("a"),CCr=o("Wav2Vec2ConformerForAudioFrameClassification"),wCr=o(" (Wav2Vec2-Conformer model)"),ACr=l(),rC=a("li"),XCe=a("strong"),LCr=o("wavlm"),yCr=o(" \u2014 "),_K=a("a"),xCr=o("WavLMForAudioFrameClassification"),$Cr=o(" (WavLM model)"),kCr=l(),tC=a("p"),SCr=o("The model is set in evaluation mode by default using "),zCe=a("code"),RCr=o("model.eval()"),PCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QCe=a("code"),BCr=o("model.train()"),ICr=l(),F(aC.$$.fragment),nZe=l(),_c=a("h2"),nC=a("a"),WCe=a("span"),F(D$.$$.fragment),NCr=l(),UCe=a("span"),qCr=o("AutoModelForCTC"),sZe=l(),Ko=a("div"),F(G$.$$.fragment),jCr=l(),bc=a("p"),DCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bK=a("a"),GCr=o("from_pretrained()"),OCr=o(" class method or the "),vK=a("a"),VCr=o("from_config()"),XCr=o(` class
method.`),zCr=l(),O$=a("p"),QCr=o("This class cannot be instantiated directly using "),HCe=a("code"),WCr=o("__init__()"),UCr=o(" (throws an error)."),HCr=l(),It=a("div"),F(V$.$$.fragment),JCr=l(),JCe=a("p"),YCr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),KCr=l(),vc=a("p"),ZCr=o(`Note:
Loading a model from its configuration file does `),YCe=a("strong"),e3r=o("not"),o3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),r3r=o("from_pretrained()"),t3r=o(" to load the model weights."),a3r=l(),F(sC.$$.fragment),n3r=l(),bo=a("div"),F(X$.$$.fragment),s3r=l(),KCe=a("p"),l3r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),i3r=l(),un=a("p"),d3r=o("The model class to instantiate is selected based on the "),ZCe=a("code"),c3r=o("model_type"),m3r=o(` property of the config object (either
passed as an argument or loaded from `),e3e=a("code"),f3r=o("pretrained_model_name_or_path"),g3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=a("code"),h3r=o("pretrained_model_name_or_path"),u3r=o(":"),p3r=l(),Le=a("ul"),lC=a("li"),r3e=a("strong"),_3r=o("data2vec-audio"),b3r=o(" \u2014 "),TK=a("a"),v3r=o("Data2VecAudioForCTC"),F3r=o(" (Data2VecAudio model)"),T3r=l(),iC=a("li"),t3e=a("strong"),M3r=o("hubert"),E3r=o(" \u2014 "),MK=a("a"),C3r=o("HubertForCTC"),w3r=o(" (Hubert model)"),A3r=l(),dC=a("li"),a3e=a("strong"),L3r=o("mctct"),y3r=o(" \u2014 "),EK=a("a"),x3r=o("MCTCTForCTC"),$3r=o(" (M-CTC-T model)"),k3r=l(),cC=a("li"),n3e=a("strong"),S3r=o("sew"),R3r=o(" \u2014 "),CK=a("a"),P3r=o("SEWForCTC"),B3r=o(" (SEW model)"),I3r=l(),mC=a("li"),s3e=a("strong"),N3r=o("sew-d"),q3r=o(" \u2014 "),wK=a("a"),j3r=o("SEWDForCTC"),D3r=o(" (SEW-D model)"),G3r=l(),fC=a("li"),l3e=a("strong"),O3r=o("unispeech"),V3r=o(" \u2014 "),AK=a("a"),X3r=o("UniSpeechForCTC"),z3r=o(" (UniSpeech model)"),Q3r=l(),gC=a("li"),i3e=a("strong"),W3r=o("unispeech-sat"),U3r=o(" \u2014 "),LK=a("a"),H3r=o("UniSpeechSatForCTC"),J3r=o(" (UniSpeechSat model)"),Y3r=l(),hC=a("li"),d3e=a("strong"),K3r=o("wav2vec2"),Z3r=o(" \u2014 "),yK=a("a"),e5r=o("Wav2Vec2ForCTC"),o5r=o(" (Wav2Vec2 model)"),r5r=l(),uC=a("li"),c3e=a("strong"),t5r=o("wav2vec2-conformer"),a5r=o(" \u2014 "),xK=a("a"),n5r=o("Wav2Vec2ConformerForCTC"),s5r=o(" (Wav2Vec2-Conformer model)"),l5r=l(),pC=a("li"),m3e=a("strong"),i5r=o("wavlm"),d5r=o(" \u2014 "),$K=a("a"),c5r=o("WavLMForCTC"),m5r=o(" (WavLM model)"),f5r=l(),_C=a("p"),g5r=o("The model is set in evaluation mode by default using "),f3e=a("code"),h5r=o("model.eval()"),u5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=a("code"),p5r=o("model.train()"),_5r=l(),F(bC.$$.fragment),lZe=l(),Fc=a("h2"),vC=a("a"),h3e=a("span"),F(z$.$$.fragment),b5r=l(),u3e=a("span"),v5r=o("AutoModelForSpeechSeq2Seq"),iZe=l(),Zo=a("div"),F(Q$.$$.fragment),F5r=l(),Tc=a("p"),T5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kK=a("a"),M5r=o("from_pretrained()"),E5r=o(" class method or the "),SK=a("a"),C5r=o("from_config()"),w5r=o(` class
method.`),A5r=l(),W$=a("p"),L5r=o("This class cannot be instantiated directly using "),p3e=a("code"),y5r=o("__init__()"),x5r=o(" (throws an error)."),$5r=l(),Nt=a("div"),F(U$.$$.fragment),k5r=l(),_3e=a("p"),S5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R5r=l(),Mc=a("p"),P5r=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),B5r=o("not"),I5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),N5r=o("from_pretrained()"),q5r=o(" to load the model weights."),j5r=l(),F(FC.$$.fragment),D5r=l(),vo=a("div"),F(H$.$$.fragment),G5r=l(),v3e=a("p"),O5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),V5r=l(),pn=a("p"),X5r=o("The model class to instantiate is selected based on the "),F3e=a("code"),z5r=o("model_type"),Q5r=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),W5r=o("pretrained_model_name_or_path"),U5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),H5r=o("pretrained_model_name_or_path"),J5r=o(":"),Y5r=l(),J$=a("ul"),TC=a("li"),E3e=a("strong"),K5r=o("speech-encoder-decoder"),Z5r=o(" \u2014 "),PK=a("a"),e0r=o("SpeechEncoderDecoderModel"),o0r=o(" (Speech Encoder decoder model)"),r0r=l(),MC=a("li"),C3e=a("strong"),t0r=o("speech_to_text"),a0r=o(" \u2014 "),BK=a("a"),n0r=o("Speech2TextForConditionalGeneration"),s0r=o(" (Speech2Text model)"),l0r=l(),EC=a("p"),i0r=o("The model is set in evaluation mode by default using "),w3e=a("code"),d0r=o("model.eval()"),c0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A3e=a("code"),m0r=o("model.train()"),f0r=l(),F(CC.$$.fragment),dZe=l(),Ec=a("h2"),wC=a("a"),L3e=a("span"),F(Y$.$$.fragment),g0r=l(),y3e=a("span"),h0r=o("AutoModelForAudioXVector"),cZe=l(),er=a("div"),F(K$.$$.fragment),u0r=l(),Cc=a("p"),p0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),IK=a("a"),_0r=o("from_pretrained()"),b0r=o(" class method or the "),NK=a("a"),v0r=o("from_config()"),F0r=o(` class
method.`),T0r=l(),Z$=a("p"),M0r=o("This class cannot be instantiated directly using "),x3e=a("code"),E0r=o("__init__()"),C0r=o(" (throws an error)."),w0r=l(),qt=a("div"),F(ek.$$.fragment),A0r=l(),$3e=a("p"),L0r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),y0r=l(),wc=a("p"),x0r=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),$0r=o("not"),k0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),S0r=o("from_pretrained()"),R0r=o(" to load the model weights."),P0r=l(),F(AC.$$.fragment),B0r=l(),Fo=a("div"),F(ok.$$.fragment),I0r=l(),S3e=a("p"),N0r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),q0r=l(),_n=a("p"),j0r=o("The model class to instantiate is selected based on the "),R3e=a("code"),D0r=o("model_type"),G0r=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),O0r=o("pretrained_model_name_or_path"),V0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),X0r=o("pretrained_model_name_or_path"),z0r=o(":"),Q0r=l(),ft=a("ul"),LC=a("li"),I3e=a("strong"),W0r=o("data2vec-audio"),U0r=o(" \u2014 "),jK=a("a"),H0r=o("Data2VecAudioForXVector"),J0r=o(" (Data2VecAudio model)"),Y0r=l(),yC=a("li"),N3e=a("strong"),K0r=o("unispeech-sat"),Z0r=o(" \u2014 "),DK=a("a"),ewr=o("UniSpeechSatForXVector"),owr=o(" (UniSpeechSat model)"),rwr=l(),xC=a("li"),q3e=a("strong"),twr=o("wav2vec2"),awr=o(" \u2014 "),GK=a("a"),nwr=o("Wav2Vec2ForXVector"),swr=o(" (Wav2Vec2 model)"),lwr=l(),$C=a("li"),j3e=a("strong"),iwr=o("wav2vec2-conformer"),dwr=o(" \u2014 "),OK=a("a"),cwr=o("Wav2Vec2ConformerForXVector"),mwr=o(" (Wav2Vec2-Conformer model)"),fwr=l(),kC=a("li"),D3e=a("strong"),gwr=o("wavlm"),hwr=o(" \u2014 "),VK=a("a"),uwr=o("WavLMForXVector"),pwr=o(" (WavLM model)"),_wr=l(),SC=a("p"),bwr=o("The model is set in evaluation mode by default using "),G3e=a("code"),vwr=o("model.eval()"),Fwr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O3e=a("code"),Twr=o("model.train()"),Mwr=l(),F(RC.$$.fragment),mZe=l(),Ac=a("h2"),PC=a("a"),V3e=a("span"),F(rk.$$.fragment),Ewr=l(),X3e=a("span"),Cwr=o("AutoModelForMaskedImageModeling"),fZe=l(),or=a("div"),F(tk.$$.fragment),wwr=l(),Lc=a("p"),Awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XK=a("a"),Lwr=o("from_pretrained()"),ywr=o(" class method or the "),zK=a("a"),xwr=o("from_config()"),$wr=o(` class
method.`),kwr=l(),ak=a("p"),Swr=o("This class cannot be instantiated directly using "),z3e=a("code"),Rwr=o("__init__()"),Pwr=o(" (throws an error)."),Bwr=l(),jt=a("div"),F(nk.$$.fragment),Iwr=l(),Q3e=a("p"),Nwr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qwr=l(),yc=a("p"),jwr=o(`Note:
Loading a model from its configuration file does `),W3e=a("strong"),Dwr=o("not"),Gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),Owr=o("from_pretrained()"),Vwr=o(" to load the model weights."),Xwr=l(),F(BC.$$.fragment),zwr=l(),To=a("div"),F(sk.$$.fragment),Qwr=l(),U3e=a("p"),Wwr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Uwr=l(),bn=a("p"),Hwr=o("The model class to instantiate is selected based on the "),H3e=a("code"),Jwr=o("model_type"),Ywr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),Kwr=o("pretrained_model_name_or_path"),Zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(":"),rAr=l(),vn=a("ul"),IC=a("li"),K3e=a("strong"),tAr=o("deit"),aAr=o(" \u2014 "),WK=a("a"),nAr=o("DeiTForMaskedImageModeling"),sAr=o(" (DeiT model)"),lAr=l(),NC=a("li"),Z3e=a("strong"),iAr=o("swin"),dAr=o(" \u2014 "),UK=a("a"),cAr=o("SwinForMaskedImageModeling"),mAr=o(" (Swin Transformer model)"),fAr=l(),qC=a("li"),e5e=a("strong"),gAr=o("swinv2"),hAr=o(" \u2014 "),HK=a("a"),uAr=o("Swinv2ForMaskedImageModeling"),pAr=o(" (Swin Transformer V2 model)"),_Ar=l(),jC=a("li"),o5e=a("strong"),bAr=o("vit"),vAr=o(" \u2014 "),JK=a("a"),FAr=o("ViTForMaskedImageModeling"),TAr=o(" (ViT model)"),MAr=l(),DC=a("p"),EAr=o("The model is set in evaluation mode by default using "),r5e=a("code"),CAr=o("model.eval()"),wAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t5e=a("code"),AAr=o("model.train()"),LAr=l(),F(GC.$$.fragment),gZe=l(),xc=a("h2"),OC=a("a"),a5e=a("span"),F(lk.$$.fragment),yAr=l(),n5e=a("span"),xAr=o("AutoModelForObjectDetection"),hZe=l(),rr=a("div"),F(ik.$$.fragment),$Ar=l(),$c=a("p"),kAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YK=a("a"),SAr=o("from_pretrained()"),RAr=o(" class method or the "),KK=a("a"),PAr=o("from_config()"),BAr=o(` class
method.`),IAr=l(),dk=a("p"),NAr=o("This class cannot be instantiated directly using "),s5e=a("code"),qAr=o("__init__()"),jAr=o(" (throws an error)."),DAr=l(),Dt=a("div"),F(ck.$$.fragment),GAr=l(),l5e=a("p"),OAr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),VAr=l(),kc=a("p"),XAr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),zAr=o("not"),QAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),WAr=o("from_pretrained()"),UAr=o(" to load the model weights."),HAr=l(),F(VC.$$.fragment),JAr=l(),Mo=a("div"),F(mk.$$.fragment),YAr=l(),d5e=a("p"),KAr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ZAr=l(),Fn=a("p"),e6r=o("The model class to instantiate is selected based on the "),c5e=a("code"),o6r=o("model_type"),r6r=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),t6r=o("pretrained_model_name_or_path"),a6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),n6r=o("pretrained_model_name_or_path"),s6r=o(":"),l6r=l(),Sc=a("ul"),XC=a("li"),g5e=a("strong"),i6r=o("deformable_detr"),d6r=o(" \u2014 "),eZ=a("a"),c6r=o("DeformableDetrForObjectDetection"),m6r=o(" (Deformable DETR model)"),f6r=l(),zC=a("li"),h5e=a("strong"),g6r=o("detr"),h6r=o(" \u2014 "),oZ=a("a"),u6r=o("DetrForObjectDetection"),p6r=o(" (DETR model)"),_6r=l(),QC=a("li"),u5e=a("strong"),b6r=o("yolos"),v6r=o(" \u2014 "),rZ=a("a"),F6r=o("YolosForObjectDetection"),T6r=o(" (YOLOS model)"),M6r=l(),WC=a("p"),E6r=o("The model is set in evaluation mode by default using "),p5e=a("code"),C6r=o("model.eval()"),w6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_5e=a("code"),A6r=o("model.train()"),L6r=l(),F(UC.$$.fragment),uZe=l(),Rc=a("h2"),HC=a("a"),b5e=a("span"),F(fk.$$.fragment),y6r=l(),v5e=a("span"),x6r=o("AutoModelForImageSegmentation"),pZe=l(),tr=a("div"),F(gk.$$.fragment),$6r=l(),Pc=a("p"),k6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tZ=a("a"),S6r=o("from_pretrained()"),R6r=o(" class method or the "),aZ=a("a"),P6r=o("from_config()"),B6r=o(` class
method.`),I6r=l(),hk=a("p"),N6r=o("This class cannot be instantiated directly using "),F5e=a("code"),q6r=o("__init__()"),j6r=o(" (throws an error)."),D6r=l(),Gt=a("div"),F(uk.$$.fragment),G6r=l(),T5e=a("p"),O6r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),V6r=l(),Bc=a("p"),X6r=o(`Note:
Loading a model from its configuration file does `),M5e=a("strong"),z6r=o("not"),Q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),W6r=o("from_pretrained()"),U6r=o(" to load the model weights."),H6r=l(),F(JC.$$.fragment),J6r=l(),Eo=a("div"),F(pk.$$.fragment),Y6r=l(),E5e=a("p"),K6r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Z6r=l(),Tn=a("p"),e7r=o("The model class to instantiate is selected based on the "),C5e=a("code"),o7r=o("model_type"),r7r=o(` property of the config object (either
passed as an argument or loaded from `),w5e=a("code"),t7r=o("pretrained_model_name_or_path"),a7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=a("code"),n7r=o("pretrained_model_name_or_path"),s7r=o(":"),l7r=l(),L5e=a("ul"),YC=a("li"),y5e=a("strong"),i7r=o("detr"),d7r=o(" \u2014 "),sZ=a("a"),c7r=o("DetrForSegmentation"),m7r=o(" (DETR model)"),f7r=l(),KC=a("p"),g7r=o("The model is set in evaluation mode by default using "),x5e=a("code"),h7r=o("model.eval()"),u7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$5e=a("code"),p7r=o("model.train()"),_7r=l(),F(ZC.$$.fragment),_Ze=l(),Ic=a("h2"),e3=a("a"),k5e=a("span"),F(_k.$$.fragment),b7r=l(),S5e=a("span"),v7r=o("AutoModelForSemanticSegmentation"),bZe=l(),ar=a("div"),F(bk.$$.fragment),F7r=l(),Nc=a("p"),T7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lZ=a("a"),M7r=o("from_pretrained()"),E7r=o(" class method or the "),iZ=a("a"),C7r=o("from_config()"),w7r=o(` class
method.`),A7r=l(),vk=a("p"),L7r=o("This class cannot be instantiated directly using "),R5e=a("code"),y7r=o("__init__()"),x7r=o(" (throws an error)."),$7r=l(),Ot=a("div"),F(Fk.$$.fragment),k7r=l(),P5e=a("p"),S7r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),R7r=l(),qc=a("p"),P7r=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),B7r=o("not"),I7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),N7r=o("from_pretrained()"),q7r=o(" to load the model weights."),j7r=l(),F(o3.$$.fragment),D7r=l(),Co=a("div"),F(Tk.$$.fragment),G7r=l(),I5e=a("p"),O7r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),V7r=l(),Mn=a("p"),X7r=o("The model class to instantiate is selected based on the "),N5e=a("code"),z7r=o("model_type"),Q7r=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),W7r=o("pretrained_model_name_or_path"),U7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=a("code"),H7r=o("pretrained_model_name_or_path"),J7r=o(":"),Y7r=l(),gt=a("ul"),r3=a("li"),D5e=a("strong"),K7r=o("beit"),Z7r=o(" \u2014 "),cZ=a("a"),eLr=o("BeitForSemanticSegmentation"),oLr=o(" (BEiT model)"),rLr=l(),t3=a("li"),G5e=a("strong"),tLr=o("data2vec-vision"),aLr=o(" \u2014 "),mZ=a("a"),nLr=o("Data2VecVisionForSemanticSegmentation"),sLr=o(" (Data2VecVision model)"),lLr=l(),a3=a("li"),O5e=a("strong"),iLr=o("dpt"),dLr=o(" \u2014 "),fZ=a("a"),cLr=o("DPTForSemanticSegmentation"),mLr=o(" (DPT model)"),fLr=l(),n3=a("li"),V5e=a("strong"),gLr=o("mobilevit"),hLr=o(" \u2014 "),gZ=a("a"),uLr=o("MobileViTForSemanticSegmentation"),pLr=o(" (MobileViT model)"),_Lr=l(),s3=a("li"),X5e=a("strong"),bLr=o("segformer"),vLr=o(" \u2014 "),hZ=a("a"),FLr=o("SegformerForSemanticSegmentation"),TLr=o(" (SegFormer model)"),MLr=l(),l3=a("p"),ELr=o("The model is set in evaluation mode by default using "),z5e=a("code"),CLr=o("model.eval()"),wLr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q5e=a("code"),ALr=o("model.train()"),LLr=l(),F(i3.$$.fragment),vZe=l(),jc=a("h2"),d3=a("a"),W5e=a("span"),F(Mk.$$.fragment),yLr=l(),U5e=a("span"),xLr=o("AutoModelForInstanceSegmentation"),FZe=l(),nr=a("div"),F(Ek.$$.fragment),$Lr=l(),Dc=a("p"),kLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uZ=a("a"),SLr=o("from_pretrained()"),RLr=o(" class method or the "),pZ=a("a"),PLr=o("from_config()"),BLr=o(` class
method.`),ILr=l(),Ck=a("p"),NLr=o("This class cannot be instantiated directly using "),H5e=a("code"),qLr=o("__init__()"),jLr=o(" (throws an error)."),DLr=l(),Vt=a("div"),F(wk.$$.fragment),GLr=l(),J5e=a("p"),OLr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),VLr=l(),Gc=a("p"),XLr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),zLr=o("not"),QLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),WLr=o("from_pretrained()"),ULr=o(" to load the model weights."),HLr=l(),F(c3.$$.fragment),JLr=l(),wo=a("div"),F(Ak.$$.fragment),YLr=l(),K5e=a("p"),KLr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ZLr=l(),En=a("p"),eyr=o("The model class to instantiate is selected based on the "),Z5e=a("code"),oyr=o("model_type"),ryr=o(` property of the config object (either
passed as an argument or loaded from `),e0e=a("code"),tyr=o("pretrained_model_name_or_path"),ayr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(":"),lyr=l(),r0e=a("ul"),m3=a("li"),t0e=a("strong"),iyr=o("maskformer"),dyr=o(" \u2014 "),bZ=a("a"),cyr=o("MaskFormerForInstanceSegmentation"),myr=o(" (MaskFormer model)"),fyr=l(),f3=a("p"),gyr=o("The model is set in evaluation mode by default using "),a0e=a("code"),hyr=o("model.eval()"),uyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n0e=a("code"),pyr=o("model.train()"),_yr=l(),F(g3.$$.fragment),TZe=l(),Oc=a("h2"),h3=a("a"),s0e=a("span"),F(Lk.$$.fragment),byr=l(),l0e=a("span"),vyr=o("TFAutoModel"),MZe=l(),sr=a("div"),F(yk.$$.fragment),Fyr=l(),Vc=a("p"),Tyr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vZ=a("a"),Myr=o("from_pretrained()"),Eyr=o(" class method or the "),FZ=a("a"),Cyr=o("from_config()"),wyr=o(` class
method.`),Ayr=l(),xk=a("p"),Lyr=o("This class cannot be instantiated directly using "),i0e=a("code"),yyr=o("__init__()"),xyr=o(" (throws an error)."),$yr=l(),Xt=a("div"),F($k.$$.fragment),kyr=l(),d0e=a("p"),Syr=o("Instantiates one of the base model classes of the library from a configuration."),Ryr=l(),Xc=a("p"),Pyr=o(`Note:
Loading a model from its configuration file does `),c0e=a("strong"),Byr=o("not"),Iyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),Nyr=o("from_pretrained()"),qyr=o(" to load the model weights."),jyr=l(),F(u3.$$.fragment),Dyr=l(),Ir=a("div"),F(kk.$$.fragment),Gyr=l(),m0e=a("p"),Oyr=o("Instantiate one of the base model classes of the library from a pretrained model."),Vyr=l(),Cn=a("p"),Xyr=o("The model class to instantiate is selected based on the "),f0e=a("code"),zyr=o("model_type"),Qyr=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),Wyr=o("pretrained_model_name_or_path"),Uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),Hyr=o("pretrained_model_name_or_path"),Jyr=o(":"),Yyr=l(),N=a("ul"),p3=a("li"),u0e=a("strong"),Kyr=o("albert"),Zyr=o(" \u2014 "),MZ=a("a"),e8r=o("TFAlbertModel"),o8r=o(" (ALBERT model)"),r8r=l(),_3=a("li"),p0e=a("strong"),t8r=o("bart"),a8r=o(" \u2014 "),EZ=a("a"),n8r=o("TFBartModel"),s8r=o(" (BART model)"),l8r=l(),b3=a("li"),_0e=a("strong"),i8r=o("bert"),d8r=o(" \u2014 "),CZ=a("a"),c8r=o("TFBertModel"),m8r=o(" (BERT model)"),f8r=l(),v3=a("li"),b0e=a("strong"),g8r=o("blenderbot"),h8r=o(" \u2014 "),wZ=a("a"),u8r=o("TFBlenderbotModel"),p8r=o(" (Blenderbot model)"),_8r=l(),F3=a("li"),v0e=a("strong"),b8r=o("blenderbot-small"),v8r=o(" \u2014 "),AZ=a("a"),F8r=o("TFBlenderbotSmallModel"),T8r=o(" (BlenderbotSmall model)"),M8r=l(),T3=a("li"),F0e=a("strong"),E8r=o("camembert"),C8r=o(" \u2014 "),LZ=a("a"),w8r=o("TFCamembertModel"),A8r=o(" (CamemBERT model)"),L8r=l(),M3=a("li"),T0e=a("strong"),y8r=o("clip"),x8r=o(" \u2014 "),yZ=a("a"),$8r=o("TFCLIPModel"),k8r=o(" (CLIP model)"),S8r=l(),E3=a("li"),M0e=a("strong"),R8r=o("convbert"),P8r=o(" \u2014 "),xZ=a("a"),B8r=o("TFConvBertModel"),I8r=o(" (ConvBERT model)"),N8r=l(),C3=a("li"),E0e=a("strong"),q8r=o("convnext"),j8r=o(" \u2014 "),$Z=a("a"),D8r=o("TFConvNextModel"),G8r=o(" (ConvNeXT model)"),O8r=l(),w3=a("li"),C0e=a("strong"),V8r=o("ctrl"),X8r=o(" \u2014 "),kZ=a("a"),z8r=o("TFCTRLModel"),Q8r=o(" (CTRL model)"),W8r=l(),A3=a("li"),w0e=a("strong"),U8r=o("data2vec-vision"),H8r=o(" \u2014 "),SZ=a("a"),J8r=o("TFData2VecVisionModel"),Y8r=o(" (Data2VecVision model)"),K8r=l(),L3=a("li"),A0e=a("strong"),Z8r=o("deberta"),e9r=o(" \u2014 "),RZ=a("a"),o9r=o("TFDebertaModel"),r9r=o(" (DeBERTa model)"),t9r=l(),y3=a("li"),L0e=a("strong"),a9r=o("deberta-v2"),n9r=o(" \u2014 "),PZ=a("a"),s9r=o("TFDebertaV2Model"),l9r=o(" (DeBERTa-v2 model)"),i9r=l(),x3=a("li"),y0e=a("strong"),d9r=o("deit"),c9r=o(" \u2014 "),BZ=a("a"),m9r=o("TFDeiTModel"),f9r=o(" (DeiT model)"),g9r=l(),$3=a("li"),x0e=a("strong"),h9r=o("distilbert"),u9r=o(" \u2014 "),IZ=a("a"),p9r=o("TFDistilBertModel"),_9r=o(" (DistilBERT model)"),b9r=l(),k3=a("li"),$0e=a("strong"),v9r=o("dpr"),F9r=o(" \u2014 "),NZ=a("a"),T9r=o("TFDPRQuestionEncoder"),M9r=o(" (DPR model)"),E9r=l(),S3=a("li"),k0e=a("strong"),C9r=o("electra"),w9r=o(" \u2014 "),qZ=a("a"),A9r=o("TFElectraModel"),L9r=o(" (ELECTRA model)"),y9r=l(),R3=a("li"),S0e=a("strong"),x9r=o("flaubert"),$9r=o(" \u2014 "),jZ=a("a"),k9r=o("TFFlaubertModel"),S9r=o(" (FlauBERT model)"),R9r=l(),vl=a("li"),R0e=a("strong"),P9r=o("funnel"),B9r=o(" \u2014 "),DZ=a("a"),I9r=o("TFFunnelModel"),N9r=o(" or "),GZ=a("a"),q9r=o("TFFunnelBaseModel"),j9r=o(" (Funnel Transformer model)"),D9r=l(),P3=a("li"),P0e=a("strong"),G9r=o("gpt2"),O9r=o(" \u2014 "),OZ=a("a"),V9r=o("TFGPT2Model"),X9r=o(" (OpenAI GPT-2 model)"),z9r=l(),B3=a("li"),B0e=a("strong"),Q9r=o("gptj"),W9r=o(" \u2014 "),VZ=a("a"),U9r=o("TFGPTJModel"),H9r=o(" (GPT-J model)"),J9r=l(),I3=a("li"),I0e=a("strong"),Y9r=o("hubert"),K9r=o(" \u2014 "),XZ=a("a"),Z9r=o("TFHubertModel"),exr=o(" (Hubert model)"),oxr=l(),N3=a("li"),N0e=a("strong"),rxr=o("layoutlm"),txr=o(" \u2014 "),zZ=a("a"),axr=o("TFLayoutLMModel"),nxr=o(" (LayoutLM model)"),sxr=l(),q3=a("li"),q0e=a("strong"),lxr=o("layoutlmv3"),ixr=o(" \u2014 "),QZ=a("a"),dxr=o("TFLayoutLMv3Model"),cxr=o(" (LayoutLMv3 model)"),mxr=l(),j3=a("li"),j0e=a("strong"),fxr=o("led"),gxr=o(" \u2014 "),WZ=a("a"),hxr=o("TFLEDModel"),uxr=o(" (LED model)"),pxr=l(),D3=a("li"),D0e=a("strong"),_xr=o("longformer"),bxr=o(" \u2014 "),UZ=a("a"),vxr=o("TFLongformerModel"),Fxr=o(" (Longformer model)"),Txr=l(),G3=a("li"),G0e=a("strong"),Mxr=o("lxmert"),Exr=o(" \u2014 "),HZ=a("a"),Cxr=o("TFLxmertModel"),wxr=o(" (LXMERT model)"),Axr=l(),O3=a("li"),O0e=a("strong"),Lxr=o("marian"),yxr=o(" \u2014 "),JZ=a("a"),xxr=o("TFMarianModel"),$xr=o(" (Marian model)"),kxr=l(),V3=a("li"),V0e=a("strong"),Sxr=o("mbart"),Rxr=o(" \u2014 "),YZ=a("a"),Pxr=o("TFMBartModel"),Bxr=o(" (mBART model)"),Ixr=l(),X3=a("li"),X0e=a("strong"),Nxr=o("mobilebert"),qxr=o(" \u2014 "),KZ=a("a"),jxr=o("TFMobileBertModel"),Dxr=o(" (MobileBERT model)"),Gxr=l(),z3=a("li"),z0e=a("strong"),Oxr=o("mobilevit"),Vxr=o(" \u2014 "),ZZ=a("a"),Xxr=o("TFMobileViTModel"),zxr=o(" (MobileViT model)"),Qxr=l(),Q3=a("li"),Q0e=a("strong"),Wxr=o("mpnet"),Uxr=o(" \u2014 "),eee=a("a"),Hxr=o("TFMPNetModel"),Jxr=o(" (MPNet model)"),Yxr=l(),W3=a("li"),W0e=a("strong"),Kxr=o("mt5"),Zxr=o(" \u2014 "),oee=a("a"),e$r=o("TFMT5Model"),o$r=o(" (MT5 model)"),r$r=l(),U3=a("li"),U0e=a("strong"),t$r=o("openai-gpt"),a$r=o(" \u2014 "),ree=a("a"),n$r=o("TFOpenAIGPTModel"),s$r=o(" (OpenAI GPT model)"),l$r=l(),H3=a("li"),H0e=a("strong"),i$r=o("opt"),d$r=o(" \u2014 "),tee=a("a"),c$r=o("TFOPTModel"),m$r=o(" (OPT model)"),f$r=l(),J3=a("li"),J0e=a("strong"),g$r=o("pegasus"),h$r=o(" \u2014 "),aee=a("a"),u$r=o("TFPegasusModel"),p$r=o(" (Pegasus model)"),_$r=l(),Y3=a("li"),Y0e=a("strong"),b$r=o("regnet"),v$r=o(" \u2014 "),nee=a("a"),F$r=o("TFRegNetModel"),T$r=o(" (RegNet model)"),M$r=l(),K3=a("li"),K0e=a("strong"),E$r=o("rembert"),C$r=o(" \u2014 "),see=a("a"),w$r=o("TFRemBertModel"),A$r=o(" (RemBERT model)"),L$r=l(),Z3=a("li"),Z0e=a("strong"),y$r=o("resnet"),x$r=o(" \u2014 "),lee=a("a"),$$r=o("TFResNetModel"),k$r=o(" (ResNet model)"),S$r=l(),e5=a("li"),ewe=a("strong"),R$r=o("roberta"),P$r=o(" \u2014 "),iee=a("a"),B$r=o("TFRobertaModel"),I$r=o(" (RoBERTa model)"),N$r=l(),o5=a("li"),owe=a("strong"),q$r=o("roformer"),j$r=o(" \u2014 "),dee=a("a"),D$r=o("TFRoFormerModel"),G$r=o(" (RoFormer model)"),O$r=l(),r5=a("li"),rwe=a("strong"),V$r=o("segformer"),X$r=o(" \u2014 "),cee=a("a"),z$r=o("TFSegformerModel"),Q$r=o(" (SegFormer model)"),W$r=l(),t5=a("li"),twe=a("strong"),U$r=o("speech_to_text"),H$r=o(" \u2014 "),mee=a("a"),J$r=o("TFSpeech2TextModel"),Y$r=o(" (Speech2Text model)"),K$r=l(),a5=a("li"),awe=a("strong"),Z$r=o("swin"),ekr=o(" \u2014 "),fee=a("a"),okr=o("TFSwinModel"),rkr=o(" (Swin Transformer model)"),tkr=l(),n5=a("li"),nwe=a("strong"),akr=o("t5"),nkr=o(" \u2014 "),gee=a("a"),skr=o("TFT5Model"),lkr=o(" (T5 model)"),ikr=l(),s5=a("li"),swe=a("strong"),dkr=o("tapas"),ckr=o(" \u2014 "),hee=a("a"),mkr=o("TFTapasModel"),fkr=o(" (TAPAS model)"),gkr=l(),l5=a("li"),lwe=a("strong"),hkr=o("transfo-xl"),ukr=o(" \u2014 "),uee=a("a"),pkr=o("TFTransfoXLModel"),_kr=o(" (Transformer-XL model)"),bkr=l(),i5=a("li"),iwe=a("strong"),vkr=o("vit"),Fkr=o(" \u2014 "),pee=a("a"),Tkr=o("TFViTModel"),Mkr=o(" (ViT model)"),Ekr=l(),d5=a("li"),dwe=a("strong"),Ckr=o("vit_mae"),wkr=o(" \u2014 "),_ee=a("a"),Akr=o("TFViTMAEModel"),Lkr=o(" (ViTMAE model)"),ykr=l(),c5=a("li"),cwe=a("strong"),xkr=o("wav2vec2"),$kr=o(" \u2014 "),bee=a("a"),kkr=o("TFWav2Vec2Model"),Skr=o(" (Wav2Vec2 model)"),Rkr=l(),m5=a("li"),mwe=a("strong"),Pkr=o("xglm"),Bkr=o(" \u2014 "),vee=a("a"),Ikr=o("TFXGLMModel"),Nkr=o(" (XGLM model)"),qkr=l(),f5=a("li"),fwe=a("strong"),jkr=o("xlm"),Dkr=o(" \u2014 "),Fee=a("a"),Gkr=o("TFXLMModel"),Okr=o(" (XLM model)"),Vkr=l(),g5=a("li"),gwe=a("strong"),Xkr=o("xlm-roberta"),zkr=o(" \u2014 "),Tee=a("a"),Qkr=o("TFXLMRobertaModel"),Wkr=o(" (XLM-RoBERTa model)"),Ukr=l(),h5=a("li"),hwe=a("strong"),Hkr=o("xlnet"),Jkr=o(" \u2014 "),Mee=a("a"),Ykr=o("TFXLNetModel"),Kkr=o(" (XLNet model)"),Zkr=l(),F(u5.$$.fragment),EZe=l(),zc=a("h2"),p5=a("a"),uwe=a("span"),F(Sk.$$.fragment),eSr=l(),pwe=a("span"),oSr=o("TFAutoModelForPreTraining"),CZe=l(),lr=a("div"),F(Rk.$$.fragment),rSr=l(),Qc=a("p"),tSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Eee=a("a"),aSr=o("from_pretrained()"),nSr=o(" class method or the "),Cee=a("a"),sSr=o("from_config()"),lSr=o(` class
method.`),iSr=l(),Pk=a("p"),dSr=o("This class cannot be instantiated directly using "),_we=a("code"),cSr=o("__init__()"),mSr=o(" (throws an error)."),fSr=l(),zt=a("div"),F(Bk.$$.fragment),gSr=l(),bwe=a("p"),hSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uSr=l(),Wc=a("p"),pSr=o(`Note:
Loading a model from its configuration file does `),vwe=a("strong"),_Sr=o("not"),bSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=a("a"),vSr=o("from_pretrained()"),FSr=o(" to load the model weights."),TSr=l(),F(_5.$$.fragment),MSr=l(),Nr=a("div"),F(Ik.$$.fragment),ESr=l(),Fwe=a("p"),CSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wSr=l(),wn=a("p"),ASr=o("The model class to instantiate is selected based on the "),Twe=a("code"),LSr=o("model_type"),ySr=o(` property of the config object (either
passed as an argument or loaded from `),Mwe=a("code"),xSr=o("pretrained_model_name_or_path"),$Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(":"),RSr=l(),se=a("ul"),b5=a("li"),Cwe=a("strong"),PSr=o("albert"),BSr=o(" \u2014 "),Aee=a("a"),ISr=o("TFAlbertForPreTraining"),NSr=o(" (ALBERT model)"),qSr=l(),v5=a("li"),wwe=a("strong"),jSr=o("bart"),DSr=o(" \u2014 "),Lee=a("a"),GSr=o("TFBartForConditionalGeneration"),OSr=o(" (BART model)"),VSr=l(),F5=a("li"),Awe=a("strong"),XSr=o("bert"),zSr=o(" \u2014 "),yee=a("a"),QSr=o("TFBertForPreTraining"),WSr=o(" (BERT model)"),USr=l(),T5=a("li"),Lwe=a("strong"),HSr=o("camembert"),JSr=o(" \u2014 "),xee=a("a"),YSr=o("TFCamembertForMaskedLM"),KSr=o(" (CamemBERT model)"),ZSr=l(),M5=a("li"),ywe=a("strong"),eRr=o("ctrl"),oRr=o(" \u2014 "),$ee=a("a"),rRr=o("TFCTRLLMHeadModel"),tRr=o(" (CTRL model)"),aRr=l(),E5=a("li"),xwe=a("strong"),nRr=o("distilbert"),sRr=o(" \u2014 "),kee=a("a"),lRr=o("TFDistilBertForMaskedLM"),iRr=o(" (DistilBERT model)"),dRr=l(),C5=a("li"),$we=a("strong"),cRr=o("electra"),mRr=o(" \u2014 "),See=a("a"),fRr=o("TFElectraForPreTraining"),gRr=o(" (ELECTRA model)"),hRr=l(),w5=a("li"),kwe=a("strong"),uRr=o("flaubert"),pRr=o(" \u2014 "),Ree=a("a"),_Rr=o("TFFlaubertWithLMHeadModel"),bRr=o(" (FlauBERT model)"),vRr=l(),A5=a("li"),Swe=a("strong"),FRr=o("funnel"),TRr=o(" \u2014 "),Pee=a("a"),MRr=o("TFFunnelForPreTraining"),ERr=o(" (Funnel Transformer model)"),CRr=l(),L5=a("li"),Rwe=a("strong"),wRr=o("gpt2"),ARr=o(" \u2014 "),Bee=a("a"),LRr=o("TFGPT2LMHeadModel"),yRr=o(" (OpenAI GPT-2 model)"),xRr=l(),y5=a("li"),Pwe=a("strong"),$Rr=o("layoutlm"),kRr=o(" \u2014 "),Iee=a("a"),SRr=o("TFLayoutLMForMaskedLM"),RRr=o(" (LayoutLM model)"),PRr=l(),x5=a("li"),Bwe=a("strong"),BRr=o("lxmert"),IRr=o(" \u2014 "),Nee=a("a"),NRr=o("TFLxmertForPreTraining"),qRr=o(" (LXMERT model)"),jRr=l(),$5=a("li"),Iwe=a("strong"),DRr=o("mobilebert"),GRr=o(" \u2014 "),qee=a("a"),ORr=o("TFMobileBertForPreTraining"),VRr=o(" (MobileBERT model)"),XRr=l(),k5=a("li"),Nwe=a("strong"),zRr=o("mpnet"),QRr=o(" \u2014 "),jee=a("a"),WRr=o("TFMPNetForMaskedLM"),URr=o(" (MPNet model)"),HRr=l(),S5=a("li"),qwe=a("strong"),JRr=o("openai-gpt"),YRr=o(" \u2014 "),Dee=a("a"),KRr=o("TFOpenAIGPTLMHeadModel"),ZRr=o(" (OpenAI GPT model)"),ePr=l(),R5=a("li"),jwe=a("strong"),oPr=o("roberta"),rPr=o(" \u2014 "),Gee=a("a"),tPr=o("TFRobertaForMaskedLM"),aPr=o(" (RoBERTa model)"),nPr=l(),P5=a("li"),Dwe=a("strong"),sPr=o("t5"),lPr=o(" \u2014 "),Oee=a("a"),iPr=o("TFT5ForConditionalGeneration"),dPr=o(" (T5 model)"),cPr=l(),B5=a("li"),Gwe=a("strong"),mPr=o("tapas"),fPr=o(" \u2014 "),Vee=a("a"),gPr=o("TFTapasForMaskedLM"),hPr=o(" (TAPAS model)"),uPr=l(),I5=a("li"),Owe=a("strong"),pPr=o("transfo-xl"),_Pr=o(" \u2014 "),Xee=a("a"),bPr=o("TFTransfoXLLMHeadModel"),vPr=o(" (Transformer-XL model)"),FPr=l(),N5=a("li"),Vwe=a("strong"),TPr=o("vit_mae"),MPr=o(" \u2014 "),zee=a("a"),EPr=o("TFViTMAEForPreTraining"),CPr=o(" (ViTMAE model)"),wPr=l(),q5=a("li"),Xwe=a("strong"),APr=o("xlm"),LPr=o(" \u2014 "),Qee=a("a"),yPr=o("TFXLMWithLMHeadModel"),xPr=o(" (XLM model)"),$Pr=l(),j5=a("li"),zwe=a("strong"),kPr=o("xlm-roberta"),SPr=o(" \u2014 "),Wee=a("a"),RPr=o("TFXLMRobertaForMaskedLM"),PPr=o(" (XLM-RoBERTa model)"),BPr=l(),D5=a("li"),Qwe=a("strong"),IPr=o("xlnet"),NPr=o(" \u2014 "),Uee=a("a"),qPr=o("TFXLNetLMHeadModel"),jPr=o(" (XLNet model)"),DPr=l(),F(G5.$$.fragment),wZe=l(),Uc=a("h2"),O5=a("a"),Wwe=a("span"),F(Nk.$$.fragment),GPr=l(),Uwe=a("span"),OPr=o("TFAutoModelForCausalLM"),AZe=l(),ir=a("div"),F(qk.$$.fragment),VPr=l(),Hc=a("p"),XPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hee=a("a"),zPr=o("from_pretrained()"),QPr=o(" class method or the "),Jee=a("a"),WPr=o("from_config()"),UPr=o(` class
method.`),HPr=l(),jk=a("p"),JPr=o("This class cannot be instantiated directly using "),Hwe=a("code"),YPr=o("__init__()"),KPr=o(" (throws an error)."),ZPr=l(),Qt=a("div"),F(Dk.$$.fragment),eBr=l(),Jwe=a("p"),oBr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rBr=l(),Jc=a("p"),tBr=o(`Note:
Loading a model from its configuration file does `),Ywe=a("strong"),aBr=o("not"),nBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),sBr=o("from_pretrained()"),lBr=o(" to load the model weights."),iBr=l(),F(V5.$$.fragment),dBr=l(),qr=a("div"),F(Gk.$$.fragment),cBr=l(),Kwe=a("p"),mBr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fBr=l(),An=a("p"),gBr=o("The model class to instantiate is selected based on the "),Zwe=a("code"),hBr=o("model_type"),uBr=o(` property of the config object (either
passed as an argument or loaded from `),eAe=a("code"),pBr=o("pretrained_model_name_or_path"),_Br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=a("code"),bBr=o("pretrained_model_name_or_path"),vBr=o(":"),FBr=l(),Me=a("ul"),X5=a("li"),rAe=a("strong"),TBr=o("bert"),MBr=o(" \u2014 "),Kee=a("a"),EBr=o("TFBertLMHeadModel"),CBr=o(" (BERT model)"),wBr=l(),z5=a("li"),tAe=a("strong"),ABr=o("camembert"),LBr=o(" \u2014 "),Zee=a("a"),yBr=o("TFCamembertForCausalLM"),xBr=o(" (CamemBERT model)"),$Br=l(),Q5=a("li"),aAe=a("strong"),kBr=o("ctrl"),SBr=o(" \u2014 "),eoe=a("a"),RBr=o("TFCTRLLMHeadModel"),PBr=o(" (CTRL model)"),BBr=l(),W5=a("li"),nAe=a("strong"),IBr=o("gpt2"),NBr=o(" \u2014 "),ooe=a("a"),qBr=o("TFGPT2LMHeadModel"),jBr=o(" (OpenAI GPT-2 model)"),DBr=l(),U5=a("li"),sAe=a("strong"),GBr=o("gptj"),OBr=o(" \u2014 "),roe=a("a"),VBr=o("TFGPTJForCausalLM"),XBr=o(" (GPT-J model)"),zBr=l(),H5=a("li"),lAe=a("strong"),QBr=o("openai-gpt"),WBr=o(" \u2014 "),toe=a("a"),UBr=o("TFOpenAIGPTLMHeadModel"),HBr=o(" (OpenAI GPT model)"),JBr=l(),J5=a("li"),iAe=a("strong"),YBr=o("opt"),KBr=o(" \u2014 "),aoe=a("a"),ZBr=o("TFOPTForCausalLM"),eIr=o(" (OPT model)"),oIr=l(),Y5=a("li"),dAe=a("strong"),rIr=o("rembert"),tIr=o(" \u2014 "),noe=a("a"),aIr=o("TFRemBertForCausalLM"),nIr=o(" (RemBERT model)"),sIr=l(),K5=a("li"),cAe=a("strong"),lIr=o("roberta"),iIr=o(" \u2014 "),soe=a("a"),dIr=o("TFRobertaForCausalLM"),cIr=o(" (RoBERTa model)"),mIr=l(),Z5=a("li"),mAe=a("strong"),fIr=o("roformer"),gIr=o(" \u2014 "),loe=a("a"),hIr=o("TFRoFormerForCausalLM"),uIr=o(" (RoFormer model)"),pIr=l(),e0=a("li"),fAe=a("strong"),_Ir=o("transfo-xl"),bIr=o(" \u2014 "),ioe=a("a"),vIr=o("TFTransfoXLLMHeadModel"),FIr=o(" (Transformer-XL model)"),TIr=l(),o0=a("li"),gAe=a("strong"),MIr=o("xglm"),EIr=o(" \u2014 "),doe=a("a"),CIr=o("TFXGLMForCausalLM"),wIr=o(" (XGLM model)"),AIr=l(),r0=a("li"),hAe=a("strong"),LIr=o("xlm"),yIr=o(" \u2014 "),coe=a("a"),xIr=o("TFXLMWithLMHeadModel"),$Ir=o(" (XLM model)"),kIr=l(),t0=a("li"),uAe=a("strong"),SIr=o("xlnet"),RIr=o(" \u2014 "),moe=a("a"),PIr=o("TFXLNetLMHeadModel"),BIr=o(" (XLNet model)"),IIr=l(),F(a0.$$.fragment),LZe=l(),Yc=a("h2"),n0=a("a"),pAe=a("span"),F(Ok.$$.fragment),NIr=l(),_Ae=a("span"),qIr=o("TFAutoModelForImageClassification"),yZe=l(),dr=a("div"),F(Vk.$$.fragment),jIr=l(),Kc=a("p"),DIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),foe=a("a"),GIr=o("from_pretrained()"),OIr=o(" class method or the "),goe=a("a"),VIr=o("from_config()"),XIr=o(` class
method.`),zIr=l(),Xk=a("p"),QIr=o("This class cannot be instantiated directly using "),bAe=a("code"),WIr=o("__init__()"),UIr=o(" (throws an error)."),HIr=l(),Wt=a("div"),F(zk.$$.fragment),JIr=l(),vAe=a("p"),YIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KIr=l(),Zc=a("p"),ZIr=o(`Note:
Loading a model from its configuration file does `),FAe=a("strong"),eNr=o("not"),oNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),rNr=o("from_pretrained()"),tNr=o(" to load the model weights."),aNr=l(),F(s0.$$.fragment),nNr=l(),jr=a("div"),F(Qk.$$.fragment),sNr=l(),TAe=a("p"),lNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iNr=l(),Ln=a("p"),dNr=o("The model class to instantiate is selected based on the "),MAe=a("code"),cNr=o("model_type"),mNr=o(` property of the config object (either
passed as an argument or loaded from `),EAe=a("code"),fNr=o("pretrained_model_name_or_path"),gNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CAe=a("code"),hNr=o("pretrained_model_name_or_path"),uNr=o(":"),pNr=l(),Be=a("ul"),l0=a("li"),wAe=a("strong"),_Nr=o("convnext"),bNr=o(" \u2014 "),uoe=a("a"),vNr=o("TFConvNextForImageClassification"),FNr=o(" (ConvNeXT model)"),TNr=l(),i0=a("li"),AAe=a("strong"),MNr=o("data2vec-vision"),ENr=o(" \u2014 "),poe=a("a"),CNr=o("TFData2VecVisionForImageClassification"),wNr=o(" (Data2VecVision model)"),ANr=l(),Fl=a("li"),LAe=a("strong"),LNr=o("deit"),yNr=o(" \u2014 "),_oe=a("a"),xNr=o("TFDeiTForImageClassification"),$Nr=o(" or "),boe=a("a"),kNr=o("TFDeiTForImageClassificationWithTeacher"),SNr=o(" (DeiT model)"),RNr=l(),d0=a("li"),yAe=a("strong"),PNr=o("mobilevit"),BNr=o(" \u2014 "),voe=a("a"),INr=o("TFMobileViTForImageClassification"),NNr=o(" (MobileViT model)"),qNr=l(),c0=a("li"),xAe=a("strong"),jNr=o("regnet"),DNr=o(" \u2014 "),Foe=a("a"),GNr=o("TFRegNetForImageClassification"),ONr=o(" (RegNet model)"),VNr=l(),m0=a("li"),$Ae=a("strong"),XNr=o("resnet"),zNr=o(" \u2014 "),Toe=a("a"),QNr=o("TFResNetForImageClassification"),WNr=o(" (ResNet model)"),UNr=l(),f0=a("li"),kAe=a("strong"),HNr=o("segformer"),JNr=o(" \u2014 "),Moe=a("a"),YNr=o("TFSegformerForImageClassification"),KNr=o(" (SegFormer model)"),ZNr=l(),g0=a("li"),SAe=a("strong"),eqr=o("swin"),oqr=o(" \u2014 "),Eoe=a("a"),rqr=o("TFSwinForImageClassification"),tqr=o(" (Swin Transformer model)"),aqr=l(),h0=a("li"),RAe=a("strong"),nqr=o("vit"),sqr=o(" \u2014 "),Coe=a("a"),lqr=o("TFViTForImageClassification"),iqr=o(" (ViT model)"),dqr=l(),F(u0.$$.fragment),xZe=l(),em=a("h2"),p0=a("a"),PAe=a("span"),F(Wk.$$.fragment),cqr=l(),BAe=a("span"),mqr=o("TFAutoModelForSemanticSegmentation"),$Ze=l(),cr=a("div"),F(Uk.$$.fragment),fqr=l(),om=a("p"),gqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),woe=a("a"),hqr=o("from_pretrained()"),uqr=o(" class method or the "),Aoe=a("a"),pqr=o("from_config()"),_qr=o(` class
method.`),bqr=l(),Hk=a("p"),vqr=o("This class cannot be instantiated directly using "),IAe=a("code"),Fqr=o("__init__()"),Tqr=o(" (throws an error)."),Mqr=l(),Ut=a("div"),F(Jk.$$.fragment),Eqr=l(),NAe=a("p"),Cqr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),wqr=l(),rm=a("p"),Aqr=o(`Note:
Loading a model from its configuration file does `),qAe=a("strong"),Lqr=o("not"),yqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=a("a"),xqr=o("from_pretrained()"),$qr=o(" to load the model weights."),kqr=l(),F(_0.$$.fragment),Sqr=l(),Dr=a("div"),F(Yk.$$.fragment),Rqr=l(),jAe=a("p"),Pqr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Bqr=l(),yn=a("p"),Iqr=o("The model class to instantiate is selected based on the "),DAe=a("code"),Nqr=o("model_type"),qqr=o(` property of the config object (either
passed as an argument or loaded from `),GAe=a("code"),jqr=o("pretrained_model_name_or_path"),Dqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=a("code"),Gqr=o("pretrained_model_name_or_path"),Oqr=o(":"),Vqr=l(),tm=a("ul"),b0=a("li"),VAe=a("strong"),Xqr=o("data2vec-vision"),zqr=o(" \u2014 "),yoe=a("a"),Qqr=o("TFData2VecVisionForSemanticSegmentation"),Wqr=o(" (Data2VecVision model)"),Uqr=l(),v0=a("li"),XAe=a("strong"),Hqr=o("mobilevit"),Jqr=o(" \u2014 "),xoe=a("a"),Yqr=o("TFMobileViTForSemanticSegmentation"),Kqr=o(" (MobileViT model)"),Zqr=l(),F0=a("li"),zAe=a("strong"),ejr=o("segformer"),ojr=o(" \u2014 "),$oe=a("a"),rjr=o("TFSegformerForSemanticSegmentation"),tjr=o(" (SegFormer model)"),ajr=l(),F(T0.$$.fragment),kZe=l(),am=a("h2"),M0=a("a"),QAe=a("span"),F(Kk.$$.fragment),njr=l(),WAe=a("span"),sjr=o("TFAutoModelForMaskedLM"),SZe=l(),mr=a("div"),F(Zk.$$.fragment),ljr=l(),nm=a("p"),ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),koe=a("a"),djr=o("from_pretrained()"),cjr=o(" class method or the "),Soe=a("a"),mjr=o("from_config()"),fjr=o(` class
method.`),gjr=l(),eS=a("p"),hjr=o("This class cannot be instantiated directly using "),UAe=a("code"),ujr=o("__init__()"),pjr=o(" (throws an error)."),_jr=l(),Ht=a("div"),F(oS.$$.fragment),bjr=l(),HAe=a("p"),vjr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fjr=l(),sm=a("p"),Tjr=o(`Note:
Loading a model from its configuration file does `),JAe=a("strong"),Mjr=o("not"),Ejr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),Cjr=o("from_pretrained()"),wjr=o(" to load the model weights."),Ajr=l(),F(E0.$$.fragment),Ljr=l(),Gr=a("div"),F(rS.$$.fragment),yjr=l(),YAe=a("p"),xjr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$jr=l(),xn=a("p"),kjr=o("The model class to instantiate is selected based on the "),KAe=a("code"),Sjr=o("model_type"),Rjr=o(` property of the config object (either
passed as an argument or loaded from `),ZAe=a("code"),Pjr=o("pretrained_model_name_or_path"),Bjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=a("code"),Ijr=o("pretrained_model_name_or_path"),Njr=o(":"),qjr=l(),fe=a("ul"),C0=a("li"),o6e=a("strong"),jjr=o("albert"),Djr=o(" \u2014 "),Poe=a("a"),Gjr=o("TFAlbertForMaskedLM"),Ojr=o(" (ALBERT model)"),Vjr=l(),w0=a("li"),r6e=a("strong"),Xjr=o("bert"),zjr=o(" \u2014 "),Boe=a("a"),Qjr=o("TFBertForMaskedLM"),Wjr=o(" (BERT model)"),Ujr=l(),A0=a("li"),t6e=a("strong"),Hjr=o("camembert"),Jjr=o(" \u2014 "),Ioe=a("a"),Yjr=o("TFCamembertForMaskedLM"),Kjr=o(" (CamemBERT model)"),Zjr=l(),L0=a("li"),a6e=a("strong"),eDr=o("convbert"),oDr=o(" \u2014 "),Noe=a("a"),rDr=o("TFConvBertForMaskedLM"),tDr=o(" (ConvBERT model)"),aDr=l(),y0=a("li"),n6e=a("strong"),nDr=o("deberta"),sDr=o(" \u2014 "),qoe=a("a"),lDr=o("TFDebertaForMaskedLM"),iDr=o(" (DeBERTa model)"),dDr=l(),x0=a("li"),s6e=a("strong"),cDr=o("deberta-v2"),mDr=o(" \u2014 "),joe=a("a"),fDr=o("TFDebertaV2ForMaskedLM"),gDr=o(" (DeBERTa-v2 model)"),hDr=l(),$0=a("li"),l6e=a("strong"),uDr=o("distilbert"),pDr=o(" \u2014 "),Doe=a("a"),_Dr=o("TFDistilBertForMaskedLM"),bDr=o(" (DistilBERT model)"),vDr=l(),k0=a("li"),i6e=a("strong"),FDr=o("electra"),TDr=o(" \u2014 "),Goe=a("a"),MDr=o("TFElectraForMaskedLM"),EDr=o(" (ELECTRA model)"),CDr=l(),S0=a("li"),d6e=a("strong"),wDr=o("flaubert"),ADr=o(" \u2014 "),Ooe=a("a"),LDr=o("TFFlaubertWithLMHeadModel"),yDr=o(" (FlauBERT model)"),xDr=l(),R0=a("li"),c6e=a("strong"),$Dr=o("funnel"),kDr=o(" \u2014 "),Voe=a("a"),SDr=o("TFFunnelForMaskedLM"),RDr=o(" (Funnel Transformer model)"),PDr=l(),P0=a("li"),m6e=a("strong"),BDr=o("layoutlm"),IDr=o(" \u2014 "),Xoe=a("a"),NDr=o("TFLayoutLMForMaskedLM"),qDr=o(" (LayoutLM model)"),jDr=l(),B0=a("li"),f6e=a("strong"),DDr=o("longformer"),GDr=o(" \u2014 "),zoe=a("a"),ODr=o("TFLongformerForMaskedLM"),VDr=o(" (Longformer model)"),XDr=l(),I0=a("li"),g6e=a("strong"),zDr=o("mobilebert"),QDr=o(" \u2014 "),Qoe=a("a"),WDr=o("TFMobileBertForMaskedLM"),UDr=o(" (MobileBERT model)"),HDr=l(),N0=a("li"),h6e=a("strong"),JDr=o("mpnet"),YDr=o(" \u2014 "),Woe=a("a"),KDr=o("TFMPNetForMaskedLM"),ZDr=o(" (MPNet model)"),eGr=l(),q0=a("li"),u6e=a("strong"),oGr=o("rembert"),rGr=o(" \u2014 "),Uoe=a("a"),tGr=o("TFRemBertForMaskedLM"),aGr=o(" (RemBERT model)"),nGr=l(),j0=a("li"),p6e=a("strong"),sGr=o("roberta"),lGr=o(" \u2014 "),Hoe=a("a"),iGr=o("TFRobertaForMaskedLM"),dGr=o(" (RoBERTa model)"),cGr=l(),D0=a("li"),_6e=a("strong"),mGr=o("roformer"),fGr=o(" \u2014 "),Joe=a("a"),gGr=o("TFRoFormerForMaskedLM"),hGr=o(" (RoFormer model)"),uGr=l(),G0=a("li"),b6e=a("strong"),pGr=o("tapas"),_Gr=o(" \u2014 "),Yoe=a("a"),bGr=o("TFTapasForMaskedLM"),vGr=o(" (TAPAS model)"),FGr=l(),O0=a("li"),v6e=a("strong"),TGr=o("xlm"),MGr=o(" \u2014 "),Koe=a("a"),EGr=o("TFXLMWithLMHeadModel"),CGr=o(" (XLM model)"),wGr=l(),V0=a("li"),F6e=a("strong"),AGr=o("xlm-roberta"),LGr=o(" \u2014 "),Zoe=a("a"),yGr=o("TFXLMRobertaForMaskedLM"),xGr=o(" (XLM-RoBERTa model)"),$Gr=l(),F(X0.$$.fragment),RZe=l(),lm=a("h2"),z0=a("a"),T6e=a("span"),F(tS.$$.fragment),kGr=l(),M6e=a("span"),SGr=o("TFAutoModelForSeq2SeqLM"),PZe=l(),fr=a("div"),F(aS.$$.fragment),RGr=l(),im=a("p"),PGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ere=a("a"),BGr=o("from_pretrained()"),IGr=o(" class method or the "),ore=a("a"),NGr=o("from_config()"),qGr=o(` class
method.`),jGr=l(),nS=a("p"),DGr=o("This class cannot be instantiated directly using "),E6e=a("code"),GGr=o("__init__()"),OGr=o(" (throws an error)."),VGr=l(),Jt=a("div"),F(sS.$$.fragment),XGr=l(),C6e=a("p"),zGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QGr=l(),dm=a("p"),WGr=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),UGr=o("not"),HGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=a("a"),JGr=o("from_pretrained()"),YGr=o(" to load the model weights."),KGr=l(),F(Q0.$$.fragment),ZGr=l(),Or=a("div"),F(lS.$$.fragment),eOr=l(),A6e=a("p"),oOr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rOr=l(),$n=a("p"),tOr=o("The model class to instantiate is selected based on the "),L6e=a("code"),aOr=o("model_type"),nOr=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),sOr=o("pretrained_model_name_or_path"),lOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),iOr=o("pretrained_model_name_or_path"),dOr=o(":"),cOr=l(),ye=a("ul"),W0=a("li"),$6e=a("strong"),mOr=o("bart"),fOr=o(" \u2014 "),tre=a("a"),gOr=o("TFBartForConditionalGeneration"),hOr=o(" (BART model)"),uOr=l(),U0=a("li"),k6e=a("strong"),pOr=o("blenderbot"),_Or=o(" \u2014 "),are=a("a"),bOr=o("TFBlenderbotForConditionalGeneration"),vOr=o(" (Blenderbot model)"),FOr=l(),H0=a("li"),S6e=a("strong"),TOr=o("blenderbot-small"),MOr=o(" \u2014 "),nre=a("a"),EOr=o("TFBlenderbotSmallForConditionalGeneration"),COr=o(" (BlenderbotSmall model)"),wOr=l(),J0=a("li"),R6e=a("strong"),AOr=o("encoder-decoder"),LOr=o(" \u2014 "),sre=a("a"),yOr=o("TFEncoderDecoderModel"),xOr=o(" (Encoder decoder model)"),$Or=l(),Y0=a("li"),P6e=a("strong"),kOr=o("led"),SOr=o(" \u2014 "),lre=a("a"),ROr=o("TFLEDForConditionalGeneration"),POr=o(" (LED model)"),BOr=l(),K0=a("li"),B6e=a("strong"),IOr=o("marian"),NOr=o(" \u2014 "),ire=a("a"),qOr=o("TFMarianMTModel"),jOr=o(" (Marian model)"),DOr=l(),Z0=a("li"),I6e=a("strong"),GOr=o("mbart"),OOr=o(" \u2014 "),dre=a("a"),VOr=o("TFMBartForConditionalGeneration"),XOr=o(" (mBART model)"),zOr=l(),ew=a("li"),N6e=a("strong"),QOr=o("mt5"),WOr=o(" \u2014 "),cre=a("a"),UOr=o("TFMT5ForConditionalGeneration"),HOr=o(" (MT5 model)"),JOr=l(),ow=a("li"),q6e=a("strong"),YOr=o("pegasus"),KOr=o(" \u2014 "),mre=a("a"),ZOr=o("TFPegasusForConditionalGeneration"),eVr=o(" (Pegasus model)"),oVr=l(),rw=a("li"),j6e=a("strong"),rVr=o("t5"),tVr=o(" \u2014 "),fre=a("a"),aVr=o("TFT5ForConditionalGeneration"),nVr=o(" (T5 model)"),sVr=l(),F(tw.$$.fragment),BZe=l(),cm=a("h2"),aw=a("a"),D6e=a("span"),F(iS.$$.fragment),lVr=l(),G6e=a("span"),iVr=o("TFAutoModelForSequenceClassification"),IZe=l(),gr=a("div"),F(dS.$$.fragment),dVr=l(),mm=a("p"),cVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gre=a("a"),mVr=o("from_pretrained()"),fVr=o(" class method or the "),hre=a("a"),gVr=o("from_config()"),hVr=o(` class
method.`),uVr=l(),cS=a("p"),pVr=o("This class cannot be instantiated directly using "),O6e=a("code"),_Vr=o("__init__()"),bVr=o(" (throws an error)."),vVr=l(),Yt=a("div"),F(mS.$$.fragment),FVr=l(),V6e=a("p"),TVr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MVr=l(),fm=a("p"),EVr=o(`Note:
Loading a model from its configuration file does `),X6e=a("strong"),CVr=o("not"),wVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),AVr=o("from_pretrained()"),LVr=o(" to load the model weights."),yVr=l(),F(nw.$$.fragment),xVr=l(),Vr=a("div"),F(fS.$$.fragment),$Vr=l(),z6e=a("p"),kVr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SVr=l(),kn=a("p"),RVr=o("The model class to instantiate is selected based on the "),Q6e=a("code"),PVr=o("model_type"),BVr=o(` property of the config object (either
passed as an argument or loaded from `),W6e=a("code"),IVr=o("pretrained_model_name_or_path"),NVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=a("code"),qVr=o("pretrained_model_name_or_path"),jVr=o(":"),DVr=l(),re=a("ul"),sw=a("li"),H6e=a("strong"),GVr=o("albert"),OVr=o(" \u2014 "),pre=a("a"),VVr=o("TFAlbertForSequenceClassification"),XVr=o(" (ALBERT model)"),zVr=l(),lw=a("li"),J6e=a("strong"),QVr=o("bert"),WVr=o(" \u2014 "),_re=a("a"),UVr=o("TFBertForSequenceClassification"),HVr=o(" (BERT model)"),JVr=l(),iw=a("li"),Y6e=a("strong"),YVr=o("camembert"),KVr=o(" \u2014 "),bre=a("a"),ZVr=o("TFCamembertForSequenceClassification"),eXr=o(" (CamemBERT model)"),oXr=l(),dw=a("li"),K6e=a("strong"),rXr=o("convbert"),tXr=o(" \u2014 "),vre=a("a"),aXr=o("TFConvBertForSequenceClassification"),nXr=o(" (ConvBERT model)"),sXr=l(),cw=a("li"),Z6e=a("strong"),lXr=o("ctrl"),iXr=o(" \u2014 "),Fre=a("a"),dXr=o("TFCTRLForSequenceClassification"),cXr=o(" (CTRL model)"),mXr=l(),mw=a("li"),e7e=a("strong"),fXr=o("deberta"),gXr=o(" \u2014 "),Tre=a("a"),hXr=o("TFDebertaForSequenceClassification"),uXr=o(" (DeBERTa model)"),pXr=l(),fw=a("li"),o7e=a("strong"),_Xr=o("deberta-v2"),bXr=o(" \u2014 "),Mre=a("a"),vXr=o("TFDebertaV2ForSequenceClassification"),FXr=o(" (DeBERTa-v2 model)"),TXr=l(),gw=a("li"),r7e=a("strong"),MXr=o("distilbert"),EXr=o(" \u2014 "),Ere=a("a"),CXr=o("TFDistilBertForSequenceClassification"),wXr=o(" (DistilBERT model)"),AXr=l(),hw=a("li"),t7e=a("strong"),LXr=o("electra"),yXr=o(" \u2014 "),Cre=a("a"),xXr=o("TFElectraForSequenceClassification"),$Xr=o(" (ELECTRA model)"),kXr=l(),uw=a("li"),a7e=a("strong"),SXr=o("flaubert"),RXr=o(" \u2014 "),wre=a("a"),PXr=o("TFFlaubertForSequenceClassification"),BXr=o(" (FlauBERT model)"),IXr=l(),pw=a("li"),n7e=a("strong"),NXr=o("funnel"),qXr=o(" \u2014 "),Are=a("a"),jXr=o("TFFunnelForSequenceClassification"),DXr=o(" (Funnel Transformer model)"),GXr=l(),_w=a("li"),s7e=a("strong"),OXr=o("gpt2"),VXr=o(" \u2014 "),Lre=a("a"),XXr=o("TFGPT2ForSequenceClassification"),zXr=o(" (OpenAI GPT-2 model)"),QXr=l(),bw=a("li"),l7e=a("strong"),WXr=o("gptj"),UXr=o(" \u2014 "),yre=a("a"),HXr=o("TFGPTJForSequenceClassification"),JXr=o(" (GPT-J model)"),YXr=l(),vw=a("li"),i7e=a("strong"),KXr=o("layoutlm"),ZXr=o(" \u2014 "),xre=a("a"),ezr=o("TFLayoutLMForSequenceClassification"),ozr=o(" (LayoutLM model)"),rzr=l(),Fw=a("li"),d7e=a("strong"),tzr=o("layoutlmv3"),azr=o(" \u2014 "),$re=a("a"),nzr=o("TFLayoutLMv3ForSequenceClassification"),szr=o(" (LayoutLMv3 model)"),lzr=l(),Tw=a("li"),c7e=a("strong"),izr=o("longformer"),dzr=o(" \u2014 "),kre=a("a"),czr=o("TFLongformerForSequenceClassification"),mzr=o(" (Longformer model)"),fzr=l(),Mw=a("li"),m7e=a("strong"),gzr=o("mobilebert"),hzr=o(" \u2014 "),Sre=a("a"),uzr=o("TFMobileBertForSequenceClassification"),pzr=o(" (MobileBERT model)"),_zr=l(),Ew=a("li"),f7e=a("strong"),bzr=o("mpnet"),vzr=o(" \u2014 "),Rre=a("a"),Fzr=o("TFMPNetForSequenceClassification"),Tzr=o(" (MPNet model)"),Mzr=l(),Cw=a("li"),g7e=a("strong"),Ezr=o("openai-gpt"),Czr=o(" \u2014 "),Pre=a("a"),wzr=o("TFOpenAIGPTForSequenceClassification"),Azr=o(" (OpenAI GPT model)"),Lzr=l(),ww=a("li"),h7e=a("strong"),yzr=o("rembert"),xzr=o(" \u2014 "),Bre=a("a"),$zr=o("TFRemBertForSequenceClassification"),kzr=o(" (RemBERT model)"),Szr=l(),Aw=a("li"),u7e=a("strong"),Rzr=o("roberta"),Pzr=o(" \u2014 "),Ire=a("a"),Bzr=o("TFRobertaForSequenceClassification"),Izr=o(" (RoBERTa model)"),Nzr=l(),Lw=a("li"),p7e=a("strong"),qzr=o("roformer"),jzr=o(" \u2014 "),Nre=a("a"),Dzr=o("TFRoFormerForSequenceClassification"),Gzr=o(" (RoFormer model)"),Ozr=l(),yw=a("li"),_7e=a("strong"),Vzr=o("tapas"),Xzr=o(" \u2014 "),qre=a("a"),zzr=o("TFTapasForSequenceClassification"),Qzr=o(" (TAPAS model)"),Wzr=l(),xw=a("li"),b7e=a("strong"),Uzr=o("transfo-xl"),Hzr=o(" \u2014 "),jre=a("a"),Jzr=o("TFTransfoXLForSequenceClassification"),Yzr=o(" (Transformer-XL model)"),Kzr=l(),$w=a("li"),v7e=a("strong"),Zzr=o("xlm"),eQr=o(" \u2014 "),Dre=a("a"),oQr=o("TFXLMForSequenceClassification"),rQr=o(" (XLM model)"),tQr=l(),kw=a("li"),F7e=a("strong"),aQr=o("xlm-roberta"),nQr=o(" \u2014 "),Gre=a("a"),sQr=o("TFXLMRobertaForSequenceClassification"),lQr=o(" (XLM-RoBERTa model)"),iQr=l(),Sw=a("li"),T7e=a("strong"),dQr=o("xlnet"),cQr=o(" \u2014 "),Ore=a("a"),mQr=o("TFXLNetForSequenceClassification"),fQr=o(" (XLNet model)"),gQr=l(),F(Rw.$$.fragment),NZe=l(),gm=a("h2"),Pw=a("a"),M7e=a("span"),F(gS.$$.fragment),hQr=l(),E7e=a("span"),uQr=o("TFAutoModelForMultipleChoice"),qZe=l(),hr=a("div"),F(hS.$$.fragment),pQr=l(),hm=a("p"),_Qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Vre=a("a"),bQr=o("from_pretrained()"),vQr=o(" class method or the "),Xre=a("a"),FQr=o("from_config()"),TQr=o(` class
method.`),MQr=l(),uS=a("p"),EQr=o("This class cannot be instantiated directly using "),C7e=a("code"),CQr=o("__init__()"),wQr=o(" (throws an error)."),AQr=l(),Kt=a("div"),F(pS.$$.fragment),LQr=l(),w7e=a("p"),yQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xQr=l(),um=a("p"),$Qr=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),kQr=o("not"),SQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=a("a"),RQr=o("from_pretrained()"),PQr=o(" to load the model weights."),BQr=l(),F(Bw.$$.fragment),IQr=l(),Xr=a("div"),F(_S.$$.fragment),NQr=l(),L7e=a("p"),qQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jQr=l(),Sn=a("p"),DQr=o("The model class to instantiate is selected based on the "),y7e=a("code"),GQr=o("model_type"),OQr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),VQr=o("pretrained_model_name_or_path"),XQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),zQr=o("pretrained_model_name_or_path"),QQr=o(":"),WQr=l(),ve=a("ul"),Iw=a("li"),k7e=a("strong"),UQr=o("albert"),HQr=o(" \u2014 "),Qre=a("a"),JQr=o("TFAlbertForMultipleChoice"),YQr=o(" (ALBERT model)"),KQr=l(),Nw=a("li"),S7e=a("strong"),ZQr=o("bert"),eWr=o(" \u2014 "),Wre=a("a"),oWr=o("TFBertForMultipleChoice"),rWr=o(" (BERT model)"),tWr=l(),qw=a("li"),R7e=a("strong"),aWr=o("camembert"),nWr=o(" \u2014 "),Ure=a("a"),sWr=o("TFCamembertForMultipleChoice"),lWr=o(" (CamemBERT model)"),iWr=l(),jw=a("li"),P7e=a("strong"),dWr=o("convbert"),cWr=o(" \u2014 "),Hre=a("a"),mWr=o("TFConvBertForMultipleChoice"),fWr=o(" (ConvBERT model)"),gWr=l(),Dw=a("li"),B7e=a("strong"),hWr=o("distilbert"),uWr=o(" \u2014 "),Jre=a("a"),pWr=o("TFDistilBertForMultipleChoice"),_Wr=o(" (DistilBERT model)"),bWr=l(),Gw=a("li"),I7e=a("strong"),vWr=o("electra"),FWr=o(" \u2014 "),Yre=a("a"),TWr=o("TFElectraForMultipleChoice"),MWr=o(" (ELECTRA model)"),EWr=l(),Ow=a("li"),N7e=a("strong"),CWr=o("flaubert"),wWr=o(" \u2014 "),Kre=a("a"),AWr=o("TFFlaubertForMultipleChoice"),LWr=o(" (FlauBERT model)"),yWr=l(),Vw=a("li"),q7e=a("strong"),xWr=o("funnel"),$Wr=o(" \u2014 "),Zre=a("a"),kWr=o("TFFunnelForMultipleChoice"),SWr=o(" (Funnel Transformer model)"),RWr=l(),Xw=a("li"),j7e=a("strong"),PWr=o("longformer"),BWr=o(" \u2014 "),ete=a("a"),IWr=o("TFLongformerForMultipleChoice"),NWr=o(" (Longformer model)"),qWr=l(),zw=a("li"),D7e=a("strong"),jWr=o("mobilebert"),DWr=o(" \u2014 "),ote=a("a"),GWr=o("TFMobileBertForMultipleChoice"),OWr=o(" (MobileBERT model)"),VWr=l(),Qw=a("li"),G7e=a("strong"),XWr=o("mpnet"),zWr=o(" \u2014 "),rte=a("a"),QWr=o("TFMPNetForMultipleChoice"),WWr=o(" (MPNet model)"),UWr=l(),Ww=a("li"),O7e=a("strong"),HWr=o("rembert"),JWr=o(" \u2014 "),tte=a("a"),YWr=o("TFRemBertForMultipleChoice"),KWr=o(" (RemBERT model)"),ZWr=l(),Uw=a("li"),V7e=a("strong"),eUr=o("roberta"),oUr=o(" \u2014 "),ate=a("a"),rUr=o("TFRobertaForMultipleChoice"),tUr=o(" (RoBERTa model)"),aUr=l(),Hw=a("li"),X7e=a("strong"),nUr=o("roformer"),sUr=o(" \u2014 "),nte=a("a"),lUr=o("TFRoFormerForMultipleChoice"),iUr=o(" (RoFormer model)"),dUr=l(),Jw=a("li"),z7e=a("strong"),cUr=o("xlm"),mUr=o(" \u2014 "),ste=a("a"),fUr=o("TFXLMForMultipleChoice"),gUr=o(" (XLM model)"),hUr=l(),Yw=a("li"),Q7e=a("strong"),uUr=o("xlm-roberta"),pUr=o(" \u2014 "),lte=a("a"),_Ur=o("TFXLMRobertaForMultipleChoice"),bUr=o(" (XLM-RoBERTa model)"),vUr=l(),Kw=a("li"),W7e=a("strong"),FUr=o("xlnet"),TUr=o(" \u2014 "),ite=a("a"),MUr=o("TFXLNetForMultipleChoice"),EUr=o(" (XLNet model)"),CUr=l(),F(Zw.$$.fragment),jZe=l(),pm=a("h2"),eA=a("a"),U7e=a("span"),F(bS.$$.fragment),wUr=l(),H7e=a("span"),AUr=o("TFAutoModelForNextSentencePrediction"),DZe=l(),ur=a("div"),F(vS.$$.fragment),LUr=l(),_m=a("p"),yUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dte=a("a"),xUr=o("from_pretrained()"),$Ur=o(" class method or the "),cte=a("a"),kUr=o("from_config()"),SUr=o(` class
method.`),RUr=l(),FS=a("p"),PUr=o("This class cannot be instantiated directly using "),J7e=a("code"),BUr=o("__init__()"),IUr=o(" (throws an error)."),NUr=l(),Zt=a("div"),F(TS.$$.fragment),qUr=l(),Y7e=a("p"),jUr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DUr=l(),bm=a("p"),GUr=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),OUr=o("not"),VUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=a("a"),XUr=o("from_pretrained()"),zUr=o(" to load the model weights."),QUr=l(),F(oA.$$.fragment),WUr=l(),zr=a("div"),F(MS.$$.fragment),UUr=l(),Z7e=a("p"),HUr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JUr=l(),Rn=a("p"),YUr=o("The model class to instantiate is selected based on the "),eLe=a("code"),KUr=o("model_type"),ZUr=o(` property of the config object (either
passed as an argument or loaded from `),oLe=a("code"),eHr=o("pretrained_model_name_or_path"),oHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rLe=a("code"),rHr=o("pretrained_model_name_or_path"),tHr=o(":"),aHr=l(),ES=a("ul"),rA=a("li"),tLe=a("strong"),nHr=o("bert"),sHr=o(" \u2014 "),fte=a("a"),lHr=o("TFBertForNextSentencePrediction"),iHr=o(" (BERT model)"),dHr=l(),tA=a("li"),aLe=a("strong"),cHr=o("mobilebert"),mHr=o(" \u2014 "),gte=a("a"),fHr=o("TFMobileBertForNextSentencePrediction"),gHr=o(" (MobileBERT model)"),hHr=l(),F(aA.$$.fragment),GZe=l(),vm=a("h2"),nA=a("a"),nLe=a("span"),F(CS.$$.fragment),uHr=l(),sLe=a("span"),pHr=o("TFAutoModelForTableQuestionAnswering"),OZe=l(),pr=a("div"),F(wS.$$.fragment),_Hr=l(),Fm=a("p"),bHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hte=a("a"),vHr=o("from_pretrained()"),FHr=o(" class method or the "),ute=a("a"),THr=o("from_config()"),MHr=o(` class
method.`),EHr=l(),AS=a("p"),CHr=o("This class cannot be instantiated directly using "),lLe=a("code"),wHr=o("__init__()"),AHr=o(" (throws an error)."),LHr=l(),ea=a("div"),F(LS.$$.fragment),yHr=l(),iLe=a("p"),xHr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Hr=l(),Tm=a("p"),kHr=o(`Note:
Loading a model from its configuration file does `),dLe=a("strong"),SHr=o("not"),RHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pte=a("a"),PHr=o("from_pretrained()"),BHr=o(" to load the model weights."),IHr=l(),F(sA.$$.fragment),NHr=l(),Qr=a("div"),F(yS.$$.fragment),qHr=l(),cLe=a("p"),jHr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DHr=l(),Pn=a("p"),GHr=o("The model class to instantiate is selected based on the "),mLe=a("code"),OHr=o("model_type"),VHr=o(` property of the config object (either
passed as an argument or loaded from `),fLe=a("code"),XHr=o("pretrained_model_name_or_path"),zHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gLe=a("code"),QHr=o("pretrained_model_name_or_path"),WHr=o(":"),UHr=l(),hLe=a("ul"),lA=a("li"),uLe=a("strong"),HHr=o("tapas"),JHr=o(" \u2014 "),_te=a("a"),YHr=o("TFTapasForQuestionAnswering"),KHr=o(" (TAPAS model)"),ZHr=l(),F(iA.$$.fragment),VZe=l(),Mm=a("h2"),dA=a("a"),pLe=a("span"),F(xS.$$.fragment),eJr=l(),_Le=a("span"),oJr=o("TFAutoModelForDocumentQuestionAnswering"),XZe=l(),_r=a("div"),F($S.$$.fragment),rJr=l(),Em=a("p"),tJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),bte=a("a"),aJr=o("from_pretrained()"),nJr=o(" class method or the "),vte=a("a"),sJr=o("from_config()"),lJr=o(` class
method.`),iJr=l(),kS=a("p"),dJr=o("This class cannot be instantiated directly using "),bLe=a("code"),cJr=o("__init__()"),mJr=o(" (throws an error)."),fJr=l(),oa=a("div"),F(SS.$$.fragment),gJr=l(),vLe=a("p"),hJr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),uJr=l(),Cm=a("p"),pJr=o(`Note:
Loading a model from its configuration file does `),FLe=a("strong"),_Jr=o("not"),bJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=a("a"),vJr=o("from_pretrained()"),FJr=o(" to load the model weights."),TJr=l(),F(cA.$$.fragment),MJr=l(),Wr=a("div"),F(RS.$$.fragment),EJr=l(),TLe=a("p"),CJr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),wJr=l(),Bn=a("p"),AJr=o("The model class to instantiate is selected based on the "),MLe=a("code"),LJr=o("model_type"),yJr=o(` property of the config object (either
passed as an argument or loaded from `),ELe=a("code"),xJr=o("pretrained_model_name_or_path"),$Jr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CLe=a("code"),kJr=o("pretrained_model_name_or_path"),SJr=o(":"),RJr=l(),wLe=a("ul"),mA=a("li"),ALe=a("strong"),PJr=o("layoutlm"),BJr=o(" \u2014 "),Tte=a("a"),IJr=o("TFLayoutLMForQuestionAnswering"),NJr=o(" (LayoutLM model)"),qJr=l(),F(fA.$$.fragment),zZe=l(),wm=a("h2"),gA=a("a"),LLe=a("span"),F(PS.$$.fragment),jJr=l(),yLe=a("span"),DJr=o("TFAutoModelForTokenClassification"),QZe=l(),br=a("div"),F(BS.$$.fragment),GJr=l(),Am=a("p"),OJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mte=a("a"),VJr=o("from_pretrained()"),XJr=o(" class method or the "),Ete=a("a"),zJr=o("from_config()"),QJr=o(` class
method.`),WJr=l(),IS=a("p"),UJr=o("This class cannot be instantiated directly using "),xLe=a("code"),HJr=o("__init__()"),JJr=o(" (throws an error)."),YJr=l(),ra=a("div"),F(NS.$$.fragment),KJr=l(),$Le=a("p"),ZJr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eYr=l(),Lm=a("p"),oYr=o(`Note:
Loading a model from its configuration file does `),kLe=a("strong"),rYr=o("not"),tYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=a("a"),aYr=o("from_pretrained()"),nYr=o(" to load the model weights."),sYr=l(),F(hA.$$.fragment),lYr=l(),Ur=a("div"),F(qS.$$.fragment),iYr=l(),SLe=a("p"),dYr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cYr=l(),In=a("p"),mYr=o("The model class to instantiate is selected based on the "),RLe=a("code"),fYr=o("model_type"),gYr=o(` property of the config object (either
passed as an argument or loaded from `),PLe=a("code"),hYr=o("pretrained_model_name_or_path"),uYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BLe=a("code"),pYr=o("pretrained_model_name_or_path"),_Yr=o(":"),bYr=l(),de=a("ul"),uA=a("li"),ILe=a("strong"),vYr=o("albert"),FYr=o(" \u2014 "),wte=a("a"),TYr=o("TFAlbertForTokenClassification"),MYr=o(" (ALBERT model)"),EYr=l(),pA=a("li"),NLe=a("strong"),CYr=o("bert"),wYr=o(" \u2014 "),Ate=a("a"),AYr=o("TFBertForTokenClassification"),LYr=o(" (BERT model)"),yYr=l(),_A=a("li"),qLe=a("strong"),xYr=o("camembert"),$Yr=o(" \u2014 "),Lte=a("a"),kYr=o("TFCamembertForTokenClassification"),SYr=o(" (CamemBERT model)"),RYr=l(),bA=a("li"),jLe=a("strong"),PYr=o("convbert"),BYr=o(" \u2014 "),yte=a("a"),IYr=o("TFConvBertForTokenClassification"),NYr=o(" (ConvBERT model)"),qYr=l(),vA=a("li"),DLe=a("strong"),jYr=o("deberta"),DYr=o(" \u2014 "),xte=a("a"),GYr=o("TFDebertaForTokenClassification"),OYr=o(" (DeBERTa model)"),VYr=l(),FA=a("li"),GLe=a("strong"),XYr=o("deberta-v2"),zYr=o(" \u2014 "),$te=a("a"),QYr=o("TFDebertaV2ForTokenClassification"),WYr=o(" (DeBERTa-v2 model)"),UYr=l(),TA=a("li"),OLe=a("strong"),HYr=o("distilbert"),JYr=o(" \u2014 "),kte=a("a"),YYr=o("TFDistilBertForTokenClassification"),KYr=o(" (DistilBERT model)"),ZYr=l(),MA=a("li"),VLe=a("strong"),eKr=o("electra"),oKr=o(" \u2014 "),Ste=a("a"),rKr=o("TFElectraForTokenClassification"),tKr=o(" (ELECTRA model)"),aKr=l(),EA=a("li"),XLe=a("strong"),nKr=o("flaubert"),sKr=o(" \u2014 "),Rte=a("a"),lKr=o("TFFlaubertForTokenClassification"),iKr=o(" (FlauBERT model)"),dKr=l(),CA=a("li"),zLe=a("strong"),cKr=o("funnel"),mKr=o(" \u2014 "),Pte=a("a"),fKr=o("TFFunnelForTokenClassification"),gKr=o(" (Funnel Transformer model)"),hKr=l(),wA=a("li"),QLe=a("strong"),uKr=o("layoutlm"),pKr=o(" \u2014 "),Bte=a("a"),_Kr=o("TFLayoutLMForTokenClassification"),bKr=o(" (LayoutLM model)"),vKr=l(),AA=a("li"),WLe=a("strong"),FKr=o("layoutlmv3"),TKr=o(" \u2014 "),Ite=a("a"),MKr=o("TFLayoutLMv3ForTokenClassification"),EKr=o(" (LayoutLMv3 model)"),CKr=l(),LA=a("li"),ULe=a("strong"),wKr=o("longformer"),AKr=o(" \u2014 "),Nte=a("a"),LKr=o("TFLongformerForTokenClassification"),yKr=o(" (Longformer model)"),xKr=l(),yA=a("li"),HLe=a("strong"),$Kr=o("mobilebert"),kKr=o(" \u2014 "),qte=a("a"),SKr=o("TFMobileBertForTokenClassification"),RKr=o(" (MobileBERT model)"),PKr=l(),xA=a("li"),JLe=a("strong"),BKr=o("mpnet"),IKr=o(" \u2014 "),jte=a("a"),NKr=o("TFMPNetForTokenClassification"),qKr=o(" (MPNet model)"),jKr=l(),$A=a("li"),YLe=a("strong"),DKr=o("rembert"),GKr=o(" \u2014 "),Dte=a("a"),OKr=o("TFRemBertForTokenClassification"),VKr=o(" (RemBERT model)"),XKr=l(),kA=a("li"),KLe=a("strong"),zKr=o("roberta"),QKr=o(" \u2014 "),Gte=a("a"),WKr=o("TFRobertaForTokenClassification"),UKr=o(" (RoBERTa model)"),HKr=l(),SA=a("li"),ZLe=a("strong"),JKr=o("roformer"),YKr=o(" \u2014 "),Ote=a("a"),KKr=o("TFRoFormerForTokenClassification"),ZKr=o(" (RoFormer model)"),eZr=l(),RA=a("li"),eye=a("strong"),oZr=o("xlm"),rZr=o(" \u2014 "),Vte=a("a"),tZr=o("TFXLMForTokenClassification"),aZr=o(" (XLM model)"),nZr=l(),PA=a("li"),oye=a("strong"),sZr=o("xlm-roberta"),lZr=o(" \u2014 "),Xte=a("a"),iZr=o("TFXLMRobertaForTokenClassification"),dZr=o(" (XLM-RoBERTa model)"),cZr=l(),BA=a("li"),rye=a("strong"),mZr=o("xlnet"),fZr=o(" \u2014 "),zte=a("a"),gZr=o("TFXLNetForTokenClassification"),hZr=o(" (XLNet model)"),uZr=l(),F(IA.$$.fragment),WZe=l(),ym=a("h2"),NA=a("a"),tye=a("span"),F(jS.$$.fragment),pZr=l(),aye=a("span"),_Zr=o("TFAutoModelForQuestionAnswering"),UZe=l(),vr=a("div"),F(DS.$$.fragment),bZr=l(),xm=a("p"),vZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qte=a("a"),FZr=o("from_pretrained()"),TZr=o(" class method or the "),Wte=a("a"),MZr=o("from_config()"),EZr=o(` class
method.`),CZr=l(),GS=a("p"),wZr=o("This class cannot be instantiated directly using "),nye=a("code"),AZr=o("__init__()"),LZr=o(" (throws an error)."),yZr=l(),ta=a("div"),F(OS.$$.fragment),xZr=l(),sye=a("p"),$Zr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kZr=l(),$m=a("p"),SZr=o(`Note:
Loading a model from its configuration file does `),lye=a("strong"),RZr=o("not"),PZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ute=a("a"),BZr=o("from_pretrained()"),IZr=o(" to load the model weights."),NZr=l(),F(qA.$$.fragment),qZr=l(),Hr=a("div"),F(VS.$$.fragment),jZr=l(),iye=a("p"),DZr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GZr=l(),Nn=a("p"),OZr=o("The model class to instantiate is selected based on the "),dye=a("code"),VZr=o("model_type"),XZr=o(` property of the config object (either
passed as an argument or loaded from `),cye=a("code"),zZr=o("pretrained_model_name_or_path"),QZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mye=a("code"),WZr=o("pretrained_model_name_or_path"),UZr=o(":"),HZr=l(),ce=a("ul"),jA=a("li"),fye=a("strong"),JZr=o("albert"),YZr=o(" \u2014 "),Hte=a("a"),KZr=o("TFAlbertForQuestionAnswering"),ZZr=o(" (ALBERT model)"),eet=l(),DA=a("li"),gye=a("strong"),oet=o("bert"),ret=o(" \u2014 "),Jte=a("a"),tet=o("TFBertForQuestionAnswering"),aet=o(" (BERT model)"),net=l(),GA=a("li"),hye=a("strong"),set=o("camembert"),iet=o(" \u2014 "),Yte=a("a"),det=o("TFCamembertForQuestionAnswering"),cet=o(" (CamemBERT model)"),met=l(),OA=a("li"),uye=a("strong"),fet=o("convbert"),get=o(" \u2014 "),Kte=a("a"),het=o("TFConvBertForQuestionAnswering"),uet=o(" (ConvBERT model)"),pet=l(),VA=a("li"),pye=a("strong"),_et=o("deberta"),bet=o(" \u2014 "),Zte=a("a"),vet=o("TFDebertaForQuestionAnswering"),Fet=o(" (DeBERTa model)"),Tet=l(),XA=a("li"),_ye=a("strong"),Met=o("deberta-v2"),Eet=o(" \u2014 "),eae=a("a"),Cet=o("TFDebertaV2ForQuestionAnswering"),wet=o(" (DeBERTa-v2 model)"),Aet=l(),zA=a("li"),bye=a("strong"),Let=o("distilbert"),yet=o(" \u2014 "),oae=a("a"),xet=o("TFDistilBertForQuestionAnswering"),$et=o(" (DistilBERT model)"),ket=l(),QA=a("li"),vye=a("strong"),Set=o("electra"),Ret=o(" \u2014 "),rae=a("a"),Pet=o("TFElectraForQuestionAnswering"),Bet=o(" (ELECTRA model)"),Iet=l(),WA=a("li"),Fye=a("strong"),Net=o("flaubert"),qet=o(" \u2014 "),tae=a("a"),jet=o("TFFlaubertForQuestionAnsweringSimple"),Det=o(" (FlauBERT model)"),Get=l(),UA=a("li"),Tye=a("strong"),Oet=o("funnel"),Vet=o(" \u2014 "),aae=a("a"),Xet=o("TFFunnelForQuestionAnswering"),zet=o(" (Funnel Transformer model)"),Qet=l(),HA=a("li"),Mye=a("strong"),Wet=o("gptj"),Uet=o(" \u2014 "),nae=a("a"),Het=o("TFGPTJForQuestionAnswering"),Jet=o(" (GPT-J model)"),Yet=l(),JA=a("li"),Eye=a("strong"),Ket=o("layoutlmv3"),Zet=o(" \u2014 "),sae=a("a"),eot=o("TFLayoutLMv3ForQuestionAnswering"),oot=o(" (LayoutLMv3 model)"),rot=l(),YA=a("li"),Cye=a("strong"),tot=o("longformer"),aot=o(" \u2014 "),lae=a("a"),not=o("TFLongformerForQuestionAnswering"),sot=o(" (Longformer model)"),lot=l(),KA=a("li"),wye=a("strong"),iot=o("mobilebert"),dot=o(" \u2014 "),iae=a("a"),cot=o("TFMobileBertForQuestionAnswering"),mot=o(" (MobileBERT model)"),fot=l(),ZA=a("li"),Aye=a("strong"),got=o("mpnet"),hot=o(" \u2014 "),dae=a("a"),uot=o("TFMPNetForQuestionAnswering"),pot=o(" (MPNet model)"),_ot=l(),e6=a("li"),Lye=a("strong"),bot=o("rembert"),vot=o(" \u2014 "),cae=a("a"),Fot=o("TFRemBertForQuestionAnswering"),Tot=o(" (RemBERT model)"),Mot=l(),o6=a("li"),yye=a("strong"),Eot=o("roberta"),Cot=o(" \u2014 "),mae=a("a"),wot=o("TFRobertaForQuestionAnswering"),Aot=o(" (RoBERTa model)"),Lot=l(),r6=a("li"),xye=a("strong"),yot=o("roformer"),xot=o(" \u2014 "),fae=a("a"),$ot=o("TFRoFormerForQuestionAnswering"),kot=o(" (RoFormer model)"),Sot=l(),t6=a("li"),$ye=a("strong"),Rot=o("xlm"),Pot=o(" \u2014 "),gae=a("a"),Bot=o("TFXLMForQuestionAnsweringSimple"),Iot=o(" (XLM model)"),Not=l(),a6=a("li"),kye=a("strong"),qot=o("xlm-roberta"),jot=o(" \u2014 "),hae=a("a"),Dot=o("TFXLMRobertaForQuestionAnswering"),Got=o(" (XLM-RoBERTa model)"),Oot=l(),n6=a("li"),Sye=a("strong"),Vot=o("xlnet"),Xot=o(" \u2014 "),uae=a("a"),zot=o("TFXLNetForQuestionAnsweringSimple"),Qot=o(" (XLNet model)"),Wot=l(),F(s6.$$.fragment),HZe=l(),km=a("h2"),l6=a("a"),Rye=a("span"),F(XS.$$.fragment),Uot=l(),Pye=a("span"),Hot=o("TFAutoModelForVision2Seq"),JZe=l(),Fr=a("div"),F(zS.$$.fragment),Jot=l(),Sm=a("p"),Yot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pae=a("a"),Kot=o("from_pretrained()"),Zot=o(" class method or the "),_ae=a("a"),ert=o("from_config()"),ort=o(` class
method.`),rrt=l(),QS=a("p"),trt=o("This class cannot be instantiated directly using "),Bye=a("code"),art=o("__init__()"),nrt=o(" (throws an error)."),srt=l(),aa=a("div"),F(WS.$$.fragment),lrt=l(),Iye=a("p"),irt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),drt=l(),Rm=a("p"),crt=o(`Note:
Loading a model from its configuration file does `),Nye=a("strong"),mrt=o("not"),frt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bae=a("a"),grt=o("from_pretrained()"),hrt=o(" to load the model weights."),urt=l(),F(i6.$$.fragment),prt=l(),Jr=a("div"),F(US.$$.fragment),_rt=l(),qye=a("p"),brt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vrt=l(),qn=a("p"),Frt=o("The model class to instantiate is selected based on the "),jye=a("code"),Trt=o("model_type"),Mrt=o(` property of the config object (either
passed as an argument or loaded from `),Dye=a("code"),Ert=o("pretrained_model_name_or_path"),Crt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gye=a("code"),wrt=o("pretrained_model_name_or_path"),Art=o(":"),Lrt=l(),Oye=a("ul"),d6=a("li"),Vye=a("strong"),yrt=o("vision-encoder-decoder"),xrt=o(" \u2014 "),vae=a("a"),$rt=o("TFVisionEncoderDecoderModel"),krt=o(" (Vision Encoder decoder model)"),Srt=l(),F(c6.$$.fragment),YZe=l(),Pm=a("h2"),m6=a("a"),Xye=a("span"),F(HS.$$.fragment),Rrt=l(),zye=a("span"),Prt=o("TFAutoModelForSpeechSeq2Seq"),KZe=l(),Tr=a("div"),F(JS.$$.fragment),Brt=l(),Bm=a("p"),Irt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fae=a("a"),Nrt=o("from_pretrained()"),qrt=o(" class method or the "),Tae=a("a"),jrt=o("from_config()"),Drt=o(` class
method.`),Grt=l(),YS=a("p"),Ort=o("This class cannot be instantiated directly using "),Qye=a("code"),Vrt=o("__init__()"),Xrt=o(" (throws an error)."),zrt=l(),na=a("div"),F(KS.$$.fragment),Qrt=l(),Wye=a("p"),Wrt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Urt=l(),Im=a("p"),Hrt=o(`Note:
Loading a model from its configuration file does `),Uye=a("strong"),Jrt=o("not"),Yrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mae=a("a"),Krt=o("from_pretrained()"),Zrt=o(" to load the model weights."),ett=l(),F(f6.$$.fragment),ott=l(),Yr=a("div"),F(ZS.$$.fragment),rtt=l(),Hye=a("p"),ttt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),att=l(),jn=a("p"),ntt=o("The model class to instantiate is selected based on the "),Jye=a("code"),stt=o("model_type"),ltt=o(` property of the config object (either
passed as an argument or loaded from `),Yye=a("code"),itt=o("pretrained_model_name_or_path"),dtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kye=a("code"),ctt=o("pretrained_model_name_or_path"),mtt=o(":"),ftt=l(),Zye=a("ul"),g6=a("li"),e8e=a("strong"),gtt=o("speech_to_text"),htt=o(" \u2014 "),Eae=a("a"),utt=o("TFSpeech2TextForConditionalGeneration"),ptt=o(" (Speech2Text model)"),_tt=l(),F(h6.$$.fragment),ZZe=l(),Nm=a("h2"),u6=a("a"),o8e=a("span"),F(eR.$$.fragment),btt=l(),r8e=a("span"),vtt=o("FlaxAutoModel"),eeo=l(),Mr=a("div"),F(oR.$$.fragment),Ftt=l(),qm=a("p"),Ttt=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Cae=a("a"),Mtt=o("from_pretrained()"),Ett=o(" class method or the "),wae=a("a"),Ctt=o("from_config()"),wtt=o(` class
method.`),Att=l(),rR=a("p"),Ltt=o("This class cannot be instantiated directly using "),t8e=a("code"),ytt=o("__init__()"),xtt=o(" (throws an error)."),$tt=l(),sa=a("div"),F(tR.$$.fragment),ktt=l(),a8e=a("p"),Stt=o("Instantiates one of the base model classes of the library from a configuration."),Rtt=l(),jm=a("p"),Ptt=o(`Note:
Loading a model from its configuration file does `),n8e=a("strong"),Btt=o("not"),Itt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aae=a("a"),Ntt=o("from_pretrained()"),qtt=o(" to load the model weights."),jtt=l(),F(p6.$$.fragment),Dtt=l(),Kr=a("div"),F(aR.$$.fragment),Gtt=l(),s8e=a("p"),Ott=o("Instantiate one of the base model classes of the library from a pretrained model."),Vtt=l(),Dn=a("p"),Xtt=o("The model class to instantiate is selected based on the "),l8e=a("code"),ztt=o("model_type"),Qtt=o(` property of the config object (either
passed as an argument or loaded from `),i8e=a("code"),Wtt=o("pretrained_model_name_or_path"),Utt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=a("code"),Htt=o("pretrained_model_name_or_path"),Jtt=o(":"),Ytt=l(),te=a("ul"),_6=a("li"),c8e=a("strong"),Ktt=o("albert"),Ztt=o(" \u2014 "),Lae=a("a"),eat=o("FlaxAlbertModel"),oat=o(" (ALBERT model)"),rat=l(),b6=a("li"),m8e=a("strong"),tat=o("bart"),aat=o(" \u2014 "),yae=a("a"),nat=o("FlaxBartModel"),sat=o(" (BART model)"),lat=l(),v6=a("li"),f8e=a("strong"),iat=o("beit"),dat=o(" \u2014 "),xae=a("a"),cat=o("FlaxBeitModel"),mat=o(" (BEiT model)"),fat=l(),F6=a("li"),g8e=a("strong"),gat=o("bert"),hat=o(" \u2014 "),$ae=a("a"),uat=o("FlaxBertModel"),pat=o(" (BERT model)"),_at=l(),T6=a("li"),h8e=a("strong"),bat=o("big_bird"),vat=o(" \u2014 "),kae=a("a"),Fat=o("FlaxBigBirdModel"),Tat=o(" (BigBird model)"),Mat=l(),M6=a("li"),u8e=a("strong"),Eat=o("blenderbot"),Cat=o(" \u2014 "),Sae=a("a"),wat=o("FlaxBlenderbotModel"),Aat=o(" (Blenderbot model)"),Lat=l(),E6=a("li"),p8e=a("strong"),yat=o("blenderbot-small"),xat=o(" \u2014 "),Rae=a("a"),$at=o("FlaxBlenderbotSmallModel"),kat=o(" (BlenderbotSmall model)"),Sat=l(),C6=a("li"),_8e=a("strong"),Rat=o("clip"),Pat=o(" \u2014 "),Pae=a("a"),Bat=o("FlaxCLIPModel"),Iat=o(" (CLIP model)"),Nat=l(),w6=a("li"),b8e=a("strong"),qat=o("distilbert"),jat=o(" \u2014 "),Bae=a("a"),Dat=o("FlaxDistilBertModel"),Gat=o(" (DistilBERT model)"),Oat=l(),A6=a("li"),v8e=a("strong"),Vat=o("electra"),Xat=o(" \u2014 "),Iae=a("a"),zat=o("FlaxElectraModel"),Qat=o(" (ELECTRA model)"),Wat=l(),L6=a("li"),F8e=a("strong"),Uat=o("gpt2"),Hat=o(" \u2014 "),Nae=a("a"),Jat=o("FlaxGPT2Model"),Yat=o(" (OpenAI GPT-2 model)"),Kat=l(),y6=a("li"),T8e=a("strong"),Zat=o("gpt_neo"),ent=o(" \u2014 "),qae=a("a"),ont=o("FlaxGPTNeoModel"),rnt=o(" (GPT Neo model)"),tnt=l(),x6=a("li"),M8e=a("strong"),ant=o("gptj"),nnt=o(" \u2014 "),jae=a("a"),snt=o("FlaxGPTJModel"),lnt=o(" (GPT-J model)"),int=l(),$6=a("li"),E8e=a("strong"),dnt=o("longt5"),cnt=o(" \u2014 "),Dae=a("a"),mnt=o("FlaxLongT5Model"),fnt=o(" (LongT5 model)"),gnt=l(),k6=a("li"),C8e=a("strong"),hnt=o("marian"),unt=o(" \u2014 "),Gae=a("a"),pnt=o("FlaxMarianModel"),_nt=o(" (Marian model)"),bnt=l(),S6=a("li"),w8e=a("strong"),vnt=o("mbart"),Fnt=o(" \u2014 "),Oae=a("a"),Tnt=o("FlaxMBartModel"),Mnt=o(" (mBART model)"),Ent=l(),R6=a("li"),A8e=a("strong"),Cnt=o("mt5"),wnt=o(" \u2014 "),Vae=a("a"),Ant=o("FlaxMT5Model"),Lnt=o(" (MT5 model)"),ynt=l(),P6=a("li"),L8e=a("strong"),xnt=o("opt"),$nt=o(" \u2014 "),Xae=a("a"),knt=o("FlaxOPTModel"),Snt=o(" (OPT model)"),Rnt=l(),B6=a("li"),y8e=a("strong"),Pnt=o("pegasus"),Bnt=o(" \u2014 "),zae=a("a"),Int=o("FlaxPegasusModel"),Nnt=o(" (Pegasus model)"),qnt=l(),I6=a("li"),x8e=a("strong"),jnt=o("roberta"),Dnt=o(" \u2014 "),Qae=a("a"),Gnt=o("FlaxRobertaModel"),Ont=o(" (RoBERTa model)"),Vnt=l(),N6=a("li"),$8e=a("strong"),Xnt=o("roformer"),znt=o(" \u2014 "),Wae=a("a"),Qnt=o("FlaxRoFormerModel"),Wnt=o(" (RoFormer model)"),Unt=l(),q6=a("li"),k8e=a("strong"),Hnt=o("t5"),Jnt=o(" \u2014 "),Uae=a("a"),Ynt=o("FlaxT5Model"),Knt=o(" (T5 model)"),Znt=l(),j6=a("li"),S8e=a("strong"),est=o("vision-text-dual-encoder"),ost=o(" \u2014 "),Hae=a("a"),rst=o("FlaxVisionTextDualEncoderModel"),tst=o(" (VisionTextDualEncoder model)"),ast=l(),D6=a("li"),R8e=a("strong"),nst=o("vit"),sst=o(" \u2014 "),Jae=a("a"),lst=o("FlaxViTModel"),ist=o(" (ViT model)"),dst=l(),G6=a("li"),P8e=a("strong"),cst=o("wav2vec2"),mst=o(" \u2014 "),Yae=a("a"),fst=o("FlaxWav2Vec2Model"),gst=o(" (Wav2Vec2 model)"),hst=l(),O6=a("li"),B8e=a("strong"),ust=o("xglm"),pst=o(" \u2014 "),Kae=a("a"),_st=o("FlaxXGLMModel"),bst=o(" (XGLM model)"),vst=l(),V6=a("li"),I8e=a("strong"),Fst=o("xlm-roberta"),Tst=o(" \u2014 "),Zae=a("a"),Mst=o("FlaxXLMRobertaModel"),Est=o(" (XLM-RoBERTa model)"),Cst=l(),F(X6.$$.fragment),oeo=l(),Dm=a("h2"),z6=a("a"),N8e=a("span"),F(nR.$$.fragment),wst=l(),q8e=a("span"),Ast=o("FlaxAutoModelForCausalLM"),reo=l(),Er=a("div"),F(sR.$$.fragment),Lst=l(),Gm=a("p"),yst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ene=a("a"),xst=o("from_pretrained()"),$st=o(" class method or the "),one=a("a"),kst=o("from_config()"),Sst=o(` class
method.`),Rst=l(),lR=a("p"),Pst=o("This class cannot be instantiated directly using "),j8e=a("code"),Bst=o("__init__()"),Ist=o(" (throws an error)."),Nst=l(),la=a("div"),F(iR.$$.fragment),qst=l(),D8e=a("p"),jst=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dst=l(),Om=a("p"),Gst=o(`Note:
Loading a model from its configuration file does `),G8e=a("strong"),Ost=o("not"),Vst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rne=a("a"),Xst=o("from_pretrained()"),zst=o(" to load the model weights."),Qst=l(),F(Q6.$$.fragment),Wst=l(),Zr=a("div"),F(dR.$$.fragment),Ust=l(),O8e=a("p"),Hst=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jst=l(),Gn=a("p"),Yst=o("The model class to instantiate is selected based on the "),V8e=a("code"),Kst=o("model_type"),Zst=o(` property of the config object (either
passed as an argument or loaded from `),X8e=a("code"),elt=o("pretrained_model_name_or_path"),olt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=a("code"),rlt=o("pretrained_model_name_or_path"),tlt=o(":"),alt=l(),xe=a("ul"),W6=a("li"),Q8e=a("strong"),nlt=o("bart"),slt=o(" \u2014 "),tne=a("a"),llt=o("FlaxBartForCausalLM"),ilt=o(" (BART model)"),dlt=l(),U6=a("li"),W8e=a("strong"),clt=o("bert"),mlt=o(" \u2014 "),ane=a("a"),flt=o("FlaxBertForCausalLM"),glt=o(" (BERT model)"),hlt=l(),H6=a("li"),U8e=a("strong"),ult=o("big_bird"),plt=o(" \u2014 "),nne=a("a"),_lt=o("FlaxBigBirdForCausalLM"),blt=o(" (BigBird model)"),vlt=l(),J6=a("li"),H8e=a("strong"),Flt=o("electra"),Tlt=o(" \u2014 "),sne=a("a"),Mlt=o("FlaxElectraForCausalLM"),Elt=o(" (ELECTRA model)"),Clt=l(),Y6=a("li"),J8e=a("strong"),wlt=o("gpt2"),Alt=o(" \u2014 "),lne=a("a"),Llt=o("FlaxGPT2LMHeadModel"),ylt=o(" (OpenAI GPT-2 model)"),xlt=l(),K6=a("li"),Y8e=a("strong"),$lt=o("gpt_neo"),klt=o(" \u2014 "),ine=a("a"),Slt=o("FlaxGPTNeoForCausalLM"),Rlt=o(" (GPT Neo model)"),Plt=l(),Z6=a("li"),K8e=a("strong"),Blt=o("gptj"),Ilt=o(" \u2014 "),dne=a("a"),Nlt=o("FlaxGPTJForCausalLM"),qlt=o(" (GPT-J model)"),jlt=l(),e7=a("li"),Z8e=a("strong"),Dlt=o("opt"),Glt=o(" \u2014 "),cne=a("a"),Olt=o("FlaxOPTForCausalLM"),Vlt=o(" (OPT model)"),Xlt=l(),o7=a("li"),e9e=a("strong"),zlt=o("roberta"),Qlt=o(" \u2014 "),mne=a("a"),Wlt=o("FlaxRobertaForCausalLM"),Ult=o(" (RoBERTa model)"),Hlt=l(),r7=a("li"),o9e=a("strong"),Jlt=o("xglm"),Ylt=o(" \u2014 "),fne=a("a"),Klt=o("FlaxXGLMForCausalLM"),Zlt=o(" (XGLM model)"),eit=l(),F(t7.$$.fragment),teo=l(),Vm=a("h2"),a7=a("a"),r9e=a("span"),F(cR.$$.fragment),oit=l(),t9e=a("span"),rit=o("FlaxAutoModelForPreTraining"),aeo=l(),Cr=a("div"),F(mR.$$.fragment),tit=l(),Xm=a("p"),ait=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gne=a("a"),nit=o("from_pretrained()"),sit=o(" class method or the "),hne=a("a"),lit=o("from_config()"),iit=o(` class
method.`),dit=l(),fR=a("p"),cit=o("This class cannot be instantiated directly using "),a9e=a("code"),mit=o("__init__()"),fit=o(" (throws an error)."),git=l(),ia=a("div"),F(gR.$$.fragment),hit=l(),n9e=a("p"),uit=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pit=l(),zm=a("p"),_it=o(`Note:
Loading a model from its configuration file does `),s9e=a("strong"),bit=o("not"),vit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),une=a("a"),Fit=o("from_pretrained()"),Tit=o(" to load the model weights."),Mit=l(),F(n7.$$.fragment),Eit=l(),et=a("div"),F(hR.$$.fragment),Cit=l(),l9e=a("p"),wit=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ait=l(),On=a("p"),Lit=o("The model class to instantiate is selected based on the "),i9e=a("code"),yit=o("model_type"),xit=o(` property of the config object (either
passed as an argument or loaded from `),d9e=a("code"),$it=o("pretrained_model_name_or_path"),kit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=a("code"),Sit=o("pretrained_model_name_or_path"),Rit=o(":"),Pit=l(),Ee=a("ul"),s7=a("li"),m9e=a("strong"),Bit=o("albert"),Iit=o(" \u2014 "),pne=a("a"),Nit=o("FlaxAlbertForPreTraining"),qit=o(" (ALBERT model)"),jit=l(),l7=a("li"),f9e=a("strong"),Dit=o("bart"),Git=o(" \u2014 "),_ne=a("a"),Oit=o("FlaxBartForConditionalGeneration"),Vit=o(" (BART model)"),Xit=l(),i7=a("li"),g9e=a("strong"),zit=o("bert"),Qit=o(" \u2014 "),bne=a("a"),Wit=o("FlaxBertForPreTraining"),Uit=o(" (BERT model)"),Hit=l(),d7=a("li"),h9e=a("strong"),Jit=o("big_bird"),Yit=o(" \u2014 "),vne=a("a"),Kit=o("FlaxBigBirdForPreTraining"),Zit=o(" (BigBird model)"),edt=l(),c7=a("li"),u9e=a("strong"),odt=o("electra"),rdt=o(" \u2014 "),Fne=a("a"),tdt=o("FlaxElectraForPreTraining"),adt=o(" (ELECTRA model)"),ndt=l(),m7=a("li"),p9e=a("strong"),sdt=o("longt5"),ldt=o(" \u2014 "),Tne=a("a"),idt=o("FlaxLongT5ForConditionalGeneration"),ddt=o(" (LongT5 model)"),cdt=l(),f7=a("li"),_9e=a("strong"),mdt=o("mbart"),fdt=o(" \u2014 "),Mne=a("a"),gdt=o("FlaxMBartForConditionalGeneration"),hdt=o(" (mBART model)"),udt=l(),g7=a("li"),b9e=a("strong"),pdt=o("mt5"),_dt=o(" \u2014 "),Ene=a("a"),bdt=o("FlaxMT5ForConditionalGeneration"),vdt=o(" (MT5 model)"),Fdt=l(),h7=a("li"),v9e=a("strong"),Tdt=o("roberta"),Mdt=o(" \u2014 "),Cne=a("a"),Edt=o("FlaxRobertaForMaskedLM"),Cdt=o(" (RoBERTa model)"),wdt=l(),u7=a("li"),F9e=a("strong"),Adt=o("roformer"),Ldt=o(" \u2014 "),wne=a("a"),ydt=o("FlaxRoFormerForMaskedLM"),xdt=o(" (RoFormer model)"),$dt=l(),p7=a("li"),T9e=a("strong"),kdt=o("t5"),Sdt=o(" \u2014 "),Ane=a("a"),Rdt=o("FlaxT5ForConditionalGeneration"),Pdt=o(" (T5 model)"),Bdt=l(),_7=a("li"),M9e=a("strong"),Idt=o("wav2vec2"),Ndt=o(" \u2014 "),Lne=a("a"),qdt=o("FlaxWav2Vec2ForPreTraining"),jdt=o(" (Wav2Vec2 model)"),Ddt=l(),b7=a("li"),E9e=a("strong"),Gdt=o("xlm-roberta"),Odt=o(" \u2014 "),yne=a("a"),Vdt=o("FlaxXLMRobertaForMaskedLM"),Xdt=o(" (XLM-RoBERTa model)"),zdt=l(),F(v7.$$.fragment),neo=l(),Qm=a("h2"),F7=a("a"),C9e=a("span"),F(uR.$$.fragment),Qdt=l(),w9e=a("span"),Wdt=o("FlaxAutoModelForMaskedLM"),seo=l(),wr=a("div"),F(pR.$$.fragment),Udt=l(),Wm=a("p"),Hdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xne=a("a"),Jdt=o("from_pretrained()"),Ydt=o(" class method or the "),$ne=a("a"),Kdt=o("from_config()"),Zdt=o(` class
method.`),ect=l(),_R=a("p"),oct=o("This class cannot be instantiated directly using "),A9e=a("code"),rct=o("__init__()"),tct=o(" (throws an error)."),act=l(),da=a("div"),F(bR.$$.fragment),nct=l(),L9e=a("p"),sct=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lct=l(),Um=a("p"),ict=o(`Note:
Loading a model from its configuration file does `),y9e=a("strong"),dct=o("not"),cct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kne=a("a"),mct=o("from_pretrained()"),fct=o(" to load the model weights."),gct=l(),F(T7.$$.fragment),hct=l(),ot=a("div"),F(vR.$$.fragment),uct=l(),x9e=a("p"),pct=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_ct=l(),Vn=a("p"),bct=o("The model class to instantiate is selected based on the "),$9e=a("code"),vct=o("model_type"),Fct=o(` property of the config object (either
passed as an argument or loaded from `),k9e=a("code"),Tct=o("pretrained_model_name_or_path"),Mct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=a("code"),Ect=o("pretrained_model_name_or_path"),Cct=o(":"),wct=l(),$e=a("ul"),M7=a("li"),R9e=a("strong"),Act=o("albert"),Lct=o(" \u2014 "),Sne=a("a"),yct=o("FlaxAlbertForMaskedLM"),xct=o(" (ALBERT model)"),$ct=l(),E7=a("li"),P9e=a("strong"),kct=o("bart"),Sct=o(" \u2014 "),Rne=a("a"),Rct=o("FlaxBartForConditionalGeneration"),Pct=o(" (BART model)"),Bct=l(),C7=a("li"),B9e=a("strong"),Ict=o("bert"),Nct=o(" \u2014 "),Pne=a("a"),qct=o("FlaxBertForMaskedLM"),jct=o(" (BERT model)"),Dct=l(),w7=a("li"),I9e=a("strong"),Gct=o("big_bird"),Oct=o(" \u2014 "),Bne=a("a"),Vct=o("FlaxBigBirdForMaskedLM"),Xct=o(" (BigBird model)"),zct=l(),A7=a("li"),N9e=a("strong"),Qct=o("distilbert"),Wct=o(" \u2014 "),Ine=a("a"),Uct=o("FlaxDistilBertForMaskedLM"),Hct=o(" (DistilBERT model)"),Jct=l(),L7=a("li"),q9e=a("strong"),Yct=o("electra"),Kct=o(" \u2014 "),Nne=a("a"),Zct=o("FlaxElectraForMaskedLM"),emt=o(" (ELECTRA model)"),omt=l(),y7=a("li"),j9e=a("strong"),rmt=o("mbart"),tmt=o(" \u2014 "),qne=a("a"),amt=o("FlaxMBartForConditionalGeneration"),nmt=o(" (mBART model)"),smt=l(),x7=a("li"),D9e=a("strong"),lmt=o("roberta"),imt=o(" \u2014 "),jne=a("a"),dmt=o("FlaxRobertaForMaskedLM"),cmt=o(" (RoBERTa model)"),mmt=l(),$7=a("li"),G9e=a("strong"),fmt=o("roformer"),gmt=o(" \u2014 "),Dne=a("a"),hmt=o("FlaxRoFormerForMaskedLM"),umt=o(" (RoFormer model)"),pmt=l(),k7=a("li"),O9e=a("strong"),_mt=o("xlm-roberta"),bmt=o(" \u2014 "),Gne=a("a"),vmt=o("FlaxXLMRobertaForMaskedLM"),Fmt=o(" (XLM-RoBERTa model)"),Tmt=l(),F(S7.$$.fragment),leo=l(),Hm=a("h2"),R7=a("a"),V9e=a("span"),F(FR.$$.fragment),Mmt=l(),X9e=a("span"),Emt=o("FlaxAutoModelForSeq2SeqLM"),ieo=l(),Ar=a("div"),F(TR.$$.fragment),Cmt=l(),Jm=a("p"),wmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),One=a("a"),Amt=o("from_pretrained()"),Lmt=o(" class method or the "),Vne=a("a"),ymt=o("from_config()"),xmt=o(` class
method.`),$mt=l(),MR=a("p"),kmt=o("This class cannot be instantiated directly using "),z9e=a("code"),Smt=o("__init__()"),Rmt=o(" (throws an error)."),Pmt=l(),ca=a("div"),F(ER.$$.fragment),Bmt=l(),Q9e=a("p"),Imt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nmt=l(),Ym=a("p"),qmt=o(`Note:
Loading a model from its configuration file does `),W9e=a("strong"),jmt=o("not"),Dmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xne=a("a"),Gmt=o("from_pretrained()"),Omt=o(" to load the model weights."),Vmt=l(),F(P7.$$.fragment),Xmt=l(),rt=a("div"),F(CR.$$.fragment),zmt=l(),U9e=a("p"),Qmt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wmt=l(),Xn=a("p"),Umt=o("The model class to instantiate is selected based on the "),H9e=a("code"),Hmt=o("model_type"),Jmt=o(` property of the config object (either
passed as an argument or loaded from `),J9e=a("code"),Ymt=o("pretrained_model_name_or_path"),Kmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y9e=a("code"),Zmt=o("pretrained_model_name_or_path"),eft=o(":"),oft=l(),ke=a("ul"),B7=a("li"),K9e=a("strong"),rft=o("bart"),tft=o(" \u2014 "),zne=a("a"),aft=o("FlaxBartForConditionalGeneration"),nft=o(" (BART model)"),sft=l(),I7=a("li"),Z9e=a("strong"),lft=o("blenderbot"),ift=o(" \u2014 "),Qne=a("a"),dft=o("FlaxBlenderbotForConditionalGeneration"),cft=o(" (Blenderbot model)"),mft=l(),N7=a("li"),exe=a("strong"),fft=o("blenderbot-small"),gft=o(" \u2014 "),Wne=a("a"),hft=o("FlaxBlenderbotSmallForConditionalGeneration"),uft=o(" (BlenderbotSmall model)"),pft=l(),q7=a("li"),oxe=a("strong"),_ft=o("encoder-decoder"),bft=o(" \u2014 "),Une=a("a"),vft=o("FlaxEncoderDecoderModel"),Fft=o(" (Encoder decoder model)"),Tft=l(),j7=a("li"),rxe=a("strong"),Mft=o("longt5"),Eft=o(" \u2014 "),Hne=a("a"),Cft=o("FlaxLongT5ForConditionalGeneration"),wft=o(" (LongT5 model)"),Aft=l(),D7=a("li"),txe=a("strong"),Lft=o("marian"),yft=o(" \u2014 "),Jne=a("a"),xft=o("FlaxMarianMTModel"),$ft=o(" (Marian model)"),kft=l(),G7=a("li"),axe=a("strong"),Sft=o("mbart"),Rft=o(" \u2014 "),Yne=a("a"),Pft=o("FlaxMBartForConditionalGeneration"),Bft=o(" (mBART model)"),Ift=l(),O7=a("li"),nxe=a("strong"),Nft=o("mt5"),qft=o(" \u2014 "),Kne=a("a"),jft=o("FlaxMT5ForConditionalGeneration"),Dft=o(" (MT5 model)"),Gft=l(),V7=a("li"),sxe=a("strong"),Oft=o("pegasus"),Vft=o(" \u2014 "),Zne=a("a"),Xft=o("FlaxPegasusForConditionalGeneration"),zft=o(" (Pegasus model)"),Qft=l(),X7=a("li"),lxe=a("strong"),Wft=o("t5"),Uft=o(" \u2014 "),ese=a("a"),Hft=o("FlaxT5ForConditionalGeneration"),Jft=o(" (T5 model)"),Yft=l(),F(z7.$$.fragment),deo=l(),Km=a("h2"),Q7=a("a"),ixe=a("span"),F(wR.$$.fragment),Kft=l(),dxe=a("span"),Zft=o("FlaxAutoModelForSequenceClassification"),ceo=l(),Lr=a("div"),F(AR.$$.fragment),egt=l(),Zm=a("p"),ogt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ose=a("a"),rgt=o("from_pretrained()"),tgt=o(" class method or the "),rse=a("a"),agt=o("from_config()"),ngt=o(` class
method.`),sgt=l(),LR=a("p"),lgt=o("This class cannot be instantiated directly using "),cxe=a("code"),igt=o("__init__()"),dgt=o(" (throws an error)."),cgt=l(),ma=a("div"),F(yR.$$.fragment),mgt=l(),mxe=a("p"),fgt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ggt=l(),ef=a("p"),hgt=o(`Note:
Loading a model from its configuration file does `),fxe=a("strong"),ugt=o("not"),pgt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=a("a"),_gt=o("from_pretrained()"),bgt=o(" to load the model weights."),vgt=l(),F(W7.$$.fragment),Fgt=l(),tt=a("div"),F(xR.$$.fragment),Tgt=l(),gxe=a("p"),Mgt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Egt=l(),zn=a("p"),Cgt=o("The model class to instantiate is selected based on the "),hxe=a("code"),wgt=o("model_type"),Agt=o(` property of the config object (either
passed as an argument or loaded from `),uxe=a("code"),Lgt=o("pretrained_model_name_or_path"),ygt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pxe=a("code"),xgt=o("pretrained_model_name_or_path"),$gt=o(":"),kgt=l(),Se=a("ul"),U7=a("li"),_xe=a("strong"),Sgt=o("albert"),Rgt=o(" \u2014 "),ase=a("a"),Pgt=o("FlaxAlbertForSequenceClassification"),Bgt=o(" (ALBERT model)"),Igt=l(),H7=a("li"),bxe=a("strong"),Ngt=o("bart"),qgt=o(" \u2014 "),nse=a("a"),jgt=o("FlaxBartForSequenceClassification"),Dgt=o(" (BART model)"),Ggt=l(),J7=a("li"),vxe=a("strong"),Ogt=o("bert"),Vgt=o(" \u2014 "),sse=a("a"),Xgt=o("FlaxBertForSequenceClassification"),zgt=o(" (BERT model)"),Qgt=l(),Y7=a("li"),Fxe=a("strong"),Wgt=o("big_bird"),Ugt=o(" \u2014 "),lse=a("a"),Hgt=o("FlaxBigBirdForSequenceClassification"),Jgt=o(" (BigBird model)"),Ygt=l(),K7=a("li"),Txe=a("strong"),Kgt=o("distilbert"),Zgt=o(" \u2014 "),ise=a("a"),eht=o("FlaxDistilBertForSequenceClassification"),oht=o(" (DistilBERT model)"),rht=l(),Z7=a("li"),Mxe=a("strong"),tht=o("electra"),aht=o(" \u2014 "),dse=a("a"),nht=o("FlaxElectraForSequenceClassification"),sht=o(" (ELECTRA model)"),lht=l(),eL=a("li"),Exe=a("strong"),iht=o("mbart"),dht=o(" \u2014 "),cse=a("a"),cht=o("FlaxMBartForSequenceClassification"),mht=o(" (mBART model)"),fht=l(),oL=a("li"),Cxe=a("strong"),ght=o("roberta"),hht=o(" \u2014 "),mse=a("a"),uht=o("FlaxRobertaForSequenceClassification"),pht=o(" (RoBERTa model)"),_ht=l(),rL=a("li"),wxe=a("strong"),bht=o("roformer"),vht=o(" \u2014 "),fse=a("a"),Fht=o("FlaxRoFormerForSequenceClassification"),Tht=o(" (RoFormer model)"),Mht=l(),tL=a("li"),Axe=a("strong"),Eht=o("xlm-roberta"),Cht=o(" \u2014 "),gse=a("a"),wht=o("FlaxXLMRobertaForSequenceClassification"),Aht=o(" (XLM-RoBERTa model)"),Lht=l(),F(aL.$$.fragment),meo=l(),of=a("h2"),nL=a("a"),Lxe=a("span"),F($R.$$.fragment),yht=l(),yxe=a("span"),xht=o("FlaxAutoModelForQuestionAnswering"),feo=l(),yr=a("div"),F(kR.$$.fragment),$ht=l(),rf=a("p"),kht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hse=a("a"),Sht=o("from_pretrained()"),Rht=o(" class method or the "),use=a("a"),Pht=o("from_config()"),Bht=o(` class
method.`),Iht=l(),SR=a("p"),Nht=o("This class cannot be instantiated directly using "),xxe=a("code"),qht=o("__init__()"),jht=o(" (throws an error)."),Dht=l(),fa=a("div"),F(RR.$$.fragment),Ght=l(),$xe=a("p"),Oht=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vht=l(),tf=a("p"),Xht=o(`Note:
Loading a model from its configuration file does `),kxe=a("strong"),zht=o("not"),Qht=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=a("a"),Wht=o("from_pretrained()"),Uht=o(" to load the model weights."),Hht=l(),F(sL.$$.fragment),Jht=l(),at=a("div"),F(PR.$$.fragment),Yht=l(),Sxe=a("p"),Kht=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zht=l(),Qn=a("p"),eut=o("The model class to instantiate is selected based on the "),Rxe=a("code"),out=o("model_type"),rut=o(` property of the config object (either
passed as an argument or loaded from `),Pxe=a("code"),tut=o("pretrained_model_name_or_path"),aut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bxe=a("code"),nut=o("pretrained_model_name_or_path"),sut=o(":"),lut=l(),Re=a("ul"),lL=a("li"),Ixe=a("strong"),iut=o("albert"),dut=o(" \u2014 "),_se=a("a"),cut=o("FlaxAlbertForQuestionAnswering"),mut=o(" (ALBERT model)"),fut=l(),iL=a("li"),Nxe=a("strong"),gut=o("bart"),hut=o(" \u2014 "),bse=a("a"),uut=o("FlaxBartForQuestionAnswering"),put=o(" (BART model)"),_ut=l(),dL=a("li"),qxe=a("strong"),but=o("bert"),vut=o(" \u2014 "),vse=a("a"),Fut=o("FlaxBertForQuestionAnswering"),Tut=o(" (BERT model)"),Mut=l(),cL=a("li"),jxe=a("strong"),Eut=o("big_bird"),Cut=o(" \u2014 "),Fse=a("a"),wut=o("FlaxBigBirdForQuestionAnswering"),Aut=o(" (BigBird model)"),Lut=l(),mL=a("li"),Dxe=a("strong"),yut=o("distilbert"),xut=o(" \u2014 "),Tse=a("a"),$ut=o("FlaxDistilBertForQuestionAnswering"),kut=o(" (DistilBERT model)"),Sut=l(),fL=a("li"),Gxe=a("strong"),Rut=o("electra"),Put=o(" \u2014 "),Mse=a("a"),But=o("FlaxElectraForQuestionAnswering"),Iut=o(" (ELECTRA model)"),Nut=l(),gL=a("li"),Oxe=a("strong"),qut=o("mbart"),jut=o(" \u2014 "),Ese=a("a"),Dut=o("FlaxMBartForQuestionAnswering"),Gut=o(" (mBART model)"),Out=l(),hL=a("li"),Vxe=a("strong"),Vut=o("roberta"),Xut=o(" \u2014 "),Cse=a("a"),zut=o("FlaxRobertaForQuestionAnswering"),Qut=o(" (RoBERTa model)"),Wut=l(),uL=a("li"),Xxe=a("strong"),Uut=o("roformer"),Hut=o(" \u2014 "),wse=a("a"),Jut=o("FlaxRoFormerForQuestionAnswering"),Yut=o(" (RoFormer model)"),Kut=l(),pL=a("li"),zxe=a("strong"),Zut=o("xlm-roberta"),ept=o(" \u2014 "),Ase=a("a"),opt=o("FlaxXLMRobertaForQuestionAnswering"),rpt=o(" (XLM-RoBERTa model)"),tpt=l(),F(_L.$$.fragment),geo=l(),af=a("h2"),bL=a("a"),Qxe=a("span"),F(BR.$$.fragment),apt=l(),Wxe=a("span"),npt=o("FlaxAutoModelForTokenClassification"),heo=l(),xr=a("div"),F(IR.$$.fragment),spt=l(),nf=a("p"),lpt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Lse=a("a"),ipt=o("from_pretrained()"),dpt=o(" class method or the "),yse=a("a"),cpt=o("from_config()"),mpt=o(` class
method.`),fpt=l(),NR=a("p"),gpt=o("This class cannot be instantiated directly using "),Uxe=a("code"),hpt=o("__init__()"),upt=o(" (throws an error)."),ppt=l(),ga=a("div"),F(qR.$$.fragment),_pt=l(),Hxe=a("p"),bpt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vpt=l(),sf=a("p"),Fpt=o(`Note:
Loading a model from its configuration file does `),Jxe=a("strong"),Tpt=o("not"),Mpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xse=a("a"),Ept=o("from_pretrained()"),Cpt=o(" to load the model weights."),wpt=l(),F(vL.$$.fragment),Apt=l(),nt=a("div"),F(jR.$$.fragment),Lpt=l(),Yxe=a("p"),ypt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xpt=l(),Wn=a("p"),$pt=o("The model class to instantiate is selected based on the "),Kxe=a("code"),kpt=o("model_type"),Spt=o(` property of the config object (either
passed as an argument or loaded from `),Zxe=a("code"),Rpt=o("pretrained_model_name_or_path"),Ppt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e$e=a("code"),Bpt=o("pretrained_model_name_or_path"),Ipt=o(":"),Npt=l(),Xe=a("ul"),FL=a("li"),o$e=a("strong"),qpt=o("albert"),jpt=o(" \u2014 "),$se=a("a"),Dpt=o("FlaxAlbertForTokenClassification"),Gpt=o(" (ALBERT model)"),Opt=l(),TL=a("li"),r$e=a("strong"),Vpt=o("bert"),Xpt=o(" \u2014 "),kse=a("a"),zpt=o("FlaxBertForTokenClassification"),Qpt=o(" (BERT model)"),Wpt=l(),ML=a("li"),t$e=a("strong"),Upt=o("big_bird"),Hpt=o(" \u2014 "),Sse=a("a"),Jpt=o("FlaxBigBirdForTokenClassification"),Ypt=o(" (BigBird model)"),Kpt=l(),EL=a("li"),a$e=a("strong"),Zpt=o("distilbert"),e_t=o(" \u2014 "),Rse=a("a"),o_t=o("FlaxDistilBertForTokenClassification"),r_t=o(" (DistilBERT model)"),t_t=l(),CL=a("li"),n$e=a("strong"),a_t=o("electra"),n_t=o(" \u2014 "),Pse=a("a"),s_t=o("FlaxElectraForTokenClassification"),l_t=o(" (ELECTRA model)"),i_t=l(),wL=a("li"),s$e=a("strong"),d_t=o("roberta"),c_t=o(" \u2014 "),Bse=a("a"),m_t=o("FlaxRobertaForTokenClassification"),f_t=o(" (RoBERTa model)"),g_t=l(),AL=a("li"),l$e=a("strong"),h_t=o("roformer"),u_t=o(" \u2014 "),Ise=a("a"),p_t=o("FlaxRoFormerForTokenClassification"),__t=o(" (RoFormer model)"),b_t=l(),LL=a("li"),i$e=a("strong"),v_t=o("xlm-roberta"),F_t=o(" \u2014 "),Nse=a("a"),T_t=o("FlaxXLMRobertaForTokenClassification"),M_t=o(" (XLM-RoBERTa model)"),E_t=l(),F(yL.$$.fragment),ueo=l(),lf=a("h2"),xL=a("a"),d$e=a("span"),F(DR.$$.fragment),C_t=l(),c$e=a("span"),w_t=o("FlaxAutoModelForMultipleChoice"),peo=l(),$r=a("div"),F(GR.$$.fragment),A_t=l(),df=a("p"),L_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qse=a("a"),y_t=o("from_pretrained()"),x_t=o(" class method or the "),jse=a("a"),$_t=o("from_config()"),k_t=o(` class
method.`),S_t=l(),OR=a("p"),R_t=o("This class cannot be instantiated directly using "),m$e=a("code"),P_t=o("__init__()"),B_t=o(" (throws an error)."),I_t=l(),ha=a("div"),F(VR.$$.fragment),N_t=l(),f$e=a("p"),q_t=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j_t=l(),cf=a("p"),D_t=o(`Note:
Loading a model from its configuration file does `),g$e=a("strong"),G_t=o("not"),O_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dse=a("a"),V_t=o("from_pretrained()"),X_t=o(" to load the model weights."),z_t=l(),F($L.$$.fragment),Q_t=l(),st=a("div"),F(XR.$$.fragment),W_t=l(),h$e=a("p"),U_t=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H_t=l(),Un=a("p"),J_t=o("The model class to instantiate is selected based on the "),u$e=a("code"),Y_t=o("model_type"),K_t=o(` property of the config object (either
passed as an argument or loaded from `),p$e=a("code"),Z_t=o("pretrained_model_name_or_path"),ebt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_$e=a("code"),obt=o("pretrained_model_name_or_path"),rbt=o(":"),tbt=l(),ze=a("ul"),kL=a("li"),b$e=a("strong"),abt=o("albert"),nbt=o(" \u2014 "),Gse=a("a"),sbt=o("FlaxAlbertForMultipleChoice"),lbt=o(" (ALBERT model)"),ibt=l(),SL=a("li"),v$e=a("strong"),dbt=o("bert"),cbt=o(" \u2014 "),Ose=a("a"),mbt=o("FlaxBertForMultipleChoice"),fbt=o(" (BERT model)"),gbt=l(),RL=a("li"),F$e=a("strong"),hbt=o("big_bird"),ubt=o(" \u2014 "),Vse=a("a"),pbt=o("FlaxBigBirdForMultipleChoice"),_bt=o(" (BigBird model)"),bbt=l(),PL=a("li"),T$e=a("strong"),vbt=o("distilbert"),Fbt=o(" \u2014 "),Xse=a("a"),Tbt=o("FlaxDistilBertForMultipleChoice"),Mbt=o(" (DistilBERT model)"),Ebt=l(),BL=a("li"),M$e=a("strong"),Cbt=o("electra"),wbt=o(" \u2014 "),zse=a("a"),Abt=o("FlaxElectraForMultipleChoice"),Lbt=o(" (ELECTRA model)"),ybt=l(),IL=a("li"),E$e=a("strong"),xbt=o("roberta"),$bt=o(" \u2014 "),Qse=a("a"),kbt=o("FlaxRobertaForMultipleChoice"),Sbt=o(" (RoBERTa model)"),Rbt=l(),NL=a("li"),C$e=a("strong"),Pbt=o("roformer"),Bbt=o(" \u2014 "),Wse=a("a"),Ibt=o("FlaxRoFormerForMultipleChoice"),Nbt=o(" (RoFormer model)"),qbt=l(),qL=a("li"),w$e=a("strong"),jbt=o("xlm-roberta"),Dbt=o(" \u2014 "),Use=a("a"),Gbt=o("FlaxXLMRobertaForMultipleChoice"),Obt=o(" (XLM-RoBERTa model)"),Vbt=l(),F(jL.$$.fragment),_eo=l(),mf=a("h2"),DL=a("a"),A$e=a("span"),F(zR.$$.fragment),Xbt=l(),L$e=a("span"),zbt=o("FlaxAutoModelForNextSentencePrediction"),beo=l(),kr=a("div"),F(QR.$$.fragment),Qbt=l(),ff=a("p"),Wbt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Hse=a("a"),Ubt=o("from_pretrained()"),Hbt=o(" class method or the "),Jse=a("a"),Jbt=o("from_config()"),Ybt=o(` class
method.`),Kbt=l(),WR=a("p"),Zbt=o("This class cannot be instantiated directly using "),y$e=a("code"),e2t=o("__init__()"),o2t=o(" (throws an error)."),r2t=l(),ua=a("div"),F(UR.$$.fragment),t2t=l(),x$e=a("p"),a2t=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n2t=l(),gf=a("p"),s2t=o(`Note:
Loading a model from its configuration file does `),$$e=a("strong"),l2t=o("not"),i2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yse=a("a"),d2t=o("from_pretrained()"),c2t=o(" to load the model weights."),m2t=l(),F(GL.$$.fragment),f2t=l(),lt=a("div"),F(HR.$$.fragment),g2t=l(),k$e=a("p"),h2t=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u2t=l(),Hn=a("p"),p2t=o("The model class to instantiate is selected based on the "),S$e=a("code"),_2t=o("model_type"),b2t=o(` property of the config object (either
passed as an argument or loaded from `),R$e=a("code"),v2t=o("pretrained_model_name_or_path"),F2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P$e=a("code"),T2t=o("pretrained_model_name_or_path"),M2t=o(":"),E2t=l(),B$e=a("ul"),OL=a("li"),I$e=a("strong"),C2t=o("bert"),w2t=o(" \u2014 "),Kse=a("a"),A2t=o("FlaxBertForNextSentencePrediction"),L2t=o(" (BERT model)"),y2t=l(),F(VL.$$.fragment),veo=l(),hf=a("h2"),XL=a("a"),N$e=a("span"),F(JR.$$.fragment),x2t=l(),q$e=a("span"),$2t=o("FlaxAutoModelForImageClassification"),Feo=l(),Sr=a("div"),F(YR.$$.fragment),k2t=l(),uf=a("p"),S2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Zse=a("a"),R2t=o("from_pretrained()"),P2t=o(" class method or the "),ele=a("a"),B2t=o("from_config()"),I2t=o(` class
method.`),N2t=l(),KR=a("p"),q2t=o("This class cannot be instantiated directly using "),j$e=a("code"),j2t=o("__init__()"),D2t=o(" (throws an error)."),G2t=l(),pa=a("div"),F(ZR.$$.fragment),O2t=l(),D$e=a("p"),V2t=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),X2t=l(),pf=a("p"),z2t=o(`Note:
Loading a model from its configuration file does `),G$e=a("strong"),Q2t=o("not"),W2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=a("a"),U2t=o("from_pretrained()"),H2t=o(" to load the model weights."),J2t=l(),F(zL.$$.fragment),Y2t=l(),it=a("div"),F(eP.$$.fragment),K2t=l(),O$e=a("p"),Z2t=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e1t=l(),Jn=a("p"),o1t=o("The model class to instantiate is selected based on the "),V$e=a("code"),r1t=o("model_type"),t1t=o(` property of the config object (either
passed as an argument or loaded from `),X$e=a("code"),a1t=o("pretrained_model_name_or_path"),n1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z$e=a("code"),s1t=o("pretrained_model_name_or_path"),l1t=o(":"),i1t=l(),oP=a("ul"),QL=a("li"),Q$e=a("strong"),d1t=o("beit"),c1t=o(" \u2014 "),rle=a("a"),m1t=o("FlaxBeitForImageClassification"),f1t=o(" (BEiT model)"),g1t=l(),WL=a("li"),W$e=a("strong"),h1t=o("vit"),u1t=o(" \u2014 "),tle=a("a"),p1t=o("FlaxViTForImageClassification"),_1t=o(" (ViT model)"),b1t=l(),F(UL.$$.fragment),Teo=l(),_f=a("h2"),HL=a("a"),U$e=a("span"),F(rP.$$.fragment),v1t=l(),H$e=a("span"),F1t=o("FlaxAutoModelForVision2Seq"),Meo=l(),Rr=a("div"),F(tP.$$.fragment),T1t=l(),bf=a("p"),M1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ale=a("a"),E1t=o("from_pretrained()"),C1t=o(" class method or the "),nle=a("a"),w1t=o("from_config()"),A1t=o(` class
method.`),L1t=l(),aP=a("p"),y1t=o("This class cannot be instantiated directly using "),J$e=a("code"),x1t=o("__init__()"),$1t=o(" (throws an error)."),k1t=l(),_a=a("div"),F(nP.$$.fragment),S1t=l(),Y$e=a("p"),R1t=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),P1t=l(),vf=a("p"),B1t=o(`Note:
Loading a model from its configuration file does `),K$e=a("strong"),I1t=o("not"),N1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sle=a("a"),q1t=o("from_pretrained()"),j1t=o(" to load the model weights."),D1t=l(),F(JL.$$.fragment),G1t=l(),dt=a("div"),F(sP.$$.fragment),O1t=l(),Z$e=a("p"),V1t=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),X1t=l(),Yn=a("p"),z1t=o("The model class to instantiate is selected based on the "),eke=a("code"),Q1t=o("model_type"),W1t=o(` property of the config object (either
passed as an argument or loaded from `),oke=a("code"),U1t=o("pretrained_model_name_or_path"),H1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rke=a("code"),J1t=o("pretrained_model_name_or_path"),Y1t=o(":"),K1t=l(),tke=a("ul"),YL=a("li"),ake=a("strong"),Z1t=o("vision-encoder-decoder"),evt=o(" \u2014 "),lle=a("a"),ovt=o("FlaxVisionEncoderDecoderModel"),rvt=o(" (Vision Encoder decoder model)"),tvt=l(),F(KL.$$.fragment),this.h()},l(m){const _=vha('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var lP=s(u);f=n(lP,"A",{id:!0,class:!0,href:!0});var nke=s(f);p=n(nke,"SPAN",{});var ske=s(p);T(d.$$.fragment,ske),ske.forEach(t),nke.forEach(t),h=i(lP),yo=n(lP,"SPAN",{});var lke=s(yo);rd=r(lke,"Auto Classes"),lke.forEach(t),lP.forEach(t),Ef=i(m),pt=n(m,"P",{});var iP=s(pt);td=r(iP,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ad=n(iP,"CODE",{});var ike=s(ad);y9=r(ike,"from_pretrained()"),ike.forEach(t),Cf=r(iP,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),iP.forEach(t),Ve=i(m),He=n(m,"P",{});var Kn=s(He);nd=r(Kn,"Instantiating one of "),Zn=n(Kn,"A",{href:!0});var dke=s(Zn);x9=r(dke,"AutoConfig"),dke.forEach(t),es=r(Kn,", "),os=n(Kn,"A",{href:!0});var cke=s(os);$9=r(cke,"AutoModel"),cke.forEach(t),sd=r(Kn,`, and
`),rs=n(Kn,"A",{href:!0});var mke=s(rs);k9=r(mke,"AutoTokenizer"),mke.forEach(t),ld=r(Kn," will directly create a class of the relevant architecture. For instance"),Kn.forEach(t),wf=i(m),T(Qa.$$.fragment,m),Je=i(m),Ae=n(m,"P",{});var dP=s(Ae);SB=r(dP,"will create a model that is an instance of "),id=n(dP,"A",{href:!0});var fke=s(id);RB=r(fke,"BertModel"),fke.forEach(t),PB=r(dP,"."),dP.forEach(t),xo=i(m),Wa=n(m,"P",{});var cP=s(Wa);BB=r(cP,"There is one class of "),Af=n(cP,"CODE",{});var gke=s(Af);IB=r(gke,"AutoModel"),gke.forEach(t),Dro=r(cP," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cP.forEach(t),cKe=i(m),dd=n(m,"H2",{class:!0});var mP=s(dd);Lf=n(mP,"A",{id:!0,class:!0,href:!0});var hke=s(Lf);fde=n(hke,"SPAN",{});var uke=s(fde);T(S9.$$.fragment,uke),uke.forEach(t),hke.forEach(t),Gro=i(mP),gde=n(mP,"SPAN",{});var pke=s(gde);Oro=r(pke,"Extending the Auto Classes"),pke.forEach(t),mP.forEach(t),mKe=i(m),ts=n(m,"P",{});var Ff=s(ts);Vro=r(Ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hde=n(Ff,"CODE",{});var _ke=s(hde);Xro=r(_ke,"NewModel"),_ke.forEach(t),zro=r(Ff,", make sure you have a "),ude=n(Ff,"CODE",{});var bke=s(ude);Qro=r(bke,"NewModelConfig"),bke.forEach(t),Wro=r(Ff,` then you can add those to the auto
classes like this:`),Ff.forEach(t),fKe=i(m),T(R9.$$.fragment,m),gKe=i(m),NB=n(m,"P",{});var vke=s(NB);Uro=r(vke,"You will then be able to use the auto classes like you would usually do!"),vke.forEach(t),hKe=i(m),T(yf.$$.fragment,m),uKe=i(m),cd=n(m,"H2",{class:!0});var fP=s(cd);xf=n(fP,"A",{id:!0,class:!0,href:!0});var Fke=s(xf);pde=n(Fke,"SPAN",{});var Tke=s(pde);T(P9.$$.fragment,Tke),Tke.forEach(t),Fke.forEach(t),Hro=i(fP),_de=n(fP,"SPAN",{});var Mke=s(_de);Jro=r(Mke,"AutoConfig"),Mke.forEach(t),fP.forEach(t),pKe=i(m),$o=n(m,"DIV",{class:!0});var ht=s($o);T(B9.$$.fragment,ht),Yro=i(ht),I9=n(ht,"P",{});var gP=s(I9);Kro=r(gP,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qB=n(gP,"A",{href:!0});var Eke=s(qB);Zro=r(Eke,"from_pretrained()"),Eke.forEach(t),eto=r(gP," class method."),gP.forEach(t),oto=i(ht),N9=n(ht,"P",{});var hP=s(N9);rto=r(hP,"This class cannot be instantiated directly using "),bde=n(hP,"CODE",{});var Cke=s(bde);tto=r(Cke,"__init__()"),Cke.forEach(t),ato=r(hP," (throws an error)."),hP.forEach(t),nto=i(ht),Pr=n(ht,"DIV",{class:!0});var ut=s(Pr);T(q9.$$.fragment,ut),sto=i(ut),vde=n(ut,"P",{});var wke=s(vde);lto=r(wke,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),wke.forEach(t),ito=i(ut),md=n(ut,"P",{});var Tf=s(md);dto=r(Tf,"The configuration class to instantiate is selected based on the "),Fde=n(Tf,"CODE",{});var Ake=s(Fde);cto=r(Ake,"model_type"),Ake.forEach(t),mto=r(Tf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Tde=n(Tf,"CODE",{});var Lke=s(Tde);fto=r(Lke,"pretrained_model_name_or_path"),Lke.forEach(t),gto=r(Tf,":"),Tf.forEach(t),hto=i(ut),A=n(ut,"UL",{});var L=s(A);$f=n(L,"LI",{});var ZL=s($f);Mde=n(ZL,"STRONG",{});var yke=s(Mde);uto=r(yke,"albert"),yke.forEach(t),pto=r(ZL," \u2014 "),jB=n(ZL,"A",{href:!0});var xke=s(jB);_to=r(xke,"AlbertConfig"),xke.forEach(t),bto=r(ZL," (ALBERT model)"),ZL.forEach(t),vto=i(L),kf=n(L,"LI",{});var ey=s(kf);Ede=n(ey,"STRONG",{});var $ke=s(Ede);Fto=r($ke,"bart"),$ke.forEach(t),Tto=r(ey," \u2014 "),DB=n(ey,"A",{href:!0});var kke=s(DB);Mto=r(kke,"BartConfig"),kke.forEach(t),Eto=r(ey," (BART model)"),ey.forEach(t),Cto=i(L),Sf=n(L,"LI",{});var oy=s(Sf);Cde=n(oy,"STRONG",{});var Ske=s(Cde);wto=r(Ske,"beit"),Ske.forEach(t),Ato=r(oy," \u2014 "),GB=n(oy,"A",{href:!0});var Rke=s(GB);Lto=r(Rke,"BeitConfig"),Rke.forEach(t),yto=r(oy," (BEiT model)"),oy.forEach(t),xto=i(L),Rf=n(L,"LI",{});var ry=s(Rf);wde=n(ry,"STRONG",{});var Pke=s(wde);$to=r(Pke,"bert"),Pke.forEach(t),kto=r(ry," \u2014 "),OB=n(ry,"A",{href:!0});var Bke=s(OB);Sto=r(Bke,"BertConfig"),Bke.forEach(t),Rto=r(ry," (BERT model)"),ry.forEach(t),Pto=i(L),Pf=n(L,"LI",{});var ty=s(Pf);Ade=n(ty,"STRONG",{});var Ike=s(Ade);Bto=r(Ike,"bert-generation"),Ike.forEach(t),Ito=r(ty," \u2014 "),VB=n(ty,"A",{href:!0});var Nke=s(VB);Nto=r(Nke,"BertGenerationConfig"),Nke.forEach(t),qto=r(ty," (Bert Generation model)"),ty.forEach(t),jto=i(L),Bf=n(L,"LI",{});var ay=s(Bf);Lde=n(ay,"STRONG",{});var qke=s(Lde);Dto=r(qke,"big_bird"),qke.forEach(t),Gto=r(ay," \u2014 "),XB=n(ay,"A",{href:!0});var jke=s(XB);Oto=r(jke,"BigBirdConfig"),jke.forEach(t),Vto=r(ay," (BigBird model)"),ay.forEach(t),Xto=i(L),If=n(L,"LI",{});var ny=s(If);yde=n(ny,"STRONG",{});var Dke=s(yde);zto=r(Dke,"bigbird_pegasus"),Dke.forEach(t),Qto=r(ny," \u2014 "),zB=n(ny,"A",{href:!0});var Gke=s(zB);Wto=r(Gke,"BigBirdPegasusConfig"),Gke.forEach(t),Uto=r(ny," (BigBird-Pegasus model)"),ny.forEach(t),Hto=i(L),Nf=n(L,"LI",{});var sy=s(Nf);xde=n(sy,"STRONG",{});var Oke=s(xde);Jto=r(Oke,"blenderbot"),Oke.forEach(t),Yto=r(sy," \u2014 "),QB=n(sy,"A",{href:!0});var Vke=s(QB);Kto=r(Vke,"BlenderbotConfig"),Vke.forEach(t),Zto=r(sy," (Blenderbot model)"),sy.forEach(t),eao=i(L),qf=n(L,"LI",{});var ly=s(qf);$de=n(ly,"STRONG",{});var Xke=s($de);oao=r(Xke,"blenderbot-small"),Xke.forEach(t),rao=r(ly," \u2014 "),WB=n(ly,"A",{href:!0});var zke=s(WB);tao=r(zke,"BlenderbotSmallConfig"),zke.forEach(t),aao=r(ly," (BlenderbotSmall model)"),ly.forEach(t),nao=i(L),jf=n(L,"LI",{});var iy=s(jf);kde=n(iy,"STRONG",{});var Qke=s(kde);sao=r(Qke,"bloom"),Qke.forEach(t),lao=r(iy," \u2014 "),UB=n(iy,"A",{href:!0});var Wke=s(UB);iao=r(Wke,"BloomConfig"),Wke.forEach(t),dao=r(iy," (BLOOM model)"),iy.forEach(t),cao=i(L),Df=n(L,"LI",{});var dy=s(Df);Sde=n(dy,"STRONG",{});var Uke=s(Sde);mao=r(Uke,"camembert"),Uke.forEach(t),fao=r(dy," \u2014 "),HB=n(dy,"A",{href:!0});var Hke=s(HB);gao=r(Hke,"CamembertConfig"),Hke.forEach(t),hao=r(dy," (CamemBERT model)"),dy.forEach(t),uao=i(L),Gf=n(L,"LI",{});var cy=s(Gf);Rde=n(cy,"STRONG",{});var Jke=s(Rde);pao=r(Jke,"canine"),Jke.forEach(t),_ao=r(cy," \u2014 "),JB=n(cy,"A",{href:!0});var Yke=s(JB);bao=r(Yke,"CanineConfig"),Yke.forEach(t),vao=r(cy," (CANINE model)"),cy.forEach(t),Fao=i(L),Of=n(L,"LI",{});var my=s(Of);Pde=n(my,"STRONG",{});var Kke=s(Pde);Tao=r(Kke,"clip"),Kke.forEach(t),Mao=r(my," \u2014 "),YB=n(my,"A",{href:!0});var Zke=s(YB);Eao=r(Zke,"CLIPConfig"),Zke.forEach(t),Cao=r(my," (CLIP model)"),my.forEach(t),wao=i(L),Vf=n(L,"LI",{});var fy=s(Vf);Bde=n(fy,"STRONG",{});var eSe=s(Bde);Aao=r(eSe,"codegen"),eSe.forEach(t),Lao=r(fy," \u2014 "),KB=n(fy,"A",{href:!0});var oSe=s(KB);yao=r(oSe,"CodeGenConfig"),oSe.forEach(t),xao=r(fy," (CodeGen model)"),fy.forEach(t),$ao=i(L),Xf=n(L,"LI",{});var gy=s(Xf);Ide=n(gy,"STRONG",{});var rSe=s(Ide);kao=r(rSe,"convbert"),rSe.forEach(t),Sao=r(gy," \u2014 "),ZB=n(gy,"A",{href:!0});var tSe=s(ZB);Rao=r(tSe,"ConvBertConfig"),tSe.forEach(t),Pao=r(gy," (ConvBERT model)"),gy.forEach(t),Bao=i(L),zf=n(L,"LI",{});var hy=s(zf);Nde=n(hy,"STRONG",{});var aSe=s(Nde);Iao=r(aSe,"convnext"),aSe.forEach(t),Nao=r(hy," \u2014 "),eI=n(hy,"A",{href:!0});var nSe=s(eI);qao=r(nSe,"ConvNextConfig"),nSe.forEach(t),jao=r(hy," (ConvNeXT model)"),hy.forEach(t),Dao=i(L),Qf=n(L,"LI",{});var uy=s(Qf);qde=n(uy,"STRONG",{});var sSe=s(qde);Gao=r(sSe,"ctrl"),sSe.forEach(t),Oao=r(uy," \u2014 "),oI=n(uy,"A",{href:!0});var lSe=s(oI);Vao=r(lSe,"CTRLConfig"),lSe.forEach(t),Xao=r(uy," (CTRL model)"),uy.forEach(t),zao=i(L),Wf=n(L,"LI",{});var py=s(Wf);jde=n(py,"STRONG",{});var iSe=s(jde);Qao=r(iSe,"cvt"),iSe.forEach(t),Wao=r(py," \u2014 "),rI=n(py,"A",{href:!0});var dSe=s(rI);Uao=r(dSe,"CvtConfig"),dSe.forEach(t),Hao=r(py," (CvT model)"),py.forEach(t),Jao=i(L),Uf=n(L,"LI",{});var _y=s(Uf);Dde=n(_y,"STRONG",{});var cSe=s(Dde);Yao=r(cSe,"data2vec-audio"),cSe.forEach(t),Kao=r(_y," \u2014 "),tI=n(_y,"A",{href:!0});var mSe=s(tI);Zao=r(mSe,"Data2VecAudioConfig"),mSe.forEach(t),eno=r(_y," (Data2VecAudio model)"),_y.forEach(t),ono=i(L),Hf=n(L,"LI",{});var by=s(Hf);Gde=n(by,"STRONG",{});var fSe=s(Gde);rno=r(fSe,"data2vec-text"),fSe.forEach(t),tno=r(by," \u2014 "),aI=n(by,"A",{href:!0});var gSe=s(aI);ano=r(gSe,"Data2VecTextConfig"),gSe.forEach(t),nno=r(by," (Data2VecText model)"),by.forEach(t),sno=i(L),Jf=n(L,"LI",{});var vy=s(Jf);Ode=n(vy,"STRONG",{});var hSe=s(Ode);lno=r(hSe,"data2vec-vision"),hSe.forEach(t),ino=r(vy," \u2014 "),nI=n(vy,"A",{href:!0});var uSe=s(nI);dno=r(uSe,"Data2VecVisionConfig"),uSe.forEach(t),cno=r(vy," (Data2VecVision model)"),vy.forEach(t),mno=i(L),Yf=n(L,"LI",{});var Fy=s(Yf);Vde=n(Fy,"STRONG",{});var pSe=s(Vde);fno=r(pSe,"deberta"),pSe.forEach(t),gno=r(Fy," \u2014 "),sI=n(Fy,"A",{href:!0});var _Se=s(sI);hno=r(_Se,"DebertaConfig"),_Se.forEach(t),uno=r(Fy," (DeBERTa model)"),Fy.forEach(t),pno=i(L),Kf=n(L,"LI",{});var Ty=s(Kf);Xde=n(Ty,"STRONG",{});var bSe=s(Xde);_no=r(bSe,"deberta-v2"),bSe.forEach(t),bno=r(Ty," \u2014 "),lI=n(Ty,"A",{href:!0});var vSe=s(lI);vno=r(vSe,"DebertaV2Config"),vSe.forEach(t),Fno=r(Ty," (DeBERTa-v2 model)"),Ty.forEach(t),Tno=i(L),Zf=n(L,"LI",{});var My=s(Zf);zde=n(My,"STRONG",{});var FSe=s(zde);Mno=r(FSe,"decision_transformer"),FSe.forEach(t),Eno=r(My," \u2014 "),iI=n(My,"A",{href:!0});var TSe=s(iI);Cno=r(TSe,"DecisionTransformerConfig"),TSe.forEach(t),wno=r(My," (Decision Transformer model)"),My.forEach(t),Ano=i(L),eg=n(L,"LI",{});var Ey=s(eg);Qde=n(Ey,"STRONG",{});var MSe=s(Qde);Lno=r(MSe,"deformable_detr"),MSe.forEach(t),yno=r(Ey," \u2014 "),dI=n(Ey,"A",{href:!0});var ESe=s(dI);xno=r(ESe,"DeformableDetrConfig"),ESe.forEach(t),$no=r(Ey," (Deformable DETR model)"),Ey.forEach(t),kno=i(L),og=n(L,"LI",{});var Cy=s(og);Wde=n(Cy,"STRONG",{});var CSe=s(Wde);Sno=r(CSe,"deit"),CSe.forEach(t),Rno=r(Cy," \u2014 "),cI=n(Cy,"A",{href:!0});var wSe=s(cI);Pno=r(wSe,"DeiTConfig"),wSe.forEach(t),Bno=r(Cy," (DeiT model)"),Cy.forEach(t),Ino=i(L),rg=n(L,"LI",{});var ASe=s(rg);Ude=n(ASe,"STRONG",{});var nvt=s(Ude);Nno=r(nvt,"detr"),nvt.forEach(t),qno=r(ASe," \u2014 "),mI=n(ASe,"A",{href:!0});var svt=s(mI);jno=r(svt,"DetrConfig"),svt.forEach(t),Dno=r(ASe," (DETR model)"),ASe.forEach(t),Gno=i(L),tg=n(L,"LI",{});var LSe=s(tg);Hde=n(LSe,"STRONG",{});var lvt=s(Hde);Ono=r(lvt,"distilbert"),lvt.forEach(t),Vno=r(LSe," \u2014 "),fI=n(LSe,"A",{href:!0});var ivt=s(fI);Xno=r(ivt,"DistilBertConfig"),ivt.forEach(t),zno=r(LSe," (DistilBERT model)"),LSe.forEach(t),Qno=i(L),ag=n(L,"LI",{});var ySe=s(ag);Jde=n(ySe,"STRONG",{});var dvt=s(Jde);Wno=r(dvt,"donut-swin"),dvt.forEach(t),Uno=r(ySe," \u2014 "),gI=n(ySe,"A",{href:!0});var cvt=s(gI);Hno=r(cvt,"DonutSwinConfig"),cvt.forEach(t),Jno=r(ySe," (DonutSwin model)"),ySe.forEach(t),Yno=i(L),ng=n(L,"LI",{});var xSe=s(ng);Yde=n(xSe,"STRONG",{});var mvt=s(Yde);Kno=r(mvt,"dpr"),mvt.forEach(t),Zno=r(xSe," \u2014 "),hI=n(xSe,"A",{href:!0});var fvt=s(hI);eso=r(fvt,"DPRConfig"),fvt.forEach(t),oso=r(xSe," (DPR model)"),xSe.forEach(t),rso=i(L),sg=n(L,"LI",{});var $Se=s(sg);Kde=n($Se,"STRONG",{});var gvt=s(Kde);tso=r(gvt,"dpt"),gvt.forEach(t),aso=r($Se," \u2014 "),uI=n($Se,"A",{href:!0});var hvt=s(uI);nso=r(hvt,"DPTConfig"),hvt.forEach(t),sso=r($Se," (DPT model)"),$Se.forEach(t),lso=i(L),lg=n(L,"LI",{});var kSe=s(lg);Zde=n(kSe,"STRONG",{});var uvt=s(Zde);iso=r(uvt,"electra"),uvt.forEach(t),dso=r(kSe," \u2014 "),pI=n(kSe,"A",{href:!0});var pvt=s(pI);cso=r(pvt,"ElectraConfig"),pvt.forEach(t),mso=r(kSe," (ELECTRA model)"),kSe.forEach(t),fso=i(L),ig=n(L,"LI",{});var SSe=s(ig);ece=n(SSe,"STRONG",{});var _vt=s(ece);gso=r(_vt,"encoder-decoder"),_vt.forEach(t),hso=r(SSe," \u2014 "),_I=n(SSe,"A",{href:!0});var bvt=s(_I);uso=r(bvt,"EncoderDecoderConfig"),bvt.forEach(t),pso=r(SSe," (Encoder decoder model)"),SSe.forEach(t),_so=i(L),dg=n(L,"LI",{});var RSe=s(dg);oce=n(RSe,"STRONG",{});var vvt=s(oce);bso=r(vvt,"ernie"),vvt.forEach(t),vso=r(RSe," \u2014 "),bI=n(RSe,"A",{href:!0});var Fvt=s(bI);Fso=r(Fvt,"ErnieConfig"),Fvt.forEach(t),Tso=r(RSe," (ERNIE model)"),RSe.forEach(t),Mso=i(L),cg=n(L,"LI",{});var PSe=s(cg);rce=n(PSe,"STRONG",{});var Tvt=s(rce);Eso=r(Tvt,"flaubert"),Tvt.forEach(t),Cso=r(PSe," \u2014 "),vI=n(PSe,"A",{href:!0});var Mvt=s(vI);wso=r(Mvt,"FlaubertConfig"),Mvt.forEach(t),Aso=r(PSe," (FlauBERT model)"),PSe.forEach(t),Lso=i(L),mg=n(L,"LI",{});var BSe=s(mg);tce=n(BSe,"STRONG",{});var Evt=s(tce);yso=r(Evt,"flava"),Evt.forEach(t),xso=r(BSe," \u2014 "),FI=n(BSe,"A",{href:!0});var Cvt=s(FI);$so=r(Cvt,"FlavaConfig"),Cvt.forEach(t),kso=r(BSe," (FLAVA model)"),BSe.forEach(t),Sso=i(L),fg=n(L,"LI",{});var ISe=s(fg);ace=n(ISe,"STRONG",{});var wvt=s(ace);Rso=r(wvt,"fnet"),wvt.forEach(t),Pso=r(ISe," \u2014 "),TI=n(ISe,"A",{href:!0});var Avt=s(TI);Bso=r(Avt,"FNetConfig"),Avt.forEach(t),Iso=r(ISe," (FNet model)"),ISe.forEach(t),Nso=i(L),gg=n(L,"LI",{});var NSe=s(gg);nce=n(NSe,"STRONG",{});var Lvt=s(nce);qso=r(Lvt,"fsmt"),Lvt.forEach(t),jso=r(NSe," \u2014 "),MI=n(NSe,"A",{href:!0});var yvt=s(MI);Dso=r(yvt,"FSMTConfig"),yvt.forEach(t),Gso=r(NSe," (FairSeq Machine-Translation model)"),NSe.forEach(t),Oso=i(L),hg=n(L,"LI",{});var qSe=s(hg);sce=n(qSe,"STRONG",{});var xvt=s(sce);Vso=r(xvt,"funnel"),xvt.forEach(t),Xso=r(qSe," \u2014 "),EI=n(qSe,"A",{href:!0});var $vt=s(EI);zso=r($vt,"FunnelConfig"),$vt.forEach(t),Qso=r(qSe," (Funnel Transformer model)"),qSe.forEach(t),Wso=i(L),ug=n(L,"LI",{});var jSe=s(ug);lce=n(jSe,"STRONG",{});var kvt=s(lce);Uso=r(kvt,"glpn"),kvt.forEach(t),Hso=r(jSe," \u2014 "),CI=n(jSe,"A",{href:!0});var Svt=s(CI);Jso=r(Svt,"GLPNConfig"),Svt.forEach(t),Yso=r(jSe," (GLPN model)"),jSe.forEach(t),Kso=i(L),pg=n(L,"LI",{});var DSe=s(pg);ice=n(DSe,"STRONG",{});var Rvt=s(ice);Zso=r(Rvt,"gpt2"),Rvt.forEach(t),elo=r(DSe," \u2014 "),wI=n(DSe,"A",{href:!0});var Pvt=s(wI);olo=r(Pvt,"GPT2Config"),Pvt.forEach(t),rlo=r(DSe," (OpenAI GPT-2 model)"),DSe.forEach(t),tlo=i(L),_g=n(L,"LI",{});var GSe=s(_g);dce=n(GSe,"STRONG",{});var Bvt=s(dce);alo=r(Bvt,"gpt_neo"),Bvt.forEach(t),nlo=r(GSe," \u2014 "),AI=n(GSe,"A",{href:!0});var Ivt=s(AI);slo=r(Ivt,"GPTNeoConfig"),Ivt.forEach(t),llo=r(GSe," (GPT Neo model)"),GSe.forEach(t),ilo=i(L),bg=n(L,"LI",{});var OSe=s(bg);cce=n(OSe,"STRONG",{});var Nvt=s(cce);dlo=r(Nvt,"gpt_neox"),Nvt.forEach(t),clo=r(OSe," \u2014 "),LI=n(OSe,"A",{href:!0});var qvt=s(LI);mlo=r(qvt,"GPTNeoXConfig"),qvt.forEach(t),flo=r(OSe," (GPT NeoX model)"),OSe.forEach(t),glo=i(L),vg=n(L,"LI",{});var VSe=s(vg);mce=n(VSe,"STRONG",{});var jvt=s(mce);hlo=r(jvt,"gpt_neox_japanese"),jvt.forEach(t),ulo=r(VSe," \u2014 "),yI=n(VSe,"A",{href:!0});var Dvt=s(yI);plo=r(Dvt,"GPTNeoXJapaneseConfig"),Dvt.forEach(t),_lo=r(VSe," (GPT NeoX Japanese model)"),VSe.forEach(t),blo=i(L),Fg=n(L,"LI",{});var XSe=s(Fg);fce=n(XSe,"STRONG",{});var Gvt=s(fce);vlo=r(Gvt,"gptj"),Gvt.forEach(t),Flo=r(XSe," \u2014 "),xI=n(XSe,"A",{href:!0});var Ovt=s(xI);Tlo=r(Ovt,"GPTJConfig"),Ovt.forEach(t),Mlo=r(XSe," (GPT-J model)"),XSe.forEach(t),Elo=i(L),Tg=n(L,"LI",{});var zSe=s(Tg);gce=n(zSe,"STRONG",{});var Vvt=s(gce);Clo=r(Vvt,"groupvit"),Vvt.forEach(t),wlo=r(zSe," \u2014 "),$I=n(zSe,"A",{href:!0});var Xvt=s($I);Alo=r(Xvt,"GroupViTConfig"),Xvt.forEach(t),Llo=r(zSe," (GroupViT model)"),zSe.forEach(t),ylo=i(L),Mg=n(L,"LI",{});var QSe=s(Mg);hce=n(QSe,"STRONG",{});var zvt=s(hce);xlo=r(zvt,"hubert"),zvt.forEach(t),$lo=r(QSe," \u2014 "),kI=n(QSe,"A",{href:!0});var Qvt=s(kI);klo=r(Qvt,"HubertConfig"),Qvt.forEach(t),Slo=r(QSe," (Hubert model)"),QSe.forEach(t),Rlo=i(L),Eg=n(L,"LI",{});var WSe=s(Eg);uce=n(WSe,"STRONG",{});var Wvt=s(uce);Plo=r(Wvt,"ibert"),Wvt.forEach(t),Blo=r(WSe," \u2014 "),SI=n(WSe,"A",{href:!0});var Uvt=s(SI);Ilo=r(Uvt,"IBertConfig"),Uvt.forEach(t),Nlo=r(WSe," (I-BERT model)"),WSe.forEach(t),qlo=i(L),Cg=n(L,"LI",{});var USe=s(Cg);pce=n(USe,"STRONG",{});var Hvt=s(pce);jlo=r(Hvt,"imagegpt"),Hvt.forEach(t),Dlo=r(USe," \u2014 "),RI=n(USe,"A",{href:!0});var Jvt=s(RI);Glo=r(Jvt,"ImageGPTConfig"),Jvt.forEach(t),Olo=r(USe," (ImageGPT model)"),USe.forEach(t),Vlo=i(L),wg=n(L,"LI",{});var HSe=s(wg);_ce=n(HSe,"STRONG",{});var Yvt=s(_ce);Xlo=r(Yvt,"layoutlm"),Yvt.forEach(t),zlo=r(HSe," \u2014 "),PI=n(HSe,"A",{href:!0});var Kvt=s(PI);Qlo=r(Kvt,"LayoutLMConfig"),Kvt.forEach(t),Wlo=r(HSe," (LayoutLM model)"),HSe.forEach(t),Ulo=i(L),Ag=n(L,"LI",{});var JSe=s(Ag);bce=n(JSe,"STRONG",{});var Zvt=s(bce);Hlo=r(Zvt,"layoutlmv2"),Zvt.forEach(t),Jlo=r(JSe," \u2014 "),BI=n(JSe,"A",{href:!0});var eFt=s(BI);Ylo=r(eFt,"LayoutLMv2Config"),eFt.forEach(t),Klo=r(JSe," (LayoutLMv2 model)"),JSe.forEach(t),Zlo=i(L),Lg=n(L,"LI",{});var YSe=s(Lg);vce=n(YSe,"STRONG",{});var oFt=s(vce);eio=r(oFt,"layoutlmv3"),oFt.forEach(t),oio=r(YSe," \u2014 "),II=n(YSe,"A",{href:!0});var rFt=s(II);rio=r(rFt,"LayoutLMv3Config"),rFt.forEach(t),tio=r(YSe," (LayoutLMv3 model)"),YSe.forEach(t),aio=i(L),yg=n(L,"LI",{});var KSe=s(yg);Fce=n(KSe,"STRONG",{});var tFt=s(Fce);nio=r(tFt,"led"),tFt.forEach(t),sio=r(KSe," \u2014 "),NI=n(KSe,"A",{href:!0});var aFt=s(NI);lio=r(aFt,"LEDConfig"),aFt.forEach(t),iio=r(KSe," (LED model)"),KSe.forEach(t),dio=i(L),xg=n(L,"LI",{});var ZSe=s(xg);Tce=n(ZSe,"STRONG",{});var nFt=s(Tce);cio=r(nFt,"levit"),nFt.forEach(t),mio=r(ZSe," \u2014 "),qI=n(ZSe,"A",{href:!0});var sFt=s(qI);fio=r(sFt,"LevitConfig"),sFt.forEach(t),gio=r(ZSe," (LeViT model)"),ZSe.forEach(t),hio=i(L),$g=n(L,"LI",{});var eRe=s($g);Mce=n(eRe,"STRONG",{});var lFt=s(Mce);uio=r(lFt,"longformer"),lFt.forEach(t),pio=r(eRe," \u2014 "),jI=n(eRe,"A",{href:!0});var iFt=s(jI);_io=r(iFt,"LongformerConfig"),iFt.forEach(t),bio=r(eRe," (Longformer model)"),eRe.forEach(t),vio=i(L),kg=n(L,"LI",{});var oRe=s(kg);Ece=n(oRe,"STRONG",{});var dFt=s(Ece);Fio=r(dFt,"longt5"),dFt.forEach(t),Tio=r(oRe," \u2014 "),DI=n(oRe,"A",{href:!0});var cFt=s(DI);Mio=r(cFt,"LongT5Config"),cFt.forEach(t),Eio=r(oRe," (LongT5 model)"),oRe.forEach(t),Cio=i(L),Sg=n(L,"LI",{});var rRe=s(Sg);Cce=n(rRe,"STRONG",{});var mFt=s(Cce);wio=r(mFt,"luke"),mFt.forEach(t),Aio=r(rRe," \u2014 "),GI=n(rRe,"A",{href:!0});var fFt=s(GI);Lio=r(fFt,"LukeConfig"),fFt.forEach(t),yio=r(rRe," (LUKE model)"),rRe.forEach(t),xio=i(L),Rg=n(L,"LI",{});var tRe=s(Rg);wce=n(tRe,"STRONG",{});var gFt=s(wce);$io=r(gFt,"lxmert"),gFt.forEach(t),kio=r(tRe," \u2014 "),OI=n(tRe,"A",{href:!0});var hFt=s(OI);Sio=r(hFt,"LxmertConfig"),hFt.forEach(t),Rio=r(tRe," (LXMERT model)"),tRe.forEach(t),Pio=i(L),Pg=n(L,"LI",{});var aRe=s(Pg);Ace=n(aRe,"STRONG",{});var uFt=s(Ace);Bio=r(uFt,"m2m_100"),uFt.forEach(t),Iio=r(aRe," \u2014 "),VI=n(aRe,"A",{href:!0});var pFt=s(VI);Nio=r(pFt,"M2M100Config"),pFt.forEach(t),qio=r(aRe," (M2M100 model)"),aRe.forEach(t),jio=i(L),Bg=n(L,"LI",{});var nRe=s(Bg);Lce=n(nRe,"STRONG",{});var _Ft=s(Lce);Dio=r(_Ft,"marian"),_Ft.forEach(t),Gio=r(nRe," \u2014 "),XI=n(nRe,"A",{href:!0});var bFt=s(XI);Oio=r(bFt,"MarianConfig"),bFt.forEach(t),Vio=r(nRe," (Marian model)"),nRe.forEach(t),Xio=i(L),Ig=n(L,"LI",{});var sRe=s(Ig);yce=n(sRe,"STRONG",{});var vFt=s(yce);zio=r(vFt,"maskformer"),vFt.forEach(t),Qio=r(sRe," \u2014 "),zI=n(sRe,"A",{href:!0});var FFt=s(zI);Wio=r(FFt,"MaskFormerConfig"),FFt.forEach(t),Uio=r(sRe," (MaskFormer model)"),sRe.forEach(t),Hio=i(L),Ng=n(L,"LI",{});var lRe=s(Ng);xce=n(lRe,"STRONG",{});var TFt=s(xce);Jio=r(TFt,"mbart"),TFt.forEach(t),Yio=r(lRe," \u2014 "),QI=n(lRe,"A",{href:!0});var MFt=s(QI);Kio=r(MFt,"MBartConfig"),MFt.forEach(t),Zio=r(lRe," (mBART model)"),lRe.forEach(t),edo=i(L),qg=n(L,"LI",{});var iRe=s(qg);$ce=n(iRe,"STRONG",{});var EFt=s($ce);odo=r(EFt,"mctct"),EFt.forEach(t),rdo=r(iRe," \u2014 "),WI=n(iRe,"A",{href:!0});var CFt=s(WI);tdo=r(CFt,"MCTCTConfig"),CFt.forEach(t),ado=r(iRe," (M-CTC-T model)"),iRe.forEach(t),ndo=i(L),jg=n(L,"LI",{});var dRe=s(jg);kce=n(dRe,"STRONG",{});var wFt=s(kce);sdo=r(wFt,"megatron-bert"),wFt.forEach(t),ldo=r(dRe," \u2014 "),UI=n(dRe,"A",{href:!0});var AFt=s(UI);ido=r(AFt,"MegatronBertConfig"),AFt.forEach(t),ddo=r(dRe," (Megatron-BERT model)"),dRe.forEach(t),cdo=i(L),Dg=n(L,"LI",{});var cRe=s(Dg);Sce=n(cRe,"STRONG",{});var LFt=s(Sce);mdo=r(LFt,"mobilebert"),LFt.forEach(t),fdo=r(cRe," \u2014 "),HI=n(cRe,"A",{href:!0});var yFt=s(HI);gdo=r(yFt,"MobileBertConfig"),yFt.forEach(t),hdo=r(cRe," (MobileBERT model)"),cRe.forEach(t),udo=i(L),Gg=n(L,"LI",{});var mRe=s(Gg);Rce=n(mRe,"STRONG",{});var xFt=s(Rce);pdo=r(xFt,"mobilevit"),xFt.forEach(t),_do=r(mRe," \u2014 "),JI=n(mRe,"A",{href:!0});var $Ft=s(JI);bdo=r($Ft,"MobileViTConfig"),$Ft.forEach(t),vdo=r(mRe," (MobileViT model)"),mRe.forEach(t),Fdo=i(L),Og=n(L,"LI",{});var fRe=s(Og);Pce=n(fRe,"STRONG",{});var kFt=s(Pce);Tdo=r(kFt,"mpnet"),kFt.forEach(t),Mdo=r(fRe," \u2014 "),YI=n(fRe,"A",{href:!0});var SFt=s(YI);Edo=r(SFt,"MPNetConfig"),SFt.forEach(t),Cdo=r(fRe," (MPNet model)"),fRe.forEach(t),wdo=i(L),Vg=n(L,"LI",{});var gRe=s(Vg);Bce=n(gRe,"STRONG",{});var RFt=s(Bce);Ado=r(RFt,"mt5"),RFt.forEach(t),Ldo=r(gRe," \u2014 "),KI=n(gRe,"A",{href:!0});var PFt=s(KI);ydo=r(PFt,"MT5Config"),PFt.forEach(t),xdo=r(gRe," (MT5 model)"),gRe.forEach(t),$do=i(L),Xg=n(L,"LI",{});var hRe=s(Xg);Ice=n(hRe,"STRONG",{});var BFt=s(Ice);kdo=r(BFt,"mvp"),BFt.forEach(t),Sdo=r(hRe," \u2014 "),ZI=n(hRe,"A",{href:!0});var IFt=s(ZI);Rdo=r(IFt,"MvpConfig"),IFt.forEach(t),Pdo=r(hRe," (MVP model)"),hRe.forEach(t),Bdo=i(L),zg=n(L,"LI",{});var uRe=s(zg);Nce=n(uRe,"STRONG",{});var NFt=s(Nce);Ido=r(NFt,"nezha"),NFt.forEach(t),Ndo=r(uRe," \u2014 "),eN=n(uRe,"A",{href:!0});var qFt=s(eN);qdo=r(qFt,"NezhaConfig"),qFt.forEach(t),jdo=r(uRe," (Nezha model)"),uRe.forEach(t),Ddo=i(L),Qg=n(L,"LI",{});var pRe=s(Qg);qce=n(pRe,"STRONG",{});var jFt=s(qce);Gdo=r(jFt,"nystromformer"),jFt.forEach(t),Odo=r(pRe," \u2014 "),oN=n(pRe,"A",{href:!0});var DFt=s(oN);Vdo=r(DFt,"NystromformerConfig"),DFt.forEach(t),Xdo=r(pRe," (Nystr\xF6mformer model)"),pRe.forEach(t),zdo=i(L),Wg=n(L,"LI",{});var _Re=s(Wg);jce=n(_Re,"STRONG",{});var GFt=s(jce);Qdo=r(GFt,"openai-gpt"),GFt.forEach(t),Wdo=r(_Re," \u2014 "),rN=n(_Re,"A",{href:!0});var OFt=s(rN);Udo=r(OFt,"OpenAIGPTConfig"),OFt.forEach(t),Hdo=r(_Re," (OpenAI GPT model)"),_Re.forEach(t),Jdo=i(L),Ug=n(L,"LI",{});var bRe=s(Ug);Dce=n(bRe,"STRONG",{});var VFt=s(Dce);Ydo=r(VFt,"opt"),VFt.forEach(t),Kdo=r(bRe," \u2014 "),tN=n(bRe,"A",{href:!0});var XFt=s(tN);Zdo=r(XFt,"OPTConfig"),XFt.forEach(t),eco=r(bRe," (OPT model)"),bRe.forEach(t),oco=i(L),Hg=n(L,"LI",{});var vRe=s(Hg);Gce=n(vRe,"STRONG",{});var zFt=s(Gce);rco=r(zFt,"owlvit"),zFt.forEach(t),tco=r(vRe," \u2014 "),aN=n(vRe,"A",{href:!0});var QFt=s(aN);aco=r(QFt,"OwlViTConfig"),QFt.forEach(t),nco=r(vRe," (OWL-ViT model)"),vRe.forEach(t),sco=i(L),Jg=n(L,"LI",{});var FRe=s(Jg);Oce=n(FRe,"STRONG",{});var WFt=s(Oce);lco=r(WFt,"pegasus"),WFt.forEach(t),ico=r(FRe," \u2014 "),nN=n(FRe,"A",{href:!0});var UFt=s(nN);dco=r(UFt,"PegasusConfig"),UFt.forEach(t),cco=r(FRe," (Pegasus model)"),FRe.forEach(t),mco=i(L),Yg=n(L,"LI",{});var TRe=s(Yg);Vce=n(TRe,"STRONG",{});var HFt=s(Vce);fco=r(HFt,"pegasus_x"),HFt.forEach(t),gco=r(TRe," \u2014 "),sN=n(TRe,"A",{href:!0});var JFt=s(sN);hco=r(JFt,"PegasusXConfig"),JFt.forEach(t),uco=r(TRe," (PEGASUS-X model)"),TRe.forEach(t),pco=i(L),Kg=n(L,"LI",{});var MRe=s(Kg);Xce=n(MRe,"STRONG",{});var YFt=s(Xce);_co=r(YFt,"perceiver"),YFt.forEach(t),bco=r(MRe," \u2014 "),lN=n(MRe,"A",{href:!0});var KFt=s(lN);vco=r(KFt,"PerceiverConfig"),KFt.forEach(t),Fco=r(MRe," (Perceiver model)"),MRe.forEach(t),Tco=i(L),Zg=n(L,"LI",{});var ERe=s(Zg);zce=n(ERe,"STRONG",{});var ZFt=s(zce);Mco=r(ZFt,"plbart"),ZFt.forEach(t),Eco=r(ERe," \u2014 "),iN=n(ERe,"A",{href:!0});var eTt=s(iN);Cco=r(eTt,"PLBartConfig"),eTt.forEach(t),wco=r(ERe," (PLBart model)"),ERe.forEach(t),Aco=i(L),eh=n(L,"LI",{});var CRe=s(eh);Qce=n(CRe,"STRONG",{});var oTt=s(Qce);Lco=r(oTt,"poolformer"),oTt.forEach(t),yco=r(CRe," \u2014 "),dN=n(CRe,"A",{href:!0});var rTt=s(dN);xco=r(rTt,"PoolFormerConfig"),rTt.forEach(t),$co=r(CRe," (PoolFormer model)"),CRe.forEach(t),kco=i(L),oh=n(L,"LI",{});var wRe=s(oh);Wce=n(wRe,"STRONG",{});var tTt=s(Wce);Sco=r(tTt,"prophetnet"),tTt.forEach(t),Rco=r(wRe," \u2014 "),cN=n(wRe,"A",{href:!0});var aTt=s(cN);Pco=r(aTt,"ProphetNetConfig"),aTt.forEach(t),Bco=r(wRe," (ProphetNet model)"),wRe.forEach(t),Ico=i(L),rh=n(L,"LI",{});var ARe=s(rh);Uce=n(ARe,"STRONG",{});var nTt=s(Uce);Nco=r(nTt,"qdqbert"),nTt.forEach(t),qco=r(ARe," \u2014 "),mN=n(ARe,"A",{href:!0});var sTt=s(mN);jco=r(sTt,"QDQBertConfig"),sTt.forEach(t),Dco=r(ARe," (QDQBert model)"),ARe.forEach(t),Gco=i(L),th=n(L,"LI",{});var LRe=s(th);Hce=n(LRe,"STRONG",{});var lTt=s(Hce);Oco=r(lTt,"rag"),lTt.forEach(t),Vco=r(LRe," \u2014 "),fN=n(LRe,"A",{href:!0});var iTt=s(fN);Xco=r(iTt,"RagConfig"),iTt.forEach(t),zco=r(LRe," (RAG model)"),LRe.forEach(t),Qco=i(L),ah=n(L,"LI",{});var yRe=s(ah);Jce=n(yRe,"STRONG",{});var dTt=s(Jce);Wco=r(dTt,"realm"),dTt.forEach(t),Uco=r(yRe," \u2014 "),gN=n(yRe,"A",{href:!0});var cTt=s(gN);Hco=r(cTt,"RealmConfig"),cTt.forEach(t),Jco=r(yRe," (REALM model)"),yRe.forEach(t),Yco=i(L),nh=n(L,"LI",{});var xRe=s(nh);Yce=n(xRe,"STRONG",{});var mTt=s(Yce);Kco=r(mTt,"reformer"),mTt.forEach(t),Zco=r(xRe," \u2014 "),hN=n(xRe,"A",{href:!0});var fTt=s(hN);emo=r(fTt,"ReformerConfig"),fTt.forEach(t),omo=r(xRe," (Reformer model)"),xRe.forEach(t),rmo=i(L),sh=n(L,"LI",{});var $Re=s(sh);Kce=n($Re,"STRONG",{});var gTt=s(Kce);tmo=r(gTt,"regnet"),gTt.forEach(t),amo=r($Re," \u2014 "),uN=n($Re,"A",{href:!0});var hTt=s(uN);nmo=r(hTt,"RegNetConfig"),hTt.forEach(t),smo=r($Re," (RegNet model)"),$Re.forEach(t),lmo=i(L),lh=n(L,"LI",{});var kRe=s(lh);Zce=n(kRe,"STRONG",{});var uTt=s(Zce);imo=r(uTt,"rembert"),uTt.forEach(t),dmo=r(kRe," \u2014 "),pN=n(kRe,"A",{href:!0});var pTt=s(pN);cmo=r(pTt,"RemBertConfig"),pTt.forEach(t),mmo=r(kRe," (RemBERT model)"),kRe.forEach(t),fmo=i(L),ih=n(L,"LI",{});var SRe=s(ih);eme=n(SRe,"STRONG",{});var _Tt=s(eme);gmo=r(_Tt,"resnet"),_Tt.forEach(t),hmo=r(SRe," \u2014 "),_N=n(SRe,"A",{href:!0});var bTt=s(_N);umo=r(bTt,"ResNetConfig"),bTt.forEach(t),pmo=r(SRe," (ResNet model)"),SRe.forEach(t),_mo=i(L),dh=n(L,"LI",{});var RRe=s(dh);ome=n(RRe,"STRONG",{});var vTt=s(ome);bmo=r(vTt,"retribert"),vTt.forEach(t),vmo=r(RRe," \u2014 "),bN=n(RRe,"A",{href:!0});var FTt=s(bN);Fmo=r(FTt,"RetriBertConfig"),FTt.forEach(t),Tmo=r(RRe," (RetriBERT model)"),RRe.forEach(t),Mmo=i(L),ch=n(L,"LI",{});var PRe=s(ch);rme=n(PRe,"STRONG",{});var TTt=s(rme);Emo=r(TTt,"roberta"),TTt.forEach(t),Cmo=r(PRe," \u2014 "),vN=n(PRe,"A",{href:!0});var MTt=s(vN);wmo=r(MTt,"RobertaConfig"),MTt.forEach(t),Amo=r(PRe," (RoBERTa model)"),PRe.forEach(t),Lmo=i(L),mh=n(L,"LI",{});var BRe=s(mh);tme=n(BRe,"STRONG",{});var ETt=s(tme);ymo=r(ETt,"roformer"),ETt.forEach(t),xmo=r(BRe," \u2014 "),FN=n(BRe,"A",{href:!0});var CTt=s(FN);$mo=r(CTt,"RoFormerConfig"),CTt.forEach(t),kmo=r(BRe," (RoFormer model)"),BRe.forEach(t),Smo=i(L),fh=n(L,"LI",{});var IRe=s(fh);ame=n(IRe,"STRONG",{});var wTt=s(ame);Rmo=r(wTt,"segformer"),wTt.forEach(t),Pmo=r(IRe," \u2014 "),TN=n(IRe,"A",{href:!0});var ATt=s(TN);Bmo=r(ATt,"SegformerConfig"),ATt.forEach(t),Imo=r(IRe," (SegFormer model)"),IRe.forEach(t),Nmo=i(L),gh=n(L,"LI",{});var NRe=s(gh);nme=n(NRe,"STRONG",{});var LTt=s(nme);qmo=r(LTt,"sew"),LTt.forEach(t),jmo=r(NRe," \u2014 "),MN=n(NRe,"A",{href:!0});var yTt=s(MN);Dmo=r(yTt,"SEWConfig"),yTt.forEach(t),Gmo=r(NRe," (SEW model)"),NRe.forEach(t),Omo=i(L),hh=n(L,"LI",{});var qRe=s(hh);sme=n(qRe,"STRONG",{});var xTt=s(sme);Vmo=r(xTt,"sew-d"),xTt.forEach(t),Xmo=r(qRe," \u2014 "),EN=n(qRe,"A",{href:!0});var $Tt=s(EN);zmo=r($Tt,"SEWDConfig"),$Tt.forEach(t),Qmo=r(qRe," (SEW-D model)"),qRe.forEach(t),Wmo=i(L),uh=n(L,"LI",{});var jRe=s(uh);lme=n(jRe,"STRONG",{});var kTt=s(lme);Umo=r(kTt,"speech-encoder-decoder"),kTt.forEach(t),Hmo=r(jRe," \u2014 "),CN=n(jRe,"A",{href:!0});var STt=s(CN);Jmo=r(STt,"SpeechEncoderDecoderConfig"),STt.forEach(t),Ymo=r(jRe," (Speech Encoder decoder model)"),jRe.forEach(t),Kmo=i(L),ph=n(L,"LI",{});var DRe=s(ph);ime=n(DRe,"STRONG",{});var RTt=s(ime);Zmo=r(RTt,"speech_to_text"),RTt.forEach(t),efo=r(DRe," \u2014 "),wN=n(DRe,"A",{href:!0});var PTt=s(wN);ofo=r(PTt,"Speech2TextConfig"),PTt.forEach(t),rfo=r(DRe," (Speech2Text model)"),DRe.forEach(t),tfo=i(L),_h=n(L,"LI",{});var GRe=s(_h);dme=n(GRe,"STRONG",{});var BTt=s(dme);afo=r(BTt,"speech_to_text_2"),BTt.forEach(t),nfo=r(GRe," \u2014 "),AN=n(GRe,"A",{href:!0});var ITt=s(AN);sfo=r(ITt,"Speech2Text2Config"),ITt.forEach(t),lfo=r(GRe," (Speech2Text2 model)"),GRe.forEach(t),ifo=i(L),bh=n(L,"LI",{});var ORe=s(bh);cme=n(ORe,"STRONG",{});var NTt=s(cme);dfo=r(NTt,"splinter"),NTt.forEach(t),cfo=r(ORe," \u2014 "),LN=n(ORe,"A",{href:!0});var qTt=s(LN);mfo=r(qTt,"SplinterConfig"),qTt.forEach(t),ffo=r(ORe," (Splinter model)"),ORe.forEach(t),gfo=i(L),vh=n(L,"LI",{});var VRe=s(vh);mme=n(VRe,"STRONG",{});var jTt=s(mme);hfo=r(jTt,"squeezebert"),jTt.forEach(t),ufo=r(VRe," \u2014 "),yN=n(VRe,"A",{href:!0});var DTt=s(yN);pfo=r(DTt,"SqueezeBertConfig"),DTt.forEach(t),_fo=r(VRe," (SqueezeBERT model)"),VRe.forEach(t),bfo=i(L),Fh=n(L,"LI",{});var XRe=s(Fh);fme=n(XRe,"STRONG",{});var GTt=s(fme);vfo=r(GTt,"swin"),GTt.forEach(t),Ffo=r(XRe," \u2014 "),xN=n(XRe,"A",{href:!0});var OTt=s(xN);Tfo=r(OTt,"SwinConfig"),OTt.forEach(t),Mfo=r(XRe," (Swin Transformer model)"),XRe.forEach(t),Efo=i(L),Th=n(L,"LI",{});var zRe=s(Th);gme=n(zRe,"STRONG",{});var VTt=s(gme);Cfo=r(VTt,"swinv2"),VTt.forEach(t),wfo=r(zRe," \u2014 "),$N=n(zRe,"A",{href:!0});var XTt=s($N);Afo=r(XTt,"Swinv2Config"),XTt.forEach(t),Lfo=r(zRe," (Swin Transformer V2 model)"),zRe.forEach(t),yfo=i(L),Mh=n(L,"LI",{});var QRe=s(Mh);hme=n(QRe,"STRONG",{});var zTt=s(hme);xfo=r(zTt,"t5"),zTt.forEach(t),$fo=r(QRe," \u2014 "),kN=n(QRe,"A",{href:!0});var QTt=s(kN);kfo=r(QTt,"T5Config"),QTt.forEach(t),Sfo=r(QRe," (T5 model)"),QRe.forEach(t),Rfo=i(L),Eh=n(L,"LI",{});var WRe=s(Eh);ume=n(WRe,"STRONG",{});var WTt=s(ume);Pfo=r(WTt,"tapas"),WTt.forEach(t),Bfo=r(WRe," \u2014 "),SN=n(WRe,"A",{href:!0});var UTt=s(SN);Ifo=r(UTt,"TapasConfig"),UTt.forEach(t),Nfo=r(WRe," (TAPAS model)"),WRe.forEach(t),qfo=i(L),Ch=n(L,"LI",{});var URe=s(Ch);pme=n(URe,"STRONG",{});var HTt=s(pme);jfo=r(HTt,"trajectory_transformer"),HTt.forEach(t),Dfo=r(URe," \u2014 "),RN=n(URe,"A",{href:!0});var JTt=s(RN);Gfo=r(JTt,"TrajectoryTransformerConfig"),JTt.forEach(t),Ofo=r(URe," (Trajectory Transformer model)"),URe.forEach(t),Vfo=i(L),wh=n(L,"LI",{});var HRe=s(wh);_me=n(HRe,"STRONG",{});var YTt=s(_me);Xfo=r(YTt,"transfo-xl"),YTt.forEach(t),zfo=r(HRe," \u2014 "),PN=n(HRe,"A",{href:!0});var KTt=s(PN);Qfo=r(KTt,"TransfoXLConfig"),KTt.forEach(t),Wfo=r(HRe," (Transformer-XL model)"),HRe.forEach(t),Ufo=i(L),Ah=n(L,"LI",{});var JRe=s(Ah);bme=n(JRe,"STRONG",{});var ZTt=s(bme);Hfo=r(ZTt,"trocr"),ZTt.forEach(t),Jfo=r(JRe," \u2014 "),BN=n(JRe,"A",{href:!0});var eMt=s(BN);Yfo=r(eMt,"TrOCRConfig"),eMt.forEach(t),Kfo=r(JRe," (TrOCR model)"),JRe.forEach(t),Zfo=i(L),Lh=n(L,"LI",{});var YRe=s(Lh);vme=n(YRe,"STRONG",{});var oMt=s(vme);ego=r(oMt,"unispeech"),oMt.forEach(t),ogo=r(YRe," \u2014 "),IN=n(YRe,"A",{href:!0});var rMt=s(IN);rgo=r(rMt,"UniSpeechConfig"),rMt.forEach(t),tgo=r(YRe," (UniSpeech model)"),YRe.forEach(t),ago=i(L),yh=n(L,"LI",{});var KRe=s(yh);Fme=n(KRe,"STRONG",{});var tMt=s(Fme);ngo=r(tMt,"unispeech-sat"),tMt.forEach(t),sgo=r(KRe," \u2014 "),NN=n(KRe,"A",{href:!0});var aMt=s(NN);lgo=r(aMt,"UniSpeechSatConfig"),aMt.forEach(t),igo=r(KRe," (UniSpeechSat model)"),KRe.forEach(t),dgo=i(L),xh=n(L,"LI",{});var ZRe=s(xh);Tme=n(ZRe,"STRONG",{});var nMt=s(Tme);cgo=r(nMt,"van"),nMt.forEach(t),mgo=r(ZRe," \u2014 "),qN=n(ZRe,"A",{href:!0});var sMt=s(qN);fgo=r(sMt,"VanConfig"),sMt.forEach(t),ggo=r(ZRe," (VAN model)"),ZRe.forEach(t),hgo=i(L),$h=n(L,"LI",{});var ePe=s($h);Mme=n(ePe,"STRONG",{});var lMt=s(Mme);ugo=r(lMt,"videomae"),lMt.forEach(t),pgo=r(ePe," \u2014 "),jN=n(ePe,"A",{href:!0});var iMt=s(jN);_go=r(iMt,"VideoMAEConfig"),iMt.forEach(t),bgo=r(ePe," (VideoMAE model)"),ePe.forEach(t),vgo=i(L),kh=n(L,"LI",{});var oPe=s(kh);Eme=n(oPe,"STRONG",{});var dMt=s(Eme);Fgo=r(dMt,"vilt"),dMt.forEach(t),Tgo=r(oPe," \u2014 "),DN=n(oPe,"A",{href:!0});var cMt=s(DN);Mgo=r(cMt,"ViltConfig"),cMt.forEach(t),Ego=r(oPe," (ViLT model)"),oPe.forEach(t),Cgo=i(L),Sh=n(L,"LI",{});var rPe=s(Sh);Cme=n(rPe,"STRONG",{});var mMt=s(Cme);wgo=r(mMt,"vision-encoder-decoder"),mMt.forEach(t),Ago=r(rPe," \u2014 "),GN=n(rPe,"A",{href:!0});var fMt=s(GN);Lgo=r(fMt,"VisionEncoderDecoderConfig"),fMt.forEach(t),ygo=r(rPe," (Vision Encoder decoder model)"),rPe.forEach(t),xgo=i(L),Rh=n(L,"LI",{});var tPe=s(Rh);wme=n(tPe,"STRONG",{});var gMt=s(wme);$go=r(gMt,"vision-text-dual-encoder"),gMt.forEach(t),kgo=r(tPe," \u2014 "),ON=n(tPe,"A",{href:!0});var hMt=s(ON);Sgo=r(hMt,"VisionTextDualEncoderConfig"),hMt.forEach(t),Rgo=r(tPe," (VisionTextDualEncoder model)"),tPe.forEach(t),Pgo=i(L),Ph=n(L,"LI",{});var aPe=s(Ph);Ame=n(aPe,"STRONG",{});var uMt=s(Ame);Bgo=r(uMt,"visual_bert"),uMt.forEach(t),Igo=r(aPe," \u2014 "),VN=n(aPe,"A",{href:!0});var pMt=s(VN);Ngo=r(pMt,"VisualBertConfig"),pMt.forEach(t),qgo=r(aPe," (VisualBERT model)"),aPe.forEach(t),jgo=i(L),Bh=n(L,"LI",{});var nPe=s(Bh);Lme=n(nPe,"STRONG",{});var _Mt=s(Lme);Dgo=r(_Mt,"vit"),_Mt.forEach(t),Ggo=r(nPe," \u2014 "),XN=n(nPe,"A",{href:!0});var bMt=s(XN);Ogo=r(bMt,"ViTConfig"),bMt.forEach(t),Vgo=r(nPe," (ViT model)"),nPe.forEach(t),Xgo=i(L),Ih=n(L,"LI",{});var sPe=s(Ih);yme=n(sPe,"STRONG",{});var vMt=s(yme);zgo=r(vMt,"vit_mae"),vMt.forEach(t),Qgo=r(sPe," \u2014 "),zN=n(sPe,"A",{href:!0});var FMt=s(zN);Wgo=r(FMt,"ViTMAEConfig"),FMt.forEach(t),Ugo=r(sPe," (ViTMAE model)"),sPe.forEach(t),Hgo=i(L),Nh=n(L,"LI",{});var lPe=s(Nh);xme=n(lPe,"STRONG",{});var TMt=s(xme);Jgo=r(TMt,"wav2vec2"),TMt.forEach(t),Ygo=r(lPe," \u2014 "),QN=n(lPe,"A",{href:!0});var MMt=s(QN);Kgo=r(MMt,"Wav2Vec2Config"),MMt.forEach(t),Zgo=r(lPe," (Wav2Vec2 model)"),lPe.forEach(t),eho=i(L),qh=n(L,"LI",{});var iPe=s(qh);$me=n(iPe,"STRONG",{});var EMt=s($me);oho=r(EMt,"wav2vec2-conformer"),EMt.forEach(t),rho=r(iPe," \u2014 "),WN=n(iPe,"A",{href:!0});var CMt=s(WN);tho=r(CMt,"Wav2Vec2ConformerConfig"),CMt.forEach(t),aho=r(iPe," (Wav2Vec2-Conformer model)"),iPe.forEach(t),nho=i(L),jh=n(L,"LI",{});var dPe=s(jh);kme=n(dPe,"STRONG",{});var wMt=s(kme);sho=r(wMt,"wavlm"),wMt.forEach(t),lho=r(dPe," \u2014 "),UN=n(dPe,"A",{href:!0});var AMt=s(UN);iho=r(AMt,"WavLMConfig"),AMt.forEach(t),dho=r(dPe," (WavLM model)"),dPe.forEach(t),cho=i(L),Dh=n(L,"LI",{});var cPe=s(Dh);Sme=n(cPe,"STRONG",{});var LMt=s(Sme);mho=r(LMt,"xclip"),LMt.forEach(t),fho=r(cPe," \u2014 "),HN=n(cPe,"A",{href:!0});var yMt=s(HN);gho=r(yMt,"XCLIPConfig"),yMt.forEach(t),hho=r(cPe," (X-CLIP model)"),cPe.forEach(t),uho=i(L),Gh=n(L,"LI",{});var mPe=s(Gh);Rme=n(mPe,"STRONG",{});var xMt=s(Rme);pho=r(xMt,"xglm"),xMt.forEach(t),_ho=r(mPe," \u2014 "),JN=n(mPe,"A",{href:!0});var $Mt=s(JN);bho=r($Mt,"XGLMConfig"),$Mt.forEach(t),vho=r(mPe," (XGLM model)"),mPe.forEach(t),Fho=i(L),Oh=n(L,"LI",{});var fPe=s(Oh);Pme=n(fPe,"STRONG",{});var kMt=s(Pme);Tho=r(kMt,"xlm"),kMt.forEach(t),Mho=r(fPe," \u2014 "),YN=n(fPe,"A",{href:!0});var SMt=s(YN);Eho=r(SMt,"XLMConfig"),SMt.forEach(t),Cho=r(fPe," (XLM model)"),fPe.forEach(t),who=i(L),Vh=n(L,"LI",{});var gPe=s(Vh);Bme=n(gPe,"STRONG",{});var RMt=s(Bme);Aho=r(RMt,"xlm-prophetnet"),RMt.forEach(t),Lho=r(gPe," \u2014 "),KN=n(gPe,"A",{href:!0});var PMt=s(KN);yho=r(PMt,"XLMProphetNetConfig"),PMt.forEach(t),xho=r(gPe," (XLM-ProphetNet model)"),gPe.forEach(t),$ho=i(L),Xh=n(L,"LI",{});var hPe=s(Xh);Ime=n(hPe,"STRONG",{});var BMt=s(Ime);kho=r(BMt,"xlm-roberta"),BMt.forEach(t),Sho=r(hPe," \u2014 "),ZN=n(hPe,"A",{href:!0});var IMt=s(ZN);Rho=r(IMt,"XLMRobertaConfig"),IMt.forEach(t),Pho=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),Bho=i(L),zh=n(L,"LI",{});var uPe=s(zh);Nme=n(uPe,"STRONG",{});var NMt=s(Nme);Iho=r(NMt,"xlm-roberta-xl"),NMt.forEach(t),Nho=r(uPe," \u2014 "),eq=n(uPe,"A",{href:!0});var qMt=s(eq);qho=r(qMt,"XLMRobertaXLConfig"),qMt.forEach(t),jho=r(uPe," (XLM-RoBERTa-XL model)"),uPe.forEach(t),Dho=i(L),Qh=n(L,"LI",{});var pPe=s(Qh);qme=n(pPe,"STRONG",{});var jMt=s(qme);Gho=r(jMt,"xlnet"),jMt.forEach(t),Oho=r(pPe," \u2014 "),oq=n(pPe,"A",{href:!0});var DMt=s(oq);Vho=r(DMt,"XLNetConfig"),DMt.forEach(t),Xho=r(pPe," (XLNet model)"),pPe.forEach(t),zho=i(L),Wh=n(L,"LI",{});var _Pe=s(Wh);jme=n(_Pe,"STRONG",{});var GMt=s(jme);Qho=r(GMt,"yolos"),GMt.forEach(t),Who=r(_Pe," \u2014 "),rq=n(_Pe,"A",{href:!0});var OMt=s(rq);Uho=r(OMt,"YolosConfig"),OMt.forEach(t),Hho=r(_Pe," (YOLOS model)"),_Pe.forEach(t),Jho=i(L),Uh=n(L,"LI",{});var bPe=s(Uh);Dme=n(bPe,"STRONG",{});var VMt=s(Dme);Yho=r(VMt,"yoso"),VMt.forEach(t),Kho=r(bPe," \u2014 "),tq=n(bPe,"A",{href:!0});var XMt=s(tq);Zho=r(XMt,"YosoConfig"),XMt.forEach(t),euo=r(bPe," (YOSO model)"),bPe.forEach(t),L.forEach(t),ouo=i(ut),T(Hh.$$.fragment,ut),ut.forEach(t),ruo=i(ht),Jh=n(ht,"DIV",{class:!0});var Ceo=s(Jh);T(j9.$$.fragment,Ceo),tuo=i(Ceo),Gme=n(Ceo,"P",{});var zMt=s(Gme);auo=r(zMt,"Register a new configuration for this class."),zMt.forEach(t),Ceo.forEach(t),ht.forEach(t),_Ke=i(m),fd=n(m,"H2",{class:!0});var weo=s(fd);Yh=n(weo,"A",{id:!0,class:!0,href:!0});var QMt=s(Yh);Ome=n(QMt,"SPAN",{});var WMt=s(Ome);T(D9.$$.fragment,WMt),WMt.forEach(t),QMt.forEach(t),nuo=i(weo),Vme=n(weo,"SPAN",{});var UMt=s(Vme);suo=r(UMt,"AutoTokenizer"),UMt.forEach(t),weo.forEach(t),bKe=i(m),ko=n(m,"DIV",{class:!0});var Tl=s(ko);T(G9.$$.fragment,Tl),luo=i(Tl),O9=n(Tl,"P",{});var Aeo=s(O9);iuo=r(Aeo,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aq=n(Aeo,"A",{href:!0});var HMt=s(aq);duo=r(HMt,"AutoTokenizer.from_pretrained()"),HMt.forEach(t),cuo=r(Aeo," class method."),Aeo.forEach(t),muo=i(Tl),V9=n(Tl,"P",{});var Leo=s(V9);fuo=r(Leo,"This class cannot be instantiated directly using "),Xme=n(Leo,"CODE",{});var JMt=s(Xme);guo=r(JMt,"__init__()"),JMt.forEach(t),huo=r(Leo," (throws an error)."),Leo.forEach(t),uuo=i(Tl),Br=n(Tl,"DIV",{class:!0});var Ml=s(Br);T(X9.$$.fragment,Ml),puo=i(Ml),zme=n(Ml,"P",{});var YMt=s(zme);_uo=r(YMt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),YMt.forEach(t),buo=i(Ml),Ua=n(Ml,"P",{});var wy=s(Ua);vuo=r(wy,"The tokenizer class to instantiate is selected based on the "),Qme=n(wy,"CODE",{});var KMt=s(Qme);Fuo=r(KMt,"model_type"),KMt.forEach(t),Tuo=r(wy,` property of the config object (either
passed as an argument or loaded from `),Wme=n(wy,"CODE",{});var ZMt=s(Wme);Muo=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),Euo=r(wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(wy,"CODE",{});var eEt=s(Ume);Cuo=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),wuo=r(wy,":"),wy.forEach(t),Auo=i(Ml),k=n(Ml,"UL",{});var S=s(k);as=n(S,"LI",{});var uP=s(as);Hme=n(uP,"STRONG",{});var oEt=s(Hme);Luo=r(oEt,"albert"),oEt.forEach(t),yuo=r(uP," \u2014 "),nq=n(uP,"A",{href:!0});var rEt=s(nq);xuo=r(rEt,"AlbertTokenizer"),rEt.forEach(t),$uo=r(uP," or "),sq=n(uP,"A",{href:!0});var tEt=s(sq);kuo=r(tEt,"AlbertTokenizerFast"),tEt.forEach(t),Suo=r(uP," (ALBERT model)"),uP.forEach(t),Ruo=i(S),ns=n(S,"LI",{});var pP=s(ns);Jme=n(pP,"STRONG",{});var aEt=s(Jme);Puo=r(aEt,"bart"),aEt.forEach(t),Buo=r(pP," \u2014 "),lq=n(pP,"A",{href:!0});var nEt=s(lq);Iuo=r(nEt,"BartTokenizer"),nEt.forEach(t),Nuo=r(pP," or "),iq=n(pP,"A",{href:!0});var sEt=s(iq);quo=r(sEt,"BartTokenizerFast"),sEt.forEach(t),juo=r(pP," (BART model)"),pP.forEach(t),Duo=i(S),ss=n(S,"LI",{});var _P=s(ss);Yme=n(_P,"STRONG",{});var lEt=s(Yme);Guo=r(lEt,"barthez"),lEt.forEach(t),Ouo=r(_P," \u2014 "),dq=n(_P,"A",{href:!0});var iEt=s(dq);Vuo=r(iEt,"BarthezTokenizer"),iEt.forEach(t),Xuo=r(_P," or "),cq=n(_P,"A",{href:!0});var dEt=s(cq);zuo=r(dEt,"BarthezTokenizerFast"),dEt.forEach(t),Quo=r(_P," (BARThez model)"),_P.forEach(t),Wuo=i(S),Kh=n(S,"LI",{});var vPe=s(Kh);Kme=n(vPe,"STRONG",{});var cEt=s(Kme);Uuo=r(cEt,"bartpho"),cEt.forEach(t),Huo=r(vPe," \u2014 "),mq=n(vPe,"A",{href:!0});var mEt=s(mq);Juo=r(mEt,"BartphoTokenizer"),mEt.forEach(t),Yuo=r(vPe," (BARTpho model)"),vPe.forEach(t),Kuo=i(S),ls=n(S,"LI",{});var bP=s(ls);Zme=n(bP,"STRONG",{});var fEt=s(Zme);Zuo=r(fEt,"bert"),fEt.forEach(t),epo=r(bP," \u2014 "),fq=n(bP,"A",{href:!0});var gEt=s(fq);opo=r(gEt,"BertTokenizer"),gEt.forEach(t),rpo=r(bP," or "),gq=n(bP,"A",{href:!0});var hEt=s(gq);tpo=r(hEt,"BertTokenizerFast"),hEt.forEach(t),apo=r(bP," (BERT model)"),bP.forEach(t),npo=i(S),Zh=n(S,"LI",{});var FPe=s(Zh);efe=n(FPe,"STRONG",{});var uEt=s(efe);spo=r(uEt,"bert-generation"),uEt.forEach(t),lpo=r(FPe," \u2014 "),hq=n(FPe,"A",{href:!0});var pEt=s(hq);ipo=r(pEt,"BertGenerationTokenizer"),pEt.forEach(t),dpo=r(FPe," (Bert Generation model)"),FPe.forEach(t),cpo=i(S),eu=n(S,"LI",{});var TPe=s(eu);ofe=n(TPe,"STRONG",{});var _Et=s(ofe);mpo=r(_Et,"bert-japanese"),_Et.forEach(t),fpo=r(TPe," \u2014 "),uq=n(TPe,"A",{href:!0});var bEt=s(uq);gpo=r(bEt,"BertJapaneseTokenizer"),bEt.forEach(t),hpo=r(TPe," (BertJapanese model)"),TPe.forEach(t),upo=i(S),ou=n(S,"LI",{});var MPe=s(ou);rfe=n(MPe,"STRONG",{});var vEt=s(rfe);ppo=r(vEt,"bertweet"),vEt.forEach(t),_po=r(MPe," \u2014 "),pq=n(MPe,"A",{href:!0});var FEt=s(pq);bpo=r(FEt,"BertweetTokenizer"),FEt.forEach(t),vpo=r(MPe," (BERTweet model)"),MPe.forEach(t),Fpo=i(S),is=n(S,"LI",{});var vP=s(is);tfe=n(vP,"STRONG",{});var TEt=s(tfe);Tpo=r(TEt,"big_bird"),TEt.forEach(t),Mpo=r(vP," \u2014 "),_q=n(vP,"A",{href:!0});var MEt=s(_q);Epo=r(MEt,"BigBirdTokenizer"),MEt.forEach(t),Cpo=r(vP," or "),bq=n(vP,"A",{href:!0});var EEt=s(bq);wpo=r(EEt,"BigBirdTokenizerFast"),EEt.forEach(t),Apo=r(vP," (BigBird model)"),vP.forEach(t),Lpo=i(S),ds=n(S,"LI",{});var FP=s(ds);afe=n(FP,"STRONG",{});var CEt=s(afe);ypo=r(CEt,"bigbird_pegasus"),CEt.forEach(t),xpo=r(FP," \u2014 "),vq=n(FP,"A",{href:!0});var wEt=s(vq);$po=r(wEt,"PegasusTokenizer"),wEt.forEach(t),kpo=r(FP," or "),Fq=n(FP,"A",{href:!0});var AEt=s(Fq);Spo=r(AEt,"PegasusTokenizerFast"),AEt.forEach(t),Rpo=r(FP," (BigBird-Pegasus model)"),FP.forEach(t),Ppo=i(S),cs=n(S,"LI",{});var TP=s(cs);nfe=n(TP,"STRONG",{});var LEt=s(nfe);Bpo=r(LEt,"blenderbot"),LEt.forEach(t),Ipo=r(TP," \u2014 "),Tq=n(TP,"A",{href:!0});var yEt=s(Tq);Npo=r(yEt,"BlenderbotTokenizer"),yEt.forEach(t),qpo=r(TP," or "),Mq=n(TP,"A",{href:!0});var xEt=s(Mq);jpo=r(xEt,"BlenderbotTokenizerFast"),xEt.forEach(t),Dpo=r(TP," (Blenderbot model)"),TP.forEach(t),Gpo=i(S),ru=n(S,"LI",{});var EPe=s(ru);sfe=n(EPe,"STRONG",{});var $Et=s(sfe);Opo=r($Et,"blenderbot-small"),$Et.forEach(t),Vpo=r(EPe," \u2014 "),Eq=n(EPe,"A",{href:!0});var kEt=s(Eq);Xpo=r(kEt,"BlenderbotSmallTokenizer"),kEt.forEach(t),zpo=r(EPe," (BlenderbotSmall model)"),EPe.forEach(t),Qpo=i(S),tu=n(S,"LI",{});var CPe=s(tu);lfe=n(CPe,"STRONG",{});var SEt=s(lfe);Wpo=r(SEt,"bloom"),SEt.forEach(t),Upo=r(CPe," \u2014 "),Cq=n(CPe,"A",{href:!0});var REt=s(Cq);Hpo=r(REt,"BloomTokenizerFast"),REt.forEach(t),Jpo=r(CPe," (BLOOM model)"),CPe.forEach(t),Ypo=i(S),au=n(S,"LI",{});var wPe=s(au);ife=n(wPe,"STRONG",{});var PEt=s(ife);Kpo=r(PEt,"byt5"),PEt.forEach(t),Zpo=r(wPe," \u2014 "),wq=n(wPe,"A",{href:!0});var BEt=s(wq);e_o=r(BEt,"ByT5Tokenizer"),BEt.forEach(t),o_o=r(wPe," (ByT5 model)"),wPe.forEach(t),r_o=i(S),ms=n(S,"LI",{});var MP=s(ms);dfe=n(MP,"STRONG",{});var IEt=s(dfe);t_o=r(IEt,"camembert"),IEt.forEach(t),a_o=r(MP," \u2014 "),Aq=n(MP,"A",{href:!0});var NEt=s(Aq);n_o=r(NEt,"CamembertTokenizer"),NEt.forEach(t),s_o=r(MP," or "),Lq=n(MP,"A",{href:!0});var qEt=s(Lq);l_o=r(qEt,"CamembertTokenizerFast"),qEt.forEach(t),i_o=r(MP," (CamemBERT model)"),MP.forEach(t),d_o=i(S),nu=n(S,"LI",{});var APe=s(nu);cfe=n(APe,"STRONG",{});var jEt=s(cfe);c_o=r(jEt,"canine"),jEt.forEach(t),m_o=r(APe," \u2014 "),yq=n(APe,"A",{href:!0});var DEt=s(yq);f_o=r(DEt,"CanineTokenizer"),DEt.forEach(t),g_o=r(APe," (CANINE model)"),APe.forEach(t),h_o=i(S),fs=n(S,"LI",{});var EP=s(fs);mfe=n(EP,"STRONG",{});var GEt=s(mfe);u_o=r(GEt,"clip"),GEt.forEach(t),p_o=r(EP," \u2014 "),xq=n(EP,"A",{href:!0});var OEt=s(xq);__o=r(OEt,"CLIPTokenizer"),OEt.forEach(t),b_o=r(EP," or "),$q=n(EP,"A",{href:!0});var VEt=s($q);v_o=r(VEt,"CLIPTokenizerFast"),VEt.forEach(t),F_o=r(EP," (CLIP model)"),EP.forEach(t),T_o=i(S),gs=n(S,"LI",{});var CP=s(gs);ffe=n(CP,"STRONG",{});var XEt=s(ffe);M_o=r(XEt,"codegen"),XEt.forEach(t),E_o=r(CP," \u2014 "),kq=n(CP,"A",{href:!0});var zEt=s(kq);C_o=r(zEt,"CodeGenTokenizer"),zEt.forEach(t),w_o=r(CP," or "),Sq=n(CP,"A",{href:!0});var QEt=s(Sq);A_o=r(QEt,"CodeGenTokenizerFast"),QEt.forEach(t),L_o=r(CP," (CodeGen model)"),CP.forEach(t),y_o=i(S),hs=n(S,"LI",{});var wP=s(hs);gfe=n(wP,"STRONG",{});var WEt=s(gfe);x_o=r(WEt,"convbert"),WEt.forEach(t),$_o=r(wP," \u2014 "),Rq=n(wP,"A",{href:!0});var UEt=s(Rq);k_o=r(UEt,"ConvBertTokenizer"),UEt.forEach(t),S_o=r(wP," or "),Pq=n(wP,"A",{href:!0});var HEt=s(Pq);R_o=r(HEt,"ConvBertTokenizerFast"),HEt.forEach(t),P_o=r(wP," (ConvBERT model)"),wP.forEach(t),B_o=i(S),us=n(S,"LI",{});var AP=s(us);hfe=n(AP,"STRONG",{});var JEt=s(hfe);I_o=r(JEt,"cpm"),JEt.forEach(t),N_o=r(AP," \u2014 "),Bq=n(AP,"A",{href:!0});var YEt=s(Bq);q_o=r(YEt,"CpmTokenizer"),YEt.forEach(t),j_o=r(AP," or "),Iq=n(AP,"A",{href:!0});var KEt=s(Iq);D_o=r(KEt,"CpmTokenizerFast"),KEt.forEach(t),G_o=r(AP," (CPM model)"),AP.forEach(t),O_o=i(S),su=n(S,"LI",{});var LPe=s(su);ufe=n(LPe,"STRONG",{});var ZEt=s(ufe);V_o=r(ZEt,"ctrl"),ZEt.forEach(t),X_o=r(LPe," \u2014 "),Nq=n(LPe,"A",{href:!0});var e4t=s(Nq);z_o=r(e4t,"CTRLTokenizer"),e4t.forEach(t),Q_o=r(LPe," (CTRL model)"),LPe.forEach(t),W_o=i(S),ps=n(S,"LI",{});var LP=s(ps);pfe=n(LP,"STRONG",{});var o4t=s(pfe);U_o=r(o4t,"data2vec-text"),o4t.forEach(t),H_o=r(LP," \u2014 "),qq=n(LP,"A",{href:!0});var r4t=s(qq);J_o=r(r4t,"RobertaTokenizer"),r4t.forEach(t),Y_o=r(LP," or "),jq=n(LP,"A",{href:!0});var t4t=s(jq);K_o=r(t4t,"RobertaTokenizerFast"),t4t.forEach(t),Z_o=r(LP," (Data2VecText model)"),LP.forEach(t),ebo=i(S),_s=n(S,"LI",{});var yP=s(_s);_fe=n(yP,"STRONG",{});var a4t=s(_fe);obo=r(a4t,"deberta"),a4t.forEach(t),rbo=r(yP," \u2014 "),Dq=n(yP,"A",{href:!0});var n4t=s(Dq);tbo=r(n4t,"DebertaTokenizer"),n4t.forEach(t),abo=r(yP," or "),Gq=n(yP,"A",{href:!0});var s4t=s(Gq);nbo=r(s4t,"DebertaTokenizerFast"),s4t.forEach(t),sbo=r(yP," (DeBERTa model)"),yP.forEach(t),lbo=i(S),bs=n(S,"LI",{});var xP=s(bs);bfe=n(xP,"STRONG",{});var l4t=s(bfe);ibo=r(l4t,"deberta-v2"),l4t.forEach(t),dbo=r(xP," \u2014 "),Oq=n(xP,"A",{href:!0});var i4t=s(Oq);cbo=r(i4t,"DebertaV2Tokenizer"),i4t.forEach(t),mbo=r(xP," or "),Vq=n(xP,"A",{href:!0});var d4t=s(Vq);fbo=r(d4t,"DebertaV2TokenizerFast"),d4t.forEach(t),gbo=r(xP," (DeBERTa-v2 model)"),xP.forEach(t),hbo=i(S),vs=n(S,"LI",{});var $P=s(vs);vfe=n($P,"STRONG",{});var c4t=s(vfe);ubo=r(c4t,"distilbert"),c4t.forEach(t),pbo=r($P," \u2014 "),Xq=n($P,"A",{href:!0});var m4t=s(Xq);_bo=r(m4t,"DistilBertTokenizer"),m4t.forEach(t),bbo=r($P," or "),zq=n($P,"A",{href:!0});var f4t=s(zq);vbo=r(f4t,"DistilBertTokenizerFast"),f4t.forEach(t),Fbo=r($P," (DistilBERT model)"),$P.forEach(t),Tbo=i(S),Fs=n(S,"LI",{});var kP=s(Fs);Ffe=n(kP,"STRONG",{});var g4t=s(Ffe);Mbo=r(g4t,"dpr"),g4t.forEach(t),Ebo=r(kP," \u2014 "),Qq=n(kP,"A",{href:!0});var h4t=s(Qq);Cbo=r(h4t,"DPRQuestionEncoderTokenizer"),h4t.forEach(t),wbo=r(kP," or "),Wq=n(kP,"A",{href:!0});var u4t=s(Wq);Abo=r(u4t,"DPRQuestionEncoderTokenizerFast"),u4t.forEach(t),Lbo=r(kP," (DPR model)"),kP.forEach(t),ybo=i(S),Ts=n(S,"LI",{});var SP=s(Ts);Tfe=n(SP,"STRONG",{});var p4t=s(Tfe);xbo=r(p4t,"electra"),p4t.forEach(t),$bo=r(SP," \u2014 "),Uq=n(SP,"A",{href:!0});var _4t=s(Uq);kbo=r(_4t,"ElectraTokenizer"),_4t.forEach(t),Sbo=r(SP," or "),Hq=n(SP,"A",{href:!0});var b4t=s(Hq);Rbo=r(b4t,"ElectraTokenizerFast"),b4t.forEach(t),Pbo=r(SP," (ELECTRA model)"),SP.forEach(t),Bbo=i(S),Ms=n(S,"LI",{});var RP=s(Ms);Mfe=n(RP,"STRONG",{});var v4t=s(Mfe);Ibo=r(v4t,"ernie"),v4t.forEach(t),Nbo=r(RP," \u2014 "),Jq=n(RP,"A",{href:!0});var F4t=s(Jq);qbo=r(F4t,"BertTokenizer"),F4t.forEach(t),jbo=r(RP," or "),Yq=n(RP,"A",{href:!0});var T4t=s(Yq);Dbo=r(T4t,"BertTokenizerFast"),T4t.forEach(t),Gbo=r(RP," (ERNIE model)"),RP.forEach(t),Obo=i(S),lu=n(S,"LI",{});var yPe=s(lu);Efe=n(yPe,"STRONG",{});var M4t=s(Efe);Vbo=r(M4t,"flaubert"),M4t.forEach(t),Xbo=r(yPe," \u2014 "),Kq=n(yPe,"A",{href:!0});var E4t=s(Kq);zbo=r(E4t,"FlaubertTokenizer"),E4t.forEach(t),Qbo=r(yPe," (FlauBERT model)"),yPe.forEach(t),Wbo=i(S),Es=n(S,"LI",{});var PP=s(Es);Cfe=n(PP,"STRONG",{});var C4t=s(Cfe);Ubo=r(C4t,"fnet"),C4t.forEach(t),Hbo=r(PP," \u2014 "),Zq=n(PP,"A",{href:!0});var w4t=s(Zq);Jbo=r(w4t,"FNetTokenizer"),w4t.forEach(t),Ybo=r(PP," or "),ej=n(PP,"A",{href:!0});var A4t=s(ej);Kbo=r(A4t,"FNetTokenizerFast"),A4t.forEach(t),Zbo=r(PP," (FNet model)"),PP.forEach(t),e2o=i(S),iu=n(S,"LI",{});var xPe=s(iu);wfe=n(xPe,"STRONG",{});var L4t=s(wfe);o2o=r(L4t,"fsmt"),L4t.forEach(t),r2o=r(xPe," \u2014 "),oj=n(xPe,"A",{href:!0});var y4t=s(oj);t2o=r(y4t,"FSMTTokenizer"),y4t.forEach(t),a2o=r(xPe," (FairSeq Machine-Translation model)"),xPe.forEach(t),n2o=i(S),Cs=n(S,"LI",{});var BP=s(Cs);Afe=n(BP,"STRONG",{});var x4t=s(Afe);s2o=r(x4t,"funnel"),x4t.forEach(t),l2o=r(BP," \u2014 "),rj=n(BP,"A",{href:!0});var $4t=s(rj);i2o=r($4t,"FunnelTokenizer"),$4t.forEach(t),d2o=r(BP," or "),tj=n(BP,"A",{href:!0});var k4t=s(tj);c2o=r(k4t,"FunnelTokenizerFast"),k4t.forEach(t),m2o=r(BP," (Funnel Transformer model)"),BP.forEach(t),f2o=i(S),ws=n(S,"LI",{});var IP=s(ws);Lfe=n(IP,"STRONG",{});var S4t=s(Lfe);g2o=r(S4t,"gpt2"),S4t.forEach(t),h2o=r(IP," \u2014 "),aj=n(IP,"A",{href:!0});var R4t=s(aj);u2o=r(R4t,"GPT2Tokenizer"),R4t.forEach(t),p2o=r(IP," or "),nj=n(IP,"A",{href:!0});var P4t=s(nj);_2o=r(P4t,"GPT2TokenizerFast"),P4t.forEach(t),b2o=r(IP," (OpenAI GPT-2 model)"),IP.forEach(t),v2o=i(S),As=n(S,"LI",{});var NP=s(As);yfe=n(NP,"STRONG",{});var B4t=s(yfe);F2o=r(B4t,"gpt_neo"),B4t.forEach(t),T2o=r(NP," \u2014 "),sj=n(NP,"A",{href:!0});var I4t=s(sj);M2o=r(I4t,"GPT2Tokenizer"),I4t.forEach(t),E2o=r(NP," or "),lj=n(NP,"A",{href:!0});var N4t=s(lj);C2o=r(N4t,"GPT2TokenizerFast"),N4t.forEach(t),w2o=r(NP," (GPT Neo model)"),NP.forEach(t),A2o=i(S),du=n(S,"LI",{});var $Pe=s(du);xfe=n($Pe,"STRONG",{});var q4t=s(xfe);L2o=r(q4t,"gpt_neox"),q4t.forEach(t),y2o=r($Pe," \u2014 "),ij=n($Pe,"A",{href:!0});var j4t=s(ij);x2o=r(j4t,"GPTNeoXTokenizerFast"),j4t.forEach(t),$2o=r($Pe," (GPT NeoX model)"),$Pe.forEach(t),k2o=i(S),cu=n(S,"LI",{});var kPe=s(cu);$fe=n(kPe,"STRONG",{});var D4t=s($fe);S2o=r(D4t,"gpt_neox_japanese"),D4t.forEach(t),R2o=r(kPe," \u2014 "),dj=n(kPe,"A",{href:!0});var G4t=s(dj);P2o=r(G4t,"GPTNeoXJapaneseTokenizer"),G4t.forEach(t),B2o=r(kPe," (GPT NeoX Japanese model)"),kPe.forEach(t),I2o=i(S),Ls=n(S,"LI",{});var qP=s(Ls);kfe=n(qP,"STRONG",{});var O4t=s(kfe);N2o=r(O4t,"gptj"),O4t.forEach(t),q2o=r(qP," \u2014 "),cj=n(qP,"A",{href:!0});var V4t=s(cj);j2o=r(V4t,"GPT2Tokenizer"),V4t.forEach(t),D2o=r(qP," or "),mj=n(qP,"A",{href:!0});var X4t=s(mj);G2o=r(X4t,"GPT2TokenizerFast"),X4t.forEach(t),O2o=r(qP," (GPT-J model)"),qP.forEach(t),V2o=i(S),ys=n(S,"LI",{});var jP=s(ys);Sfe=n(jP,"STRONG",{});var z4t=s(Sfe);X2o=r(z4t,"groupvit"),z4t.forEach(t),z2o=r(jP," \u2014 "),fj=n(jP,"A",{href:!0});var Q4t=s(fj);Q2o=r(Q4t,"CLIPTokenizer"),Q4t.forEach(t),W2o=r(jP," or "),gj=n(jP,"A",{href:!0});var W4t=s(gj);U2o=r(W4t,"CLIPTokenizerFast"),W4t.forEach(t),H2o=r(jP," (GroupViT model)"),jP.forEach(t),J2o=i(S),xs=n(S,"LI",{});var DP=s(xs);Rfe=n(DP,"STRONG",{});var U4t=s(Rfe);Y2o=r(U4t,"herbert"),U4t.forEach(t),K2o=r(DP," \u2014 "),hj=n(DP,"A",{href:!0});var H4t=s(hj);Z2o=r(H4t,"HerbertTokenizer"),H4t.forEach(t),e1o=r(DP," or "),uj=n(DP,"A",{href:!0});var J4t=s(uj);o1o=r(J4t,"HerbertTokenizerFast"),J4t.forEach(t),r1o=r(DP," (HerBERT model)"),DP.forEach(t),t1o=i(S),mu=n(S,"LI",{});var SPe=s(mu);Pfe=n(SPe,"STRONG",{});var Y4t=s(Pfe);a1o=r(Y4t,"hubert"),Y4t.forEach(t),n1o=r(SPe," \u2014 "),pj=n(SPe,"A",{href:!0});var K4t=s(pj);s1o=r(K4t,"Wav2Vec2CTCTokenizer"),K4t.forEach(t),l1o=r(SPe," (Hubert model)"),SPe.forEach(t),i1o=i(S),$s=n(S,"LI",{});var GP=s($s);Bfe=n(GP,"STRONG",{});var Z4t=s(Bfe);d1o=r(Z4t,"ibert"),Z4t.forEach(t),c1o=r(GP," \u2014 "),_j=n(GP,"A",{href:!0});var eCt=s(_j);m1o=r(eCt,"RobertaTokenizer"),eCt.forEach(t),f1o=r(GP," or "),bj=n(GP,"A",{href:!0});var oCt=s(bj);g1o=r(oCt,"RobertaTokenizerFast"),oCt.forEach(t),h1o=r(GP," (I-BERT model)"),GP.forEach(t),u1o=i(S),ks=n(S,"LI",{});var OP=s(ks);Ife=n(OP,"STRONG",{});var rCt=s(Ife);p1o=r(rCt,"layoutlm"),rCt.forEach(t),_1o=r(OP," \u2014 "),vj=n(OP,"A",{href:!0});var tCt=s(vj);b1o=r(tCt,"LayoutLMTokenizer"),tCt.forEach(t),v1o=r(OP," or "),Fj=n(OP,"A",{href:!0});var aCt=s(Fj);F1o=r(aCt,"LayoutLMTokenizerFast"),aCt.forEach(t),T1o=r(OP," (LayoutLM model)"),OP.forEach(t),M1o=i(S),Ss=n(S,"LI",{});var VP=s(Ss);Nfe=n(VP,"STRONG",{});var nCt=s(Nfe);E1o=r(nCt,"layoutlmv2"),nCt.forEach(t),C1o=r(VP," \u2014 "),Tj=n(VP,"A",{href:!0});var sCt=s(Tj);w1o=r(sCt,"LayoutLMv2Tokenizer"),sCt.forEach(t),A1o=r(VP," or "),Mj=n(VP,"A",{href:!0});var lCt=s(Mj);L1o=r(lCt,"LayoutLMv2TokenizerFast"),lCt.forEach(t),y1o=r(VP," (LayoutLMv2 model)"),VP.forEach(t),x1o=i(S),Rs=n(S,"LI",{});var XP=s(Rs);qfe=n(XP,"STRONG",{});var iCt=s(qfe);$1o=r(iCt,"layoutlmv3"),iCt.forEach(t),k1o=r(XP," \u2014 "),Ej=n(XP,"A",{href:!0});var dCt=s(Ej);S1o=r(dCt,"LayoutLMv3Tokenizer"),dCt.forEach(t),R1o=r(XP," or "),Cj=n(XP,"A",{href:!0});var cCt=s(Cj);P1o=r(cCt,"LayoutLMv3TokenizerFast"),cCt.forEach(t),B1o=r(XP," (LayoutLMv3 model)"),XP.forEach(t),I1o=i(S),Ps=n(S,"LI",{});var zP=s(Ps);jfe=n(zP,"STRONG",{});var mCt=s(jfe);N1o=r(mCt,"layoutxlm"),mCt.forEach(t),q1o=r(zP," \u2014 "),wj=n(zP,"A",{href:!0});var fCt=s(wj);j1o=r(fCt,"LayoutXLMTokenizer"),fCt.forEach(t),D1o=r(zP," or "),Aj=n(zP,"A",{href:!0});var gCt=s(Aj);G1o=r(gCt,"LayoutXLMTokenizerFast"),gCt.forEach(t),O1o=r(zP," (LayoutXLM model)"),zP.forEach(t),V1o=i(S),Bs=n(S,"LI",{});var QP=s(Bs);Dfe=n(QP,"STRONG",{});var hCt=s(Dfe);X1o=r(hCt,"led"),hCt.forEach(t),z1o=r(QP," \u2014 "),Lj=n(QP,"A",{href:!0});var uCt=s(Lj);Q1o=r(uCt,"LEDTokenizer"),uCt.forEach(t),W1o=r(QP," or "),yj=n(QP,"A",{href:!0});var pCt=s(yj);U1o=r(pCt,"LEDTokenizerFast"),pCt.forEach(t),H1o=r(QP," (LED model)"),QP.forEach(t),J1o=i(S),Is=n(S,"LI",{});var WP=s(Is);Gfe=n(WP,"STRONG",{});var _Ct=s(Gfe);Y1o=r(_Ct,"longformer"),_Ct.forEach(t),K1o=r(WP," \u2014 "),xj=n(WP,"A",{href:!0});var bCt=s(xj);Z1o=r(bCt,"LongformerTokenizer"),bCt.forEach(t),evo=r(WP," or "),$j=n(WP,"A",{href:!0});var vCt=s($j);ovo=r(vCt,"LongformerTokenizerFast"),vCt.forEach(t),rvo=r(WP," (Longformer model)"),WP.forEach(t),tvo=i(S),Ns=n(S,"LI",{});var UP=s(Ns);Ofe=n(UP,"STRONG",{});var FCt=s(Ofe);avo=r(FCt,"longt5"),FCt.forEach(t),nvo=r(UP," \u2014 "),kj=n(UP,"A",{href:!0});var TCt=s(kj);svo=r(TCt,"T5Tokenizer"),TCt.forEach(t),lvo=r(UP," or "),Sj=n(UP,"A",{href:!0});var MCt=s(Sj);ivo=r(MCt,"T5TokenizerFast"),MCt.forEach(t),dvo=r(UP," (LongT5 model)"),UP.forEach(t),cvo=i(S),fu=n(S,"LI",{});var RPe=s(fu);Vfe=n(RPe,"STRONG",{});var ECt=s(Vfe);mvo=r(ECt,"luke"),ECt.forEach(t),fvo=r(RPe," \u2014 "),Rj=n(RPe,"A",{href:!0});var CCt=s(Rj);gvo=r(CCt,"LukeTokenizer"),CCt.forEach(t),hvo=r(RPe," (LUKE model)"),RPe.forEach(t),uvo=i(S),qs=n(S,"LI",{});var HP=s(qs);Xfe=n(HP,"STRONG",{});var wCt=s(Xfe);pvo=r(wCt,"lxmert"),wCt.forEach(t),_vo=r(HP," \u2014 "),Pj=n(HP,"A",{href:!0});var ACt=s(Pj);bvo=r(ACt,"LxmertTokenizer"),ACt.forEach(t),vvo=r(HP," or "),Bj=n(HP,"A",{href:!0});var LCt=s(Bj);Fvo=r(LCt,"LxmertTokenizerFast"),LCt.forEach(t),Tvo=r(HP," (LXMERT model)"),HP.forEach(t),Mvo=i(S),gu=n(S,"LI",{});var PPe=s(gu);zfe=n(PPe,"STRONG",{});var yCt=s(zfe);Evo=r(yCt,"m2m_100"),yCt.forEach(t),Cvo=r(PPe," \u2014 "),Ij=n(PPe,"A",{href:!0});var xCt=s(Ij);wvo=r(xCt,"M2M100Tokenizer"),xCt.forEach(t),Avo=r(PPe," (M2M100 model)"),PPe.forEach(t),Lvo=i(S),hu=n(S,"LI",{});var BPe=s(hu);Qfe=n(BPe,"STRONG",{});var $Ct=s(Qfe);yvo=r($Ct,"marian"),$Ct.forEach(t),xvo=r(BPe," \u2014 "),Nj=n(BPe,"A",{href:!0});var kCt=s(Nj);$vo=r(kCt,"MarianTokenizer"),kCt.forEach(t),kvo=r(BPe," (Marian model)"),BPe.forEach(t),Svo=i(S),js=n(S,"LI",{});var JP=s(js);Wfe=n(JP,"STRONG",{});var SCt=s(Wfe);Rvo=r(SCt,"mbart"),SCt.forEach(t),Pvo=r(JP," \u2014 "),qj=n(JP,"A",{href:!0});var RCt=s(qj);Bvo=r(RCt,"MBartTokenizer"),RCt.forEach(t),Ivo=r(JP," or "),jj=n(JP,"A",{href:!0});var PCt=s(jj);Nvo=r(PCt,"MBartTokenizerFast"),PCt.forEach(t),qvo=r(JP," (mBART model)"),JP.forEach(t),jvo=i(S),Ds=n(S,"LI",{});var YP=s(Ds);Ufe=n(YP,"STRONG",{});var BCt=s(Ufe);Dvo=r(BCt,"mbart50"),BCt.forEach(t),Gvo=r(YP," \u2014 "),Dj=n(YP,"A",{href:!0});var ICt=s(Dj);Ovo=r(ICt,"MBart50Tokenizer"),ICt.forEach(t),Vvo=r(YP," or "),Gj=n(YP,"A",{href:!0});var NCt=s(Gj);Xvo=r(NCt,"MBart50TokenizerFast"),NCt.forEach(t),zvo=r(YP," (mBART-50 model)"),YP.forEach(t),Qvo=i(S),Gs=n(S,"LI",{});var KP=s(Gs);Hfe=n(KP,"STRONG",{});var qCt=s(Hfe);Wvo=r(qCt,"megatron-bert"),qCt.forEach(t),Uvo=r(KP," \u2014 "),Oj=n(KP,"A",{href:!0});var jCt=s(Oj);Hvo=r(jCt,"BertTokenizer"),jCt.forEach(t),Jvo=r(KP," or "),Vj=n(KP,"A",{href:!0});var DCt=s(Vj);Yvo=r(DCt,"BertTokenizerFast"),DCt.forEach(t),Kvo=r(KP," (Megatron-BERT model)"),KP.forEach(t),Zvo=i(S),uu=n(S,"LI",{});var IPe=s(uu);Jfe=n(IPe,"STRONG",{});var GCt=s(Jfe);eFo=r(GCt,"mluke"),GCt.forEach(t),oFo=r(IPe," \u2014 "),Xj=n(IPe,"A",{href:!0});var OCt=s(Xj);rFo=r(OCt,"MLukeTokenizer"),OCt.forEach(t),tFo=r(IPe," (mLUKE model)"),IPe.forEach(t),aFo=i(S),Os=n(S,"LI",{});var ZP=s(Os);Yfe=n(ZP,"STRONG",{});var VCt=s(Yfe);nFo=r(VCt,"mobilebert"),VCt.forEach(t),sFo=r(ZP," \u2014 "),zj=n(ZP,"A",{href:!0});var XCt=s(zj);lFo=r(XCt,"MobileBertTokenizer"),XCt.forEach(t),iFo=r(ZP," or "),Qj=n(ZP,"A",{href:!0});var zCt=s(Qj);dFo=r(zCt,"MobileBertTokenizerFast"),zCt.forEach(t),cFo=r(ZP," (MobileBERT model)"),ZP.forEach(t),mFo=i(S),Vs=n(S,"LI",{});var eB=s(Vs);Kfe=n(eB,"STRONG",{});var QCt=s(Kfe);fFo=r(QCt,"mpnet"),QCt.forEach(t),gFo=r(eB," \u2014 "),Wj=n(eB,"A",{href:!0});var WCt=s(Wj);hFo=r(WCt,"MPNetTokenizer"),WCt.forEach(t),uFo=r(eB," or "),Uj=n(eB,"A",{href:!0});var UCt=s(Uj);pFo=r(UCt,"MPNetTokenizerFast"),UCt.forEach(t),_Fo=r(eB," (MPNet model)"),eB.forEach(t),bFo=i(S),Xs=n(S,"LI",{});var oB=s(Xs);Zfe=n(oB,"STRONG",{});var HCt=s(Zfe);vFo=r(HCt,"mt5"),HCt.forEach(t),FFo=r(oB," \u2014 "),Hj=n(oB,"A",{href:!0});var JCt=s(Hj);TFo=r(JCt,"MT5Tokenizer"),JCt.forEach(t),MFo=r(oB," or "),Jj=n(oB,"A",{href:!0});var YCt=s(Jj);EFo=r(YCt,"MT5TokenizerFast"),YCt.forEach(t),CFo=r(oB," (MT5 model)"),oB.forEach(t),wFo=i(S),zs=n(S,"LI",{});var rB=s(zs);ege=n(rB,"STRONG",{});var KCt=s(ege);AFo=r(KCt,"mvp"),KCt.forEach(t),LFo=r(rB," \u2014 "),Yj=n(rB,"A",{href:!0});var ZCt=s(Yj);yFo=r(ZCt,"MvpTokenizer"),ZCt.forEach(t),xFo=r(rB," or "),Kj=n(rB,"A",{href:!0});var e3t=s(Kj);$Fo=r(e3t,"MvpTokenizerFast"),e3t.forEach(t),kFo=r(rB," (MVP model)"),rB.forEach(t),SFo=i(S),Qs=n(S,"LI",{});var tB=s(Qs);oge=n(tB,"STRONG",{});var o3t=s(oge);RFo=r(o3t,"nezha"),o3t.forEach(t),PFo=r(tB," \u2014 "),Zj=n(tB,"A",{href:!0});var r3t=s(Zj);BFo=r(r3t,"BertTokenizer"),r3t.forEach(t),IFo=r(tB," or "),eD=n(tB,"A",{href:!0});var t3t=s(eD);NFo=r(t3t,"BertTokenizerFast"),t3t.forEach(t),qFo=r(tB," (Nezha model)"),tB.forEach(t),jFo=i(S),Ws=n(S,"LI",{});var aB=s(Ws);rge=n(aB,"STRONG",{});var a3t=s(rge);DFo=r(a3t,"nllb"),a3t.forEach(t),GFo=r(aB," \u2014 "),oD=n(aB,"A",{href:!0});var n3t=s(oD);OFo=r(n3t,"NllbTokenizer"),n3t.forEach(t),VFo=r(aB," or "),rD=n(aB,"A",{href:!0});var s3t=s(rD);XFo=r(s3t,"NllbTokenizerFast"),s3t.forEach(t),zFo=r(aB," (NLLB model)"),aB.forEach(t),QFo=i(S),Us=n(S,"LI",{});var nB=s(Us);tge=n(nB,"STRONG",{});var l3t=s(tge);WFo=r(l3t,"nystromformer"),l3t.forEach(t),UFo=r(nB," \u2014 "),tD=n(nB,"A",{href:!0});var i3t=s(tD);HFo=r(i3t,"AlbertTokenizer"),i3t.forEach(t),JFo=r(nB," or "),aD=n(nB,"A",{href:!0});var d3t=s(aD);YFo=r(d3t,"AlbertTokenizerFast"),d3t.forEach(t),KFo=r(nB," (Nystr\xF6mformer model)"),nB.forEach(t),ZFo=i(S),Hs=n(S,"LI",{});var sB=s(Hs);age=n(sB,"STRONG",{});var c3t=s(age);eTo=r(c3t,"openai-gpt"),c3t.forEach(t),oTo=r(sB," \u2014 "),nD=n(sB,"A",{href:!0});var m3t=s(nD);rTo=r(m3t,"OpenAIGPTTokenizer"),m3t.forEach(t),tTo=r(sB," or "),sD=n(sB,"A",{href:!0});var f3t=s(sD);aTo=r(f3t,"OpenAIGPTTokenizerFast"),f3t.forEach(t),nTo=r(sB," (OpenAI GPT model)"),sB.forEach(t),sTo=i(S),pu=n(S,"LI",{});var NPe=s(pu);nge=n(NPe,"STRONG",{});var g3t=s(nge);lTo=r(g3t,"opt"),g3t.forEach(t),iTo=r(NPe," \u2014 "),lD=n(NPe,"A",{href:!0});var h3t=s(lD);dTo=r(h3t,"GPT2Tokenizer"),h3t.forEach(t),cTo=r(NPe," (OPT model)"),NPe.forEach(t),mTo=i(S),Js=n(S,"LI",{});var lB=s(Js);sge=n(lB,"STRONG",{});var u3t=s(sge);fTo=r(u3t,"owlvit"),u3t.forEach(t),gTo=r(lB," \u2014 "),iD=n(lB,"A",{href:!0});var p3t=s(iD);hTo=r(p3t,"CLIPTokenizer"),p3t.forEach(t),uTo=r(lB," or "),dD=n(lB,"A",{href:!0});var _3t=s(dD);pTo=r(_3t,"CLIPTokenizerFast"),_3t.forEach(t),_To=r(lB," (OWL-ViT model)"),lB.forEach(t),bTo=i(S),Ys=n(S,"LI",{});var iB=s(Ys);lge=n(iB,"STRONG",{});var b3t=s(lge);vTo=r(b3t,"pegasus"),b3t.forEach(t),FTo=r(iB," \u2014 "),cD=n(iB,"A",{href:!0});var v3t=s(cD);TTo=r(v3t,"PegasusTokenizer"),v3t.forEach(t),MTo=r(iB," or "),mD=n(iB,"A",{href:!0});var F3t=s(mD);ETo=r(F3t,"PegasusTokenizerFast"),F3t.forEach(t),CTo=r(iB," (Pegasus model)"),iB.forEach(t),wTo=i(S),_u=n(S,"LI",{});var qPe=s(_u);ige=n(qPe,"STRONG",{});var T3t=s(ige);ATo=r(T3t,"perceiver"),T3t.forEach(t),LTo=r(qPe," \u2014 "),fD=n(qPe,"A",{href:!0});var M3t=s(fD);yTo=r(M3t,"PerceiverTokenizer"),M3t.forEach(t),xTo=r(qPe," (Perceiver model)"),qPe.forEach(t),$To=i(S),bu=n(S,"LI",{});var jPe=s(bu);dge=n(jPe,"STRONG",{});var E3t=s(dge);kTo=r(E3t,"phobert"),E3t.forEach(t),STo=r(jPe," \u2014 "),gD=n(jPe,"A",{href:!0});var C3t=s(gD);RTo=r(C3t,"PhobertTokenizer"),C3t.forEach(t),PTo=r(jPe," (PhoBERT model)"),jPe.forEach(t),BTo=i(S),vu=n(S,"LI",{});var DPe=s(vu);cge=n(DPe,"STRONG",{});var w3t=s(cge);ITo=r(w3t,"plbart"),w3t.forEach(t),NTo=r(DPe," \u2014 "),hD=n(DPe,"A",{href:!0});var A3t=s(hD);qTo=r(A3t,"PLBartTokenizer"),A3t.forEach(t),jTo=r(DPe," (PLBart model)"),DPe.forEach(t),DTo=i(S),Fu=n(S,"LI",{});var GPe=s(Fu);mge=n(GPe,"STRONG",{});var L3t=s(mge);GTo=r(L3t,"prophetnet"),L3t.forEach(t),OTo=r(GPe," \u2014 "),uD=n(GPe,"A",{href:!0});var y3t=s(uD);VTo=r(y3t,"ProphetNetTokenizer"),y3t.forEach(t),XTo=r(GPe," (ProphetNet model)"),GPe.forEach(t),zTo=i(S),Ks=n(S,"LI",{});var dB=s(Ks);fge=n(dB,"STRONG",{});var x3t=s(fge);QTo=r(x3t,"qdqbert"),x3t.forEach(t),WTo=r(dB," \u2014 "),pD=n(dB,"A",{href:!0});var $3t=s(pD);UTo=r($3t,"BertTokenizer"),$3t.forEach(t),HTo=r(dB," or "),_D=n(dB,"A",{href:!0});var k3t=s(_D);JTo=r(k3t,"BertTokenizerFast"),k3t.forEach(t),YTo=r(dB," (QDQBert model)"),dB.forEach(t),KTo=i(S),Tu=n(S,"LI",{});var OPe=s(Tu);gge=n(OPe,"STRONG",{});var S3t=s(gge);ZTo=r(S3t,"rag"),S3t.forEach(t),eMo=r(OPe," \u2014 "),bD=n(OPe,"A",{href:!0});var R3t=s(bD);oMo=r(R3t,"RagTokenizer"),R3t.forEach(t),rMo=r(OPe," (RAG model)"),OPe.forEach(t),tMo=i(S),Zs=n(S,"LI",{});var cB=s(Zs);hge=n(cB,"STRONG",{});var P3t=s(hge);aMo=r(P3t,"realm"),P3t.forEach(t),nMo=r(cB," \u2014 "),vD=n(cB,"A",{href:!0});var B3t=s(vD);sMo=r(B3t,"RealmTokenizer"),B3t.forEach(t),lMo=r(cB," or "),FD=n(cB,"A",{href:!0});var I3t=s(FD);iMo=r(I3t,"RealmTokenizerFast"),I3t.forEach(t),dMo=r(cB," (REALM model)"),cB.forEach(t),cMo=i(S),el=n(S,"LI",{});var mB=s(el);uge=n(mB,"STRONG",{});var N3t=s(uge);mMo=r(N3t,"reformer"),N3t.forEach(t),fMo=r(mB," \u2014 "),TD=n(mB,"A",{href:!0});var q3t=s(TD);gMo=r(q3t,"ReformerTokenizer"),q3t.forEach(t),hMo=r(mB," or "),MD=n(mB,"A",{href:!0});var j3t=s(MD);uMo=r(j3t,"ReformerTokenizerFast"),j3t.forEach(t),pMo=r(mB," (Reformer model)"),mB.forEach(t),_Mo=i(S),ol=n(S,"LI",{});var fB=s(ol);pge=n(fB,"STRONG",{});var D3t=s(pge);bMo=r(D3t,"rembert"),D3t.forEach(t),vMo=r(fB," \u2014 "),ED=n(fB,"A",{href:!0});var G3t=s(ED);FMo=r(G3t,"RemBertTokenizer"),G3t.forEach(t),TMo=r(fB," or "),CD=n(fB,"A",{href:!0});var O3t=s(CD);MMo=r(O3t,"RemBertTokenizerFast"),O3t.forEach(t),EMo=r(fB," (RemBERT model)"),fB.forEach(t),CMo=i(S),rl=n(S,"LI",{});var gB=s(rl);_ge=n(gB,"STRONG",{});var V3t=s(_ge);wMo=r(V3t,"retribert"),V3t.forEach(t),AMo=r(gB," \u2014 "),wD=n(gB,"A",{href:!0});var X3t=s(wD);LMo=r(X3t,"RetriBertTokenizer"),X3t.forEach(t),yMo=r(gB," or "),AD=n(gB,"A",{href:!0});var z3t=s(AD);xMo=r(z3t,"RetriBertTokenizerFast"),z3t.forEach(t),$Mo=r(gB," (RetriBERT model)"),gB.forEach(t),kMo=i(S),tl=n(S,"LI",{});var hB=s(tl);bge=n(hB,"STRONG",{});var Q3t=s(bge);SMo=r(Q3t,"roberta"),Q3t.forEach(t),RMo=r(hB," \u2014 "),LD=n(hB,"A",{href:!0});var W3t=s(LD);PMo=r(W3t,"RobertaTokenizer"),W3t.forEach(t),BMo=r(hB," or "),yD=n(hB,"A",{href:!0});var U3t=s(yD);IMo=r(U3t,"RobertaTokenizerFast"),U3t.forEach(t),NMo=r(hB," (RoBERTa model)"),hB.forEach(t),qMo=i(S),al=n(S,"LI",{});var uB=s(al);vge=n(uB,"STRONG",{});var H3t=s(vge);jMo=r(H3t,"roformer"),H3t.forEach(t),DMo=r(uB," \u2014 "),xD=n(uB,"A",{href:!0});var J3t=s(xD);GMo=r(J3t,"RoFormerTokenizer"),J3t.forEach(t),OMo=r(uB," or "),$D=n(uB,"A",{href:!0});var Y3t=s($D);VMo=r(Y3t,"RoFormerTokenizerFast"),Y3t.forEach(t),XMo=r(uB," (RoFormer model)"),uB.forEach(t),zMo=i(S),Mu=n(S,"LI",{});var VPe=s(Mu);Fge=n(VPe,"STRONG",{});var K3t=s(Fge);QMo=r(K3t,"speech_to_text"),K3t.forEach(t),WMo=r(VPe," \u2014 "),kD=n(VPe,"A",{href:!0});var Z3t=s(kD);UMo=r(Z3t,"Speech2TextTokenizer"),Z3t.forEach(t),HMo=r(VPe," (Speech2Text model)"),VPe.forEach(t),JMo=i(S),Eu=n(S,"LI",{});var XPe=s(Eu);Tge=n(XPe,"STRONG",{});var e5t=s(Tge);YMo=r(e5t,"speech_to_text_2"),e5t.forEach(t),KMo=r(XPe," \u2014 "),SD=n(XPe,"A",{href:!0});var o5t=s(SD);ZMo=r(o5t,"Speech2Text2Tokenizer"),o5t.forEach(t),eEo=r(XPe," (Speech2Text2 model)"),XPe.forEach(t),oEo=i(S),nl=n(S,"LI",{});var pB=s(nl);Mge=n(pB,"STRONG",{});var r5t=s(Mge);rEo=r(r5t,"splinter"),r5t.forEach(t),tEo=r(pB," \u2014 "),RD=n(pB,"A",{href:!0});var t5t=s(RD);aEo=r(t5t,"SplinterTokenizer"),t5t.forEach(t),nEo=r(pB," or "),PD=n(pB,"A",{href:!0});var a5t=s(PD);sEo=r(a5t,"SplinterTokenizerFast"),a5t.forEach(t),lEo=r(pB," (Splinter model)"),pB.forEach(t),iEo=i(S),sl=n(S,"LI",{});var _B=s(sl);Ege=n(_B,"STRONG",{});var n5t=s(Ege);dEo=r(n5t,"squeezebert"),n5t.forEach(t),cEo=r(_B," \u2014 "),BD=n(_B,"A",{href:!0});var s5t=s(BD);mEo=r(s5t,"SqueezeBertTokenizer"),s5t.forEach(t),fEo=r(_B," or "),ID=n(_B,"A",{href:!0});var l5t=s(ID);gEo=r(l5t,"SqueezeBertTokenizerFast"),l5t.forEach(t),hEo=r(_B," (SqueezeBERT model)"),_B.forEach(t),uEo=i(S),ll=n(S,"LI",{});var bB=s(ll);Cge=n(bB,"STRONG",{});var i5t=s(Cge);pEo=r(i5t,"t5"),i5t.forEach(t),_Eo=r(bB," \u2014 "),ND=n(bB,"A",{href:!0});var d5t=s(ND);bEo=r(d5t,"T5Tokenizer"),d5t.forEach(t),vEo=r(bB," or "),qD=n(bB,"A",{href:!0});var c5t=s(qD);FEo=r(c5t,"T5TokenizerFast"),c5t.forEach(t),TEo=r(bB," (T5 model)"),bB.forEach(t),MEo=i(S),Cu=n(S,"LI",{});var zPe=s(Cu);wge=n(zPe,"STRONG",{});var m5t=s(wge);EEo=r(m5t,"tapas"),m5t.forEach(t),CEo=r(zPe," \u2014 "),jD=n(zPe,"A",{href:!0});var f5t=s(jD);wEo=r(f5t,"TapasTokenizer"),f5t.forEach(t),AEo=r(zPe," (TAPAS model)"),zPe.forEach(t),LEo=i(S),wu=n(S,"LI",{});var QPe=s(wu);Age=n(QPe,"STRONG",{});var g5t=s(Age);yEo=r(g5t,"tapex"),g5t.forEach(t),xEo=r(QPe," \u2014 "),DD=n(QPe,"A",{href:!0});var h5t=s(DD);$Eo=r(h5t,"TapexTokenizer"),h5t.forEach(t),kEo=r(QPe," (TAPEX model)"),QPe.forEach(t),SEo=i(S),Au=n(S,"LI",{});var WPe=s(Au);Lge=n(WPe,"STRONG",{});var u5t=s(Lge);REo=r(u5t,"transfo-xl"),u5t.forEach(t),PEo=r(WPe," \u2014 "),GD=n(WPe,"A",{href:!0});var p5t=s(GD);BEo=r(p5t,"TransfoXLTokenizer"),p5t.forEach(t),IEo=r(WPe," (Transformer-XL model)"),WPe.forEach(t),NEo=i(S),il=n(S,"LI",{});var vB=s(il);yge=n(vB,"STRONG",{});var _5t=s(yge);qEo=r(_5t,"vilt"),_5t.forEach(t),jEo=r(vB," \u2014 "),OD=n(vB,"A",{href:!0});var b5t=s(OD);DEo=r(b5t,"BertTokenizer"),b5t.forEach(t),GEo=r(vB," or "),VD=n(vB,"A",{href:!0});var v5t=s(VD);OEo=r(v5t,"BertTokenizerFast"),v5t.forEach(t),VEo=r(vB," (ViLT model)"),vB.forEach(t),XEo=i(S),dl=n(S,"LI",{});var FB=s(dl);xge=n(FB,"STRONG",{});var F5t=s(xge);zEo=r(F5t,"visual_bert"),F5t.forEach(t),QEo=r(FB," \u2014 "),XD=n(FB,"A",{href:!0});var T5t=s(XD);WEo=r(T5t,"BertTokenizer"),T5t.forEach(t),UEo=r(FB," or "),zD=n(FB,"A",{href:!0});var M5t=s(zD);HEo=r(M5t,"BertTokenizerFast"),M5t.forEach(t),JEo=r(FB," (VisualBERT model)"),FB.forEach(t),YEo=i(S),Lu=n(S,"LI",{});var UPe=s(Lu);$ge=n(UPe,"STRONG",{});var E5t=s($ge);KEo=r(E5t,"wav2vec2"),E5t.forEach(t),ZEo=r(UPe," \u2014 "),QD=n(UPe,"A",{href:!0});var C5t=s(QD);e4o=r(C5t,"Wav2Vec2CTCTokenizer"),C5t.forEach(t),o4o=r(UPe," (Wav2Vec2 model)"),UPe.forEach(t),r4o=i(S),yu=n(S,"LI",{});var HPe=s(yu);kge=n(HPe,"STRONG",{});var w5t=s(kge);t4o=r(w5t,"wav2vec2-conformer"),w5t.forEach(t),a4o=r(HPe," \u2014 "),WD=n(HPe,"A",{href:!0});var A5t=s(WD);n4o=r(A5t,"Wav2Vec2CTCTokenizer"),A5t.forEach(t),s4o=r(HPe," (Wav2Vec2-Conformer model)"),HPe.forEach(t),l4o=i(S),xu=n(S,"LI",{});var JPe=s(xu);Sge=n(JPe,"STRONG",{});var L5t=s(Sge);i4o=r(L5t,"wav2vec2_phoneme"),L5t.forEach(t),d4o=r(JPe," \u2014 "),UD=n(JPe,"A",{href:!0});var y5t=s(UD);c4o=r(y5t,"Wav2Vec2PhonemeCTCTokenizer"),y5t.forEach(t),m4o=r(JPe," (Wav2Vec2Phoneme model)"),JPe.forEach(t),f4o=i(S),cl=n(S,"LI",{});var TB=s(cl);Rge=n(TB,"STRONG",{});var x5t=s(Rge);g4o=r(x5t,"xclip"),x5t.forEach(t),h4o=r(TB," \u2014 "),HD=n(TB,"A",{href:!0});var $5t=s(HD);u4o=r($5t,"CLIPTokenizer"),$5t.forEach(t),p4o=r(TB," or "),JD=n(TB,"A",{href:!0});var k5t=s(JD);_4o=r(k5t,"CLIPTokenizerFast"),k5t.forEach(t),b4o=r(TB," (X-CLIP model)"),TB.forEach(t),v4o=i(S),ml=n(S,"LI",{});var MB=s(ml);Pge=n(MB,"STRONG",{});var S5t=s(Pge);F4o=r(S5t,"xglm"),S5t.forEach(t),T4o=r(MB," \u2014 "),YD=n(MB,"A",{href:!0});var R5t=s(YD);M4o=r(R5t,"XGLMTokenizer"),R5t.forEach(t),E4o=r(MB," or "),KD=n(MB,"A",{href:!0});var P5t=s(KD);C4o=r(P5t,"XGLMTokenizerFast"),P5t.forEach(t),w4o=r(MB," (XGLM model)"),MB.forEach(t),A4o=i(S),$u=n(S,"LI",{});var YPe=s($u);Bge=n(YPe,"STRONG",{});var B5t=s(Bge);L4o=r(B5t,"xlm"),B5t.forEach(t),y4o=r(YPe," \u2014 "),ZD=n(YPe,"A",{href:!0});var I5t=s(ZD);x4o=r(I5t,"XLMTokenizer"),I5t.forEach(t),$4o=r(YPe," (XLM model)"),YPe.forEach(t),k4o=i(S),ku=n(S,"LI",{});var KPe=s(ku);Ige=n(KPe,"STRONG",{});var N5t=s(Ige);S4o=r(N5t,"xlm-prophetnet"),N5t.forEach(t),R4o=r(KPe," \u2014 "),eG=n(KPe,"A",{href:!0});var q5t=s(eG);P4o=r(q5t,"XLMProphetNetTokenizer"),q5t.forEach(t),B4o=r(KPe," (XLM-ProphetNet model)"),KPe.forEach(t),I4o=i(S),fl=n(S,"LI",{});var EB=s(fl);Nge=n(EB,"STRONG",{});var j5t=s(Nge);N4o=r(j5t,"xlm-roberta"),j5t.forEach(t),q4o=r(EB," \u2014 "),oG=n(EB,"A",{href:!0});var D5t=s(oG);j4o=r(D5t,"XLMRobertaTokenizer"),D5t.forEach(t),D4o=r(EB," or "),rG=n(EB,"A",{href:!0});var G5t=s(rG);G4o=r(G5t,"XLMRobertaTokenizerFast"),G5t.forEach(t),O4o=r(EB," (XLM-RoBERTa model)"),EB.forEach(t),V4o=i(S),gl=n(S,"LI",{});var CB=s(gl);qge=n(CB,"STRONG",{});var O5t=s(qge);X4o=r(O5t,"xlm-roberta-xl"),O5t.forEach(t),z4o=r(CB," \u2014 "),tG=n(CB,"A",{href:!0});var V5t=s(tG);Q4o=r(V5t,"XLMRobertaTokenizer"),V5t.forEach(t),W4o=r(CB," or "),aG=n(CB,"A",{href:!0});var X5t=s(aG);U4o=r(X5t,"XLMRobertaTokenizerFast"),X5t.forEach(t),H4o=r(CB," (XLM-RoBERTa-XL model)"),CB.forEach(t),J4o=i(S),hl=n(S,"LI",{});var wB=s(hl);jge=n(wB,"STRONG",{});var z5t=s(jge);Y4o=r(z5t,"xlnet"),z5t.forEach(t),K4o=r(wB," \u2014 "),nG=n(wB,"A",{href:!0});var Q5t=s(nG);Z4o=r(Q5t,"XLNetTokenizer"),Q5t.forEach(t),eCo=r(wB," or "),sG=n(wB,"A",{href:!0});var W5t=s(sG);oCo=r(W5t,"XLNetTokenizerFast"),W5t.forEach(t),rCo=r(wB," (XLNet model)"),wB.forEach(t),tCo=i(S),ul=n(S,"LI",{});var AB=s(ul);Dge=n(AB,"STRONG",{});var U5t=s(Dge);aCo=r(U5t,"yoso"),U5t.forEach(t),nCo=r(AB," \u2014 "),lG=n(AB,"A",{href:!0});var H5t=s(lG);sCo=r(H5t,"AlbertTokenizer"),H5t.forEach(t),lCo=r(AB," or "),iG=n(AB,"A",{href:!0});var J5t=s(iG);iCo=r(J5t,"AlbertTokenizerFast"),J5t.forEach(t),dCo=r(AB," (YOSO model)"),AB.forEach(t),S.forEach(t),cCo=i(Ml),T(Su.$$.fragment,Ml),Ml.forEach(t),mCo=i(Tl),Ru=n(Tl,"DIV",{class:!0});var yeo=s(Ru);T(z9.$$.fragment,yeo),fCo=i(yeo),Gge=n(yeo,"P",{});var Y5t=s(Gge);gCo=r(Y5t,"Register a new tokenizer in this mapping."),Y5t.forEach(t),yeo.forEach(t),Tl.forEach(t),vKe=i(m),gd=n(m,"H2",{class:!0});var xeo=s(gd);Pu=n(xeo,"A",{id:!0,class:!0,href:!0});var K5t=s(Pu);Oge=n(K5t,"SPAN",{});var Z5t=s(Oge);T(Q9.$$.fragment,Z5t),Z5t.forEach(t),K5t.forEach(t),hCo=i(xeo),Vge=n(xeo,"SPAN",{});var e0t=s(Vge);uCo=r(e0t,"AutoFeatureExtractor"),e0t.forEach(t),xeo.forEach(t),FKe=i(m),So=n(m,"DIV",{class:!0});var El=s(So);T(W9.$$.fragment,El),pCo=i(El),U9=n(El,"P",{});var $eo=s(U9);_Co=r($eo,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dG=n($eo,"A",{href:!0});var o0t=s(dG);bCo=r(o0t,"AutoFeatureExtractor.from_pretrained()"),o0t.forEach(t),vCo=r($eo," class method."),$eo.forEach(t),FCo=i(El),H9=n(El,"P",{});var keo=s(H9);TCo=r(keo,"This class cannot be instantiated directly using "),Xge=n(keo,"CODE",{});var r0t=s(Xge);MCo=r(r0t,"__init__()"),r0t.forEach(t),ECo=r(keo," (throws an error)."),keo.forEach(t),CCo=i(El),Ye=n(El,"DIV",{class:!0});var ba=s(Ye);T(J9.$$.fragment,ba),wCo=i(ba),zge=n(ba,"P",{});var t0t=s(zge);ACo=r(t0t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),t0t.forEach(t),LCo=i(ba),Ha=n(ba,"P",{});var Ay=s(Ha);yCo=r(Ay,"The feature extractor class to instantiate is selected based on the "),Qge=n(Ay,"CODE",{});var a0t=s(Qge);xCo=r(a0t,"model_type"),a0t.forEach(t),$Co=r(Ay,` property of the config object
(either passed as an argument or loaded from `),Wge=n(Ay,"CODE",{});var n0t=s(Wge);kCo=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),SCo=r(Ay,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Uge=n(Ay,"CODE",{});var s0t=s(Uge);RCo=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),PCo=r(Ay,":"),Ay.forEach(t),BCo=i(ba),W=n(ba,"UL",{});var H=s(W);Bu=n(H,"LI",{});var ZPe=s(Bu);Hge=n(ZPe,"STRONG",{});var l0t=s(Hge);ICo=r(l0t,"beit"),l0t.forEach(t),NCo=r(ZPe," \u2014 "),cG=n(ZPe,"A",{href:!0});var i0t=s(cG);qCo=r(i0t,"BeitFeatureExtractor"),i0t.forEach(t),jCo=r(ZPe," (BEiT model)"),ZPe.forEach(t),DCo=i(H),Iu=n(H,"LI",{});var eBe=s(Iu);Jge=n(eBe,"STRONG",{});var d0t=s(Jge);GCo=r(d0t,"clip"),d0t.forEach(t),OCo=r(eBe," \u2014 "),mG=n(eBe,"A",{href:!0});var c0t=s(mG);VCo=r(c0t,"CLIPFeatureExtractor"),c0t.forEach(t),XCo=r(eBe," (CLIP model)"),eBe.forEach(t),zCo=i(H),Nu=n(H,"LI",{});var oBe=s(Nu);Yge=n(oBe,"STRONG",{});var m0t=s(Yge);QCo=r(m0t,"convnext"),m0t.forEach(t),WCo=r(oBe," \u2014 "),fG=n(oBe,"A",{href:!0});var f0t=s(fG);UCo=r(f0t,"ConvNextFeatureExtractor"),f0t.forEach(t),HCo=r(oBe," (ConvNeXT model)"),oBe.forEach(t),JCo=i(H),qu=n(H,"LI",{});var rBe=s(qu);Kge=n(rBe,"STRONG",{});var g0t=s(Kge);YCo=r(g0t,"cvt"),g0t.forEach(t),KCo=r(rBe," \u2014 "),gG=n(rBe,"A",{href:!0});var h0t=s(gG);ZCo=r(h0t,"ConvNextFeatureExtractor"),h0t.forEach(t),e3o=r(rBe," (CvT model)"),rBe.forEach(t),o3o=i(H),ju=n(H,"LI",{});var tBe=s(ju);Zge=n(tBe,"STRONG",{});var u0t=s(Zge);r3o=r(u0t,"data2vec-audio"),u0t.forEach(t),t3o=r(tBe," \u2014 "),hG=n(tBe,"A",{href:!0});var p0t=s(hG);a3o=r(p0t,"Wav2Vec2FeatureExtractor"),p0t.forEach(t),n3o=r(tBe," (Data2VecAudio model)"),tBe.forEach(t),s3o=i(H),Du=n(H,"LI",{});var aBe=s(Du);ehe=n(aBe,"STRONG",{});var _0t=s(ehe);l3o=r(_0t,"data2vec-vision"),_0t.forEach(t),i3o=r(aBe," \u2014 "),uG=n(aBe,"A",{href:!0});var b0t=s(uG);d3o=r(b0t,"BeitFeatureExtractor"),b0t.forEach(t),c3o=r(aBe," (Data2VecVision model)"),aBe.forEach(t),m3o=i(H),Gu=n(H,"LI",{});var nBe=s(Gu);ohe=n(nBe,"STRONG",{});var v0t=s(ohe);f3o=r(v0t,"deformable_detr"),v0t.forEach(t),g3o=r(nBe," \u2014 "),pG=n(nBe,"A",{href:!0});var F0t=s(pG);h3o=r(F0t,"DetrFeatureExtractor"),F0t.forEach(t),u3o=r(nBe," (Deformable DETR model)"),nBe.forEach(t),p3o=i(H),Ou=n(H,"LI",{});var sBe=s(Ou);rhe=n(sBe,"STRONG",{});var T0t=s(rhe);_3o=r(T0t,"deit"),T0t.forEach(t),b3o=r(sBe," \u2014 "),_G=n(sBe,"A",{href:!0});var M0t=s(_G);v3o=r(M0t,"DeiTFeatureExtractor"),M0t.forEach(t),F3o=r(sBe," (DeiT model)"),sBe.forEach(t),T3o=i(H),Vu=n(H,"LI",{});var lBe=s(Vu);the=n(lBe,"STRONG",{});var E0t=s(the);M3o=r(E0t,"detr"),E0t.forEach(t),E3o=r(lBe," \u2014 "),bG=n(lBe,"A",{href:!0});var C0t=s(bG);C3o=r(C0t,"DetrFeatureExtractor"),C0t.forEach(t),w3o=r(lBe," (DETR model)"),lBe.forEach(t),A3o=i(H),Xu=n(H,"LI",{});var iBe=s(Xu);ahe=n(iBe,"STRONG",{});var w0t=s(ahe);L3o=r(w0t,"donut"),w0t.forEach(t),y3o=r(iBe," \u2014 "),vG=n(iBe,"A",{href:!0});var A0t=s(vG);x3o=r(A0t,"DonutFeatureExtractor"),A0t.forEach(t),$3o=r(iBe," (Donut model)"),iBe.forEach(t),k3o=i(H),zu=n(H,"LI",{});var dBe=s(zu);nhe=n(dBe,"STRONG",{});var L0t=s(nhe);S3o=r(L0t,"dpt"),L0t.forEach(t),R3o=r(dBe," \u2014 "),FG=n(dBe,"A",{href:!0});var y0t=s(FG);P3o=r(y0t,"DPTFeatureExtractor"),y0t.forEach(t),B3o=r(dBe," (DPT model)"),dBe.forEach(t),I3o=i(H),Qu=n(H,"LI",{});var cBe=s(Qu);she=n(cBe,"STRONG",{});var x0t=s(she);N3o=r(x0t,"flava"),x0t.forEach(t),q3o=r(cBe," \u2014 "),TG=n(cBe,"A",{href:!0});var $0t=s(TG);j3o=r($0t,"FlavaFeatureExtractor"),$0t.forEach(t),D3o=r(cBe," (FLAVA model)"),cBe.forEach(t),G3o=i(H),Wu=n(H,"LI",{});var mBe=s(Wu);lhe=n(mBe,"STRONG",{});var k0t=s(lhe);O3o=r(k0t,"glpn"),k0t.forEach(t),V3o=r(mBe," \u2014 "),MG=n(mBe,"A",{href:!0});var S0t=s(MG);X3o=r(S0t,"GLPNFeatureExtractor"),S0t.forEach(t),z3o=r(mBe," (GLPN model)"),mBe.forEach(t),Q3o=i(H),Uu=n(H,"LI",{});var fBe=s(Uu);ihe=n(fBe,"STRONG",{});var R0t=s(ihe);W3o=r(R0t,"groupvit"),R0t.forEach(t),U3o=r(fBe," \u2014 "),EG=n(fBe,"A",{href:!0});var P0t=s(EG);H3o=r(P0t,"CLIPFeatureExtractor"),P0t.forEach(t),J3o=r(fBe," (GroupViT model)"),fBe.forEach(t),Y3o=i(H),Hu=n(H,"LI",{});var gBe=s(Hu);dhe=n(gBe,"STRONG",{});var B0t=s(dhe);K3o=r(B0t,"hubert"),B0t.forEach(t),Z3o=r(gBe," \u2014 "),CG=n(gBe,"A",{href:!0});var I0t=s(CG);e5o=r(I0t,"Wav2Vec2FeatureExtractor"),I0t.forEach(t),o5o=r(gBe," (Hubert model)"),gBe.forEach(t),r5o=i(H),Ju=n(H,"LI",{});var hBe=s(Ju);che=n(hBe,"STRONG",{});var N0t=s(che);t5o=r(N0t,"imagegpt"),N0t.forEach(t),a5o=r(hBe," \u2014 "),wG=n(hBe,"A",{href:!0});var q0t=s(wG);n5o=r(q0t,"ImageGPTFeatureExtractor"),q0t.forEach(t),s5o=r(hBe," (ImageGPT model)"),hBe.forEach(t),l5o=i(H),Yu=n(H,"LI",{});var uBe=s(Yu);mhe=n(uBe,"STRONG",{});var j0t=s(mhe);i5o=r(j0t,"layoutlmv2"),j0t.forEach(t),d5o=r(uBe," \u2014 "),AG=n(uBe,"A",{href:!0});var D0t=s(AG);c5o=r(D0t,"LayoutLMv2FeatureExtractor"),D0t.forEach(t),m5o=r(uBe," (LayoutLMv2 model)"),uBe.forEach(t),f5o=i(H),Ku=n(H,"LI",{});var pBe=s(Ku);fhe=n(pBe,"STRONG",{});var G0t=s(fhe);g5o=r(G0t,"layoutlmv3"),G0t.forEach(t),h5o=r(pBe," \u2014 "),LG=n(pBe,"A",{href:!0});var O0t=s(LG);u5o=r(O0t,"LayoutLMv3FeatureExtractor"),O0t.forEach(t),p5o=r(pBe," (LayoutLMv3 model)"),pBe.forEach(t),_5o=i(H),Zu=n(H,"LI",{});var _Be=s(Zu);ghe=n(_Be,"STRONG",{});var V0t=s(ghe);b5o=r(V0t,"levit"),V0t.forEach(t),v5o=r(_Be," \u2014 "),yG=n(_Be,"A",{href:!0});var X0t=s(yG);F5o=r(X0t,"LevitFeatureExtractor"),X0t.forEach(t),T5o=r(_Be," (LeViT model)"),_Be.forEach(t),M5o=i(H),ep=n(H,"LI",{});var bBe=s(ep);hhe=n(bBe,"STRONG",{});var z0t=s(hhe);E5o=r(z0t,"maskformer"),z0t.forEach(t),C5o=r(bBe," \u2014 "),xG=n(bBe,"A",{href:!0});var Q0t=s(xG);w5o=r(Q0t,"MaskFormerFeatureExtractor"),Q0t.forEach(t),A5o=r(bBe," (MaskFormer model)"),bBe.forEach(t),L5o=i(H),op=n(H,"LI",{});var vBe=s(op);uhe=n(vBe,"STRONG",{});var W0t=s(uhe);y5o=r(W0t,"mctct"),W0t.forEach(t),x5o=r(vBe," \u2014 "),$G=n(vBe,"A",{href:!0});var U0t=s($G);$5o=r(U0t,"MCTCTFeatureExtractor"),U0t.forEach(t),k5o=r(vBe," (M-CTC-T model)"),vBe.forEach(t),S5o=i(H),rp=n(H,"LI",{});var FBe=s(rp);phe=n(FBe,"STRONG",{});var H0t=s(phe);R5o=r(H0t,"mobilevit"),H0t.forEach(t),P5o=r(FBe," \u2014 "),kG=n(FBe,"A",{href:!0});var J0t=s(kG);B5o=r(J0t,"MobileViTFeatureExtractor"),J0t.forEach(t),I5o=r(FBe," (MobileViT model)"),FBe.forEach(t),N5o=i(H),tp=n(H,"LI",{});var TBe=s(tp);_he=n(TBe,"STRONG",{});var Y0t=s(_he);q5o=r(Y0t,"owlvit"),Y0t.forEach(t),j5o=r(TBe," \u2014 "),SG=n(TBe,"A",{href:!0});var K0t=s(SG);D5o=r(K0t,"OwlViTFeatureExtractor"),K0t.forEach(t),G5o=r(TBe," (OWL-ViT model)"),TBe.forEach(t),O5o=i(H),ap=n(H,"LI",{});var MBe=s(ap);bhe=n(MBe,"STRONG",{});var Z0t=s(bhe);V5o=r(Z0t,"perceiver"),Z0t.forEach(t),X5o=r(MBe," \u2014 "),RG=n(MBe,"A",{href:!0});var ewt=s(RG);z5o=r(ewt,"PerceiverFeatureExtractor"),ewt.forEach(t),Q5o=r(MBe," (Perceiver model)"),MBe.forEach(t),W5o=i(H),np=n(H,"LI",{});var EBe=s(np);vhe=n(EBe,"STRONG",{});var owt=s(vhe);U5o=r(owt,"poolformer"),owt.forEach(t),H5o=r(EBe," \u2014 "),PG=n(EBe,"A",{href:!0});var rwt=s(PG);J5o=r(rwt,"PoolFormerFeatureExtractor"),rwt.forEach(t),Y5o=r(EBe," (PoolFormer model)"),EBe.forEach(t),K5o=i(H),sp=n(H,"LI",{});var CBe=s(sp);Fhe=n(CBe,"STRONG",{});var twt=s(Fhe);Z5o=r(twt,"regnet"),twt.forEach(t),e0o=r(CBe," \u2014 "),BG=n(CBe,"A",{href:!0});var awt=s(BG);o0o=r(awt,"ConvNextFeatureExtractor"),awt.forEach(t),r0o=r(CBe," (RegNet model)"),CBe.forEach(t),t0o=i(H),lp=n(H,"LI",{});var wBe=s(lp);The=n(wBe,"STRONG",{});var nwt=s(The);a0o=r(nwt,"resnet"),nwt.forEach(t),n0o=r(wBe," \u2014 "),IG=n(wBe,"A",{href:!0});var swt=s(IG);s0o=r(swt,"ConvNextFeatureExtractor"),swt.forEach(t),l0o=r(wBe," (ResNet model)"),wBe.forEach(t),i0o=i(H),ip=n(H,"LI",{});var ABe=s(ip);Mhe=n(ABe,"STRONG",{});var lwt=s(Mhe);d0o=r(lwt,"segformer"),lwt.forEach(t),c0o=r(ABe," \u2014 "),NG=n(ABe,"A",{href:!0});var iwt=s(NG);m0o=r(iwt,"SegformerFeatureExtractor"),iwt.forEach(t),f0o=r(ABe," (SegFormer model)"),ABe.forEach(t),g0o=i(H),dp=n(H,"LI",{});var LBe=s(dp);Ehe=n(LBe,"STRONG",{});var dwt=s(Ehe);h0o=r(dwt,"speech_to_text"),dwt.forEach(t),u0o=r(LBe," \u2014 "),qG=n(LBe,"A",{href:!0});var cwt=s(qG);p0o=r(cwt,"Speech2TextFeatureExtractor"),cwt.forEach(t),_0o=r(LBe," (Speech2Text model)"),LBe.forEach(t),b0o=i(H),cp=n(H,"LI",{});var yBe=s(cp);Che=n(yBe,"STRONG",{});var mwt=s(Che);v0o=r(mwt,"swin"),mwt.forEach(t),F0o=r(yBe," \u2014 "),jG=n(yBe,"A",{href:!0});var fwt=s(jG);T0o=r(fwt,"ViTFeatureExtractor"),fwt.forEach(t),M0o=r(yBe," (Swin Transformer model)"),yBe.forEach(t),E0o=i(H),mp=n(H,"LI",{});var xBe=s(mp);whe=n(xBe,"STRONG",{});var gwt=s(whe);C0o=r(gwt,"swinv2"),gwt.forEach(t),w0o=r(xBe," \u2014 "),DG=n(xBe,"A",{href:!0});var hwt=s(DG);A0o=r(hwt,"ViTFeatureExtractor"),hwt.forEach(t),L0o=r(xBe," (Swin Transformer V2 model)"),xBe.forEach(t),y0o=i(H),fp=n(H,"LI",{});var $Be=s(fp);Ahe=n($Be,"STRONG",{});var uwt=s(Ahe);x0o=r(uwt,"van"),uwt.forEach(t),$0o=r($Be," \u2014 "),GG=n($Be,"A",{href:!0});var pwt=s(GG);k0o=r(pwt,"ConvNextFeatureExtractor"),pwt.forEach(t),S0o=r($Be," (VAN model)"),$Be.forEach(t),R0o=i(H),gp=n(H,"LI",{});var kBe=s(gp);Lhe=n(kBe,"STRONG",{});var _wt=s(Lhe);P0o=r(_wt,"videomae"),_wt.forEach(t),B0o=r(kBe," \u2014 "),OG=n(kBe,"A",{href:!0});var bwt=s(OG);I0o=r(bwt,"VideoMAEFeatureExtractor"),bwt.forEach(t),N0o=r(kBe," (VideoMAE model)"),kBe.forEach(t),q0o=i(H),hp=n(H,"LI",{});var SBe=s(hp);yhe=n(SBe,"STRONG",{});var vwt=s(yhe);j0o=r(vwt,"vilt"),vwt.forEach(t),D0o=r(SBe," \u2014 "),VG=n(SBe,"A",{href:!0});var Fwt=s(VG);G0o=r(Fwt,"ViltFeatureExtractor"),Fwt.forEach(t),O0o=r(SBe," (ViLT model)"),SBe.forEach(t),V0o=i(H),up=n(H,"LI",{});var RBe=s(up);xhe=n(RBe,"STRONG",{});var Twt=s(xhe);X0o=r(Twt,"vit"),Twt.forEach(t),z0o=r(RBe," \u2014 "),XG=n(RBe,"A",{href:!0});var Mwt=s(XG);Q0o=r(Mwt,"ViTFeatureExtractor"),Mwt.forEach(t),W0o=r(RBe," (ViT model)"),RBe.forEach(t),U0o=i(H),pp=n(H,"LI",{});var PBe=s(pp);$he=n(PBe,"STRONG",{});var Ewt=s($he);H0o=r(Ewt,"vit_mae"),Ewt.forEach(t),J0o=r(PBe," \u2014 "),zG=n(PBe,"A",{href:!0});var Cwt=s(zG);Y0o=r(Cwt,"ViTFeatureExtractor"),Cwt.forEach(t),K0o=r(PBe," (ViTMAE model)"),PBe.forEach(t),Z0o=i(H),_p=n(H,"LI",{});var BBe=s(_p);khe=n(BBe,"STRONG",{});var wwt=s(khe);ewo=r(wwt,"wav2vec2"),wwt.forEach(t),owo=r(BBe," \u2014 "),QG=n(BBe,"A",{href:!0});var Awt=s(QG);rwo=r(Awt,"Wav2Vec2FeatureExtractor"),Awt.forEach(t),two=r(BBe," (Wav2Vec2 model)"),BBe.forEach(t),awo=i(H),bp=n(H,"LI",{});var IBe=s(bp);She=n(IBe,"STRONG",{});var Lwt=s(She);nwo=r(Lwt,"wav2vec2-conformer"),Lwt.forEach(t),swo=r(IBe," \u2014 "),WG=n(IBe,"A",{href:!0});var ywt=s(WG);lwo=r(ywt,"Wav2Vec2FeatureExtractor"),ywt.forEach(t),iwo=r(IBe," (Wav2Vec2-Conformer model)"),IBe.forEach(t),dwo=i(H),vp=n(H,"LI",{});var NBe=s(vp);Rhe=n(NBe,"STRONG",{});var xwt=s(Rhe);cwo=r(xwt,"xclip"),xwt.forEach(t),mwo=r(NBe," \u2014 "),UG=n(NBe,"A",{href:!0});var $wt=s(UG);fwo=r($wt,"CLIPFeatureExtractor"),$wt.forEach(t),gwo=r(NBe," (X-CLIP model)"),NBe.forEach(t),hwo=i(H),Fp=n(H,"LI",{});var qBe=s(Fp);Phe=n(qBe,"STRONG",{});var kwt=s(Phe);uwo=r(kwt,"yolos"),kwt.forEach(t),pwo=r(qBe," \u2014 "),HG=n(qBe,"A",{href:!0});var Swt=s(HG);_wo=r(Swt,"YolosFeatureExtractor"),Swt.forEach(t),bwo=r(qBe," (YOLOS model)"),qBe.forEach(t),H.forEach(t),vwo=i(ba),T(Tp.$$.fragment,ba),Fwo=i(ba),T(Mp.$$.fragment,ba),ba.forEach(t),Two=i(El),Ep=n(El,"DIV",{class:!0});var Seo=s(Ep);T(Y9.$$.fragment,Seo),Mwo=i(Seo),Bhe=n(Seo,"P",{});var Rwt=s(Bhe);Ewo=r(Rwt,"Register a new feature extractor for this class."),Rwt.forEach(t),Seo.forEach(t),El.forEach(t),TKe=i(m),hd=n(m,"H2",{class:!0});var Reo=s(hd);Cp=n(Reo,"A",{id:!0,class:!0,href:!0});var Pwt=s(Cp);Ihe=n(Pwt,"SPAN",{});var Bwt=s(Ihe);T(K9.$$.fragment,Bwt),Bwt.forEach(t),Pwt.forEach(t),Cwo=i(Reo),Nhe=n(Reo,"SPAN",{});var Iwt=s(Nhe);wwo=r(Iwt,"AutoProcessor"),Iwt.forEach(t),Reo.forEach(t),MKe=i(m),Ro=n(m,"DIV",{class:!0});var Cl=s(Ro);T(Z9.$$.fragment,Cl),Awo=i(Cl),ex=n(Cl,"P",{});var Peo=s(ex);Lwo=r(Peo,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),JG=n(Peo,"A",{href:!0});var Nwt=s(JG);ywo=r(Nwt,"AutoProcessor.from_pretrained()"),Nwt.forEach(t),xwo=r(Peo," class method."),Peo.forEach(t),$wo=i(Cl),ox=n(Cl,"P",{});var Beo=s(ox);kwo=r(Beo,"This class cannot be instantiated directly using "),qhe=n(Beo,"CODE",{});var qwt=s(qhe);Swo=r(qwt,"__init__()"),qwt.forEach(t),Rwo=r(Beo," (throws an error)."),Beo.forEach(t),Pwo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var va=s(Ke);T(rx.$$.fragment,va),Bwo=i(va),jhe=n(va,"P",{});var jwt=s(jhe);Iwo=r(jwt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jwt.forEach(t),Nwo=i(va),ud=n(va,"P",{});var ile=s(ud);qwo=r(ile,"The processor class to instantiate is selected based on the "),Dhe=n(ile,"CODE",{});var Dwt=s(Dhe);jwo=r(Dwt,"model_type"),Dwt.forEach(t),Dwo=r(ile,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(ile,"CODE",{});var Gwt=s(Ghe);Gwo=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),Owo=r(ile," if possible):"),ile.forEach(t),Vwo=i(va),ie=n(va,"UL",{});var ge=s(ie);wp=n(ge,"LI",{});var jBe=s(wp);Ohe=n(jBe,"STRONG",{});var Owt=s(Ohe);Xwo=r(Owt,"clip"),Owt.forEach(t),zwo=r(jBe," \u2014 "),YG=n(jBe,"A",{href:!0});var Vwt=s(YG);Qwo=r(Vwt,"CLIPProcessor"),Vwt.forEach(t),Wwo=r(jBe," (CLIP model)"),jBe.forEach(t),Uwo=i(ge),Ap=n(ge,"LI",{});var DBe=s(Ap);Vhe=n(DBe,"STRONG",{});var Xwt=s(Vhe);Hwo=r(Xwt,"donut"),Xwt.forEach(t),Jwo=r(DBe," \u2014 "),KG=n(DBe,"A",{href:!0});var zwt=s(KG);Ywo=r(zwt,"DonutProcessor"),zwt.forEach(t),Kwo=r(DBe," (Donut model)"),DBe.forEach(t),Zwo=i(ge),Lp=n(ge,"LI",{});var GBe=s(Lp);Xhe=n(GBe,"STRONG",{});var Qwt=s(Xhe);eAo=r(Qwt,"flava"),Qwt.forEach(t),oAo=r(GBe," \u2014 "),ZG=n(GBe,"A",{href:!0});var Wwt=s(ZG);rAo=r(Wwt,"FlavaProcessor"),Wwt.forEach(t),tAo=r(GBe," (FLAVA model)"),GBe.forEach(t),aAo=i(ge),yp=n(ge,"LI",{});var OBe=s(yp);zhe=n(OBe,"STRONG",{});var Uwt=s(zhe);nAo=r(Uwt,"groupvit"),Uwt.forEach(t),sAo=r(OBe," \u2014 "),eO=n(OBe,"A",{href:!0});var Hwt=s(eO);lAo=r(Hwt,"CLIPProcessor"),Hwt.forEach(t),iAo=r(OBe," (GroupViT model)"),OBe.forEach(t),dAo=i(ge),xp=n(ge,"LI",{});var VBe=s(xp);Qhe=n(VBe,"STRONG",{});var Jwt=s(Qhe);cAo=r(Jwt,"layoutlmv2"),Jwt.forEach(t),mAo=r(VBe," \u2014 "),oO=n(VBe,"A",{href:!0});var Ywt=s(oO);fAo=r(Ywt,"LayoutLMv2Processor"),Ywt.forEach(t),gAo=r(VBe," (LayoutLMv2 model)"),VBe.forEach(t),hAo=i(ge),$p=n(ge,"LI",{});var XBe=s($p);Whe=n(XBe,"STRONG",{});var Kwt=s(Whe);uAo=r(Kwt,"layoutlmv3"),Kwt.forEach(t),pAo=r(XBe," \u2014 "),rO=n(XBe,"A",{href:!0});var Zwt=s(rO);_Ao=r(Zwt,"LayoutLMv3Processor"),Zwt.forEach(t),bAo=r(XBe," (LayoutLMv3 model)"),XBe.forEach(t),vAo=i(ge),kp=n(ge,"LI",{});var zBe=s(kp);Uhe=n(zBe,"STRONG",{});var eAt=s(Uhe);FAo=r(eAt,"layoutxlm"),eAt.forEach(t),TAo=r(zBe," \u2014 "),tO=n(zBe,"A",{href:!0});var oAt=s(tO);MAo=r(oAt,"LayoutXLMProcessor"),oAt.forEach(t),EAo=r(zBe," (LayoutXLM model)"),zBe.forEach(t),CAo=i(ge),Sp=n(ge,"LI",{});var QBe=s(Sp);Hhe=n(QBe,"STRONG",{});var rAt=s(Hhe);wAo=r(rAt,"owlvit"),rAt.forEach(t),AAo=r(QBe," \u2014 "),aO=n(QBe,"A",{href:!0});var tAt=s(aO);LAo=r(tAt,"OwlViTProcessor"),tAt.forEach(t),yAo=r(QBe," (OWL-ViT model)"),QBe.forEach(t),xAo=i(ge),Rp=n(ge,"LI",{});var WBe=s(Rp);Jhe=n(WBe,"STRONG",{});var aAt=s(Jhe);$Ao=r(aAt,"sew"),aAt.forEach(t),kAo=r(WBe," \u2014 "),nO=n(WBe,"A",{href:!0});var nAt=s(nO);SAo=r(nAt,"Wav2Vec2Processor"),nAt.forEach(t),RAo=r(WBe," (SEW model)"),WBe.forEach(t),PAo=i(ge),Pp=n(ge,"LI",{});var UBe=s(Pp);Yhe=n(UBe,"STRONG",{});var sAt=s(Yhe);BAo=r(sAt,"sew-d"),sAt.forEach(t),IAo=r(UBe," \u2014 "),sO=n(UBe,"A",{href:!0});var lAt=s(sO);NAo=r(lAt,"Wav2Vec2Processor"),lAt.forEach(t),qAo=r(UBe," (SEW-D model)"),UBe.forEach(t),jAo=i(ge),Bp=n(ge,"LI",{});var HBe=s(Bp);Khe=n(HBe,"STRONG",{});var iAt=s(Khe);DAo=r(iAt,"speech_to_text"),iAt.forEach(t),GAo=r(HBe," \u2014 "),lO=n(HBe,"A",{href:!0});var dAt=s(lO);OAo=r(dAt,"Speech2TextProcessor"),dAt.forEach(t),VAo=r(HBe," (Speech2Text model)"),HBe.forEach(t),XAo=i(ge),Ip=n(ge,"LI",{});var JBe=s(Ip);Zhe=n(JBe,"STRONG",{});var cAt=s(Zhe);zAo=r(cAt,"speech_to_text_2"),cAt.forEach(t),QAo=r(JBe," \u2014 "),iO=n(JBe,"A",{href:!0});var mAt=s(iO);WAo=r(mAt,"Speech2Text2Processor"),mAt.forEach(t),UAo=r(JBe," (Speech2Text2 model)"),JBe.forEach(t),HAo=i(ge),Np=n(ge,"LI",{});var YBe=s(Np);eue=n(YBe,"STRONG",{});var fAt=s(eue);JAo=r(fAt,"trocr"),fAt.forEach(t),YAo=r(YBe," \u2014 "),dO=n(YBe,"A",{href:!0});var gAt=s(dO);KAo=r(gAt,"TrOCRProcessor"),gAt.forEach(t),ZAo=r(YBe," (TrOCR model)"),YBe.forEach(t),e6o=i(ge),qp=n(ge,"LI",{});var KBe=s(qp);oue=n(KBe,"STRONG",{});var hAt=s(oue);o6o=r(hAt,"unispeech"),hAt.forEach(t),r6o=r(KBe," \u2014 "),cO=n(KBe,"A",{href:!0});var uAt=s(cO);t6o=r(uAt,"Wav2Vec2Processor"),uAt.forEach(t),a6o=r(KBe," (UniSpeech model)"),KBe.forEach(t),n6o=i(ge),jp=n(ge,"LI",{});var ZBe=s(jp);rue=n(ZBe,"STRONG",{});var pAt=s(rue);s6o=r(pAt,"unispeech-sat"),pAt.forEach(t),l6o=r(ZBe," \u2014 "),mO=n(ZBe,"A",{href:!0});var _At=s(mO);i6o=r(_At,"Wav2Vec2Processor"),_At.forEach(t),d6o=r(ZBe," (UniSpeechSat model)"),ZBe.forEach(t),c6o=i(ge),Dp=n(ge,"LI",{});var eIe=s(Dp);tue=n(eIe,"STRONG",{});var bAt=s(tue);m6o=r(bAt,"vilt"),bAt.forEach(t),f6o=r(eIe," \u2014 "),fO=n(eIe,"A",{href:!0});var vAt=s(fO);g6o=r(vAt,"ViltProcessor"),vAt.forEach(t),h6o=r(eIe," (ViLT model)"),eIe.forEach(t),u6o=i(ge),Gp=n(ge,"LI",{});var oIe=s(Gp);aue=n(oIe,"STRONG",{});var FAt=s(aue);p6o=r(FAt,"vision-text-dual-encoder"),FAt.forEach(t),_6o=r(oIe," \u2014 "),gO=n(oIe,"A",{href:!0});var TAt=s(gO);b6o=r(TAt,"VisionTextDualEncoderProcessor"),TAt.forEach(t),v6o=r(oIe," (VisionTextDualEncoder model)"),oIe.forEach(t),F6o=i(ge),Op=n(ge,"LI",{});var rIe=s(Op);nue=n(rIe,"STRONG",{});var MAt=s(nue);T6o=r(MAt,"wav2vec2"),MAt.forEach(t),M6o=r(rIe," \u2014 "),hO=n(rIe,"A",{href:!0});var EAt=s(hO);E6o=r(EAt,"Wav2Vec2Processor"),EAt.forEach(t),C6o=r(rIe," (Wav2Vec2 model)"),rIe.forEach(t),w6o=i(ge),Vp=n(ge,"LI",{});var tIe=s(Vp);sue=n(tIe,"STRONG",{});var CAt=s(sue);A6o=r(CAt,"wav2vec2-conformer"),CAt.forEach(t),L6o=r(tIe," \u2014 "),uO=n(tIe,"A",{href:!0});var wAt=s(uO);y6o=r(wAt,"Wav2Vec2Processor"),wAt.forEach(t),x6o=r(tIe," (Wav2Vec2-Conformer model)"),tIe.forEach(t),$6o=i(ge),Xp=n(ge,"LI",{});var aIe=s(Xp);lue=n(aIe,"STRONG",{});var AAt=s(lue);k6o=r(AAt,"wavlm"),AAt.forEach(t),S6o=r(aIe," \u2014 "),pO=n(aIe,"A",{href:!0});var LAt=s(pO);R6o=r(LAt,"Wav2Vec2Processor"),LAt.forEach(t),P6o=r(aIe," (WavLM model)"),aIe.forEach(t),B6o=i(ge),zp=n(ge,"LI",{});var nIe=s(zp);iue=n(nIe,"STRONG",{});var yAt=s(iue);I6o=r(yAt,"xclip"),yAt.forEach(t),N6o=r(nIe," \u2014 "),_O=n(nIe,"A",{href:!0});var xAt=s(_O);q6o=r(xAt,"CLIPProcessor"),xAt.forEach(t),j6o=r(nIe," (X-CLIP model)"),nIe.forEach(t),ge.forEach(t),D6o=i(va),T(Qp.$$.fragment,va),G6o=i(va),T(Wp.$$.fragment,va),va.forEach(t),O6o=i(Cl),Up=n(Cl,"DIV",{class:!0});var Ieo=s(Up);T(tx.$$.fragment,Ieo),V6o=i(Ieo),due=n(Ieo,"P",{});var $At=s(due);X6o=r($At,"Register a new processor for this class."),$At.forEach(t),Ieo.forEach(t),Cl.forEach(t),EKe=i(m),pd=n(m,"H2",{class:!0});var Neo=s(pd);Hp=n(Neo,"A",{id:!0,class:!0,href:!0});var kAt=s(Hp);cue=n(kAt,"SPAN",{});var SAt=s(cue);T(ax.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),z6o=i(Neo),mue=n(Neo,"SPAN",{});var RAt=s(mue);Q6o=r(RAt,"AutoModel"),RAt.forEach(t),Neo.forEach(t),CKe=i(m),Po=n(m,"DIV",{class:!0});var wl=s(Po);T(nx.$$.fragment,wl),W6o=i(wl),_d=n(wl,"P",{});var dle=s(_d);U6o=r(dle,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bO=n(dle,"A",{href:!0});var PAt=s(bO);H6o=r(PAt,"from_pretrained()"),PAt.forEach(t),J6o=r(dle," class method or the "),vO=n(dle,"A",{href:!0});var BAt=s(vO);Y6o=r(BAt,"from_config()"),BAt.forEach(t),K6o=r(dle,` class
method.`),dle.forEach(t),Z6o=i(wl),sx=n(wl,"P",{});var qeo=s(sx);e7o=r(qeo,"This class cannot be instantiated directly using "),fue=n(qeo,"CODE",{});var IAt=s(fue);o7o=r(IAt,"__init__()"),IAt.forEach(t),r7o=r(qeo," (throws an error)."),qeo.forEach(t),t7o=i(wl),_t=n(wl,"DIV",{class:!0});var Ly=s(_t);T(lx.$$.fragment,Ly),a7o=i(Ly),gue=n(Ly,"P",{});var NAt=s(gue);n7o=r(NAt,"Instantiates one of the base model classes of the library from a configuration."),NAt.forEach(t),s7o=i(Ly),bd=n(Ly,"P",{});var cle=s(bd);l7o=r(cle,`Note:
Loading a model from its configuration file does `),hue=n(cle,"STRONG",{});var qAt=s(hue);i7o=r(qAt,"not"),qAt.forEach(t),d7o=r(cle,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(cle,"A",{href:!0});var jAt=s(FO);c7o=r(jAt,"from_pretrained()"),jAt.forEach(t),m7o=r(cle," to load the model weights."),cle.forEach(t),f7o=i(Ly),T(Jp.$$.fragment,Ly),Ly.forEach(t),g7o=i(wl),Ze=n(wl,"DIV",{class:!0});var Fa=s(Ze);T(ix.$$.fragment,Fa),h7o=i(Fa),uue=n(Fa,"P",{});var DAt=s(uue);u7o=r(DAt,"Instantiate one of the base model classes of the library from a pretrained model."),DAt.forEach(t),p7o=i(Fa),Ja=n(Fa,"P",{});var yy=s(Ja);_7o=r(yy,"The model class to instantiate is selected based on the "),pue=n(yy,"CODE",{});var GAt=s(pue);b7o=r(GAt,"model_type"),GAt.forEach(t),v7o=r(yy,` property of the config object (either
passed as an argument or loaded from `),_ue=n(yy,"CODE",{});var OAt=s(_ue);F7o=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),T7o=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(yy,"CODE",{});var VAt=s(bue);M7o=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),E7o=r(yy,":"),yy.forEach(t),C7o=i(Fa),y=n(Fa,"UL",{});var x=s(y);Yp=n(x,"LI",{});var sIe=s(Yp);vue=n(sIe,"STRONG",{});var XAt=s(vue);w7o=r(XAt,"albert"),XAt.forEach(t),A7o=r(sIe," \u2014 "),TO=n(sIe,"A",{href:!0});var zAt=s(TO);L7o=r(zAt,"AlbertModel"),zAt.forEach(t),y7o=r(sIe," (ALBERT model)"),sIe.forEach(t),x7o=i(x),Kp=n(x,"LI",{});var lIe=s(Kp);Fue=n(lIe,"STRONG",{});var QAt=s(Fue);$7o=r(QAt,"bart"),QAt.forEach(t),k7o=r(lIe," \u2014 "),MO=n(lIe,"A",{href:!0});var WAt=s(MO);S7o=r(WAt,"BartModel"),WAt.forEach(t),R7o=r(lIe," (BART model)"),lIe.forEach(t),P7o=i(x),Zp=n(x,"LI",{});var iIe=s(Zp);Tue=n(iIe,"STRONG",{});var UAt=s(Tue);B7o=r(UAt,"beit"),UAt.forEach(t),I7o=r(iIe," \u2014 "),EO=n(iIe,"A",{href:!0});var HAt=s(EO);N7o=r(HAt,"BeitModel"),HAt.forEach(t),q7o=r(iIe," (BEiT model)"),iIe.forEach(t),j7o=i(x),e_=n(x,"LI",{});var dIe=s(e_);Mue=n(dIe,"STRONG",{});var JAt=s(Mue);D7o=r(JAt,"bert"),JAt.forEach(t),G7o=r(dIe," \u2014 "),CO=n(dIe,"A",{href:!0});var YAt=s(CO);O7o=r(YAt,"BertModel"),YAt.forEach(t),V7o=r(dIe," (BERT model)"),dIe.forEach(t),X7o=i(x),o_=n(x,"LI",{});var cIe=s(o_);Eue=n(cIe,"STRONG",{});var KAt=s(Eue);z7o=r(KAt,"bert-generation"),KAt.forEach(t),Q7o=r(cIe," \u2014 "),wO=n(cIe,"A",{href:!0});var ZAt=s(wO);W7o=r(ZAt,"BertGenerationEncoder"),ZAt.forEach(t),U7o=r(cIe," (Bert Generation model)"),cIe.forEach(t),H7o=i(x),r_=n(x,"LI",{});var mIe=s(r_);Cue=n(mIe,"STRONG",{});var e6t=s(Cue);J7o=r(e6t,"big_bird"),e6t.forEach(t),Y7o=r(mIe," \u2014 "),AO=n(mIe,"A",{href:!0});var o6t=s(AO);K7o=r(o6t,"BigBirdModel"),o6t.forEach(t),Z7o=r(mIe," (BigBird model)"),mIe.forEach(t),eLo=i(x),t_=n(x,"LI",{});var fIe=s(t_);wue=n(fIe,"STRONG",{});var r6t=s(wue);oLo=r(r6t,"bigbird_pegasus"),r6t.forEach(t),rLo=r(fIe," \u2014 "),LO=n(fIe,"A",{href:!0});var t6t=s(LO);tLo=r(t6t,"BigBirdPegasusModel"),t6t.forEach(t),aLo=r(fIe," (BigBird-Pegasus model)"),fIe.forEach(t),nLo=i(x),a_=n(x,"LI",{});var gIe=s(a_);Aue=n(gIe,"STRONG",{});var a6t=s(Aue);sLo=r(a6t,"blenderbot"),a6t.forEach(t),lLo=r(gIe," \u2014 "),yO=n(gIe,"A",{href:!0});var n6t=s(yO);iLo=r(n6t,"BlenderbotModel"),n6t.forEach(t),dLo=r(gIe," (Blenderbot model)"),gIe.forEach(t),cLo=i(x),n_=n(x,"LI",{});var hIe=s(n_);Lue=n(hIe,"STRONG",{});var s6t=s(Lue);mLo=r(s6t,"blenderbot-small"),s6t.forEach(t),fLo=r(hIe," \u2014 "),xO=n(hIe,"A",{href:!0});var l6t=s(xO);gLo=r(l6t,"BlenderbotSmallModel"),l6t.forEach(t),hLo=r(hIe," (BlenderbotSmall model)"),hIe.forEach(t),uLo=i(x),s_=n(x,"LI",{});var uIe=s(s_);yue=n(uIe,"STRONG",{});var i6t=s(yue);pLo=r(i6t,"bloom"),i6t.forEach(t),_Lo=r(uIe," \u2014 "),$O=n(uIe,"A",{href:!0});var d6t=s($O);bLo=r(d6t,"BloomModel"),d6t.forEach(t),vLo=r(uIe," (BLOOM model)"),uIe.forEach(t),FLo=i(x),l_=n(x,"LI",{});var pIe=s(l_);xue=n(pIe,"STRONG",{});var c6t=s(xue);TLo=r(c6t,"camembert"),c6t.forEach(t),MLo=r(pIe," \u2014 "),kO=n(pIe,"A",{href:!0});var m6t=s(kO);ELo=r(m6t,"CamembertModel"),m6t.forEach(t),CLo=r(pIe," (CamemBERT model)"),pIe.forEach(t),wLo=i(x),i_=n(x,"LI",{});var _Ie=s(i_);$ue=n(_Ie,"STRONG",{});var f6t=s($ue);ALo=r(f6t,"canine"),f6t.forEach(t),LLo=r(_Ie," \u2014 "),SO=n(_Ie,"A",{href:!0});var g6t=s(SO);yLo=r(g6t,"CanineModel"),g6t.forEach(t),xLo=r(_Ie," (CANINE model)"),_Ie.forEach(t),$Lo=i(x),d_=n(x,"LI",{});var bIe=s(d_);kue=n(bIe,"STRONG",{});var h6t=s(kue);kLo=r(h6t,"clip"),h6t.forEach(t),SLo=r(bIe," \u2014 "),RO=n(bIe,"A",{href:!0});var u6t=s(RO);RLo=r(u6t,"CLIPModel"),u6t.forEach(t),PLo=r(bIe," (CLIP model)"),bIe.forEach(t),BLo=i(x),c_=n(x,"LI",{});var vIe=s(c_);Sue=n(vIe,"STRONG",{});var p6t=s(Sue);ILo=r(p6t,"codegen"),p6t.forEach(t),NLo=r(vIe," \u2014 "),PO=n(vIe,"A",{href:!0});var _6t=s(PO);qLo=r(_6t,"CodeGenModel"),_6t.forEach(t),jLo=r(vIe," (CodeGen model)"),vIe.forEach(t),DLo=i(x),m_=n(x,"LI",{});var FIe=s(m_);Rue=n(FIe,"STRONG",{});var b6t=s(Rue);GLo=r(b6t,"convbert"),b6t.forEach(t),OLo=r(FIe," \u2014 "),BO=n(FIe,"A",{href:!0});var v6t=s(BO);VLo=r(v6t,"ConvBertModel"),v6t.forEach(t),XLo=r(FIe," (ConvBERT model)"),FIe.forEach(t),zLo=i(x),f_=n(x,"LI",{});var TIe=s(f_);Pue=n(TIe,"STRONG",{});var F6t=s(Pue);QLo=r(F6t,"convnext"),F6t.forEach(t),WLo=r(TIe," \u2014 "),IO=n(TIe,"A",{href:!0});var T6t=s(IO);ULo=r(T6t,"ConvNextModel"),T6t.forEach(t),HLo=r(TIe," (ConvNeXT model)"),TIe.forEach(t),JLo=i(x),g_=n(x,"LI",{});var MIe=s(g_);Bue=n(MIe,"STRONG",{});var M6t=s(Bue);YLo=r(M6t,"ctrl"),M6t.forEach(t),KLo=r(MIe," \u2014 "),NO=n(MIe,"A",{href:!0});var E6t=s(NO);ZLo=r(E6t,"CTRLModel"),E6t.forEach(t),eyo=r(MIe," (CTRL model)"),MIe.forEach(t),oyo=i(x),h_=n(x,"LI",{});var EIe=s(h_);Iue=n(EIe,"STRONG",{});var C6t=s(Iue);ryo=r(C6t,"cvt"),C6t.forEach(t),tyo=r(EIe," \u2014 "),qO=n(EIe,"A",{href:!0});var w6t=s(qO);ayo=r(w6t,"CvtModel"),w6t.forEach(t),nyo=r(EIe," (CvT model)"),EIe.forEach(t),syo=i(x),u_=n(x,"LI",{});var CIe=s(u_);Nue=n(CIe,"STRONG",{});var A6t=s(Nue);lyo=r(A6t,"data2vec-audio"),A6t.forEach(t),iyo=r(CIe," \u2014 "),jO=n(CIe,"A",{href:!0});var L6t=s(jO);dyo=r(L6t,"Data2VecAudioModel"),L6t.forEach(t),cyo=r(CIe," (Data2VecAudio model)"),CIe.forEach(t),myo=i(x),p_=n(x,"LI",{});var wIe=s(p_);que=n(wIe,"STRONG",{});var y6t=s(que);fyo=r(y6t,"data2vec-text"),y6t.forEach(t),gyo=r(wIe," \u2014 "),DO=n(wIe,"A",{href:!0});var x6t=s(DO);hyo=r(x6t,"Data2VecTextModel"),x6t.forEach(t),uyo=r(wIe," (Data2VecText model)"),wIe.forEach(t),pyo=i(x),__=n(x,"LI",{});var AIe=s(__);jue=n(AIe,"STRONG",{});var $6t=s(jue);_yo=r($6t,"data2vec-vision"),$6t.forEach(t),byo=r(AIe," \u2014 "),GO=n(AIe,"A",{href:!0});var k6t=s(GO);vyo=r(k6t,"Data2VecVisionModel"),k6t.forEach(t),Fyo=r(AIe," (Data2VecVision model)"),AIe.forEach(t),Tyo=i(x),b_=n(x,"LI",{});var LIe=s(b_);Due=n(LIe,"STRONG",{});var S6t=s(Due);Myo=r(S6t,"deberta"),S6t.forEach(t),Eyo=r(LIe," \u2014 "),OO=n(LIe,"A",{href:!0});var R6t=s(OO);Cyo=r(R6t,"DebertaModel"),R6t.forEach(t),wyo=r(LIe," (DeBERTa model)"),LIe.forEach(t),Ayo=i(x),v_=n(x,"LI",{});var yIe=s(v_);Gue=n(yIe,"STRONG",{});var P6t=s(Gue);Lyo=r(P6t,"deberta-v2"),P6t.forEach(t),yyo=r(yIe," \u2014 "),VO=n(yIe,"A",{href:!0});var B6t=s(VO);xyo=r(B6t,"DebertaV2Model"),B6t.forEach(t),$yo=r(yIe," (DeBERTa-v2 model)"),yIe.forEach(t),kyo=i(x),F_=n(x,"LI",{});var xIe=s(F_);Oue=n(xIe,"STRONG",{});var I6t=s(Oue);Syo=r(I6t,"decision_transformer"),I6t.forEach(t),Ryo=r(xIe," \u2014 "),XO=n(xIe,"A",{href:!0});var N6t=s(XO);Pyo=r(N6t,"DecisionTransformerModel"),N6t.forEach(t),Byo=r(xIe," (Decision Transformer model)"),xIe.forEach(t),Iyo=i(x),T_=n(x,"LI",{});var $Ie=s(T_);Vue=n($Ie,"STRONG",{});var q6t=s(Vue);Nyo=r(q6t,"deformable_detr"),q6t.forEach(t),qyo=r($Ie," \u2014 "),zO=n($Ie,"A",{href:!0});var j6t=s(zO);jyo=r(j6t,"DeformableDetrModel"),j6t.forEach(t),Dyo=r($Ie," (Deformable DETR model)"),$Ie.forEach(t),Gyo=i(x),M_=n(x,"LI",{});var kIe=s(M_);Xue=n(kIe,"STRONG",{});var D6t=s(Xue);Oyo=r(D6t,"deit"),D6t.forEach(t),Vyo=r(kIe," \u2014 "),QO=n(kIe,"A",{href:!0});var G6t=s(QO);Xyo=r(G6t,"DeiTModel"),G6t.forEach(t),zyo=r(kIe," (DeiT model)"),kIe.forEach(t),Qyo=i(x),E_=n(x,"LI",{});var SIe=s(E_);zue=n(SIe,"STRONG",{});var O6t=s(zue);Wyo=r(O6t,"detr"),O6t.forEach(t),Uyo=r(SIe," \u2014 "),WO=n(SIe,"A",{href:!0});var V6t=s(WO);Hyo=r(V6t,"DetrModel"),V6t.forEach(t),Jyo=r(SIe," (DETR model)"),SIe.forEach(t),Yyo=i(x),C_=n(x,"LI",{});var RIe=s(C_);Que=n(RIe,"STRONG",{});var X6t=s(Que);Kyo=r(X6t,"distilbert"),X6t.forEach(t),Zyo=r(RIe," \u2014 "),UO=n(RIe,"A",{href:!0});var z6t=s(UO);e8o=r(z6t,"DistilBertModel"),z6t.forEach(t),o8o=r(RIe," (DistilBERT model)"),RIe.forEach(t),r8o=i(x),w_=n(x,"LI",{});var PIe=s(w_);Wue=n(PIe,"STRONG",{});var Q6t=s(Wue);t8o=r(Q6t,"donut-swin"),Q6t.forEach(t),a8o=r(PIe," \u2014 "),HO=n(PIe,"A",{href:!0});var W6t=s(HO);n8o=r(W6t,"DonutSwinModel"),W6t.forEach(t),s8o=r(PIe," (DonutSwin model)"),PIe.forEach(t),l8o=i(x),A_=n(x,"LI",{});var BIe=s(A_);Uue=n(BIe,"STRONG",{});var U6t=s(Uue);i8o=r(U6t,"dpr"),U6t.forEach(t),d8o=r(BIe," \u2014 "),JO=n(BIe,"A",{href:!0});var H6t=s(JO);c8o=r(H6t,"DPRQuestionEncoder"),H6t.forEach(t),m8o=r(BIe," (DPR model)"),BIe.forEach(t),f8o=i(x),L_=n(x,"LI",{});var IIe=s(L_);Hue=n(IIe,"STRONG",{});var J6t=s(Hue);g8o=r(J6t,"dpt"),J6t.forEach(t),h8o=r(IIe," \u2014 "),YO=n(IIe,"A",{href:!0});var Y6t=s(YO);u8o=r(Y6t,"DPTModel"),Y6t.forEach(t),p8o=r(IIe," (DPT model)"),IIe.forEach(t),_8o=i(x),y_=n(x,"LI",{});var NIe=s(y_);Jue=n(NIe,"STRONG",{});var K6t=s(Jue);b8o=r(K6t,"electra"),K6t.forEach(t),v8o=r(NIe," \u2014 "),KO=n(NIe,"A",{href:!0});var Z6t=s(KO);F8o=r(Z6t,"ElectraModel"),Z6t.forEach(t),T8o=r(NIe," (ELECTRA model)"),NIe.forEach(t),M8o=i(x),x_=n(x,"LI",{});var qIe=s(x_);Yue=n(qIe,"STRONG",{});var e7t=s(Yue);E8o=r(e7t,"ernie"),e7t.forEach(t),C8o=r(qIe," \u2014 "),ZO=n(qIe,"A",{href:!0});var o7t=s(ZO);w8o=r(o7t,"ErnieModel"),o7t.forEach(t),A8o=r(qIe," (ERNIE model)"),qIe.forEach(t),L8o=i(x),$_=n(x,"LI",{});var jIe=s($_);Kue=n(jIe,"STRONG",{});var r7t=s(Kue);y8o=r(r7t,"flaubert"),r7t.forEach(t),x8o=r(jIe," \u2014 "),eV=n(jIe,"A",{href:!0});var t7t=s(eV);$8o=r(t7t,"FlaubertModel"),t7t.forEach(t),k8o=r(jIe," (FlauBERT model)"),jIe.forEach(t),S8o=i(x),k_=n(x,"LI",{});var DIe=s(k_);Zue=n(DIe,"STRONG",{});var a7t=s(Zue);R8o=r(a7t,"flava"),a7t.forEach(t),P8o=r(DIe," \u2014 "),oV=n(DIe,"A",{href:!0});var n7t=s(oV);B8o=r(n7t,"FlavaModel"),n7t.forEach(t),I8o=r(DIe," (FLAVA model)"),DIe.forEach(t),N8o=i(x),S_=n(x,"LI",{});var GIe=s(S_);epe=n(GIe,"STRONG",{});var s7t=s(epe);q8o=r(s7t,"fnet"),s7t.forEach(t),j8o=r(GIe," \u2014 "),rV=n(GIe,"A",{href:!0});var l7t=s(rV);D8o=r(l7t,"FNetModel"),l7t.forEach(t),G8o=r(GIe," (FNet model)"),GIe.forEach(t),O8o=i(x),R_=n(x,"LI",{});var OIe=s(R_);ope=n(OIe,"STRONG",{});var i7t=s(ope);V8o=r(i7t,"fsmt"),i7t.forEach(t),X8o=r(OIe," \u2014 "),tV=n(OIe,"A",{href:!0});var d7t=s(tV);z8o=r(d7t,"FSMTModel"),d7t.forEach(t),Q8o=r(OIe," (FairSeq Machine-Translation model)"),OIe.forEach(t),W8o=i(x),pl=n(x,"LI",{});var LB=s(pl);rpe=n(LB,"STRONG",{});var c7t=s(rpe);U8o=r(c7t,"funnel"),c7t.forEach(t),H8o=r(LB," \u2014 "),aV=n(LB,"A",{href:!0});var m7t=s(aV);J8o=r(m7t,"FunnelModel"),m7t.forEach(t),Y8o=r(LB," or "),nV=n(LB,"A",{href:!0});var f7t=s(nV);K8o=r(f7t,"FunnelBaseModel"),f7t.forEach(t),Z8o=r(LB," (Funnel Transformer model)"),LB.forEach(t),e9o=i(x),P_=n(x,"LI",{});var VIe=s(P_);tpe=n(VIe,"STRONG",{});var g7t=s(tpe);o9o=r(g7t,"glpn"),g7t.forEach(t),r9o=r(VIe," \u2014 "),sV=n(VIe,"A",{href:!0});var h7t=s(sV);t9o=r(h7t,"GLPNModel"),h7t.forEach(t),a9o=r(VIe," (GLPN model)"),VIe.forEach(t),n9o=i(x),B_=n(x,"LI",{});var XIe=s(B_);ape=n(XIe,"STRONG",{});var u7t=s(ape);s9o=r(u7t,"gpt2"),u7t.forEach(t),l9o=r(XIe," \u2014 "),lV=n(XIe,"A",{href:!0});var p7t=s(lV);i9o=r(p7t,"GPT2Model"),p7t.forEach(t),d9o=r(XIe," (OpenAI GPT-2 model)"),XIe.forEach(t),c9o=i(x),I_=n(x,"LI",{});var zIe=s(I_);npe=n(zIe,"STRONG",{});var _7t=s(npe);m9o=r(_7t,"gpt_neo"),_7t.forEach(t),f9o=r(zIe," \u2014 "),iV=n(zIe,"A",{href:!0});var b7t=s(iV);g9o=r(b7t,"GPTNeoModel"),b7t.forEach(t),h9o=r(zIe," (GPT Neo model)"),zIe.forEach(t),u9o=i(x),N_=n(x,"LI",{});var QIe=s(N_);spe=n(QIe,"STRONG",{});var v7t=s(spe);p9o=r(v7t,"gpt_neox"),v7t.forEach(t),_9o=r(QIe," \u2014 "),dV=n(QIe,"A",{href:!0});var F7t=s(dV);b9o=r(F7t,"GPTNeoXModel"),F7t.forEach(t),v9o=r(QIe," (GPT NeoX model)"),QIe.forEach(t),F9o=i(x),q_=n(x,"LI",{});var WIe=s(q_);lpe=n(WIe,"STRONG",{});var T7t=s(lpe);T9o=r(T7t,"gpt_neox_japanese"),T7t.forEach(t),M9o=r(WIe," \u2014 "),cV=n(WIe,"A",{href:!0});var M7t=s(cV);E9o=r(M7t,"GPTNeoXJapaneseModel"),M7t.forEach(t),C9o=r(WIe," (GPT NeoX Japanese model)"),WIe.forEach(t),w9o=i(x),j_=n(x,"LI",{});var UIe=s(j_);ipe=n(UIe,"STRONG",{});var E7t=s(ipe);A9o=r(E7t,"gptj"),E7t.forEach(t),L9o=r(UIe," \u2014 "),mV=n(UIe,"A",{href:!0});var C7t=s(mV);y9o=r(C7t,"GPTJModel"),C7t.forEach(t),x9o=r(UIe," (GPT-J model)"),UIe.forEach(t),$9o=i(x),D_=n(x,"LI",{});var HIe=s(D_);dpe=n(HIe,"STRONG",{});var w7t=s(dpe);k9o=r(w7t,"groupvit"),w7t.forEach(t),S9o=r(HIe," \u2014 "),fV=n(HIe,"A",{href:!0});var A7t=s(fV);R9o=r(A7t,"GroupViTModel"),A7t.forEach(t),P9o=r(HIe," (GroupViT model)"),HIe.forEach(t),B9o=i(x),G_=n(x,"LI",{});var JIe=s(G_);cpe=n(JIe,"STRONG",{});var L7t=s(cpe);I9o=r(L7t,"hubert"),L7t.forEach(t),N9o=r(JIe," \u2014 "),gV=n(JIe,"A",{href:!0});var y7t=s(gV);q9o=r(y7t,"HubertModel"),y7t.forEach(t),j9o=r(JIe," (Hubert model)"),JIe.forEach(t),D9o=i(x),O_=n(x,"LI",{});var YIe=s(O_);mpe=n(YIe,"STRONG",{});var x7t=s(mpe);G9o=r(x7t,"ibert"),x7t.forEach(t),O9o=r(YIe," \u2014 "),hV=n(YIe,"A",{href:!0});var $7t=s(hV);V9o=r($7t,"IBertModel"),$7t.forEach(t),X9o=r(YIe," (I-BERT model)"),YIe.forEach(t),z9o=i(x),V_=n(x,"LI",{});var KIe=s(V_);fpe=n(KIe,"STRONG",{});var k7t=s(fpe);Q9o=r(k7t,"imagegpt"),k7t.forEach(t),W9o=r(KIe," \u2014 "),uV=n(KIe,"A",{href:!0});var S7t=s(uV);U9o=r(S7t,"ImageGPTModel"),S7t.forEach(t),H9o=r(KIe," (ImageGPT model)"),KIe.forEach(t),J9o=i(x),X_=n(x,"LI",{});var ZIe=s(X_);gpe=n(ZIe,"STRONG",{});var R7t=s(gpe);Y9o=r(R7t,"layoutlm"),R7t.forEach(t),K9o=r(ZIe," \u2014 "),pV=n(ZIe,"A",{href:!0});var P7t=s(pV);Z9o=r(P7t,"LayoutLMModel"),P7t.forEach(t),exo=r(ZIe," (LayoutLM model)"),ZIe.forEach(t),oxo=i(x),z_=n(x,"LI",{});var eNe=s(z_);hpe=n(eNe,"STRONG",{});var B7t=s(hpe);rxo=r(B7t,"layoutlmv2"),B7t.forEach(t),txo=r(eNe," \u2014 "),_V=n(eNe,"A",{href:!0});var I7t=s(_V);axo=r(I7t,"LayoutLMv2Model"),I7t.forEach(t),nxo=r(eNe," (LayoutLMv2 model)"),eNe.forEach(t),sxo=i(x),Q_=n(x,"LI",{});var oNe=s(Q_);upe=n(oNe,"STRONG",{});var N7t=s(upe);lxo=r(N7t,"layoutlmv3"),N7t.forEach(t),ixo=r(oNe," \u2014 "),bV=n(oNe,"A",{href:!0});var q7t=s(bV);dxo=r(q7t,"LayoutLMv3Model"),q7t.forEach(t),cxo=r(oNe," (LayoutLMv3 model)"),oNe.forEach(t),mxo=i(x),W_=n(x,"LI",{});var rNe=s(W_);ppe=n(rNe,"STRONG",{});var j7t=s(ppe);fxo=r(j7t,"led"),j7t.forEach(t),gxo=r(rNe," \u2014 "),vV=n(rNe,"A",{href:!0});var D7t=s(vV);hxo=r(D7t,"LEDModel"),D7t.forEach(t),uxo=r(rNe," (LED model)"),rNe.forEach(t),pxo=i(x),U_=n(x,"LI",{});var tNe=s(U_);_pe=n(tNe,"STRONG",{});var G7t=s(_pe);_xo=r(G7t,"levit"),G7t.forEach(t),bxo=r(tNe," \u2014 "),FV=n(tNe,"A",{href:!0});var O7t=s(FV);vxo=r(O7t,"LevitModel"),O7t.forEach(t),Fxo=r(tNe," (LeViT model)"),tNe.forEach(t),Txo=i(x),H_=n(x,"LI",{});var aNe=s(H_);bpe=n(aNe,"STRONG",{});var V7t=s(bpe);Mxo=r(V7t,"longformer"),V7t.forEach(t),Exo=r(aNe," \u2014 "),TV=n(aNe,"A",{href:!0});var X7t=s(TV);Cxo=r(X7t,"LongformerModel"),X7t.forEach(t),wxo=r(aNe," (Longformer model)"),aNe.forEach(t),Axo=i(x),J_=n(x,"LI",{});var nNe=s(J_);vpe=n(nNe,"STRONG",{});var z7t=s(vpe);Lxo=r(z7t,"longt5"),z7t.forEach(t),yxo=r(nNe," \u2014 "),MV=n(nNe,"A",{href:!0});var Q7t=s(MV);xxo=r(Q7t,"LongT5Model"),Q7t.forEach(t),$xo=r(nNe," (LongT5 model)"),nNe.forEach(t),kxo=i(x),Y_=n(x,"LI",{});var sNe=s(Y_);Fpe=n(sNe,"STRONG",{});var W7t=s(Fpe);Sxo=r(W7t,"luke"),W7t.forEach(t),Rxo=r(sNe," \u2014 "),EV=n(sNe,"A",{href:!0});var U7t=s(EV);Pxo=r(U7t,"LukeModel"),U7t.forEach(t),Bxo=r(sNe," (LUKE model)"),sNe.forEach(t),Ixo=i(x),K_=n(x,"LI",{});var lNe=s(K_);Tpe=n(lNe,"STRONG",{});var H7t=s(Tpe);Nxo=r(H7t,"lxmert"),H7t.forEach(t),qxo=r(lNe," \u2014 "),CV=n(lNe,"A",{href:!0});var J7t=s(CV);jxo=r(J7t,"LxmertModel"),J7t.forEach(t),Dxo=r(lNe," (LXMERT model)"),lNe.forEach(t),Gxo=i(x),Z_=n(x,"LI",{});var iNe=s(Z_);Mpe=n(iNe,"STRONG",{});var Y7t=s(Mpe);Oxo=r(Y7t,"m2m_100"),Y7t.forEach(t),Vxo=r(iNe," \u2014 "),wV=n(iNe,"A",{href:!0});var K7t=s(wV);Xxo=r(K7t,"M2M100Model"),K7t.forEach(t),zxo=r(iNe," (M2M100 model)"),iNe.forEach(t),Qxo=i(x),eb=n(x,"LI",{});var dNe=s(eb);Epe=n(dNe,"STRONG",{});var Z7t=s(Epe);Wxo=r(Z7t,"marian"),Z7t.forEach(t),Uxo=r(dNe," \u2014 "),AV=n(dNe,"A",{href:!0});var eLt=s(AV);Hxo=r(eLt,"MarianModel"),eLt.forEach(t),Jxo=r(dNe," (Marian model)"),dNe.forEach(t),Yxo=i(x),ob=n(x,"LI",{});var cNe=s(ob);Cpe=n(cNe,"STRONG",{});var oLt=s(Cpe);Kxo=r(oLt,"maskformer"),oLt.forEach(t),Zxo=r(cNe," \u2014 "),LV=n(cNe,"A",{href:!0});var rLt=s(LV);e$o=r(rLt,"MaskFormerModel"),rLt.forEach(t),o$o=r(cNe," (MaskFormer model)"),cNe.forEach(t),r$o=i(x),rb=n(x,"LI",{});var mNe=s(rb);wpe=n(mNe,"STRONG",{});var tLt=s(wpe);t$o=r(tLt,"mbart"),tLt.forEach(t),a$o=r(mNe," \u2014 "),yV=n(mNe,"A",{href:!0});var aLt=s(yV);n$o=r(aLt,"MBartModel"),aLt.forEach(t),s$o=r(mNe," (mBART model)"),mNe.forEach(t),l$o=i(x),tb=n(x,"LI",{});var fNe=s(tb);Ape=n(fNe,"STRONG",{});var nLt=s(Ape);i$o=r(nLt,"mctct"),nLt.forEach(t),d$o=r(fNe," \u2014 "),xV=n(fNe,"A",{href:!0});var sLt=s(xV);c$o=r(sLt,"MCTCTModel"),sLt.forEach(t),m$o=r(fNe," (M-CTC-T model)"),fNe.forEach(t),f$o=i(x),ab=n(x,"LI",{});var gNe=s(ab);Lpe=n(gNe,"STRONG",{});var lLt=s(Lpe);g$o=r(lLt,"megatron-bert"),lLt.forEach(t),h$o=r(gNe," \u2014 "),$V=n(gNe,"A",{href:!0});var iLt=s($V);u$o=r(iLt,"MegatronBertModel"),iLt.forEach(t),p$o=r(gNe," (Megatron-BERT model)"),gNe.forEach(t),_$o=i(x),nb=n(x,"LI",{});var hNe=s(nb);ype=n(hNe,"STRONG",{});var dLt=s(ype);b$o=r(dLt,"mobilebert"),dLt.forEach(t),v$o=r(hNe," \u2014 "),kV=n(hNe,"A",{href:!0});var cLt=s(kV);F$o=r(cLt,"MobileBertModel"),cLt.forEach(t),T$o=r(hNe," (MobileBERT model)"),hNe.forEach(t),M$o=i(x),sb=n(x,"LI",{});var uNe=s(sb);xpe=n(uNe,"STRONG",{});var mLt=s(xpe);E$o=r(mLt,"mobilevit"),mLt.forEach(t),C$o=r(uNe," \u2014 "),SV=n(uNe,"A",{href:!0});var fLt=s(SV);w$o=r(fLt,"MobileViTModel"),fLt.forEach(t),A$o=r(uNe," (MobileViT model)"),uNe.forEach(t),L$o=i(x),lb=n(x,"LI",{});var pNe=s(lb);$pe=n(pNe,"STRONG",{});var gLt=s($pe);y$o=r(gLt,"mpnet"),gLt.forEach(t),x$o=r(pNe," \u2014 "),RV=n(pNe,"A",{href:!0});var hLt=s(RV);$$o=r(hLt,"MPNetModel"),hLt.forEach(t),k$o=r(pNe," (MPNet model)"),pNe.forEach(t),S$o=i(x),ib=n(x,"LI",{});var _Ne=s(ib);kpe=n(_Ne,"STRONG",{});var uLt=s(kpe);R$o=r(uLt,"mt5"),uLt.forEach(t),P$o=r(_Ne," \u2014 "),PV=n(_Ne,"A",{href:!0});var pLt=s(PV);B$o=r(pLt,"MT5Model"),pLt.forEach(t),I$o=r(_Ne," (MT5 model)"),_Ne.forEach(t),N$o=i(x),db=n(x,"LI",{});var bNe=s(db);Spe=n(bNe,"STRONG",{});var _Lt=s(Spe);q$o=r(_Lt,"mvp"),_Lt.forEach(t),j$o=r(bNe," \u2014 "),BV=n(bNe,"A",{href:!0});var bLt=s(BV);D$o=r(bLt,"MvpModel"),bLt.forEach(t),G$o=r(bNe," (MVP model)"),bNe.forEach(t),O$o=i(x),cb=n(x,"LI",{});var vNe=s(cb);Rpe=n(vNe,"STRONG",{});var vLt=s(Rpe);V$o=r(vLt,"nezha"),vLt.forEach(t),X$o=r(vNe," \u2014 "),IV=n(vNe,"A",{href:!0});var FLt=s(IV);z$o=r(FLt,"NezhaModel"),FLt.forEach(t),Q$o=r(vNe," (Nezha model)"),vNe.forEach(t),W$o=i(x),mb=n(x,"LI",{});var FNe=s(mb);Ppe=n(FNe,"STRONG",{});var TLt=s(Ppe);U$o=r(TLt,"nllb"),TLt.forEach(t),H$o=r(FNe," \u2014 "),NV=n(FNe,"A",{href:!0});var MLt=s(NV);J$o=r(MLt,"M2M100Model"),MLt.forEach(t),Y$o=r(FNe," (NLLB model)"),FNe.forEach(t),K$o=i(x),fb=n(x,"LI",{});var TNe=s(fb);Bpe=n(TNe,"STRONG",{});var ELt=s(Bpe);Z$o=r(ELt,"nystromformer"),ELt.forEach(t),eko=r(TNe," \u2014 "),qV=n(TNe,"A",{href:!0});var CLt=s(qV);oko=r(CLt,"NystromformerModel"),CLt.forEach(t),rko=r(TNe," (Nystr\xF6mformer model)"),TNe.forEach(t),tko=i(x),gb=n(x,"LI",{});var MNe=s(gb);Ipe=n(MNe,"STRONG",{});var wLt=s(Ipe);ako=r(wLt,"openai-gpt"),wLt.forEach(t),nko=r(MNe," \u2014 "),jV=n(MNe,"A",{href:!0});var ALt=s(jV);sko=r(ALt,"OpenAIGPTModel"),ALt.forEach(t),lko=r(MNe," (OpenAI GPT model)"),MNe.forEach(t),iko=i(x),hb=n(x,"LI",{});var ENe=s(hb);Npe=n(ENe,"STRONG",{});var LLt=s(Npe);dko=r(LLt,"opt"),LLt.forEach(t),cko=r(ENe," \u2014 "),DV=n(ENe,"A",{href:!0});var yLt=s(DV);mko=r(yLt,"OPTModel"),yLt.forEach(t),fko=r(ENe," (OPT model)"),ENe.forEach(t),gko=i(x),ub=n(x,"LI",{});var CNe=s(ub);qpe=n(CNe,"STRONG",{});var xLt=s(qpe);hko=r(xLt,"owlvit"),xLt.forEach(t),uko=r(CNe," \u2014 "),GV=n(CNe,"A",{href:!0});var $Lt=s(GV);pko=r($Lt,"OwlViTModel"),$Lt.forEach(t),_ko=r(CNe," (OWL-ViT model)"),CNe.forEach(t),bko=i(x),pb=n(x,"LI",{});var wNe=s(pb);jpe=n(wNe,"STRONG",{});var kLt=s(jpe);vko=r(kLt,"pegasus"),kLt.forEach(t),Fko=r(wNe," \u2014 "),OV=n(wNe,"A",{href:!0});var SLt=s(OV);Tko=r(SLt,"PegasusModel"),SLt.forEach(t),Mko=r(wNe," (Pegasus model)"),wNe.forEach(t),Eko=i(x),_b=n(x,"LI",{});var ANe=s(_b);Dpe=n(ANe,"STRONG",{});var RLt=s(Dpe);Cko=r(RLt,"pegasus_x"),RLt.forEach(t),wko=r(ANe," \u2014 "),VV=n(ANe,"A",{href:!0});var PLt=s(VV);Ako=r(PLt,"PegasusXModel"),PLt.forEach(t),Lko=r(ANe," (PEGASUS-X model)"),ANe.forEach(t),yko=i(x),bb=n(x,"LI",{});var LNe=s(bb);Gpe=n(LNe,"STRONG",{});var BLt=s(Gpe);xko=r(BLt,"perceiver"),BLt.forEach(t),$ko=r(LNe," \u2014 "),XV=n(LNe,"A",{href:!0});var ILt=s(XV);kko=r(ILt,"PerceiverModel"),ILt.forEach(t),Sko=r(LNe," (Perceiver model)"),LNe.forEach(t),Rko=i(x),vb=n(x,"LI",{});var yNe=s(vb);Ope=n(yNe,"STRONG",{});var NLt=s(Ope);Pko=r(NLt,"plbart"),NLt.forEach(t),Bko=r(yNe," \u2014 "),zV=n(yNe,"A",{href:!0});var qLt=s(zV);Iko=r(qLt,"PLBartModel"),qLt.forEach(t),Nko=r(yNe," (PLBart model)"),yNe.forEach(t),qko=i(x),Fb=n(x,"LI",{});var xNe=s(Fb);Vpe=n(xNe,"STRONG",{});var jLt=s(Vpe);jko=r(jLt,"poolformer"),jLt.forEach(t),Dko=r(xNe," \u2014 "),QV=n(xNe,"A",{href:!0});var DLt=s(QV);Gko=r(DLt,"PoolFormerModel"),DLt.forEach(t),Oko=r(xNe," (PoolFormer model)"),xNe.forEach(t),Vko=i(x),Tb=n(x,"LI",{});var $Ne=s(Tb);Xpe=n($Ne,"STRONG",{});var GLt=s(Xpe);Xko=r(GLt,"prophetnet"),GLt.forEach(t),zko=r($Ne," \u2014 "),WV=n($Ne,"A",{href:!0});var OLt=s(WV);Qko=r(OLt,"ProphetNetModel"),OLt.forEach(t),Wko=r($Ne," (ProphetNet model)"),$Ne.forEach(t),Uko=i(x),Mb=n(x,"LI",{});var kNe=s(Mb);zpe=n(kNe,"STRONG",{});var VLt=s(zpe);Hko=r(VLt,"qdqbert"),VLt.forEach(t),Jko=r(kNe," \u2014 "),UV=n(kNe,"A",{href:!0});var XLt=s(UV);Yko=r(XLt,"QDQBertModel"),XLt.forEach(t),Kko=r(kNe," (QDQBert model)"),kNe.forEach(t),Zko=i(x),Eb=n(x,"LI",{});var SNe=s(Eb);Qpe=n(SNe,"STRONG",{});var zLt=s(Qpe);eSo=r(zLt,"reformer"),zLt.forEach(t),oSo=r(SNe," \u2014 "),HV=n(SNe,"A",{href:!0});var QLt=s(HV);rSo=r(QLt,"ReformerModel"),QLt.forEach(t),tSo=r(SNe," (Reformer model)"),SNe.forEach(t),aSo=i(x),Cb=n(x,"LI",{});var RNe=s(Cb);Wpe=n(RNe,"STRONG",{});var WLt=s(Wpe);nSo=r(WLt,"regnet"),WLt.forEach(t),sSo=r(RNe," \u2014 "),JV=n(RNe,"A",{href:!0});var ULt=s(JV);lSo=r(ULt,"RegNetModel"),ULt.forEach(t),iSo=r(RNe," (RegNet model)"),RNe.forEach(t),dSo=i(x),wb=n(x,"LI",{});var PNe=s(wb);Upe=n(PNe,"STRONG",{});var HLt=s(Upe);cSo=r(HLt,"rembert"),HLt.forEach(t),mSo=r(PNe," \u2014 "),YV=n(PNe,"A",{href:!0});var JLt=s(YV);fSo=r(JLt,"RemBertModel"),JLt.forEach(t),gSo=r(PNe," (RemBERT model)"),PNe.forEach(t),hSo=i(x),Ab=n(x,"LI",{});var BNe=s(Ab);Hpe=n(BNe,"STRONG",{});var YLt=s(Hpe);uSo=r(YLt,"resnet"),YLt.forEach(t),pSo=r(BNe," \u2014 "),KV=n(BNe,"A",{href:!0});var KLt=s(KV);_So=r(KLt,"ResNetModel"),KLt.forEach(t),bSo=r(BNe," (ResNet model)"),BNe.forEach(t),vSo=i(x),Lb=n(x,"LI",{});var INe=s(Lb);Jpe=n(INe,"STRONG",{});var ZLt=s(Jpe);FSo=r(ZLt,"retribert"),ZLt.forEach(t),TSo=r(INe," \u2014 "),ZV=n(INe,"A",{href:!0});var eyt=s(ZV);MSo=r(eyt,"RetriBertModel"),eyt.forEach(t),ESo=r(INe," (RetriBERT model)"),INe.forEach(t),CSo=i(x),yb=n(x,"LI",{});var NNe=s(yb);Ype=n(NNe,"STRONG",{});var oyt=s(Ype);wSo=r(oyt,"roberta"),oyt.forEach(t),ASo=r(NNe," \u2014 "),eX=n(NNe,"A",{href:!0});var ryt=s(eX);LSo=r(ryt,"RobertaModel"),ryt.forEach(t),ySo=r(NNe," (RoBERTa model)"),NNe.forEach(t),xSo=i(x),xb=n(x,"LI",{});var qNe=s(xb);Kpe=n(qNe,"STRONG",{});var tyt=s(Kpe);$So=r(tyt,"roformer"),tyt.forEach(t),kSo=r(qNe," \u2014 "),oX=n(qNe,"A",{href:!0});var ayt=s(oX);SSo=r(ayt,"RoFormerModel"),ayt.forEach(t),RSo=r(qNe," (RoFormer model)"),qNe.forEach(t),PSo=i(x),$b=n(x,"LI",{});var jNe=s($b);Zpe=n(jNe,"STRONG",{});var nyt=s(Zpe);BSo=r(nyt,"segformer"),nyt.forEach(t),ISo=r(jNe," \u2014 "),rX=n(jNe,"A",{href:!0});var syt=s(rX);NSo=r(syt,"SegformerModel"),syt.forEach(t),qSo=r(jNe," (SegFormer model)"),jNe.forEach(t),jSo=i(x),kb=n(x,"LI",{});var DNe=s(kb);e_e=n(DNe,"STRONG",{});var lyt=s(e_e);DSo=r(lyt,"sew"),lyt.forEach(t),GSo=r(DNe," \u2014 "),tX=n(DNe,"A",{href:!0});var iyt=s(tX);OSo=r(iyt,"SEWModel"),iyt.forEach(t),VSo=r(DNe," (SEW model)"),DNe.forEach(t),XSo=i(x),Sb=n(x,"LI",{});var GNe=s(Sb);o_e=n(GNe,"STRONG",{});var dyt=s(o_e);zSo=r(dyt,"sew-d"),dyt.forEach(t),QSo=r(GNe," \u2014 "),aX=n(GNe,"A",{href:!0});var cyt=s(aX);WSo=r(cyt,"SEWDModel"),cyt.forEach(t),USo=r(GNe," (SEW-D model)"),GNe.forEach(t),HSo=i(x),Rb=n(x,"LI",{});var ONe=s(Rb);r_e=n(ONe,"STRONG",{});var myt=s(r_e);JSo=r(myt,"speech_to_text"),myt.forEach(t),YSo=r(ONe," \u2014 "),nX=n(ONe,"A",{href:!0});var fyt=s(nX);KSo=r(fyt,"Speech2TextModel"),fyt.forEach(t),ZSo=r(ONe," (Speech2Text model)"),ONe.forEach(t),eRo=i(x),Pb=n(x,"LI",{});var VNe=s(Pb);t_e=n(VNe,"STRONG",{});var gyt=s(t_e);oRo=r(gyt,"splinter"),gyt.forEach(t),rRo=r(VNe," \u2014 "),sX=n(VNe,"A",{href:!0});var hyt=s(sX);tRo=r(hyt,"SplinterModel"),hyt.forEach(t),aRo=r(VNe," (Splinter model)"),VNe.forEach(t),nRo=i(x),Bb=n(x,"LI",{});var XNe=s(Bb);a_e=n(XNe,"STRONG",{});var uyt=s(a_e);sRo=r(uyt,"squeezebert"),uyt.forEach(t),lRo=r(XNe," \u2014 "),lX=n(XNe,"A",{href:!0});var pyt=s(lX);iRo=r(pyt,"SqueezeBertModel"),pyt.forEach(t),dRo=r(XNe," (SqueezeBERT model)"),XNe.forEach(t),cRo=i(x),Ib=n(x,"LI",{});var zNe=s(Ib);n_e=n(zNe,"STRONG",{});var _yt=s(n_e);mRo=r(_yt,"swin"),_yt.forEach(t),fRo=r(zNe," \u2014 "),iX=n(zNe,"A",{href:!0});var byt=s(iX);gRo=r(byt,"SwinModel"),byt.forEach(t),hRo=r(zNe," (Swin Transformer model)"),zNe.forEach(t),uRo=i(x),Nb=n(x,"LI",{});var QNe=s(Nb);s_e=n(QNe,"STRONG",{});var vyt=s(s_e);pRo=r(vyt,"swinv2"),vyt.forEach(t),_Ro=r(QNe," \u2014 "),dX=n(QNe,"A",{href:!0});var Fyt=s(dX);bRo=r(Fyt,"Swinv2Model"),Fyt.forEach(t),vRo=r(QNe," (Swin Transformer V2 model)"),QNe.forEach(t),FRo=i(x),qb=n(x,"LI",{});var WNe=s(qb);l_e=n(WNe,"STRONG",{});var Tyt=s(l_e);TRo=r(Tyt,"t5"),Tyt.forEach(t),MRo=r(WNe," \u2014 "),cX=n(WNe,"A",{href:!0});var Myt=s(cX);ERo=r(Myt,"T5Model"),Myt.forEach(t),CRo=r(WNe," (T5 model)"),WNe.forEach(t),wRo=i(x),jb=n(x,"LI",{});var UNe=s(jb);i_e=n(UNe,"STRONG",{});var Eyt=s(i_e);ARo=r(Eyt,"tapas"),Eyt.forEach(t),LRo=r(UNe," \u2014 "),mX=n(UNe,"A",{href:!0});var Cyt=s(mX);yRo=r(Cyt,"TapasModel"),Cyt.forEach(t),xRo=r(UNe," (TAPAS model)"),UNe.forEach(t),$Ro=i(x),Db=n(x,"LI",{});var HNe=s(Db);d_e=n(HNe,"STRONG",{});var wyt=s(d_e);kRo=r(wyt,"trajectory_transformer"),wyt.forEach(t),SRo=r(HNe," \u2014 "),fX=n(HNe,"A",{href:!0});var Ayt=s(fX);RRo=r(Ayt,"TrajectoryTransformerModel"),Ayt.forEach(t),PRo=r(HNe," (Trajectory Transformer model)"),HNe.forEach(t),BRo=i(x),Gb=n(x,"LI",{});var JNe=s(Gb);c_e=n(JNe,"STRONG",{});var Lyt=s(c_e);IRo=r(Lyt,"transfo-xl"),Lyt.forEach(t),NRo=r(JNe," \u2014 "),gX=n(JNe,"A",{href:!0});var yyt=s(gX);qRo=r(yyt,"TransfoXLModel"),yyt.forEach(t),jRo=r(JNe," (Transformer-XL model)"),JNe.forEach(t),DRo=i(x),Ob=n(x,"LI",{});var YNe=s(Ob);m_e=n(YNe,"STRONG",{});var xyt=s(m_e);GRo=r(xyt,"unispeech"),xyt.forEach(t),ORo=r(YNe," \u2014 "),hX=n(YNe,"A",{href:!0});var $yt=s(hX);VRo=r($yt,"UniSpeechModel"),$yt.forEach(t),XRo=r(YNe," (UniSpeech model)"),YNe.forEach(t),zRo=i(x),Vb=n(x,"LI",{});var KNe=s(Vb);f_e=n(KNe,"STRONG",{});var kyt=s(f_e);QRo=r(kyt,"unispeech-sat"),kyt.forEach(t),WRo=r(KNe," \u2014 "),uX=n(KNe,"A",{href:!0});var Syt=s(uX);URo=r(Syt,"UniSpeechSatModel"),Syt.forEach(t),HRo=r(KNe," (UniSpeechSat model)"),KNe.forEach(t),JRo=i(x),Xb=n(x,"LI",{});var ZNe=s(Xb);g_e=n(ZNe,"STRONG",{});var Ryt=s(g_e);YRo=r(Ryt,"van"),Ryt.forEach(t),KRo=r(ZNe," \u2014 "),pX=n(ZNe,"A",{href:!0});var Pyt=s(pX);ZRo=r(Pyt,"VanModel"),Pyt.forEach(t),ePo=r(ZNe," (VAN model)"),ZNe.forEach(t),oPo=i(x),zb=n(x,"LI",{});var eqe=s(zb);h_e=n(eqe,"STRONG",{});var Byt=s(h_e);rPo=r(Byt,"videomae"),Byt.forEach(t),tPo=r(eqe," \u2014 "),_X=n(eqe,"A",{href:!0});var Iyt=s(_X);aPo=r(Iyt,"VideoMAEModel"),Iyt.forEach(t),nPo=r(eqe," (VideoMAE model)"),eqe.forEach(t),sPo=i(x),Qb=n(x,"LI",{});var oqe=s(Qb);u_e=n(oqe,"STRONG",{});var Nyt=s(u_e);lPo=r(Nyt,"vilt"),Nyt.forEach(t),iPo=r(oqe," \u2014 "),bX=n(oqe,"A",{href:!0});var qyt=s(bX);dPo=r(qyt,"ViltModel"),qyt.forEach(t),cPo=r(oqe," (ViLT model)"),oqe.forEach(t),mPo=i(x),Wb=n(x,"LI",{});var rqe=s(Wb);p_e=n(rqe,"STRONG",{});var jyt=s(p_e);fPo=r(jyt,"vision-text-dual-encoder"),jyt.forEach(t),gPo=r(rqe," \u2014 "),vX=n(rqe,"A",{href:!0});var Dyt=s(vX);hPo=r(Dyt,"VisionTextDualEncoderModel"),Dyt.forEach(t),uPo=r(rqe," (VisionTextDualEncoder model)"),rqe.forEach(t),pPo=i(x),Ub=n(x,"LI",{});var tqe=s(Ub);__e=n(tqe,"STRONG",{});var Gyt=s(__e);_Po=r(Gyt,"visual_bert"),Gyt.forEach(t),bPo=r(tqe," \u2014 "),FX=n(tqe,"A",{href:!0});var Oyt=s(FX);vPo=r(Oyt,"VisualBertModel"),Oyt.forEach(t),FPo=r(tqe," (VisualBERT model)"),tqe.forEach(t),TPo=i(x),Hb=n(x,"LI",{});var aqe=s(Hb);b_e=n(aqe,"STRONG",{});var Vyt=s(b_e);MPo=r(Vyt,"vit"),Vyt.forEach(t),EPo=r(aqe," \u2014 "),TX=n(aqe,"A",{href:!0});var Xyt=s(TX);CPo=r(Xyt,"ViTModel"),Xyt.forEach(t),wPo=r(aqe," (ViT model)"),aqe.forEach(t),APo=i(x),Jb=n(x,"LI",{});var nqe=s(Jb);v_e=n(nqe,"STRONG",{});var zyt=s(v_e);LPo=r(zyt,"vit_mae"),zyt.forEach(t),yPo=r(nqe," \u2014 "),MX=n(nqe,"A",{href:!0});var Qyt=s(MX);xPo=r(Qyt,"ViTMAEModel"),Qyt.forEach(t),$Po=r(nqe," (ViTMAE model)"),nqe.forEach(t),kPo=i(x),Yb=n(x,"LI",{});var sqe=s(Yb);F_e=n(sqe,"STRONG",{});var Wyt=s(F_e);SPo=r(Wyt,"wav2vec2"),Wyt.forEach(t),RPo=r(sqe," \u2014 "),EX=n(sqe,"A",{href:!0});var Uyt=s(EX);PPo=r(Uyt,"Wav2Vec2Model"),Uyt.forEach(t),BPo=r(sqe," (Wav2Vec2 model)"),sqe.forEach(t),IPo=i(x),Kb=n(x,"LI",{});var lqe=s(Kb);T_e=n(lqe,"STRONG",{});var Hyt=s(T_e);NPo=r(Hyt,"wav2vec2-conformer"),Hyt.forEach(t),qPo=r(lqe," \u2014 "),CX=n(lqe,"A",{href:!0});var Jyt=s(CX);jPo=r(Jyt,"Wav2Vec2ConformerModel"),Jyt.forEach(t),DPo=r(lqe," (Wav2Vec2-Conformer model)"),lqe.forEach(t),GPo=i(x),Zb=n(x,"LI",{});var iqe=s(Zb);M_e=n(iqe,"STRONG",{});var Yyt=s(M_e);OPo=r(Yyt,"wavlm"),Yyt.forEach(t),VPo=r(iqe," \u2014 "),wX=n(iqe,"A",{href:!0});var Kyt=s(wX);XPo=r(Kyt,"WavLMModel"),Kyt.forEach(t),zPo=r(iqe," (WavLM model)"),iqe.forEach(t),QPo=i(x),e2=n(x,"LI",{});var dqe=s(e2);E_e=n(dqe,"STRONG",{});var Zyt=s(E_e);WPo=r(Zyt,"xclip"),Zyt.forEach(t),UPo=r(dqe," \u2014 "),AX=n(dqe,"A",{href:!0});var e8t=s(AX);HPo=r(e8t,"XCLIPModel"),e8t.forEach(t),JPo=r(dqe," (X-CLIP model)"),dqe.forEach(t),YPo=i(x),o2=n(x,"LI",{});var cqe=s(o2);C_e=n(cqe,"STRONG",{});var o8t=s(C_e);KPo=r(o8t,"xglm"),o8t.forEach(t),ZPo=r(cqe," \u2014 "),LX=n(cqe,"A",{href:!0});var r8t=s(LX);eBo=r(r8t,"XGLMModel"),r8t.forEach(t),oBo=r(cqe," (XGLM model)"),cqe.forEach(t),rBo=i(x),r2=n(x,"LI",{});var mqe=s(r2);w_e=n(mqe,"STRONG",{});var t8t=s(w_e);tBo=r(t8t,"xlm"),t8t.forEach(t),aBo=r(mqe," \u2014 "),yX=n(mqe,"A",{href:!0});var a8t=s(yX);nBo=r(a8t,"XLMModel"),a8t.forEach(t),sBo=r(mqe," (XLM model)"),mqe.forEach(t),lBo=i(x),t2=n(x,"LI",{});var fqe=s(t2);A_e=n(fqe,"STRONG",{});var n8t=s(A_e);iBo=r(n8t,"xlm-prophetnet"),n8t.forEach(t),dBo=r(fqe," \u2014 "),xX=n(fqe,"A",{href:!0});var s8t=s(xX);cBo=r(s8t,"XLMProphetNetModel"),s8t.forEach(t),mBo=r(fqe," (XLM-ProphetNet model)"),fqe.forEach(t),fBo=i(x),a2=n(x,"LI",{});var gqe=s(a2);L_e=n(gqe,"STRONG",{});var l8t=s(L_e);gBo=r(l8t,"xlm-roberta"),l8t.forEach(t),hBo=r(gqe," \u2014 "),$X=n(gqe,"A",{href:!0});var i8t=s($X);uBo=r(i8t,"XLMRobertaModel"),i8t.forEach(t),pBo=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),_Bo=i(x),n2=n(x,"LI",{});var hqe=s(n2);y_e=n(hqe,"STRONG",{});var d8t=s(y_e);bBo=r(d8t,"xlm-roberta-xl"),d8t.forEach(t),vBo=r(hqe," \u2014 "),kX=n(hqe,"A",{href:!0});var c8t=s(kX);FBo=r(c8t,"XLMRobertaXLModel"),c8t.forEach(t),TBo=r(hqe," (XLM-RoBERTa-XL model)"),hqe.forEach(t),MBo=i(x),s2=n(x,"LI",{});var uqe=s(s2);x_e=n(uqe,"STRONG",{});var m8t=s(x_e);EBo=r(m8t,"xlnet"),m8t.forEach(t),CBo=r(uqe," \u2014 "),SX=n(uqe,"A",{href:!0});var f8t=s(SX);wBo=r(f8t,"XLNetModel"),f8t.forEach(t),ABo=r(uqe," (XLNet model)"),uqe.forEach(t),LBo=i(x),l2=n(x,"LI",{});var pqe=s(l2);$_e=n(pqe,"STRONG",{});var g8t=s($_e);yBo=r(g8t,"yolos"),g8t.forEach(t),xBo=r(pqe," \u2014 "),RX=n(pqe,"A",{href:!0});var h8t=s(RX);$Bo=r(h8t,"YolosModel"),h8t.forEach(t),kBo=r(pqe," (YOLOS model)"),pqe.forEach(t),SBo=i(x),i2=n(x,"LI",{});var _qe=s(i2);k_e=n(_qe,"STRONG",{});var u8t=s(k_e);RBo=r(u8t,"yoso"),u8t.forEach(t),PBo=r(_qe," \u2014 "),PX=n(_qe,"A",{href:!0});var p8t=s(PX);BBo=r(p8t,"YosoModel"),p8t.forEach(t),IBo=r(_qe," (YOSO model)"),_qe.forEach(t),x.forEach(t),NBo=i(Fa),d2=n(Fa,"P",{});var bqe=s(d2);qBo=r(bqe,"The model is set in evaluation mode by default using "),S_e=n(bqe,"CODE",{});var _8t=s(S_e);jBo=r(_8t,"model.eval()"),_8t.forEach(t),DBo=r(bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(bqe,"CODE",{});var b8t=s(R_e);GBo=r(b8t,"model.train()"),b8t.forEach(t),bqe.forEach(t),OBo=i(Fa),T(c2.$$.fragment,Fa),Fa.forEach(t),wl.forEach(t),wKe=i(m),vd=n(m,"H2",{class:!0});var jeo=s(vd);m2=n(jeo,"A",{id:!0,class:!0,href:!0});var v8t=s(m2);P_e=n(v8t,"SPAN",{});var F8t=s(P_e);T(dx.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),VBo=i(jeo),B_e=n(jeo,"SPAN",{});var T8t=s(B_e);XBo=r(T8t,"AutoModelForPreTraining"),T8t.forEach(t),jeo.forEach(t),AKe=i(m),Bo=n(m,"DIV",{class:!0});var Al=s(Bo);T(cx.$$.fragment,Al),zBo=i(Al),Fd=n(Al,"P",{});var mle=s(Fd);QBo=r(mle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BX=n(mle,"A",{href:!0});var M8t=s(BX);WBo=r(M8t,"from_pretrained()"),M8t.forEach(t),UBo=r(mle," class method or the "),IX=n(mle,"A",{href:!0});var E8t=s(IX);HBo=r(E8t,"from_config()"),E8t.forEach(t),JBo=r(mle,` class
method.`),mle.forEach(t),YBo=i(Al),mx=n(Al,"P",{});var Deo=s(mx);KBo=r(Deo,"This class cannot be instantiated directly using "),I_e=n(Deo,"CODE",{});var C8t=s(I_e);ZBo=r(C8t,"__init__()"),C8t.forEach(t),eIo=r(Deo," (throws an error)."),Deo.forEach(t),oIo=i(Al),bt=n(Al,"DIV",{class:!0});var xy=s(bt);T(fx.$$.fragment,xy),rIo=i(xy),N_e=n(xy,"P",{});var w8t=s(N_e);tIo=r(w8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w8t.forEach(t),aIo=i(xy),Td=n(xy,"P",{});var fle=s(Td);nIo=r(fle,`Note:
Loading a model from its configuration file does `),q_e=n(fle,"STRONG",{});var A8t=s(q_e);sIo=r(A8t,"not"),A8t.forEach(t),lIo=r(fle,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(fle,"A",{href:!0});var L8t=s(NX);iIo=r(L8t,"from_pretrained()"),L8t.forEach(t),dIo=r(fle," to load the model weights."),fle.forEach(t),cIo=i(xy),T(f2.$$.fragment,xy),xy.forEach(t),mIo=i(Al),eo=n(Al,"DIV",{class:!0});var Ta=s(eo);T(gx.$$.fragment,Ta),fIo=i(Ta),j_e=n(Ta,"P",{});var y8t=s(j_e);gIo=r(y8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y8t.forEach(t),hIo=i(Ta),Ya=n(Ta,"P",{});var $y=s(Ya);uIo=r($y,"The model class to instantiate is selected based on the "),D_e=n($y,"CODE",{});var x8t=s(D_e);pIo=r(x8t,"model_type"),x8t.forEach(t),_Io=r($y,` property of the config object (either
passed as an argument or loaded from `),G_e=n($y,"CODE",{});var $8t=s(G_e);bIo=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),vIo=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n($y,"CODE",{});var k8t=s(O_e);FIo=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),TIo=r($y,":"),$y.forEach(t),MIo=i(Ta),G=n(Ta,"UL",{});var O=s(G);g2=n(O,"LI",{});var vqe=s(g2);V_e=n(vqe,"STRONG",{});var S8t=s(V_e);EIo=r(S8t,"albert"),S8t.forEach(t),CIo=r(vqe," \u2014 "),qX=n(vqe,"A",{href:!0});var R8t=s(qX);wIo=r(R8t,"AlbertForPreTraining"),R8t.forEach(t),AIo=r(vqe," (ALBERT model)"),vqe.forEach(t),LIo=i(O),h2=n(O,"LI",{});var Fqe=s(h2);X_e=n(Fqe,"STRONG",{});var P8t=s(X_e);yIo=r(P8t,"bart"),P8t.forEach(t),xIo=r(Fqe," \u2014 "),jX=n(Fqe,"A",{href:!0});var B8t=s(jX);$Io=r(B8t,"BartForConditionalGeneration"),B8t.forEach(t),kIo=r(Fqe," (BART model)"),Fqe.forEach(t),SIo=i(O),u2=n(O,"LI",{});var Tqe=s(u2);z_e=n(Tqe,"STRONG",{});var I8t=s(z_e);RIo=r(I8t,"bert"),I8t.forEach(t),PIo=r(Tqe," \u2014 "),DX=n(Tqe,"A",{href:!0});var N8t=s(DX);BIo=r(N8t,"BertForPreTraining"),N8t.forEach(t),IIo=r(Tqe," (BERT model)"),Tqe.forEach(t),NIo=i(O),p2=n(O,"LI",{});var Mqe=s(p2);Q_e=n(Mqe,"STRONG",{});var q8t=s(Q_e);qIo=r(q8t,"big_bird"),q8t.forEach(t),jIo=r(Mqe," \u2014 "),GX=n(Mqe,"A",{href:!0});var j8t=s(GX);DIo=r(j8t,"BigBirdForPreTraining"),j8t.forEach(t),GIo=r(Mqe," (BigBird model)"),Mqe.forEach(t),OIo=i(O),_2=n(O,"LI",{});var Eqe=s(_2);W_e=n(Eqe,"STRONG",{});var D8t=s(W_e);VIo=r(D8t,"bloom"),D8t.forEach(t),XIo=r(Eqe," \u2014 "),OX=n(Eqe,"A",{href:!0});var G8t=s(OX);zIo=r(G8t,"BloomForCausalLM"),G8t.forEach(t),QIo=r(Eqe," (BLOOM model)"),Eqe.forEach(t),WIo=i(O),b2=n(O,"LI",{});var Cqe=s(b2);U_e=n(Cqe,"STRONG",{});var O8t=s(U_e);UIo=r(O8t,"camembert"),O8t.forEach(t),HIo=r(Cqe," \u2014 "),VX=n(Cqe,"A",{href:!0});var V8t=s(VX);JIo=r(V8t,"CamembertForMaskedLM"),V8t.forEach(t),YIo=r(Cqe," (CamemBERT model)"),Cqe.forEach(t),KIo=i(O),v2=n(O,"LI",{});var wqe=s(v2);H_e=n(wqe,"STRONG",{});var X8t=s(H_e);ZIo=r(X8t,"ctrl"),X8t.forEach(t),eNo=r(wqe," \u2014 "),XX=n(wqe,"A",{href:!0});var z8t=s(XX);oNo=r(z8t,"CTRLLMHeadModel"),z8t.forEach(t),rNo=r(wqe," (CTRL model)"),wqe.forEach(t),tNo=i(O),F2=n(O,"LI",{});var Aqe=s(F2);J_e=n(Aqe,"STRONG",{});var Q8t=s(J_e);aNo=r(Q8t,"data2vec-text"),Q8t.forEach(t),nNo=r(Aqe," \u2014 "),zX=n(Aqe,"A",{href:!0});var W8t=s(zX);sNo=r(W8t,"Data2VecTextForMaskedLM"),W8t.forEach(t),lNo=r(Aqe," (Data2VecText model)"),Aqe.forEach(t),iNo=i(O),T2=n(O,"LI",{});var Lqe=s(T2);Y_e=n(Lqe,"STRONG",{});var U8t=s(Y_e);dNo=r(U8t,"deberta"),U8t.forEach(t),cNo=r(Lqe," \u2014 "),QX=n(Lqe,"A",{href:!0});var H8t=s(QX);mNo=r(H8t,"DebertaForMaskedLM"),H8t.forEach(t),fNo=r(Lqe," (DeBERTa model)"),Lqe.forEach(t),gNo=i(O),M2=n(O,"LI",{});var yqe=s(M2);K_e=n(yqe,"STRONG",{});var J8t=s(K_e);hNo=r(J8t,"deberta-v2"),J8t.forEach(t),uNo=r(yqe," \u2014 "),WX=n(yqe,"A",{href:!0});var Y8t=s(WX);pNo=r(Y8t,"DebertaV2ForMaskedLM"),Y8t.forEach(t),_No=r(yqe," (DeBERTa-v2 model)"),yqe.forEach(t),bNo=i(O),E2=n(O,"LI",{});var xqe=s(E2);Z_e=n(xqe,"STRONG",{});var K8t=s(Z_e);vNo=r(K8t,"distilbert"),K8t.forEach(t),FNo=r(xqe," \u2014 "),UX=n(xqe,"A",{href:!0});var Z8t=s(UX);TNo=r(Z8t,"DistilBertForMaskedLM"),Z8t.forEach(t),MNo=r(xqe," (DistilBERT model)"),xqe.forEach(t),ENo=i(O),C2=n(O,"LI",{});var $qe=s(C2);ebe=n($qe,"STRONG",{});var e9t=s(ebe);CNo=r(e9t,"electra"),e9t.forEach(t),wNo=r($qe," \u2014 "),HX=n($qe,"A",{href:!0});var o9t=s(HX);ANo=r(o9t,"ElectraForPreTraining"),o9t.forEach(t),LNo=r($qe," (ELECTRA model)"),$qe.forEach(t),yNo=i(O),w2=n(O,"LI",{});var kqe=s(w2);obe=n(kqe,"STRONG",{});var r9t=s(obe);xNo=r(r9t,"ernie"),r9t.forEach(t),$No=r(kqe," \u2014 "),JX=n(kqe,"A",{href:!0});var t9t=s(JX);kNo=r(t9t,"ErnieForPreTraining"),t9t.forEach(t),SNo=r(kqe," (ERNIE model)"),kqe.forEach(t),RNo=i(O),A2=n(O,"LI",{});var Sqe=s(A2);rbe=n(Sqe,"STRONG",{});var a9t=s(rbe);PNo=r(a9t,"flaubert"),a9t.forEach(t),BNo=r(Sqe," \u2014 "),YX=n(Sqe,"A",{href:!0});var n9t=s(YX);INo=r(n9t,"FlaubertWithLMHeadModel"),n9t.forEach(t),NNo=r(Sqe," (FlauBERT model)"),Sqe.forEach(t),qNo=i(O),L2=n(O,"LI",{});var Rqe=s(L2);tbe=n(Rqe,"STRONG",{});var s9t=s(tbe);jNo=r(s9t,"flava"),s9t.forEach(t),DNo=r(Rqe," \u2014 "),KX=n(Rqe,"A",{href:!0});var l9t=s(KX);GNo=r(l9t,"FlavaForPreTraining"),l9t.forEach(t),ONo=r(Rqe," (FLAVA model)"),Rqe.forEach(t),VNo=i(O),y2=n(O,"LI",{});var Pqe=s(y2);abe=n(Pqe,"STRONG",{});var i9t=s(abe);XNo=r(i9t,"fnet"),i9t.forEach(t),zNo=r(Pqe," \u2014 "),ZX=n(Pqe,"A",{href:!0});var d9t=s(ZX);QNo=r(d9t,"FNetForPreTraining"),d9t.forEach(t),WNo=r(Pqe," (FNet model)"),Pqe.forEach(t),UNo=i(O),x2=n(O,"LI",{});var Bqe=s(x2);nbe=n(Bqe,"STRONG",{});var c9t=s(nbe);HNo=r(c9t,"fsmt"),c9t.forEach(t),JNo=r(Bqe," \u2014 "),ez=n(Bqe,"A",{href:!0});var m9t=s(ez);YNo=r(m9t,"FSMTForConditionalGeneration"),m9t.forEach(t),KNo=r(Bqe," (FairSeq Machine-Translation model)"),Bqe.forEach(t),ZNo=i(O),$2=n(O,"LI",{});var Iqe=s($2);sbe=n(Iqe,"STRONG",{});var f9t=s(sbe);eqo=r(f9t,"funnel"),f9t.forEach(t),oqo=r(Iqe," \u2014 "),oz=n(Iqe,"A",{href:!0});var g9t=s(oz);rqo=r(g9t,"FunnelForPreTraining"),g9t.forEach(t),tqo=r(Iqe," (Funnel Transformer model)"),Iqe.forEach(t),aqo=i(O),k2=n(O,"LI",{});var Nqe=s(k2);lbe=n(Nqe,"STRONG",{});var h9t=s(lbe);nqo=r(h9t,"gpt2"),h9t.forEach(t),sqo=r(Nqe," \u2014 "),rz=n(Nqe,"A",{href:!0});var u9t=s(rz);lqo=r(u9t,"GPT2LMHeadModel"),u9t.forEach(t),iqo=r(Nqe," (OpenAI GPT-2 model)"),Nqe.forEach(t),dqo=i(O),S2=n(O,"LI",{});var qqe=s(S2);ibe=n(qqe,"STRONG",{});var p9t=s(ibe);cqo=r(p9t,"ibert"),p9t.forEach(t),mqo=r(qqe," \u2014 "),tz=n(qqe,"A",{href:!0});var _9t=s(tz);fqo=r(_9t,"IBertForMaskedLM"),_9t.forEach(t),gqo=r(qqe," (I-BERT model)"),qqe.forEach(t),hqo=i(O),R2=n(O,"LI",{});var jqe=s(R2);dbe=n(jqe,"STRONG",{});var b9t=s(dbe);uqo=r(b9t,"layoutlm"),b9t.forEach(t),pqo=r(jqe," \u2014 "),az=n(jqe,"A",{href:!0});var v9t=s(az);_qo=r(v9t,"LayoutLMForMaskedLM"),v9t.forEach(t),bqo=r(jqe," (LayoutLM model)"),jqe.forEach(t),vqo=i(O),P2=n(O,"LI",{});var Dqe=s(P2);cbe=n(Dqe,"STRONG",{});var F9t=s(cbe);Fqo=r(F9t,"longformer"),F9t.forEach(t),Tqo=r(Dqe," \u2014 "),nz=n(Dqe,"A",{href:!0});var T9t=s(nz);Mqo=r(T9t,"LongformerForMaskedLM"),T9t.forEach(t),Eqo=r(Dqe," (Longformer model)"),Dqe.forEach(t),Cqo=i(O),B2=n(O,"LI",{});var Gqe=s(B2);mbe=n(Gqe,"STRONG",{});var M9t=s(mbe);wqo=r(M9t,"luke"),M9t.forEach(t),Aqo=r(Gqe," \u2014 "),sz=n(Gqe,"A",{href:!0});var E9t=s(sz);Lqo=r(E9t,"LukeForMaskedLM"),E9t.forEach(t),yqo=r(Gqe," (LUKE model)"),Gqe.forEach(t),xqo=i(O),I2=n(O,"LI",{});var Oqe=s(I2);fbe=n(Oqe,"STRONG",{});var C9t=s(fbe);$qo=r(C9t,"lxmert"),C9t.forEach(t),kqo=r(Oqe," \u2014 "),lz=n(Oqe,"A",{href:!0});var w9t=s(lz);Sqo=r(w9t,"LxmertForPreTraining"),w9t.forEach(t),Rqo=r(Oqe," (LXMERT model)"),Oqe.forEach(t),Pqo=i(O),N2=n(O,"LI",{});var Vqe=s(N2);gbe=n(Vqe,"STRONG",{});var A9t=s(gbe);Bqo=r(A9t,"megatron-bert"),A9t.forEach(t),Iqo=r(Vqe," \u2014 "),iz=n(Vqe,"A",{href:!0});var L9t=s(iz);Nqo=r(L9t,"MegatronBertForPreTraining"),L9t.forEach(t),qqo=r(Vqe," (Megatron-BERT model)"),Vqe.forEach(t),jqo=i(O),q2=n(O,"LI",{});var Xqe=s(q2);hbe=n(Xqe,"STRONG",{});var y9t=s(hbe);Dqo=r(y9t,"mobilebert"),y9t.forEach(t),Gqo=r(Xqe," \u2014 "),dz=n(Xqe,"A",{href:!0});var x9t=s(dz);Oqo=r(x9t,"MobileBertForPreTraining"),x9t.forEach(t),Vqo=r(Xqe," (MobileBERT model)"),Xqe.forEach(t),Xqo=i(O),j2=n(O,"LI",{});var zqe=s(j2);ube=n(zqe,"STRONG",{});var $9t=s(ube);zqo=r($9t,"mpnet"),$9t.forEach(t),Qqo=r(zqe," \u2014 "),cz=n(zqe,"A",{href:!0});var k9t=s(cz);Wqo=r(k9t,"MPNetForMaskedLM"),k9t.forEach(t),Uqo=r(zqe," (MPNet model)"),zqe.forEach(t),Hqo=i(O),D2=n(O,"LI",{});var Qqe=s(D2);pbe=n(Qqe,"STRONG",{});var S9t=s(pbe);Jqo=r(S9t,"mvp"),S9t.forEach(t),Yqo=r(Qqe," \u2014 "),mz=n(Qqe,"A",{href:!0});var R9t=s(mz);Kqo=r(R9t,"MvpForConditionalGeneration"),R9t.forEach(t),Zqo=r(Qqe," (MVP model)"),Qqe.forEach(t),ejo=i(O),G2=n(O,"LI",{});var Wqe=s(G2);_be=n(Wqe,"STRONG",{});var P9t=s(_be);ojo=r(P9t,"nezha"),P9t.forEach(t),rjo=r(Wqe," \u2014 "),fz=n(Wqe,"A",{href:!0});var B9t=s(fz);tjo=r(B9t,"NezhaForPreTraining"),B9t.forEach(t),ajo=r(Wqe," (Nezha model)"),Wqe.forEach(t),njo=i(O),O2=n(O,"LI",{});var Uqe=s(O2);bbe=n(Uqe,"STRONG",{});var I9t=s(bbe);sjo=r(I9t,"openai-gpt"),I9t.forEach(t),ljo=r(Uqe," \u2014 "),gz=n(Uqe,"A",{href:!0});var N9t=s(gz);ijo=r(N9t,"OpenAIGPTLMHeadModel"),N9t.forEach(t),djo=r(Uqe," (OpenAI GPT model)"),Uqe.forEach(t),cjo=i(O),V2=n(O,"LI",{});var Hqe=s(V2);vbe=n(Hqe,"STRONG",{});var q9t=s(vbe);mjo=r(q9t,"retribert"),q9t.forEach(t),fjo=r(Hqe," \u2014 "),hz=n(Hqe,"A",{href:!0});var j9t=s(hz);gjo=r(j9t,"RetriBertModel"),j9t.forEach(t),hjo=r(Hqe," (RetriBERT model)"),Hqe.forEach(t),ujo=i(O),X2=n(O,"LI",{});var Jqe=s(X2);Fbe=n(Jqe,"STRONG",{});var D9t=s(Fbe);pjo=r(D9t,"roberta"),D9t.forEach(t),_jo=r(Jqe," \u2014 "),uz=n(Jqe,"A",{href:!0});var G9t=s(uz);bjo=r(G9t,"RobertaForMaskedLM"),G9t.forEach(t),vjo=r(Jqe," (RoBERTa model)"),Jqe.forEach(t),Fjo=i(O),z2=n(O,"LI",{});var Yqe=s(z2);Tbe=n(Yqe,"STRONG",{});var O9t=s(Tbe);Tjo=r(O9t,"splinter"),O9t.forEach(t),Mjo=r(Yqe," \u2014 "),pz=n(Yqe,"A",{href:!0});var V9t=s(pz);Ejo=r(V9t,"SplinterForPreTraining"),V9t.forEach(t),Cjo=r(Yqe," (Splinter model)"),Yqe.forEach(t),wjo=i(O),Q2=n(O,"LI",{});var Kqe=s(Q2);Mbe=n(Kqe,"STRONG",{});var X9t=s(Mbe);Ajo=r(X9t,"squeezebert"),X9t.forEach(t),Ljo=r(Kqe," \u2014 "),_z=n(Kqe,"A",{href:!0});var z9t=s(_z);yjo=r(z9t,"SqueezeBertForMaskedLM"),z9t.forEach(t),xjo=r(Kqe," (SqueezeBERT model)"),Kqe.forEach(t),$jo=i(O),W2=n(O,"LI",{});var Zqe=s(W2);Ebe=n(Zqe,"STRONG",{});var Q9t=s(Ebe);kjo=r(Q9t,"t5"),Q9t.forEach(t),Sjo=r(Zqe," \u2014 "),bz=n(Zqe,"A",{href:!0});var W9t=s(bz);Rjo=r(W9t,"T5ForConditionalGeneration"),W9t.forEach(t),Pjo=r(Zqe," (T5 model)"),Zqe.forEach(t),Bjo=i(O),U2=n(O,"LI",{});var eje=s(U2);Cbe=n(eje,"STRONG",{});var U9t=s(Cbe);Ijo=r(U9t,"tapas"),U9t.forEach(t),Njo=r(eje," \u2014 "),vz=n(eje,"A",{href:!0});var H9t=s(vz);qjo=r(H9t,"TapasForMaskedLM"),H9t.forEach(t),jjo=r(eje," (TAPAS model)"),eje.forEach(t),Djo=i(O),H2=n(O,"LI",{});var oje=s(H2);wbe=n(oje,"STRONG",{});var J9t=s(wbe);Gjo=r(J9t,"transfo-xl"),J9t.forEach(t),Ojo=r(oje," \u2014 "),Fz=n(oje,"A",{href:!0});var Y9t=s(Fz);Vjo=r(Y9t,"TransfoXLLMHeadModel"),Y9t.forEach(t),Xjo=r(oje," (Transformer-XL model)"),oje.forEach(t),zjo=i(O),J2=n(O,"LI",{});var rje=s(J2);Abe=n(rje,"STRONG",{});var K9t=s(Abe);Qjo=r(K9t,"unispeech"),K9t.forEach(t),Wjo=r(rje," \u2014 "),Tz=n(rje,"A",{href:!0});var Z9t=s(Tz);Ujo=r(Z9t,"UniSpeechForPreTraining"),Z9t.forEach(t),Hjo=r(rje," (UniSpeech model)"),rje.forEach(t),Jjo=i(O),Y2=n(O,"LI",{});var tje=s(Y2);Lbe=n(tje,"STRONG",{});var ext=s(Lbe);Yjo=r(ext,"unispeech-sat"),ext.forEach(t),Kjo=r(tje," \u2014 "),Mz=n(tje,"A",{href:!0});var oxt=s(Mz);Zjo=r(oxt,"UniSpeechSatForPreTraining"),oxt.forEach(t),eDo=r(tje," (UniSpeechSat model)"),tje.forEach(t),oDo=i(O),K2=n(O,"LI",{});var aje=s(K2);ybe=n(aje,"STRONG",{});var rxt=s(ybe);rDo=r(rxt,"videomae"),rxt.forEach(t),tDo=r(aje," \u2014 "),Ez=n(aje,"A",{href:!0});var txt=s(Ez);aDo=r(txt,"VideoMAEForPreTraining"),txt.forEach(t),nDo=r(aje," (VideoMAE model)"),aje.forEach(t),sDo=i(O),Z2=n(O,"LI",{});var nje=s(Z2);xbe=n(nje,"STRONG",{});var axt=s(xbe);lDo=r(axt,"visual_bert"),axt.forEach(t),iDo=r(nje," \u2014 "),Cz=n(nje,"A",{href:!0});var nxt=s(Cz);dDo=r(nxt,"VisualBertForPreTraining"),nxt.forEach(t),cDo=r(nje," (VisualBERT model)"),nje.forEach(t),mDo=i(O),e1=n(O,"LI",{});var sje=s(e1);$be=n(sje,"STRONG",{});var sxt=s($be);fDo=r(sxt,"vit_mae"),sxt.forEach(t),gDo=r(sje," \u2014 "),wz=n(sje,"A",{href:!0});var lxt=s(wz);hDo=r(lxt,"ViTMAEForPreTraining"),lxt.forEach(t),uDo=r(sje," (ViTMAE model)"),sje.forEach(t),pDo=i(O),o1=n(O,"LI",{});var lje=s(o1);kbe=n(lje,"STRONG",{});var ixt=s(kbe);_Do=r(ixt,"wav2vec2"),ixt.forEach(t),bDo=r(lje," \u2014 "),Az=n(lje,"A",{href:!0});var dxt=s(Az);vDo=r(dxt,"Wav2Vec2ForPreTraining"),dxt.forEach(t),FDo=r(lje," (Wav2Vec2 model)"),lje.forEach(t),TDo=i(O),r1=n(O,"LI",{});var ije=s(r1);Sbe=n(ije,"STRONG",{});var cxt=s(Sbe);MDo=r(cxt,"wav2vec2-conformer"),cxt.forEach(t),EDo=r(ije," \u2014 "),Lz=n(ije,"A",{href:!0});var mxt=s(Lz);CDo=r(mxt,"Wav2Vec2ConformerForPreTraining"),mxt.forEach(t),wDo=r(ije," (Wav2Vec2-Conformer model)"),ije.forEach(t),ADo=i(O),t1=n(O,"LI",{});var dje=s(t1);Rbe=n(dje,"STRONG",{});var fxt=s(Rbe);LDo=r(fxt,"xlm"),fxt.forEach(t),yDo=r(dje," \u2014 "),yz=n(dje,"A",{href:!0});var gxt=s(yz);xDo=r(gxt,"XLMWithLMHeadModel"),gxt.forEach(t),$Do=r(dje," (XLM model)"),dje.forEach(t),kDo=i(O),a1=n(O,"LI",{});var cje=s(a1);Pbe=n(cje,"STRONG",{});var hxt=s(Pbe);SDo=r(hxt,"xlm-roberta"),hxt.forEach(t),RDo=r(cje," \u2014 "),xz=n(cje,"A",{href:!0});var uxt=s(xz);PDo=r(uxt,"XLMRobertaForMaskedLM"),uxt.forEach(t),BDo=r(cje," (XLM-RoBERTa model)"),cje.forEach(t),IDo=i(O),n1=n(O,"LI",{});var mje=s(n1);Bbe=n(mje,"STRONG",{});var pxt=s(Bbe);NDo=r(pxt,"xlm-roberta-xl"),pxt.forEach(t),qDo=r(mje," \u2014 "),$z=n(mje,"A",{href:!0});var _xt=s($z);jDo=r(_xt,"XLMRobertaXLForMaskedLM"),_xt.forEach(t),DDo=r(mje," (XLM-RoBERTa-XL model)"),mje.forEach(t),GDo=i(O),s1=n(O,"LI",{});var fje=s(s1);Ibe=n(fje,"STRONG",{});var bxt=s(Ibe);ODo=r(bxt,"xlnet"),bxt.forEach(t),VDo=r(fje," \u2014 "),kz=n(fje,"A",{href:!0});var vxt=s(kz);XDo=r(vxt,"XLNetLMHeadModel"),vxt.forEach(t),zDo=r(fje," (XLNet model)"),fje.forEach(t),O.forEach(t),QDo=i(Ta),l1=n(Ta,"P",{});var gje=s(l1);WDo=r(gje,"The model is set in evaluation mode by default using "),Nbe=n(gje,"CODE",{});var Fxt=s(Nbe);UDo=r(Fxt,"model.eval()"),Fxt.forEach(t),HDo=r(gje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(gje,"CODE",{});var Txt=s(qbe);JDo=r(Txt,"model.train()"),Txt.forEach(t),gje.forEach(t),YDo=i(Ta),T(i1.$$.fragment,Ta),Ta.forEach(t),Al.forEach(t),LKe=i(m),Md=n(m,"H2",{class:!0});var Geo=s(Md);d1=n(Geo,"A",{id:!0,class:!0,href:!0});var Mxt=s(d1);jbe=n(Mxt,"SPAN",{});var Ext=s(jbe);T(hx.$$.fragment,Ext),Ext.forEach(t),Mxt.forEach(t),KDo=i(Geo),Dbe=n(Geo,"SPAN",{});var Cxt=s(Dbe);ZDo=r(Cxt,"AutoModelForCausalLM"),Cxt.forEach(t),Geo.forEach(t),yKe=i(m),Io=n(m,"DIV",{class:!0});var Ll=s(Io);T(ux.$$.fragment,Ll),eGo=i(Ll),Ed=n(Ll,"P",{});var gle=s(Ed);oGo=r(gle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Sz=n(gle,"A",{href:!0});var wxt=s(Sz);rGo=r(wxt,"from_pretrained()"),wxt.forEach(t),tGo=r(gle," class method or the "),Rz=n(gle,"A",{href:!0});var Axt=s(Rz);aGo=r(Axt,"from_config()"),Axt.forEach(t),nGo=r(gle,` class
method.`),gle.forEach(t),sGo=i(Ll),px=n(Ll,"P",{});var Oeo=s(px);lGo=r(Oeo,"This class cannot be instantiated directly using "),Gbe=n(Oeo,"CODE",{});var Lxt=s(Gbe);iGo=r(Lxt,"__init__()"),Lxt.forEach(t),dGo=r(Oeo," (throws an error)."),Oeo.forEach(t),cGo=i(Ll),vt=n(Ll,"DIV",{class:!0});var ky=s(vt);T(_x.$$.fragment,ky),mGo=i(ky),Obe=n(ky,"P",{});var yxt=s(Obe);fGo=r(yxt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yxt.forEach(t),gGo=i(ky),Cd=n(ky,"P",{});var hle=s(Cd);hGo=r(hle,`Note:
Loading a model from its configuration file does `),Vbe=n(hle,"STRONG",{});var xxt=s(Vbe);uGo=r(xxt,"not"),xxt.forEach(t),pGo=r(hle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(hle,"A",{href:!0});var $xt=s(Pz);_Go=r($xt,"from_pretrained()"),$xt.forEach(t),bGo=r(hle," to load the model weights."),hle.forEach(t),vGo=i(ky),T(c1.$$.fragment,ky),ky.forEach(t),FGo=i(Ll),oo=n(Ll,"DIV",{class:!0});var Ma=s(oo);T(bx.$$.fragment,Ma),TGo=i(Ma),Xbe=n(Ma,"P",{});var kxt=s(Xbe);MGo=r(kxt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kxt.forEach(t),EGo=i(Ma),Ka=n(Ma,"P",{});var Sy=s(Ka);CGo=r(Sy,"The model class to instantiate is selected based on the "),zbe=n(Sy,"CODE",{});var Sxt=s(zbe);wGo=r(Sxt,"model_type"),Sxt.forEach(t),AGo=r(Sy,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(Sy,"CODE",{});var Rxt=s(Qbe);LGo=r(Rxt,"pretrained_model_name_or_path"),Rxt.forEach(t),yGo=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(Sy,"CODE",{});var Pxt=s(Wbe);xGo=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),$Go=r(Sy,":"),Sy.forEach(t),kGo=i(Ma),z=n(Ma,"UL",{});var Q=s(z);m1=n(Q,"LI",{});var hje=s(m1);Ube=n(hje,"STRONG",{});var Bxt=s(Ube);SGo=r(Bxt,"bart"),Bxt.forEach(t),RGo=r(hje," \u2014 "),Bz=n(hje,"A",{href:!0});var Ixt=s(Bz);PGo=r(Ixt,"BartForCausalLM"),Ixt.forEach(t),BGo=r(hje," (BART model)"),hje.forEach(t),IGo=i(Q),f1=n(Q,"LI",{});var uje=s(f1);Hbe=n(uje,"STRONG",{});var Nxt=s(Hbe);NGo=r(Nxt,"bert"),Nxt.forEach(t),qGo=r(uje," \u2014 "),Iz=n(uje,"A",{href:!0});var qxt=s(Iz);jGo=r(qxt,"BertLMHeadModel"),qxt.forEach(t),DGo=r(uje," (BERT model)"),uje.forEach(t),GGo=i(Q),g1=n(Q,"LI",{});var pje=s(g1);Jbe=n(pje,"STRONG",{});var jxt=s(Jbe);OGo=r(jxt,"bert-generation"),jxt.forEach(t),VGo=r(pje," \u2014 "),Nz=n(pje,"A",{href:!0});var Dxt=s(Nz);XGo=r(Dxt,"BertGenerationDecoder"),Dxt.forEach(t),zGo=r(pje," (Bert Generation model)"),pje.forEach(t),QGo=i(Q),h1=n(Q,"LI",{});var _je=s(h1);Ybe=n(_je,"STRONG",{});var Gxt=s(Ybe);WGo=r(Gxt,"big_bird"),Gxt.forEach(t),UGo=r(_je," \u2014 "),qz=n(_je,"A",{href:!0});var Oxt=s(qz);HGo=r(Oxt,"BigBirdForCausalLM"),Oxt.forEach(t),JGo=r(_je," (BigBird model)"),_je.forEach(t),YGo=i(Q),u1=n(Q,"LI",{});var bje=s(u1);Kbe=n(bje,"STRONG",{});var Vxt=s(Kbe);KGo=r(Vxt,"bigbird_pegasus"),Vxt.forEach(t),ZGo=r(bje," \u2014 "),jz=n(bje,"A",{href:!0});var Xxt=s(jz);eOo=r(Xxt,"BigBirdPegasusForCausalLM"),Xxt.forEach(t),oOo=r(bje," (BigBird-Pegasus model)"),bje.forEach(t),rOo=i(Q),p1=n(Q,"LI",{});var vje=s(p1);Zbe=n(vje,"STRONG",{});var zxt=s(Zbe);tOo=r(zxt,"blenderbot"),zxt.forEach(t),aOo=r(vje," \u2014 "),Dz=n(vje,"A",{href:!0});var Qxt=s(Dz);nOo=r(Qxt,"BlenderbotForCausalLM"),Qxt.forEach(t),sOo=r(vje," (Blenderbot model)"),vje.forEach(t),lOo=i(Q),_1=n(Q,"LI",{});var Fje=s(_1);e2e=n(Fje,"STRONG",{});var Wxt=s(e2e);iOo=r(Wxt,"blenderbot-small"),Wxt.forEach(t),dOo=r(Fje," \u2014 "),Gz=n(Fje,"A",{href:!0});var Uxt=s(Gz);cOo=r(Uxt,"BlenderbotSmallForCausalLM"),Uxt.forEach(t),mOo=r(Fje," (BlenderbotSmall model)"),Fje.forEach(t),fOo=i(Q),b1=n(Q,"LI",{});var Tje=s(b1);o2e=n(Tje,"STRONG",{});var Hxt=s(o2e);gOo=r(Hxt,"bloom"),Hxt.forEach(t),hOo=r(Tje," \u2014 "),Oz=n(Tje,"A",{href:!0});var Jxt=s(Oz);uOo=r(Jxt,"BloomForCausalLM"),Jxt.forEach(t),pOo=r(Tje," (BLOOM model)"),Tje.forEach(t),_Oo=i(Q),v1=n(Q,"LI",{});var Mje=s(v1);r2e=n(Mje,"STRONG",{});var Yxt=s(r2e);bOo=r(Yxt,"camembert"),Yxt.forEach(t),vOo=r(Mje," \u2014 "),Vz=n(Mje,"A",{href:!0});var Kxt=s(Vz);FOo=r(Kxt,"CamembertForCausalLM"),Kxt.forEach(t),TOo=r(Mje," (CamemBERT model)"),Mje.forEach(t),MOo=i(Q),F1=n(Q,"LI",{});var Eje=s(F1);t2e=n(Eje,"STRONG",{});var Zxt=s(t2e);EOo=r(Zxt,"codegen"),Zxt.forEach(t),COo=r(Eje," \u2014 "),Xz=n(Eje,"A",{href:!0});var e$t=s(Xz);wOo=r(e$t,"CodeGenForCausalLM"),e$t.forEach(t),AOo=r(Eje," (CodeGen model)"),Eje.forEach(t),LOo=i(Q),T1=n(Q,"LI",{});var Cje=s(T1);a2e=n(Cje,"STRONG",{});var o$t=s(a2e);yOo=r(o$t,"ctrl"),o$t.forEach(t),xOo=r(Cje," \u2014 "),zz=n(Cje,"A",{href:!0});var r$t=s(zz);$Oo=r(r$t,"CTRLLMHeadModel"),r$t.forEach(t),kOo=r(Cje," (CTRL model)"),Cje.forEach(t),SOo=i(Q),M1=n(Q,"LI",{});var wje=s(M1);n2e=n(wje,"STRONG",{});var t$t=s(n2e);ROo=r(t$t,"data2vec-text"),t$t.forEach(t),POo=r(wje," \u2014 "),Qz=n(wje,"A",{href:!0});var a$t=s(Qz);BOo=r(a$t,"Data2VecTextForCausalLM"),a$t.forEach(t),IOo=r(wje," (Data2VecText model)"),wje.forEach(t),NOo=i(Q),E1=n(Q,"LI",{});var Aje=s(E1);s2e=n(Aje,"STRONG",{});var n$t=s(s2e);qOo=r(n$t,"electra"),n$t.forEach(t),jOo=r(Aje," \u2014 "),Wz=n(Aje,"A",{href:!0});var s$t=s(Wz);DOo=r(s$t,"ElectraForCausalLM"),s$t.forEach(t),GOo=r(Aje," (ELECTRA model)"),Aje.forEach(t),OOo=i(Q),C1=n(Q,"LI",{});var Lje=s(C1);l2e=n(Lje,"STRONG",{});var l$t=s(l2e);VOo=r(l$t,"ernie"),l$t.forEach(t),XOo=r(Lje," \u2014 "),Uz=n(Lje,"A",{href:!0});var i$t=s(Uz);zOo=r(i$t,"ErnieForCausalLM"),i$t.forEach(t),QOo=r(Lje," (ERNIE model)"),Lje.forEach(t),WOo=i(Q),w1=n(Q,"LI",{});var yje=s(w1);i2e=n(yje,"STRONG",{});var d$t=s(i2e);UOo=r(d$t,"gpt2"),d$t.forEach(t),HOo=r(yje," \u2014 "),Hz=n(yje,"A",{href:!0});var c$t=s(Hz);JOo=r(c$t,"GPT2LMHeadModel"),c$t.forEach(t),YOo=r(yje," (OpenAI GPT-2 model)"),yje.forEach(t),KOo=i(Q),A1=n(Q,"LI",{});var xje=s(A1);d2e=n(xje,"STRONG",{});var m$t=s(d2e);ZOo=r(m$t,"gpt_neo"),m$t.forEach(t),eVo=r(xje," \u2014 "),Jz=n(xje,"A",{href:!0});var f$t=s(Jz);oVo=r(f$t,"GPTNeoForCausalLM"),f$t.forEach(t),rVo=r(xje," (GPT Neo model)"),xje.forEach(t),tVo=i(Q),L1=n(Q,"LI",{});var $je=s(L1);c2e=n($je,"STRONG",{});var g$t=s(c2e);aVo=r(g$t,"gpt_neox"),g$t.forEach(t),nVo=r($je," \u2014 "),Yz=n($je,"A",{href:!0});var h$t=s(Yz);sVo=r(h$t,"GPTNeoXForCausalLM"),h$t.forEach(t),lVo=r($je," (GPT NeoX model)"),$je.forEach(t),iVo=i(Q),y1=n(Q,"LI",{});var kje=s(y1);m2e=n(kje,"STRONG",{});var u$t=s(m2e);dVo=r(u$t,"gpt_neox_japanese"),u$t.forEach(t),cVo=r(kje," \u2014 "),Kz=n(kje,"A",{href:!0});var p$t=s(Kz);mVo=r(p$t,"GPTNeoXJapaneseForCausalLM"),p$t.forEach(t),fVo=r(kje," (GPT NeoX Japanese model)"),kje.forEach(t),gVo=i(Q),x1=n(Q,"LI",{});var Sje=s(x1);f2e=n(Sje,"STRONG",{});var _$t=s(f2e);hVo=r(_$t,"gptj"),_$t.forEach(t),uVo=r(Sje," \u2014 "),Zz=n(Sje,"A",{href:!0});var b$t=s(Zz);pVo=r(b$t,"GPTJForCausalLM"),b$t.forEach(t),_Vo=r(Sje," (GPT-J model)"),Sje.forEach(t),bVo=i(Q),$1=n(Q,"LI",{});var Rje=s($1);g2e=n(Rje,"STRONG",{});var v$t=s(g2e);vVo=r(v$t,"marian"),v$t.forEach(t),FVo=r(Rje," \u2014 "),eQ=n(Rje,"A",{href:!0});var F$t=s(eQ);TVo=r(F$t,"MarianForCausalLM"),F$t.forEach(t),MVo=r(Rje," (Marian model)"),Rje.forEach(t),EVo=i(Q),k1=n(Q,"LI",{});var Pje=s(k1);h2e=n(Pje,"STRONG",{});var T$t=s(h2e);CVo=r(T$t,"mbart"),T$t.forEach(t),wVo=r(Pje," \u2014 "),oQ=n(Pje,"A",{href:!0});var M$t=s(oQ);AVo=r(M$t,"MBartForCausalLM"),M$t.forEach(t),LVo=r(Pje," (mBART model)"),Pje.forEach(t),yVo=i(Q),S1=n(Q,"LI",{});var Bje=s(S1);u2e=n(Bje,"STRONG",{});var E$t=s(u2e);xVo=r(E$t,"megatron-bert"),E$t.forEach(t),$Vo=r(Bje," \u2014 "),rQ=n(Bje,"A",{href:!0});var C$t=s(rQ);kVo=r(C$t,"MegatronBertForCausalLM"),C$t.forEach(t),SVo=r(Bje," (Megatron-BERT model)"),Bje.forEach(t),RVo=i(Q),R1=n(Q,"LI",{});var Ije=s(R1);p2e=n(Ije,"STRONG",{});var w$t=s(p2e);PVo=r(w$t,"mvp"),w$t.forEach(t),BVo=r(Ije," \u2014 "),tQ=n(Ije,"A",{href:!0});var A$t=s(tQ);IVo=r(A$t,"MvpForCausalLM"),A$t.forEach(t),NVo=r(Ije," (MVP model)"),Ije.forEach(t),qVo=i(Q),P1=n(Q,"LI",{});var Nje=s(P1);_2e=n(Nje,"STRONG",{});var L$t=s(_2e);jVo=r(L$t,"openai-gpt"),L$t.forEach(t),DVo=r(Nje," \u2014 "),aQ=n(Nje,"A",{href:!0});var y$t=s(aQ);GVo=r(y$t,"OpenAIGPTLMHeadModel"),y$t.forEach(t),OVo=r(Nje," (OpenAI GPT model)"),Nje.forEach(t),VVo=i(Q),B1=n(Q,"LI",{});var qje=s(B1);b2e=n(qje,"STRONG",{});var x$t=s(b2e);XVo=r(x$t,"opt"),x$t.forEach(t),zVo=r(qje," \u2014 "),nQ=n(qje,"A",{href:!0});var $$t=s(nQ);QVo=r($$t,"OPTForCausalLM"),$$t.forEach(t),WVo=r(qje," (OPT model)"),qje.forEach(t),UVo=i(Q),I1=n(Q,"LI",{});var jje=s(I1);v2e=n(jje,"STRONG",{});var k$t=s(v2e);HVo=r(k$t,"pegasus"),k$t.forEach(t),JVo=r(jje," \u2014 "),sQ=n(jje,"A",{href:!0});var S$t=s(sQ);YVo=r(S$t,"PegasusForCausalLM"),S$t.forEach(t),KVo=r(jje," (Pegasus model)"),jje.forEach(t),ZVo=i(Q),N1=n(Q,"LI",{});var Dje=s(N1);F2e=n(Dje,"STRONG",{});var R$t=s(F2e);eXo=r(R$t,"plbart"),R$t.forEach(t),oXo=r(Dje," \u2014 "),lQ=n(Dje,"A",{href:!0});var P$t=s(lQ);rXo=r(P$t,"PLBartForCausalLM"),P$t.forEach(t),tXo=r(Dje," (PLBart model)"),Dje.forEach(t),aXo=i(Q),q1=n(Q,"LI",{});var Gje=s(q1);T2e=n(Gje,"STRONG",{});var B$t=s(T2e);nXo=r(B$t,"prophetnet"),B$t.forEach(t),sXo=r(Gje," \u2014 "),iQ=n(Gje,"A",{href:!0});var I$t=s(iQ);lXo=r(I$t,"ProphetNetForCausalLM"),I$t.forEach(t),iXo=r(Gje," (ProphetNet model)"),Gje.forEach(t),dXo=i(Q),j1=n(Q,"LI",{});var Oje=s(j1);M2e=n(Oje,"STRONG",{});var N$t=s(M2e);cXo=r(N$t,"qdqbert"),N$t.forEach(t),mXo=r(Oje," \u2014 "),dQ=n(Oje,"A",{href:!0});var q$t=s(dQ);fXo=r(q$t,"QDQBertLMHeadModel"),q$t.forEach(t),gXo=r(Oje," (QDQBert model)"),Oje.forEach(t),hXo=i(Q),D1=n(Q,"LI",{});var Vje=s(D1);E2e=n(Vje,"STRONG",{});var j$t=s(E2e);uXo=r(j$t,"reformer"),j$t.forEach(t),pXo=r(Vje," \u2014 "),cQ=n(Vje,"A",{href:!0});var D$t=s(cQ);_Xo=r(D$t,"ReformerModelWithLMHead"),D$t.forEach(t),bXo=r(Vje," (Reformer model)"),Vje.forEach(t),vXo=i(Q),G1=n(Q,"LI",{});var Xje=s(G1);C2e=n(Xje,"STRONG",{});var G$t=s(C2e);FXo=r(G$t,"rembert"),G$t.forEach(t),TXo=r(Xje," \u2014 "),mQ=n(Xje,"A",{href:!0});var O$t=s(mQ);MXo=r(O$t,"RemBertForCausalLM"),O$t.forEach(t),EXo=r(Xje," (RemBERT model)"),Xje.forEach(t),CXo=i(Q),O1=n(Q,"LI",{});var zje=s(O1);w2e=n(zje,"STRONG",{});var V$t=s(w2e);wXo=r(V$t,"roberta"),V$t.forEach(t),AXo=r(zje," \u2014 "),fQ=n(zje,"A",{href:!0});var X$t=s(fQ);LXo=r(X$t,"RobertaForCausalLM"),X$t.forEach(t),yXo=r(zje," (RoBERTa model)"),zje.forEach(t),xXo=i(Q),V1=n(Q,"LI",{});var Qje=s(V1);A2e=n(Qje,"STRONG",{});var z$t=s(A2e);$Xo=r(z$t,"roformer"),z$t.forEach(t),kXo=r(Qje," \u2014 "),gQ=n(Qje,"A",{href:!0});var Q$t=s(gQ);SXo=r(Q$t,"RoFormerForCausalLM"),Q$t.forEach(t),RXo=r(Qje," (RoFormer model)"),Qje.forEach(t),PXo=i(Q),X1=n(Q,"LI",{});var Wje=s(X1);L2e=n(Wje,"STRONG",{});var W$t=s(L2e);BXo=r(W$t,"speech_to_text_2"),W$t.forEach(t),IXo=r(Wje," \u2014 "),hQ=n(Wje,"A",{href:!0});var U$t=s(hQ);NXo=r(U$t,"Speech2Text2ForCausalLM"),U$t.forEach(t),qXo=r(Wje," (Speech2Text2 model)"),Wje.forEach(t),jXo=i(Q),z1=n(Q,"LI",{});var Uje=s(z1);y2e=n(Uje,"STRONG",{});var H$t=s(y2e);DXo=r(H$t,"transfo-xl"),H$t.forEach(t),GXo=r(Uje," \u2014 "),uQ=n(Uje,"A",{href:!0});var J$t=s(uQ);OXo=r(J$t,"TransfoXLLMHeadModel"),J$t.forEach(t),VXo=r(Uje," (Transformer-XL model)"),Uje.forEach(t),XXo=i(Q),Q1=n(Q,"LI",{});var Hje=s(Q1);x2e=n(Hje,"STRONG",{});var Y$t=s(x2e);zXo=r(Y$t,"trocr"),Y$t.forEach(t),QXo=r(Hje," \u2014 "),pQ=n(Hje,"A",{href:!0});var K$t=s(pQ);WXo=r(K$t,"TrOCRForCausalLM"),K$t.forEach(t),UXo=r(Hje," (TrOCR model)"),Hje.forEach(t),HXo=i(Q),W1=n(Q,"LI",{});var Jje=s(W1);$2e=n(Jje,"STRONG",{});var Z$t=s($2e);JXo=r(Z$t,"xglm"),Z$t.forEach(t),YXo=r(Jje," \u2014 "),_Q=n(Jje,"A",{href:!0});var ekt=s(_Q);KXo=r(ekt,"XGLMForCausalLM"),ekt.forEach(t),ZXo=r(Jje," (XGLM model)"),Jje.forEach(t),ezo=i(Q),U1=n(Q,"LI",{});var Yje=s(U1);k2e=n(Yje,"STRONG",{});var okt=s(k2e);ozo=r(okt,"xlm"),okt.forEach(t),rzo=r(Yje," \u2014 "),bQ=n(Yje,"A",{href:!0});var rkt=s(bQ);tzo=r(rkt,"XLMWithLMHeadModel"),rkt.forEach(t),azo=r(Yje," (XLM model)"),Yje.forEach(t),nzo=i(Q),H1=n(Q,"LI",{});var Kje=s(H1);S2e=n(Kje,"STRONG",{});var tkt=s(S2e);szo=r(tkt,"xlm-prophetnet"),tkt.forEach(t),lzo=r(Kje," \u2014 "),vQ=n(Kje,"A",{href:!0});var akt=s(vQ);izo=r(akt,"XLMProphetNetForCausalLM"),akt.forEach(t),dzo=r(Kje," (XLM-ProphetNet model)"),Kje.forEach(t),czo=i(Q),J1=n(Q,"LI",{});var Zje=s(J1);R2e=n(Zje,"STRONG",{});var nkt=s(R2e);mzo=r(nkt,"xlm-roberta"),nkt.forEach(t),fzo=r(Zje," \u2014 "),FQ=n(Zje,"A",{href:!0});var skt=s(FQ);gzo=r(skt,"XLMRobertaForCausalLM"),skt.forEach(t),hzo=r(Zje," (XLM-RoBERTa model)"),Zje.forEach(t),uzo=i(Q),Y1=n(Q,"LI",{});var eDe=s(Y1);P2e=n(eDe,"STRONG",{});var lkt=s(P2e);pzo=r(lkt,"xlm-roberta-xl"),lkt.forEach(t),_zo=r(eDe," \u2014 "),TQ=n(eDe,"A",{href:!0});var ikt=s(TQ);bzo=r(ikt,"XLMRobertaXLForCausalLM"),ikt.forEach(t),vzo=r(eDe," (XLM-RoBERTa-XL model)"),eDe.forEach(t),Fzo=i(Q),K1=n(Q,"LI",{});var oDe=s(K1);B2e=n(oDe,"STRONG",{});var dkt=s(B2e);Tzo=r(dkt,"xlnet"),dkt.forEach(t),Mzo=r(oDe," \u2014 "),MQ=n(oDe,"A",{href:!0});var ckt=s(MQ);Ezo=r(ckt,"XLNetLMHeadModel"),ckt.forEach(t),Czo=r(oDe," (XLNet model)"),oDe.forEach(t),Q.forEach(t),wzo=i(Ma),Z1=n(Ma,"P",{});var rDe=s(Z1);Azo=r(rDe,"The model is set in evaluation mode by default using "),I2e=n(rDe,"CODE",{});var mkt=s(I2e);Lzo=r(mkt,"model.eval()"),mkt.forEach(t),yzo=r(rDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=n(rDe,"CODE",{});var fkt=s(N2e);xzo=r(fkt,"model.train()"),fkt.forEach(t),rDe.forEach(t),$zo=i(Ma),T(ev.$$.fragment,Ma),Ma.forEach(t),Ll.forEach(t),xKe=i(m),wd=n(m,"H2",{class:!0});var Veo=s(wd);ov=n(Veo,"A",{id:!0,class:!0,href:!0});var gkt=s(ov);q2e=n(gkt,"SPAN",{});var hkt=s(q2e);T(vx.$$.fragment,hkt),hkt.forEach(t),gkt.forEach(t),kzo=i(Veo),j2e=n(Veo,"SPAN",{});var ukt=s(j2e);Szo=r(ukt,"AutoModelForMaskedLM"),ukt.forEach(t),Veo.forEach(t),$Ke=i(m),No=n(m,"DIV",{class:!0});var yl=s(No);T(Fx.$$.fragment,yl),Rzo=i(yl),Ad=n(yl,"P",{});var ule=s(Ad);Pzo=r(ule,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=n(ule,"A",{href:!0});var pkt=s(EQ);Bzo=r(pkt,"from_pretrained()"),pkt.forEach(t),Izo=r(ule," class method or the "),CQ=n(ule,"A",{href:!0});var _kt=s(CQ);Nzo=r(_kt,"from_config()"),_kt.forEach(t),qzo=r(ule,` class
method.`),ule.forEach(t),jzo=i(yl),Tx=n(yl,"P",{});var Xeo=s(Tx);Dzo=r(Xeo,"This class cannot be instantiated directly using "),D2e=n(Xeo,"CODE",{});var bkt=s(D2e);Gzo=r(bkt,"__init__()"),bkt.forEach(t),Ozo=r(Xeo," (throws an error)."),Xeo.forEach(t),Vzo=i(yl),Ft=n(yl,"DIV",{class:!0});var Ry=s(Ft);T(Mx.$$.fragment,Ry),Xzo=i(Ry),G2e=n(Ry,"P",{});var vkt=s(G2e);zzo=r(vkt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vkt.forEach(t),Qzo=i(Ry),Ld=n(Ry,"P",{});var ple=s(Ld);Wzo=r(ple,`Note:
Loading a model from its configuration file does `),O2e=n(ple,"STRONG",{});var Fkt=s(O2e);Uzo=r(Fkt,"not"),Fkt.forEach(t),Hzo=r(ple,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(ple,"A",{href:!0});var Tkt=s(wQ);Jzo=r(Tkt,"from_pretrained()"),Tkt.forEach(t),Yzo=r(ple," to load the model weights."),ple.forEach(t),Kzo=i(Ry),T(rv.$$.fragment,Ry),Ry.forEach(t),Zzo=i(yl),ro=n(yl,"DIV",{class:!0});var Ea=s(ro);T(Ex.$$.fragment,Ea),eQo=i(Ea),V2e=n(Ea,"P",{});var Mkt=s(V2e);oQo=r(Mkt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mkt.forEach(t),rQo=i(Ea),Za=n(Ea,"P",{});var Py=s(Za);tQo=r(Py,"The model class to instantiate is selected based on the "),X2e=n(Py,"CODE",{});var Ekt=s(X2e);aQo=r(Ekt,"model_type"),Ekt.forEach(t),nQo=r(Py,` property of the config object (either
passed as an argument or loaded from `),z2e=n(Py,"CODE",{});var Ckt=s(z2e);sQo=r(Ckt,"pretrained_model_name_or_path"),Ckt.forEach(t),lQo=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(Py,"CODE",{});var wkt=s(Q2e);iQo=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),dQo=r(Py,":"),Py.forEach(t),cQo=i(Ea),U=n(Ea,"UL",{});var Y=s(U);tv=n(Y,"LI",{});var tDe=s(tv);W2e=n(tDe,"STRONG",{});var Akt=s(W2e);mQo=r(Akt,"albert"),Akt.forEach(t),fQo=r(tDe," \u2014 "),AQ=n(tDe,"A",{href:!0});var Lkt=s(AQ);gQo=r(Lkt,"AlbertForMaskedLM"),Lkt.forEach(t),hQo=r(tDe," (ALBERT model)"),tDe.forEach(t),uQo=i(Y),av=n(Y,"LI",{});var aDe=s(av);U2e=n(aDe,"STRONG",{});var ykt=s(U2e);pQo=r(ykt,"bart"),ykt.forEach(t),_Qo=r(aDe," \u2014 "),LQ=n(aDe,"A",{href:!0});var xkt=s(LQ);bQo=r(xkt,"BartForConditionalGeneration"),xkt.forEach(t),vQo=r(aDe," (BART model)"),aDe.forEach(t),FQo=i(Y),nv=n(Y,"LI",{});var nDe=s(nv);H2e=n(nDe,"STRONG",{});var $kt=s(H2e);TQo=r($kt,"bert"),$kt.forEach(t),MQo=r(nDe," \u2014 "),yQ=n(nDe,"A",{href:!0});var kkt=s(yQ);EQo=r(kkt,"BertForMaskedLM"),kkt.forEach(t),CQo=r(nDe," (BERT model)"),nDe.forEach(t),wQo=i(Y),sv=n(Y,"LI",{});var sDe=s(sv);J2e=n(sDe,"STRONG",{});var Skt=s(J2e);AQo=r(Skt,"big_bird"),Skt.forEach(t),LQo=r(sDe," \u2014 "),xQ=n(sDe,"A",{href:!0});var Rkt=s(xQ);yQo=r(Rkt,"BigBirdForMaskedLM"),Rkt.forEach(t),xQo=r(sDe," (BigBird model)"),sDe.forEach(t),$Qo=i(Y),lv=n(Y,"LI",{});var lDe=s(lv);Y2e=n(lDe,"STRONG",{});var Pkt=s(Y2e);kQo=r(Pkt,"camembert"),Pkt.forEach(t),SQo=r(lDe," \u2014 "),$Q=n(lDe,"A",{href:!0});var Bkt=s($Q);RQo=r(Bkt,"CamembertForMaskedLM"),Bkt.forEach(t),PQo=r(lDe," (CamemBERT model)"),lDe.forEach(t),BQo=i(Y),iv=n(Y,"LI",{});var iDe=s(iv);K2e=n(iDe,"STRONG",{});var Ikt=s(K2e);IQo=r(Ikt,"convbert"),Ikt.forEach(t),NQo=r(iDe," \u2014 "),kQ=n(iDe,"A",{href:!0});var Nkt=s(kQ);qQo=r(Nkt,"ConvBertForMaskedLM"),Nkt.forEach(t),jQo=r(iDe," (ConvBERT model)"),iDe.forEach(t),DQo=i(Y),dv=n(Y,"LI",{});var dDe=s(dv);Z2e=n(dDe,"STRONG",{});var qkt=s(Z2e);GQo=r(qkt,"data2vec-text"),qkt.forEach(t),OQo=r(dDe," \u2014 "),SQ=n(dDe,"A",{href:!0});var jkt=s(SQ);VQo=r(jkt,"Data2VecTextForMaskedLM"),jkt.forEach(t),XQo=r(dDe," (Data2VecText model)"),dDe.forEach(t),zQo=i(Y),cv=n(Y,"LI",{});var cDe=s(cv);e1e=n(cDe,"STRONG",{});var Dkt=s(e1e);QQo=r(Dkt,"deberta"),Dkt.forEach(t),WQo=r(cDe," \u2014 "),RQ=n(cDe,"A",{href:!0});var Gkt=s(RQ);UQo=r(Gkt,"DebertaForMaskedLM"),Gkt.forEach(t),HQo=r(cDe," (DeBERTa model)"),cDe.forEach(t),JQo=i(Y),mv=n(Y,"LI",{});var mDe=s(mv);o1e=n(mDe,"STRONG",{});var Okt=s(o1e);YQo=r(Okt,"deberta-v2"),Okt.forEach(t),KQo=r(mDe," \u2014 "),PQ=n(mDe,"A",{href:!0});var Vkt=s(PQ);ZQo=r(Vkt,"DebertaV2ForMaskedLM"),Vkt.forEach(t),eWo=r(mDe," (DeBERTa-v2 model)"),mDe.forEach(t),oWo=i(Y),fv=n(Y,"LI",{});var fDe=s(fv);r1e=n(fDe,"STRONG",{});var Xkt=s(r1e);rWo=r(Xkt,"distilbert"),Xkt.forEach(t),tWo=r(fDe," \u2014 "),BQ=n(fDe,"A",{href:!0});var zkt=s(BQ);aWo=r(zkt,"DistilBertForMaskedLM"),zkt.forEach(t),nWo=r(fDe," (DistilBERT model)"),fDe.forEach(t),sWo=i(Y),gv=n(Y,"LI",{});var gDe=s(gv);t1e=n(gDe,"STRONG",{});var Qkt=s(t1e);lWo=r(Qkt,"electra"),Qkt.forEach(t),iWo=r(gDe," \u2014 "),IQ=n(gDe,"A",{href:!0});var Wkt=s(IQ);dWo=r(Wkt,"ElectraForMaskedLM"),Wkt.forEach(t),cWo=r(gDe," (ELECTRA model)"),gDe.forEach(t),mWo=i(Y),hv=n(Y,"LI",{});var hDe=s(hv);a1e=n(hDe,"STRONG",{});var Ukt=s(a1e);fWo=r(Ukt,"ernie"),Ukt.forEach(t),gWo=r(hDe," \u2014 "),NQ=n(hDe,"A",{href:!0});var Hkt=s(NQ);hWo=r(Hkt,"ErnieForMaskedLM"),Hkt.forEach(t),uWo=r(hDe," (ERNIE model)"),hDe.forEach(t),pWo=i(Y),uv=n(Y,"LI",{});var uDe=s(uv);n1e=n(uDe,"STRONG",{});var Jkt=s(n1e);_Wo=r(Jkt,"flaubert"),Jkt.forEach(t),bWo=r(uDe," \u2014 "),qQ=n(uDe,"A",{href:!0});var Ykt=s(qQ);vWo=r(Ykt,"FlaubertWithLMHeadModel"),Ykt.forEach(t),FWo=r(uDe," (FlauBERT model)"),uDe.forEach(t),TWo=i(Y),pv=n(Y,"LI",{});var pDe=s(pv);s1e=n(pDe,"STRONG",{});var Kkt=s(s1e);MWo=r(Kkt,"fnet"),Kkt.forEach(t),EWo=r(pDe," \u2014 "),jQ=n(pDe,"A",{href:!0});var Zkt=s(jQ);CWo=r(Zkt,"FNetForMaskedLM"),Zkt.forEach(t),wWo=r(pDe," (FNet model)"),pDe.forEach(t),AWo=i(Y),_v=n(Y,"LI",{});var _De=s(_v);l1e=n(_De,"STRONG",{});var eSt=s(l1e);LWo=r(eSt,"funnel"),eSt.forEach(t),yWo=r(_De," \u2014 "),DQ=n(_De,"A",{href:!0});var oSt=s(DQ);xWo=r(oSt,"FunnelForMaskedLM"),oSt.forEach(t),$Wo=r(_De," (Funnel Transformer model)"),_De.forEach(t),kWo=i(Y),bv=n(Y,"LI",{});var bDe=s(bv);i1e=n(bDe,"STRONG",{});var rSt=s(i1e);SWo=r(rSt,"ibert"),rSt.forEach(t),RWo=r(bDe," \u2014 "),GQ=n(bDe,"A",{href:!0});var tSt=s(GQ);PWo=r(tSt,"IBertForMaskedLM"),tSt.forEach(t),BWo=r(bDe," (I-BERT model)"),bDe.forEach(t),IWo=i(Y),vv=n(Y,"LI",{});var vDe=s(vv);d1e=n(vDe,"STRONG",{});var aSt=s(d1e);NWo=r(aSt,"layoutlm"),aSt.forEach(t),qWo=r(vDe," \u2014 "),OQ=n(vDe,"A",{href:!0});var nSt=s(OQ);jWo=r(nSt,"LayoutLMForMaskedLM"),nSt.forEach(t),DWo=r(vDe," (LayoutLM model)"),vDe.forEach(t),GWo=i(Y),Fv=n(Y,"LI",{});var FDe=s(Fv);c1e=n(FDe,"STRONG",{});var sSt=s(c1e);OWo=r(sSt,"longformer"),sSt.forEach(t),VWo=r(FDe," \u2014 "),VQ=n(FDe,"A",{href:!0});var lSt=s(VQ);XWo=r(lSt,"LongformerForMaskedLM"),lSt.forEach(t),zWo=r(FDe," (Longformer model)"),FDe.forEach(t),QWo=i(Y),Tv=n(Y,"LI",{});var TDe=s(Tv);m1e=n(TDe,"STRONG",{});var iSt=s(m1e);WWo=r(iSt,"luke"),iSt.forEach(t),UWo=r(TDe," \u2014 "),XQ=n(TDe,"A",{href:!0});var dSt=s(XQ);HWo=r(dSt,"LukeForMaskedLM"),dSt.forEach(t),JWo=r(TDe," (LUKE model)"),TDe.forEach(t),YWo=i(Y),Mv=n(Y,"LI",{});var MDe=s(Mv);f1e=n(MDe,"STRONG",{});var cSt=s(f1e);KWo=r(cSt,"mbart"),cSt.forEach(t),ZWo=r(MDe," \u2014 "),zQ=n(MDe,"A",{href:!0});var mSt=s(zQ);eUo=r(mSt,"MBartForConditionalGeneration"),mSt.forEach(t),oUo=r(MDe," (mBART model)"),MDe.forEach(t),rUo=i(Y),Ev=n(Y,"LI",{});var EDe=s(Ev);g1e=n(EDe,"STRONG",{});var fSt=s(g1e);tUo=r(fSt,"megatron-bert"),fSt.forEach(t),aUo=r(EDe," \u2014 "),QQ=n(EDe,"A",{href:!0});var gSt=s(QQ);nUo=r(gSt,"MegatronBertForMaskedLM"),gSt.forEach(t),sUo=r(EDe," (Megatron-BERT model)"),EDe.forEach(t),lUo=i(Y),Cv=n(Y,"LI",{});var CDe=s(Cv);h1e=n(CDe,"STRONG",{});var hSt=s(h1e);iUo=r(hSt,"mobilebert"),hSt.forEach(t),dUo=r(CDe," \u2014 "),WQ=n(CDe,"A",{href:!0});var uSt=s(WQ);cUo=r(uSt,"MobileBertForMaskedLM"),uSt.forEach(t),mUo=r(CDe," (MobileBERT model)"),CDe.forEach(t),fUo=i(Y),wv=n(Y,"LI",{});var wDe=s(wv);u1e=n(wDe,"STRONG",{});var pSt=s(u1e);gUo=r(pSt,"mpnet"),pSt.forEach(t),hUo=r(wDe," \u2014 "),UQ=n(wDe,"A",{href:!0});var _St=s(UQ);uUo=r(_St,"MPNetForMaskedLM"),_St.forEach(t),pUo=r(wDe," (MPNet model)"),wDe.forEach(t),_Uo=i(Y),Av=n(Y,"LI",{});var ADe=s(Av);p1e=n(ADe,"STRONG",{});var bSt=s(p1e);bUo=r(bSt,"mvp"),bSt.forEach(t),vUo=r(ADe," \u2014 "),HQ=n(ADe,"A",{href:!0});var vSt=s(HQ);FUo=r(vSt,"MvpForConditionalGeneration"),vSt.forEach(t),TUo=r(ADe," (MVP model)"),ADe.forEach(t),MUo=i(Y),Lv=n(Y,"LI",{});var LDe=s(Lv);_1e=n(LDe,"STRONG",{});var FSt=s(_1e);EUo=r(FSt,"nezha"),FSt.forEach(t),CUo=r(LDe," \u2014 "),JQ=n(LDe,"A",{href:!0});var TSt=s(JQ);wUo=r(TSt,"NezhaForMaskedLM"),TSt.forEach(t),AUo=r(LDe," (Nezha model)"),LDe.forEach(t),LUo=i(Y),yv=n(Y,"LI",{});var yDe=s(yv);b1e=n(yDe,"STRONG",{});var MSt=s(b1e);yUo=r(MSt,"nystromformer"),MSt.forEach(t),xUo=r(yDe," \u2014 "),YQ=n(yDe,"A",{href:!0});var ESt=s(YQ);$Uo=r(ESt,"NystromformerForMaskedLM"),ESt.forEach(t),kUo=r(yDe," (Nystr\xF6mformer model)"),yDe.forEach(t),SUo=i(Y),xv=n(Y,"LI",{});var xDe=s(xv);v1e=n(xDe,"STRONG",{});var CSt=s(v1e);RUo=r(CSt,"perceiver"),CSt.forEach(t),PUo=r(xDe," \u2014 "),KQ=n(xDe,"A",{href:!0});var wSt=s(KQ);BUo=r(wSt,"PerceiverForMaskedLM"),wSt.forEach(t),IUo=r(xDe," (Perceiver model)"),xDe.forEach(t),NUo=i(Y),$v=n(Y,"LI",{});var $De=s($v);F1e=n($De,"STRONG",{});var ASt=s(F1e);qUo=r(ASt,"qdqbert"),ASt.forEach(t),jUo=r($De," \u2014 "),ZQ=n($De,"A",{href:!0});var LSt=s(ZQ);DUo=r(LSt,"QDQBertForMaskedLM"),LSt.forEach(t),GUo=r($De," (QDQBert model)"),$De.forEach(t),OUo=i(Y),kv=n(Y,"LI",{});var kDe=s(kv);T1e=n(kDe,"STRONG",{});var ySt=s(T1e);VUo=r(ySt,"reformer"),ySt.forEach(t),XUo=r(kDe," \u2014 "),eW=n(kDe,"A",{href:!0});var xSt=s(eW);zUo=r(xSt,"ReformerForMaskedLM"),xSt.forEach(t),QUo=r(kDe," (Reformer model)"),kDe.forEach(t),WUo=i(Y),Sv=n(Y,"LI",{});var SDe=s(Sv);M1e=n(SDe,"STRONG",{});var $St=s(M1e);UUo=r($St,"rembert"),$St.forEach(t),HUo=r(SDe," \u2014 "),oW=n(SDe,"A",{href:!0});var kSt=s(oW);JUo=r(kSt,"RemBertForMaskedLM"),kSt.forEach(t),YUo=r(SDe," (RemBERT model)"),SDe.forEach(t),KUo=i(Y),Rv=n(Y,"LI",{});var RDe=s(Rv);E1e=n(RDe,"STRONG",{});var SSt=s(E1e);ZUo=r(SSt,"roberta"),SSt.forEach(t),eHo=r(RDe," \u2014 "),rW=n(RDe,"A",{href:!0});var RSt=s(rW);oHo=r(RSt,"RobertaForMaskedLM"),RSt.forEach(t),rHo=r(RDe," (RoBERTa model)"),RDe.forEach(t),tHo=i(Y),Pv=n(Y,"LI",{});var PDe=s(Pv);C1e=n(PDe,"STRONG",{});var PSt=s(C1e);aHo=r(PSt,"roformer"),PSt.forEach(t),nHo=r(PDe," \u2014 "),tW=n(PDe,"A",{href:!0});var BSt=s(tW);sHo=r(BSt,"RoFormerForMaskedLM"),BSt.forEach(t),lHo=r(PDe," (RoFormer model)"),PDe.forEach(t),iHo=i(Y),Bv=n(Y,"LI",{});var BDe=s(Bv);w1e=n(BDe,"STRONG",{});var ISt=s(w1e);dHo=r(ISt,"squeezebert"),ISt.forEach(t),cHo=r(BDe," \u2014 "),aW=n(BDe,"A",{href:!0});var NSt=s(aW);mHo=r(NSt,"SqueezeBertForMaskedLM"),NSt.forEach(t),fHo=r(BDe," (SqueezeBERT model)"),BDe.forEach(t),gHo=i(Y),Iv=n(Y,"LI",{});var IDe=s(Iv);A1e=n(IDe,"STRONG",{});var qSt=s(A1e);hHo=r(qSt,"tapas"),qSt.forEach(t),uHo=r(IDe," \u2014 "),nW=n(IDe,"A",{href:!0});var jSt=s(nW);pHo=r(jSt,"TapasForMaskedLM"),jSt.forEach(t),_Ho=r(IDe," (TAPAS model)"),IDe.forEach(t),bHo=i(Y),Nv=n(Y,"LI",{});var NDe=s(Nv);L1e=n(NDe,"STRONG",{});var DSt=s(L1e);vHo=r(DSt,"wav2vec2"),DSt.forEach(t),FHo=r(NDe," \u2014 "),y1e=n(NDe,"CODE",{});var GSt=s(y1e);THo=r(GSt,"Wav2Vec2ForMaskedLM"),GSt.forEach(t),MHo=r(NDe," (Wav2Vec2 model)"),NDe.forEach(t),EHo=i(Y),qv=n(Y,"LI",{});var qDe=s(qv);x1e=n(qDe,"STRONG",{});var OSt=s(x1e);CHo=r(OSt,"xlm"),OSt.forEach(t),wHo=r(qDe," \u2014 "),sW=n(qDe,"A",{href:!0});var VSt=s(sW);AHo=r(VSt,"XLMWithLMHeadModel"),VSt.forEach(t),LHo=r(qDe," (XLM model)"),qDe.forEach(t),yHo=i(Y),jv=n(Y,"LI",{});var jDe=s(jv);$1e=n(jDe,"STRONG",{});var XSt=s($1e);xHo=r(XSt,"xlm-roberta"),XSt.forEach(t),$Ho=r(jDe," \u2014 "),lW=n(jDe,"A",{href:!0});var zSt=s(lW);kHo=r(zSt,"XLMRobertaForMaskedLM"),zSt.forEach(t),SHo=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),RHo=i(Y),Dv=n(Y,"LI",{});var DDe=s(Dv);k1e=n(DDe,"STRONG",{});var QSt=s(k1e);PHo=r(QSt,"xlm-roberta-xl"),QSt.forEach(t),BHo=r(DDe," \u2014 "),iW=n(DDe,"A",{href:!0});var WSt=s(iW);IHo=r(WSt,"XLMRobertaXLForMaskedLM"),WSt.forEach(t),NHo=r(DDe," (XLM-RoBERTa-XL model)"),DDe.forEach(t),qHo=i(Y),Gv=n(Y,"LI",{});var GDe=s(Gv);S1e=n(GDe,"STRONG",{});var USt=s(S1e);jHo=r(USt,"yoso"),USt.forEach(t),DHo=r(GDe," \u2014 "),dW=n(GDe,"A",{href:!0});var HSt=s(dW);GHo=r(HSt,"YosoForMaskedLM"),HSt.forEach(t),OHo=r(GDe," (YOSO model)"),GDe.forEach(t),Y.forEach(t),VHo=i(Ea),Ov=n(Ea,"P",{});var ODe=s(Ov);XHo=r(ODe,"The model is set in evaluation mode by default using "),R1e=n(ODe,"CODE",{});var JSt=s(R1e);zHo=r(JSt,"model.eval()"),JSt.forEach(t),QHo=r(ODe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(ODe,"CODE",{});var YSt=s(P1e);WHo=r(YSt,"model.train()"),YSt.forEach(t),ODe.forEach(t),UHo=i(Ea),T(Vv.$$.fragment,Ea),Ea.forEach(t),yl.forEach(t),kKe=i(m),yd=n(m,"H2",{class:!0});var zeo=s(yd);Xv=n(zeo,"A",{id:!0,class:!0,href:!0});var KSt=s(Xv);B1e=n(KSt,"SPAN",{});var ZSt=s(B1e);T(Cx.$$.fragment,ZSt),ZSt.forEach(t),KSt.forEach(t),HHo=i(zeo),I1e=n(zeo,"SPAN",{});var eRt=s(I1e);JHo=r(eRt,"AutoModelForSeq2SeqLM"),eRt.forEach(t),zeo.forEach(t),SKe=i(m),qo=n(m,"DIV",{class:!0});var xl=s(qo);T(wx.$$.fragment,xl),YHo=i(xl),xd=n(xl,"P",{});var _le=s(xd);KHo=r(_le,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cW=n(_le,"A",{href:!0});var oRt=s(cW);ZHo=r(oRt,"from_pretrained()"),oRt.forEach(t),eJo=r(_le," class method or the "),mW=n(_le,"A",{href:!0});var rRt=s(mW);oJo=r(rRt,"from_config()"),rRt.forEach(t),rJo=r(_le,` class
method.`),_le.forEach(t),tJo=i(xl),Ax=n(xl,"P",{});var Qeo=s(Ax);aJo=r(Qeo,"This class cannot be instantiated directly using "),N1e=n(Qeo,"CODE",{});var tRt=s(N1e);nJo=r(tRt,"__init__()"),tRt.forEach(t),sJo=r(Qeo," (throws an error)."),Qeo.forEach(t),lJo=i(xl),Tt=n(xl,"DIV",{class:!0});var By=s(Tt);T(Lx.$$.fragment,By),iJo=i(By),q1e=n(By,"P",{});var aRt=s(q1e);dJo=r(aRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aRt.forEach(t),cJo=i(By),$d=n(By,"P",{});var ble=s($d);mJo=r(ble,`Note:
Loading a model from its configuration file does `),j1e=n(ble,"STRONG",{});var nRt=s(j1e);fJo=r(nRt,"not"),nRt.forEach(t),gJo=r(ble,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(ble,"A",{href:!0});var sRt=s(fW);hJo=r(sRt,"from_pretrained()"),sRt.forEach(t),uJo=r(ble," to load the model weights."),ble.forEach(t),pJo=i(By),T(zv.$$.fragment,By),By.forEach(t),_Jo=i(xl),to=n(xl,"DIV",{class:!0});var Ca=s(to);T(yx.$$.fragment,Ca),bJo=i(Ca),D1e=n(Ca,"P",{});var lRt=s(D1e);vJo=r(lRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lRt.forEach(t),FJo=i(Ca),en=n(Ca,"P",{});var Iy=s(en);TJo=r(Iy,"The model class to instantiate is selected based on the "),G1e=n(Iy,"CODE",{});var iRt=s(G1e);MJo=r(iRt,"model_type"),iRt.forEach(t),EJo=r(Iy,` property of the config object (either
passed as an argument or loaded from `),O1e=n(Iy,"CODE",{});var dRt=s(O1e);CJo=r(dRt,"pretrained_model_name_or_path"),dRt.forEach(t),wJo=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(Iy,"CODE",{});var cRt=s(V1e);AJo=r(cRt,"pretrained_model_name_or_path"),cRt.forEach(t),LJo=r(Iy,":"),Iy.forEach(t),yJo=i(Ca),me=n(Ca,"UL",{});var pe=s(me);Qv=n(pe,"LI",{});var VDe=s(Qv);X1e=n(VDe,"STRONG",{});var mRt=s(X1e);xJo=r(mRt,"bart"),mRt.forEach(t),$Jo=r(VDe," \u2014 "),gW=n(VDe,"A",{href:!0});var fRt=s(gW);kJo=r(fRt,"BartForConditionalGeneration"),fRt.forEach(t),SJo=r(VDe," (BART model)"),VDe.forEach(t),RJo=i(pe),Wv=n(pe,"LI",{});var XDe=s(Wv);z1e=n(XDe,"STRONG",{});var gRt=s(z1e);PJo=r(gRt,"bigbird_pegasus"),gRt.forEach(t),BJo=r(XDe," \u2014 "),hW=n(XDe,"A",{href:!0});var hRt=s(hW);IJo=r(hRt,"BigBirdPegasusForConditionalGeneration"),hRt.forEach(t),NJo=r(XDe," (BigBird-Pegasus model)"),XDe.forEach(t),qJo=i(pe),Uv=n(pe,"LI",{});var zDe=s(Uv);Q1e=n(zDe,"STRONG",{});var uRt=s(Q1e);jJo=r(uRt,"blenderbot"),uRt.forEach(t),DJo=r(zDe," \u2014 "),uW=n(zDe,"A",{href:!0});var pRt=s(uW);GJo=r(pRt,"BlenderbotForConditionalGeneration"),pRt.forEach(t),OJo=r(zDe," (Blenderbot model)"),zDe.forEach(t),VJo=i(pe),Hv=n(pe,"LI",{});var QDe=s(Hv);W1e=n(QDe,"STRONG",{});var _Rt=s(W1e);XJo=r(_Rt,"blenderbot-small"),_Rt.forEach(t),zJo=r(QDe," \u2014 "),pW=n(QDe,"A",{href:!0});var bRt=s(pW);QJo=r(bRt,"BlenderbotSmallForConditionalGeneration"),bRt.forEach(t),WJo=r(QDe," (BlenderbotSmall model)"),QDe.forEach(t),UJo=i(pe),Jv=n(pe,"LI",{});var WDe=s(Jv);U1e=n(WDe,"STRONG",{});var vRt=s(U1e);HJo=r(vRt,"encoder-decoder"),vRt.forEach(t),JJo=r(WDe," \u2014 "),_W=n(WDe,"A",{href:!0});var FRt=s(_W);YJo=r(FRt,"EncoderDecoderModel"),FRt.forEach(t),KJo=r(WDe," (Encoder decoder model)"),WDe.forEach(t),ZJo=i(pe),Yv=n(pe,"LI",{});var UDe=s(Yv);H1e=n(UDe,"STRONG",{});var TRt=s(H1e);eYo=r(TRt,"fsmt"),TRt.forEach(t),oYo=r(UDe," \u2014 "),bW=n(UDe,"A",{href:!0});var MRt=s(bW);rYo=r(MRt,"FSMTForConditionalGeneration"),MRt.forEach(t),tYo=r(UDe," (FairSeq Machine-Translation model)"),UDe.forEach(t),aYo=i(pe),Kv=n(pe,"LI",{});var HDe=s(Kv);J1e=n(HDe,"STRONG",{});var ERt=s(J1e);nYo=r(ERt,"led"),ERt.forEach(t),sYo=r(HDe," \u2014 "),vW=n(HDe,"A",{href:!0});var CRt=s(vW);lYo=r(CRt,"LEDForConditionalGeneration"),CRt.forEach(t),iYo=r(HDe," (LED model)"),HDe.forEach(t),dYo=i(pe),Zv=n(pe,"LI",{});var JDe=s(Zv);Y1e=n(JDe,"STRONG",{});var wRt=s(Y1e);cYo=r(wRt,"longt5"),wRt.forEach(t),mYo=r(JDe," \u2014 "),FW=n(JDe,"A",{href:!0});var ARt=s(FW);fYo=r(ARt,"LongT5ForConditionalGeneration"),ARt.forEach(t),gYo=r(JDe," (LongT5 model)"),JDe.forEach(t),hYo=i(pe),eF=n(pe,"LI",{});var YDe=s(eF);K1e=n(YDe,"STRONG",{});var LRt=s(K1e);uYo=r(LRt,"m2m_100"),LRt.forEach(t),pYo=r(YDe," \u2014 "),TW=n(YDe,"A",{href:!0});var yRt=s(TW);_Yo=r(yRt,"M2M100ForConditionalGeneration"),yRt.forEach(t),bYo=r(YDe," (M2M100 model)"),YDe.forEach(t),vYo=i(pe),oF=n(pe,"LI",{});var KDe=s(oF);Z1e=n(KDe,"STRONG",{});var xRt=s(Z1e);FYo=r(xRt,"marian"),xRt.forEach(t),TYo=r(KDe," \u2014 "),MW=n(KDe,"A",{href:!0});var $Rt=s(MW);MYo=r($Rt,"MarianMTModel"),$Rt.forEach(t),EYo=r(KDe," (Marian model)"),KDe.forEach(t),CYo=i(pe),rF=n(pe,"LI",{});var ZDe=s(rF);eve=n(ZDe,"STRONG",{});var kRt=s(eve);wYo=r(kRt,"mbart"),kRt.forEach(t),AYo=r(ZDe," \u2014 "),EW=n(ZDe,"A",{href:!0});var SRt=s(EW);LYo=r(SRt,"MBartForConditionalGeneration"),SRt.forEach(t),yYo=r(ZDe," (mBART model)"),ZDe.forEach(t),xYo=i(pe),tF=n(pe,"LI",{});var eGe=s(tF);ove=n(eGe,"STRONG",{});var RRt=s(ove);$Yo=r(RRt,"mt5"),RRt.forEach(t),kYo=r(eGe," \u2014 "),CW=n(eGe,"A",{href:!0});var PRt=s(CW);SYo=r(PRt,"MT5ForConditionalGeneration"),PRt.forEach(t),RYo=r(eGe," (MT5 model)"),eGe.forEach(t),PYo=i(pe),aF=n(pe,"LI",{});var oGe=s(aF);rve=n(oGe,"STRONG",{});var BRt=s(rve);BYo=r(BRt,"mvp"),BRt.forEach(t),IYo=r(oGe," \u2014 "),wW=n(oGe,"A",{href:!0});var IRt=s(wW);NYo=r(IRt,"MvpForConditionalGeneration"),IRt.forEach(t),qYo=r(oGe," (MVP model)"),oGe.forEach(t),jYo=i(pe),nF=n(pe,"LI",{});var rGe=s(nF);tve=n(rGe,"STRONG",{});var NRt=s(tve);DYo=r(NRt,"nllb"),NRt.forEach(t),GYo=r(rGe," \u2014 "),AW=n(rGe,"A",{href:!0});var qRt=s(AW);OYo=r(qRt,"M2M100ForConditionalGeneration"),qRt.forEach(t),VYo=r(rGe," (NLLB model)"),rGe.forEach(t),XYo=i(pe),sF=n(pe,"LI",{});var tGe=s(sF);ave=n(tGe,"STRONG",{});var jRt=s(ave);zYo=r(jRt,"pegasus"),jRt.forEach(t),QYo=r(tGe," \u2014 "),LW=n(tGe,"A",{href:!0});var DRt=s(LW);WYo=r(DRt,"PegasusForConditionalGeneration"),DRt.forEach(t),UYo=r(tGe," (Pegasus model)"),tGe.forEach(t),HYo=i(pe),lF=n(pe,"LI",{});var aGe=s(lF);nve=n(aGe,"STRONG",{});var GRt=s(nve);JYo=r(GRt,"pegasus_x"),GRt.forEach(t),YYo=r(aGe," \u2014 "),yW=n(aGe,"A",{href:!0});var ORt=s(yW);KYo=r(ORt,"PegasusXForConditionalGeneration"),ORt.forEach(t),ZYo=r(aGe," (PEGASUS-X model)"),aGe.forEach(t),eKo=i(pe),iF=n(pe,"LI",{});var nGe=s(iF);sve=n(nGe,"STRONG",{});var VRt=s(sve);oKo=r(VRt,"plbart"),VRt.forEach(t),rKo=r(nGe," \u2014 "),xW=n(nGe,"A",{href:!0});var XRt=s(xW);tKo=r(XRt,"PLBartForConditionalGeneration"),XRt.forEach(t),aKo=r(nGe," (PLBart model)"),nGe.forEach(t),nKo=i(pe),dF=n(pe,"LI",{});var sGe=s(dF);lve=n(sGe,"STRONG",{});var zRt=s(lve);sKo=r(zRt,"prophetnet"),zRt.forEach(t),lKo=r(sGe," \u2014 "),$W=n(sGe,"A",{href:!0});var QRt=s($W);iKo=r(QRt,"ProphetNetForConditionalGeneration"),QRt.forEach(t),dKo=r(sGe," (ProphetNet model)"),sGe.forEach(t),cKo=i(pe),cF=n(pe,"LI",{});var lGe=s(cF);ive=n(lGe,"STRONG",{});var WRt=s(ive);mKo=r(WRt,"t5"),WRt.forEach(t),fKo=r(lGe," \u2014 "),kW=n(lGe,"A",{href:!0});var URt=s(kW);gKo=r(URt,"T5ForConditionalGeneration"),URt.forEach(t),hKo=r(lGe," (T5 model)"),lGe.forEach(t),uKo=i(pe),mF=n(pe,"LI",{});var iGe=s(mF);dve=n(iGe,"STRONG",{});var HRt=s(dve);pKo=r(HRt,"xlm-prophetnet"),HRt.forEach(t),_Ko=r(iGe," \u2014 "),SW=n(iGe,"A",{href:!0});var JRt=s(SW);bKo=r(JRt,"XLMProphetNetForConditionalGeneration"),JRt.forEach(t),vKo=r(iGe," (XLM-ProphetNet model)"),iGe.forEach(t),pe.forEach(t),FKo=i(Ca),fF=n(Ca,"P",{});var dGe=s(fF);TKo=r(dGe,"The model is set in evaluation mode by default using "),cve=n(dGe,"CODE",{});var YRt=s(cve);MKo=r(YRt,"model.eval()"),YRt.forEach(t),EKo=r(dGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=n(dGe,"CODE",{});var KRt=s(mve);CKo=r(KRt,"model.train()"),KRt.forEach(t),dGe.forEach(t),wKo=i(Ca),T(gF.$$.fragment,Ca),Ca.forEach(t),xl.forEach(t),RKe=i(m),kd=n(m,"H2",{class:!0});var Weo=s(kd);hF=n(Weo,"A",{id:!0,class:!0,href:!0});var ZRt=s(hF);fve=n(ZRt,"SPAN",{});var ePt=s(fve);T(xx.$$.fragment,ePt),ePt.forEach(t),ZRt.forEach(t),AKo=i(Weo),gve=n(Weo,"SPAN",{});var oPt=s(gve);LKo=r(oPt,"AutoModelForSequenceClassification"),oPt.forEach(t),Weo.forEach(t),PKe=i(m),jo=n(m,"DIV",{class:!0});var $l=s(jo);T($x.$$.fragment,$l),yKo=i($l),Sd=n($l,"P",{});var vle=s(Sd);xKo=r(vle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RW=n(vle,"A",{href:!0});var rPt=s(RW);$Ko=r(rPt,"from_pretrained()"),rPt.forEach(t),kKo=r(vle," class method or the "),PW=n(vle,"A",{href:!0});var tPt=s(PW);SKo=r(tPt,"from_config()"),tPt.forEach(t),RKo=r(vle,` class
method.`),vle.forEach(t),PKo=i($l),kx=n($l,"P",{});var Ueo=s(kx);BKo=r(Ueo,"This class cannot be instantiated directly using "),hve=n(Ueo,"CODE",{});var aPt=s(hve);IKo=r(aPt,"__init__()"),aPt.forEach(t),NKo=r(Ueo," (throws an error)."),Ueo.forEach(t),qKo=i($l),Mt=n($l,"DIV",{class:!0});var Ny=s(Mt);T(Sx.$$.fragment,Ny),jKo=i(Ny),uve=n(Ny,"P",{});var nPt=s(uve);DKo=r(nPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nPt.forEach(t),GKo=i(Ny),Rd=n(Ny,"P",{});var Fle=s(Rd);OKo=r(Fle,`Note:
Loading a model from its configuration file does `),pve=n(Fle,"STRONG",{});var sPt=s(pve);VKo=r(sPt,"not"),sPt.forEach(t),XKo=r(Fle,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(Fle,"A",{href:!0});var lPt=s(BW);zKo=r(lPt,"from_pretrained()"),lPt.forEach(t),QKo=r(Fle," to load the model weights."),Fle.forEach(t),WKo=i(Ny),T(uF.$$.fragment,Ny),Ny.forEach(t),UKo=i($l),ao=n($l,"DIV",{class:!0});var wa=s(ao);T(Rx.$$.fragment,wa),HKo=i(wa),_ve=n(wa,"P",{});var iPt=s(_ve);JKo=r(iPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iPt.forEach(t),YKo=i(wa),on=n(wa,"P",{});var qy=s(on);KKo=r(qy,"The model class to instantiate is selected based on the "),bve=n(qy,"CODE",{});var dPt=s(bve);ZKo=r(dPt,"model_type"),dPt.forEach(t),eZo=r(qy,` property of the config object (either
passed as an argument or loaded from `),vve=n(qy,"CODE",{});var cPt=s(vve);oZo=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),rZo=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(qy,"CODE",{});var mPt=s(Fve);tZo=r(mPt,"pretrained_model_name_or_path"),mPt.forEach(t),aZo=r(qy,":"),qy.forEach(t),nZo=i(wa),q=n(wa,"UL",{});var D=s(q);pF=n(D,"LI",{});var cGe=s(pF);Tve=n(cGe,"STRONG",{});var fPt=s(Tve);sZo=r(fPt,"albert"),fPt.forEach(t),lZo=r(cGe," \u2014 "),IW=n(cGe,"A",{href:!0});var gPt=s(IW);iZo=r(gPt,"AlbertForSequenceClassification"),gPt.forEach(t),dZo=r(cGe," (ALBERT model)"),cGe.forEach(t),cZo=i(D),_F=n(D,"LI",{});var mGe=s(_F);Mve=n(mGe,"STRONG",{});var hPt=s(Mve);mZo=r(hPt,"bart"),hPt.forEach(t),fZo=r(mGe," \u2014 "),NW=n(mGe,"A",{href:!0});var uPt=s(NW);gZo=r(uPt,"BartForSequenceClassification"),uPt.forEach(t),hZo=r(mGe," (BART model)"),mGe.forEach(t),uZo=i(D),bF=n(D,"LI",{});var fGe=s(bF);Eve=n(fGe,"STRONG",{});var pPt=s(Eve);pZo=r(pPt,"bert"),pPt.forEach(t),_Zo=r(fGe," \u2014 "),qW=n(fGe,"A",{href:!0});var _Pt=s(qW);bZo=r(_Pt,"BertForSequenceClassification"),_Pt.forEach(t),vZo=r(fGe," (BERT model)"),fGe.forEach(t),FZo=i(D),vF=n(D,"LI",{});var gGe=s(vF);Cve=n(gGe,"STRONG",{});var bPt=s(Cve);TZo=r(bPt,"big_bird"),bPt.forEach(t),MZo=r(gGe," \u2014 "),jW=n(gGe,"A",{href:!0});var vPt=s(jW);EZo=r(vPt,"BigBirdForSequenceClassification"),vPt.forEach(t),CZo=r(gGe," (BigBird model)"),gGe.forEach(t),wZo=i(D),FF=n(D,"LI",{});var hGe=s(FF);wve=n(hGe,"STRONG",{});var FPt=s(wve);AZo=r(FPt,"bigbird_pegasus"),FPt.forEach(t),LZo=r(hGe," \u2014 "),DW=n(hGe,"A",{href:!0});var TPt=s(DW);yZo=r(TPt,"BigBirdPegasusForSequenceClassification"),TPt.forEach(t),xZo=r(hGe," (BigBird-Pegasus model)"),hGe.forEach(t),$Zo=i(D),TF=n(D,"LI",{});var uGe=s(TF);Ave=n(uGe,"STRONG",{});var MPt=s(Ave);kZo=r(MPt,"bloom"),MPt.forEach(t),SZo=r(uGe," \u2014 "),GW=n(uGe,"A",{href:!0});var EPt=s(GW);RZo=r(EPt,"BloomForSequenceClassification"),EPt.forEach(t),PZo=r(uGe," (BLOOM model)"),uGe.forEach(t),BZo=i(D),MF=n(D,"LI",{});var pGe=s(MF);Lve=n(pGe,"STRONG",{});var CPt=s(Lve);IZo=r(CPt,"camembert"),CPt.forEach(t),NZo=r(pGe," \u2014 "),OW=n(pGe,"A",{href:!0});var wPt=s(OW);qZo=r(wPt,"CamembertForSequenceClassification"),wPt.forEach(t),jZo=r(pGe," (CamemBERT model)"),pGe.forEach(t),DZo=i(D),EF=n(D,"LI",{});var _Ge=s(EF);yve=n(_Ge,"STRONG",{});var APt=s(yve);GZo=r(APt,"canine"),APt.forEach(t),OZo=r(_Ge," \u2014 "),VW=n(_Ge,"A",{href:!0});var LPt=s(VW);VZo=r(LPt,"CanineForSequenceClassification"),LPt.forEach(t),XZo=r(_Ge," (CANINE model)"),_Ge.forEach(t),zZo=i(D),CF=n(D,"LI",{});var bGe=s(CF);xve=n(bGe,"STRONG",{});var yPt=s(xve);QZo=r(yPt,"convbert"),yPt.forEach(t),WZo=r(bGe," \u2014 "),XW=n(bGe,"A",{href:!0});var xPt=s(XW);UZo=r(xPt,"ConvBertForSequenceClassification"),xPt.forEach(t),HZo=r(bGe," (ConvBERT model)"),bGe.forEach(t),JZo=i(D),wF=n(D,"LI",{});var vGe=s(wF);$ve=n(vGe,"STRONG",{});var $Pt=s($ve);YZo=r($Pt,"ctrl"),$Pt.forEach(t),KZo=r(vGe," \u2014 "),zW=n(vGe,"A",{href:!0});var kPt=s(zW);ZZo=r(kPt,"CTRLForSequenceClassification"),kPt.forEach(t),eer=r(vGe," (CTRL model)"),vGe.forEach(t),oer=i(D),AF=n(D,"LI",{});var FGe=s(AF);kve=n(FGe,"STRONG",{});var SPt=s(kve);rer=r(SPt,"data2vec-text"),SPt.forEach(t),ter=r(FGe," \u2014 "),QW=n(FGe,"A",{href:!0});var RPt=s(QW);aer=r(RPt,"Data2VecTextForSequenceClassification"),RPt.forEach(t),ner=r(FGe," (Data2VecText model)"),FGe.forEach(t),ser=i(D),LF=n(D,"LI",{});var TGe=s(LF);Sve=n(TGe,"STRONG",{});var PPt=s(Sve);ler=r(PPt,"deberta"),PPt.forEach(t),ier=r(TGe," \u2014 "),WW=n(TGe,"A",{href:!0});var BPt=s(WW);der=r(BPt,"DebertaForSequenceClassification"),BPt.forEach(t),cer=r(TGe," (DeBERTa model)"),TGe.forEach(t),mer=i(D),yF=n(D,"LI",{});var MGe=s(yF);Rve=n(MGe,"STRONG",{});var IPt=s(Rve);fer=r(IPt,"deberta-v2"),IPt.forEach(t),ger=r(MGe," \u2014 "),UW=n(MGe,"A",{href:!0});var NPt=s(UW);her=r(NPt,"DebertaV2ForSequenceClassification"),NPt.forEach(t),uer=r(MGe," (DeBERTa-v2 model)"),MGe.forEach(t),per=i(D),xF=n(D,"LI",{});var EGe=s(xF);Pve=n(EGe,"STRONG",{});var qPt=s(Pve);_er=r(qPt,"distilbert"),qPt.forEach(t),ber=r(EGe," \u2014 "),HW=n(EGe,"A",{href:!0});var jPt=s(HW);ver=r(jPt,"DistilBertForSequenceClassification"),jPt.forEach(t),Fer=r(EGe," (DistilBERT model)"),EGe.forEach(t),Ter=i(D),$F=n(D,"LI",{});var CGe=s($F);Bve=n(CGe,"STRONG",{});var DPt=s(Bve);Mer=r(DPt,"electra"),DPt.forEach(t),Eer=r(CGe," \u2014 "),JW=n(CGe,"A",{href:!0});var GPt=s(JW);Cer=r(GPt,"ElectraForSequenceClassification"),GPt.forEach(t),wer=r(CGe," (ELECTRA model)"),CGe.forEach(t),Aer=i(D),kF=n(D,"LI",{});var wGe=s(kF);Ive=n(wGe,"STRONG",{});var OPt=s(Ive);Ler=r(OPt,"ernie"),OPt.forEach(t),yer=r(wGe," \u2014 "),YW=n(wGe,"A",{href:!0});var VPt=s(YW);xer=r(VPt,"ErnieForSequenceClassification"),VPt.forEach(t),$er=r(wGe," (ERNIE model)"),wGe.forEach(t),ker=i(D),SF=n(D,"LI",{});var AGe=s(SF);Nve=n(AGe,"STRONG",{});var XPt=s(Nve);Ser=r(XPt,"flaubert"),XPt.forEach(t),Rer=r(AGe," \u2014 "),KW=n(AGe,"A",{href:!0});var zPt=s(KW);Per=r(zPt,"FlaubertForSequenceClassification"),zPt.forEach(t),Ber=r(AGe," (FlauBERT model)"),AGe.forEach(t),Ier=i(D),RF=n(D,"LI",{});var LGe=s(RF);qve=n(LGe,"STRONG",{});var QPt=s(qve);Ner=r(QPt,"fnet"),QPt.forEach(t),qer=r(LGe," \u2014 "),ZW=n(LGe,"A",{href:!0});var WPt=s(ZW);jer=r(WPt,"FNetForSequenceClassification"),WPt.forEach(t),Der=r(LGe," (FNet model)"),LGe.forEach(t),Ger=i(D),PF=n(D,"LI",{});var yGe=s(PF);jve=n(yGe,"STRONG",{});var UPt=s(jve);Oer=r(UPt,"funnel"),UPt.forEach(t),Ver=r(yGe," \u2014 "),eU=n(yGe,"A",{href:!0});var HPt=s(eU);Xer=r(HPt,"FunnelForSequenceClassification"),HPt.forEach(t),zer=r(yGe," (Funnel Transformer model)"),yGe.forEach(t),Qer=i(D),BF=n(D,"LI",{});var xGe=s(BF);Dve=n(xGe,"STRONG",{});var JPt=s(Dve);Wer=r(JPt,"gpt2"),JPt.forEach(t),Uer=r(xGe," \u2014 "),oU=n(xGe,"A",{href:!0});var YPt=s(oU);Her=r(YPt,"GPT2ForSequenceClassification"),YPt.forEach(t),Jer=r(xGe," (OpenAI GPT-2 model)"),xGe.forEach(t),Yer=i(D),IF=n(D,"LI",{});var $Ge=s(IF);Gve=n($Ge,"STRONG",{});var KPt=s(Gve);Ker=r(KPt,"gpt_neo"),KPt.forEach(t),Zer=r($Ge," \u2014 "),rU=n($Ge,"A",{href:!0});var ZPt=s(rU);eor=r(ZPt,"GPTNeoForSequenceClassification"),ZPt.forEach(t),oor=r($Ge," (GPT Neo model)"),$Ge.forEach(t),ror=i(D),NF=n(D,"LI",{});var kGe=s(NF);Ove=n(kGe,"STRONG",{});var eBt=s(Ove);tor=r(eBt,"gptj"),eBt.forEach(t),aor=r(kGe," \u2014 "),tU=n(kGe,"A",{href:!0});var oBt=s(tU);nor=r(oBt,"GPTJForSequenceClassification"),oBt.forEach(t),sor=r(kGe," (GPT-J model)"),kGe.forEach(t),lor=i(D),qF=n(D,"LI",{});var SGe=s(qF);Vve=n(SGe,"STRONG",{});var rBt=s(Vve);ior=r(rBt,"ibert"),rBt.forEach(t),dor=r(SGe," \u2014 "),aU=n(SGe,"A",{href:!0});var tBt=s(aU);cor=r(tBt,"IBertForSequenceClassification"),tBt.forEach(t),mor=r(SGe," (I-BERT model)"),SGe.forEach(t),gor=i(D),jF=n(D,"LI",{});var RGe=s(jF);Xve=n(RGe,"STRONG",{});var aBt=s(Xve);hor=r(aBt,"layoutlm"),aBt.forEach(t),uor=r(RGe," \u2014 "),nU=n(RGe,"A",{href:!0});var nBt=s(nU);por=r(nBt,"LayoutLMForSequenceClassification"),nBt.forEach(t),_or=r(RGe," (LayoutLM model)"),RGe.forEach(t),bor=i(D),DF=n(D,"LI",{});var PGe=s(DF);zve=n(PGe,"STRONG",{});var sBt=s(zve);vor=r(sBt,"layoutlmv2"),sBt.forEach(t),For=r(PGe," \u2014 "),sU=n(PGe,"A",{href:!0});var lBt=s(sU);Tor=r(lBt,"LayoutLMv2ForSequenceClassification"),lBt.forEach(t),Mor=r(PGe," (LayoutLMv2 model)"),PGe.forEach(t),Eor=i(D),GF=n(D,"LI",{});var BGe=s(GF);Qve=n(BGe,"STRONG",{});var iBt=s(Qve);Cor=r(iBt,"layoutlmv3"),iBt.forEach(t),wor=r(BGe," \u2014 "),lU=n(BGe,"A",{href:!0});var dBt=s(lU);Aor=r(dBt,"LayoutLMv3ForSequenceClassification"),dBt.forEach(t),Lor=r(BGe," (LayoutLMv3 model)"),BGe.forEach(t),yor=i(D),OF=n(D,"LI",{});var IGe=s(OF);Wve=n(IGe,"STRONG",{});var cBt=s(Wve);xor=r(cBt,"led"),cBt.forEach(t),$or=r(IGe," \u2014 "),iU=n(IGe,"A",{href:!0});var mBt=s(iU);kor=r(mBt,"LEDForSequenceClassification"),mBt.forEach(t),Sor=r(IGe," (LED model)"),IGe.forEach(t),Ror=i(D),VF=n(D,"LI",{});var NGe=s(VF);Uve=n(NGe,"STRONG",{});var fBt=s(Uve);Por=r(fBt,"longformer"),fBt.forEach(t),Bor=r(NGe," \u2014 "),dU=n(NGe,"A",{href:!0});var gBt=s(dU);Ior=r(gBt,"LongformerForSequenceClassification"),gBt.forEach(t),Nor=r(NGe," (Longformer model)"),NGe.forEach(t),qor=i(D),XF=n(D,"LI",{});var qGe=s(XF);Hve=n(qGe,"STRONG",{});var hBt=s(Hve);jor=r(hBt,"luke"),hBt.forEach(t),Dor=r(qGe," \u2014 "),cU=n(qGe,"A",{href:!0});var uBt=s(cU);Gor=r(uBt,"LukeForSequenceClassification"),uBt.forEach(t),Oor=r(qGe," (LUKE model)"),qGe.forEach(t),Vor=i(D),zF=n(D,"LI",{});var jGe=s(zF);Jve=n(jGe,"STRONG",{});var pBt=s(Jve);Xor=r(pBt,"mbart"),pBt.forEach(t),zor=r(jGe," \u2014 "),mU=n(jGe,"A",{href:!0});var _Bt=s(mU);Qor=r(_Bt,"MBartForSequenceClassification"),_Bt.forEach(t),Wor=r(jGe," (mBART model)"),jGe.forEach(t),Uor=i(D),QF=n(D,"LI",{});var DGe=s(QF);Yve=n(DGe,"STRONG",{});var bBt=s(Yve);Hor=r(bBt,"megatron-bert"),bBt.forEach(t),Jor=r(DGe," \u2014 "),fU=n(DGe,"A",{href:!0});var vBt=s(fU);Yor=r(vBt,"MegatronBertForSequenceClassification"),vBt.forEach(t),Kor=r(DGe," (Megatron-BERT model)"),DGe.forEach(t),Zor=i(D),WF=n(D,"LI",{});var GGe=s(WF);Kve=n(GGe,"STRONG",{});var FBt=s(Kve);err=r(FBt,"mobilebert"),FBt.forEach(t),orr=r(GGe," \u2014 "),gU=n(GGe,"A",{href:!0});var TBt=s(gU);rrr=r(TBt,"MobileBertForSequenceClassification"),TBt.forEach(t),trr=r(GGe," (MobileBERT model)"),GGe.forEach(t),arr=i(D),UF=n(D,"LI",{});var OGe=s(UF);Zve=n(OGe,"STRONG",{});var MBt=s(Zve);nrr=r(MBt,"mpnet"),MBt.forEach(t),srr=r(OGe," \u2014 "),hU=n(OGe,"A",{href:!0});var EBt=s(hU);lrr=r(EBt,"MPNetForSequenceClassification"),EBt.forEach(t),irr=r(OGe," (MPNet model)"),OGe.forEach(t),drr=i(D),HF=n(D,"LI",{});var VGe=s(HF);eFe=n(VGe,"STRONG",{});var CBt=s(eFe);crr=r(CBt,"mvp"),CBt.forEach(t),mrr=r(VGe," \u2014 "),uU=n(VGe,"A",{href:!0});var wBt=s(uU);frr=r(wBt,"MvpForSequenceClassification"),wBt.forEach(t),grr=r(VGe," (MVP model)"),VGe.forEach(t),hrr=i(D),JF=n(D,"LI",{});var XGe=s(JF);oFe=n(XGe,"STRONG",{});var ABt=s(oFe);urr=r(ABt,"nezha"),ABt.forEach(t),prr=r(XGe," \u2014 "),pU=n(XGe,"A",{href:!0});var LBt=s(pU);_rr=r(LBt,"NezhaForSequenceClassification"),LBt.forEach(t),brr=r(XGe," (Nezha model)"),XGe.forEach(t),vrr=i(D),YF=n(D,"LI",{});var zGe=s(YF);rFe=n(zGe,"STRONG",{});var yBt=s(rFe);Frr=r(yBt,"nystromformer"),yBt.forEach(t),Trr=r(zGe," \u2014 "),_U=n(zGe,"A",{href:!0});var xBt=s(_U);Mrr=r(xBt,"NystromformerForSequenceClassification"),xBt.forEach(t),Err=r(zGe," (Nystr\xF6mformer model)"),zGe.forEach(t),Crr=i(D),KF=n(D,"LI",{});var QGe=s(KF);tFe=n(QGe,"STRONG",{});var $Bt=s(tFe);wrr=r($Bt,"openai-gpt"),$Bt.forEach(t),Arr=r(QGe," \u2014 "),bU=n(QGe,"A",{href:!0});var kBt=s(bU);Lrr=r(kBt,"OpenAIGPTForSequenceClassification"),kBt.forEach(t),yrr=r(QGe," (OpenAI GPT model)"),QGe.forEach(t),xrr=i(D),ZF=n(D,"LI",{});var WGe=s(ZF);aFe=n(WGe,"STRONG",{});var SBt=s(aFe);$rr=r(SBt,"opt"),SBt.forEach(t),krr=r(WGe," \u2014 "),vU=n(WGe,"A",{href:!0});var RBt=s(vU);Srr=r(RBt,"OPTForSequenceClassification"),RBt.forEach(t),Rrr=r(WGe," (OPT model)"),WGe.forEach(t),Prr=i(D),eT=n(D,"LI",{});var UGe=s(eT);nFe=n(UGe,"STRONG",{});var PBt=s(nFe);Brr=r(PBt,"perceiver"),PBt.forEach(t),Irr=r(UGe," \u2014 "),FU=n(UGe,"A",{href:!0});var BBt=s(FU);Nrr=r(BBt,"PerceiverForSequenceClassification"),BBt.forEach(t),qrr=r(UGe," (Perceiver model)"),UGe.forEach(t),jrr=i(D),oT=n(D,"LI",{});var HGe=s(oT);sFe=n(HGe,"STRONG",{});var IBt=s(sFe);Drr=r(IBt,"plbart"),IBt.forEach(t),Grr=r(HGe," \u2014 "),TU=n(HGe,"A",{href:!0});var NBt=s(TU);Orr=r(NBt,"PLBartForSequenceClassification"),NBt.forEach(t),Vrr=r(HGe," (PLBart model)"),HGe.forEach(t),Xrr=i(D),rT=n(D,"LI",{});var JGe=s(rT);lFe=n(JGe,"STRONG",{});var qBt=s(lFe);zrr=r(qBt,"qdqbert"),qBt.forEach(t),Qrr=r(JGe," \u2014 "),MU=n(JGe,"A",{href:!0});var jBt=s(MU);Wrr=r(jBt,"QDQBertForSequenceClassification"),jBt.forEach(t),Urr=r(JGe," (QDQBert model)"),JGe.forEach(t),Hrr=i(D),tT=n(D,"LI",{});var YGe=s(tT);iFe=n(YGe,"STRONG",{});var DBt=s(iFe);Jrr=r(DBt,"reformer"),DBt.forEach(t),Yrr=r(YGe," \u2014 "),EU=n(YGe,"A",{href:!0});var GBt=s(EU);Krr=r(GBt,"ReformerForSequenceClassification"),GBt.forEach(t),Zrr=r(YGe," (Reformer model)"),YGe.forEach(t),etr=i(D),aT=n(D,"LI",{});var KGe=s(aT);dFe=n(KGe,"STRONG",{});var OBt=s(dFe);otr=r(OBt,"rembert"),OBt.forEach(t),rtr=r(KGe," \u2014 "),CU=n(KGe,"A",{href:!0});var VBt=s(CU);ttr=r(VBt,"RemBertForSequenceClassification"),VBt.forEach(t),atr=r(KGe," (RemBERT model)"),KGe.forEach(t),ntr=i(D),nT=n(D,"LI",{});var ZGe=s(nT);cFe=n(ZGe,"STRONG",{});var XBt=s(cFe);str=r(XBt,"roberta"),XBt.forEach(t),ltr=r(ZGe," \u2014 "),wU=n(ZGe,"A",{href:!0});var zBt=s(wU);itr=r(zBt,"RobertaForSequenceClassification"),zBt.forEach(t),dtr=r(ZGe," (RoBERTa model)"),ZGe.forEach(t),ctr=i(D),sT=n(D,"LI",{});var eOe=s(sT);mFe=n(eOe,"STRONG",{});var QBt=s(mFe);mtr=r(QBt,"roformer"),QBt.forEach(t),ftr=r(eOe," \u2014 "),AU=n(eOe,"A",{href:!0});var WBt=s(AU);gtr=r(WBt,"RoFormerForSequenceClassification"),WBt.forEach(t),htr=r(eOe," (RoFormer model)"),eOe.forEach(t),utr=i(D),lT=n(D,"LI",{});var oOe=s(lT);fFe=n(oOe,"STRONG",{});var UBt=s(fFe);ptr=r(UBt,"squeezebert"),UBt.forEach(t),_tr=r(oOe," \u2014 "),LU=n(oOe,"A",{href:!0});var HBt=s(LU);btr=r(HBt,"SqueezeBertForSequenceClassification"),HBt.forEach(t),vtr=r(oOe," (SqueezeBERT model)"),oOe.forEach(t),Ftr=i(D),iT=n(D,"LI",{});var rOe=s(iT);gFe=n(rOe,"STRONG",{});var JBt=s(gFe);Ttr=r(JBt,"tapas"),JBt.forEach(t),Mtr=r(rOe," \u2014 "),yU=n(rOe,"A",{href:!0});var YBt=s(yU);Etr=r(YBt,"TapasForSequenceClassification"),YBt.forEach(t),Ctr=r(rOe," (TAPAS model)"),rOe.forEach(t),wtr=i(D),dT=n(D,"LI",{});var tOe=s(dT);hFe=n(tOe,"STRONG",{});var KBt=s(hFe);Atr=r(KBt,"transfo-xl"),KBt.forEach(t),Ltr=r(tOe," \u2014 "),xU=n(tOe,"A",{href:!0});var ZBt=s(xU);ytr=r(ZBt,"TransfoXLForSequenceClassification"),ZBt.forEach(t),xtr=r(tOe," (Transformer-XL model)"),tOe.forEach(t),$tr=i(D),cT=n(D,"LI",{});var aOe=s(cT);uFe=n(aOe,"STRONG",{});var eIt=s(uFe);ktr=r(eIt,"xlm"),eIt.forEach(t),Str=r(aOe," \u2014 "),$U=n(aOe,"A",{href:!0});var oIt=s($U);Rtr=r(oIt,"XLMForSequenceClassification"),oIt.forEach(t),Ptr=r(aOe," (XLM model)"),aOe.forEach(t),Btr=i(D),mT=n(D,"LI",{});var nOe=s(mT);pFe=n(nOe,"STRONG",{});var rIt=s(pFe);Itr=r(rIt,"xlm-roberta"),rIt.forEach(t),Ntr=r(nOe," \u2014 "),kU=n(nOe,"A",{href:!0});var tIt=s(kU);qtr=r(tIt,"XLMRobertaForSequenceClassification"),tIt.forEach(t),jtr=r(nOe," (XLM-RoBERTa model)"),nOe.forEach(t),Dtr=i(D),fT=n(D,"LI",{});var sOe=s(fT);_Fe=n(sOe,"STRONG",{});var aIt=s(_Fe);Gtr=r(aIt,"xlm-roberta-xl"),aIt.forEach(t),Otr=r(sOe," \u2014 "),SU=n(sOe,"A",{href:!0});var nIt=s(SU);Vtr=r(nIt,"XLMRobertaXLForSequenceClassification"),nIt.forEach(t),Xtr=r(sOe," (XLM-RoBERTa-XL model)"),sOe.forEach(t),ztr=i(D),gT=n(D,"LI",{});var lOe=s(gT);bFe=n(lOe,"STRONG",{});var sIt=s(bFe);Qtr=r(sIt,"xlnet"),sIt.forEach(t),Wtr=r(lOe," \u2014 "),RU=n(lOe,"A",{href:!0});var lIt=s(RU);Utr=r(lIt,"XLNetForSequenceClassification"),lIt.forEach(t),Htr=r(lOe," (XLNet model)"),lOe.forEach(t),Jtr=i(D),hT=n(D,"LI",{});var iOe=s(hT);vFe=n(iOe,"STRONG",{});var iIt=s(vFe);Ytr=r(iIt,"yoso"),iIt.forEach(t),Ktr=r(iOe," \u2014 "),PU=n(iOe,"A",{href:!0});var dIt=s(PU);Ztr=r(dIt,"YosoForSequenceClassification"),dIt.forEach(t),ear=r(iOe," (YOSO model)"),iOe.forEach(t),D.forEach(t),oar=i(wa),uT=n(wa,"P",{});var dOe=s(uT);rar=r(dOe,"The model is set in evaluation mode by default using "),FFe=n(dOe,"CODE",{});var cIt=s(FFe);tar=r(cIt,"model.eval()"),cIt.forEach(t),aar=r(dOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=n(dOe,"CODE",{});var mIt=s(TFe);nar=r(mIt,"model.train()"),mIt.forEach(t),dOe.forEach(t),sar=i(wa),T(pT.$$.fragment,wa),wa.forEach(t),$l.forEach(t),BKe=i(m),Pd=n(m,"H2",{class:!0});var Heo=s(Pd);_T=n(Heo,"A",{id:!0,class:!0,href:!0});var fIt=s(_T);MFe=n(fIt,"SPAN",{});var gIt=s(MFe);T(Px.$$.fragment,gIt),gIt.forEach(t),fIt.forEach(t),lar=i(Heo),EFe=n(Heo,"SPAN",{});var hIt=s(EFe);iar=r(hIt,"AutoModelForMultipleChoice"),hIt.forEach(t),Heo.forEach(t),IKe=i(m),Do=n(m,"DIV",{class:!0});var kl=s(Do);T(Bx.$$.fragment,kl),dar=i(kl),Bd=n(kl,"P",{});var Tle=s(Bd);car=r(Tle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BU=n(Tle,"A",{href:!0});var uIt=s(BU);mar=r(uIt,"from_pretrained()"),uIt.forEach(t),far=r(Tle," class method or the "),IU=n(Tle,"A",{href:!0});var pIt=s(IU);gar=r(pIt,"from_config()"),pIt.forEach(t),har=r(Tle,` class
method.`),Tle.forEach(t),uar=i(kl),Ix=n(kl,"P",{});var Jeo=s(Ix);par=r(Jeo,"This class cannot be instantiated directly using "),CFe=n(Jeo,"CODE",{});var _It=s(CFe);_ar=r(_It,"__init__()"),_It.forEach(t),bar=r(Jeo," (throws an error)."),Jeo.forEach(t),Far=i(kl),Et=n(kl,"DIV",{class:!0});var jy=s(Et);T(Nx.$$.fragment,jy),Tar=i(jy),wFe=n(jy,"P",{});var bIt=s(wFe);Mar=r(bIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bIt.forEach(t),Ear=i(jy),Id=n(jy,"P",{});var Mle=s(Id);Car=r(Mle,`Note:
Loading a model from its configuration file does `),AFe=n(Mle,"STRONG",{});var vIt=s(AFe);war=r(vIt,"not"),vIt.forEach(t),Aar=r(Mle,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(Mle,"A",{href:!0});var FIt=s(NU);Lar=r(FIt,"from_pretrained()"),FIt.forEach(t),yar=r(Mle," to load the model weights."),Mle.forEach(t),xar=i(jy),T(bT.$$.fragment,jy),jy.forEach(t),$ar=i(kl),no=n(kl,"DIV",{class:!0});var Aa=s(no);T(qx.$$.fragment,Aa),kar=i(Aa),LFe=n(Aa,"P",{});var TIt=s(LFe);Sar=r(TIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TIt.forEach(t),Rar=i(Aa),rn=n(Aa,"P",{});var Dy=s(rn);Par=r(Dy,"The model class to instantiate is selected based on the "),yFe=n(Dy,"CODE",{});var MIt=s(yFe);Bar=r(MIt,"model_type"),MIt.forEach(t),Iar=r(Dy,` property of the config object (either
passed as an argument or loaded from `),xFe=n(Dy,"CODE",{});var EIt=s(xFe);Nar=r(EIt,"pretrained_model_name_or_path"),EIt.forEach(t),qar=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(Dy,"CODE",{});var CIt=s($Fe);jar=r(CIt,"pretrained_model_name_or_path"),CIt.forEach(t),Dar=r(Dy,":"),Dy.forEach(t),Gar=i(Aa),Z=n(Aa,"UL",{});var ee=s(Z);vT=n(ee,"LI",{});var cOe=s(vT);kFe=n(cOe,"STRONG",{});var wIt=s(kFe);Oar=r(wIt,"albert"),wIt.forEach(t),Var=r(cOe," \u2014 "),qU=n(cOe,"A",{href:!0});var AIt=s(qU);Xar=r(AIt,"AlbertForMultipleChoice"),AIt.forEach(t),zar=r(cOe," (ALBERT model)"),cOe.forEach(t),Qar=i(ee),FT=n(ee,"LI",{});var mOe=s(FT);SFe=n(mOe,"STRONG",{});var LIt=s(SFe);War=r(LIt,"bert"),LIt.forEach(t),Uar=r(mOe," \u2014 "),jU=n(mOe,"A",{href:!0});var yIt=s(jU);Har=r(yIt,"BertForMultipleChoice"),yIt.forEach(t),Jar=r(mOe," (BERT model)"),mOe.forEach(t),Yar=i(ee),TT=n(ee,"LI",{});var fOe=s(TT);RFe=n(fOe,"STRONG",{});var xIt=s(RFe);Kar=r(xIt,"big_bird"),xIt.forEach(t),Zar=r(fOe," \u2014 "),DU=n(fOe,"A",{href:!0});var $It=s(DU);enr=r($It,"BigBirdForMultipleChoice"),$It.forEach(t),onr=r(fOe," (BigBird model)"),fOe.forEach(t),rnr=i(ee),MT=n(ee,"LI",{});var gOe=s(MT);PFe=n(gOe,"STRONG",{});var kIt=s(PFe);tnr=r(kIt,"camembert"),kIt.forEach(t),anr=r(gOe," \u2014 "),GU=n(gOe,"A",{href:!0});var SIt=s(GU);nnr=r(SIt,"CamembertForMultipleChoice"),SIt.forEach(t),snr=r(gOe," (CamemBERT model)"),gOe.forEach(t),lnr=i(ee),ET=n(ee,"LI",{});var hOe=s(ET);BFe=n(hOe,"STRONG",{});var RIt=s(BFe);inr=r(RIt,"canine"),RIt.forEach(t),dnr=r(hOe," \u2014 "),OU=n(hOe,"A",{href:!0});var PIt=s(OU);cnr=r(PIt,"CanineForMultipleChoice"),PIt.forEach(t),mnr=r(hOe," (CANINE model)"),hOe.forEach(t),fnr=i(ee),CT=n(ee,"LI",{});var uOe=s(CT);IFe=n(uOe,"STRONG",{});var BIt=s(IFe);gnr=r(BIt,"convbert"),BIt.forEach(t),hnr=r(uOe," \u2014 "),VU=n(uOe,"A",{href:!0});var IIt=s(VU);unr=r(IIt,"ConvBertForMultipleChoice"),IIt.forEach(t),pnr=r(uOe," (ConvBERT model)"),uOe.forEach(t),_nr=i(ee),wT=n(ee,"LI",{});var pOe=s(wT);NFe=n(pOe,"STRONG",{});var NIt=s(NFe);bnr=r(NIt,"data2vec-text"),NIt.forEach(t),vnr=r(pOe," \u2014 "),XU=n(pOe,"A",{href:!0});var qIt=s(XU);Fnr=r(qIt,"Data2VecTextForMultipleChoice"),qIt.forEach(t),Tnr=r(pOe," (Data2VecText model)"),pOe.forEach(t),Mnr=i(ee),AT=n(ee,"LI",{});var _Oe=s(AT);qFe=n(_Oe,"STRONG",{});var jIt=s(qFe);Enr=r(jIt,"deberta-v2"),jIt.forEach(t),Cnr=r(_Oe," \u2014 "),zU=n(_Oe,"A",{href:!0});var DIt=s(zU);wnr=r(DIt,"DebertaV2ForMultipleChoice"),DIt.forEach(t),Anr=r(_Oe," (DeBERTa-v2 model)"),_Oe.forEach(t),Lnr=i(ee),LT=n(ee,"LI",{});var bOe=s(LT);jFe=n(bOe,"STRONG",{});var GIt=s(jFe);ynr=r(GIt,"distilbert"),GIt.forEach(t),xnr=r(bOe," \u2014 "),QU=n(bOe,"A",{href:!0});var OIt=s(QU);$nr=r(OIt,"DistilBertForMultipleChoice"),OIt.forEach(t),knr=r(bOe," (DistilBERT model)"),bOe.forEach(t),Snr=i(ee),yT=n(ee,"LI",{});var vOe=s(yT);DFe=n(vOe,"STRONG",{});var VIt=s(DFe);Rnr=r(VIt,"electra"),VIt.forEach(t),Pnr=r(vOe," \u2014 "),WU=n(vOe,"A",{href:!0});var XIt=s(WU);Bnr=r(XIt,"ElectraForMultipleChoice"),XIt.forEach(t),Inr=r(vOe," (ELECTRA model)"),vOe.forEach(t),Nnr=i(ee),xT=n(ee,"LI",{});var FOe=s(xT);GFe=n(FOe,"STRONG",{});var zIt=s(GFe);qnr=r(zIt,"ernie"),zIt.forEach(t),jnr=r(FOe," \u2014 "),UU=n(FOe,"A",{href:!0});var QIt=s(UU);Dnr=r(QIt,"ErnieForMultipleChoice"),QIt.forEach(t),Gnr=r(FOe," (ERNIE model)"),FOe.forEach(t),Onr=i(ee),$T=n(ee,"LI",{});var TOe=s($T);OFe=n(TOe,"STRONG",{});var WIt=s(OFe);Vnr=r(WIt,"flaubert"),WIt.forEach(t),Xnr=r(TOe," \u2014 "),HU=n(TOe,"A",{href:!0});var UIt=s(HU);znr=r(UIt,"FlaubertForMultipleChoice"),UIt.forEach(t),Qnr=r(TOe," (FlauBERT model)"),TOe.forEach(t),Wnr=i(ee),kT=n(ee,"LI",{});var MOe=s(kT);VFe=n(MOe,"STRONG",{});var HIt=s(VFe);Unr=r(HIt,"fnet"),HIt.forEach(t),Hnr=r(MOe," \u2014 "),JU=n(MOe,"A",{href:!0});var JIt=s(JU);Jnr=r(JIt,"FNetForMultipleChoice"),JIt.forEach(t),Ynr=r(MOe," (FNet model)"),MOe.forEach(t),Knr=i(ee),ST=n(ee,"LI",{});var EOe=s(ST);XFe=n(EOe,"STRONG",{});var YIt=s(XFe);Znr=r(YIt,"funnel"),YIt.forEach(t),esr=r(EOe," \u2014 "),YU=n(EOe,"A",{href:!0});var KIt=s(YU);osr=r(KIt,"FunnelForMultipleChoice"),KIt.forEach(t),rsr=r(EOe," (Funnel Transformer model)"),EOe.forEach(t),tsr=i(ee),RT=n(ee,"LI",{});var COe=s(RT);zFe=n(COe,"STRONG",{});var ZIt=s(zFe);asr=r(ZIt,"ibert"),ZIt.forEach(t),nsr=r(COe," \u2014 "),KU=n(COe,"A",{href:!0});var eNt=s(KU);ssr=r(eNt,"IBertForMultipleChoice"),eNt.forEach(t),lsr=r(COe," (I-BERT model)"),COe.forEach(t),isr=i(ee),PT=n(ee,"LI",{});var wOe=s(PT);QFe=n(wOe,"STRONG",{});var oNt=s(QFe);dsr=r(oNt,"longformer"),oNt.forEach(t),csr=r(wOe," \u2014 "),ZU=n(wOe,"A",{href:!0});var rNt=s(ZU);msr=r(rNt,"LongformerForMultipleChoice"),rNt.forEach(t),fsr=r(wOe," (Longformer model)"),wOe.forEach(t),gsr=i(ee),BT=n(ee,"LI",{});var AOe=s(BT);WFe=n(AOe,"STRONG",{});var tNt=s(WFe);hsr=r(tNt,"luke"),tNt.forEach(t),usr=r(AOe," \u2014 "),eH=n(AOe,"A",{href:!0});var aNt=s(eH);psr=r(aNt,"LukeForMultipleChoice"),aNt.forEach(t),_sr=r(AOe," (LUKE model)"),AOe.forEach(t),bsr=i(ee),IT=n(ee,"LI",{});var LOe=s(IT);UFe=n(LOe,"STRONG",{});var nNt=s(UFe);vsr=r(nNt,"megatron-bert"),nNt.forEach(t),Fsr=r(LOe," \u2014 "),oH=n(LOe,"A",{href:!0});var sNt=s(oH);Tsr=r(sNt,"MegatronBertForMultipleChoice"),sNt.forEach(t),Msr=r(LOe," (Megatron-BERT model)"),LOe.forEach(t),Esr=i(ee),NT=n(ee,"LI",{});var yOe=s(NT);HFe=n(yOe,"STRONG",{});var lNt=s(HFe);Csr=r(lNt,"mobilebert"),lNt.forEach(t),wsr=r(yOe," \u2014 "),rH=n(yOe,"A",{href:!0});var iNt=s(rH);Asr=r(iNt,"MobileBertForMultipleChoice"),iNt.forEach(t),Lsr=r(yOe," (MobileBERT model)"),yOe.forEach(t),ysr=i(ee),qT=n(ee,"LI",{});var xOe=s(qT);JFe=n(xOe,"STRONG",{});var dNt=s(JFe);xsr=r(dNt,"mpnet"),dNt.forEach(t),$sr=r(xOe," \u2014 "),tH=n(xOe,"A",{href:!0});var cNt=s(tH);ksr=r(cNt,"MPNetForMultipleChoice"),cNt.forEach(t),Ssr=r(xOe," (MPNet model)"),xOe.forEach(t),Rsr=i(ee),jT=n(ee,"LI",{});var $Oe=s(jT);YFe=n($Oe,"STRONG",{});var mNt=s(YFe);Psr=r(mNt,"nezha"),mNt.forEach(t),Bsr=r($Oe," \u2014 "),aH=n($Oe,"A",{href:!0});var fNt=s(aH);Isr=r(fNt,"NezhaForMultipleChoice"),fNt.forEach(t),Nsr=r($Oe," (Nezha model)"),$Oe.forEach(t),qsr=i(ee),DT=n(ee,"LI",{});var kOe=s(DT);KFe=n(kOe,"STRONG",{});var gNt=s(KFe);jsr=r(gNt,"nystromformer"),gNt.forEach(t),Dsr=r(kOe," \u2014 "),nH=n(kOe,"A",{href:!0});var hNt=s(nH);Gsr=r(hNt,"NystromformerForMultipleChoice"),hNt.forEach(t),Osr=r(kOe," (Nystr\xF6mformer model)"),kOe.forEach(t),Vsr=i(ee),GT=n(ee,"LI",{});var SOe=s(GT);ZFe=n(SOe,"STRONG",{});var uNt=s(ZFe);Xsr=r(uNt,"qdqbert"),uNt.forEach(t),zsr=r(SOe," \u2014 "),sH=n(SOe,"A",{href:!0});var pNt=s(sH);Qsr=r(pNt,"QDQBertForMultipleChoice"),pNt.forEach(t),Wsr=r(SOe," (QDQBert model)"),SOe.forEach(t),Usr=i(ee),OT=n(ee,"LI",{});var ROe=s(OT);eTe=n(ROe,"STRONG",{});var _Nt=s(eTe);Hsr=r(_Nt,"rembert"),_Nt.forEach(t),Jsr=r(ROe," \u2014 "),lH=n(ROe,"A",{href:!0});var bNt=s(lH);Ysr=r(bNt,"RemBertForMultipleChoice"),bNt.forEach(t),Ksr=r(ROe," (RemBERT model)"),ROe.forEach(t),Zsr=i(ee),VT=n(ee,"LI",{});var POe=s(VT);oTe=n(POe,"STRONG",{});var vNt=s(oTe);elr=r(vNt,"roberta"),vNt.forEach(t),olr=r(POe," \u2014 "),iH=n(POe,"A",{href:!0});var FNt=s(iH);rlr=r(FNt,"RobertaForMultipleChoice"),FNt.forEach(t),tlr=r(POe," (RoBERTa model)"),POe.forEach(t),alr=i(ee),XT=n(ee,"LI",{});var BOe=s(XT);rTe=n(BOe,"STRONG",{});var TNt=s(rTe);nlr=r(TNt,"roformer"),TNt.forEach(t),slr=r(BOe," \u2014 "),dH=n(BOe,"A",{href:!0});var MNt=s(dH);llr=r(MNt,"RoFormerForMultipleChoice"),MNt.forEach(t),ilr=r(BOe," (RoFormer model)"),BOe.forEach(t),dlr=i(ee),zT=n(ee,"LI",{});var IOe=s(zT);tTe=n(IOe,"STRONG",{});var ENt=s(tTe);clr=r(ENt,"squeezebert"),ENt.forEach(t),mlr=r(IOe," \u2014 "),cH=n(IOe,"A",{href:!0});var CNt=s(cH);flr=r(CNt,"SqueezeBertForMultipleChoice"),CNt.forEach(t),glr=r(IOe," (SqueezeBERT model)"),IOe.forEach(t),hlr=i(ee),QT=n(ee,"LI",{});var NOe=s(QT);aTe=n(NOe,"STRONG",{});var wNt=s(aTe);ulr=r(wNt,"xlm"),wNt.forEach(t),plr=r(NOe," \u2014 "),mH=n(NOe,"A",{href:!0});var ANt=s(mH);_lr=r(ANt,"XLMForMultipleChoice"),ANt.forEach(t),blr=r(NOe," (XLM model)"),NOe.forEach(t),vlr=i(ee),WT=n(ee,"LI",{});var qOe=s(WT);nTe=n(qOe,"STRONG",{});var LNt=s(nTe);Flr=r(LNt,"xlm-roberta"),LNt.forEach(t),Tlr=r(qOe," \u2014 "),fH=n(qOe,"A",{href:!0});var yNt=s(fH);Mlr=r(yNt,"XLMRobertaForMultipleChoice"),yNt.forEach(t),Elr=r(qOe," (XLM-RoBERTa model)"),qOe.forEach(t),Clr=i(ee),UT=n(ee,"LI",{});var jOe=s(UT);sTe=n(jOe,"STRONG",{});var xNt=s(sTe);wlr=r(xNt,"xlm-roberta-xl"),xNt.forEach(t),Alr=r(jOe," \u2014 "),gH=n(jOe,"A",{href:!0});var $Nt=s(gH);Llr=r($Nt,"XLMRobertaXLForMultipleChoice"),$Nt.forEach(t),ylr=r(jOe," (XLM-RoBERTa-XL model)"),jOe.forEach(t),xlr=i(ee),HT=n(ee,"LI",{});var DOe=s(HT);lTe=n(DOe,"STRONG",{});var kNt=s(lTe);$lr=r(kNt,"xlnet"),kNt.forEach(t),klr=r(DOe," \u2014 "),hH=n(DOe,"A",{href:!0});var SNt=s(hH);Slr=r(SNt,"XLNetForMultipleChoice"),SNt.forEach(t),Rlr=r(DOe," (XLNet model)"),DOe.forEach(t),Plr=i(ee),JT=n(ee,"LI",{});var GOe=s(JT);iTe=n(GOe,"STRONG",{});var RNt=s(iTe);Blr=r(RNt,"yoso"),RNt.forEach(t),Ilr=r(GOe," \u2014 "),uH=n(GOe,"A",{href:!0});var PNt=s(uH);Nlr=r(PNt,"YosoForMultipleChoice"),PNt.forEach(t),qlr=r(GOe," (YOSO model)"),GOe.forEach(t),ee.forEach(t),jlr=i(Aa),YT=n(Aa,"P",{});var OOe=s(YT);Dlr=r(OOe,"The model is set in evaluation mode by default using "),dTe=n(OOe,"CODE",{});var BNt=s(dTe);Glr=r(BNt,"model.eval()"),BNt.forEach(t),Olr=r(OOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=n(OOe,"CODE",{});var INt=s(cTe);Vlr=r(INt,"model.train()"),INt.forEach(t),OOe.forEach(t),Xlr=i(Aa),T(KT.$$.fragment,Aa),Aa.forEach(t),kl.forEach(t),NKe=i(m),Nd=n(m,"H2",{class:!0});var Yeo=s(Nd);ZT=n(Yeo,"A",{id:!0,class:!0,href:!0});var NNt=s(ZT);mTe=n(NNt,"SPAN",{});var qNt=s(mTe);T(jx.$$.fragment,qNt),qNt.forEach(t),NNt.forEach(t),zlr=i(Yeo),fTe=n(Yeo,"SPAN",{});var jNt=s(fTe);Qlr=r(jNt,"AutoModelForNextSentencePrediction"),jNt.forEach(t),Yeo.forEach(t),qKe=i(m),Go=n(m,"DIV",{class:!0});var Sl=s(Go);T(Dx.$$.fragment,Sl),Wlr=i(Sl),qd=n(Sl,"P",{});var Ele=s(qd);Ulr=r(Ele,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pH=n(Ele,"A",{href:!0});var DNt=s(pH);Hlr=r(DNt,"from_pretrained()"),DNt.forEach(t),Jlr=r(Ele," class method or the "),_H=n(Ele,"A",{href:!0});var GNt=s(_H);Ylr=r(GNt,"from_config()"),GNt.forEach(t),Klr=r(Ele,` class
method.`),Ele.forEach(t),Zlr=i(Sl),Gx=n(Sl,"P",{});var Keo=s(Gx);eir=r(Keo,"This class cannot be instantiated directly using "),gTe=n(Keo,"CODE",{});var ONt=s(gTe);oir=r(ONt,"__init__()"),ONt.forEach(t),rir=r(Keo," (throws an error)."),Keo.forEach(t),tir=i(Sl),Ct=n(Sl,"DIV",{class:!0});var Gy=s(Ct);T(Ox.$$.fragment,Gy),air=i(Gy),hTe=n(Gy,"P",{});var VNt=s(hTe);nir=r(VNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VNt.forEach(t),sir=i(Gy),jd=n(Gy,"P",{});var Cle=s(jd);lir=r(Cle,`Note:
Loading a model from its configuration file does `),uTe=n(Cle,"STRONG",{});var XNt=s(uTe);iir=r(XNt,"not"),XNt.forEach(t),dir=r(Cle,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(Cle,"A",{href:!0});var zNt=s(bH);cir=r(zNt,"from_pretrained()"),zNt.forEach(t),mir=r(Cle," to load the model weights."),Cle.forEach(t),fir=i(Gy),T(eM.$$.fragment,Gy),Gy.forEach(t),gir=i(Sl),so=n(Sl,"DIV",{class:!0});var La=s(so);T(Vx.$$.fragment,La),hir=i(La),pTe=n(La,"P",{});var QNt=s(pTe);uir=r(QNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QNt.forEach(t),pir=i(La),tn=n(La,"P",{});var Oy=s(tn);_ir=r(Oy,"The model class to instantiate is selected based on the "),_Te=n(Oy,"CODE",{});var WNt=s(_Te);bir=r(WNt,"model_type"),WNt.forEach(t),vir=r(Oy,` property of the config object (either
passed as an argument or loaded from `),bTe=n(Oy,"CODE",{});var UNt=s(bTe);Fir=r(UNt,"pretrained_model_name_or_path"),UNt.forEach(t),Tir=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(Oy,"CODE",{});var HNt=s(vTe);Mir=r(HNt,"pretrained_model_name_or_path"),HNt.forEach(t),Eir=r(Oy,":"),Oy.forEach(t),Cir=i(La),Ue=n(La,"UL",{});var ct=s(Ue);oM=n(ct,"LI",{});var VOe=s(oM);FTe=n(VOe,"STRONG",{});var JNt=s(FTe);wir=r(JNt,"bert"),JNt.forEach(t),Air=r(VOe," \u2014 "),vH=n(VOe,"A",{href:!0});var YNt=s(vH);Lir=r(YNt,"BertForNextSentencePrediction"),YNt.forEach(t),yir=r(VOe," (BERT model)"),VOe.forEach(t),xir=i(ct),rM=n(ct,"LI",{});var XOe=s(rM);TTe=n(XOe,"STRONG",{});var KNt=s(TTe);$ir=r(KNt,"ernie"),KNt.forEach(t),kir=r(XOe," \u2014 "),FH=n(XOe,"A",{href:!0});var ZNt=s(FH);Sir=r(ZNt,"ErnieForNextSentencePrediction"),ZNt.forEach(t),Rir=r(XOe," (ERNIE model)"),XOe.forEach(t),Pir=i(ct),tM=n(ct,"LI",{});var zOe=s(tM);MTe=n(zOe,"STRONG",{});var eqt=s(MTe);Bir=r(eqt,"fnet"),eqt.forEach(t),Iir=r(zOe," \u2014 "),TH=n(zOe,"A",{href:!0});var oqt=s(TH);Nir=r(oqt,"FNetForNextSentencePrediction"),oqt.forEach(t),qir=r(zOe," (FNet model)"),zOe.forEach(t),jir=i(ct),aM=n(ct,"LI",{});var QOe=s(aM);ETe=n(QOe,"STRONG",{});var rqt=s(ETe);Dir=r(rqt,"megatron-bert"),rqt.forEach(t),Gir=r(QOe," \u2014 "),MH=n(QOe,"A",{href:!0});var tqt=s(MH);Oir=r(tqt,"MegatronBertForNextSentencePrediction"),tqt.forEach(t),Vir=r(QOe," (Megatron-BERT model)"),QOe.forEach(t),Xir=i(ct),nM=n(ct,"LI",{});var WOe=s(nM);CTe=n(WOe,"STRONG",{});var aqt=s(CTe);zir=r(aqt,"mobilebert"),aqt.forEach(t),Qir=r(WOe," \u2014 "),EH=n(WOe,"A",{href:!0});var nqt=s(EH);Wir=r(nqt,"MobileBertForNextSentencePrediction"),nqt.forEach(t),Uir=r(WOe," (MobileBERT model)"),WOe.forEach(t),Hir=i(ct),sM=n(ct,"LI",{});var UOe=s(sM);wTe=n(UOe,"STRONG",{});var sqt=s(wTe);Jir=r(sqt,"nezha"),sqt.forEach(t),Yir=r(UOe," \u2014 "),CH=n(UOe,"A",{href:!0});var lqt=s(CH);Kir=r(lqt,"NezhaForNextSentencePrediction"),lqt.forEach(t),Zir=r(UOe," (Nezha model)"),UOe.forEach(t),edr=i(ct),lM=n(ct,"LI",{});var HOe=s(lM);ATe=n(HOe,"STRONG",{});var iqt=s(ATe);odr=r(iqt,"qdqbert"),iqt.forEach(t),rdr=r(HOe," \u2014 "),wH=n(HOe,"A",{href:!0});var dqt=s(wH);tdr=r(dqt,"QDQBertForNextSentencePrediction"),dqt.forEach(t),adr=r(HOe," (QDQBert model)"),HOe.forEach(t),ct.forEach(t),ndr=i(La),iM=n(La,"P",{});var JOe=s(iM);sdr=r(JOe,"The model is set in evaluation mode by default using "),LTe=n(JOe,"CODE",{});var cqt=s(LTe);ldr=r(cqt,"model.eval()"),cqt.forEach(t),idr=r(JOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yTe=n(JOe,"CODE",{});var mqt=s(yTe);ddr=r(mqt,"model.train()"),mqt.forEach(t),JOe.forEach(t),cdr=i(La),T(dM.$$.fragment,La),La.forEach(t),Sl.forEach(t),jKe=i(m),Dd=n(m,"H2",{class:!0});var Zeo=s(Dd);cM=n(Zeo,"A",{id:!0,class:!0,href:!0});var fqt=s(cM);xTe=n(fqt,"SPAN",{});var gqt=s(xTe);T(Xx.$$.fragment,gqt),gqt.forEach(t),fqt.forEach(t),mdr=i(Zeo),$Te=n(Zeo,"SPAN",{});var hqt=s($Te);fdr=r(hqt,"AutoModelForTokenClassification"),hqt.forEach(t),Zeo.forEach(t),DKe=i(m),Oo=n(m,"DIV",{class:!0});var Rl=s(Oo);T(zx.$$.fragment,Rl),gdr=i(Rl),Gd=n(Rl,"P",{});var wle=s(Gd);hdr=r(wle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AH=n(wle,"A",{href:!0});var uqt=s(AH);udr=r(uqt,"from_pretrained()"),uqt.forEach(t),pdr=r(wle," class method or the "),LH=n(wle,"A",{href:!0});var pqt=s(LH);_dr=r(pqt,"from_config()"),pqt.forEach(t),bdr=r(wle,` class
method.`),wle.forEach(t),vdr=i(Rl),Qx=n(Rl,"P",{});var eoo=s(Qx);Fdr=r(eoo,"This class cannot be instantiated directly using "),kTe=n(eoo,"CODE",{});var _qt=s(kTe);Tdr=r(_qt,"__init__()"),_qt.forEach(t),Mdr=r(eoo," (throws an error)."),eoo.forEach(t),Edr=i(Rl),wt=n(Rl,"DIV",{class:!0});var Vy=s(wt);T(Wx.$$.fragment,Vy),Cdr=i(Vy),STe=n(Vy,"P",{});var bqt=s(STe);wdr=r(bqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bqt.forEach(t),Adr=i(Vy),Od=n(Vy,"P",{});var Ale=s(Od);Ldr=r(Ale,`Note:
Loading a model from its configuration file does `),RTe=n(Ale,"STRONG",{});var vqt=s(RTe);ydr=r(vqt,"not"),vqt.forEach(t),xdr=r(Ale,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(Ale,"A",{href:!0});var Fqt=s(yH);$dr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),kdr=r(Ale," to load the model weights."),Ale.forEach(t),Sdr=i(Vy),T(mM.$$.fragment,Vy),Vy.forEach(t),Rdr=i(Rl),lo=n(Rl,"DIV",{class:!0});var ya=s(lo);T(Ux.$$.fragment,ya),Pdr=i(ya),PTe=n(ya,"P",{});var Tqt=s(PTe);Bdr=r(Tqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tqt.forEach(t),Idr=i(ya),an=n(ya,"P",{});var Xy=s(an);Ndr=r(Xy,"The model class to instantiate is selected based on the "),BTe=n(Xy,"CODE",{});var Mqt=s(BTe);qdr=r(Mqt,"model_type"),Mqt.forEach(t),jdr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),ITe=n(Xy,"CODE",{});var Eqt=s(ITe);Ddr=r(Eqt,"pretrained_model_name_or_path"),Eqt.forEach(t),Gdr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(Xy,"CODE",{});var Cqt=s(NTe);Odr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),Vdr=r(Xy,":"),Xy.forEach(t),Xdr=i(ya),J=n(ya,"UL",{});var K=s(J);fM=n(K,"LI",{});var YOe=s(fM);qTe=n(YOe,"STRONG",{});var wqt=s(qTe);zdr=r(wqt,"albert"),wqt.forEach(t),Qdr=r(YOe," \u2014 "),xH=n(YOe,"A",{href:!0});var Aqt=s(xH);Wdr=r(Aqt,"AlbertForTokenClassification"),Aqt.forEach(t),Udr=r(YOe," (ALBERT model)"),YOe.forEach(t),Hdr=i(K),gM=n(K,"LI",{});var KOe=s(gM);jTe=n(KOe,"STRONG",{});var Lqt=s(jTe);Jdr=r(Lqt,"bert"),Lqt.forEach(t),Ydr=r(KOe," \u2014 "),$H=n(KOe,"A",{href:!0});var yqt=s($H);Kdr=r(yqt,"BertForTokenClassification"),yqt.forEach(t),Zdr=r(KOe," (BERT model)"),KOe.forEach(t),ecr=i(K),hM=n(K,"LI",{});var ZOe=s(hM);DTe=n(ZOe,"STRONG",{});var xqt=s(DTe);ocr=r(xqt,"big_bird"),xqt.forEach(t),rcr=r(ZOe," \u2014 "),kH=n(ZOe,"A",{href:!0});var $qt=s(kH);tcr=r($qt,"BigBirdForTokenClassification"),$qt.forEach(t),acr=r(ZOe," (BigBird model)"),ZOe.forEach(t),ncr=i(K),uM=n(K,"LI",{});var eVe=s(uM);GTe=n(eVe,"STRONG",{});var kqt=s(GTe);scr=r(kqt,"bloom"),kqt.forEach(t),lcr=r(eVe," \u2014 "),SH=n(eVe,"A",{href:!0});var Sqt=s(SH);icr=r(Sqt,"BloomForTokenClassification"),Sqt.forEach(t),dcr=r(eVe," (BLOOM model)"),eVe.forEach(t),ccr=i(K),pM=n(K,"LI",{});var oVe=s(pM);OTe=n(oVe,"STRONG",{});var Rqt=s(OTe);mcr=r(Rqt,"camembert"),Rqt.forEach(t),fcr=r(oVe," \u2014 "),RH=n(oVe,"A",{href:!0});var Pqt=s(RH);gcr=r(Pqt,"CamembertForTokenClassification"),Pqt.forEach(t),hcr=r(oVe," (CamemBERT model)"),oVe.forEach(t),ucr=i(K),_M=n(K,"LI",{});var rVe=s(_M);VTe=n(rVe,"STRONG",{});var Bqt=s(VTe);pcr=r(Bqt,"canine"),Bqt.forEach(t),_cr=r(rVe," \u2014 "),PH=n(rVe,"A",{href:!0});var Iqt=s(PH);bcr=r(Iqt,"CanineForTokenClassification"),Iqt.forEach(t),vcr=r(rVe," (CANINE model)"),rVe.forEach(t),Fcr=i(K),bM=n(K,"LI",{});var tVe=s(bM);XTe=n(tVe,"STRONG",{});var Nqt=s(XTe);Tcr=r(Nqt,"convbert"),Nqt.forEach(t),Mcr=r(tVe," \u2014 "),BH=n(tVe,"A",{href:!0});var qqt=s(BH);Ecr=r(qqt,"ConvBertForTokenClassification"),qqt.forEach(t),Ccr=r(tVe," (ConvBERT model)"),tVe.forEach(t),wcr=i(K),vM=n(K,"LI",{});var aVe=s(vM);zTe=n(aVe,"STRONG",{});var jqt=s(zTe);Acr=r(jqt,"data2vec-text"),jqt.forEach(t),Lcr=r(aVe," \u2014 "),IH=n(aVe,"A",{href:!0});var Dqt=s(IH);ycr=r(Dqt,"Data2VecTextForTokenClassification"),Dqt.forEach(t),xcr=r(aVe," (Data2VecText model)"),aVe.forEach(t),$cr=i(K),FM=n(K,"LI",{});var nVe=s(FM);QTe=n(nVe,"STRONG",{});var Gqt=s(QTe);kcr=r(Gqt,"deberta"),Gqt.forEach(t),Scr=r(nVe," \u2014 "),NH=n(nVe,"A",{href:!0});var Oqt=s(NH);Rcr=r(Oqt,"DebertaForTokenClassification"),Oqt.forEach(t),Pcr=r(nVe," (DeBERTa model)"),nVe.forEach(t),Bcr=i(K),TM=n(K,"LI",{});var sVe=s(TM);WTe=n(sVe,"STRONG",{});var Vqt=s(WTe);Icr=r(Vqt,"deberta-v2"),Vqt.forEach(t),Ncr=r(sVe," \u2014 "),qH=n(sVe,"A",{href:!0});var Xqt=s(qH);qcr=r(Xqt,"DebertaV2ForTokenClassification"),Xqt.forEach(t),jcr=r(sVe," (DeBERTa-v2 model)"),sVe.forEach(t),Dcr=i(K),MM=n(K,"LI",{});var lVe=s(MM);UTe=n(lVe,"STRONG",{});var zqt=s(UTe);Gcr=r(zqt,"distilbert"),zqt.forEach(t),Ocr=r(lVe," \u2014 "),jH=n(lVe,"A",{href:!0});var Qqt=s(jH);Vcr=r(Qqt,"DistilBertForTokenClassification"),Qqt.forEach(t),Xcr=r(lVe," (DistilBERT model)"),lVe.forEach(t),zcr=i(K),EM=n(K,"LI",{});var iVe=s(EM);HTe=n(iVe,"STRONG",{});var Wqt=s(HTe);Qcr=r(Wqt,"electra"),Wqt.forEach(t),Wcr=r(iVe," \u2014 "),DH=n(iVe,"A",{href:!0});var Uqt=s(DH);Ucr=r(Uqt,"ElectraForTokenClassification"),Uqt.forEach(t),Hcr=r(iVe," (ELECTRA model)"),iVe.forEach(t),Jcr=i(K),CM=n(K,"LI",{});var dVe=s(CM);JTe=n(dVe,"STRONG",{});var Hqt=s(JTe);Ycr=r(Hqt,"ernie"),Hqt.forEach(t),Kcr=r(dVe," \u2014 "),GH=n(dVe,"A",{href:!0});var Jqt=s(GH);Zcr=r(Jqt,"ErnieForTokenClassification"),Jqt.forEach(t),emr=r(dVe," (ERNIE model)"),dVe.forEach(t),omr=i(K),wM=n(K,"LI",{});var cVe=s(wM);YTe=n(cVe,"STRONG",{});var Yqt=s(YTe);rmr=r(Yqt,"flaubert"),Yqt.forEach(t),tmr=r(cVe," \u2014 "),OH=n(cVe,"A",{href:!0});var Kqt=s(OH);amr=r(Kqt,"FlaubertForTokenClassification"),Kqt.forEach(t),nmr=r(cVe," (FlauBERT model)"),cVe.forEach(t),smr=i(K),AM=n(K,"LI",{});var mVe=s(AM);KTe=n(mVe,"STRONG",{});var Zqt=s(KTe);lmr=r(Zqt,"fnet"),Zqt.forEach(t),imr=r(mVe," \u2014 "),VH=n(mVe,"A",{href:!0});var ejt=s(VH);dmr=r(ejt,"FNetForTokenClassification"),ejt.forEach(t),cmr=r(mVe," (FNet model)"),mVe.forEach(t),mmr=i(K),LM=n(K,"LI",{});var fVe=s(LM);ZTe=n(fVe,"STRONG",{});var ojt=s(ZTe);fmr=r(ojt,"funnel"),ojt.forEach(t),gmr=r(fVe," \u2014 "),XH=n(fVe,"A",{href:!0});var rjt=s(XH);hmr=r(rjt,"FunnelForTokenClassification"),rjt.forEach(t),umr=r(fVe," (Funnel Transformer model)"),fVe.forEach(t),pmr=i(K),yM=n(K,"LI",{});var gVe=s(yM);eMe=n(gVe,"STRONG",{});var tjt=s(eMe);_mr=r(tjt,"gpt2"),tjt.forEach(t),bmr=r(gVe," \u2014 "),zH=n(gVe,"A",{href:!0});var ajt=s(zH);vmr=r(ajt,"GPT2ForTokenClassification"),ajt.forEach(t),Fmr=r(gVe," (OpenAI GPT-2 model)"),gVe.forEach(t),Tmr=i(K),xM=n(K,"LI",{});var hVe=s(xM);oMe=n(hVe,"STRONG",{});var njt=s(oMe);Mmr=r(njt,"ibert"),njt.forEach(t),Emr=r(hVe," \u2014 "),QH=n(hVe,"A",{href:!0});var sjt=s(QH);Cmr=r(sjt,"IBertForTokenClassification"),sjt.forEach(t),wmr=r(hVe," (I-BERT model)"),hVe.forEach(t),Amr=i(K),$M=n(K,"LI",{});var uVe=s($M);rMe=n(uVe,"STRONG",{});var ljt=s(rMe);Lmr=r(ljt,"layoutlm"),ljt.forEach(t),ymr=r(uVe," \u2014 "),WH=n(uVe,"A",{href:!0});var ijt=s(WH);xmr=r(ijt,"LayoutLMForTokenClassification"),ijt.forEach(t),$mr=r(uVe," (LayoutLM model)"),uVe.forEach(t),kmr=i(K),kM=n(K,"LI",{});var pVe=s(kM);tMe=n(pVe,"STRONG",{});var djt=s(tMe);Smr=r(djt,"layoutlmv2"),djt.forEach(t),Rmr=r(pVe," \u2014 "),UH=n(pVe,"A",{href:!0});var cjt=s(UH);Pmr=r(cjt,"LayoutLMv2ForTokenClassification"),cjt.forEach(t),Bmr=r(pVe," (LayoutLMv2 model)"),pVe.forEach(t),Imr=i(K),SM=n(K,"LI",{});var _Ve=s(SM);aMe=n(_Ve,"STRONG",{});var mjt=s(aMe);Nmr=r(mjt,"layoutlmv3"),mjt.forEach(t),qmr=r(_Ve," \u2014 "),HH=n(_Ve,"A",{href:!0});var fjt=s(HH);jmr=r(fjt,"LayoutLMv3ForTokenClassification"),fjt.forEach(t),Dmr=r(_Ve," (LayoutLMv3 model)"),_Ve.forEach(t),Gmr=i(K),RM=n(K,"LI",{});var bVe=s(RM);nMe=n(bVe,"STRONG",{});var gjt=s(nMe);Omr=r(gjt,"longformer"),gjt.forEach(t),Vmr=r(bVe," \u2014 "),JH=n(bVe,"A",{href:!0});var hjt=s(JH);Xmr=r(hjt,"LongformerForTokenClassification"),hjt.forEach(t),zmr=r(bVe," (Longformer model)"),bVe.forEach(t),Qmr=i(K),PM=n(K,"LI",{});var vVe=s(PM);sMe=n(vVe,"STRONG",{});var ujt=s(sMe);Wmr=r(ujt,"luke"),ujt.forEach(t),Umr=r(vVe," \u2014 "),YH=n(vVe,"A",{href:!0});var pjt=s(YH);Hmr=r(pjt,"LukeForTokenClassification"),pjt.forEach(t),Jmr=r(vVe," (LUKE model)"),vVe.forEach(t),Ymr=i(K),BM=n(K,"LI",{});var FVe=s(BM);lMe=n(FVe,"STRONG",{});var _jt=s(lMe);Kmr=r(_jt,"megatron-bert"),_jt.forEach(t),Zmr=r(FVe," \u2014 "),KH=n(FVe,"A",{href:!0});var bjt=s(KH);efr=r(bjt,"MegatronBertForTokenClassification"),bjt.forEach(t),ofr=r(FVe," (Megatron-BERT model)"),FVe.forEach(t),rfr=i(K),IM=n(K,"LI",{});var TVe=s(IM);iMe=n(TVe,"STRONG",{});var vjt=s(iMe);tfr=r(vjt,"mobilebert"),vjt.forEach(t),afr=r(TVe," \u2014 "),ZH=n(TVe,"A",{href:!0});var Fjt=s(ZH);nfr=r(Fjt,"MobileBertForTokenClassification"),Fjt.forEach(t),sfr=r(TVe," (MobileBERT model)"),TVe.forEach(t),lfr=i(K),NM=n(K,"LI",{});var MVe=s(NM);dMe=n(MVe,"STRONG",{});var Tjt=s(dMe);ifr=r(Tjt,"mpnet"),Tjt.forEach(t),dfr=r(MVe," \u2014 "),eJ=n(MVe,"A",{href:!0});var Mjt=s(eJ);cfr=r(Mjt,"MPNetForTokenClassification"),Mjt.forEach(t),mfr=r(MVe," (MPNet model)"),MVe.forEach(t),ffr=i(K),qM=n(K,"LI",{});var EVe=s(qM);cMe=n(EVe,"STRONG",{});var Ejt=s(cMe);gfr=r(Ejt,"nezha"),Ejt.forEach(t),hfr=r(EVe," \u2014 "),oJ=n(EVe,"A",{href:!0});var Cjt=s(oJ);ufr=r(Cjt,"NezhaForTokenClassification"),Cjt.forEach(t),pfr=r(EVe," (Nezha model)"),EVe.forEach(t),_fr=i(K),jM=n(K,"LI",{});var CVe=s(jM);mMe=n(CVe,"STRONG",{});var wjt=s(mMe);bfr=r(wjt,"nystromformer"),wjt.forEach(t),vfr=r(CVe," \u2014 "),rJ=n(CVe,"A",{href:!0});var Ajt=s(rJ);Ffr=r(Ajt,"NystromformerForTokenClassification"),Ajt.forEach(t),Tfr=r(CVe," (Nystr\xF6mformer model)"),CVe.forEach(t),Mfr=i(K),DM=n(K,"LI",{});var wVe=s(DM);fMe=n(wVe,"STRONG",{});var Ljt=s(fMe);Efr=r(Ljt,"qdqbert"),Ljt.forEach(t),Cfr=r(wVe," \u2014 "),tJ=n(wVe,"A",{href:!0});var yjt=s(tJ);wfr=r(yjt,"QDQBertForTokenClassification"),yjt.forEach(t),Afr=r(wVe," (QDQBert model)"),wVe.forEach(t),Lfr=i(K),GM=n(K,"LI",{});var AVe=s(GM);gMe=n(AVe,"STRONG",{});var xjt=s(gMe);yfr=r(xjt,"rembert"),xjt.forEach(t),xfr=r(AVe," \u2014 "),aJ=n(AVe,"A",{href:!0});var $jt=s(aJ);$fr=r($jt,"RemBertForTokenClassification"),$jt.forEach(t),kfr=r(AVe," (RemBERT model)"),AVe.forEach(t),Sfr=i(K),OM=n(K,"LI",{});var LVe=s(OM);hMe=n(LVe,"STRONG",{});var kjt=s(hMe);Rfr=r(kjt,"roberta"),kjt.forEach(t),Pfr=r(LVe," \u2014 "),nJ=n(LVe,"A",{href:!0});var Sjt=s(nJ);Bfr=r(Sjt,"RobertaForTokenClassification"),Sjt.forEach(t),Ifr=r(LVe," (RoBERTa model)"),LVe.forEach(t),Nfr=i(K),VM=n(K,"LI",{});var yVe=s(VM);uMe=n(yVe,"STRONG",{});var Rjt=s(uMe);qfr=r(Rjt,"roformer"),Rjt.forEach(t),jfr=r(yVe," \u2014 "),sJ=n(yVe,"A",{href:!0});var Pjt=s(sJ);Dfr=r(Pjt,"RoFormerForTokenClassification"),Pjt.forEach(t),Gfr=r(yVe," (RoFormer model)"),yVe.forEach(t),Ofr=i(K),XM=n(K,"LI",{});var xVe=s(XM);pMe=n(xVe,"STRONG",{});var Bjt=s(pMe);Vfr=r(Bjt,"squeezebert"),Bjt.forEach(t),Xfr=r(xVe," \u2014 "),lJ=n(xVe,"A",{href:!0});var Ijt=s(lJ);zfr=r(Ijt,"SqueezeBertForTokenClassification"),Ijt.forEach(t),Qfr=r(xVe," (SqueezeBERT model)"),xVe.forEach(t),Wfr=i(K),zM=n(K,"LI",{});var $Ve=s(zM);_Me=n($Ve,"STRONG",{});var Njt=s(_Me);Ufr=r(Njt,"xlm"),Njt.forEach(t),Hfr=r($Ve," \u2014 "),iJ=n($Ve,"A",{href:!0});var qjt=s(iJ);Jfr=r(qjt,"XLMForTokenClassification"),qjt.forEach(t),Yfr=r($Ve," (XLM model)"),$Ve.forEach(t),Kfr=i(K),QM=n(K,"LI",{});var kVe=s(QM);bMe=n(kVe,"STRONG",{});var jjt=s(bMe);Zfr=r(jjt,"xlm-roberta"),jjt.forEach(t),egr=r(kVe," \u2014 "),dJ=n(kVe,"A",{href:!0});var Djt=s(dJ);ogr=r(Djt,"XLMRobertaForTokenClassification"),Djt.forEach(t),rgr=r(kVe," (XLM-RoBERTa model)"),kVe.forEach(t),tgr=i(K),WM=n(K,"LI",{});var SVe=s(WM);vMe=n(SVe,"STRONG",{});var Gjt=s(vMe);agr=r(Gjt,"xlm-roberta-xl"),Gjt.forEach(t),ngr=r(SVe," \u2014 "),cJ=n(SVe,"A",{href:!0});var Ojt=s(cJ);sgr=r(Ojt,"XLMRobertaXLForTokenClassification"),Ojt.forEach(t),lgr=r(SVe," (XLM-RoBERTa-XL model)"),SVe.forEach(t),igr=i(K),UM=n(K,"LI",{});var RVe=s(UM);FMe=n(RVe,"STRONG",{});var Vjt=s(FMe);dgr=r(Vjt,"xlnet"),Vjt.forEach(t),cgr=r(RVe," \u2014 "),mJ=n(RVe,"A",{href:!0});var Xjt=s(mJ);mgr=r(Xjt,"XLNetForTokenClassification"),Xjt.forEach(t),fgr=r(RVe," (XLNet model)"),RVe.forEach(t),ggr=i(K),HM=n(K,"LI",{});var PVe=s(HM);TMe=n(PVe,"STRONG",{});var zjt=s(TMe);hgr=r(zjt,"yoso"),zjt.forEach(t),ugr=r(PVe," \u2014 "),fJ=n(PVe,"A",{href:!0});var Qjt=s(fJ);pgr=r(Qjt,"YosoForTokenClassification"),Qjt.forEach(t),_gr=r(PVe," (YOSO model)"),PVe.forEach(t),K.forEach(t),bgr=i(ya),JM=n(ya,"P",{});var BVe=s(JM);vgr=r(BVe,"The model is set in evaluation mode by default using "),MMe=n(BVe,"CODE",{});var Wjt=s(MMe);Fgr=r(Wjt,"model.eval()"),Wjt.forEach(t),Tgr=r(BVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EMe=n(BVe,"CODE",{});var Ujt=s(EMe);Mgr=r(Ujt,"model.train()"),Ujt.forEach(t),BVe.forEach(t),Egr=i(ya),T(YM.$$.fragment,ya),ya.forEach(t),Rl.forEach(t),GKe=i(m),Vd=n(m,"H2",{class:!0});var ooo=s(Vd);KM=n(ooo,"A",{id:!0,class:!0,href:!0});var Hjt=s(KM);CMe=n(Hjt,"SPAN",{});var Jjt=s(CMe);T(Hx.$$.fragment,Jjt),Jjt.forEach(t),Hjt.forEach(t),Cgr=i(ooo),wMe=n(ooo,"SPAN",{});var Yjt=s(wMe);wgr=r(Yjt,"AutoModelForQuestionAnswering"),Yjt.forEach(t),ooo.forEach(t),OKe=i(m),Vo=n(m,"DIV",{class:!0});var Pl=s(Vo);T(Jx.$$.fragment,Pl),Agr=i(Pl),Xd=n(Pl,"P",{});var Lle=s(Xd);Lgr=r(Lle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gJ=n(Lle,"A",{href:!0});var Kjt=s(gJ);ygr=r(Kjt,"from_pretrained()"),Kjt.forEach(t),xgr=r(Lle," class method or the "),hJ=n(Lle,"A",{href:!0});var Zjt=s(hJ);$gr=r(Zjt,"from_config()"),Zjt.forEach(t),kgr=r(Lle,` class
method.`),Lle.forEach(t),Sgr=i(Pl),Yx=n(Pl,"P",{});var roo=s(Yx);Rgr=r(roo,"This class cannot be instantiated directly using "),AMe=n(roo,"CODE",{});var eDt=s(AMe);Pgr=r(eDt,"__init__()"),eDt.forEach(t),Bgr=r(roo," (throws an error)."),roo.forEach(t),Igr=i(Pl),At=n(Pl,"DIV",{class:!0});var zy=s(At);T(Kx.$$.fragment,zy),Ngr=i(zy),LMe=n(zy,"P",{});var oDt=s(LMe);qgr=r(oDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oDt.forEach(t),jgr=i(zy),zd=n(zy,"P",{});var yle=s(zd);Dgr=r(yle,`Note:
Loading a model from its configuration file does `),yMe=n(yle,"STRONG",{});var rDt=s(yMe);Ggr=r(rDt,"not"),rDt.forEach(t),Ogr=r(yle,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(yle,"A",{href:!0});var tDt=s(uJ);Vgr=r(tDt,"from_pretrained()"),tDt.forEach(t),Xgr=r(yle," to load the model weights."),yle.forEach(t),zgr=i(zy),T(ZM.$$.fragment,zy),zy.forEach(t),Qgr=i(Pl),io=n(Pl,"DIV",{class:!0});var xa=s(io);T(Zx.$$.fragment,xa),Wgr=i(xa),xMe=n(xa,"P",{});var aDt=s(xMe);Ugr=r(aDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aDt.forEach(t),Hgr=i(xa),nn=n(xa,"P",{});var Qy=s(nn);Jgr=r(Qy,"The model class to instantiate is selected based on the "),$Me=n(Qy,"CODE",{});var nDt=s($Me);Ygr=r(nDt,"model_type"),nDt.forEach(t),Kgr=r(Qy,` property of the config object (either
passed as an argument or loaded from `),kMe=n(Qy,"CODE",{});var sDt=s(kMe);Zgr=r(sDt,"pretrained_model_name_or_path"),sDt.forEach(t),ehr=r(Qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(Qy,"CODE",{});var lDt=s(SMe);ohr=r(lDt,"pretrained_model_name_or_path"),lDt.forEach(t),rhr=r(Qy,":"),Qy.forEach(t),thr=i(xa),V=n(xa,"UL",{});var X=s(V);eE=n(X,"LI",{});var IVe=s(eE);RMe=n(IVe,"STRONG",{});var iDt=s(RMe);ahr=r(iDt,"albert"),iDt.forEach(t),nhr=r(IVe," \u2014 "),pJ=n(IVe,"A",{href:!0});var dDt=s(pJ);shr=r(dDt,"AlbertForQuestionAnswering"),dDt.forEach(t),lhr=r(IVe," (ALBERT model)"),IVe.forEach(t),ihr=i(X),oE=n(X,"LI",{});var NVe=s(oE);PMe=n(NVe,"STRONG",{});var cDt=s(PMe);dhr=r(cDt,"bart"),cDt.forEach(t),chr=r(NVe," \u2014 "),_J=n(NVe,"A",{href:!0});var mDt=s(_J);mhr=r(mDt,"BartForQuestionAnswering"),mDt.forEach(t),fhr=r(NVe," (BART model)"),NVe.forEach(t),ghr=i(X),rE=n(X,"LI",{});var qVe=s(rE);BMe=n(qVe,"STRONG",{});var fDt=s(BMe);hhr=r(fDt,"bert"),fDt.forEach(t),uhr=r(qVe," \u2014 "),bJ=n(qVe,"A",{href:!0});var gDt=s(bJ);phr=r(gDt,"BertForQuestionAnswering"),gDt.forEach(t),_hr=r(qVe," (BERT model)"),qVe.forEach(t),bhr=i(X),tE=n(X,"LI",{});var jVe=s(tE);IMe=n(jVe,"STRONG",{});var hDt=s(IMe);vhr=r(hDt,"big_bird"),hDt.forEach(t),Fhr=r(jVe," \u2014 "),vJ=n(jVe,"A",{href:!0});var uDt=s(vJ);Thr=r(uDt,"BigBirdForQuestionAnswering"),uDt.forEach(t),Mhr=r(jVe," (BigBird model)"),jVe.forEach(t),Ehr=i(X),aE=n(X,"LI",{});var DVe=s(aE);NMe=n(DVe,"STRONG",{});var pDt=s(NMe);Chr=r(pDt,"bigbird_pegasus"),pDt.forEach(t),whr=r(DVe," \u2014 "),FJ=n(DVe,"A",{href:!0});var _Dt=s(FJ);Ahr=r(_Dt,"BigBirdPegasusForQuestionAnswering"),_Dt.forEach(t),Lhr=r(DVe," (BigBird-Pegasus model)"),DVe.forEach(t),yhr=i(X),nE=n(X,"LI",{});var GVe=s(nE);qMe=n(GVe,"STRONG",{});var bDt=s(qMe);xhr=r(bDt,"camembert"),bDt.forEach(t),$hr=r(GVe," \u2014 "),TJ=n(GVe,"A",{href:!0});var vDt=s(TJ);khr=r(vDt,"CamembertForQuestionAnswering"),vDt.forEach(t),Shr=r(GVe," (CamemBERT model)"),GVe.forEach(t),Rhr=i(X),sE=n(X,"LI",{});var OVe=s(sE);jMe=n(OVe,"STRONG",{});var FDt=s(jMe);Phr=r(FDt,"canine"),FDt.forEach(t),Bhr=r(OVe," \u2014 "),MJ=n(OVe,"A",{href:!0});var TDt=s(MJ);Ihr=r(TDt,"CanineForQuestionAnswering"),TDt.forEach(t),Nhr=r(OVe," (CANINE model)"),OVe.forEach(t),qhr=i(X),lE=n(X,"LI",{});var VVe=s(lE);DMe=n(VVe,"STRONG",{});var MDt=s(DMe);jhr=r(MDt,"convbert"),MDt.forEach(t),Dhr=r(VVe," \u2014 "),EJ=n(VVe,"A",{href:!0});var EDt=s(EJ);Ghr=r(EDt,"ConvBertForQuestionAnswering"),EDt.forEach(t),Ohr=r(VVe," (ConvBERT model)"),VVe.forEach(t),Vhr=i(X),iE=n(X,"LI",{});var XVe=s(iE);GMe=n(XVe,"STRONG",{});var CDt=s(GMe);Xhr=r(CDt,"data2vec-text"),CDt.forEach(t),zhr=r(XVe," \u2014 "),CJ=n(XVe,"A",{href:!0});var wDt=s(CJ);Qhr=r(wDt,"Data2VecTextForQuestionAnswering"),wDt.forEach(t),Whr=r(XVe," (Data2VecText model)"),XVe.forEach(t),Uhr=i(X),dE=n(X,"LI",{});var zVe=s(dE);OMe=n(zVe,"STRONG",{});var ADt=s(OMe);Hhr=r(ADt,"deberta"),ADt.forEach(t),Jhr=r(zVe," \u2014 "),wJ=n(zVe,"A",{href:!0});var LDt=s(wJ);Yhr=r(LDt,"DebertaForQuestionAnswering"),LDt.forEach(t),Khr=r(zVe," (DeBERTa model)"),zVe.forEach(t),Zhr=i(X),cE=n(X,"LI",{});var QVe=s(cE);VMe=n(QVe,"STRONG",{});var yDt=s(VMe);eur=r(yDt,"deberta-v2"),yDt.forEach(t),our=r(QVe," \u2014 "),AJ=n(QVe,"A",{href:!0});var xDt=s(AJ);rur=r(xDt,"DebertaV2ForQuestionAnswering"),xDt.forEach(t),tur=r(QVe," (DeBERTa-v2 model)"),QVe.forEach(t),aur=i(X),mE=n(X,"LI",{});var WVe=s(mE);XMe=n(WVe,"STRONG",{});var $Dt=s(XMe);nur=r($Dt,"distilbert"),$Dt.forEach(t),sur=r(WVe," \u2014 "),LJ=n(WVe,"A",{href:!0});var kDt=s(LJ);lur=r(kDt,"DistilBertForQuestionAnswering"),kDt.forEach(t),iur=r(WVe," (DistilBERT model)"),WVe.forEach(t),dur=i(X),fE=n(X,"LI",{});var UVe=s(fE);zMe=n(UVe,"STRONG",{});var SDt=s(zMe);cur=r(SDt,"electra"),SDt.forEach(t),mur=r(UVe," \u2014 "),yJ=n(UVe,"A",{href:!0});var RDt=s(yJ);fur=r(RDt,"ElectraForQuestionAnswering"),RDt.forEach(t),gur=r(UVe," (ELECTRA model)"),UVe.forEach(t),hur=i(X),gE=n(X,"LI",{});var HVe=s(gE);QMe=n(HVe,"STRONG",{});var PDt=s(QMe);uur=r(PDt,"ernie"),PDt.forEach(t),pur=r(HVe," \u2014 "),xJ=n(HVe,"A",{href:!0});var BDt=s(xJ);_ur=r(BDt,"ErnieForQuestionAnswering"),BDt.forEach(t),bur=r(HVe," (ERNIE model)"),HVe.forEach(t),vur=i(X),hE=n(X,"LI",{});var JVe=s(hE);WMe=n(JVe,"STRONG",{});var IDt=s(WMe);Fur=r(IDt,"flaubert"),IDt.forEach(t),Tur=r(JVe," \u2014 "),$J=n(JVe,"A",{href:!0});var NDt=s($J);Mur=r(NDt,"FlaubertForQuestionAnsweringSimple"),NDt.forEach(t),Eur=r(JVe," (FlauBERT model)"),JVe.forEach(t),Cur=i(X),uE=n(X,"LI",{});var YVe=s(uE);UMe=n(YVe,"STRONG",{});var qDt=s(UMe);wur=r(qDt,"fnet"),qDt.forEach(t),Aur=r(YVe," \u2014 "),kJ=n(YVe,"A",{href:!0});var jDt=s(kJ);Lur=r(jDt,"FNetForQuestionAnswering"),jDt.forEach(t),yur=r(YVe," (FNet model)"),YVe.forEach(t),xur=i(X),pE=n(X,"LI",{});var KVe=s(pE);HMe=n(KVe,"STRONG",{});var DDt=s(HMe);$ur=r(DDt,"funnel"),DDt.forEach(t),kur=r(KVe," \u2014 "),SJ=n(KVe,"A",{href:!0});var GDt=s(SJ);Sur=r(GDt,"FunnelForQuestionAnswering"),GDt.forEach(t),Rur=r(KVe," (Funnel Transformer model)"),KVe.forEach(t),Pur=i(X),_E=n(X,"LI",{});var ZVe=s(_E);JMe=n(ZVe,"STRONG",{});var ODt=s(JMe);Bur=r(ODt,"gptj"),ODt.forEach(t),Iur=r(ZVe," \u2014 "),RJ=n(ZVe,"A",{href:!0});var VDt=s(RJ);Nur=r(VDt,"GPTJForQuestionAnswering"),VDt.forEach(t),qur=r(ZVe," (GPT-J model)"),ZVe.forEach(t),jur=i(X),bE=n(X,"LI",{});var eXe=s(bE);YMe=n(eXe,"STRONG",{});var XDt=s(YMe);Dur=r(XDt,"ibert"),XDt.forEach(t),Gur=r(eXe," \u2014 "),PJ=n(eXe,"A",{href:!0});var zDt=s(PJ);Our=r(zDt,"IBertForQuestionAnswering"),zDt.forEach(t),Vur=r(eXe," (I-BERT model)"),eXe.forEach(t),Xur=i(X),vE=n(X,"LI",{});var oXe=s(vE);KMe=n(oXe,"STRONG",{});var QDt=s(KMe);zur=r(QDt,"layoutlmv2"),QDt.forEach(t),Qur=r(oXe," \u2014 "),BJ=n(oXe,"A",{href:!0});var WDt=s(BJ);Wur=r(WDt,"LayoutLMv2ForQuestionAnswering"),WDt.forEach(t),Uur=r(oXe," (LayoutLMv2 model)"),oXe.forEach(t),Hur=i(X),FE=n(X,"LI",{});var rXe=s(FE);ZMe=n(rXe,"STRONG",{});var UDt=s(ZMe);Jur=r(UDt,"layoutlmv3"),UDt.forEach(t),Yur=r(rXe," \u2014 "),IJ=n(rXe,"A",{href:!0});var HDt=s(IJ);Kur=r(HDt,"LayoutLMv3ForQuestionAnswering"),HDt.forEach(t),Zur=r(rXe," (LayoutLMv3 model)"),rXe.forEach(t),epr=i(X),TE=n(X,"LI",{});var tXe=s(TE);eEe=n(tXe,"STRONG",{});var JDt=s(eEe);opr=r(JDt,"led"),JDt.forEach(t),rpr=r(tXe," \u2014 "),NJ=n(tXe,"A",{href:!0});var YDt=s(NJ);tpr=r(YDt,"LEDForQuestionAnswering"),YDt.forEach(t),apr=r(tXe," (LED model)"),tXe.forEach(t),npr=i(X),ME=n(X,"LI",{});var aXe=s(ME);oEe=n(aXe,"STRONG",{});var KDt=s(oEe);spr=r(KDt,"longformer"),KDt.forEach(t),lpr=r(aXe," \u2014 "),qJ=n(aXe,"A",{href:!0});var ZDt=s(qJ);ipr=r(ZDt,"LongformerForQuestionAnswering"),ZDt.forEach(t),dpr=r(aXe," (Longformer model)"),aXe.forEach(t),cpr=i(X),EE=n(X,"LI",{});var nXe=s(EE);rEe=n(nXe,"STRONG",{});var eGt=s(rEe);mpr=r(eGt,"luke"),eGt.forEach(t),fpr=r(nXe," \u2014 "),jJ=n(nXe,"A",{href:!0});var oGt=s(jJ);gpr=r(oGt,"LukeForQuestionAnswering"),oGt.forEach(t),hpr=r(nXe," (LUKE model)"),nXe.forEach(t),upr=i(X),CE=n(X,"LI",{});var sXe=s(CE);tEe=n(sXe,"STRONG",{});var rGt=s(tEe);ppr=r(rGt,"lxmert"),rGt.forEach(t),_pr=r(sXe," \u2014 "),DJ=n(sXe,"A",{href:!0});var tGt=s(DJ);bpr=r(tGt,"LxmertForQuestionAnswering"),tGt.forEach(t),vpr=r(sXe," (LXMERT model)"),sXe.forEach(t),Fpr=i(X),wE=n(X,"LI",{});var lXe=s(wE);aEe=n(lXe,"STRONG",{});var aGt=s(aEe);Tpr=r(aGt,"mbart"),aGt.forEach(t),Mpr=r(lXe," \u2014 "),GJ=n(lXe,"A",{href:!0});var nGt=s(GJ);Epr=r(nGt,"MBartForQuestionAnswering"),nGt.forEach(t),Cpr=r(lXe," (mBART model)"),lXe.forEach(t),wpr=i(X),AE=n(X,"LI",{});var iXe=s(AE);nEe=n(iXe,"STRONG",{});var sGt=s(nEe);Apr=r(sGt,"megatron-bert"),sGt.forEach(t),Lpr=r(iXe," \u2014 "),OJ=n(iXe,"A",{href:!0});var lGt=s(OJ);ypr=r(lGt,"MegatronBertForQuestionAnswering"),lGt.forEach(t),xpr=r(iXe," (Megatron-BERT model)"),iXe.forEach(t),$pr=i(X),LE=n(X,"LI",{});var dXe=s(LE);sEe=n(dXe,"STRONG",{});var iGt=s(sEe);kpr=r(iGt,"mobilebert"),iGt.forEach(t),Spr=r(dXe," \u2014 "),VJ=n(dXe,"A",{href:!0});var dGt=s(VJ);Rpr=r(dGt,"MobileBertForQuestionAnswering"),dGt.forEach(t),Ppr=r(dXe," (MobileBERT model)"),dXe.forEach(t),Bpr=i(X),yE=n(X,"LI",{});var cXe=s(yE);lEe=n(cXe,"STRONG",{});var cGt=s(lEe);Ipr=r(cGt,"mpnet"),cGt.forEach(t),Npr=r(cXe," \u2014 "),XJ=n(cXe,"A",{href:!0});var mGt=s(XJ);qpr=r(mGt,"MPNetForQuestionAnswering"),mGt.forEach(t),jpr=r(cXe," (MPNet model)"),cXe.forEach(t),Dpr=i(X),xE=n(X,"LI",{});var mXe=s(xE);iEe=n(mXe,"STRONG",{});var fGt=s(iEe);Gpr=r(fGt,"mvp"),fGt.forEach(t),Opr=r(mXe," \u2014 "),zJ=n(mXe,"A",{href:!0});var gGt=s(zJ);Vpr=r(gGt,"MvpForQuestionAnswering"),gGt.forEach(t),Xpr=r(mXe," (MVP model)"),mXe.forEach(t),zpr=i(X),$E=n(X,"LI",{});var fXe=s($E);dEe=n(fXe,"STRONG",{});var hGt=s(dEe);Qpr=r(hGt,"nezha"),hGt.forEach(t),Wpr=r(fXe," \u2014 "),QJ=n(fXe,"A",{href:!0});var uGt=s(QJ);Upr=r(uGt,"NezhaForQuestionAnswering"),uGt.forEach(t),Hpr=r(fXe," (Nezha model)"),fXe.forEach(t),Jpr=i(X),kE=n(X,"LI",{});var gXe=s(kE);cEe=n(gXe,"STRONG",{});var pGt=s(cEe);Ypr=r(pGt,"nystromformer"),pGt.forEach(t),Kpr=r(gXe," \u2014 "),WJ=n(gXe,"A",{href:!0});var _Gt=s(WJ);Zpr=r(_Gt,"NystromformerForQuestionAnswering"),_Gt.forEach(t),e_r=r(gXe," (Nystr\xF6mformer model)"),gXe.forEach(t),o_r=i(X),SE=n(X,"LI",{});var hXe=s(SE);mEe=n(hXe,"STRONG",{});var bGt=s(mEe);r_r=r(bGt,"qdqbert"),bGt.forEach(t),t_r=r(hXe," \u2014 "),UJ=n(hXe,"A",{href:!0});var vGt=s(UJ);a_r=r(vGt,"QDQBertForQuestionAnswering"),vGt.forEach(t),n_r=r(hXe," (QDQBert model)"),hXe.forEach(t),s_r=i(X),RE=n(X,"LI",{});var uXe=s(RE);fEe=n(uXe,"STRONG",{});var FGt=s(fEe);l_r=r(FGt,"reformer"),FGt.forEach(t),i_r=r(uXe," \u2014 "),HJ=n(uXe,"A",{href:!0});var TGt=s(HJ);d_r=r(TGt,"ReformerForQuestionAnswering"),TGt.forEach(t),c_r=r(uXe," (Reformer model)"),uXe.forEach(t),m_r=i(X),PE=n(X,"LI",{});var pXe=s(PE);gEe=n(pXe,"STRONG",{});var MGt=s(gEe);f_r=r(MGt,"rembert"),MGt.forEach(t),g_r=r(pXe," \u2014 "),JJ=n(pXe,"A",{href:!0});var EGt=s(JJ);h_r=r(EGt,"RemBertForQuestionAnswering"),EGt.forEach(t),u_r=r(pXe," (RemBERT model)"),pXe.forEach(t),p_r=i(X),BE=n(X,"LI",{});var _Xe=s(BE);hEe=n(_Xe,"STRONG",{});var CGt=s(hEe);__r=r(CGt,"roberta"),CGt.forEach(t),b_r=r(_Xe," \u2014 "),YJ=n(_Xe,"A",{href:!0});var wGt=s(YJ);v_r=r(wGt,"RobertaForQuestionAnswering"),wGt.forEach(t),F_r=r(_Xe," (RoBERTa model)"),_Xe.forEach(t),T_r=i(X),IE=n(X,"LI",{});var bXe=s(IE);uEe=n(bXe,"STRONG",{});var AGt=s(uEe);M_r=r(AGt,"roformer"),AGt.forEach(t),E_r=r(bXe," \u2014 "),KJ=n(bXe,"A",{href:!0});var LGt=s(KJ);C_r=r(LGt,"RoFormerForQuestionAnswering"),LGt.forEach(t),w_r=r(bXe," (RoFormer model)"),bXe.forEach(t),A_r=i(X),NE=n(X,"LI",{});var vXe=s(NE);pEe=n(vXe,"STRONG",{});var yGt=s(pEe);L_r=r(yGt,"splinter"),yGt.forEach(t),y_r=r(vXe," \u2014 "),ZJ=n(vXe,"A",{href:!0});var xGt=s(ZJ);x_r=r(xGt,"SplinterForQuestionAnswering"),xGt.forEach(t),$_r=r(vXe," (Splinter model)"),vXe.forEach(t),k_r=i(X),qE=n(X,"LI",{});var FXe=s(qE);_Ee=n(FXe,"STRONG",{});var $Gt=s(_Ee);S_r=r($Gt,"squeezebert"),$Gt.forEach(t),R_r=r(FXe," \u2014 "),eY=n(FXe,"A",{href:!0});var kGt=s(eY);P_r=r(kGt,"SqueezeBertForQuestionAnswering"),kGt.forEach(t),B_r=r(FXe," (SqueezeBERT model)"),FXe.forEach(t),I_r=i(X),jE=n(X,"LI",{});var TXe=s(jE);bEe=n(TXe,"STRONG",{});var SGt=s(bEe);N_r=r(SGt,"xlm"),SGt.forEach(t),q_r=r(TXe," \u2014 "),oY=n(TXe,"A",{href:!0});var RGt=s(oY);j_r=r(RGt,"XLMForQuestionAnsweringSimple"),RGt.forEach(t),D_r=r(TXe," (XLM model)"),TXe.forEach(t),G_r=i(X),DE=n(X,"LI",{});var MXe=s(DE);vEe=n(MXe,"STRONG",{});var PGt=s(vEe);O_r=r(PGt,"xlm-roberta"),PGt.forEach(t),V_r=r(MXe," \u2014 "),rY=n(MXe,"A",{href:!0});var BGt=s(rY);X_r=r(BGt,"XLMRobertaForQuestionAnswering"),BGt.forEach(t),z_r=r(MXe," (XLM-RoBERTa model)"),MXe.forEach(t),Q_r=i(X),GE=n(X,"LI",{});var EXe=s(GE);FEe=n(EXe,"STRONG",{});var IGt=s(FEe);W_r=r(IGt,"xlm-roberta-xl"),IGt.forEach(t),U_r=r(EXe," \u2014 "),tY=n(EXe,"A",{href:!0});var NGt=s(tY);H_r=r(NGt,"XLMRobertaXLForQuestionAnswering"),NGt.forEach(t),J_r=r(EXe," (XLM-RoBERTa-XL model)"),EXe.forEach(t),Y_r=i(X),OE=n(X,"LI",{});var CXe=s(OE);TEe=n(CXe,"STRONG",{});var qGt=s(TEe);K_r=r(qGt,"xlnet"),qGt.forEach(t),Z_r=r(CXe," \u2014 "),aY=n(CXe,"A",{href:!0});var jGt=s(aY);ebr=r(jGt,"XLNetForQuestionAnsweringSimple"),jGt.forEach(t),obr=r(CXe," (XLNet model)"),CXe.forEach(t),rbr=i(X),VE=n(X,"LI",{});var wXe=s(VE);MEe=n(wXe,"STRONG",{});var DGt=s(MEe);tbr=r(DGt,"yoso"),DGt.forEach(t),abr=r(wXe," \u2014 "),nY=n(wXe,"A",{href:!0});var GGt=s(nY);nbr=r(GGt,"YosoForQuestionAnswering"),GGt.forEach(t),sbr=r(wXe," (YOSO model)"),wXe.forEach(t),X.forEach(t),lbr=i(xa),XE=n(xa,"P",{});var AXe=s(XE);ibr=r(AXe,"The model is set in evaluation mode by default using "),EEe=n(AXe,"CODE",{});var OGt=s(EEe);dbr=r(OGt,"model.eval()"),OGt.forEach(t),cbr=r(AXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CEe=n(AXe,"CODE",{});var VGt=s(CEe);mbr=r(VGt,"model.train()"),VGt.forEach(t),AXe.forEach(t),fbr=i(xa),T(zE.$$.fragment,xa),xa.forEach(t),Pl.forEach(t),VKe=i(m),Qd=n(m,"H2",{class:!0});var too=s(Qd);QE=n(too,"A",{id:!0,class:!0,href:!0});var XGt=s(QE);wEe=n(XGt,"SPAN",{});var zGt=s(wEe);T(e$.$$.fragment,zGt),zGt.forEach(t),XGt.forEach(t),gbr=i(too),AEe=n(too,"SPAN",{});var QGt=s(AEe);hbr=r(QGt,"AutoModelForTableQuestionAnswering"),QGt.forEach(t),too.forEach(t),XKe=i(m),Xo=n(m,"DIV",{class:!0});var Bl=s(Xo);T(o$.$$.fragment,Bl),ubr=i(Bl),Wd=n(Bl,"P",{});var xle=s(Wd);pbr=r(xle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sY=n(xle,"A",{href:!0});var WGt=s(sY);_br=r(WGt,"from_pretrained()"),WGt.forEach(t),bbr=r(xle," class method or the "),lY=n(xle,"A",{href:!0});var UGt=s(lY);vbr=r(UGt,"from_config()"),UGt.forEach(t),Fbr=r(xle,` class
method.`),xle.forEach(t),Tbr=i(Bl),r$=n(Bl,"P",{});var aoo=s(r$);Mbr=r(aoo,"This class cannot be instantiated directly using "),LEe=n(aoo,"CODE",{});var HGt=s(LEe);Ebr=r(HGt,"__init__()"),HGt.forEach(t),Cbr=r(aoo," (throws an error)."),aoo.forEach(t),wbr=i(Bl),Lt=n(Bl,"DIV",{class:!0});var Wy=s(Lt);T(t$.$$.fragment,Wy),Abr=i(Wy),yEe=n(Wy,"P",{});var JGt=s(yEe);Lbr=r(JGt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JGt.forEach(t),ybr=i(Wy),Ud=n(Wy,"P",{});var $le=s(Ud);xbr=r($le,`Note:
Loading a model from its configuration file does `),xEe=n($le,"STRONG",{});var YGt=s(xEe);$br=r(YGt,"not"),YGt.forEach(t),kbr=r($le,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n($le,"A",{href:!0});var KGt=s(iY);Sbr=r(KGt,"from_pretrained()"),KGt.forEach(t),Rbr=r($le," to load the model weights."),$le.forEach(t),Pbr=i(Wy),T(WE.$$.fragment,Wy),Wy.forEach(t),Bbr=i(Bl),co=n(Bl,"DIV",{class:!0});var $a=s(co);T(a$.$$.fragment,$a),Ibr=i($a),$Ee=n($a,"P",{});var ZGt=s($Ee);Nbr=r(ZGt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZGt.forEach(t),qbr=i($a),sn=n($a,"P",{});var Uy=s(sn);jbr=r(Uy,"The model class to instantiate is selected based on the "),kEe=n(Uy,"CODE",{});var eOt=s(kEe);Dbr=r(eOt,"model_type"),eOt.forEach(t),Gbr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),SEe=n(Uy,"CODE",{});var oOt=s(SEe);Obr=r(oOt,"pretrained_model_name_or_path"),oOt.forEach(t),Vbr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(Uy,"CODE",{});var rOt=s(REe);Xbr=r(rOt,"pretrained_model_name_or_path"),rOt.forEach(t),zbr=r(Uy,":"),Uy.forEach(t),Qbr=i($a),PEe=n($a,"UL",{});var tOt=s(PEe);UE=n(tOt,"LI",{});var LXe=s(UE);BEe=n(LXe,"STRONG",{});var aOt=s(BEe);Wbr=r(aOt,"tapas"),aOt.forEach(t),Ubr=r(LXe," \u2014 "),dY=n(LXe,"A",{href:!0});var nOt=s(dY);Hbr=r(nOt,"TapasForQuestionAnswering"),nOt.forEach(t),Jbr=r(LXe," (TAPAS model)"),LXe.forEach(t),tOt.forEach(t),Ybr=i($a),HE=n($a,"P",{});var yXe=s(HE);Kbr=r(yXe,"The model is set in evaluation mode by default using "),IEe=n(yXe,"CODE",{});var sOt=s(IEe);Zbr=r(sOt,"model.eval()"),sOt.forEach(t),e2r=r(yXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NEe=n(yXe,"CODE",{});var lOt=s(NEe);o2r=r(lOt,"model.train()"),lOt.forEach(t),yXe.forEach(t),r2r=i($a),T(JE.$$.fragment,$a),$a.forEach(t),Bl.forEach(t),zKe=i(m),Hd=n(m,"H2",{class:!0});var noo=s(Hd);YE=n(noo,"A",{id:!0,class:!0,href:!0});var iOt=s(YE);qEe=n(iOt,"SPAN",{});var dOt=s(qEe);T(n$.$$.fragment,dOt),dOt.forEach(t),iOt.forEach(t),t2r=i(noo),jEe=n(noo,"SPAN",{});var cOt=s(jEe);a2r=r(cOt,"AutoModelForDocumentQuestionAnswering"),cOt.forEach(t),noo.forEach(t),QKe=i(m),zo=n(m,"DIV",{class:!0});var Il=s(zo);T(s$.$$.fragment,Il),n2r=i(Il),Jd=n(Il,"P",{});var kle=s(Jd);s2r=r(kle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),cY=n(kle,"A",{href:!0});var mOt=s(cY);l2r=r(mOt,"from_pretrained()"),mOt.forEach(t),i2r=r(kle," class method or the "),mY=n(kle,"A",{href:!0});var fOt=s(mY);d2r=r(fOt,"from_config()"),fOt.forEach(t),c2r=r(kle,` class
method.`),kle.forEach(t),m2r=i(Il),l$=n(Il,"P",{});var soo=s(l$);f2r=r(soo,"This class cannot be instantiated directly using "),DEe=n(soo,"CODE",{});var gOt=s(DEe);g2r=r(gOt,"__init__()"),gOt.forEach(t),h2r=r(soo," (throws an error)."),soo.forEach(t),u2r=i(Il),yt=n(Il,"DIV",{class:!0});var Hy=s(yt);T(i$.$$.fragment,Hy),p2r=i(Hy),GEe=n(Hy,"P",{});var hOt=s(GEe);_2r=r(hOt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),hOt.forEach(t),b2r=i(Hy),Yd=n(Hy,"P",{});var Sle=s(Yd);v2r=r(Sle,`Note:
Loading a model from its configuration file does `),OEe=n(Sle,"STRONG",{});var uOt=s(OEe);F2r=r(uOt,"not"),uOt.forEach(t),T2r=r(Sle,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(Sle,"A",{href:!0});var pOt=s(fY);M2r=r(pOt,"from_pretrained()"),pOt.forEach(t),E2r=r(Sle," to load the model weights."),Sle.forEach(t),C2r=i(Hy),T(KE.$$.fragment,Hy),Hy.forEach(t),w2r=i(Il),mo=n(Il,"DIV",{class:!0});var ka=s(mo);T(d$.$$.fragment,ka),A2r=i(ka),VEe=n(ka,"P",{});var _Ot=s(VEe);L2r=r(_Ot,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),_Ot.forEach(t),y2r=i(ka),ln=n(ka,"P",{});var Jy=s(ln);x2r=r(Jy,"The model class to instantiate is selected based on the "),XEe=n(Jy,"CODE",{});var bOt=s(XEe);$2r=r(bOt,"model_type"),bOt.forEach(t),k2r=r(Jy,` property of the config object (either
passed as an argument or loaded from `),zEe=n(Jy,"CODE",{});var vOt=s(zEe);S2r=r(vOt,"pretrained_model_name_or_path"),vOt.forEach(t),R2r=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(Jy,"CODE",{});var FOt=s(QEe);P2r=r(FOt,"pretrained_model_name_or_path"),FOt.forEach(t),B2r=r(Jy,":"),Jy.forEach(t),I2r=i(ka),Kd=n(ka,"UL",{});var Rle=s(Kd);ZE=n(Rle,"LI",{});var xXe=s(ZE);WEe=n(xXe,"STRONG",{});var TOt=s(WEe);N2r=r(TOt,"layoutlm"),TOt.forEach(t),q2r=r(xXe," \u2014 "),gY=n(xXe,"A",{href:!0});var MOt=s(gY);j2r=r(MOt,"LayoutLMForQuestionAnswering"),MOt.forEach(t),D2r=r(xXe," (LayoutLM model)"),xXe.forEach(t),G2r=i(Rle),e4=n(Rle,"LI",{});var $Xe=s(e4);UEe=n($Xe,"STRONG",{});var EOt=s(UEe);O2r=r(EOt,"layoutlmv2"),EOt.forEach(t),V2r=r($Xe," \u2014 "),hY=n($Xe,"A",{href:!0});var COt=s(hY);X2r=r(COt,"LayoutLMv2ForQuestionAnswering"),COt.forEach(t),z2r=r($Xe," (LayoutLMv2 model)"),$Xe.forEach(t),Q2r=i(Rle),o4=n(Rle,"LI",{});var kXe=s(o4);HEe=n(kXe,"STRONG",{});var wOt=s(HEe);W2r=r(wOt,"layoutlmv3"),wOt.forEach(t),U2r=r(kXe," \u2014 "),uY=n(kXe,"A",{href:!0});var AOt=s(uY);H2r=r(AOt,"LayoutLMv3ForQuestionAnswering"),AOt.forEach(t),J2r=r(kXe," (LayoutLMv3 model)"),kXe.forEach(t),Rle.forEach(t),Y2r=i(ka),r4=n(ka,"P",{});var SXe=s(r4);K2r=r(SXe,"The model is set in evaluation mode by default using "),JEe=n(SXe,"CODE",{});var LOt=s(JEe);Z2r=r(LOt,"model.eval()"),LOt.forEach(t),e1r=r(SXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YEe=n(SXe,"CODE",{});var yOt=s(YEe);o1r=r(yOt,"model.train()"),yOt.forEach(t),SXe.forEach(t),r1r=i(ka),T(t4.$$.fragment,ka),ka.forEach(t),Il.forEach(t),WKe=i(m),Zd=n(m,"H2",{class:!0});var loo=s(Zd);a4=n(loo,"A",{id:!0,class:!0,href:!0});var xOt=s(a4);KEe=n(xOt,"SPAN",{});var $Ot=s(KEe);T(c$.$$.fragment,$Ot),$Ot.forEach(t),xOt.forEach(t),t1r=i(loo),ZEe=n(loo,"SPAN",{});var kOt=s(ZEe);a1r=r(kOt,"AutoModelForImageClassification"),kOt.forEach(t),loo.forEach(t),UKe=i(m),Qo=n(m,"DIV",{class:!0});var Nl=s(Qo);T(m$.$$.fragment,Nl),n1r=i(Nl),ec=n(Nl,"P",{});var Ple=s(ec);s1r=r(Ple,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pY=n(Ple,"A",{href:!0});var SOt=s(pY);l1r=r(SOt,"from_pretrained()"),SOt.forEach(t),i1r=r(Ple," class method or the "),_Y=n(Ple,"A",{href:!0});var ROt=s(_Y);d1r=r(ROt,"from_config()"),ROt.forEach(t),c1r=r(Ple,` class
method.`),Ple.forEach(t),m1r=i(Nl),f$=n(Nl,"P",{});var ioo=s(f$);f1r=r(ioo,"This class cannot be instantiated directly using "),e4e=n(ioo,"CODE",{});var POt=s(e4e);g1r=r(POt,"__init__()"),POt.forEach(t),h1r=r(ioo," (throws an error)."),ioo.forEach(t),u1r=i(Nl),xt=n(Nl,"DIV",{class:!0});var Yy=s(xt);T(g$.$$.fragment,Yy),p1r=i(Yy),o4e=n(Yy,"P",{});var BOt=s(o4e);_1r=r(BOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BOt.forEach(t),b1r=i(Yy),oc=n(Yy,"P",{});var Ble=s(oc);v1r=r(Ble,`Note:
Loading a model from its configuration file does `),r4e=n(Ble,"STRONG",{});var IOt=s(r4e);F1r=r(IOt,"not"),IOt.forEach(t),T1r=r(Ble,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(Ble,"A",{href:!0});var NOt=s(bY);M1r=r(NOt,"from_pretrained()"),NOt.forEach(t),E1r=r(Ble," to load the model weights."),Ble.forEach(t),C1r=i(Yy),T(n4.$$.fragment,Yy),Yy.forEach(t),w1r=i(Nl),fo=n(Nl,"DIV",{class:!0});var Sa=s(fo);T(h$.$$.fragment,Sa),A1r=i(Sa),t4e=n(Sa,"P",{});var qOt=s(t4e);L1r=r(qOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qOt.forEach(t),y1r=i(Sa),dn=n(Sa,"P",{});var Ky=s(dn);x1r=r(Ky,"The model class to instantiate is selected based on the "),a4e=n(Ky,"CODE",{});var jOt=s(a4e);$1r=r(jOt,"model_type"),jOt.forEach(t),k1r=r(Ky,` property of the config object (either
passed as an argument or loaded from `),n4e=n(Ky,"CODE",{});var DOt=s(n4e);S1r=r(DOt,"pretrained_model_name_or_path"),DOt.forEach(t),R1r=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(Ky,"CODE",{});var GOt=s(s4e);P1r=r(GOt,"pretrained_model_name_or_path"),GOt.forEach(t),B1r=r(Ky,":"),Ky.forEach(t),I1r=i(Sa),be=n(Sa,"UL",{});var Fe=s(be);s4=n(Fe,"LI",{});var RXe=s(s4);l4e=n(RXe,"STRONG",{});var OOt=s(l4e);N1r=r(OOt,"beit"),OOt.forEach(t),q1r=r(RXe," \u2014 "),vY=n(RXe,"A",{href:!0});var VOt=s(vY);j1r=r(VOt,"BeitForImageClassification"),VOt.forEach(t),D1r=r(RXe," (BEiT model)"),RXe.forEach(t),G1r=i(Fe),l4=n(Fe,"LI",{});var PXe=s(l4);i4e=n(PXe,"STRONG",{});var XOt=s(i4e);O1r=r(XOt,"convnext"),XOt.forEach(t),V1r=r(PXe," \u2014 "),FY=n(PXe,"A",{href:!0});var zOt=s(FY);X1r=r(zOt,"ConvNextForImageClassification"),zOt.forEach(t),z1r=r(PXe," (ConvNeXT model)"),PXe.forEach(t),Q1r=i(Fe),i4=n(Fe,"LI",{});var BXe=s(i4);d4e=n(BXe,"STRONG",{});var QOt=s(d4e);W1r=r(QOt,"cvt"),QOt.forEach(t),U1r=r(BXe," \u2014 "),TY=n(BXe,"A",{href:!0});var WOt=s(TY);H1r=r(WOt,"CvtForImageClassification"),WOt.forEach(t),J1r=r(BXe," (CvT model)"),BXe.forEach(t),Y1r=i(Fe),d4=n(Fe,"LI",{});var IXe=s(d4);c4e=n(IXe,"STRONG",{});var UOt=s(c4e);K1r=r(UOt,"data2vec-vision"),UOt.forEach(t),Z1r=r(IXe," \u2014 "),MY=n(IXe,"A",{href:!0});var HOt=s(MY);evr=r(HOt,"Data2VecVisionForImageClassification"),HOt.forEach(t),ovr=r(IXe," (Data2VecVision model)"),IXe.forEach(t),rvr=i(Fe),_l=n(Fe,"LI",{});var yB=s(_l);m4e=n(yB,"STRONG",{});var JOt=s(m4e);tvr=r(JOt,"deit"),JOt.forEach(t),avr=r(yB," \u2014 "),EY=n(yB,"A",{href:!0});var YOt=s(EY);nvr=r(YOt,"DeiTForImageClassification"),YOt.forEach(t),svr=r(yB," or "),CY=n(yB,"A",{href:!0});var KOt=s(CY);lvr=r(KOt,"DeiTForImageClassificationWithTeacher"),KOt.forEach(t),ivr=r(yB," (DeiT model)"),yB.forEach(t),dvr=i(Fe),c4=n(Fe,"LI",{});var NXe=s(c4);f4e=n(NXe,"STRONG",{});var ZOt=s(f4e);cvr=r(ZOt,"imagegpt"),ZOt.forEach(t),mvr=r(NXe," \u2014 "),wY=n(NXe,"A",{href:!0});var eVt=s(wY);fvr=r(eVt,"ImageGPTForImageClassification"),eVt.forEach(t),gvr=r(NXe," (ImageGPT model)"),NXe.forEach(t),hvr=i(Fe),bl=n(Fe,"LI",{});var xB=s(bl);g4e=n(xB,"STRONG",{});var oVt=s(g4e);uvr=r(oVt,"levit"),oVt.forEach(t),pvr=r(xB," \u2014 "),AY=n(xB,"A",{href:!0});var rVt=s(AY);_vr=r(rVt,"LevitForImageClassification"),rVt.forEach(t),bvr=r(xB," or "),LY=n(xB,"A",{href:!0});var tVt=s(LY);vvr=r(tVt,"LevitForImageClassificationWithTeacher"),tVt.forEach(t),Fvr=r(xB," (LeViT model)"),xB.forEach(t),Tvr=i(Fe),m4=n(Fe,"LI",{});var qXe=s(m4);h4e=n(qXe,"STRONG",{});var aVt=s(h4e);Mvr=r(aVt,"mobilevit"),aVt.forEach(t),Evr=r(qXe," \u2014 "),yY=n(qXe,"A",{href:!0});var nVt=s(yY);Cvr=r(nVt,"MobileViTForImageClassification"),nVt.forEach(t),wvr=r(qXe," (MobileViT model)"),qXe.forEach(t),Avr=i(Fe),$t=n(Fe,"LI",{});var Mf=s($t);u4e=n(Mf,"STRONG",{});var sVt=s(u4e);Lvr=r(sVt,"perceiver"),sVt.forEach(t),yvr=r(Mf," \u2014 "),xY=n(Mf,"A",{href:!0});var lVt=s(xY);xvr=r(lVt,"PerceiverForImageClassificationLearned"),lVt.forEach(t),$vr=r(Mf," or "),$Y=n(Mf,"A",{href:!0});var iVt=s($Y);kvr=r(iVt,"PerceiverForImageClassificationFourier"),iVt.forEach(t),Svr=r(Mf," or "),kY=n(Mf,"A",{href:!0});var dVt=s(kY);Rvr=r(dVt,"PerceiverForImageClassificationConvProcessing"),dVt.forEach(t),Pvr=r(Mf," (Perceiver model)"),Mf.forEach(t),Bvr=i(Fe),f4=n(Fe,"LI",{});var jXe=s(f4);p4e=n(jXe,"STRONG",{});var cVt=s(p4e);Ivr=r(cVt,"poolformer"),cVt.forEach(t),Nvr=r(jXe," \u2014 "),SY=n(jXe,"A",{href:!0});var mVt=s(SY);qvr=r(mVt,"PoolFormerForImageClassification"),mVt.forEach(t),jvr=r(jXe," (PoolFormer model)"),jXe.forEach(t),Dvr=i(Fe),g4=n(Fe,"LI",{});var DXe=s(g4);_4e=n(DXe,"STRONG",{});var fVt=s(_4e);Gvr=r(fVt,"regnet"),fVt.forEach(t),Ovr=r(DXe," \u2014 "),RY=n(DXe,"A",{href:!0});var gVt=s(RY);Vvr=r(gVt,"RegNetForImageClassification"),gVt.forEach(t),Xvr=r(DXe," (RegNet model)"),DXe.forEach(t),zvr=i(Fe),h4=n(Fe,"LI",{});var GXe=s(h4);b4e=n(GXe,"STRONG",{});var hVt=s(b4e);Qvr=r(hVt,"resnet"),hVt.forEach(t),Wvr=r(GXe," \u2014 "),PY=n(GXe,"A",{href:!0});var uVt=s(PY);Uvr=r(uVt,"ResNetForImageClassification"),uVt.forEach(t),Hvr=r(GXe," (ResNet model)"),GXe.forEach(t),Jvr=i(Fe),u4=n(Fe,"LI",{});var OXe=s(u4);v4e=n(OXe,"STRONG",{});var pVt=s(v4e);Yvr=r(pVt,"segformer"),pVt.forEach(t),Kvr=r(OXe," \u2014 "),BY=n(OXe,"A",{href:!0});var _Vt=s(BY);Zvr=r(_Vt,"SegformerForImageClassification"),_Vt.forEach(t),eFr=r(OXe," (SegFormer model)"),OXe.forEach(t),oFr=i(Fe),p4=n(Fe,"LI",{});var VXe=s(p4);F4e=n(VXe,"STRONG",{});var bVt=s(F4e);rFr=r(bVt,"swin"),bVt.forEach(t),tFr=r(VXe," \u2014 "),IY=n(VXe,"A",{href:!0});var vVt=s(IY);aFr=r(vVt,"SwinForImageClassification"),vVt.forEach(t),nFr=r(VXe," (Swin Transformer model)"),VXe.forEach(t),sFr=i(Fe),_4=n(Fe,"LI",{});var XXe=s(_4);T4e=n(XXe,"STRONG",{});var FVt=s(T4e);lFr=r(FVt,"swinv2"),FVt.forEach(t),iFr=r(XXe," \u2014 "),NY=n(XXe,"A",{href:!0});var TVt=s(NY);dFr=r(TVt,"Swinv2ForImageClassification"),TVt.forEach(t),cFr=r(XXe," (Swin Transformer V2 model)"),XXe.forEach(t),mFr=i(Fe),b4=n(Fe,"LI",{});var zXe=s(b4);M4e=n(zXe,"STRONG",{});var MVt=s(M4e);fFr=r(MVt,"van"),MVt.forEach(t),gFr=r(zXe," \u2014 "),qY=n(zXe,"A",{href:!0});var EVt=s(qY);hFr=r(EVt,"VanForImageClassification"),EVt.forEach(t),uFr=r(zXe," (VAN model)"),zXe.forEach(t),pFr=i(Fe),v4=n(Fe,"LI",{});var QXe=s(v4);E4e=n(QXe,"STRONG",{});var CVt=s(E4e);_Fr=r(CVt,"vit"),CVt.forEach(t),bFr=r(QXe," \u2014 "),jY=n(QXe,"A",{href:!0});var wVt=s(jY);vFr=r(wVt,"ViTForImageClassification"),wVt.forEach(t),FFr=r(QXe," (ViT model)"),QXe.forEach(t),Fe.forEach(t),TFr=i(Sa),F4=n(Sa,"P",{});var WXe=s(F4);MFr=r(WXe,"The model is set in evaluation mode by default using "),C4e=n(WXe,"CODE",{});var AVt=s(C4e);EFr=r(AVt,"model.eval()"),AVt.forEach(t),CFr=r(WXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w4e=n(WXe,"CODE",{});var LVt=s(w4e);wFr=r(LVt,"model.train()"),LVt.forEach(t),WXe.forEach(t),AFr=i(Sa),T(T4.$$.fragment,Sa),Sa.forEach(t),Nl.forEach(t),HKe=i(m),rc=n(m,"H2",{class:!0});var doo=s(rc);M4=n(doo,"A",{id:!0,class:!0,href:!0});var yVt=s(M4);A4e=n(yVt,"SPAN",{});var xVt=s(A4e);T(u$.$$.fragment,xVt),xVt.forEach(t),yVt.forEach(t),LFr=i(doo),L4e=n(doo,"SPAN",{});var $Vt=s(L4e);yFr=r($Vt,"AutoModelForVideoClassification"),$Vt.forEach(t),doo.forEach(t),JKe=i(m),Wo=n(m,"DIV",{class:!0});var ql=s(Wo);T(p$.$$.fragment,ql),xFr=i(ql),tc=n(ql,"P",{});var Ile=s(tc);$Fr=r(Ile,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),DY=n(Ile,"A",{href:!0});var kVt=s(DY);kFr=r(kVt,"from_pretrained()"),kVt.forEach(t),SFr=r(Ile," class method or the "),GY=n(Ile,"A",{href:!0});var SVt=s(GY);RFr=r(SVt,"from_config()"),SVt.forEach(t),PFr=r(Ile,` class
method.`),Ile.forEach(t),BFr=i(ql),_$=n(ql,"P",{});var coo=s(_$);IFr=r(coo,"This class cannot be instantiated directly using "),y4e=n(coo,"CODE",{});var RVt=s(y4e);NFr=r(RVt,"__init__()"),RVt.forEach(t),qFr=r(coo," (throws an error)."),coo.forEach(t),jFr=i(ql),kt=n(ql,"DIV",{class:!0});var Zy=s(kt);T(b$.$$.fragment,Zy),DFr=i(Zy),x4e=n(Zy,"P",{});var PVt=s(x4e);GFr=r(PVt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),PVt.forEach(t),OFr=i(Zy),ac=n(Zy,"P",{});var Nle=s(ac);VFr=r(Nle,`Note:
Loading a model from its configuration file does `),$4e=n(Nle,"STRONG",{});var BVt=s($4e);XFr=r(BVt,"not"),BVt.forEach(t),zFr=r(Nle,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Nle,"A",{href:!0});var IVt=s(OY);QFr=r(IVt,"from_pretrained()"),IVt.forEach(t),WFr=r(Nle," to load the model weights."),Nle.forEach(t),UFr=i(Zy),T(E4.$$.fragment,Zy),Zy.forEach(t),HFr=i(ql),go=n(ql,"DIV",{class:!0});var Ra=s(go);T(v$.$$.fragment,Ra),JFr=i(Ra),k4e=n(Ra,"P",{});var NVt=s(k4e);YFr=r(NVt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),NVt.forEach(t),KFr=i(Ra),cn=n(Ra,"P",{});var e8=s(cn);ZFr=r(e8,"The model class to instantiate is selected based on the "),S4e=n(e8,"CODE",{});var qVt=s(S4e);eTr=r(qVt,"model_type"),qVt.forEach(t),oTr=r(e8,` property of the config object (either
passed as an argument or loaded from `),R4e=n(e8,"CODE",{});var jVt=s(R4e);rTr=r(jVt,"pretrained_model_name_or_path"),jVt.forEach(t),tTr=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(e8,"CODE",{});var DVt=s(P4e);aTr=r(DVt,"pretrained_model_name_or_path"),DVt.forEach(t),nTr=r(e8,":"),e8.forEach(t),sTr=i(Ra),B4e=n(Ra,"UL",{});var GVt=s(B4e);C4=n(GVt,"LI",{});var UXe=s(C4);I4e=n(UXe,"STRONG",{});var OVt=s(I4e);lTr=r(OVt,"videomae"),OVt.forEach(t),iTr=r(UXe," \u2014 "),VY=n(UXe,"A",{href:!0});var VVt=s(VY);dTr=r(VVt,"VideoMAEForVideoClassification"),VVt.forEach(t),cTr=r(UXe," (VideoMAE model)"),UXe.forEach(t),GVt.forEach(t),mTr=i(Ra),w4=n(Ra,"P",{});var HXe=s(w4);fTr=r(HXe,"The model is set in evaluation mode by default using "),N4e=n(HXe,"CODE",{});var XVt=s(N4e);gTr=r(XVt,"model.eval()"),XVt.forEach(t),hTr=r(HXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=n(HXe,"CODE",{});var zVt=s(q4e);uTr=r(zVt,"model.train()"),zVt.forEach(t),HXe.forEach(t),pTr=i(Ra),T(A4.$$.fragment,Ra),Ra.forEach(t),ql.forEach(t),YKe=i(m),nc=n(m,"H2",{class:!0});var moo=s(nc);L4=n(moo,"A",{id:!0,class:!0,href:!0});var QVt=s(L4);j4e=n(QVt,"SPAN",{});var WVt=s(j4e);T(F$.$$.fragment,WVt),WVt.forEach(t),QVt.forEach(t),_Tr=i(moo),D4e=n(moo,"SPAN",{});var UVt=s(D4e);bTr=r(UVt,"AutoModelForVision2Seq"),UVt.forEach(t),moo.forEach(t),KKe=i(m),Uo=n(m,"DIV",{class:!0});var jl=s(Uo);T(T$.$$.fragment,jl),vTr=i(jl),sc=n(jl,"P",{});var qle=s(sc);FTr=r(qle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XY=n(qle,"A",{href:!0});var HVt=s(XY);TTr=r(HVt,"from_pretrained()"),HVt.forEach(t),MTr=r(qle," class method or the "),zY=n(qle,"A",{href:!0});var JVt=s(zY);ETr=r(JVt,"from_config()"),JVt.forEach(t),CTr=r(qle,` class
method.`),qle.forEach(t),wTr=i(jl),M$=n(jl,"P",{});var foo=s(M$);ATr=r(foo,"This class cannot be instantiated directly using "),G4e=n(foo,"CODE",{});var YVt=s(G4e);LTr=r(YVt,"__init__()"),YVt.forEach(t),yTr=r(foo," (throws an error)."),foo.forEach(t),xTr=i(jl),St=n(jl,"DIV",{class:!0});var o8=s(St);T(E$.$$.fragment,o8),$Tr=i(o8),O4e=n(o8,"P",{});var KVt=s(O4e);kTr=r(KVt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KVt.forEach(t),STr=i(o8),lc=n(o8,"P",{});var jle=s(lc);RTr=r(jle,`Note:
Loading a model from its configuration file does `),V4e=n(jle,"STRONG",{});var ZVt=s(V4e);PTr=r(ZVt,"not"),ZVt.forEach(t),BTr=r(jle,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(jle,"A",{href:!0});var eXt=s(QY);ITr=r(eXt,"from_pretrained()"),eXt.forEach(t),NTr=r(jle," to load the model weights."),jle.forEach(t),qTr=i(o8),T(y4.$$.fragment,o8),o8.forEach(t),jTr=i(jl),ho=n(jl,"DIV",{class:!0});var Pa=s(ho);T(C$.$$.fragment,Pa),DTr=i(Pa),X4e=n(Pa,"P",{});var oXt=s(X4e);GTr=r(oXt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oXt.forEach(t),OTr=i(Pa),mn=n(Pa,"P",{});var r8=s(mn);VTr=r(r8,"The model class to instantiate is selected based on the "),z4e=n(r8,"CODE",{});var rXt=s(z4e);XTr=r(rXt,"model_type"),rXt.forEach(t),zTr=r(r8,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(r8,"CODE",{});var tXt=s(Q4e);QTr=r(tXt,"pretrained_model_name_or_path"),tXt.forEach(t),WTr=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(r8,"CODE",{});var aXt=s(W4e);UTr=r(aXt,"pretrained_model_name_or_path"),aXt.forEach(t),HTr=r(r8,":"),r8.forEach(t),JTr=i(Pa),U4e=n(Pa,"UL",{});var nXt=s(U4e);x4=n(nXt,"LI",{});var JXe=s(x4);H4e=n(JXe,"STRONG",{});var sXt=s(H4e);YTr=r(sXt,"vision-encoder-decoder"),sXt.forEach(t),KTr=r(JXe," \u2014 "),WY=n(JXe,"A",{href:!0});var lXt=s(WY);ZTr=r(lXt,"VisionEncoderDecoderModel"),lXt.forEach(t),eMr=r(JXe," (Vision Encoder decoder model)"),JXe.forEach(t),nXt.forEach(t),oMr=i(Pa),$4=n(Pa,"P",{});var YXe=s($4);rMr=r(YXe,"The model is set in evaluation mode by default using "),J4e=n(YXe,"CODE",{});var iXt=s(J4e);tMr=r(iXt,"model.eval()"),iXt.forEach(t),aMr=r(YXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=n(YXe,"CODE",{});var dXt=s(Y4e);nMr=r(dXt,"model.train()"),dXt.forEach(t),YXe.forEach(t),sMr=i(Pa),T(k4.$$.fragment,Pa),Pa.forEach(t),jl.forEach(t),ZKe=i(m),ic=n(m,"H2",{class:!0});var goo=s(ic);S4=n(goo,"A",{id:!0,class:!0,href:!0});var cXt=s(S4);K4e=n(cXt,"SPAN",{});var mXt=s(K4e);T(w$.$$.fragment,mXt),mXt.forEach(t),cXt.forEach(t),lMr=i(goo),Z4e=n(goo,"SPAN",{});var fXt=s(Z4e);iMr=r(fXt,"AutoModelForVisualQuestionAnswering"),fXt.forEach(t),goo.forEach(t),eZe=i(m),Ho=n(m,"DIV",{class:!0});var Dl=s(Ho);T(A$.$$.fragment,Dl),dMr=i(Dl),dc=n(Dl,"P",{});var Dle=s(dc);cMr=r(Dle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),UY=n(Dle,"A",{href:!0});var gXt=s(UY);mMr=r(gXt,"from_pretrained()"),gXt.forEach(t),fMr=r(Dle," class method or the "),HY=n(Dle,"A",{href:!0});var hXt=s(HY);gMr=r(hXt,"from_config()"),hXt.forEach(t),hMr=r(Dle,` class
method.`),Dle.forEach(t),uMr=i(Dl),L$=n(Dl,"P",{});var hoo=s(L$);pMr=r(hoo,"This class cannot be instantiated directly using "),eCe=n(hoo,"CODE",{});var uXt=s(eCe);_Mr=r(uXt,"__init__()"),uXt.forEach(t),bMr=r(hoo," (throws an error)."),hoo.forEach(t),vMr=i(Dl),Rt=n(Dl,"DIV",{class:!0});var t8=s(Rt);T(y$.$$.fragment,t8),FMr=i(t8),oCe=n(t8,"P",{});var pXt=s(oCe);TMr=r(pXt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),pXt.forEach(t),MMr=i(t8),cc=n(t8,"P",{});var Gle=s(cc);EMr=r(Gle,`Note:
Loading a model from its configuration file does `),rCe=n(Gle,"STRONG",{});var _Xt=s(rCe);CMr=r(_Xt,"not"),_Xt.forEach(t),wMr=r(Gle,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Gle,"A",{href:!0});var bXt=s(JY);AMr=r(bXt,"from_pretrained()"),bXt.forEach(t),LMr=r(Gle," to load the model weights."),Gle.forEach(t),yMr=i(t8),T(R4.$$.fragment,t8),t8.forEach(t),xMr=i(Dl),uo=n(Dl,"DIV",{class:!0});var Ba=s(uo);T(x$.$$.fragment,Ba),$Mr=i(Ba),tCe=n(Ba,"P",{});var vXt=s(tCe);kMr=r(vXt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),vXt.forEach(t),SMr=i(Ba),fn=n(Ba,"P",{});var a8=s(fn);RMr=r(a8,"The model class to instantiate is selected based on the "),aCe=n(a8,"CODE",{});var FXt=s(aCe);PMr=r(FXt,"model_type"),FXt.forEach(t),BMr=r(a8,` property of the config object (either
passed as an argument or loaded from `),nCe=n(a8,"CODE",{});var TXt=s(nCe);IMr=r(TXt,"pretrained_model_name_or_path"),TXt.forEach(t),NMr=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n(a8,"CODE",{});var MXt=s(sCe);qMr=r(MXt,"pretrained_model_name_or_path"),MXt.forEach(t),jMr=r(a8,":"),a8.forEach(t),DMr=i(Ba),lCe=n(Ba,"UL",{});var EXt=s(lCe);P4=n(EXt,"LI",{});var KXe=s(P4);iCe=n(KXe,"STRONG",{});var CXt=s(iCe);GMr=r(CXt,"vilt"),CXt.forEach(t),OMr=r(KXe," \u2014 "),YY=n(KXe,"A",{href:!0});var wXt=s(YY);VMr=r(wXt,"ViltForQuestionAnswering"),wXt.forEach(t),XMr=r(KXe," (ViLT model)"),KXe.forEach(t),EXt.forEach(t),zMr=i(Ba),B4=n(Ba,"P",{});var ZXe=s(B4);QMr=r(ZXe,"The model is set in evaluation mode by default using "),dCe=n(ZXe,"CODE",{});var AXt=s(dCe);WMr=r(AXt,"model.eval()"),AXt.forEach(t),UMr=r(ZXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cCe=n(ZXe,"CODE",{});var LXt=s(cCe);HMr=r(LXt,"model.train()"),LXt.forEach(t),ZXe.forEach(t),JMr=i(Ba),T(I4.$$.fragment,Ba),Ba.forEach(t),Dl.forEach(t),oZe=i(m),mc=n(m,"H2",{class:!0});var uoo=s(mc);N4=n(uoo,"A",{id:!0,class:!0,href:!0});var yXt=s(N4);mCe=n(yXt,"SPAN",{});var xXt=s(mCe);T($$.$$.fragment,xXt),xXt.forEach(t),yXt.forEach(t),YMr=i(uoo),fCe=n(uoo,"SPAN",{});var $Xt=s(fCe);KMr=r($Xt,"AutoModelForAudioClassification"),$Xt.forEach(t),uoo.forEach(t),rZe=i(m),Jo=n(m,"DIV",{class:!0});var Gl=s(Jo);T(k$.$$.fragment,Gl),ZMr=i(Gl),fc=n(Gl,"P",{});var Ole=s(fc);eEr=r(Ole,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KY=n(Ole,"A",{href:!0});var kXt=s(KY);oEr=r(kXt,"from_pretrained()"),kXt.forEach(t),rEr=r(Ole," class method or the "),ZY=n(Ole,"A",{href:!0});var SXt=s(ZY);tEr=r(SXt,"from_config()"),SXt.forEach(t),aEr=r(Ole,` class
method.`),Ole.forEach(t),nEr=i(Gl),S$=n(Gl,"P",{});var poo=s(S$);sEr=r(poo,"This class cannot be instantiated directly using "),gCe=n(poo,"CODE",{});var RXt=s(gCe);lEr=r(RXt,"__init__()"),RXt.forEach(t),iEr=r(poo," (throws an error)."),poo.forEach(t),dEr=i(Gl),Pt=n(Gl,"DIV",{class:!0});var n8=s(Pt);T(R$.$$.fragment,n8),cEr=i(n8),hCe=n(n8,"P",{});var PXt=s(hCe);mEr=r(PXt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),PXt.forEach(t),fEr=i(n8),gc=n(n8,"P",{});var Vle=s(gc);gEr=r(Vle,`Note:
Loading a model from its configuration file does `),uCe=n(Vle,"STRONG",{});var BXt=s(uCe);hEr=r(BXt,"not"),BXt.forEach(t),uEr=r(Vle,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Vle,"A",{href:!0});var IXt=s(eK);pEr=r(IXt,"from_pretrained()"),IXt.forEach(t),_Er=r(Vle," to load the model weights."),Vle.forEach(t),bEr=i(n8),T(q4.$$.fragment,n8),n8.forEach(t),vEr=i(Gl),po=n(Gl,"DIV",{class:!0});var Ia=s(po);T(P$.$$.fragment,Ia),FEr=i(Ia),pCe=n(Ia,"P",{});var NXt=s(pCe);TEr=r(NXt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NXt.forEach(t),MEr=i(Ia),gn=n(Ia,"P",{});var s8=s(gn);EEr=r(s8,"The model class to instantiate is selected based on the "),_Ce=n(s8,"CODE",{});var qXt=s(_Ce);CEr=r(qXt,"model_type"),qXt.forEach(t),wEr=r(s8,` property of the config object (either
passed as an argument or loaded from `),bCe=n(s8,"CODE",{});var jXt=s(bCe);AEr=r(jXt,"pretrained_model_name_or_path"),jXt.forEach(t),LEr=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=n(s8,"CODE",{});var DXt=s(vCe);yEr=r(DXt,"pretrained_model_name_or_path"),DXt.forEach(t),xEr=r(s8,":"),s8.forEach(t),$Er=i(Ia),Pe=n(Ia,"UL",{});var Qe=s(Pe);j4=n(Qe,"LI",{});var eze=s(j4);FCe=n(eze,"STRONG",{});var GXt=s(FCe);kEr=r(GXt,"data2vec-audio"),GXt.forEach(t),SEr=r(eze," \u2014 "),oK=n(eze,"A",{href:!0});var OXt=s(oK);REr=r(OXt,"Data2VecAudioForSequenceClassification"),OXt.forEach(t),PEr=r(eze," (Data2VecAudio model)"),eze.forEach(t),BEr=i(Qe),D4=n(Qe,"LI",{});var oze=s(D4);TCe=n(oze,"STRONG",{});var VXt=s(TCe);IEr=r(VXt,"hubert"),VXt.forEach(t),NEr=r(oze," \u2014 "),rK=n(oze,"A",{href:!0});var XXt=s(rK);qEr=r(XXt,"HubertForSequenceClassification"),XXt.forEach(t),jEr=r(oze," (Hubert model)"),oze.forEach(t),DEr=i(Qe),G4=n(Qe,"LI",{});var rze=s(G4);MCe=n(rze,"STRONG",{});var zXt=s(MCe);GEr=r(zXt,"sew"),zXt.forEach(t),OEr=r(rze," \u2014 "),tK=n(rze,"A",{href:!0});var QXt=s(tK);VEr=r(QXt,"SEWForSequenceClassification"),QXt.forEach(t),XEr=r(rze," (SEW model)"),rze.forEach(t),zEr=i(Qe),O4=n(Qe,"LI",{});var tze=s(O4);ECe=n(tze,"STRONG",{});var WXt=s(ECe);QEr=r(WXt,"sew-d"),WXt.forEach(t),WEr=r(tze," \u2014 "),aK=n(tze,"A",{href:!0});var UXt=s(aK);UEr=r(UXt,"SEWDForSequenceClassification"),UXt.forEach(t),HEr=r(tze," (SEW-D model)"),tze.forEach(t),JEr=i(Qe),V4=n(Qe,"LI",{});var aze=s(V4);CCe=n(aze,"STRONG",{});var HXt=s(CCe);YEr=r(HXt,"unispeech"),HXt.forEach(t),KEr=r(aze," \u2014 "),nK=n(aze,"A",{href:!0});var JXt=s(nK);ZEr=r(JXt,"UniSpeechForSequenceClassification"),JXt.forEach(t),e4r=r(aze," (UniSpeech model)"),aze.forEach(t),o4r=i(Qe),X4=n(Qe,"LI",{});var nze=s(X4);wCe=n(nze,"STRONG",{});var YXt=s(wCe);r4r=r(YXt,"unispeech-sat"),YXt.forEach(t),t4r=r(nze," \u2014 "),sK=n(nze,"A",{href:!0});var KXt=s(sK);a4r=r(KXt,"UniSpeechSatForSequenceClassification"),KXt.forEach(t),n4r=r(nze," (UniSpeechSat model)"),nze.forEach(t),s4r=i(Qe),z4=n(Qe,"LI",{});var sze=s(z4);ACe=n(sze,"STRONG",{});var ZXt=s(ACe);l4r=r(ZXt,"wav2vec2"),ZXt.forEach(t),i4r=r(sze," \u2014 "),lK=n(sze,"A",{href:!0});var ezt=s(lK);d4r=r(ezt,"Wav2Vec2ForSequenceClassification"),ezt.forEach(t),c4r=r(sze," (Wav2Vec2 model)"),sze.forEach(t),m4r=i(Qe),Q4=n(Qe,"LI",{});var lze=s(Q4);LCe=n(lze,"STRONG",{});var ozt=s(LCe);f4r=r(ozt,"wav2vec2-conformer"),ozt.forEach(t),g4r=r(lze," \u2014 "),iK=n(lze,"A",{href:!0});var rzt=s(iK);h4r=r(rzt,"Wav2Vec2ConformerForSequenceClassification"),rzt.forEach(t),u4r=r(lze," (Wav2Vec2-Conformer model)"),lze.forEach(t),p4r=i(Qe),W4=n(Qe,"LI",{});var ize=s(W4);yCe=n(ize,"STRONG",{});var tzt=s(yCe);_4r=r(tzt,"wavlm"),tzt.forEach(t),b4r=r(ize," \u2014 "),dK=n(ize,"A",{href:!0});var azt=s(dK);v4r=r(azt,"WavLMForSequenceClassification"),azt.forEach(t),F4r=r(ize," (WavLM model)"),ize.forEach(t),Qe.forEach(t),T4r=i(Ia),U4=n(Ia,"P",{});var dze=s(U4);M4r=r(dze,"The model is set in evaluation mode by default using "),xCe=n(dze,"CODE",{});var nzt=s(xCe);E4r=r(nzt,"model.eval()"),nzt.forEach(t),C4r=r(dze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Ce=n(dze,"CODE",{});var szt=s($Ce);w4r=r(szt,"model.train()"),szt.forEach(t),dze.forEach(t),A4r=i(Ia),T(H4.$$.fragment,Ia),Ia.forEach(t),Gl.forEach(t),tZe=i(m),hc=n(m,"H2",{class:!0});var _oo=s(hc);J4=n(_oo,"A",{id:!0,class:!0,href:!0});var lzt=s(J4);kCe=n(lzt,"SPAN",{});var izt=s(kCe);T(B$.$$.fragment,izt),izt.forEach(t),lzt.forEach(t),L4r=i(_oo),SCe=n(_oo,"SPAN",{});var dzt=s(SCe);y4r=r(dzt,"AutoModelForAudioFrameClassification"),dzt.forEach(t),_oo.forEach(t),aZe=i(m),Yo=n(m,"DIV",{class:!0});var Ol=s(Yo);T(I$.$$.fragment,Ol),x4r=i(Ol),uc=n(Ol,"P",{});var Xle=s(uc);$4r=r(Xle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cK=n(Xle,"A",{href:!0});var czt=s(cK);k4r=r(czt,"from_pretrained()"),czt.forEach(t),S4r=r(Xle," class method or the "),mK=n(Xle,"A",{href:!0});var mzt=s(mK);R4r=r(mzt,"from_config()"),mzt.forEach(t),P4r=r(Xle,` class
method.`),Xle.forEach(t),B4r=i(Ol),N$=n(Ol,"P",{});var boo=s(N$);I4r=r(boo,"This class cannot be instantiated directly using "),RCe=n(boo,"CODE",{});var fzt=s(RCe);N4r=r(fzt,"__init__()"),fzt.forEach(t),q4r=r(boo," (throws an error)."),boo.forEach(t),j4r=i(Ol),Bt=n(Ol,"DIV",{class:!0});var l8=s(Bt);T(q$.$$.fragment,l8),D4r=i(l8),PCe=n(l8,"P",{});var gzt=s(PCe);G4r=r(gzt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),gzt.forEach(t),O4r=i(l8),pc=n(l8,"P",{});var zle=s(pc);V4r=r(zle,`Note:
Loading a model from its configuration file does `),BCe=n(zle,"STRONG",{});var hzt=s(BCe);X4r=r(hzt,"not"),hzt.forEach(t),z4r=r(zle,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(zle,"A",{href:!0});var uzt=s(fK);Q4r=r(uzt,"from_pretrained()"),uzt.forEach(t),W4r=r(zle," to load the model weights."),zle.forEach(t),U4r=i(l8),T(Y4.$$.fragment,l8),l8.forEach(t),H4r=i(Ol),_o=n(Ol,"DIV",{class:!0});var Na=s(_o);T(j$.$$.fragment,Na),J4r=i(Na),ICe=n(Na,"P",{});var pzt=s(ICe);Y4r=r(pzt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pzt.forEach(t),K4r=i(Na),hn=n(Na,"P",{});var i8=s(hn);Z4r=r(i8,"The model class to instantiate is selected based on the "),NCe=n(i8,"CODE",{});var _zt=s(NCe);eCr=r(_zt,"model_type"),_zt.forEach(t),oCr=r(i8,` property of the config object (either
passed as an argument or loaded from `),qCe=n(i8,"CODE",{});var bzt=s(qCe);rCr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),tCr=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=n(i8,"CODE",{});var vzt=s(jCe);aCr=r(vzt,"pretrained_model_name_or_path"),vzt.forEach(t),nCr=r(i8,":"),i8.forEach(t),sCr=i(Na),mt=n(Na,"UL",{});var Vl=s(mt);K4=n(Vl,"LI",{});var cze=s(K4);DCe=n(cze,"STRONG",{});var Fzt=s(DCe);lCr=r(Fzt,"data2vec-audio"),Fzt.forEach(t),iCr=r(cze," \u2014 "),gK=n(cze,"A",{href:!0});var Tzt=s(gK);dCr=r(Tzt,"Data2VecAudioForAudioFrameClassification"),Tzt.forEach(t),cCr=r(cze," (Data2VecAudio model)"),cze.forEach(t),mCr=i(Vl),Z4=n(Vl,"LI",{});var mze=s(Z4);GCe=n(mze,"STRONG",{});var Mzt=s(GCe);fCr=r(Mzt,"unispeech-sat"),Mzt.forEach(t),gCr=r(mze," \u2014 "),hK=n(mze,"A",{href:!0});var Ezt=s(hK);hCr=r(Ezt,"UniSpeechSatForAudioFrameClassification"),Ezt.forEach(t),uCr=r(mze," (UniSpeechSat model)"),mze.forEach(t),pCr=i(Vl),eC=n(Vl,"LI",{});var fze=s(eC);OCe=n(fze,"STRONG",{});var Czt=s(OCe);_Cr=r(Czt,"wav2vec2"),Czt.forEach(t),bCr=r(fze," \u2014 "),uK=n(fze,"A",{href:!0});var wzt=s(uK);vCr=r(wzt,"Wav2Vec2ForAudioFrameClassification"),wzt.forEach(t),FCr=r(fze," (Wav2Vec2 model)"),fze.forEach(t),TCr=i(Vl),oC=n(Vl,"LI",{});var gze=s(oC);VCe=n(gze,"STRONG",{});var Azt=s(VCe);MCr=r(Azt,"wav2vec2-conformer"),Azt.forEach(t),ECr=r(gze," \u2014 "),pK=n(gze,"A",{href:!0});var Lzt=s(pK);CCr=r(Lzt,"Wav2Vec2ConformerForAudioFrameClassification"),Lzt.forEach(t),wCr=r(gze," (Wav2Vec2-Conformer model)"),gze.forEach(t),ACr=i(Vl),rC=n(Vl,"LI",{});var hze=s(rC);XCe=n(hze,"STRONG",{});var yzt=s(XCe);LCr=r(yzt,"wavlm"),yzt.forEach(t),yCr=r(hze," \u2014 "),_K=n(hze,"A",{href:!0});var xzt=s(_K);xCr=r(xzt,"WavLMForAudioFrameClassification"),xzt.forEach(t),$Cr=r(hze," (WavLM model)"),hze.forEach(t),Vl.forEach(t),kCr=i(Na),tC=n(Na,"P",{});var uze=s(tC);SCr=r(uze,"The model is set in evaluation mode by default using "),zCe=n(uze,"CODE",{});var $zt=s(zCe);RCr=r($zt,"model.eval()"),$zt.forEach(t),PCr=r(uze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QCe=n(uze,"CODE",{});var kzt=s(QCe);BCr=r(kzt,"model.train()"),kzt.forEach(t),uze.forEach(t),ICr=i(Na),T(aC.$$.fragment,Na),Na.forEach(t),Ol.forEach(t),nZe=i(m),_c=n(m,"H2",{class:!0});var voo=s(_c);nC=n(voo,"A",{id:!0,class:!0,href:!0});var Szt=s(nC);WCe=n(Szt,"SPAN",{});var Rzt=s(WCe);T(D$.$$.fragment,Rzt),Rzt.forEach(t),Szt.forEach(t),NCr=i(voo),UCe=n(voo,"SPAN",{});var Pzt=s(UCe);qCr=r(Pzt,"AutoModelForCTC"),Pzt.forEach(t),voo.forEach(t),sZe=i(m),Ko=n(m,"DIV",{class:!0});var Xl=s(Ko);T(G$.$$.fragment,Xl),jCr=i(Xl),bc=n(Xl,"P",{});var Qle=s(bc);DCr=r(Qle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bK=n(Qle,"A",{href:!0});var Bzt=s(bK);GCr=r(Bzt,"from_pretrained()"),Bzt.forEach(t),OCr=r(Qle," class method or the "),vK=n(Qle,"A",{href:!0});var Izt=s(vK);VCr=r(Izt,"from_config()"),Izt.forEach(t),XCr=r(Qle,` class
method.`),Qle.forEach(t),zCr=i(Xl),O$=n(Xl,"P",{});var Foo=s(O$);QCr=r(Foo,"This class cannot be instantiated directly using "),HCe=n(Foo,"CODE",{});var Nzt=s(HCe);WCr=r(Nzt,"__init__()"),Nzt.forEach(t),UCr=r(Foo," (throws an error)."),Foo.forEach(t),HCr=i(Xl),It=n(Xl,"DIV",{class:!0});var d8=s(It);T(V$.$$.fragment,d8),JCr=i(d8),JCe=n(d8,"P",{});var qzt=s(JCe);YCr=r(qzt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),qzt.forEach(t),KCr=i(d8),vc=n(d8,"P",{});var Wle=s(vc);ZCr=r(Wle,`Note:
Loading a model from its configuration file does `),YCe=n(Wle,"STRONG",{});var jzt=s(YCe);e3r=r(jzt,"not"),jzt.forEach(t),o3r=r(Wle,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(Wle,"A",{href:!0});var Dzt=s(FK);r3r=r(Dzt,"from_pretrained()"),Dzt.forEach(t),t3r=r(Wle," to load the model weights."),Wle.forEach(t),a3r=i(d8),T(sC.$$.fragment,d8),d8.forEach(t),n3r=i(Xl),bo=n(Xl,"DIV",{class:!0});var qa=s(bo);T(X$.$$.fragment,qa),s3r=i(qa),KCe=n(qa,"P",{});var Gzt=s(KCe);l3r=r(Gzt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Gzt.forEach(t),i3r=i(qa),un=n(qa,"P",{});var c8=s(un);d3r=r(c8,"The model class to instantiate is selected based on the "),ZCe=n(c8,"CODE",{});var Ozt=s(ZCe);c3r=r(Ozt,"model_type"),Ozt.forEach(t),m3r=r(c8,` property of the config object (either
passed as an argument or loaded from `),e3e=n(c8,"CODE",{});var Vzt=s(e3e);f3r=r(Vzt,"pretrained_model_name_or_path"),Vzt.forEach(t),g3r=r(c8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=n(c8,"CODE",{});var Xzt=s(o3e);h3r=r(Xzt,"pretrained_model_name_or_path"),Xzt.forEach(t),u3r=r(c8,":"),c8.forEach(t),p3r=i(qa),Le=n(qa,"UL",{});var Ie=s(Le);lC=n(Ie,"LI",{});var pze=s(lC);r3e=n(pze,"STRONG",{});var zzt=s(r3e);_3r=r(zzt,"data2vec-audio"),zzt.forEach(t),b3r=r(pze," \u2014 "),TK=n(pze,"A",{href:!0});var Qzt=s(TK);v3r=r(Qzt,"Data2VecAudioForCTC"),Qzt.forEach(t),F3r=r(pze," (Data2VecAudio model)"),pze.forEach(t),T3r=i(Ie),iC=n(Ie,"LI",{});var _ze=s(iC);t3e=n(_ze,"STRONG",{});var Wzt=s(t3e);M3r=r(Wzt,"hubert"),Wzt.forEach(t),E3r=r(_ze," \u2014 "),MK=n(_ze,"A",{href:!0});var Uzt=s(MK);C3r=r(Uzt,"HubertForCTC"),Uzt.forEach(t),w3r=r(_ze," (Hubert model)"),_ze.forEach(t),A3r=i(Ie),dC=n(Ie,"LI",{});var bze=s(dC);a3e=n(bze,"STRONG",{});var Hzt=s(a3e);L3r=r(Hzt,"mctct"),Hzt.forEach(t),y3r=r(bze," \u2014 "),EK=n(bze,"A",{href:!0});var Jzt=s(EK);x3r=r(Jzt,"MCTCTForCTC"),Jzt.forEach(t),$3r=r(bze," (M-CTC-T model)"),bze.forEach(t),k3r=i(Ie),cC=n(Ie,"LI",{});var vze=s(cC);n3e=n(vze,"STRONG",{});var Yzt=s(n3e);S3r=r(Yzt,"sew"),Yzt.forEach(t),R3r=r(vze," \u2014 "),CK=n(vze,"A",{href:!0});var Kzt=s(CK);P3r=r(Kzt,"SEWForCTC"),Kzt.forEach(t),B3r=r(vze," (SEW model)"),vze.forEach(t),I3r=i(Ie),mC=n(Ie,"LI",{});var Fze=s(mC);s3e=n(Fze,"STRONG",{});var Zzt=s(s3e);N3r=r(Zzt,"sew-d"),Zzt.forEach(t),q3r=r(Fze," \u2014 "),wK=n(Fze,"A",{href:!0});var eQt=s(wK);j3r=r(eQt,"SEWDForCTC"),eQt.forEach(t),D3r=r(Fze," (SEW-D model)"),Fze.forEach(t),G3r=i(Ie),fC=n(Ie,"LI",{});var Tze=s(fC);l3e=n(Tze,"STRONG",{});var oQt=s(l3e);O3r=r(oQt,"unispeech"),oQt.forEach(t),V3r=r(Tze," \u2014 "),AK=n(Tze,"A",{href:!0});var rQt=s(AK);X3r=r(rQt,"UniSpeechForCTC"),rQt.forEach(t),z3r=r(Tze," (UniSpeech model)"),Tze.forEach(t),Q3r=i(Ie),gC=n(Ie,"LI",{});var Mze=s(gC);i3e=n(Mze,"STRONG",{});var tQt=s(i3e);W3r=r(tQt,"unispeech-sat"),tQt.forEach(t),U3r=r(Mze," \u2014 "),LK=n(Mze,"A",{href:!0});var aQt=s(LK);H3r=r(aQt,"UniSpeechSatForCTC"),aQt.forEach(t),J3r=r(Mze," (UniSpeechSat model)"),Mze.forEach(t),Y3r=i(Ie),hC=n(Ie,"LI",{});var Eze=s(hC);d3e=n(Eze,"STRONG",{});var nQt=s(d3e);K3r=r(nQt,"wav2vec2"),nQt.forEach(t),Z3r=r(Eze," \u2014 "),yK=n(Eze,"A",{href:!0});var sQt=s(yK);e5r=r(sQt,"Wav2Vec2ForCTC"),sQt.forEach(t),o5r=r(Eze," (Wav2Vec2 model)"),Eze.forEach(t),r5r=i(Ie),uC=n(Ie,"LI",{});var Cze=s(uC);c3e=n(Cze,"STRONG",{});var lQt=s(c3e);t5r=r(lQt,"wav2vec2-conformer"),lQt.forEach(t),a5r=r(Cze," \u2014 "),xK=n(Cze,"A",{href:!0});var iQt=s(xK);n5r=r(iQt,"Wav2Vec2ConformerForCTC"),iQt.forEach(t),s5r=r(Cze," (Wav2Vec2-Conformer model)"),Cze.forEach(t),l5r=i(Ie),pC=n(Ie,"LI",{});var wze=s(pC);m3e=n(wze,"STRONG",{});var dQt=s(m3e);i5r=r(dQt,"wavlm"),dQt.forEach(t),d5r=r(wze," \u2014 "),$K=n(wze,"A",{href:!0});var cQt=s($K);c5r=r(cQt,"WavLMForCTC"),cQt.forEach(t),m5r=r(wze," (WavLM model)"),wze.forEach(t),Ie.forEach(t),f5r=i(qa),_C=n(qa,"P",{});var Aze=s(_C);g5r=r(Aze,"The model is set in evaluation mode by default using "),f3e=n(Aze,"CODE",{});var mQt=s(f3e);h5r=r(mQt,"model.eval()"),mQt.forEach(t),u5r=r(Aze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=n(Aze,"CODE",{});var fQt=s(g3e);p5r=r(fQt,"model.train()"),fQt.forEach(t),Aze.forEach(t),_5r=i(qa),T(bC.$$.fragment,qa),qa.forEach(t),Xl.forEach(t),lZe=i(m),Fc=n(m,"H2",{class:!0});var Too=s(Fc);vC=n(Too,"A",{id:!0,class:!0,href:!0});var gQt=s(vC);h3e=n(gQt,"SPAN",{});var hQt=s(h3e);T(z$.$$.fragment,hQt),hQt.forEach(t),gQt.forEach(t),b5r=i(Too),u3e=n(Too,"SPAN",{});var uQt=s(u3e);v5r=r(uQt,"AutoModelForSpeechSeq2Seq"),uQt.forEach(t),Too.forEach(t),iZe=i(m),Zo=n(m,"DIV",{class:!0});var zl=s(Zo);T(Q$.$$.fragment,zl),F5r=i(zl),Tc=n(zl,"P",{});var Ule=s(Tc);T5r=r(Ule,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kK=n(Ule,"A",{href:!0});var pQt=s(kK);M5r=r(pQt,"from_pretrained()"),pQt.forEach(t),E5r=r(Ule," class method or the "),SK=n(Ule,"A",{href:!0});var _Qt=s(SK);C5r=r(_Qt,"from_config()"),_Qt.forEach(t),w5r=r(Ule,` class
method.`),Ule.forEach(t),A5r=i(zl),W$=n(zl,"P",{});var Moo=s(W$);L5r=r(Moo,"This class cannot be instantiated directly using "),p3e=n(Moo,"CODE",{});var bQt=s(p3e);y5r=r(bQt,"__init__()"),bQt.forEach(t),x5r=r(Moo," (throws an error)."),Moo.forEach(t),$5r=i(zl),Nt=n(zl,"DIV",{class:!0});var m8=s(Nt);T(U$.$$.fragment,m8),k5r=i(m8),_3e=n(m8,"P",{});var vQt=s(_3e);S5r=r(vQt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vQt.forEach(t),R5r=i(m8),Mc=n(m8,"P",{});var Hle=s(Mc);P5r=r(Hle,`Note:
Loading a model from its configuration file does `),b3e=n(Hle,"STRONG",{});var FQt=s(b3e);B5r=r(FQt,"not"),FQt.forEach(t),I5r=r(Hle,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(Hle,"A",{href:!0});var TQt=s(RK);N5r=r(TQt,"from_pretrained()"),TQt.forEach(t),q5r=r(Hle," to load the model weights."),Hle.forEach(t),j5r=i(m8),T(FC.$$.fragment,m8),m8.forEach(t),D5r=i(zl),vo=n(zl,"DIV",{class:!0});var ja=s(vo);T(H$.$$.fragment,ja),G5r=i(ja),v3e=n(ja,"P",{});var MQt=s(v3e);O5r=r(MQt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MQt.forEach(t),V5r=i(ja),pn=n(ja,"P",{});var f8=s(pn);X5r=r(f8,"The model class to instantiate is selected based on the "),F3e=n(f8,"CODE",{});var EQt=s(F3e);z5r=r(EQt,"model_type"),EQt.forEach(t),Q5r=r(f8,` property of the config object (either
passed as an argument or loaded from `),T3e=n(f8,"CODE",{});var CQt=s(T3e);W5r=r(CQt,"pretrained_model_name_or_path"),CQt.forEach(t),U5r=r(f8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(f8,"CODE",{});var wQt=s(M3e);H5r=r(wQt,"pretrained_model_name_or_path"),wQt.forEach(t),J5r=r(f8,":"),f8.forEach(t),Y5r=i(ja),J$=n(ja,"UL",{});var Eoo=s(J$);TC=n(Eoo,"LI",{});var Lze=s(TC);E3e=n(Lze,"STRONG",{});var AQt=s(E3e);K5r=r(AQt,"speech-encoder-decoder"),AQt.forEach(t),Z5r=r(Lze," \u2014 "),PK=n(Lze,"A",{href:!0});var LQt=s(PK);e0r=r(LQt,"SpeechEncoderDecoderModel"),LQt.forEach(t),o0r=r(Lze," (Speech Encoder decoder model)"),Lze.forEach(t),r0r=i(Eoo),MC=n(Eoo,"LI",{});var yze=s(MC);C3e=n(yze,"STRONG",{});var yQt=s(C3e);t0r=r(yQt,"speech_to_text"),yQt.forEach(t),a0r=r(yze," \u2014 "),BK=n(yze,"A",{href:!0});var xQt=s(BK);n0r=r(xQt,"Speech2TextForConditionalGeneration"),xQt.forEach(t),s0r=r(yze," (Speech2Text model)"),yze.forEach(t),Eoo.forEach(t),l0r=i(ja),EC=n(ja,"P",{});var xze=s(EC);i0r=r(xze,"The model is set in evaluation mode by default using "),w3e=n(xze,"CODE",{});var $Qt=s(w3e);d0r=r($Qt,"model.eval()"),$Qt.forEach(t),c0r=r(xze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A3e=n(xze,"CODE",{});var kQt=s(A3e);m0r=r(kQt,"model.train()"),kQt.forEach(t),xze.forEach(t),f0r=i(ja),T(CC.$$.fragment,ja),ja.forEach(t),zl.forEach(t),dZe=i(m),Ec=n(m,"H2",{class:!0});var Coo=s(Ec);wC=n(Coo,"A",{id:!0,class:!0,href:!0});var SQt=s(wC);L3e=n(SQt,"SPAN",{});var RQt=s(L3e);T(Y$.$$.fragment,RQt),RQt.forEach(t),SQt.forEach(t),g0r=i(Coo),y3e=n(Coo,"SPAN",{});var PQt=s(y3e);h0r=r(PQt,"AutoModelForAudioXVector"),PQt.forEach(t),Coo.forEach(t),cZe=i(m),er=n(m,"DIV",{class:!0});var Ql=s(er);T(K$.$$.fragment,Ql),u0r=i(Ql),Cc=n(Ql,"P",{});var Jle=s(Cc);p0r=r(Jle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),IK=n(Jle,"A",{href:!0});var BQt=s(IK);_0r=r(BQt,"from_pretrained()"),BQt.forEach(t),b0r=r(Jle," class method or the "),NK=n(Jle,"A",{href:!0});var IQt=s(NK);v0r=r(IQt,"from_config()"),IQt.forEach(t),F0r=r(Jle,` class
method.`),Jle.forEach(t),T0r=i(Ql),Z$=n(Ql,"P",{});var woo=s(Z$);M0r=r(woo,"This class cannot be instantiated directly using "),x3e=n(woo,"CODE",{});var NQt=s(x3e);E0r=r(NQt,"__init__()"),NQt.forEach(t),C0r=r(woo," (throws an error)."),woo.forEach(t),w0r=i(Ql),qt=n(Ql,"DIV",{class:!0});var g8=s(qt);T(ek.$$.fragment,g8),A0r=i(g8),$3e=n(g8,"P",{});var qQt=s($3e);L0r=r(qQt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qQt.forEach(t),y0r=i(g8),wc=n(g8,"P",{});var Yle=s(wc);x0r=r(Yle,`Note:
Loading a model from its configuration file does `),k3e=n(Yle,"STRONG",{});var jQt=s(k3e);$0r=r(jQt,"not"),jQt.forEach(t),k0r=r(Yle,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Yle,"A",{href:!0});var DQt=s(qK);S0r=r(DQt,"from_pretrained()"),DQt.forEach(t),R0r=r(Yle," to load the model weights."),Yle.forEach(t),P0r=i(g8),T(AC.$$.fragment,g8),g8.forEach(t),B0r=i(Ql),Fo=n(Ql,"DIV",{class:!0});var Da=s(Fo);T(ok.$$.fragment,Da),I0r=i(Da),S3e=n(Da,"P",{});var GQt=s(S3e);N0r=r(GQt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),GQt.forEach(t),q0r=i(Da),_n=n(Da,"P",{});var h8=s(_n);j0r=r(h8,"The model class to instantiate is selected based on the "),R3e=n(h8,"CODE",{});var OQt=s(R3e);D0r=r(OQt,"model_type"),OQt.forEach(t),G0r=r(h8,` property of the config object (either
passed as an argument or loaded from `),P3e=n(h8,"CODE",{});var VQt=s(P3e);O0r=r(VQt,"pretrained_model_name_or_path"),VQt.forEach(t),V0r=r(h8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(h8,"CODE",{});var XQt=s(B3e);X0r=r(XQt,"pretrained_model_name_or_path"),XQt.forEach(t),z0r=r(h8,":"),h8.forEach(t),Q0r=i(Da),ft=n(Da,"UL",{});var Wl=s(ft);LC=n(Wl,"LI",{});var $ze=s(LC);I3e=n($ze,"STRONG",{});var zQt=s(I3e);W0r=r(zQt,"data2vec-audio"),zQt.forEach(t),U0r=r($ze," \u2014 "),jK=n($ze,"A",{href:!0});var QQt=s(jK);H0r=r(QQt,"Data2VecAudioForXVector"),QQt.forEach(t),J0r=r($ze," (Data2VecAudio model)"),$ze.forEach(t),Y0r=i(Wl),yC=n(Wl,"LI",{});var kze=s(yC);N3e=n(kze,"STRONG",{});var WQt=s(N3e);K0r=r(WQt,"unispeech-sat"),WQt.forEach(t),Z0r=r(kze," \u2014 "),DK=n(kze,"A",{href:!0});var UQt=s(DK);ewr=r(UQt,"UniSpeechSatForXVector"),UQt.forEach(t),owr=r(kze," (UniSpeechSat model)"),kze.forEach(t),rwr=i(Wl),xC=n(Wl,"LI",{});var Sze=s(xC);q3e=n(Sze,"STRONG",{});var HQt=s(q3e);twr=r(HQt,"wav2vec2"),HQt.forEach(t),awr=r(Sze," \u2014 "),GK=n(Sze,"A",{href:!0});var JQt=s(GK);nwr=r(JQt,"Wav2Vec2ForXVector"),JQt.forEach(t),swr=r(Sze," (Wav2Vec2 model)"),Sze.forEach(t),lwr=i(Wl),$C=n(Wl,"LI",{});var Rze=s($C);j3e=n(Rze,"STRONG",{});var YQt=s(j3e);iwr=r(YQt,"wav2vec2-conformer"),YQt.forEach(t),dwr=r(Rze," \u2014 "),OK=n(Rze,"A",{href:!0});var KQt=s(OK);cwr=r(KQt,"Wav2Vec2ConformerForXVector"),KQt.forEach(t),mwr=r(Rze," (Wav2Vec2-Conformer model)"),Rze.forEach(t),fwr=i(Wl),kC=n(Wl,"LI",{});var Pze=s(kC);D3e=n(Pze,"STRONG",{});var ZQt=s(D3e);gwr=r(ZQt,"wavlm"),ZQt.forEach(t),hwr=r(Pze," \u2014 "),VK=n(Pze,"A",{href:!0});var eWt=s(VK);uwr=r(eWt,"WavLMForXVector"),eWt.forEach(t),pwr=r(Pze," (WavLM model)"),Pze.forEach(t),Wl.forEach(t),_wr=i(Da),SC=n(Da,"P",{});var Bze=s(SC);bwr=r(Bze,"The model is set in evaluation mode by default using "),G3e=n(Bze,"CODE",{});var oWt=s(G3e);vwr=r(oWt,"model.eval()"),oWt.forEach(t),Fwr=r(Bze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O3e=n(Bze,"CODE",{});var rWt=s(O3e);Twr=r(rWt,"model.train()"),rWt.forEach(t),Bze.forEach(t),Mwr=i(Da),T(RC.$$.fragment,Da),Da.forEach(t),Ql.forEach(t),mZe=i(m),Ac=n(m,"H2",{class:!0});var Aoo=s(Ac);PC=n(Aoo,"A",{id:!0,class:!0,href:!0});var tWt=s(PC);V3e=n(tWt,"SPAN",{});var aWt=s(V3e);T(rk.$$.fragment,aWt),aWt.forEach(t),tWt.forEach(t),Ewr=i(Aoo),X3e=n(Aoo,"SPAN",{});var nWt=s(X3e);Cwr=r(nWt,"AutoModelForMaskedImageModeling"),nWt.forEach(t),Aoo.forEach(t),fZe=i(m),or=n(m,"DIV",{class:!0});var Ul=s(or);T(tk.$$.fragment,Ul),wwr=i(Ul),Lc=n(Ul,"P",{});var Kle=s(Lc);Awr=r(Kle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XK=n(Kle,"A",{href:!0});var sWt=s(XK);Lwr=r(sWt,"from_pretrained()"),sWt.forEach(t),ywr=r(Kle," class method or the "),zK=n(Kle,"A",{href:!0});var lWt=s(zK);xwr=r(lWt,"from_config()"),lWt.forEach(t),$wr=r(Kle,` class
method.`),Kle.forEach(t),kwr=i(Ul),ak=n(Ul,"P",{});var Loo=s(ak);Swr=r(Loo,"This class cannot be instantiated directly using "),z3e=n(Loo,"CODE",{});var iWt=s(z3e);Rwr=r(iWt,"__init__()"),iWt.forEach(t),Pwr=r(Loo," (throws an error)."),Loo.forEach(t),Bwr=i(Ul),jt=n(Ul,"DIV",{class:!0});var u8=s(jt);T(nk.$$.fragment,u8),Iwr=i(u8),Q3e=n(u8,"P",{});var dWt=s(Q3e);Nwr=r(dWt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),dWt.forEach(t),qwr=i(u8),yc=n(u8,"P",{});var Zle=s(yc);jwr=r(Zle,`Note:
Loading a model from its configuration file does `),W3e=n(Zle,"STRONG",{});var cWt=s(W3e);Dwr=r(cWt,"not"),cWt.forEach(t),Gwr=r(Zle,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(Zle,"A",{href:!0});var mWt=s(QK);Owr=r(mWt,"from_pretrained()"),mWt.forEach(t),Vwr=r(Zle," to load the model weights."),Zle.forEach(t),Xwr=i(u8),T(BC.$$.fragment,u8),u8.forEach(t),zwr=i(Ul),To=n(Ul,"DIV",{class:!0});var Ga=s(To);T(sk.$$.fragment,Ga),Qwr=i(Ga),U3e=n(Ga,"P",{});var fWt=s(U3e);Wwr=r(fWt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fWt.forEach(t),Uwr=i(Ga),bn=n(Ga,"P",{});var p8=s(bn);Hwr=r(p8,"The model class to instantiate is selected based on the "),H3e=n(p8,"CODE",{});var gWt=s(H3e);Jwr=r(gWt,"model_type"),gWt.forEach(t),Ywr=r(p8,` property of the config object (either
passed as an argument or loaded from `),J3e=n(p8,"CODE",{});var hWt=s(J3e);Kwr=r(hWt,"pretrained_model_name_or_path"),hWt.forEach(t),Zwr=r(p8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(p8,"CODE",{});var uWt=s(Y3e);eAr=r(uWt,"pretrained_model_name_or_path"),uWt.forEach(t),oAr=r(p8,":"),p8.forEach(t),rAr=i(Ga),vn=n(Ga,"UL",{});var _8=s(vn);IC=n(_8,"LI",{});var Ize=s(IC);K3e=n(Ize,"STRONG",{});var pWt=s(K3e);tAr=r(pWt,"deit"),pWt.forEach(t),aAr=r(Ize," \u2014 "),WK=n(Ize,"A",{href:!0});var _Wt=s(WK);nAr=r(_Wt,"DeiTForMaskedImageModeling"),_Wt.forEach(t),sAr=r(Ize," (DeiT model)"),Ize.forEach(t),lAr=i(_8),NC=n(_8,"LI",{});var Nze=s(NC);Z3e=n(Nze,"STRONG",{});var bWt=s(Z3e);iAr=r(bWt,"swin"),bWt.forEach(t),dAr=r(Nze," \u2014 "),UK=n(Nze,"A",{href:!0});var vWt=s(UK);cAr=r(vWt,"SwinForMaskedImageModeling"),vWt.forEach(t),mAr=r(Nze," (Swin Transformer model)"),Nze.forEach(t),fAr=i(_8),qC=n(_8,"LI",{});var qze=s(qC);e5e=n(qze,"STRONG",{});var FWt=s(e5e);gAr=r(FWt,"swinv2"),FWt.forEach(t),hAr=r(qze," \u2014 "),HK=n(qze,"A",{href:!0});var TWt=s(HK);uAr=r(TWt,"Swinv2ForMaskedImageModeling"),TWt.forEach(t),pAr=r(qze," (Swin Transformer V2 model)"),qze.forEach(t),_Ar=i(_8),jC=n(_8,"LI",{});var jze=s(jC);o5e=n(jze,"STRONG",{});var MWt=s(o5e);bAr=r(MWt,"vit"),MWt.forEach(t),vAr=r(jze," \u2014 "),JK=n(jze,"A",{href:!0});var EWt=s(JK);FAr=r(EWt,"ViTForMaskedImageModeling"),EWt.forEach(t),TAr=r(jze," (ViT model)"),jze.forEach(t),_8.forEach(t),MAr=i(Ga),DC=n(Ga,"P",{});var Dze=s(DC);EAr=r(Dze,"The model is set in evaluation mode by default using "),r5e=n(Dze,"CODE",{});var CWt=s(r5e);CAr=r(CWt,"model.eval()"),CWt.forEach(t),wAr=r(Dze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t5e=n(Dze,"CODE",{});var wWt=s(t5e);AAr=r(wWt,"model.train()"),wWt.forEach(t),Dze.forEach(t),LAr=i(Ga),T(GC.$$.fragment,Ga),Ga.forEach(t),Ul.forEach(t),gZe=i(m),xc=n(m,"H2",{class:!0});var yoo=s(xc);OC=n(yoo,"A",{id:!0,class:!0,href:!0});var AWt=s(OC);a5e=n(AWt,"SPAN",{});var LWt=s(a5e);T(lk.$$.fragment,LWt),LWt.forEach(t),AWt.forEach(t),yAr=i(yoo),n5e=n(yoo,"SPAN",{});var yWt=s(n5e);xAr=r(yWt,"AutoModelForObjectDetection"),yWt.forEach(t),yoo.forEach(t),hZe=i(m),rr=n(m,"DIV",{class:!0});var Hl=s(rr);T(ik.$$.fragment,Hl),$Ar=i(Hl),$c=n(Hl,"P",{});var eie=s($c);kAr=r(eie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YK=n(eie,"A",{href:!0});var xWt=s(YK);SAr=r(xWt,"from_pretrained()"),xWt.forEach(t),RAr=r(eie," class method or the "),KK=n(eie,"A",{href:!0});var $Wt=s(KK);PAr=r($Wt,"from_config()"),$Wt.forEach(t),BAr=r(eie,` class
method.`),eie.forEach(t),IAr=i(Hl),dk=n(Hl,"P",{});var xoo=s(dk);NAr=r(xoo,"This class cannot be instantiated directly using "),s5e=n(xoo,"CODE",{});var kWt=s(s5e);qAr=r(kWt,"__init__()"),kWt.forEach(t),jAr=r(xoo," (throws an error)."),xoo.forEach(t),DAr=i(Hl),Dt=n(Hl,"DIV",{class:!0});var b8=s(Dt);T(ck.$$.fragment,b8),GAr=i(b8),l5e=n(b8,"P",{});var SWt=s(l5e);OAr=r(SWt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),SWt.forEach(t),VAr=i(b8),kc=n(b8,"P",{});var oie=s(kc);XAr=r(oie,`Note:
Loading a model from its configuration file does `),i5e=n(oie,"STRONG",{});var RWt=s(i5e);zAr=r(RWt,"not"),RWt.forEach(t),QAr=r(oie,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(oie,"A",{href:!0});var PWt=s(ZK);WAr=r(PWt,"from_pretrained()"),PWt.forEach(t),UAr=r(oie," to load the model weights."),oie.forEach(t),HAr=i(b8),T(VC.$$.fragment,b8),b8.forEach(t),JAr=i(Hl),Mo=n(Hl,"DIV",{class:!0});var Oa=s(Mo);T(mk.$$.fragment,Oa),YAr=i(Oa),d5e=n(Oa,"P",{});var BWt=s(d5e);KAr=r(BWt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),BWt.forEach(t),ZAr=i(Oa),Fn=n(Oa,"P",{});var v8=s(Fn);e6r=r(v8,"The model class to instantiate is selected based on the "),c5e=n(v8,"CODE",{});var IWt=s(c5e);o6r=r(IWt,"model_type"),IWt.forEach(t),r6r=r(v8,` property of the config object (either
passed as an argument or loaded from `),m5e=n(v8,"CODE",{});var NWt=s(m5e);t6r=r(NWt,"pretrained_model_name_or_path"),NWt.forEach(t),a6r=r(v8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(v8,"CODE",{});var qWt=s(f5e);n6r=r(qWt,"pretrained_model_name_or_path"),qWt.forEach(t),s6r=r(v8,":"),v8.forEach(t),l6r=i(Oa),Sc=n(Oa,"UL",{});var rie=s(Sc);XC=n(rie,"LI",{});var Gze=s(XC);g5e=n(Gze,"STRONG",{});var jWt=s(g5e);i6r=r(jWt,"deformable_detr"),jWt.forEach(t),d6r=r(Gze," \u2014 "),eZ=n(Gze,"A",{href:!0});var DWt=s(eZ);c6r=r(DWt,"DeformableDetrForObjectDetection"),DWt.forEach(t),m6r=r(Gze," (Deformable DETR model)"),Gze.forEach(t),f6r=i(rie),zC=n(rie,"LI",{});var Oze=s(zC);h5e=n(Oze,"STRONG",{});var GWt=s(h5e);g6r=r(GWt,"detr"),GWt.forEach(t),h6r=r(Oze," \u2014 "),oZ=n(Oze,"A",{href:!0});var OWt=s(oZ);u6r=r(OWt,"DetrForObjectDetection"),OWt.forEach(t),p6r=r(Oze," (DETR model)"),Oze.forEach(t),_6r=i(rie),QC=n(rie,"LI",{});var Vze=s(QC);u5e=n(Vze,"STRONG",{});var VWt=s(u5e);b6r=r(VWt,"yolos"),VWt.forEach(t),v6r=r(Vze," \u2014 "),rZ=n(Vze,"A",{href:!0});var XWt=s(rZ);F6r=r(XWt,"YolosForObjectDetection"),XWt.forEach(t),T6r=r(Vze," (YOLOS model)"),Vze.forEach(t),rie.forEach(t),M6r=i(Oa),WC=n(Oa,"P",{});var Xze=s(WC);E6r=r(Xze,"The model is set in evaluation mode by default using "),p5e=n(Xze,"CODE",{});var zWt=s(p5e);C6r=r(zWt,"model.eval()"),zWt.forEach(t),w6r=r(Xze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_5e=n(Xze,"CODE",{});var QWt=s(_5e);A6r=r(QWt,"model.train()"),QWt.forEach(t),Xze.forEach(t),L6r=i(Oa),T(UC.$$.fragment,Oa),Oa.forEach(t),Hl.forEach(t),uZe=i(m),Rc=n(m,"H2",{class:!0});var $oo=s(Rc);HC=n($oo,"A",{id:!0,class:!0,href:!0});var WWt=s(HC);b5e=n(WWt,"SPAN",{});var UWt=s(b5e);T(fk.$$.fragment,UWt),UWt.forEach(t),WWt.forEach(t),y6r=i($oo),v5e=n($oo,"SPAN",{});var HWt=s(v5e);x6r=r(HWt,"AutoModelForImageSegmentation"),HWt.forEach(t),$oo.forEach(t),pZe=i(m),tr=n(m,"DIV",{class:!0});var Jl=s(tr);T(gk.$$.fragment,Jl),$6r=i(Jl),Pc=n(Jl,"P",{});var tie=s(Pc);k6r=r(tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tZ=n(tie,"A",{href:!0});var JWt=s(tZ);S6r=r(JWt,"from_pretrained()"),JWt.forEach(t),R6r=r(tie," class method or the "),aZ=n(tie,"A",{href:!0});var YWt=s(aZ);P6r=r(YWt,"from_config()"),YWt.forEach(t),B6r=r(tie,` class
method.`),tie.forEach(t),I6r=i(Jl),hk=n(Jl,"P",{});var koo=s(hk);N6r=r(koo,"This class cannot be instantiated directly using "),F5e=n(koo,"CODE",{});var KWt=s(F5e);q6r=r(KWt,"__init__()"),KWt.forEach(t),j6r=r(koo," (throws an error)."),koo.forEach(t),D6r=i(Jl),Gt=n(Jl,"DIV",{class:!0});var F8=s(Gt);T(uk.$$.fragment,F8),G6r=i(F8),T5e=n(F8,"P",{});var ZWt=s(T5e);O6r=r(ZWt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ZWt.forEach(t),V6r=i(F8),Bc=n(F8,"P",{});var aie=s(Bc);X6r=r(aie,`Note:
Loading a model from its configuration file does `),M5e=n(aie,"STRONG",{});var eUt=s(M5e);z6r=r(eUt,"not"),eUt.forEach(t),Q6r=r(aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(aie,"A",{href:!0});var oUt=s(nZ);W6r=r(oUt,"from_pretrained()"),oUt.forEach(t),U6r=r(aie," to load the model weights."),aie.forEach(t),H6r=i(F8),T(JC.$$.fragment,F8),F8.forEach(t),J6r=i(Jl),Eo=n(Jl,"DIV",{class:!0});var Va=s(Eo);T(pk.$$.fragment,Va),Y6r=i(Va),E5e=n(Va,"P",{});var rUt=s(E5e);K6r=r(rUt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rUt.forEach(t),Z6r=i(Va),Tn=n(Va,"P",{});var T8=s(Tn);e7r=r(T8,"The model class to instantiate is selected based on the "),C5e=n(T8,"CODE",{});var tUt=s(C5e);o7r=r(tUt,"model_type"),tUt.forEach(t),r7r=r(T8,` property of the config object (either
passed as an argument or loaded from `),w5e=n(T8,"CODE",{});var aUt=s(w5e);t7r=r(aUt,"pretrained_model_name_or_path"),aUt.forEach(t),a7r=r(T8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=n(T8,"CODE",{});var nUt=s(A5e);n7r=r(nUt,"pretrained_model_name_or_path"),nUt.forEach(t),s7r=r(T8,":"),T8.forEach(t),l7r=i(Va),L5e=n(Va,"UL",{});var sUt=s(L5e);YC=n(sUt,"LI",{});var zze=s(YC);y5e=n(zze,"STRONG",{});var lUt=s(y5e);i7r=r(lUt,"detr"),lUt.forEach(t),d7r=r(zze," \u2014 "),sZ=n(zze,"A",{href:!0});var iUt=s(sZ);c7r=r(iUt,"DetrForSegmentation"),iUt.forEach(t),m7r=r(zze," (DETR model)"),zze.forEach(t),sUt.forEach(t),f7r=i(Va),KC=n(Va,"P",{});var Qze=s(KC);g7r=r(Qze,"The model is set in evaluation mode by default using "),x5e=n(Qze,"CODE",{});var dUt=s(x5e);h7r=r(dUt,"model.eval()"),dUt.forEach(t),u7r=r(Qze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$5e=n(Qze,"CODE",{});var cUt=s($5e);p7r=r(cUt,"model.train()"),cUt.forEach(t),Qze.forEach(t),_7r=i(Va),T(ZC.$$.fragment,Va),Va.forEach(t),Jl.forEach(t),_Ze=i(m),Ic=n(m,"H2",{class:!0});var Soo=s(Ic);e3=n(Soo,"A",{id:!0,class:!0,href:!0});var mUt=s(e3);k5e=n(mUt,"SPAN",{});var fUt=s(k5e);T(_k.$$.fragment,fUt),fUt.forEach(t),mUt.forEach(t),b7r=i(Soo),S5e=n(Soo,"SPAN",{});var gUt=s(S5e);v7r=r(gUt,"AutoModelForSemanticSegmentation"),gUt.forEach(t),Soo.forEach(t),bZe=i(m),ar=n(m,"DIV",{class:!0});var Yl=s(ar);T(bk.$$.fragment,Yl),F7r=i(Yl),Nc=n(Yl,"P",{});var nie=s(Nc);T7r=r(nie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lZ=n(nie,"A",{href:!0});var hUt=s(lZ);M7r=r(hUt,"from_pretrained()"),hUt.forEach(t),E7r=r(nie," class method or the "),iZ=n(nie,"A",{href:!0});var uUt=s(iZ);C7r=r(uUt,"from_config()"),uUt.forEach(t),w7r=r(nie,` class
method.`),nie.forEach(t),A7r=i(Yl),vk=n(Yl,"P",{});var Roo=s(vk);L7r=r(Roo,"This class cannot be instantiated directly using "),R5e=n(Roo,"CODE",{});var pUt=s(R5e);y7r=r(pUt,"__init__()"),pUt.forEach(t),x7r=r(Roo," (throws an error)."),Roo.forEach(t),$7r=i(Yl),Ot=n(Yl,"DIV",{class:!0});var M8=s(Ot);T(Fk.$$.fragment,M8),k7r=i(M8),P5e=n(M8,"P",{});var _Ut=s(P5e);S7r=r(_Ut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),_Ut.forEach(t),R7r=i(M8),qc=n(M8,"P",{});var sie=s(qc);P7r=r(sie,`Note:
Loading a model from its configuration file does `),B5e=n(sie,"STRONG",{});var bUt=s(B5e);B7r=r(bUt,"not"),bUt.forEach(t),I7r=r(sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(sie,"A",{href:!0});var vUt=s(dZ);N7r=r(vUt,"from_pretrained()"),vUt.forEach(t),q7r=r(sie," to load the model weights."),sie.forEach(t),j7r=i(M8),T(o3.$$.fragment,M8),M8.forEach(t),D7r=i(Yl),Co=n(Yl,"DIV",{class:!0});var Xa=s(Co);T(Tk.$$.fragment,Xa),G7r=i(Xa),I5e=n(Xa,"P",{});var FUt=s(I5e);O7r=r(FUt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),FUt.forEach(t),V7r=i(Xa),Mn=n(Xa,"P",{});var E8=s(Mn);X7r=r(E8,"The model class to instantiate is selected based on the "),N5e=n(E8,"CODE",{});var TUt=s(N5e);z7r=r(TUt,"model_type"),TUt.forEach(t),Q7r=r(E8,` property of the config object (either
passed as an argument or loaded from `),q5e=n(E8,"CODE",{});var MUt=s(q5e);W7r=r(MUt,"pretrained_model_name_or_path"),MUt.forEach(t),U7r=r(E8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=n(E8,"CODE",{});var EUt=s(j5e);H7r=r(EUt,"pretrained_model_name_or_path"),EUt.forEach(t),J7r=r(E8,":"),E8.forEach(t),Y7r=i(Xa),gt=n(Xa,"UL",{});var Kl=s(gt);r3=n(Kl,"LI",{});var Wze=s(r3);D5e=n(Wze,"STRONG",{});var CUt=s(D5e);K7r=r(CUt,"beit"),CUt.forEach(t),Z7r=r(Wze," \u2014 "),cZ=n(Wze,"A",{href:!0});var wUt=s(cZ);eLr=r(wUt,"BeitForSemanticSegmentation"),wUt.forEach(t),oLr=r(Wze," (BEiT model)"),Wze.forEach(t),rLr=i(Kl),t3=n(Kl,"LI",{});var Uze=s(t3);G5e=n(Uze,"STRONG",{});var AUt=s(G5e);tLr=r(AUt,"data2vec-vision"),AUt.forEach(t),aLr=r(Uze," \u2014 "),mZ=n(Uze,"A",{href:!0});var LUt=s(mZ);nLr=r(LUt,"Data2VecVisionForSemanticSegmentation"),LUt.forEach(t),sLr=r(Uze," (Data2VecVision model)"),Uze.forEach(t),lLr=i(Kl),a3=n(Kl,"LI",{});var Hze=s(a3);O5e=n(Hze,"STRONG",{});var yUt=s(O5e);iLr=r(yUt,"dpt"),yUt.forEach(t),dLr=r(Hze," \u2014 "),fZ=n(Hze,"A",{href:!0});var xUt=s(fZ);cLr=r(xUt,"DPTForSemanticSegmentation"),xUt.forEach(t),mLr=r(Hze," (DPT model)"),Hze.forEach(t),fLr=i(Kl),n3=n(Kl,"LI",{});var Jze=s(n3);V5e=n(Jze,"STRONG",{});var $Ut=s(V5e);gLr=r($Ut,"mobilevit"),$Ut.forEach(t),hLr=r(Jze," \u2014 "),gZ=n(Jze,"A",{href:!0});var kUt=s(gZ);uLr=r(kUt,"MobileViTForSemanticSegmentation"),kUt.forEach(t),pLr=r(Jze," (MobileViT model)"),Jze.forEach(t),_Lr=i(Kl),s3=n(Kl,"LI",{});var Yze=s(s3);X5e=n(Yze,"STRONG",{});var SUt=s(X5e);bLr=r(SUt,"segformer"),SUt.forEach(t),vLr=r(Yze," \u2014 "),hZ=n(Yze,"A",{href:!0});var RUt=s(hZ);FLr=r(RUt,"SegformerForSemanticSegmentation"),RUt.forEach(t),TLr=r(Yze," (SegFormer model)"),Yze.forEach(t),Kl.forEach(t),MLr=i(Xa),l3=n(Xa,"P",{});var Kze=s(l3);ELr=r(Kze,"The model is set in evaluation mode by default using "),z5e=n(Kze,"CODE",{});var PUt=s(z5e);CLr=r(PUt,"model.eval()"),PUt.forEach(t),wLr=r(Kze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q5e=n(Kze,"CODE",{});var BUt=s(Q5e);ALr=r(BUt,"model.train()"),BUt.forEach(t),Kze.forEach(t),LLr=i(Xa),T(i3.$$.fragment,Xa),Xa.forEach(t),Yl.forEach(t),vZe=i(m),jc=n(m,"H2",{class:!0});var Poo=s(jc);d3=n(Poo,"A",{id:!0,class:!0,href:!0});var IUt=s(d3);W5e=n(IUt,"SPAN",{});var NUt=s(W5e);T(Mk.$$.fragment,NUt),NUt.forEach(t),IUt.forEach(t),yLr=i(Poo),U5e=n(Poo,"SPAN",{});var qUt=s(U5e);xLr=r(qUt,"AutoModelForInstanceSegmentation"),qUt.forEach(t),Poo.forEach(t),FZe=i(m),nr=n(m,"DIV",{class:!0});var Zl=s(nr);T(Ek.$$.fragment,Zl),$Lr=i(Zl),Dc=n(Zl,"P",{});var lie=s(Dc);kLr=r(lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uZ=n(lie,"A",{href:!0});var jUt=s(uZ);SLr=r(jUt,"from_pretrained()"),jUt.forEach(t),RLr=r(lie," class method or the "),pZ=n(lie,"A",{href:!0});var DUt=s(pZ);PLr=r(DUt,"from_config()"),DUt.forEach(t),BLr=r(lie,` class
method.`),lie.forEach(t),ILr=i(Zl),Ck=n(Zl,"P",{});var Boo=s(Ck);NLr=r(Boo,"This class cannot be instantiated directly using "),H5e=n(Boo,"CODE",{});var GUt=s(H5e);qLr=r(GUt,"__init__()"),GUt.forEach(t),jLr=r(Boo," (throws an error)."),Boo.forEach(t),DLr=i(Zl),Vt=n(Zl,"DIV",{class:!0});var C8=s(Vt);T(wk.$$.fragment,C8),GLr=i(C8),J5e=n(C8,"P",{});var OUt=s(J5e);OLr=r(OUt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OUt.forEach(t),VLr=i(C8),Gc=n(C8,"P",{});var iie=s(Gc);XLr=r(iie,`Note:
Loading a model from its configuration file does `),Y5e=n(iie,"STRONG",{});var VUt=s(Y5e);zLr=r(VUt,"not"),VUt.forEach(t),QLr=r(iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(iie,"A",{href:!0});var XUt=s(_Z);WLr=r(XUt,"from_pretrained()"),XUt.forEach(t),ULr=r(iie," to load the model weights."),iie.forEach(t),HLr=i(C8),T(c3.$$.fragment,C8),C8.forEach(t),JLr=i(Zl),wo=n(Zl,"DIV",{class:!0});var za=s(wo);T(Ak.$$.fragment,za),YLr=i(za),K5e=n(za,"P",{});var zUt=s(K5e);KLr=r(zUt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zUt.forEach(t),ZLr=i(za),En=n(za,"P",{});var w8=s(En);eyr=r(w8,"The model class to instantiate is selected based on the "),Z5e=n(w8,"CODE",{});var QUt=s(Z5e);oyr=r(QUt,"model_type"),QUt.forEach(t),ryr=r(w8,` property of the config object (either
passed as an argument or loaded from `),e0e=n(w8,"CODE",{});var WUt=s(e0e);tyr=r(WUt,"pretrained_model_name_or_path"),WUt.forEach(t),ayr=r(w8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=n(w8,"CODE",{});var UUt=s(o0e);nyr=r(UUt,"pretrained_model_name_or_path"),UUt.forEach(t),syr=r(w8,":"),w8.forEach(t),lyr=i(za),r0e=n(za,"UL",{});var HUt=s(r0e);m3=n(HUt,"LI",{});var Zze=s(m3);t0e=n(Zze,"STRONG",{});var JUt=s(t0e);iyr=r(JUt,"maskformer"),JUt.forEach(t),dyr=r(Zze," \u2014 "),bZ=n(Zze,"A",{href:!0});var YUt=s(bZ);cyr=r(YUt,"MaskFormerForInstanceSegmentation"),YUt.forEach(t),myr=r(Zze," (MaskFormer model)"),Zze.forEach(t),HUt.forEach(t),fyr=i(za),f3=n(za,"P",{});var eQe=s(f3);gyr=r(eQe,"The model is set in evaluation mode by default using "),a0e=n(eQe,"CODE",{});var KUt=s(a0e);hyr=r(KUt,"model.eval()"),KUt.forEach(t),uyr=r(eQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n0e=n(eQe,"CODE",{});var ZUt=s(n0e);pyr=r(ZUt,"model.train()"),ZUt.forEach(t),eQe.forEach(t),_yr=i(za),T(g3.$$.fragment,za),za.forEach(t),Zl.forEach(t),TZe=i(m),Oc=n(m,"H2",{class:!0});var Ioo=s(Oc);h3=n(Ioo,"A",{id:!0,class:!0,href:!0});var eHt=s(h3);s0e=n(eHt,"SPAN",{});var oHt=s(s0e);T(Lk.$$.fragment,oHt),oHt.forEach(t),eHt.forEach(t),byr=i(Ioo),l0e=n(Ioo,"SPAN",{});var rHt=s(l0e);vyr=r(rHt,"TFAutoModel"),rHt.forEach(t),Ioo.forEach(t),MZe=i(m),sr=n(m,"DIV",{class:!0});var ei=s(sr);T(yk.$$.fragment,ei),Fyr=i(ei),Vc=n(ei,"P",{});var die=s(Vc);Tyr=r(die,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vZ=n(die,"A",{href:!0});var tHt=s(vZ);Myr=r(tHt,"from_pretrained()"),tHt.forEach(t),Eyr=r(die," class method or the "),FZ=n(die,"A",{href:!0});var aHt=s(FZ);Cyr=r(aHt,"from_config()"),aHt.forEach(t),wyr=r(die,` class
method.`),die.forEach(t),Ayr=i(ei),xk=n(ei,"P",{});var Noo=s(xk);Lyr=r(Noo,"This class cannot be instantiated directly using "),i0e=n(Noo,"CODE",{});var nHt=s(i0e);yyr=r(nHt,"__init__()"),nHt.forEach(t),xyr=r(Noo," (throws an error)."),Noo.forEach(t),$yr=i(ei),Xt=n(ei,"DIV",{class:!0});var A8=s(Xt);T($k.$$.fragment,A8),kyr=i(A8),d0e=n(A8,"P",{});var sHt=s(d0e);Syr=r(sHt,"Instantiates one of the base model classes of the library from a configuration."),sHt.forEach(t),Ryr=i(A8),Xc=n(A8,"P",{});var cie=s(Xc);Pyr=r(cie,`Note:
Loading a model from its configuration file does `),c0e=n(cie,"STRONG",{});var lHt=s(c0e);Byr=r(lHt,"not"),lHt.forEach(t),Iyr=r(cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(cie,"A",{href:!0});var iHt=s(TZ);Nyr=r(iHt,"from_pretrained()"),iHt.forEach(t),qyr=r(cie," to load the model weights."),cie.forEach(t),jyr=i(A8),T(u3.$$.fragment,A8),A8.forEach(t),Dyr=i(ei),Ir=n(ei,"DIV",{class:!0});var oi=s(Ir);T(kk.$$.fragment,oi),Gyr=i(oi),m0e=n(oi,"P",{});var dHt=s(m0e);Oyr=r(dHt,"Instantiate one of the base model classes of the library from a pretrained model."),dHt.forEach(t),Vyr=i(oi),Cn=n(oi,"P",{});var L8=s(Cn);Xyr=r(L8,"The model class to instantiate is selected based on the "),f0e=n(L8,"CODE",{});var cHt=s(f0e);zyr=r(cHt,"model_type"),cHt.forEach(t),Qyr=r(L8,` property of the config object (either
passed as an argument or loaded from `),g0e=n(L8,"CODE",{});var mHt=s(g0e);Wyr=r(mHt,"pretrained_model_name_or_path"),mHt.forEach(t),Uyr=r(L8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n(L8,"CODE",{});var fHt=s(h0e);Hyr=r(fHt,"pretrained_model_name_or_path"),fHt.forEach(t),Jyr=r(L8,":"),L8.forEach(t),Yyr=i(oi),N=n(oi,"UL",{});var j=s(N);p3=n(j,"LI",{});var oQe=s(p3);u0e=n(oQe,"STRONG",{});var gHt=s(u0e);Kyr=r(gHt,"albert"),gHt.forEach(t),Zyr=r(oQe," \u2014 "),MZ=n(oQe,"A",{href:!0});var hHt=s(MZ);e8r=r(hHt,"TFAlbertModel"),hHt.forEach(t),o8r=r(oQe," (ALBERT model)"),oQe.forEach(t),r8r=i(j),_3=n(j,"LI",{});var rQe=s(_3);p0e=n(rQe,"STRONG",{});var uHt=s(p0e);t8r=r(uHt,"bart"),uHt.forEach(t),a8r=r(rQe," \u2014 "),EZ=n(rQe,"A",{href:!0});var pHt=s(EZ);n8r=r(pHt,"TFBartModel"),pHt.forEach(t),s8r=r(rQe," (BART model)"),rQe.forEach(t),l8r=i(j),b3=n(j,"LI",{});var tQe=s(b3);_0e=n(tQe,"STRONG",{});var _Ht=s(_0e);i8r=r(_Ht,"bert"),_Ht.forEach(t),d8r=r(tQe," \u2014 "),CZ=n(tQe,"A",{href:!0});var bHt=s(CZ);c8r=r(bHt,"TFBertModel"),bHt.forEach(t),m8r=r(tQe," (BERT model)"),tQe.forEach(t),f8r=i(j),v3=n(j,"LI",{});var aQe=s(v3);b0e=n(aQe,"STRONG",{});var vHt=s(b0e);g8r=r(vHt,"blenderbot"),vHt.forEach(t),h8r=r(aQe," \u2014 "),wZ=n(aQe,"A",{href:!0});var FHt=s(wZ);u8r=r(FHt,"TFBlenderbotModel"),FHt.forEach(t),p8r=r(aQe," (Blenderbot model)"),aQe.forEach(t),_8r=i(j),F3=n(j,"LI",{});var nQe=s(F3);v0e=n(nQe,"STRONG",{});var THt=s(v0e);b8r=r(THt,"blenderbot-small"),THt.forEach(t),v8r=r(nQe," \u2014 "),AZ=n(nQe,"A",{href:!0});var MHt=s(AZ);F8r=r(MHt,"TFBlenderbotSmallModel"),MHt.forEach(t),T8r=r(nQe," (BlenderbotSmall model)"),nQe.forEach(t),M8r=i(j),T3=n(j,"LI",{});var sQe=s(T3);F0e=n(sQe,"STRONG",{});var EHt=s(F0e);E8r=r(EHt,"camembert"),EHt.forEach(t),C8r=r(sQe," \u2014 "),LZ=n(sQe,"A",{href:!0});var CHt=s(LZ);w8r=r(CHt,"TFCamembertModel"),CHt.forEach(t),A8r=r(sQe," (CamemBERT model)"),sQe.forEach(t),L8r=i(j),M3=n(j,"LI",{});var lQe=s(M3);T0e=n(lQe,"STRONG",{});var wHt=s(T0e);y8r=r(wHt,"clip"),wHt.forEach(t),x8r=r(lQe," \u2014 "),yZ=n(lQe,"A",{href:!0});var AHt=s(yZ);$8r=r(AHt,"TFCLIPModel"),AHt.forEach(t),k8r=r(lQe," (CLIP model)"),lQe.forEach(t),S8r=i(j),E3=n(j,"LI",{});var iQe=s(E3);M0e=n(iQe,"STRONG",{});var LHt=s(M0e);R8r=r(LHt,"convbert"),LHt.forEach(t),P8r=r(iQe," \u2014 "),xZ=n(iQe,"A",{href:!0});var yHt=s(xZ);B8r=r(yHt,"TFConvBertModel"),yHt.forEach(t),I8r=r(iQe," (ConvBERT model)"),iQe.forEach(t),N8r=i(j),C3=n(j,"LI",{});var dQe=s(C3);E0e=n(dQe,"STRONG",{});var xHt=s(E0e);q8r=r(xHt,"convnext"),xHt.forEach(t),j8r=r(dQe," \u2014 "),$Z=n(dQe,"A",{href:!0});var $Ht=s($Z);D8r=r($Ht,"TFConvNextModel"),$Ht.forEach(t),G8r=r(dQe," (ConvNeXT model)"),dQe.forEach(t),O8r=i(j),w3=n(j,"LI",{});var cQe=s(w3);C0e=n(cQe,"STRONG",{});var kHt=s(C0e);V8r=r(kHt,"ctrl"),kHt.forEach(t),X8r=r(cQe," \u2014 "),kZ=n(cQe,"A",{href:!0});var SHt=s(kZ);z8r=r(SHt,"TFCTRLModel"),SHt.forEach(t),Q8r=r(cQe," (CTRL model)"),cQe.forEach(t),W8r=i(j),A3=n(j,"LI",{});var mQe=s(A3);w0e=n(mQe,"STRONG",{});var RHt=s(w0e);U8r=r(RHt,"data2vec-vision"),RHt.forEach(t),H8r=r(mQe," \u2014 "),SZ=n(mQe,"A",{href:!0});var PHt=s(SZ);J8r=r(PHt,"TFData2VecVisionModel"),PHt.forEach(t),Y8r=r(mQe," (Data2VecVision model)"),mQe.forEach(t),K8r=i(j),L3=n(j,"LI",{});var fQe=s(L3);A0e=n(fQe,"STRONG",{});var BHt=s(A0e);Z8r=r(BHt,"deberta"),BHt.forEach(t),e9r=r(fQe," \u2014 "),RZ=n(fQe,"A",{href:!0});var IHt=s(RZ);o9r=r(IHt,"TFDebertaModel"),IHt.forEach(t),r9r=r(fQe," (DeBERTa model)"),fQe.forEach(t),t9r=i(j),y3=n(j,"LI",{});var gQe=s(y3);L0e=n(gQe,"STRONG",{});var NHt=s(L0e);a9r=r(NHt,"deberta-v2"),NHt.forEach(t),n9r=r(gQe," \u2014 "),PZ=n(gQe,"A",{href:!0});var qHt=s(PZ);s9r=r(qHt,"TFDebertaV2Model"),qHt.forEach(t),l9r=r(gQe," (DeBERTa-v2 model)"),gQe.forEach(t),i9r=i(j),x3=n(j,"LI",{});var hQe=s(x3);y0e=n(hQe,"STRONG",{});var jHt=s(y0e);d9r=r(jHt,"deit"),jHt.forEach(t),c9r=r(hQe," \u2014 "),BZ=n(hQe,"A",{href:!0});var DHt=s(BZ);m9r=r(DHt,"TFDeiTModel"),DHt.forEach(t),f9r=r(hQe," (DeiT model)"),hQe.forEach(t),g9r=i(j),$3=n(j,"LI",{});var uQe=s($3);x0e=n(uQe,"STRONG",{});var GHt=s(x0e);h9r=r(GHt,"distilbert"),GHt.forEach(t),u9r=r(uQe," \u2014 "),IZ=n(uQe,"A",{href:!0});var OHt=s(IZ);p9r=r(OHt,"TFDistilBertModel"),OHt.forEach(t),_9r=r(uQe," (DistilBERT model)"),uQe.forEach(t),b9r=i(j),k3=n(j,"LI",{});var pQe=s(k3);$0e=n(pQe,"STRONG",{});var VHt=s($0e);v9r=r(VHt,"dpr"),VHt.forEach(t),F9r=r(pQe," \u2014 "),NZ=n(pQe,"A",{href:!0});var XHt=s(NZ);T9r=r(XHt,"TFDPRQuestionEncoder"),XHt.forEach(t),M9r=r(pQe," (DPR model)"),pQe.forEach(t),E9r=i(j),S3=n(j,"LI",{});var _Qe=s(S3);k0e=n(_Qe,"STRONG",{});var zHt=s(k0e);C9r=r(zHt,"electra"),zHt.forEach(t),w9r=r(_Qe," \u2014 "),qZ=n(_Qe,"A",{href:!0});var QHt=s(qZ);A9r=r(QHt,"TFElectraModel"),QHt.forEach(t),L9r=r(_Qe," (ELECTRA model)"),_Qe.forEach(t),y9r=i(j),R3=n(j,"LI",{});var bQe=s(R3);S0e=n(bQe,"STRONG",{});var WHt=s(S0e);x9r=r(WHt,"flaubert"),WHt.forEach(t),$9r=r(bQe," \u2014 "),jZ=n(bQe,"A",{href:!0});var UHt=s(jZ);k9r=r(UHt,"TFFlaubertModel"),UHt.forEach(t),S9r=r(bQe," (FlauBERT model)"),bQe.forEach(t),R9r=i(j),vl=n(j,"LI",{});var $B=s(vl);R0e=n($B,"STRONG",{});var HHt=s(R0e);P9r=r(HHt,"funnel"),HHt.forEach(t),B9r=r($B," \u2014 "),DZ=n($B,"A",{href:!0});var JHt=s(DZ);I9r=r(JHt,"TFFunnelModel"),JHt.forEach(t),N9r=r($B," or "),GZ=n($B,"A",{href:!0});var YHt=s(GZ);q9r=r(YHt,"TFFunnelBaseModel"),YHt.forEach(t),j9r=r($B," (Funnel Transformer model)"),$B.forEach(t),D9r=i(j),P3=n(j,"LI",{});var vQe=s(P3);P0e=n(vQe,"STRONG",{});var KHt=s(P0e);G9r=r(KHt,"gpt2"),KHt.forEach(t),O9r=r(vQe," \u2014 "),OZ=n(vQe,"A",{href:!0});var ZHt=s(OZ);V9r=r(ZHt,"TFGPT2Model"),ZHt.forEach(t),X9r=r(vQe," (OpenAI GPT-2 model)"),vQe.forEach(t),z9r=i(j),B3=n(j,"LI",{});var FQe=s(B3);B0e=n(FQe,"STRONG",{});var eJt=s(B0e);Q9r=r(eJt,"gptj"),eJt.forEach(t),W9r=r(FQe," \u2014 "),VZ=n(FQe,"A",{href:!0});var oJt=s(VZ);U9r=r(oJt,"TFGPTJModel"),oJt.forEach(t),H9r=r(FQe," (GPT-J model)"),FQe.forEach(t),J9r=i(j),I3=n(j,"LI",{});var TQe=s(I3);I0e=n(TQe,"STRONG",{});var rJt=s(I0e);Y9r=r(rJt,"hubert"),rJt.forEach(t),K9r=r(TQe," \u2014 "),XZ=n(TQe,"A",{href:!0});var tJt=s(XZ);Z9r=r(tJt,"TFHubertModel"),tJt.forEach(t),exr=r(TQe," (Hubert model)"),TQe.forEach(t),oxr=i(j),N3=n(j,"LI",{});var MQe=s(N3);N0e=n(MQe,"STRONG",{});var aJt=s(N0e);rxr=r(aJt,"layoutlm"),aJt.forEach(t),txr=r(MQe," \u2014 "),zZ=n(MQe,"A",{href:!0});var nJt=s(zZ);axr=r(nJt,"TFLayoutLMModel"),nJt.forEach(t),nxr=r(MQe," (LayoutLM model)"),MQe.forEach(t),sxr=i(j),q3=n(j,"LI",{});var EQe=s(q3);q0e=n(EQe,"STRONG",{});var sJt=s(q0e);lxr=r(sJt,"layoutlmv3"),sJt.forEach(t),ixr=r(EQe," \u2014 "),QZ=n(EQe,"A",{href:!0});var lJt=s(QZ);dxr=r(lJt,"TFLayoutLMv3Model"),lJt.forEach(t),cxr=r(EQe," (LayoutLMv3 model)"),EQe.forEach(t),mxr=i(j),j3=n(j,"LI",{});var CQe=s(j3);j0e=n(CQe,"STRONG",{});var iJt=s(j0e);fxr=r(iJt,"led"),iJt.forEach(t),gxr=r(CQe," \u2014 "),WZ=n(CQe,"A",{href:!0});var dJt=s(WZ);hxr=r(dJt,"TFLEDModel"),dJt.forEach(t),uxr=r(CQe," (LED model)"),CQe.forEach(t),pxr=i(j),D3=n(j,"LI",{});var wQe=s(D3);D0e=n(wQe,"STRONG",{});var cJt=s(D0e);_xr=r(cJt,"longformer"),cJt.forEach(t),bxr=r(wQe," \u2014 "),UZ=n(wQe,"A",{href:!0});var mJt=s(UZ);vxr=r(mJt,"TFLongformerModel"),mJt.forEach(t),Fxr=r(wQe," (Longformer model)"),wQe.forEach(t),Txr=i(j),G3=n(j,"LI",{});var AQe=s(G3);G0e=n(AQe,"STRONG",{});var fJt=s(G0e);Mxr=r(fJt,"lxmert"),fJt.forEach(t),Exr=r(AQe," \u2014 "),HZ=n(AQe,"A",{href:!0});var gJt=s(HZ);Cxr=r(gJt,"TFLxmertModel"),gJt.forEach(t),wxr=r(AQe," (LXMERT model)"),AQe.forEach(t),Axr=i(j),O3=n(j,"LI",{});var LQe=s(O3);O0e=n(LQe,"STRONG",{});var hJt=s(O0e);Lxr=r(hJt,"marian"),hJt.forEach(t),yxr=r(LQe," \u2014 "),JZ=n(LQe,"A",{href:!0});var uJt=s(JZ);xxr=r(uJt,"TFMarianModel"),uJt.forEach(t),$xr=r(LQe," (Marian model)"),LQe.forEach(t),kxr=i(j),V3=n(j,"LI",{});var yQe=s(V3);V0e=n(yQe,"STRONG",{});var pJt=s(V0e);Sxr=r(pJt,"mbart"),pJt.forEach(t),Rxr=r(yQe," \u2014 "),YZ=n(yQe,"A",{href:!0});var _Jt=s(YZ);Pxr=r(_Jt,"TFMBartModel"),_Jt.forEach(t),Bxr=r(yQe," (mBART model)"),yQe.forEach(t),Ixr=i(j),X3=n(j,"LI",{});var xQe=s(X3);X0e=n(xQe,"STRONG",{});var bJt=s(X0e);Nxr=r(bJt,"mobilebert"),bJt.forEach(t),qxr=r(xQe," \u2014 "),KZ=n(xQe,"A",{href:!0});var vJt=s(KZ);jxr=r(vJt,"TFMobileBertModel"),vJt.forEach(t),Dxr=r(xQe," (MobileBERT model)"),xQe.forEach(t),Gxr=i(j),z3=n(j,"LI",{});var $Qe=s(z3);z0e=n($Qe,"STRONG",{});var FJt=s(z0e);Oxr=r(FJt,"mobilevit"),FJt.forEach(t),Vxr=r($Qe," \u2014 "),ZZ=n($Qe,"A",{href:!0});var TJt=s(ZZ);Xxr=r(TJt,"TFMobileViTModel"),TJt.forEach(t),zxr=r($Qe," (MobileViT model)"),$Qe.forEach(t),Qxr=i(j),Q3=n(j,"LI",{});var kQe=s(Q3);Q0e=n(kQe,"STRONG",{});var MJt=s(Q0e);Wxr=r(MJt,"mpnet"),MJt.forEach(t),Uxr=r(kQe," \u2014 "),eee=n(kQe,"A",{href:!0});var EJt=s(eee);Hxr=r(EJt,"TFMPNetModel"),EJt.forEach(t),Jxr=r(kQe," (MPNet model)"),kQe.forEach(t),Yxr=i(j),W3=n(j,"LI",{});var SQe=s(W3);W0e=n(SQe,"STRONG",{});var CJt=s(W0e);Kxr=r(CJt,"mt5"),CJt.forEach(t),Zxr=r(SQe," \u2014 "),oee=n(SQe,"A",{href:!0});var wJt=s(oee);e$r=r(wJt,"TFMT5Model"),wJt.forEach(t),o$r=r(SQe," (MT5 model)"),SQe.forEach(t),r$r=i(j),U3=n(j,"LI",{});var RQe=s(U3);U0e=n(RQe,"STRONG",{});var AJt=s(U0e);t$r=r(AJt,"openai-gpt"),AJt.forEach(t),a$r=r(RQe," \u2014 "),ree=n(RQe,"A",{href:!0});var LJt=s(ree);n$r=r(LJt,"TFOpenAIGPTModel"),LJt.forEach(t),s$r=r(RQe," (OpenAI GPT model)"),RQe.forEach(t),l$r=i(j),H3=n(j,"LI",{});var PQe=s(H3);H0e=n(PQe,"STRONG",{});var yJt=s(H0e);i$r=r(yJt,"opt"),yJt.forEach(t),d$r=r(PQe," \u2014 "),tee=n(PQe,"A",{href:!0});var xJt=s(tee);c$r=r(xJt,"TFOPTModel"),xJt.forEach(t),m$r=r(PQe," (OPT model)"),PQe.forEach(t),f$r=i(j),J3=n(j,"LI",{});var BQe=s(J3);J0e=n(BQe,"STRONG",{});var $Jt=s(J0e);g$r=r($Jt,"pegasus"),$Jt.forEach(t),h$r=r(BQe," \u2014 "),aee=n(BQe,"A",{href:!0});var kJt=s(aee);u$r=r(kJt,"TFPegasusModel"),kJt.forEach(t),p$r=r(BQe," (Pegasus model)"),BQe.forEach(t),_$r=i(j),Y3=n(j,"LI",{});var IQe=s(Y3);Y0e=n(IQe,"STRONG",{});var SJt=s(Y0e);b$r=r(SJt,"regnet"),SJt.forEach(t),v$r=r(IQe," \u2014 "),nee=n(IQe,"A",{href:!0});var RJt=s(nee);F$r=r(RJt,"TFRegNetModel"),RJt.forEach(t),T$r=r(IQe," (RegNet model)"),IQe.forEach(t),M$r=i(j),K3=n(j,"LI",{});var NQe=s(K3);K0e=n(NQe,"STRONG",{});var PJt=s(K0e);E$r=r(PJt,"rembert"),PJt.forEach(t),C$r=r(NQe," \u2014 "),see=n(NQe,"A",{href:!0});var BJt=s(see);w$r=r(BJt,"TFRemBertModel"),BJt.forEach(t),A$r=r(NQe," (RemBERT model)"),NQe.forEach(t),L$r=i(j),Z3=n(j,"LI",{});var qQe=s(Z3);Z0e=n(qQe,"STRONG",{});var IJt=s(Z0e);y$r=r(IJt,"resnet"),IJt.forEach(t),x$r=r(qQe," \u2014 "),lee=n(qQe,"A",{href:!0});var NJt=s(lee);$$r=r(NJt,"TFResNetModel"),NJt.forEach(t),k$r=r(qQe," (ResNet model)"),qQe.forEach(t),S$r=i(j),e5=n(j,"LI",{});var jQe=s(e5);ewe=n(jQe,"STRONG",{});var qJt=s(ewe);R$r=r(qJt,"roberta"),qJt.forEach(t),P$r=r(jQe," \u2014 "),iee=n(jQe,"A",{href:!0});var jJt=s(iee);B$r=r(jJt,"TFRobertaModel"),jJt.forEach(t),I$r=r(jQe," (RoBERTa model)"),jQe.forEach(t),N$r=i(j),o5=n(j,"LI",{});var DQe=s(o5);owe=n(DQe,"STRONG",{});var DJt=s(owe);q$r=r(DJt,"roformer"),DJt.forEach(t),j$r=r(DQe," \u2014 "),dee=n(DQe,"A",{href:!0});var GJt=s(dee);D$r=r(GJt,"TFRoFormerModel"),GJt.forEach(t),G$r=r(DQe," (RoFormer model)"),DQe.forEach(t),O$r=i(j),r5=n(j,"LI",{});var GQe=s(r5);rwe=n(GQe,"STRONG",{});var OJt=s(rwe);V$r=r(OJt,"segformer"),OJt.forEach(t),X$r=r(GQe," \u2014 "),cee=n(GQe,"A",{href:!0});var VJt=s(cee);z$r=r(VJt,"TFSegformerModel"),VJt.forEach(t),Q$r=r(GQe," (SegFormer model)"),GQe.forEach(t),W$r=i(j),t5=n(j,"LI",{});var OQe=s(t5);twe=n(OQe,"STRONG",{});var XJt=s(twe);U$r=r(XJt,"speech_to_text"),XJt.forEach(t),H$r=r(OQe," \u2014 "),mee=n(OQe,"A",{href:!0});var zJt=s(mee);J$r=r(zJt,"TFSpeech2TextModel"),zJt.forEach(t),Y$r=r(OQe," (Speech2Text model)"),OQe.forEach(t),K$r=i(j),a5=n(j,"LI",{});var VQe=s(a5);awe=n(VQe,"STRONG",{});var QJt=s(awe);Z$r=r(QJt,"swin"),QJt.forEach(t),ekr=r(VQe," \u2014 "),fee=n(VQe,"A",{href:!0});var WJt=s(fee);okr=r(WJt,"TFSwinModel"),WJt.forEach(t),rkr=r(VQe," (Swin Transformer model)"),VQe.forEach(t),tkr=i(j),n5=n(j,"LI",{});var XQe=s(n5);nwe=n(XQe,"STRONG",{});var UJt=s(nwe);akr=r(UJt,"t5"),UJt.forEach(t),nkr=r(XQe," \u2014 "),gee=n(XQe,"A",{href:!0});var HJt=s(gee);skr=r(HJt,"TFT5Model"),HJt.forEach(t),lkr=r(XQe," (T5 model)"),XQe.forEach(t),ikr=i(j),s5=n(j,"LI",{});var zQe=s(s5);swe=n(zQe,"STRONG",{});var JJt=s(swe);dkr=r(JJt,"tapas"),JJt.forEach(t),ckr=r(zQe," \u2014 "),hee=n(zQe,"A",{href:!0});var YJt=s(hee);mkr=r(YJt,"TFTapasModel"),YJt.forEach(t),fkr=r(zQe," (TAPAS model)"),zQe.forEach(t),gkr=i(j),l5=n(j,"LI",{});var QQe=s(l5);lwe=n(QQe,"STRONG",{});var KJt=s(lwe);hkr=r(KJt,"transfo-xl"),KJt.forEach(t),ukr=r(QQe," \u2014 "),uee=n(QQe,"A",{href:!0});var ZJt=s(uee);pkr=r(ZJt,"TFTransfoXLModel"),ZJt.forEach(t),_kr=r(QQe," (Transformer-XL model)"),QQe.forEach(t),bkr=i(j),i5=n(j,"LI",{});var WQe=s(i5);iwe=n(WQe,"STRONG",{});var eYt=s(iwe);vkr=r(eYt,"vit"),eYt.forEach(t),Fkr=r(WQe," \u2014 "),pee=n(WQe,"A",{href:!0});var oYt=s(pee);Tkr=r(oYt,"TFViTModel"),oYt.forEach(t),Mkr=r(WQe," (ViT model)"),WQe.forEach(t),Ekr=i(j),d5=n(j,"LI",{});var UQe=s(d5);dwe=n(UQe,"STRONG",{});var rYt=s(dwe);Ckr=r(rYt,"vit_mae"),rYt.forEach(t),wkr=r(UQe," \u2014 "),_ee=n(UQe,"A",{href:!0});var tYt=s(_ee);Akr=r(tYt,"TFViTMAEModel"),tYt.forEach(t),Lkr=r(UQe," (ViTMAE model)"),UQe.forEach(t),ykr=i(j),c5=n(j,"LI",{});var HQe=s(c5);cwe=n(HQe,"STRONG",{});var aYt=s(cwe);xkr=r(aYt,"wav2vec2"),aYt.forEach(t),$kr=r(HQe," \u2014 "),bee=n(HQe,"A",{href:!0});var nYt=s(bee);kkr=r(nYt,"TFWav2Vec2Model"),nYt.forEach(t),Skr=r(HQe," (Wav2Vec2 model)"),HQe.forEach(t),Rkr=i(j),m5=n(j,"LI",{});var JQe=s(m5);mwe=n(JQe,"STRONG",{});var sYt=s(mwe);Pkr=r(sYt,"xglm"),sYt.forEach(t),Bkr=r(JQe," \u2014 "),vee=n(JQe,"A",{href:!0});var lYt=s(vee);Ikr=r(lYt,"TFXGLMModel"),lYt.forEach(t),Nkr=r(JQe," (XGLM model)"),JQe.forEach(t),qkr=i(j),f5=n(j,"LI",{});var YQe=s(f5);fwe=n(YQe,"STRONG",{});var iYt=s(fwe);jkr=r(iYt,"xlm"),iYt.forEach(t),Dkr=r(YQe," \u2014 "),Fee=n(YQe,"A",{href:!0});var dYt=s(Fee);Gkr=r(dYt,"TFXLMModel"),dYt.forEach(t),Okr=r(YQe," (XLM model)"),YQe.forEach(t),Vkr=i(j),g5=n(j,"LI",{});var KQe=s(g5);gwe=n(KQe,"STRONG",{});var cYt=s(gwe);Xkr=r(cYt,"xlm-roberta"),cYt.forEach(t),zkr=r(KQe," \u2014 "),Tee=n(KQe,"A",{href:!0});var mYt=s(Tee);Qkr=r(mYt,"TFXLMRobertaModel"),mYt.forEach(t),Wkr=r(KQe," (XLM-RoBERTa model)"),KQe.forEach(t),Ukr=i(j),h5=n(j,"LI",{});var ZQe=s(h5);hwe=n(ZQe,"STRONG",{});var fYt=s(hwe);Hkr=r(fYt,"xlnet"),fYt.forEach(t),Jkr=r(ZQe," \u2014 "),Mee=n(ZQe,"A",{href:!0});var gYt=s(Mee);Ykr=r(gYt,"TFXLNetModel"),gYt.forEach(t),Kkr=r(ZQe," (XLNet model)"),ZQe.forEach(t),j.forEach(t),Zkr=i(oi),T(u5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),EZe=i(m),zc=n(m,"H2",{class:!0});var qoo=s(zc);p5=n(qoo,"A",{id:!0,class:!0,href:!0});var hYt=s(p5);uwe=n(hYt,"SPAN",{});var uYt=s(uwe);T(Sk.$$.fragment,uYt),uYt.forEach(t),hYt.forEach(t),eSr=i(qoo),pwe=n(qoo,"SPAN",{});var pYt=s(pwe);oSr=r(pYt,"TFAutoModelForPreTraining"),pYt.forEach(t),qoo.forEach(t),CZe=i(m),lr=n(m,"DIV",{class:!0});var ri=s(lr);T(Rk.$$.fragment,ri),rSr=i(ri),Qc=n(ri,"P",{});var mie=s(Qc);tSr=r(mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Eee=n(mie,"A",{href:!0});var _Yt=s(Eee);aSr=r(_Yt,"from_pretrained()"),_Yt.forEach(t),nSr=r(mie," class method or the "),Cee=n(mie,"A",{href:!0});var bYt=s(Cee);sSr=r(bYt,"from_config()"),bYt.forEach(t),lSr=r(mie,` class
method.`),mie.forEach(t),iSr=i(ri),Pk=n(ri,"P",{});var joo=s(Pk);dSr=r(joo,"This class cannot be instantiated directly using "),_we=n(joo,"CODE",{});var vYt=s(_we);cSr=r(vYt,"__init__()"),vYt.forEach(t),mSr=r(joo," (throws an error)."),joo.forEach(t),fSr=i(ri),zt=n(ri,"DIV",{class:!0});var y8=s(zt);T(Bk.$$.fragment,y8),gSr=i(y8),bwe=n(y8,"P",{});var FYt=s(bwe);hSr=r(FYt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),FYt.forEach(t),uSr=i(y8),Wc=n(y8,"P",{});var fie=s(Wc);pSr=r(fie,`Note:
Loading a model from its configuration file does `),vwe=n(fie,"STRONG",{});var TYt=s(vwe);_Sr=r(TYt,"not"),TYt.forEach(t),bSr=r(fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=n(fie,"A",{href:!0});var MYt=s(wee);vSr=r(MYt,"from_pretrained()"),MYt.forEach(t),FSr=r(fie," to load the model weights."),fie.forEach(t),TSr=i(y8),T(_5.$$.fragment,y8),y8.forEach(t),MSr=i(ri),Nr=n(ri,"DIV",{class:!0});var ti=s(Nr);T(Ik.$$.fragment,ti),ESr=i(ti),Fwe=n(ti,"P",{});var EYt=s(Fwe);CSr=r(EYt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EYt.forEach(t),wSr=i(ti),wn=n(ti,"P",{});var x8=s(wn);ASr=r(x8,"The model class to instantiate is selected based on the "),Twe=n(x8,"CODE",{});var CYt=s(Twe);LSr=r(CYt,"model_type"),CYt.forEach(t),ySr=r(x8,` property of the config object (either
passed as an argument or loaded from `),Mwe=n(x8,"CODE",{});var wYt=s(Mwe);xSr=r(wYt,"pretrained_model_name_or_path"),wYt.forEach(t),$Sr=r(x8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=n(x8,"CODE",{});var AYt=s(Ewe);kSr=r(AYt,"pretrained_model_name_or_path"),AYt.forEach(t),SSr=r(x8,":"),x8.forEach(t),RSr=i(ti),se=n(ti,"UL",{});var le=s(se);b5=n(le,"LI",{});var eWe=s(b5);Cwe=n(eWe,"STRONG",{});var LYt=s(Cwe);PSr=r(LYt,"albert"),LYt.forEach(t),BSr=r(eWe," \u2014 "),Aee=n(eWe,"A",{href:!0});var yYt=s(Aee);ISr=r(yYt,"TFAlbertForPreTraining"),yYt.forEach(t),NSr=r(eWe," (ALBERT model)"),eWe.forEach(t),qSr=i(le),v5=n(le,"LI",{});var oWe=s(v5);wwe=n(oWe,"STRONG",{});var xYt=s(wwe);jSr=r(xYt,"bart"),xYt.forEach(t),DSr=r(oWe," \u2014 "),Lee=n(oWe,"A",{href:!0});var $Yt=s(Lee);GSr=r($Yt,"TFBartForConditionalGeneration"),$Yt.forEach(t),OSr=r(oWe," (BART model)"),oWe.forEach(t),VSr=i(le),F5=n(le,"LI",{});var rWe=s(F5);Awe=n(rWe,"STRONG",{});var kYt=s(Awe);XSr=r(kYt,"bert"),kYt.forEach(t),zSr=r(rWe," \u2014 "),yee=n(rWe,"A",{href:!0});var SYt=s(yee);QSr=r(SYt,"TFBertForPreTraining"),SYt.forEach(t),WSr=r(rWe," (BERT model)"),rWe.forEach(t),USr=i(le),T5=n(le,"LI",{});var tWe=s(T5);Lwe=n(tWe,"STRONG",{});var RYt=s(Lwe);HSr=r(RYt,"camembert"),RYt.forEach(t),JSr=r(tWe," \u2014 "),xee=n(tWe,"A",{href:!0});var PYt=s(xee);YSr=r(PYt,"TFCamembertForMaskedLM"),PYt.forEach(t),KSr=r(tWe," (CamemBERT model)"),tWe.forEach(t),ZSr=i(le),M5=n(le,"LI",{});var aWe=s(M5);ywe=n(aWe,"STRONG",{});var BYt=s(ywe);eRr=r(BYt,"ctrl"),BYt.forEach(t),oRr=r(aWe," \u2014 "),$ee=n(aWe,"A",{href:!0});var IYt=s($ee);rRr=r(IYt,"TFCTRLLMHeadModel"),IYt.forEach(t),tRr=r(aWe," (CTRL model)"),aWe.forEach(t),aRr=i(le),E5=n(le,"LI",{});var nWe=s(E5);xwe=n(nWe,"STRONG",{});var NYt=s(xwe);nRr=r(NYt,"distilbert"),NYt.forEach(t),sRr=r(nWe," \u2014 "),kee=n(nWe,"A",{href:!0});var qYt=s(kee);lRr=r(qYt,"TFDistilBertForMaskedLM"),qYt.forEach(t),iRr=r(nWe," (DistilBERT model)"),nWe.forEach(t),dRr=i(le),C5=n(le,"LI",{});var sWe=s(C5);$we=n(sWe,"STRONG",{});var jYt=s($we);cRr=r(jYt,"electra"),jYt.forEach(t),mRr=r(sWe," \u2014 "),See=n(sWe,"A",{href:!0});var DYt=s(See);fRr=r(DYt,"TFElectraForPreTraining"),DYt.forEach(t),gRr=r(sWe," (ELECTRA model)"),sWe.forEach(t),hRr=i(le),w5=n(le,"LI",{});var lWe=s(w5);kwe=n(lWe,"STRONG",{});var GYt=s(kwe);uRr=r(GYt,"flaubert"),GYt.forEach(t),pRr=r(lWe," \u2014 "),Ree=n(lWe,"A",{href:!0});var OYt=s(Ree);_Rr=r(OYt,"TFFlaubertWithLMHeadModel"),OYt.forEach(t),bRr=r(lWe," (FlauBERT model)"),lWe.forEach(t),vRr=i(le),A5=n(le,"LI",{});var iWe=s(A5);Swe=n(iWe,"STRONG",{});var VYt=s(Swe);FRr=r(VYt,"funnel"),VYt.forEach(t),TRr=r(iWe," \u2014 "),Pee=n(iWe,"A",{href:!0});var XYt=s(Pee);MRr=r(XYt,"TFFunnelForPreTraining"),XYt.forEach(t),ERr=r(iWe," (Funnel Transformer model)"),iWe.forEach(t),CRr=i(le),L5=n(le,"LI",{});var dWe=s(L5);Rwe=n(dWe,"STRONG",{});var zYt=s(Rwe);wRr=r(zYt,"gpt2"),zYt.forEach(t),ARr=r(dWe," \u2014 "),Bee=n(dWe,"A",{href:!0});var QYt=s(Bee);LRr=r(QYt,"TFGPT2LMHeadModel"),QYt.forEach(t),yRr=r(dWe," (OpenAI GPT-2 model)"),dWe.forEach(t),xRr=i(le),y5=n(le,"LI",{});var cWe=s(y5);Pwe=n(cWe,"STRONG",{});var WYt=s(Pwe);$Rr=r(WYt,"layoutlm"),WYt.forEach(t),kRr=r(cWe," \u2014 "),Iee=n(cWe,"A",{href:!0});var UYt=s(Iee);SRr=r(UYt,"TFLayoutLMForMaskedLM"),UYt.forEach(t),RRr=r(cWe," (LayoutLM model)"),cWe.forEach(t),PRr=i(le),x5=n(le,"LI",{});var mWe=s(x5);Bwe=n(mWe,"STRONG",{});var HYt=s(Bwe);BRr=r(HYt,"lxmert"),HYt.forEach(t),IRr=r(mWe," \u2014 "),Nee=n(mWe,"A",{href:!0});var JYt=s(Nee);NRr=r(JYt,"TFLxmertForPreTraining"),JYt.forEach(t),qRr=r(mWe," (LXMERT model)"),mWe.forEach(t),jRr=i(le),$5=n(le,"LI",{});var fWe=s($5);Iwe=n(fWe,"STRONG",{});var YYt=s(Iwe);DRr=r(YYt,"mobilebert"),YYt.forEach(t),GRr=r(fWe," \u2014 "),qee=n(fWe,"A",{href:!0});var KYt=s(qee);ORr=r(KYt,"TFMobileBertForPreTraining"),KYt.forEach(t),VRr=r(fWe," (MobileBERT model)"),fWe.forEach(t),XRr=i(le),k5=n(le,"LI",{});var gWe=s(k5);Nwe=n(gWe,"STRONG",{});var ZYt=s(Nwe);zRr=r(ZYt,"mpnet"),ZYt.forEach(t),QRr=r(gWe," \u2014 "),jee=n(gWe,"A",{href:!0});var eKt=s(jee);WRr=r(eKt,"TFMPNetForMaskedLM"),eKt.forEach(t),URr=r(gWe," (MPNet model)"),gWe.forEach(t),HRr=i(le),S5=n(le,"LI",{});var hWe=s(S5);qwe=n(hWe,"STRONG",{});var oKt=s(qwe);JRr=r(oKt,"openai-gpt"),oKt.forEach(t),YRr=r(hWe," \u2014 "),Dee=n(hWe,"A",{href:!0});var rKt=s(Dee);KRr=r(rKt,"TFOpenAIGPTLMHeadModel"),rKt.forEach(t),ZRr=r(hWe," (OpenAI GPT model)"),hWe.forEach(t),ePr=i(le),R5=n(le,"LI",{});var uWe=s(R5);jwe=n(uWe,"STRONG",{});var tKt=s(jwe);oPr=r(tKt,"roberta"),tKt.forEach(t),rPr=r(uWe," \u2014 "),Gee=n(uWe,"A",{href:!0});var aKt=s(Gee);tPr=r(aKt,"TFRobertaForMaskedLM"),aKt.forEach(t),aPr=r(uWe," (RoBERTa model)"),uWe.forEach(t),nPr=i(le),P5=n(le,"LI",{});var pWe=s(P5);Dwe=n(pWe,"STRONG",{});var nKt=s(Dwe);sPr=r(nKt,"t5"),nKt.forEach(t),lPr=r(pWe," \u2014 "),Oee=n(pWe,"A",{href:!0});var sKt=s(Oee);iPr=r(sKt,"TFT5ForConditionalGeneration"),sKt.forEach(t),dPr=r(pWe," (T5 model)"),pWe.forEach(t),cPr=i(le),B5=n(le,"LI",{});var _We=s(B5);Gwe=n(_We,"STRONG",{});var lKt=s(Gwe);mPr=r(lKt,"tapas"),lKt.forEach(t),fPr=r(_We," \u2014 "),Vee=n(_We,"A",{href:!0});var iKt=s(Vee);gPr=r(iKt,"TFTapasForMaskedLM"),iKt.forEach(t),hPr=r(_We," (TAPAS model)"),_We.forEach(t),uPr=i(le),I5=n(le,"LI",{});var bWe=s(I5);Owe=n(bWe,"STRONG",{});var dKt=s(Owe);pPr=r(dKt,"transfo-xl"),dKt.forEach(t),_Pr=r(bWe," \u2014 "),Xee=n(bWe,"A",{href:!0});var cKt=s(Xee);bPr=r(cKt,"TFTransfoXLLMHeadModel"),cKt.forEach(t),vPr=r(bWe," (Transformer-XL model)"),bWe.forEach(t),FPr=i(le),N5=n(le,"LI",{});var vWe=s(N5);Vwe=n(vWe,"STRONG",{});var mKt=s(Vwe);TPr=r(mKt,"vit_mae"),mKt.forEach(t),MPr=r(vWe," \u2014 "),zee=n(vWe,"A",{href:!0});var fKt=s(zee);EPr=r(fKt,"TFViTMAEForPreTraining"),fKt.forEach(t),CPr=r(vWe," (ViTMAE model)"),vWe.forEach(t),wPr=i(le),q5=n(le,"LI",{});var FWe=s(q5);Xwe=n(FWe,"STRONG",{});var gKt=s(Xwe);APr=r(gKt,"xlm"),gKt.forEach(t),LPr=r(FWe," \u2014 "),Qee=n(FWe,"A",{href:!0});var hKt=s(Qee);yPr=r(hKt,"TFXLMWithLMHeadModel"),hKt.forEach(t),xPr=r(FWe," (XLM model)"),FWe.forEach(t),$Pr=i(le),j5=n(le,"LI",{});var TWe=s(j5);zwe=n(TWe,"STRONG",{});var uKt=s(zwe);kPr=r(uKt,"xlm-roberta"),uKt.forEach(t),SPr=r(TWe," \u2014 "),Wee=n(TWe,"A",{href:!0});var pKt=s(Wee);RPr=r(pKt,"TFXLMRobertaForMaskedLM"),pKt.forEach(t),PPr=r(TWe," (XLM-RoBERTa model)"),TWe.forEach(t),BPr=i(le),D5=n(le,"LI",{});var MWe=s(D5);Qwe=n(MWe,"STRONG",{});var _Kt=s(Qwe);IPr=r(_Kt,"xlnet"),_Kt.forEach(t),NPr=r(MWe," \u2014 "),Uee=n(MWe,"A",{href:!0});var bKt=s(Uee);qPr=r(bKt,"TFXLNetLMHeadModel"),bKt.forEach(t),jPr=r(MWe," (XLNet model)"),MWe.forEach(t),le.forEach(t),DPr=i(ti),T(G5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),wZe=i(m),Uc=n(m,"H2",{class:!0});var Doo=s(Uc);O5=n(Doo,"A",{id:!0,class:!0,href:!0});var vKt=s(O5);Wwe=n(vKt,"SPAN",{});var FKt=s(Wwe);T(Nk.$$.fragment,FKt),FKt.forEach(t),vKt.forEach(t),GPr=i(Doo),Uwe=n(Doo,"SPAN",{});var TKt=s(Uwe);OPr=r(TKt,"TFAutoModelForCausalLM"),TKt.forEach(t),Doo.forEach(t),AZe=i(m),ir=n(m,"DIV",{class:!0});var ai=s(ir);T(qk.$$.fragment,ai),VPr=i(ai),Hc=n(ai,"P",{});var gie=s(Hc);XPr=r(gie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hee=n(gie,"A",{href:!0});var MKt=s(Hee);zPr=r(MKt,"from_pretrained()"),MKt.forEach(t),QPr=r(gie," class method or the "),Jee=n(gie,"A",{href:!0});var EKt=s(Jee);WPr=r(EKt,"from_config()"),EKt.forEach(t),UPr=r(gie,` class
method.`),gie.forEach(t),HPr=i(ai),jk=n(ai,"P",{});var Goo=s(jk);JPr=r(Goo,"This class cannot be instantiated directly using "),Hwe=n(Goo,"CODE",{});var CKt=s(Hwe);YPr=r(CKt,"__init__()"),CKt.forEach(t),KPr=r(Goo," (throws an error)."),Goo.forEach(t),ZPr=i(ai),Qt=n(ai,"DIV",{class:!0});var $8=s(Qt);T(Dk.$$.fragment,$8),eBr=i($8),Jwe=n($8,"P",{});var wKt=s(Jwe);oBr=r(wKt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wKt.forEach(t),rBr=i($8),Jc=n($8,"P",{});var hie=s(Jc);tBr=r(hie,`Note:
Loading a model from its configuration file does `),Ywe=n(hie,"STRONG",{});var AKt=s(Ywe);aBr=r(AKt,"not"),AKt.forEach(t),nBr=r(hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(hie,"A",{href:!0});var LKt=s(Yee);sBr=r(LKt,"from_pretrained()"),LKt.forEach(t),lBr=r(hie," to load the model weights."),hie.forEach(t),iBr=i($8),T(V5.$$.fragment,$8),$8.forEach(t),dBr=i(ai),qr=n(ai,"DIV",{class:!0});var ni=s(qr);T(Gk.$$.fragment,ni),cBr=i(ni),Kwe=n(ni,"P",{});var yKt=s(Kwe);mBr=r(yKt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yKt.forEach(t),fBr=i(ni),An=n(ni,"P",{});var k8=s(An);gBr=r(k8,"The model class to instantiate is selected based on the "),Zwe=n(k8,"CODE",{});var xKt=s(Zwe);hBr=r(xKt,"model_type"),xKt.forEach(t),uBr=r(k8,` property of the config object (either
passed as an argument or loaded from `),eAe=n(k8,"CODE",{});var $Kt=s(eAe);pBr=r($Kt,"pretrained_model_name_or_path"),$Kt.forEach(t),_Br=r(k8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=n(k8,"CODE",{});var kKt=s(oAe);bBr=r(kKt,"pretrained_model_name_or_path"),kKt.forEach(t),vBr=r(k8,":"),k8.forEach(t),FBr=i(ni),Me=n(ni,"UL",{});var Ce=s(Me);X5=n(Ce,"LI",{});var EWe=s(X5);rAe=n(EWe,"STRONG",{});var SKt=s(rAe);TBr=r(SKt,"bert"),SKt.forEach(t),MBr=r(EWe," \u2014 "),Kee=n(EWe,"A",{href:!0});var RKt=s(Kee);EBr=r(RKt,"TFBertLMHeadModel"),RKt.forEach(t),CBr=r(EWe," (BERT model)"),EWe.forEach(t),wBr=i(Ce),z5=n(Ce,"LI",{});var CWe=s(z5);tAe=n(CWe,"STRONG",{});var PKt=s(tAe);ABr=r(PKt,"camembert"),PKt.forEach(t),LBr=r(CWe," \u2014 "),Zee=n(CWe,"A",{href:!0});var BKt=s(Zee);yBr=r(BKt,"TFCamembertForCausalLM"),BKt.forEach(t),xBr=r(CWe," (CamemBERT model)"),CWe.forEach(t),$Br=i(Ce),Q5=n(Ce,"LI",{});var wWe=s(Q5);aAe=n(wWe,"STRONG",{});var IKt=s(aAe);kBr=r(IKt,"ctrl"),IKt.forEach(t),SBr=r(wWe," \u2014 "),eoe=n(wWe,"A",{href:!0});var NKt=s(eoe);RBr=r(NKt,"TFCTRLLMHeadModel"),NKt.forEach(t),PBr=r(wWe," (CTRL model)"),wWe.forEach(t),BBr=i(Ce),W5=n(Ce,"LI",{});var AWe=s(W5);nAe=n(AWe,"STRONG",{});var qKt=s(nAe);IBr=r(qKt,"gpt2"),qKt.forEach(t),NBr=r(AWe," \u2014 "),ooe=n(AWe,"A",{href:!0});var jKt=s(ooe);qBr=r(jKt,"TFGPT2LMHeadModel"),jKt.forEach(t),jBr=r(AWe," (OpenAI GPT-2 model)"),AWe.forEach(t),DBr=i(Ce),U5=n(Ce,"LI",{});var LWe=s(U5);sAe=n(LWe,"STRONG",{});var DKt=s(sAe);GBr=r(DKt,"gptj"),DKt.forEach(t),OBr=r(LWe," \u2014 "),roe=n(LWe,"A",{href:!0});var GKt=s(roe);VBr=r(GKt,"TFGPTJForCausalLM"),GKt.forEach(t),XBr=r(LWe," (GPT-J model)"),LWe.forEach(t),zBr=i(Ce),H5=n(Ce,"LI",{});var yWe=s(H5);lAe=n(yWe,"STRONG",{});var OKt=s(lAe);QBr=r(OKt,"openai-gpt"),OKt.forEach(t),WBr=r(yWe," \u2014 "),toe=n(yWe,"A",{href:!0});var VKt=s(toe);UBr=r(VKt,"TFOpenAIGPTLMHeadModel"),VKt.forEach(t),HBr=r(yWe," (OpenAI GPT model)"),yWe.forEach(t),JBr=i(Ce),J5=n(Ce,"LI",{});var xWe=s(J5);iAe=n(xWe,"STRONG",{});var XKt=s(iAe);YBr=r(XKt,"opt"),XKt.forEach(t),KBr=r(xWe," \u2014 "),aoe=n(xWe,"A",{href:!0});var zKt=s(aoe);ZBr=r(zKt,"TFOPTForCausalLM"),zKt.forEach(t),eIr=r(xWe," (OPT model)"),xWe.forEach(t),oIr=i(Ce),Y5=n(Ce,"LI",{});var $We=s(Y5);dAe=n($We,"STRONG",{});var QKt=s(dAe);rIr=r(QKt,"rembert"),QKt.forEach(t),tIr=r($We," \u2014 "),noe=n($We,"A",{href:!0});var WKt=s(noe);aIr=r(WKt,"TFRemBertForCausalLM"),WKt.forEach(t),nIr=r($We," (RemBERT model)"),$We.forEach(t),sIr=i(Ce),K5=n(Ce,"LI",{});var kWe=s(K5);cAe=n(kWe,"STRONG",{});var UKt=s(cAe);lIr=r(UKt,"roberta"),UKt.forEach(t),iIr=r(kWe," \u2014 "),soe=n(kWe,"A",{href:!0});var HKt=s(soe);dIr=r(HKt,"TFRobertaForCausalLM"),HKt.forEach(t),cIr=r(kWe," (RoBERTa model)"),kWe.forEach(t),mIr=i(Ce),Z5=n(Ce,"LI",{});var SWe=s(Z5);mAe=n(SWe,"STRONG",{});var JKt=s(mAe);fIr=r(JKt,"roformer"),JKt.forEach(t),gIr=r(SWe," \u2014 "),loe=n(SWe,"A",{href:!0});var YKt=s(loe);hIr=r(YKt,"TFRoFormerForCausalLM"),YKt.forEach(t),uIr=r(SWe," (RoFormer model)"),SWe.forEach(t),pIr=i(Ce),e0=n(Ce,"LI",{});var RWe=s(e0);fAe=n(RWe,"STRONG",{});var KKt=s(fAe);_Ir=r(KKt,"transfo-xl"),KKt.forEach(t),bIr=r(RWe," \u2014 "),ioe=n(RWe,"A",{href:!0});var ZKt=s(ioe);vIr=r(ZKt,"TFTransfoXLLMHeadModel"),ZKt.forEach(t),FIr=r(RWe," (Transformer-XL model)"),RWe.forEach(t),TIr=i(Ce),o0=n(Ce,"LI",{});var PWe=s(o0);gAe=n(PWe,"STRONG",{});var eZt=s(gAe);MIr=r(eZt,"xglm"),eZt.forEach(t),EIr=r(PWe," \u2014 "),doe=n(PWe,"A",{href:!0});var oZt=s(doe);CIr=r(oZt,"TFXGLMForCausalLM"),oZt.forEach(t),wIr=r(PWe," (XGLM model)"),PWe.forEach(t),AIr=i(Ce),r0=n(Ce,"LI",{});var BWe=s(r0);hAe=n(BWe,"STRONG",{});var rZt=s(hAe);LIr=r(rZt,"xlm"),rZt.forEach(t),yIr=r(BWe," \u2014 "),coe=n(BWe,"A",{href:!0});var tZt=s(coe);xIr=r(tZt,"TFXLMWithLMHeadModel"),tZt.forEach(t),$Ir=r(BWe," (XLM model)"),BWe.forEach(t),kIr=i(Ce),t0=n(Ce,"LI",{});var IWe=s(t0);uAe=n(IWe,"STRONG",{});var aZt=s(uAe);SIr=r(aZt,"xlnet"),aZt.forEach(t),RIr=r(IWe," \u2014 "),moe=n(IWe,"A",{href:!0});var nZt=s(moe);PIr=r(nZt,"TFXLNetLMHeadModel"),nZt.forEach(t),BIr=r(IWe," (XLNet model)"),IWe.forEach(t),Ce.forEach(t),IIr=i(ni),T(a0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),LZe=i(m),Yc=n(m,"H2",{class:!0});var Ooo=s(Yc);n0=n(Ooo,"A",{id:!0,class:!0,href:!0});var sZt=s(n0);pAe=n(sZt,"SPAN",{});var lZt=s(pAe);T(Ok.$$.fragment,lZt),lZt.forEach(t),sZt.forEach(t),NIr=i(Ooo),_Ae=n(Ooo,"SPAN",{});var iZt=s(_Ae);qIr=r(iZt,"TFAutoModelForImageClassification"),iZt.forEach(t),Ooo.forEach(t),yZe=i(m),dr=n(m,"DIV",{class:!0});var si=s(dr);T(Vk.$$.fragment,si),jIr=i(si),Kc=n(si,"P",{});var uie=s(Kc);DIr=r(uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),foe=n(uie,"A",{href:!0});var dZt=s(foe);GIr=r(dZt,"from_pretrained()"),dZt.forEach(t),OIr=r(uie," class method or the "),goe=n(uie,"A",{href:!0});var cZt=s(goe);VIr=r(cZt,"from_config()"),cZt.forEach(t),XIr=r(uie,` class
method.`),uie.forEach(t),zIr=i(si),Xk=n(si,"P",{});var Voo=s(Xk);QIr=r(Voo,"This class cannot be instantiated directly using "),bAe=n(Voo,"CODE",{});var mZt=s(bAe);WIr=r(mZt,"__init__()"),mZt.forEach(t),UIr=r(Voo," (throws an error)."),Voo.forEach(t),HIr=i(si),Wt=n(si,"DIV",{class:!0});var S8=s(Wt);T(zk.$$.fragment,S8),JIr=i(S8),vAe=n(S8,"P",{});var fZt=s(vAe);YIr=r(fZt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fZt.forEach(t),KIr=i(S8),Zc=n(S8,"P",{});var pie=s(Zc);ZIr=r(pie,`Note:
Loading a model from its configuration file does `),FAe=n(pie,"STRONG",{});var gZt=s(FAe);eNr=r(gZt,"not"),gZt.forEach(t),oNr=r(pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(pie,"A",{href:!0});var hZt=s(hoe);rNr=r(hZt,"from_pretrained()"),hZt.forEach(t),tNr=r(pie," to load the model weights."),pie.forEach(t),aNr=i(S8),T(s0.$$.fragment,S8),S8.forEach(t),nNr=i(si),jr=n(si,"DIV",{class:!0});var li=s(jr);T(Qk.$$.fragment,li),sNr=i(li),TAe=n(li,"P",{});var uZt=s(TAe);lNr=r(uZt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uZt.forEach(t),iNr=i(li),Ln=n(li,"P",{});var R8=s(Ln);dNr=r(R8,"The model class to instantiate is selected based on the "),MAe=n(R8,"CODE",{});var pZt=s(MAe);cNr=r(pZt,"model_type"),pZt.forEach(t),mNr=r(R8,` property of the config object (either
passed as an argument or loaded from `),EAe=n(R8,"CODE",{});var _Zt=s(EAe);fNr=r(_Zt,"pretrained_model_name_or_path"),_Zt.forEach(t),gNr=r(R8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CAe=n(R8,"CODE",{});var bZt=s(CAe);hNr=r(bZt,"pretrained_model_name_or_path"),bZt.forEach(t),uNr=r(R8,":"),R8.forEach(t),pNr=i(li),Be=n(li,"UL",{});var We=s(Be);l0=n(We,"LI",{});var NWe=s(l0);wAe=n(NWe,"STRONG",{});var vZt=s(wAe);_Nr=r(vZt,"convnext"),vZt.forEach(t),bNr=r(NWe," \u2014 "),uoe=n(NWe,"A",{href:!0});var FZt=s(uoe);vNr=r(FZt,"TFConvNextForImageClassification"),FZt.forEach(t),FNr=r(NWe," (ConvNeXT model)"),NWe.forEach(t),TNr=i(We),i0=n(We,"LI",{});var qWe=s(i0);AAe=n(qWe,"STRONG",{});var TZt=s(AAe);MNr=r(TZt,"data2vec-vision"),TZt.forEach(t),ENr=r(qWe," \u2014 "),poe=n(qWe,"A",{href:!0});var MZt=s(poe);CNr=r(MZt,"TFData2VecVisionForImageClassification"),MZt.forEach(t),wNr=r(qWe," (Data2VecVision model)"),qWe.forEach(t),ANr=i(We),Fl=n(We,"LI",{});var kB=s(Fl);LAe=n(kB,"STRONG",{});var EZt=s(LAe);LNr=r(EZt,"deit"),EZt.forEach(t),yNr=r(kB," \u2014 "),_oe=n(kB,"A",{href:!0});var CZt=s(_oe);xNr=r(CZt,"TFDeiTForImageClassification"),CZt.forEach(t),$Nr=r(kB," or "),boe=n(kB,"A",{href:!0});var wZt=s(boe);kNr=r(wZt,"TFDeiTForImageClassificationWithTeacher"),wZt.forEach(t),SNr=r(kB," (DeiT model)"),kB.forEach(t),RNr=i(We),d0=n(We,"LI",{});var jWe=s(d0);yAe=n(jWe,"STRONG",{});var AZt=s(yAe);PNr=r(AZt,"mobilevit"),AZt.forEach(t),BNr=r(jWe," \u2014 "),voe=n(jWe,"A",{href:!0});var LZt=s(voe);INr=r(LZt,"TFMobileViTForImageClassification"),LZt.forEach(t),NNr=r(jWe," (MobileViT model)"),jWe.forEach(t),qNr=i(We),c0=n(We,"LI",{});var DWe=s(c0);xAe=n(DWe,"STRONG",{});var yZt=s(xAe);jNr=r(yZt,"regnet"),yZt.forEach(t),DNr=r(DWe," \u2014 "),Foe=n(DWe,"A",{href:!0});var xZt=s(Foe);GNr=r(xZt,"TFRegNetForImageClassification"),xZt.forEach(t),ONr=r(DWe," (RegNet model)"),DWe.forEach(t),VNr=i(We),m0=n(We,"LI",{});var GWe=s(m0);$Ae=n(GWe,"STRONG",{});var $Zt=s($Ae);XNr=r($Zt,"resnet"),$Zt.forEach(t),zNr=r(GWe," \u2014 "),Toe=n(GWe,"A",{href:!0});var kZt=s(Toe);QNr=r(kZt,"TFResNetForImageClassification"),kZt.forEach(t),WNr=r(GWe," (ResNet model)"),GWe.forEach(t),UNr=i(We),f0=n(We,"LI",{});var OWe=s(f0);kAe=n(OWe,"STRONG",{});var SZt=s(kAe);HNr=r(SZt,"segformer"),SZt.forEach(t),JNr=r(OWe," \u2014 "),Moe=n(OWe,"A",{href:!0});var RZt=s(Moe);YNr=r(RZt,"TFSegformerForImageClassification"),RZt.forEach(t),KNr=r(OWe," (SegFormer model)"),OWe.forEach(t),ZNr=i(We),g0=n(We,"LI",{});var VWe=s(g0);SAe=n(VWe,"STRONG",{});var PZt=s(SAe);eqr=r(PZt,"swin"),PZt.forEach(t),oqr=r(VWe," \u2014 "),Eoe=n(VWe,"A",{href:!0});var BZt=s(Eoe);rqr=r(BZt,"TFSwinForImageClassification"),BZt.forEach(t),tqr=r(VWe," (Swin Transformer model)"),VWe.forEach(t),aqr=i(We),h0=n(We,"LI",{});var XWe=s(h0);RAe=n(XWe,"STRONG",{});var IZt=s(RAe);nqr=r(IZt,"vit"),IZt.forEach(t),sqr=r(XWe," \u2014 "),Coe=n(XWe,"A",{href:!0});var NZt=s(Coe);lqr=r(NZt,"TFViTForImageClassification"),NZt.forEach(t),iqr=r(XWe," (ViT model)"),XWe.forEach(t),We.forEach(t),dqr=i(li),T(u0.$$.fragment,li),li.forEach(t),si.forEach(t),xZe=i(m),em=n(m,"H2",{class:!0});var Xoo=s(em);p0=n(Xoo,"A",{id:!0,class:!0,href:!0});var qZt=s(p0);PAe=n(qZt,"SPAN",{});var jZt=s(PAe);T(Wk.$$.fragment,jZt),jZt.forEach(t),qZt.forEach(t),cqr=i(Xoo),BAe=n(Xoo,"SPAN",{});var DZt=s(BAe);mqr=r(DZt,"TFAutoModelForSemanticSegmentation"),DZt.forEach(t),Xoo.forEach(t),$Ze=i(m),cr=n(m,"DIV",{class:!0});var ii=s(cr);T(Uk.$$.fragment,ii),fqr=i(ii),om=n(ii,"P",{});var _ie=s(om);gqr=r(_ie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),woe=n(_ie,"A",{href:!0});var GZt=s(woe);hqr=r(GZt,"from_pretrained()"),GZt.forEach(t),uqr=r(_ie," class method or the "),Aoe=n(_ie,"A",{href:!0});var OZt=s(Aoe);pqr=r(OZt,"from_config()"),OZt.forEach(t),_qr=r(_ie,` class
method.`),_ie.forEach(t),bqr=i(ii),Hk=n(ii,"P",{});var zoo=s(Hk);vqr=r(zoo,"This class cannot be instantiated directly using "),IAe=n(zoo,"CODE",{});var VZt=s(IAe);Fqr=r(VZt,"__init__()"),VZt.forEach(t),Tqr=r(zoo," (throws an error)."),zoo.forEach(t),Mqr=i(ii),Ut=n(ii,"DIV",{class:!0});var P8=s(Ut);T(Jk.$$.fragment,P8),Eqr=i(P8),NAe=n(P8,"P",{});var XZt=s(NAe);Cqr=r(XZt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),XZt.forEach(t),wqr=i(P8),rm=n(P8,"P",{});var bie=s(rm);Aqr=r(bie,`Note:
Loading a model from its configuration file does `),qAe=n(bie,"STRONG",{});var zZt=s(qAe);Lqr=r(zZt,"not"),zZt.forEach(t),yqr=r(bie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=n(bie,"A",{href:!0});var QZt=s(Loe);xqr=r(QZt,"from_pretrained()"),QZt.forEach(t),$qr=r(bie," to load the model weights."),bie.forEach(t),kqr=i(P8),T(_0.$$.fragment,P8),P8.forEach(t),Sqr=i(ii),Dr=n(ii,"DIV",{class:!0});var di=s(Dr);T(Yk.$$.fragment,di),Rqr=i(di),jAe=n(di,"P",{});var WZt=s(jAe);Pqr=r(WZt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),WZt.forEach(t),Bqr=i(di),yn=n(di,"P",{});var B8=s(yn);Iqr=r(B8,"The model class to instantiate is selected based on the "),DAe=n(B8,"CODE",{});var UZt=s(DAe);Nqr=r(UZt,"model_type"),UZt.forEach(t),qqr=r(B8,` property of the config object (either
passed as an argument or loaded from `),GAe=n(B8,"CODE",{});var HZt=s(GAe);jqr=r(HZt,"pretrained_model_name_or_path"),HZt.forEach(t),Dqr=r(B8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=n(B8,"CODE",{});var JZt=s(OAe);Gqr=r(JZt,"pretrained_model_name_or_path"),JZt.forEach(t),Oqr=r(B8,":"),B8.forEach(t),Vqr=i(di),tm=n(di,"UL",{});var vie=s(tm);b0=n(vie,"LI",{});var zWe=s(b0);VAe=n(zWe,"STRONG",{});var YZt=s(VAe);Xqr=r(YZt,"data2vec-vision"),YZt.forEach(t),zqr=r(zWe," \u2014 "),yoe=n(zWe,"A",{href:!0});var KZt=s(yoe);Qqr=r(KZt,"TFData2VecVisionForSemanticSegmentation"),KZt.forEach(t),Wqr=r(zWe," (Data2VecVision model)"),zWe.forEach(t),Uqr=i(vie),v0=n(vie,"LI",{});var QWe=s(v0);XAe=n(QWe,"STRONG",{});var ZZt=s(XAe);Hqr=r(ZZt,"mobilevit"),ZZt.forEach(t),Jqr=r(QWe," \u2014 "),xoe=n(QWe,"A",{href:!0});var eea=s(xoe);Yqr=r(eea,"TFMobileViTForSemanticSegmentation"),eea.forEach(t),Kqr=r(QWe," (MobileViT model)"),QWe.forEach(t),Zqr=i(vie),F0=n(vie,"LI",{});var WWe=s(F0);zAe=n(WWe,"STRONG",{});var oea=s(zAe);ejr=r(oea,"segformer"),oea.forEach(t),ojr=r(WWe," \u2014 "),$oe=n(WWe,"A",{href:!0});var rea=s($oe);rjr=r(rea,"TFSegformerForSemanticSegmentation"),rea.forEach(t),tjr=r(WWe," (SegFormer model)"),WWe.forEach(t),vie.forEach(t),ajr=i(di),T(T0.$$.fragment,di),di.forEach(t),ii.forEach(t),kZe=i(m),am=n(m,"H2",{class:!0});var Qoo=s(am);M0=n(Qoo,"A",{id:!0,class:!0,href:!0});var tea=s(M0);QAe=n(tea,"SPAN",{});var aea=s(QAe);T(Kk.$$.fragment,aea),aea.forEach(t),tea.forEach(t),njr=i(Qoo),WAe=n(Qoo,"SPAN",{});var nea=s(WAe);sjr=r(nea,"TFAutoModelForMaskedLM"),nea.forEach(t),Qoo.forEach(t),SZe=i(m),mr=n(m,"DIV",{class:!0});var ci=s(mr);T(Zk.$$.fragment,ci),ljr=i(ci),nm=n(ci,"P",{});var Fie=s(nm);ijr=r(Fie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),koe=n(Fie,"A",{href:!0});var sea=s(koe);djr=r(sea,"from_pretrained()"),sea.forEach(t),cjr=r(Fie," class method or the "),Soe=n(Fie,"A",{href:!0});var lea=s(Soe);mjr=r(lea,"from_config()"),lea.forEach(t),fjr=r(Fie,` class
method.`),Fie.forEach(t),gjr=i(ci),eS=n(ci,"P",{});var Woo=s(eS);hjr=r(Woo,"This class cannot be instantiated directly using "),UAe=n(Woo,"CODE",{});var iea=s(UAe);ujr=r(iea,"__init__()"),iea.forEach(t),pjr=r(Woo," (throws an error)."),Woo.forEach(t),_jr=i(ci),Ht=n(ci,"DIV",{class:!0});var I8=s(Ht);T(oS.$$.fragment,I8),bjr=i(I8),HAe=n(I8,"P",{});var dea=s(HAe);vjr=r(dea,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dea.forEach(t),Fjr=i(I8),sm=n(I8,"P",{});var Tie=s(sm);Tjr=r(Tie,`Note:
Loading a model from its configuration file does `),JAe=n(Tie,"STRONG",{});var cea=s(JAe);Mjr=r(cea,"not"),cea.forEach(t),Ejr=r(Tie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(Tie,"A",{href:!0});var mea=s(Roe);Cjr=r(mea,"from_pretrained()"),mea.forEach(t),wjr=r(Tie," to load the model weights."),Tie.forEach(t),Ajr=i(I8),T(E0.$$.fragment,I8),I8.forEach(t),Ljr=i(ci),Gr=n(ci,"DIV",{class:!0});var mi=s(Gr);T(rS.$$.fragment,mi),yjr=i(mi),YAe=n(mi,"P",{});var fea=s(YAe);xjr=r(fea,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fea.forEach(t),$jr=i(mi),xn=n(mi,"P",{});var N8=s(xn);kjr=r(N8,"The model class to instantiate is selected based on the "),KAe=n(N8,"CODE",{});var gea=s(KAe);Sjr=r(gea,"model_type"),gea.forEach(t),Rjr=r(N8,` property of the config object (either
passed as an argument or loaded from `),ZAe=n(N8,"CODE",{});var hea=s(ZAe);Pjr=r(hea,"pretrained_model_name_or_path"),hea.forEach(t),Bjr=r(N8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=n(N8,"CODE",{});var uea=s(e6e);Ijr=r(uea,"pretrained_model_name_or_path"),uea.forEach(t),Njr=r(N8,":"),N8.forEach(t),qjr=i(mi),fe=n(mi,"UL",{});var _e=s(fe);C0=n(_e,"LI",{});var UWe=s(C0);o6e=n(UWe,"STRONG",{});var pea=s(o6e);jjr=r(pea,"albert"),pea.forEach(t),Djr=r(UWe," \u2014 "),Poe=n(UWe,"A",{href:!0});var _ea=s(Poe);Gjr=r(_ea,"TFAlbertForMaskedLM"),_ea.forEach(t),Ojr=r(UWe," (ALBERT model)"),UWe.forEach(t),Vjr=i(_e),w0=n(_e,"LI",{});var HWe=s(w0);r6e=n(HWe,"STRONG",{});var bea=s(r6e);Xjr=r(bea,"bert"),bea.forEach(t),zjr=r(HWe," \u2014 "),Boe=n(HWe,"A",{href:!0});var vea=s(Boe);Qjr=r(vea,"TFBertForMaskedLM"),vea.forEach(t),Wjr=r(HWe," (BERT model)"),HWe.forEach(t),Ujr=i(_e),A0=n(_e,"LI",{});var JWe=s(A0);t6e=n(JWe,"STRONG",{});var Fea=s(t6e);Hjr=r(Fea,"camembert"),Fea.forEach(t),Jjr=r(JWe," \u2014 "),Ioe=n(JWe,"A",{href:!0});var Tea=s(Ioe);Yjr=r(Tea,"TFCamembertForMaskedLM"),Tea.forEach(t),Kjr=r(JWe," (CamemBERT model)"),JWe.forEach(t),Zjr=i(_e),L0=n(_e,"LI",{});var YWe=s(L0);a6e=n(YWe,"STRONG",{});var Mea=s(a6e);eDr=r(Mea,"convbert"),Mea.forEach(t),oDr=r(YWe," \u2014 "),Noe=n(YWe,"A",{href:!0});var Eea=s(Noe);rDr=r(Eea,"TFConvBertForMaskedLM"),Eea.forEach(t),tDr=r(YWe," (ConvBERT model)"),YWe.forEach(t),aDr=i(_e),y0=n(_e,"LI",{});var KWe=s(y0);n6e=n(KWe,"STRONG",{});var Cea=s(n6e);nDr=r(Cea,"deberta"),Cea.forEach(t),sDr=r(KWe," \u2014 "),qoe=n(KWe,"A",{href:!0});var wea=s(qoe);lDr=r(wea,"TFDebertaForMaskedLM"),wea.forEach(t),iDr=r(KWe," (DeBERTa model)"),KWe.forEach(t),dDr=i(_e),x0=n(_e,"LI",{});var ZWe=s(x0);s6e=n(ZWe,"STRONG",{});var Aea=s(s6e);cDr=r(Aea,"deberta-v2"),Aea.forEach(t),mDr=r(ZWe," \u2014 "),joe=n(ZWe,"A",{href:!0});var Lea=s(joe);fDr=r(Lea,"TFDebertaV2ForMaskedLM"),Lea.forEach(t),gDr=r(ZWe," (DeBERTa-v2 model)"),ZWe.forEach(t),hDr=i(_e),$0=n(_e,"LI",{});var eUe=s($0);l6e=n(eUe,"STRONG",{});var yea=s(l6e);uDr=r(yea,"distilbert"),yea.forEach(t),pDr=r(eUe," \u2014 "),Doe=n(eUe,"A",{href:!0});var xea=s(Doe);_Dr=r(xea,"TFDistilBertForMaskedLM"),xea.forEach(t),bDr=r(eUe," (DistilBERT model)"),eUe.forEach(t),vDr=i(_e),k0=n(_e,"LI",{});var oUe=s(k0);i6e=n(oUe,"STRONG",{});var $ea=s(i6e);FDr=r($ea,"electra"),$ea.forEach(t),TDr=r(oUe," \u2014 "),Goe=n(oUe,"A",{href:!0});var kea=s(Goe);MDr=r(kea,"TFElectraForMaskedLM"),kea.forEach(t),EDr=r(oUe," (ELECTRA model)"),oUe.forEach(t),CDr=i(_e),S0=n(_e,"LI",{});var rUe=s(S0);d6e=n(rUe,"STRONG",{});var Sea=s(d6e);wDr=r(Sea,"flaubert"),Sea.forEach(t),ADr=r(rUe," \u2014 "),Ooe=n(rUe,"A",{href:!0});var Rea=s(Ooe);LDr=r(Rea,"TFFlaubertWithLMHeadModel"),Rea.forEach(t),yDr=r(rUe," (FlauBERT model)"),rUe.forEach(t),xDr=i(_e),R0=n(_e,"LI",{});var tUe=s(R0);c6e=n(tUe,"STRONG",{});var Pea=s(c6e);$Dr=r(Pea,"funnel"),Pea.forEach(t),kDr=r(tUe," \u2014 "),Voe=n(tUe,"A",{href:!0});var Bea=s(Voe);SDr=r(Bea,"TFFunnelForMaskedLM"),Bea.forEach(t),RDr=r(tUe," (Funnel Transformer model)"),tUe.forEach(t),PDr=i(_e),P0=n(_e,"LI",{});var aUe=s(P0);m6e=n(aUe,"STRONG",{});var Iea=s(m6e);BDr=r(Iea,"layoutlm"),Iea.forEach(t),IDr=r(aUe," \u2014 "),Xoe=n(aUe,"A",{href:!0});var Nea=s(Xoe);NDr=r(Nea,"TFLayoutLMForMaskedLM"),Nea.forEach(t),qDr=r(aUe," (LayoutLM model)"),aUe.forEach(t),jDr=i(_e),B0=n(_e,"LI",{});var nUe=s(B0);f6e=n(nUe,"STRONG",{});var qea=s(f6e);DDr=r(qea,"longformer"),qea.forEach(t),GDr=r(nUe," \u2014 "),zoe=n(nUe,"A",{href:!0});var jea=s(zoe);ODr=r(jea,"TFLongformerForMaskedLM"),jea.forEach(t),VDr=r(nUe," (Longformer model)"),nUe.forEach(t),XDr=i(_e),I0=n(_e,"LI",{});var sUe=s(I0);g6e=n(sUe,"STRONG",{});var Dea=s(g6e);zDr=r(Dea,"mobilebert"),Dea.forEach(t),QDr=r(sUe," \u2014 "),Qoe=n(sUe,"A",{href:!0});var Gea=s(Qoe);WDr=r(Gea,"TFMobileBertForMaskedLM"),Gea.forEach(t),UDr=r(sUe," (MobileBERT model)"),sUe.forEach(t),HDr=i(_e),N0=n(_e,"LI",{});var lUe=s(N0);h6e=n(lUe,"STRONG",{});var Oea=s(h6e);JDr=r(Oea,"mpnet"),Oea.forEach(t),YDr=r(lUe," \u2014 "),Woe=n(lUe,"A",{href:!0});var Vea=s(Woe);KDr=r(Vea,"TFMPNetForMaskedLM"),Vea.forEach(t),ZDr=r(lUe," (MPNet model)"),lUe.forEach(t),eGr=i(_e),q0=n(_e,"LI",{});var iUe=s(q0);u6e=n(iUe,"STRONG",{});var Xea=s(u6e);oGr=r(Xea,"rembert"),Xea.forEach(t),rGr=r(iUe," \u2014 "),Uoe=n(iUe,"A",{href:!0});var zea=s(Uoe);tGr=r(zea,"TFRemBertForMaskedLM"),zea.forEach(t),aGr=r(iUe," (RemBERT model)"),iUe.forEach(t),nGr=i(_e),j0=n(_e,"LI",{});var dUe=s(j0);p6e=n(dUe,"STRONG",{});var Qea=s(p6e);sGr=r(Qea,"roberta"),Qea.forEach(t),lGr=r(dUe," \u2014 "),Hoe=n(dUe,"A",{href:!0});var Wea=s(Hoe);iGr=r(Wea,"TFRobertaForMaskedLM"),Wea.forEach(t),dGr=r(dUe," (RoBERTa model)"),dUe.forEach(t),cGr=i(_e),D0=n(_e,"LI",{});var cUe=s(D0);_6e=n(cUe,"STRONG",{});var Uea=s(_6e);mGr=r(Uea,"roformer"),Uea.forEach(t),fGr=r(cUe," \u2014 "),Joe=n(cUe,"A",{href:!0});var Hea=s(Joe);gGr=r(Hea,"TFRoFormerForMaskedLM"),Hea.forEach(t),hGr=r(cUe," (RoFormer model)"),cUe.forEach(t),uGr=i(_e),G0=n(_e,"LI",{});var mUe=s(G0);b6e=n(mUe,"STRONG",{});var Jea=s(b6e);pGr=r(Jea,"tapas"),Jea.forEach(t),_Gr=r(mUe," \u2014 "),Yoe=n(mUe,"A",{href:!0});var Yea=s(Yoe);bGr=r(Yea,"TFTapasForMaskedLM"),Yea.forEach(t),vGr=r(mUe," (TAPAS model)"),mUe.forEach(t),FGr=i(_e),O0=n(_e,"LI",{});var fUe=s(O0);v6e=n(fUe,"STRONG",{});var Kea=s(v6e);TGr=r(Kea,"xlm"),Kea.forEach(t),MGr=r(fUe," \u2014 "),Koe=n(fUe,"A",{href:!0});var Zea=s(Koe);EGr=r(Zea,"TFXLMWithLMHeadModel"),Zea.forEach(t),CGr=r(fUe," (XLM model)"),fUe.forEach(t),wGr=i(_e),V0=n(_e,"LI",{});var gUe=s(V0);F6e=n(gUe,"STRONG",{});var eoa=s(F6e);AGr=r(eoa,"xlm-roberta"),eoa.forEach(t),LGr=r(gUe," \u2014 "),Zoe=n(gUe,"A",{href:!0});var ooa=s(Zoe);yGr=r(ooa,"TFXLMRobertaForMaskedLM"),ooa.forEach(t),xGr=r(gUe," (XLM-RoBERTa model)"),gUe.forEach(t),_e.forEach(t),$Gr=i(mi),T(X0.$$.fragment,mi),mi.forEach(t),ci.forEach(t),RZe=i(m),lm=n(m,"H2",{class:!0});var Uoo=s(lm);z0=n(Uoo,"A",{id:!0,class:!0,href:!0});var roa=s(z0);T6e=n(roa,"SPAN",{});var toa=s(T6e);T(tS.$$.fragment,toa),toa.forEach(t),roa.forEach(t),kGr=i(Uoo),M6e=n(Uoo,"SPAN",{});var aoa=s(M6e);SGr=r(aoa,"TFAutoModelForSeq2SeqLM"),aoa.forEach(t),Uoo.forEach(t),PZe=i(m),fr=n(m,"DIV",{class:!0});var fi=s(fr);T(aS.$$.fragment,fi),RGr=i(fi),im=n(fi,"P",{});var Mie=s(im);PGr=r(Mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ere=n(Mie,"A",{href:!0});var noa=s(ere);BGr=r(noa,"from_pretrained()"),noa.forEach(t),IGr=r(Mie," class method or the "),ore=n(Mie,"A",{href:!0});var soa=s(ore);NGr=r(soa,"from_config()"),soa.forEach(t),qGr=r(Mie,` class
method.`),Mie.forEach(t),jGr=i(fi),nS=n(fi,"P",{});var Hoo=s(nS);DGr=r(Hoo,"This class cannot be instantiated directly using "),E6e=n(Hoo,"CODE",{});var loa=s(E6e);GGr=r(loa,"__init__()"),loa.forEach(t),OGr=r(Hoo," (throws an error)."),Hoo.forEach(t),VGr=i(fi),Jt=n(fi,"DIV",{class:!0});var q8=s(Jt);T(sS.$$.fragment,q8),XGr=i(q8),C6e=n(q8,"P",{});var ioa=s(C6e);zGr=r(ioa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ioa.forEach(t),QGr=i(q8),dm=n(q8,"P",{});var Eie=s(dm);WGr=r(Eie,`Note:
Loading a model from its configuration file does `),w6e=n(Eie,"STRONG",{});var doa=s(w6e);UGr=r(doa,"not"),doa.forEach(t),HGr=r(Eie,` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=n(Eie,"A",{href:!0});var coa=s(rre);JGr=r(coa,"from_pretrained()"),coa.forEach(t),YGr=r(Eie," to load the model weights."),Eie.forEach(t),KGr=i(q8),T(Q0.$$.fragment,q8),q8.forEach(t),ZGr=i(fi),Or=n(fi,"DIV",{class:!0});var gi=s(Or);T(lS.$$.fragment,gi),eOr=i(gi),A6e=n(gi,"P",{});var moa=s(A6e);oOr=r(moa,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),moa.forEach(t),rOr=i(gi),$n=n(gi,"P",{});var j8=s($n);tOr=r(j8,"The model class to instantiate is selected based on the "),L6e=n(j8,"CODE",{});var foa=s(L6e);aOr=r(foa,"model_type"),foa.forEach(t),nOr=r(j8,` property of the config object (either
passed as an argument or loaded from `),y6e=n(j8,"CODE",{});var goa=s(y6e);sOr=r(goa,"pretrained_model_name_or_path"),goa.forEach(t),lOr=r(j8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(j8,"CODE",{});var hoa=s(x6e);iOr=r(hoa,"pretrained_model_name_or_path"),hoa.forEach(t),dOr=r(j8,":"),j8.forEach(t),cOr=i(gi),ye=n(gi,"UL",{});var Ne=s(ye);W0=n(Ne,"LI",{});var hUe=s(W0);$6e=n(hUe,"STRONG",{});var uoa=s($6e);mOr=r(uoa,"bart"),uoa.forEach(t),fOr=r(hUe," \u2014 "),tre=n(hUe,"A",{href:!0});var poa=s(tre);gOr=r(poa,"TFBartForConditionalGeneration"),poa.forEach(t),hOr=r(hUe," (BART model)"),hUe.forEach(t),uOr=i(Ne),U0=n(Ne,"LI",{});var uUe=s(U0);k6e=n(uUe,"STRONG",{});var _oa=s(k6e);pOr=r(_oa,"blenderbot"),_oa.forEach(t),_Or=r(uUe," \u2014 "),are=n(uUe,"A",{href:!0});var boa=s(are);bOr=r(boa,"TFBlenderbotForConditionalGeneration"),boa.forEach(t),vOr=r(uUe," (Blenderbot model)"),uUe.forEach(t),FOr=i(Ne),H0=n(Ne,"LI",{});var pUe=s(H0);S6e=n(pUe,"STRONG",{});var voa=s(S6e);TOr=r(voa,"blenderbot-small"),voa.forEach(t),MOr=r(pUe," \u2014 "),nre=n(pUe,"A",{href:!0});var Foa=s(nre);EOr=r(Foa,"TFBlenderbotSmallForConditionalGeneration"),Foa.forEach(t),COr=r(pUe," (BlenderbotSmall model)"),pUe.forEach(t),wOr=i(Ne),J0=n(Ne,"LI",{});var _Ue=s(J0);R6e=n(_Ue,"STRONG",{});var Toa=s(R6e);AOr=r(Toa,"encoder-decoder"),Toa.forEach(t),LOr=r(_Ue," \u2014 "),sre=n(_Ue,"A",{href:!0});var Moa=s(sre);yOr=r(Moa,"TFEncoderDecoderModel"),Moa.forEach(t),xOr=r(_Ue," (Encoder decoder model)"),_Ue.forEach(t),$Or=i(Ne),Y0=n(Ne,"LI",{});var bUe=s(Y0);P6e=n(bUe,"STRONG",{});var Eoa=s(P6e);kOr=r(Eoa,"led"),Eoa.forEach(t),SOr=r(bUe," \u2014 "),lre=n(bUe,"A",{href:!0});var Coa=s(lre);ROr=r(Coa,"TFLEDForConditionalGeneration"),Coa.forEach(t),POr=r(bUe," (LED model)"),bUe.forEach(t),BOr=i(Ne),K0=n(Ne,"LI",{});var vUe=s(K0);B6e=n(vUe,"STRONG",{});var woa=s(B6e);IOr=r(woa,"marian"),woa.forEach(t),NOr=r(vUe," \u2014 "),ire=n(vUe,"A",{href:!0});var Aoa=s(ire);qOr=r(Aoa,"TFMarianMTModel"),Aoa.forEach(t),jOr=r(vUe," (Marian model)"),vUe.forEach(t),DOr=i(Ne),Z0=n(Ne,"LI",{});var FUe=s(Z0);I6e=n(FUe,"STRONG",{});var Loa=s(I6e);GOr=r(Loa,"mbart"),Loa.forEach(t),OOr=r(FUe," \u2014 "),dre=n(FUe,"A",{href:!0});var yoa=s(dre);VOr=r(yoa,"TFMBartForConditionalGeneration"),yoa.forEach(t),XOr=r(FUe," (mBART model)"),FUe.forEach(t),zOr=i(Ne),ew=n(Ne,"LI",{});var TUe=s(ew);N6e=n(TUe,"STRONG",{});var xoa=s(N6e);QOr=r(xoa,"mt5"),xoa.forEach(t),WOr=r(TUe," \u2014 "),cre=n(TUe,"A",{href:!0});var $oa=s(cre);UOr=r($oa,"TFMT5ForConditionalGeneration"),$oa.forEach(t),HOr=r(TUe," (MT5 model)"),TUe.forEach(t),JOr=i(Ne),ow=n(Ne,"LI",{});var MUe=s(ow);q6e=n(MUe,"STRONG",{});var koa=s(q6e);YOr=r(koa,"pegasus"),koa.forEach(t),KOr=r(MUe," \u2014 "),mre=n(MUe,"A",{href:!0});var Soa=s(mre);ZOr=r(Soa,"TFPegasusForConditionalGeneration"),Soa.forEach(t),eVr=r(MUe," (Pegasus model)"),MUe.forEach(t),oVr=i(Ne),rw=n(Ne,"LI",{});var EUe=s(rw);j6e=n(EUe,"STRONG",{});var Roa=s(j6e);rVr=r(Roa,"t5"),Roa.forEach(t),tVr=r(EUe," \u2014 "),fre=n(EUe,"A",{href:!0});var Poa=s(fre);aVr=r(Poa,"TFT5ForConditionalGeneration"),Poa.forEach(t),nVr=r(EUe," (T5 model)"),EUe.forEach(t),Ne.forEach(t),sVr=i(gi),T(tw.$$.fragment,gi),gi.forEach(t),fi.forEach(t),BZe=i(m),cm=n(m,"H2",{class:!0});var Joo=s(cm);aw=n(Joo,"A",{id:!0,class:!0,href:!0});var Boa=s(aw);D6e=n(Boa,"SPAN",{});var Ioa=s(D6e);T(iS.$$.fragment,Ioa),Ioa.forEach(t),Boa.forEach(t),lVr=i(Joo),G6e=n(Joo,"SPAN",{});var Noa=s(G6e);iVr=r(Noa,"TFAutoModelForSequenceClassification"),Noa.forEach(t),Joo.forEach(t),IZe=i(m),gr=n(m,"DIV",{class:!0});var hi=s(gr);T(dS.$$.fragment,hi),dVr=i(hi),mm=n(hi,"P",{});var Cie=s(mm);cVr=r(Cie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gre=n(Cie,"A",{href:!0});var qoa=s(gre);mVr=r(qoa,"from_pretrained()"),qoa.forEach(t),fVr=r(Cie," class method or the "),hre=n(Cie,"A",{href:!0});var joa=s(hre);gVr=r(joa,"from_config()"),joa.forEach(t),hVr=r(Cie,` class
method.`),Cie.forEach(t),uVr=i(hi),cS=n(hi,"P",{});var Yoo=s(cS);pVr=r(Yoo,"This class cannot be instantiated directly using "),O6e=n(Yoo,"CODE",{});var Doa=s(O6e);_Vr=r(Doa,"__init__()"),Doa.forEach(t),bVr=r(Yoo," (throws an error)."),Yoo.forEach(t),vVr=i(hi),Yt=n(hi,"DIV",{class:!0});var D8=s(Yt);T(mS.$$.fragment,D8),FVr=i(D8),V6e=n(D8,"P",{});var Goa=s(V6e);TVr=r(Goa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Goa.forEach(t),MVr=i(D8),fm=n(D8,"P",{});var wie=s(fm);EVr=r(wie,`Note:
Loading a model from its configuration file does `),X6e=n(wie,"STRONG",{});var Ooa=s(X6e);CVr=r(Ooa,"not"),Ooa.forEach(t),wVr=r(wie,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(wie,"A",{href:!0});var Voa=s(ure);AVr=r(Voa,"from_pretrained()"),Voa.forEach(t),LVr=r(wie," to load the model weights."),wie.forEach(t),yVr=i(D8),T(nw.$$.fragment,D8),D8.forEach(t),xVr=i(hi),Vr=n(hi,"DIV",{class:!0});var ui=s(Vr);T(fS.$$.fragment,ui),$Vr=i(ui),z6e=n(ui,"P",{});var Xoa=s(z6e);kVr=r(Xoa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xoa.forEach(t),SVr=i(ui),kn=n(ui,"P",{});var G8=s(kn);RVr=r(G8,"The model class to instantiate is selected based on the "),Q6e=n(G8,"CODE",{});var zoa=s(Q6e);PVr=r(zoa,"model_type"),zoa.forEach(t),BVr=r(G8,` property of the config object (either
passed as an argument or loaded from `),W6e=n(G8,"CODE",{});var Qoa=s(W6e);IVr=r(Qoa,"pretrained_model_name_or_path"),Qoa.forEach(t),NVr=r(G8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=n(G8,"CODE",{});var Woa=s(U6e);qVr=r(Woa,"pretrained_model_name_or_path"),Woa.forEach(t),jVr=r(G8,":"),G8.forEach(t),DVr=i(ui),re=n(ui,"UL",{});var ae=s(re);sw=n(ae,"LI",{});var CUe=s(sw);H6e=n(CUe,"STRONG",{});var Uoa=s(H6e);GVr=r(Uoa,"albert"),Uoa.forEach(t),OVr=r(CUe," \u2014 "),pre=n(CUe,"A",{href:!0});var Hoa=s(pre);VVr=r(Hoa,"TFAlbertForSequenceClassification"),Hoa.forEach(t),XVr=r(CUe," (ALBERT model)"),CUe.forEach(t),zVr=i(ae),lw=n(ae,"LI",{});var wUe=s(lw);J6e=n(wUe,"STRONG",{});var Joa=s(J6e);QVr=r(Joa,"bert"),Joa.forEach(t),WVr=r(wUe," \u2014 "),_re=n(wUe,"A",{href:!0});var Yoa=s(_re);UVr=r(Yoa,"TFBertForSequenceClassification"),Yoa.forEach(t),HVr=r(wUe," (BERT model)"),wUe.forEach(t),JVr=i(ae),iw=n(ae,"LI",{});var AUe=s(iw);Y6e=n(AUe,"STRONG",{});var Koa=s(Y6e);YVr=r(Koa,"camembert"),Koa.forEach(t),KVr=r(AUe," \u2014 "),bre=n(AUe,"A",{href:!0});var Zoa=s(bre);ZVr=r(Zoa,"TFCamembertForSequenceClassification"),Zoa.forEach(t),eXr=r(AUe," (CamemBERT model)"),AUe.forEach(t),oXr=i(ae),dw=n(ae,"LI",{});var LUe=s(dw);K6e=n(LUe,"STRONG",{});var era=s(K6e);rXr=r(era,"convbert"),era.forEach(t),tXr=r(LUe," \u2014 "),vre=n(LUe,"A",{href:!0});var ora=s(vre);aXr=r(ora,"TFConvBertForSequenceClassification"),ora.forEach(t),nXr=r(LUe," (ConvBERT model)"),LUe.forEach(t),sXr=i(ae),cw=n(ae,"LI",{});var yUe=s(cw);Z6e=n(yUe,"STRONG",{});var rra=s(Z6e);lXr=r(rra,"ctrl"),rra.forEach(t),iXr=r(yUe," \u2014 "),Fre=n(yUe,"A",{href:!0});var tra=s(Fre);dXr=r(tra,"TFCTRLForSequenceClassification"),tra.forEach(t),cXr=r(yUe," (CTRL model)"),yUe.forEach(t),mXr=i(ae),mw=n(ae,"LI",{});var xUe=s(mw);e7e=n(xUe,"STRONG",{});var ara=s(e7e);fXr=r(ara,"deberta"),ara.forEach(t),gXr=r(xUe," \u2014 "),Tre=n(xUe,"A",{href:!0});var nra=s(Tre);hXr=r(nra,"TFDebertaForSequenceClassification"),nra.forEach(t),uXr=r(xUe," (DeBERTa model)"),xUe.forEach(t),pXr=i(ae),fw=n(ae,"LI",{});var $Ue=s(fw);o7e=n($Ue,"STRONG",{});var sra=s(o7e);_Xr=r(sra,"deberta-v2"),sra.forEach(t),bXr=r($Ue," \u2014 "),Mre=n($Ue,"A",{href:!0});var lra=s(Mre);vXr=r(lra,"TFDebertaV2ForSequenceClassification"),lra.forEach(t),FXr=r($Ue," (DeBERTa-v2 model)"),$Ue.forEach(t),TXr=i(ae),gw=n(ae,"LI",{});var kUe=s(gw);r7e=n(kUe,"STRONG",{});var ira=s(r7e);MXr=r(ira,"distilbert"),ira.forEach(t),EXr=r(kUe," \u2014 "),Ere=n(kUe,"A",{href:!0});var dra=s(Ere);CXr=r(dra,"TFDistilBertForSequenceClassification"),dra.forEach(t),wXr=r(kUe," (DistilBERT model)"),kUe.forEach(t),AXr=i(ae),hw=n(ae,"LI",{});var SUe=s(hw);t7e=n(SUe,"STRONG",{});var cra=s(t7e);LXr=r(cra,"electra"),cra.forEach(t),yXr=r(SUe," \u2014 "),Cre=n(SUe,"A",{href:!0});var mra=s(Cre);xXr=r(mra,"TFElectraForSequenceClassification"),mra.forEach(t),$Xr=r(SUe," (ELECTRA model)"),SUe.forEach(t),kXr=i(ae),uw=n(ae,"LI",{});var RUe=s(uw);a7e=n(RUe,"STRONG",{});var fra=s(a7e);SXr=r(fra,"flaubert"),fra.forEach(t),RXr=r(RUe," \u2014 "),wre=n(RUe,"A",{href:!0});var gra=s(wre);PXr=r(gra,"TFFlaubertForSequenceClassification"),gra.forEach(t),BXr=r(RUe," (FlauBERT model)"),RUe.forEach(t),IXr=i(ae),pw=n(ae,"LI",{});var PUe=s(pw);n7e=n(PUe,"STRONG",{});var hra=s(n7e);NXr=r(hra,"funnel"),hra.forEach(t),qXr=r(PUe," \u2014 "),Are=n(PUe,"A",{href:!0});var ura=s(Are);jXr=r(ura,"TFFunnelForSequenceClassification"),ura.forEach(t),DXr=r(PUe," (Funnel Transformer model)"),PUe.forEach(t),GXr=i(ae),_w=n(ae,"LI",{});var BUe=s(_w);s7e=n(BUe,"STRONG",{});var pra=s(s7e);OXr=r(pra,"gpt2"),pra.forEach(t),VXr=r(BUe," \u2014 "),Lre=n(BUe,"A",{href:!0});var _ra=s(Lre);XXr=r(_ra,"TFGPT2ForSequenceClassification"),_ra.forEach(t),zXr=r(BUe," (OpenAI GPT-2 model)"),BUe.forEach(t),QXr=i(ae),bw=n(ae,"LI",{});var IUe=s(bw);l7e=n(IUe,"STRONG",{});var bra=s(l7e);WXr=r(bra,"gptj"),bra.forEach(t),UXr=r(IUe," \u2014 "),yre=n(IUe,"A",{href:!0});var vra=s(yre);HXr=r(vra,"TFGPTJForSequenceClassification"),vra.forEach(t),JXr=r(IUe," (GPT-J model)"),IUe.forEach(t),YXr=i(ae),vw=n(ae,"LI",{});var NUe=s(vw);i7e=n(NUe,"STRONG",{});var Fra=s(i7e);KXr=r(Fra,"layoutlm"),Fra.forEach(t),ZXr=r(NUe," \u2014 "),xre=n(NUe,"A",{href:!0});var Tra=s(xre);ezr=r(Tra,"TFLayoutLMForSequenceClassification"),Tra.forEach(t),ozr=r(NUe," (LayoutLM model)"),NUe.forEach(t),rzr=i(ae),Fw=n(ae,"LI",{});var qUe=s(Fw);d7e=n(qUe,"STRONG",{});var Mra=s(d7e);tzr=r(Mra,"layoutlmv3"),Mra.forEach(t),azr=r(qUe," \u2014 "),$re=n(qUe,"A",{href:!0});var Era=s($re);nzr=r(Era,"TFLayoutLMv3ForSequenceClassification"),Era.forEach(t),szr=r(qUe," (LayoutLMv3 model)"),qUe.forEach(t),lzr=i(ae),Tw=n(ae,"LI",{});var jUe=s(Tw);c7e=n(jUe,"STRONG",{});var Cra=s(c7e);izr=r(Cra,"longformer"),Cra.forEach(t),dzr=r(jUe," \u2014 "),kre=n(jUe,"A",{href:!0});var wra=s(kre);czr=r(wra,"TFLongformerForSequenceClassification"),wra.forEach(t),mzr=r(jUe," (Longformer model)"),jUe.forEach(t),fzr=i(ae),Mw=n(ae,"LI",{});var DUe=s(Mw);m7e=n(DUe,"STRONG",{});var Ara=s(m7e);gzr=r(Ara,"mobilebert"),Ara.forEach(t),hzr=r(DUe," \u2014 "),Sre=n(DUe,"A",{href:!0});var Lra=s(Sre);uzr=r(Lra,"TFMobileBertForSequenceClassification"),Lra.forEach(t),pzr=r(DUe," (MobileBERT model)"),DUe.forEach(t),_zr=i(ae),Ew=n(ae,"LI",{});var GUe=s(Ew);f7e=n(GUe,"STRONG",{});var yra=s(f7e);bzr=r(yra,"mpnet"),yra.forEach(t),vzr=r(GUe," \u2014 "),Rre=n(GUe,"A",{href:!0});var xra=s(Rre);Fzr=r(xra,"TFMPNetForSequenceClassification"),xra.forEach(t),Tzr=r(GUe," (MPNet model)"),GUe.forEach(t),Mzr=i(ae),Cw=n(ae,"LI",{});var OUe=s(Cw);g7e=n(OUe,"STRONG",{});var $ra=s(g7e);Ezr=r($ra,"openai-gpt"),$ra.forEach(t),Czr=r(OUe," \u2014 "),Pre=n(OUe,"A",{href:!0});var kra=s(Pre);wzr=r(kra,"TFOpenAIGPTForSequenceClassification"),kra.forEach(t),Azr=r(OUe," (OpenAI GPT model)"),OUe.forEach(t),Lzr=i(ae),ww=n(ae,"LI",{});var VUe=s(ww);h7e=n(VUe,"STRONG",{});var Sra=s(h7e);yzr=r(Sra,"rembert"),Sra.forEach(t),xzr=r(VUe," \u2014 "),Bre=n(VUe,"A",{href:!0});var Rra=s(Bre);$zr=r(Rra,"TFRemBertForSequenceClassification"),Rra.forEach(t),kzr=r(VUe," (RemBERT model)"),VUe.forEach(t),Szr=i(ae),Aw=n(ae,"LI",{});var XUe=s(Aw);u7e=n(XUe,"STRONG",{});var Pra=s(u7e);Rzr=r(Pra,"roberta"),Pra.forEach(t),Pzr=r(XUe," \u2014 "),Ire=n(XUe,"A",{href:!0});var Bra=s(Ire);Bzr=r(Bra,"TFRobertaForSequenceClassification"),Bra.forEach(t),Izr=r(XUe," (RoBERTa model)"),XUe.forEach(t),Nzr=i(ae),Lw=n(ae,"LI",{});var zUe=s(Lw);p7e=n(zUe,"STRONG",{});var Ira=s(p7e);qzr=r(Ira,"roformer"),Ira.forEach(t),jzr=r(zUe," \u2014 "),Nre=n(zUe,"A",{href:!0});var Nra=s(Nre);Dzr=r(Nra,"TFRoFormerForSequenceClassification"),Nra.forEach(t),Gzr=r(zUe," (RoFormer model)"),zUe.forEach(t),Ozr=i(ae),yw=n(ae,"LI",{});var QUe=s(yw);_7e=n(QUe,"STRONG",{});var qra=s(_7e);Vzr=r(qra,"tapas"),qra.forEach(t),Xzr=r(QUe," \u2014 "),qre=n(QUe,"A",{href:!0});var jra=s(qre);zzr=r(jra,"TFTapasForSequenceClassification"),jra.forEach(t),Qzr=r(QUe," (TAPAS model)"),QUe.forEach(t),Wzr=i(ae),xw=n(ae,"LI",{});var WUe=s(xw);b7e=n(WUe,"STRONG",{});var Dra=s(b7e);Uzr=r(Dra,"transfo-xl"),Dra.forEach(t),Hzr=r(WUe," \u2014 "),jre=n(WUe,"A",{href:!0});var Gra=s(jre);Jzr=r(Gra,"TFTransfoXLForSequenceClassification"),Gra.forEach(t),Yzr=r(WUe," (Transformer-XL model)"),WUe.forEach(t),Kzr=i(ae),$w=n(ae,"LI",{});var UUe=s($w);v7e=n(UUe,"STRONG",{});var Ora=s(v7e);Zzr=r(Ora,"xlm"),Ora.forEach(t),eQr=r(UUe," \u2014 "),Dre=n(UUe,"A",{href:!0});var Vra=s(Dre);oQr=r(Vra,"TFXLMForSequenceClassification"),Vra.forEach(t),rQr=r(UUe," (XLM model)"),UUe.forEach(t),tQr=i(ae),kw=n(ae,"LI",{});var HUe=s(kw);F7e=n(HUe,"STRONG",{});var Xra=s(F7e);aQr=r(Xra,"xlm-roberta"),Xra.forEach(t),nQr=r(HUe," \u2014 "),Gre=n(HUe,"A",{href:!0});var zra=s(Gre);sQr=r(zra,"TFXLMRobertaForSequenceClassification"),zra.forEach(t),lQr=r(HUe," (XLM-RoBERTa model)"),HUe.forEach(t),iQr=i(ae),Sw=n(ae,"LI",{});var JUe=s(Sw);T7e=n(JUe,"STRONG",{});var Qra=s(T7e);dQr=r(Qra,"xlnet"),Qra.forEach(t),cQr=r(JUe," \u2014 "),Ore=n(JUe,"A",{href:!0});var Wra=s(Ore);mQr=r(Wra,"TFXLNetForSequenceClassification"),Wra.forEach(t),fQr=r(JUe," (XLNet model)"),JUe.forEach(t),ae.forEach(t),gQr=i(ui),T(Rw.$$.fragment,ui),ui.forEach(t),hi.forEach(t),NZe=i(m),gm=n(m,"H2",{class:!0});var Koo=s(gm);Pw=n(Koo,"A",{id:!0,class:!0,href:!0});var Ura=s(Pw);M7e=n(Ura,"SPAN",{});var Hra=s(M7e);T(gS.$$.fragment,Hra),Hra.forEach(t),Ura.forEach(t),hQr=i(Koo),E7e=n(Koo,"SPAN",{});var Jra=s(E7e);uQr=r(Jra,"TFAutoModelForMultipleChoice"),Jra.forEach(t),Koo.forEach(t),qZe=i(m),hr=n(m,"DIV",{class:!0});var pi=s(hr);T(hS.$$.fragment,pi),pQr=i(pi),hm=n(pi,"P",{});var Aie=s(hm);_Qr=r(Aie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Vre=n(Aie,"A",{href:!0});var Yra=s(Vre);bQr=r(Yra,"from_pretrained()"),Yra.forEach(t),vQr=r(Aie," class method or the "),Xre=n(Aie,"A",{href:!0});var Kra=s(Xre);FQr=r(Kra,"from_config()"),Kra.forEach(t),TQr=r(Aie,` class
method.`),Aie.forEach(t),MQr=i(pi),uS=n(pi,"P",{});var Zoo=s(uS);EQr=r(Zoo,"This class cannot be instantiated directly using "),C7e=n(Zoo,"CODE",{});var Zra=s(C7e);CQr=r(Zra,"__init__()"),Zra.forEach(t),wQr=r(Zoo," (throws an error)."),Zoo.forEach(t),AQr=i(pi),Kt=n(pi,"DIV",{class:!0});var O8=s(Kt);T(pS.$$.fragment,O8),LQr=i(O8),w7e=n(O8,"P",{});var eta=s(w7e);yQr=r(eta,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eta.forEach(t),xQr=i(O8),um=n(O8,"P",{});var Lie=s(um);$Qr=r(Lie,`Note:
Loading a model from its configuration file does `),A7e=n(Lie,"STRONG",{});var ota=s(A7e);kQr=r(ota,"not"),ota.forEach(t),SQr=r(Lie,` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=n(Lie,"A",{href:!0});var rta=s(zre);RQr=r(rta,"from_pretrained()"),rta.forEach(t),PQr=r(Lie," to load the model weights."),Lie.forEach(t),BQr=i(O8),T(Bw.$$.fragment,O8),O8.forEach(t),IQr=i(pi),Xr=n(pi,"DIV",{class:!0});var _i=s(Xr);T(_S.$$.fragment,_i),NQr=i(_i),L7e=n(_i,"P",{});var tta=s(L7e);qQr=r(tta,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tta.forEach(t),jQr=i(_i),Sn=n(_i,"P",{});var V8=s(Sn);DQr=r(V8,"The model class to instantiate is selected based on the "),y7e=n(V8,"CODE",{});var ata=s(y7e);GQr=r(ata,"model_type"),ata.forEach(t),OQr=r(V8,` property of the config object (either
passed as an argument or loaded from `),x7e=n(V8,"CODE",{});var nta=s(x7e);VQr=r(nta,"pretrained_model_name_or_path"),nta.forEach(t),XQr=r(V8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(V8,"CODE",{});var sta=s($7e);zQr=r(sta,"pretrained_model_name_or_path"),sta.forEach(t),QQr=r(V8,":"),V8.forEach(t),WQr=i(_i),ve=n(_i,"UL",{});var Te=s(ve);Iw=n(Te,"LI",{});var YUe=s(Iw);k7e=n(YUe,"STRONG",{});var lta=s(k7e);UQr=r(lta,"albert"),lta.forEach(t),HQr=r(YUe," \u2014 "),Qre=n(YUe,"A",{href:!0});var ita=s(Qre);JQr=r(ita,"TFAlbertForMultipleChoice"),ita.forEach(t),YQr=r(YUe," (ALBERT model)"),YUe.forEach(t),KQr=i(Te),Nw=n(Te,"LI",{});var KUe=s(Nw);S7e=n(KUe,"STRONG",{});var dta=s(S7e);ZQr=r(dta,"bert"),dta.forEach(t),eWr=r(KUe," \u2014 "),Wre=n(KUe,"A",{href:!0});var cta=s(Wre);oWr=r(cta,"TFBertForMultipleChoice"),cta.forEach(t),rWr=r(KUe," (BERT model)"),KUe.forEach(t),tWr=i(Te),qw=n(Te,"LI",{});var ZUe=s(qw);R7e=n(ZUe,"STRONG",{});var mta=s(R7e);aWr=r(mta,"camembert"),mta.forEach(t),nWr=r(ZUe," \u2014 "),Ure=n(ZUe,"A",{href:!0});var fta=s(Ure);sWr=r(fta,"TFCamembertForMultipleChoice"),fta.forEach(t),lWr=r(ZUe," (CamemBERT model)"),ZUe.forEach(t),iWr=i(Te),jw=n(Te,"LI",{});var eHe=s(jw);P7e=n(eHe,"STRONG",{});var gta=s(P7e);dWr=r(gta,"convbert"),gta.forEach(t),cWr=r(eHe," \u2014 "),Hre=n(eHe,"A",{href:!0});var hta=s(Hre);mWr=r(hta,"TFConvBertForMultipleChoice"),hta.forEach(t),fWr=r(eHe," (ConvBERT model)"),eHe.forEach(t),gWr=i(Te),Dw=n(Te,"LI",{});var oHe=s(Dw);B7e=n(oHe,"STRONG",{});var uta=s(B7e);hWr=r(uta,"distilbert"),uta.forEach(t),uWr=r(oHe," \u2014 "),Jre=n(oHe,"A",{href:!0});var pta=s(Jre);pWr=r(pta,"TFDistilBertForMultipleChoice"),pta.forEach(t),_Wr=r(oHe," (DistilBERT model)"),oHe.forEach(t),bWr=i(Te),Gw=n(Te,"LI",{});var rHe=s(Gw);I7e=n(rHe,"STRONG",{});var _ta=s(I7e);vWr=r(_ta,"electra"),_ta.forEach(t),FWr=r(rHe," \u2014 "),Yre=n(rHe,"A",{href:!0});var bta=s(Yre);TWr=r(bta,"TFElectraForMultipleChoice"),bta.forEach(t),MWr=r(rHe," (ELECTRA model)"),rHe.forEach(t),EWr=i(Te),Ow=n(Te,"LI",{});var tHe=s(Ow);N7e=n(tHe,"STRONG",{});var vta=s(N7e);CWr=r(vta,"flaubert"),vta.forEach(t),wWr=r(tHe," \u2014 "),Kre=n(tHe,"A",{href:!0});var Fta=s(Kre);AWr=r(Fta,"TFFlaubertForMultipleChoice"),Fta.forEach(t),LWr=r(tHe," (FlauBERT model)"),tHe.forEach(t),yWr=i(Te),Vw=n(Te,"LI",{});var aHe=s(Vw);q7e=n(aHe,"STRONG",{});var Tta=s(q7e);xWr=r(Tta,"funnel"),Tta.forEach(t),$Wr=r(aHe," \u2014 "),Zre=n(aHe,"A",{href:!0});var Mta=s(Zre);kWr=r(Mta,"TFFunnelForMultipleChoice"),Mta.forEach(t),SWr=r(aHe," (Funnel Transformer model)"),aHe.forEach(t),RWr=i(Te),Xw=n(Te,"LI",{});var nHe=s(Xw);j7e=n(nHe,"STRONG",{});var Eta=s(j7e);PWr=r(Eta,"longformer"),Eta.forEach(t),BWr=r(nHe," \u2014 "),ete=n(nHe,"A",{href:!0});var Cta=s(ete);IWr=r(Cta,"TFLongformerForMultipleChoice"),Cta.forEach(t),NWr=r(nHe," (Longformer model)"),nHe.forEach(t),qWr=i(Te),zw=n(Te,"LI",{});var sHe=s(zw);D7e=n(sHe,"STRONG",{});var wta=s(D7e);jWr=r(wta,"mobilebert"),wta.forEach(t),DWr=r(sHe," \u2014 "),ote=n(sHe,"A",{href:!0});var Ata=s(ote);GWr=r(Ata,"TFMobileBertForMultipleChoice"),Ata.forEach(t),OWr=r(sHe," (MobileBERT model)"),sHe.forEach(t),VWr=i(Te),Qw=n(Te,"LI",{});var lHe=s(Qw);G7e=n(lHe,"STRONG",{});var Lta=s(G7e);XWr=r(Lta,"mpnet"),Lta.forEach(t),zWr=r(lHe," \u2014 "),rte=n(lHe,"A",{href:!0});var yta=s(rte);QWr=r(yta,"TFMPNetForMultipleChoice"),yta.forEach(t),WWr=r(lHe," (MPNet model)"),lHe.forEach(t),UWr=i(Te),Ww=n(Te,"LI",{});var iHe=s(Ww);O7e=n(iHe,"STRONG",{});var xta=s(O7e);HWr=r(xta,"rembert"),xta.forEach(t),JWr=r(iHe," \u2014 "),tte=n(iHe,"A",{href:!0});var $ta=s(tte);YWr=r($ta,"TFRemBertForMultipleChoice"),$ta.forEach(t),KWr=r(iHe," (RemBERT model)"),iHe.forEach(t),ZWr=i(Te),Uw=n(Te,"LI",{});var dHe=s(Uw);V7e=n(dHe,"STRONG",{});var kta=s(V7e);eUr=r(kta,"roberta"),kta.forEach(t),oUr=r(dHe," \u2014 "),ate=n(dHe,"A",{href:!0});var Sta=s(ate);rUr=r(Sta,"TFRobertaForMultipleChoice"),Sta.forEach(t),tUr=r(dHe," (RoBERTa model)"),dHe.forEach(t),aUr=i(Te),Hw=n(Te,"LI",{});var cHe=s(Hw);X7e=n(cHe,"STRONG",{});var Rta=s(X7e);nUr=r(Rta,"roformer"),Rta.forEach(t),sUr=r(cHe," \u2014 "),nte=n(cHe,"A",{href:!0});var Pta=s(nte);lUr=r(Pta,"TFRoFormerForMultipleChoice"),Pta.forEach(t),iUr=r(cHe," (RoFormer model)"),cHe.forEach(t),dUr=i(Te),Jw=n(Te,"LI",{});var mHe=s(Jw);z7e=n(mHe,"STRONG",{});var Bta=s(z7e);cUr=r(Bta,"xlm"),Bta.forEach(t),mUr=r(mHe," \u2014 "),ste=n(mHe,"A",{href:!0});var Ita=s(ste);fUr=r(Ita,"TFXLMForMultipleChoice"),Ita.forEach(t),gUr=r(mHe," (XLM model)"),mHe.forEach(t),hUr=i(Te),Yw=n(Te,"LI",{});var fHe=s(Yw);Q7e=n(fHe,"STRONG",{});var Nta=s(Q7e);uUr=r(Nta,"xlm-roberta"),Nta.forEach(t),pUr=r(fHe," \u2014 "),lte=n(fHe,"A",{href:!0});var qta=s(lte);_Ur=r(qta,"TFXLMRobertaForMultipleChoice"),qta.forEach(t),bUr=r(fHe," (XLM-RoBERTa model)"),fHe.forEach(t),vUr=i(Te),Kw=n(Te,"LI",{});var gHe=s(Kw);W7e=n(gHe,"STRONG",{});var jta=s(W7e);FUr=r(jta,"xlnet"),jta.forEach(t),TUr=r(gHe," \u2014 "),ite=n(gHe,"A",{href:!0});var Dta=s(ite);MUr=r(Dta,"TFXLNetForMultipleChoice"),Dta.forEach(t),EUr=r(gHe," (XLNet model)"),gHe.forEach(t),Te.forEach(t),CUr=i(_i),T(Zw.$$.fragment,_i),_i.forEach(t),pi.forEach(t),jZe=i(m),pm=n(m,"H2",{class:!0});var ero=s(pm);eA=n(ero,"A",{id:!0,class:!0,href:!0});var Gta=s(eA);U7e=n(Gta,"SPAN",{});var Ota=s(U7e);T(bS.$$.fragment,Ota),Ota.forEach(t),Gta.forEach(t),wUr=i(ero),H7e=n(ero,"SPAN",{});var Vta=s(H7e);AUr=r(Vta,"TFAutoModelForNextSentencePrediction"),Vta.forEach(t),ero.forEach(t),DZe=i(m),ur=n(m,"DIV",{class:!0});var bi=s(ur);T(vS.$$.fragment,bi),LUr=i(bi),_m=n(bi,"P",{});var yie=s(_m);yUr=r(yie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dte=n(yie,"A",{href:!0});var Xta=s(dte);xUr=r(Xta,"from_pretrained()"),Xta.forEach(t),$Ur=r(yie," class method or the "),cte=n(yie,"A",{href:!0});var zta=s(cte);kUr=r(zta,"from_config()"),zta.forEach(t),SUr=r(yie,` class
method.`),yie.forEach(t),RUr=i(bi),FS=n(bi,"P",{});var oro=s(FS);PUr=r(oro,"This class cannot be instantiated directly using "),J7e=n(oro,"CODE",{});var Qta=s(J7e);BUr=r(Qta,"__init__()"),Qta.forEach(t),IUr=r(oro," (throws an error)."),oro.forEach(t),NUr=i(bi),Zt=n(bi,"DIV",{class:!0});var X8=s(Zt);T(TS.$$.fragment,X8),qUr=i(X8),Y7e=n(X8,"P",{});var Wta=s(Y7e);jUr=r(Wta,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wta.forEach(t),DUr=i(X8),bm=n(X8,"P",{});var xie=s(bm);GUr=r(xie,`Note:
Loading a model from its configuration file does `),K7e=n(xie,"STRONG",{});var Uta=s(K7e);OUr=r(Uta,"not"),Uta.forEach(t),VUr=r(xie,` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=n(xie,"A",{href:!0});var Hta=s(mte);XUr=r(Hta,"from_pretrained()"),Hta.forEach(t),zUr=r(xie," to load the model weights."),xie.forEach(t),QUr=i(X8),T(oA.$$.fragment,X8),X8.forEach(t),WUr=i(bi),zr=n(bi,"DIV",{class:!0});var vi=s(zr);T(MS.$$.fragment,vi),UUr=i(vi),Z7e=n(vi,"P",{});var Jta=s(Z7e);HUr=r(Jta,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jta.forEach(t),JUr=i(vi),Rn=n(vi,"P",{});var z8=s(Rn);YUr=r(z8,"The model class to instantiate is selected based on the "),eLe=n(z8,"CODE",{});var Yta=s(eLe);KUr=r(Yta,"model_type"),Yta.forEach(t),ZUr=r(z8,` property of the config object (either
passed as an argument or loaded from `),oLe=n(z8,"CODE",{});var Kta=s(oLe);eHr=r(Kta,"pretrained_model_name_or_path"),Kta.forEach(t),oHr=r(z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rLe=n(z8,"CODE",{});var Zta=s(rLe);rHr=r(Zta,"pretrained_model_name_or_path"),Zta.forEach(t),tHr=r(z8,":"),z8.forEach(t),aHr=i(vi),ES=n(vi,"UL",{});var rro=s(ES);rA=n(rro,"LI",{});var hHe=s(rA);tLe=n(hHe,"STRONG",{});var eaa=s(tLe);nHr=r(eaa,"bert"),eaa.forEach(t),sHr=r(hHe," \u2014 "),fte=n(hHe,"A",{href:!0});var oaa=s(fte);lHr=r(oaa,"TFBertForNextSentencePrediction"),oaa.forEach(t),iHr=r(hHe," (BERT model)"),hHe.forEach(t),dHr=i(rro),tA=n(rro,"LI",{});var uHe=s(tA);aLe=n(uHe,"STRONG",{});var raa=s(aLe);cHr=r(raa,"mobilebert"),raa.forEach(t),mHr=r(uHe," \u2014 "),gte=n(uHe,"A",{href:!0});var taa=s(gte);fHr=r(taa,"TFMobileBertForNextSentencePrediction"),taa.forEach(t),gHr=r(uHe," (MobileBERT model)"),uHe.forEach(t),rro.forEach(t),hHr=i(vi),T(aA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),GZe=i(m),vm=n(m,"H2",{class:!0});var tro=s(vm);nA=n(tro,"A",{id:!0,class:!0,href:!0});var aaa=s(nA);nLe=n(aaa,"SPAN",{});var naa=s(nLe);T(CS.$$.fragment,naa),naa.forEach(t),aaa.forEach(t),uHr=i(tro),sLe=n(tro,"SPAN",{});var saa=s(sLe);pHr=r(saa,"TFAutoModelForTableQuestionAnswering"),saa.forEach(t),tro.forEach(t),OZe=i(m),pr=n(m,"DIV",{class:!0});var Fi=s(pr);T(wS.$$.fragment,Fi),_Hr=i(Fi),Fm=n(Fi,"P",{});var $ie=s(Fm);bHr=r($ie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hte=n($ie,"A",{href:!0});var laa=s(hte);vHr=r(laa,"from_pretrained()"),laa.forEach(t),FHr=r($ie," class method or the "),ute=n($ie,"A",{href:!0});var iaa=s(ute);THr=r(iaa,"from_config()"),iaa.forEach(t),MHr=r($ie,` class
method.`),$ie.forEach(t),EHr=i(Fi),AS=n(Fi,"P",{});var aro=s(AS);CHr=r(aro,"This class cannot be instantiated directly using "),lLe=n(aro,"CODE",{});var daa=s(lLe);wHr=r(daa,"__init__()"),daa.forEach(t),AHr=r(aro," (throws an error)."),aro.forEach(t),LHr=i(Fi),ea=n(Fi,"DIV",{class:!0});var Q8=s(ea);T(LS.$$.fragment,Q8),yHr=i(Q8),iLe=n(Q8,"P",{});var caa=s(iLe);xHr=r(caa,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),caa.forEach(t),$Hr=i(Q8),Tm=n(Q8,"P",{});var kie=s(Tm);kHr=r(kie,`Note:
Loading a model from its configuration file does `),dLe=n(kie,"STRONG",{});var maa=s(dLe);SHr=r(maa,"not"),maa.forEach(t),RHr=r(kie,` load the model weights. It only affects the
model\u2019s configuration. Use `),pte=n(kie,"A",{href:!0});var faa=s(pte);PHr=r(faa,"from_pretrained()"),faa.forEach(t),BHr=r(kie," to load the model weights."),kie.forEach(t),IHr=i(Q8),T(sA.$$.fragment,Q8),Q8.forEach(t),NHr=i(Fi),Qr=n(Fi,"DIV",{class:!0});var Ti=s(Qr);T(yS.$$.fragment,Ti),qHr=i(Ti),cLe=n(Ti,"P",{});var gaa=s(cLe);jHr=r(gaa,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gaa.forEach(t),DHr=i(Ti),Pn=n(Ti,"P",{});var W8=s(Pn);GHr=r(W8,"The model class to instantiate is selected based on the "),mLe=n(W8,"CODE",{});var haa=s(mLe);OHr=r(haa,"model_type"),haa.forEach(t),VHr=r(W8,` property of the config object (either
passed as an argument or loaded from `),fLe=n(W8,"CODE",{});var uaa=s(fLe);XHr=r(uaa,"pretrained_model_name_or_path"),uaa.forEach(t),zHr=r(W8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gLe=n(W8,"CODE",{});var paa=s(gLe);QHr=r(paa,"pretrained_model_name_or_path"),paa.forEach(t),WHr=r(W8,":"),W8.forEach(t),UHr=i(Ti),hLe=n(Ti,"UL",{});var _aa=s(hLe);lA=n(_aa,"LI",{});var pHe=s(lA);uLe=n(pHe,"STRONG",{});var baa=s(uLe);HHr=r(baa,"tapas"),baa.forEach(t),JHr=r(pHe," \u2014 "),_te=n(pHe,"A",{href:!0});var vaa=s(_te);YHr=r(vaa,"TFTapasForQuestionAnswering"),vaa.forEach(t),KHr=r(pHe," (TAPAS model)"),pHe.forEach(t),_aa.forEach(t),ZHr=i(Ti),T(iA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),VZe=i(m),Mm=n(m,"H2",{class:!0});var nro=s(Mm);dA=n(nro,"A",{id:!0,class:!0,href:!0});var Faa=s(dA);pLe=n(Faa,"SPAN",{});var Taa=s(pLe);T(xS.$$.fragment,Taa),Taa.forEach(t),Faa.forEach(t),eJr=i(nro),_Le=n(nro,"SPAN",{});var Maa=s(_Le);oJr=r(Maa,"TFAutoModelForDocumentQuestionAnswering"),Maa.forEach(t),nro.forEach(t),XZe=i(m),_r=n(m,"DIV",{class:!0});var Mi=s(_r);T($S.$$.fragment,Mi),rJr=i(Mi),Em=n(Mi,"P",{});var Sie=s(Em);tJr=r(Sie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),bte=n(Sie,"A",{href:!0});var Eaa=s(bte);aJr=r(Eaa,"from_pretrained()"),Eaa.forEach(t),nJr=r(Sie," class method or the "),vte=n(Sie,"A",{href:!0});var Caa=s(vte);sJr=r(Caa,"from_config()"),Caa.forEach(t),lJr=r(Sie,` class
method.`),Sie.forEach(t),iJr=i(Mi),kS=n(Mi,"P",{});var sro=s(kS);dJr=r(sro,"This class cannot be instantiated directly using "),bLe=n(sro,"CODE",{});var waa=s(bLe);cJr=r(waa,"__init__()"),waa.forEach(t),mJr=r(sro," (throws an error)."),sro.forEach(t),fJr=i(Mi),oa=n(Mi,"DIV",{class:!0});var U8=s(oa);T(SS.$$.fragment,U8),gJr=i(U8),vLe=n(U8,"P",{});var Aaa=s(vLe);hJr=r(Aaa,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Aaa.forEach(t),uJr=i(U8),Cm=n(U8,"P",{});var Rie=s(Cm);pJr=r(Rie,`Note:
Loading a model from its configuration file does `),FLe=n(Rie,"STRONG",{});var Laa=s(FLe);_Jr=r(Laa,"not"),Laa.forEach(t),bJr=r(Rie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=n(Rie,"A",{href:!0});var yaa=s(Fte);vJr=r(yaa,"from_pretrained()"),yaa.forEach(t),FJr=r(Rie," to load the model weights."),Rie.forEach(t),TJr=i(U8),T(cA.$$.fragment,U8),U8.forEach(t),MJr=i(Mi),Wr=n(Mi,"DIV",{class:!0});var Ei=s(Wr);T(RS.$$.fragment,Ei),EJr=i(Ei),TLe=n(Ei,"P",{});var xaa=s(TLe);CJr=r(xaa,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),xaa.forEach(t),wJr=i(Ei),Bn=n(Ei,"P",{});var H8=s(Bn);AJr=r(H8,"The model class to instantiate is selected based on the "),MLe=n(H8,"CODE",{});var $aa=s(MLe);LJr=r($aa,"model_type"),$aa.forEach(t),yJr=r(H8,` property of the config object (either
passed as an argument or loaded from `),ELe=n(H8,"CODE",{});var kaa=s(ELe);xJr=r(kaa,"pretrained_model_name_or_path"),kaa.forEach(t),$Jr=r(H8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CLe=n(H8,"CODE",{});var Saa=s(CLe);kJr=r(Saa,"pretrained_model_name_or_path"),Saa.forEach(t),SJr=r(H8,":"),H8.forEach(t),RJr=i(Ei),wLe=n(Ei,"UL",{});var Raa=s(wLe);mA=n(Raa,"LI",{});var _He=s(mA);ALe=n(_He,"STRONG",{});var Paa=s(ALe);PJr=r(Paa,"layoutlm"),Paa.forEach(t),BJr=r(_He," \u2014 "),Tte=n(_He,"A",{href:!0});var Baa=s(Tte);IJr=r(Baa,"TFLayoutLMForQuestionAnswering"),Baa.forEach(t),NJr=r(_He," (LayoutLM model)"),_He.forEach(t),Raa.forEach(t),qJr=i(Ei),T(fA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),zZe=i(m),wm=n(m,"H2",{class:!0});var lro=s(wm);gA=n(lro,"A",{id:!0,class:!0,href:!0});var Iaa=s(gA);LLe=n(Iaa,"SPAN",{});var Naa=s(LLe);T(PS.$$.fragment,Naa),Naa.forEach(t),Iaa.forEach(t),jJr=i(lro),yLe=n(lro,"SPAN",{});var qaa=s(yLe);DJr=r(qaa,"TFAutoModelForTokenClassification"),qaa.forEach(t),lro.forEach(t),QZe=i(m),br=n(m,"DIV",{class:!0});var Ci=s(br);T(BS.$$.fragment,Ci),GJr=i(Ci),Am=n(Ci,"P",{});var Pie=s(Am);OJr=r(Pie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mte=n(Pie,"A",{href:!0});var jaa=s(Mte);VJr=r(jaa,"from_pretrained()"),jaa.forEach(t),XJr=r(Pie," class method or the "),Ete=n(Pie,"A",{href:!0});var Daa=s(Ete);zJr=r(Daa,"from_config()"),Daa.forEach(t),QJr=r(Pie,` class
method.`),Pie.forEach(t),WJr=i(Ci),IS=n(Ci,"P",{});var iro=s(IS);UJr=r(iro,"This class cannot be instantiated directly using "),xLe=n(iro,"CODE",{});var Gaa=s(xLe);HJr=r(Gaa,"__init__()"),Gaa.forEach(t),JJr=r(iro," (throws an error)."),iro.forEach(t),YJr=i(Ci),ra=n(Ci,"DIV",{class:!0});var J8=s(ra);T(NS.$$.fragment,J8),KJr=i(J8),$Le=n(J8,"P",{});var Oaa=s($Le);ZJr=r(Oaa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Oaa.forEach(t),eYr=i(J8),Lm=n(J8,"P",{});var Bie=s(Lm);oYr=r(Bie,`Note:
Loading a model from its configuration file does `),kLe=n(Bie,"STRONG",{});var Vaa=s(kLe);rYr=r(Vaa,"not"),Vaa.forEach(t),tYr=r(Bie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=n(Bie,"A",{href:!0});var Xaa=s(Cte);aYr=r(Xaa,"from_pretrained()"),Xaa.forEach(t),nYr=r(Bie," to load the model weights."),Bie.forEach(t),sYr=i(J8),T(hA.$$.fragment,J8),J8.forEach(t),lYr=i(Ci),Ur=n(Ci,"DIV",{class:!0});var wi=s(Ur);T(qS.$$.fragment,wi),iYr=i(wi),SLe=n(wi,"P",{});var zaa=s(SLe);dYr=r(zaa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zaa.forEach(t),cYr=i(wi),In=n(wi,"P",{});var Y8=s(In);mYr=r(Y8,"The model class to instantiate is selected based on the "),RLe=n(Y8,"CODE",{});var Qaa=s(RLe);fYr=r(Qaa,"model_type"),Qaa.forEach(t),gYr=r(Y8,` property of the config object (either
passed as an argument or loaded from `),PLe=n(Y8,"CODE",{});var Waa=s(PLe);hYr=r(Waa,"pretrained_model_name_or_path"),Waa.forEach(t),uYr=r(Y8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BLe=n(Y8,"CODE",{});var Uaa=s(BLe);pYr=r(Uaa,"pretrained_model_name_or_path"),Uaa.forEach(t),_Yr=r(Y8,":"),Y8.forEach(t),bYr=i(wi),de=n(wi,"UL",{});var he=s(de);uA=n(he,"LI",{});var bHe=s(uA);ILe=n(bHe,"STRONG",{});var Haa=s(ILe);vYr=r(Haa,"albert"),Haa.forEach(t),FYr=r(bHe," \u2014 "),wte=n(bHe,"A",{href:!0});var Jaa=s(wte);TYr=r(Jaa,"TFAlbertForTokenClassification"),Jaa.forEach(t),MYr=r(bHe," (ALBERT model)"),bHe.forEach(t),EYr=i(he),pA=n(he,"LI",{});var vHe=s(pA);NLe=n(vHe,"STRONG",{});var Yaa=s(NLe);CYr=r(Yaa,"bert"),Yaa.forEach(t),wYr=r(vHe," \u2014 "),Ate=n(vHe,"A",{href:!0});var Kaa=s(Ate);AYr=r(Kaa,"TFBertForTokenClassification"),Kaa.forEach(t),LYr=r(vHe," (BERT model)"),vHe.forEach(t),yYr=i(he),_A=n(he,"LI",{});var FHe=s(_A);qLe=n(FHe,"STRONG",{});var Zaa=s(qLe);xYr=r(Zaa,"camembert"),Zaa.forEach(t),$Yr=r(FHe," \u2014 "),Lte=n(FHe,"A",{href:!0});var ena=s(Lte);kYr=r(ena,"TFCamembertForTokenClassification"),ena.forEach(t),SYr=r(FHe," (CamemBERT model)"),FHe.forEach(t),RYr=i(he),bA=n(he,"LI",{});var THe=s(bA);jLe=n(THe,"STRONG",{});var ona=s(jLe);PYr=r(ona,"convbert"),ona.forEach(t),BYr=r(THe," \u2014 "),yte=n(THe,"A",{href:!0});var rna=s(yte);IYr=r(rna,"TFConvBertForTokenClassification"),rna.forEach(t),NYr=r(THe," (ConvBERT model)"),THe.forEach(t),qYr=i(he),vA=n(he,"LI",{});var MHe=s(vA);DLe=n(MHe,"STRONG",{});var tna=s(DLe);jYr=r(tna,"deberta"),tna.forEach(t),DYr=r(MHe," \u2014 "),xte=n(MHe,"A",{href:!0});var ana=s(xte);GYr=r(ana,"TFDebertaForTokenClassification"),ana.forEach(t),OYr=r(MHe," (DeBERTa model)"),MHe.forEach(t),VYr=i(he),FA=n(he,"LI",{});var EHe=s(FA);GLe=n(EHe,"STRONG",{});var nna=s(GLe);XYr=r(nna,"deberta-v2"),nna.forEach(t),zYr=r(EHe," \u2014 "),$te=n(EHe,"A",{href:!0});var sna=s($te);QYr=r(sna,"TFDebertaV2ForTokenClassification"),sna.forEach(t),WYr=r(EHe," (DeBERTa-v2 model)"),EHe.forEach(t),UYr=i(he),TA=n(he,"LI",{});var CHe=s(TA);OLe=n(CHe,"STRONG",{});var lna=s(OLe);HYr=r(lna,"distilbert"),lna.forEach(t),JYr=r(CHe," \u2014 "),kte=n(CHe,"A",{href:!0});var ina=s(kte);YYr=r(ina,"TFDistilBertForTokenClassification"),ina.forEach(t),KYr=r(CHe," (DistilBERT model)"),CHe.forEach(t),ZYr=i(he),MA=n(he,"LI",{});var wHe=s(MA);VLe=n(wHe,"STRONG",{});var dna=s(VLe);eKr=r(dna,"electra"),dna.forEach(t),oKr=r(wHe," \u2014 "),Ste=n(wHe,"A",{href:!0});var cna=s(Ste);rKr=r(cna,"TFElectraForTokenClassification"),cna.forEach(t),tKr=r(wHe," (ELECTRA model)"),wHe.forEach(t),aKr=i(he),EA=n(he,"LI",{});var AHe=s(EA);XLe=n(AHe,"STRONG",{});var mna=s(XLe);nKr=r(mna,"flaubert"),mna.forEach(t),sKr=r(AHe," \u2014 "),Rte=n(AHe,"A",{href:!0});var fna=s(Rte);lKr=r(fna,"TFFlaubertForTokenClassification"),fna.forEach(t),iKr=r(AHe," (FlauBERT model)"),AHe.forEach(t),dKr=i(he),CA=n(he,"LI",{});var LHe=s(CA);zLe=n(LHe,"STRONG",{});var gna=s(zLe);cKr=r(gna,"funnel"),gna.forEach(t),mKr=r(LHe," \u2014 "),Pte=n(LHe,"A",{href:!0});var hna=s(Pte);fKr=r(hna,"TFFunnelForTokenClassification"),hna.forEach(t),gKr=r(LHe," (Funnel Transformer model)"),LHe.forEach(t),hKr=i(he),wA=n(he,"LI",{});var yHe=s(wA);QLe=n(yHe,"STRONG",{});var una=s(QLe);uKr=r(una,"layoutlm"),una.forEach(t),pKr=r(yHe," \u2014 "),Bte=n(yHe,"A",{href:!0});var pna=s(Bte);_Kr=r(pna,"TFLayoutLMForTokenClassification"),pna.forEach(t),bKr=r(yHe," (LayoutLM model)"),yHe.forEach(t),vKr=i(he),AA=n(he,"LI",{});var xHe=s(AA);WLe=n(xHe,"STRONG",{});var _na=s(WLe);FKr=r(_na,"layoutlmv3"),_na.forEach(t),TKr=r(xHe," \u2014 "),Ite=n(xHe,"A",{href:!0});var bna=s(Ite);MKr=r(bna,"TFLayoutLMv3ForTokenClassification"),bna.forEach(t),EKr=r(xHe," (LayoutLMv3 model)"),xHe.forEach(t),CKr=i(he),LA=n(he,"LI",{});var $He=s(LA);ULe=n($He,"STRONG",{});var vna=s(ULe);wKr=r(vna,"longformer"),vna.forEach(t),AKr=r($He," \u2014 "),Nte=n($He,"A",{href:!0});var Fna=s(Nte);LKr=r(Fna,"TFLongformerForTokenClassification"),Fna.forEach(t),yKr=r($He," (Longformer model)"),$He.forEach(t),xKr=i(he),yA=n(he,"LI",{});var kHe=s(yA);HLe=n(kHe,"STRONG",{});var Tna=s(HLe);$Kr=r(Tna,"mobilebert"),Tna.forEach(t),kKr=r(kHe," \u2014 "),qte=n(kHe,"A",{href:!0});var Mna=s(qte);SKr=r(Mna,"TFMobileBertForTokenClassification"),Mna.forEach(t),RKr=r(kHe," (MobileBERT model)"),kHe.forEach(t),PKr=i(he),xA=n(he,"LI",{});var SHe=s(xA);JLe=n(SHe,"STRONG",{});var Ena=s(JLe);BKr=r(Ena,"mpnet"),Ena.forEach(t),IKr=r(SHe," \u2014 "),jte=n(SHe,"A",{href:!0});var Cna=s(jte);NKr=r(Cna,"TFMPNetForTokenClassification"),Cna.forEach(t),qKr=r(SHe," (MPNet model)"),SHe.forEach(t),jKr=i(he),$A=n(he,"LI",{});var RHe=s($A);YLe=n(RHe,"STRONG",{});var wna=s(YLe);DKr=r(wna,"rembert"),wna.forEach(t),GKr=r(RHe," \u2014 "),Dte=n(RHe,"A",{href:!0});var Ana=s(Dte);OKr=r(Ana,"TFRemBertForTokenClassification"),Ana.forEach(t),VKr=r(RHe," (RemBERT model)"),RHe.forEach(t),XKr=i(he),kA=n(he,"LI",{});var PHe=s(kA);KLe=n(PHe,"STRONG",{});var Lna=s(KLe);zKr=r(Lna,"roberta"),Lna.forEach(t),QKr=r(PHe," \u2014 "),Gte=n(PHe,"A",{href:!0});var yna=s(Gte);WKr=r(yna,"TFRobertaForTokenClassification"),yna.forEach(t),UKr=r(PHe," (RoBERTa model)"),PHe.forEach(t),HKr=i(he),SA=n(he,"LI",{});var BHe=s(SA);ZLe=n(BHe,"STRONG",{});var xna=s(ZLe);JKr=r(xna,"roformer"),xna.forEach(t),YKr=r(BHe," \u2014 "),Ote=n(BHe,"A",{href:!0});var $na=s(Ote);KKr=r($na,"TFRoFormerForTokenClassification"),$na.forEach(t),ZKr=r(BHe," (RoFormer model)"),BHe.forEach(t),eZr=i(he),RA=n(he,"LI",{});var IHe=s(RA);eye=n(IHe,"STRONG",{});var kna=s(eye);oZr=r(kna,"xlm"),kna.forEach(t),rZr=r(IHe," \u2014 "),Vte=n(IHe,"A",{href:!0});var Sna=s(Vte);tZr=r(Sna,"TFXLMForTokenClassification"),Sna.forEach(t),aZr=r(IHe," (XLM model)"),IHe.forEach(t),nZr=i(he),PA=n(he,"LI",{});var NHe=s(PA);oye=n(NHe,"STRONG",{});var Rna=s(oye);sZr=r(Rna,"xlm-roberta"),Rna.forEach(t),lZr=r(NHe," \u2014 "),Xte=n(NHe,"A",{href:!0});var Pna=s(Xte);iZr=r(Pna,"TFXLMRobertaForTokenClassification"),Pna.forEach(t),dZr=r(NHe," (XLM-RoBERTa model)"),NHe.forEach(t),cZr=i(he),BA=n(he,"LI",{});var qHe=s(BA);rye=n(qHe,"STRONG",{});var Bna=s(rye);mZr=r(Bna,"xlnet"),Bna.forEach(t),fZr=r(qHe," \u2014 "),zte=n(qHe,"A",{href:!0});var Ina=s(zte);gZr=r(Ina,"TFXLNetForTokenClassification"),Ina.forEach(t),hZr=r(qHe," (XLNet model)"),qHe.forEach(t),he.forEach(t),uZr=i(wi),T(IA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),WZe=i(m),ym=n(m,"H2",{class:!0});var dro=s(ym);NA=n(dro,"A",{id:!0,class:!0,href:!0});var Nna=s(NA);tye=n(Nna,"SPAN",{});var qna=s(tye);T(jS.$$.fragment,qna),qna.forEach(t),Nna.forEach(t),pZr=i(dro),aye=n(dro,"SPAN",{});var jna=s(aye);_Zr=r(jna,"TFAutoModelForQuestionAnswering"),jna.forEach(t),dro.forEach(t),UZe=i(m),vr=n(m,"DIV",{class:!0});var Ai=s(vr);T(DS.$$.fragment,Ai),bZr=i(Ai),xm=n(Ai,"P",{});var Iie=s(xm);vZr=r(Iie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qte=n(Iie,"A",{href:!0});var Dna=s(Qte);FZr=r(Dna,"from_pretrained()"),Dna.forEach(t),TZr=r(Iie," class method or the "),Wte=n(Iie,"A",{href:!0});var Gna=s(Wte);MZr=r(Gna,"from_config()"),Gna.forEach(t),EZr=r(Iie,` class
method.`),Iie.forEach(t),CZr=i(Ai),GS=n(Ai,"P",{});var cro=s(GS);wZr=r(cro,"This class cannot be instantiated directly using "),nye=n(cro,"CODE",{});var Ona=s(nye);AZr=r(Ona,"__init__()"),Ona.forEach(t),LZr=r(cro," (throws an error)."),cro.forEach(t),yZr=i(Ai),ta=n(Ai,"DIV",{class:!0});var K8=s(ta);T(OS.$$.fragment,K8),xZr=i(K8),sye=n(K8,"P",{});var Vna=s(sye);$Zr=r(Vna,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vna.forEach(t),kZr=i(K8),$m=n(K8,"P",{});var Nie=s($m);SZr=r(Nie,`Note:
Loading a model from its configuration file does `),lye=n(Nie,"STRONG",{});var Xna=s(lye);RZr=r(Xna,"not"),Xna.forEach(t),PZr=r(Nie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ute=n(Nie,"A",{href:!0});var zna=s(Ute);BZr=r(zna,"from_pretrained()"),zna.forEach(t),IZr=r(Nie," to load the model weights."),Nie.forEach(t),NZr=i(K8),T(qA.$$.fragment,K8),K8.forEach(t),qZr=i(Ai),Hr=n(Ai,"DIV",{class:!0});var Li=s(Hr);T(VS.$$.fragment,Li),jZr=i(Li),iye=n(Li,"P",{});var Qna=s(iye);DZr=r(Qna,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qna.forEach(t),GZr=i(Li),Nn=n(Li,"P",{});var Z8=s(Nn);OZr=r(Z8,"The model class to instantiate is selected based on the "),dye=n(Z8,"CODE",{});var Wna=s(dye);VZr=r(Wna,"model_type"),Wna.forEach(t),XZr=r(Z8,` property of the config object (either
passed as an argument or loaded from `),cye=n(Z8,"CODE",{});var Una=s(cye);zZr=r(Una,"pretrained_model_name_or_path"),Una.forEach(t),QZr=r(Z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mye=n(Z8,"CODE",{});var Hna=s(mye);WZr=r(Hna,"pretrained_model_name_or_path"),Hna.forEach(t),UZr=r(Z8,":"),Z8.forEach(t),HZr=i(Li),ce=n(Li,"UL",{});var ue=s(ce);jA=n(ue,"LI",{});var jHe=s(jA);fye=n(jHe,"STRONG",{});var Jna=s(fye);JZr=r(Jna,"albert"),Jna.forEach(t),YZr=r(jHe," \u2014 "),Hte=n(jHe,"A",{href:!0});var Yna=s(Hte);KZr=r(Yna,"TFAlbertForQuestionAnswering"),Yna.forEach(t),ZZr=r(jHe," (ALBERT model)"),jHe.forEach(t),eet=i(ue),DA=n(ue,"LI",{});var DHe=s(DA);gye=n(DHe,"STRONG",{});var Kna=s(gye);oet=r(Kna,"bert"),Kna.forEach(t),ret=r(DHe," \u2014 "),Jte=n(DHe,"A",{href:!0});var Zna=s(Jte);tet=r(Zna,"TFBertForQuestionAnswering"),Zna.forEach(t),aet=r(DHe," (BERT model)"),DHe.forEach(t),net=i(ue),GA=n(ue,"LI",{});var GHe=s(GA);hye=n(GHe,"STRONG",{});var esa=s(hye);set=r(esa,"camembert"),esa.forEach(t),iet=r(GHe," \u2014 "),Yte=n(GHe,"A",{href:!0});var osa=s(Yte);det=r(osa,"TFCamembertForQuestionAnswering"),osa.forEach(t),cet=r(GHe," (CamemBERT model)"),GHe.forEach(t),met=i(ue),OA=n(ue,"LI",{});var OHe=s(OA);uye=n(OHe,"STRONG",{});var rsa=s(uye);fet=r(rsa,"convbert"),rsa.forEach(t),get=r(OHe," \u2014 "),Kte=n(OHe,"A",{href:!0});var tsa=s(Kte);het=r(tsa,"TFConvBertForQuestionAnswering"),tsa.forEach(t),uet=r(OHe," (ConvBERT model)"),OHe.forEach(t),pet=i(ue),VA=n(ue,"LI",{});var VHe=s(VA);pye=n(VHe,"STRONG",{});var asa=s(pye);_et=r(asa,"deberta"),asa.forEach(t),bet=r(VHe," \u2014 "),Zte=n(VHe,"A",{href:!0});var nsa=s(Zte);vet=r(nsa,"TFDebertaForQuestionAnswering"),nsa.forEach(t),Fet=r(VHe," (DeBERTa model)"),VHe.forEach(t),Tet=i(ue),XA=n(ue,"LI",{});var XHe=s(XA);_ye=n(XHe,"STRONG",{});var ssa=s(_ye);Met=r(ssa,"deberta-v2"),ssa.forEach(t),Eet=r(XHe," \u2014 "),eae=n(XHe,"A",{href:!0});var lsa=s(eae);Cet=r(lsa,"TFDebertaV2ForQuestionAnswering"),lsa.forEach(t),wet=r(XHe," (DeBERTa-v2 model)"),XHe.forEach(t),Aet=i(ue),zA=n(ue,"LI",{});var zHe=s(zA);bye=n(zHe,"STRONG",{});var isa=s(bye);Let=r(isa,"distilbert"),isa.forEach(t),yet=r(zHe," \u2014 "),oae=n(zHe,"A",{href:!0});var dsa=s(oae);xet=r(dsa,"TFDistilBertForQuestionAnswering"),dsa.forEach(t),$et=r(zHe," (DistilBERT model)"),zHe.forEach(t),ket=i(ue),QA=n(ue,"LI",{});var QHe=s(QA);vye=n(QHe,"STRONG",{});var csa=s(vye);Set=r(csa,"electra"),csa.forEach(t),Ret=r(QHe," \u2014 "),rae=n(QHe,"A",{href:!0});var msa=s(rae);Pet=r(msa,"TFElectraForQuestionAnswering"),msa.forEach(t),Bet=r(QHe," (ELECTRA model)"),QHe.forEach(t),Iet=i(ue),WA=n(ue,"LI",{});var WHe=s(WA);Fye=n(WHe,"STRONG",{});var fsa=s(Fye);Net=r(fsa,"flaubert"),fsa.forEach(t),qet=r(WHe," \u2014 "),tae=n(WHe,"A",{href:!0});var gsa=s(tae);jet=r(gsa,"TFFlaubertForQuestionAnsweringSimple"),gsa.forEach(t),Det=r(WHe," (FlauBERT model)"),WHe.forEach(t),Get=i(ue),UA=n(ue,"LI",{});var UHe=s(UA);Tye=n(UHe,"STRONG",{});var hsa=s(Tye);Oet=r(hsa,"funnel"),hsa.forEach(t),Vet=r(UHe," \u2014 "),aae=n(UHe,"A",{href:!0});var usa=s(aae);Xet=r(usa,"TFFunnelForQuestionAnswering"),usa.forEach(t),zet=r(UHe," (Funnel Transformer model)"),UHe.forEach(t),Qet=i(ue),HA=n(ue,"LI",{});var HHe=s(HA);Mye=n(HHe,"STRONG",{});var psa=s(Mye);Wet=r(psa,"gptj"),psa.forEach(t),Uet=r(HHe," \u2014 "),nae=n(HHe,"A",{href:!0});var _sa=s(nae);Het=r(_sa,"TFGPTJForQuestionAnswering"),_sa.forEach(t),Jet=r(HHe," (GPT-J model)"),HHe.forEach(t),Yet=i(ue),JA=n(ue,"LI",{});var JHe=s(JA);Eye=n(JHe,"STRONG",{});var bsa=s(Eye);Ket=r(bsa,"layoutlmv3"),bsa.forEach(t),Zet=r(JHe," \u2014 "),sae=n(JHe,"A",{href:!0});var vsa=s(sae);eot=r(vsa,"TFLayoutLMv3ForQuestionAnswering"),vsa.forEach(t),oot=r(JHe," (LayoutLMv3 model)"),JHe.forEach(t),rot=i(ue),YA=n(ue,"LI",{});var YHe=s(YA);Cye=n(YHe,"STRONG",{});var Fsa=s(Cye);tot=r(Fsa,"longformer"),Fsa.forEach(t),aot=r(YHe," \u2014 "),lae=n(YHe,"A",{href:!0});var Tsa=s(lae);not=r(Tsa,"TFLongformerForQuestionAnswering"),Tsa.forEach(t),sot=r(YHe," (Longformer model)"),YHe.forEach(t),lot=i(ue),KA=n(ue,"LI",{});var KHe=s(KA);wye=n(KHe,"STRONG",{});var Msa=s(wye);iot=r(Msa,"mobilebert"),Msa.forEach(t),dot=r(KHe," \u2014 "),iae=n(KHe,"A",{href:!0});var Esa=s(iae);cot=r(Esa,"TFMobileBertForQuestionAnswering"),Esa.forEach(t),mot=r(KHe," (MobileBERT model)"),KHe.forEach(t),fot=i(ue),ZA=n(ue,"LI",{});var ZHe=s(ZA);Aye=n(ZHe,"STRONG",{});var Csa=s(Aye);got=r(Csa,"mpnet"),Csa.forEach(t),hot=r(ZHe," \u2014 "),dae=n(ZHe,"A",{href:!0});var wsa=s(dae);uot=r(wsa,"TFMPNetForQuestionAnswering"),wsa.forEach(t),pot=r(ZHe," (MPNet model)"),ZHe.forEach(t),_ot=i(ue),e6=n(ue,"LI",{});var eJe=s(e6);Lye=n(eJe,"STRONG",{});var Asa=s(Lye);bot=r(Asa,"rembert"),Asa.forEach(t),vot=r(eJe," \u2014 "),cae=n(eJe,"A",{href:!0});var Lsa=s(cae);Fot=r(Lsa,"TFRemBertForQuestionAnswering"),Lsa.forEach(t),Tot=r(eJe," (RemBERT model)"),eJe.forEach(t),Mot=i(ue),o6=n(ue,"LI",{});var oJe=s(o6);yye=n(oJe,"STRONG",{});var ysa=s(yye);Eot=r(ysa,"roberta"),ysa.forEach(t),Cot=r(oJe," \u2014 "),mae=n(oJe,"A",{href:!0});var xsa=s(mae);wot=r(xsa,"TFRobertaForQuestionAnswering"),xsa.forEach(t),Aot=r(oJe," (RoBERTa model)"),oJe.forEach(t),Lot=i(ue),r6=n(ue,"LI",{});var rJe=s(r6);xye=n(rJe,"STRONG",{});var $sa=s(xye);yot=r($sa,"roformer"),$sa.forEach(t),xot=r(rJe," \u2014 "),fae=n(rJe,"A",{href:!0});var ksa=s(fae);$ot=r(ksa,"TFRoFormerForQuestionAnswering"),ksa.forEach(t),kot=r(rJe," (RoFormer model)"),rJe.forEach(t),Sot=i(ue),t6=n(ue,"LI",{});var tJe=s(t6);$ye=n(tJe,"STRONG",{});var Ssa=s($ye);Rot=r(Ssa,"xlm"),Ssa.forEach(t),Pot=r(tJe," \u2014 "),gae=n(tJe,"A",{href:!0});var Rsa=s(gae);Bot=r(Rsa,"TFXLMForQuestionAnsweringSimple"),Rsa.forEach(t),Iot=r(tJe," (XLM model)"),tJe.forEach(t),Not=i(ue),a6=n(ue,"LI",{});var aJe=s(a6);kye=n(aJe,"STRONG",{});var Psa=s(kye);qot=r(Psa,"xlm-roberta"),Psa.forEach(t),jot=r(aJe," \u2014 "),hae=n(aJe,"A",{href:!0});var Bsa=s(hae);Dot=r(Bsa,"TFXLMRobertaForQuestionAnswering"),Bsa.forEach(t),Got=r(aJe," (XLM-RoBERTa model)"),aJe.forEach(t),Oot=i(ue),n6=n(ue,"LI",{});var nJe=s(n6);Sye=n(nJe,"STRONG",{});var Isa=s(Sye);Vot=r(Isa,"xlnet"),Isa.forEach(t),Xot=r(nJe," \u2014 "),uae=n(nJe,"A",{href:!0});var Nsa=s(uae);zot=r(Nsa,"TFXLNetForQuestionAnsweringSimple"),Nsa.forEach(t),Qot=r(nJe," (XLNet model)"),nJe.forEach(t),ue.forEach(t),Wot=i(Li),T(s6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),HZe=i(m),km=n(m,"H2",{class:!0});var mro=s(km);l6=n(mro,"A",{id:!0,class:!0,href:!0});var qsa=s(l6);Rye=n(qsa,"SPAN",{});var jsa=s(Rye);T(XS.$$.fragment,jsa),jsa.forEach(t),qsa.forEach(t),Uot=i(mro),Pye=n(mro,"SPAN",{});var Dsa=s(Pye);Hot=r(Dsa,"TFAutoModelForVision2Seq"),Dsa.forEach(t),mro.forEach(t),JZe=i(m),Fr=n(m,"DIV",{class:!0});var yi=s(Fr);T(zS.$$.fragment,yi),Jot=i(yi),Sm=n(yi,"P",{});var qie=s(Sm);Yot=r(qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pae=n(qie,"A",{href:!0});var Gsa=s(pae);Kot=r(Gsa,"from_pretrained()"),Gsa.forEach(t),Zot=r(qie," class method or the "),_ae=n(qie,"A",{href:!0});var Osa=s(_ae);ert=r(Osa,"from_config()"),Osa.forEach(t),ort=r(qie,` class
method.`),qie.forEach(t),rrt=i(yi),QS=n(yi,"P",{});var fro=s(QS);trt=r(fro,"This class cannot be instantiated directly using "),Bye=n(fro,"CODE",{});var Vsa=s(Bye);art=r(Vsa,"__init__()"),Vsa.forEach(t),nrt=r(fro," (throws an error)."),fro.forEach(t),srt=i(yi),aa=n(yi,"DIV",{class:!0});var e9=s(aa);T(WS.$$.fragment,e9),lrt=i(e9),Iye=n(e9,"P",{});var Xsa=s(Iye);irt=r(Xsa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xsa.forEach(t),drt=i(e9),Rm=n(e9,"P",{});var jie=s(Rm);crt=r(jie,`Note:
Loading a model from its configuration file does `),Nye=n(jie,"STRONG",{});var zsa=s(Nye);mrt=r(zsa,"not"),zsa.forEach(t),frt=r(jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),bae=n(jie,"A",{href:!0});var Qsa=s(bae);grt=r(Qsa,"from_pretrained()"),Qsa.forEach(t),hrt=r(jie," to load the model weights."),jie.forEach(t),urt=i(e9),T(i6.$$.fragment,e9),e9.forEach(t),prt=i(yi),Jr=n(yi,"DIV",{class:!0});var xi=s(Jr);T(US.$$.fragment,xi),_rt=i(xi),qye=n(xi,"P",{});var Wsa=s(qye);brt=r(Wsa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wsa.forEach(t),vrt=i(xi),qn=n(xi,"P",{});var o9=s(qn);Frt=r(o9,"The model class to instantiate is selected based on the "),jye=n(o9,"CODE",{});var Usa=s(jye);Trt=r(Usa,"model_type"),Usa.forEach(t),Mrt=r(o9,` property of the config object (either
passed as an argument or loaded from `),Dye=n(o9,"CODE",{});var Hsa=s(Dye);Ert=r(Hsa,"pretrained_model_name_or_path"),Hsa.forEach(t),Crt=r(o9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gye=n(o9,"CODE",{});var Jsa=s(Gye);wrt=r(Jsa,"pretrained_model_name_or_path"),Jsa.forEach(t),Art=r(o9,":"),o9.forEach(t),Lrt=i(xi),Oye=n(xi,"UL",{});var Ysa=s(Oye);d6=n(Ysa,"LI",{});var sJe=s(d6);Vye=n(sJe,"STRONG",{});var Ksa=s(Vye);yrt=r(Ksa,"vision-encoder-decoder"),Ksa.forEach(t),xrt=r(sJe," \u2014 "),vae=n(sJe,"A",{href:!0});var Zsa=s(vae);$rt=r(Zsa,"TFVisionEncoderDecoderModel"),Zsa.forEach(t),krt=r(sJe," (Vision Encoder decoder model)"),sJe.forEach(t),Ysa.forEach(t),Srt=i(xi),T(c6.$$.fragment,xi),xi.forEach(t),yi.forEach(t),YZe=i(m),Pm=n(m,"H2",{class:!0});var gro=s(Pm);m6=n(gro,"A",{id:!0,class:!0,href:!0});var ela=s(m6);Xye=n(ela,"SPAN",{});var ola=s(Xye);T(HS.$$.fragment,ola),ola.forEach(t),ela.forEach(t),Rrt=i(gro),zye=n(gro,"SPAN",{});var rla=s(zye);Prt=r(rla,"TFAutoModelForSpeechSeq2Seq"),rla.forEach(t),gro.forEach(t),KZe=i(m),Tr=n(m,"DIV",{class:!0});var $i=s(Tr);T(JS.$$.fragment,$i),Brt=i($i),Bm=n($i,"P",{});var Die=s(Bm);Irt=r(Die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fae=n(Die,"A",{href:!0});var tla=s(Fae);Nrt=r(tla,"from_pretrained()"),tla.forEach(t),qrt=r(Die," class method or the "),Tae=n(Die,"A",{href:!0});var ala=s(Tae);jrt=r(ala,"from_config()"),ala.forEach(t),Drt=r(Die,` class
method.`),Die.forEach(t),Grt=i($i),YS=n($i,"P",{});var hro=s(YS);Ort=r(hro,"This class cannot be instantiated directly using "),Qye=n(hro,"CODE",{});var nla=s(Qye);Vrt=r(nla,"__init__()"),nla.forEach(t),Xrt=r(hro," (throws an error)."),hro.forEach(t),zrt=i($i),na=n($i,"DIV",{class:!0});var r9=s(na);T(KS.$$.fragment,r9),Qrt=i(r9),Wye=n(r9,"P",{});var sla=s(Wye);Wrt=r(sla,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sla.forEach(t),Urt=i(r9),Im=n(r9,"P",{});var Gie=s(Im);Hrt=r(Gie,`Note:
Loading a model from its configuration file does `),Uye=n(Gie,"STRONG",{});var lla=s(Uye);Jrt=r(lla,"not"),lla.forEach(t),Yrt=r(Gie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mae=n(Gie,"A",{href:!0});var ila=s(Mae);Krt=r(ila,"from_pretrained()"),ila.forEach(t),Zrt=r(Gie," to load the model weights."),Gie.forEach(t),ett=i(r9),T(f6.$$.fragment,r9),r9.forEach(t),ott=i($i),Yr=n($i,"DIV",{class:!0});var ki=s(Yr);T(ZS.$$.fragment,ki),rtt=i(ki),Hye=n(ki,"P",{});var dla=s(Hye);ttt=r(dla,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dla.forEach(t),att=i(ki),jn=n(ki,"P",{});var t9=s(jn);ntt=r(t9,"The model class to instantiate is selected based on the "),Jye=n(t9,"CODE",{});var cla=s(Jye);stt=r(cla,"model_type"),cla.forEach(t),ltt=r(t9,` property of the config object (either
passed as an argument or loaded from `),Yye=n(t9,"CODE",{});var mla=s(Yye);itt=r(mla,"pretrained_model_name_or_path"),mla.forEach(t),dtt=r(t9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kye=n(t9,"CODE",{});var fla=s(Kye);ctt=r(fla,"pretrained_model_name_or_path"),fla.forEach(t),mtt=r(t9,":"),t9.forEach(t),ftt=i(ki),Zye=n(ki,"UL",{});var gla=s(Zye);g6=n(gla,"LI",{});var lJe=s(g6);e8e=n(lJe,"STRONG",{});var hla=s(e8e);gtt=r(hla,"speech_to_text"),hla.forEach(t),htt=r(lJe," \u2014 "),Eae=n(lJe,"A",{href:!0});var ula=s(Eae);utt=r(ula,"TFSpeech2TextForConditionalGeneration"),ula.forEach(t),ptt=r(lJe," (Speech2Text model)"),lJe.forEach(t),gla.forEach(t),_tt=i(ki),T(h6.$$.fragment,ki),ki.forEach(t),$i.forEach(t),ZZe=i(m),Nm=n(m,"H2",{class:!0});var uro=s(Nm);u6=n(uro,"A",{id:!0,class:!0,href:!0});var pla=s(u6);o8e=n(pla,"SPAN",{});var _la=s(o8e);T(eR.$$.fragment,_la),_la.forEach(t),pla.forEach(t),btt=i(uro),r8e=n(uro,"SPAN",{});var bla=s(r8e);vtt=r(bla,"FlaxAutoModel"),bla.forEach(t),uro.forEach(t),eeo=i(m),Mr=n(m,"DIV",{class:!0});var Si=s(Mr);T(oR.$$.fragment,Si),Ftt=i(Si),qm=n(Si,"P",{});var Oie=s(qm);Ttt=r(Oie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Cae=n(Oie,"A",{href:!0});var vla=s(Cae);Mtt=r(vla,"from_pretrained()"),vla.forEach(t),Ett=r(Oie," class method or the "),wae=n(Oie,"A",{href:!0});var Fla=s(wae);Ctt=r(Fla,"from_config()"),Fla.forEach(t),wtt=r(Oie,` class
method.`),Oie.forEach(t),Att=i(Si),rR=n(Si,"P",{});var pro=s(rR);Ltt=r(pro,"This class cannot be instantiated directly using "),t8e=n(pro,"CODE",{});var Tla=s(t8e);ytt=r(Tla,"__init__()"),Tla.forEach(t),xtt=r(pro," (throws an error)."),pro.forEach(t),$tt=i(Si),sa=n(Si,"DIV",{class:!0});var a9=s(sa);T(tR.$$.fragment,a9),ktt=i(a9),a8e=n(a9,"P",{});var Mla=s(a8e);Stt=r(Mla,"Instantiates one of the base model classes of the library from a configuration."),Mla.forEach(t),Rtt=i(a9),jm=n(a9,"P",{});var Vie=s(jm);Ptt=r(Vie,`Note:
Loading a model from its configuration file does `),n8e=n(Vie,"STRONG",{});var Ela=s(n8e);Btt=r(Ela,"not"),Ela.forEach(t),Itt=r(Vie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aae=n(Vie,"A",{href:!0});var Cla=s(Aae);Ntt=r(Cla,"from_pretrained()"),Cla.forEach(t),qtt=r(Vie," to load the model weights."),Vie.forEach(t),jtt=i(a9),T(p6.$$.fragment,a9),a9.forEach(t),Dtt=i(Si),Kr=n(Si,"DIV",{class:!0});var Ri=s(Kr);T(aR.$$.fragment,Ri),Gtt=i(Ri),s8e=n(Ri,"P",{});var wla=s(s8e);Ott=r(wla,"Instantiate one of the base model classes of the library from a pretrained model."),wla.forEach(t),Vtt=i(Ri),Dn=n(Ri,"P",{});var n9=s(Dn);Xtt=r(n9,"The model class to instantiate is selected based on the "),l8e=n(n9,"CODE",{});var Ala=s(l8e);ztt=r(Ala,"model_type"),Ala.forEach(t),Qtt=r(n9,` property of the config object (either
passed as an argument or loaded from `),i8e=n(n9,"CODE",{});var Lla=s(i8e);Wtt=r(Lla,"pretrained_model_name_or_path"),Lla.forEach(t),Utt=r(n9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=n(n9,"CODE",{});var yla=s(d8e);Htt=r(yla,"pretrained_model_name_or_path"),yla.forEach(t),Jtt=r(n9,":"),n9.forEach(t),Ytt=i(Ri),te=n(Ri,"UL",{});var ne=s(te);_6=n(ne,"LI",{});var iJe=s(_6);c8e=n(iJe,"STRONG",{});var xla=s(c8e);Ktt=r(xla,"albert"),xla.forEach(t),Ztt=r(iJe," \u2014 "),Lae=n(iJe,"A",{href:!0});var $la=s(Lae);eat=r($la,"FlaxAlbertModel"),$la.forEach(t),oat=r(iJe," (ALBERT model)"),iJe.forEach(t),rat=i(ne),b6=n(ne,"LI",{});var dJe=s(b6);m8e=n(dJe,"STRONG",{});var kla=s(m8e);tat=r(kla,"bart"),kla.forEach(t),aat=r(dJe," \u2014 "),yae=n(dJe,"A",{href:!0});var Sla=s(yae);nat=r(Sla,"FlaxBartModel"),Sla.forEach(t),sat=r(dJe," (BART model)"),dJe.forEach(t),lat=i(ne),v6=n(ne,"LI",{});var cJe=s(v6);f8e=n(cJe,"STRONG",{});var Rla=s(f8e);iat=r(Rla,"beit"),Rla.forEach(t),dat=r(cJe," \u2014 "),xae=n(cJe,"A",{href:!0});var Pla=s(xae);cat=r(Pla,"FlaxBeitModel"),Pla.forEach(t),mat=r(cJe," (BEiT model)"),cJe.forEach(t),fat=i(ne),F6=n(ne,"LI",{});var mJe=s(F6);g8e=n(mJe,"STRONG",{});var Bla=s(g8e);gat=r(Bla,"bert"),Bla.forEach(t),hat=r(mJe," \u2014 "),$ae=n(mJe,"A",{href:!0});var Ila=s($ae);uat=r(Ila,"FlaxBertModel"),Ila.forEach(t),pat=r(mJe," (BERT model)"),mJe.forEach(t),_at=i(ne),T6=n(ne,"LI",{});var fJe=s(T6);h8e=n(fJe,"STRONG",{});var Nla=s(h8e);bat=r(Nla,"big_bird"),Nla.forEach(t),vat=r(fJe," \u2014 "),kae=n(fJe,"A",{href:!0});var qla=s(kae);Fat=r(qla,"FlaxBigBirdModel"),qla.forEach(t),Tat=r(fJe," (BigBird model)"),fJe.forEach(t),Mat=i(ne),M6=n(ne,"LI",{});var gJe=s(M6);u8e=n(gJe,"STRONG",{});var jla=s(u8e);Eat=r(jla,"blenderbot"),jla.forEach(t),Cat=r(gJe," \u2014 "),Sae=n(gJe,"A",{href:!0});var Dla=s(Sae);wat=r(Dla,"FlaxBlenderbotModel"),Dla.forEach(t),Aat=r(gJe," (Blenderbot model)"),gJe.forEach(t),Lat=i(ne),E6=n(ne,"LI",{});var hJe=s(E6);p8e=n(hJe,"STRONG",{});var Gla=s(p8e);yat=r(Gla,"blenderbot-small"),Gla.forEach(t),xat=r(hJe," \u2014 "),Rae=n(hJe,"A",{href:!0});var Ola=s(Rae);$at=r(Ola,"FlaxBlenderbotSmallModel"),Ola.forEach(t),kat=r(hJe," (BlenderbotSmall model)"),hJe.forEach(t),Sat=i(ne),C6=n(ne,"LI",{});var uJe=s(C6);_8e=n(uJe,"STRONG",{});var Vla=s(_8e);Rat=r(Vla,"clip"),Vla.forEach(t),Pat=r(uJe," \u2014 "),Pae=n(uJe,"A",{href:!0});var Xla=s(Pae);Bat=r(Xla,"FlaxCLIPModel"),Xla.forEach(t),Iat=r(uJe," (CLIP model)"),uJe.forEach(t),Nat=i(ne),w6=n(ne,"LI",{});var pJe=s(w6);b8e=n(pJe,"STRONG",{});var zla=s(b8e);qat=r(zla,"distilbert"),zla.forEach(t),jat=r(pJe," \u2014 "),Bae=n(pJe,"A",{href:!0});var Qla=s(Bae);Dat=r(Qla,"FlaxDistilBertModel"),Qla.forEach(t),Gat=r(pJe," (DistilBERT model)"),pJe.forEach(t),Oat=i(ne),A6=n(ne,"LI",{});var _Je=s(A6);v8e=n(_Je,"STRONG",{});var Wla=s(v8e);Vat=r(Wla,"electra"),Wla.forEach(t),Xat=r(_Je," \u2014 "),Iae=n(_Je,"A",{href:!0});var Ula=s(Iae);zat=r(Ula,"FlaxElectraModel"),Ula.forEach(t),Qat=r(_Je," (ELECTRA model)"),_Je.forEach(t),Wat=i(ne),L6=n(ne,"LI",{});var bJe=s(L6);F8e=n(bJe,"STRONG",{});var Hla=s(F8e);Uat=r(Hla,"gpt2"),Hla.forEach(t),Hat=r(bJe," \u2014 "),Nae=n(bJe,"A",{href:!0});var Jla=s(Nae);Jat=r(Jla,"FlaxGPT2Model"),Jla.forEach(t),Yat=r(bJe," (OpenAI GPT-2 model)"),bJe.forEach(t),Kat=i(ne),y6=n(ne,"LI",{});var vJe=s(y6);T8e=n(vJe,"STRONG",{});var Yla=s(T8e);Zat=r(Yla,"gpt_neo"),Yla.forEach(t),ent=r(vJe," \u2014 "),qae=n(vJe,"A",{href:!0});var Kla=s(qae);ont=r(Kla,"FlaxGPTNeoModel"),Kla.forEach(t),rnt=r(vJe," (GPT Neo model)"),vJe.forEach(t),tnt=i(ne),x6=n(ne,"LI",{});var FJe=s(x6);M8e=n(FJe,"STRONG",{});var Zla=s(M8e);ant=r(Zla,"gptj"),Zla.forEach(t),nnt=r(FJe," \u2014 "),jae=n(FJe,"A",{href:!0});var eia=s(jae);snt=r(eia,"FlaxGPTJModel"),eia.forEach(t),lnt=r(FJe," (GPT-J model)"),FJe.forEach(t),int=i(ne),$6=n(ne,"LI",{});var TJe=s($6);E8e=n(TJe,"STRONG",{});var oia=s(E8e);dnt=r(oia,"longt5"),oia.forEach(t),cnt=r(TJe," \u2014 "),Dae=n(TJe,"A",{href:!0});var ria=s(Dae);mnt=r(ria,"FlaxLongT5Model"),ria.forEach(t),fnt=r(TJe," (LongT5 model)"),TJe.forEach(t),gnt=i(ne),k6=n(ne,"LI",{});var MJe=s(k6);C8e=n(MJe,"STRONG",{});var tia=s(C8e);hnt=r(tia,"marian"),tia.forEach(t),unt=r(MJe," \u2014 "),Gae=n(MJe,"A",{href:!0});var aia=s(Gae);pnt=r(aia,"FlaxMarianModel"),aia.forEach(t),_nt=r(MJe," (Marian model)"),MJe.forEach(t),bnt=i(ne),S6=n(ne,"LI",{});var EJe=s(S6);w8e=n(EJe,"STRONG",{});var nia=s(w8e);vnt=r(nia,"mbart"),nia.forEach(t),Fnt=r(EJe," \u2014 "),Oae=n(EJe,"A",{href:!0});var sia=s(Oae);Tnt=r(sia,"FlaxMBartModel"),sia.forEach(t),Mnt=r(EJe," (mBART model)"),EJe.forEach(t),Ent=i(ne),R6=n(ne,"LI",{});var CJe=s(R6);A8e=n(CJe,"STRONG",{});var lia=s(A8e);Cnt=r(lia,"mt5"),lia.forEach(t),wnt=r(CJe," \u2014 "),Vae=n(CJe,"A",{href:!0});var iia=s(Vae);Ant=r(iia,"FlaxMT5Model"),iia.forEach(t),Lnt=r(CJe," (MT5 model)"),CJe.forEach(t),ynt=i(ne),P6=n(ne,"LI",{});var wJe=s(P6);L8e=n(wJe,"STRONG",{});var dia=s(L8e);xnt=r(dia,"opt"),dia.forEach(t),$nt=r(wJe," \u2014 "),Xae=n(wJe,"A",{href:!0});var cia=s(Xae);knt=r(cia,"FlaxOPTModel"),cia.forEach(t),Snt=r(wJe," (OPT model)"),wJe.forEach(t),Rnt=i(ne),B6=n(ne,"LI",{});var AJe=s(B6);y8e=n(AJe,"STRONG",{});var mia=s(y8e);Pnt=r(mia,"pegasus"),mia.forEach(t),Bnt=r(AJe," \u2014 "),zae=n(AJe,"A",{href:!0});var fia=s(zae);Int=r(fia,"FlaxPegasusModel"),fia.forEach(t),Nnt=r(AJe," (Pegasus model)"),AJe.forEach(t),qnt=i(ne),I6=n(ne,"LI",{});var LJe=s(I6);x8e=n(LJe,"STRONG",{});var gia=s(x8e);jnt=r(gia,"roberta"),gia.forEach(t),Dnt=r(LJe," \u2014 "),Qae=n(LJe,"A",{href:!0});var hia=s(Qae);Gnt=r(hia,"FlaxRobertaModel"),hia.forEach(t),Ont=r(LJe," (RoBERTa model)"),LJe.forEach(t),Vnt=i(ne),N6=n(ne,"LI",{});var yJe=s(N6);$8e=n(yJe,"STRONG",{});var uia=s($8e);Xnt=r(uia,"roformer"),uia.forEach(t),znt=r(yJe," \u2014 "),Wae=n(yJe,"A",{href:!0});var pia=s(Wae);Qnt=r(pia,"FlaxRoFormerModel"),pia.forEach(t),Wnt=r(yJe," (RoFormer model)"),yJe.forEach(t),Unt=i(ne),q6=n(ne,"LI",{});var xJe=s(q6);k8e=n(xJe,"STRONG",{});var _ia=s(k8e);Hnt=r(_ia,"t5"),_ia.forEach(t),Jnt=r(xJe," \u2014 "),Uae=n(xJe,"A",{href:!0});var bia=s(Uae);Ynt=r(bia,"FlaxT5Model"),bia.forEach(t),Knt=r(xJe," (T5 model)"),xJe.forEach(t),Znt=i(ne),j6=n(ne,"LI",{});var $Je=s(j6);S8e=n($Je,"STRONG",{});var via=s(S8e);est=r(via,"vision-text-dual-encoder"),via.forEach(t),ost=r($Je," \u2014 "),Hae=n($Je,"A",{href:!0});var Fia=s(Hae);rst=r(Fia,"FlaxVisionTextDualEncoderModel"),Fia.forEach(t),tst=r($Je," (VisionTextDualEncoder model)"),$Je.forEach(t),ast=i(ne),D6=n(ne,"LI",{});var kJe=s(D6);R8e=n(kJe,"STRONG",{});var Tia=s(R8e);nst=r(Tia,"vit"),Tia.forEach(t),sst=r(kJe," \u2014 "),Jae=n(kJe,"A",{href:!0});var Mia=s(Jae);lst=r(Mia,"FlaxViTModel"),Mia.forEach(t),ist=r(kJe," (ViT model)"),kJe.forEach(t),dst=i(ne),G6=n(ne,"LI",{});var SJe=s(G6);P8e=n(SJe,"STRONG",{});var Eia=s(P8e);cst=r(Eia,"wav2vec2"),Eia.forEach(t),mst=r(SJe," \u2014 "),Yae=n(SJe,"A",{href:!0});var Cia=s(Yae);fst=r(Cia,"FlaxWav2Vec2Model"),Cia.forEach(t),gst=r(SJe," (Wav2Vec2 model)"),SJe.forEach(t),hst=i(ne),O6=n(ne,"LI",{});var RJe=s(O6);B8e=n(RJe,"STRONG",{});var wia=s(B8e);ust=r(wia,"xglm"),wia.forEach(t),pst=r(RJe," \u2014 "),Kae=n(RJe,"A",{href:!0});var Aia=s(Kae);_st=r(Aia,"FlaxXGLMModel"),Aia.forEach(t),bst=r(RJe," (XGLM model)"),RJe.forEach(t),vst=i(ne),V6=n(ne,"LI",{});var PJe=s(V6);I8e=n(PJe,"STRONG",{});var Lia=s(I8e);Fst=r(Lia,"xlm-roberta"),Lia.forEach(t),Tst=r(PJe," \u2014 "),Zae=n(PJe,"A",{href:!0});var yia=s(Zae);Mst=r(yia,"FlaxXLMRobertaModel"),yia.forEach(t),Est=r(PJe," (XLM-RoBERTa model)"),PJe.forEach(t),ne.forEach(t),Cst=i(Ri),T(X6.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),oeo=i(m),Dm=n(m,"H2",{class:!0});var _ro=s(Dm);z6=n(_ro,"A",{id:!0,class:!0,href:!0});var xia=s(z6);N8e=n(xia,"SPAN",{});var $ia=s(N8e);T(nR.$$.fragment,$ia),$ia.forEach(t),xia.forEach(t),wst=i(_ro),q8e=n(_ro,"SPAN",{});var kia=s(q8e);Ast=r(kia,"FlaxAutoModelForCausalLM"),kia.forEach(t),_ro.forEach(t),reo=i(m),Er=n(m,"DIV",{class:!0});var Pi=s(Er);T(sR.$$.fragment,Pi),Lst=i(Pi),Gm=n(Pi,"P",{});var Xie=s(Gm);yst=r(Xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ene=n(Xie,"A",{href:!0});var Sia=s(ene);xst=r(Sia,"from_pretrained()"),Sia.forEach(t),$st=r(Xie," class method or the "),one=n(Xie,"A",{href:!0});var Ria=s(one);kst=r(Ria,"from_config()"),Ria.forEach(t),Sst=r(Xie,` class
method.`),Xie.forEach(t),Rst=i(Pi),lR=n(Pi,"P",{});var bro=s(lR);Pst=r(bro,"This class cannot be instantiated directly using "),j8e=n(bro,"CODE",{});var Pia=s(j8e);Bst=r(Pia,"__init__()"),Pia.forEach(t),Ist=r(bro," (throws an error)."),bro.forEach(t),Nst=i(Pi),la=n(Pi,"DIV",{class:!0});var s9=s(la);T(iR.$$.fragment,s9),qst=i(s9),D8e=n(s9,"P",{});var Bia=s(D8e);jst=r(Bia,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bia.forEach(t),Dst=i(s9),Om=n(s9,"P",{});var zie=s(Om);Gst=r(zie,`Note:
Loading a model from its configuration file does `),G8e=n(zie,"STRONG",{});var Iia=s(G8e);Ost=r(Iia,"not"),Iia.forEach(t),Vst=r(zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),rne=n(zie,"A",{href:!0});var Nia=s(rne);Xst=r(Nia,"from_pretrained()"),Nia.forEach(t),zst=r(zie," to load the model weights."),zie.forEach(t),Qst=i(s9),T(Q6.$$.fragment,s9),s9.forEach(t),Wst=i(Pi),Zr=n(Pi,"DIV",{class:!0});var Bi=s(Zr);T(dR.$$.fragment,Bi),Ust=i(Bi),O8e=n(Bi,"P",{});var qia=s(O8e);Hst=r(qia,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qia.forEach(t),Jst=i(Bi),Gn=n(Bi,"P",{});var l9=s(Gn);Yst=r(l9,"The model class to instantiate is selected based on the "),V8e=n(l9,"CODE",{});var jia=s(V8e);Kst=r(jia,"model_type"),jia.forEach(t),Zst=r(l9,` property of the config object (either
passed as an argument or loaded from `),X8e=n(l9,"CODE",{});var Dia=s(X8e);elt=r(Dia,"pretrained_model_name_or_path"),Dia.forEach(t),olt=r(l9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=n(l9,"CODE",{});var Gia=s(z8e);rlt=r(Gia,"pretrained_model_name_or_path"),Gia.forEach(t),tlt=r(l9,":"),l9.forEach(t),alt=i(Bi),xe=n(Bi,"UL",{});var qe=s(xe);W6=n(qe,"LI",{});var BJe=s(W6);Q8e=n(BJe,"STRONG",{});var Oia=s(Q8e);nlt=r(Oia,"bart"),Oia.forEach(t),slt=r(BJe," \u2014 "),tne=n(BJe,"A",{href:!0});var Via=s(tne);llt=r(Via,"FlaxBartForCausalLM"),Via.forEach(t),ilt=r(BJe," (BART model)"),BJe.forEach(t),dlt=i(qe),U6=n(qe,"LI",{});var IJe=s(U6);W8e=n(IJe,"STRONG",{});var Xia=s(W8e);clt=r(Xia,"bert"),Xia.forEach(t),mlt=r(IJe," \u2014 "),ane=n(IJe,"A",{href:!0});var zia=s(ane);flt=r(zia,"FlaxBertForCausalLM"),zia.forEach(t),glt=r(IJe," (BERT model)"),IJe.forEach(t),hlt=i(qe),H6=n(qe,"LI",{});var NJe=s(H6);U8e=n(NJe,"STRONG",{});var Qia=s(U8e);ult=r(Qia,"big_bird"),Qia.forEach(t),plt=r(NJe," \u2014 "),nne=n(NJe,"A",{href:!0});var Wia=s(nne);_lt=r(Wia,"FlaxBigBirdForCausalLM"),Wia.forEach(t),blt=r(NJe," (BigBird model)"),NJe.forEach(t),vlt=i(qe),J6=n(qe,"LI",{});var qJe=s(J6);H8e=n(qJe,"STRONG",{});var Uia=s(H8e);Flt=r(Uia,"electra"),Uia.forEach(t),Tlt=r(qJe," \u2014 "),sne=n(qJe,"A",{href:!0});var Hia=s(sne);Mlt=r(Hia,"FlaxElectraForCausalLM"),Hia.forEach(t),Elt=r(qJe," (ELECTRA model)"),qJe.forEach(t),Clt=i(qe),Y6=n(qe,"LI",{});var jJe=s(Y6);J8e=n(jJe,"STRONG",{});var Jia=s(J8e);wlt=r(Jia,"gpt2"),Jia.forEach(t),Alt=r(jJe," \u2014 "),lne=n(jJe,"A",{href:!0});var Yia=s(lne);Llt=r(Yia,"FlaxGPT2LMHeadModel"),Yia.forEach(t),ylt=r(jJe," (OpenAI GPT-2 model)"),jJe.forEach(t),xlt=i(qe),K6=n(qe,"LI",{});var DJe=s(K6);Y8e=n(DJe,"STRONG",{});var Kia=s(Y8e);$lt=r(Kia,"gpt_neo"),Kia.forEach(t),klt=r(DJe," \u2014 "),ine=n(DJe,"A",{href:!0});var Zia=s(ine);Slt=r(Zia,"FlaxGPTNeoForCausalLM"),Zia.forEach(t),Rlt=r(DJe," (GPT Neo model)"),DJe.forEach(t),Plt=i(qe),Z6=n(qe,"LI",{});var GJe=s(Z6);K8e=n(GJe,"STRONG",{});var eda=s(K8e);Blt=r(eda,"gptj"),eda.forEach(t),Ilt=r(GJe," \u2014 "),dne=n(GJe,"A",{href:!0});var oda=s(dne);Nlt=r(oda,"FlaxGPTJForCausalLM"),oda.forEach(t),qlt=r(GJe," (GPT-J model)"),GJe.forEach(t),jlt=i(qe),e7=n(qe,"LI",{});var OJe=s(e7);Z8e=n(OJe,"STRONG",{});var rda=s(Z8e);Dlt=r(rda,"opt"),rda.forEach(t),Glt=r(OJe," \u2014 "),cne=n(OJe,"A",{href:!0});var tda=s(cne);Olt=r(tda,"FlaxOPTForCausalLM"),tda.forEach(t),Vlt=r(OJe," (OPT model)"),OJe.forEach(t),Xlt=i(qe),o7=n(qe,"LI",{});var VJe=s(o7);e9e=n(VJe,"STRONG",{});var ada=s(e9e);zlt=r(ada,"roberta"),ada.forEach(t),Qlt=r(VJe," \u2014 "),mne=n(VJe,"A",{href:!0});var nda=s(mne);Wlt=r(nda,"FlaxRobertaForCausalLM"),nda.forEach(t),Ult=r(VJe," (RoBERTa model)"),VJe.forEach(t),Hlt=i(qe),r7=n(qe,"LI",{});var XJe=s(r7);o9e=n(XJe,"STRONG",{});var sda=s(o9e);Jlt=r(sda,"xglm"),sda.forEach(t),Ylt=r(XJe," \u2014 "),fne=n(XJe,"A",{href:!0});var lda=s(fne);Klt=r(lda,"FlaxXGLMForCausalLM"),lda.forEach(t),Zlt=r(XJe," (XGLM model)"),XJe.forEach(t),qe.forEach(t),eit=i(Bi),T(t7.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),teo=i(m),Vm=n(m,"H2",{class:!0});var vro=s(Vm);a7=n(vro,"A",{id:!0,class:!0,href:!0});var ida=s(a7);r9e=n(ida,"SPAN",{});var dda=s(r9e);T(cR.$$.fragment,dda),dda.forEach(t),ida.forEach(t),oit=i(vro),t9e=n(vro,"SPAN",{});var cda=s(t9e);rit=r(cda,"FlaxAutoModelForPreTraining"),cda.forEach(t),vro.forEach(t),aeo=i(m),Cr=n(m,"DIV",{class:!0});var Ii=s(Cr);T(mR.$$.fragment,Ii),tit=i(Ii),Xm=n(Ii,"P",{});var Qie=s(Xm);ait=r(Qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gne=n(Qie,"A",{href:!0});var mda=s(gne);nit=r(mda,"from_pretrained()"),mda.forEach(t),sit=r(Qie," class method or the "),hne=n(Qie,"A",{href:!0});var fda=s(hne);lit=r(fda,"from_config()"),fda.forEach(t),iit=r(Qie,` class
method.`),Qie.forEach(t),dit=i(Ii),fR=n(Ii,"P",{});var Fro=s(fR);cit=r(Fro,"This class cannot be instantiated directly using "),a9e=n(Fro,"CODE",{});var gda=s(a9e);mit=r(gda,"__init__()"),gda.forEach(t),fit=r(Fro," (throws an error)."),Fro.forEach(t),git=i(Ii),ia=n(Ii,"DIV",{class:!0});var i9=s(ia);T(gR.$$.fragment,i9),hit=i(i9),n9e=n(i9,"P",{});var hda=s(n9e);uit=r(hda,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hda.forEach(t),pit=i(i9),zm=n(i9,"P",{});var Wie=s(zm);_it=r(Wie,`Note:
Loading a model from its configuration file does `),s9e=n(Wie,"STRONG",{});var uda=s(s9e);bit=r(uda,"not"),uda.forEach(t),vit=r(Wie,` load the model weights. It only affects the
model\u2019s configuration. Use `),une=n(Wie,"A",{href:!0});var pda=s(une);Fit=r(pda,"from_pretrained()"),pda.forEach(t),Tit=r(Wie," to load the model weights."),Wie.forEach(t),Mit=i(i9),T(n7.$$.fragment,i9),i9.forEach(t),Eit=i(Ii),et=n(Ii,"DIV",{class:!0});var Ni=s(et);T(hR.$$.fragment,Ni),Cit=i(Ni),l9e=n(Ni,"P",{});var _da=s(l9e);wit=r(_da,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_da.forEach(t),Ait=i(Ni),On=n(Ni,"P",{});var d9=s(On);Lit=r(d9,"The model class to instantiate is selected based on the "),i9e=n(d9,"CODE",{});var bda=s(i9e);yit=r(bda,"model_type"),bda.forEach(t),xit=r(d9,` property of the config object (either
passed as an argument or loaded from `),d9e=n(d9,"CODE",{});var vda=s(d9e);$it=r(vda,"pretrained_model_name_or_path"),vda.forEach(t),kit=r(d9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=n(d9,"CODE",{});var Fda=s(c9e);Sit=r(Fda,"pretrained_model_name_or_path"),Fda.forEach(t),Rit=r(d9,":"),d9.forEach(t),Pit=i(Ni),Ee=n(Ni,"UL",{});var we=s(Ee);s7=n(we,"LI",{});var zJe=s(s7);m9e=n(zJe,"STRONG",{});var Tda=s(m9e);Bit=r(Tda,"albert"),Tda.forEach(t),Iit=r(zJe," \u2014 "),pne=n(zJe,"A",{href:!0});var Mda=s(pne);Nit=r(Mda,"FlaxAlbertForPreTraining"),Mda.forEach(t),qit=r(zJe," (ALBERT model)"),zJe.forEach(t),jit=i(we),l7=n(we,"LI",{});var QJe=s(l7);f9e=n(QJe,"STRONG",{});var Eda=s(f9e);Dit=r(Eda,"bart"),Eda.forEach(t),Git=r(QJe," \u2014 "),_ne=n(QJe,"A",{href:!0});var Cda=s(_ne);Oit=r(Cda,"FlaxBartForConditionalGeneration"),Cda.forEach(t),Vit=r(QJe," (BART model)"),QJe.forEach(t),Xit=i(we),i7=n(we,"LI",{});var WJe=s(i7);g9e=n(WJe,"STRONG",{});var wda=s(g9e);zit=r(wda,"bert"),wda.forEach(t),Qit=r(WJe," \u2014 "),bne=n(WJe,"A",{href:!0});var Ada=s(bne);Wit=r(Ada,"FlaxBertForPreTraining"),Ada.forEach(t),Uit=r(WJe," (BERT model)"),WJe.forEach(t),Hit=i(we),d7=n(we,"LI",{});var UJe=s(d7);h9e=n(UJe,"STRONG",{});var Lda=s(h9e);Jit=r(Lda,"big_bird"),Lda.forEach(t),Yit=r(UJe," \u2014 "),vne=n(UJe,"A",{href:!0});var yda=s(vne);Kit=r(yda,"FlaxBigBirdForPreTraining"),yda.forEach(t),Zit=r(UJe," (BigBird model)"),UJe.forEach(t),edt=i(we),c7=n(we,"LI",{});var HJe=s(c7);u9e=n(HJe,"STRONG",{});var xda=s(u9e);odt=r(xda,"electra"),xda.forEach(t),rdt=r(HJe," \u2014 "),Fne=n(HJe,"A",{href:!0});var $da=s(Fne);tdt=r($da,"FlaxElectraForPreTraining"),$da.forEach(t),adt=r(HJe," (ELECTRA model)"),HJe.forEach(t),ndt=i(we),m7=n(we,"LI",{});var JJe=s(m7);p9e=n(JJe,"STRONG",{});var kda=s(p9e);sdt=r(kda,"longt5"),kda.forEach(t),ldt=r(JJe," \u2014 "),Tne=n(JJe,"A",{href:!0});var Sda=s(Tne);idt=r(Sda,"FlaxLongT5ForConditionalGeneration"),Sda.forEach(t),ddt=r(JJe," (LongT5 model)"),JJe.forEach(t),cdt=i(we),f7=n(we,"LI",{});var YJe=s(f7);_9e=n(YJe,"STRONG",{});var Rda=s(_9e);mdt=r(Rda,"mbart"),Rda.forEach(t),fdt=r(YJe," \u2014 "),Mne=n(YJe,"A",{href:!0});var Pda=s(Mne);gdt=r(Pda,"FlaxMBartForConditionalGeneration"),Pda.forEach(t),hdt=r(YJe," (mBART model)"),YJe.forEach(t),udt=i(we),g7=n(we,"LI",{});var KJe=s(g7);b9e=n(KJe,"STRONG",{});var Bda=s(b9e);pdt=r(Bda,"mt5"),Bda.forEach(t),_dt=r(KJe," \u2014 "),Ene=n(KJe,"A",{href:!0});var Ida=s(Ene);bdt=r(Ida,"FlaxMT5ForConditionalGeneration"),Ida.forEach(t),vdt=r(KJe," (MT5 model)"),KJe.forEach(t),Fdt=i(we),h7=n(we,"LI",{});var ZJe=s(h7);v9e=n(ZJe,"STRONG",{});var Nda=s(v9e);Tdt=r(Nda,"roberta"),Nda.forEach(t),Mdt=r(ZJe," \u2014 "),Cne=n(ZJe,"A",{href:!0});var qda=s(Cne);Edt=r(qda,"FlaxRobertaForMaskedLM"),qda.forEach(t),Cdt=r(ZJe," (RoBERTa model)"),ZJe.forEach(t),wdt=i(we),u7=n(we,"LI",{});var eYe=s(u7);F9e=n(eYe,"STRONG",{});var jda=s(F9e);Adt=r(jda,"roformer"),jda.forEach(t),Ldt=r(eYe," \u2014 "),wne=n(eYe,"A",{href:!0});var Dda=s(wne);ydt=r(Dda,"FlaxRoFormerForMaskedLM"),Dda.forEach(t),xdt=r(eYe," (RoFormer model)"),eYe.forEach(t),$dt=i(we),p7=n(we,"LI",{});var oYe=s(p7);T9e=n(oYe,"STRONG",{});var Gda=s(T9e);kdt=r(Gda,"t5"),Gda.forEach(t),Sdt=r(oYe," \u2014 "),Ane=n(oYe,"A",{href:!0});var Oda=s(Ane);Rdt=r(Oda,"FlaxT5ForConditionalGeneration"),Oda.forEach(t),Pdt=r(oYe," (T5 model)"),oYe.forEach(t),Bdt=i(we),_7=n(we,"LI",{});var rYe=s(_7);M9e=n(rYe,"STRONG",{});var Vda=s(M9e);Idt=r(Vda,"wav2vec2"),Vda.forEach(t),Ndt=r(rYe," \u2014 "),Lne=n(rYe,"A",{href:!0});var Xda=s(Lne);qdt=r(Xda,"FlaxWav2Vec2ForPreTraining"),Xda.forEach(t),jdt=r(rYe," (Wav2Vec2 model)"),rYe.forEach(t),Ddt=i(we),b7=n(we,"LI",{});var tYe=s(b7);E9e=n(tYe,"STRONG",{});var zda=s(E9e);Gdt=r(zda,"xlm-roberta"),zda.forEach(t),Odt=r(tYe," \u2014 "),yne=n(tYe,"A",{href:!0});var Qda=s(yne);Vdt=r(Qda,"FlaxXLMRobertaForMaskedLM"),Qda.forEach(t),Xdt=r(tYe," (XLM-RoBERTa model)"),tYe.forEach(t),we.forEach(t),zdt=i(Ni),T(v7.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),neo=i(m),Qm=n(m,"H2",{class:!0});var Tro=s(Qm);F7=n(Tro,"A",{id:!0,class:!0,href:!0});var Wda=s(F7);C9e=n(Wda,"SPAN",{});var Uda=s(C9e);T(uR.$$.fragment,Uda),Uda.forEach(t),Wda.forEach(t),Qdt=i(Tro),w9e=n(Tro,"SPAN",{});var Hda=s(w9e);Wdt=r(Hda,"FlaxAutoModelForMaskedLM"),Hda.forEach(t),Tro.forEach(t),seo=i(m),wr=n(m,"DIV",{class:!0});var qi=s(wr);T(pR.$$.fragment,qi),Udt=i(qi),Wm=n(qi,"P",{});var Uie=s(Wm);Hdt=r(Uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xne=n(Uie,"A",{href:!0});var Jda=s(xne);Jdt=r(Jda,"from_pretrained()"),Jda.forEach(t),Ydt=r(Uie," class method or the "),$ne=n(Uie,"A",{href:!0});var Yda=s($ne);Kdt=r(Yda,"from_config()"),Yda.forEach(t),Zdt=r(Uie,` class
method.`),Uie.forEach(t),ect=i(qi),_R=n(qi,"P",{});var Mro=s(_R);oct=r(Mro,"This class cannot be instantiated directly using "),A9e=n(Mro,"CODE",{});var Kda=s(A9e);rct=r(Kda,"__init__()"),Kda.forEach(t),tct=r(Mro," (throws an error)."),Mro.forEach(t),act=i(qi),da=n(qi,"DIV",{class:!0});var c9=s(da);T(bR.$$.fragment,c9),nct=i(c9),L9e=n(c9,"P",{});var Zda=s(L9e);sct=r(Zda,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zda.forEach(t),lct=i(c9),Um=n(c9,"P",{});var Hie=s(Um);ict=r(Hie,`Note:
Loading a model from its configuration file does `),y9e=n(Hie,"STRONG",{});var eca=s(y9e);dct=r(eca,"not"),eca.forEach(t),cct=r(Hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),kne=n(Hie,"A",{href:!0});var oca=s(kne);mct=r(oca,"from_pretrained()"),oca.forEach(t),fct=r(Hie," to load the model weights."),Hie.forEach(t),gct=i(c9),T(T7.$$.fragment,c9),c9.forEach(t),hct=i(qi),ot=n(qi,"DIV",{class:!0});var ji=s(ot);T(vR.$$.fragment,ji),uct=i(ji),x9e=n(ji,"P",{});var rca=s(x9e);pct=r(rca,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rca.forEach(t),_ct=i(ji),Vn=n(ji,"P",{});var m9=s(Vn);bct=r(m9,"The model class to instantiate is selected based on the "),$9e=n(m9,"CODE",{});var tca=s($9e);vct=r(tca,"model_type"),tca.forEach(t),Fct=r(m9,` property of the config object (either
passed as an argument or loaded from `),k9e=n(m9,"CODE",{});var aca=s(k9e);Tct=r(aca,"pretrained_model_name_or_path"),aca.forEach(t),Mct=r(m9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=n(m9,"CODE",{});var nca=s(S9e);Ect=r(nca,"pretrained_model_name_or_path"),nca.forEach(t),Cct=r(m9,":"),m9.forEach(t),wct=i(ji),$e=n(ji,"UL",{});var je=s($e);M7=n(je,"LI",{});var aYe=s(M7);R9e=n(aYe,"STRONG",{});var sca=s(R9e);Act=r(sca,"albert"),sca.forEach(t),Lct=r(aYe," \u2014 "),Sne=n(aYe,"A",{href:!0});var lca=s(Sne);yct=r(lca,"FlaxAlbertForMaskedLM"),lca.forEach(t),xct=r(aYe," (ALBERT model)"),aYe.forEach(t),$ct=i(je),E7=n(je,"LI",{});var nYe=s(E7);P9e=n(nYe,"STRONG",{});var ica=s(P9e);kct=r(ica,"bart"),ica.forEach(t),Sct=r(nYe," \u2014 "),Rne=n(nYe,"A",{href:!0});var dca=s(Rne);Rct=r(dca,"FlaxBartForConditionalGeneration"),dca.forEach(t),Pct=r(nYe," (BART model)"),nYe.forEach(t),Bct=i(je),C7=n(je,"LI",{});var sYe=s(C7);B9e=n(sYe,"STRONG",{});var cca=s(B9e);Ict=r(cca,"bert"),cca.forEach(t),Nct=r(sYe," \u2014 "),Pne=n(sYe,"A",{href:!0});var mca=s(Pne);qct=r(mca,"FlaxBertForMaskedLM"),mca.forEach(t),jct=r(sYe," (BERT model)"),sYe.forEach(t),Dct=i(je),w7=n(je,"LI",{});var lYe=s(w7);I9e=n(lYe,"STRONG",{});var fca=s(I9e);Gct=r(fca,"big_bird"),fca.forEach(t),Oct=r(lYe," \u2014 "),Bne=n(lYe,"A",{href:!0});var gca=s(Bne);Vct=r(gca,"FlaxBigBirdForMaskedLM"),gca.forEach(t),Xct=r(lYe," (BigBird model)"),lYe.forEach(t),zct=i(je),A7=n(je,"LI",{});var iYe=s(A7);N9e=n(iYe,"STRONG",{});var hca=s(N9e);Qct=r(hca,"distilbert"),hca.forEach(t),Wct=r(iYe," \u2014 "),Ine=n(iYe,"A",{href:!0});var uca=s(Ine);Uct=r(uca,"FlaxDistilBertForMaskedLM"),uca.forEach(t),Hct=r(iYe," (DistilBERT model)"),iYe.forEach(t),Jct=i(je),L7=n(je,"LI",{});var dYe=s(L7);q9e=n(dYe,"STRONG",{});var pca=s(q9e);Yct=r(pca,"electra"),pca.forEach(t),Kct=r(dYe," \u2014 "),Nne=n(dYe,"A",{href:!0});var _ca=s(Nne);Zct=r(_ca,"FlaxElectraForMaskedLM"),_ca.forEach(t),emt=r(dYe," (ELECTRA model)"),dYe.forEach(t),omt=i(je),y7=n(je,"LI",{});var cYe=s(y7);j9e=n(cYe,"STRONG",{});var bca=s(j9e);rmt=r(bca,"mbart"),bca.forEach(t),tmt=r(cYe," \u2014 "),qne=n(cYe,"A",{href:!0});var vca=s(qne);amt=r(vca,"FlaxMBartForConditionalGeneration"),vca.forEach(t),nmt=r(cYe," (mBART model)"),cYe.forEach(t),smt=i(je),x7=n(je,"LI",{});var mYe=s(x7);D9e=n(mYe,"STRONG",{});var Fca=s(D9e);lmt=r(Fca,"roberta"),Fca.forEach(t),imt=r(mYe," \u2014 "),jne=n(mYe,"A",{href:!0});var Tca=s(jne);dmt=r(Tca,"FlaxRobertaForMaskedLM"),Tca.forEach(t),cmt=r(mYe," (RoBERTa model)"),mYe.forEach(t),mmt=i(je),$7=n(je,"LI",{});var fYe=s($7);G9e=n(fYe,"STRONG",{});var Mca=s(G9e);fmt=r(Mca,"roformer"),Mca.forEach(t),gmt=r(fYe," \u2014 "),Dne=n(fYe,"A",{href:!0});var Eca=s(Dne);hmt=r(Eca,"FlaxRoFormerForMaskedLM"),Eca.forEach(t),umt=r(fYe," (RoFormer model)"),fYe.forEach(t),pmt=i(je),k7=n(je,"LI",{});var gYe=s(k7);O9e=n(gYe,"STRONG",{});var Cca=s(O9e);_mt=r(Cca,"xlm-roberta"),Cca.forEach(t),bmt=r(gYe," \u2014 "),Gne=n(gYe,"A",{href:!0});var wca=s(Gne);vmt=r(wca,"FlaxXLMRobertaForMaskedLM"),wca.forEach(t),Fmt=r(gYe," (XLM-RoBERTa model)"),gYe.forEach(t),je.forEach(t),Tmt=i(ji),T(S7.$$.fragment,ji),ji.forEach(t),qi.forEach(t),leo=i(m),Hm=n(m,"H2",{class:!0});var Ero=s(Hm);R7=n(Ero,"A",{id:!0,class:!0,href:!0});var Aca=s(R7);V9e=n(Aca,"SPAN",{});var Lca=s(V9e);T(FR.$$.fragment,Lca),Lca.forEach(t),Aca.forEach(t),Mmt=i(Ero),X9e=n(Ero,"SPAN",{});var yca=s(X9e);Emt=r(yca,"FlaxAutoModelForSeq2SeqLM"),yca.forEach(t),Ero.forEach(t),ieo=i(m),Ar=n(m,"DIV",{class:!0});var Di=s(Ar);T(TR.$$.fragment,Di),Cmt=i(Di),Jm=n(Di,"P",{});var Jie=s(Jm);wmt=r(Jie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),One=n(Jie,"A",{href:!0});var xca=s(One);Amt=r(xca,"from_pretrained()"),xca.forEach(t),Lmt=r(Jie," class method or the "),Vne=n(Jie,"A",{href:!0});var $ca=s(Vne);ymt=r($ca,"from_config()"),$ca.forEach(t),xmt=r(Jie,` class
method.`),Jie.forEach(t),$mt=i(Di),MR=n(Di,"P",{});var Cro=s(MR);kmt=r(Cro,"This class cannot be instantiated directly using "),z9e=n(Cro,"CODE",{});var kca=s(z9e);Smt=r(kca,"__init__()"),kca.forEach(t),Rmt=r(Cro," (throws an error)."),Cro.forEach(t),Pmt=i(Di),ca=n(Di,"DIV",{class:!0});var f9=s(ca);T(ER.$$.fragment,f9),Bmt=i(f9),Q9e=n(f9,"P",{});var Sca=s(Q9e);Imt=r(Sca,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sca.forEach(t),Nmt=i(f9),Ym=n(f9,"P",{});var Yie=s(Ym);qmt=r(Yie,`Note:
Loading a model from its configuration file does `),W9e=n(Yie,"STRONG",{});var Rca=s(W9e);jmt=r(Rca,"not"),Rca.forEach(t),Dmt=r(Yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xne=n(Yie,"A",{href:!0});var Pca=s(Xne);Gmt=r(Pca,"from_pretrained()"),Pca.forEach(t),Omt=r(Yie," to load the model weights."),Yie.forEach(t),Vmt=i(f9),T(P7.$$.fragment,f9),f9.forEach(t),Xmt=i(Di),rt=n(Di,"DIV",{class:!0});var Gi=s(rt);T(CR.$$.fragment,Gi),zmt=i(Gi),U9e=n(Gi,"P",{});var Bca=s(U9e);Qmt=r(Bca,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bca.forEach(t),Wmt=i(Gi),Xn=n(Gi,"P",{});var g9=s(Xn);Umt=r(g9,"The model class to instantiate is selected based on the "),H9e=n(g9,"CODE",{});var Ica=s(H9e);Hmt=r(Ica,"model_type"),Ica.forEach(t),Jmt=r(g9,` property of the config object (either
passed as an argument or loaded from `),J9e=n(g9,"CODE",{});var Nca=s(J9e);Ymt=r(Nca,"pretrained_model_name_or_path"),Nca.forEach(t),Kmt=r(g9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y9e=n(g9,"CODE",{});var qca=s(Y9e);Zmt=r(qca,"pretrained_model_name_or_path"),qca.forEach(t),eft=r(g9,":"),g9.forEach(t),oft=i(Gi),ke=n(Gi,"UL",{});var De=s(ke);B7=n(De,"LI",{});var hYe=s(B7);K9e=n(hYe,"STRONG",{});var jca=s(K9e);rft=r(jca,"bart"),jca.forEach(t),tft=r(hYe," \u2014 "),zne=n(hYe,"A",{href:!0});var Dca=s(zne);aft=r(Dca,"FlaxBartForConditionalGeneration"),Dca.forEach(t),nft=r(hYe," (BART model)"),hYe.forEach(t),sft=i(De),I7=n(De,"LI",{});var uYe=s(I7);Z9e=n(uYe,"STRONG",{});var Gca=s(Z9e);lft=r(Gca,"blenderbot"),Gca.forEach(t),ift=r(uYe," \u2014 "),Qne=n(uYe,"A",{href:!0});var Oca=s(Qne);dft=r(Oca,"FlaxBlenderbotForConditionalGeneration"),Oca.forEach(t),cft=r(uYe," (Blenderbot model)"),uYe.forEach(t),mft=i(De),N7=n(De,"LI",{});var pYe=s(N7);exe=n(pYe,"STRONG",{});var Vca=s(exe);fft=r(Vca,"blenderbot-small"),Vca.forEach(t),gft=r(pYe," \u2014 "),Wne=n(pYe,"A",{href:!0});var Xca=s(Wne);hft=r(Xca,"FlaxBlenderbotSmallForConditionalGeneration"),Xca.forEach(t),uft=r(pYe," (BlenderbotSmall model)"),pYe.forEach(t),pft=i(De),q7=n(De,"LI",{});var _Ye=s(q7);oxe=n(_Ye,"STRONG",{});var zca=s(oxe);_ft=r(zca,"encoder-decoder"),zca.forEach(t),bft=r(_Ye," \u2014 "),Une=n(_Ye,"A",{href:!0});var Qca=s(Une);vft=r(Qca,"FlaxEncoderDecoderModel"),Qca.forEach(t),Fft=r(_Ye," (Encoder decoder model)"),_Ye.forEach(t),Tft=i(De),j7=n(De,"LI",{});var bYe=s(j7);rxe=n(bYe,"STRONG",{});var Wca=s(rxe);Mft=r(Wca,"longt5"),Wca.forEach(t),Eft=r(bYe," \u2014 "),Hne=n(bYe,"A",{href:!0});var Uca=s(Hne);Cft=r(Uca,"FlaxLongT5ForConditionalGeneration"),Uca.forEach(t),wft=r(bYe," (LongT5 model)"),bYe.forEach(t),Aft=i(De),D7=n(De,"LI",{});var vYe=s(D7);txe=n(vYe,"STRONG",{});var Hca=s(txe);Lft=r(Hca,"marian"),Hca.forEach(t),yft=r(vYe," \u2014 "),Jne=n(vYe,"A",{href:!0});var Jca=s(Jne);xft=r(Jca,"FlaxMarianMTModel"),Jca.forEach(t),$ft=r(vYe," (Marian model)"),vYe.forEach(t),kft=i(De),G7=n(De,"LI",{});var FYe=s(G7);axe=n(FYe,"STRONG",{});var Yca=s(axe);Sft=r(Yca,"mbart"),Yca.forEach(t),Rft=r(FYe," \u2014 "),Yne=n(FYe,"A",{href:!0});var Kca=s(Yne);Pft=r(Kca,"FlaxMBartForConditionalGeneration"),Kca.forEach(t),Bft=r(FYe," (mBART model)"),FYe.forEach(t),Ift=i(De),O7=n(De,"LI",{});var TYe=s(O7);nxe=n(TYe,"STRONG",{});var Zca=s(nxe);Nft=r(Zca,"mt5"),Zca.forEach(t),qft=r(TYe," \u2014 "),Kne=n(TYe,"A",{href:!0});var ema=s(Kne);jft=r(ema,"FlaxMT5ForConditionalGeneration"),ema.forEach(t),Dft=r(TYe," (MT5 model)"),TYe.forEach(t),Gft=i(De),V7=n(De,"LI",{});var MYe=s(V7);sxe=n(MYe,"STRONG",{});var oma=s(sxe);Oft=r(oma,"pegasus"),oma.forEach(t),Vft=r(MYe," \u2014 "),Zne=n(MYe,"A",{href:!0});var rma=s(Zne);Xft=r(rma,"FlaxPegasusForConditionalGeneration"),rma.forEach(t),zft=r(MYe," (Pegasus model)"),MYe.forEach(t),Qft=i(De),X7=n(De,"LI",{});var EYe=s(X7);lxe=n(EYe,"STRONG",{});var tma=s(lxe);Wft=r(tma,"t5"),tma.forEach(t),Uft=r(EYe," \u2014 "),ese=n(EYe,"A",{href:!0});var ama=s(ese);Hft=r(ama,"FlaxT5ForConditionalGeneration"),ama.forEach(t),Jft=r(EYe," (T5 model)"),EYe.forEach(t),De.forEach(t),Yft=i(Gi),T(z7.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),deo=i(m),Km=n(m,"H2",{class:!0});var wro=s(Km);Q7=n(wro,"A",{id:!0,class:!0,href:!0});var nma=s(Q7);ixe=n(nma,"SPAN",{});var sma=s(ixe);T(wR.$$.fragment,sma),sma.forEach(t),nma.forEach(t),Kft=i(wro),dxe=n(wro,"SPAN",{});var lma=s(dxe);Zft=r(lma,"FlaxAutoModelForSequenceClassification"),lma.forEach(t),wro.forEach(t),ceo=i(m),Lr=n(m,"DIV",{class:!0});var Oi=s(Lr);T(AR.$$.fragment,Oi),egt=i(Oi),Zm=n(Oi,"P",{});var Kie=s(Zm);ogt=r(Kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ose=n(Kie,"A",{href:!0});var ima=s(ose);rgt=r(ima,"from_pretrained()"),ima.forEach(t),tgt=r(Kie," class method or the "),rse=n(Kie,"A",{href:!0});var dma=s(rse);agt=r(dma,"from_config()"),dma.forEach(t),ngt=r(Kie,` class
method.`),Kie.forEach(t),sgt=i(Oi),LR=n(Oi,"P",{});var Aro=s(LR);lgt=r(Aro,"This class cannot be instantiated directly using "),cxe=n(Aro,"CODE",{});var cma=s(cxe);igt=r(cma,"__init__()"),cma.forEach(t),dgt=r(Aro," (throws an error)."),Aro.forEach(t),cgt=i(Oi),ma=n(Oi,"DIV",{class:!0});var h9=s(ma);T(yR.$$.fragment,h9),mgt=i(h9),mxe=n(h9,"P",{});var mma=s(mxe);fgt=r(mma,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mma.forEach(t),ggt=i(h9),ef=n(h9,"P",{});var Zie=s(ef);hgt=r(Zie,`Note:
Loading a model from its configuration file does `),fxe=n(Zie,"STRONG",{});var fma=s(fxe);ugt=r(fma,"not"),fma.forEach(t),pgt=r(Zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=n(Zie,"A",{href:!0});var gma=s(tse);_gt=r(gma,"from_pretrained()"),gma.forEach(t),bgt=r(Zie," to load the model weights."),Zie.forEach(t),vgt=i(h9),T(W7.$$.fragment,h9),h9.forEach(t),Fgt=i(Oi),tt=n(Oi,"DIV",{class:!0});var Vi=s(tt);T(xR.$$.fragment,Vi),Tgt=i(Vi),gxe=n(Vi,"P",{});var hma=s(gxe);Mgt=r(hma,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hma.forEach(t),Egt=i(Vi),zn=n(Vi,"P",{});var u9=s(zn);Cgt=r(u9,"The model class to instantiate is selected based on the "),hxe=n(u9,"CODE",{});var uma=s(hxe);wgt=r(uma,"model_type"),uma.forEach(t),Agt=r(u9,` property of the config object (either
passed as an argument or loaded from `),uxe=n(u9,"CODE",{});var pma=s(uxe);Lgt=r(pma,"pretrained_model_name_or_path"),pma.forEach(t),ygt=r(u9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pxe=n(u9,"CODE",{});var _ma=s(pxe);xgt=r(_ma,"pretrained_model_name_or_path"),_ma.forEach(t),$gt=r(u9,":"),u9.forEach(t),kgt=i(Vi),Se=n(Vi,"UL",{});var Ge=s(Se);U7=n(Ge,"LI",{});var CYe=s(U7);_xe=n(CYe,"STRONG",{});var bma=s(_xe);Sgt=r(bma,"albert"),bma.forEach(t),Rgt=r(CYe," \u2014 "),ase=n(CYe,"A",{href:!0});var vma=s(ase);Pgt=r(vma,"FlaxAlbertForSequenceClassification"),vma.forEach(t),Bgt=r(CYe," (ALBERT model)"),CYe.forEach(t),Igt=i(Ge),H7=n(Ge,"LI",{});var wYe=s(H7);bxe=n(wYe,"STRONG",{});var Fma=s(bxe);Ngt=r(Fma,"bart"),Fma.forEach(t),qgt=r(wYe," \u2014 "),nse=n(wYe,"A",{href:!0});var Tma=s(nse);jgt=r(Tma,"FlaxBartForSequenceClassification"),Tma.forEach(t),Dgt=r(wYe," (BART model)"),wYe.forEach(t),Ggt=i(Ge),J7=n(Ge,"LI",{});var AYe=s(J7);vxe=n(AYe,"STRONG",{});var Mma=s(vxe);Ogt=r(Mma,"bert"),Mma.forEach(t),Vgt=r(AYe," \u2014 "),sse=n(AYe,"A",{href:!0});var Ema=s(sse);Xgt=r(Ema,"FlaxBertForSequenceClassification"),Ema.forEach(t),zgt=r(AYe," (BERT model)"),AYe.forEach(t),Qgt=i(Ge),Y7=n(Ge,"LI",{});var LYe=s(Y7);Fxe=n(LYe,"STRONG",{});var Cma=s(Fxe);Wgt=r(Cma,"big_bird"),Cma.forEach(t),Ugt=r(LYe," \u2014 "),lse=n(LYe,"A",{href:!0});var wma=s(lse);Hgt=r(wma,"FlaxBigBirdForSequenceClassification"),wma.forEach(t),Jgt=r(LYe," (BigBird model)"),LYe.forEach(t),Ygt=i(Ge),K7=n(Ge,"LI",{});var yYe=s(K7);Txe=n(yYe,"STRONG",{});var Ama=s(Txe);Kgt=r(Ama,"distilbert"),Ama.forEach(t),Zgt=r(yYe," \u2014 "),ise=n(yYe,"A",{href:!0});var Lma=s(ise);eht=r(Lma,"FlaxDistilBertForSequenceClassification"),Lma.forEach(t),oht=r(yYe," (DistilBERT model)"),yYe.forEach(t),rht=i(Ge),Z7=n(Ge,"LI",{});var xYe=s(Z7);Mxe=n(xYe,"STRONG",{});var yma=s(Mxe);tht=r(yma,"electra"),yma.forEach(t),aht=r(xYe," \u2014 "),dse=n(xYe,"A",{href:!0});var xma=s(dse);nht=r(xma,"FlaxElectraForSequenceClassification"),xma.forEach(t),sht=r(xYe," (ELECTRA model)"),xYe.forEach(t),lht=i(Ge),eL=n(Ge,"LI",{});var $Ye=s(eL);Exe=n($Ye,"STRONG",{});var $ma=s(Exe);iht=r($ma,"mbart"),$ma.forEach(t),dht=r($Ye," \u2014 "),cse=n($Ye,"A",{href:!0});var kma=s(cse);cht=r(kma,"FlaxMBartForSequenceClassification"),kma.forEach(t),mht=r($Ye," (mBART model)"),$Ye.forEach(t),fht=i(Ge),oL=n(Ge,"LI",{});var kYe=s(oL);Cxe=n(kYe,"STRONG",{});var Sma=s(Cxe);ght=r(Sma,"roberta"),Sma.forEach(t),hht=r(kYe," \u2014 "),mse=n(kYe,"A",{href:!0});var Rma=s(mse);uht=r(Rma,"FlaxRobertaForSequenceClassification"),Rma.forEach(t),pht=r(kYe," (RoBERTa model)"),kYe.forEach(t),_ht=i(Ge),rL=n(Ge,"LI",{});var SYe=s(rL);wxe=n(SYe,"STRONG",{});var Pma=s(wxe);bht=r(Pma,"roformer"),Pma.forEach(t),vht=r(SYe," \u2014 "),fse=n(SYe,"A",{href:!0});var Bma=s(fse);Fht=r(Bma,"FlaxRoFormerForSequenceClassification"),Bma.forEach(t),Tht=r(SYe," (RoFormer model)"),SYe.forEach(t),Mht=i(Ge),tL=n(Ge,"LI",{});var RYe=s(tL);Axe=n(RYe,"STRONG",{});var Ima=s(Axe);Eht=r(Ima,"xlm-roberta"),Ima.forEach(t),Cht=r(RYe," \u2014 "),gse=n(RYe,"A",{href:!0});var Nma=s(gse);wht=r(Nma,"FlaxXLMRobertaForSequenceClassification"),Nma.forEach(t),Aht=r(RYe," (XLM-RoBERTa model)"),RYe.forEach(t),Ge.forEach(t),Lht=i(Vi),T(aL.$$.fragment,Vi),Vi.forEach(t),Oi.forEach(t),meo=i(m),of=n(m,"H2",{class:!0});var Lro=s(of);nL=n(Lro,"A",{id:!0,class:!0,href:!0});var qma=s(nL);Lxe=n(qma,"SPAN",{});var jma=s(Lxe);T($R.$$.fragment,jma),jma.forEach(t),qma.forEach(t),yht=i(Lro),yxe=n(Lro,"SPAN",{});var Dma=s(yxe);xht=r(Dma,"FlaxAutoModelForQuestionAnswering"),Dma.forEach(t),Lro.forEach(t),feo=i(m),yr=n(m,"DIV",{class:!0});var Xi=s(yr);T(kR.$$.fragment,Xi),$ht=i(Xi),rf=n(Xi,"P",{});var ede=s(rf);kht=r(ede,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hse=n(ede,"A",{href:!0});var Gma=s(hse);Sht=r(Gma,"from_pretrained()"),Gma.forEach(t),Rht=r(ede," class method or the "),use=n(ede,"A",{href:!0});var Oma=s(use);Pht=r(Oma,"from_config()"),Oma.forEach(t),Bht=r(ede,` class
method.`),ede.forEach(t),Iht=i(Xi),SR=n(Xi,"P",{});var yro=s(SR);Nht=r(yro,"This class cannot be instantiated directly using "),xxe=n(yro,"CODE",{});var Vma=s(xxe);qht=r(Vma,"__init__()"),Vma.forEach(t),jht=r(yro," (throws an error)."),yro.forEach(t),Dht=i(Xi),fa=n(Xi,"DIV",{class:!0});var p9=s(fa);T(RR.$$.fragment,p9),Ght=i(p9),$xe=n(p9,"P",{});var Xma=s($xe);Oht=r(Xma,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xma.forEach(t),Vht=i(p9),tf=n(p9,"P",{});var ode=s(tf);Xht=r(ode,`Note:
Loading a model from its configuration file does `),kxe=n(ode,"STRONG",{});var zma=s(kxe);zht=r(zma,"not"),zma.forEach(t),Qht=r(ode,` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=n(ode,"A",{href:!0});var Qma=s(pse);Wht=r(Qma,"from_pretrained()"),Qma.forEach(t),Uht=r(ode," to load the model weights."),ode.forEach(t),Hht=i(p9),T(sL.$$.fragment,p9),p9.forEach(t),Jht=i(Xi),at=n(Xi,"DIV",{class:!0});var zi=s(at);T(PR.$$.fragment,zi),Yht=i(zi),Sxe=n(zi,"P",{});var Wma=s(Sxe);Kht=r(Wma,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wma.forEach(t),Zht=i(zi),Qn=n(zi,"P",{});var _9=s(Qn);eut=r(_9,"The model class to instantiate is selected based on the "),Rxe=n(_9,"CODE",{});var Uma=s(Rxe);out=r(Uma,"model_type"),Uma.forEach(t),rut=r(_9,` property of the config object (either
passed as an argument or loaded from `),Pxe=n(_9,"CODE",{});var Hma=s(Pxe);tut=r(Hma,"pretrained_model_name_or_path"),Hma.forEach(t),aut=r(_9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bxe=n(_9,"CODE",{});var Jma=s(Bxe);nut=r(Jma,"pretrained_model_name_or_path"),Jma.forEach(t),sut=r(_9,":"),_9.forEach(t),lut=i(zi),Re=n(zi,"UL",{});var Oe=s(Re);lL=n(Oe,"LI",{});var PYe=s(lL);Ixe=n(PYe,"STRONG",{});var Yma=s(Ixe);iut=r(Yma,"albert"),Yma.forEach(t),dut=r(PYe," \u2014 "),_se=n(PYe,"A",{href:!0});var Kma=s(_se);cut=r(Kma,"FlaxAlbertForQuestionAnswering"),Kma.forEach(t),mut=r(PYe," (ALBERT model)"),PYe.forEach(t),fut=i(Oe),iL=n(Oe,"LI",{});var BYe=s(iL);Nxe=n(BYe,"STRONG",{});var Zma=s(Nxe);gut=r(Zma,"bart"),Zma.forEach(t),hut=r(BYe," \u2014 "),bse=n(BYe,"A",{href:!0});var efa=s(bse);uut=r(efa,"FlaxBartForQuestionAnswering"),efa.forEach(t),put=r(BYe," (BART model)"),BYe.forEach(t),_ut=i(Oe),dL=n(Oe,"LI",{});var IYe=s(dL);qxe=n(IYe,"STRONG",{});var ofa=s(qxe);but=r(ofa,"bert"),ofa.forEach(t),vut=r(IYe," \u2014 "),vse=n(IYe,"A",{href:!0});var rfa=s(vse);Fut=r(rfa,"FlaxBertForQuestionAnswering"),rfa.forEach(t),Tut=r(IYe," (BERT model)"),IYe.forEach(t),Mut=i(Oe),cL=n(Oe,"LI",{});var NYe=s(cL);jxe=n(NYe,"STRONG",{});var tfa=s(jxe);Eut=r(tfa,"big_bird"),tfa.forEach(t),Cut=r(NYe," \u2014 "),Fse=n(NYe,"A",{href:!0});var afa=s(Fse);wut=r(afa,"FlaxBigBirdForQuestionAnswering"),afa.forEach(t),Aut=r(NYe," (BigBird model)"),NYe.forEach(t),Lut=i(Oe),mL=n(Oe,"LI",{});var qYe=s(mL);Dxe=n(qYe,"STRONG",{});var nfa=s(Dxe);yut=r(nfa,"distilbert"),nfa.forEach(t),xut=r(qYe," \u2014 "),Tse=n(qYe,"A",{href:!0});var sfa=s(Tse);$ut=r(sfa,"FlaxDistilBertForQuestionAnswering"),sfa.forEach(t),kut=r(qYe," (DistilBERT model)"),qYe.forEach(t),Sut=i(Oe),fL=n(Oe,"LI",{});var jYe=s(fL);Gxe=n(jYe,"STRONG",{});var lfa=s(Gxe);Rut=r(lfa,"electra"),lfa.forEach(t),Put=r(jYe," \u2014 "),Mse=n(jYe,"A",{href:!0});var ifa=s(Mse);But=r(ifa,"FlaxElectraForQuestionAnswering"),ifa.forEach(t),Iut=r(jYe," (ELECTRA model)"),jYe.forEach(t),Nut=i(Oe),gL=n(Oe,"LI",{});var DYe=s(gL);Oxe=n(DYe,"STRONG",{});var dfa=s(Oxe);qut=r(dfa,"mbart"),dfa.forEach(t),jut=r(DYe," \u2014 "),Ese=n(DYe,"A",{href:!0});var cfa=s(Ese);Dut=r(cfa,"FlaxMBartForQuestionAnswering"),cfa.forEach(t),Gut=r(DYe," (mBART model)"),DYe.forEach(t),Out=i(Oe),hL=n(Oe,"LI",{});var GYe=s(hL);Vxe=n(GYe,"STRONG",{});var mfa=s(Vxe);Vut=r(mfa,"roberta"),mfa.forEach(t),Xut=r(GYe," \u2014 "),Cse=n(GYe,"A",{href:!0});var ffa=s(Cse);zut=r(ffa,"FlaxRobertaForQuestionAnswering"),ffa.forEach(t),Qut=r(GYe," (RoBERTa model)"),GYe.forEach(t),Wut=i(Oe),uL=n(Oe,"LI",{});var OYe=s(uL);Xxe=n(OYe,"STRONG",{});var gfa=s(Xxe);Uut=r(gfa,"roformer"),gfa.forEach(t),Hut=r(OYe," \u2014 "),wse=n(OYe,"A",{href:!0});var hfa=s(wse);Jut=r(hfa,"FlaxRoFormerForQuestionAnswering"),hfa.forEach(t),Yut=r(OYe," (RoFormer model)"),OYe.forEach(t),Kut=i(Oe),pL=n(Oe,"LI",{});var VYe=s(pL);zxe=n(VYe,"STRONG",{});var ufa=s(zxe);Zut=r(ufa,"xlm-roberta"),ufa.forEach(t),ept=r(VYe," \u2014 "),Ase=n(VYe,"A",{href:!0});var pfa=s(Ase);opt=r(pfa,"FlaxXLMRobertaForQuestionAnswering"),pfa.forEach(t),rpt=r(VYe," (XLM-RoBERTa model)"),VYe.forEach(t),Oe.forEach(t),tpt=i(zi),T(_L.$$.fragment,zi),zi.forEach(t),Xi.forEach(t),geo=i(m),af=n(m,"H2",{class:!0});var xro=s(af);bL=n(xro,"A",{id:!0,class:!0,href:!0});var _fa=s(bL);Qxe=n(_fa,"SPAN",{});var bfa=s(Qxe);T(BR.$$.fragment,bfa),bfa.forEach(t),_fa.forEach(t),apt=i(xro),Wxe=n(xro,"SPAN",{});var vfa=s(Wxe);npt=r(vfa,"FlaxAutoModelForTokenClassification"),vfa.forEach(t),xro.forEach(t),heo=i(m),xr=n(m,"DIV",{class:!0});var Qi=s(xr);T(IR.$$.fragment,Qi),spt=i(Qi),nf=n(Qi,"P",{});var rde=s(nf);lpt=r(rde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Lse=n(rde,"A",{href:!0});var Ffa=s(Lse);ipt=r(Ffa,"from_pretrained()"),Ffa.forEach(t),dpt=r(rde," class method or the "),yse=n(rde,"A",{href:!0});var Tfa=s(yse);cpt=r(Tfa,"from_config()"),Tfa.forEach(t),mpt=r(rde,` class
method.`),rde.forEach(t),fpt=i(Qi),NR=n(Qi,"P",{});var $ro=s(NR);gpt=r($ro,"This class cannot be instantiated directly using "),Uxe=n($ro,"CODE",{});var Mfa=s(Uxe);hpt=r(Mfa,"__init__()"),Mfa.forEach(t),upt=r($ro," (throws an error)."),$ro.forEach(t),ppt=i(Qi),ga=n(Qi,"DIV",{class:!0});var b9=s(ga);T(qR.$$.fragment,b9),_pt=i(b9),Hxe=n(b9,"P",{});var Efa=s(Hxe);bpt=r(Efa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Efa.forEach(t),vpt=i(b9),sf=n(b9,"P",{});var tde=s(sf);Fpt=r(tde,`Note:
Loading a model from its configuration file does `),Jxe=n(tde,"STRONG",{});var Cfa=s(Jxe);Tpt=r(Cfa,"not"),Cfa.forEach(t),Mpt=r(tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),xse=n(tde,"A",{href:!0});var wfa=s(xse);Ept=r(wfa,"from_pretrained()"),wfa.forEach(t),Cpt=r(tde," to load the model weights."),tde.forEach(t),wpt=i(b9),T(vL.$$.fragment,b9),b9.forEach(t),Apt=i(Qi),nt=n(Qi,"DIV",{class:!0});var Wi=s(nt);T(jR.$$.fragment,Wi),Lpt=i(Wi),Yxe=n(Wi,"P",{});var Afa=s(Yxe);ypt=r(Afa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Afa.forEach(t),xpt=i(Wi),Wn=n(Wi,"P",{});var v9=s(Wn);$pt=r(v9,"The model class to instantiate is selected based on the "),Kxe=n(v9,"CODE",{});var Lfa=s(Kxe);kpt=r(Lfa,"model_type"),Lfa.forEach(t),Spt=r(v9,` property of the config object (either
passed as an argument or loaded from `),Zxe=n(v9,"CODE",{});var yfa=s(Zxe);Rpt=r(yfa,"pretrained_model_name_or_path"),yfa.forEach(t),Ppt=r(v9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e$e=n(v9,"CODE",{});var xfa=s(e$e);Bpt=r(xfa,"pretrained_model_name_or_path"),xfa.forEach(t),Ipt=r(v9,":"),v9.forEach(t),Npt=i(Wi),Xe=n(Wi,"UL",{});var Ao=s(Xe);FL=n(Ao,"LI",{});var XYe=s(FL);o$e=n(XYe,"STRONG",{});var $fa=s(o$e);qpt=r($fa,"albert"),$fa.forEach(t),jpt=r(XYe," \u2014 "),$se=n(XYe,"A",{href:!0});var kfa=s($se);Dpt=r(kfa,"FlaxAlbertForTokenClassification"),kfa.forEach(t),Gpt=r(XYe," (ALBERT model)"),XYe.forEach(t),Opt=i(Ao),TL=n(Ao,"LI",{});var zYe=s(TL);r$e=n(zYe,"STRONG",{});var Sfa=s(r$e);Vpt=r(Sfa,"bert"),Sfa.forEach(t),Xpt=r(zYe," \u2014 "),kse=n(zYe,"A",{href:!0});var Rfa=s(kse);zpt=r(Rfa,"FlaxBertForTokenClassification"),Rfa.forEach(t),Qpt=r(zYe," (BERT model)"),zYe.forEach(t),Wpt=i(Ao),ML=n(Ao,"LI",{});var QYe=s(ML);t$e=n(QYe,"STRONG",{});var Pfa=s(t$e);Upt=r(Pfa,"big_bird"),Pfa.forEach(t),Hpt=r(QYe," \u2014 "),Sse=n(QYe,"A",{href:!0});var Bfa=s(Sse);Jpt=r(Bfa,"FlaxBigBirdForTokenClassification"),Bfa.forEach(t),Ypt=r(QYe," (BigBird model)"),QYe.forEach(t),Kpt=i(Ao),EL=n(Ao,"LI",{});var WYe=s(EL);a$e=n(WYe,"STRONG",{});var Ifa=s(a$e);Zpt=r(Ifa,"distilbert"),Ifa.forEach(t),e_t=r(WYe," \u2014 "),Rse=n(WYe,"A",{href:!0});var Nfa=s(Rse);o_t=r(Nfa,"FlaxDistilBertForTokenClassification"),Nfa.forEach(t),r_t=r(WYe," (DistilBERT model)"),WYe.forEach(t),t_t=i(Ao),CL=n(Ao,"LI",{});var UYe=s(CL);n$e=n(UYe,"STRONG",{});var qfa=s(n$e);a_t=r(qfa,"electra"),qfa.forEach(t),n_t=r(UYe," \u2014 "),Pse=n(UYe,"A",{href:!0});var jfa=s(Pse);s_t=r(jfa,"FlaxElectraForTokenClassification"),jfa.forEach(t),l_t=r(UYe," (ELECTRA model)"),UYe.forEach(t),i_t=i(Ao),wL=n(Ao,"LI",{});var HYe=s(wL);s$e=n(HYe,"STRONG",{});var Dfa=s(s$e);d_t=r(Dfa,"roberta"),Dfa.forEach(t),c_t=r(HYe," \u2014 "),Bse=n(HYe,"A",{href:!0});var Gfa=s(Bse);m_t=r(Gfa,"FlaxRobertaForTokenClassification"),Gfa.forEach(t),f_t=r(HYe," (RoBERTa model)"),HYe.forEach(t),g_t=i(Ao),AL=n(Ao,"LI",{});var JYe=s(AL);l$e=n(JYe,"STRONG",{});var Ofa=s(l$e);h_t=r(Ofa,"roformer"),Ofa.forEach(t),u_t=r(JYe," \u2014 "),Ise=n(JYe,"A",{href:!0});var Vfa=s(Ise);p_t=r(Vfa,"FlaxRoFormerForTokenClassification"),Vfa.forEach(t),__t=r(JYe," (RoFormer model)"),JYe.forEach(t),b_t=i(Ao),LL=n(Ao,"LI",{});var YYe=s(LL);i$e=n(YYe,"STRONG",{});var Xfa=s(i$e);v_t=r(Xfa,"xlm-roberta"),Xfa.forEach(t),F_t=r(YYe," \u2014 "),Nse=n(YYe,"A",{href:!0});var zfa=s(Nse);T_t=r(zfa,"FlaxXLMRobertaForTokenClassification"),zfa.forEach(t),M_t=r(YYe," (XLM-RoBERTa model)"),YYe.forEach(t),Ao.forEach(t),E_t=i(Wi),T(yL.$$.fragment,Wi),Wi.forEach(t),Qi.forEach(t),ueo=i(m),lf=n(m,"H2",{class:!0});var kro=s(lf);xL=n(kro,"A",{id:!0,class:!0,href:!0});var Qfa=s(xL);d$e=n(Qfa,"SPAN",{});var Wfa=s(d$e);T(DR.$$.fragment,Wfa),Wfa.forEach(t),Qfa.forEach(t),C_t=i(kro),c$e=n(kro,"SPAN",{});var Ufa=s(c$e);w_t=r(Ufa,"FlaxAutoModelForMultipleChoice"),Ufa.forEach(t),kro.forEach(t),peo=i(m),$r=n(m,"DIV",{class:!0});var Ui=s($r);T(GR.$$.fragment,Ui),A_t=i(Ui),df=n(Ui,"P",{});var ade=s(df);L_t=r(ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qse=n(ade,"A",{href:!0});var Hfa=s(qse);y_t=r(Hfa,"from_pretrained()"),Hfa.forEach(t),x_t=r(ade," class method or the "),jse=n(ade,"A",{href:!0});var Jfa=s(jse);$_t=r(Jfa,"from_config()"),Jfa.forEach(t),k_t=r(ade,` class
method.`),ade.forEach(t),S_t=i(Ui),OR=n(Ui,"P",{});var Sro=s(OR);R_t=r(Sro,"This class cannot be instantiated directly using "),m$e=n(Sro,"CODE",{});var Yfa=s(m$e);P_t=r(Yfa,"__init__()"),Yfa.forEach(t),B_t=r(Sro," (throws an error)."),Sro.forEach(t),I_t=i(Ui),ha=n(Ui,"DIV",{class:!0});var F9=s(ha);T(VR.$$.fragment,F9),N_t=i(F9),f$e=n(F9,"P",{});var Kfa=s(f$e);q_t=r(Kfa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kfa.forEach(t),j_t=i(F9),cf=n(F9,"P",{});var nde=s(cf);D_t=r(nde,`Note:
Loading a model from its configuration file does `),g$e=n(nde,"STRONG",{});var Zfa=s(g$e);G_t=r(Zfa,"not"),Zfa.forEach(t),O_t=r(nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dse=n(nde,"A",{href:!0});var ega=s(Dse);V_t=r(ega,"from_pretrained()"),ega.forEach(t),X_t=r(nde," to load the model weights."),nde.forEach(t),z_t=i(F9),T($L.$$.fragment,F9),F9.forEach(t),Q_t=i(Ui),st=n(Ui,"DIV",{class:!0});var Hi=s(st);T(XR.$$.fragment,Hi),W_t=i(Hi),h$e=n(Hi,"P",{});var oga=s(h$e);U_t=r(oga,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oga.forEach(t),H_t=i(Hi),Un=n(Hi,"P",{});var T9=s(Un);J_t=r(T9,"The model class to instantiate is selected based on the "),u$e=n(T9,"CODE",{});var rga=s(u$e);Y_t=r(rga,"model_type"),rga.forEach(t),K_t=r(T9,` property of the config object (either
passed as an argument or loaded from `),p$e=n(T9,"CODE",{});var tga=s(p$e);Z_t=r(tga,"pretrained_model_name_or_path"),tga.forEach(t),ebt=r(T9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_$e=n(T9,"CODE",{});var aga=s(_$e);obt=r(aga,"pretrained_model_name_or_path"),aga.forEach(t),rbt=r(T9,":"),T9.forEach(t),tbt=i(Hi),ze=n(Hi,"UL",{});var Lo=s(ze);kL=n(Lo,"LI",{});var KYe=s(kL);b$e=n(KYe,"STRONG",{});var nga=s(b$e);abt=r(nga,"albert"),nga.forEach(t),nbt=r(KYe," \u2014 "),Gse=n(KYe,"A",{href:!0});var sga=s(Gse);sbt=r(sga,"FlaxAlbertForMultipleChoice"),sga.forEach(t),lbt=r(KYe," (ALBERT model)"),KYe.forEach(t),ibt=i(Lo),SL=n(Lo,"LI",{});var ZYe=s(SL);v$e=n(ZYe,"STRONG",{});var lga=s(v$e);dbt=r(lga,"bert"),lga.forEach(t),cbt=r(ZYe," \u2014 "),Ose=n(ZYe,"A",{href:!0});var iga=s(Ose);mbt=r(iga,"FlaxBertForMultipleChoice"),iga.forEach(t),fbt=r(ZYe," (BERT model)"),ZYe.forEach(t),gbt=i(Lo),RL=n(Lo,"LI",{});var eKe=s(RL);F$e=n(eKe,"STRONG",{});var dga=s(F$e);hbt=r(dga,"big_bird"),dga.forEach(t),ubt=r(eKe," \u2014 "),Vse=n(eKe,"A",{href:!0});var cga=s(Vse);pbt=r(cga,"FlaxBigBirdForMultipleChoice"),cga.forEach(t),_bt=r(eKe," (BigBird model)"),eKe.forEach(t),bbt=i(Lo),PL=n(Lo,"LI",{});var oKe=s(PL);T$e=n(oKe,"STRONG",{});var mga=s(T$e);vbt=r(mga,"distilbert"),mga.forEach(t),Fbt=r(oKe," \u2014 "),Xse=n(oKe,"A",{href:!0});var fga=s(Xse);Tbt=r(fga,"FlaxDistilBertForMultipleChoice"),fga.forEach(t),Mbt=r(oKe," (DistilBERT model)"),oKe.forEach(t),Ebt=i(Lo),BL=n(Lo,"LI",{});var rKe=s(BL);M$e=n(rKe,"STRONG",{});var gga=s(M$e);Cbt=r(gga,"electra"),gga.forEach(t),wbt=r(rKe," \u2014 "),zse=n(rKe,"A",{href:!0});var hga=s(zse);Abt=r(hga,"FlaxElectraForMultipleChoice"),hga.forEach(t),Lbt=r(rKe," (ELECTRA model)"),rKe.forEach(t),ybt=i(Lo),IL=n(Lo,"LI",{});var tKe=s(IL);E$e=n(tKe,"STRONG",{});var uga=s(E$e);xbt=r(uga,"roberta"),uga.forEach(t),$bt=r(tKe," \u2014 "),Qse=n(tKe,"A",{href:!0});var pga=s(Qse);kbt=r(pga,"FlaxRobertaForMultipleChoice"),pga.forEach(t),Sbt=r(tKe," (RoBERTa model)"),tKe.forEach(t),Rbt=i(Lo),NL=n(Lo,"LI",{});var aKe=s(NL);C$e=n(aKe,"STRONG",{});var _ga=s(C$e);Pbt=r(_ga,"roformer"),_ga.forEach(t),Bbt=r(aKe," \u2014 "),Wse=n(aKe,"A",{href:!0});var bga=s(Wse);Ibt=r(bga,"FlaxRoFormerForMultipleChoice"),bga.forEach(t),Nbt=r(aKe," (RoFormer model)"),aKe.forEach(t),qbt=i(Lo),qL=n(Lo,"LI",{});var nKe=s(qL);w$e=n(nKe,"STRONG",{});var vga=s(w$e);jbt=r(vga,"xlm-roberta"),vga.forEach(t),Dbt=r(nKe," \u2014 "),Use=n(nKe,"A",{href:!0});var Fga=s(Use);Gbt=r(Fga,"FlaxXLMRobertaForMultipleChoice"),Fga.forEach(t),Obt=r(nKe," (XLM-RoBERTa model)"),nKe.forEach(t),Lo.forEach(t),Vbt=i(Hi),T(jL.$$.fragment,Hi),Hi.forEach(t),Ui.forEach(t),_eo=i(m),mf=n(m,"H2",{class:!0});var Rro=s(mf);DL=n(Rro,"A",{id:!0,class:!0,href:!0});var Tga=s(DL);A$e=n(Tga,"SPAN",{});var Mga=s(A$e);T(zR.$$.fragment,Mga),Mga.forEach(t),Tga.forEach(t),Xbt=i(Rro),L$e=n(Rro,"SPAN",{});var Ega=s(L$e);zbt=r(Ega,"FlaxAutoModelForNextSentencePrediction"),Ega.forEach(t),Rro.forEach(t),beo=i(m),kr=n(m,"DIV",{class:!0});var Ji=s(kr);T(QR.$$.fragment,Ji),Qbt=i(Ji),ff=n(Ji,"P",{});var sde=s(ff);Wbt=r(sde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Hse=n(sde,"A",{href:!0});var Cga=s(Hse);Ubt=r(Cga,"from_pretrained()"),Cga.forEach(t),Hbt=r(sde," class method or the "),Jse=n(sde,"A",{href:!0});var wga=s(Jse);Jbt=r(wga,"from_config()"),wga.forEach(t),Ybt=r(sde,` class
method.`),sde.forEach(t),Kbt=i(Ji),WR=n(Ji,"P",{});var Pro=s(WR);Zbt=r(Pro,"This class cannot be instantiated directly using "),y$e=n(Pro,"CODE",{});var Aga=s(y$e);e2t=r(Aga,"__init__()"),Aga.forEach(t),o2t=r(Pro," (throws an error)."),Pro.forEach(t),r2t=i(Ji),ua=n(Ji,"DIV",{class:!0});var M9=s(ua);T(UR.$$.fragment,M9),t2t=i(M9),x$e=n(M9,"P",{});var Lga=s(x$e);a2t=r(Lga,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lga.forEach(t),n2t=i(M9),gf=n(M9,"P",{});var lde=s(gf);s2t=r(lde,`Note:
Loading a model from its configuration file does `),$$e=n(lde,"STRONG",{});var yga=s($$e);l2t=r(yga,"not"),yga.forEach(t),i2t=r(lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yse=n(lde,"A",{href:!0});var xga=s(Yse);d2t=r(xga,"from_pretrained()"),xga.forEach(t),c2t=r(lde," to load the model weights."),lde.forEach(t),m2t=i(M9),T(GL.$$.fragment,M9),M9.forEach(t),f2t=i(Ji),lt=n(Ji,"DIV",{class:!0});var Yi=s(lt);T(HR.$$.fragment,Yi),g2t=i(Yi),k$e=n(Yi,"P",{});var $ga=s(k$e);h2t=r($ga,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$ga.forEach(t),u2t=i(Yi),Hn=n(Yi,"P",{});var E9=s(Hn);p2t=r(E9,"The model class to instantiate is selected based on the "),S$e=n(E9,"CODE",{});var kga=s(S$e);_2t=r(kga,"model_type"),kga.forEach(t),b2t=r(E9,` property of the config object (either
passed as an argument or loaded from `),R$e=n(E9,"CODE",{});var Sga=s(R$e);v2t=r(Sga,"pretrained_model_name_or_path"),Sga.forEach(t),F2t=r(E9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P$e=n(E9,"CODE",{});var Rga=s(P$e);T2t=r(Rga,"pretrained_model_name_or_path"),Rga.forEach(t),M2t=r(E9,":"),E9.forEach(t),E2t=i(Yi),B$e=n(Yi,"UL",{});var Pga=s(B$e);OL=n(Pga,"LI",{});var sKe=s(OL);I$e=n(sKe,"STRONG",{});var Bga=s(I$e);C2t=r(Bga,"bert"),Bga.forEach(t),w2t=r(sKe," \u2014 "),Kse=n(sKe,"A",{href:!0});var Iga=s(Kse);A2t=r(Iga,"FlaxBertForNextSentencePrediction"),Iga.forEach(t),L2t=r(sKe," (BERT model)"),sKe.forEach(t),Pga.forEach(t),y2t=i(Yi),T(VL.$$.fragment,Yi),Yi.forEach(t),Ji.forEach(t),veo=i(m),hf=n(m,"H2",{class:!0});var Bro=s(hf);XL=n(Bro,"A",{id:!0,class:!0,href:!0});var Nga=s(XL);N$e=n(Nga,"SPAN",{});var qga=s(N$e);T(JR.$$.fragment,qga),qga.forEach(t),Nga.forEach(t),x2t=i(Bro),q$e=n(Bro,"SPAN",{});var jga=s(q$e);$2t=r(jga,"FlaxAutoModelForImageClassification"),jga.forEach(t),Bro.forEach(t),Feo=i(m),Sr=n(m,"DIV",{class:!0});var Ki=s(Sr);T(YR.$$.fragment,Ki),k2t=i(Ki),uf=n(Ki,"P",{});var ide=s(uf);S2t=r(ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Zse=n(ide,"A",{href:!0});var Dga=s(Zse);R2t=r(Dga,"from_pretrained()"),Dga.forEach(t),P2t=r(ide," class method or the "),ele=n(ide,"A",{href:!0});var Gga=s(ele);B2t=r(Gga,"from_config()"),Gga.forEach(t),I2t=r(ide,` class
method.`),ide.forEach(t),N2t=i(Ki),KR=n(Ki,"P",{});var Iro=s(KR);q2t=r(Iro,"This class cannot be instantiated directly using "),j$e=n(Iro,"CODE",{});var Oga=s(j$e);j2t=r(Oga,"__init__()"),Oga.forEach(t),D2t=r(Iro," (throws an error)."),Iro.forEach(t),G2t=i(Ki),pa=n(Ki,"DIV",{class:!0});var C9=s(pa);T(ZR.$$.fragment,C9),O2t=i(C9),D$e=n(C9,"P",{});var Vga=s(D$e);V2t=r(Vga,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vga.forEach(t),X2t=i(C9),pf=n(C9,"P",{});var dde=s(pf);z2t=r(dde,`Note:
Loading a model from its configuration file does `),G$e=n(dde,"STRONG",{});var Xga=s(G$e);Q2t=r(Xga,"not"),Xga.forEach(t),W2t=r(dde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=n(dde,"A",{href:!0});var zga=s(ole);U2t=r(zga,"from_pretrained()"),zga.forEach(t),H2t=r(dde," to load the model weights."),dde.forEach(t),J2t=i(C9),T(zL.$$.fragment,C9),C9.forEach(t),Y2t=i(Ki),it=n(Ki,"DIV",{class:!0});var Zi=s(it);T(eP.$$.fragment,Zi),K2t=i(Zi),O$e=n(Zi,"P",{});var Qga=s(O$e);Z2t=r(Qga,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qga.forEach(t),e1t=i(Zi),Jn=n(Zi,"P",{});var w9=s(Jn);o1t=r(w9,"The model class to instantiate is selected based on the "),V$e=n(w9,"CODE",{});var Wga=s(V$e);r1t=r(Wga,"model_type"),Wga.forEach(t),t1t=r(w9,` property of the config object (either
passed as an argument or loaded from `),X$e=n(w9,"CODE",{});var Uga=s(X$e);a1t=r(Uga,"pretrained_model_name_or_path"),Uga.forEach(t),n1t=r(w9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z$e=n(w9,"CODE",{});var Hga=s(z$e);s1t=r(Hga,"pretrained_model_name_or_path"),Hga.forEach(t),l1t=r(w9,":"),w9.forEach(t),i1t=i(Zi),oP=n(Zi,"UL",{});var Nro=s(oP);QL=n(Nro,"LI",{});var lKe=s(QL);Q$e=n(lKe,"STRONG",{});var Jga=s(Q$e);d1t=r(Jga,"beit"),Jga.forEach(t),c1t=r(lKe," \u2014 "),rle=n(lKe,"A",{href:!0});var Yga=s(rle);m1t=r(Yga,"FlaxBeitForImageClassification"),Yga.forEach(t),f1t=r(lKe," (BEiT model)"),lKe.forEach(t),g1t=i(Nro),WL=n(Nro,"LI",{});var iKe=s(WL);W$e=n(iKe,"STRONG",{});var Kga=s(W$e);h1t=r(Kga,"vit"),Kga.forEach(t),u1t=r(iKe," \u2014 "),tle=n(iKe,"A",{href:!0});var Zga=s(tle);p1t=r(Zga,"FlaxViTForImageClassification"),Zga.forEach(t),_1t=r(iKe," (ViT model)"),iKe.forEach(t),Nro.forEach(t),b1t=i(Zi),T(UL.$$.fragment,Zi),Zi.forEach(t),Ki.forEach(t),Teo=i(m),_f=n(m,"H2",{class:!0});var qro=s(_f);HL=n(qro,"A",{id:!0,class:!0,href:!0});var eha=s(HL);U$e=n(eha,"SPAN",{});var oha=s(U$e);T(rP.$$.fragment,oha),oha.forEach(t),eha.forEach(t),v1t=i(qro),H$e=n(qro,"SPAN",{});var rha=s(H$e);F1t=r(rha,"FlaxAutoModelForVision2Seq"),rha.forEach(t),qro.forEach(t),Meo=i(m),Rr=n(m,"DIV",{class:!0});var ed=s(Rr);T(tP.$$.fragment,ed),T1t=i(ed),bf=n(ed,"P",{});var cde=s(bf);M1t=r(cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ale=n(cde,"A",{href:!0});var tha=s(ale);E1t=r(tha,"from_pretrained()"),tha.forEach(t),C1t=r(cde," class method or the "),nle=n(cde,"A",{href:!0});var aha=s(nle);w1t=r(aha,"from_config()"),aha.forEach(t),A1t=r(cde,` class
method.`),cde.forEach(t),L1t=i(ed),aP=n(ed,"P",{});var jro=s(aP);y1t=r(jro,"This class cannot be instantiated directly using "),J$e=n(jro,"CODE",{});var nha=s(J$e);x1t=r(nha,"__init__()"),nha.forEach(t),$1t=r(jro," (throws an error)."),jro.forEach(t),k1t=i(ed),_a=n(ed,"DIV",{class:!0});var A9=s(_a);T(nP.$$.fragment,A9),S1t=i(A9),Y$e=n(A9,"P",{});var sha=s(Y$e);R1t=r(sha,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sha.forEach(t),P1t=i(A9),vf=n(A9,"P",{});var mde=s(vf);B1t=r(mde,`Note:
Loading a model from its configuration file does `),K$e=n(mde,"STRONG",{});var lha=s(K$e);I1t=r(lha,"not"),lha.forEach(t),N1t=r(mde,` load the model weights. It only affects the
model\u2019s configuration. Use `),sle=n(mde,"A",{href:!0});var iha=s(sle);q1t=r(iha,"from_pretrained()"),iha.forEach(t),j1t=r(mde," to load the model weights."),mde.forEach(t),D1t=i(A9),T(JL.$$.fragment,A9),A9.forEach(t),G1t=i(ed),dt=n(ed,"DIV",{class:!0});var od=s(dt);T(sP.$$.fragment,od),O1t=i(od),Z$e=n(od,"P",{});var dha=s(Z$e);V1t=r(dha,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dha.forEach(t),X1t=i(od),Yn=n(od,"P",{});var L9=s(Yn);z1t=r(L9,"The model class to instantiate is selected based on the "),eke=n(L9,"CODE",{});var cha=s(eke);Q1t=r(cha,"model_type"),cha.forEach(t),W1t=r(L9,` property of the config object (either
passed as an argument or loaded from `),oke=n(L9,"CODE",{});var mha=s(oke);U1t=r(mha,"pretrained_model_name_or_path"),mha.forEach(t),H1t=r(L9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rke=n(L9,"CODE",{});var fha=s(rke);J1t=r(fha,"pretrained_model_name_or_path"),fha.forEach(t),Y1t=r(L9,":"),L9.forEach(t),K1t=i(od),tke=n(od,"UL",{});var gha=s(tke);YL=n(gha,"LI",{});var dKe=s(YL);ake=n(dKe,"STRONG",{});var hha=s(ake);Z1t=r(hha,"vision-encoder-decoder"),hha.forEach(t),evt=r(dKe," \u2014 "),lle=n(dKe,"A",{href:!0});var uha=s(lle);ovt=r(uha,"FlaxVisionEncoderDecoderModel"),uha.forEach(t),rvt=r(dKe," (Vision Encoder decoder model)"),dKe.forEach(t),gha.forEach(t),tvt=i(od),T(KL.$$.fragment,od),od.forEach(t),ed.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(xpa)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Zn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(os,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(rs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(id,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(dd,"class","relative group"),c(xf,"id","transformers.AutoConfig"),c(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xf,"href","#transformers.AutoConfig"),c(cd,"class","relative group"),c(qB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(jB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(DB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(GB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(OB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(VB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(XB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(QB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(UB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(aI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(lI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(iI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(AI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c($I,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(SI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(RI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(PI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(BI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(II,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(NI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(qI,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(jI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(DI,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(GI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(OI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(VI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(XI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(QI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(WI,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(UI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(KI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(ZI,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(aN,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(nN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(dN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(cN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(LN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(xN,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c($N,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(kN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(SN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(RN,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(BN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(IN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(NN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(qN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(jN,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(DN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(GN,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ON,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(VN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(XN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(zN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(QN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(WN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(UN,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(HN,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(JN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(YN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(KN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ZN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(eq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(oq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(rq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(tq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"id","transformers.AutoTokenizer"),c(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yh,"href","#transformers.AutoTokenizer"),c(fd,"class","relative group"),c(aq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(nq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(sq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(iq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(dq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(cq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(mq,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(fq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(gq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(hq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(uq,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(pq,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(_q,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(bq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(vq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Fq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Tq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Mq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Eq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Cq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(wq,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Aq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Lq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(yq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(xq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c($q,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(Nq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Dq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(Oq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(Vq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(Xq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Qq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(Wq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(Uq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(Hq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(Jq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Yq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Kq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(Zq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(ej,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(oj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(rj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(tj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(aj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ij,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(dj,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(cj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(hj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(uj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(pj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Fj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Tj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Mj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Ej,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(Cj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(wj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Aj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Lj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(yj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(xj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(Rj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Bj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Ij,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Nj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(qj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(jj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Dj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Oj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Vj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Xj,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(zj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Qj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Wj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Uj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Hj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(Jj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(Yj,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(Kj,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Zj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(eD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(oD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(rD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(tD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(aD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(nD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(sD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(lD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(dD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(gD,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(hD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(uD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(pD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(_D,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(bD,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(vD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(TD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(MD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(ED,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(CD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(wD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(AD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(LD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c($D,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(kD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(SD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(RD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(PD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(BD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(ID,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(ND,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(qD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(jD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(DD,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(GD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(OD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(VD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(XD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(zD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(QD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UD,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(HD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(JD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(YD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(KD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ZD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(eG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(oG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(rG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(tG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(aG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(nG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(sG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(lG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(iG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pu,"id","transformers.AutoFeatureExtractor"),c(Pu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pu,"href","#transformers.AutoFeatureExtractor"),c(gd,"class","relative group"),c(dG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(cG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(_G,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(bG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(vG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(FG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(TG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(MG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(EG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(CG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(AG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(LG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(yG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(xG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c($G,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(kG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(SG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(RG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(PG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(BG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(qG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(jG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(DG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OG,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(VG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(XG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ep,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cp,"id","transformers.AutoProcessor"),c(Cp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cp,"href","#transformers.AutoProcessor"),c(hd,"class","relative group"),c(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(YG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(KG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(ZG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(eO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(oO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(rO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(tO,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(aO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(nO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(iO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(dO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(cO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(gO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(hO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_O,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Up,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hp,"id","transformers.AutoModel"),c(Hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hp,"href","#transformers.AutoModel"),c(pd,"class","relative group"),c(bO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(MO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(EO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(CO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(wO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(AO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(LO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(yO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(xO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c($O,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(kO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(SO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(RO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(PO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(BO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(IO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(NO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(qO,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(jO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(DO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(GO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(OO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(VO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(XO,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(zO,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(QO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(WO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(UO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(HO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(JO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(YO,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(KO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(ZO,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),c(eV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(oV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(rV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(tV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(aV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(nV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(sV,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(lV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(iV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(dV,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(cV,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(mV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(fV,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(gV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(hV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(uV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(pV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(_V,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(bV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(vV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(FV,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(TV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(MV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(EV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(CV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(wV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(AV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(LV,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(yV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(xV,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c($V,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(kV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(SV,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(RV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(PV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(BV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(IV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(NV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(qV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(jV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(DV,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(GV,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(OV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(VV,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(XV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(zV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(QV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(WV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(UV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(HV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(JV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(YV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(KV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(ZV,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(eX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(oX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(rX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(tX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(aX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(nX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(sX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(lX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(iX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(dX,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(cX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(mX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(fX,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(gX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(hX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(uX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(pX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(_X,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(bX,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(vX,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(FX,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(TX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(MX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(EX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(CX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(wX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(AX,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(LX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(yX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(xX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c($X,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(kX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(SX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(RX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(PX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m2,"id","transformers.AutoModelForPreTraining"),c(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m2,"href","#transformers.AutoModelForPreTraining"),c(vd,"class","relative group"),c(BX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(jX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(DX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(GX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(OX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(VX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(XX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(zX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(QX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(WX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(UX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(HX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(JX,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(YX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(KX,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(ZX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(ez,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(oz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(rz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(az,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(nz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(sz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(lz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(iz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(dz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(cz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(fz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(gz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hz,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(uz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(_z,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Mz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Ez,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(Cz,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(wz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Az,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Lz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(yz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($z,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(kz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d1,"id","transformers.AutoModelForCausalLM"),c(d1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d1,"href","#transformers.AutoModelForCausalLM"),c(Md,"class","relative group"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Iz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(qz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(jz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Dz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Gz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Oz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Vz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Xz,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(zz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Wz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Uz,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(Hz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jz,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Kz,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c(Zz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(eQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(aQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(cQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(mQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pQ,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vQ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForMaskedLM"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForMaskedLM"),c(wd,"class","relative group"),c(EQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c($Q,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(PQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(IQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(qQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(jQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(DQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(GQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(QQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(JQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(eW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(oW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(rW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(aW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForSeq2SeqLM"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForSeq2SeqLM"),c(yd,"class","relative group"),c(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(uW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(pW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(_W,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(bW,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(FW,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(TW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(MW,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(EW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(wW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(AW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(LW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(yW,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(xW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c($W,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(kW,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(SW,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForSequenceClassification"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForSequenceClassification"),c(kd,"class","relative group"),c(RW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(YW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c(KW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ZW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(CU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(wU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(AU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(LU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(yU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c($U,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(SU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(RU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(PU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForMultipleChoice"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForMultipleChoice"),c(Pd,"class","relative group"),c(BU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(jU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(DU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(GU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(OU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(VU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(XU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(zU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(QU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(WU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(UU,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c(HU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(JU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(YU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(KU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(ZU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(eH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(oH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(rH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(tH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(aH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(nH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(sH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(lH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(iH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(dH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(cH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(mH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(fH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(gH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(hH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(uH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForNextSentencePrediction"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForNextSentencePrediction"),c(Nd,"class","relative group"),c(pH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(FH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(TH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(MH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(EH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(CH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(wH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.AutoModelForTokenClassification"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.AutoModelForTokenClassification"),c(Dd,"class","relative group"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c($H,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.AutoModelForQuestionAnswering"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.AutoModelForQuestionAnswering"),c(Vd,"class","relative group"),c(gJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(_J,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(bJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(vJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(FJ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(TJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(MJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(EJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(wJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(AJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(LJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(yJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(xJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c($J,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(kJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(SJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(RJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(PJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(BJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(IJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(NJ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(qJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(jJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(DJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zJ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(QJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(WJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(UJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(HJ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZJ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.AutoModelForTableQuestionAnswering"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qd,"class","relative group"),c(sY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Hd,"class","relative group"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(hY,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(uY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a4,"id","transformers.AutoModelForImageClassification"),c(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a4,"href","#transformers.AutoModelForImageClassification"),c(Zd,"class","relative group"),c(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(TY,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(MY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(wY,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(yY,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c($Y,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(kY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(SY,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(RY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(PY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(BY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(IY,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(NY,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(qY,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(jY,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.AutoModelForVideoClassification"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.AutoModelForVideoClassification"),c(rc,"class","relative group"),c(DY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.AutoModelForVision2Seq"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.AutoModelForVision2Seq"),c(nc,"class","relative group"),c(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S4,"id","transformers.AutoModelForVisualQuestionAnswering"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(ic,"class","relative group"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.AutoModelForAudioClassification"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.AutoModelForAudioClassification"),c(mc,"class","relative group"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.AutoModelForAudioFrameClassification"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.AutoModelForAudioFrameClassification"),c(hc,"class","relative group"),c(cK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.AutoModelForCTC"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.AutoModelForCTC"),c(_c,"class","relative group"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(MK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(EK,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(CK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(wK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(AK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(xK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c($K,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.AutoModelForSpeechSeq2Seq"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fc,"class","relative group"),c(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(BK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.AutoModelForAudioXVector"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.AutoModelForAudioXVector"),c(Ec,"class","relative group"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(DK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(OK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(VK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.AutoModelForMaskedImageModeling"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ac,"class","relative group"),c(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(UK,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(HK,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(JK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.AutoModelForObjectDetection"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.AutoModelForObjectDetection"),c(xc,"class","relative group"),c(YK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(oZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(rZ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.AutoModelForImageSegmentation"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.AutoModelForImageSegmentation"),c(Rc,"class","relative group"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.AutoModelForSemanticSegmentation"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ic,"class","relative group"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(fZ,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(gZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(hZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.AutoModelForInstanceSegmentation"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.AutoModelForInstanceSegmentation"),c(jc,"class","relative group"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.TFAutoModel"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.TFAutoModel"),c(Oc,"class","relative group"),c(vZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(EZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(CZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(wZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(AZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(LZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(yZ,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(xZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c($Z,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(kZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(SZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(RZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(PZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(BZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(IZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(NZ,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(jZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(DZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(GZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(OZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(VZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(XZ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(zZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QZ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(WZ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(UZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(HZ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(JZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(YZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(KZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(ZZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(eee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(oee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(ree,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(tee,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(aee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(nee,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(see,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(lee,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(iee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(dee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(mee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fee,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(gee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(hee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(uee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pee,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(_ee,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(bee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(vee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(Fee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(Tee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Mee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.TFAutoModelForPreTraining"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.TFAutoModelForPreTraining"),c(zc,"class","relative group"),c(Eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Lee,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(xee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c($ee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(kee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(See,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Ree,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Pee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Bee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Iee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Nee,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(qee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(jee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Dee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Gee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Oee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Vee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Xee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(zee,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Qee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Wee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Uee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.TFAutoModelForCausalLM"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.TFAutoModelForCausalLM"),c(Uc,"class","relative group"),c(Hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Zee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(eoe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ooe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(roe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(toe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(aoe,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(noe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(soe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(loe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ioe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(doe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(coe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(moe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.TFAutoModelForImageClassification"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.TFAutoModelForImageClassification"),c(Yc,"class","relative group"),c(foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uoe,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(poe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(_oe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(boe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(voe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(Foe,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(Toe,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(Moe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(Eoe,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(Coe,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.TFAutoModelForSemanticSegmentation"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(em,"class","relative group"),c(woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yoe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(xoe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c($oe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.TFAutoModelForMaskedLM"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.TFAutoModelForMaskedLM"),c(am,"class","relative group"),c(koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Boe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Ioe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Noe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(qoe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(joe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Doe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Goe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Ooe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Voe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Xoe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zoe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Qoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(Woe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Uoe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(Hoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Joe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Yoe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Koe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Zoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.TFAutoModelForSeq2SeqLM"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(lm,"class","relative group"),c(ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ore,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tre,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(are,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(nre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(sre,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(lre,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(ire,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(dre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(cre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(mre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(fre,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.TFAutoModelForSequenceClassification"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.TFAutoModelForSequenceClassification"),c(cm,"class","relative group"),c(gre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(_re,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(bre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(vre,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Fre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Tre,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Mre,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Ere,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Cre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(wre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Are,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Lre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(yre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(xre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c($re,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(kre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Sre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Rre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Pre,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Bre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Ire,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Nre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(qre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(jre,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Dre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Gre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Ore,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.TFAutoModelForMultipleChoice"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.TFAutoModelForMultipleChoice"),c(gm,"class","relative group"),c(Vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Wre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Ure,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Hre,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Jre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Yre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Kre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Zre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(ete,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(ote,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(rte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(tte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(ate,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(nte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(ste,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(lte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ite,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(eA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(pm,"class","relative group"),c(dte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(gte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(vm,"class","relative group"),c(hte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ute,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_te,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dA,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(dA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dA,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Mm,"class","relative group"),c(bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gA,"id","transformers.TFAutoModelForTokenClassification"),c(gA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gA,"href","#transformers.TFAutoModelForTokenClassification"),c(wm,"class","relative group"),c(Mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Ate,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Lte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(xte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c($te,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(kte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Ste,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Rte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Pte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Bte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Ite,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(Nte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(qte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(jte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Dte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Gte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Ote,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Vte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Xte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(zte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NA,"id","transformers.TFAutoModelForQuestionAnswering"),c(NA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NA,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ym,"class","relative group"),c(Qte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ute,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Jte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Yte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Kte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Zte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(eae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(oae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(rae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(tae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(aae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(nae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(sae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(lae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(iae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(dae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(cae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(mae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(fae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(gae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(hae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(uae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.TFAutoModelForVision2Seq"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.TFAutoModelForVision2Seq"),c(km,"class","relative group"),c(pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vae,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Pm,"class","relative group"),c(Fae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eae,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.FlaxAutoModel"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.FlaxAutoModel"),c(Nm,"class","relative group"),c(Cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(yae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(xae,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c($ae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(kae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Sae,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Rae,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Pae,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Bae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Iae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Nae,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(qae,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(jae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Dae,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Gae,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Oae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Vae,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Xae,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(zae,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Qae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Wae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Uae,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Hae,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Jae,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Yae,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Kae,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Zae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.FlaxAutoModelForCausalLM"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.FlaxAutoModelForCausalLM"),c(Dm,"class","relative group"),c(ene,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(one,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(ane,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(nne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(sne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(lne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ine,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(dne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(cne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(mne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(fne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.FlaxAutoModelForPreTraining"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.FlaxAutoModelForPreTraining"),c(Vm,"class","relative group"),c(gne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(une,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(_ne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(vne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Fne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Tne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Mne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Ene,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Cne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ane,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Lne,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(yne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F7,"id","transformers.FlaxAutoModelForMaskedLM"),c(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F7,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Qm,"class","relative group"),c(xne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Rne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Pne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Bne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Ine,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Nne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(qne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Dne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Gne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R7,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R7,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Hm,"class","relative group"),c(One,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Qne,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Wne,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Une,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Hne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Jne,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Yne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Kne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Zne,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(ese,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Km,"class","relative group"),c(ose,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ase,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(nse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(sse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(lse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(ise,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(dse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(cse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(mse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(fse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(gse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nL,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(nL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(of,"class","relative group"),c(hse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(use,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_se,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(bse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(vse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Fse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Tse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Mse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Ese,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Cse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(wse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ase,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bL,"id","transformers.FlaxAutoModelForTokenClassification"),c(bL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bL,"href","#transformers.FlaxAutoModelForTokenClassification"),c(af,"class","relative group"),c(Lse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($se,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Sse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Rse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Pse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Bse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Ise,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Nse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xL,"id","transformers.FlaxAutoModelForMultipleChoice"),c(xL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xL,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(lf,"class","relative group"),c(qse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Ose,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Vse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Xse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(zse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Qse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Wse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Use,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DL,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(DL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DL,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(mf,"class","relative group"),c(Hse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XL,"id","transformers.FlaxAutoModelForImageClassification"),c(XL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XL,"href","#transformers.FlaxAutoModelForImageClassification"),c(hf,"class","relative group"),c(Zse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ele,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ole,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rle,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(tle,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HL,"id","transformers.FlaxAutoModelForVision2Seq"),c(HL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HL,"href","#transformers.FlaxAutoModelForVision2Seq"),c(_f,"class","relative group"),c(ale,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lle,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,yo),e(yo,rd),b(m,Ef,_),b(m,pt,_),e(pt,td),e(pt,ad),e(ad,y9),e(pt,Cf),b(m,Ve,_),b(m,He,_),e(He,nd),e(He,Zn),e(Zn,x9),e(He,es),e(He,os),e(os,$9),e(He,sd),e(He,rs),e(rs,k9),e(He,ld),b(m,wf,_),M(Qa,m,_),b(m,Je,_),b(m,Ae,_),e(Ae,SB),e(Ae,id),e(id,RB),e(Ae,PB),b(m,xo,_),b(m,Wa,_),e(Wa,BB),e(Wa,Af),e(Af,IB),e(Wa,Dro),b(m,cKe,_),b(m,dd,_),e(dd,Lf),e(Lf,fde),M(S9,fde,null),e(dd,Gro),e(dd,gde),e(gde,Oro),b(m,mKe,_),b(m,ts,_),e(ts,Vro),e(ts,hde),e(hde,Xro),e(ts,zro),e(ts,ude),e(ude,Qro),e(ts,Wro),b(m,fKe,_),M(R9,m,_),b(m,gKe,_),b(m,NB,_),e(NB,Uro),b(m,hKe,_),M(yf,m,_),b(m,uKe,_),b(m,cd,_),e(cd,xf),e(xf,pde),M(P9,pde,null),e(cd,Hro),e(cd,_de),e(_de,Jro),b(m,pKe,_),b(m,$o,_),M(B9,$o,null),e($o,Yro),e($o,I9),e(I9,Kro),e(I9,qB),e(qB,Zro),e(I9,eto),e($o,oto),e($o,N9),e(N9,rto),e(N9,bde),e(bde,tto),e(N9,ato),e($o,nto),e($o,Pr),M(q9,Pr,null),e(Pr,sto),e(Pr,vde),e(vde,lto),e(Pr,ito),e(Pr,md),e(md,dto),e(md,Fde),e(Fde,cto),e(md,mto),e(md,Tde),e(Tde,fto),e(md,gto),e(Pr,hto),e(Pr,A),e(A,$f),e($f,Mde),e(Mde,uto),e($f,pto),e($f,jB),e(jB,_to),e($f,bto),e(A,vto),e(A,kf),e(kf,Ede),e(Ede,Fto),e(kf,Tto),e(kf,DB),e(DB,Mto),e(kf,Eto),e(A,Cto),e(A,Sf),e(Sf,Cde),e(Cde,wto),e(Sf,Ato),e(Sf,GB),e(GB,Lto),e(Sf,yto),e(A,xto),e(A,Rf),e(Rf,wde),e(wde,$to),e(Rf,kto),e(Rf,OB),e(OB,Sto),e(Rf,Rto),e(A,Pto),e(A,Pf),e(Pf,Ade),e(Ade,Bto),e(Pf,Ito),e(Pf,VB),e(VB,Nto),e(Pf,qto),e(A,jto),e(A,Bf),e(Bf,Lde),e(Lde,Dto),e(Bf,Gto),e(Bf,XB),e(XB,Oto),e(Bf,Vto),e(A,Xto),e(A,If),e(If,yde),e(yde,zto),e(If,Qto),e(If,zB),e(zB,Wto),e(If,Uto),e(A,Hto),e(A,Nf),e(Nf,xde),e(xde,Jto),e(Nf,Yto),e(Nf,QB),e(QB,Kto),e(Nf,Zto),e(A,eao),e(A,qf),e(qf,$de),e($de,oao),e(qf,rao),e(qf,WB),e(WB,tao),e(qf,aao),e(A,nao),e(A,jf),e(jf,kde),e(kde,sao),e(jf,lao),e(jf,UB),e(UB,iao),e(jf,dao),e(A,cao),e(A,Df),e(Df,Sde),e(Sde,mao),e(Df,fao),e(Df,HB),e(HB,gao),e(Df,hao),e(A,uao),e(A,Gf),e(Gf,Rde),e(Rde,pao),e(Gf,_ao),e(Gf,JB),e(JB,bao),e(Gf,vao),e(A,Fao),e(A,Of),e(Of,Pde),e(Pde,Tao),e(Of,Mao),e(Of,YB),e(YB,Eao),e(Of,Cao),e(A,wao),e(A,Vf),e(Vf,Bde),e(Bde,Aao),e(Vf,Lao),e(Vf,KB),e(KB,yao),e(Vf,xao),e(A,$ao),e(A,Xf),e(Xf,Ide),e(Ide,kao),e(Xf,Sao),e(Xf,ZB),e(ZB,Rao),e(Xf,Pao),e(A,Bao),e(A,zf),e(zf,Nde),e(Nde,Iao),e(zf,Nao),e(zf,eI),e(eI,qao),e(zf,jao),e(A,Dao),e(A,Qf),e(Qf,qde),e(qde,Gao),e(Qf,Oao),e(Qf,oI),e(oI,Vao),e(Qf,Xao),e(A,zao),e(A,Wf),e(Wf,jde),e(jde,Qao),e(Wf,Wao),e(Wf,rI),e(rI,Uao),e(Wf,Hao),e(A,Jao),e(A,Uf),e(Uf,Dde),e(Dde,Yao),e(Uf,Kao),e(Uf,tI),e(tI,Zao),e(Uf,eno),e(A,ono),e(A,Hf),e(Hf,Gde),e(Gde,rno),e(Hf,tno),e(Hf,aI),e(aI,ano),e(Hf,nno),e(A,sno),e(A,Jf),e(Jf,Ode),e(Ode,lno),e(Jf,ino),e(Jf,nI),e(nI,dno),e(Jf,cno),e(A,mno),e(A,Yf),e(Yf,Vde),e(Vde,fno),e(Yf,gno),e(Yf,sI),e(sI,hno),e(Yf,uno),e(A,pno),e(A,Kf),e(Kf,Xde),e(Xde,_no),e(Kf,bno),e(Kf,lI),e(lI,vno),e(Kf,Fno),e(A,Tno),e(A,Zf),e(Zf,zde),e(zde,Mno),e(Zf,Eno),e(Zf,iI),e(iI,Cno),e(Zf,wno),e(A,Ano),e(A,eg),e(eg,Qde),e(Qde,Lno),e(eg,yno),e(eg,dI),e(dI,xno),e(eg,$no),e(A,kno),e(A,og),e(og,Wde),e(Wde,Sno),e(og,Rno),e(og,cI),e(cI,Pno),e(og,Bno),e(A,Ino),e(A,rg),e(rg,Ude),e(Ude,Nno),e(rg,qno),e(rg,mI),e(mI,jno),e(rg,Dno),e(A,Gno),e(A,tg),e(tg,Hde),e(Hde,Ono),e(tg,Vno),e(tg,fI),e(fI,Xno),e(tg,zno),e(A,Qno),e(A,ag),e(ag,Jde),e(Jde,Wno),e(ag,Uno),e(ag,gI),e(gI,Hno),e(ag,Jno),e(A,Yno),e(A,ng),e(ng,Yde),e(Yde,Kno),e(ng,Zno),e(ng,hI),e(hI,eso),e(ng,oso),e(A,rso),e(A,sg),e(sg,Kde),e(Kde,tso),e(sg,aso),e(sg,uI),e(uI,nso),e(sg,sso),e(A,lso),e(A,lg),e(lg,Zde),e(Zde,iso),e(lg,dso),e(lg,pI),e(pI,cso),e(lg,mso),e(A,fso),e(A,ig),e(ig,ece),e(ece,gso),e(ig,hso),e(ig,_I),e(_I,uso),e(ig,pso),e(A,_so),e(A,dg),e(dg,oce),e(oce,bso),e(dg,vso),e(dg,bI),e(bI,Fso),e(dg,Tso),e(A,Mso),e(A,cg),e(cg,rce),e(rce,Eso),e(cg,Cso),e(cg,vI),e(vI,wso),e(cg,Aso),e(A,Lso),e(A,mg),e(mg,tce),e(tce,yso),e(mg,xso),e(mg,FI),e(FI,$so),e(mg,kso),e(A,Sso),e(A,fg),e(fg,ace),e(ace,Rso),e(fg,Pso),e(fg,TI),e(TI,Bso),e(fg,Iso),e(A,Nso),e(A,gg),e(gg,nce),e(nce,qso),e(gg,jso),e(gg,MI),e(MI,Dso),e(gg,Gso),e(A,Oso),e(A,hg),e(hg,sce),e(sce,Vso),e(hg,Xso),e(hg,EI),e(EI,zso),e(hg,Qso),e(A,Wso),e(A,ug),e(ug,lce),e(lce,Uso),e(ug,Hso),e(ug,CI),e(CI,Jso),e(ug,Yso),e(A,Kso),e(A,pg),e(pg,ice),e(ice,Zso),e(pg,elo),e(pg,wI),e(wI,olo),e(pg,rlo),e(A,tlo),e(A,_g),e(_g,dce),e(dce,alo),e(_g,nlo),e(_g,AI),e(AI,slo),e(_g,llo),e(A,ilo),e(A,bg),e(bg,cce),e(cce,dlo),e(bg,clo),e(bg,LI),e(LI,mlo),e(bg,flo),e(A,glo),e(A,vg),e(vg,mce),e(mce,hlo),e(vg,ulo),e(vg,yI),e(yI,plo),e(vg,_lo),e(A,blo),e(A,Fg),e(Fg,fce),e(fce,vlo),e(Fg,Flo),e(Fg,xI),e(xI,Tlo),e(Fg,Mlo),e(A,Elo),e(A,Tg),e(Tg,gce),e(gce,Clo),e(Tg,wlo),e(Tg,$I),e($I,Alo),e(Tg,Llo),e(A,ylo),e(A,Mg),e(Mg,hce),e(hce,xlo),e(Mg,$lo),e(Mg,kI),e(kI,klo),e(Mg,Slo),e(A,Rlo),e(A,Eg),e(Eg,uce),e(uce,Plo),e(Eg,Blo),e(Eg,SI),e(SI,Ilo),e(Eg,Nlo),e(A,qlo),e(A,Cg),e(Cg,pce),e(pce,jlo),e(Cg,Dlo),e(Cg,RI),e(RI,Glo),e(Cg,Olo),e(A,Vlo),e(A,wg),e(wg,_ce),e(_ce,Xlo),e(wg,zlo),e(wg,PI),e(PI,Qlo),e(wg,Wlo),e(A,Ulo),e(A,Ag),e(Ag,bce),e(bce,Hlo),e(Ag,Jlo),e(Ag,BI),e(BI,Ylo),e(Ag,Klo),e(A,Zlo),e(A,Lg),e(Lg,vce),e(vce,eio),e(Lg,oio),e(Lg,II),e(II,rio),e(Lg,tio),e(A,aio),e(A,yg),e(yg,Fce),e(Fce,nio),e(yg,sio),e(yg,NI),e(NI,lio),e(yg,iio),e(A,dio),e(A,xg),e(xg,Tce),e(Tce,cio),e(xg,mio),e(xg,qI),e(qI,fio),e(xg,gio),e(A,hio),e(A,$g),e($g,Mce),e(Mce,uio),e($g,pio),e($g,jI),e(jI,_io),e($g,bio),e(A,vio),e(A,kg),e(kg,Ece),e(Ece,Fio),e(kg,Tio),e(kg,DI),e(DI,Mio),e(kg,Eio),e(A,Cio),e(A,Sg),e(Sg,Cce),e(Cce,wio),e(Sg,Aio),e(Sg,GI),e(GI,Lio),e(Sg,yio),e(A,xio),e(A,Rg),e(Rg,wce),e(wce,$io),e(Rg,kio),e(Rg,OI),e(OI,Sio),e(Rg,Rio),e(A,Pio),e(A,Pg),e(Pg,Ace),e(Ace,Bio),e(Pg,Iio),e(Pg,VI),e(VI,Nio),e(Pg,qio),e(A,jio),e(A,Bg),e(Bg,Lce),e(Lce,Dio),e(Bg,Gio),e(Bg,XI),e(XI,Oio),e(Bg,Vio),e(A,Xio),e(A,Ig),e(Ig,yce),e(yce,zio),e(Ig,Qio),e(Ig,zI),e(zI,Wio),e(Ig,Uio),e(A,Hio),e(A,Ng),e(Ng,xce),e(xce,Jio),e(Ng,Yio),e(Ng,QI),e(QI,Kio),e(Ng,Zio),e(A,edo),e(A,qg),e(qg,$ce),e($ce,odo),e(qg,rdo),e(qg,WI),e(WI,tdo),e(qg,ado),e(A,ndo),e(A,jg),e(jg,kce),e(kce,sdo),e(jg,ldo),e(jg,UI),e(UI,ido),e(jg,ddo),e(A,cdo),e(A,Dg),e(Dg,Sce),e(Sce,mdo),e(Dg,fdo),e(Dg,HI),e(HI,gdo),e(Dg,hdo),e(A,udo),e(A,Gg),e(Gg,Rce),e(Rce,pdo),e(Gg,_do),e(Gg,JI),e(JI,bdo),e(Gg,vdo),e(A,Fdo),e(A,Og),e(Og,Pce),e(Pce,Tdo),e(Og,Mdo),e(Og,YI),e(YI,Edo),e(Og,Cdo),e(A,wdo),e(A,Vg),e(Vg,Bce),e(Bce,Ado),e(Vg,Ldo),e(Vg,KI),e(KI,ydo),e(Vg,xdo),e(A,$do),e(A,Xg),e(Xg,Ice),e(Ice,kdo),e(Xg,Sdo),e(Xg,ZI),e(ZI,Rdo),e(Xg,Pdo),e(A,Bdo),e(A,zg),e(zg,Nce),e(Nce,Ido),e(zg,Ndo),e(zg,eN),e(eN,qdo),e(zg,jdo),e(A,Ddo),e(A,Qg),e(Qg,qce),e(qce,Gdo),e(Qg,Odo),e(Qg,oN),e(oN,Vdo),e(Qg,Xdo),e(A,zdo),e(A,Wg),e(Wg,jce),e(jce,Qdo),e(Wg,Wdo),e(Wg,rN),e(rN,Udo),e(Wg,Hdo),e(A,Jdo),e(A,Ug),e(Ug,Dce),e(Dce,Ydo),e(Ug,Kdo),e(Ug,tN),e(tN,Zdo),e(Ug,eco),e(A,oco),e(A,Hg),e(Hg,Gce),e(Gce,rco),e(Hg,tco),e(Hg,aN),e(aN,aco),e(Hg,nco),e(A,sco),e(A,Jg),e(Jg,Oce),e(Oce,lco),e(Jg,ico),e(Jg,nN),e(nN,dco),e(Jg,cco),e(A,mco),e(A,Yg),e(Yg,Vce),e(Vce,fco),e(Yg,gco),e(Yg,sN),e(sN,hco),e(Yg,uco),e(A,pco),e(A,Kg),e(Kg,Xce),e(Xce,_co),e(Kg,bco),e(Kg,lN),e(lN,vco),e(Kg,Fco),e(A,Tco),e(A,Zg),e(Zg,zce),e(zce,Mco),e(Zg,Eco),e(Zg,iN),e(iN,Cco),e(Zg,wco),e(A,Aco),e(A,eh),e(eh,Qce),e(Qce,Lco),e(eh,yco),e(eh,dN),e(dN,xco),e(eh,$co),e(A,kco),e(A,oh),e(oh,Wce),e(Wce,Sco),e(oh,Rco),e(oh,cN),e(cN,Pco),e(oh,Bco),e(A,Ico),e(A,rh),e(rh,Uce),e(Uce,Nco),e(rh,qco),e(rh,mN),e(mN,jco),e(rh,Dco),e(A,Gco),e(A,th),e(th,Hce),e(Hce,Oco),e(th,Vco),e(th,fN),e(fN,Xco),e(th,zco),e(A,Qco),e(A,ah),e(ah,Jce),e(Jce,Wco),e(ah,Uco),e(ah,gN),e(gN,Hco),e(ah,Jco),e(A,Yco),e(A,nh),e(nh,Yce),e(Yce,Kco),e(nh,Zco),e(nh,hN),e(hN,emo),e(nh,omo),e(A,rmo),e(A,sh),e(sh,Kce),e(Kce,tmo),e(sh,amo),e(sh,uN),e(uN,nmo),e(sh,smo),e(A,lmo),e(A,lh),e(lh,Zce),e(Zce,imo),e(lh,dmo),e(lh,pN),e(pN,cmo),e(lh,mmo),e(A,fmo),e(A,ih),e(ih,eme),e(eme,gmo),e(ih,hmo),e(ih,_N),e(_N,umo),e(ih,pmo),e(A,_mo),e(A,dh),e(dh,ome),e(ome,bmo),e(dh,vmo),e(dh,bN),e(bN,Fmo),e(dh,Tmo),e(A,Mmo),e(A,ch),e(ch,rme),e(rme,Emo),e(ch,Cmo),e(ch,vN),e(vN,wmo),e(ch,Amo),e(A,Lmo),e(A,mh),e(mh,tme),e(tme,ymo),e(mh,xmo),e(mh,FN),e(FN,$mo),e(mh,kmo),e(A,Smo),e(A,fh),e(fh,ame),e(ame,Rmo),e(fh,Pmo),e(fh,TN),e(TN,Bmo),e(fh,Imo),e(A,Nmo),e(A,gh),e(gh,nme),e(nme,qmo),e(gh,jmo),e(gh,MN),e(MN,Dmo),e(gh,Gmo),e(A,Omo),e(A,hh),e(hh,sme),e(sme,Vmo),e(hh,Xmo),e(hh,EN),e(EN,zmo),e(hh,Qmo),e(A,Wmo),e(A,uh),e(uh,lme),e(lme,Umo),e(uh,Hmo),e(uh,CN),e(CN,Jmo),e(uh,Ymo),e(A,Kmo),e(A,ph),e(ph,ime),e(ime,Zmo),e(ph,efo),e(ph,wN),e(wN,ofo),e(ph,rfo),e(A,tfo),e(A,_h),e(_h,dme),e(dme,afo),e(_h,nfo),e(_h,AN),e(AN,sfo),e(_h,lfo),e(A,ifo),e(A,bh),e(bh,cme),e(cme,dfo),e(bh,cfo),e(bh,LN),e(LN,mfo),e(bh,ffo),e(A,gfo),e(A,vh),e(vh,mme),e(mme,hfo),e(vh,ufo),e(vh,yN),e(yN,pfo),e(vh,_fo),e(A,bfo),e(A,Fh),e(Fh,fme),e(fme,vfo),e(Fh,Ffo),e(Fh,xN),e(xN,Tfo),e(Fh,Mfo),e(A,Efo),e(A,Th),e(Th,gme),e(gme,Cfo),e(Th,wfo),e(Th,$N),e($N,Afo),e(Th,Lfo),e(A,yfo),e(A,Mh),e(Mh,hme),e(hme,xfo),e(Mh,$fo),e(Mh,kN),e(kN,kfo),e(Mh,Sfo),e(A,Rfo),e(A,Eh),e(Eh,ume),e(ume,Pfo),e(Eh,Bfo),e(Eh,SN),e(SN,Ifo),e(Eh,Nfo),e(A,qfo),e(A,Ch),e(Ch,pme),e(pme,jfo),e(Ch,Dfo),e(Ch,RN),e(RN,Gfo),e(Ch,Ofo),e(A,Vfo),e(A,wh),e(wh,_me),e(_me,Xfo),e(wh,zfo),e(wh,PN),e(PN,Qfo),e(wh,Wfo),e(A,Ufo),e(A,Ah),e(Ah,bme),e(bme,Hfo),e(Ah,Jfo),e(Ah,BN),e(BN,Yfo),e(Ah,Kfo),e(A,Zfo),e(A,Lh),e(Lh,vme),e(vme,ego),e(Lh,ogo),e(Lh,IN),e(IN,rgo),e(Lh,tgo),e(A,ago),e(A,yh),e(yh,Fme),e(Fme,ngo),e(yh,sgo),e(yh,NN),e(NN,lgo),e(yh,igo),e(A,dgo),e(A,xh),e(xh,Tme),e(Tme,cgo),e(xh,mgo),e(xh,qN),e(qN,fgo),e(xh,ggo),e(A,hgo),e(A,$h),e($h,Mme),e(Mme,ugo),e($h,pgo),e($h,jN),e(jN,_go),e($h,bgo),e(A,vgo),e(A,kh),e(kh,Eme),e(Eme,Fgo),e(kh,Tgo),e(kh,DN),e(DN,Mgo),e(kh,Ego),e(A,Cgo),e(A,Sh),e(Sh,Cme),e(Cme,wgo),e(Sh,Ago),e(Sh,GN),e(GN,Lgo),e(Sh,ygo),e(A,xgo),e(A,Rh),e(Rh,wme),e(wme,$go),e(Rh,kgo),e(Rh,ON),e(ON,Sgo),e(Rh,Rgo),e(A,Pgo),e(A,Ph),e(Ph,Ame),e(Ame,Bgo),e(Ph,Igo),e(Ph,VN),e(VN,Ngo),e(Ph,qgo),e(A,jgo),e(A,Bh),e(Bh,Lme),e(Lme,Dgo),e(Bh,Ggo),e(Bh,XN),e(XN,Ogo),e(Bh,Vgo),e(A,Xgo),e(A,Ih),e(Ih,yme),e(yme,zgo),e(Ih,Qgo),e(Ih,zN),e(zN,Wgo),e(Ih,Ugo),e(A,Hgo),e(A,Nh),e(Nh,xme),e(xme,Jgo),e(Nh,Ygo),e(Nh,QN),e(QN,Kgo),e(Nh,Zgo),e(A,eho),e(A,qh),e(qh,$me),e($me,oho),e(qh,rho),e(qh,WN),e(WN,tho),e(qh,aho),e(A,nho),e(A,jh),e(jh,kme),e(kme,sho),e(jh,lho),e(jh,UN),e(UN,iho),e(jh,dho),e(A,cho),e(A,Dh),e(Dh,Sme),e(Sme,mho),e(Dh,fho),e(Dh,HN),e(HN,gho),e(Dh,hho),e(A,uho),e(A,Gh),e(Gh,Rme),e(Rme,pho),e(Gh,_ho),e(Gh,JN),e(JN,bho),e(Gh,vho),e(A,Fho),e(A,Oh),e(Oh,Pme),e(Pme,Tho),e(Oh,Mho),e(Oh,YN),e(YN,Eho),e(Oh,Cho),e(A,who),e(A,Vh),e(Vh,Bme),e(Bme,Aho),e(Vh,Lho),e(Vh,KN),e(KN,yho),e(Vh,xho),e(A,$ho),e(A,Xh),e(Xh,Ime),e(Ime,kho),e(Xh,Sho),e(Xh,ZN),e(ZN,Rho),e(Xh,Pho),e(A,Bho),e(A,zh),e(zh,Nme),e(Nme,Iho),e(zh,Nho),e(zh,eq),e(eq,qho),e(zh,jho),e(A,Dho),e(A,Qh),e(Qh,qme),e(qme,Gho),e(Qh,Oho),e(Qh,oq),e(oq,Vho),e(Qh,Xho),e(A,zho),e(A,Wh),e(Wh,jme),e(jme,Qho),e(Wh,Who),e(Wh,rq),e(rq,Uho),e(Wh,Hho),e(A,Jho),e(A,Uh),e(Uh,Dme),e(Dme,Yho),e(Uh,Kho),e(Uh,tq),e(tq,Zho),e(Uh,euo),e(Pr,ouo),M(Hh,Pr,null),e($o,ruo),e($o,Jh),M(j9,Jh,null),e(Jh,tuo),e(Jh,Gme),e(Gme,auo),b(m,_Ke,_),b(m,fd,_),e(fd,Yh),e(Yh,Ome),M(D9,Ome,null),e(fd,nuo),e(fd,Vme),e(Vme,suo),b(m,bKe,_),b(m,ko,_),M(G9,ko,null),e(ko,luo),e(ko,O9),e(O9,iuo),e(O9,aq),e(aq,duo),e(O9,cuo),e(ko,muo),e(ko,V9),e(V9,fuo),e(V9,Xme),e(Xme,guo),e(V9,huo),e(ko,uuo),e(ko,Br),M(X9,Br,null),e(Br,puo),e(Br,zme),e(zme,_uo),e(Br,buo),e(Br,Ua),e(Ua,vuo),e(Ua,Qme),e(Qme,Fuo),e(Ua,Tuo),e(Ua,Wme),e(Wme,Muo),e(Ua,Euo),e(Ua,Ume),e(Ume,Cuo),e(Ua,wuo),e(Br,Auo),e(Br,k),e(k,as),e(as,Hme),e(Hme,Luo),e(as,yuo),e(as,nq),e(nq,xuo),e(as,$uo),e(as,sq),e(sq,kuo),e(as,Suo),e(k,Ruo),e(k,ns),e(ns,Jme),e(Jme,Puo),e(ns,Buo),e(ns,lq),e(lq,Iuo),e(ns,Nuo),e(ns,iq),e(iq,quo),e(ns,juo),e(k,Duo),e(k,ss),e(ss,Yme),e(Yme,Guo),e(ss,Ouo),e(ss,dq),e(dq,Vuo),e(ss,Xuo),e(ss,cq),e(cq,zuo),e(ss,Quo),e(k,Wuo),e(k,Kh),e(Kh,Kme),e(Kme,Uuo),e(Kh,Huo),e(Kh,mq),e(mq,Juo),e(Kh,Yuo),e(k,Kuo),e(k,ls),e(ls,Zme),e(Zme,Zuo),e(ls,epo),e(ls,fq),e(fq,opo),e(ls,rpo),e(ls,gq),e(gq,tpo),e(ls,apo),e(k,npo),e(k,Zh),e(Zh,efe),e(efe,spo),e(Zh,lpo),e(Zh,hq),e(hq,ipo),e(Zh,dpo),e(k,cpo),e(k,eu),e(eu,ofe),e(ofe,mpo),e(eu,fpo),e(eu,uq),e(uq,gpo),e(eu,hpo),e(k,upo),e(k,ou),e(ou,rfe),e(rfe,ppo),e(ou,_po),e(ou,pq),e(pq,bpo),e(ou,vpo),e(k,Fpo),e(k,is),e(is,tfe),e(tfe,Tpo),e(is,Mpo),e(is,_q),e(_q,Epo),e(is,Cpo),e(is,bq),e(bq,wpo),e(is,Apo),e(k,Lpo),e(k,ds),e(ds,afe),e(afe,ypo),e(ds,xpo),e(ds,vq),e(vq,$po),e(ds,kpo),e(ds,Fq),e(Fq,Spo),e(ds,Rpo),e(k,Ppo),e(k,cs),e(cs,nfe),e(nfe,Bpo),e(cs,Ipo),e(cs,Tq),e(Tq,Npo),e(cs,qpo),e(cs,Mq),e(Mq,jpo),e(cs,Dpo),e(k,Gpo),e(k,ru),e(ru,sfe),e(sfe,Opo),e(ru,Vpo),e(ru,Eq),e(Eq,Xpo),e(ru,zpo),e(k,Qpo),e(k,tu),e(tu,lfe),e(lfe,Wpo),e(tu,Upo),e(tu,Cq),e(Cq,Hpo),e(tu,Jpo),e(k,Ypo),e(k,au),e(au,ife),e(ife,Kpo),e(au,Zpo),e(au,wq),e(wq,e_o),e(au,o_o),e(k,r_o),e(k,ms),e(ms,dfe),e(dfe,t_o),e(ms,a_o),e(ms,Aq),e(Aq,n_o),e(ms,s_o),e(ms,Lq),e(Lq,l_o),e(ms,i_o),e(k,d_o),e(k,nu),e(nu,cfe),e(cfe,c_o),e(nu,m_o),e(nu,yq),e(yq,f_o),e(nu,g_o),e(k,h_o),e(k,fs),e(fs,mfe),e(mfe,u_o),e(fs,p_o),e(fs,xq),e(xq,__o),e(fs,b_o),e(fs,$q),e($q,v_o),e(fs,F_o),e(k,T_o),e(k,gs),e(gs,ffe),e(ffe,M_o),e(gs,E_o),e(gs,kq),e(kq,C_o),e(gs,w_o),e(gs,Sq),e(Sq,A_o),e(gs,L_o),e(k,y_o),e(k,hs),e(hs,gfe),e(gfe,x_o),e(hs,$_o),e(hs,Rq),e(Rq,k_o),e(hs,S_o),e(hs,Pq),e(Pq,R_o),e(hs,P_o),e(k,B_o),e(k,us),e(us,hfe),e(hfe,I_o),e(us,N_o),e(us,Bq),e(Bq,q_o),e(us,j_o),e(us,Iq),e(Iq,D_o),e(us,G_o),e(k,O_o),e(k,su),e(su,ufe),e(ufe,V_o),e(su,X_o),e(su,Nq),e(Nq,z_o),e(su,Q_o),e(k,W_o),e(k,ps),e(ps,pfe),e(pfe,U_o),e(ps,H_o),e(ps,qq),e(qq,J_o),e(ps,Y_o),e(ps,jq),e(jq,K_o),e(ps,Z_o),e(k,ebo),e(k,_s),e(_s,_fe),e(_fe,obo),e(_s,rbo),e(_s,Dq),e(Dq,tbo),e(_s,abo),e(_s,Gq),e(Gq,nbo),e(_s,sbo),e(k,lbo),e(k,bs),e(bs,bfe),e(bfe,ibo),e(bs,dbo),e(bs,Oq),e(Oq,cbo),e(bs,mbo),e(bs,Vq),e(Vq,fbo),e(bs,gbo),e(k,hbo),e(k,vs),e(vs,vfe),e(vfe,ubo),e(vs,pbo),e(vs,Xq),e(Xq,_bo),e(vs,bbo),e(vs,zq),e(zq,vbo),e(vs,Fbo),e(k,Tbo),e(k,Fs),e(Fs,Ffe),e(Ffe,Mbo),e(Fs,Ebo),e(Fs,Qq),e(Qq,Cbo),e(Fs,wbo),e(Fs,Wq),e(Wq,Abo),e(Fs,Lbo),e(k,ybo),e(k,Ts),e(Ts,Tfe),e(Tfe,xbo),e(Ts,$bo),e(Ts,Uq),e(Uq,kbo),e(Ts,Sbo),e(Ts,Hq),e(Hq,Rbo),e(Ts,Pbo),e(k,Bbo),e(k,Ms),e(Ms,Mfe),e(Mfe,Ibo),e(Ms,Nbo),e(Ms,Jq),e(Jq,qbo),e(Ms,jbo),e(Ms,Yq),e(Yq,Dbo),e(Ms,Gbo),e(k,Obo),e(k,lu),e(lu,Efe),e(Efe,Vbo),e(lu,Xbo),e(lu,Kq),e(Kq,zbo),e(lu,Qbo),e(k,Wbo),e(k,Es),e(Es,Cfe),e(Cfe,Ubo),e(Es,Hbo),e(Es,Zq),e(Zq,Jbo),e(Es,Ybo),e(Es,ej),e(ej,Kbo),e(Es,Zbo),e(k,e2o),e(k,iu),e(iu,wfe),e(wfe,o2o),e(iu,r2o),e(iu,oj),e(oj,t2o),e(iu,a2o),e(k,n2o),e(k,Cs),e(Cs,Afe),e(Afe,s2o),e(Cs,l2o),e(Cs,rj),e(rj,i2o),e(Cs,d2o),e(Cs,tj),e(tj,c2o),e(Cs,m2o),e(k,f2o),e(k,ws),e(ws,Lfe),e(Lfe,g2o),e(ws,h2o),e(ws,aj),e(aj,u2o),e(ws,p2o),e(ws,nj),e(nj,_2o),e(ws,b2o),e(k,v2o),e(k,As),e(As,yfe),e(yfe,F2o),e(As,T2o),e(As,sj),e(sj,M2o),e(As,E2o),e(As,lj),e(lj,C2o),e(As,w2o),e(k,A2o),e(k,du),e(du,xfe),e(xfe,L2o),e(du,y2o),e(du,ij),e(ij,x2o),e(du,$2o),e(k,k2o),e(k,cu),e(cu,$fe),e($fe,S2o),e(cu,R2o),e(cu,dj),e(dj,P2o),e(cu,B2o),e(k,I2o),e(k,Ls),e(Ls,kfe),e(kfe,N2o),e(Ls,q2o),e(Ls,cj),e(cj,j2o),e(Ls,D2o),e(Ls,mj),e(mj,G2o),e(Ls,O2o),e(k,V2o),e(k,ys),e(ys,Sfe),e(Sfe,X2o),e(ys,z2o),e(ys,fj),e(fj,Q2o),e(ys,W2o),e(ys,gj),e(gj,U2o),e(ys,H2o),e(k,J2o),e(k,xs),e(xs,Rfe),e(Rfe,Y2o),e(xs,K2o),e(xs,hj),e(hj,Z2o),e(xs,e1o),e(xs,uj),e(uj,o1o),e(xs,r1o),e(k,t1o),e(k,mu),e(mu,Pfe),e(Pfe,a1o),e(mu,n1o),e(mu,pj),e(pj,s1o),e(mu,l1o),e(k,i1o),e(k,$s),e($s,Bfe),e(Bfe,d1o),e($s,c1o),e($s,_j),e(_j,m1o),e($s,f1o),e($s,bj),e(bj,g1o),e($s,h1o),e(k,u1o),e(k,ks),e(ks,Ife),e(Ife,p1o),e(ks,_1o),e(ks,vj),e(vj,b1o),e(ks,v1o),e(ks,Fj),e(Fj,F1o),e(ks,T1o),e(k,M1o),e(k,Ss),e(Ss,Nfe),e(Nfe,E1o),e(Ss,C1o),e(Ss,Tj),e(Tj,w1o),e(Ss,A1o),e(Ss,Mj),e(Mj,L1o),e(Ss,y1o),e(k,x1o),e(k,Rs),e(Rs,qfe),e(qfe,$1o),e(Rs,k1o),e(Rs,Ej),e(Ej,S1o),e(Rs,R1o),e(Rs,Cj),e(Cj,P1o),e(Rs,B1o),e(k,I1o),e(k,Ps),e(Ps,jfe),e(jfe,N1o),e(Ps,q1o),e(Ps,wj),e(wj,j1o),e(Ps,D1o),e(Ps,Aj),e(Aj,G1o),e(Ps,O1o),e(k,V1o),e(k,Bs),e(Bs,Dfe),e(Dfe,X1o),e(Bs,z1o),e(Bs,Lj),e(Lj,Q1o),e(Bs,W1o),e(Bs,yj),e(yj,U1o),e(Bs,H1o),e(k,J1o),e(k,Is),e(Is,Gfe),e(Gfe,Y1o),e(Is,K1o),e(Is,xj),e(xj,Z1o),e(Is,evo),e(Is,$j),e($j,ovo),e(Is,rvo),e(k,tvo),e(k,Ns),e(Ns,Ofe),e(Ofe,avo),e(Ns,nvo),e(Ns,kj),e(kj,svo),e(Ns,lvo),e(Ns,Sj),e(Sj,ivo),e(Ns,dvo),e(k,cvo),e(k,fu),e(fu,Vfe),e(Vfe,mvo),e(fu,fvo),e(fu,Rj),e(Rj,gvo),e(fu,hvo),e(k,uvo),e(k,qs),e(qs,Xfe),e(Xfe,pvo),e(qs,_vo),e(qs,Pj),e(Pj,bvo),e(qs,vvo),e(qs,Bj),e(Bj,Fvo),e(qs,Tvo),e(k,Mvo),e(k,gu),e(gu,zfe),e(zfe,Evo),e(gu,Cvo),e(gu,Ij),e(Ij,wvo),e(gu,Avo),e(k,Lvo),e(k,hu),e(hu,Qfe),e(Qfe,yvo),e(hu,xvo),e(hu,Nj),e(Nj,$vo),e(hu,kvo),e(k,Svo),e(k,js),e(js,Wfe),e(Wfe,Rvo),e(js,Pvo),e(js,qj),e(qj,Bvo),e(js,Ivo),e(js,jj),e(jj,Nvo),e(js,qvo),e(k,jvo),e(k,Ds),e(Ds,Ufe),e(Ufe,Dvo),e(Ds,Gvo),e(Ds,Dj),e(Dj,Ovo),e(Ds,Vvo),e(Ds,Gj),e(Gj,Xvo),e(Ds,zvo),e(k,Qvo),e(k,Gs),e(Gs,Hfe),e(Hfe,Wvo),e(Gs,Uvo),e(Gs,Oj),e(Oj,Hvo),e(Gs,Jvo),e(Gs,Vj),e(Vj,Yvo),e(Gs,Kvo),e(k,Zvo),e(k,uu),e(uu,Jfe),e(Jfe,eFo),e(uu,oFo),e(uu,Xj),e(Xj,rFo),e(uu,tFo),e(k,aFo),e(k,Os),e(Os,Yfe),e(Yfe,nFo),e(Os,sFo),e(Os,zj),e(zj,lFo),e(Os,iFo),e(Os,Qj),e(Qj,dFo),e(Os,cFo),e(k,mFo),e(k,Vs),e(Vs,Kfe),e(Kfe,fFo),e(Vs,gFo),e(Vs,Wj),e(Wj,hFo),e(Vs,uFo),e(Vs,Uj),e(Uj,pFo),e(Vs,_Fo),e(k,bFo),e(k,Xs),e(Xs,Zfe),e(Zfe,vFo),e(Xs,FFo),e(Xs,Hj),e(Hj,TFo),e(Xs,MFo),e(Xs,Jj),e(Jj,EFo),e(Xs,CFo),e(k,wFo),e(k,zs),e(zs,ege),e(ege,AFo),e(zs,LFo),e(zs,Yj),e(Yj,yFo),e(zs,xFo),e(zs,Kj),e(Kj,$Fo),e(zs,kFo),e(k,SFo),e(k,Qs),e(Qs,oge),e(oge,RFo),e(Qs,PFo),e(Qs,Zj),e(Zj,BFo),e(Qs,IFo),e(Qs,eD),e(eD,NFo),e(Qs,qFo),e(k,jFo),e(k,Ws),e(Ws,rge),e(rge,DFo),e(Ws,GFo),e(Ws,oD),e(oD,OFo),e(Ws,VFo),e(Ws,rD),e(rD,XFo),e(Ws,zFo),e(k,QFo),e(k,Us),e(Us,tge),e(tge,WFo),e(Us,UFo),e(Us,tD),e(tD,HFo),e(Us,JFo),e(Us,aD),e(aD,YFo),e(Us,KFo),e(k,ZFo),e(k,Hs),e(Hs,age),e(age,eTo),e(Hs,oTo),e(Hs,nD),e(nD,rTo),e(Hs,tTo),e(Hs,sD),e(sD,aTo),e(Hs,nTo),e(k,sTo),e(k,pu),e(pu,nge),e(nge,lTo),e(pu,iTo),e(pu,lD),e(lD,dTo),e(pu,cTo),e(k,mTo),e(k,Js),e(Js,sge),e(sge,fTo),e(Js,gTo),e(Js,iD),e(iD,hTo),e(Js,uTo),e(Js,dD),e(dD,pTo),e(Js,_To),e(k,bTo),e(k,Ys),e(Ys,lge),e(lge,vTo),e(Ys,FTo),e(Ys,cD),e(cD,TTo),e(Ys,MTo),e(Ys,mD),e(mD,ETo),e(Ys,CTo),e(k,wTo),e(k,_u),e(_u,ige),e(ige,ATo),e(_u,LTo),e(_u,fD),e(fD,yTo),e(_u,xTo),e(k,$To),e(k,bu),e(bu,dge),e(dge,kTo),e(bu,STo),e(bu,gD),e(gD,RTo),e(bu,PTo),e(k,BTo),e(k,vu),e(vu,cge),e(cge,ITo),e(vu,NTo),e(vu,hD),e(hD,qTo),e(vu,jTo),e(k,DTo),e(k,Fu),e(Fu,mge),e(mge,GTo),e(Fu,OTo),e(Fu,uD),e(uD,VTo),e(Fu,XTo),e(k,zTo),e(k,Ks),e(Ks,fge),e(fge,QTo),e(Ks,WTo),e(Ks,pD),e(pD,UTo),e(Ks,HTo),e(Ks,_D),e(_D,JTo),e(Ks,YTo),e(k,KTo),e(k,Tu),e(Tu,gge),e(gge,ZTo),e(Tu,eMo),e(Tu,bD),e(bD,oMo),e(Tu,rMo),e(k,tMo),e(k,Zs),e(Zs,hge),e(hge,aMo),e(Zs,nMo),e(Zs,vD),e(vD,sMo),e(Zs,lMo),e(Zs,FD),e(FD,iMo),e(Zs,dMo),e(k,cMo),e(k,el),e(el,uge),e(uge,mMo),e(el,fMo),e(el,TD),e(TD,gMo),e(el,hMo),e(el,MD),e(MD,uMo),e(el,pMo),e(k,_Mo),e(k,ol),e(ol,pge),e(pge,bMo),e(ol,vMo),e(ol,ED),e(ED,FMo),e(ol,TMo),e(ol,CD),e(CD,MMo),e(ol,EMo),e(k,CMo),e(k,rl),e(rl,_ge),e(_ge,wMo),e(rl,AMo),e(rl,wD),e(wD,LMo),e(rl,yMo),e(rl,AD),e(AD,xMo),e(rl,$Mo),e(k,kMo),e(k,tl),e(tl,bge),e(bge,SMo),e(tl,RMo),e(tl,LD),e(LD,PMo),e(tl,BMo),e(tl,yD),e(yD,IMo),e(tl,NMo),e(k,qMo),e(k,al),e(al,vge),e(vge,jMo),e(al,DMo),e(al,xD),e(xD,GMo),e(al,OMo),e(al,$D),e($D,VMo),e(al,XMo),e(k,zMo),e(k,Mu),e(Mu,Fge),e(Fge,QMo),e(Mu,WMo),e(Mu,kD),e(kD,UMo),e(Mu,HMo),e(k,JMo),e(k,Eu),e(Eu,Tge),e(Tge,YMo),e(Eu,KMo),e(Eu,SD),e(SD,ZMo),e(Eu,eEo),e(k,oEo),e(k,nl),e(nl,Mge),e(Mge,rEo),e(nl,tEo),e(nl,RD),e(RD,aEo),e(nl,nEo),e(nl,PD),e(PD,sEo),e(nl,lEo),e(k,iEo),e(k,sl),e(sl,Ege),e(Ege,dEo),e(sl,cEo),e(sl,BD),e(BD,mEo),e(sl,fEo),e(sl,ID),e(ID,gEo),e(sl,hEo),e(k,uEo),e(k,ll),e(ll,Cge),e(Cge,pEo),e(ll,_Eo),e(ll,ND),e(ND,bEo),e(ll,vEo),e(ll,qD),e(qD,FEo),e(ll,TEo),e(k,MEo),e(k,Cu),e(Cu,wge),e(wge,EEo),e(Cu,CEo),e(Cu,jD),e(jD,wEo),e(Cu,AEo),e(k,LEo),e(k,wu),e(wu,Age),e(Age,yEo),e(wu,xEo),e(wu,DD),e(DD,$Eo),e(wu,kEo),e(k,SEo),e(k,Au),e(Au,Lge),e(Lge,REo),e(Au,PEo),e(Au,GD),e(GD,BEo),e(Au,IEo),e(k,NEo),e(k,il),e(il,yge),e(yge,qEo),e(il,jEo),e(il,OD),e(OD,DEo),e(il,GEo),e(il,VD),e(VD,OEo),e(il,VEo),e(k,XEo),e(k,dl),e(dl,xge),e(xge,zEo),e(dl,QEo),e(dl,XD),e(XD,WEo),e(dl,UEo),e(dl,zD),e(zD,HEo),e(dl,JEo),e(k,YEo),e(k,Lu),e(Lu,$ge),e($ge,KEo),e(Lu,ZEo),e(Lu,QD),e(QD,e4o),e(Lu,o4o),e(k,r4o),e(k,yu),e(yu,kge),e(kge,t4o),e(yu,a4o),e(yu,WD),e(WD,n4o),e(yu,s4o),e(k,l4o),e(k,xu),e(xu,Sge),e(Sge,i4o),e(xu,d4o),e(xu,UD),e(UD,c4o),e(xu,m4o),e(k,f4o),e(k,cl),e(cl,Rge),e(Rge,g4o),e(cl,h4o),e(cl,HD),e(HD,u4o),e(cl,p4o),e(cl,JD),e(JD,_4o),e(cl,b4o),e(k,v4o),e(k,ml),e(ml,Pge),e(Pge,F4o),e(ml,T4o),e(ml,YD),e(YD,M4o),e(ml,E4o),e(ml,KD),e(KD,C4o),e(ml,w4o),e(k,A4o),e(k,$u),e($u,Bge),e(Bge,L4o),e($u,y4o),e($u,ZD),e(ZD,x4o),e($u,$4o),e(k,k4o),e(k,ku),e(ku,Ige),e(Ige,S4o),e(ku,R4o),e(ku,eG),e(eG,P4o),e(ku,B4o),e(k,I4o),e(k,fl),e(fl,Nge),e(Nge,N4o),e(fl,q4o),e(fl,oG),e(oG,j4o),e(fl,D4o),e(fl,rG),e(rG,G4o),e(fl,O4o),e(k,V4o),e(k,gl),e(gl,qge),e(qge,X4o),e(gl,z4o),e(gl,tG),e(tG,Q4o),e(gl,W4o),e(gl,aG),e(aG,U4o),e(gl,H4o),e(k,J4o),e(k,hl),e(hl,jge),e(jge,Y4o),e(hl,K4o),e(hl,nG),e(nG,Z4o),e(hl,eCo),e(hl,sG),e(sG,oCo),e(hl,rCo),e(k,tCo),e(k,ul),e(ul,Dge),e(Dge,aCo),e(ul,nCo),e(ul,lG),e(lG,sCo),e(ul,lCo),e(ul,iG),e(iG,iCo),e(ul,dCo),e(Br,cCo),M(Su,Br,null),e(ko,mCo),e(ko,Ru),M(z9,Ru,null),e(Ru,fCo),e(Ru,Gge),e(Gge,gCo),b(m,vKe,_),b(m,gd,_),e(gd,Pu),e(Pu,Oge),M(Q9,Oge,null),e(gd,hCo),e(gd,Vge),e(Vge,uCo),b(m,FKe,_),b(m,So,_),M(W9,So,null),e(So,pCo),e(So,U9),e(U9,_Co),e(U9,dG),e(dG,bCo),e(U9,vCo),e(So,FCo),e(So,H9),e(H9,TCo),e(H9,Xge),e(Xge,MCo),e(H9,ECo),e(So,CCo),e(So,Ye),M(J9,Ye,null),e(Ye,wCo),e(Ye,zge),e(zge,ACo),e(Ye,LCo),e(Ye,Ha),e(Ha,yCo),e(Ha,Qge),e(Qge,xCo),e(Ha,$Co),e(Ha,Wge),e(Wge,kCo),e(Ha,SCo),e(Ha,Uge),e(Uge,RCo),e(Ha,PCo),e(Ye,BCo),e(Ye,W),e(W,Bu),e(Bu,Hge),e(Hge,ICo),e(Bu,NCo),e(Bu,cG),e(cG,qCo),e(Bu,jCo),e(W,DCo),e(W,Iu),e(Iu,Jge),e(Jge,GCo),e(Iu,OCo),e(Iu,mG),e(mG,VCo),e(Iu,XCo),e(W,zCo),e(W,Nu),e(Nu,Yge),e(Yge,QCo),e(Nu,WCo),e(Nu,fG),e(fG,UCo),e(Nu,HCo),e(W,JCo),e(W,qu),e(qu,Kge),e(Kge,YCo),e(qu,KCo),e(qu,gG),e(gG,ZCo),e(qu,e3o),e(W,o3o),e(W,ju),e(ju,Zge),e(Zge,r3o),e(ju,t3o),e(ju,hG),e(hG,a3o),e(ju,n3o),e(W,s3o),e(W,Du),e(Du,ehe),e(ehe,l3o),e(Du,i3o),e(Du,uG),e(uG,d3o),e(Du,c3o),e(W,m3o),e(W,Gu),e(Gu,ohe),e(ohe,f3o),e(Gu,g3o),e(Gu,pG),e(pG,h3o),e(Gu,u3o),e(W,p3o),e(W,Ou),e(Ou,rhe),e(rhe,_3o),e(Ou,b3o),e(Ou,_G),e(_G,v3o),e(Ou,F3o),e(W,T3o),e(W,Vu),e(Vu,the),e(the,M3o),e(Vu,E3o),e(Vu,bG),e(bG,C3o),e(Vu,w3o),e(W,A3o),e(W,Xu),e(Xu,ahe),e(ahe,L3o),e(Xu,y3o),e(Xu,vG),e(vG,x3o),e(Xu,$3o),e(W,k3o),e(W,zu),e(zu,nhe),e(nhe,S3o),e(zu,R3o),e(zu,FG),e(FG,P3o),e(zu,B3o),e(W,I3o),e(W,Qu),e(Qu,she),e(she,N3o),e(Qu,q3o),e(Qu,TG),e(TG,j3o),e(Qu,D3o),e(W,G3o),e(W,Wu),e(Wu,lhe),e(lhe,O3o),e(Wu,V3o),e(Wu,MG),e(MG,X3o),e(Wu,z3o),e(W,Q3o),e(W,Uu),e(Uu,ihe),e(ihe,W3o),e(Uu,U3o),e(Uu,EG),e(EG,H3o),e(Uu,J3o),e(W,Y3o),e(W,Hu),e(Hu,dhe),e(dhe,K3o),e(Hu,Z3o),e(Hu,CG),e(CG,e5o),e(Hu,o5o),e(W,r5o),e(W,Ju),e(Ju,che),e(che,t5o),e(Ju,a5o),e(Ju,wG),e(wG,n5o),e(Ju,s5o),e(W,l5o),e(W,Yu),e(Yu,mhe),e(mhe,i5o),e(Yu,d5o),e(Yu,AG),e(AG,c5o),e(Yu,m5o),e(W,f5o),e(W,Ku),e(Ku,fhe),e(fhe,g5o),e(Ku,h5o),e(Ku,LG),e(LG,u5o),e(Ku,p5o),e(W,_5o),e(W,Zu),e(Zu,ghe),e(ghe,b5o),e(Zu,v5o),e(Zu,yG),e(yG,F5o),e(Zu,T5o),e(W,M5o),e(W,ep),e(ep,hhe),e(hhe,E5o),e(ep,C5o),e(ep,xG),e(xG,w5o),e(ep,A5o),e(W,L5o),e(W,op),e(op,uhe),e(uhe,y5o),e(op,x5o),e(op,$G),e($G,$5o),e(op,k5o),e(W,S5o),e(W,rp),e(rp,phe),e(phe,R5o),e(rp,P5o),e(rp,kG),e(kG,B5o),e(rp,I5o),e(W,N5o),e(W,tp),e(tp,_he),e(_he,q5o),e(tp,j5o),e(tp,SG),e(SG,D5o),e(tp,G5o),e(W,O5o),e(W,ap),e(ap,bhe),e(bhe,V5o),e(ap,X5o),e(ap,RG),e(RG,z5o),e(ap,Q5o),e(W,W5o),e(W,np),e(np,vhe),e(vhe,U5o),e(np,H5o),e(np,PG),e(PG,J5o),e(np,Y5o),e(W,K5o),e(W,sp),e(sp,Fhe),e(Fhe,Z5o),e(sp,e0o),e(sp,BG),e(BG,o0o),e(sp,r0o),e(W,t0o),e(W,lp),e(lp,The),e(The,a0o),e(lp,n0o),e(lp,IG),e(IG,s0o),e(lp,l0o),e(W,i0o),e(W,ip),e(ip,Mhe),e(Mhe,d0o),e(ip,c0o),e(ip,NG),e(NG,m0o),e(ip,f0o),e(W,g0o),e(W,dp),e(dp,Ehe),e(Ehe,h0o),e(dp,u0o),e(dp,qG),e(qG,p0o),e(dp,_0o),e(W,b0o),e(W,cp),e(cp,Che),e(Che,v0o),e(cp,F0o),e(cp,jG),e(jG,T0o),e(cp,M0o),e(W,E0o),e(W,mp),e(mp,whe),e(whe,C0o),e(mp,w0o),e(mp,DG),e(DG,A0o),e(mp,L0o),e(W,y0o),e(W,fp),e(fp,Ahe),e(Ahe,x0o),e(fp,$0o),e(fp,GG),e(GG,k0o),e(fp,S0o),e(W,R0o),e(W,gp),e(gp,Lhe),e(Lhe,P0o),e(gp,B0o),e(gp,OG),e(OG,I0o),e(gp,N0o),e(W,q0o),e(W,hp),e(hp,yhe),e(yhe,j0o),e(hp,D0o),e(hp,VG),e(VG,G0o),e(hp,O0o),e(W,V0o),e(W,up),e(up,xhe),e(xhe,X0o),e(up,z0o),e(up,XG),e(XG,Q0o),e(up,W0o),e(W,U0o),e(W,pp),e(pp,$he),e($he,H0o),e(pp,J0o),e(pp,zG),e(zG,Y0o),e(pp,K0o),e(W,Z0o),e(W,_p),e(_p,khe),e(khe,ewo),e(_p,owo),e(_p,QG),e(QG,rwo),e(_p,two),e(W,awo),e(W,bp),e(bp,She),e(She,nwo),e(bp,swo),e(bp,WG),e(WG,lwo),e(bp,iwo),e(W,dwo),e(W,vp),e(vp,Rhe),e(Rhe,cwo),e(vp,mwo),e(vp,UG),e(UG,fwo),e(vp,gwo),e(W,hwo),e(W,Fp),e(Fp,Phe),e(Phe,uwo),e(Fp,pwo),e(Fp,HG),e(HG,_wo),e(Fp,bwo),e(Ye,vwo),M(Tp,Ye,null),e(Ye,Fwo),M(Mp,Ye,null),e(So,Two),e(So,Ep),M(Y9,Ep,null),e(Ep,Mwo),e(Ep,Bhe),e(Bhe,Ewo),b(m,TKe,_),b(m,hd,_),e(hd,Cp),e(Cp,Ihe),M(K9,Ihe,null),e(hd,Cwo),e(hd,Nhe),e(Nhe,wwo),b(m,MKe,_),b(m,Ro,_),M(Z9,Ro,null),e(Ro,Awo),e(Ro,ex),e(ex,Lwo),e(ex,JG),e(JG,ywo),e(ex,xwo),e(Ro,$wo),e(Ro,ox),e(ox,kwo),e(ox,qhe),e(qhe,Swo),e(ox,Rwo),e(Ro,Pwo),e(Ro,Ke),M(rx,Ke,null),e(Ke,Bwo),e(Ke,jhe),e(jhe,Iwo),e(Ke,Nwo),e(Ke,ud),e(ud,qwo),e(ud,Dhe),e(Dhe,jwo),e(ud,Dwo),e(ud,Ghe),e(Ghe,Gwo),e(ud,Owo),e(Ke,Vwo),e(Ke,ie),e(ie,wp),e(wp,Ohe),e(Ohe,Xwo),e(wp,zwo),e(wp,YG),e(YG,Qwo),e(wp,Wwo),e(ie,Uwo),e(ie,Ap),e(Ap,Vhe),e(Vhe,Hwo),e(Ap,Jwo),e(Ap,KG),e(KG,Ywo),e(Ap,Kwo),e(ie,Zwo),e(ie,Lp),e(Lp,Xhe),e(Xhe,eAo),e(Lp,oAo),e(Lp,ZG),e(ZG,rAo),e(Lp,tAo),e(ie,aAo),e(ie,yp),e(yp,zhe),e(zhe,nAo),e(yp,sAo),e(yp,eO),e(eO,lAo),e(yp,iAo),e(ie,dAo),e(ie,xp),e(xp,Qhe),e(Qhe,cAo),e(xp,mAo),e(xp,oO),e(oO,fAo),e(xp,gAo),e(ie,hAo),e(ie,$p),e($p,Whe),e(Whe,uAo),e($p,pAo),e($p,rO),e(rO,_Ao),e($p,bAo),e(ie,vAo),e(ie,kp),e(kp,Uhe),e(Uhe,FAo),e(kp,TAo),e(kp,tO),e(tO,MAo),e(kp,EAo),e(ie,CAo),e(ie,Sp),e(Sp,Hhe),e(Hhe,wAo),e(Sp,AAo),e(Sp,aO),e(aO,LAo),e(Sp,yAo),e(ie,xAo),e(ie,Rp),e(Rp,Jhe),e(Jhe,$Ao),e(Rp,kAo),e(Rp,nO),e(nO,SAo),e(Rp,RAo),e(ie,PAo),e(ie,Pp),e(Pp,Yhe),e(Yhe,BAo),e(Pp,IAo),e(Pp,sO),e(sO,NAo),e(Pp,qAo),e(ie,jAo),e(ie,Bp),e(Bp,Khe),e(Khe,DAo),e(Bp,GAo),e(Bp,lO),e(lO,OAo),e(Bp,VAo),e(ie,XAo),e(ie,Ip),e(Ip,Zhe),e(Zhe,zAo),e(Ip,QAo),e(Ip,iO),e(iO,WAo),e(Ip,UAo),e(ie,HAo),e(ie,Np),e(Np,eue),e(eue,JAo),e(Np,YAo),e(Np,dO),e(dO,KAo),e(Np,ZAo),e(ie,e6o),e(ie,qp),e(qp,oue),e(oue,o6o),e(qp,r6o),e(qp,cO),e(cO,t6o),e(qp,a6o),e(ie,n6o),e(ie,jp),e(jp,rue),e(rue,s6o),e(jp,l6o),e(jp,mO),e(mO,i6o),e(jp,d6o),e(ie,c6o),e(ie,Dp),e(Dp,tue),e(tue,m6o),e(Dp,f6o),e(Dp,fO),e(fO,g6o),e(Dp,h6o),e(ie,u6o),e(ie,Gp),e(Gp,aue),e(aue,p6o),e(Gp,_6o),e(Gp,gO),e(gO,b6o),e(Gp,v6o),e(ie,F6o),e(ie,Op),e(Op,nue),e(nue,T6o),e(Op,M6o),e(Op,hO),e(hO,E6o),e(Op,C6o),e(ie,w6o),e(ie,Vp),e(Vp,sue),e(sue,A6o),e(Vp,L6o),e(Vp,uO),e(uO,y6o),e(Vp,x6o),e(ie,$6o),e(ie,Xp),e(Xp,lue),e(lue,k6o),e(Xp,S6o),e(Xp,pO),e(pO,R6o),e(Xp,P6o),e(ie,B6o),e(ie,zp),e(zp,iue),e(iue,I6o),e(zp,N6o),e(zp,_O),e(_O,q6o),e(zp,j6o),e(Ke,D6o),M(Qp,Ke,null),e(Ke,G6o),M(Wp,Ke,null),e(Ro,O6o),e(Ro,Up),M(tx,Up,null),e(Up,V6o),e(Up,due),e(due,X6o),b(m,EKe,_),b(m,pd,_),e(pd,Hp),e(Hp,cue),M(ax,cue,null),e(pd,z6o),e(pd,mue),e(mue,Q6o),b(m,CKe,_),b(m,Po,_),M(nx,Po,null),e(Po,W6o),e(Po,_d),e(_d,U6o),e(_d,bO),e(bO,H6o),e(_d,J6o),e(_d,vO),e(vO,Y6o),e(_d,K6o),e(Po,Z6o),e(Po,sx),e(sx,e7o),e(sx,fue),e(fue,o7o),e(sx,r7o),e(Po,t7o),e(Po,_t),M(lx,_t,null),e(_t,a7o),e(_t,gue),e(gue,n7o),e(_t,s7o),e(_t,bd),e(bd,l7o),e(bd,hue),e(hue,i7o),e(bd,d7o),e(bd,FO),e(FO,c7o),e(bd,m7o),e(_t,f7o),M(Jp,_t,null),e(Po,g7o),e(Po,Ze),M(ix,Ze,null),e(Ze,h7o),e(Ze,uue),e(uue,u7o),e(Ze,p7o),e(Ze,Ja),e(Ja,_7o),e(Ja,pue),e(pue,b7o),e(Ja,v7o),e(Ja,_ue),e(_ue,F7o),e(Ja,T7o),e(Ja,bue),e(bue,M7o),e(Ja,E7o),e(Ze,C7o),e(Ze,y),e(y,Yp),e(Yp,vue),e(vue,w7o),e(Yp,A7o),e(Yp,TO),e(TO,L7o),e(Yp,y7o),e(y,x7o),e(y,Kp),e(Kp,Fue),e(Fue,$7o),e(Kp,k7o),e(Kp,MO),e(MO,S7o),e(Kp,R7o),e(y,P7o),e(y,Zp),e(Zp,Tue),e(Tue,B7o),e(Zp,I7o),e(Zp,EO),e(EO,N7o),e(Zp,q7o),e(y,j7o),e(y,e_),e(e_,Mue),e(Mue,D7o),e(e_,G7o),e(e_,CO),e(CO,O7o),e(e_,V7o),e(y,X7o),e(y,o_),e(o_,Eue),e(Eue,z7o),e(o_,Q7o),e(o_,wO),e(wO,W7o),e(o_,U7o),e(y,H7o),e(y,r_),e(r_,Cue),e(Cue,J7o),e(r_,Y7o),e(r_,AO),e(AO,K7o),e(r_,Z7o),e(y,eLo),e(y,t_),e(t_,wue),e(wue,oLo),e(t_,rLo),e(t_,LO),e(LO,tLo),e(t_,aLo),e(y,nLo),e(y,a_),e(a_,Aue),e(Aue,sLo),e(a_,lLo),e(a_,yO),e(yO,iLo),e(a_,dLo),e(y,cLo),e(y,n_),e(n_,Lue),e(Lue,mLo),e(n_,fLo),e(n_,xO),e(xO,gLo),e(n_,hLo),e(y,uLo),e(y,s_),e(s_,yue),e(yue,pLo),e(s_,_Lo),e(s_,$O),e($O,bLo),e(s_,vLo),e(y,FLo),e(y,l_),e(l_,xue),e(xue,TLo),e(l_,MLo),e(l_,kO),e(kO,ELo),e(l_,CLo),e(y,wLo),e(y,i_),e(i_,$ue),e($ue,ALo),e(i_,LLo),e(i_,SO),e(SO,yLo),e(i_,xLo),e(y,$Lo),e(y,d_),e(d_,kue),e(kue,kLo),e(d_,SLo),e(d_,RO),e(RO,RLo),e(d_,PLo),e(y,BLo),e(y,c_),e(c_,Sue),e(Sue,ILo),e(c_,NLo),e(c_,PO),e(PO,qLo),e(c_,jLo),e(y,DLo),e(y,m_),e(m_,Rue),e(Rue,GLo),e(m_,OLo),e(m_,BO),e(BO,VLo),e(m_,XLo),e(y,zLo),e(y,f_),e(f_,Pue),e(Pue,QLo),e(f_,WLo),e(f_,IO),e(IO,ULo),e(f_,HLo),e(y,JLo),e(y,g_),e(g_,Bue),e(Bue,YLo),e(g_,KLo),e(g_,NO),e(NO,ZLo),e(g_,eyo),e(y,oyo),e(y,h_),e(h_,Iue),e(Iue,ryo),e(h_,tyo),e(h_,qO),e(qO,ayo),e(h_,nyo),e(y,syo),e(y,u_),e(u_,Nue),e(Nue,lyo),e(u_,iyo),e(u_,jO),e(jO,dyo),e(u_,cyo),e(y,myo),e(y,p_),e(p_,que),e(que,fyo),e(p_,gyo),e(p_,DO),e(DO,hyo),e(p_,uyo),e(y,pyo),e(y,__),e(__,jue),e(jue,_yo),e(__,byo),e(__,GO),e(GO,vyo),e(__,Fyo),e(y,Tyo),e(y,b_),e(b_,Due),e(Due,Myo),e(b_,Eyo),e(b_,OO),e(OO,Cyo),e(b_,wyo),e(y,Ayo),e(y,v_),e(v_,Gue),e(Gue,Lyo),e(v_,yyo),e(v_,VO),e(VO,xyo),e(v_,$yo),e(y,kyo),e(y,F_),e(F_,Oue),e(Oue,Syo),e(F_,Ryo),e(F_,XO),e(XO,Pyo),e(F_,Byo),e(y,Iyo),e(y,T_),e(T_,Vue),e(Vue,Nyo),e(T_,qyo),e(T_,zO),e(zO,jyo),e(T_,Dyo),e(y,Gyo),e(y,M_),e(M_,Xue),e(Xue,Oyo),e(M_,Vyo),e(M_,QO),e(QO,Xyo),e(M_,zyo),e(y,Qyo),e(y,E_),e(E_,zue),e(zue,Wyo),e(E_,Uyo),e(E_,WO),e(WO,Hyo),e(E_,Jyo),e(y,Yyo),e(y,C_),e(C_,Que),e(Que,Kyo),e(C_,Zyo),e(C_,UO),e(UO,e8o),e(C_,o8o),e(y,r8o),e(y,w_),e(w_,Wue),e(Wue,t8o),e(w_,a8o),e(w_,HO),e(HO,n8o),e(w_,s8o),e(y,l8o),e(y,A_),e(A_,Uue),e(Uue,i8o),e(A_,d8o),e(A_,JO),e(JO,c8o),e(A_,m8o),e(y,f8o),e(y,L_),e(L_,Hue),e(Hue,g8o),e(L_,h8o),e(L_,YO),e(YO,u8o),e(L_,p8o),e(y,_8o),e(y,y_),e(y_,Jue),e(Jue,b8o),e(y_,v8o),e(y_,KO),e(KO,F8o),e(y_,T8o),e(y,M8o),e(y,x_),e(x_,Yue),e(Yue,E8o),e(x_,C8o),e(x_,ZO),e(ZO,w8o),e(x_,A8o),e(y,L8o),e(y,$_),e($_,Kue),e(Kue,y8o),e($_,x8o),e($_,eV),e(eV,$8o),e($_,k8o),e(y,S8o),e(y,k_),e(k_,Zue),e(Zue,R8o),e(k_,P8o),e(k_,oV),e(oV,B8o),e(k_,I8o),e(y,N8o),e(y,S_),e(S_,epe),e(epe,q8o),e(S_,j8o),e(S_,rV),e(rV,D8o),e(S_,G8o),e(y,O8o),e(y,R_),e(R_,ope),e(ope,V8o),e(R_,X8o),e(R_,tV),e(tV,z8o),e(R_,Q8o),e(y,W8o),e(y,pl),e(pl,rpe),e(rpe,U8o),e(pl,H8o),e(pl,aV),e(aV,J8o),e(pl,Y8o),e(pl,nV),e(nV,K8o),e(pl,Z8o),e(y,e9o),e(y,P_),e(P_,tpe),e(tpe,o9o),e(P_,r9o),e(P_,sV),e(sV,t9o),e(P_,a9o),e(y,n9o),e(y,B_),e(B_,ape),e(ape,s9o),e(B_,l9o),e(B_,lV),e(lV,i9o),e(B_,d9o),e(y,c9o),e(y,I_),e(I_,npe),e(npe,m9o),e(I_,f9o),e(I_,iV),e(iV,g9o),e(I_,h9o),e(y,u9o),e(y,N_),e(N_,spe),e(spe,p9o),e(N_,_9o),e(N_,dV),e(dV,b9o),e(N_,v9o),e(y,F9o),e(y,q_),e(q_,lpe),e(lpe,T9o),e(q_,M9o),e(q_,cV),e(cV,E9o),e(q_,C9o),e(y,w9o),e(y,j_),e(j_,ipe),e(ipe,A9o),e(j_,L9o),e(j_,mV),e(mV,y9o),e(j_,x9o),e(y,$9o),e(y,D_),e(D_,dpe),e(dpe,k9o),e(D_,S9o),e(D_,fV),e(fV,R9o),e(D_,P9o),e(y,B9o),e(y,G_),e(G_,cpe),e(cpe,I9o),e(G_,N9o),e(G_,gV),e(gV,q9o),e(G_,j9o),e(y,D9o),e(y,O_),e(O_,mpe),e(mpe,G9o),e(O_,O9o),e(O_,hV),e(hV,V9o),e(O_,X9o),e(y,z9o),e(y,V_),e(V_,fpe),e(fpe,Q9o),e(V_,W9o),e(V_,uV),e(uV,U9o),e(V_,H9o),e(y,J9o),e(y,X_),e(X_,gpe),e(gpe,Y9o),e(X_,K9o),e(X_,pV),e(pV,Z9o),e(X_,exo),e(y,oxo),e(y,z_),e(z_,hpe),e(hpe,rxo),e(z_,txo),e(z_,_V),e(_V,axo),e(z_,nxo),e(y,sxo),e(y,Q_),e(Q_,upe),e(upe,lxo),e(Q_,ixo),e(Q_,bV),e(bV,dxo),e(Q_,cxo),e(y,mxo),e(y,W_),e(W_,ppe),e(ppe,fxo),e(W_,gxo),e(W_,vV),e(vV,hxo),e(W_,uxo),e(y,pxo),e(y,U_),e(U_,_pe),e(_pe,_xo),e(U_,bxo),e(U_,FV),e(FV,vxo),e(U_,Fxo),e(y,Txo),e(y,H_),e(H_,bpe),e(bpe,Mxo),e(H_,Exo),e(H_,TV),e(TV,Cxo),e(H_,wxo),e(y,Axo),e(y,J_),e(J_,vpe),e(vpe,Lxo),e(J_,yxo),e(J_,MV),e(MV,xxo),e(J_,$xo),e(y,kxo),e(y,Y_),e(Y_,Fpe),e(Fpe,Sxo),e(Y_,Rxo),e(Y_,EV),e(EV,Pxo),e(Y_,Bxo),e(y,Ixo),e(y,K_),e(K_,Tpe),e(Tpe,Nxo),e(K_,qxo),e(K_,CV),e(CV,jxo),e(K_,Dxo),e(y,Gxo),e(y,Z_),e(Z_,Mpe),e(Mpe,Oxo),e(Z_,Vxo),e(Z_,wV),e(wV,Xxo),e(Z_,zxo),e(y,Qxo),e(y,eb),e(eb,Epe),e(Epe,Wxo),e(eb,Uxo),e(eb,AV),e(AV,Hxo),e(eb,Jxo),e(y,Yxo),e(y,ob),e(ob,Cpe),e(Cpe,Kxo),e(ob,Zxo),e(ob,LV),e(LV,e$o),e(ob,o$o),e(y,r$o),e(y,rb),e(rb,wpe),e(wpe,t$o),e(rb,a$o),e(rb,yV),e(yV,n$o),e(rb,s$o),e(y,l$o),e(y,tb),e(tb,Ape),e(Ape,i$o),e(tb,d$o),e(tb,xV),e(xV,c$o),e(tb,m$o),e(y,f$o),e(y,ab),e(ab,Lpe),e(Lpe,g$o),e(ab,h$o),e(ab,$V),e($V,u$o),e(ab,p$o),e(y,_$o),e(y,nb),e(nb,ype),e(ype,b$o),e(nb,v$o),e(nb,kV),e(kV,F$o),e(nb,T$o),e(y,M$o),e(y,sb),e(sb,xpe),e(xpe,E$o),e(sb,C$o),e(sb,SV),e(SV,w$o),e(sb,A$o),e(y,L$o),e(y,lb),e(lb,$pe),e($pe,y$o),e(lb,x$o),e(lb,RV),e(RV,$$o),e(lb,k$o),e(y,S$o),e(y,ib),e(ib,kpe),e(kpe,R$o),e(ib,P$o),e(ib,PV),e(PV,B$o),e(ib,I$o),e(y,N$o),e(y,db),e(db,Spe),e(Spe,q$o),e(db,j$o),e(db,BV),e(BV,D$o),e(db,G$o),e(y,O$o),e(y,cb),e(cb,Rpe),e(Rpe,V$o),e(cb,X$o),e(cb,IV),e(IV,z$o),e(cb,Q$o),e(y,W$o),e(y,mb),e(mb,Ppe),e(Ppe,U$o),e(mb,H$o),e(mb,NV),e(NV,J$o),e(mb,Y$o),e(y,K$o),e(y,fb),e(fb,Bpe),e(Bpe,Z$o),e(fb,eko),e(fb,qV),e(qV,oko),e(fb,rko),e(y,tko),e(y,gb),e(gb,Ipe),e(Ipe,ako),e(gb,nko),e(gb,jV),e(jV,sko),e(gb,lko),e(y,iko),e(y,hb),e(hb,Npe),e(Npe,dko),e(hb,cko),e(hb,DV),e(DV,mko),e(hb,fko),e(y,gko),e(y,ub),e(ub,qpe),e(qpe,hko),e(ub,uko),e(ub,GV),e(GV,pko),e(ub,_ko),e(y,bko),e(y,pb),e(pb,jpe),e(jpe,vko),e(pb,Fko),e(pb,OV),e(OV,Tko),e(pb,Mko),e(y,Eko),e(y,_b),e(_b,Dpe),e(Dpe,Cko),e(_b,wko),e(_b,VV),e(VV,Ako),e(_b,Lko),e(y,yko),e(y,bb),e(bb,Gpe),e(Gpe,xko),e(bb,$ko),e(bb,XV),e(XV,kko),e(bb,Sko),e(y,Rko),e(y,vb),e(vb,Ope),e(Ope,Pko),e(vb,Bko),e(vb,zV),e(zV,Iko),e(vb,Nko),e(y,qko),e(y,Fb),e(Fb,Vpe),e(Vpe,jko),e(Fb,Dko),e(Fb,QV),e(QV,Gko),e(Fb,Oko),e(y,Vko),e(y,Tb),e(Tb,Xpe),e(Xpe,Xko),e(Tb,zko),e(Tb,WV),e(WV,Qko),e(Tb,Wko),e(y,Uko),e(y,Mb),e(Mb,zpe),e(zpe,Hko),e(Mb,Jko),e(Mb,UV),e(UV,Yko),e(Mb,Kko),e(y,Zko),e(y,Eb),e(Eb,Qpe),e(Qpe,eSo),e(Eb,oSo),e(Eb,HV),e(HV,rSo),e(Eb,tSo),e(y,aSo),e(y,Cb),e(Cb,Wpe),e(Wpe,nSo),e(Cb,sSo),e(Cb,JV),e(JV,lSo),e(Cb,iSo),e(y,dSo),e(y,wb),e(wb,Upe),e(Upe,cSo),e(wb,mSo),e(wb,YV),e(YV,fSo),e(wb,gSo),e(y,hSo),e(y,Ab),e(Ab,Hpe),e(Hpe,uSo),e(Ab,pSo),e(Ab,KV),e(KV,_So),e(Ab,bSo),e(y,vSo),e(y,Lb),e(Lb,Jpe),e(Jpe,FSo),e(Lb,TSo),e(Lb,ZV),e(ZV,MSo),e(Lb,ESo),e(y,CSo),e(y,yb),e(yb,Ype),e(Ype,wSo),e(yb,ASo),e(yb,eX),e(eX,LSo),e(yb,ySo),e(y,xSo),e(y,xb),e(xb,Kpe),e(Kpe,$So),e(xb,kSo),e(xb,oX),e(oX,SSo),e(xb,RSo),e(y,PSo),e(y,$b),e($b,Zpe),e(Zpe,BSo),e($b,ISo),e($b,rX),e(rX,NSo),e($b,qSo),e(y,jSo),e(y,kb),e(kb,e_e),e(e_e,DSo),e(kb,GSo),e(kb,tX),e(tX,OSo),e(kb,VSo),e(y,XSo),e(y,Sb),e(Sb,o_e),e(o_e,zSo),e(Sb,QSo),e(Sb,aX),e(aX,WSo),e(Sb,USo),e(y,HSo),e(y,Rb),e(Rb,r_e),e(r_e,JSo),e(Rb,YSo),e(Rb,nX),e(nX,KSo),e(Rb,ZSo),e(y,eRo),e(y,Pb),e(Pb,t_e),e(t_e,oRo),e(Pb,rRo),e(Pb,sX),e(sX,tRo),e(Pb,aRo),e(y,nRo),e(y,Bb),e(Bb,a_e),e(a_e,sRo),e(Bb,lRo),e(Bb,lX),e(lX,iRo),e(Bb,dRo),e(y,cRo),e(y,Ib),e(Ib,n_e),e(n_e,mRo),e(Ib,fRo),e(Ib,iX),e(iX,gRo),e(Ib,hRo),e(y,uRo),e(y,Nb),e(Nb,s_e),e(s_e,pRo),e(Nb,_Ro),e(Nb,dX),e(dX,bRo),e(Nb,vRo),e(y,FRo),e(y,qb),e(qb,l_e),e(l_e,TRo),e(qb,MRo),e(qb,cX),e(cX,ERo),e(qb,CRo),e(y,wRo),e(y,jb),e(jb,i_e),e(i_e,ARo),e(jb,LRo),e(jb,mX),e(mX,yRo),e(jb,xRo),e(y,$Ro),e(y,Db),e(Db,d_e),e(d_e,kRo),e(Db,SRo),e(Db,fX),e(fX,RRo),e(Db,PRo),e(y,BRo),e(y,Gb),e(Gb,c_e),e(c_e,IRo),e(Gb,NRo),e(Gb,gX),e(gX,qRo),e(Gb,jRo),e(y,DRo),e(y,Ob),e(Ob,m_e),e(m_e,GRo),e(Ob,ORo),e(Ob,hX),e(hX,VRo),e(Ob,XRo),e(y,zRo),e(y,Vb),e(Vb,f_e),e(f_e,QRo),e(Vb,WRo),e(Vb,uX),e(uX,URo),e(Vb,HRo),e(y,JRo),e(y,Xb),e(Xb,g_e),e(g_e,YRo),e(Xb,KRo),e(Xb,pX),e(pX,ZRo),e(Xb,ePo),e(y,oPo),e(y,zb),e(zb,h_e),e(h_e,rPo),e(zb,tPo),e(zb,_X),e(_X,aPo),e(zb,nPo),e(y,sPo),e(y,Qb),e(Qb,u_e),e(u_e,lPo),e(Qb,iPo),e(Qb,bX),e(bX,dPo),e(Qb,cPo),e(y,mPo),e(y,Wb),e(Wb,p_e),e(p_e,fPo),e(Wb,gPo),e(Wb,vX),e(vX,hPo),e(Wb,uPo),e(y,pPo),e(y,Ub),e(Ub,__e),e(__e,_Po),e(Ub,bPo),e(Ub,FX),e(FX,vPo),e(Ub,FPo),e(y,TPo),e(y,Hb),e(Hb,b_e),e(b_e,MPo),e(Hb,EPo),e(Hb,TX),e(TX,CPo),e(Hb,wPo),e(y,APo),e(y,Jb),e(Jb,v_e),e(v_e,LPo),e(Jb,yPo),e(Jb,MX),e(MX,xPo),e(Jb,$Po),e(y,kPo),e(y,Yb),e(Yb,F_e),e(F_e,SPo),e(Yb,RPo),e(Yb,EX),e(EX,PPo),e(Yb,BPo),e(y,IPo),e(y,Kb),e(Kb,T_e),e(T_e,NPo),e(Kb,qPo),e(Kb,CX),e(CX,jPo),e(Kb,DPo),e(y,GPo),e(y,Zb),e(Zb,M_e),e(M_e,OPo),e(Zb,VPo),e(Zb,wX),e(wX,XPo),e(Zb,zPo),e(y,QPo),e(y,e2),e(e2,E_e),e(E_e,WPo),e(e2,UPo),e(e2,AX),e(AX,HPo),e(e2,JPo),e(y,YPo),e(y,o2),e(o2,C_e),e(C_e,KPo),e(o2,ZPo),e(o2,LX),e(LX,eBo),e(o2,oBo),e(y,rBo),e(y,r2),e(r2,w_e),e(w_e,tBo),e(r2,aBo),e(r2,yX),e(yX,nBo),e(r2,sBo),e(y,lBo),e(y,t2),e(t2,A_e),e(A_e,iBo),e(t2,dBo),e(t2,xX),e(xX,cBo),e(t2,mBo),e(y,fBo),e(y,a2),e(a2,L_e),e(L_e,gBo),e(a2,hBo),e(a2,$X),e($X,uBo),e(a2,pBo),e(y,_Bo),e(y,n2),e(n2,y_e),e(y_e,bBo),e(n2,vBo),e(n2,kX),e(kX,FBo),e(n2,TBo),e(y,MBo),e(y,s2),e(s2,x_e),e(x_e,EBo),e(s2,CBo),e(s2,SX),e(SX,wBo),e(s2,ABo),e(y,LBo),e(y,l2),e(l2,$_e),e($_e,yBo),e(l2,xBo),e(l2,RX),e(RX,$Bo),e(l2,kBo),e(y,SBo),e(y,i2),e(i2,k_e),e(k_e,RBo),e(i2,PBo),e(i2,PX),e(PX,BBo),e(i2,IBo),e(Ze,NBo),e(Ze,d2),e(d2,qBo),e(d2,S_e),e(S_e,jBo),e(d2,DBo),e(d2,R_e),e(R_e,GBo),e(Ze,OBo),M(c2,Ze,null),b(m,wKe,_),b(m,vd,_),e(vd,m2),e(m2,P_e),M(dx,P_e,null),e(vd,VBo),e(vd,B_e),e(B_e,XBo),b(m,AKe,_),b(m,Bo,_),M(cx,Bo,null),e(Bo,zBo),e(Bo,Fd),e(Fd,QBo),e(Fd,BX),e(BX,WBo),e(Fd,UBo),e(Fd,IX),e(IX,HBo),e(Fd,JBo),e(Bo,YBo),e(Bo,mx),e(mx,KBo),e(mx,I_e),e(I_e,ZBo),e(mx,eIo),e(Bo,oIo),e(Bo,bt),M(fx,bt,null),e(bt,rIo),e(bt,N_e),e(N_e,tIo),e(bt,aIo),e(bt,Td),e(Td,nIo),e(Td,q_e),e(q_e,sIo),e(Td,lIo),e(Td,NX),e(NX,iIo),e(Td,dIo),e(bt,cIo),M(f2,bt,null),e(Bo,mIo),e(Bo,eo),M(gx,eo,null),e(eo,fIo),e(eo,j_e),e(j_e,gIo),e(eo,hIo),e(eo,Ya),e(Ya,uIo),e(Ya,D_e),e(D_e,pIo),e(Ya,_Io),e(Ya,G_e),e(G_e,bIo),e(Ya,vIo),e(Ya,O_e),e(O_e,FIo),e(Ya,TIo),e(eo,MIo),e(eo,G),e(G,g2),e(g2,V_e),e(V_e,EIo),e(g2,CIo),e(g2,qX),e(qX,wIo),e(g2,AIo),e(G,LIo),e(G,h2),e(h2,X_e),e(X_e,yIo),e(h2,xIo),e(h2,jX),e(jX,$Io),e(h2,kIo),e(G,SIo),e(G,u2),e(u2,z_e),e(z_e,RIo),e(u2,PIo),e(u2,DX),e(DX,BIo),e(u2,IIo),e(G,NIo),e(G,p2),e(p2,Q_e),e(Q_e,qIo),e(p2,jIo),e(p2,GX),e(GX,DIo),e(p2,GIo),e(G,OIo),e(G,_2),e(_2,W_e),e(W_e,VIo),e(_2,XIo),e(_2,OX),e(OX,zIo),e(_2,QIo),e(G,WIo),e(G,b2),e(b2,U_e),e(U_e,UIo),e(b2,HIo),e(b2,VX),e(VX,JIo),e(b2,YIo),e(G,KIo),e(G,v2),e(v2,H_e),e(H_e,ZIo),e(v2,eNo),e(v2,XX),e(XX,oNo),e(v2,rNo),e(G,tNo),e(G,F2),e(F2,J_e),e(J_e,aNo),e(F2,nNo),e(F2,zX),e(zX,sNo),e(F2,lNo),e(G,iNo),e(G,T2),e(T2,Y_e),e(Y_e,dNo),e(T2,cNo),e(T2,QX),e(QX,mNo),e(T2,fNo),e(G,gNo),e(G,M2),e(M2,K_e),e(K_e,hNo),e(M2,uNo),e(M2,WX),e(WX,pNo),e(M2,_No),e(G,bNo),e(G,E2),e(E2,Z_e),e(Z_e,vNo),e(E2,FNo),e(E2,UX),e(UX,TNo),e(E2,MNo),e(G,ENo),e(G,C2),e(C2,ebe),e(ebe,CNo),e(C2,wNo),e(C2,HX),e(HX,ANo),e(C2,LNo),e(G,yNo),e(G,w2),e(w2,obe),e(obe,xNo),e(w2,$No),e(w2,JX),e(JX,kNo),e(w2,SNo),e(G,RNo),e(G,A2),e(A2,rbe),e(rbe,PNo),e(A2,BNo),e(A2,YX),e(YX,INo),e(A2,NNo),e(G,qNo),e(G,L2),e(L2,tbe),e(tbe,jNo),e(L2,DNo),e(L2,KX),e(KX,GNo),e(L2,ONo),e(G,VNo),e(G,y2),e(y2,abe),e(abe,XNo),e(y2,zNo),e(y2,ZX),e(ZX,QNo),e(y2,WNo),e(G,UNo),e(G,x2),e(x2,nbe),e(nbe,HNo),e(x2,JNo),e(x2,ez),e(ez,YNo),e(x2,KNo),e(G,ZNo),e(G,$2),e($2,sbe),e(sbe,eqo),e($2,oqo),e($2,oz),e(oz,rqo),e($2,tqo),e(G,aqo),e(G,k2),e(k2,lbe),e(lbe,nqo),e(k2,sqo),e(k2,rz),e(rz,lqo),e(k2,iqo),e(G,dqo),e(G,S2),e(S2,ibe),e(ibe,cqo),e(S2,mqo),e(S2,tz),e(tz,fqo),e(S2,gqo),e(G,hqo),e(G,R2),e(R2,dbe),e(dbe,uqo),e(R2,pqo),e(R2,az),e(az,_qo),e(R2,bqo),e(G,vqo),e(G,P2),e(P2,cbe),e(cbe,Fqo),e(P2,Tqo),e(P2,nz),e(nz,Mqo),e(P2,Eqo),e(G,Cqo),e(G,B2),e(B2,mbe),e(mbe,wqo),e(B2,Aqo),e(B2,sz),e(sz,Lqo),e(B2,yqo),e(G,xqo),e(G,I2),e(I2,fbe),e(fbe,$qo),e(I2,kqo),e(I2,lz),e(lz,Sqo),e(I2,Rqo),e(G,Pqo),e(G,N2),e(N2,gbe),e(gbe,Bqo),e(N2,Iqo),e(N2,iz),e(iz,Nqo),e(N2,qqo),e(G,jqo),e(G,q2),e(q2,hbe),e(hbe,Dqo),e(q2,Gqo),e(q2,dz),e(dz,Oqo),e(q2,Vqo),e(G,Xqo),e(G,j2),e(j2,ube),e(ube,zqo),e(j2,Qqo),e(j2,cz),e(cz,Wqo),e(j2,Uqo),e(G,Hqo),e(G,D2),e(D2,pbe),e(pbe,Jqo),e(D2,Yqo),e(D2,mz),e(mz,Kqo),e(D2,Zqo),e(G,ejo),e(G,G2),e(G2,_be),e(_be,ojo),e(G2,rjo),e(G2,fz),e(fz,tjo),e(G2,ajo),e(G,njo),e(G,O2),e(O2,bbe),e(bbe,sjo),e(O2,ljo),e(O2,gz),e(gz,ijo),e(O2,djo),e(G,cjo),e(G,V2),e(V2,vbe),e(vbe,mjo),e(V2,fjo),e(V2,hz),e(hz,gjo),e(V2,hjo),e(G,ujo),e(G,X2),e(X2,Fbe),e(Fbe,pjo),e(X2,_jo),e(X2,uz),e(uz,bjo),e(X2,vjo),e(G,Fjo),e(G,z2),e(z2,Tbe),e(Tbe,Tjo),e(z2,Mjo),e(z2,pz),e(pz,Ejo),e(z2,Cjo),e(G,wjo),e(G,Q2),e(Q2,Mbe),e(Mbe,Ajo),e(Q2,Ljo),e(Q2,_z),e(_z,yjo),e(Q2,xjo),e(G,$jo),e(G,W2),e(W2,Ebe),e(Ebe,kjo),e(W2,Sjo),e(W2,bz),e(bz,Rjo),e(W2,Pjo),e(G,Bjo),e(G,U2),e(U2,Cbe),e(Cbe,Ijo),e(U2,Njo),e(U2,vz),e(vz,qjo),e(U2,jjo),e(G,Djo),e(G,H2),e(H2,wbe),e(wbe,Gjo),e(H2,Ojo),e(H2,Fz),e(Fz,Vjo),e(H2,Xjo),e(G,zjo),e(G,J2),e(J2,Abe),e(Abe,Qjo),e(J2,Wjo),e(J2,Tz),e(Tz,Ujo),e(J2,Hjo),e(G,Jjo),e(G,Y2),e(Y2,Lbe),e(Lbe,Yjo),e(Y2,Kjo),e(Y2,Mz),e(Mz,Zjo),e(Y2,eDo),e(G,oDo),e(G,K2),e(K2,ybe),e(ybe,rDo),e(K2,tDo),e(K2,Ez),e(Ez,aDo),e(K2,nDo),e(G,sDo),e(G,Z2),e(Z2,xbe),e(xbe,lDo),e(Z2,iDo),e(Z2,Cz),e(Cz,dDo),e(Z2,cDo),e(G,mDo),e(G,e1),e(e1,$be),e($be,fDo),e(e1,gDo),e(e1,wz),e(wz,hDo),e(e1,uDo),e(G,pDo),e(G,o1),e(o1,kbe),e(kbe,_Do),e(o1,bDo),e(o1,Az),e(Az,vDo),e(o1,FDo),e(G,TDo),e(G,r1),e(r1,Sbe),e(Sbe,MDo),e(r1,EDo),e(r1,Lz),e(Lz,CDo),e(r1,wDo),e(G,ADo),e(G,t1),e(t1,Rbe),e(Rbe,LDo),e(t1,yDo),e(t1,yz),e(yz,xDo),e(t1,$Do),e(G,kDo),e(G,a1),e(a1,Pbe),e(Pbe,SDo),e(a1,RDo),e(a1,xz),e(xz,PDo),e(a1,BDo),e(G,IDo),e(G,n1),e(n1,Bbe),e(Bbe,NDo),e(n1,qDo),e(n1,$z),e($z,jDo),e(n1,DDo),e(G,GDo),e(G,s1),e(s1,Ibe),e(Ibe,ODo),e(s1,VDo),e(s1,kz),e(kz,XDo),e(s1,zDo),e(eo,QDo),e(eo,l1),e(l1,WDo),e(l1,Nbe),e(Nbe,UDo),e(l1,HDo),e(l1,qbe),e(qbe,JDo),e(eo,YDo),M(i1,eo,null),b(m,LKe,_),b(m,Md,_),e(Md,d1),e(d1,jbe),M(hx,jbe,null),e(Md,KDo),e(Md,Dbe),e(Dbe,ZDo),b(m,yKe,_),b(m,Io,_),M(ux,Io,null),e(Io,eGo),e(Io,Ed),e(Ed,oGo),e(Ed,Sz),e(Sz,rGo),e(Ed,tGo),e(Ed,Rz),e(Rz,aGo),e(Ed,nGo),e(Io,sGo),e(Io,px),e(px,lGo),e(px,Gbe),e(Gbe,iGo),e(px,dGo),e(Io,cGo),e(Io,vt),M(_x,vt,null),e(vt,mGo),e(vt,Obe),e(Obe,fGo),e(vt,gGo),e(vt,Cd),e(Cd,hGo),e(Cd,Vbe),e(Vbe,uGo),e(Cd,pGo),e(Cd,Pz),e(Pz,_Go),e(Cd,bGo),e(vt,vGo),M(c1,vt,null),e(Io,FGo),e(Io,oo),M(bx,oo,null),e(oo,TGo),e(oo,Xbe),e(Xbe,MGo),e(oo,EGo),e(oo,Ka),e(Ka,CGo),e(Ka,zbe),e(zbe,wGo),e(Ka,AGo),e(Ka,Qbe),e(Qbe,LGo),e(Ka,yGo),e(Ka,Wbe),e(Wbe,xGo),e(Ka,$Go),e(oo,kGo),e(oo,z),e(z,m1),e(m1,Ube),e(Ube,SGo),e(m1,RGo),e(m1,Bz),e(Bz,PGo),e(m1,BGo),e(z,IGo),e(z,f1),e(f1,Hbe),e(Hbe,NGo),e(f1,qGo),e(f1,Iz),e(Iz,jGo),e(f1,DGo),e(z,GGo),e(z,g1),e(g1,Jbe),e(Jbe,OGo),e(g1,VGo),e(g1,Nz),e(Nz,XGo),e(g1,zGo),e(z,QGo),e(z,h1),e(h1,Ybe),e(Ybe,WGo),e(h1,UGo),e(h1,qz),e(qz,HGo),e(h1,JGo),e(z,YGo),e(z,u1),e(u1,Kbe),e(Kbe,KGo),e(u1,ZGo),e(u1,jz),e(jz,eOo),e(u1,oOo),e(z,rOo),e(z,p1),e(p1,Zbe),e(Zbe,tOo),e(p1,aOo),e(p1,Dz),e(Dz,nOo),e(p1,sOo),e(z,lOo),e(z,_1),e(_1,e2e),e(e2e,iOo),e(_1,dOo),e(_1,Gz),e(Gz,cOo),e(_1,mOo),e(z,fOo),e(z,b1),e(b1,o2e),e(o2e,gOo),e(b1,hOo),e(b1,Oz),e(Oz,uOo),e(b1,pOo),e(z,_Oo),e(z,v1),e(v1,r2e),e(r2e,bOo),e(v1,vOo),e(v1,Vz),e(Vz,FOo),e(v1,TOo),e(z,MOo),e(z,F1),e(F1,t2e),e(t2e,EOo),e(F1,COo),e(F1,Xz),e(Xz,wOo),e(F1,AOo),e(z,LOo),e(z,T1),e(T1,a2e),e(a2e,yOo),e(T1,xOo),e(T1,zz),e(zz,$Oo),e(T1,kOo),e(z,SOo),e(z,M1),e(M1,n2e),e(n2e,ROo),e(M1,POo),e(M1,Qz),e(Qz,BOo),e(M1,IOo),e(z,NOo),e(z,E1),e(E1,s2e),e(s2e,qOo),e(E1,jOo),e(E1,Wz),e(Wz,DOo),e(E1,GOo),e(z,OOo),e(z,C1),e(C1,l2e),e(l2e,VOo),e(C1,XOo),e(C1,Uz),e(Uz,zOo),e(C1,QOo),e(z,WOo),e(z,w1),e(w1,i2e),e(i2e,UOo),e(w1,HOo),e(w1,Hz),e(Hz,JOo),e(w1,YOo),e(z,KOo),e(z,A1),e(A1,d2e),e(d2e,ZOo),e(A1,eVo),e(A1,Jz),e(Jz,oVo),e(A1,rVo),e(z,tVo),e(z,L1),e(L1,c2e),e(c2e,aVo),e(L1,nVo),e(L1,Yz),e(Yz,sVo),e(L1,lVo),e(z,iVo),e(z,y1),e(y1,m2e),e(m2e,dVo),e(y1,cVo),e(y1,Kz),e(Kz,mVo),e(y1,fVo),e(z,gVo),e(z,x1),e(x1,f2e),e(f2e,hVo),e(x1,uVo),e(x1,Zz),e(Zz,pVo),e(x1,_Vo),e(z,bVo),e(z,$1),e($1,g2e),e(g2e,vVo),e($1,FVo),e($1,eQ),e(eQ,TVo),e($1,MVo),e(z,EVo),e(z,k1),e(k1,h2e),e(h2e,CVo),e(k1,wVo),e(k1,oQ),e(oQ,AVo),e(k1,LVo),e(z,yVo),e(z,S1),e(S1,u2e),e(u2e,xVo),e(S1,$Vo),e(S1,rQ),e(rQ,kVo),e(S1,SVo),e(z,RVo),e(z,R1),e(R1,p2e),e(p2e,PVo),e(R1,BVo),e(R1,tQ),e(tQ,IVo),e(R1,NVo),e(z,qVo),e(z,P1),e(P1,_2e),e(_2e,jVo),e(P1,DVo),e(P1,aQ),e(aQ,GVo),e(P1,OVo),e(z,VVo),e(z,B1),e(B1,b2e),e(b2e,XVo),e(B1,zVo),e(B1,nQ),e(nQ,QVo),e(B1,WVo),e(z,UVo),e(z,I1),e(I1,v2e),e(v2e,HVo),e(I1,JVo),e(I1,sQ),e(sQ,YVo),e(I1,KVo),e(z,ZVo),e(z,N1),e(N1,F2e),e(F2e,eXo),e(N1,oXo),e(N1,lQ),e(lQ,rXo),e(N1,tXo),e(z,aXo),e(z,q1),e(q1,T2e),e(T2e,nXo),e(q1,sXo),e(q1,iQ),e(iQ,lXo),e(q1,iXo),e(z,dXo),e(z,j1),e(j1,M2e),e(M2e,cXo),e(j1,mXo),e(j1,dQ),e(dQ,fXo),e(j1,gXo),e(z,hXo),e(z,D1),e(D1,E2e),e(E2e,uXo),e(D1,pXo),e(D1,cQ),e(cQ,_Xo),e(D1,bXo),e(z,vXo),e(z,G1),e(G1,C2e),e(C2e,FXo),e(G1,TXo),e(G1,mQ),e(mQ,MXo),e(G1,EXo),e(z,CXo),e(z,O1),e(O1,w2e),e(w2e,wXo),e(O1,AXo),e(O1,fQ),e(fQ,LXo),e(O1,yXo),e(z,xXo),e(z,V1),e(V1,A2e),e(A2e,$Xo),e(V1,kXo),e(V1,gQ),e(gQ,SXo),e(V1,RXo),e(z,PXo),e(z,X1),e(X1,L2e),e(L2e,BXo),e(X1,IXo),e(X1,hQ),e(hQ,NXo),e(X1,qXo),e(z,jXo),e(z,z1),e(z1,y2e),e(y2e,DXo),e(z1,GXo),e(z1,uQ),e(uQ,OXo),e(z1,VXo),e(z,XXo),e(z,Q1),e(Q1,x2e),e(x2e,zXo),e(Q1,QXo),e(Q1,pQ),e(pQ,WXo),e(Q1,UXo),e(z,HXo),e(z,W1),e(W1,$2e),e($2e,JXo),e(W1,YXo),e(W1,_Q),e(_Q,KXo),e(W1,ZXo),e(z,ezo),e(z,U1),e(U1,k2e),e(k2e,ozo),e(U1,rzo),e(U1,bQ),e(bQ,tzo),e(U1,azo),e(z,nzo),e(z,H1),e(H1,S2e),e(S2e,szo),e(H1,lzo),e(H1,vQ),e(vQ,izo),e(H1,dzo),e(z,czo),e(z,J1),e(J1,R2e),e(R2e,mzo),e(J1,fzo),e(J1,FQ),e(FQ,gzo),e(J1,hzo),e(z,uzo),e(z,Y1),e(Y1,P2e),e(P2e,pzo),e(Y1,_zo),e(Y1,TQ),e(TQ,bzo),e(Y1,vzo),e(z,Fzo),e(z,K1),e(K1,B2e),e(B2e,Tzo),e(K1,Mzo),e(K1,MQ),e(MQ,Ezo),e(K1,Czo),e(oo,wzo),e(oo,Z1),e(Z1,Azo),e(Z1,I2e),e(I2e,Lzo),e(Z1,yzo),e(Z1,N2e),e(N2e,xzo),e(oo,$zo),M(ev,oo,null),b(m,xKe,_),b(m,wd,_),e(wd,ov),e(ov,q2e),M(vx,q2e,null),e(wd,kzo),e(wd,j2e),e(j2e,Szo),b(m,$Ke,_),b(m,No,_),M(Fx,No,null),e(No,Rzo),e(No,Ad),e(Ad,Pzo),e(Ad,EQ),e(EQ,Bzo),e(Ad,Izo),e(Ad,CQ),e(CQ,Nzo),e(Ad,qzo),e(No,jzo),e(No,Tx),e(Tx,Dzo),e(Tx,D2e),e(D2e,Gzo),e(Tx,Ozo),e(No,Vzo),e(No,Ft),M(Mx,Ft,null),e(Ft,Xzo),e(Ft,G2e),e(G2e,zzo),e(Ft,Qzo),e(Ft,Ld),e(Ld,Wzo),e(Ld,O2e),e(O2e,Uzo),e(Ld,Hzo),e(Ld,wQ),e(wQ,Jzo),e(Ld,Yzo),e(Ft,Kzo),M(rv,Ft,null),e(No,Zzo),e(No,ro),M(Ex,ro,null),e(ro,eQo),e(ro,V2e),e(V2e,oQo),e(ro,rQo),e(ro,Za),e(Za,tQo),e(Za,X2e),e(X2e,aQo),e(Za,nQo),e(Za,z2e),e(z2e,sQo),e(Za,lQo),e(Za,Q2e),e(Q2e,iQo),e(Za,dQo),e(ro,cQo),e(ro,U),e(U,tv),e(tv,W2e),e(W2e,mQo),e(tv,fQo),e(tv,AQ),e(AQ,gQo),e(tv,hQo),e(U,uQo),e(U,av),e(av,U2e),e(U2e,pQo),e(av,_Qo),e(av,LQ),e(LQ,bQo),e(av,vQo),e(U,FQo),e(U,nv),e(nv,H2e),e(H2e,TQo),e(nv,MQo),e(nv,yQ),e(yQ,EQo),e(nv,CQo),e(U,wQo),e(U,sv),e(sv,J2e),e(J2e,AQo),e(sv,LQo),e(sv,xQ),e(xQ,yQo),e(sv,xQo),e(U,$Qo),e(U,lv),e(lv,Y2e),e(Y2e,kQo),e(lv,SQo),e(lv,$Q),e($Q,RQo),e(lv,PQo),e(U,BQo),e(U,iv),e(iv,K2e),e(K2e,IQo),e(iv,NQo),e(iv,kQ),e(kQ,qQo),e(iv,jQo),e(U,DQo),e(U,dv),e(dv,Z2e),e(Z2e,GQo),e(dv,OQo),e(dv,SQ),e(SQ,VQo),e(dv,XQo),e(U,zQo),e(U,cv),e(cv,e1e),e(e1e,QQo),e(cv,WQo),e(cv,RQ),e(RQ,UQo),e(cv,HQo),e(U,JQo),e(U,mv),e(mv,o1e),e(o1e,YQo),e(mv,KQo),e(mv,PQ),e(PQ,ZQo),e(mv,eWo),e(U,oWo),e(U,fv),e(fv,r1e),e(r1e,rWo),e(fv,tWo),e(fv,BQ),e(BQ,aWo),e(fv,nWo),e(U,sWo),e(U,gv),e(gv,t1e),e(t1e,lWo),e(gv,iWo),e(gv,IQ),e(IQ,dWo),e(gv,cWo),e(U,mWo),e(U,hv),e(hv,a1e),e(a1e,fWo),e(hv,gWo),e(hv,NQ),e(NQ,hWo),e(hv,uWo),e(U,pWo),e(U,uv),e(uv,n1e),e(n1e,_Wo),e(uv,bWo),e(uv,qQ),e(qQ,vWo),e(uv,FWo),e(U,TWo),e(U,pv),e(pv,s1e),e(s1e,MWo),e(pv,EWo),e(pv,jQ),e(jQ,CWo),e(pv,wWo),e(U,AWo),e(U,_v),e(_v,l1e),e(l1e,LWo),e(_v,yWo),e(_v,DQ),e(DQ,xWo),e(_v,$Wo),e(U,kWo),e(U,bv),e(bv,i1e),e(i1e,SWo),e(bv,RWo),e(bv,GQ),e(GQ,PWo),e(bv,BWo),e(U,IWo),e(U,vv),e(vv,d1e),e(d1e,NWo),e(vv,qWo),e(vv,OQ),e(OQ,jWo),e(vv,DWo),e(U,GWo),e(U,Fv),e(Fv,c1e),e(c1e,OWo),e(Fv,VWo),e(Fv,VQ),e(VQ,XWo),e(Fv,zWo),e(U,QWo),e(U,Tv),e(Tv,m1e),e(m1e,WWo),e(Tv,UWo),e(Tv,XQ),e(XQ,HWo),e(Tv,JWo),e(U,YWo),e(U,Mv),e(Mv,f1e),e(f1e,KWo),e(Mv,ZWo),e(Mv,zQ),e(zQ,eUo),e(Mv,oUo),e(U,rUo),e(U,Ev),e(Ev,g1e),e(g1e,tUo),e(Ev,aUo),e(Ev,QQ),e(QQ,nUo),e(Ev,sUo),e(U,lUo),e(U,Cv),e(Cv,h1e),e(h1e,iUo),e(Cv,dUo),e(Cv,WQ),e(WQ,cUo),e(Cv,mUo),e(U,fUo),e(U,wv),e(wv,u1e),e(u1e,gUo),e(wv,hUo),e(wv,UQ),e(UQ,uUo),e(wv,pUo),e(U,_Uo),e(U,Av),e(Av,p1e),e(p1e,bUo),e(Av,vUo),e(Av,HQ),e(HQ,FUo),e(Av,TUo),e(U,MUo),e(U,Lv),e(Lv,_1e),e(_1e,EUo),e(Lv,CUo),e(Lv,JQ),e(JQ,wUo),e(Lv,AUo),e(U,LUo),e(U,yv),e(yv,b1e),e(b1e,yUo),e(yv,xUo),e(yv,YQ),e(YQ,$Uo),e(yv,kUo),e(U,SUo),e(U,xv),e(xv,v1e),e(v1e,RUo),e(xv,PUo),e(xv,KQ),e(KQ,BUo),e(xv,IUo),e(U,NUo),e(U,$v),e($v,F1e),e(F1e,qUo),e($v,jUo),e($v,ZQ),e(ZQ,DUo),e($v,GUo),e(U,OUo),e(U,kv),e(kv,T1e),e(T1e,VUo),e(kv,XUo),e(kv,eW),e(eW,zUo),e(kv,QUo),e(U,WUo),e(U,Sv),e(Sv,M1e),e(M1e,UUo),e(Sv,HUo),e(Sv,oW),e(oW,JUo),e(Sv,YUo),e(U,KUo),e(U,Rv),e(Rv,E1e),e(E1e,ZUo),e(Rv,eHo),e(Rv,rW),e(rW,oHo),e(Rv,rHo),e(U,tHo),e(U,Pv),e(Pv,C1e),e(C1e,aHo),e(Pv,nHo),e(Pv,tW),e(tW,sHo),e(Pv,lHo),e(U,iHo),e(U,Bv),e(Bv,w1e),e(w1e,dHo),e(Bv,cHo),e(Bv,aW),e(aW,mHo),e(Bv,fHo),e(U,gHo),e(U,Iv),e(Iv,A1e),e(A1e,hHo),e(Iv,uHo),e(Iv,nW),e(nW,pHo),e(Iv,_Ho),e(U,bHo),e(U,Nv),e(Nv,L1e),e(L1e,vHo),e(Nv,FHo),e(Nv,y1e),e(y1e,THo),e(Nv,MHo),e(U,EHo),e(U,qv),e(qv,x1e),e(x1e,CHo),e(qv,wHo),e(qv,sW),e(sW,AHo),e(qv,LHo),e(U,yHo),e(U,jv),e(jv,$1e),e($1e,xHo),e(jv,$Ho),e(jv,lW),e(lW,kHo),e(jv,SHo),e(U,RHo),e(U,Dv),e(Dv,k1e),e(k1e,PHo),e(Dv,BHo),e(Dv,iW),e(iW,IHo),e(Dv,NHo),e(U,qHo),e(U,Gv),e(Gv,S1e),e(S1e,jHo),e(Gv,DHo),e(Gv,dW),e(dW,GHo),e(Gv,OHo),e(ro,VHo),e(ro,Ov),e(Ov,XHo),e(Ov,R1e),e(R1e,zHo),e(Ov,QHo),e(Ov,P1e),e(P1e,WHo),e(ro,UHo),M(Vv,ro,null),b(m,kKe,_),b(m,yd,_),e(yd,Xv),e(Xv,B1e),M(Cx,B1e,null),e(yd,HHo),e(yd,I1e),e(I1e,JHo),b(m,SKe,_),b(m,qo,_),M(wx,qo,null),e(qo,YHo),e(qo,xd),e(xd,KHo),e(xd,cW),e(cW,ZHo),e(xd,eJo),e(xd,mW),e(mW,oJo),e(xd,rJo),e(qo,tJo),e(qo,Ax),e(Ax,aJo),e(Ax,N1e),e(N1e,nJo),e(Ax,sJo),e(qo,lJo),e(qo,Tt),M(Lx,Tt,null),e(Tt,iJo),e(Tt,q1e),e(q1e,dJo),e(Tt,cJo),e(Tt,$d),e($d,mJo),e($d,j1e),e(j1e,fJo),e($d,gJo),e($d,fW),e(fW,hJo),e($d,uJo),e(Tt,pJo),M(zv,Tt,null),e(qo,_Jo),e(qo,to),M(yx,to,null),e(to,bJo),e(to,D1e),e(D1e,vJo),e(to,FJo),e(to,en),e(en,TJo),e(en,G1e),e(G1e,MJo),e(en,EJo),e(en,O1e),e(O1e,CJo),e(en,wJo),e(en,V1e),e(V1e,AJo),e(en,LJo),e(to,yJo),e(to,me),e(me,Qv),e(Qv,X1e),e(X1e,xJo),e(Qv,$Jo),e(Qv,gW),e(gW,kJo),e(Qv,SJo),e(me,RJo),e(me,Wv),e(Wv,z1e),e(z1e,PJo),e(Wv,BJo),e(Wv,hW),e(hW,IJo),e(Wv,NJo),e(me,qJo),e(me,Uv),e(Uv,Q1e),e(Q1e,jJo),e(Uv,DJo),e(Uv,uW),e(uW,GJo),e(Uv,OJo),e(me,VJo),e(me,Hv),e(Hv,W1e),e(W1e,XJo),e(Hv,zJo),e(Hv,pW),e(pW,QJo),e(Hv,WJo),e(me,UJo),e(me,Jv),e(Jv,U1e),e(U1e,HJo),e(Jv,JJo),e(Jv,_W),e(_W,YJo),e(Jv,KJo),e(me,ZJo),e(me,Yv),e(Yv,H1e),e(H1e,eYo),e(Yv,oYo),e(Yv,bW),e(bW,rYo),e(Yv,tYo),e(me,aYo),e(me,Kv),e(Kv,J1e),e(J1e,nYo),e(Kv,sYo),e(Kv,vW),e(vW,lYo),e(Kv,iYo),e(me,dYo),e(me,Zv),e(Zv,Y1e),e(Y1e,cYo),e(Zv,mYo),e(Zv,FW),e(FW,fYo),e(Zv,gYo),e(me,hYo),e(me,eF),e(eF,K1e),e(K1e,uYo),e(eF,pYo),e(eF,TW),e(TW,_Yo),e(eF,bYo),e(me,vYo),e(me,oF),e(oF,Z1e),e(Z1e,FYo),e(oF,TYo),e(oF,MW),e(MW,MYo),e(oF,EYo),e(me,CYo),e(me,rF),e(rF,eve),e(eve,wYo),e(rF,AYo),e(rF,EW),e(EW,LYo),e(rF,yYo),e(me,xYo),e(me,tF),e(tF,ove),e(ove,$Yo),e(tF,kYo),e(tF,CW),e(CW,SYo),e(tF,RYo),e(me,PYo),e(me,aF),e(aF,rve),e(rve,BYo),e(aF,IYo),e(aF,wW),e(wW,NYo),e(aF,qYo),e(me,jYo),e(me,nF),e(nF,tve),e(tve,DYo),e(nF,GYo),e(nF,AW),e(AW,OYo),e(nF,VYo),e(me,XYo),e(me,sF),e(sF,ave),e(ave,zYo),e(sF,QYo),e(sF,LW),e(LW,WYo),e(sF,UYo),e(me,HYo),e(me,lF),e(lF,nve),e(nve,JYo),e(lF,YYo),e(lF,yW),e(yW,KYo),e(lF,ZYo),e(me,eKo),e(me,iF),e(iF,sve),e(sve,oKo),e(iF,rKo),e(iF,xW),e(xW,tKo),e(iF,aKo),e(me,nKo),e(me,dF),e(dF,lve),e(lve,sKo),e(dF,lKo),e(dF,$W),e($W,iKo),e(dF,dKo),e(me,cKo),e(me,cF),e(cF,ive),e(ive,mKo),e(cF,fKo),e(cF,kW),e(kW,gKo),e(cF,hKo),e(me,uKo),e(me,mF),e(mF,dve),e(dve,pKo),e(mF,_Ko),e(mF,SW),e(SW,bKo),e(mF,vKo),e(to,FKo),e(to,fF),e(fF,TKo),e(fF,cve),e(cve,MKo),e(fF,EKo),e(fF,mve),e(mve,CKo),e(to,wKo),M(gF,to,null),b(m,RKe,_),b(m,kd,_),e(kd,hF),e(hF,fve),M(xx,fve,null),e(kd,AKo),e(kd,gve),e(gve,LKo),b(m,PKe,_),b(m,jo,_),M($x,jo,null),e(jo,yKo),e(jo,Sd),e(Sd,xKo),e(Sd,RW),e(RW,$Ko),e(Sd,kKo),e(Sd,PW),e(PW,SKo),e(Sd,RKo),e(jo,PKo),e(jo,kx),e(kx,BKo),e(kx,hve),e(hve,IKo),e(kx,NKo),e(jo,qKo),e(jo,Mt),M(Sx,Mt,null),e(Mt,jKo),e(Mt,uve),e(uve,DKo),e(Mt,GKo),e(Mt,Rd),e(Rd,OKo),e(Rd,pve),e(pve,VKo),e(Rd,XKo),e(Rd,BW),e(BW,zKo),e(Rd,QKo),e(Mt,WKo),M(uF,Mt,null),e(jo,UKo),e(jo,ao),M(Rx,ao,null),e(ao,HKo),e(ao,_ve),e(_ve,JKo),e(ao,YKo),e(ao,on),e(on,KKo),e(on,bve),e(bve,ZKo),e(on,eZo),e(on,vve),e(vve,oZo),e(on,rZo),e(on,Fve),e(Fve,tZo),e(on,aZo),e(ao,nZo),e(ao,q),e(q,pF),e(pF,Tve),e(Tve,sZo),e(pF,lZo),e(pF,IW),e(IW,iZo),e(pF,dZo),e(q,cZo),e(q,_F),e(_F,Mve),e(Mve,mZo),e(_F,fZo),e(_F,NW),e(NW,gZo),e(_F,hZo),e(q,uZo),e(q,bF),e(bF,Eve),e(Eve,pZo),e(bF,_Zo),e(bF,qW),e(qW,bZo),e(bF,vZo),e(q,FZo),e(q,vF),e(vF,Cve),e(Cve,TZo),e(vF,MZo),e(vF,jW),e(jW,EZo),e(vF,CZo),e(q,wZo),e(q,FF),e(FF,wve),e(wve,AZo),e(FF,LZo),e(FF,DW),e(DW,yZo),e(FF,xZo),e(q,$Zo),e(q,TF),e(TF,Ave),e(Ave,kZo),e(TF,SZo),e(TF,GW),e(GW,RZo),e(TF,PZo),e(q,BZo),e(q,MF),e(MF,Lve),e(Lve,IZo),e(MF,NZo),e(MF,OW),e(OW,qZo),e(MF,jZo),e(q,DZo),e(q,EF),e(EF,yve),e(yve,GZo),e(EF,OZo),e(EF,VW),e(VW,VZo),e(EF,XZo),e(q,zZo),e(q,CF),e(CF,xve),e(xve,QZo),e(CF,WZo),e(CF,XW),e(XW,UZo),e(CF,HZo),e(q,JZo),e(q,wF),e(wF,$ve),e($ve,YZo),e(wF,KZo),e(wF,zW),e(zW,ZZo),e(wF,eer),e(q,oer),e(q,AF),e(AF,kve),e(kve,rer),e(AF,ter),e(AF,QW),e(QW,aer),e(AF,ner),e(q,ser),e(q,LF),e(LF,Sve),e(Sve,ler),e(LF,ier),e(LF,WW),e(WW,der),e(LF,cer),e(q,mer),e(q,yF),e(yF,Rve),e(Rve,fer),e(yF,ger),e(yF,UW),e(UW,her),e(yF,uer),e(q,per),e(q,xF),e(xF,Pve),e(Pve,_er),e(xF,ber),e(xF,HW),e(HW,ver),e(xF,Fer),e(q,Ter),e(q,$F),e($F,Bve),e(Bve,Mer),e($F,Eer),e($F,JW),e(JW,Cer),e($F,wer),e(q,Aer),e(q,kF),e(kF,Ive),e(Ive,Ler),e(kF,yer),e(kF,YW),e(YW,xer),e(kF,$er),e(q,ker),e(q,SF),e(SF,Nve),e(Nve,Ser),e(SF,Rer),e(SF,KW),e(KW,Per),e(SF,Ber),e(q,Ier),e(q,RF),e(RF,qve),e(qve,Ner),e(RF,qer),e(RF,ZW),e(ZW,jer),e(RF,Der),e(q,Ger),e(q,PF),e(PF,jve),e(jve,Oer),e(PF,Ver),e(PF,eU),e(eU,Xer),e(PF,zer),e(q,Qer),e(q,BF),e(BF,Dve),e(Dve,Wer),e(BF,Uer),e(BF,oU),e(oU,Her),e(BF,Jer),e(q,Yer),e(q,IF),e(IF,Gve),e(Gve,Ker),e(IF,Zer),e(IF,rU),e(rU,eor),e(IF,oor),e(q,ror),e(q,NF),e(NF,Ove),e(Ove,tor),e(NF,aor),e(NF,tU),e(tU,nor),e(NF,sor),e(q,lor),e(q,qF),e(qF,Vve),e(Vve,ior),e(qF,dor),e(qF,aU),e(aU,cor),e(qF,mor),e(q,gor),e(q,jF),e(jF,Xve),e(Xve,hor),e(jF,uor),e(jF,nU),e(nU,por),e(jF,_or),e(q,bor),e(q,DF),e(DF,zve),e(zve,vor),e(DF,For),e(DF,sU),e(sU,Tor),e(DF,Mor),e(q,Eor),e(q,GF),e(GF,Qve),e(Qve,Cor),e(GF,wor),e(GF,lU),e(lU,Aor),e(GF,Lor),e(q,yor),e(q,OF),e(OF,Wve),e(Wve,xor),e(OF,$or),e(OF,iU),e(iU,kor),e(OF,Sor),e(q,Ror),e(q,VF),e(VF,Uve),e(Uve,Por),e(VF,Bor),e(VF,dU),e(dU,Ior),e(VF,Nor),e(q,qor),e(q,XF),e(XF,Hve),e(Hve,jor),e(XF,Dor),e(XF,cU),e(cU,Gor),e(XF,Oor),e(q,Vor),e(q,zF),e(zF,Jve),e(Jve,Xor),e(zF,zor),e(zF,mU),e(mU,Qor),e(zF,Wor),e(q,Uor),e(q,QF),e(QF,Yve),e(Yve,Hor),e(QF,Jor),e(QF,fU),e(fU,Yor),e(QF,Kor),e(q,Zor),e(q,WF),e(WF,Kve),e(Kve,err),e(WF,orr),e(WF,gU),e(gU,rrr),e(WF,trr),e(q,arr),e(q,UF),e(UF,Zve),e(Zve,nrr),e(UF,srr),e(UF,hU),e(hU,lrr),e(UF,irr),e(q,drr),e(q,HF),e(HF,eFe),e(eFe,crr),e(HF,mrr),e(HF,uU),e(uU,frr),e(HF,grr),e(q,hrr),e(q,JF),e(JF,oFe),e(oFe,urr),e(JF,prr),e(JF,pU),e(pU,_rr),e(JF,brr),e(q,vrr),e(q,YF),e(YF,rFe),e(rFe,Frr),e(YF,Trr),e(YF,_U),e(_U,Mrr),e(YF,Err),e(q,Crr),e(q,KF),e(KF,tFe),e(tFe,wrr),e(KF,Arr),e(KF,bU),e(bU,Lrr),e(KF,yrr),e(q,xrr),e(q,ZF),e(ZF,aFe),e(aFe,$rr),e(ZF,krr),e(ZF,vU),e(vU,Srr),e(ZF,Rrr),e(q,Prr),e(q,eT),e(eT,nFe),e(nFe,Brr),e(eT,Irr),e(eT,FU),e(FU,Nrr),e(eT,qrr),e(q,jrr),e(q,oT),e(oT,sFe),e(sFe,Drr),e(oT,Grr),e(oT,TU),e(TU,Orr),e(oT,Vrr),e(q,Xrr),e(q,rT),e(rT,lFe),e(lFe,zrr),e(rT,Qrr),e(rT,MU),e(MU,Wrr),e(rT,Urr),e(q,Hrr),e(q,tT),e(tT,iFe),e(iFe,Jrr),e(tT,Yrr),e(tT,EU),e(EU,Krr),e(tT,Zrr),e(q,etr),e(q,aT),e(aT,dFe),e(dFe,otr),e(aT,rtr),e(aT,CU),e(CU,ttr),e(aT,atr),e(q,ntr),e(q,nT),e(nT,cFe),e(cFe,str),e(nT,ltr),e(nT,wU),e(wU,itr),e(nT,dtr),e(q,ctr),e(q,sT),e(sT,mFe),e(mFe,mtr),e(sT,ftr),e(sT,AU),e(AU,gtr),e(sT,htr),e(q,utr),e(q,lT),e(lT,fFe),e(fFe,ptr),e(lT,_tr),e(lT,LU),e(LU,btr),e(lT,vtr),e(q,Ftr),e(q,iT),e(iT,gFe),e(gFe,Ttr),e(iT,Mtr),e(iT,yU),e(yU,Etr),e(iT,Ctr),e(q,wtr),e(q,dT),e(dT,hFe),e(hFe,Atr),e(dT,Ltr),e(dT,xU),e(xU,ytr),e(dT,xtr),e(q,$tr),e(q,cT),e(cT,uFe),e(uFe,ktr),e(cT,Str),e(cT,$U),e($U,Rtr),e(cT,Ptr),e(q,Btr),e(q,mT),e(mT,pFe),e(pFe,Itr),e(mT,Ntr),e(mT,kU),e(kU,qtr),e(mT,jtr),e(q,Dtr),e(q,fT),e(fT,_Fe),e(_Fe,Gtr),e(fT,Otr),e(fT,SU),e(SU,Vtr),e(fT,Xtr),e(q,ztr),e(q,gT),e(gT,bFe),e(bFe,Qtr),e(gT,Wtr),e(gT,RU),e(RU,Utr),e(gT,Htr),e(q,Jtr),e(q,hT),e(hT,vFe),e(vFe,Ytr),e(hT,Ktr),e(hT,PU),e(PU,Ztr),e(hT,ear),e(ao,oar),e(ao,uT),e(uT,rar),e(uT,FFe),e(FFe,tar),e(uT,aar),e(uT,TFe),e(TFe,nar),e(ao,sar),M(pT,ao,null),b(m,BKe,_),b(m,Pd,_),e(Pd,_T),e(_T,MFe),M(Px,MFe,null),e(Pd,lar),e(Pd,EFe),e(EFe,iar),b(m,IKe,_),b(m,Do,_),M(Bx,Do,null),e(Do,dar),e(Do,Bd),e(Bd,car),e(Bd,BU),e(BU,mar),e(Bd,far),e(Bd,IU),e(IU,gar),e(Bd,har),e(Do,uar),e(Do,Ix),e(Ix,par),e(Ix,CFe),e(CFe,_ar),e(Ix,bar),e(Do,Far),e(Do,Et),M(Nx,Et,null),e(Et,Tar),e(Et,wFe),e(wFe,Mar),e(Et,Ear),e(Et,Id),e(Id,Car),e(Id,AFe),e(AFe,war),e(Id,Aar),e(Id,NU),e(NU,Lar),e(Id,yar),e(Et,xar),M(bT,Et,null),e(Do,$ar),e(Do,no),M(qx,no,null),e(no,kar),e(no,LFe),e(LFe,Sar),e(no,Rar),e(no,rn),e(rn,Par),e(rn,yFe),e(yFe,Bar),e(rn,Iar),e(rn,xFe),e(xFe,Nar),e(rn,qar),e(rn,$Fe),e($Fe,jar),e(rn,Dar),e(no,Gar),e(no,Z),e(Z,vT),e(vT,kFe),e(kFe,Oar),e(vT,Var),e(vT,qU),e(qU,Xar),e(vT,zar),e(Z,Qar),e(Z,FT),e(FT,SFe),e(SFe,War),e(FT,Uar),e(FT,jU),e(jU,Har),e(FT,Jar),e(Z,Yar),e(Z,TT),e(TT,RFe),e(RFe,Kar),e(TT,Zar),e(TT,DU),e(DU,enr),e(TT,onr),e(Z,rnr),e(Z,MT),e(MT,PFe),e(PFe,tnr),e(MT,anr),e(MT,GU),e(GU,nnr),e(MT,snr),e(Z,lnr),e(Z,ET),e(ET,BFe),e(BFe,inr),e(ET,dnr),e(ET,OU),e(OU,cnr),e(ET,mnr),e(Z,fnr),e(Z,CT),e(CT,IFe),e(IFe,gnr),e(CT,hnr),e(CT,VU),e(VU,unr),e(CT,pnr),e(Z,_nr),e(Z,wT),e(wT,NFe),e(NFe,bnr),e(wT,vnr),e(wT,XU),e(XU,Fnr),e(wT,Tnr),e(Z,Mnr),e(Z,AT),e(AT,qFe),e(qFe,Enr),e(AT,Cnr),e(AT,zU),e(zU,wnr),e(AT,Anr),e(Z,Lnr),e(Z,LT),e(LT,jFe),e(jFe,ynr),e(LT,xnr),e(LT,QU),e(QU,$nr),e(LT,knr),e(Z,Snr),e(Z,yT),e(yT,DFe),e(DFe,Rnr),e(yT,Pnr),e(yT,WU),e(WU,Bnr),e(yT,Inr),e(Z,Nnr),e(Z,xT),e(xT,GFe),e(GFe,qnr),e(xT,jnr),e(xT,UU),e(UU,Dnr),e(xT,Gnr),e(Z,Onr),e(Z,$T),e($T,OFe),e(OFe,Vnr),e($T,Xnr),e($T,HU),e(HU,znr),e($T,Qnr),e(Z,Wnr),e(Z,kT),e(kT,VFe),e(VFe,Unr),e(kT,Hnr),e(kT,JU),e(JU,Jnr),e(kT,Ynr),e(Z,Knr),e(Z,ST),e(ST,XFe),e(XFe,Znr),e(ST,esr),e(ST,YU),e(YU,osr),e(ST,rsr),e(Z,tsr),e(Z,RT),e(RT,zFe),e(zFe,asr),e(RT,nsr),e(RT,KU),e(KU,ssr),e(RT,lsr),e(Z,isr),e(Z,PT),e(PT,QFe),e(QFe,dsr),e(PT,csr),e(PT,ZU),e(ZU,msr),e(PT,fsr),e(Z,gsr),e(Z,BT),e(BT,WFe),e(WFe,hsr),e(BT,usr),e(BT,eH),e(eH,psr),e(BT,_sr),e(Z,bsr),e(Z,IT),e(IT,UFe),e(UFe,vsr),e(IT,Fsr),e(IT,oH),e(oH,Tsr),e(IT,Msr),e(Z,Esr),e(Z,NT),e(NT,HFe),e(HFe,Csr),e(NT,wsr),e(NT,rH),e(rH,Asr),e(NT,Lsr),e(Z,ysr),e(Z,qT),e(qT,JFe),e(JFe,xsr),e(qT,$sr),e(qT,tH),e(tH,ksr),e(qT,Ssr),e(Z,Rsr),e(Z,jT),e(jT,YFe),e(YFe,Psr),e(jT,Bsr),e(jT,aH),e(aH,Isr),e(jT,Nsr),e(Z,qsr),e(Z,DT),e(DT,KFe),e(KFe,jsr),e(DT,Dsr),e(DT,nH),e(nH,Gsr),e(DT,Osr),e(Z,Vsr),e(Z,GT),e(GT,ZFe),e(ZFe,Xsr),e(GT,zsr),e(GT,sH),e(sH,Qsr),e(GT,Wsr),e(Z,Usr),e(Z,OT),e(OT,eTe),e(eTe,Hsr),e(OT,Jsr),e(OT,lH),e(lH,Ysr),e(OT,Ksr),e(Z,Zsr),e(Z,VT),e(VT,oTe),e(oTe,elr),e(VT,olr),e(VT,iH),e(iH,rlr),e(VT,tlr),e(Z,alr),e(Z,XT),e(XT,rTe),e(rTe,nlr),e(XT,slr),e(XT,dH),e(dH,llr),e(XT,ilr),e(Z,dlr),e(Z,zT),e(zT,tTe),e(tTe,clr),e(zT,mlr),e(zT,cH),e(cH,flr),e(zT,glr),e(Z,hlr),e(Z,QT),e(QT,aTe),e(aTe,ulr),e(QT,plr),e(QT,mH),e(mH,_lr),e(QT,blr),e(Z,vlr),e(Z,WT),e(WT,nTe),e(nTe,Flr),e(WT,Tlr),e(WT,fH),e(fH,Mlr),e(WT,Elr),e(Z,Clr),e(Z,UT),e(UT,sTe),e(sTe,wlr),e(UT,Alr),e(UT,gH),e(gH,Llr),e(UT,ylr),e(Z,xlr),e(Z,HT),e(HT,lTe),e(lTe,$lr),e(HT,klr),e(HT,hH),e(hH,Slr),e(HT,Rlr),e(Z,Plr),e(Z,JT),e(JT,iTe),e(iTe,Blr),e(JT,Ilr),e(JT,uH),e(uH,Nlr),e(JT,qlr),e(no,jlr),e(no,YT),e(YT,Dlr),e(YT,dTe),e(dTe,Glr),e(YT,Olr),e(YT,cTe),e(cTe,Vlr),e(no,Xlr),M(KT,no,null),b(m,NKe,_),b(m,Nd,_),e(Nd,ZT),e(ZT,mTe),M(jx,mTe,null),e(Nd,zlr),e(Nd,fTe),e(fTe,Qlr),b(m,qKe,_),b(m,Go,_),M(Dx,Go,null),e(Go,Wlr),e(Go,qd),e(qd,Ulr),e(qd,pH),e(pH,Hlr),e(qd,Jlr),e(qd,_H),e(_H,Ylr),e(qd,Klr),e(Go,Zlr),e(Go,Gx),e(Gx,eir),e(Gx,gTe),e(gTe,oir),e(Gx,rir),e(Go,tir),e(Go,Ct),M(Ox,Ct,null),e(Ct,air),e(Ct,hTe),e(hTe,nir),e(Ct,sir),e(Ct,jd),e(jd,lir),e(jd,uTe),e(uTe,iir),e(jd,dir),e(jd,bH),e(bH,cir),e(jd,mir),e(Ct,fir),M(eM,Ct,null),e(Go,gir),e(Go,so),M(Vx,so,null),e(so,hir),e(so,pTe),e(pTe,uir),e(so,pir),e(so,tn),e(tn,_ir),e(tn,_Te),e(_Te,bir),e(tn,vir),e(tn,bTe),e(bTe,Fir),e(tn,Tir),e(tn,vTe),e(vTe,Mir),e(tn,Eir),e(so,Cir),e(so,Ue),e(Ue,oM),e(oM,FTe),e(FTe,wir),e(oM,Air),e(oM,vH),e(vH,Lir),e(oM,yir),e(Ue,xir),e(Ue,rM),e(rM,TTe),e(TTe,$ir),e(rM,kir),e(rM,FH),e(FH,Sir),e(rM,Rir),e(Ue,Pir),e(Ue,tM),e(tM,MTe),e(MTe,Bir),e(tM,Iir),e(tM,TH),e(TH,Nir),e(tM,qir),e(Ue,jir),e(Ue,aM),e(aM,ETe),e(ETe,Dir),e(aM,Gir),e(aM,MH),e(MH,Oir),e(aM,Vir),e(Ue,Xir),e(Ue,nM),e(nM,CTe),e(CTe,zir),e(nM,Qir),e(nM,EH),e(EH,Wir),e(nM,Uir),e(Ue,Hir),e(Ue,sM),e(sM,wTe),e(wTe,Jir),e(sM,Yir),e(sM,CH),e(CH,Kir),e(sM,Zir),e(Ue,edr),e(Ue,lM),e(lM,ATe),e(ATe,odr),e(lM,rdr),e(lM,wH),e(wH,tdr),e(lM,adr),e(so,ndr),e(so,iM),e(iM,sdr),e(iM,LTe),e(LTe,ldr),e(iM,idr),e(iM,yTe),e(yTe,ddr),e(so,cdr),M(dM,so,null),b(m,jKe,_),b(m,Dd,_),e(Dd,cM),e(cM,xTe),M(Xx,xTe,null),e(Dd,mdr),e(Dd,$Te),e($Te,fdr),b(m,DKe,_),b(m,Oo,_),M(zx,Oo,null),e(Oo,gdr),e(Oo,Gd),e(Gd,hdr),e(Gd,AH),e(AH,udr),e(Gd,pdr),e(Gd,LH),e(LH,_dr),e(Gd,bdr),e(Oo,vdr),e(Oo,Qx),e(Qx,Fdr),e(Qx,kTe),e(kTe,Tdr),e(Qx,Mdr),e(Oo,Edr),e(Oo,wt),M(Wx,wt,null),e(wt,Cdr),e(wt,STe),e(STe,wdr),e(wt,Adr),e(wt,Od),e(Od,Ldr),e(Od,RTe),e(RTe,ydr),e(Od,xdr),e(Od,yH),e(yH,$dr),e(Od,kdr),e(wt,Sdr),M(mM,wt,null),e(Oo,Rdr),e(Oo,lo),M(Ux,lo,null),e(lo,Pdr),e(lo,PTe),e(PTe,Bdr),e(lo,Idr),e(lo,an),e(an,Ndr),e(an,BTe),e(BTe,qdr),e(an,jdr),e(an,ITe),e(ITe,Ddr),e(an,Gdr),e(an,NTe),e(NTe,Odr),e(an,Vdr),e(lo,Xdr),e(lo,J),e(J,fM),e(fM,qTe),e(qTe,zdr),e(fM,Qdr),e(fM,xH),e(xH,Wdr),e(fM,Udr),e(J,Hdr),e(J,gM),e(gM,jTe),e(jTe,Jdr),e(gM,Ydr),e(gM,$H),e($H,Kdr),e(gM,Zdr),e(J,ecr),e(J,hM),e(hM,DTe),e(DTe,ocr),e(hM,rcr),e(hM,kH),e(kH,tcr),e(hM,acr),e(J,ncr),e(J,uM),e(uM,GTe),e(GTe,scr),e(uM,lcr),e(uM,SH),e(SH,icr),e(uM,dcr),e(J,ccr),e(J,pM),e(pM,OTe),e(OTe,mcr),e(pM,fcr),e(pM,RH),e(RH,gcr),e(pM,hcr),e(J,ucr),e(J,_M),e(_M,VTe),e(VTe,pcr),e(_M,_cr),e(_M,PH),e(PH,bcr),e(_M,vcr),e(J,Fcr),e(J,bM),e(bM,XTe),e(XTe,Tcr),e(bM,Mcr),e(bM,BH),e(BH,Ecr),e(bM,Ccr),e(J,wcr),e(J,vM),e(vM,zTe),e(zTe,Acr),e(vM,Lcr),e(vM,IH),e(IH,ycr),e(vM,xcr),e(J,$cr),e(J,FM),e(FM,QTe),e(QTe,kcr),e(FM,Scr),e(FM,NH),e(NH,Rcr),e(FM,Pcr),e(J,Bcr),e(J,TM),e(TM,WTe),e(WTe,Icr),e(TM,Ncr),e(TM,qH),e(qH,qcr),e(TM,jcr),e(J,Dcr),e(J,MM),e(MM,UTe),e(UTe,Gcr),e(MM,Ocr),e(MM,jH),e(jH,Vcr),e(MM,Xcr),e(J,zcr),e(J,EM),e(EM,HTe),e(HTe,Qcr),e(EM,Wcr),e(EM,DH),e(DH,Ucr),e(EM,Hcr),e(J,Jcr),e(J,CM),e(CM,JTe),e(JTe,Ycr),e(CM,Kcr),e(CM,GH),e(GH,Zcr),e(CM,emr),e(J,omr),e(J,wM),e(wM,YTe),e(YTe,rmr),e(wM,tmr),e(wM,OH),e(OH,amr),e(wM,nmr),e(J,smr),e(J,AM),e(AM,KTe),e(KTe,lmr),e(AM,imr),e(AM,VH),e(VH,dmr),e(AM,cmr),e(J,mmr),e(J,LM),e(LM,ZTe),e(ZTe,fmr),e(LM,gmr),e(LM,XH),e(XH,hmr),e(LM,umr),e(J,pmr),e(J,yM),e(yM,eMe),e(eMe,_mr),e(yM,bmr),e(yM,zH),e(zH,vmr),e(yM,Fmr),e(J,Tmr),e(J,xM),e(xM,oMe),e(oMe,Mmr),e(xM,Emr),e(xM,QH),e(QH,Cmr),e(xM,wmr),e(J,Amr),e(J,$M),e($M,rMe),e(rMe,Lmr),e($M,ymr),e($M,WH),e(WH,xmr),e($M,$mr),e(J,kmr),e(J,kM),e(kM,tMe),e(tMe,Smr),e(kM,Rmr),e(kM,UH),e(UH,Pmr),e(kM,Bmr),e(J,Imr),e(J,SM),e(SM,aMe),e(aMe,Nmr),e(SM,qmr),e(SM,HH),e(HH,jmr),e(SM,Dmr),e(J,Gmr),e(J,RM),e(RM,nMe),e(nMe,Omr),e(RM,Vmr),e(RM,JH),e(JH,Xmr),e(RM,zmr),e(J,Qmr),e(J,PM),e(PM,sMe),e(sMe,Wmr),e(PM,Umr),e(PM,YH),e(YH,Hmr),e(PM,Jmr),e(J,Ymr),e(J,BM),e(BM,lMe),e(lMe,Kmr),e(BM,Zmr),e(BM,KH),e(KH,efr),e(BM,ofr),e(J,rfr),e(J,IM),e(IM,iMe),e(iMe,tfr),e(IM,afr),e(IM,ZH),e(ZH,nfr),e(IM,sfr),e(J,lfr),e(J,NM),e(NM,dMe),e(dMe,ifr),e(NM,dfr),e(NM,eJ),e(eJ,cfr),e(NM,mfr),e(J,ffr),e(J,qM),e(qM,cMe),e(cMe,gfr),e(qM,hfr),e(qM,oJ),e(oJ,ufr),e(qM,pfr),e(J,_fr),e(J,jM),e(jM,mMe),e(mMe,bfr),e(jM,vfr),e(jM,rJ),e(rJ,Ffr),e(jM,Tfr),e(J,Mfr),e(J,DM),e(DM,fMe),e(fMe,Efr),e(DM,Cfr),e(DM,tJ),e(tJ,wfr),e(DM,Afr),e(J,Lfr),e(J,GM),e(GM,gMe),e(gMe,yfr),e(GM,xfr),e(GM,aJ),e(aJ,$fr),e(GM,kfr),e(J,Sfr),e(J,OM),e(OM,hMe),e(hMe,Rfr),e(OM,Pfr),e(OM,nJ),e(nJ,Bfr),e(OM,Ifr),e(J,Nfr),e(J,VM),e(VM,uMe),e(uMe,qfr),e(VM,jfr),e(VM,sJ),e(sJ,Dfr),e(VM,Gfr),e(J,Ofr),e(J,XM),e(XM,pMe),e(pMe,Vfr),e(XM,Xfr),e(XM,lJ),e(lJ,zfr),e(XM,Qfr),e(J,Wfr),e(J,zM),e(zM,_Me),e(_Me,Ufr),e(zM,Hfr),e(zM,iJ),e(iJ,Jfr),e(zM,Yfr),e(J,Kfr),e(J,QM),e(QM,bMe),e(bMe,Zfr),e(QM,egr),e(QM,dJ),e(dJ,ogr),e(QM,rgr),e(J,tgr),e(J,WM),e(WM,vMe),e(vMe,agr),e(WM,ngr),e(WM,cJ),e(cJ,sgr),e(WM,lgr),e(J,igr),e(J,UM),e(UM,FMe),e(FMe,dgr),e(UM,cgr),e(UM,mJ),e(mJ,mgr),e(UM,fgr),e(J,ggr),e(J,HM),e(HM,TMe),e(TMe,hgr),e(HM,ugr),e(HM,fJ),e(fJ,pgr),e(HM,_gr),e(lo,bgr),e(lo,JM),e(JM,vgr),e(JM,MMe),e(MMe,Fgr),e(JM,Tgr),e(JM,EMe),e(EMe,Mgr),e(lo,Egr),M(YM,lo,null),b(m,GKe,_),b(m,Vd,_),e(Vd,KM),e(KM,CMe),M(Hx,CMe,null),e(Vd,Cgr),e(Vd,wMe),e(wMe,wgr),b(m,OKe,_),b(m,Vo,_),M(Jx,Vo,null),e(Vo,Agr),e(Vo,Xd),e(Xd,Lgr),e(Xd,gJ),e(gJ,ygr),e(Xd,xgr),e(Xd,hJ),e(hJ,$gr),e(Xd,kgr),e(Vo,Sgr),e(Vo,Yx),e(Yx,Rgr),e(Yx,AMe),e(AMe,Pgr),e(Yx,Bgr),e(Vo,Igr),e(Vo,At),M(Kx,At,null),e(At,Ngr),e(At,LMe),e(LMe,qgr),e(At,jgr),e(At,zd),e(zd,Dgr),e(zd,yMe),e(yMe,Ggr),e(zd,Ogr),e(zd,uJ),e(uJ,Vgr),e(zd,Xgr),e(At,zgr),M(ZM,At,null),e(Vo,Qgr),e(Vo,io),M(Zx,io,null),e(io,Wgr),e(io,xMe),e(xMe,Ugr),e(io,Hgr),e(io,nn),e(nn,Jgr),e(nn,$Me),e($Me,Ygr),e(nn,Kgr),e(nn,kMe),e(kMe,Zgr),e(nn,ehr),e(nn,SMe),e(SMe,ohr),e(nn,rhr),e(io,thr),e(io,V),e(V,eE),e(eE,RMe),e(RMe,ahr),e(eE,nhr),e(eE,pJ),e(pJ,shr),e(eE,lhr),e(V,ihr),e(V,oE),e(oE,PMe),e(PMe,dhr),e(oE,chr),e(oE,_J),e(_J,mhr),e(oE,fhr),e(V,ghr),e(V,rE),e(rE,BMe),e(BMe,hhr),e(rE,uhr),e(rE,bJ),e(bJ,phr),e(rE,_hr),e(V,bhr),e(V,tE),e(tE,IMe),e(IMe,vhr),e(tE,Fhr),e(tE,vJ),e(vJ,Thr),e(tE,Mhr),e(V,Ehr),e(V,aE),e(aE,NMe),e(NMe,Chr),e(aE,whr),e(aE,FJ),e(FJ,Ahr),e(aE,Lhr),e(V,yhr),e(V,nE),e(nE,qMe),e(qMe,xhr),e(nE,$hr),e(nE,TJ),e(TJ,khr),e(nE,Shr),e(V,Rhr),e(V,sE),e(sE,jMe),e(jMe,Phr),e(sE,Bhr),e(sE,MJ),e(MJ,Ihr),e(sE,Nhr),e(V,qhr),e(V,lE),e(lE,DMe),e(DMe,jhr),e(lE,Dhr),e(lE,EJ),e(EJ,Ghr),e(lE,Ohr),e(V,Vhr),e(V,iE),e(iE,GMe),e(GMe,Xhr),e(iE,zhr),e(iE,CJ),e(CJ,Qhr),e(iE,Whr),e(V,Uhr),e(V,dE),e(dE,OMe),e(OMe,Hhr),e(dE,Jhr),e(dE,wJ),e(wJ,Yhr),e(dE,Khr),e(V,Zhr),e(V,cE),e(cE,VMe),e(VMe,eur),e(cE,our),e(cE,AJ),e(AJ,rur),e(cE,tur),e(V,aur),e(V,mE),e(mE,XMe),e(XMe,nur),e(mE,sur),e(mE,LJ),e(LJ,lur),e(mE,iur),e(V,dur),e(V,fE),e(fE,zMe),e(zMe,cur),e(fE,mur),e(fE,yJ),e(yJ,fur),e(fE,gur),e(V,hur),e(V,gE),e(gE,QMe),e(QMe,uur),e(gE,pur),e(gE,xJ),e(xJ,_ur),e(gE,bur),e(V,vur),e(V,hE),e(hE,WMe),e(WMe,Fur),e(hE,Tur),e(hE,$J),e($J,Mur),e(hE,Eur),e(V,Cur),e(V,uE),e(uE,UMe),e(UMe,wur),e(uE,Aur),e(uE,kJ),e(kJ,Lur),e(uE,yur),e(V,xur),e(V,pE),e(pE,HMe),e(HMe,$ur),e(pE,kur),e(pE,SJ),e(SJ,Sur),e(pE,Rur),e(V,Pur),e(V,_E),e(_E,JMe),e(JMe,Bur),e(_E,Iur),e(_E,RJ),e(RJ,Nur),e(_E,qur),e(V,jur),e(V,bE),e(bE,YMe),e(YMe,Dur),e(bE,Gur),e(bE,PJ),e(PJ,Our),e(bE,Vur),e(V,Xur),e(V,vE),e(vE,KMe),e(KMe,zur),e(vE,Qur),e(vE,BJ),e(BJ,Wur),e(vE,Uur),e(V,Hur),e(V,FE),e(FE,ZMe),e(ZMe,Jur),e(FE,Yur),e(FE,IJ),e(IJ,Kur),e(FE,Zur),e(V,epr),e(V,TE),e(TE,eEe),e(eEe,opr),e(TE,rpr),e(TE,NJ),e(NJ,tpr),e(TE,apr),e(V,npr),e(V,ME),e(ME,oEe),e(oEe,spr),e(ME,lpr),e(ME,qJ),e(qJ,ipr),e(ME,dpr),e(V,cpr),e(V,EE),e(EE,rEe),e(rEe,mpr),e(EE,fpr),e(EE,jJ),e(jJ,gpr),e(EE,hpr),e(V,upr),e(V,CE),e(CE,tEe),e(tEe,ppr),e(CE,_pr),e(CE,DJ),e(DJ,bpr),e(CE,vpr),e(V,Fpr),e(V,wE),e(wE,aEe),e(aEe,Tpr),e(wE,Mpr),e(wE,GJ),e(GJ,Epr),e(wE,Cpr),e(V,wpr),e(V,AE),e(AE,nEe),e(nEe,Apr),e(AE,Lpr),e(AE,OJ),e(OJ,ypr),e(AE,xpr),e(V,$pr),e(V,LE),e(LE,sEe),e(sEe,kpr),e(LE,Spr),e(LE,VJ),e(VJ,Rpr),e(LE,Ppr),e(V,Bpr),e(V,yE),e(yE,lEe),e(lEe,Ipr),e(yE,Npr),e(yE,XJ),e(XJ,qpr),e(yE,jpr),e(V,Dpr),e(V,xE),e(xE,iEe),e(iEe,Gpr),e(xE,Opr),e(xE,zJ),e(zJ,Vpr),e(xE,Xpr),e(V,zpr),e(V,$E),e($E,dEe),e(dEe,Qpr),e($E,Wpr),e($E,QJ),e(QJ,Upr),e($E,Hpr),e(V,Jpr),e(V,kE),e(kE,cEe),e(cEe,Ypr),e(kE,Kpr),e(kE,WJ),e(WJ,Zpr),e(kE,e_r),e(V,o_r),e(V,SE),e(SE,mEe),e(mEe,r_r),e(SE,t_r),e(SE,UJ),e(UJ,a_r),e(SE,n_r),e(V,s_r),e(V,RE),e(RE,fEe),e(fEe,l_r),e(RE,i_r),e(RE,HJ),e(HJ,d_r),e(RE,c_r),e(V,m_r),e(V,PE),e(PE,gEe),e(gEe,f_r),e(PE,g_r),e(PE,JJ),e(JJ,h_r),e(PE,u_r),e(V,p_r),e(V,BE),e(BE,hEe),e(hEe,__r),e(BE,b_r),e(BE,YJ),e(YJ,v_r),e(BE,F_r),e(V,T_r),e(V,IE),e(IE,uEe),e(uEe,M_r),e(IE,E_r),e(IE,KJ),e(KJ,C_r),e(IE,w_r),e(V,A_r),e(V,NE),e(NE,pEe),e(pEe,L_r),e(NE,y_r),e(NE,ZJ),e(ZJ,x_r),e(NE,$_r),e(V,k_r),e(V,qE),e(qE,_Ee),e(_Ee,S_r),e(qE,R_r),e(qE,eY),e(eY,P_r),e(qE,B_r),e(V,I_r),e(V,jE),e(jE,bEe),e(bEe,N_r),e(jE,q_r),e(jE,oY),e(oY,j_r),e(jE,D_r),e(V,G_r),e(V,DE),e(DE,vEe),e(vEe,O_r),e(DE,V_r),e(DE,rY),e(rY,X_r),e(DE,z_r),e(V,Q_r),e(V,GE),e(GE,FEe),e(FEe,W_r),e(GE,U_r),e(GE,tY),e(tY,H_r),e(GE,J_r),e(V,Y_r),e(V,OE),e(OE,TEe),e(TEe,K_r),e(OE,Z_r),e(OE,aY),e(aY,ebr),e(OE,obr),e(V,rbr),e(V,VE),e(VE,MEe),e(MEe,tbr),e(VE,abr),e(VE,nY),e(nY,nbr),e(VE,sbr),e(io,lbr),e(io,XE),e(XE,ibr),e(XE,EEe),e(EEe,dbr),e(XE,cbr),e(XE,CEe),e(CEe,mbr),e(io,fbr),M(zE,io,null),b(m,VKe,_),b(m,Qd,_),e(Qd,QE),e(QE,wEe),M(e$,wEe,null),e(Qd,gbr),e(Qd,AEe),e(AEe,hbr),b(m,XKe,_),b(m,Xo,_),M(o$,Xo,null),e(Xo,ubr),e(Xo,Wd),e(Wd,pbr),e(Wd,sY),e(sY,_br),e(Wd,bbr),e(Wd,lY),e(lY,vbr),e(Wd,Fbr),e(Xo,Tbr),e(Xo,r$),e(r$,Mbr),e(r$,LEe),e(LEe,Ebr),e(r$,Cbr),e(Xo,wbr),e(Xo,Lt),M(t$,Lt,null),e(Lt,Abr),e(Lt,yEe),e(yEe,Lbr),e(Lt,ybr),e(Lt,Ud),e(Ud,xbr),e(Ud,xEe),e(xEe,$br),e(Ud,kbr),e(Ud,iY),e(iY,Sbr),e(Ud,Rbr),e(Lt,Pbr),M(WE,Lt,null),e(Xo,Bbr),e(Xo,co),M(a$,co,null),e(co,Ibr),e(co,$Ee),e($Ee,Nbr),e(co,qbr),e(co,sn),e(sn,jbr),e(sn,kEe),e(kEe,Dbr),e(sn,Gbr),e(sn,SEe),e(SEe,Obr),e(sn,Vbr),e(sn,REe),e(REe,Xbr),e(sn,zbr),e(co,Qbr),e(co,PEe),e(PEe,UE),e(UE,BEe),e(BEe,Wbr),e(UE,Ubr),e(UE,dY),e(dY,Hbr),e(UE,Jbr),e(co,Ybr),e(co,HE),e(HE,Kbr),e(HE,IEe),e(IEe,Zbr),e(HE,e2r),e(HE,NEe),e(NEe,o2r),e(co,r2r),M(JE,co,null),b(m,zKe,_),b(m,Hd,_),e(Hd,YE),e(YE,qEe),M(n$,qEe,null),e(Hd,t2r),e(Hd,jEe),e(jEe,a2r),b(m,QKe,_),b(m,zo,_),M(s$,zo,null),e(zo,n2r),e(zo,Jd),e(Jd,s2r),e(Jd,cY),e(cY,l2r),e(Jd,i2r),e(Jd,mY),e(mY,d2r),e(Jd,c2r),e(zo,m2r),e(zo,l$),e(l$,f2r),e(l$,DEe),e(DEe,g2r),e(l$,h2r),e(zo,u2r),e(zo,yt),M(i$,yt,null),e(yt,p2r),e(yt,GEe),e(GEe,_2r),e(yt,b2r),e(yt,Yd),e(Yd,v2r),e(Yd,OEe),e(OEe,F2r),e(Yd,T2r),e(Yd,fY),e(fY,M2r),e(Yd,E2r),e(yt,C2r),M(KE,yt,null),e(zo,w2r),e(zo,mo),M(d$,mo,null),e(mo,A2r),e(mo,VEe),e(VEe,L2r),e(mo,y2r),e(mo,ln),e(ln,x2r),e(ln,XEe),e(XEe,$2r),e(ln,k2r),e(ln,zEe),e(zEe,S2r),e(ln,R2r),e(ln,QEe),e(QEe,P2r),e(ln,B2r),e(mo,I2r),e(mo,Kd),e(Kd,ZE),e(ZE,WEe),e(WEe,N2r),e(ZE,q2r),e(ZE,gY),e(gY,j2r),e(ZE,D2r),e(Kd,G2r),e(Kd,e4),e(e4,UEe),e(UEe,O2r),e(e4,V2r),e(e4,hY),e(hY,X2r),e(e4,z2r),e(Kd,Q2r),e(Kd,o4),e(o4,HEe),e(HEe,W2r),e(o4,U2r),e(o4,uY),e(uY,H2r),e(o4,J2r),e(mo,Y2r),e(mo,r4),e(r4,K2r),e(r4,JEe),e(JEe,Z2r),e(r4,e1r),e(r4,YEe),e(YEe,o1r),e(mo,r1r),M(t4,mo,null),b(m,WKe,_),b(m,Zd,_),e(Zd,a4),e(a4,KEe),M(c$,KEe,null),e(Zd,t1r),e(Zd,ZEe),e(ZEe,a1r),b(m,UKe,_),b(m,Qo,_),M(m$,Qo,null),e(Qo,n1r),e(Qo,ec),e(ec,s1r),e(ec,pY),e(pY,l1r),e(ec,i1r),e(ec,_Y),e(_Y,d1r),e(ec,c1r),e(Qo,m1r),e(Qo,f$),e(f$,f1r),e(f$,e4e),e(e4e,g1r),e(f$,h1r),e(Qo,u1r),e(Qo,xt),M(g$,xt,null),e(xt,p1r),e(xt,o4e),e(o4e,_1r),e(xt,b1r),e(xt,oc),e(oc,v1r),e(oc,r4e),e(r4e,F1r),e(oc,T1r),e(oc,bY),e(bY,M1r),e(oc,E1r),e(xt,C1r),M(n4,xt,null),e(Qo,w1r),e(Qo,fo),M(h$,fo,null),e(fo,A1r),e(fo,t4e),e(t4e,L1r),e(fo,y1r),e(fo,dn),e(dn,x1r),e(dn,a4e),e(a4e,$1r),e(dn,k1r),e(dn,n4e),e(n4e,S1r),e(dn,R1r),e(dn,s4e),e(s4e,P1r),e(dn,B1r),e(fo,I1r),e(fo,be),e(be,s4),e(s4,l4e),e(l4e,N1r),e(s4,q1r),e(s4,vY),e(vY,j1r),e(s4,D1r),e(be,G1r),e(be,l4),e(l4,i4e),e(i4e,O1r),e(l4,V1r),e(l4,FY),e(FY,X1r),e(l4,z1r),e(be,Q1r),e(be,i4),e(i4,d4e),e(d4e,W1r),e(i4,U1r),e(i4,TY),e(TY,H1r),e(i4,J1r),e(be,Y1r),e(be,d4),e(d4,c4e),e(c4e,K1r),e(d4,Z1r),e(d4,MY),e(MY,evr),e(d4,ovr),e(be,rvr),e(be,_l),e(_l,m4e),e(m4e,tvr),e(_l,avr),e(_l,EY),e(EY,nvr),e(_l,svr),e(_l,CY),e(CY,lvr),e(_l,ivr),e(be,dvr),e(be,c4),e(c4,f4e),e(f4e,cvr),e(c4,mvr),e(c4,wY),e(wY,fvr),e(c4,gvr),e(be,hvr),e(be,bl),e(bl,g4e),e(g4e,uvr),e(bl,pvr),e(bl,AY),e(AY,_vr),e(bl,bvr),e(bl,LY),e(LY,vvr),e(bl,Fvr),e(be,Tvr),e(be,m4),e(m4,h4e),e(h4e,Mvr),e(m4,Evr),e(m4,yY),e(yY,Cvr),e(m4,wvr),e(be,Avr),e(be,$t),e($t,u4e),e(u4e,Lvr),e($t,yvr),e($t,xY),e(xY,xvr),e($t,$vr),e($t,$Y),e($Y,kvr),e($t,Svr),e($t,kY),e(kY,Rvr),e($t,Pvr),e(be,Bvr),e(be,f4),e(f4,p4e),e(p4e,Ivr),e(f4,Nvr),e(f4,SY),e(SY,qvr),e(f4,jvr),e(be,Dvr),e(be,g4),e(g4,_4e),e(_4e,Gvr),e(g4,Ovr),e(g4,RY),e(RY,Vvr),e(g4,Xvr),e(be,zvr),e(be,h4),e(h4,b4e),e(b4e,Qvr),e(h4,Wvr),e(h4,PY),e(PY,Uvr),e(h4,Hvr),e(be,Jvr),e(be,u4),e(u4,v4e),e(v4e,Yvr),e(u4,Kvr),e(u4,BY),e(BY,Zvr),e(u4,eFr),e(be,oFr),e(be,p4),e(p4,F4e),e(F4e,rFr),e(p4,tFr),e(p4,IY),e(IY,aFr),e(p4,nFr),e(be,sFr),e(be,_4),e(_4,T4e),e(T4e,lFr),e(_4,iFr),e(_4,NY),e(NY,dFr),e(_4,cFr),e(be,mFr),e(be,b4),e(b4,M4e),e(M4e,fFr),e(b4,gFr),e(b4,qY),e(qY,hFr),e(b4,uFr),e(be,pFr),e(be,v4),e(v4,E4e),e(E4e,_Fr),e(v4,bFr),e(v4,jY),e(jY,vFr),e(v4,FFr),e(fo,TFr),e(fo,F4),e(F4,MFr),e(F4,C4e),e(C4e,EFr),e(F4,CFr),e(F4,w4e),e(w4e,wFr),e(fo,AFr),M(T4,fo,null),b(m,HKe,_),b(m,rc,_),e(rc,M4),e(M4,A4e),M(u$,A4e,null),e(rc,LFr),e(rc,L4e),e(L4e,yFr),b(m,JKe,_),b(m,Wo,_),M(p$,Wo,null),e(Wo,xFr),e(Wo,tc),e(tc,$Fr),e(tc,DY),e(DY,kFr),e(tc,SFr),e(tc,GY),e(GY,RFr),e(tc,PFr),e(Wo,BFr),e(Wo,_$),e(_$,IFr),e(_$,y4e),e(y4e,NFr),e(_$,qFr),e(Wo,jFr),e(Wo,kt),M(b$,kt,null),e(kt,DFr),e(kt,x4e),e(x4e,GFr),e(kt,OFr),e(kt,ac),e(ac,VFr),e(ac,$4e),e($4e,XFr),e(ac,zFr),e(ac,OY),e(OY,QFr),e(ac,WFr),e(kt,UFr),M(E4,kt,null),e(Wo,HFr),e(Wo,go),M(v$,go,null),e(go,JFr),e(go,k4e),e(k4e,YFr),e(go,KFr),e(go,cn),e(cn,ZFr),e(cn,S4e),e(S4e,eTr),e(cn,oTr),e(cn,R4e),e(R4e,rTr),e(cn,tTr),e(cn,P4e),e(P4e,aTr),e(cn,nTr),e(go,sTr),e(go,B4e),e(B4e,C4),e(C4,I4e),e(I4e,lTr),e(C4,iTr),e(C4,VY),e(VY,dTr),e(C4,cTr),e(go,mTr),e(go,w4),e(w4,fTr),e(w4,N4e),e(N4e,gTr),e(w4,hTr),e(w4,q4e),e(q4e,uTr),e(go,pTr),M(A4,go,null),b(m,YKe,_),b(m,nc,_),e(nc,L4),e(L4,j4e),M(F$,j4e,null),e(nc,_Tr),e(nc,D4e),e(D4e,bTr),b(m,KKe,_),b(m,Uo,_),M(T$,Uo,null),e(Uo,vTr),e(Uo,sc),e(sc,FTr),e(sc,XY),e(XY,TTr),e(sc,MTr),e(sc,zY),e(zY,ETr),e(sc,CTr),e(Uo,wTr),e(Uo,M$),e(M$,ATr),e(M$,G4e),e(G4e,LTr),e(M$,yTr),e(Uo,xTr),e(Uo,St),M(E$,St,null),e(St,$Tr),e(St,O4e),e(O4e,kTr),e(St,STr),e(St,lc),e(lc,RTr),e(lc,V4e),e(V4e,PTr),e(lc,BTr),e(lc,QY),e(QY,ITr),e(lc,NTr),e(St,qTr),M(y4,St,null),e(Uo,jTr),e(Uo,ho),M(C$,ho,null),e(ho,DTr),e(ho,X4e),e(X4e,GTr),e(ho,OTr),e(ho,mn),e(mn,VTr),e(mn,z4e),e(z4e,XTr),e(mn,zTr),e(mn,Q4e),e(Q4e,QTr),e(mn,WTr),e(mn,W4e),e(W4e,UTr),e(mn,HTr),e(ho,JTr),e(ho,U4e),e(U4e,x4),e(x4,H4e),e(H4e,YTr),e(x4,KTr),e(x4,WY),e(WY,ZTr),e(x4,eMr),e(ho,oMr),e(ho,$4),e($4,rMr),e($4,J4e),e(J4e,tMr),e($4,aMr),e($4,Y4e),e(Y4e,nMr),e(ho,sMr),M(k4,ho,null),b(m,ZKe,_),b(m,ic,_),e(ic,S4),e(S4,K4e),M(w$,K4e,null),e(ic,lMr),e(ic,Z4e),e(Z4e,iMr),b(m,eZe,_),b(m,Ho,_),M(A$,Ho,null),e(Ho,dMr),e(Ho,dc),e(dc,cMr),e(dc,UY),e(UY,mMr),e(dc,fMr),e(dc,HY),e(HY,gMr),e(dc,hMr),e(Ho,uMr),e(Ho,L$),e(L$,pMr),e(L$,eCe),e(eCe,_Mr),e(L$,bMr),e(Ho,vMr),e(Ho,Rt),M(y$,Rt,null),e(Rt,FMr),e(Rt,oCe),e(oCe,TMr),e(Rt,MMr),e(Rt,cc),e(cc,EMr),e(cc,rCe),e(rCe,CMr),e(cc,wMr),e(cc,JY),e(JY,AMr),e(cc,LMr),e(Rt,yMr),M(R4,Rt,null),e(Ho,xMr),e(Ho,uo),M(x$,uo,null),e(uo,$Mr),e(uo,tCe),e(tCe,kMr),e(uo,SMr),e(uo,fn),e(fn,RMr),e(fn,aCe),e(aCe,PMr),e(fn,BMr),e(fn,nCe),e(nCe,IMr),e(fn,NMr),e(fn,sCe),e(sCe,qMr),e(fn,jMr),e(uo,DMr),e(uo,lCe),e(lCe,P4),e(P4,iCe),e(iCe,GMr),e(P4,OMr),e(P4,YY),e(YY,VMr),e(P4,XMr),e(uo,zMr),e(uo,B4),e(B4,QMr),e(B4,dCe),e(dCe,WMr),e(B4,UMr),e(B4,cCe),e(cCe,HMr),e(uo,JMr),M(I4,uo,null),b(m,oZe,_),b(m,mc,_),e(mc,N4),e(N4,mCe),M($$,mCe,null),e(mc,YMr),e(mc,fCe),e(fCe,KMr),b(m,rZe,_),b(m,Jo,_),M(k$,Jo,null),e(Jo,ZMr),e(Jo,fc),e(fc,eEr),e(fc,KY),e(KY,oEr),e(fc,rEr),e(fc,ZY),e(ZY,tEr),e(fc,aEr),e(Jo,nEr),e(Jo,S$),e(S$,sEr),e(S$,gCe),e(gCe,lEr),e(S$,iEr),e(Jo,dEr),e(Jo,Pt),M(R$,Pt,null),e(Pt,cEr),e(Pt,hCe),e(hCe,mEr),e(Pt,fEr),e(Pt,gc),e(gc,gEr),e(gc,uCe),e(uCe,hEr),e(gc,uEr),e(gc,eK),e(eK,pEr),e(gc,_Er),e(Pt,bEr),M(q4,Pt,null),e(Jo,vEr),e(Jo,po),M(P$,po,null),e(po,FEr),e(po,pCe),e(pCe,TEr),e(po,MEr),e(po,gn),e(gn,EEr),e(gn,_Ce),e(_Ce,CEr),e(gn,wEr),e(gn,bCe),e(bCe,AEr),e(gn,LEr),e(gn,vCe),e(vCe,yEr),e(gn,xEr),e(po,$Er),e(po,Pe),e(Pe,j4),e(j4,FCe),e(FCe,kEr),e(j4,SEr),e(j4,oK),e(oK,REr),e(j4,PEr),e(Pe,BEr),e(Pe,D4),e(D4,TCe),e(TCe,IEr),e(D4,NEr),e(D4,rK),e(rK,qEr),e(D4,jEr),e(Pe,DEr),e(Pe,G4),e(G4,MCe),e(MCe,GEr),e(G4,OEr),e(G4,tK),e(tK,VEr),e(G4,XEr),e(Pe,zEr),e(Pe,O4),e(O4,ECe),e(ECe,QEr),e(O4,WEr),e(O4,aK),e(aK,UEr),e(O4,HEr),e(Pe,JEr),e(Pe,V4),e(V4,CCe),e(CCe,YEr),e(V4,KEr),e(V4,nK),e(nK,ZEr),e(V4,e4r),e(Pe,o4r),e(Pe,X4),e(X4,wCe),e(wCe,r4r),e(X4,t4r),e(X4,sK),e(sK,a4r),e(X4,n4r),e(Pe,s4r),e(Pe,z4),e(z4,ACe),e(ACe,l4r),e(z4,i4r),e(z4,lK),e(lK,d4r),e(z4,c4r),e(Pe,m4r),e(Pe,Q4),e(Q4,LCe),e(LCe,f4r),e(Q4,g4r),e(Q4,iK),e(iK,h4r),e(Q4,u4r),e(Pe,p4r),e(Pe,W4),e(W4,yCe),e(yCe,_4r),e(W4,b4r),e(W4,dK),e(dK,v4r),e(W4,F4r),e(po,T4r),e(po,U4),e(U4,M4r),e(U4,xCe),e(xCe,E4r),e(U4,C4r),e(U4,$Ce),e($Ce,w4r),e(po,A4r),M(H4,po,null),b(m,tZe,_),b(m,hc,_),e(hc,J4),e(J4,kCe),M(B$,kCe,null),e(hc,L4r),e(hc,SCe),e(SCe,y4r),b(m,aZe,_),b(m,Yo,_),M(I$,Yo,null),e(Yo,x4r),e(Yo,uc),e(uc,$4r),e(uc,cK),e(cK,k4r),e(uc,S4r),e(uc,mK),e(mK,R4r),e(uc,P4r),e(Yo,B4r),e(Yo,N$),e(N$,I4r),e(N$,RCe),e(RCe,N4r),e(N$,q4r),e(Yo,j4r),e(Yo,Bt),M(q$,Bt,null),e(Bt,D4r),e(Bt,PCe),e(PCe,G4r),e(Bt,O4r),e(Bt,pc),e(pc,V4r),e(pc,BCe),e(BCe,X4r),e(pc,z4r),e(pc,fK),e(fK,Q4r),e(pc,W4r),e(Bt,U4r),M(Y4,Bt,null),e(Yo,H4r),e(Yo,_o),M(j$,_o,null),e(_o,J4r),e(_o,ICe),e(ICe,Y4r),e(_o,K4r),e(_o,hn),e(hn,Z4r),e(hn,NCe),e(NCe,eCr),e(hn,oCr),e(hn,qCe),e(qCe,rCr),e(hn,tCr),e(hn,jCe),e(jCe,aCr),e(hn,nCr),e(_o,sCr),e(_o,mt),e(mt,K4),e(K4,DCe),e(DCe,lCr),e(K4,iCr),e(K4,gK),e(gK,dCr),e(K4,cCr),e(mt,mCr),e(mt,Z4),e(Z4,GCe),e(GCe,fCr),e(Z4,gCr),e(Z4,hK),e(hK,hCr),e(Z4,uCr),e(mt,pCr),e(mt,eC),e(eC,OCe),e(OCe,_Cr),e(eC,bCr),e(eC,uK),e(uK,vCr),e(eC,FCr),e(mt,TCr),e(mt,oC),e(oC,VCe),e(VCe,MCr),e(oC,ECr),e(oC,pK),e(pK,CCr),e(oC,wCr),e(mt,ACr),e(mt,rC),e(rC,XCe),e(XCe,LCr),e(rC,yCr),e(rC,_K),e(_K,xCr),e(rC,$Cr),e(_o,kCr),e(_o,tC),e(tC,SCr),e(tC,zCe),e(zCe,RCr),e(tC,PCr),e(tC,QCe),e(QCe,BCr),e(_o,ICr),M(aC,_o,null),b(m,nZe,_),b(m,_c,_),e(_c,nC),e(nC,WCe),M(D$,WCe,null),e(_c,NCr),e(_c,UCe),e(UCe,qCr),b(m,sZe,_),b(m,Ko,_),M(G$,Ko,null),e(Ko,jCr),e(Ko,bc),e(bc,DCr),e(bc,bK),e(bK,GCr),e(bc,OCr),e(bc,vK),e(vK,VCr),e(bc,XCr),e(Ko,zCr),e(Ko,O$),e(O$,QCr),e(O$,HCe),e(HCe,WCr),e(O$,UCr),e(Ko,HCr),e(Ko,It),M(V$,It,null),e(It,JCr),e(It,JCe),e(JCe,YCr),e(It,KCr),e(It,vc),e(vc,ZCr),e(vc,YCe),e(YCe,e3r),e(vc,o3r),e(vc,FK),e(FK,r3r),e(vc,t3r),e(It,a3r),M(sC,It,null),e(Ko,n3r),e(Ko,bo),M(X$,bo,null),e(bo,s3r),e(bo,KCe),e(KCe,l3r),e(bo,i3r),e(bo,un),e(un,d3r),e(un,ZCe),e(ZCe,c3r),e(un,m3r),e(un,e3e),e(e3e,f3r),e(un,g3r),e(un,o3e),e(o3e,h3r),e(un,u3r),e(bo,p3r),e(bo,Le),e(Le,lC),e(lC,r3e),e(r3e,_3r),e(lC,b3r),e(lC,TK),e(TK,v3r),e(lC,F3r),e(Le,T3r),e(Le,iC),e(iC,t3e),e(t3e,M3r),e(iC,E3r),e(iC,MK),e(MK,C3r),e(iC,w3r),e(Le,A3r),e(Le,dC),e(dC,a3e),e(a3e,L3r),e(dC,y3r),e(dC,EK),e(EK,x3r),e(dC,$3r),e(Le,k3r),e(Le,cC),e(cC,n3e),e(n3e,S3r),e(cC,R3r),e(cC,CK),e(CK,P3r),e(cC,B3r),e(Le,I3r),e(Le,mC),e(mC,s3e),e(s3e,N3r),e(mC,q3r),e(mC,wK),e(wK,j3r),e(mC,D3r),e(Le,G3r),e(Le,fC),e(fC,l3e),e(l3e,O3r),e(fC,V3r),e(fC,AK),e(AK,X3r),e(fC,z3r),e(Le,Q3r),e(Le,gC),e(gC,i3e),e(i3e,W3r),e(gC,U3r),e(gC,LK),e(LK,H3r),e(gC,J3r),e(Le,Y3r),e(Le,hC),e(hC,d3e),e(d3e,K3r),e(hC,Z3r),e(hC,yK),e(yK,e5r),e(hC,o5r),e(Le,r5r),e(Le,uC),e(uC,c3e),e(c3e,t5r),e(uC,a5r),e(uC,xK),e(xK,n5r),e(uC,s5r),e(Le,l5r),e(Le,pC),e(pC,m3e),e(m3e,i5r),e(pC,d5r),e(pC,$K),e($K,c5r),e(pC,m5r),e(bo,f5r),e(bo,_C),e(_C,g5r),e(_C,f3e),e(f3e,h5r),e(_C,u5r),e(_C,g3e),e(g3e,p5r),e(bo,_5r),M(bC,bo,null),b(m,lZe,_),b(m,Fc,_),e(Fc,vC),e(vC,h3e),M(z$,h3e,null),e(Fc,b5r),e(Fc,u3e),e(u3e,v5r),b(m,iZe,_),b(m,Zo,_),M(Q$,Zo,null),e(Zo,F5r),e(Zo,Tc),e(Tc,T5r),e(Tc,kK),e(kK,M5r),e(Tc,E5r),e(Tc,SK),e(SK,C5r),e(Tc,w5r),e(Zo,A5r),e(Zo,W$),e(W$,L5r),e(W$,p3e),e(p3e,y5r),e(W$,x5r),e(Zo,$5r),e(Zo,Nt),M(U$,Nt,null),e(Nt,k5r),e(Nt,_3e),e(_3e,S5r),e(Nt,R5r),e(Nt,Mc),e(Mc,P5r),e(Mc,b3e),e(b3e,B5r),e(Mc,I5r),e(Mc,RK),e(RK,N5r),e(Mc,q5r),e(Nt,j5r),M(FC,Nt,null),e(Zo,D5r),e(Zo,vo),M(H$,vo,null),e(vo,G5r),e(vo,v3e),e(v3e,O5r),e(vo,V5r),e(vo,pn),e(pn,X5r),e(pn,F3e),e(F3e,z5r),e(pn,Q5r),e(pn,T3e),e(T3e,W5r),e(pn,U5r),e(pn,M3e),e(M3e,H5r),e(pn,J5r),e(vo,Y5r),e(vo,J$),e(J$,TC),e(TC,E3e),e(E3e,K5r),e(TC,Z5r),e(TC,PK),e(PK,e0r),e(TC,o0r),e(J$,r0r),e(J$,MC),e(MC,C3e),e(C3e,t0r),e(MC,a0r),e(MC,BK),e(BK,n0r),e(MC,s0r),e(vo,l0r),e(vo,EC),e(EC,i0r),e(EC,w3e),e(w3e,d0r),e(EC,c0r),e(EC,A3e),e(A3e,m0r),e(vo,f0r),M(CC,vo,null),b(m,dZe,_),b(m,Ec,_),e(Ec,wC),e(wC,L3e),M(Y$,L3e,null),e(Ec,g0r),e(Ec,y3e),e(y3e,h0r),b(m,cZe,_),b(m,er,_),M(K$,er,null),e(er,u0r),e(er,Cc),e(Cc,p0r),e(Cc,IK),e(IK,_0r),e(Cc,b0r),e(Cc,NK),e(NK,v0r),e(Cc,F0r),e(er,T0r),e(er,Z$),e(Z$,M0r),e(Z$,x3e),e(x3e,E0r),e(Z$,C0r),e(er,w0r),e(er,qt),M(ek,qt,null),e(qt,A0r),e(qt,$3e),e($3e,L0r),e(qt,y0r),e(qt,wc),e(wc,x0r),e(wc,k3e),e(k3e,$0r),e(wc,k0r),e(wc,qK),e(qK,S0r),e(wc,R0r),e(qt,P0r),M(AC,qt,null),e(er,B0r),e(er,Fo),M(ok,Fo,null),e(Fo,I0r),e(Fo,S3e),e(S3e,N0r),e(Fo,q0r),e(Fo,_n),e(_n,j0r),e(_n,R3e),e(R3e,D0r),e(_n,G0r),e(_n,P3e),e(P3e,O0r),e(_n,V0r),e(_n,B3e),e(B3e,X0r),e(_n,z0r),e(Fo,Q0r),e(Fo,ft),e(ft,LC),e(LC,I3e),e(I3e,W0r),e(LC,U0r),e(LC,jK),e(jK,H0r),e(LC,J0r),e(ft,Y0r),e(ft,yC),e(yC,N3e),e(N3e,K0r),e(yC,Z0r),e(yC,DK),e(DK,ewr),e(yC,owr),e(ft,rwr),e(ft,xC),e(xC,q3e),e(q3e,twr),e(xC,awr),e(xC,GK),e(GK,nwr),e(xC,swr),e(ft,lwr),e(ft,$C),e($C,j3e),e(j3e,iwr),e($C,dwr),e($C,OK),e(OK,cwr),e($C,mwr),e(ft,fwr),e(ft,kC),e(kC,D3e),e(D3e,gwr),e(kC,hwr),e(kC,VK),e(VK,uwr),e(kC,pwr),e(Fo,_wr),e(Fo,SC),e(SC,bwr),e(SC,G3e),e(G3e,vwr),e(SC,Fwr),e(SC,O3e),e(O3e,Twr),e(Fo,Mwr),M(RC,Fo,null),b(m,mZe,_),b(m,Ac,_),e(Ac,PC),e(PC,V3e),M(rk,V3e,null),e(Ac,Ewr),e(Ac,X3e),e(X3e,Cwr),b(m,fZe,_),b(m,or,_),M(tk,or,null),e(or,wwr),e(or,Lc),e(Lc,Awr),e(Lc,XK),e(XK,Lwr),e(Lc,ywr),e(Lc,zK),e(zK,xwr),e(Lc,$wr),e(or,kwr),e(or,ak),e(ak,Swr),e(ak,z3e),e(z3e,Rwr),e(ak,Pwr),e(or,Bwr),e(or,jt),M(nk,jt,null),e(jt,Iwr),e(jt,Q3e),e(Q3e,Nwr),e(jt,qwr),e(jt,yc),e(yc,jwr),e(yc,W3e),e(W3e,Dwr),e(yc,Gwr),e(yc,QK),e(QK,Owr),e(yc,Vwr),e(jt,Xwr),M(BC,jt,null),e(or,zwr),e(or,To),M(sk,To,null),e(To,Qwr),e(To,U3e),e(U3e,Wwr),e(To,Uwr),e(To,bn),e(bn,Hwr),e(bn,H3e),e(H3e,Jwr),e(bn,Ywr),e(bn,J3e),e(J3e,Kwr),e(bn,Zwr),e(bn,Y3e),e(Y3e,eAr),e(bn,oAr),e(To,rAr),e(To,vn),e(vn,IC),e(IC,K3e),e(K3e,tAr),e(IC,aAr),e(IC,WK),e(WK,nAr),e(IC,sAr),e(vn,lAr),e(vn,NC),e(NC,Z3e),e(Z3e,iAr),e(NC,dAr),e(NC,UK),e(UK,cAr),e(NC,mAr),e(vn,fAr),e(vn,qC),e(qC,e5e),e(e5e,gAr),e(qC,hAr),e(qC,HK),e(HK,uAr),e(qC,pAr),e(vn,_Ar),e(vn,jC),e(jC,o5e),e(o5e,bAr),e(jC,vAr),e(jC,JK),e(JK,FAr),e(jC,TAr),e(To,MAr),e(To,DC),e(DC,EAr),e(DC,r5e),e(r5e,CAr),e(DC,wAr),e(DC,t5e),e(t5e,AAr),e(To,LAr),M(GC,To,null),b(m,gZe,_),b(m,xc,_),e(xc,OC),e(OC,a5e),M(lk,a5e,null),e(xc,yAr),e(xc,n5e),e(n5e,xAr),b(m,hZe,_),b(m,rr,_),M(ik,rr,null),e(rr,$Ar),e(rr,$c),e($c,kAr),e($c,YK),e(YK,SAr),e($c,RAr),e($c,KK),e(KK,PAr),e($c,BAr),e(rr,IAr),e(rr,dk),e(dk,NAr),e(dk,s5e),e(s5e,qAr),e(dk,jAr),e(rr,DAr),e(rr,Dt),M(ck,Dt,null),e(Dt,GAr),e(Dt,l5e),e(l5e,OAr),e(Dt,VAr),e(Dt,kc),e(kc,XAr),e(kc,i5e),e(i5e,zAr),e(kc,QAr),e(kc,ZK),e(ZK,WAr),e(kc,UAr),e(Dt,HAr),M(VC,Dt,null),e(rr,JAr),e(rr,Mo),M(mk,Mo,null),e(Mo,YAr),e(Mo,d5e),e(d5e,KAr),e(Mo,ZAr),e(Mo,Fn),e(Fn,e6r),e(Fn,c5e),e(c5e,o6r),e(Fn,r6r),e(Fn,m5e),e(m5e,t6r),e(Fn,a6r),e(Fn,f5e),e(f5e,n6r),e(Fn,s6r),e(Mo,l6r),e(Mo,Sc),e(Sc,XC),e(XC,g5e),e(g5e,i6r),e(XC,d6r),e(XC,eZ),e(eZ,c6r),e(XC,m6r),e(Sc,f6r),e(Sc,zC),e(zC,h5e),e(h5e,g6r),e(zC,h6r),e(zC,oZ),e(oZ,u6r),e(zC,p6r),e(Sc,_6r),e(Sc,QC),e(QC,u5e),e(u5e,b6r),e(QC,v6r),e(QC,rZ),e(rZ,F6r),e(QC,T6r),e(Mo,M6r),e(Mo,WC),e(WC,E6r),e(WC,p5e),e(p5e,C6r),e(WC,w6r),e(WC,_5e),e(_5e,A6r),e(Mo,L6r),M(UC,Mo,null),b(m,uZe,_),b(m,Rc,_),e(Rc,HC),e(HC,b5e),M(fk,b5e,null),e(Rc,y6r),e(Rc,v5e),e(v5e,x6r),b(m,pZe,_),b(m,tr,_),M(gk,tr,null),e(tr,$6r),e(tr,Pc),e(Pc,k6r),e(Pc,tZ),e(tZ,S6r),e(Pc,R6r),e(Pc,aZ),e(aZ,P6r),e(Pc,B6r),e(tr,I6r),e(tr,hk),e(hk,N6r),e(hk,F5e),e(F5e,q6r),e(hk,j6r),e(tr,D6r),e(tr,Gt),M(uk,Gt,null),e(Gt,G6r),e(Gt,T5e),e(T5e,O6r),e(Gt,V6r),e(Gt,Bc),e(Bc,X6r),e(Bc,M5e),e(M5e,z6r),e(Bc,Q6r),e(Bc,nZ),e(nZ,W6r),e(Bc,U6r),e(Gt,H6r),M(JC,Gt,null),e(tr,J6r),e(tr,Eo),M(pk,Eo,null),e(Eo,Y6r),e(Eo,E5e),e(E5e,K6r),e(Eo,Z6r),e(Eo,Tn),e(Tn,e7r),e(Tn,C5e),e(C5e,o7r),e(Tn,r7r),e(Tn,w5e),e(w5e,t7r),e(Tn,a7r),e(Tn,A5e),e(A5e,n7r),e(Tn,s7r),e(Eo,l7r),e(Eo,L5e),e(L5e,YC),e(YC,y5e),e(y5e,i7r),e(YC,d7r),e(YC,sZ),e(sZ,c7r),e(YC,m7r),e(Eo,f7r),e(Eo,KC),e(KC,g7r),e(KC,x5e),e(x5e,h7r),e(KC,u7r),e(KC,$5e),e($5e,p7r),e(Eo,_7r),M(ZC,Eo,null),b(m,_Ze,_),b(m,Ic,_),e(Ic,e3),e(e3,k5e),M(_k,k5e,null),e(Ic,b7r),e(Ic,S5e),e(S5e,v7r),b(m,bZe,_),b(m,ar,_),M(bk,ar,null),e(ar,F7r),e(ar,Nc),e(Nc,T7r),e(Nc,lZ),e(lZ,M7r),e(Nc,E7r),e(Nc,iZ),e(iZ,C7r),e(Nc,w7r),e(ar,A7r),e(ar,vk),e(vk,L7r),e(vk,R5e),e(R5e,y7r),e(vk,x7r),e(ar,$7r),e(ar,Ot),M(Fk,Ot,null),e(Ot,k7r),e(Ot,P5e),e(P5e,S7r),e(Ot,R7r),e(Ot,qc),e(qc,P7r),e(qc,B5e),e(B5e,B7r),e(qc,I7r),e(qc,dZ),e(dZ,N7r),e(qc,q7r),e(Ot,j7r),M(o3,Ot,null),e(ar,D7r),e(ar,Co),M(Tk,Co,null),e(Co,G7r),e(Co,I5e),e(I5e,O7r),e(Co,V7r),e(Co,Mn),e(Mn,X7r),e(Mn,N5e),e(N5e,z7r),e(Mn,Q7r),e(Mn,q5e),e(q5e,W7r),e(Mn,U7r),e(Mn,j5e),e(j5e,H7r),e(Mn,J7r),e(Co,Y7r),e(Co,gt),e(gt,r3),e(r3,D5e),e(D5e,K7r),e(r3,Z7r),e(r3,cZ),e(cZ,eLr),e(r3,oLr),e(gt,rLr),e(gt,t3),e(t3,G5e),e(G5e,tLr),e(t3,aLr),e(t3,mZ),e(mZ,nLr),e(t3,sLr),e(gt,lLr),e(gt,a3),e(a3,O5e),e(O5e,iLr),e(a3,dLr),e(a3,fZ),e(fZ,cLr),e(a3,mLr),e(gt,fLr),e(gt,n3),e(n3,V5e),e(V5e,gLr),e(n3,hLr),e(n3,gZ),e(gZ,uLr),e(n3,pLr),e(gt,_Lr),e(gt,s3),e(s3,X5e),e(X5e,bLr),e(s3,vLr),e(s3,hZ),e(hZ,FLr),e(s3,TLr),e(Co,MLr),e(Co,l3),e(l3,ELr),e(l3,z5e),e(z5e,CLr),e(l3,wLr),e(l3,Q5e),e(Q5e,ALr),e(Co,LLr),M(i3,Co,null),b(m,vZe,_),b(m,jc,_),e(jc,d3),e(d3,W5e),M(Mk,W5e,null),e(jc,yLr),e(jc,U5e),e(U5e,xLr),b(m,FZe,_),b(m,nr,_),M(Ek,nr,null),e(nr,$Lr),e(nr,Dc),e(Dc,kLr),e(Dc,uZ),e(uZ,SLr),e(Dc,RLr),e(Dc,pZ),e(pZ,PLr),e(Dc,BLr),e(nr,ILr),e(nr,Ck),e(Ck,NLr),e(Ck,H5e),e(H5e,qLr),e(Ck,jLr),e(nr,DLr),e(nr,Vt),M(wk,Vt,null),e(Vt,GLr),e(Vt,J5e),e(J5e,OLr),e(Vt,VLr),e(Vt,Gc),e(Gc,XLr),e(Gc,Y5e),e(Y5e,zLr),e(Gc,QLr),e(Gc,_Z),e(_Z,WLr),e(Gc,ULr),e(Vt,HLr),M(c3,Vt,null),e(nr,JLr),e(nr,wo),M(Ak,wo,null),e(wo,YLr),e(wo,K5e),e(K5e,KLr),e(wo,ZLr),e(wo,En),e(En,eyr),e(En,Z5e),e(Z5e,oyr),e(En,ryr),e(En,e0e),e(e0e,tyr),e(En,ayr),e(En,o0e),e(o0e,nyr),e(En,syr),e(wo,lyr),e(wo,r0e),e(r0e,m3),e(m3,t0e),e(t0e,iyr),e(m3,dyr),e(m3,bZ),e(bZ,cyr),e(m3,myr),e(wo,fyr),e(wo,f3),e(f3,gyr),e(f3,a0e),e(a0e,hyr),e(f3,uyr),e(f3,n0e),e(n0e,pyr),e(wo,_yr),M(g3,wo,null),b(m,TZe,_),b(m,Oc,_),e(Oc,h3),e(h3,s0e),M(Lk,s0e,null),e(Oc,byr),e(Oc,l0e),e(l0e,vyr),b(m,MZe,_),b(m,sr,_),M(yk,sr,null),e(sr,Fyr),e(sr,Vc),e(Vc,Tyr),e(Vc,vZ),e(vZ,Myr),e(Vc,Eyr),e(Vc,FZ),e(FZ,Cyr),e(Vc,wyr),e(sr,Ayr),e(sr,xk),e(xk,Lyr),e(xk,i0e),e(i0e,yyr),e(xk,xyr),e(sr,$yr),e(sr,Xt),M($k,Xt,null),e(Xt,kyr),e(Xt,d0e),e(d0e,Syr),e(Xt,Ryr),e(Xt,Xc),e(Xc,Pyr),e(Xc,c0e),e(c0e,Byr),e(Xc,Iyr),e(Xc,TZ),e(TZ,Nyr),e(Xc,qyr),e(Xt,jyr),M(u3,Xt,null),e(sr,Dyr),e(sr,Ir),M(kk,Ir,null),e(Ir,Gyr),e(Ir,m0e),e(m0e,Oyr),e(Ir,Vyr),e(Ir,Cn),e(Cn,Xyr),e(Cn,f0e),e(f0e,zyr),e(Cn,Qyr),e(Cn,g0e),e(g0e,Wyr),e(Cn,Uyr),e(Cn,h0e),e(h0e,Hyr),e(Cn,Jyr),e(Ir,Yyr),e(Ir,N),e(N,p3),e(p3,u0e),e(u0e,Kyr),e(p3,Zyr),e(p3,MZ),e(MZ,e8r),e(p3,o8r),e(N,r8r),e(N,_3),e(_3,p0e),e(p0e,t8r),e(_3,a8r),e(_3,EZ),e(EZ,n8r),e(_3,s8r),e(N,l8r),e(N,b3),e(b3,_0e),e(_0e,i8r),e(b3,d8r),e(b3,CZ),e(CZ,c8r),e(b3,m8r),e(N,f8r),e(N,v3),e(v3,b0e),e(b0e,g8r),e(v3,h8r),e(v3,wZ),e(wZ,u8r),e(v3,p8r),e(N,_8r),e(N,F3),e(F3,v0e),e(v0e,b8r),e(F3,v8r),e(F3,AZ),e(AZ,F8r),e(F3,T8r),e(N,M8r),e(N,T3),e(T3,F0e),e(F0e,E8r),e(T3,C8r),e(T3,LZ),e(LZ,w8r),e(T3,A8r),e(N,L8r),e(N,M3),e(M3,T0e),e(T0e,y8r),e(M3,x8r),e(M3,yZ),e(yZ,$8r),e(M3,k8r),e(N,S8r),e(N,E3),e(E3,M0e),e(M0e,R8r),e(E3,P8r),e(E3,xZ),e(xZ,B8r),e(E3,I8r),e(N,N8r),e(N,C3),e(C3,E0e),e(E0e,q8r),e(C3,j8r),e(C3,$Z),e($Z,D8r),e(C3,G8r),e(N,O8r),e(N,w3),e(w3,C0e),e(C0e,V8r),e(w3,X8r),e(w3,kZ),e(kZ,z8r),e(w3,Q8r),e(N,W8r),e(N,A3),e(A3,w0e),e(w0e,U8r),e(A3,H8r),e(A3,SZ),e(SZ,J8r),e(A3,Y8r),e(N,K8r),e(N,L3),e(L3,A0e),e(A0e,Z8r),e(L3,e9r),e(L3,RZ),e(RZ,o9r),e(L3,r9r),e(N,t9r),e(N,y3),e(y3,L0e),e(L0e,a9r),e(y3,n9r),e(y3,PZ),e(PZ,s9r),e(y3,l9r),e(N,i9r),e(N,x3),e(x3,y0e),e(y0e,d9r),e(x3,c9r),e(x3,BZ),e(BZ,m9r),e(x3,f9r),e(N,g9r),e(N,$3),e($3,x0e),e(x0e,h9r),e($3,u9r),e($3,IZ),e(IZ,p9r),e($3,_9r),e(N,b9r),e(N,k3),e(k3,$0e),e($0e,v9r),e(k3,F9r),e(k3,NZ),e(NZ,T9r),e(k3,M9r),e(N,E9r),e(N,S3),e(S3,k0e),e(k0e,C9r),e(S3,w9r),e(S3,qZ),e(qZ,A9r),e(S3,L9r),e(N,y9r),e(N,R3),e(R3,S0e),e(S0e,x9r),e(R3,$9r),e(R3,jZ),e(jZ,k9r),e(R3,S9r),e(N,R9r),e(N,vl),e(vl,R0e),e(R0e,P9r),e(vl,B9r),e(vl,DZ),e(DZ,I9r),e(vl,N9r),e(vl,GZ),e(GZ,q9r),e(vl,j9r),e(N,D9r),e(N,P3),e(P3,P0e),e(P0e,G9r),e(P3,O9r),e(P3,OZ),e(OZ,V9r),e(P3,X9r),e(N,z9r),e(N,B3),e(B3,B0e),e(B0e,Q9r),e(B3,W9r),e(B3,VZ),e(VZ,U9r),e(B3,H9r),e(N,J9r),e(N,I3),e(I3,I0e),e(I0e,Y9r),e(I3,K9r),e(I3,XZ),e(XZ,Z9r),e(I3,exr),e(N,oxr),e(N,N3),e(N3,N0e),e(N0e,rxr),e(N3,txr),e(N3,zZ),e(zZ,axr),e(N3,nxr),e(N,sxr),e(N,q3),e(q3,q0e),e(q0e,lxr),e(q3,ixr),e(q3,QZ),e(QZ,dxr),e(q3,cxr),e(N,mxr),e(N,j3),e(j3,j0e),e(j0e,fxr),e(j3,gxr),e(j3,WZ),e(WZ,hxr),e(j3,uxr),e(N,pxr),e(N,D3),e(D3,D0e),e(D0e,_xr),e(D3,bxr),e(D3,UZ),e(UZ,vxr),e(D3,Fxr),e(N,Txr),e(N,G3),e(G3,G0e),e(G0e,Mxr),e(G3,Exr),e(G3,HZ),e(HZ,Cxr),e(G3,wxr),e(N,Axr),e(N,O3),e(O3,O0e),e(O0e,Lxr),e(O3,yxr),e(O3,JZ),e(JZ,xxr),e(O3,$xr),e(N,kxr),e(N,V3),e(V3,V0e),e(V0e,Sxr),e(V3,Rxr),e(V3,YZ),e(YZ,Pxr),e(V3,Bxr),e(N,Ixr),e(N,X3),e(X3,X0e),e(X0e,Nxr),e(X3,qxr),e(X3,KZ),e(KZ,jxr),e(X3,Dxr),e(N,Gxr),e(N,z3),e(z3,z0e),e(z0e,Oxr),e(z3,Vxr),e(z3,ZZ),e(ZZ,Xxr),e(z3,zxr),e(N,Qxr),e(N,Q3),e(Q3,Q0e),e(Q0e,Wxr),e(Q3,Uxr),e(Q3,eee),e(eee,Hxr),e(Q3,Jxr),e(N,Yxr),e(N,W3),e(W3,W0e),e(W0e,Kxr),e(W3,Zxr),e(W3,oee),e(oee,e$r),e(W3,o$r),e(N,r$r),e(N,U3),e(U3,U0e),e(U0e,t$r),e(U3,a$r),e(U3,ree),e(ree,n$r),e(U3,s$r),e(N,l$r),e(N,H3),e(H3,H0e),e(H0e,i$r),e(H3,d$r),e(H3,tee),e(tee,c$r),e(H3,m$r),e(N,f$r),e(N,J3),e(J3,J0e),e(J0e,g$r),e(J3,h$r),e(J3,aee),e(aee,u$r),e(J3,p$r),e(N,_$r),e(N,Y3),e(Y3,Y0e),e(Y0e,b$r),e(Y3,v$r),e(Y3,nee),e(nee,F$r),e(Y3,T$r),e(N,M$r),e(N,K3),e(K3,K0e),e(K0e,E$r),e(K3,C$r),e(K3,see),e(see,w$r),e(K3,A$r),e(N,L$r),e(N,Z3),e(Z3,Z0e),e(Z0e,y$r),e(Z3,x$r),e(Z3,lee),e(lee,$$r),e(Z3,k$r),e(N,S$r),e(N,e5),e(e5,ewe),e(ewe,R$r),e(e5,P$r),e(e5,iee),e(iee,B$r),e(e5,I$r),e(N,N$r),e(N,o5),e(o5,owe),e(owe,q$r),e(o5,j$r),e(o5,dee),e(dee,D$r),e(o5,G$r),e(N,O$r),e(N,r5),e(r5,rwe),e(rwe,V$r),e(r5,X$r),e(r5,cee),e(cee,z$r),e(r5,Q$r),e(N,W$r),e(N,t5),e(t5,twe),e(twe,U$r),e(t5,H$r),e(t5,mee),e(mee,J$r),e(t5,Y$r),e(N,K$r),e(N,a5),e(a5,awe),e(awe,Z$r),e(a5,ekr),e(a5,fee),e(fee,okr),e(a5,rkr),e(N,tkr),e(N,n5),e(n5,nwe),e(nwe,akr),e(n5,nkr),e(n5,gee),e(gee,skr),e(n5,lkr),e(N,ikr),e(N,s5),e(s5,swe),e(swe,dkr),e(s5,ckr),e(s5,hee),e(hee,mkr),e(s5,fkr),e(N,gkr),e(N,l5),e(l5,lwe),e(lwe,hkr),e(l5,ukr),e(l5,uee),e(uee,pkr),e(l5,_kr),e(N,bkr),e(N,i5),e(i5,iwe),e(iwe,vkr),e(i5,Fkr),e(i5,pee),e(pee,Tkr),e(i5,Mkr),e(N,Ekr),e(N,d5),e(d5,dwe),e(dwe,Ckr),e(d5,wkr),e(d5,_ee),e(_ee,Akr),e(d5,Lkr),e(N,ykr),e(N,c5),e(c5,cwe),e(cwe,xkr),e(c5,$kr),e(c5,bee),e(bee,kkr),e(c5,Skr),e(N,Rkr),e(N,m5),e(m5,mwe),e(mwe,Pkr),e(m5,Bkr),e(m5,vee),e(vee,Ikr),e(m5,Nkr),e(N,qkr),e(N,f5),e(f5,fwe),e(fwe,jkr),e(f5,Dkr),e(f5,Fee),e(Fee,Gkr),e(f5,Okr),e(N,Vkr),e(N,g5),e(g5,gwe),e(gwe,Xkr),e(g5,zkr),e(g5,Tee),e(Tee,Qkr),e(g5,Wkr),e(N,Ukr),e(N,h5),e(h5,hwe),e(hwe,Hkr),e(h5,Jkr),e(h5,Mee),e(Mee,Ykr),e(h5,Kkr),e(Ir,Zkr),M(u5,Ir,null),b(m,EZe,_),b(m,zc,_),e(zc,p5),e(p5,uwe),M(Sk,uwe,null),e(zc,eSr),e(zc,pwe),e(pwe,oSr),b(m,CZe,_),b(m,lr,_),M(Rk,lr,null),e(lr,rSr),e(lr,Qc),e(Qc,tSr),e(Qc,Eee),e(Eee,aSr),e(Qc,nSr),e(Qc,Cee),e(Cee,sSr),e(Qc,lSr),e(lr,iSr),e(lr,Pk),e(Pk,dSr),e(Pk,_we),e(_we,cSr),e(Pk,mSr),e(lr,fSr),e(lr,zt),M(Bk,zt,null),e(zt,gSr),e(zt,bwe),e(bwe,hSr),e(zt,uSr),e(zt,Wc),e(Wc,pSr),e(Wc,vwe),e(vwe,_Sr),e(Wc,bSr),e(Wc,wee),e(wee,vSr),e(Wc,FSr),e(zt,TSr),M(_5,zt,null),e(lr,MSr),e(lr,Nr),M(Ik,Nr,null),e(Nr,ESr),e(Nr,Fwe),e(Fwe,CSr),e(Nr,wSr),e(Nr,wn),e(wn,ASr),e(wn,Twe),e(Twe,LSr),e(wn,ySr),e(wn,Mwe),e(Mwe,xSr),e(wn,$Sr),e(wn,Ewe),e(Ewe,kSr),e(wn,SSr),e(Nr,RSr),e(Nr,se),e(se,b5),e(b5,Cwe),e(Cwe,PSr),e(b5,BSr),e(b5,Aee),e(Aee,ISr),e(b5,NSr),e(se,qSr),e(se,v5),e(v5,wwe),e(wwe,jSr),e(v5,DSr),e(v5,Lee),e(Lee,GSr),e(v5,OSr),e(se,VSr),e(se,F5),e(F5,Awe),e(Awe,XSr),e(F5,zSr),e(F5,yee),e(yee,QSr),e(F5,WSr),e(se,USr),e(se,T5),e(T5,Lwe),e(Lwe,HSr),e(T5,JSr),e(T5,xee),e(xee,YSr),e(T5,KSr),e(se,ZSr),e(se,M5),e(M5,ywe),e(ywe,eRr),e(M5,oRr),e(M5,$ee),e($ee,rRr),e(M5,tRr),e(se,aRr),e(se,E5),e(E5,xwe),e(xwe,nRr),e(E5,sRr),e(E5,kee),e(kee,lRr),e(E5,iRr),e(se,dRr),e(se,C5),e(C5,$we),e($we,cRr),e(C5,mRr),e(C5,See),e(See,fRr),e(C5,gRr),e(se,hRr),e(se,w5),e(w5,kwe),e(kwe,uRr),e(w5,pRr),e(w5,Ree),e(Ree,_Rr),e(w5,bRr),e(se,vRr),e(se,A5),e(A5,Swe),e(Swe,FRr),e(A5,TRr),e(A5,Pee),e(Pee,MRr),e(A5,ERr),e(se,CRr),e(se,L5),e(L5,Rwe),e(Rwe,wRr),e(L5,ARr),e(L5,Bee),e(Bee,LRr),e(L5,yRr),e(se,xRr),e(se,y5),e(y5,Pwe),e(Pwe,$Rr),e(y5,kRr),e(y5,Iee),e(Iee,SRr),e(y5,RRr),e(se,PRr),e(se,x5),e(x5,Bwe),e(Bwe,BRr),e(x5,IRr),e(x5,Nee),e(Nee,NRr),e(x5,qRr),e(se,jRr),e(se,$5),e($5,Iwe),e(Iwe,DRr),e($5,GRr),e($5,qee),e(qee,ORr),e($5,VRr),e(se,XRr),e(se,k5),e(k5,Nwe),e(Nwe,zRr),e(k5,QRr),e(k5,jee),e(jee,WRr),e(k5,URr),e(se,HRr),e(se,S5),e(S5,qwe),e(qwe,JRr),e(S5,YRr),e(S5,Dee),e(Dee,KRr),e(S5,ZRr),e(se,ePr),e(se,R5),e(R5,jwe),e(jwe,oPr),e(R5,rPr),e(R5,Gee),e(Gee,tPr),e(R5,aPr),e(se,nPr),e(se,P5),e(P5,Dwe),e(Dwe,sPr),e(P5,lPr),e(P5,Oee),e(Oee,iPr),e(P5,dPr),e(se,cPr),e(se,B5),e(B5,Gwe),e(Gwe,mPr),e(B5,fPr),e(B5,Vee),e(Vee,gPr),e(B5,hPr),e(se,uPr),e(se,I5),e(I5,Owe),e(Owe,pPr),e(I5,_Pr),e(I5,Xee),e(Xee,bPr),e(I5,vPr),e(se,FPr),e(se,N5),e(N5,Vwe),e(Vwe,TPr),e(N5,MPr),e(N5,zee),e(zee,EPr),e(N5,CPr),e(se,wPr),e(se,q5),e(q5,Xwe),e(Xwe,APr),e(q5,LPr),e(q5,Qee),e(Qee,yPr),e(q5,xPr),e(se,$Pr),e(se,j5),e(j5,zwe),e(zwe,kPr),e(j5,SPr),e(j5,Wee),e(Wee,RPr),e(j5,PPr),e(se,BPr),e(se,D5),e(D5,Qwe),e(Qwe,IPr),e(D5,NPr),e(D5,Uee),e(Uee,qPr),e(D5,jPr),e(Nr,DPr),M(G5,Nr,null),b(m,wZe,_),b(m,Uc,_),e(Uc,O5),e(O5,Wwe),M(Nk,Wwe,null),e(Uc,GPr),e(Uc,Uwe),e(Uwe,OPr),b(m,AZe,_),b(m,ir,_),M(qk,ir,null),e(ir,VPr),e(ir,Hc),e(Hc,XPr),e(Hc,Hee),e(Hee,zPr),e(Hc,QPr),e(Hc,Jee),e(Jee,WPr),e(Hc,UPr),e(ir,HPr),e(ir,jk),e(jk,JPr),e(jk,Hwe),e(Hwe,YPr),e(jk,KPr),e(ir,ZPr),e(ir,Qt),M(Dk,Qt,null),e(Qt,eBr),e(Qt,Jwe),e(Jwe,oBr),e(Qt,rBr),e(Qt,Jc),e(Jc,tBr),e(Jc,Ywe),e(Ywe,aBr),e(Jc,nBr),e(Jc,Yee),e(Yee,sBr),e(Jc,lBr),e(Qt,iBr),M(V5,Qt,null),e(ir,dBr),e(ir,qr),M(Gk,qr,null),e(qr,cBr),e(qr,Kwe),e(Kwe,mBr),e(qr,fBr),e(qr,An),e(An,gBr),e(An,Zwe),e(Zwe,hBr),e(An,uBr),e(An,eAe),e(eAe,pBr),e(An,_Br),e(An,oAe),e(oAe,bBr),e(An,vBr),e(qr,FBr),e(qr,Me),e(Me,X5),e(X5,rAe),e(rAe,TBr),e(X5,MBr),e(X5,Kee),e(Kee,EBr),e(X5,CBr),e(Me,wBr),e(Me,z5),e(z5,tAe),e(tAe,ABr),e(z5,LBr),e(z5,Zee),e(Zee,yBr),e(z5,xBr),e(Me,$Br),e(Me,Q5),e(Q5,aAe),e(aAe,kBr),e(Q5,SBr),e(Q5,eoe),e(eoe,RBr),e(Q5,PBr),e(Me,BBr),e(Me,W5),e(W5,nAe),e(nAe,IBr),e(W5,NBr),e(W5,ooe),e(ooe,qBr),e(W5,jBr),e(Me,DBr),e(Me,U5),e(U5,sAe),e(sAe,GBr),e(U5,OBr),e(U5,roe),e(roe,VBr),e(U5,XBr),e(Me,zBr),e(Me,H5),e(H5,lAe),e(lAe,QBr),e(H5,WBr),e(H5,toe),e(toe,UBr),e(H5,HBr),e(Me,JBr),e(Me,J5),e(J5,iAe),e(iAe,YBr),e(J5,KBr),e(J5,aoe),e(aoe,ZBr),e(J5,eIr),e(Me,oIr),e(Me,Y5),e(Y5,dAe),e(dAe,rIr),e(Y5,tIr),e(Y5,noe),e(noe,aIr),e(Y5,nIr),e(Me,sIr),e(Me,K5),e(K5,cAe),e(cAe,lIr),e(K5,iIr),e(K5,soe),e(soe,dIr),e(K5,cIr),e(Me,mIr),e(Me,Z5),e(Z5,mAe),e(mAe,fIr),e(Z5,gIr),e(Z5,loe),e(loe,hIr),e(Z5,uIr),e(Me,pIr),e(Me,e0),e(e0,fAe),e(fAe,_Ir),e(e0,bIr),e(e0,ioe),e(ioe,vIr),e(e0,FIr),e(Me,TIr),e(Me,o0),e(o0,gAe),e(gAe,MIr),e(o0,EIr),e(o0,doe),e(doe,CIr),e(o0,wIr),e(Me,AIr),e(Me,r0),e(r0,hAe),e(hAe,LIr),e(r0,yIr),e(r0,coe),e(coe,xIr),e(r0,$Ir),e(Me,kIr),e(Me,t0),e(t0,uAe),e(uAe,SIr),e(t0,RIr),e(t0,moe),e(moe,PIr),e(t0,BIr),e(qr,IIr),M(a0,qr,null),b(m,LZe,_),b(m,Yc,_),e(Yc,n0),e(n0,pAe),M(Ok,pAe,null),e(Yc,NIr),e(Yc,_Ae),e(_Ae,qIr),b(m,yZe,_),b(m,dr,_),M(Vk,dr,null),e(dr,jIr),e(dr,Kc),e(Kc,DIr),e(Kc,foe),e(foe,GIr),e(Kc,OIr),e(Kc,goe),e(goe,VIr),e(Kc,XIr),e(dr,zIr),e(dr,Xk),e(Xk,QIr),e(Xk,bAe),e(bAe,WIr),e(Xk,UIr),e(dr,HIr),e(dr,Wt),M(zk,Wt,null),e(Wt,JIr),e(Wt,vAe),e(vAe,YIr),e(Wt,KIr),e(Wt,Zc),e(Zc,ZIr),e(Zc,FAe),e(FAe,eNr),e(Zc,oNr),e(Zc,hoe),e(hoe,rNr),e(Zc,tNr),e(Wt,aNr),M(s0,Wt,null),e(dr,nNr),e(dr,jr),M(Qk,jr,null),e(jr,sNr),e(jr,TAe),e(TAe,lNr),e(jr,iNr),e(jr,Ln),e(Ln,dNr),e(Ln,MAe),e(MAe,cNr),e(Ln,mNr),e(Ln,EAe),e(EAe,fNr),e(Ln,gNr),e(Ln,CAe),e(CAe,hNr),e(Ln,uNr),e(jr,pNr),e(jr,Be),e(Be,l0),e(l0,wAe),e(wAe,_Nr),e(l0,bNr),e(l0,uoe),e(uoe,vNr),e(l0,FNr),e(Be,TNr),e(Be,i0),e(i0,AAe),e(AAe,MNr),e(i0,ENr),e(i0,poe),e(poe,CNr),e(i0,wNr),e(Be,ANr),e(Be,Fl),e(Fl,LAe),e(LAe,LNr),e(Fl,yNr),e(Fl,_oe),e(_oe,xNr),e(Fl,$Nr),e(Fl,boe),e(boe,kNr),e(Fl,SNr),e(Be,RNr),e(Be,d0),e(d0,yAe),e(yAe,PNr),e(d0,BNr),e(d0,voe),e(voe,INr),e(d0,NNr),e(Be,qNr),e(Be,c0),e(c0,xAe),e(xAe,jNr),e(c0,DNr),e(c0,Foe),e(Foe,GNr),e(c0,ONr),e(Be,VNr),e(Be,m0),e(m0,$Ae),e($Ae,XNr),e(m0,zNr),e(m0,Toe),e(Toe,QNr),e(m0,WNr),e(Be,UNr),e(Be,f0),e(f0,kAe),e(kAe,HNr),e(f0,JNr),e(f0,Moe),e(Moe,YNr),e(f0,KNr),e(Be,ZNr),e(Be,g0),e(g0,SAe),e(SAe,eqr),e(g0,oqr),e(g0,Eoe),e(Eoe,rqr),e(g0,tqr),e(Be,aqr),e(Be,h0),e(h0,RAe),e(RAe,nqr),e(h0,sqr),e(h0,Coe),e(Coe,lqr),e(h0,iqr),e(jr,dqr),M(u0,jr,null),b(m,xZe,_),b(m,em,_),e(em,p0),e(p0,PAe),M(Wk,PAe,null),e(em,cqr),e(em,BAe),e(BAe,mqr),b(m,$Ze,_),b(m,cr,_),M(Uk,cr,null),e(cr,fqr),e(cr,om),e(om,gqr),e(om,woe),e(woe,hqr),e(om,uqr),e(om,Aoe),e(Aoe,pqr),e(om,_qr),e(cr,bqr),e(cr,Hk),e(Hk,vqr),e(Hk,IAe),e(IAe,Fqr),e(Hk,Tqr),e(cr,Mqr),e(cr,Ut),M(Jk,Ut,null),e(Ut,Eqr),e(Ut,NAe),e(NAe,Cqr),e(Ut,wqr),e(Ut,rm),e(rm,Aqr),e(rm,qAe),e(qAe,Lqr),e(rm,yqr),e(rm,Loe),e(Loe,xqr),e(rm,$qr),e(Ut,kqr),M(_0,Ut,null),e(cr,Sqr),e(cr,Dr),M(Yk,Dr,null),e(Dr,Rqr),e(Dr,jAe),e(jAe,Pqr),e(Dr,Bqr),e(Dr,yn),e(yn,Iqr),e(yn,DAe),e(DAe,Nqr),e(yn,qqr),e(yn,GAe),e(GAe,jqr),e(yn,Dqr),e(yn,OAe),e(OAe,Gqr),e(yn,Oqr),e(Dr,Vqr),e(Dr,tm),e(tm,b0),e(b0,VAe),e(VAe,Xqr),e(b0,zqr),e(b0,yoe),e(yoe,Qqr),e(b0,Wqr),e(tm,Uqr),e(tm,v0),e(v0,XAe),e(XAe,Hqr),e(v0,Jqr),e(v0,xoe),e(xoe,Yqr),e(v0,Kqr),e(tm,Zqr),e(tm,F0),e(F0,zAe),e(zAe,ejr),e(F0,ojr),e(F0,$oe),e($oe,rjr),e(F0,tjr),e(Dr,ajr),M(T0,Dr,null),b(m,kZe,_),b(m,am,_),e(am,M0),e(M0,QAe),M(Kk,QAe,null),e(am,njr),e(am,WAe),e(WAe,sjr),b(m,SZe,_),b(m,mr,_),M(Zk,mr,null),e(mr,ljr),e(mr,nm),e(nm,ijr),e(nm,koe),e(koe,djr),e(nm,cjr),e(nm,Soe),e(Soe,mjr),e(nm,fjr),e(mr,gjr),e(mr,eS),e(eS,hjr),e(eS,UAe),e(UAe,ujr),e(eS,pjr),e(mr,_jr),e(mr,Ht),M(oS,Ht,null),e(Ht,bjr),e(Ht,HAe),e(HAe,vjr),e(Ht,Fjr),e(Ht,sm),e(sm,Tjr),e(sm,JAe),e(JAe,Mjr),e(sm,Ejr),e(sm,Roe),e(Roe,Cjr),e(sm,wjr),e(Ht,Ajr),M(E0,Ht,null),e(mr,Ljr),e(mr,Gr),M(rS,Gr,null),e(Gr,yjr),e(Gr,YAe),e(YAe,xjr),e(Gr,$jr),e(Gr,xn),e(xn,kjr),e(xn,KAe),e(KAe,Sjr),e(xn,Rjr),e(xn,ZAe),e(ZAe,Pjr),e(xn,Bjr),e(xn,e6e),e(e6e,Ijr),e(xn,Njr),e(Gr,qjr),e(Gr,fe),e(fe,C0),e(C0,o6e),e(o6e,jjr),e(C0,Djr),e(C0,Poe),e(Poe,Gjr),e(C0,Ojr),e(fe,Vjr),e(fe,w0),e(w0,r6e),e(r6e,Xjr),e(w0,zjr),e(w0,Boe),e(Boe,Qjr),e(w0,Wjr),e(fe,Ujr),e(fe,A0),e(A0,t6e),e(t6e,Hjr),e(A0,Jjr),e(A0,Ioe),e(Ioe,Yjr),e(A0,Kjr),e(fe,Zjr),e(fe,L0),e(L0,a6e),e(a6e,eDr),e(L0,oDr),e(L0,Noe),e(Noe,rDr),e(L0,tDr),e(fe,aDr),e(fe,y0),e(y0,n6e),e(n6e,nDr),e(y0,sDr),e(y0,qoe),e(qoe,lDr),e(y0,iDr),e(fe,dDr),e(fe,x0),e(x0,s6e),e(s6e,cDr),e(x0,mDr),e(x0,joe),e(joe,fDr),e(x0,gDr),e(fe,hDr),e(fe,$0),e($0,l6e),e(l6e,uDr),e($0,pDr),e($0,Doe),e(Doe,_Dr),e($0,bDr),e(fe,vDr),e(fe,k0),e(k0,i6e),e(i6e,FDr),e(k0,TDr),e(k0,Goe),e(Goe,MDr),e(k0,EDr),e(fe,CDr),e(fe,S0),e(S0,d6e),e(d6e,wDr),e(S0,ADr),e(S0,Ooe),e(Ooe,LDr),e(S0,yDr),e(fe,xDr),e(fe,R0),e(R0,c6e),e(c6e,$Dr),e(R0,kDr),e(R0,Voe),e(Voe,SDr),e(R0,RDr),e(fe,PDr),e(fe,P0),e(P0,m6e),e(m6e,BDr),e(P0,IDr),e(P0,Xoe),e(Xoe,NDr),e(P0,qDr),e(fe,jDr),e(fe,B0),e(B0,f6e),e(f6e,DDr),e(B0,GDr),e(B0,zoe),e(zoe,ODr),e(B0,VDr),e(fe,XDr),e(fe,I0),e(I0,g6e),e(g6e,zDr),e(I0,QDr),e(I0,Qoe),e(Qoe,WDr),e(I0,UDr),e(fe,HDr),e(fe,N0),e(N0,h6e),e(h6e,JDr),e(N0,YDr),e(N0,Woe),e(Woe,KDr),e(N0,ZDr),e(fe,eGr),e(fe,q0),e(q0,u6e),e(u6e,oGr),e(q0,rGr),e(q0,Uoe),e(Uoe,tGr),e(q0,aGr),e(fe,nGr),e(fe,j0),e(j0,p6e),e(p6e,sGr),e(j0,lGr),e(j0,Hoe),e(Hoe,iGr),e(j0,dGr),e(fe,cGr),e(fe,D0),e(D0,_6e),e(_6e,mGr),e(D0,fGr),e(D0,Joe),e(Joe,gGr),e(D0,hGr),e(fe,uGr),e(fe,G0),e(G0,b6e),e(b6e,pGr),e(G0,_Gr),e(G0,Yoe),e(Yoe,bGr),e(G0,vGr),e(fe,FGr),e(fe,O0),e(O0,v6e),e(v6e,TGr),e(O0,MGr),e(O0,Koe),e(Koe,EGr),e(O0,CGr),e(fe,wGr),e(fe,V0),e(V0,F6e),e(F6e,AGr),e(V0,LGr),e(V0,Zoe),e(Zoe,yGr),e(V0,xGr),e(Gr,$Gr),M(X0,Gr,null),b(m,RZe,_),b(m,lm,_),e(lm,z0),e(z0,T6e),M(tS,T6e,null),e(lm,kGr),e(lm,M6e),e(M6e,SGr),b(m,PZe,_),b(m,fr,_),M(aS,fr,null),e(fr,RGr),e(fr,im),e(im,PGr),e(im,ere),e(ere,BGr),e(im,IGr),e(im,ore),e(ore,NGr),e(im,qGr),e(fr,jGr),e(fr,nS),e(nS,DGr),e(nS,E6e),e(E6e,GGr),e(nS,OGr),e(fr,VGr),e(fr,Jt),M(sS,Jt,null),e(Jt,XGr),e(Jt,C6e),e(C6e,zGr),e(Jt,QGr),e(Jt,dm),e(dm,WGr),e(dm,w6e),e(w6e,UGr),e(dm,HGr),e(dm,rre),e(rre,JGr),e(dm,YGr),e(Jt,KGr),M(Q0,Jt,null),e(fr,ZGr),e(fr,Or),M(lS,Or,null),e(Or,eOr),e(Or,A6e),e(A6e,oOr),e(Or,rOr),e(Or,$n),e($n,tOr),e($n,L6e),e(L6e,aOr),e($n,nOr),e($n,y6e),e(y6e,sOr),e($n,lOr),e($n,x6e),e(x6e,iOr),e($n,dOr),e(Or,cOr),e(Or,ye),e(ye,W0),e(W0,$6e),e($6e,mOr),e(W0,fOr),e(W0,tre),e(tre,gOr),e(W0,hOr),e(ye,uOr),e(ye,U0),e(U0,k6e),e(k6e,pOr),e(U0,_Or),e(U0,are),e(are,bOr),e(U0,vOr),e(ye,FOr),e(ye,H0),e(H0,S6e),e(S6e,TOr),e(H0,MOr),e(H0,nre),e(nre,EOr),e(H0,COr),e(ye,wOr),e(ye,J0),e(J0,R6e),e(R6e,AOr),e(J0,LOr),e(J0,sre),e(sre,yOr),e(J0,xOr),e(ye,$Or),e(ye,Y0),e(Y0,P6e),e(P6e,kOr),e(Y0,SOr),e(Y0,lre),e(lre,ROr),e(Y0,POr),e(ye,BOr),e(ye,K0),e(K0,B6e),e(B6e,IOr),e(K0,NOr),e(K0,ire),e(ire,qOr),e(K0,jOr),e(ye,DOr),e(ye,Z0),e(Z0,I6e),e(I6e,GOr),e(Z0,OOr),e(Z0,dre),e(dre,VOr),e(Z0,XOr),e(ye,zOr),e(ye,ew),e(ew,N6e),e(N6e,QOr),e(ew,WOr),e(ew,cre),e(cre,UOr),e(ew,HOr),e(ye,JOr),e(ye,ow),e(ow,q6e),e(q6e,YOr),e(ow,KOr),e(ow,mre),e(mre,ZOr),e(ow,eVr),e(ye,oVr),e(ye,rw),e(rw,j6e),e(j6e,rVr),e(rw,tVr),e(rw,fre),e(fre,aVr),e(rw,nVr),e(Or,sVr),M(tw,Or,null),b(m,BZe,_),b(m,cm,_),e(cm,aw),e(aw,D6e),M(iS,D6e,null),e(cm,lVr),e(cm,G6e),e(G6e,iVr),b(m,IZe,_),b(m,gr,_),M(dS,gr,null),e(gr,dVr),e(gr,mm),e(mm,cVr),e(mm,gre),e(gre,mVr),e(mm,fVr),e(mm,hre),e(hre,gVr),e(mm,hVr),e(gr,uVr),e(gr,cS),e(cS,pVr),e(cS,O6e),e(O6e,_Vr),e(cS,bVr),e(gr,vVr),e(gr,Yt),M(mS,Yt,null),e(Yt,FVr),e(Yt,V6e),e(V6e,TVr),e(Yt,MVr),e(Yt,fm),e(fm,EVr),e(fm,X6e),e(X6e,CVr),e(fm,wVr),e(fm,ure),e(ure,AVr),e(fm,LVr),e(Yt,yVr),M(nw,Yt,null),e(gr,xVr),e(gr,Vr),M(fS,Vr,null),e(Vr,$Vr),e(Vr,z6e),e(z6e,kVr),e(Vr,SVr),e(Vr,kn),e(kn,RVr),e(kn,Q6e),e(Q6e,PVr),e(kn,BVr),e(kn,W6e),e(W6e,IVr),e(kn,NVr),e(kn,U6e),e(U6e,qVr),e(kn,jVr),e(Vr,DVr),e(Vr,re),e(re,sw),e(sw,H6e),e(H6e,GVr),e(sw,OVr),e(sw,pre),e(pre,VVr),e(sw,XVr),e(re,zVr),e(re,lw),e(lw,J6e),e(J6e,QVr),e(lw,WVr),e(lw,_re),e(_re,UVr),e(lw,HVr),e(re,JVr),e(re,iw),e(iw,Y6e),e(Y6e,YVr),e(iw,KVr),e(iw,bre),e(bre,ZVr),e(iw,eXr),e(re,oXr),e(re,dw),e(dw,K6e),e(K6e,rXr),e(dw,tXr),e(dw,vre),e(vre,aXr),e(dw,nXr),e(re,sXr),e(re,cw),e(cw,Z6e),e(Z6e,lXr),e(cw,iXr),e(cw,Fre),e(Fre,dXr),e(cw,cXr),e(re,mXr),e(re,mw),e(mw,e7e),e(e7e,fXr),e(mw,gXr),e(mw,Tre),e(Tre,hXr),e(mw,uXr),e(re,pXr),e(re,fw),e(fw,o7e),e(o7e,_Xr),e(fw,bXr),e(fw,Mre),e(Mre,vXr),e(fw,FXr),e(re,TXr),e(re,gw),e(gw,r7e),e(r7e,MXr),e(gw,EXr),e(gw,Ere),e(Ere,CXr),e(gw,wXr),e(re,AXr),e(re,hw),e(hw,t7e),e(t7e,LXr),e(hw,yXr),e(hw,Cre),e(Cre,xXr),e(hw,$Xr),e(re,kXr),e(re,uw),e(uw,a7e),e(a7e,SXr),e(uw,RXr),e(uw,wre),e(wre,PXr),e(uw,BXr),e(re,IXr),e(re,pw),e(pw,n7e),e(n7e,NXr),e(pw,qXr),e(pw,Are),e(Are,jXr),e(pw,DXr),e(re,GXr),e(re,_w),e(_w,s7e),e(s7e,OXr),e(_w,VXr),e(_w,Lre),e(Lre,XXr),e(_w,zXr),e(re,QXr),e(re,bw),e(bw,l7e),e(l7e,WXr),e(bw,UXr),e(bw,yre),e(yre,HXr),e(bw,JXr),e(re,YXr),e(re,vw),e(vw,i7e),e(i7e,KXr),e(vw,ZXr),e(vw,xre),e(xre,ezr),e(vw,ozr),e(re,rzr),e(re,Fw),e(Fw,d7e),e(d7e,tzr),e(Fw,azr),e(Fw,$re),e($re,nzr),e(Fw,szr),e(re,lzr),e(re,Tw),e(Tw,c7e),e(c7e,izr),e(Tw,dzr),e(Tw,kre),e(kre,czr),e(Tw,mzr),e(re,fzr),e(re,Mw),e(Mw,m7e),e(m7e,gzr),e(Mw,hzr),e(Mw,Sre),e(Sre,uzr),e(Mw,pzr),e(re,_zr),e(re,Ew),e(Ew,f7e),e(f7e,bzr),e(Ew,vzr),e(Ew,Rre),e(Rre,Fzr),e(Ew,Tzr),e(re,Mzr),e(re,Cw),e(Cw,g7e),e(g7e,Ezr),e(Cw,Czr),e(Cw,Pre),e(Pre,wzr),e(Cw,Azr),e(re,Lzr),e(re,ww),e(ww,h7e),e(h7e,yzr),e(ww,xzr),e(ww,Bre),e(Bre,$zr),e(ww,kzr),e(re,Szr),e(re,Aw),e(Aw,u7e),e(u7e,Rzr),e(Aw,Pzr),e(Aw,Ire),e(Ire,Bzr),e(Aw,Izr),e(re,Nzr),e(re,Lw),e(Lw,p7e),e(p7e,qzr),e(Lw,jzr),e(Lw,Nre),e(Nre,Dzr),e(Lw,Gzr),e(re,Ozr),e(re,yw),e(yw,_7e),e(_7e,Vzr),e(yw,Xzr),e(yw,qre),e(qre,zzr),e(yw,Qzr),e(re,Wzr),e(re,xw),e(xw,b7e),e(b7e,Uzr),e(xw,Hzr),e(xw,jre),e(jre,Jzr),e(xw,Yzr),e(re,Kzr),e(re,$w),e($w,v7e),e(v7e,Zzr),e($w,eQr),e($w,Dre),e(Dre,oQr),e($w,rQr),e(re,tQr),e(re,kw),e(kw,F7e),e(F7e,aQr),e(kw,nQr),e(kw,Gre),e(Gre,sQr),e(kw,lQr),e(re,iQr),e(re,Sw),e(Sw,T7e),e(T7e,dQr),e(Sw,cQr),e(Sw,Ore),e(Ore,mQr),e(Sw,fQr),e(Vr,gQr),M(Rw,Vr,null),b(m,NZe,_),b(m,gm,_),e(gm,Pw),e(Pw,M7e),M(gS,M7e,null),e(gm,hQr),e(gm,E7e),e(E7e,uQr),b(m,qZe,_),b(m,hr,_),M(hS,hr,null),e(hr,pQr),e(hr,hm),e(hm,_Qr),e(hm,Vre),e(Vre,bQr),e(hm,vQr),e(hm,Xre),e(Xre,FQr),e(hm,TQr),e(hr,MQr),e(hr,uS),e(uS,EQr),e(uS,C7e),e(C7e,CQr),e(uS,wQr),e(hr,AQr),e(hr,Kt),M(pS,Kt,null),e(Kt,LQr),e(Kt,w7e),e(w7e,yQr),e(Kt,xQr),e(Kt,um),e(um,$Qr),e(um,A7e),e(A7e,kQr),e(um,SQr),e(um,zre),e(zre,RQr),e(um,PQr),e(Kt,BQr),M(Bw,Kt,null),e(hr,IQr),e(hr,Xr),M(_S,Xr,null),e(Xr,NQr),e(Xr,L7e),e(L7e,qQr),e(Xr,jQr),e(Xr,Sn),e(Sn,DQr),e(Sn,y7e),e(y7e,GQr),e(Sn,OQr),e(Sn,x7e),e(x7e,VQr),e(Sn,XQr),e(Sn,$7e),e($7e,zQr),e(Sn,QQr),e(Xr,WQr),e(Xr,ve),e(ve,Iw),e(Iw,k7e),e(k7e,UQr),e(Iw,HQr),e(Iw,Qre),e(Qre,JQr),e(Iw,YQr),e(ve,KQr),e(ve,Nw),e(Nw,S7e),e(S7e,ZQr),e(Nw,eWr),e(Nw,Wre),e(Wre,oWr),e(Nw,rWr),e(ve,tWr),e(ve,qw),e(qw,R7e),e(R7e,aWr),e(qw,nWr),e(qw,Ure),e(Ure,sWr),e(qw,lWr),e(ve,iWr),e(ve,jw),e(jw,P7e),e(P7e,dWr),e(jw,cWr),e(jw,Hre),e(Hre,mWr),e(jw,fWr),e(ve,gWr),e(ve,Dw),e(Dw,B7e),e(B7e,hWr),e(Dw,uWr),e(Dw,Jre),e(Jre,pWr),e(Dw,_Wr),e(ve,bWr),e(ve,Gw),e(Gw,I7e),e(I7e,vWr),e(Gw,FWr),e(Gw,Yre),e(Yre,TWr),e(Gw,MWr),e(ve,EWr),e(ve,Ow),e(Ow,N7e),e(N7e,CWr),e(Ow,wWr),e(Ow,Kre),e(Kre,AWr),e(Ow,LWr),e(ve,yWr),e(ve,Vw),e(Vw,q7e),e(q7e,xWr),e(Vw,$Wr),e(Vw,Zre),e(Zre,kWr),e(Vw,SWr),e(ve,RWr),e(ve,Xw),e(Xw,j7e),e(j7e,PWr),e(Xw,BWr),e(Xw,ete),e(ete,IWr),e(Xw,NWr),e(ve,qWr),e(ve,zw),e(zw,D7e),e(D7e,jWr),e(zw,DWr),e(zw,ote),e(ote,GWr),e(zw,OWr),e(ve,VWr),e(ve,Qw),e(Qw,G7e),e(G7e,XWr),e(Qw,zWr),e(Qw,rte),e(rte,QWr),e(Qw,WWr),e(ve,UWr),e(ve,Ww),e(Ww,O7e),e(O7e,HWr),e(Ww,JWr),e(Ww,tte),e(tte,YWr),e(Ww,KWr),e(ve,ZWr),e(ve,Uw),e(Uw,V7e),e(V7e,eUr),e(Uw,oUr),e(Uw,ate),e(ate,rUr),e(Uw,tUr),e(ve,aUr),e(ve,Hw),e(Hw,X7e),e(X7e,nUr),e(Hw,sUr),e(Hw,nte),e(nte,lUr),e(Hw,iUr),e(ve,dUr),e(ve,Jw),e(Jw,z7e),e(z7e,cUr),e(Jw,mUr),e(Jw,ste),e(ste,fUr),e(Jw,gUr),e(ve,hUr),e(ve,Yw),e(Yw,Q7e),e(Q7e,uUr),e(Yw,pUr),e(Yw,lte),e(lte,_Ur),e(Yw,bUr),e(ve,vUr),e(ve,Kw),e(Kw,W7e),e(W7e,FUr),e(Kw,TUr),e(Kw,ite),e(ite,MUr),e(Kw,EUr),e(Xr,CUr),M(Zw,Xr,null),b(m,jZe,_),b(m,pm,_),e(pm,eA),e(eA,U7e),M(bS,U7e,null),e(pm,wUr),e(pm,H7e),e(H7e,AUr),b(m,DZe,_),b(m,ur,_),M(vS,ur,null),e(ur,LUr),e(ur,_m),e(_m,yUr),e(_m,dte),e(dte,xUr),e(_m,$Ur),e(_m,cte),e(cte,kUr),e(_m,SUr),e(ur,RUr),e(ur,FS),e(FS,PUr),e(FS,J7e),e(J7e,BUr),e(FS,IUr),e(ur,NUr),e(ur,Zt),M(TS,Zt,null),e(Zt,qUr),e(Zt,Y7e),e(Y7e,jUr),e(Zt,DUr),e(Zt,bm),e(bm,GUr),e(bm,K7e),e(K7e,OUr),e(bm,VUr),e(bm,mte),e(mte,XUr),e(bm,zUr),e(Zt,QUr),M(oA,Zt,null),e(ur,WUr),e(ur,zr),M(MS,zr,null),e(zr,UUr),e(zr,Z7e),e(Z7e,HUr),e(zr,JUr),e(zr,Rn),e(Rn,YUr),e(Rn,eLe),e(eLe,KUr),e(Rn,ZUr),e(Rn,oLe),e(oLe,eHr),e(Rn,oHr),e(Rn,rLe),e(rLe,rHr),e(Rn,tHr),e(zr,aHr),e(zr,ES),e(ES,rA),e(rA,tLe),e(tLe,nHr),e(rA,sHr),e(rA,fte),e(fte,lHr),e(rA,iHr),e(ES,dHr),e(ES,tA),e(tA,aLe),e(aLe,cHr),e(tA,mHr),e(tA,gte),e(gte,fHr),e(tA,gHr),e(zr,hHr),M(aA,zr,null),b(m,GZe,_),b(m,vm,_),e(vm,nA),e(nA,nLe),M(CS,nLe,null),e(vm,uHr),e(vm,sLe),e(sLe,pHr),b(m,OZe,_),b(m,pr,_),M(wS,pr,null),e(pr,_Hr),e(pr,Fm),e(Fm,bHr),e(Fm,hte),e(hte,vHr),e(Fm,FHr),e(Fm,ute),e(ute,THr),e(Fm,MHr),e(pr,EHr),e(pr,AS),e(AS,CHr),e(AS,lLe),e(lLe,wHr),e(AS,AHr),e(pr,LHr),e(pr,ea),M(LS,ea,null),e(ea,yHr),e(ea,iLe),e(iLe,xHr),e(ea,$Hr),e(ea,Tm),e(Tm,kHr),e(Tm,dLe),e(dLe,SHr),e(Tm,RHr),e(Tm,pte),e(pte,PHr),e(Tm,BHr),e(ea,IHr),M(sA,ea,null),e(pr,NHr),e(pr,Qr),M(yS,Qr,null),e(Qr,qHr),e(Qr,cLe),e(cLe,jHr),e(Qr,DHr),e(Qr,Pn),e(Pn,GHr),e(Pn,mLe),e(mLe,OHr),e(Pn,VHr),e(Pn,fLe),e(fLe,XHr),e(Pn,zHr),e(Pn,gLe),e(gLe,QHr),e(Pn,WHr),e(Qr,UHr),e(Qr,hLe),e(hLe,lA),e(lA,uLe),e(uLe,HHr),e(lA,JHr),e(lA,_te),e(_te,YHr),e(lA,KHr),e(Qr,ZHr),M(iA,Qr,null),b(m,VZe,_),b(m,Mm,_),e(Mm,dA),e(dA,pLe),M(xS,pLe,null),e(Mm,eJr),e(Mm,_Le),e(_Le,oJr),b(m,XZe,_),b(m,_r,_),M($S,_r,null),e(_r,rJr),e(_r,Em),e(Em,tJr),e(Em,bte),e(bte,aJr),e(Em,nJr),e(Em,vte),e(vte,sJr),e(Em,lJr),e(_r,iJr),e(_r,kS),e(kS,dJr),e(kS,bLe),e(bLe,cJr),e(kS,mJr),e(_r,fJr),e(_r,oa),M(SS,oa,null),e(oa,gJr),e(oa,vLe),e(vLe,hJr),e(oa,uJr),e(oa,Cm),e(Cm,pJr),e(Cm,FLe),e(FLe,_Jr),e(Cm,bJr),e(Cm,Fte),e(Fte,vJr),e(Cm,FJr),e(oa,TJr),M(cA,oa,null),e(_r,MJr),e(_r,Wr),M(RS,Wr,null),e(Wr,EJr),e(Wr,TLe),e(TLe,CJr),e(Wr,wJr),e(Wr,Bn),e(Bn,AJr),e(Bn,MLe),e(MLe,LJr),e(Bn,yJr),e(Bn,ELe),e(ELe,xJr),e(Bn,$Jr),e(Bn,CLe),e(CLe,kJr),e(Bn,SJr),e(Wr,RJr),e(Wr,wLe),e(wLe,mA),e(mA,ALe),e(ALe,PJr),e(mA,BJr),e(mA,Tte),e(Tte,IJr),e(mA,NJr),e(Wr,qJr),M(fA,Wr,null),b(m,zZe,_),b(m,wm,_),e(wm,gA),e(gA,LLe),M(PS,LLe,null),e(wm,jJr),e(wm,yLe),e(yLe,DJr),b(m,QZe,_),b(m,br,_),M(BS,br,null),e(br,GJr),e(br,Am),e(Am,OJr),e(Am,Mte),e(Mte,VJr),e(Am,XJr),e(Am,Ete),e(Ete,zJr),e(Am,QJr),e(br,WJr),e(br,IS),e(IS,UJr),e(IS,xLe),e(xLe,HJr),e(IS,JJr),e(br,YJr),e(br,ra),M(NS,ra,null),e(ra,KJr),e(ra,$Le),e($Le,ZJr),e(ra,eYr),e(ra,Lm),e(Lm,oYr),e(Lm,kLe),e(kLe,rYr),e(Lm,tYr),e(Lm,Cte),e(Cte,aYr),e(Lm,nYr),e(ra,sYr),M(hA,ra,null),e(br,lYr),e(br,Ur),M(qS,Ur,null),e(Ur,iYr),e(Ur,SLe),e(SLe,dYr),e(Ur,cYr),e(Ur,In),e(In,mYr),e(In,RLe),e(RLe,fYr),e(In,gYr),e(In,PLe),e(PLe,hYr),e(In,uYr),e(In,BLe),e(BLe,pYr),e(In,_Yr),e(Ur,bYr),e(Ur,de),e(de,uA),e(uA,ILe),e(ILe,vYr),e(uA,FYr),e(uA,wte),e(wte,TYr),e(uA,MYr),e(de,EYr),e(de,pA),e(pA,NLe),e(NLe,CYr),e(pA,wYr),e(pA,Ate),e(Ate,AYr),e(pA,LYr),e(de,yYr),e(de,_A),e(_A,qLe),e(qLe,xYr),e(_A,$Yr),e(_A,Lte),e(Lte,kYr),e(_A,SYr),e(de,RYr),e(de,bA),e(bA,jLe),e(jLe,PYr),e(bA,BYr),e(bA,yte),e(yte,IYr),e(bA,NYr),e(de,qYr),e(de,vA),e(vA,DLe),e(DLe,jYr),e(vA,DYr),e(vA,xte),e(xte,GYr),e(vA,OYr),e(de,VYr),e(de,FA),e(FA,GLe),e(GLe,XYr),e(FA,zYr),e(FA,$te),e($te,QYr),e(FA,WYr),e(de,UYr),e(de,TA),e(TA,OLe),e(OLe,HYr),e(TA,JYr),e(TA,kte),e(kte,YYr),e(TA,KYr),e(de,ZYr),e(de,MA),e(MA,VLe),e(VLe,eKr),e(MA,oKr),e(MA,Ste),e(Ste,rKr),e(MA,tKr),e(de,aKr),e(de,EA),e(EA,XLe),e(XLe,nKr),e(EA,sKr),e(EA,Rte),e(Rte,lKr),e(EA,iKr),e(de,dKr),e(de,CA),e(CA,zLe),e(zLe,cKr),e(CA,mKr),e(CA,Pte),e(Pte,fKr),e(CA,gKr),e(de,hKr),e(de,wA),e(wA,QLe),e(QLe,uKr),e(wA,pKr),e(wA,Bte),e(Bte,_Kr),e(wA,bKr),e(de,vKr),e(de,AA),e(AA,WLe),e(WLe,FKr),e(AA,TKr),e(AA,Ite),e(Ite,MKr),e(AA,EKr),e(de,CKr),e(de,LA),e(LA,ULe),e(ULe,wKr),e(LA,AKr),e(LA,Nte),e(Nte,LKr),e(LA,yKr),e(de,xKr),e(de,yA),e(yA,HLe),e(HLe,$Kr),e(yA,kKr),e(yA,qte),e(qte,SKr),e(yA,RKr),e(de,PKr),e(de,xA),e(xA,JLe),e(JLe,BKr),e(xA,IKr),e(xA,jte),e(jte,NKr),e(xA,qKr),e(de,jKr),e(de,$A),e($A,YLe),e(YLe,DKr),e($A,GKr),e($A,Dte),e(Dte,OKr),e($A,VKr),e(de,XKr),e(de,kA),e(kA,KLe),e(KLe,zKr),e(kA,QKr),e(kA,Gte),e(Gte,WKr),e(kA,UKr),e(de,HKr),e(de,SA),e(SA,ZLe),e(ZLe,JKr),e(SA,YKr),e(SA,Ote),e(Ote,KKr),e(SA,ZKr),e(de,eZr),e(de,RA),e(RA,eye),e(eye,oZr),e(RA,rZr),e(RA,Vte),e(Vte,tZr),e(RA,aZr),e(de,nZr),e(de,PA),e(PA,oye),e(oye,sZr),e(PA,lZr),e(PA,Xte),e(Xte,iZr),e(PA,dZr),e(de,cZr),e(de,BA),e(BA,rye),e(rye,mZr),e(BA,fZr),e(BA,zte),e(zte,gZr),e(BA,hZr),e(Ur,uZr),M(IA,Ur,null),b(m,WZe,_),b(m,ym,_),e(ym,NA),e(NA,tye),M(jS,tye,null),e(ym,pZr),e(ym,aye),e(aye,_Zr),b(m,UZe,_),b(m,vr,_),M(DS,vr,null),e(vr,bZr),e(vr,xm),e(xm,vZr),e(xm,Qte),e(Qte,FZr),e(xm,TZr),e(xm,Wte),e(Wte,MZr),e(xm,EZr),e(vr,CZr),e(vr,GS),e(GS,wZr),e(GS,nye),e(nye,AZr),e(GS,LZr),e(vr,yZr),e(vr,ta),M(OS,ta,null),e(ta,xZr),e(ta,sye),e(sye,$Zr),e(ta,kZr),e(ta,$m),e($m,SZr),e($m,lye),e(lye,RZr),e($m,PZr),e($m,Ute),e(Ute,BZr),e($m,IZr),e(ta,NZr),M(qA,ta,null),e(vr,qZr),e(vr,Hr),M(VS,Hr,null),e(Hr,jZr),e(Hr,iye),e(iye,DZr),e(Hr,GZr),e(Hr,Nn),e(Nn,OZr),e(Nn,dye),e(dye,VZr),e(Nn,XZr),e(Nn,cye),e(cye,zZr),e(Nn,QZr),e(Nn,mye),e(mye,WZr),e(Nn,UZr),e(Hr,HZr),e(Hr,ce),e(ce,jA),e(jA,fye),e(fye,JZr),e(jA,YZr),e(jA,Hte),e(Hte,KZr),e(jA,ZZr),e(ce,eet),e(ce,DA),e(DA,gye),e(gye,oet),e(DA,ret),e(DA,Jte),e(Jte,tet),e(DA,aet),e(ce,net),e(ce,GA),e(GA,hye),e(hye,set),e(GA,iet),e(GA,Yte),e(Yte,det),e(GA,cet),e(ce,met),e(ce,OA),e(OA,uye),e(uye,fet),e(OA,get),e(OA,Kte),e(Kte,het),e(OA,uet),e(ce,pet),e(ce,VA),e(VA,pye),e(pye,_et),e(VA,bet),e(VA,Zte),e(Zte,vet),e(VA,Fet),e(ce,Tet),e(ce,XA),e(XA,_ye),e(_ye,Met),e(XA,Eet),e(XA,eae),e(eae,Cet),e(XA,wet),e(ce,Aet),e(ce,zA),e(zA,bye),e(bye,Let),e(zA,yet),e(zA,oae),e(oae,xet),e(zA,$et),e(ce,ket),e(ce,QA),e(QA,vye),e(vye,Set),e(QA,Ret),e(QA,rae),e(rae,Pet),e(QA,Bet),e(ce,Iet),e(ce,WA),e(WA,Fye),e(Fye,Net),e(WA,qet),e(WA,tae),e(tae,jet),e(WA,Det),e(ce,Get),e(ce,UA),e(UA,Tye),e(Tye,Oet),e(UA,Vet),e(UA,aae),e(aae,Xet),e(UA,zet),e(ce,Qet),e(ce,HA),e(HA,Mye),e(Mye,Wet),e(HA,Uet),e(HA,nae),e(nae,Het),e(HA,Jet),e(ce,Yet),e(ce,JA),e(JA,Eye),e(Eye,Ket),e(JA,Zet),e(JA,sae),e(sae,eot),e(JA,oot),e(ce,rot),e(ce,YA),e(YA,Cye),e(Cye,tot),e(YA,aot),e(YA,lae),e(lae,not),e(YA,sot),e(ce,lot),e(ce,KA),e(KA,wye),e(wye,iot),e(KA,dot),e(KA,iae),e(iae,cot),e(KA,mot),e(ce,fot),e(ce,ZA),e(ZA,Aye),e(Aye,got),e(ZA,hot),e(ZA,dae),e(dae,uot),e(ZA,pot),e(ce,_ot),e(ce,e6),e(e6,Lye),e(Lye,bot),e(e6,vot),e(e6,cae),e(cae,Fot),e(e6,Tot),e(ce,Mot),e(ce,o6),e(o6,yye),e(yye,Eot),e(o6,Cot),e(o6,mae),e(mae,wot),e(o6,Aot),e(ce,Lot),e(ce,r6),e(r6,xye),e(xye,yot),e(r6,xot),e(r6,fae),e(fae,$ot),e(r6,kot),e(ce,Sot),e(ce,t6),e(t6,$ye),e($ye,Rot),e(t6,Pot),e(t6,gae),e(gae,Bot),e(t6,Iot),e(ce,Not),e(ce,a6),e(a6,kye),e(kye,qot),e(a6,jot),e(a6,hae),e(hae,Dot),e(a6,Got),e(ce,Oot),e(ce,n6),e(n6,Sye),e(Sye,Vot),e(n6,Xot),e(n6,uae),e(uae,zot),e(n6,Qot),e(Hr,Wot),M(s6,Hr,null),b(m,HZe,_),b(m,km,_),e(km,l6),e(l6,Rye),M(XS,Rye,null),e(km,Uot),e(km,Pye),e(Pye,Hot),b(m,JZe,_),b(m,Fr,_),M(zS,Fr,null),e(Fr,Jot),e(Fr,Sm),e(Sm,Yot),e(Sm,pae),e(pae,Kot),e(Sm,Zot),e(Sm,_ae),e(_ae,ert),e(Sm,ort),e(Fr,rrt),e(Fr,QS),e(QS,trt),e(QS,Bye),e(Bye,art),e(QS,nrt),e(Fr,srt),e(Fr,aa),M(WS,aa,null),e(aa,lrt),e(aa,Iye),e(Iye,irt),e(aa,drt),e(aa,Rm),e(Rm,crt),e(Rm,Nye),e(Nye,mrt),e(Rm,frt),e(Rm,bae),e(bae,grt),e(Rm,hrt),e(aa,urt),M(i6,aa,null),e(Fr,prt),e(Fr,Jr),M(US,Jr,null),e(Jr,_rt),e(Jr,qye),e(qye,brt),e(Jr,vrt),e(Jr,qn),e(qn,Frt),e(qn,jye),e(jye,Trt),e(qn,Mrt),e(qn,Dye),e(Dye,Ert),e(qn,Crt),e(qn,Gye),e(Gye,wrt),e(qn,Art),e(Jr,Lrt),e(Jr,Oye),e(Oye,d6),e(d6,Vye),e(Vye,yrt),e(d6,xrt),e(d6,vae),e(vae,$rt),e(d6,krt),e(Jr,Srt),M(c6,Jr,null),b(m,YZe,_),b(m,Pm,_),e(Pm,m6),e(m6,Xye),M(HS,Xye,null),e(Pm,Rrt),e(Pm,zye),e(zye,Prt),b(m,KZe,_),b(m,Tr,_),M(JS,Tr,null),e(Tr,Brt),e(Tr,Bm),e(Bm,Irt),e(Bm,Fae),e(Fae,Nrt),e(Bm,qrt),e(Bm,Tae),e(Tae,jrt),e(Bm,Drt),e(Tr,Grt),e(Tr,YS),e(YS,Ort),e(YS,Qye),e(Qye,Vrt),e(YS,Xrt),e(Tr,zrt),e(Tr,na),M(KS,na,null),e(na,Qrt),e(na,Wye),e(Wye,Wrt),e(na,Urt),e(na,Im),e(Im,Hrt),e(Im,Uye),e(Uye,Jrt),e(Im,Yrt),e(Im,Mae),e(Mae,Krt),e(Im,Zrt),e(na,ett),M(f6,na,null),e(Tr,ott),e(Tr,Yr),M(ZS,Yr,null),e(Yr,rtt),e(Yr,Hye),e(Hye,ttt),e(Yr,att),e(Yr,jn),e(jn,ntt),e(jn,Jye),e(Jye,stt),e(jn,ltt),e(jn,Yye),e(Yye,itt),e(jn,dtt),e(jn,Kye),e(Kye,ctt),e(jn,mtt),e(Yr,ftt),e(Yr,Zye),e(Zye,g6),e(g6,e8e),e(e8e,gtt),e(g6,htt),e(g6,Eae),e(Eae,utt),e(g6,ptt),e(Yr,_tt),M(h6,Yr,null),b(m,ZZe,_),b(m,Nm,_),e(Nm,u6),e(u6,o8e),M(eR,o8e,null),e(Nm,btt),e(Nm,r8e),e(r8e,vtt),b(m,eeo,_),b(m,Mr,_),M(oR,Mr,null),e(Mr,Ftt),e(Mr,qm),e(qm,Ttt),e(qm,Cae),e(Cae,Mtt),e(qm,Ett),e(qm,wae),e(wae,Ctt),e(qm,wtt),e(Mr,Att),e(Mr,rR),e(rR,Ltt),e(rR,t8e),e(t8e,ytt),e(rR,xtt),e(Mr,$tt),e(Mr,sa),M(tR,sa,null),e(sa,ktt),e(sa,a8e),e(a8e,Stt),e(sa,Rtt),e(sa,jm),e(jm,Ptt),e(jm,n8e),e(n8e,Btt),e(jm,Itt),e(jm,Aae),e(Aae,Ntt),e(jm,qtt),e(sa,jtt),M(p6,sa,null),e(Mr,Dtt),e(Mr,Kr),M(aR,Kr,null),e(Kr,Gtt),e(Kr,s8e),e(s8e,Ott),e(Kr,Vtt),e(Kr,Dn),e(Dn,Xtt),e(Dn,l8e),e(l8e,ztt),e(Dn,Qtt),e(Dn,i8e),e(i8e,Wtt),e(Dn,Utt),e(Dn,d8e),e(d8e,Htt),e(Dn,Jtt),e(Kr,Ytt),e(Kr,te),e(te,_6),e(_6,c8e),e(c8e,Ktt),e(_6,Ztt),e(_6,Lae),e(Lae,eat),e(_6,oat),e(te,rat),e(te,b6),e(b6,m8e),e(m8e,tat),e(b6,aat),e(b6,yae),e(yae,nat),e(b6,sat),e(te,lat),e(te,v6),e(v6,f8e),e(f8e,iat),e(v6,dat),e(v6,xae),e(xae,cat),e(v6,mat),e(te,fat),e(te,F6),e(F6,g8e),e(g8e,gat),e(F6,hat),e(F6,$ae),e($ae,uat),e(F6,pat),e(te,_at),e(te,T6),e(T6,h8e),e(h8e,bat),e(T6,vat),e(T6,kae),e(kae,Fat),e(T6,Tat),e(te,Mat),e(te,M6),e(M6,u8e),e(u8e,Eat),e(M6,Cat),e(M6,Sae),e(Sae,wat),e(M6,Aat),e(te,Lat),e(te,E6),e(E6,p8e),e(p8e,yat),e(E6,xat),e(E6,Rae),e(Rae,$at),e(E6,kat),e(te,Sat),e(te,C6),e(C6,_8e),e(_8e,Rat),e(C6,Pat),e(C6,Pae),e(Pae,Bat),e(C6,Iat),e(te,Nat),e(te,w6),e(w6,b8e),e(b8e,qat),e(w6,jat),e(w6,Bae),e(Bae,Dat),e(w6,Gat),e(te,Oat),e(te,A6),e(A6,v8e),e(v8e,Vat),e(A6,Xat),e(A6,Iae),e(Iae,zat),e(A6,Qat),e(te,Wat),e(te,L6),e(L6,F8e),e(F8e,Uat),e(L6,Hat),e(L6,Nae),e(Nae,Jat),e(L6,Yat),e(te,Kat),e(te,y6),e(y6,T8e),e(T8e,Zat),e(y6,ent),e(y6,qae),e(qae,ont),e(y6,rnt),e(te,tnt),e(te,x6),e(x6,M8e),e(M8e,ant),e(x6,nnt),e(x6,jae),e(jae,snt),e(x6,lnt),e(te,int),e(te,$6),e($6,E8e),e(E8e,dnt),e($6,cnt),e($6,Dae),e(Dae,mnt),e($6,fnt),e(te,gnt),e(te,k6),e(k6,C8e),e(C8e,hnt),e(k6,unt),e(k6,Gae),e(Gae,pnt),e(k6,_nt),e(te,bnt),e(te,S6),e(S6,w8e),e(w8e,vnt),e(S6,Fnt),e(S6,Oae),e(Oae,Tnt),e(S6,Mnt),e(te,Ent),e(te,R6),e(R6,A8e),e(A8e,Cnt),e(R6,wnt),e(R6,Vae),e(Vae,Ant),e(R6,Lnt),e(te,ynt),e(te,P6),e(P6,L8e),e(L8e,xnt),e(P6,$nt),e(P6,Xae),e(Xae,knt),e(P6,Snt),e(te,Rnt),e(te,B6),e(B6,y8e),e(y8e,Pnt),e(B6,Bnt),e(B6,zae),e(zae,Int),e(B6,Nnt),e(te,qnt),e(te,I6),e(I6,x8e),e(x8e,jnt),e(I6,Dnt),e(I6,Qae),e(Qae,Gnt),e(I6,Ont),e(te,Vnt),e(te,N6),e(N6,$8e),e($8e,Xnt),e(N6,znt),e(N6,Wae),e(Wae,Qnt),e(N6,Wnt),e(te,Unt),e(te,q6),e(q6,k8e),e(k8e,Hnt),e(q6,Jnt),e(q6,Uae),e(Uae,Ynt),e(q6,Knt),e(te,Znt),e(te,j6),e(j6,S8e),e(S8e,est),e(j6,ost),e(j6,Hae),e(Hae,rst),e(j6,tst),e(te,ast),e(te,D6),e(D6,R8e),e(R8e,nst),e(D6,sst),e(D6,Jae),e(Jae,lst),e(D6,ist),e(te,dst),e(te,G6),e(G6,P8e),e(P8e,cst),e(G6,mst),e(G6,Yae),e(Yae,fst),e(G6,gst),e(te,hst),e(te,O6),e(O6,B8e),e(B8e,ust),e(O6,pst),e(O6,Kae),e(Kae,_st),e(O6,bst),e(te,vst),e(te,V6),e(V6,I8e),e(I8e,Fst),e(V6,Tst),e(V6,Zae),e(Zae,Mst),e(V6,Est),e(Kr,Cst),M(X6,Kr,null),b(m,oeo,_),b(m,Dm,_),e(Dm,z6),e(z6,N8e),M(nR,N8e,null),e(Dm,wst),e(Dm,q8e),e(q8e,Ast),b(m,reo,_),b(m,Er,_),M(sR,Er,null),e(Er,Lst),e(Er,Gm),e(Gm,yst),e(Gm,ene),e(ene,xst),e(Gm,$st),e(Gm,one),e(one,kst),e(Gm,Sst),e(Er,Rst),e(Er,lR),e(lR,Pst),e(lR,j8e),e(j8e,Bst),e(lR,Ist),e(Er,Nst),e(Er,la),M(iR,la,null),e(la,qst),e(la,D8e),e(D8e,jst),e(la,Dst),e(la,Om),e(Om,Gst),e(Om,G8e),e(G8e,Ost),e(Om,Vst),e(Om,rne),e(rne,Xst),e(Om,zst),e(la,Qst),M(Q6,la,null),e(Er,Wst),e(Er,Zr),M(dR,Zr,null),e(Zr,Ust),e(Zr,O8e),e(O8e,Hst),e(Zr,Jst),e(Zr,Gn),e(Gn,Yst),e(Gn,V8e),e(V8e,Kst),e(Gn,Zst),e(Gn,X8e),e(X8e,elt),e(Gn,olt),e(Gn,z8e),e(z8e,rlt),e(Gn,tlt),e(Zr,alt),e(Zr,xe),e(xe,W6),e(W6,Q8e),e(Q8e,nlt),e(W6,slt),e(W6,tne),e(tne,llt),e(W6,ilt),e(xe,dlt),e(xe,U6),e(U6,W8e),e(W8e,clt),e(U6,mlt),e(U6,ane),e(ane,flt),e(U6,glt),e(xe,hlt),e(xe,H6),e(H6,U8e),e(U8e,ult),e(H6,plt),e(H6,nne),e(nne,_lt),e(H6,blt),e(xe,vlt),e(xe,J6),e(J6,H8e),e(H8e,Flt),e(J6,Tlt),e(J6,sne),e(sne,Mlt),e(J6,Elt),e(xe,Clt),e(xe,Y6),e(Y6,J8e),e(J8e,wlt),e(Y6,Alt),e(Y6,lne),e(lne,Llt),e(Y6,ylt),e(xe,xlt),e(xe,K6),e(K6,Y8e),e(Y8e,$lt),e(K6,klt),e(K6,ine),e(ine,Slt),e(K6,Rlt),e(xe,Plt),e(xe,Z6),e(Z6,K8e),e(K8e,Blt),e(Z6,Ilt),e(Z6,dne),e(dne,Nlt),e(Z6,qlt),e(xe,jlt),e(xe,e7),e(e7,Z8e),e(Z8e,Dlt),e(e7,Glt),e(e7,cne),e(cne,Olt),e(e7,Vlt),e(xe,Xlt),e(xe,o7),e(o7,e9e),e(e9e,zlt),e(o7,Qlt),e(o7,mne),e(mne,Wlt),e(o7,Ult),e(xe,Hlt),e(xe,r7),e(r7,o9e),e(o9e,Jlt),e(r7,Ylt),e(r7,fne),e(fne,Klt),e(r7,Zlt),e(Zr,eit),M(t7,Zr,null),b(m,teo,_),b(m,Vm,_),e(Vm,a7),e(a7,r9e),M(cR,r9e,null),e(Vm,oit),e(Vm,t9e),e(t9e,rit),b(m,aeo,_),b(m,Cr,_),M(mR,Cr,null),e(Cr,tit),e(Cr,Xm),e(Xm,ait),e(Xm,gne),e(gne,nit),e(Xm,sit),e(Xm,hne),e(hne,lit),e(Xm,iit),e(Cr,dit),e(Cr,fR),e(fR,cit),e(fR,a9e),e(a9e,mit),e(fR,fit),e(Cr,git),e(Cr,ia),M(gR,ia,null),e(ia,hit),e(ia,n9e),e(n9e,uit),e(ia,pit),e(ia,zm),e(zm,_it),e(zm,s9e),e(s9e,bit),e(zm,vit),e(zm,une),e(une,Fit),e(zm,Tit),e(ia,Mit),M(n7,ia,null),e(Cr,Eit),e(Cr,et),M(hR,et,null),e(et,Cit),e(et,l9e),e(l9e,wit),e(et,Ait),e(et,On),e(On,Lit),e(On,i9e),e(i9e,yit),e(On,xit),e(On,d9e),e(d9e,$it),e(On,kit),e(On,c9e),e(c9e,Sit),e(On,Rit),e(et,Pit),e(et,Ee),e(Ee,s7),e(s7,m9e),e(m9e,Bit),e(s7,Iit),e(s7,pne),e(pne,Nit),e(s7,qit),e(Ee,jit),e(Ee,l7),e(l7,f9e),e(f9e,Dit),e(l7,Git),e(l7,_ne),e(_ne,Oit),e(l7,Vit),e(Ee,Xit),e(Ee,i7),e(i7,g9e),e(g9e,zit),e(i7,Qit),e(i7,bne),e(bne,Wit),e(i7,Uit),e(Ee,Hit),e(Ee,d7),e(d7,h9e),e(h9e,Jit),e(d7,Yit),e(d7,vne),e(vne,Kit),e(d7,Zit),e(Ee,edt),e(Ee,c7),e(c7,u9e),e(u9e,odt),e(c7,rdt),e(c7,Fne),e(Fne,tdt),e(c7,adt),e(Ee,ndt),e(Ee,m7),e(m7,p9e),e(p9e,sdt),e(m7,ldt),e(m7,Tne),e(Tne,idt),e(m7,ddt),e(Ee,cdt),e(Ee,f7),e(f7,_9e),e(_9e,mdt),e(f7,fdt),e(f7,Mne),e(Mne,gdt),e(f7,hdt),e(Ee,udt),e(Ee,g7),e(g7,b9e),e(b9e,pdt),e(g7,_dt),e(g7,Ene),e(Ene,bdt),e(g7,vdt),e(Ee,Fdt),e(Ee,h7),e(h7,v9e),e(v9e,Tdt),e(h7,Mdt),e(h7,Cne),e(Cne,Edt),e(h7,Cdt),e(Ee,wdt),e(Ee,u7),e(u7,F9e),e(F9e,Adt),e(u7,Ldt),e(u7,wne),e(wne,ydt),e(u7,xdt),e(Ee,$dt),e(Ee,p7),e(p7,T9e),e(T9e,kdt),e(p7,Sdt),e(p7,Ane),e(Ane,Rdt),e(p7,Pdt),e(Ee,Bdt),e(Ee,_7),e(_7,M9e),e(M9e,Idt),e(_7,Ndt),e(_7,Lne),e(Lne,qdt),e(_7,jdt),e(Ee,Ddt),e(Ee,b7),e(b7,E9e),e(E9e,Gdt),e(b7,Odt),e(b7,yne),e(yne,Vdt),e(b7,Xdt),e(et,zdt),M(v7,et,null),b(m,neo,_),b(m,Qm,_),e(Qm,F7),e(F7,C9e),M(uR,C9e,null),e(Qm,Qdt),e(Qm,w9e),e(w9e,Wdt),b(m,seo,_),b(m,wr,_),M(pR,wr,null),e(wr,Udt),e(wr,Wm),e(Wm,Hdt),e(Wm,xne),e(xne,Jdt),e(Wm,Ydt),e(Wm,$ne),e($ne,Kdt),e(Wm,Zdt),e(wr,ect),e(wr,_R),e(_R,oct),e(_R,A9e),e(A9e,rct),e(_R,tct),e(wr,act),e(wr,da),M(bR,da,null),e(da,nct),e(da,L9e),e(L9e,sct),e(da,lct),e(da,Um),e(Um,ict),e(Um,y9e),e(y9e,dct),e(Um,cct),e(Um,kne),e(kne,mct),e(Um,fct),e(da,gct),M(T7,da,null),e(wr,hct),e(wr,ot),M(vR,ot,null),e(ot,uct),e(ot,x9e),e(x9e,pct),e(ot,_ct),e(ot,Vn),e(Vn,bct),e(Vn,$9e),e($9e,vct),e(Vn,Fct),e(Vn,k9e),e(k9e,Tct),e(Vn,Mct),e(Vn,S9e),e(S9e,Ect),e(Vn,Cct),e(ot,wct),e(ot,$e),e($e,M7),e(M7,R9e),e(R9e,Act),e(M7,Lct),e(M7,Sne),e(Sne,yct),e(M7,xct),e($e,$ct),e($e,E7),e(E7,P9e),e(P9e,kct),e(E7,Sct),e(E7,Rne),e(Rne,Rct),e(E7,Pct),e($e,Bct),e($e,C7),e(C7,B9e),e(B9e,Ict),e(C7,Nct),e(C7,Pne),e(Pne,qct),e(C7,jct),e($e,Dct),e($e,w7),e(w7,I9e),e(I9e,Gct),e(w7,Oct),e(w7,Bne),e(Bne,Vct),e(w7,Xct),e($e,zct),e($e,A7),e(A7,N9e),e(N9e,Qct),e(A7,Wct),e(A7,Ine),e(Ine,Uct),e(A7,Hct),e($e,Jct),e($e,L7),e(L7,q9e),e(q9e,Yct),e(L7,Kct),e(L7,Nne),e(Nne,Zct),e(L7,emt),e($e,omt),e($e,y7),e(y7,j9e),e(j9e,rmt),e(y7,tmt),e(y7,qne),e(qne,amt),e(y7,nmt),e($e,smt),e($e,x7),e(x7,D9e),e(D9e,lmt),e(x7,imt),e(x7,jne),e(jne,dmt),e(x7,cmt),e($e,mmt),e($e,$7),e($7,G9e),e(G9e,fmt),e($7,gmt),e($7,Dne),e(Dne,hmt),e($7,umt),e($e,pmt),e($e,k7),e(k7,O9e),e(O9e,_mt),e(k7,bmt),e(k7,Gne),e(Gne,vmt),e(k7,Fmt),e(ot,Tmt),M(S7,ot,null),b(m,leo,_),b(m,Hm,_),e(Hm,R7),e(R7,V9e),M(FR,V9e,null),e(Hm,Mmt),e(Hm,X9e),e(X9e,Emt),b(m,ieo,_),b(m,Ar,_),M(TR,Ar,null),e(Ar,Cmt),e(Ar,Jm),e(Jm,wmt),e(Jm,One),e(One,Amt),e(Jm,Lmt),e(Jm,Vne),e(Vne,ymt),e(Jm,xmt),e(Ar,$mt),e(Ar,MR),e(MR,kmt),e(MR,z9e),e(z9e,Smt),e(MR,Rmt),e(Ar,Pmt),e(Ar,ca),M(ER,ca,null),e(ca,Bmt),e(ca,Q9e),e(Q9e,Imt),e(ca,Nmt),e(ca,Ym),e(Ym,qmt),e(Ym,W9e),e(W9e,jmt),e(Ym,Dmt),e(Ym,Xne),e(Xne,Gmt),e(Ym,Omt),e(ca,Vmt),M(P7,ca,null),e(Ar,Xmt),e(Ar,rt),M(CR,rt,null),e(rt,zmt),e(rt,U9e),e(U9e,Qmt),e(rt,Wmt),e(rt,Xn),e(Xn,Umt),e(Xn,H9e),e(H9e,Hmt),e(Xn,Jmt),e(Xn,J9e),e(J9e,Ymt),e(Xn,Kmt),e(Xn,Y9e),e(Y9e,Zmt),e(Xn,eft),e(rt,oft),e(rt,ke),e(ke,B7),e(B7,K9e),e(K9e,rft),e(B7,tft),e(B7,zne),e(zne,aft),e(B7,nft),e(ke,sft),e(ke,I7),e(I7,Z9e),e(Z9e,lft),e(I7,ift),e(I7,Qne),e(Qne,dft),e(I7,cft),e(ke,mft),e(ke,N7),e(N7,exe),e(exe,fft),e(N7,gft),e(N7,Wne),e(Wne,hft),e(N7,uft),e(ke,pft),e(ke,q7),e(q7,oxe),e(oxe,_ft),e(q7,bft),e(q7,Une),e(Une,vft),e(q7,Fft),e(ke,Tft),e(ke,j7),e(j7,rxe),e(rxe,Mft),e(j7,Eft),e(j7,Hne),e(Hne,Cft),e(j7,wft),e(ke,Aft),e(ke,D7),e(D7,txe),e(txe,Lft),e(D7,yft),e(D7,Jne),e(Jne,xft),e(D7,$ft),e(ke,kft),e(ke,G7),e(G7,axe),e(axe,Sft),e(G7,Rft),e(G7,Yne),e(Yne,Pft),e(G7,Bft),e(ke,Ift),e(ke,O7),e(O7,nxe),e(nxe,Nft),e(O7,qft),e(O7,Kne),e(Kne,jft),e(O7,Dft),e(ke,Gft),e(ke,V7),e(V7,sxe),e(sxe,Oft),e(V7,Vft),e(V7,Zne),e(Zne,Xft),e(V7,zft),e(ke,Qft),e(ke,X7),e(X7,lxe),e(lxe,Wft),e(X7,Uft),e(X7,ese),e(ese,Hft),e(X7,Jft),e(rt,Yft),M(z7,rt,null),b(m,deo,_),b(m,Km,_),e(Km,Q7),e(Q7,ixe),M(wR,ixe,null),e(Km,Kft),e(Km,dxe),e(dxe,Zft),b(m,ceo,_),b(m,Lr,_),M(AR,Lr,null),e(Lr,egt),e(Lr,Zm),e(Zm,ogt),e(Zm,ose),e(ose,rgt),e(Zm,tgt),e(Zm,rse),e(rse,agt),e(Zm,ngt),e(Lr,sgt),e(Lr,LR),e(LR,lgt),e(LR,cxe),e(cxe,igt),e(LR,dgt),e(Lr,cgt),e(Lr,ma),M(yR,ma,null),e(ma,mgt),e(ma,mxe),e(mxe,fgt),e(ma,ggt),e(ma,ef),e(ef,hgt),e(ef,fxe),e(fxe,ugt),e(ef,pgt),e(ef,tse),e(tse,_gt),e(ef,bgt),e(ma,vgt),M(W7,ma,null),e(Lr,Fgt),e(Lr,tt),M(xR,tt,null),e(tt,Tgt),e(tt,gxe),e(gxe,Mgt),e(tt,Egt),e(tt,zn),e(zn,Cgt),e(zn,hxe),e(hxe,wgt),e(zn,Agt),e(zn,uxe),e(uxe,Lgt),e(zn,ygt),e(zn,pxe),e(pxe,xgt),e(zn,$gt),e(tt,kgt),e(tt,Se),e(Se,U7),e(U7,_xe),e(_xe,Sgt),e(U7,Rgt),e(U7,ase),e(ase,Pgt),e(U7,Bgt),e(Se,Igt),e(Se,H7),e(H7,bxe),e(bxe,Ngt),e(H7,qgt),e(H7,nse),e(nse,jgt),e(H7,Dgt),e(Se,Ggt),e(Se,J7),e(J7,vxe),e(vxe,Ogt),e(J7,Vgt),e(J7,sse),e(sse,Xgt),e(J7,zgt),e(Se,Qgt),e(Se,Y7),e(Y7,Fxe),e(Fxe,Wgt),e(Y7,Ugt),e(Y7,lse),e(lse,Hgt),e(Y7,Jgt),e(Se,Ygt),e(Se,K7),e(K7,Txe),e(Txe,Kgt),e(K7,Zgt),e(K7,ise),e(ise,eht),e(K7,oht),e(Se,rht),e(Se,Z7),e(Z7,Mxe),e(Mxe,tht),e(Z7,aht),e(Z7,dse),e(dse,nht),e(Z7,sht),e(Se,lht),e(Se,eL),e(eL,Exe),e(Exe,iht),e(eL,dht),e(eL,cse),e(cse,cht),e(eL,mht),e(Se,fht),e(Se,oL),e(oL,Cxe),e(Cxe,ght),e(oL,hht),e(oL,mse),e(mse,uht),e(oL,pht),e(Se,_ht),e(Se,rL),e(rL,wxe),e(wxe,bht),e(rL,vht),e(rL,fse),e(fse,Fht),e(rL,Tht),e(Se,Mht),e(Se,tL),e(tL,Axe),e(Axe,Eht),e(tL,Cht),e(tL,gse),e(gse,wht),e(tL,Aht),e(tt,Lht),M(aL,tt,null),b(m,meo,_),b(m,of,_),e(of,nL),e(nL,Lxe),M($R,Lxe,null),e(of,yht),e(of,yxe),e(yxe,xht),b(m,feo,_),b(m,yr,_),M(kR,yr,null),e(yr,$ht),e(yr,rf),e(rf,kht),e(rf,hse),e(hse,Sht),e(rf,Rht),e(rf,use),e(use,Pht),e(rf,Bht),e(yr,Iht),e(yr,SR),e(SR,Nht),e(SR,xxe),e(xxe,qht),e(SR,jht),e(yr,Dht),e(yr,fa),M(RR,fa,null),e(fa,Ght),e(fa,$xe),e($xe,Oht),e(fa,Vht),e(fa,tf),e(tf,Xht),e(tf,kxe),e(kxe,zht),e(tf,Qht),e(tf,pse),e(pse,Wht),e(tf,Uht),e(fa,Hht),M(sL,fa,null),e(yr,Jht),e(yr,at),M(PR,at,null),e(at,Yht),e(at,Sxe),e(Sxe,Kht),e(at,Zht),e(at,Qn),e(Qn,eut),e(Qn,Rxe),e(Rxe,out),e(Qn,rut),e(Qn,Pxe),e(Pxe,tut),e(Qn,aut),e(Qn,Bxe),e(Bxe,nut),e(Qn,sut),e(at,lut),e(at,Re),e(Re,lL),e(lL,Ixe),e(Ixe,iut),e(lL,dut),e(lL,_se),e(_se,cut),e(lL,mut),e(Re,fut),e(Re,iL),e(iL,Nxe),e(Nxe,gut),e(iL,hut),e(iL,bse),e(bse,uut),e(iL,put),e(Re,_ut),e(Re,dL),e(dL,qxe),e(qxe,but),e(dL,vut),e(dL,vse),e(vse,Fut),e(dL,Tut),e(Re,Mut),e(Re,cL),e(cL,jxe),e(jxe,Eut),e(cL,Cut),e(cL,Fse),e(Fse,wut),e(cL,Aut),e(Re,Lut),e(Re,mL),e(mL,Dxe),e(Dxe,yut),e(mL,xut),e(mL,Tse),e(Tse,$ut),e(mL,kut),e(Re,Sut),e(Re,fL),e(fL,Gxe),e(Gxe,Rut),e(fL,Put),e(fL,Mse),e(Mse,But),e(fL,Iut),e(Re,Nut),e(Re,gL),e(gL,Oxe),e(Oxe,qut),e(gL,jut),e(gL,Ese),e(Ese,Dut),e(gL,Gut),e(Re,Out),e(Re,hL),e(hL,Vxe),e(Vxe,Vut),e(hL,Xut),e(hL,Cse),e(Cse,zut),e(hL,Qut),e(Re,Wut),e(Re,uL),e(uL,Xxe),e(Xxe,Uut),e(uL,Hut),e(uL,wse),e(wse,Jut),e(uL,Yut),e(Re,Kut),e(Re,pL),e(pL,zxe),e(zxe,Zut),e(pL,ept),e(pL,Ase),e(Ase,opt),e(pL,rpt),e(at,tpt),M(_L,at,null),b(m,geo,_),b(m,af,_),e(af,bL),e(bL,Qxe),M(BR,Qxe,null),e(af,apt),e(af,Wxe),e(Wxe,npt),b(m,heo,_),b(m,xr,_),M(IR,xr,null),e(xr,spt),e(xr,nf),e(nf,lpt),e(nf,Lse),e(Lse,ipt),e(nf,dpt),e(nf,yse),e(yse,cpt),e(nf,mpt),e(xr,fpt),e(xr,NR),e(NR,gpt),e(NR,Uxe),e(Uxe,hpt),e(NR,upt),e(xr,ppt),e(xr,ga),M(qR,ga,null),e(ga,_pt),e(ga,Hxe),e(Hxe,bpt),e(ga,vpt),e(ga,sf),e(sf,Fpt),e(sf,Jxe),e(Jxe,Tpt),e(sf,Mpt),e(sf,xse),e(xse,Ept),e(sf,Cpt),e(ga,wpt),M(vL,ga,null),e(xr,Apt),e(xr,nt),M(jR,nt,null),e(nt,Lpt),e(nt,Yxe),e(Yxe,ypt),e(nt,xpt),e(nt,Wn),e(Wn,$pt),e(Wn,Kxe),e(Kxe,kpt),e(Wn,Spt),e(Wn,Zxe),e(Zxe,Rpt),e(Wn,Ppt),e(Wn,e$e),e(e$e,Bpt),e(Wn,Ipt),e(nt,Npt),e(nt,Xe),e(Xe,FL),e(FL,o$e),e(o$e,qpt),e(FL,jpt),e(FL,$se),e($se,Dpt),e(FL,Gpt),e(Xe,Opt),e(Xe,TL),e(TL,r$e),e(r$e,Vpt),e(TL,Xpt),e(TL,kse),e(kse,zpt),e(TL,Qpt),e(Xe,Wpt),e(Xe,ML),e(ML,t$e),e(t$e,Upt),e(ML,Hpt),e(ML,Sse),e(Sse,Jpt),e(ML,Ypt),e(Xe,Kpt),e(Xe,EL),e(EL,a$e),e(a$e,Zpt),e(EL,e_t),e(EL,Rse),e(Rse,o_t),e(EL,r_t),e(Xe,t_t),e(Xe,CL),e(CL,n$e),e(n$e,a_t),e(CL,n_t),e(CL,Pse),e(Pse,s_t),e(CL,l_t),e(Xe,i_t),e(Xe,wL),e(wL,s$e),e(s$e,d_t),e(wL,c_t),e(wL,Bse),e(Bse,m_t),e(wL,f_t),e(Xe,g_t),e(Xe,AL),e(AL,l$e),e(l$e,h_t),e(AL,u_t),e(AL,Ise),e(Ise,p_t),e(AL,__t),e(Xe,b_t),e(Xe,LL),e(LL,i$e),e(i$e,v_t),e(LL,F_t),e(LL,Nse),e(Nse,T_t),e(LL,M_t),e(nt,E_t),M(yL,nt,null),b(m,ueo,_),b(m,lf,_),e(lf,xL),e(xL,d$e),M(DR,d$e,null),e(lf,C_t),e(lf,c$e),e(c$e,w_t),b(m,peo,_),b(m,$r,_),M(GR,$r,null),e($r,A_t),e($r,df),e(df,L_t),e(df,qse),e(qse,y_t),e(df,x_t),e(df,jse),e(jse,$_t),e(df,k_t),e($r,S_t),e($r,OR),e(OR,R_t),e(OR,m$e),e(m$e,P_t),e(OR,B_t),e($r,I_t),e($r,ha),M(VR,ha,null),e(ha,N_t),e(ha,f$e),e(f$e,q_t),e(ha,j_t),e(ha,cf),e(cf,D_t),e(cf,g$e),e(g$e,G_t),e(cf,O_t),e(cf,Dse),e(Dse,V_t),e(cf,X_t),e(ha,z_t),M($L,ha,null),e($r,Q_t),e($r,st),M(XR,st,null),e(st,W_t),e(st,h$e),e(h$e,U_t),e(st,H_t),e(st,Un),e(Un,J_t),e(Un,u$e),e(u$e,Y_t),e(Un,K_t),e(Un,p$e),e(p$e,Z_t),e(Un,ebt),e(Un,_$e),e(_$e,obt),e(Un,rbt),e(st,tbt),e(st,ze),e(ze,kL),e(kL,b$e),e(b$e,abt),e(kL,nbt),e(kL,Gse),e(Gse,sbt),e(kL,lbt),e(ze,ibt),e(ze,SL),e(SL,v$e),e(v$e,dbt),e(SL,cbt),e(SL,Ose),e(Ose,mbt),e(SL,fbt),e(ze,gbt),e(ze,RL),e(RL,F$e),e(F$e,hbt),e(RL,ubt),e(RL,Vse),e(Vse,pbt),e(RL,_bt),e(ze,bbt),e(ze,PL),e(PL,T$e),e(T$e,vbt),e(PL,Fbt),e(PL,Xse),e(Xse,Tbt),e(PL,Mbt),e(ze,Ebt),e(ze,BL),e(BL,M$e),e(M$e,Cbt),e(BL,wbt),e(BL,zse),e(zse,Abt),e(BL,Lbt),e(ze,ybt),e(ze,IL),e(IL,E$e),e(E$e,xbt),e(IL,$bt),e(IL,Qse),e(Qse,kbt),e(IL,Sbt),e(ze,Rbt),e(ze,NL),e(NL,C$e),e(C$e,Pbt),e(NL,Bbt),e(NL,Wse),e(Wse,Ibt),e(NL,Nbt),e(ze,qbt),e(ze,qL),e(qL,w$e),e(w$e,jbt),e(qL,Dbt),e(qL,Use),e(Use,Gbt),e(qL,Obt),e(st,Vbt),M(jL,st,null),b(m,_eo,_),b(m,mf,_),e(mf,DL),e(DL,A$e),M(zR,A$e,null),e(mf,Xbt),e(mf,L$e),e(L$e,zbt),b(m,beo,_),b(m,kr,_),M(QR,kr,null),e(kr,Qbt),e(kr,ff),e(ff,Wbt),e(ff,Hse),e(Hse,Ubt),e(ff,Hbt),e(ff,Jse),e(Jse,Jbt),e(ff,Ybt),e(kr,Kbt),e(kr,WR),e(WR,Zbt),e(WR,y$e),e(y$e,e2t),e(WR,o2t),e(kr,r2t),e(kr,ua),M(UR,ua,null),e(ua,t2t),e(ua,x$e),e(x$e,a2t),e(ua,n2t),e(ua,gf),e(gf,s2t),e(gf,$$e),e($$e,l2t),e(gf,i2t),e(gf,Yse),e(Yse,d2t),e(gf,c2t),e(ua,m2t),M(GL,ua,null),e(kr,f2t),e(kr,lt),M(HR,lt,null),e(lt,g2t),e(lt,k$e),e(k$e,h2t),e(lt,u2t),e(lt,Hn),e(Hn,p2t),e(Hn,S$e),e(S$e,_2t),e(Hn,b2t),e(Hn,R$e),e(R$e,v2t),e(Hn,F2t),e(Hn,P$e),e(P$e,T2t),e(Hn,M2t),e(lt,E2t),e(lt,B$e),e(B$e,OL),e(OL,I$e),e(I$e,C2t),e(OL,w2t),e(OL,Kse),e(Kse,A2t),e(OL,L2t),e(lt,y2t),M(VL,lt,null),b(m,veo,_),b(m,hf,_),e(hf,XL),e(XL,N$e),M(JR,N$e,null),e(hf,x2t),e(hf,q$e),e(q$e,$2t),b(m,Feo,_),b(m,Sr,_),M(YR,Sr,null),e(Sr,k2t),e(Sr,uf),e(uf,S2t),e(uf,Zse),e(Zse,R2t),e(uf,P2t),e(uf,ele),e(ele,B2t),e(uf,I2t),e(Sr,N2t),e(Sr,KR),e(KR,q2t),e(KR,j$e),e(j$e,j2t),e(KR,D2t),e(Sr,G2t),e(Sr,pa),M(ZR,pa,null),e(pa,O2t),e(pa,D$e),e(D$e,V2t),e(pa,X2t),e(pa,pf),e(pf,z2t),e(pf,G$e),e(G$e,Q2t),e(pf,W2t),e(pf,ole),e(ole,U2t),e(pf,H2t),e(pa,J2t),M(zL,pa,null),e(Sr,Y2t),e(Sr,it),M(eP,it,null),e(it,K2t),e(it,O$e),e(O$e,Z2t),e(it,e1t),e(it,Jn),e(Jn,o1t),e(Jn,V$e),e(V$e,r1t),e(Jn,t1t),e(Jn,X$e),e(X$e,a1t),e(Jn,n1t),e(Jn,z$e),e(z$e,s1t),e(Jn,l1t),e(it,i1t),e(it,oP),e(oP,QL),e(QL,Q$e),e(Q$e,d1t),e(QL,c1t),e(QL,rle),e(rle,m1t),e(QL,f1t),e(oP,g1t),e(oP,WL),e(WL,W$e),e(W$e,h1t),e(WL,u1t),e(WL,tle),e(tle,p1t),e(WL,_1t),e(it,b1t),M(UL,it,null),b(m,Teo,_),b(m,_f,_),e(_f,HL),e(HL,U$e),M(rP,U$e,null),e(_f,v1t),e(_f,H$e),e(H$e,F1t),b(m,Meo,_),b(m,Rr,_),M(tP,Rr,null),e(Rr,T1t),e(Rr,bf),e(bf,M1t),e(bf,ale),e(ale,E1t),e(bf,C1t),e(bf,nle),e(nle,w1t),e(bf,A1t),e(Rr,L1t),e(Rr,aP),e(aP,y1t),e(aP,J$e),e(J$e,x1t),e(aP,$1t),e(Rr,k1t),e(Rr,_a),M(nP,_a,null),e(_a,S1t),e(_a,Y$e),e(Y$e,R1t),e(_a,P1t),e(_a,vf),e(vf,B1t),e(vf,K$e),e(K$e,I1t),e(vf,N1t),e(vf,sle),e(sle,q1t),e(vf,j1t),e(_a,D1t),M(JL,_a,null),e(Rr,G1t),e(Rr,dt),M(sP,dt,null),e(dt,O1t),e(dt,Z$e),e(Z$e,V1t),e(dt,X1t),e(dt,Yn),e(Yn,z1t),e(Yn,eke),e(eke,Q1t),e(Yn,W1t),e(Yn,oke),e(oke,U1t),e(Yn,H1t),e(Yn,rke),e(rke,J1t),e(Yn,Y1t),e(dt,K1t),e(dt,tke),e(tke,YL),e(YL,ake),e(ake,Z1t),e(YL,evt),e(YL,lle),e(lle,ovt),e(YL,rvt),e(dt,tvt),M(KL,dt,null),Eeo=!0},p(m,[_]){const lP={};_&2&&(lP.$$scope={dirty:_,ctx:m}),yf.$set(lP);const nke={};_&2&&(nke.$$scope={dirty:_,ctx:m}),Hh.$set(nke);const ske={};_&2&&(ske.$$scope={dirty:_,ctx:m}),Su.$set(ske);const lke={};_&2&&(lke.$$scope={dirty:_,ctx:m}),Tp.$set(lke);const iP={};_&2&&(iP.$$scope={dirty:_,ctx:m}),Mp.$set(iP);const ike={};_&2&&(ike.$$scope={dirty:_,ctx:m}),Qp.$set(ike);const Kn={};_&2&&(Kn.$$scope={dirty:_,ctx:m}),Wp.$set(Kn);const dke={};_&2&&(dke.$$scope={dirty:_,ctx:m}),Jp.$set(dke);const cke={};_&2&&(cke.$$scope={dirty:_,ctx:m}),c2.$set(cke);const mke={};_&2&&(mke.$$scope={dirty:_,ctx:m}),f2.$set(mke);const dP={};_&2&&(dP.$$scope={dirty:_,ctx:m}),i1.$set(dP);const fke={};_&2&&(fke.$$scope={dirty:_,ctx:m}),c1.$set(fke);const cP={};_&2&&(cP.$$scope={dirty:_,ctx:m}),ev.$set(cP);const gke={};_&2&&(gke.$$scope={dirty:_,ctx:m}),rv.$set(gke);const mP={};_&2&&(mP.$$scope={dirty:_,ctx:m}),Vv.$set(mP);const hke={};_&2&&(hke.$$scope={dirty:_,ctx:m}),zv.$set(hke);const uke={};_&2&&(uke.$$scope={dirty:_,ctx:m}),gF.$set(uke);const pke={};_&2&&(pke.$$scope={dirty:_,ctx:m}),uF.$set(pke);const Ff={};_&2&&(Ff.$$scope={dirty:_,ctx:m}),pT.$set(Ff);const _ke={};_&2&&(_ke.$$scope={dirty:_,ctx:m}),bT.$set(_ke);const bke={};_&2&&(bke.$$scope={dirty:_,ctx:m}),KT.$set(bke);const vke={};_&2&&(vke.$$scope={dirty:_,ctx:m}),eM.$set(vke);const fP={};_&2&&(fP.$$scope={dirty:_,ctx:m}),dM.$set(fP);const Fke={};_&2&&(Fke.$$scope={dirty:_,ctx:m}),mM.$set(Fke);const Tke={};_&2&&(Tke.$$scope={dirty:_,ctx:m}),YM.$set(Tke);const Mke={};_&2&&(Mke.$$scope={dirty:_,ctx:m}),ZM.$set(Mke);const ht={};_&2&&(ht.$$scope={dirty:_,ctx:m}),zE.$set(ht);const gP={};_&2&&(gP.$$scope={dirty:_,ctx:m}),WE.$set(gP);const Eke={};_&2&&(Eke.$$scope={dirty:_,ctx:m}),JE.$set(Eke);const hP={};_&2&&(hP.$$scope={dirty:_,ctx:m}),KE.$set(hP);const Cke={};_&2&&(Cke.$$scope={dirty:_,ctx:m}),t4.$set(Cke);const ut={};_&2&&(ut.$$scope={dirty:_,ctx:m}),n4.$set(ut);const wke={};_&2&&(wke.$$scope={dirty:_,ctx:m}),T4.$set(wke);const Tf={};_&2&&(Tf.$$scope={dirty:_,ctx:m}),E4.$set(Tf);const Ake={};_&2&&(Ake.$$scope={dirty:_,ctx:m}),A4.$set(Ake);const Lke={};_&2&&(Lke.$$scope={dirty:_,ctx:m}),y4.$set(Lke);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),k4.$set(L);const ZL={};_&2&&(ZL.$$scope={dirty:_,ctx:m}),R4.$set(ZL);const yke={};_&2&&(yke.$$scope={dirty:_,ctx:m}),I4.$set(yke);const xke={};_&2&&(xke.$$scope={dirty:_,ctx:m}),q4.$set(xke);const ey={};_&2&&(ey.$$scope={dirty:_,ctx:m}),H4.$set(ey);const $ke={};_&2&&($ke.$$scope={dirty:_,ctx:m}),Y4.$set($ke);const kke={};_&2&&(kke.$$scope={dirty:_,ctx:m}),aC.$set(kke);const oy={};_&2&&(oy.$$scope={dirty:_,ctx:m}),sC.$set(oy);const Ske={};_&2&&(Ske.$$scope={dirty:_,ctx:m}),bC.$set(Ske);const Rke={};_&2&&(Rke.$$scope={dirty:_,ctx:m}),FC.$set(Rke);const ry={};_&2&&(ry.$$scope={dirty:_,ctx:m}),CC.$set(ry);const Pke={};_&2&&(Pke.$$scope={dirty:_,ctx:m}),AC.$set(Pke);const Bke={};_&2&&(Bke.$$scope={dirty:_,ctx:m}),RC.$set(Bke);const ty={};_&2&&(ty.$$scope={dirty:_,ctx:m}),BC.$set(ty);const Ike={};_&2&&(Ike.$$scope={dirty:_,ctx:m}),GC.$set(Ike);const Nke={};_&2&&(Nke.$$scope={dirty:_,ctx:m}),VC.$set(Nke);const ay={};_&2&&(ay.$$scope={dirty:_,ctx:m}),UC.$set(ay);const qke={};_&2&&(qke.$$scope={dirty:_,ctx:m}),JC.$set(qke);const jke={};_&2&&(jke.$$scope={dirty:_,ctx:m}),ZC.$set(jke);const ny={};_&2&&(ny.$$scope={dirty:_,ctx:m}),o3.$set(ny);const Dke={};_&2&&(Dke.$$scope={dirty:_,ctx:m}),i3.$set(Dke);const Gke={};_&2&&(Gke.$$scope={dirty:_,ctx:m}),c3.$set(Gke);const sy={};_&2&&(sy.$$scope={dirty:_,ctx:m}),g3.$set(sy);const Oke={};_&2&&(Oke.$$scope={dirty:_,ctx:m}),u3.$set(Oke);const Vke={};_&2&&(Vke.$$scope={dirty:_,ctx:m}),u5.$set(Vke);const ly={};_&2&&(ly.$$scope={dirty:_,ctx:m}),_5.$set(ly);const Xke={};_&2&&(Xke.$$scope={dirty:_,ctx:m}),G5.$set(Xke);const zke={};_&2&&(zke.$$scope={dirty:_,ctx:m}),V5.$set(zke);const iy={};_&2&&(iy.$$scope={dirty:_,ctx:m}),a0.$set(iy);const Qke={};_&2&&(Qke.$$scope={dirty:_,ctx:m}),s0.$set(Qke);const Wke={};_&2&&(Wke.$$scope={dirty:_,ctx:m}),u0.$set(Wke);const dy={};_&2&&(dy.$$scope={dirty:_,ctx:m}),_0.$set(dy);const Uke={};_&2&&(Uke.$$scope={dirty:_,ctx:m}),T0.$set(Uke);const Hke={};_&2&&(Hke.$$scope={dirty:_,ctx:m}),E0.$set(Hke);const cy={};_&2&&(cy.$$scope={dirty:_,ctx:m}),X0.$set(cy);const Jke={};_&2&&(Jke.$$scope={dirty:_,ctx:m}),Q0.$set(Jke);const Yke={};_&2&&(Yke.$$scope={dirty:_,ctx:m}),tw.$set(Yke);const my={};_&2&&(my.$$scope={dirty:_,ctx:m}),nw.$set(my);const Kke={};_&2&&(Kke.$$scope={dirty:_,ctx:m}),Rw.$set(Kke);const Zke={};_&2&&(Zke.$$scope={dirty:_,ctx:m}),Bw.$set(Zke);const fy={};_&2&&(fy.$$scope={dirty:_,ctx:m}),Zw.$set(fy);const eSe={};_&2&&(eSe.$$scope={dirty:_,ctx:m}),oA.$set(eSe);const oSe={};_&2&&(oSe.$$scope={dirty:_,ctx:m}),aA.$set(oSe);const gy={};_&2&&(gy.$$scope={dirty:_,ctx:m}),sA.$set(gy);const rSe={};_&2&&(rSe.$$scope={dirty:_,ctx:m}),iA.$set(rSe);const tSe={};_&2&&(tSe.$$scope={dirty:_,ctx:m}),cA.$set(tSe);const hy={};_&2&&(hy.$$scope={dirty:_,ctx:m}),fA.$set(hy);const aSe={};_&2&&(aSe.$$scope={dirty:_,ctx:m}),hA.$set(aSe);const nSe={};_&2&&(nSe.$$scope={dirty:_,ctx:m}),IA.$set(nSe);const uy={};_&2&&(uy.$$scope={dirty:_,ctx:m}),qA.$set(uy);const sSe={};_&2&&(sSe.$$scope={dirty:_,ctx:m}),s6.$set(sSe);const lSe={};_&2&&(lSe.$$scope={dirty:_,ctx:m}),i6.$set(lSe);const py={};_&2&&(py.$$scope={dirty:_,ctx:m}),c6.$set(py);const iSe={};_&2&&(iSe.$$scope={dirty:_,ctx:m}),f6.$set(iSe);const dSe={};_&2&&(dSe.$$scope={dirty:_,ctx:m}),h6.$set(dSe);const _y={};_&2&&(_y.$$scope={dirty:_,ctx:m}),p6.$set(_y);const cSe={};_&2&&(cSe.$$scope={dirty:_,ctx:m}),X6.$set(cSe);const mSe={};_&2&&(mSe.$$scope={dirty:_,ctx:m}),Q6.$set(mSe);const by={};_&2&&(by.$$scope={dirty:_,ctx:m}),t7.$set(by);const fSe={};_&2&&(fSe.$$scope={dirty:_,ctx:m}),n7.$set(fSe);const gSe={};_&2&&(gSe.$$scope={dirty:_,ctx:m}),v7.$set(gSe);const vy={};_&2&&(vy.$$scope={dirty:_,ctx:m}),T7.$set(vy);const hSe={};_&2&&(hSe.$$scope={dirty:_,ctx:m}),S7.$set(hSe);const uSe={};_&2&&(uSe.$$scope={dirty:_,ctx:m}),P7.$set(uSe);const Fy={};_&2&&(Fy.$$scope={dirty:_,ctx:m}),z7.$set(Fy);const pSe={};_&2&&(pSe.$$scope={dirty:_,ctx:m}),W7.$set(pSe);const _Se={};_&2&&(_Se.$$scope={dirty:_,ctx:m}),aL.$set(_Se);const Ty={};_&2&&(Ty.$$scope={dirty:_,ctx:m}),sL.$set(Ty);const bSe={};_&2&&(bSe.$$scope={dirty:_,ctx:m}),_L.$set(bSe);const vSe={};_&2&&(vSe.$$scope={dirty:_,ctx:m}),vL.$set(vSe);const My={};_&2&&(My.$$scope={dirty:_,ctx:m}),yL.$set(My);const FSe={};_&2&&(FSe.$$scope={dirty:_,ctx:m}),$L.$set(FSe);const TSe={};_&2&&(TSe.$$scope={dirty:_,ctx:m}),jL.$set(TSe);const Ey={};_&2&&(Ey.$$scope={dirty:_,ctx:m}),GL.$set(Ey);const MSe={};_&2&&(MSe.$$scope={dirty:_,ctx:m}),VL.$set(MSe);const ESe={};_&2&&(ESe.$$scope={dirty:_,ctx:m}),zL.$set(ESe);const Cy={};_&2&&(Cy.$$scope={dirty:_,ctx:m}),UL.$set(Cy);const CSe={};_&2&&(CSe.$$scope={dirty:_,ctx:m}),JL.$set(CSe);const wSe={};_&2&&(wSe.$$scope={dirty:_,ctx:m}),KL.$set(wSe)},i(m){Eeo||(E(d.$$.fragment,m),E(Qa.$$.fragment,m),E(S9.$$.fragment,m),E(R9.$$.fragment,m),E(yf.$$.fragment,m),E(P9.$$.fragment,m),E(B9.$$.fragment,m),E(q9.$$.fragment,m),E(Hh.$$.fragment,m),E(j9.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(X9.$$.fragment,m),E(Su.$$.fragment,m),E(z9.$$.fragment,m),E(Q9.$$.fragment,m),E(W9.$$.fragment,m),E(J9.$$.fragment,m),E(Tp.$$.fragment,m),E(Mp.$$.fragment,m),E(Y9.$$.fragment,m),E(K9.$$.fragment,m),E(Z9.$$.fragment,m),E(rx.$$.fragment,m),E(Qp.$$.fragment,m),E(Wp.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(nx.$$.fragment,m),E(lx.$$.fragment,m),E(Jp.$$.fragment,m),E(ix.$$.fragment,m),E(c2.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(f2.$$.fragment,m),E(gx.$$.fragment,m),E(i1.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(c1.$$.fragment,m),E(bx.$$.fragment,m),E(ev.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(rv.$$.fragment,m),E(Ex.$$.fragment,m),E(Vv.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(Lx.$$.fragment,m),E(zv.$$.fragment,m),E(yx.$$.fragment,m),E(gF.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(uF.$$.fragment,m),E(Rx.$$.fragment,m),E(pT.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(bT.$$.fragment,m),E(qx.$$.fragment,m),E(KT.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(eM.$$.fragment,m),E(Vx.$$.fragment,m),E(dM.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(mM.$$.fragment,m),E(Ux.$$.fragment,m),E(YM.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(ZM.$$.fragment,m),E(Zx.$$.fragment,m),E(zE.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(WE.$$.fragment,m),E(a$.$$.fragment,m),E(JE.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(KE.$$.fragment,m),E(d$.$$.fragment,m),E(t4.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(n4.$$.fragment,m),E(h$.$$.fragment,m),E(T4.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(E4.$$.fragment,m),E(v$.$$.fragment,m),E(A4.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(y4.$$.fragment,m),E(C$.$$.fragment,m),E(k4.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(R4.$$.fragment,m),E(x$.$$.fragment,m),E(I4.$$.fragment,m),E($$.$$.fragment,m),E(k$.$$.fragment,m),E(R$.$$.fragment,m),E(q4.$$.fragment,m),E(P$.$$.fragment,m),E(H4.$$.fragment,m),E(B$.$$.fragment,m),E(I$.$$.fragment,m),E(q$.$$.fragment,m),E(Y4.$$.fragment,m),E(j$.$$.fragment,m),E(aC.$$.fragment,m),E(D$.$$.fragment,m),E(G$.$$.fragment,m),E(V$.$$.fragment,m),E(sC.$$.fragment,m),E(X$.$$.fragment,m),E(bC.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(U$.$$.fragment,m),E(FC.$$.fragment,m),E(H$.$$.fragment,m),E(CC.$$.fragment,m),E(Y$.$$.fragment,m),E(K$.$$.fragment,m),E(ek.$$.fragment,m),E(AC.$$.fragment,m),E(ok.$$.fragment,m),E(RC.$$.fragment,m),E(rk.$$.fragment,m),E(tk.$$.fragment,m),E(nk.$$.fragment,m),E(BC.$$.fragment,m),E(sk.$$.fragment,m),E(GC.$$.fragment,m),E(lk.$$.fragment,m),E(ik.$$.fragment,m),E(ck.$$.fragment,m),E(VC.$$.fragment,m),E(mk.$$.fragment,m),E(UC.$$.fragment,m),E(fk.$$.fragment,m),E(gk.$$.fragment,m),E(uk.$$.fragment,m),E(JC.$$.fragment,m),E(pk.$$.fragment,m),E(ZC.$$.fragment,m),E(_k.$$.fragment,m),E(bk.$$.fragment,m),E(Fk.$$.fragment,m),E(o3.$$.fragment,m),E(Tk.$$.fragment,m),E(i3.$$.fragment,m),E(Mk.$$.fragment,m),E(Ek.$$.fragment,m),E(wk.$$.fragment,m),E(c3.$$.fragment,m),E(Ak.$$.fragment,m),E(g3.$$.fragment,m),E(Lk.$$.fragment,m),E(yk.$$.fragment,m),E($k.$$.fragment,m),E(u3.$$.fragment,m),E(kk.$$.fragment,m),E(u5.$$.fragment,m),E(Sk.$$.fragment,m),E(Rk.$$.fragment,m),E(Bk.$$.fragment,m),E(_5.$$.fragment,m),E(Ik.$$.fragment,m),E(G5.$$.fragment,m),E(Nk.$$.fragment,m),E(qk.$$.fragment,m),E(Dk.$$.fragment,m),E(V5.$$.fragment,m),E(Gk.$$.fragment,m),E(a0.$$.fragment,m),E(Ok.$$.fragment,m),E(Vk.$$.fragment,m),E(zk.$$.fragment,m),E(s0.$$.fragment,m),E(Qk.$$.fragment,m),E(u0.$$.fragment,m),E(Wk.$$.fragment,m),E(Uk.$$.fragment,m),E(Jk.$$.fragment,m),E(_0.$$.fragment,m),E(Yk.$$.fragment,m),E(T0.$$.fragment,m),E(Kk.$$.fragment,m),E(Zk.$$.fragment,m),E(oS.$$.fragment,m),E(E0.$$.fragment,m),E(rS.$$.fragment,m),E(X0.$$.fragment,m),E(tS.$$.fragment,m),E(aS.$$.fragment,m),E(sS.$$.fragment,m),E(Q0.$$.fragment,m),E(lS.$$.fragment,m),E(tw.$$.fragment,m),E(iS.$$.fragment,m),E(dS.$$.fragment,m),E(mS.$$.fragment,m),E(nw.$$.fragment,m),E(fS.$$.fragment,m),E(Rw.$$.fragment,m),E(gS.$$.fragment,m),E(hS.$$.fragment,m),E(pS.$$.fragment,m),E(Bw.$$.fragment,m),E(_S.$$.fragment,m),E(Zw.$$.fragment,m),E(bS.$$.fragment,m),E(vS.$$.fragment,m),E(TS.$$.fragment,m),E(oA.$$.fragment,m),E(MS.$$.fragment,m),E(aA.$$.fragment,m),E(CS.$$.fragment,m),E(wS.$$.fragment,m),E(LS.$$.fragment,m),E(sA.$$.fragment,m),E(yS.$$.fragment,m),E(iA.$$.fragment,m),E(xS.$$.fragment,m),E($S.$$.fragment,m),E(SS.$$.fragment,m),E(cA.$$.fragment,m),E(RS.$$.fragment,m),E(fA.$$.fragment,m),E(PS.$$.fragment,m),E(BS.$$.fragment,m),E(NS.$$.fragment,m),E(hA.$$.fragment,m),E(qS.$$.fragment,m),E(IA.$$.fragment,m),E(jS.$$.fragment,m),E(DS.$$.fragment,m),E(OS.$$.fragment,m),E(qA.$$.fragment,m),E(VS.$$.fragment,m),E(s6.$$.fragment,m),E(XS.$$.fragment,m),E(zS.$$.fragment,m),E(WS.$$.fragment,m),E(i6.$$.fragment,m),E(US.$$.fragment,m),E(c6.$$.fragment,m),E(HS.$$.fragment,m),E(JS.$$.fragment,m),E(KS.$$.fragment,m),E(f6.$$.fragment,m),E(ZS.$$.fragment,m),E(h6.$$.fragment,m),E(eR.$$.fragment,m),E(oR.$$.fragment,m),E(tR.$$.fragment,m),E(p6.$$.fragment,m),E(aR.$$.fragment,m),E(X6.$$.fragment,m),E(nR.$$.fragment,m),E(sR.$$.fragment,m),E(iR.$$.fragment,m),E(Q6.$$.fragment,m),E(dR.$$.fragment,m),E(t7.$$.fragment,m),E(cR.$$.fragment,m),E(mR.$$.fragment,m),E(gR.$$.fragment,m),E(n7.$$.fragment,m),E(hR.$$.fragment,m),E(v7.$$.fragment,m),E(uR.$$.fragment,m),E(pR.$$.fragment,m),E(bR.$$.fragment,m),E(T7.$$.fragment,m),E(vR.$$.fragment,m),E(S7.$$.fragment,m),E(FR.$$.fragment,m),E(TR.$$.fragment,m),E(ER.$$.fragment,m),E(P7.$$.fragment,m),E(CR.$$.fragment,m),E(z7.$$.fragment,m),E(wR.$$.fragment,m),E(AR.$$.fragment,m),E(yR.$$.fragment,m),E(W7.$$.fragment,m),E(xR.$$.fragment,m),E(aL.$$.fragment,m),E($R.$$.fragment,m),E(kR.$$.fragment,m),E(RR.$$.fragment,m),E(sL.$$.fragment,m),E(PR.$$.fragment,m),E(_L.$$.fragment,m),E(BR.$$.fragment,m),E(IR.$$.fragment,m),E(qR.$$.fragment,m),E(vL.$$.fragment,m),E(jR.$$.fragment,m),E(yL.$$.fragment,m),E(DR.$$.fragment,m),E(GR.$$.fragment,m),E(VR.$$.fragment,m),E($L.$$.fragment,m),E(XR.$$.fragment,m),E(jL.$$.fragment,m),E(zR.$$.fragment,m),E(QR.$$.fragment,m),E(UR.$$.fragment,m),E(GL.$$.fragment,m),E(HR.$$.fragment,m),E(VL.$$.fragment,m),E(JR.$$.fragment,m),E(YR.$$.fragment,m),E(ZR.$$.fragment,m),E(zL.$$.fragment,m),E(eP.$$.fragment,m),E(UL.$$.fragment,m),E(rP.$$.fragment,m),E(tP.$$.fragment,m),E(nP.$$.fragment,m),E(JL.$$.fragment,m),E(sP.$$.fragment,m),E(KL.$$.fragment,m),Eeo=!0)},o(m){C(d.$$.fragment,m),C(Qa.$$.fragment,m),C(S9.$$.fragment,m),C(R9.$$.fragment,m),C(yf.$$.fragment,m),C(P9.$$.fragment,m),C(B9.$$.fragment,m),C(q9.$$.fragment,m),C(Hh.$$.fragment,m),C(j9.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(X9.$$.fragment,m),C(Su.$$.fragment,m),C(z9.$$.fragment,m),C(Q9.$$.fragment,m),C(W9.$$.fragment,m),C(J9.$$.fragment,m),C(Tp.$$.fragment,m),C(Mp.$$.fragment,m),C(Y9.$$.fragment,m),C(K9.$$.fragment,m),C(Z9.$$.fragment,m),C(rx.$$.fragment,m),C(Qp.$$.fragment,m),C(Wp.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(nx.$$.fragment,m),C(lx.$$.fragment,m),C(Jp.$$.fragment,m),C(ix.$$.fragment,m),C(c2.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(f2.$$.fragment,m),C(gx.$$.fragment,m),C(i1.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(c1.$$.fragment,m),C(bx.$$.fragment,m),C(ev.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(rv.$$.fragment,m),C(Ex.$$.fragment,m),C(Vv.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(Lx.$$.fragment,m),C(zv.$$.fragment,m),C(yx.$$.fragment,m),C(gF.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(uF.$$.fragment,m),C(Rx.$$.fragment,m),C(pT.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(bT.$$.fragment,m),C(qx.$$.fragment,m),C(KT.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(eM.$$.fragment,m),C(Vx.$$.fragment,m),C(dM.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(mM.$$.fragment,m),C(Ux.$$.fragment,m),C(YM.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(ZM.$$.fragment,m),C(Zx.$$.fragment,m),C(zE.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(WE.$$.fragment,m),C(a$.$$.fragment,m),C(JE.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(KE.$$.fragment,m),C(d$.$$.fragment,m),C(t4.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(n4.$$.fragment,m),C(h$.$$.fragment,m),C(T4.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(E4.$$.fragment,m),C(v$.$$.fragment,m),C(A4.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(y4.$$.fragment,m),C(C$.$$.fragment,m),C(k4.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(R4.$$.fragment,m),C(x$.$$.fragment,m),C(I4.$$.fragment,m),C($$.$$.fragment,m),C(k$.$$.fragment,m),C(R$.$$.fragment,m),C(q4.$$.fragment,m),C(P$.$$.fragment,m),C(H4.$$.fragment,m),C(B$.$$.fragment,m),C(I$.$$.fragment,m),C(q$.$$.fragment,m),C(Y4.$$.fragment,m),C(j$.$$.fragment,m),C(aC.$$.fragment,m),C(D$.$$.fragment,m),C(G$.$$.fragment,m),C(V$.$$.fragment,m),C(sC.$$.fragment,m),C(X$.$$.fragment,m),C(bC.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(U$.$$.fragment,m),C(FC.$$.fragment,m),C(H$.$$.fragment,m),C(CC.$$.fragment,m),C(Y$.$$.fragment,m),C(K$.$$.fragment,m),C(ek.$$.fragment,m),C(AC.$$.fragment,m),C(ok.$$.fragment,m),C(RC.$$.fragment,m),C(rk.$$.fragment,m),C(tk.$$.fragment,m),C(nk.$$.fragment,m),C(BC.$$.fragment,m),C(sk.$$.fragment,m),C(GC.$$.fragment,m),C(lk.$$.fragment,m),C(ik.$$.fragment,m),C(ck.$$.fragment,m),C(VC.$$.fragment,m),C(mk.$$.fragment,m),C(UC.$$.fragment,m),C(fk.$$.fragment,m),C(gk.$$.fragment,m),C(uk.$$.fragment,m),C(JC.$$.fragment,m),C(pk.$$.fragment,m),C(ZC.$$.fragment,m),C(_k.$$.fragment,m),C(bk.$$.fragment,m),C(Fk.$$.fragment,m),C(o3.$$.fragment,m),C(Tk.$$.fragment,m),C(i3.$$.fragment,m),C(Mk.$$.fragment,m),C(Ek.$$.fragment,m),C(wk.$$.fragment,m),C(c3.$$.fragment,m),C(Ak.$$.fragment,m),C(g3.$$.fragment,m),C(Lk.$$.fragment,m),C(yk.$$.fragment,m),C($k.$$.fragment,m),C(u3.$$.fragment,m),C(kk.$$.fragment,m),C(u5.$$.fragment,m),C(Sk.$$.fragment,m),C(Rk.$$.fragment,m),C(Bk.$$.fragment,m),C(_5.$$.fragment,m),C(Ik.$$.fragment,m),C(G5.$$.fragment,m),C(Nk.$$.fragment,m),C(qk.$$.fragment,m),C(Dk.$$.fragment,m),C(V5.$$.fragment,m),C(Gk.$$.fragment,m),C(a0.$$.fragment,m),C(Ok.$$.fragment,m),C(Vk.$$.fragment,m),C(zk.$$.fragment,m),C(s0.$$.fragment,m),C(Qk.$$.fragment,m),C(u0.$$.fragment,m),C(Wk.$$.fragment,m),C(Uk.$$.fragment,m),C(Jk.$$.fragment,m),C(_0.$$.fragment,m),C(Yk.$$.fragment,m),C(T0.$$.fragment,m),C(Kk.$$.fragment,m),C(Zk.$$.fragment,m),C(oS.$$.fragment,m),C(E0.$$.fragment,m),C(rS.$$.fragment,m),C(X0.$$.fragment,m),C(tS.$$.fragment,m),C(aS.$$.fragment,m),C(sS.$$.fragment,m),C(Q0.$$.fragment,m),C(lS.$$.fragment,m),C(tw.$$.fragment,m),C(iS.$$.fragment,m),C(dS.$$.fragment,m),C(mS.$$.fragment,m),C(nw.$$.fragment,m),C(fS.$$.fragment,m),C(Rw.$$.fragment,m),C(gS.$$.fragment,m),C(hS.$$.fragment,m),C(pS.$$.fragment,m),C(Bw.$$.fragment,m),C(_S.$$.fragment,m),C(Zw.$$.fragment,m),C(bS.$$.fragment,m),C(vS.$$.fragment,m),C(TS.$$.fragment,m),C(oA.$$.fragment,m),C(MS.$$.fragment,m),C(aA.$$.fragment,m),C(CS.$$.fragment,m),C(wS.$$.fragment,m),C(LS.$$.fragment,m),C(sA.$$.fragment,m),C(yS.$$.fragment,m),C(iA.$$.fragment,m),C(xS.$$.fragment,m),C($S.$$.fragment,m),C(SS.$$.fragment,m),C(cA.$$.fragment,m),C(RS.$$.fragment,m),C(fA.$$.fragment,m),C(PS.$$.fragment,m),C(BS.$$.fragment,m),C(NS.$$.fragment,m),C(hA.$$.fragment,m),C(qS.$$.fragment,m),C(IA.$$.fragment,m),C(jS.$$.fragment,m),C(DS.$$.fragment,m),C(OS.$$.fragment,m),C(qA.$$.fragment,m),C(VS.$$.fragment,m),C(s6.$$.fragment,m),C(XS.$$.fragment,m),C(zS.$$.fragment,m),C(WS.$$.fragment,m),C(i6.$$.fragment,m),C(US.$$.fragment,m),C(c6.$$.fragment,m),C(HS.$$.fragment,m),C(JS.$$.fragment,m),C(KS.$$.fragment,m),C(f6.$$.fragment,m),C(ZS.$$.fragment,m),C(h6.$$.fragment,m),C(eR.$$.fragment,m),C(oR.$$.fragment,m),C(tR.$$.fragment,m),C(p6.$$.fragment,m),C(aR.$$.fragment,m),C(X6.$$.fragment,m),C(nR.$$.fragment,m),C(sR.$$.fragment,m),C(iR.$$.fragment,m),C(Q6.$$.fragment,m),C(dR.$$.fragment,m),C(t7.$$.fragment,m),C(cR.$$.fragment,m),C(mR.$$.fragment,m),C(gR.$$.fragment,m),C(n7.$$.fragment,m),C(hR.$$.fragment,m),C(v7.$$.fragment,m),C(uR.$$.fragment,m),C(pR.$$.fragment,m),C(bR.$$.fragment,m),C(T7.$$.fragment,m),C(vR.$$.fragment,m),C(S7.$$.fragment,m),C(FR.$$.fragment,m),C(TR.$$.fragment,m),C(ER.$$.fragment,m),C(P7.$$.fragment,m),C(CR.$$.fragment,m),C(z7.$$.fragment,m),C(wR.$$.fragment,m),C(AR.$$.fragment,m),C(yR.$$.fragment,m),C(W7.$$.fragment,m),C(xR.$$.fragment,m),C(aL.$$.fragment,m),C($R.$$.fragment,m),C(kR.$$.fragment,m),C(RR.$$.fragment,m),C(sL.$$.fragment,m),C(PR.$$.fragment,m),C(_L.$$.fragment,m),C(BR.$$.fragment,m),C(IR.$$.fragment,m),C(qR.$$.fragment,m),C(vL.$$.fragment,m),C(jR.$$.fragment,m),C(yL.$$.fragment,m),C(DR.$$.fragment,m),C(GR.$$.fragment,m),C(VR.$$.fragment,m),C($L.$$.fragment,m),C(XR.$$.fragment,m),C(jL.$$.fragment,m),C(zR.$$.fragment,m),C(QR.$$.fragment,m),C(UR.$$.fragment,m),C(GL.$$.fragment,m),C(HR.$$.fragment,m),C(VL.$$.fragment,m),C(JR.$$.fragment,m),C(YR.$$.fragment,m),C(ZR.$$.fragment,m),C(zL.$$.fragment,m),C(eP.$$.fragment,m),C(UL.$$.fragment,m),C(rP.$$.fragment,m),C(tP.$$.fragment,m),C(nP.$$.fragment,m),C(JL.$$.fragment,m),C(sP.$$.fragment,m),C(KL.$$.fragment,m),Eeo=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Ef),m&&t(pt),m&&t(Ve),m&&t(He),m&&t(wf),w(Qa,m),m&&t(Je),m&&t(Ae),m&&t(xo),m&&t(Wa),m&&t(cKe),m&&t(dd),w(S9),m&&t(mKe),m&&t(ts),m&&t(fKe),w(R9,m),m&&t(gKe),m&&t(NB),m&&t(hKe),w(yf,m),m&&t(uKe),m&&t(cd),w(P9),m&&t(pKe),m&&t($o),w(B9),w(q9),w(Hh),w(j9),m&&t(_Ke),m&&t(fd),w(D9),m&&t(bKe),m&&t(ko),w(G9),w(X9),w(Su),w(z9),m&&t(vKe),m&&t(gd),w(Q9),m&&t(FKe),m&&t(So),w(W9),w(J9),w(Tp),w(Mp),w(Y9),m&&t(TKe),m&&t(hd),w(K9),m&&t(MKe),m&&t(Ro),w(Z9),w(rx),w(Qp),w(Wp),w(tx),m&&t(EKe),m&&t(pd),w(ax),m&&t(CKe),m&&t(Po),w(nx),w(lx),w(Jp),w(ix),w(c2),m&&t(wKe),m&&t(vd),w(dx),m&&t(AKe),m&&t(Bo),w(cx),w(fx),w(f2),w(gx),w(i1),m&&t(LKe),m&&t(Md),w(hx),m&&t(yKe),m&&t(Io),w(ux),w(_x),w(c1),w(bx),w(ev),m&&t(xKe),m&&t(wd),w(vx),m&&t($Ke),m&&t(No),w(Fx),w(Mx),w(rv),w(Ex),w(Vv),m&&t(kKe),m&&t(yd),w(Cx),m&&t(SKe),m&&t(qo),w(wx),w(Lx),w(zv),w(yx),w(gF),m&&t(RKe),m&&t(kd),w(xx),m&&t(PKe),m&&t(jo),w($x),w(Sx),w(uF),w(Rx),w(pT),m&&t(BKe),m&&t(Pd),w(Px),m&&t(IKe),m&&t(Do),w(Bx),w(Nx),w(bT),w(qx),w(KT),m&&t(NKe),m&&t(Nd),w(jx),m&&t(qKe),m&&t(Go),w(Dx),w(Ox),w(eM),w(Vx),w(dM),m&&t(jKe),m&&t(Dd),w(Xx),m&&t(DKe),m&&t(Oo),w(zx),w(Wx),w(mM),w(Ux),w(YM),m&&t(GKe),m&&t(Vd),w(Hx),m&&t(OKe),m&&t(Vo),w(Jx),w(Kx),w(ZM),w(Zx),w(zE),m&&t(VKe),m&&t(Qd),w(e$),m&&t(XKe),m&&t(Xo),w(o$),w(t$),w(WE),w(a$),w(JE),m&&t(zKe),m&&t(Hd),w(n$),m&&t(QKe),m&&t(zo),w(s$),w(i$),w(KE),w(d$),w(t4),m&&t(WKe),m&&t(Zd),w(c$),m&&t(UKe),m&&t(Qo),w(m$),w(g$),w(n4),w(h$),w(T4),m&&t(HKe),m&&t(rc),w(u$),m&&t(JKe),m&&t(Wo),w(p$),w(b$),w(E4),w(v$),w(A4),m&&t(YKe),m&&t(nc),w(F$),m&&t(KKe),m&&t(Uo),w(T$),w(E$),w(y4),w(C$),w(k4),m&&t(ZKe),m&&t(ic),w(w$),m&&t(eZe),m&&t(Ho),w(A$),w(y$),w(R4),w(x$),w(I4),m&&t(oZe),m&&t(mc),w($$),m&&t(rZe),m&&t(Jo),w(k$),w(R$),w(q4),w(P$),w(H4),m&&t(tZe),m&&t(hc),w(B$),m&&t(aZe),m&&t(Yo),w(I$),w(q$),w(Y4),w(j$),w(aC),m&&t(nZe),m&&t(_c),w(D$),m&&t(sZe),m&&t(Ko),w(G$),w(V$),w(sC),w(X$),w(bC),m&&t(lZe),m&&t(Fc),w(z$),m&&t(iZe),m&&t(Zo),w(Q$),w(U$),w(FC),w(H$),w(CC),m&&t(dZe),m&&t(Ec),w(Y$),m&&t(cZe),m&&t(er),w(K$),w(ek),w(AC),w(ok),w(RC),m&&t(mZe),m&&t(Ac),w(rk),m&&t(fZe),m&&t(or),w(tk),w(nk),w(BC),w(sk),w(GC),m&&t(gZe),m&&t(xc),w(lk),m&&t(hZe),m&&t(rr),w(ik),w(ck),w(VC),w(mk),w(UC),m&&t(uZe),m&&t(Rc),w(fk),m&&t(pZe),m&&t(tr),w(gk),w(uk),w(JC),w(pk),w(ZC),m&&t(_Ze),m&&t(Ic),w(_k),m&&t(bZe),m&&t(ar),w(bk),w(Fk),w(o3),w(Tk),w(i3),m&&t(vZe),m&&t(jc),w(Mk),m&&t(FZe),m&&t(nr),w(Ek),w(wk),w(c3),w(Ak),w(g3),m&&t(TZe),m&&t(Oc),w(Lk),m&&t(MZe),m&&t(sr),w(yk),w($k),w(u3),w(kk),w(u5),m&&t(EZe),m&&t(zc),w(Sk),m&&t(CZe),m&&t(lr),w(Rk),w(Bk),w(_5),w(Ik),w(G5),m&&t(wZe),m&&t(Uc),w(Nk),m&&t(AZe),m&&t(ir),w(qk),w(Dk),w(V5),w(Gk),w(a0),m&&t(LZe),m&&t(Yc),w(Ok),m&&t(yZe),m&&t(dr),w(Vk),w(zk),w(s0),w(Qk),w(u0),m&&t(xZe),m&&t(em),w(Wk),m&&t($Ze),m&&t(cr),w(Uk),w(Jk),w(_0),w(Yk),w(T0),m&&t(kZe),m&&t(am),w(Kk),m&&t(SZe),m&&t(mr),w(Zk),w(oS),w(E0),w(rS),w(X0),m&&t(RZe),m&&t(lm),w(tS),m&&t(PZe),m&&t(fr),w(aS),w(sS),w(Q0),w(lS),w(tw),m&&t(BZe),m&&t(cm),w(iS),m&&t(IZe),m&&t(gr),w(dS),w(mS),w(nw),w(fS),w(Rw),m&&t(NZe),m&&t(gm),w(gS),m&&t(qZe),m&&t(hr),w(hS),w(pS),w(Bw),w(_S),w(Zw),m&&t(jZe),m&&t(pm),w(bS),m&&t(DZe),m&&t(ur),w(vS),w(TS),w(oA),w(MS),w(aA),m&&t(GZe),m&&t(vm),w(CS),m&&t(OZe),m&&t(pr),w(wS),w(LS),w(sA),w(yS),w(iA),m&&t(VZe),m&&t(Mm),w(xS),m&&t(XZe),m&&t(_r),w($S),w(SS),w(cA),w(RS),w(fA),m&&t(zZe),m&&t(wm),w(PS),m&&t(QZe),m&&t(br),w(BS),w(NS),w(hA),w(qS),w(IA),m&&t(WZe),m&&t(ym),w(jS),m&&t(UZe),m&&t(vr),w(DS),w(OS),w(qA),w(VS),w(s6),m&&t(HZe),m&&t(km),w(XS),m&&t(JZe),m&&t(Fr),w(zS),w(WS),w(i6),w(US),w(c6),m&&t(YZe),m&&t(Pm),w(HS),m&&t(KZe),m&&t(Tr),w(JS),w(KS),w(f6),w(ZS),w(h6),m&&t(ZZe),m&&t(Nm),w(eR),m&&t(eeo),m&&t(Mr),w(oR),w(tR),w(p6),w(aR),w(X6),m&&t(oeo),m&&t(Dm),w(nR),m&&t(reo),m&&t(Er),w(sR),w(iR),w(Q6),w(dR),w(t7),m&&t(teo),m&&t(Vm),w(cR),m&&t(aeo),m&&t(Cr),w(mR),w(gR),w(n7),w(hR),w(v7),m&&t(neo),m&&t(Qm),w(uR),m&&t(seo),m&&t(wr),w(pR),w(bR),w(T7),w(vR),w(S7),m&&t(leo),m&&t(Hm),w(FR),m&&t(ieo),m&&t(Ar),w(TR),w(ER),w(P7),w(CR),w(z7),m&&t(deo),m&&t(Km),w(wR),m&&t(ceo),m&&t(Lr),w(AR),w(yR),w(W7),w(xR),w(aL),m&&t(meo),m&&t(of),w($R),m&&t(feo),m&&t(yr),w(kR),w(RR),w(sL),w(PR),w(_L),m&&t(geo),m&&t(af),w(BR),m&&t(heo),m&&t(xr),w(IR),w(qR),w(vL),w(jR),w(yL),m&&t(ueo),m&&t(lf),w(DR),m&&t(peo),m&&t($r),w(GR),w(VR),w($L),w(XR),w(jL),m&&t(_eo),m&&t(mf),w(zR),m&&t(beo),m&&t(kr),w(QR),w(UR),w(GL),w(HR),w(VL),m&&t(veo),m&&t(hf),w(JR),m&&t(Feo),m&&t(Sr),w(YR),w(ZR),w(zL),w(eP),w(UL),m&&t(Teo),m&&t(_f),w(rP),m&&t(Meo),m&&t(Rr),w(tP),w(nP),w(JL),w(sP),w(KL)}}}const xpa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function $pa($){return Fha(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Npa extends pha{constructor(g){super();_ha(this,g,$pa,ypa,bha,{})}}export{Npa as default,xpa as metadata};
