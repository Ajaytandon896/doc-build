import{S as s$t,i as l$t,s as i$t,e as a,k as l,w as F,t as o,M as d$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as c$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as $Vr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function m$t(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,Ey,um,je,We,hi,yn,Cy,Ln,xn,wy,ui,$n,Ay,pi,pm,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),hm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),gi=o('"new-model"'),Ey=o(")."),um=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),Cy=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),wy=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),Ay=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),pm=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var z$=s(u);f=r(z$,"NewModelConfig"),z$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var W$=s(mi);hm=r(W$,"model_type"),W$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var Q$=s(fi);gi=r(Q$,'"new-model"'),Q$.forEach(t),Ey=r(Ae,")."),Ae.forEach(t),um=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),Cy=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var H$=s(Ln);xn=r(H$,"PreTrainedModel"),H$.forEach(t),wy=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var _m=s(ui);$n=r(_m,"config_class"),_m.forEach(t),Ay=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var U$=s(pi);pm=r(U$,"NewModelConfig"),U$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,hm),e(g,rt),e(g,fi),e(fi,gi),e(g,Ey),b(Qe,um,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,Cy),e(je,Ln),e(Ln,xn),e(je,wy),e(je,ui),e(ui,$n),e(je,Ay),e(je,pi),e(pi,pm),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(um),Qe&&t(je)}}}function f$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h$t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function u$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p$t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function _$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ekt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function okt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function akt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function skt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ikt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ckt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ukt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _kt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ekt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ckt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Akt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ykt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $kt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Skt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ikt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Okt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ukt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ykt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iSt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,Ey,um,je,We,hi,yn,Cy,Ln,xn,wy,ui,$n,Ay,pi,pm,Ca,Qe,Ae,z$,_i,W$,Q$,Eo,wa,H$,_m,U$,dOe,Kqe,bi,bm,soe,yy,cOe,loe,mOe,Zqe,kn,fOe,ioe,gOe,hOe,doe,uOe,pOe,eNe,Ly,oNe,J$,_Oe,rNe,vm,tNe,vi,Fm,coe,xy,bOe,moe,vOe,aNe,Co,$y,FOe,ky,TOe,Y$,MOe,EOe,COe,Sy,wOe,foe,AOe,yOe,LOe,Er,Ry,xOe,goe,$Oe,kOe,Fi,SOe,hoe,ROe,POe,uoe,BOe,IOe,qOe,A,Tm,poe,NOe,jOe,K$,DOe,GOe,OOe,Mm,_oe,VOe,XOe,Z$,zOe,WOe,QOe,Em,boe,HOe,UOe,ek,JOe,YOe,KOe,Cm,voe,ZOe,eVe,ok,oVe,rVe,tVe,wm,Foe,aVe,nVe,rk,sVe,lVe,iVe,Am,Toe,dVe,cVe,tk,mVe,fVe,gVe,ym,Moe,hVe,uVe,ak,pVe,_Ve,bVe,Lm,Eoe,vVe,FVe,nk,TVe,MVe,EVe,xm,Coe,CVe,wVe,sk,AVe,yVe,LVe,$m,woe,xVe,$Ve,lk,kVe,SVe,RVe,km,Aoe,PVe,BVe,ik,IVe,qVe,NVe,Sm,yoe,jVe,DVe,dk,GVe,OVe,VVe,Rm,Loe,XVe,zVe,ck,WVe,QVe,HVe,Pm,xoe,UVe,JVe,mk,YVe,KVe,ZVe,Bm,$oe,eXe,oXe,fk,rXe,tXe,aXe,Im,koe,nXe,sXe,gk,lXe,iXe,dXe,qm,Soe,cXe,mXe,hk,fXe,gXe,hXe,Nm,Roe,uXe,pXe,uk,_Xe,bXe,vXe,jm,Poe,FXe,TXe,pk,MXe,EXe,CXe,Dm,Boe,wXe,AXe,_k,yXe,LXe,xXe,Gm,Ioe,$Xe,kXe,bk,SXe,RXe,PXe,Om,qoe,BXe,IXe,vk,qXe,NXe,jXe,Vm,Noe,DXe,GXe,Fk,OXe,VXe,XXe,Xm,joe,zXe,WXe,Tk,QXe,HXe,UXe,zm,Doe,JXe,YXe,Mk,KXe,ZXe,eze,Wm,Goe,oze,rze,Ek,tze,aze,nze,Qm,Ooe,sze,lze,Ck,ize,dze,cze,Hm,Voe,mze,fze,wk,gze,hze,uze,Um,Xoe,pze,_ze,Ak,bze,vze,Fze,Jm,zoe,Tze,Mze,yk,Eze,Cze,wze,Ym,Woe,Aze,yze,Lk,Lze,xze,$ze,Km,Qoe,kze,Sze,xk,Rze,Pze,Bze,Zm,Hoe,Ize,qze,$k,Nze,jze,Dze,ef,Uoe,Gze,Oze,kk,Vze,Xze,zze,of,Joe,Wze,Qze,Sk,Hze,Uze,Jze,rf,Yoe,Yze,Kze,Rk,Zze,eWe,oWe,tf,Koe,rWe,tWe,Pk,aWe,nWe,sWe,af,Zoe,lWe,iWe,Bk,dWe,cWe,mWe,nf,ere,fWe,gWe,Ik,hWe,uWe,pWe,sf,ore,_We,bWe,qk,vWe,FWe,TWe,lf,rre,MWe,EWe,Nk,CWe,wWe,AWe,df,tre,yWe,LWe,jk,xWe,$We,kWe,cf,are,SWe,RWe,Dk,PWe,BWe,IWe,mf,nre,qWe,NWe,Gk,jWe,DWe,GWe,ff,sre,OWe,VWe,Ok,XWe,zWe,WWe,gf,lre,QWe,HWe,Vk,UWe,JWe,YWe,hf,ire,KWe,ZWe,Xk,eQe,oQe,rQe,uf,dre,tQe,aQe,zk,nQe,sQe,lQe,pf,cre,iQe,dQe,Wk,cQe,mQe,fQe,_f,mre,gQe,hQe,Qk,uQe,pQe,_Qe,bf,fre,bQe,vQe,Hk,FQe,TQe,MQe,vf,gre,EQe,CQe,Uk,wQe,AQe,yQe,Ff,hre,LQe,xQe,Jk,$Qe,kQe,SQe,Tf,ure,RQe,PQe,Yk,BQe,IQe,qQe,Mf,pre,NQe,jQe,Kk,DQe,GQe,OQe,Ef,_re,VQe,XQe,Zk,zQe,WQe,QQe,Cf,bre,HQe,UQe,eS,JQe,YQe,KQe,wf,vre,ZQe,eHe,oS,oHe,rHe,tHe,Af,Fre,aHe,nHe,rS,sHe,lHe,iHe,yf,Tre,dHe,cHe,tS,mHe,fHe,gHe,Lf,Mre,hHe,uHe,aS,pHe,_He,bHe,xf,Ere,vHe,FHe,nS,THe,MHe,EHe,$f,Cre,CHe,wHe,sS,AHe,yHe,LHe,kf,wre,xHe,$He,lS,kHe,SHe,RHe,Sf,Are,PHe,BHe,iS,IHe,qHe,NHe,Rf,yre,jHe,DHe,dS,GHe,OHe,VHe,Pf,Lre,XHe,zHe,cS,WHe,QHe,HHe,Bf,xre,UHe,JHe,mS,YHe,KHe,ZHe,If,$re,eUe,oUe,fS,rUe,tUe,aUe,qf,kre,nUe,sUe,gS,lUe,iUe,dUe,Nf,Sre,cUe,mUe,hS,fUe,gUe,hUe,jf,Rre,uUe,pUe,uS,_Ue,bUe,vUe,Df,Pre,FUe,TUe,pS,MUe,EUe,CUe,Gf,Bre,wUe,AUe,_S,yUe,LUe,xUe,Of,Ire,$Ue,kUe,bS,SUe,RUe,PUe,Vf,qre,BUe,IUe,vS,qUe,NUe,jUe,Xf,Nre,DUe,GUe,FS,OUe,VUe,XUe,zf,jre,zUe,WUe,TS,QUe,HUe,UUe,Wf,Dre,JUe,YUe,MS,KUe,ZUe,eJe,Qf,Gre,oJe,rJe,ES,tJe,aJe,nJe,Hf,Ore,sJe,lJe,CS,iJe,dJe,cJe,Uf,Vre,mJe,fJe,wS,gJe,hJe,uJe,Jf,Xre,pJe,_Je,AS,bJe,vJe,FJe,Yf,zre,TJe,MJe,yS,EJe,CJe,wJe,Kf,Wre,AJe,yJe,LS,LJe,xJe,$Je,Zf,Qre,kJe,SJe,xS,RJe,PJe,BJe,eg,Hre,IJe,qJe,$S,NJe,jJe,DJe,og,Ure,GJe,OJe,kS,VJe,XJe,zJe,rg,Jre,WJe,QJe,SS,HJe,UJe,JJe,tg,Yre,YJe,KJe,RS,ZJe,eYe,oYe,ag,Kre,rYe,tYe,PS,aYe,nYe,sYe,ng,Zre,lYe,iYe,BS,dYe,cYe,mYe,sg,ete,fYe,gYe,IS,hYe,uYe,pYe,lg,ote,_Ye,bYe,qS,vYe,FYe,TYe,ig,rte,MYe,EYe,NS,CYe,wYe,AYe,dg,tte,yYe,LYe,jS,xYe,$Ye,kYe,cg,ate,SYe,RYe,DS,PYe,BYe,IYe,mg,nte,qYe,NYe,GS,jYe,DYe,GYe,fg,ste,OYe,VYe,OS,XYe,zYe,WYe,gg,lte,QYe,HYe,VS,UYe,JYe,YYe,hg,ite,KYe,ZYe,XS,eKe,oKe,rKe,ug,dte,tKe,aKe,zS,nKe,sKe,lKe,pg,cte,iKe,dKe,WS,cKe,mKe,fKe,_g,mte,gKe,hKe,QS,uKe,pKe,_Ke,bg,fte,bKe,vKe,HS,FKe,TKe,MKe,vg,gte,EKe,CKe,US,wKe,AKe,yKe,Fg,hte,LKe,xKe,JS,$Ke,kKe,SKe,Tg,ute,RKe,PKe,YS,BKe,IKe,qKe,Mg,pte,NKe,jKe,KS,DKe,GKe,OKe,Eg,VKe,Cg,Py,XKe,_te,zKe,nNe,Ti,wg,bte,By,WKe,vte,QKe,sNe,wo,Iy,HKe,qy,UKe,ZS,JKe,YKe,KKe,Ny,ZKe,Fte,eZe,oZe,rZe,Cr,jy,tZe,Tte,aZe,nZe,Aa,sZe,Mte,lZe,iZe,Ete,dZe,cZe,Cte,mZe,fZe,gZe,k,Sn,wte,hZe,uZe,eR,pZe,_Ze,oR,bZe,vZe,FZe,Rn,Ate,TZe,MZe,rR,EZe,CZe,tR,wZe,AZe,yZe,Pn,yte,LZe,xZe,aR,$Ze,kZe,nR,SZe,RZe,PZe,Ag,Lte,BZe,IZe,sR,qZe,NZe,jZe,Bn,xte,DZe,GZe,lR,OZe,VZe,iR,XZe,zZe,WZe,yg,$te,QZe,HZe,dR,UZe,JZe,YZe,Lg,kte,KZe,ZZe,cR,eeo,oeo,reo,xg,Ste,teo,aeo,mR,neo,seo,leo,In,Rte,ieo,deo,fR,ceo,meo,gR,feo,geo,heo,qn,Pte,ueo,peo,hR,_eo,beo,uR,veo,Feo,Teo,Nn,Bte,Meo,Eeo,pR,Ceo,weo,_R,Aeo,yeo,Leo,$g,Ite,xeo,$eo,bR,keo,Seo,Reo,kg,qte,Peo,Beo,vR,Ieo,qeo,Neo,jn,Nte,jeo,Deo,FR,Geo,Oeo,TR,Veo,Xeo,zeo,Sg,jte,Weo,Qeo,MR,Heo,Ueo,Jeo,Dn,Dte,Yeo,Keo,ER,Zeo,eoo,CR,ooo,roo,too,Gn,Gte,aoo,noo,wR,soo,loo,AR,ioo,doo,coo,On,Ote,moo,foo,yR,goo,hoo,LR,uoo,poo,_oo,Rg,Vte,boo,voo,xR,Foo,Too,Moo,Vn,Xte,Eoo,Coo,$R,woo,Aoo,kR,yoo,Loo,xoo,Xn,zte,$oo,koo,SR,Soo,Roo,RR,Poo,Boo,Ioo,zn,Wte,qoo,Noo,PR,joo,Doo,BR,Goo,Ooo,Voo,Wn,Qte,Xoo,zoo,IR,Woo,Qoo,qR,Hoo,Uoo,Joo,Qn,Hte,Yoo,Koo,NR,Zoo,ero,jR,oro,rro,tro,Hn,Ute,aro,nro,DR,sro,lro,GR,iro,dro,cro,Pg,Jte,mro,fro,OR,gro,hro,uro,Un,Yte,pro,_ro,VR,bro,vro,XR,Fro,Tro,Mro,Bg,Kte,Ero,Cro,zR,wro,Aro,yro,Jn,Zte,Lro,xro,WR,$ro,kro,QR,Sro,Rro,Pro,Yn,eae,Bro,Iro,HR,qro,Nro,UR,jro,Dro,Gro,Kn,oae,Oro,Vro,JR,Xro,zro,YR,Wro,Qro,Hro,Ig,rae,Uro,Jro,KR,Yro,Kro,Zro,Zn,tae,eto,oto,ZR,rto,tto,eP,ato,nto,sto,es,aae,lto,ito,oP,dto,cto,rP,mto,fto,gto,qg,nae,hto,uto,tP,pto,_to,bto,os,sae,vto,Fto,aP,Tto,Mto,nP,Eto,Cto,wto,rs,lae,Ato,yto,sP,Lto,xto,lP,$to,kto,Sto,ts,iae,Rto,Pto,iP,Bto,Ito,dP,qto,Nto,jto,as,dae,Dto,Gto,cP,Oto,Vto,mP,Xto,zto,Wto,ns,cae,Qto,Hto,fP,Uto,Jto,gP,Yto,Kto,Zto,ss,mae,eao,oao,hP,rao,tao,uP,aao,nao,sao,ls,fae,lao,iao,pP,dao,cao,_P,mao,fao,gao,Ng,gae,hao,uao,bP,pao,_ao,bao,is,hae,vao,Fao,vP,Tao,Mao,FP,Eao,Cao,wao,jg,uae,Aao,yao,TP,Lao,xao,$ao,Dg,pae,kao,Sao,MP,Rao,Pao,Bao,ds,_ae,Iao,qao,EP,Nao,jao,CP,Dao,Gao,Oao,cs,bae,Vao,Xao,wP,zao,Wao,AP,Qao,Hao,Uao,ms,vae,Jao,Yao,yP,Kao,Zao,LP,eno,ono,rno,Gg,Fae,tno,ano,xP,nno,sno,lno,fs,Tae,ino,dno,$P,cno,mno,kP,fno,gno,hno,gs,Mae,uno,pno,SP,_no,bno,RP,vno,Fno,Tno,hs,Eae,Mno,Eno,PP,Cno,wno,BP,Ano,yno,Lno,us,Cae,xno,$no,IP,kno,Sno,qP,Rno,Pno,Bno,ps,wae,Ino,qno,NP,Nno,jno,jP,Dno,Gno,Ono,Og,Aae,Vno,Xno,DP,zno,Wno,Qno,_s,yae,Hno,Uno,GP,Jno,Yno,OP,Kno,Zno,eso,Vg,Lae,oso,rso,VP,tso,aso,nso,Xg,xae,sso,lso,XP,iso,dso,cso,zg,$ae,mso,fso,zP,gso,hso,uso,Wg,kae,pso,_so,WP,bso,vso,Fso,bs,Sae,Tso,Mso,QP,Eso,Cso,HP,wso,Aso,yso,Qg,Rae,Lso,xso,UP,$so,kso,Sso,vs,Pae,Rso,Pso,JP,Bso,Iso,YP,qso,Nso,jso,Fs,Bae,Dso,Gso,KP,Oso,Vso,ZP,Xso,zso,Wso,Ts,Iae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,Ms,qae,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,Es,Nae,llo,ilo,aB,dlo,clo,nB,mlo,flo,glo,Cs,jae,hlo,ulo,sB,plo,_lo,lB,blo,vlo,Flo,Hg,Dae,Tlo,Mlo,iB,Elo,Clo,wlo,Ug,Gae,Alo,ylo,dB,Llo,xlo,$lo,ws,Oae,klo,Slo,cB,Rlo,Plo,mB,Blo,Ilo,qlo,As,Vae,Nlo,jlo,fB,Dlo,Glo,gB,Olo,Vlo,Xlo,ys,Xae,zlo,Wlo,hB,Qlo,Hlo,uB,Ulo,Jlo,Ylo,Jg,zae,Klo,Zlo,pB,eio,oio,rio,Yg,Wae,tio,aio,_B,nio,sio,lio,Kg,Qae,iio,dio,bB,cio,mio,fio,Ls,Hae,gio,hio,vB,uio,pio,FB,_io,bio,vio,Zg,Uae,Fio,Tio,TB,Mio,Eio,Cio,eh,Jae,wio,Aio,MB,yio,Lio,xio,oh,Yae,$io,kio,EB,Sio,Rio,Pio,xs,Kae,Bio,Iio,CB,qio,Nio,wB,jio,Dio,Gio,rh,Zae,Oio,Vio,AB,Xio,zio,Wio,th,ene,Qio,Hio,yB,Uio,Jio,Yio,$s,one,Kio,Zio,LB,edo,odo,xB,rdo,tdo,ado,ks,rne,ndo,sdo,$B,ldo,ido,kB,ddo,cdo,mdo,Ss,tne,fdo,gdo,SB,hdo,udo,RB,pdo,_do,bdo,Rs,ane,vdo,Fdo,PB,Tdo,Mdo,BB,Edo,Cdo,wdo,ah,Ado,nh,Dy,ydo,nne,Ldo,lNe,Mi,sh,sne,Gy,xdo,lne,$do,iNe,Ao,Oy,kdo,Vy,Sdo,IB,Rdo,Pdo,Bdo,Xy,Ido,ine,qdo,Ndo,jdo,He,zy,Ddo,dne,Gdo,Odo,ya,Vdo,cne,Xdo,zdo,mne,Wdo,Qdo,fne,Hdo,Udo,Jdo,Y,lh,gne,Ydo,Kdo,qB,Zdo,eco,oco,ih,hne,rco,tco,NB,aco,nco,sco,dh,une,lco,ico,jB,dco,cco,mco,ch,pne,fco,gco,DB,hco,uco,pco,mh,_ne,_co,bco,GB,vco,Fco,Tco,fh,bne,Mco,Eco,OB,Cco,wco,Aco,gh,vne,yco,Lco,VB,xco,$co,kco,hh,Fne,Sco,Rco,XB,Pco,Bco,Ico,uh,Tne,qco,Nco,zB,jco,Dco,Gco,ph,Mne,Oco,Vco,WB,Xco,zco,Wco,_h,Ene,Qco,Hco,QB,Uco,Jco,Yco,bh,Cne,Kco,Zco,HB,emo,omo,rmo,vh,wne,tmo,amo,UB,nmo,smo,lmo,Fh,Ane,imo,dmo,JB,cmo,mmo,fmo,Th,yne,gmo,hmo,YB,umo,pmo,_mo,Mh,Lne,bmo,vmo,KB,Fmo,Tmo,Mmo,Eh,xne,Emo,Cmo,ZB,wmo,Amo,ymo,Ch,$ne,Lmo,xmo,eI,$mo,kmo,Smo,wh,kne,Rmo,Pmo,oI,Bmo,Imo,qmo,Ah,Sne,Nmo,jmo,rI,Dmo,Gmo,Omo,yh,Rne,Vmo,Xmo,tI,zmo,Wmo,Qmo,Lh,Pne,Hmo,Umo,aI,Jmo,Ymo,Kmo,xh,Bne,Zmo,efo,nI,ofo,rfo,tfo,$h,Ine,afo,nfo,sI,sfo,lfo,ifo,kh,qne,dfo,cfo,lI,mfo,ffo,gfo,Sh,Nne,hfo,ufo,iI,pfo,_fo,bfo,Rh,jne,vfo,Ffo,dI,Tfo,Mfo,Efo,Ph,Dne,Cfo,wfo,cI,Afo,yfo,Lfo,Bh,Gne,xfo,$fo,mI,kfo,Sfo,Rfo,Ih,Pfo,qh,Bfo,Nh,Wy,Ifo,One,qfo,dNe,Ei,jh,Vne,Qy,Nfo,Xne,jfo,cNe,yo,Hy,Dfo,Uy,Gfo,fI,Ofo,Vfo,Xfo,Jy,zfo,zne,Wfo,Qfo,Hfo,Ue,Yy,Ufo,Wne,Jfo,Yfo,Ci,Kfo,Qne,Zfo,ego,Hne,ogo,rgo,tgo,he,Dh,Une,ago,ngo,gI,sgo,lgo,igo,Gh,Jne,dgo,cgo,Yne,mgo,fgo,ggo,Oh,Kne,hgo,ugo,hI,pgo,_go,bgo,Vh,Zne,vgo,Fgo,uI,Tgo,Mgo,Ego,Xh,ese,Cgo,wgo,pI,Ago,ygo,Lgo,zh,ose,xgo,$go,_I,kgo,Sgo,Rgo,Wh,rse,Pgo,Bgo,bI,Igo,qgo,Ngo,Qh,tse,jgo,Dgo,vI,Ggo,Ogo,Vgo,Hh,ase,Xgo,zgo,FI,Wgo,Qgo,Hgo,Uh,nse,Ugo,Jgo,TI,Ygo,Kgo,Zgo,Jh,sse,eho,oho,MI,rho,tho,aho,Yh,lse,nho,sho,EI,lho,iho,dho,Kh,ise,cho,mho,CI,fho,gho,hho,Zh,dse,uho,pho,wI,_ho,bho,vho,eu,cse,Fho,Tho,AI,Mho,Eho,Cho,ou,mse,who,Aho,yI,yho,Lho,xho,ru,fse,$ho,kho,LI,Sho,Rho,Pho,tu,Bho,au,Iho,nu,Ky,qho,gse,Nho,mNe,wi,su,hse,Zy,jho,use,Dho,fNe,Lo,eL,Gho,Ai,Oho,xI,Vho,Xho,$I,zho,Who,Qho,oL,Hho,pse,Uho,Jho,Yho,tt,rL,Kho,_se,Zho,euo,yi,ouo,bse,ruo,tuo,kI,auo,nuo,suo,lu,luo,Je,tL,iuo,vse,duo,cuo,La,muo,Fse,fuo,guo,Tse,huo,uuo,Mse,puo,_uo,buo,x,iu,Ese,vuo,Fuo,SI,Tuo,Muo,Euo,du,Cse,Cuo,wuo,RI,Auo,yuo,Luo,cu,wse,xuo,$uo,PI,kuo,Suo,Ruo,mu,Ase,Puo,Buo,BI,Iuo,quo,Nuo,fu,yse,juo,Duo,II,Guo,Ouo,Vuo,gu,Lse,Xuo,zuo,qI,Wuo,Quo,Huo,hu,xse,Uuo,Juo,NI,Yuo,Kuo,Zuo,uu,$se,epo,opo,jI,rpo,tpo,apo,pu,kse,npo,spo,DI,lpo,ipo,dpo,_u,Sse,cpo,mpo,GI,fpo,gpo,hpo,bu,Rse,upo,ppo,OI,_po,bpo,vpo,vu,Pse,Fpo,Tpo,VI,Mpo,Epo,Cpo,Fu,Bse,wpo,Apo,XI,ypo,Lpo,xpo,Tu,Ise,$po,kpo,zI,Spo,Rpo,Ppo,Mu,qse,Bpo,Ipo,WI,qpo,Npo,jpo,Eu,Nse,Dpo,Gpo,QI,Opo,Vpo,Xpo,Cu,jse,zpo,Wpo,HI,Qpo,Hpo,Upo,wu,Dse,Jpo,Ypo,UI,Kpo,Zpo,e_o,Au,Gse,o_o,r_o,JI,t_o,a_o,n_o,yu,Ose,s_o,l_o,YI,i_o,d_o,c_o,Lu,Vse,m_o,f_o,KI,g_o,h_o,u_o,xu,Xse,p_o,__o,ZI,b_o,v_o,F_o,$u,zse,T_o,M_o,eq,E_o,C_o,w_o,ku,Wse,A_o,y_o,oq,L_o,x_o,$_o,Su,Qse,k_o,S_o,rq,R_o,P_o,B_o,Ru,Hse,I_o,q_o,tq,N_o,j_o,D_o,Pu,Use,G_o,O_o,aq,V_o,X_o,z_o,Bu,Jse,W_o,Q_o,nq,H_o,U_o,J_o,Iu,Yse,Y_o,K_o,sq,Z_o,ebo,obo,qu,Kse,rbo,tbo,lq,abo,nbo,sbo,Nu,Zse,lbo,ibo,iq,dbo,cbo,mbo,ju,ele,fbo,gbo,dq,hbo,ubo,pbo,Ps,ole,_bo,bbo,cq,vbo,Fbo,mq,Tbo,Mbo,Ebo,Du,rle,Cbo,wbo,fq,Abo,ybo,Lbo,Gu,tle,xbo,$bo,gq,kbo,Sbo,Rbo,Ou,ale,Pbo,Bbo,hq,Ibo,qbo,Nbo,Vu,nle,jbo,Dbo,uq,Gbo,Obo,Vbo,Xu,sle,Xbo,zbo,pq,Wbo,Qbo,Hbo,zu,lle,Ubo,Jbo,_q,Ybo,Kbo,Zbo,Wu,ile,e2o,o2o,bq,r2o,t2o,a2o,Qu,dle,n2o,s2o,vq,l2o,i2o,d2o,Hu,cle,c2o,m2o,Fq,f2o,g2o,h2o,Uu,mle,u2o,p2o,Tq,_2o,b2o,v2o,Ju,fle,F2o,T2o,Mq,M2o,E2o,C2o,Yu,gle,w2o,A2o,Eq,y2o,L2o,x2o,Ku,hle,$2o,k2o,Cq,S2o,R2o,P2o,Zu,ule,B2o,I2o,wq,q2o,N2o,j2o,ep,ple,D2o,G2o,Aq,O2o,V2o,X2o,op,_le,z2o,W2o,yq,Q2o,H2o,U2o,rp,ble,J2o,Y2o,Lq,K2o,Z2o,evo,tp,vle,ovo,rvo,xq,tvo,avo,nvo,ap,Fle,svo,lvo,$q,ivo,dvo,cvo,np,Tle,mvo,fvo,kq,gvo,hvo,uvo,sp,Mle,pvo,_vo,Sq,bvo,vvo,Fvo,lp,Ele,Tvo,Mvo,Rq,Evo,Cvo,wvo,ip,Cle,Avo,yvo,Pq,Lvo,xvo,$vo,dp,wle,kvo,Svo,Bq,Rvo,Pvo,Bvo,cp,Ale,Ivo,qvo,Iq,Nvo,jvo,Dvo,mp,yle,Gvo,Ovo,qq,Vvo,Xvo,zvo,fp,Lle,Wvo,Qvo,Nq,Hvo,Uvo,Jvo,gp,xle,Yvo,Kvo,jq,Zvo,eFo,oFo,hp,$le,rFo,tFo,Dq,aFo,nFo,sFo,up,kle,lFo,iFo,Gq,dFo,cFo,mFo,pp,Sle,fFo,gFo,Oq,hFo,uFo,pFo,_p,Rle,_Fo,bFo,Vq,vFo,FFo,TFo,bp,Ple,MFo,EFo,Xq,CFo,wFo,AFo,vp,Ble,yFo,LFo,zq,xFo,$Fo,kFo,Fp,Ile,SFo,RFo,Wq,PFo,BFo,IFo,Tp,qle,qFo,NFo,Qq,jFo,DFo,GFo,Mp,Nle,OFo,VFo,Hq,XFo,zFo,WFo,Ep,jle,QFo,HFo,Uq,UFo,JFo,YFo,Cp,Dle,KFo,ZFo,Jq,e1o,o1o,r1o,wp,Gle,t1o,a1o,Yq,n1o,s1o,l1o,Ap,Ole,i1o,d1o,Kq,c1o,m1o,f1o,yp,Vle,g1o,h1o,Zq,u1o,p1o,_1o,Lp,Xle,b1o,v1o,eN,F1o,T1o,M1o,xp,zle,E1o,C1o,oN,w1o,A1o,y1o,$p,Wle,L1o,x1o,rN,$1o,k1o,S1o,kp,Qle,R1o,P1o,tN,B1o,I1o,q1o,Sp,Hle,N1o,j1o,aN,D1o,G1o,O1o,Rp,Ule,V1o,X1o,nN,z1o,W1o,Q1o,Pp,Jle,H1o,U1o,sN,J1o,Y1o,K1o,Bp,Yle,Z1o,eTo,lN,oTo,rTo,tTo,Ip,Kle,aTo,nTo,iN,sTo,lTo,iTo,qp,Zle,dTo,cTo,dN,mTo,fTo,gTo,Np,eie,hTo,uTo,cN,pTo,_To,bTo,jp,oie,vTo,FTo,mN,TTo,MTo,ETo,Dp,rie,CTo,wTo,fN,ATo,yTo,LTo,Gp,tie,xTo,$To,gN,kTo,STo,RTo,Op,aie,PTo,BTo,hN,ITo,qTo,NTo,Vp,nie,jTo,DTo,uN,GTo,OTo,VTo,Xp,sie,XTo,zTo,pN,WTo,QTo,HTo,zp,lie,UTo,JTo,_N,YTo,KTo,ZTo,Wp,iie,eMo,oMo,bN,rMo,tMo,aMo,Qp,die,nMo,sMo,vN,lMo,iMo,dMo,Hp,cie,cMo,mMo,FN,fMo,gMo,hMo,Up,mie,uMo,pMo,TN,_Mo,bMo,vMo,Jp,fie,FMo,TMo,MN,MMo,EMo,CMo,Yp,gie,wMo,AMo,EN,yMo,LMo,xMo,Kp,hie,$Mo,kMo,CN,SMo,RMo,PMo,Zp,uie,BMo,IMo,wN,qMo,NMo,jMo,e_,pie,DMo,GMo,AN,OMo,VMo,XMo,o_,zMo,_ie,WMo,QMo,bie,HMo,UMo,r_,gNe,Li,t_,vie,aL,JMo,Fie,YMo,hNe,xo,nL,KMo,xi,ZMo,yN,e4o,o4o,LN,r4o,t4o,a4o,sL,n4o,Tie,s4o,l4o,i4o,at,lL,d4o,Mie,c4o,m4o,$i,f4o,Eie,g4o,h4o,xN,u4o,p4o,_4o,a_,b4o,Ye,iL,v4o,Cie,F4o,T4o,xa,M4o,wie,E4o,C4o,Aie,w4o,A4o,yie,y4o,L4o,x4o,G,n_,Lie,$4o,k4o,$N,S4o,R4o,P4o,s_,xie,B4o,I4o,kN,q4o,N4o,j4o,l_,$ie,D4o,G4o,SN,O4o,V4o,X4o,i_,kie,z4o,W4o,RN,Q4o,H4o,U4o,d_,Sie,J4o,Y4o,PN,K4o,Z4o,eEo,c_,Rie,oEo,rEo,BN,tEo,aEo,nEo,m_,Pie,sEo,lEo,IN,iEo,dEo,cEo,f_,Bie,mEo,fEo,qN,gEo,hEo,uEo,g_,Iie,pEo,_Eo,NN,bEo,vEo,FEo,h_,qie,TEo,MEo,jN,EEo,CEo,wEo,u_,Nie,AEo,yEo,DN,LEo,xEo,$Eo,p_,jie,kEo,SEo,GN,REo,PEo,BEo,__,Die,IEo,qEo,ON,NEo,jEo,DEo,b_,Gie,GEo,OEo,VN,VEo,XEo,zEo,v_,Oie,WEo,QEo,XN,HEo,UEo,JEo,F_,Vie,YEo,KEo,zN,ZEo,eCo,oCo,T_,Xie,rCo,tCo,WN,aCo,nCo,sCo,M_,zie,lCo,iCo,QN,dCo,cCo,mCo,E_,Wie,fCo,gCo,HN,hCo,uCo,pCo,C_,Qie,_Co,bCo,UN,vCo,FCo,TCo,w_,Hie,MCo,ECo,JN,CCo,wCo,ACo,A_,Uie,yCo,LCo,YN,xCo,$Co,kCo,y_,Jie,SCo,RCo,KN,PCo,BCo,ICo,L_,Yie,qCo,NCo,ZN,jCo,DCo,GCo,x_,Kie,OCo,VCo,ej,XCo,zCo,WCo,$_,Zie,QCo,HCo,oj,UCo,JCo,YCo,k_,ede,KCo,ZCo,rj,e5o,o5o,r5o,S_,ode,t5o,a5o,tj,n5o,s5o,l5o,R_,rde,i5o,d5o,aj,c5o,m5o,f5o,P_,tde,g5o,h5o,nj,u5o,p5o,_5o,B_,ade,b5o,v5o,sj,F5o,T5o,M5o,I_,nde,E5o,C5o,lj,w5o,A5o,y5o,q_,sde,L5o,x5o,ij,$5o,k5o,S5o,N_,lde,R5o,P5o,dj,B5o,I5o,q5o,j_,ide,N5o,j5o,cj,D5o,G5o,O5o,D_,dde,V5o,X5o,mj,z5o,W5o,Q5o,G_,cde,H5o,U5o,fj,J5o,Y5o,K5o,O_,mde,Z5o,e3o,gj,o3o,r3o,t3o,V_,fde,a3o,n3o,hj,s3o,l3o,i3o,X_,gde,d3o,c3o,uj,m3o,f3o,g3o,z_,hde,h3o,u3o,pj,p3o,_3o,b3o,W_,ude,v3o,F3o,_j,T3o,M3o,E3o,Q_,C3o,pde,w3o,A3o,_de,y3o,L3o,H_,uNe,ki,U_,bde,dL,x3o,vde,$3o,pNe,$o,cL,k3o,Si,S3o,bj,R3o,P3o,vj,B3o,I3o,q3o,mL,N3o,Fde,j3o,D3o,G3o,nt,fL,O3o,Tde,V3o,X3o,Ri,z3o,Mde,W3o,Q3o,Fj,H3o,U3o,J3o,J_,Y3o,Ke,gL,K3o,Ede,Z3o,ewo,$a,owo,Cde,rwo,two,wde,awo,nwo,Ade,swo,lwo,iwo,z,Y_,yde,dwo,cwo,Tj,mwo,fwo,gwo,K_,Lde,hwo,uwo,Mj,pwo,_wo,bwo,Z_,xde,vwo,Fwo,Ej,Two,Mwo,Ewo,eb,$de,Cwo,wwo,Cj,Awo,ywo,Lwo,ob,kde,xwo,$wo,wj,kwo,Swo,Rwo,rb,Sde,Pwo,Bwo,Aj,Iwo,qwo,Nwo,tb,Rde,jwo,Dwo,yj,Gwo,Owo,Vwo,ab,Pde,Xwo,zwo,Lj,Wwo,Qwo,Hwo,nb,Bde,Uwo,Jwo,xj,Ywo,Kwo,Zwo,sb,Ide,e0o,o0o,$j,r0o,t0o,a0o,lb,qde,n0o,s0o,kj,l0o,i0o,d0o,ib,Nde,c0o,m0o,Sj,f0o,g0o,h0o,db,jde,u0o,p0o,Rj,_0o,b0o,v0o,cb,Dde,F0o,T0o,Pj,M0o,E0o,C0o,mb,Gde,w0o,A0o,Bj,y0o,L0o,x0o,fb,Ode,$0o,k0o,Ij,S0o,R0o,P0o,gb,Vde,B0o,I0o,qj,q0o,N0o,j0o,hb,Xde,D0o,G0o,Nj,O0o,V0o,X0o,ub,zde,z0o,W0o,jj,Q0o,H0o,U0o,pb,Wde,J0o,Y0o,Dj,K0o,Z0o,eAo,_b,Qde,oAo,rAo,Gj,tAo,aAo,nAo,bb,Hde,sAo,lAo,Oj,iAo,dAo,cAo,vb,Ude,mAo,fAo,Vj,gAo,hAo,uAo,Fb,Jde,pAo,_Ao,Xj,bAo,vAo,FAo,Tb,Yde,TAo,MAo,zj,EAo,CAo,wAo,Mb,Kde,AAo,yAo,Wj,LAo,xAo,$Ao,Eb,Zde,kAo,SAo,Qj,RAo,PAo,BAo,Cb,ece,IAo,qAo,Hj,NAo,jAo,DAo,wb,oce,GAo,OAo,Uj,VAo,XAo,zAo,Ab,rce,WAo,QAo,Jj,HAo,UAo,JAo,yb,tce,YAo,KAo,Yj,ZAo,e6o,o6o,Lb,ace,r6o,t6o,Kj,a6o,n6o,s6o,xb,nce,l6o,i6o,Zj,d6o,c6o,m6o,$b,sce,f6o,g6o,eD,h6o,u6o,p6o,kb,lce,_6o,b6o,oD,v6o,F6o,T6o,Sb,ice,M6o,E6o,rD,C6o,w6o,A6o,Rb,dce,y6o,L6o,tD,x6o,$6o,k6o,Pb,S6o,cce,R6o,P6o,mce,B6o,I6o,Bb,_Ne,Pi,Ib,fce,hL,q6o,gce,N6o,bNe,ko,uL,j6o,Bi,D6o,aD,G6o,O6o,nD,V6o,X6o,z6o,pL,W6o,hce,Q6o,H6o,U6o,st,_L,J6o,uce,Y6o,K6o,Ii,Z6o,pce,eyo,oyo,sD,ryo,tyo,ayo,qb,nyo,Ze,bL,syo,_ce,lyo,iyo,ka,dyo,bce,cyo,myo,vce,fyo,gyo,Fce,hyo,uyo,pyo,Q,Nb,Tce,_yo,byo,lD,vyo,Fyo,Tyo,jb,Mce,Myo,Eyo,iD,Cyo,wyo,Ayo,Db,Ece,yyo,Lyo,dD,xyo,$yo,kyo,Gb,Cce,Syo,Ryo,cD,Pyo,Byo,Iyo,Ob,wce,qyo,Nyo,mD,jyo,Dyo,Gyo,Vb,Ace,Oyo,Vyo,fD,Xyo,zyo,Wyo,Xb,yce,Qyo,Hyo,gD,Uyo,Jyo,Yyo,zb,Lce,Kyo,Zyo,hD,eLo,oLo,rLo,Wb,xce,tLo,aLo,uD,nLo,sLo,lLo,Qb,$ce,iLo,dLo,pD,cLo,mLo,fLo,Hb,kce,gLo,hLo,_D,uLo,pLo,_Lo,Ub,Sce,bLo,vLo,bD,FLo,TLo,MLo,Jb,Rce,ELo,CLo,vD,wLo,ALo,yLo,Yb,Pce,LLo,xLo,FD,$Lo,kLo,SLo,Kb,Bce,RLo,PLo,TD,BLo,ILo,qLo,Zb,Ice,NLo,jLo,MD,DLo,GLo,OLo,e2,qce,VLo,XLo,ED,zLo,WLo,QLo,o2,Nce,HLo,ULo,CD,JLo,YLo,KLo,r2,jce,ZLo,e8o,wD,o8o,r8o,t8o,t2,Dce,a8o,n8o,AD,s8o,l8o,i8o,a2,Gce,d8o,c8o,yD,m8o,f8o,g8o,n2,Oce,h8o,u8o,LD,p8o,_8o,b8o,s2,Vce,v8o,F8o,xD,T8o,M8o,E8o,l2,Xce,C8o,w8o,$D,A8o,y8o,L8o,i2,zce,x8o,$8o,kD,k8o,S8o,R8o,d2,Wce,P8o,B8o,SD,I8o,q8o,N8o,c2,Qce,j8o,D8o,RD,G8o,O8o,V8o,m2,Hce,X8o,z8o,PD,W8o,Q8o,H8o,f2,Uce,U8o,J8o,BD,Y8o,K8o,Z8o,g2,Jce,e7o,o7o,ID,r7o,t7o,a7o,h2,Yce,n7o,s7o,Kce,l7o,i7o,d7o,u2,Zce,c7o,m7o,qD,f7o,g7o,h7o,p2,eme,u7o,p7o,ND,_7o,b7o,v7o,_2,ome,F7o,T7o,jD,M7o,E7o,C7o,b2,rme,w7o,A7o,DD,y7o,L7o,x7o,v2,$7o,tme,k7o,S7o,ame,R7o,P7o,F2,vNe,qi,T2,nme,vL,B7o,sme,I7o,FNe,So,FL,q7o,Ni,N7o,GD,j7o,D7o,OD,G7o,O7o,V7o,TL,X7o,lme,z7o,W7o,Q7o,lt,ML,H7o,ime,U7o,J7o,ji,Y7o,dme,K7o,Z7o,VD,e9o,o9o,r9o,M2,t9o,eo,EL,a9o,cme,n9o,s9o,Sa,l9o,mme,i9o,d9o,fme,c9o,m9o,gme,f9o,g9o,h9o,pe,E2,hme,u9o,p9o,XD,_9o,b9o,v9o,C2,ume,F9o,T9o,zD,M9o,E9o,C9o,w2,pme,w9o,A9o,WD,y9o,L9o,x9o,A2,_me,$9o,k9o,QD,S9o,R9o,P9o,y2,bme,B9o,I9o,HD,q9o,N9o,j9o,L2,vme,D9o,G9o,UD,O9o,V9o,X9o,x2,Fme,z9o,W9o,JD,Q9o,H9o,U9o,$2,Tme,J9o,Y9o,YD,K9o,Z9o,exo,k2,Mme,oxo,rxo,KD,txo,axo,nxo,S2,Eme,sxo,lxo,ZD,ixo,dxo,cxo,R2,Cme,mxo,fxo,eG,gxo,hxo,uxo,P2,wme,pxo,_xo,oG,bxo,vxo,Fxo,B2,Ame,Txo,Mxo,rG,Exo,Cxo,wxo,I2,yme,Axo,yxo,tG,Lxo,xxo,$xo,q2,Lme,kxo,Sxo,aG,Rxo,Pxo,Bxo,N2,xme,Ixo,qxo,nG,Nxo,jxo,Dxo,j2,Gxo,$me,Oxo,Vxo,kme,Xxo,zxo,D2,TNe,Di,G2,Sme,CL,Wxo,Rme,Qxo,MNe,Ro,wL,Hxo,Gi,Uxo,sG,Jxo,Yxo,lG,Kxo,Zxo,e$o,AL,o$o,Pme,r$o,t$o,a$o,it,yL,n$o,Bme,s$o,l$o,Oi,i$o,Ime,d$o,c$o,iG,m$o,f$o,g$o,O2,h$o,oo,LL,u$o,qme,p$o,_$o,Ra,b$o,Nme,v$o,F$o,jme,T$o,M$o,Dme,E$o,C$o,w$o,q,V2,Gme,A$o,y$o,dG,L$o,x$o,$$o,X2,Ome,k$o,S$o,cG,R$o,P$o,B$o,z2,Vme,I$o,q$o,mG,N$o,j$o,D$o,W2,Xme,G$o,O$o,fG,V$o,X$o,z$o,Q2,zme,W$o,Q$o,gG,H$o,U$o,J$o,H2,Wme,Y$o,K$o,hG,Z$o,eko,oko,U2,Qme,rko,tko,uG,ako,nko,sko,J2,Hme,lko,iko,pG,dko,cko,mko,Y2,Ume,fko,gko,_G,hko,uko,pko,K2,Jme,_ko,bko,bG,vko,Fko,Tko,Z2,Yme,Mko,Eko,vG,Cko,wko,Ako,ev,Kme,yko,Lko,FG,xko,$ko,kko,ov,Zme,Sko,Rko,TG,Pko,Bko,Iko,rv,efe,qko,Nko,MG,jko,Dko,Gko,tv,ofe,Oko,Vko,EG,Xko,zko,Wko,av,rfe,Qko,Hko,CG,Uko,Jko,Yko,nv,tfe,Kko,Zko,wG,eSo,oSo,rSo,sv,afe,tSo,aSo,AG,nSo,sSo,lSo,lv,nfe,iSo,dSo,yG,cSo,mSo,fSo,iv,sfe,gSo,hSo,LG,uSo,pSo,_So,dv,lfe,bSo,vSo,xG,FSo,TSo,MSo,cv,ife,ESo,CSo,$G,wSo,ASo,ySo,mv,dfe,LSo,xSo,kG,$So,kSo,SSo,fv,cfe,RSo,PSo,SG,BSo,ISo,qSo,gv,mfe,NSo,jSo,RG,DSo,GSo,OSo,hv,ffe,VSo,XSo,PG,zSo,WSo,QSo,uv,gfe,HSo,USo,BG,JSo,YSo,KSo,pv,hfe,ZSo,eRo,IG,oRo,rRo,tRo,_v,ufe,aRo,nRo,qG,sRo,lRo,iRo,bv,pfe,dRo,cRo,NG,mRo,fRo,gRo,vv,_fe,hRo,uRo,jG,pRo,_Ro,bRo,Fv,bfe,vRo,FRo,DG,TRo,MRo,ERo,Tv,vfe,CRo,wRo,GG,ARo,yRo,LRo,Mv,Ffe,xRo,$Ro,OG,kRo,SRo,RRo,Ev,Tfe,PRo,BRo,VG,IRo,qRo,NRo,Cv,Mfe,jRo,DRo,XG,GRo,ORo,VRo,wv,Efe,XRo,zRo,zG,WRo,QRo,HRo,Av,Cfe,URo,JRo,WG,YRo,KRo,ZRo,yv,wfe,ePo,oPo,QG,rPo,tPo,aPo,Lv,Afe,nPo,sPo,HG,lPo,iPo,dPo,xv,yfe,cPo,mPo,UG,fPo,gPo,hPo,$v,Lfe,uPo,pPo,JG,_Po,bPo,vPo,kv,xfe,FPo,TPo,YG,MPo,EPo,CPo,Sv,$fe,wPo,APo,KG,yPo,LPo,xPo,Rv,kfe,$Po,kPo,ZG,SPo,RPo,PPo,Pv,Sfe,BPo,IPo,eO,qPo,NPo,jPo,Bv,Rfe,DPo,GPo,oO,OPo,VPo,XPo,Iv,zPo,Pfe,WPo,QPo,Bfe,HPo,UPo,qv,ENe,Vi,Nv,Ife,xL,JPo,qfe,YPo,CNe,Po,$L,KPo,Xi,ZPo,rO,eBo,oBo,tO,rBo,tBo,aBo,kL,nBo,Nfe,sBo,lBo,iBo,dt,SL,dBo,jfe,cBo,mBo,zi,fBo,Dfe,gBo,hBo,aO,uBo,pBo,_Bo,jv,bBo,ro,RL,vBo,Gfe,FBo,TBo,Pa,MBo,Ofe,EBo,CBo,Vfe,wBo,ABo,Xfe,yBo,LBo,xBo,K,Dv,zfe,$Bo,kBo,nO,SBo,RBo,PBo,Gv,Wfe,BBo,IBo,sO,qBo,NBo,jBo,Ov,Qfe,DBo,GBo,lO,OBo,VBo,XBo,Vv,Hfe,zBo,WBo,iO,QBo,HBo,UBo,Xv,Ufe,JBo,YBo,dO,KBo,ZBo,eIo,zv,Jfe,oIo,rIo,cO,tIo,aIo,nIo,Wv,Yfe,sIo,lIo,mO,iIo,dIo,cIo,Qv,Kfe,mIo,fIo,fO,gIo,hIo,uIo,Hv,Zfe,pIo,_Io,gO,bIo,vIo,FIo,Uv,ege,TIo,MIo,hO,EIo,CIo,wIo,Jv,oge,AIo,yIo,uO,LIo,xIo,$Io,Yv,rge,kIo,SIo,pO,RIo,PIo,BIo,Kv,tge,IIo,qIo,_O,NIo,jIo,DIo,Zv,age,GIo,OIo,bO,VIo,XIo,zIo,eF,nge,WIo,QIo,vO,HIo,UIo,JIo,oF,sge,YIo,KIo,FO,ZIo,eqo,oqo,rF,lge,rqo,tqo,TO,aqo,nqo,sqo,tF,ige,lqo,iqo,MO,dqo,cqo,mqo,aF,dge,fqo,gqo,EO,hqo,uqo,pqo,nF,cge,_qo,bqo,CO,vqo,Fqo,Tqo,sF,mge,Mqo,Eqo,wO,Cqo,wqo,Aqo,lF,fge,yqo,Lqo,AO,xqo,$qo,kqo,iF,gge,Sqo,Rqo,yO,Pqo,Bqo,Iqo,dF,hge,qqo,Nqo,LO,jqo,Dqo,Gqo,cF,uge,Oqo,Vqo,xO,Xqo,zqo,Wqo,mF,pge,Qqo,Hqo,$O,Uqo,Jqo,Yqo,fF,_ge,Kqo,Zqo,kO,eNo,oNo,rNo,gF,bge,tNo,aNo,SO,nNo,sNo,lNo,hF,vge,iNo,dNo,RO,cNo,mNo,fNo,uF,gNo,Fge,hNo,uNo,Tge,pNo,_No,pF,wNe,Wi,_F,Mge,PL,bNo,Ege,vNo,ANe,Bo,BL,FNo,Qi,TNo,PO,MNo,ENo,BO,CNo,wNo,ANo,IL,yNo,Cge,LNo,xNo,$No,ct,qL,kNo,wge,SNo,RNo,Hi,PNo,Age,BNo,INo,IO,qNo,NNo,jNo,bF,DNo,to,NL,GNo,yge,ONo,VNo,Ba,XNo,Lge,zNo,WNo,xge,QNo,HNo,$ge,UNo,JNo,YNo,Yr,vF,kge,KNo,ZNo,qO,ejo,ojo,rjo,FF,Sge,tjo,ajo,NO,njo,sjo,ljo,TF,Rge,ijo,djo,jO,cjo,mjo,fjo,MF,Pge,gjo,hjo,DO,ujo,pjo,_jo,EF,Bge,bjo,vjo,GO,Fjo,Tjo,Mjo,CF,Ejo,Ige,Cjo,wjo,qge,Ajo,yjo,wF,yNe,Ui,AF,Nge,jL,Ljo,jge,xjo,LNe,Io,DL,$jo,Ji,kjo,OO,Sjo,Rjo,VO,Pjo,Bjo,Ijo,GL,qjo,Dge,Njo,jjo,Djo,mt,OL,Gjo,Gge,Ojo,Vjo,Yi,Xjo,Oge,zjo,Wjo,XO,Qjo,Hjo,Ujo,yF,Jjo,ao,VL,Yjo,Vge,Kjo,Zjo,Ia,eDo,Xge,oDo,rDo,zge,tDo,aDo,Wge,nDo,sDo,lDo,H,LF,Qge,iDo,dDo,zO,cDo,mDo,fDo,xF,Hge,gDo,hDo,WO,uDo,pDo,_Do,$F,Uge,bDo,vDo,QO,FDo,TDo,MDo,kF,Jge,EDo,CDo,HO,wDo,ADo,yDo,SF,Yge,LDo,xDo,UO,$Do,kDo,SDo,RF,Kge,RDo,PDo,JO,BDo,IDo,qDo,PF,Zge,NDo,jDo,YO,DDo,GDo,ODo,BF,ehe,VDo,XDo,KO,zDo,WDo,QDo,IF,ohe,HDo,UDo,ZO,JDo,YDo,KDo,qF,rhe,ZDo,eGo,eV,oGo,rGo,tGo,NF,the,aGo,nGo,oV,sGo,lGo,iGo,jF,ahe,dGo,cGo,rV,mGo,fGo,gGo,DF,nhe,hGo,uGo,tV,pGo,_Go,bGo,GF,she,vGo,FGo,aV,TGo,MGo,EGo,OF,lhe,CGo,wGo,nV,AGo,yGo,LGo,VF,ihe,xGo,$Go,sV,kGo,SGo,RGo,XF,dhe,PGo,BGo,lV,IGo,qGo,NGo,zF,che,jGo,DGo,iV,GGo,OGo,VGo,WF,mhe,XGo,zGo,dV,WGo,QGo,HGo,QF,fhe,UGo,JGo,cV,YGo,KGo,ZGo,HF,ghe,eOo,oOo,mV,rOo,tOo,aOo,UF,hhe,nOo,sOo,fV,lOo,iOo,dOo,JF,uhe,cOo,mOo,gV,fOo,gOo,hOo,YF,phe,uOo,pOo,hV,_Oo,bOo,vOo,KF,_he,FOo,TOo,uV,MOo,EOo,COo,ZF,bhe,wOo,AOo,pV,yOo,LOo,xOo,e1,vhe,$Oo,kOo,_V,SOo,ROo,POo,o1,Fhe,BOo,IOo,bV,qOo,NOo,jOo,r1,The,DOo,GOo,vV,OOo,VOo,XOo,t1,Mhe,zOo,WOo,FV,QOo,HOo,UOo,a1,Ehe,JOo,YOo,TV,KOo,ZOo,eVo,n1,Che,oVo,rVo,MV,tVo,aVo,nVo,s1,whe,sVo,lVo,EV,iVo,dVo,cVo,l1,Ahe,mVo,fVo,CV,gVo,hVo,uVo,i1,pVo,yhe,_Vo,bVo,Lhe,vVo,FVo,d1,xNe,Ki,c1,xhe,XL,TVo,$he,MVo,$Ne,qo,zL,EVo,Zi,CVo,wV,wVo,AVo,AV,yVo,LVo,xVo,WL,$Vo,khe,kVo,SVo,RVo,ft,QL,PVo,She,BVo,IVo,ed,qVo,Rhe,NVo,jVo,yV,DVo,GVo,OVo,m1,VVo,no,HL,XVo,Phe,zVo,WVo,qa,QVo,Bhe,HVo,UVo,Ihe,JVo,YVo,qhe,KVo,ZVo,eXo,V,f1,Nhe,oXo,rXo,LV,tXo,aXo,nXo,g1,jhe,sXo,lXo,xV,iXo,dXo,cXo,h1,Dhe,mXo,fXo,$V,gXo,hXo,uXo,u1,Ghe,pXo,_Xo,kV,bXo,vXo,FXo,p1,Ohe,TXo,MXo,SV,EXo,CXo,wXo,_1,Vhe,AXo,yXo,RV,LXo,xXo,$Xo,b1,Xhe,kXo,SXo,PV,RXo,PXo,BXo,v1,zhe,IXo,qXo,BV,NXo,jXo,DXo,F1,Whe,GXo,OXo,IV,VXo,XXo,zXo,T1,Qhe,WXo,QXo,qV,HXo,UXo,JXo,M1,Hhe,YXo,KXo,NV,ZXo,ezo,ozo,E1,Uhe,rzo,tzo,jV,azo,nzo,szo,C1,Jhe,lzo,izo,DV,dzo,czo,mzo,w1,Yhe,fzo,gzo,GV,hzo,uzo,pzo,A1,Khe,_zo,bzo,OV,vzo,Fzo,Tzo,y1,Zhe,Mzo,Ezo,VV,Czo,wzo,Azo,L1,eue,yzo,Lzo,XV,xzo,$zo,kzo,x1,oue,Szo,Rzo,zV,Pzo,Bzo,Izo,$1,rue,qzo,Nzo,WV,jzo,Dzo,Gzo,k1,tue,Ozo,Vzo,QV,Xzo,zzo,Wzo,S1,aue,Qzo,Hzo,HV,Uzo,Jzo,Yzo,R1,nue,Kzo,Zzo,UV,eWo,oWo,rWo,P1,sue,tWo,aWo,JV,nWo,sWo,lWo,B1,lue,iWo,dWo,YV,cWo,mWo,fWo,I1,iue,gWo,hWo,KV,uWo,pWo,_Wo,q1,due,bWo,vWo,ZV,FWo,TWo,MWo,N1,cue,EWo,CWo,eX,wWo,AWo,yWo,j1,mue,LWo,xWo,oX,$Wo,kWo,SWo,D1,fue,RWo,PWo,rX,BWo,IWo,qWo,G1,gue,NWo,jWo,tX,DWo,GWo,OWo,O1,hue,VWo,XWo,aX,zWo,WWo,QWo,V1,uue,HWo,UWo,nX,JWo,YWo,KWo,X1,pue,ZWo,eQo,sX,oQo,rQo,tQo,z1,_ue,aQo,nQo,lX,sQo,lQo,iQo,W1,bue,dQo,cQo,iX,mQo,fQo,gQo,Q1,vue,hQo,uQo,dX,pQo,_Qo,bQo,H1,Fue,vQo,FQo,cX,TQo,MQo,EQo,U1,Tue,CQo,wQo,mX,AQo,yQo,LQo,J1,Mue,xQo,$Qo,fX,kQo,SQo,RQo,Y1,Eue,PQo,BQo,gX,IQo,qQo,NQo,K1,jQo,Cue,DQo,GQo,wue,OQo,VQo,Z1,kNe,od,eT,Aue,UL,XQo,yue,zQo,SNe,No,JL,WQo,rd,QQo,hX,HQo,UQo,uX,JQo,YQo,KQo,YL,ZQo,Lue,eHo,oHo,rHo,gt,KL,tHo,xue,aHo,nHo,td,sHo,$ue,lHo,iHo,pX,dHo,cHo,mHo,oT,fHo,so,ZL,gHo,kue,hHo,uHo,Na,pHo,Sue,_Ho,bHo,Rue,vHo,FHo,Pue,THo,MHo,EHo,Bue,rT,Iue,CHo,wHo,_X,AHo,yHo,LHo,tT,xHo,que,$Ho,kHo,Nue,SHo,RHo,aT,RNe,ad,nT,jue,e8,PHo,Due,BHo,PNe,jo,o8,IHo,nd,qHo,bX,NHo,jHo,vX,DHo,GHo,OHo,r8,VHo,Gue,XHo,zHo,WHo,ht,t8,QHo,Oue,HHo,UHo,sd,JHo,Vue,YHo,KHo,FX,ZHo,eUo,oUo,sT,rUo,lo,a8,tUo,Xue,aUo,nUo,ja,sUo,zue,lUo,iUo,Wue,dUo,cUo,Que,mUo,fUo,gUo,Fe,lT,Hue,hUo,uUo,TX,pUo,_Uo,bUo,iT,Uue,vUo,FUo,MX,TUo,MUo,EUo,dT,Jue,CUo,wUo,EX,AUo,yUo,LUo,cT,Yue,xUo,$Uo,CX,kUo,SUo,RUo,Bs,Kue,PUo,BUo,wX,IUo,qUo,AX,NUo,jUo,DUo,mT,Zue,GUo,OUo,yX,VUo,XUo,zUo,ut,epe,WUo,QUo,LX,HUo,UUo,xX,JUo,YUo,$X,KUo,ZUo,eJo,fT,ope,oJo,rJo,kX,tJo,aJo,nJo,gT,rpe,sJo,lJo,SX,iJo,dJo,cJo,hT,tpe,mJo,fJo,RX,gJo,hJo,uJo,uT,ape,pJo,_Jo,PX,bJo,vJo,FJo,pT,npe,TJo,MJo,BX,EJo,CJo,wJo,_T,spe,AJo,yJo,IX,LJo,xJo,$Jo,bT,lpe,kJo,SJo,qX,RJo,PJo,BJo,vT,IJo,ipe,qJo,NJo,dpe,jJo,DJo,FT,BNe,ld,TT,cpe,n8,GJo,mpe,OJo,INe,Do,s8,VJo,id,XJo,NX,zJo,WJo,jX,QJo,HJo,UJo,l8,JJo,fpe,YJo,KJo,ZJo,pt,i8,eYo,gpe,oYo,rYo,dd,tYo,hpe,aYo,nYo,DX,sYo,lYo,iYo,MT,dYo,io,d8,cYo,upe,mYo,fYo,Da,gYo,ppe,hYo,uYo,_pe,pYo,_Yo,bpe,bYo,vYo,FYo,vpe,ET,Fpe,TYo,MYo,GX,EYo,CYo,wYo,CT,AYo,Tpe,yYo,LYo,Mpe,xYo,$Yo,wT,qNe,cd,AT,Epe,c8,kYo,Cpe,SYo,NNe,Go,m8,RYo,md,PYo,OX,BYo,IYo,VX,qYo,NYo,jYo,f8,DYo,wpe,GYo,OYo,VYo,_t,g8,XYo,Ape,zYo,WYo,fd,QYo,ype,HYo,UYo,XX,JYo,YYo,KYo,yT,ZYo,co,h8,eKo,Lpe,oKo,rKo,Ga,tKo,xpe,aKo,nKo,$pe,sKo,lKo,kpe,iKo,dKo,cKo,ke,LT,Spe,mKo,fKo,zX,gKo,hKo,uKo,xT,Rpe,pKo,_Ko,WX,bKo,vKo,FKo,$T,Ppe,TKo,MKo,QX,EKo,CKo,wKo,kT,Bpe,AKo,yKo,HX,LKo,xKo,$Ko,ST,Ipe,kKo,SKo,UX,RKo,PKo,BKo,RT,qpe,IKo,qKo,JX,NKo,jKo,DKo,PT,Npe,GKo,OKo,YX,VKo,XKo,zKo,BT,jpe,WKo,QKo,KX,HKo,UKo,JKo,IT,Dpe,YKo,KKo,ZX,ZKo,eZo,oZo,qT,rZo,Gpe,tZo,aZo,Ope,nZo,sZo,NT,jNe,gd,jT,Vpe,u8,lZo,Xpe,iZo,DNe,Oo,p8,dZo,hd,cZo,ez,mZo,fZo,oz,gZo,hZo,uZo,_8,pZo,zpe,_Zo,bZo,vZo,bt,b8,FZo,Wpe,TZo,MZo,ud,EZo,Qpe,CZo,wZo,rz,AZo,yZo,LZo,DT,xZo,mo,v8,$Zo,Hpe,kZo,SZo,Oa,RZo,Upe,PZo,BZo,Jpe,IZo,qZo,Ype,NZo,jZo,DZo,Kr,GT,Kpe,GZo,OZo,tz,VZo,XZo,zZo,OT,Zpe,WZo,QZo,az,HZo,UZo,JZo,VT,e_e,YZo,KZo,nz,ZZo,eer,oer,XT,o_e,rer,ter,sz,aer,ner,ser,zT,r_e,ler,ier,lz,der,cer,mer,WT,fer,t_e,ger,her,a_e,uer,per,QT,GNe,pd,HT,n_e,F8,_er,s_e,ber,ONe,Vo,T8,ver,_d,Fer,iz,Ter,Mer,dz,Eer,Cer,wer,M8,Aer,l_e,yer,Ler,xer,vt,E8,$er,i_e,ker,Ser,bd,Rer,d_e,Per,Ber,cz,Ier,qer,Ner,UT,jer,fo,C8,Der,c_e,Ger,Oer,Va,Ver,m_e,Xer,zer,f_e,Wer,Qer,g_e,Her,Uer,Jer,Se,JT,h_e,Yer,Ker,mz,Zer,eor,oor,YT,u_e,ror,tor,fz,aor,nor,sor,KT,p_e,lor,ior,gz,dor,cor,mor,ZT,__e,gor,hor,hz,uor,por,_or,eM,b_e,bor,vor,uz,For,Tor,Mor,oM,v_e,Eor,Cor,pz,wor,Aor,yor,rM,F_e,Lor,xor,_z,$or,kor,Sor,tM,T_e,Ror,Por,bz,Bor,Ior,qor,aM,M_e,Nor,jor,vz,Dor,Gor,Oor,nM,Vor,E_e,Xor,zor,C_e,Wor,Qor,sM,VNe,vd,lM,w_e,w8,Hor,A_e,Uor,XNe,Xo,A8,Jor,Fd,Yor,Fz,Kor,Zor,Tz,err,orr,rrr,y8,trr,y_e,arr,nrr,srr,Ft,L8,lrr,L_e,irr,drr,Td,crr,x_e,mrr,frr,Mz,grr,hrr,urr,iM,prr,go,x8,_rr,$_e,brr,vrr,Xa,Frr,k_e,Trr,Mrr,S_e,Err,Crr,R_e,wrr,Arr,yrr,$8,dM,P_e,Lrr,xrr,Ez,$rr,krr,Srr,cM,B_e,Rrr,Prr,Cz,Brr,Irr,qrr,mM,Nrr,I_e,jrr,Drr,q_e,Grr,Orr,fM,zNe,Md,gM,N_e,k8,Vrr,j_e,Xrr,WNe,zo,S8,zrr,Ed,Wrr,wz,Qrr,Hrr,Az,Urr,Jrr,Yrr,R8,Krr,D_e,Zrr,etr,otr,Tt,P8,rtr,G_e,ttr,atr,Cd,ntr,O_e,str,ltr,yz,itr,dtr,ctr,hM,mtr,ho,B8,ftr,V_e,gtr,htr,za,utr,X_e,ptr,_tr,z_e,btr,vtr,W_e,Ftr,Ttr,Mtr,Zr,uM,Q_e,Etr,Ctr,Lz,wtr,Atr,ytr,pM,H_e,Ltr,xtr,xz,$tr,ktr,Str,_M,U_e,Rtr,Ptr,$z,Btr,Itr,qtr,bM,J_e,Ntr,jtr,kz,Dtr,Gtr,Otr,vM,Y_e,Vtr,Xtr,Sz,ztr,Wtr,Qtr,FM,Htr,K_e,Utr,Jtr,Z_e,Ytr,Ktr,TM,QNe,wd,MM,ebe,I8,Ztr,obe,ear,HNe,Wo,q8,oar,Ad,rar,Rz,tar,aar,Pz,nar,sar,lar,N8,iar,rbe,dar,car,mar,Mt,j8,far,tbe,gar,har,yd,uar,abe,par,_ar,Bz,bar,Far,Tar,EM,Mar,uo,D8,Ear,nbe,Car,war,Wa,Aar,sbe,yar,Lar,lbe,xar,$ar,ibe,kar,Sar,Rar,Ld,CM,dbe,Par,Bar,Iz,Iar,qar,Nar,wM,cbe,jar,Dar,qz,Gar,Oar,Var,AM,mbe,Xar,zar,Nz,War,Qar,Har,yM,Uar,fbe,Jar,Yar,gbe,Kar,Zar,LM,UNe,xd,xM,hbe,G8,enr,ube,onr,JNe,Qo,O8,rnr,$d,tnr,jz,anr,nnr,Dz,snr,lnr,inr,V8,dnr,pbe,cnr,mnr,fnr,Et,X8,gnr,_be,hnr,unr,kd,pnr,bbe,_nr,bnr,Gz,vnr,Fnr,Tnr,$M,Mnr,po,z8,Enr,vbe,Cnr,wnr,Qa,Anr,Fbe,ynr,Lnr,Tbe,xnr,$nr,Mbe,knr,Snr,Rnr,W8,kM,Ebe,Pnr,Bnr,Oz,Inr,qnr,Nnr,SM,Cbe,jnr,Dnr,Vz,Gnr,Onr,Vnr,RM,Xnr,wbe,znr,Wnr,Abe,Qnr,Hnr,PM,YNe,Sd,BM,ybe,Q8,Unr,Lbe,Jnr,KNe,Ho,H8,Ynr,Rd,Knr,Xz,Znr,esr,zz,osr,rsr,tsr,U8,asr,xbe,nsr,ssr,lsr,Ct,J8,isr,$be,dsr,csr,Pd,msr,kbe,fsr,gsr,Wz,hsr,usr,psr,IM,_sr,_o,Y8,bsr,Sbe,vsr,Fsr,Ha,Tsr,Rbe,Msr,Esr,Pbe,Csr,wsr,Bbe,Asr,ysr,Lsr,Ibe,qM,qbe,xsr,$sr,Qz,ksr,Ssr,Rsr,NM,Psr,Nbe,Bsr,Isr,jbe,qsr,Nsr,jM,ZNe,Bd,DM,Dbe,K8,jsr,Gbe,Dsr,eje,Uo,Z8,Gsr,Id,Osr,Hz,Vsr,Xsr,Uz,zsr,Wsr,Qsr,e7,Hsr,Obe,Usr,Jsr,Ysr,wt,o7,Ksr,Vbe,Zsr,elr,qd,olr,Xbe,rlr,tlr,Jz,alr,nlr,slr,GM,llr,bo,r7,ilr,zbe,dlr,clr,Ua,mlr,Wbe,flr,glr,Qbe,hlr,ulr,Hbe,plr,_lr,blr,Ja,OM,Ube,vlr,Flr,Yz,Tlr,Mlr,Elr,VM,Jbe,Clr,wlr,Kz,Alr,ylr,Llr,XM,Ybe,xlr,$lr,Zz,klr,Slr,Rlr,zM,Kbe,Plr,Blr,eW,Ilr,qlr,Nlr,WM,jlr,Zbe,Dlr,Glr,e2e,Olr,Vlr,QM,oje,Nd,HM,o2e,t7,Xlr,r2e,zlr,rje,Jo,a7,Wlr,jd,Qlr,oW,Hlr,Ulr,rW,Jlr,Ylr,Klr,n7,Zlr,t2e,eir,oir,rir,At,s7,tir,a2e,air,nir,Dd,sir,n2e,lir,iir,tW,dir,cir,mir,UM,fir,vo,l7,gir,s2e,hir,uir,Ya,pir,l2e,_ir,bir,i2e,vir,Fir,d2e,Tir,Mir,Eir,c2e,JM,m2e,Cir,wir,aW,Air,yir,Lir,YM,xir,f2e,$ir,kir,g2e,Sir,Rir,KM,tje,Gd,ZM,h2e,i7,Pir,u2e,Bir,aje,Yo,d7,Iir,Od,qir,nW,Nir,jir,sW,Dir,Gir,Oir,c7,Vir,p2e,Xir,zir,Wir,yt,m7,Qir,_2e,Hir,Uir,Vd,Jir,b2e,Yir,Kir,lW,Zir,edr,odr,e4,rdr,wr,f7,tdr,v2e,adr,ndr,Ka,sdr,F2e,ldr,idr,T2e,ddr,cdr,M2e,mdr,fdr,gdr,N,o4,E2e,hdr,udr,iW,pdr,_dr,bdr,r4,C2e,vdr,Fdr,dW,Tdr,Mdr,Edr,t4,w2e,Cdr,wdr,cW,Adr,ydr,Ldr,a4,A2e,xdr,$dr,mW,kdr,Sdr,Rdr,n4,y2e,Pdr,Bdr,fW,Idr,qdr,Ndr,s4,L2e,jdr,Ddr,gW,Gdr,Odr,Vdr,l4,x2e,Xdr,zdr,hW,Wdr,Qdr,Hdr,i4,$2e,Udr,Jdr,uW,Ydr,Kdr,Zdr,d4,k2e,ecr,ocr,pW,rcr,tcr,acr,c4,S2e,ncr,scr,_W,lcr,icr,dcr,m4,R2e,ccr,mcr,bW,fcr,gcr,hcr,f4,P2e,ucr,pcr,vW,_cr,bcr,vcr,g4,B2e,Fcr,Tcr,FW,Mcr,Ecr,Ccr,h4,I2e,wcr,Acr,TW,ycr,Lcr,xcr,u4,q2e,$cr,kcr,MW,Scr,Rcr,Pcr,p4,N2e,Bcr,Icr,EW,qcr,Ncr,jcr,_4,j2e,Dcr,Gcr,CW,Ocr,Vcr,Xcr,Is,D2e,zcr,Wcr,wW,Qcr,Hcr,AW,Ucr,Jcr,Ycr,b4,G2e,Kcr,Zcr,yW,emr,omr,rmr,v4,O2e,tmr,amr,LW,nmr,smr,lmr,F4,V2e,imr,dmr,xW,cmr,mmr,fmr,T4,X2e,gmr,hmr,$W,umr,pmr,_mr,M4,z2e,bmr,vmr,kW,Fmr,Tmr,Mmr,E4,W2e,Emr,Cmr,SW,wmr,Amr,ymr,C4,Q2e,Lmr,xmr,RW,$mr,kmr,Smr,w4,H2e,Rmr,Pmr,PW,Bmr,Imr,qmr,A4,U2e,Nmr,jmr,BW,Dmr,Gmr,Omr,y4,J2e,Vmr,Xmr,IW,zmr,Wmr,Qmr,L4,Y2e,Hmr,Umr,qW,Jmr,Ymr,Kmr,x4,K2e,Zmr,efr,NW,ofr,rfr,tfr,$4,Z2e,afr,nfr,jW,sfr,lfr,ifr,k4,eve,dfr,cfr,DW,mfr,ffr,gfr,S4,ove,hfr,ufr,GW,pfr,_fr,bfr,R4,rve,vfr,Ffr,OW,Tfr,Mfr,Efr,P4,tve,Cfr,wfr,VW,Afr,yfr,Lfr,B4,ave,xfr,$fr,XW,kfr,Sfr,Rfr,I4,nve,Pfr,Bfr,zW,Ifr,qfr,Nfr,q4,sve,jfr,Dfr,WW,Gfr,Ofr,Vfr,N4,lve,Xfr,zfr,QW,Wfr,Qfr,Hfr,j4,ive,Ufr,Jfr,HW,Yfr,Kfr,Zfr,D4,dve,egr,ogr,UW,rgr,tgr,agr,G4,cve,ngr,sgr,JW,lgr,igr,dgr,O4,mve,cgr,mgr,YW,fgr,ggr,hgr,V4,fve,ugr,pgr,KW,_gr,bgr,vgr,X4,gve,Fgr,Tgr,ZW,Mgr,Egr,Cgr,z4,hve,wgr,Agr,eQ,ygr,Lgr,xgr,W4,nje,Xd,Q4,uve,g7,$gr,pve,kgr,sje,Ko,h7,Sgr,zd,Rgr,oQ,Pgr,Bgr,rQ,Igr,qgr,Ngr,u7,jgr,_ve,Dgr,Ggr,Ogr,Lt,p7,Vgr,bve,Xgr,zgr,Wd,Wgr,vve,Qgr,Hgr,tQ,Ugr,Jgr,Ygr,H4,Kgr,Ar,_7,Zgr,Fve,ehr,ohr,Za,rhr,Tve,thr,ahr,Mve,nhr,shr,Eve,lhr,ihr,dhr,se,U4,Cve,chr,mhr,aQ,fhr,ghr,hhr,J4,wve,uhr,phr,nQ,_hr,bhr,vhr,Y4,Ave,Fhr,Thr,sQ,Mhr,Ehr,Chr,K4,yve,whr,Ahr,lQ,yhr,Lhr,xhr,Z4,Lve,$hr,khr,iQ,Shr,Rhr,Phr,eE,xve,Bhr,Ihr,dQ,qhr,Nhr,jhr,oE,$ve,Dhr,Ghr,cQ,Ohr,Vhr,Xhr,rE,kve,zhr,Whr,mQ,Qhr,Hhr,Uhr,tE,Sve,Jhr,Yhr,fQ,Khr,Zhr,eur,aE,Rve,our,rur,gQ,tur,aur,nur,nE,Pve,sur,lur,hQ,iur,dur,cur,sE,Bve,mur,fur,uQ,gur,hur,uur,lE,Ive,pur,_ur,pQ,bur,vur,Fur,iE,qve,Tur,Mur,_Q,Eur,Cur,wur,dE,Nve,Aur,yur,bQ,Lur,xur,$ur,cE,jve,kur,Sur,vQ,Rur,Pur,Bur,mE,Dve,Iur,qur,FQ,Nur,jur,Dur,fE,Gve,Gur,Our,TQ,Vur,Xur,zur,gE,Ove,Wur,Qur,MQ,Hur,Uur,Jur,hE,Vve,Yur,Kur,EQ,Zur,epr,opr,uE,Xve,rpr,tpr,CQ,apr,npr,spr,pE,zve,lpr,ipr,wQ,dpr,cpr,mpr,_E,Wve,fpr,gpr,AQ,hpr,upr,ppr,bE,lje,Qd,vE,Qve,b7,_pr,Hve,bpr,ije,Zo,v7,vpr,Hd,Fpr,yQ,Tpr,Mpr,LQ,Epr,Cpr,wpr,F7,Apr,Uve,ypr,Lpr,xpr,xt,T7,$pr,Jve,kpr,Spr,Ud,Rpr,Yve,Ppr,Bpr,xQ,Ipr,qpr,Npr,FE,jpr,yr,M7,Dpr,Kve,Gpr,Opr,en,Vpr,Zve,Xpr,zpr,eFe,Wpr,Qpr,oFe,Hpr,Upr,Jpr,Me,TE,rFe,Ypr,Kpr,$Q,Zpr,e_r,o_r,ME,tFe,r_r,t_r,kQ,a_r,n_r,s_r,EE,aFe,l_r,i_r,SQ,d_r,c_r,m_r,CE,nFe,f_r,g_r,RQ,h_r,u_r,p_r,wE,sFe,__r,b_r,PQ,v_r,F_r,T_r,AE,lFe,M_r,E_r,BQ,C_r,w_r,A_r,yE,iFe,y_r,L_r,IQ,x_r,$_r,k_r,LE,dFe,S_r,R_r,qQ,P_r,B_r,I_r,xE,cFe,q_r,N_r,NQ,j_r,D_r,G_r,$E,mFe,O_r,V_r,jQ,X_r,z_r,W_r,kE,fFe,Q_r,H_r,DQ,U_r,J_r,Y_r,SE,gFe,K_r,Z_r,GQ,ebr,obr,rbr,RE,dje,Jd,PE,hFe,E7,tbr,uFe,abr,cje,er,C7,nbr,Yd,sbr,OQ,lbr,ibr,VQ,dbr,cbr,mbr,w7,fbr,pFe,gbr,hbr,ubr,$t,A7,pbr,_Fe,_br,bbr,Kd,vbr,bFe,Fbr,Tbr,XQ,Mbr,Ebr,Cbr,BE,wbr,Lr,y7,Abr,vFe,ybr,Lbr,on,xbr,FFe,$br,kbr,TFe,Sbr,Rbr,MFe,Pbr,Bbr,Ibr,rn,IE,EFe,qbr,Nbr,zQ,jbr,Dbr,Gbr,qE,CFe,Obr,Vbr,WQ,Xbr,zbr,Wbr,NE,wFe,Qbr,Hbr,QQ,Ubr,Jbr,Ybr,jE,AFe,Kbr,Zbr,HQ,e2r,o2r,r2r,DE,mje,Zd,GE,yFe,L7,t2r,LFe,a2r,fje,or,x7,n2r,ec,s2r,UQ,l2r,i2r,JQ,d2r,c2r,m2r,$7,f2r,xFe,g2r,h2r,u2r,kt,k7,p2r,$Fe,_2r,b2r,oc,v2r,kFe,F2r,T2r,YQ,M2r,E2r,C2r,OE,w2r,xr,S7,A2r,SFe,y2r,L2r,tn,x2r,RFe,$2r,k2r,PFe,S2r,R2r,BFe,P2r,B2r,I2r,ie,VE,IFe,q2r,N2r,KQ,j2r,D2r,G2r,XE,qFe,O2r,V2r,ZQ,X2r,z2r,W2r,zE,NFe,Q2r,H2r,eH,U2r,J2r,Y2r,WE,jFe,K2r,Z2r,oH,evr,ovr,rvr,QE,DFe,tvr,avr,rH,nvr,svr,lvr,HE,GFe,ivr,dvr,tH,cvr,mvr,fvr,UE,OFe,gvr,hvr,aH,uvr,pvr,_vr,JE,VFe,bvr,vvr,nH,Fvr,Tvr,Mvr,YE,XFe,Evr,Cvr,sH,wvr,Avr,yvr,KE,zFe,Lvr,xvr,lH,$vr,kvr,Svr,ZE,WFe,Rvr,Pvr,iH,Bvr,Ivr,qvr,eC,QFe,Nvr,jvr,dH,Dvr,Gvr,Ovr,oC,HFe,Vvr,Xvr,cH,zvr,Wvr,Qvr,rC,UFe,Hvr,Uvr,mH,Jvr,Yvr,Kvr,tC,JFe,Zvr,eFr,fH,oFr,rFr,tFr,aC,YFe,aFr,nFr,gH,sFr,lFr,iFr,nC,KFe,dFr,cFr,hH,mFr,fFr,gFr,sC,ZFe,hFr,uFr,uH,pFr,_Fr,bFr,lC,e1e,vFr,FFr,pH,TFr,MFr,EFr,iC,o1e,CFr,wFr,_H,AFr,yFr,LFr,dC,gje,rc,cC,r1e,R7,xFr,t1e,$Fr,hje,rr,P7,kFr,tc,SFr,bH,RFr,PFr,vH,BFr,IFr,qFr,B7,NFr,a1e,jFr,DFr,GFr,St,I7,OFr,n1e,VFr,XFr,ac,zFr,s1e,WFr,QFr,FH,HFr,UFr,JFr,mC,YFr,$r,q7,KFr,l1e,ZFr,e1r,an,o1r,i1e,r1r,t1r,d1e,a1r,n1r,c1e,s1r,l1r,i1r,ye,fC,m1e,d1r,c1r,TH,m1r,f1r,g1r,gC,f1e,h1r,u1r,MH,p1r,_1r,b1r,hC,g1e,v1r,F1r,EH,T1r,M1r,E1r,uC,h1e,C1r,w1r,CH,A1r,y1r,L1r,pC,u1e,x1r,$1r,wH,k1r,S1r,R1r,_C,p1e,P1r,B1r,AH,I1r,q1r,N1r,bC,_1e,j1r,D1r,yH,G1r,O1r,V1r,vC,b1e,X1r,z1r,LH,W1r,Q1r,H1r,FC,v1e,U1r,J1r,xH,Y1r,K1r,Z1r,TC,F1e,eTr,oTr,$H,rTr,tTr,aTr,MC,uje,nc,EC,T1e,N7,nTr,M1e,sTr,pje,tr,j7,lTr,sc,iTr,kH,dTr,cTr,SH,mTr,fTr,gTr,D7,hTr,E1e,uTr,pTr,_Tr,Rt,G7,bTr,C1e,vTr,FTr,lc,TTr,w1e,MTr,ETr,RH,CTr,wTr,ATr,CC,yTr,kr,O7,LTr,A1e,xTr,$Tr,nn,kTr,y1e,STr,RTr,L1e,PTr,BTr,x1e,ITr,qTr,NTr,oe,wC,$1e,jTr,DTr,PH,GTr,OTr,VTr,AC,k1e,XTr,zTr,BH,WTr,QTr,HTr,yC,S1e,UTr,JTr,IH,YTr,KTr,ZTr,LC,R1e,eMr,oMr,qH,rMr,tMr,aMr,xC,P1e,nMr,sMr,NH,lMr,iMr,dMr,$C,B1e,cMr,mMr,jH,fMr,gMr,hMr,kC,I1e,uMr,pMr,DH,_Mr,bMr,vMr,SC,q1e,FMr,TMr,GH,MMr,EMr,CMr,RC,N1e,wMr,AMr,OH,yMr,LMr,xMr,PC,j1e,$Mr,kMr,VH,SMr,RMr,PMr,BC,D1e,BMr,IMr,XH,qMr,NMr,jMr,IC,G1e,DMr,GMr,zH,OMr,VMr,XMr,qC,O1e,zMr,WMr,WH,QMr,HMr,UMr,NC,V1e,JMr,YMr,QH,KMr,ZMr,e4r,jC,X1e,o4r,r4r,HH,t4r,a4r,n4r,DC,z1e,s4r,l4r,UH,i4r,d4r,c4r,GC,W1e,m4r,f4r,JH,g4r,h4r,u4r,OC,Q1e,p4r,_4r,YH,b4r,v4r,F4r,VC,H1e,T4r,M4r,KH,E4r,C4r,w4r,XC,U1e,A4r,y4r,ZH,L4r,x4r,$4r,zC,J1e,k4r,S4r,eU,R4r,P4r,B4r,WC,Y1e,I4r,q4r,oU,N4r,j4r,D4r,QC,K1e,G4r,O4r,rU,V4r,X4r,z4r,HC,Z1e,W4r,Q4r,tU,H4r,U4r,J4r,UC,eTe,Y4r,K4r,aU,Z4r,eEr,oEr,JC,oTe,rEr,tEr,nU,aEr,nEr,sEr,YC,_je,ic,KC,rTe,V7,lEr,tTe,iEr,bje,ar,X7,dEr,dc,cEr,sU,mEr,fEr,lU,gEr,hEr,uEr,z7,pEr,aTe,_Er,bEr,vEr,Pt,W7,FEr,nTe,TEr,MEr,cc,EEr,sTe,CEr,wEr,iU,AEr,yEr,LEr,ZC,xEr,Sr,Q7,$Er,lTe,kEr,SEr,sn,REr,iTe,PEr,BEr,dTe,IEr,qEr,cTe,NEr,jEr,DEr,ue,e5,mTe,GEr,OEr,dU,VEr,XEr,zEr,o5,fTe,WEr,QEr,cU,HEr,UEr,JEr,r5,gTe,YEr,KEr,mU,ZEr,eCr,oCr,t5,hTe,rCr,tCr,fU,aCr,nCr,sCr,a5,uTe,lCr,iCr,gU,dCr,cCr,mCr,n5,pTe,fCr,gCr,hU,hCr,uCr,pCr,s5,_Te,_Cr,bCr,uU,vCr,FCr,TCr,l5,bTe,MCr,ECr,pU,CCr,wCr,ACr,i5,vTe,yCr,LCr,_U,xCr,$Cr,kCr,d5,FTe,SCr,RCr,bU,PCr,BCr,ICr,c5,TTe,qCr,NCr,vU,jCr,DCr,GCr,m5,MTe,OCr,VCr,FU,XCr,zCr,WCr,f5,ETe,QCr,HCr,TU,UCr,JCr,YCr,g5,CTe,KCr,ZCr,MU,e5r,o5r,r5r,h5,wTe,t5r,a5r,EU,n5r,s5r,l5r,u5,ATe,i5r,d5r,CU,c5r,m5r,f5r,p5,yTe,g5r,h5r,wU,u5r,p5r,_5r,_5,vje,mc,b5,LTe,H7,b5r,xTe,v5r,Fje,nr,U7,F5r,fc,T5r,AU,M5r,E5r,yU,C5r,w5r,A5r,J7,y5r,$Te,L5r,x5r,$5r,Bt,Y7,k5r,kTe,S5r,R5r,gc,P5r,STe,B5r,I5r,LU,q5r,N5r,j5r,v5,D5r,Rr,K7,G5r,RTe,O5r,V5r,ln,X5r,PTe,z5r,W5r,BTe,Q5r,H5r,ITe,U5r,J5r,Y5r,Z7,F5,qTe,K5r,Z5r,xU,e3r,o3r,r3r,T5,NTe,t3r,a3r,$U,n3r,s3r,l3r,M5,Tje,hc,E5,jTe,e9,i3r,DTe,d3r,Mje,sr,o9,c3r,uc,m3r,kU,f3r,g3r,SU,h3r,u3r,p3r,r9,_3r,GTe,b3r,v3r,F3r,It,t9,T3r,OTe,M3r,E3r,pc,C3r,VTe,w3r,A3r,RU,y3r,L3r,x3r,C5,$3r,Pr,a9,k3r,XTe,S3r,R3r,dn,P3r,zTe,B3r,I3r,WTe,q3r,N3r,QTe,j3r,D3r,G3r,HTe,w5,UTe,O3r,V3r,PU,X3r,z3r,W3r,A5,Eje,_c,y5,JTe,n9,Q3r,YTe,H3r,Cje,lr,s9,U3r,bc,J3r,BU,Y3r,K3r,IU,Z3r,ewr,owr,l9,rwr,KTe,twr,awr,nwr,qt,i9,swr,ZTe,lwr,iwr,vc,dwr,eMe,cwr,mwr,qU,fwr,gwr,hwr,L5,uwr,Br,d9,pwr,oMe,_wr,bwr,cn,vwr,rMe,Fwr,Twr,tMe,Mwr,Ewr,aMe,Cwr,wwr,Awr,de,x5,nMe,ywr,Lwr,NU,xwr,$wr,kwr,$5,sMe,Swr,Rwr,jU,Pwr,Bwr,Iwr,k5,lMe,qwr,Nwr,DU,jwr,Dwr,Gwr,S5,iMe,Owr,Vwr,GU,Xwr,zwr,Wwr,R5,dMe,Qwr,Hwr,OU,Uwr,Jwr,Ywr,P5,cMe,Kwr,Zwr,VU,e0r,o0r,r0r,B5,mMe,t0r,a0r,XU,n0r,s0r,l0r,I5,fMe,i0r,d0r,zU,c0r,m0r,f0r,q5,gMe,g0r,h0r,WU,u0r,p0r,_0r,N5,hMe,b0r,v0r,QU,F0r,T0r,M0r,j5,uMe,E0r,C0r,HU,w0r,A0r,y0r,D5,pMe,L0r,x0r,UU,$0r,k0r,S0r,G5,_Me,R0r,P0r,JU,B0r,I0r,q0r,O5,bMe,N0r,j0r,YU,D0r,G0r,O0r,V5,vMe,V0r,X0r,KU,z0r,W0r,Q0r,X5,FMe,H0r,U0r,ZU,J0r,Y0r,K0r,z5,TMe,Z0r,eAr,eJ,oAr,rAr,tAr,W5,MMe,aAr,nAr,oJ,sAr,lAr,iAr,Q5,EMe,dAr,cAr,rJ,mAr,fAr,gAr,H5,CMe,hAr,uAr,tJ,pAr,_Ar,bAr,U5,wje,Fc,J5,wMe,c9,vAr,AMe,FAr,Aje,ir,m9,TAr,Tc,MAr,aJ,EAr,CAr,nJ,wAr,AAr,yAr,f9,LAr,yMe,xAr,$Ar,kAr,Nt,g9,SAr,LMe,RAr,PAr,Mc,BAr,xMe,IAr,qAr,sJ,NAr,jAr,DAr,Y5,GAr,Ir,h9,OAr,$Me,VAr,XAr,mn,zAr,kMe,WAr,QAr,SMe,HAr,UAr,RMe,JAr,YAr,KAr,ce,K5,PMe,ZAr,e6r,lJ,o6r,r6r,t6r,Z5,BMe,a6r,n6r,iJ,s6r,l6r,i6r,e3,IMe,d6r,c6r,dJ,m6r,f6r,g6r,o3,qMe,h6r,u6r,cJ,p6r,_6r,b6r,r3,NMe,v6r,F6r,mJ,T6r,M6r,E6r,t3,jMe,C6r,w6r,fJ,A6r,y6r,L6r,a3,DMe,x6r,$6r,gJ,k6r,S6r,R6r,n3,GMe,P6r,B6r,hJ,I6r,q6r,N6r,s3,OMe,j6r,D6r,uJ,G6r,O6r,V6r,l3,VMe,X6r,z6r,pJ,W6r,Q6r,H6r,i3,XMe,U6r,J6r,_J,Y6r,K6r,Z6r,d3,zMe,eyr,oyr,bJ,ryr,tyr,ayr,c3,WMe,nyr,syr,vJ,lyr,iyr,dyr,m3,QMe,cyr,myr,FJ,fyr,gyr,hyr,f3,HMe,uyr,pyr,TJ,_yr,byr,vyr,g3,UMe,Fyr,Tyr,MJ,Myr,Eyr,Cyr,h3,JMe,wyr,Ayr,EJ,yyr,Lyr,xyr,u3,YMe,$yr,kyr,CJ,Syr,Ryr,Pyr,p3,KMe,Byr,Iyr,wJ,qyr,Nyr,jyr,_3,ZMe,Dyr,Gyr,AJ,Oyr,Vyr,Xyr,b3,yje,Ec,v3,e4e,u9,zyr,o4e,Wyr,Lje,dr,p9,Qyr,Cc,Hyr,yJ,Uyr,Jyr,LJ,Yyr,Kyr,Zyr,_9,eLr,r4e,oLr,rLr,tLr,jt,b9,aLr,t4e,nLr,sLr,wc,lLr,a4e,iLr,dLr,xJ,cLr,mLr,fLr,F3,gLr,qr,v9,hLr,n4e,uLr,pLr,fn,_Lr,s4e,bLr,vLr,l4e,FLr,TLr,i4e,MLr,ELr,CLr,d4e,T3,c4e,wLr,ALr,$J,yLr,LLr,xLr,M3,xje,Ac,E3,m4e,F9,$Lr,f4e,kLr,$je,cr,T9,SLr,yc,RLr,kJ,PLr,BLr,SJ,ILr,qLr,NLr,M9,jLr,g4e,DLr,GLr,OLr,Dt,E9,VLr,h4e,XLr,zLr,Lc,WLr,u4e,QLr,HLr,RJ,ULr,JLr,YLr,C3,KLr,Nr,C9,ZLr,p4e,e8r,o8r,gn,r8r,_4e,t8r,a8r,b4e,n8r,s8r,v4e,l8r,i8r,d8r,F4e,w3,T4e,c8r,m8r,PJ,f8r,g8r,h8r,A3,kje,xc,y3,M4e,w9,u8r,E4e,p8r,Sje,mr,A9,_8r,$c,b8r,BJ,v8r,F8r,IJ,T8r,M8r,E8r,y9,C8r,C4e,w8r,A8r,y8r,Gt,L9,L8r,w4e,x8r,$8r,kc,k8r,A4e,S8r,R8r,qJ,P8r,B8r,I8r,L3,q8r,jr,x9,N8r,y4e,j8r,D8r,hn,G8r,L4e,O8r,V8r,x4e,X8r,z8r,$4e,W8r,Q8r,H8r,te,x3,k4e,U8r,J8r,NJ,Y8r,K8r,Z8r,$3,S4e,e7r,o7r,jJ,r7r,t7r,a7r,k3,R4e,n7r,s7r,DJ,l7r,i7r,d7r,S3,P4e,c7r,m7r,GJ,f7r,g7r,h7r,R3,B4e,u7r,p7r,OJ,_7r,b7r,v7r,P3,I4e,F7r,T7r,VJ,M7r,E7r,C7r,B3,q4e,w7r,A7r,XJ,y7r,L7r,x7r,I3,N4e,$7r,k7r,zJ,S7r,R7r,P7r,q3,j4e,B7r,I7r,WJ,q7r,N7r,j7r,N3,D4e,D7r,G7r,QJ,O7r,V7r,X7r,j3,G4e,z7r,W7r,HJ,Q7r,H7r,U7r,D3,O4e,J7r,Y7r,UJ,K7r,Z7r,e9r,G3,V4e,o9r,r9r,JJ,t9r,a9r,n9r,O3,X4e,s9r,l9r,YJ,i9r,d9r,c9r,V3,z4e,m9r,f9r,KJ,g9r,h9r,u9r,X3,W4e,p9r,_9r,ZJ,b9r,v9r,F9r,z3,Q4e,T9r,M9r,eY,E9r,C9r,w9r,W3,H4e,A9r,y9r,oY,L9r,x9r,$9r,Q3,U4e,k9r,S9r,rY,R9r,P9r,B9r,H3,J4e,I9r,q9r,tY,N9r,j9r,D9r,U3,Y4e,G9r,O9r,aY,V9r,X9r,z9r,J3,K4e,W9r,Q9r,nY,H9r,U9r,J9r,Y3,Z4e,Y9r,K9r,sY,Z9r,exr,oxr,K3,eEe,rxr,txr,lY,axr,nxr,sxr,Z3,oEe,lxr,ixr,iY,dxr,cxr,mxr,ew,Rje,Sc,ow,rEe,$9,fxr,tEe,gxr,Pje,fr,k9,hxr,Rc,uxr,dY,pxr,_xr,cY,bxr,vxr,Fxr,S9,Txr,aEe,Mxr,Exr,Cxr,Ot,R9,wxr,nEe,Axr,yxr,Pc,Lxr,sEe,xxr,$xr,mY,kxr,Sxr,Rxr,rw,Pxr,Dr,P9,Bxr,lEe,Ixr,qxr,un,Nxr,iEe,jxr,Dxr,dEe,Gxr,Oxr,cEe,Vxr,Xxr,zxr,Re,tw,mEe,Wxr,Qxr,fY,Hxr,Uxr,Jxr,aw,fEe,Yxr,Kxr,gY,Zxr,e$r,o$r,nw,gEe,r$r,t$r,hY,a$r,n$r,s$r,sw,hEe,l$r,i$r,uY,d$r,c$r,m$r,lw,uEe,f$r,g$r,pY,h$r,u$r,p$r,iw,pEe,_$r,b$r,_Y,v$r,F$r,T$r,dw,_Ee,M$r,E$r,bY,C$r,w$r,A$r,cw,bEe,y$r,L$r,vY,x$r,$$r,k$r,mw,vEe,S$r,R$r,FY,P$r,B$r,I$r,fw,Bje,Bc,gw,FEe,B9,q$r,TEe,N$r,Ije,gr,I9,j$r,Ic,D$r,TY,G$r,O$r,MY,V$r,X$r,z$r,q9,W$r,MEe,Q$r,H$r,U$r,Vt,N9,J$r,EEe,Y$r,K$r,qc,Z$r,CEe,ekr,okr,EY,rkr,tkr,akr,hw,nkr,Gr,j9,skr,wEe,lkr,ikr,pn,dkr,AEe,ckr,mkr,yEe,fkr,gkr,LEe,hkr,ukr,pkr,Ee,uw,xEe,_kr,bkr,CY,vkr,Fkr,Tkr,pw,$Ee,Mkr,Ekr,wY,Ckr,wkr,Akr,_w,kEe,ykr,Lkr,AY,xkr,$kr,kkr,bw,SEe,Skr,Rkr,yY,Pkr,Bkr,Ikr,vw,REe,qkr,Nkr,LY,jkr,Dkr,Gkr,Fw,PEe,Okr,Vkr,xY,Xkr,zkr,Wkr,Tw,BEe,Qkr,Hkr,$Y,Ukr,Jkr,Ykr,Mw,IEe,Kkr,Zkr,kY,eSr,oSr,rSr,Ew,qEe,tSr,aSr,SY,nSr,sSr,lSr,Cw,NEe,iSr,dSr,RY,cSr,mSr,fSr,ww,jEe,gSr,hSr,PY,uSr,pSr,_Sr,Aw,DEe,bSr,vSr,BY,FSr,TSr,MSr,yw,qje,Nc,Lw,GEe,D9,ESr,OEe,CSr,Nje,hr,G9,wSr,jc,ASr,IY,ySr,LSr,qY,xSr,$Sr,kSr,O9,SSr,VEe,RSr,PSr,BSr,Xt,V9,ISr,XEe,qSr,NSr,Dc,jSr,zEe,DSr,GSr,NY,OSr,VSr,XSr,xw,zSr,Or,X9,WSr,WEe,QSr,HSr,_n,USr,QEe,JSr,YSr,HEe,KSr,ZSr,UEe,eRr,oRr,rRr,Le,$w,JEe,tRr,aRr,jY,nRr,sRr,lRr,kw,YEe,iRr,dRr,DY,cRr,mRr,fRr,Sw,KEe,gRr,hRr,GY,uRr,pRr,_Rr,Rw,ZEe,bRr,vRr,OY,FRr,TRr,MRr,Pw,eCe,ERr,CRr,VY,wRr,ARr,yRr,Bw,oCe,LRr,xRr,XY,$Rr,kRr,SRr,Iw,rCe,RRr,PRr,zY,BRr,IRr,qRr,qw,tCe,NRr,jRr,WY,DRr,GRr,ORr,Nw,aCe,VRr,XRr,QY,zRr,WRr,QRr,jw,nCe,HRr,URr,HY,JRr,YRr,KRr,Dw,jje,Gc,Gw,sCe,z9,ZRr,lCe,ePr,Dje,ur,W9,oPr,Oc,rPr,UY,tPr,aPr,JY,nPr,sPr,lPr,Q9,iPr,iCe,dPr,cPr,mPr,zt,H9,fPr,dCe,gPr,hPr,Vc,uPr,cCe,pPr,_Pr,YY,bPr,vPr,FPr,Ow,TPr,Vr,U9,MPr,mCe,EPr,CPr,bn,wPr,fCe,APr,yPr,gCe,LPr,xPr,hCe,$Pr,kPr,SPr,Pe,Vw,uCe,RPr,PPr,KY,BPr,IPr,qPr,Xw,pCe,NPr,jPr,ZY,DPr,GPr,OPr,zw,_Ce,VPr,XPr,eK,zPr,WPr,QPr,Ww,bCe,HPr,UPr,oK,JPr,YPr,KPr,Qw,vCe,ZPr,eBr,rK,oBr,rBr,tBr,Hw,FCe,aBr,nBr,tK,sBr,lBr,iBr,Uw,TCe,dBr,cBr,aK,mBr,fBr,gBr,Jw,MCe,hBr,uBr,nK,pBr,_Br,bBr,Yw,ECe,vBr,FBr,sK,TBr,MBr,EBr,Kw,Gje,Xc,Zw,CCe,J9,CBr,wCe,wBr,Oje,pr,Y9,ABr,zc,yBr,lK,LBr,xBr,iK,$Br,kBr,SBr,K9,RBr,ACe,PBr,BBr,IBr,Wt,Z9,qBr,yCe,NBr,jBr,Wc,DBr,LCe,GBr,OBr,dK,VBr,XBr,zBr,e0,WBr,Xr,ex,QBr,xCe,HBr,UBr,vn,JBr,$Ce,YBr,KBr,kCe,ZBr,eIr,SCe,oIr,rIr,tIr,xe,o0,RCe,aIr,nIr,cK,sIr,lIr,iIr,r0,PCe,dIr,cIr,mK,mIr,fIr,gIr,t0,BCe,hIr,uIr,fK,pIr,_Ir,bIr,a0,ICe,vIr,FIr,gK,TIr,MIr,EIr,n0,qCe,CIr,wIr,hK,AIr,yIr,LIr,s0,NCe,xIr,$Ir,uK,kIr,SIr,RIr,l0,jCe,PIr,BIr,pK,IIr,qIr,NIr,i0,DCe,jIr,DIr,_K,GIr,OIr,VIr,d0,GCe,XIr,zIr,bK,WIr,QIr,HIr,c0,OCe,UIr,JIr,vK,YIr,KIr,ZIr,m0,Vje,Qc,f0,VCe,ox,eqr,XCe,oqr,Xje,_r,rx,rqr,Hc,tqr,FK,aqr,nqr,TK,sqr,lqr,iqr,tx,dqr,zCe,cqr,mqr,fqr,Qt,ax,gqr,WCe,hqr,uqr,Uc,pqr,QCe,_qr,bqr,MK,vqr,Fqr,Tqr,g0,Mqr,zr,nx,Eqr,HCe,Cqr,wqr,Fn,Aqr,UCe,yqr,Lqr,JCe,xqr,$qr,YCe,kqr,Sqr,Rqr,$e,h0,KCe,Pqr,Bqr,EK,Iqr,qqr,Nqr,u0,ZCe,jqr,Dqr,CK,Gqr,Oqr,Vqr,p0,e5e,Xqr,zqr,wK,Wqr,Qqr,Hqr,_0,o5e,Uqr,Jqr,AK,Yqr,Kqr,Zqr,b0,r5e,eNr,oNr,yK,rNr,tNr,aNr,v0,t5e,nNr,sNr,LK,lNr,iNr,dNr,F0,a5e,cNr,mNr,xK,fNr,gNr,hNr,T0,n5e,uNr,pNr,$K,_Nr,bNr,vNr,M0,s5e,FNr,TNr,kK,MNr,ENr,CNr,E0,l5e,wNr,ANr,SK,yNr,LNr,xNr,C0,zje,Jc,w0,i5e,sx,$Nr,d5e,kNr,Wje,br,lx,SNr,Yc,RNr,RK,PNr,BNr,PK,INr,qNr,NNr,ix,jNr,c5e,DNr,GNr,ONr,Ht,dx,VNr,m5e,XNr,zNr,Kc,WNr,f5e,QNr,HNr,BK,UNr,JNr,YNr,A0,KNr,Wr,cx,ZNr,g5e,ejr,ojr,Tn,rjr,h5e,tjr,ajr,u5e,njr,sjr,p5e,ljr,ijr,djr,De,y0,_5e,cjr,mjr,IK,fjr,gjr,hjr,L0,b5e,ujr,pjr,qK,_jr,bjr,vjr,x0,v5e,Fjr,Tjr,NK,Mjr,Ejr,Cjr,$0,F5e,wjr,Ajr,jK,yjr,Ljr,xjr,k0,T5e,$jr,kjr,DK,Sjr,Rjr,Pjr,S0,M5e,Bjr,Ijr,GK,qjr,Njr,jjr,R0,E5e,Djr,Gjr,OK,Ojr,Vjr,Xjr,P0,C5e,zjr,Wjr,VK,Qjr,Hjr,Ujr,B0,Qje,Zc,I0,w5e,mx,Jjr,A5e,Yjr,Hje,vr,fx,Kjr,em,Zjr,XK,eDr,oDr,zK,rDr,tDr,aDr,gx,nDr,y5e,sDr,lDr,iDr,Ut,hx,dDr,L5e,cDr,mDr,om,fDr,x5e,gDr,hDr,WK,uDr,pDr,_Dr,q0,bDr,Qr,ux,vDr,$5e,FDr,TDr,Mn,MDr,k5e,EDr,CDr,S5e,wDr,ADr,R5e,yDr,LDr,xDr,Ge,N0,P5e,$Dr,kDr,QK,SDr,RDr,PDr,j0,B5e,BDr,IDr,HK,qDr,NDr,jDr,D0,I5e,DDr,GDr,UK,ODr,VDr,XDr,G0,q5e,zDr,WDr,JK,QDr,HDr,UDr,O0,N5e,JDr,YDr,YK,KDr,ZDr,eGr,V0,j5e,oGr,rGr,KK,tGr,aGr,nGr,X0,D5e,sGr,lGr,ZK,iGr,dGr,cGr,z0,G5e,mGr,fGr,eZ,gGr,hGr,uGr,W0,Uje,rm,Q0,O5e,px,pGr,V5e,_Gr,Jje,Fr,_x,bGr,tm,vGr,oZ,FGr,TGr,rZ,MGr,EGr,CGr,bx,wGr,X5e,AGr,yGr,LGr,Jt,vx,xGr,z5e,$Gr,kGr,am,SGr,W5e,RGr,PGr,tZ,BGr,IGr,qGr,H0,NGr,Hr,Fx,jGr,Q5e,DGr,GGr,En,OGr,H5e,VGr,XGr,U5e,zGr,WGr,J5e,QGr,HGr,UGr,Y5e,U0,K5e,JGr,YGr,aZ,KGr,ZGr,eOr,J0,Yje,nm,Y0,Z5e,Tx,oOr,e3e,rOr,Kje,Tr,Mx,tOr,sm,aOr,nZ,nOr,sOr,sZ,lOr,iOr,dOr,Ex,cOr,o3e,mOr,fOr,gOr,Yt,Cx,hOr,r3e,uOr,pOr,lm,_Or,t3e,bOr,vOr,lZ,FOr,TOr,MOr,K0,EOr,Ur,wx,COr,a3e,wOr,AOr,Cn,yOr,n3e,LOr,xOr,s3e,$Or,kOr,l3e,SOr,ROr,POr,Ax,Z0,i3e,BOr,IOr,iZ,qOr,NOr,jOr,eA,d3e,DOr,GOr,dZ,OOr,VOr,XOr,oA,Zje,im,rA,c3e,yx,zOr,m3e,WOr,eDe,Mr,Lx,QOr,dm,HOr,cZ,UOr,JOr,mZ,YOr,KOr,ZOr,xx,eVr,f3e,oVr,rVr,tVr,Kt,$x,aVr,g3e,nVr,sVr,cm,lVr,h3e,iVr,dVr,fZ,cVr,mVr,fVr,tA,gVr,Jr,kx,hVr,u3e,uVr,pVr,wn,_Vr,p3e,bVr,vVr,_3e,FVr,TVr,b3e,MVr,EVr,CVr,v3e,aA,F3e,wVr,AVr,gZ,yVr,LVr,xVr,nA,oDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yy=new re({}),Ly=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vm=new $Vr({props:{warning:!0,$$slots:{default:[m$t]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L584"}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),Py=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L730"}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L390"}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L603"}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new $Vr({props:{$$slots:{default:[h$t]},$$scope:{ctx:L}}}),qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),tu=new $Vr({props:{$$slots:{default:[p$t]},$$scope:{ctx:L}}}),au=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),Zy=new re({}),eL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L736"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L743"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L758"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),hL=new re({}),uL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L765"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L772"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L781"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L815"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L822"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L808"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L790"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L797"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L831"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),n8=new re({}),s8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L870"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),c8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L877"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),u8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L900"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),F8=new re({}),T8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L884"}}),E8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),w8=new re({}),A8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),L8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L909"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),I8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L916"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),G8=new re({}),O8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L863"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Q8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L838"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L845"}}),o7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),t7=new re({}),a7=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L854"}}),s7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),i7=new re({}),d7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),m7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),f7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),g7=new re({}),h7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),p7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),b7=new re({}),v7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),T7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),E7=new re({}),C7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),A7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),L7=new re({}),x7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),k7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),R7=new re({}),P7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),I7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),q7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),N7=new re({}),j7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),G7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),O7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),V7=new re({}),X7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),W7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),H7=new re({}),U7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Y7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),e9=new re({}),o9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),c9=new re({}),m9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),u9=new re({}),p9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),mx=new re({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),px=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),yx=new re({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),hm=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),Ey=o("from_pretrained()"),um=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),Cy=o("AutoConfig"),Ln=o(", "),xn=a("a"),wy=o("AutoModel"),ui=o(`, and
`),$n=a("a"),Ay=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),pm=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),z$=o("will create a model that is an instance of "),_i=a("a"),W$=o("BertModel"),Q$=o("."),Eo=l(),wa=a("p"),H$=o("There is one class of "),_m=a("code"),U$=o("AutoModel"),dOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Kqe=l(),bi=a("h2"),bm=a("a"),soe=a("span"),F(yy.$$.fragment),cOe=l(),loe=a("span"),mOe=o("Extending the Auto Classes"),Zqe=l(),kn=a("p"),fOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ioe=a("code"),gOe=o("NewModel"),hOe=o(", make sure you have a "),doe=a("code"),uOe=o("NewModelConfig"),pOe=o(` then you can add those to the auto
classes like this:`),eNe=l(),F(Ly.$$.fragment),oNe=l(),J$=a("p"),_Oe=o("You will then be able to use the auto classes like you would usually do!"),rNe=l(),F(vm.$$.fragment),tNe=l(),vi=a("h2"),Fm=a("a"),coe=a("span"),F(xy.$$.fragment),bOe=l(),moe=a("span"),vOe=o("AutoConfig"),aNe=l(),Co=a("div"),F($y.$$.fragment),FOe=l(),ky=a("p"),TOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y$=a("a"),MOe=o("from_pretrained()"),EOe=o(" class method."),COe=l(),Sy=a("p"),wOe=o("This class cannot be instantiated directly using "),foe=a("code"),AOe=o("__init__()"),yOe=o(" (throws an error)."),LOe=l(),Er=a("div"),F(Ry.$$.fragment),xOe=l(),goe=a("p"),$Oe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),kOe=l(),Fi=a("p"),SOe=o("The configuration class to instantiate is selected based on the "),hoe=a("code"),ROe=o("model_type"),POe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),uoe=a("code"),BOe=o("pretrained_model_name_or_path"),IOe=o(":"),qOe=l(),A=a("ul"),Tm=a("li"),poe=a("strong"),NOe=o("albert"),jOe=o(" \u2014 "),K$=a("a"),DOe=o("AlbertConfig"),GOe=o(" (ALBERT model)"),OOe=l(),Mm=a("li"),_oe=a("strong"),VOe=o("bart"),XOe=o(" \u2014 "),Z$=a("a"),zOe=o("BartConfig"),WOe=o(" (BART model)"),QOe=l(),Em=a("li"),boe=a("strong"),HOe=o("beit"),UOe=o(" \u2014 "),ek=a("a"),JOe=o("BeitConfig"),YOe=o(" (BEiT model)"),KOe=l(),Cm=a("li"),voe=a("strong"),ZOe=o("bert"),eVe=o(" \u2014 "),ok=a("a"),oVe=o("BertConfig"),rVe=o(" (BERT model)"),tVe=l(),wm=a("li"),Foe=a("strong"),aVe=o("bert-generation"),nVe=o(" \u2014 "),rk=a("a"),sVe=o("BertGenerationConfig"),lVe=o(" (Bert Generation model)"),iVe=l(),Am=a("li"),Toe=a("strong"),dVe=o("big_bird"),cVe=o(" \u2014 "),tk=a("a"),mVe=o("BigBirdConfig"),fVe=o(" (BigBird model)"),gVe=l(),ym=a("li"),Moe=a("strong"),hVe=o("bigbird_pegasus"),uVe=o(" \u2014 "),ak=a("a"),pVe=o("BigBirdPegasusConfig"),_Ve=o(" (BigBirdPegasus model)"),bVe=l(),Lm=a("li"),Eoe=a("strong"),vVe=o("blenderbot"),FVe=o(" \u2014 "),nk=a("a"),TVe=o("BlenderbotConfig"),MVe=o(" (Blenderbot model)"),EVe=l(),xm=a("li"),Coe=a("strong"),CVe=o("blenderbot-small"),wVe=o(" \u2014 "),sk=a("a"),AVe=o("BlenderbotSmallConfig"),yVe=o(" (BlenderbotSmall model)"),LVe=l(),$m=a("li"),woe=a("strong"),xVe=o("camembert"),$Ve=o(" \u2014 "),lk=a("a"),kVe=o("CamembertConfig"),SVe=o(" (CamemBERT model)"),RVe=l(),km=a("li"),Aoe=a("strong"),PVe=o("canine"),BVe=o(" \u2014 "),ik=a("a"),IVe=o("CanineConfig"),qVe=o(" (Canine model)"),NVe=l(),Sm=a("li"),yoe=a("strong"),jVe=o("clip"),DVe=o(" \u2014 "),dk=a("a"),GVe=o("CLIPConfig"),OVe=o(" (CLIP model)"),VVe=l(),Rm=a("li"),Loe=a("strong"),XVe=o("convbert"),zVe=o(" \u2014 "),ck=a("a"),WVe=o("ConvBertConfig"),QVe=o(" (ConvBERT model)"),HVe=l(),Pm=a("li"),xoe=a("strong"),UVe=o("convnext"),JVe=o(" \u2014 "),mk=a("a"),YVe=o("ConvNextConfig"),KVe=o(" (ConvNext model)"),ZVe=l(),Bm=a("li"),$oe=a("strong"),eXe=o("ctrl"),oXe=o(" \u2014 "),fk=a("a"),rXe=o("CTRLConfig"),tXe=o(" (CTRL model)"),aXe=l(),Im=a("li"),koe=a("strong"),nXe=o("cvt"),sXe=o(" \u2014 "),gk=a("a"),lXe=o("CvtConfig"),iXe=o(" (CvT model)"),dXe=l(),qm=a("li"),Soe=a("strong"),cXe=o("data2vec-audio"),mXe=o(" \u2014 "),hk=a("a"),fXe=o("Data2VecAudioConfig"),gXe=o(" (Data2VecAudio model)"),hXe=l(),Nm=a("li"),Roe=a("strong"),uXe=o("data2vec-text"),pXe=o(" \u2014 "),uk=a("a"),_Xe=o("Data2VecTextConfig"),bXe=o(" (Data2VecText model)"),vXe=l(),jm=a("li"),Poe=a("strong"),FXe=o("data2vec-vision"),TXe=o(" \u2014 "),pk=a("a"),MXe=o("Data2VecVisionConfig"),EXe=o(" (Data2VecVision model)"),CXe=l(),Dm=a("li"),Boe=a("strong"),wXe=o("deberta"),AXe=o(" \u2014 "),_k=a("a"),yXe=o("DebertaConfig"),LXe=o(" (DeBERTa model)"),xXe=l(),Gm=a("li"),Ioe=a("strong"),$Xe=o("deberta-v2"),kXe=o(" \u2014 "),bk=a("a"),SXe=o("DebertaV2Config"),RXe=o(" (DeBERTa-v2 model)"),PXe=l(),Om=a("li"),qoe=a("strong"),BXe=o("decision_transformer"),IXe=o(" \u2014 "),vk=a("a"),qXe=o("DecisionTransformerConfig"),NXe=o(" (Decision Transformer model)"),jXe=l(),Vm=a("li"),Noe=a("strong"),DXe=o("deit"),GXe=o(" \u2014 "),Fk=a("a"),OXe=o("DeiTConfig"),VXe=o(" (DeiT model)"),XXe=l(),Xm=a("li"),joe=a("strong"),zXe=o("detr"),WXe=o(" \u2014 "),Tk=a("a"),QXe=o("DetrConfig"),HXe=o(" (DETR model)"),UXe=l(),zm=a("li"),Doe=a("strong"),JXe=o("distilbert"),YXe=o(" \u2014 "),Mk=a("a"),KXe=o("DistilBertConfig"),ZXe=o(" (DistilBERT model)"),eze=l(),Wm=a("li"),Goe=a("strong"),oze=o("dpr"),rze=o(" \u2014 "),Ek=a("a"),tze=o("DPRConfig"),aze=o(" (DPR model)"),nze=l(),Qm=a("li"),Ooe=a("strong"),sze=o("dpt"),lze=o(" \u2014 "),Ck=a("a"),ize=o("DPTConfig"),dze=o(" (DPT model)"),cze=l(),Hm=a("li"),Voe=a("strong"),mze=o("electra"),fze=o(" \u2014 "),wk=a("a"),gze=o("ElectraConfig"),hze=o(" (ELECTRA model)"),uze=l(),Um=a("li"),Xoe=a("strong"),pze=o("encoder-decoder"),_ze=o(" \u2014 "),Ak=a("a"),bze=o("EncoderDecoderConfig"),vze=o(" (Encoder decoder model)"),Fze=l(),Jm=a("li"),zoe=a("strong"),Tze=o("flaubert"),Mze=o(" \u2014 "),yk=a("a"),Eze=o("FlaubertConfig"),Cze=o(" (FlauBERT model)"),wze=l(),Ym=a("li"),Woe=a("strong"),Aze=o("flava"),yze=o(" \u2014 "),Lk=a("a"),Lze=o("FlavaConfig"),xze=o(" (Flava model)"),$ze=l(),Km=a("li"),Qoe=a("strong"),kze=o("fnet"),Sze=o(" \u2014 "),xk=a("a"),Rze=o("FNetConfig"),Pze=o(" (FNet model)"),Bze=l(),Zm=a("li"),Hoe=a("strong"),Ize=o("fsmt"),qze=o(" \u2014 "),$k=a("a"),Nze=o("FSMTConfig"),jze=o(" (FairSeq Machine-Translation model)"),Dze=l(),ef=a("li"),Uoe=a("strong"),Gze=o("funnel"),Oze=o(" \u2014 "),kk=a("a"),Vze=o("FunnelConfig"),Xze=o(" (Funnel Transformer model)"),zze=l(),of=a("li"),Joe=a("strong"),Wze=o("glpn"),Qze=o(" \u2014 "),Sk=a("a"),Hze=o("GLPNConfig"),Uze=o(" (GLPN model)"),Jze=l(),rf=a("li"),Yoe=a("strong"),Yze=o("gpt2"),Kze=o(" \u2014 "),Rk=a("a"),Zze=o("GPT2Config"),eWe=o(" (OpenAI GPT-2 model)"),oWe=l(),tf=a("li"),Koe=a("strong"),rWe=o("gpt_neo"),tWe=o(" \u2014 "),Pk=a("a"),aWe=o("GPTNeoConfig"),nWe=o(" (GPT Neo model)"),sWe=l(),af=a("li"),Zoe=a("strong"),lWe=o("gpt_neox"),iWe=o(" \u2014 "),Bk=a("a"),dWe=o("GPTNeoXConfig"),cWe=o(" (GPT NeoX model)"),mWe=l(),nf=a("li"),ere=a("strong"),fWe=o("gptj"),gWe=o(" \u2014 "),Ik=a("a"),hWe=o("GPTJConfig"),uWe=o(" (GPT-J model)"),pWe=l(),sf=a("li"),ore=a("strong"),_We=o("hubert"),bWe=o(" \u2014 "),qk=a("a"),vWe=o("HubertConfig"),FWe=o(" (Hubert model)"),TWe=l(),lf=a("li"),rre=a("strong"),MWe=o("ibert"),EWe=o(" \u2014 "),Nk=a("a"),CWe=o("IBertConfig"),wWe=o(" (I-BERT model)"),AWe=l(),df=a("li"),tre=a("strong"),yWe=o("imagegpt"),LWe=o(" \u2014 "),jk=a("a"),xWe=o("ImageGPTConfig"),$We=o(" (ImageGPT model)"),kWe=l(),cf=a("li"),are=a("strong"),SWe=o("layoutlm"),RWe=o(" \u2014 "),Dk=a("a"),PWe=o("LayoutLMConfig"),BWe=o(" (LayoutLM model)"),IWe=l(),mf=a("li"),nre=a("strong"),qWe=o("layoutlmv2"),NWe=o(" \u2014 "),Gk=a("a"),jWe=o("LayoutLMv2Config"),DWe=o(" (LayoutLMv2 model)"),GWe=l(),ff=a("li"),sre=a("strong"),OWe=o("layoutlmv3"),VWe=o(" \u2014 "),Ok=a("a"),XWe=o("LayoutLMv3Config"),zWe=o(" (LayoutLMv3 model)"),WWe=l(),gf=a("li"),lre=a("strong"),QWe=o("led"),HWe=o(" \u2014 "),Vk=a("a"),UWe=o("LEDConfig"),JWe=o(" (LED model)"),YWe=l(),hf=a("li"),ire=a("strong"),KWe=o("longformer"),ZWe=o(" \u2014 "),Xk=a("a"),eQe=o("LongformerConfig"),oQe=o(" (Longformer model)"),rQe=l(),uf=a("li"),dre=a("strong"),tQe=o("luke"),aQe=o(" \u2014 "),zk=a("a"),nQe=o("LukeConfig"),sQe=o(" (LUKE model)"),lQe=l(),pf=a("li"),cre=a("strong"),iQe=o("lxmert"),dQe=o(" \u2014 "),Wk=a("a"),cQe=o("LxmertConfig"),mQe=o(" (LXMERT model)"),fQe=l(),_f=a("li"),mre=a("strong"),gQe=o("m2m_100"),hQe=o(" \u2014 "),Qk=a("a"),uQe=o("M2M100Config"),pQe=o(" (M2M100 model)"),_Qe=l(),bf=a("li"),fre=a("strong"),bQe=o("marian"),vQe=o(" \u2014 "),Hk=a("a"),FQe=o("MarianConfig"),TQe=o(" (Marian model)"),MQe=l(),vf=a("li"),gre=a("strong"),EQe=o("maskformer"),CQe=o(" \u2014 "),Uk=a("a"),wQe=o("MaskFormerConfig"),AQe=o(" (MaskFormer model)"),yQe=l(),Ff=a("li"),hre=a("strong"),LQe=o("mbart"),xQe=o(" \u2014 "),Jk=a("a"),$Qe=o("MBartConfig"),kQe=o(" (mBART model)"),SQe=l(),Tf=a("li"),ure=a("strong"),RQe=o("megatron-bert"),PQe=o(" \u2014 "),Yk=a("a"),BQe=o("MegatronBertConfig"),IQe=o(" (MegatronBert model)"),qQe=l(),Mf=a("li"),pre=a("strong"),NQe=o("mobilebert"),jQe=o(" \u2014 "),Kk=a("a"),DQe=o("MobileBertConfig"),GQe=o(" (MobileBERT model)"),OQe=l(),Ef=a("li"),_re=a("strong"),VQe=o("mpnet"),XQe=o(" \u2014 "),Zk=a("a"),zQe=o("MPNetConfig"),WQe=o(" (MPNet model)"),QQe=l(),Cf=a("li"),bre=a("strong"),HQe=o("mt5"),UQe=o(" \u2014 "),eS=a("a"),JQe=o("MT5Config"),YQe=o(" (mT5 model)"),KQe=l(),wf=a("li"),vre=a("strong"),ZQe=o("nystromformer"),eHe=o(" \u2014 "),oS=a("a"),oHe=o("NystromformerConfig"),rHe=o(" (Nystromformer model)"),tHe=l(),Af=a("li"),Fre=a("strong"),aHe=o("openai-gpt"),nHe=o(" \u2014 "),rS=a("a"),sHe=o("OpenAIGPTConfig"),lHe=o(" (OpenAI GPT model)"),iHe=l(),yf=a("li"),Tre=a("strong"),dHe=o("opt"),cHe=o(" \u2014 "),tS=a("a"),mHe=o("OPTConfig"),fHe=o(" (OPT model)"),gHe=l(),Lf=a("li"),Mre=a("strong"),hHe=o("pegasus"),uHe=o(" \u2014 "),aS=a("a"),pHe=o("PegasusConfig"),_He=o(" (Pegasus model)"),bHe=l(),xf=a("li"),Ere=a("strong"),vHe=o("perceiver"),FHe=o(" \u2014 "),nS=a("a"),THe=o("PerceiverConfig"),MHe=o(" (Perceiver model)"),EHe=l(),$f=a("li"),Cre=a("strong"),CHe=o("plbart"),wHe=o(" \u2014 "),sS=a("a"),AHe=o("PLBartConfig"),yHe=o(" (PLBart model)"),LHe=l(),kf=a("li"),wre=a("strong"),xHe=o("poolformer"),$He=o(" \u2014 "),lS=a("a"),kHe=o("PoolFormerConfig"),SHe=o(" (PoolFormer model)"),RHe=l(),Sf=a("li"),Are=a("strong"),PHe=o("prophetnet"),BHe=o(" \u2014 "),iS=a("a"),IHe=o("ProphetNetConfig"),qHe=o(" (ProphetNet model)"),NHe=l(),Rf=a("li"),yre=a("strong"),jHe=o("qdqbert"),DHe=o(" \u2014 "),dS=a("a"),GHe=o("QDQBertConfig"),OHe=o(" (QDQBert model)"),VHe=l(),Pf=a("li"),Lre=a("strong"),XHe=o("rag"),zHe=o(" \u2014 "),cS=a("a"),WHe=o("RagConfig"),QHe=o(" (RAG model)"),HHe=l(),Bf=a("li"),xre=a("strong"),UHe=o("realm"),JHe=o(" \u2014 "),mS=a("a"),YHe=o("RealmConfig"),KHe=o(" (Realm model)"),ZHe=l(),If=a("li"),$re=a("strong"),eUe=o("reformer"),oUe=o(" \u2014 "),fS=a("a"),rUe=o("ReformerConfig"),tUe=o(" (Reformer model)"),aUe=l(),qf=a("li"),kre=a("strong"),nUe=o("regnet"),sUe=o(" \u2014 "),gS=a("a"),lUe=o("RegNetConfig"),iUe=o(" (RegNet model)"),dUe=l(),Nf=a("li"),Sre=a("strong"),cUe=o("rembert"),mUe=o(" \u2014 "),hS=a("a"),fUe=o("RemBertConfig"),gUe=o(" (RemBERT model)"),hUe=l(),jf=a("li"),Rre=a("strong"),uUe=o("resnet"),pUe=o(" \u2014 "),uS=a("a"),_Ue=o("ResNetConfig"),bUe=o(" (ResNet model)"),vUe=l(),Df=a("li"),Pre=a("strong"),FUe=o("retribert"),TUe=o(" \u2014 "),pS=a("a"),MUe=o("RetriBertConfig"),EUe=o(" (RetriBERT model)"),CUe=l(),Gf=a("li"),Bre=a("strong"),wUe=o("roberta"),AUe=o(" \u2014 "),_S=a("a"),yUe=o("RobertaConfig"),LUe=o(" (RoBERTa model)"),xUe=l(),Of=a("li"),Ire=a("strong"),$Ue=o("roformer"),kUe=o(" \u2014 "),bS=a("a"),SUe=o("RoFormerConfig"),RUe=o(" (RoFormer model)"),PUe=l(),Vf=a("li"),qre=a("strong"),BUe=o("segformer"),IUe=o(" \u2014 "),vS=a("a"),qUe=o("SegformerConfig"),NUe=o(" (SegFormer model)"),jUe=l(),Xf=a("li"),Nre=a("strong"),DUe=o("sew"),GUe=o(" \u2014 "),FS=a("a"),OUe=o("SEWConfig"),VUe=o(" (SEW model)"),XUe=l(),zf=a("li"),jre=a("strong"),zUe=o("sew-d"),WUe=o(" \u2014 "),TS=a("a"),QUe=o("SEWDConfig"),HUe=o(" (SEW-D model)"),UUe=l(),Wf=a("li"),Dre=a("strong"),JUe=o("speech-encoder-decoder"),YUe=o(" \u2014 "),MS=a("a"),KUe=o("SpeechEncoderDecoderConfig"),ZUe=o(" (Speech Encoder decoder model)"),eJe=l(),Qf=a("li"),Gre=a("strong"),oJe=o("speech_to_text"),rJe=o(" \u2014 "),ES=a("a"),tJe=o("Speech2TextConfig"),aJe=o(" (Speech2Text model)"),nJe=l(),Hf=a("li"),Ore=a("strong"),sJe=o("speech_to_text_2"),lJe=o(" \u2014 "),CS=a("a"),iJe=o("Speech2Text2Config"),dJe=o(" (Speech2Text2 model)"),cJe=l(),Uf=a("li"),Vre=a("strong"),mJe=o("splinter"),fJe=o(" \u2014 "),wS=a("a"),gJe=o("SplinterConfig"),hJe=o(" (Splinter model)"),uJe=l(),Jf=a("li"),Xre=a("strong"),pJe=o("squeezebert"),_Je=o(" \u2014 "),AS=a("a"),bJe=o("SqueezeBertConfig"),vJe=o(" (SqueezeBERT model)"),FJe=l(),Yf=a("li"),zre=a("strong"),TJe=o("swin"),MJe=o(" \u2014 "),yS=a("a"),EJe=o("SwinConfig"),CJe=o(" (Swin model)"),wJe=l(),Kf=a("li"),Wre=a("strong"),AJe=o("t5"),yJe=o(" \u2014 "),LS=a("a"),LJe=o("T5Config"),xJe=o(" (T5 model)"),$Je=l(),Zf=a("li"),Qre=a("strong"),kJe=o("tapas"),SJe=o(" \u2014 "),xS=a("a"),RJe=o("TapasConfig"),PJe=o(" (TAPAS model)"),BJe=l(),eg=a("li"),Hre=a("strong"),IJe=o("trajectory_transformer"),qJe=o(" \u2014 "),$S=a("a"),NJe=o("TrajectoryTransformerConfig"),jJe=o(" (Trajectory Transformer model)"),DJe=l(),og=a("li"),Ure=a("strong"),GJe=o("transfo-xl"),OJe=o(" \u2014 "),kS=a("a"),VJe=o("TransfoXLConfig"),XJe=o(" (Transformer-XL model)"),zJe=l(),rg=a("li"),Jre=a("strong"),WJe=o("trocr"),QJe=o(" \u2014 "),SS=a("a"),HJe=o("TrOCRConfig"),UJe=o(" (TrOCR model)"),JJe=l(),tg=a("li"),Yre=a("strong"),YJe=o("unispeech"),KJe=o(" \u2014 "),RS=a("a"),ZJe=o("UniSpeechConfig"),eYe=o(" (UniSpeech model)"),oYe=l(),ag=a("li"),Kre=a("strong"),rYe=o("unispeech-sat"),tYe=o(" \u2014 "),PS=a("a"),aYe=o("UniSpeechSatConfig"),nYe=o(" (UniSpeechSat model)"),sYe=l(),ng=a("li"),Zre=a("strong"),lYe=o("van"),iYe=o(" \u2014 "),BS=a("a"),dYe=o("VanConfig"),cYe=o(" (VAN model)"),mYe=l(),sg=a("li"),ete=a("strong"),fYe=o("vilt"),gYe=o(" \u2014 "),IS=a("a"),hYe=o("ViltConfig"),uYe=o(" (ViLT model)"),pYe=l(),lg=a("li"),ote=a("strong"),_Ye=o("vision-encoder-decoder"),bYe=o(" \u2014 "),qS=a("a"),vYe=o("VisionEncoderDecoderConfig"),FYe=o(" (Vision Encoder decoder model)"),TYe=l(),ig=a("li"),rte=a("strong"),MYe=o("vision-text-dual-encoder"),EYe=o(" \u2014 "),NS=a("a"),CYe=o("VisionTextDualEncoderConfig"),wYe=o(" (VisionTextDualEncoder model)"),AYe=l(),dg=a("li"),tte=a("strong"),yYe=o("visual_bert"),LYe=o(" \u2014 "),jS=a("a"),xYe=o("VisualBertConfig"),$Ye=o(" (VisualBert model)"),kYe=l(),cg=a("li"),ate=a("strong"),SYe=o("vit"),RYe=o(" \u2014 "),DS=a("a"),PYe=o("ViTConfig"),BYe=o(" (ViT model)"),IYe=l(),mg=a("li"),nte=a("strong"),qYe=o("vit_mae"),NYe=o(" \u2014 "),GS=a("a"),jYe=o("ViTMAEConfig"),DYe=o(" (ViTMAE model)"),GYe=l(),fg=a("li"),ste=a("strong"),OYe=o("wav2vec2"),VYe=o(" \u2014 "),OS=a("a"),XYe=o("Wav2Vec2Config"),zYe=o(" (Wav2Vec2 model)"),WYe=l(),gg=a("li"),lte=a("strong"),QYe=o("wav2vec2-conformer"),HYe=o(" \u2014 "),VS=a("a"),UYe=o("Wav2Vec2ConformerConfig"),JYe=o(" (Wav2Vec2-Conformer model)"),YYe=l(),hg=a("li"),ite=a("strong"),KYe=o("wavlm"),ZYe=o(" \u2014 "),XS=a("a"),eKe=o("WavLMConfig"),oKe=o(" (WavLM model)"),rKe=l(),ug=a("li"),dte=a("strong"),tKe=o("xglm"),aKe=o(" \u2014 "),zS=a("a"),nKe=o("XGLMConfig"),sKe=o(" (XGLM model)"),lKe=l(),pg=a("li"),cte=a("strong"),iKe=o("xlm"),dKe=o(" \u2014 "),WS=a("a"),cKe=o("XLMConfig"),mKe=o(" (XLM model)"),fKe=l(),_g=a("li"),mte=a("strong"),gKe=o("xlm-prophetnet"),hKe=o(" \u2014 "),QS=a("a"),uKe=o("XLMProphetNetConfig"),pKe=o(" (XLMProphetNet model)"),_Ke=l(),bg=a("li"),fte=a("strong"),bKe=o("xlm-roberta"),vKe=o(" \u2014 "),HS=a("a"),FKe=o("XLMRobertaConfig"),TKe=o(" (XLM-RoBERTa model)"),MKe=l(),vg=a("li"),gte=a("strong"),EKe=o("xlm-roberta-xl"),CKe=o(" \u2014 "),US=a("a"),wKe=o("XLMRobertaXLConfig"),AKe=o(" (XLM-RoBERTa-XL model)"),yKe=l(),Fg=a("li"),hte=a("strong"),LKe=o("xlnet"),xKe=o(" \u2014 "),JS=a("a"),$Ke=o("XLNetConfig"),kKe=o(" (XLNet model)"),SKe=l(),Tg=a("li"),ute=a("strong"),RKe=o("yolos"),PKe=o(" \u2014 "),YS=a("a"),BKe=o("YolosConfig"),IKe=o(" (YOLOS model)"),qKe=l(),Mg=a("li"),pte=a("strong"),NKe=o("yoso"),jKe=o(" \u2014 "),KS=a("a"),DKe=o("YosoConfig"),GKe=o(" (YOSO model)"),OKe=l(),F(Eg.$$.fragment),VKe=l(),Cg=a("div"),F(Py.$$.fragment),XKe=l(),_te=a("p"),zKe=o("Register a new configuration for this class."),nNe=l(),Ti=a("h2"),wg=a("a"),bte=a("span"),F(By.$$.fragment),WKe=l(),vte=a("span"),QKe=o("AutoTokenizer"),sNe=l(),wo=a("div"),F(Iy.$$.fragment),HKe=l(),qy=a("p"),UKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=a("a"),JKe=o("AutoTokenizer.from_pretrained()"),YKe=o(" class method."),KKe=l(),Ny=a("p"),ZKe=o("This class cannot be instantiated directly using "),Fte=a("code"),eZe=o("__init__()"),oZe=o(" (throws an error)."),rZe=l(),Cr=a("div"),F(jy.$$.fragment),tZe=l(),Tte=a("p"),aZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nZe=l(),Aa=a("p"),sZe=o("The tokenizer class to instantiate is selected based on the "),Mte=a("code"),lZe=o("model_type"),iZe=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),dZe=o("pretrained_model_name_or_path"),cZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=a("code"),mZe=o("pretrained_model_name_or_path"),fZe=o(":"),gZe=l(),k=a("ul"),Sn=a("li"),wte=a("strong"),hZe=o("albert"),uZe=o(" \u2014 "),eR=a("a"),pZe=o("AlbertTokenizer"),_Ze=o(" or "),oR=a("a"),bZe=o("AlbertTokenizerFast"),vZe=o(" (ALBERT model)"),FZe=l(),Rn=a("li"),Ate=a("strong"),TZe=o("bart"),MZe=o(" \u2014 "),rR=a("a"),EZe=o("BartTokenizer"),CZe=o(" or "),tR=a("a"),wZe=o("BartTokenizerFast"),AZe=o(" (BART model)"),yZe=l(),Pn=a("li"),yte=a("strong"),LZe=o("barthez"),xZe=o(" \u2014 "),aR=a("a"),$Ze=o("BarthezTokenizer"),kZe=o(" or "),nR=a("a"),SZe=o("BarthezTokenizerFast"),RZe=o(" (BARThez model)"),PZe=l(),Ag=a("li"),Lte=a("strong"),BZe=o("bartpho"),IZe=o(" \u2014 "),sR=a("a"),qZe=o("BartphoTokenizer"),NZe=o(" (BARTpho model)"),jZe=l(),Bn=a("li"),xte=a("strong"),DZe=o("bert"),GZe=o(" \u2014 "),lR=a("a"),OZe=o("BertTokenizer"),VZe=o(" or "),iR=a("a"),XZe=o("BertTokenizerFast"),zZe=o(" (BERT model)"),WZe=l(),yg=a("li"),$te=a("strong"),QZe=o("bert-generation"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("BertGenerationTokenizer"),JZe=o(" (Bert Generation model)"),YZe=l(),Lg=a("li"),kte=a("strong"),KZe=o("bert-japanese"),ZZe=o(" \u2014 "),cR=a("a"),eeo=o("BertJapaneseTokenizer"),oeo=o(" (BertJapanese model)"),reo=l(),xg=a("li"),Ste=a("strong"),teo=o("bertweet"),aeo=o(" \u2014 "),mR=a("a"),neo=o("BertweetTokenizer"),seo=o(" (Bertweet model)"),leo=l(),In=a("li"),Rte=a("strong"),ieo=o("big_bird"),deo=o(" \u2014 "),fR=a("a"),ceo=o("BigBirdTokenizer"),meo=o(" or "),gR=a("a"),feo=o("BigBirdTokenizerFast"),geo=o(" (BigBird model)"),heo=l(),qn=a("li"),Pte=a("strong"),ueo=o("bigbird_pegasus"),peo=o(" \u2014 "),hR=a("a"),_eo=o("PegasusTokenizer"),beo=o(" or "),uR=a("a"),veo=o("PegasusTokenizerFast"),Feo=o(" (BigBirdPegasus model)"),Teo=l(),Nn=a("li"),Bte=a("strong"),Meo=o("blenderbot"),Eeo=o(" \u2014 "),pR=a("a"),Ceo=o("BlenderbotTokenizer"),weo=o(" or "),_R=a("a"),Aeo=o("BlenderbotTokenizerFast"),yeo=o(" (Blenderbot model)"),Leo=l(),$g=a("li"),Ite=a("strong"),xeo=o("blenderbot-small"),$eo=o(" \u2014 "),bR=a("a"),keo=o("BlenderbotSmallTokenizer"),Seo=o(" (BlenderbotSmall model)"),Reo=l(),kg=a("li"),qte=a("strong"),Peo=o("byt5"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("ByT5Tokenizer"),qeo=o(" (ByT5 model)"),Neo=l(),jn=a("li"),Nte=a("strong"),jeo=o("camembert"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("CamembertTokenizer"),Oeo=o(" or "),TR=a("a"),Veo=o("CamembertTokenizerFast"),Xeo=o(" (CamemBERT model)"),zeo=l(),Sg=a("li"),jte=a("strong"),Weo=o("canine"),Qeo=o(" \u2014 "),MR=a("a"),Heo=o("CanineTokenizer"),Ueo=o(" (Canine model)"),Jeo=l(),Dn=a("li"),Dte=a("strong"),Yeo=o("clip"),Keo=o(" \u2014 "),ER=a("a"),Zeo=o("CLIPTokenizer"),eoo=o(" or "),CR=a("a"),ooo=o("CLIPTokenizerFast"),roo=o(" (CLIP model)"),too=l(),Gn=a("li"),Gte=a("strong"),aoo=o("convbert"),noo=o(" \u2014 "),wR=a("a"),soo=o("ConvBertTokenizer"),loo=o(" or "),AR=a("a"),ioo=o("ConvBertTokenizerFast"),doo=o(" (ConvBERT model)"),coo=l(),On=a("li"),Ote=a("strong"),moo=o("cpm"),foo=o(" \u2014 "),yR=a("a"),goo=o("CpmTokenizer"),hoo=o(" or "),LR=a("a"),uoo=o("CpmTokenizerFast"),poo=o(" (CPM model)"),_oo=l(),Rg=a("li"),Vte=a("strong"),boo=o("ctrl"),voo=o(" \u2014 "),xR=a("a"),Foo=o("CTRLTokenizer"),Too=o(" (CTRL model)"),Moo=l(),Vn=a("li"),Xte=a("strong"),Eoo=o("data2vec-text"),Coo=o(" \u2014 "),$R=a("a"),woo=o("RobertaTokenizer"),Aoo=o(" or "),kR=a("a"),yoo=o("RobertaTokenizerFast"),Loo=o(" (Data2VecText model)"),xoo=l(),Xn=a("li"),zte=a("strong"),$oo=o("deberta"),koo=o(" \u2014 "),SR=a("a"),Soo=o("DebertaTokenizer"),Roo=o(" or "),RR=a("a"),Poo=o("DebertaTokenizerFast"),Boo=o(" (DeBERTa model)"),Ioo=l(),zn=a("li"),Wte=a("strong"),qoo=o("deberta-v2"),Noo=o(" \u2014 "),PR=a("a"),joo=o("DebertaV2Tokenizer"),Doo=o(" or "),BR=a("a"),Goo=o("DebertaV2TokenizerFast"),Ooo=o(" (DeBERTa-v2 model)"),Voo=l(),Wn=a("li"),Qte=a("strong"),Xoo=o("distilbert"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("DistilBertTokenizer"),Qoo=o(" or "),qR=a("a"),Hoo=o("DistilBertTokenizerFast"),Uoo=o(" (DistilBERT model)"),Joo=l(),Qn=a("li"),Hte=a("strong"),Yoo=o("dpr"),Koo=o(" \u2014 "),NR=a("a"),Zoo=o("DPRQuestionEncoderTokenizer"),ero=o(" or "),jR=a("a"),oro=o("DPRQuestionEncoderTokenizerFast"),rro=o(" (DPR model)"),tro=l(),Hn=a("li"),Ute=a("strong"),aro=o("electra"),nro=o(" \u2014 "),DR=a("a"),sro=o("ElectraTokenizer"),lro=o(" or "),GR=a("a"),iro=o("ElectraTokenizerFast"),dro=o(" (ELECTRA model)"),cro=l(),Pg=a("li"),Jte=a("strong"),mro=o("flaubert"),fro=o(" \u2014 "),OR=a("a"),gro=o("FlaubertTokenizer"),hro=o(" (FlauBERT model)"),uro=l(),Un=a("li"),Yte=a("strong"),pro=o("fnet"),_ro=o(" \u2014 "),VR=a("a"),bro=o("FNetTokenizer"),vro=o(" or "),XR=a("a"),Fro=o("FNetTokenizerFast"),Tro=o(" (FNet model)"),Mro=l(),Bg=a("li"),Kte=a("strong"),Ero=o("fsmt"),Cro=o(" \u2014 "),zR=a("a"),wro=o("FSMTTokenizer"),Aro=o(" (FairSeq Machine-Translation model)"),yro=l(),Jn=a("li"),Zte=a("strong"),Lro=o("funnel"),xro=o(" \u2014 "),WR=a("a"),$ro=o("FunnelTokenizer"),kro=o(" or "),QR=a("a"),Sro=o("FunnelTokenizerFast"),Rro=o(" (Funnel Transformer model)"),Pro=l(),Yn=a("li"),eae=a("strong"),Bro=o("gpt2"),Iro=o(" \u2014 "),HR=a("a"),qro=o("GPT2Tokenizer"),Nro=o(" or "),UR=a("a"),jro=o("GPT2TokenizerFast"),Dro=o(" (OpenAI GPT-2 model)"),Gro=l(),Kn=a("li"),oae=a("strong"),Oro=o("gpt_neo"),Vro=o(" \u2014 "),JR=a("a"),Xro=o("GPT2Tokenizer"),zro=o(" or "),YR=a("a"),Wro=o("GPT2TokenizerFast"),Qro=o(" (GPT Neo model)"),Hro=l(),Ig=a("li"),rae=a("strong"),Uro=o("gpt_neox"),Jro=o(" \u2014 "),KR=a("a"),Yro=o("GPTNeoXTokenizerFast"),Kro=o(" (GPT NeoX model)"),Zro=l(),Zn=a("li"),tae=a("strong"),eto=o("gptj"),oto=o(" \u2014 "),ZR=a("a"),rto=o("GPT2Tokenizer"),tto=o(" or "),eP=a("a"),ato=o("GPT2TokenizerFast"),nto=o(" (GPT-J model)"),sto=l(),es=a("li"),aae=a("strong"),lto=o("herbert"),ito=o(" \u2014 "),oP=a("a"),dto=o("HerbertTokenizer"),cto=o(" or "),rP=a("a"),mto=o("HerbertTokenizerFast"),fto=o(" (HerBERT model)"),gto=l(),qg=a("li"),nae=a("strong"),hto=o("hubert"),uto=o(" \u2014 "),tP=a("a"),pto=o("Wav2Vec2CTCTokenizer"),_to=o(" (Hubert model)"),bto=l(),os=a("li"),sae=a("strong"),vto=o("ibert"),Fto=o(" \u2014 "),aP=a("a"),Tto=o("RobertaTokenizer"),Mto=o(" or "),nP=a("a"),Eto=o("RobertaTokenizerFast"),Cto=o(" (I-BERT model)"),wto=l(),rs=a("li"),lae=a("strong"),Ato=o("layoutlm"),yto=o(" \u2014 "),sP=a("a"),Lto=o("LayoutLMTokenizer"),xto=o(" or "),lP=a("a"),$to=o("LayoutLMTokenizerFast"),kto=o(" (LayoutLM model)"),Sto=l(),ts=a("li"),iae=a("strong"),Rto=o("layoutlmv2"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("LayoutLMv2Tokenizer"),Ito=o(" or "),dP=a("a"),qto=o("LayoutLMv2TokenizerFast"),Nto=o(" (LayoutLMv2 model)"),jto=l(),as=a("li"),dae=a("strong"),Dto=o("layoutlmv3"),Gto=o(" \u2014 "),cP=a("a"),Oto=o("LayoutLMv3Tokenizer"),Vto=o(" or "),mP=a("a"),Xto=o("LayoutLMv3TokenizerFast"),zto=o(" (LayoutLMv3 model)"),Wto=l(),ns=a("li"),cae=a("strong"),Qto=o("layoutxlm"),Hto=o(" \u2014 "),fP=a("a"),Uto=o("LayoutXLMTokenizer"),Jto=o(" or "),gP=a("a"),Yto=o("LayoutXLMTokenizerFast"),Kto=o(" (LayoutXLM model)"),Zto=l(),ss=a("li"),mae=a("strong"),eao=o("led"),oao=o(" \u2014 "),hP=a("a"),rao=o("LEDTokenizer"),tao=o(" or "),uP=a("a"),aao=o("LEDTokenizerFast"),nao=o(" (LED model)"),sao=l(),ls=a("li"),fae=a("strong"),lao=o("longformer"),iao=o(" \u2014 "),pP=a("a"),dao=o("LongformerTokenizer"),cao=o(" or "),_P=a("a"),mao=o("LongformerTokenizerFast"),fao=o(" (Longformer model)"),gao=l(),Ng=a("li"),gae=a("strong"),hao=o("luke"),uao=o(" \u2014 "),bP=a("a"),pao=o("LukeTokenizer"),_ao=o(" (LUKE model)"),bao=l(),is=a("li"),hae=a("strong"),vao=o("lxmert"),Fao=o(" \u2014 "),vP=a("a"),Tao=o("LxmertTokenizer"),Mao=o(" or "),FP=a("a"),Eao=o("LxmertTokenizerFast"),Cao=o(" (LXMERT model)"),wao=l(),jg=a("li"),uae=a("strong"),Aao=o("m2m_100"),yao=o(" \u2014 "),TP=a("a"),Lao=o("M2M100Tokenizer"),xao=o(" (M2M100 model)"),$ao=l(),Dg=a("li"),pae=a("strong"),kao=o("marian"),Sao=o(" \u2014 "),MP=a("a"),Rao=o("MarianTokenizer"),Pao=o(" (Marian model)"),Bao=l(),ds=a("li"),_ae=a("strong"),Iao=o("mbart"),qao=o(" \u2014 "),EP=a("a"),Nao=o("MBartTokenizer"),jao=o(" or "),CP=a("a"),Dao=o("MBartTokenizerFast"),Gao=o(" (mBART model)"),Oao=l(),cs=a("li"),bae=a("strong"),Vao=o("mbart50"),Xao=o(" \u2014 "),wP=a("a"),zao=o("MBart50Tokenizer"),Wao=o(" or "),AP=a("a"),Qao=o("MBart50TokenizerFast"),Hao=o(" (mBART-50 model)"),Uao=l(),ms=a("li"),vae=a("strong"),Jao=o("megatron-bert"),Yao=o(" \u2014 "),yP=a("a"),Kao=o("BertTokenizer"),Zao=o(" or "),LP=a("a"),eno=o("BertTokenizerFast"),ono=o(" (MegatronBert model)"),rno=l(),Gg=a("li"),Fae=a("strong"),tno=o("mluke"),ano=o(" \u2014 "),xP=a("a"),nno=o("MLukeTokenizer"),sno=o(" (mLUKE model)"),lno=l(),fs=a("li"),Tae=a("strong"),ino=o("mobilebert"),dno=o(" \u2014 "),$P=a("a"),cno=o("MobileBertTokenizer"),mno=o(" or "),kP=a("a"),fno=o("MobileBertTokenizerFast"),gno=o(" (MobileBERT model)"),hno=l(),gs=a("li"),Mae=a("strong"),uno=o("mpnet"),pno=o(" \u2014 "),SP=a("a"),_no=o("MPNetTokenizer"),bno=o(" or "),RP=a("a"),vno=o("MPNetTokenizerFast"),Fno=o(" (MPNet model)"),Tno=l(),hs=a("li"),Eae=a("strong"),Mno=o("mt5"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("MT5Tokenizer"),wno=o(" or "),BP=a("a"),Ano=o("MT5TokenizerFast"),yno=o(" (mT5 model)"),Lno=l(),us=a("li"),Cae=a("strong"),xno=o("nystromformer"),$no=o(" \u2014 "),IP=a("a"),kno=o("AlbertTokenizer"),Sno=o(" or "),qP=a("a"),Rno=o("AlbertTokenizerFast"),Pno=o(" (Nystromformer model)"),Bno=l(),ps=a("li"),wae=a("strong"),Ino=o("openai-gpt"),qno=o(" \u2014 "),NP=a("a"),Nno=o("OpenAIGPTTokenizer"),jno=o(" or "),jP=a("a"),Dno=o("OpenAIGPTTokenizerFast"),Gno=o(" (OpenAI GPT model)"),Ono=l(),Og=a("li"),Aae=a("strong"),Vno=o("opt"),Xno=o(" \u2014 "),DP=a("a"),zno=o("GPT2Tokenizer"),Wno=o(" (OPT model)"),Qno=l(),_s=a("li"),yae=a("strong"),Hno=o("pegasus"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("PegasusTokenizer"),Yno=o(" or "),OP=a("a"),Kno=o("PegasusTokenizerFast"),Zno=o(" (Pegasus model)"),eso=l(),Vg=a("li"),Lae=a("strong"),oso=o("perceiver"),rso=o(" \u2014 "),VP=a("a"),tso=o("PerceiverTokenizer"),aso=o(" (Perceiver model)"),nso=l(),Xg=a("li"),xae=a("strong"),sso=o("phobert"),lso=o(" \u2014 "),XP=a("a"),iso=o("PhobertTokenizer"),dso=o(" (PhoBERT model)"),cso=l(),zg=a("li"),$ae=a("strong"),mso=o("plbart"),fso=o(" \u2014 "),zP=a("a"),gso=o("PLBartTokenizer"),hso=o(" (PLBart model)"),uso=l(),Wg=a("li"),kae=a("strong"),pso=o("prophetnet"),_so=o(" \u2014 "),WP=a("a"),bso=o("ProphetNetTokenizer"),vso=o(" (ProphetNet model)"),Fso=l(),bs=a("li"),Sae=a("strong"),Tso=o("qdqbert"),Mso=o(" \u2014 "),QP=a("a"),Eso=o("BertTokenizer"),Cso=o(" or "),HP=a("a"),wso=o("BertTokenizerFast"),Aso=o(" (QDQBert model)"),yso=l(),Qg=a("li"),Rae=a("strong"),Lso=o("rag"),xso=o(" \u2014 "),UP=a("a"),$so=o("RagTokenizer"),kso=o(" (RAG model)"),Sso=l(),vs=a("li"),Pae=a("strong"),Rso=o("realm"),Pso=o(" \u2014 "),JP=a("a"),Bso=o("RealmTokenizer"),Iso=o(" or "),YP=a("a"),qso=o("RealmTokenizerFast"),Nso=o(" (Realm model)"),jso=l(),Fs=a("li"),Bae=a("strong"),Dso=o("reformer"),Gso=o(" \u2014 "),KP=a("a"),Oso=o("ReformerTokenizer"),Vso=o(" or "),ZP=a("a"),Xso=o("ReformerTokenizerFast"),zso=o(" (Reformer model)"),Wso=l(),Ts=a("li"),Iae=a("strong"),Qso=o("rembert"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("RemBertTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("RemBertTokenizerFast"),Kso=o(" (RemBERT model)"),Zso=l(),Ms=a("li"),qae=a("strong"),elo=o("retribert"),olo=o(" \u2014 "),rB=a("a"),rlo=o("RetriBertTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("RetriBertTokenizerFast"),nlo=o(" (RetriBERT model)"),slo=l(),Es=a("li"),Nae=a("strong"),llo=o("roberta"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("RobertaTokenizer"),clo=o(" or "),nB=a("a"),mlo=o("RobertaTokenizerFast"),flo=o(" (RoBERTa model)"),glo=l(),Cs=a("li"),jae=a("strong"),hlo=o("roformer"),ulo=o(" \u2014 "),sB=a("a"),plo=o("RoFormerTokenizer"),_lo=o(" or "),lB=a("a"),blo=o("RoFormerTokenizerFast"),vlo=o(" (RoFormer model)"),Flo=l(),Hg=a("li"),Dae=a("strong"),Tlo=o("speech_to_text"),Mlo=o(" \u2014 "),iB=a("a"),Elo=o("Speech2TextTokenizer"),Clo=o(" (Speech2Text model)"),wlo=l(),Ug=a("li"),Gae=a("strong"),Alo=o("speech_to_text_2"),ylo=o(" \u2014 "),dB=a("a"),Llo=o("Speech2Text2Tokenizer"),xlo=o(" (Speech2Text2 model)"),$lo=l(),ws=a("li"),Oae=a("strong"),klo=o("splinter"),Slo=o(" \u2014 "),cB=a("a"),Rlo=o("SplinterTokenizer"),Plo=o(" or "),mB=a("a"),Blo=o("SplinterTokenizerFast"),Ilo=o(" (Splinter model)"),qlo=l(),As=a("li"),Vae=a("strong"),Nlo=o("squeezebert"),jlo=o(" \u2014 "),fB=a("a"),Dlo=o("SqueezeBertTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("SqueezeBertTokenizerFast"),Vlo=o(" (SqueezeBERT model)"),Xlo=l(),ys=a("li"),Xae=a("strong"),zlo=o("t5"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("T5Tokenizer"),Hlo=o(" or "),uB=a("a"),Ulo=o("T5TokenizerFast"),Jlo=o(" (T5 model)"),Ylo=l(),Jg=a("li"),zae=a("strong"),Klo=o("tapas"),Zlo=o(" \u2014 "),pB=a("a"),eio=o("TapasTokenizer"),oio=o(" (TAPAS model)"),rio=l(),Yg=a("li"),Wae=a("strong"),tio=o("tapex"),aio=o(" \u2014 "),_B=a("a"),nio=o("TapexTokenizer"),sio=o(" (TAPEX model)"),lio=l(),Kg=a("li"),Qae=a("strong"),iio=o("transfo-xl"),dio=o(" \u2014 "),bB=a("a"),cio=o("TransfoXLTokenizer"),mio=o(" (Transformer-XL model)"),fio=l(),Ls=a("li"),Hae=a("strong"),gio=o("visual_bert"),hio=o(" \u2014 "),vB=a("a"),uio=o("BertTokenizer"),pio=o(" or "),FB=a("a"),_io=o("BertTokenizerFast"),bio=o(" (VisualBert model)"),vio=l(),Zg=a("li"),Uae=a("strong"),Fio=o("wav2vec2"),Tio=o(" \u2014 "),TB=a("a"),Mio=o("Wav2Vec2CTCTokenizer"),Eio=o(" (Wav2Vec2 model)"),Cio=l(),eh=a("li"),Jae=a("strong"),wio=o("wav2vec2-conformer"),Aio=o(" \u2014 "),MB=a("a"),yio=o("Wav2Vec2CTCTokenizer"),Lio=o(" (Wav2Vec2-Conformer model)"),xio=l(),oh=a("li"),Yae=a("strong"),$io=o("wav2vec2_phoneme"),kio=o(" \u2014 "),EB=a("a"),Sio=o("Wav2Vec2PhonemeCTCTokenizer"),Rio=o(" (Wav2Vec2Phoneme model)"),Pio=l(),xs=a("li"),Kae=a("strong"),Bio=o("xglm"),Iio=o(" \u2014 "),CB=a("a"),qio=o("XGLMTokenizer"),Nio=o(" or "),wB=a("a"),jio=o("XGLMTokenizerFast"),Dio=o(" (XGLM model)"),Gio=l(),rh=a("li"),Zae=a("strong"),Oio=o("xlm"),Vio=o(" \u2014 "),AB=a("a"),Xio=o("XLMTokenizer"),zio=o(" (XLM model)"),Wio=l(),th=a("li"),ene=a("strong"),Qio=o("xlm-prophetnet"),Hio=o(" \u2014 "),yB=a("a"),Uio=o("XLMProphetNetTokenizer"),Jio=o(" (XLMProphetNet model)"),Yio=l(),$s=a("li"),one=a("strong"),Kio=o("xlm-roberta"),Zio=o(" \u2014 "),LB=a("a"),edo=o("XLMRobertaTokenizer"),odo=o(" or "),xB=a("a"),rdo=o("XLMRobertaTokenizerFast"),tdo=o(" (XLM-RoBERTa model)"),ado=l(),ks=a("li"),rne=a("strong"),ndo=o("xlm-roberta-xl"),sdo=o(" \u2014 "),$B=a("a"),ldo=o("RobertaTokenizer"),ido=o(" or "),kB=a("a"),ddo=o("RobertaTokenizerFast"),cdo=o(" (XLM-RoBERTa-XL model)"),mdo=l(),Ss=a("li"),tne=a("strong"),fdo=o("xlnet"),gdo=o(" \u2014 "),SB=a("a"),hdo=o("XLNetTokenizer"),udo=o(" or "),RB=a("a"),pdo=o("XLNetTokenizerFast"),_do=o(" (XLNet model)"),bdo=l(),Rs=a("li"),ane=a("strong"),vdo=o("yoso"),Fdo=o(" \u2014 "),PB=a("a"),Tdo=o("AlbertTokenizer"),Mdo=o(" or "),BB=a("a"),Edo=o("AlbertTokenizerFast"),Cdo=o(" (YOSO model)"),wdo=l(),F(ah.$$.fragment),Ado=l(),nh=a("div"),F(Dy.$$.fragment),ydo=l(),nne=a("p"),Ldo=o("Register a new tokenizer in this mapping."),lNe=l(),Mi=a("h2"),sh=a("a"),sne=a("span"),F(Gy.$$.fragment),xdo=l(),lne=a("span"),$do=o("AutoFeatureExtractor"),iNe=l(),Ao=a("div"),F(Oy.$$.fragment),kdo=l(),Vy=a("p"),Sdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=a("a"),Rdo=o("AutoFeatureExtractor.from_pretrained()"),Pdo=o(" class method."),Bdo=l(),Xy=a("p"),Ido=o("This class cannot be instantiated directly using "),ine=a("code"),qdo=o("__init__()"),Ndo=o(" (throws an error)."),jdo=l(),He=a("div"),F(zy.$$.fragment),Ddo=l(),dne=a("p"),Gdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Odo=l(),ya=a("p"),Vdo=o("The feature extractor class to instantiate is selected based on the "),cne=a("code"),Xdo=o("model_type"),zdo=o(` property of the config object
(either passed as an argument or loaded from `),mne=a("code"),Wdo=o("pretrained_model_name_or_path"),Qdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fne=a("code"),Hdo=o("pretrained_model_name_or_path"),Udo=o(":"),Jdo=l(),Y=a("ul"),lh=a("li"),gne=a("strong"),Ydo=o("beit"),Kdo=o(" \u2014 "),qB=a("a"),Zdo=o("BeitFeatureExtractor"),eco=o(" (BEiT model)"),oco=l(),ih=a("li"),hne=a("strong"),rco=o("clip"),tco=o(" \u2014 "),NB=a("a"),aco=o("CLIPFeatureExtractor"),nco=o(" (CLIP model)"),sco=l(),dh=a("li"),une=a("strong"),lco=o("convnext"),ico=o(" \u2014 "),jB=a("a"),dco=o("ConvNextFeatureExtractor"),cco=o(" (ConvNext model)"),mco=l(),ch=a("li"),pne=a("strong"),fco=o("cvt"),gco=o(" \u2014 "),DB=a("a"),hco=o("ConvNextFeatureExtractor"),uco=o(" (CvT model)"),pco=l(),mh=a("li"),_ne=a("strong"),_co=o("data2vec-audio"),bco=o(" \u2014 "),GB=a("a"),vco=o("Wav2Vec2FeatureExtractor"),Fco=o(" (Data2VecAudio model)"),Tco=l(),fh=a("li"),bne=a("strong"),Mco=o("data2vec-vision"),Eco=o(" \u2014 "),OB=a("a"),Cco=o("BeitFeatureExtractor"),wco=o(" (Data2VecVision model)"),Aco=l(),gh=a("li"),vne=a("strong"),yco=o("deit"),Lco=o(" \u2014 "),VB=a("a"),xco=o("DeiTFeatureExtractor"),$co=o(" (DeiT model)"),kco=l(),hh=a("li"),Fne=a("strong"),Sco=o("detr"),Rco=o(" \u2014 "),XB=a("a"),Pco=o("DetrFeatureExtractor"),Bco=o(" (DETR model)"),Ico=l(),uh=a("li"),Tne=a("strong"),qco=o("dpt"),Nco=o(" \u2014 "),zB=a("a"),jco=o("DPTFeatureExtractor"),Dco=o(" (DPT model)"),Gco=l(),ph=a("li"),Mne=a("strong"),Oco=o("flava"),Vco=o(" \u2014 "),WB=a("a"),Xco=o("FlavaFeatureExtractor"),zco=o(" (Flava model)"),Wco=l(),_h=a("li"),Ene=a("strong"),Qco=o("glpn"),Hco=o(" \u2014 "),QB=a("a"),Uco=o("GLPNFeatureExtractor"),Jco=o(" (GLPN model)"),Yco=l(),bh=a("li"),Cne=a("strong"),Kco=o("hubert"),Zco=o(" \u2014 "),HB=a("a"),emo=o("Wav2Vec2FeatureExtractor"),omo=o(" (Hubert model)"),rmo=l(),vh=a("li"),wne=a("strong"),tmo=o("imagegpt"),amo=o(" \u2014 "),UB=a("a"),nmo=o("ImageGPTFeatureExtractor"),smo=o(" (ImageGPT model)"),lmo=l(),Fh=a("li"),Ane=a("strong"),imo=o("layoutlmv2"),dmo=o(" \u2014 "),JB=a("a"),cmo=o("LayoutLMv2FeatureExtractor"),mmo=o(" (LayoutLMv2 model)"),fmo=l(),Th=a("li"),yne=a("strong"),gmo=o("layoutlmv3"),hmo=o(" \u2014 "),YB=a("a"),umo=o("LayoutLMv3FeatureExtractor"),pmo=o(" (LayoutLMv3 model)"),_mo=l(),Mh=a("li"),Lne=a("strong"),bmo=o("maskformer"),vmo=o(" \u2014 "),KB=a("a"),Fmo=o("MaskFormerFeatureExtractor"),Tmo=o(" (MaskFormer model)"),Mmo=l(),Eh=a("li"),xne=a("strong"),Emo=o("perceiver"),Cmo=o(" \u2014 "),ZB=a("a"),wmo=o("PerceiverFeatureExtractor"),Amo=o(" (Perceiver model)"),ymo=l(),Ch=a("li"),$ne=a("strong"),Lmo=o("poolformer"),xmo=o(" \u2014 "),eI=a("a"),$mo=o("PoolFormerFeatureExtractor"),kmo=o(" (PoolFormer model)"),Smo=l(),wh=a("li"),kne=a("strong"),Rmo=o("regnet"),Pmo=o(" \u2014 "),oI=a("a"),Bmo=o("ConvNextFeatureExtractor"),Imo=o(" (RegNet model)"),qmo=l(),Ah=a("li"),Sne=a("strong"),Nmo=o("resnet"),jmo=o(" \u2014 "),rI=a("a"),Dmo=o("ConvNextFeatureExtractor"),Gmo=o(" (ResNet model)"),Omo=l(),yh=a("li"),Rne=a("strong"),Vmo=o("segformer"),Xmo=o(" \u2014 "),tI=a("a"),zmo=o("SegformerFeatureExtractor"),Wmo=o(" (SegFormer model)"),Qmo=l(),Lh=a("li"),Pne=a("strong"),Hmo=o("speech_to_text"),Umo=o(" \u2014 "),aI=a("a"),Jmo=o("Speech2TextFeatureExtractor"),Ymo=o(" (Speech2Text model)"),Kmo=l(),xh=a("li"),Bne=a("strong"),Zmo=o("swin"),efo=o(" \u2014 "),nI=a("a"),ofo=o("ViTFeatureExtractor"),rfo=o(" (Swin model)"),tfo=l(),$h=a("li"),Ine=a("strong"),afo=o("van"),nfo=o(" \u2014 "),sI=a("a"),sfo=o("ConvNextFeatureExtractor"),lfo=o(" (VAN model)"),ifo=l(),kh=a("li"),qne=a("strong"),dfo=o("vit"),cfo=o(" \u2014 "),lI=a("a"),mfo=o("ViTFeatureExtractor"),ffo=o(" (ViT model)"),gfo=l(),Sh=a("li"),Nne=a("strong"),hfo=o("vit_mae"),ufo=o(" \u2014 "),iI=a("a"),pfo=o("ViTFeatureExtractor"),_fo=o(" (ViTMAE model)"),bfo=l(),Rh=a("li"),jne=a("strong"),vfo=o("wav2vec2"),Ffo=o(" \u2014 "),dI=a("a"),Tfo=o("Wav2Vec2FeatureExtractor"),Mfo=o(" (Wav2Vec2 model)"),Efo=l(),Ph=a("li"),Dne=a("strong"),Cfo=o("wav2vec2-conformer"),wfo=o(" \u2014 "),cI=a("a"),Afo=o("Wav2Vec2FeatureExtractor"),yfo=o(" (Wav2Vec2-Conformer model)"),Lfo=l(),Bh=a("li"),Gne=a("strong"),xfo=o("yolos"),$fo=o(" \u2014 "),mI=a("a"),kfo=o("YolosFeatureExtractor"),Sfo=o(" (YOLOS model)"),Rfo=l(),F(Ih.$$.fragment),Pfo=l(),F(qh.$$.fragment),Bfo=l(),Nh=a("div"),F(Wy.$$.fragment),Ifo=l(),One=a("p"),qfo=o("Register a new feature extractor for this class."),dNe=l(),Ei=a("h2"),jh=a("a"),Vne=a("span"),F(Qy.$$.fragment),Nfo=l(),Xne=a("span"),jfo=o("AutoProcessor"),cNe=l(),yo=a("div"),F(Hy.$$.fragment),Dfo=l(),Uy=a("p"),Gfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fI=a("a"),Ofo=o("AutoProcessor.from_pretrained()"),Vfo=o(" class method."),Xfo=l(),Jy=a("p"),zfo=o("This class cannot be instantiated directly using "),zne=a("code"),Wfo=o("__init__()"),Qfo=o(" (throws an error)."),Hfo=l(),Ue=a("div"),F(Yy.$$.fragment),Ufo=l(),Wne=a("p"),Jfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Yfo=l(),Ci=a("p"),Kfo=o("The processor class to instantiate is selected based on the "),Qne=a("code"),Zfo=o("model_type"),ego=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),ogo=o("pretrained_model_name_or_path"),rgo=o(" if possible):"),tgo=l(),he=a("ul"),Dh=a("li"),Une=a("strong"),ago=o("clip"),ngo=o(" \u2014 "),gI=a("a"),sgo=o("CLIPProcessor"),lgo=o(" (CLIP model)"),igo=l(),Gh=a("li"),Jne=a("strong"),dgo=o("flava"),cgo=o(" \u2014 "),Yne=a("code"),mgo=o("FLAVAProcessor"),fgo=o(" (Flava model)"),ggo=l(),Oh=a("li"),Kne=a("strong"),hgo=o("layoutlmv2"),ugo=o(" \u2014 "),hI=a("a"),pgo=o("LayoutLMv2Processor"),_go=o(" (LayoutLMv2 model)"),bgo=l(),Vh=a("li"),Zne=a("strong"),vgo=o("layoutlmv3"),Fgo=o(" \u2014 "),uI=a("a"),Tgo=o("LayoutLMv3Processor"),Mgo=o(" (LayoutLMv3 model)"),Ego=l(),Xh=a("li"),ese=a("strong"),Cgo=o("layoutxlm"),wgo=o(" \u2014 "),pI=a("a"),Ago=o("LayoutXLMProcessor"),ygo=o(" (LayoutXLM model)"),Lgo=l(),zh=a("li"),ose=a("strong"),xgo=o("sew"),$go=o(" \u2014 "),_I=a("a"),kgo=o("Wav2Vec2Processor"),Sgo=o(" (SEW model)"),Rgo=l(),Wh=a("li"),rse=a("strong"),Pgo=o("sew-d"),Bgo=o(" \u2014 "),bI=a("a"),Igo=o("Wav2Vec2Processor"),qgo=o(" (SEW-D model)"),Ngo=l(),Qh=a("li"),tse=a("strong"),jgo=o("speech_to_text"),Dgo=o(" \u2014 "),vI=a("a"),Ggo=o("Speech2TextProcessor"),Ogo=o(" (Speech2Text model)"),Vgo=l(),Hh=a("li"),ase=a("strong"),Xgo=o("speech_to_text_2"),zgo=o(" \u2014 "),FI=a("a"),Wgo=o("Speech2Text2Processor"),Qgo=o(" (Speech2Text2 model)"),Hgo=l(),Uh=a("li"),nse=a("strong"),Ugo=o("trocr"),Jgo=o(" \u2014 "),TI=a("a"),Ygo=o("TrOCRProcessor"),Kgo=o(" (TrOCR model)"),Zgo=l(),Jh=a("li"),sse=a("strong"),eho=o("unispeech"),oho=o(" \u2014 "),MI=a("a"),rho=o("Wav2Vec2Processor"),tho=o(" (UniSpeech model)"),aho=l(),Yh=a("li"),lse=a("strong"),nho=o("unispeech-sat"),sho=o(" \u2014 "),EI=a("a"),lho=o("Wav2Vec2Processor"),iho=o(" (UniSpeechSat model)"),dho=l(),Kh=a("li"),ise=a("strong"),cho=o("vilt"),mho=o(" \u2014 "),CI=a("a"),fho=o("ViltProcessor"),gho=o(" (ViLT model)"),hho=l(),Zh=a("li"),dse=a("strong"),uho=o("vision-text-dual-encoder"),pho=o(" \u2014 "),wI=a("a"),_ho=o("VisionTextDualEncoderProcessor"),bho=o(" (VisionTextDualEncoder model)"),vho=l(),eu=a("li"),cse=a("strong"),Fho=o("wav2vec2"),Tho=o(" \u2014 "),AI=a("a"),Mho=o("Wav2Vec2Processor"),Eho=o(" (Wav2Vec2 model)"),Cho=l(),ou=a("li"),mse=a("strong"),who=o("wav2vec2-conformer"),Aho=o(" \u2014 "),yI=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (Wav2Vec2-Conformer model)"),xho=l(),ru=a("li"),fse=a("strong"),$ho=o("wavlm"),kho=o(" \u2014 "),LI=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (WavLM model)"),Pho=l(),F(tu.$$.fragment),Bho=l(),F(au.$$.fragment),Iho=l(),nu=a("div"),F(Ky.$$.fragment),qho=l(),gse=a("p"),Nho=o("Register a new processor for this class."),mNe=l(),wi=a("h2"),su=a("a"),hse=a("span"),F(Zy.$$.fragment),jho=l(),use=a("span"),Dho=o("AutoModel"),fNe=l(),Lo=a("div"),F(eL.$$.fragment),Gho=l(),Ai=a("p"),Oho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xI=a("a"),Vho=o("from_pretrained()"),Xho=o(" class method or the "),$I=a("a"),zho=o("from_config()"),Who=o(` class
method.`),Qho=l(),oL=a("p"),Hho=o("This class cannot be instantiated directly using "),pse=a("code"),Uho=o("__init__()"),Jho=o(" (throws an error)."),Yho=l(),tt=a("div"),F(rL.$$.fragment),Kho=l(),_se=a("p"),Zho=o("Instantiates one of the base model classes of the library from a configuration."),euo=l(),yi=a("p"),ouo=o(`Note:
Loading a model from its configuration file does `),bse=a("strong"),ruo=o("not"),tuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=a("a"),auo=o("from_pretrained()"),nuo=o(" to load the model weights."),suo=l(),F(lu.$$.fragment),luo=l(),Je=a("div"),F(tL.$$.fragment),iuo=l(),vse=a("p"),duo=o("Instantiate one of the base model classes of the library from a pretrained model."),cuo=l(),La=a("p"),muo=o("The model class to instantiate is selected based on the "),Fse=a("code"),fuo=o("model_type"),guo=o(` property of the config object (either
passed as an argument or loaded from `),Tse=a("code"),huo=o("pretrained_model_name_or_path"),uuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=a("code"),puo=o("pretrained_model_name_or_path"),_uo=o(":"),buo=l(),x=a("ul"),iu=a("li"),Ese=a("strong"),vuo=o("albert"),Fuo=o(" \u2014 "),SI=a("a"),Tuo=o("AlbertModel"),Muo=o(" (ALBERT model)"),Euo=l(),du=a("li"),Cse=a("strong"),Cuo=o("bart"),wuo=o(" \u2014 "),RI=a("a"),Auo=o("BartModel"),yuo=o(" (BART model)"),Luo=l(),cu=a("li"),wse=a("strong"),xuo=o("beit"),$uo=o(" \u2014 "),PI=a("a"),kuo=o("BeitModel"),Suo=o(" (BEiT model)"),Ruo=l(),mu=a("li"),Ase=a("strong"),Puo=o("bert"),Buo=o(" \u2014 "),BI=a("a"),Iuo=o("BertModel"),quo=o(" (BERT model)"),Nuo=l(),fu=a("li"),yse=a("strong"),juo=o("bert-generation"),Duo=o(" \u2014 "),II=a("a"),Guo=o("BertGenerationEncoder"),Ouo=o(" (Bert Generation model)"),Vuo=l(),gu=a("li"),Lse=a("strong"),Xuo=o("big_bird"),zuo=o(" \u2014 "),qI=a("a"),Wuo=o("BigBirdModel"),Quo=o(" (BigBird model)"),Huo=l(),hu=a("li"),xse=a("strong"),Uuo=o("bigbird_pegasus"),Juo=o(" \u2014 "),NI=a("a"),Yuo=o("BigBirdPegasusModel"),Kuo=o(" (BigBirdPegasus model)"),Zuo=l(),uu=a("li"),$se=a("strong"),epo=o("blenderbot"),opo=o(" \u2014 "),jI=a("a"),rpo=o("BlenderbotModel"),tpo=o(" (Blenderbot model)"),apo=l(),pu=a("li"),kse=a("strong"),npo=o("blenderbot-small"),spo=o(" \u2014 "),DI=a("a"),lpo=o("BlenderbotSmallModel"),ipo=o(" (BlenderbotSmall model)"),dpo=l(),_u=a("li"),Sse=a("strong"),cpo=o("camembert"),mpo=o(" \u2014 "),GI=a("a"),fpo=o("CamembertModel"),gpo=o(" (CamemBERT model)"),hpo=l(),bu=a("li"),Rse=a("strong"),upo=o("canine"),ppo=o(" \u2014 "),OI=a("a"),_po=o("CanineModel"),bpo=o(" (Canine model)"),vpo=l(),vu=a("li"),Pse=a("strong"),Fpo=o("clip"),Tpo=o(" \u2014 "),VI=a("a"),Mpo=o("CLIPModel"),Epo=o(" (CLIP model)"),Cpo=l(),Fu=a("li"),Bse=a("strong"),wpo=o("convbert"),Apo=o(" \u2014 "),XI=a("a"),ypo=o("ConvBertModel"),Lpo=o(" (ConvBERT model)"),xpo=l(),Tu=a("li"),Ise=a("strong"),$po=o("convnext"),kpo=o(" \u2014 "),zI=a("a"),Spo=o("ConvNextModel"),Rpo=o(" (ConvNext model)"),Ppo=l(),Mu=a("li"),qse=a("strong"),Bpo=o("ctrl"),Ipo=o(" \u2014 "),WI=a("a"),qpo=o("CTRLModel"),Npo=o(" (CTRL model)"),jpo=l(),Eu=a("li"),Nse=a("strong"),Dpo=o("cvt"),Gpo=o(" \u2014 "),QI=a("a"),Opo=o("CvtModel"),Vpo=o(" (CvT model)"),Xpo=l(),Cu=a("li"),jse=a("strong"),zpo=o("data2vec-audio"),Wpo=o(" \u2014 "),HI=a("a"),Qpo=o("Data2VecAudioModel"),Hpo=o(" (Data2VecAudio model)"),Upo=l(),wu=a("li"),Dse=a("strong"),Jpo=o("data2vec-text"),Ypo=o(" \u2014 "),UI=a("a"),Kpo=o("Data2VecTextModel"),Zpo=o(" (Data2VecText model)"),e_o=l(),Au=a("li"),Gse=a("strong"),o_o=o("data2vec-vision"),r_o=o(" \u2014 "),JI=a("a"),t_o=o("Data2VecVisionModel"),a_o=o(" (Data2VecVision model)"),n_o=l(),yu=a("li"),Ose=a("strong"),s_o=o("deberta"),l_o=o(" \u2014 "),YI=a("a"),i_o=o("DebertaModel"),d_o=o(" (DeBERTa model)"),c_o=l(),Lu=a("li"),Vse=a("strong"),m_o=o("deberta-v2"),f_o=o(" \u2014 "),KI=a("a"),g_o=o("DebertaV2Model"),h_o=o(" (DeBERTa-v2 model)"),u_o=l(),xu=a("li"),Xse=a("strong"),p_o=o("decision_transformer"),__o=o(" \u2014 "),ZI=a("a"),b_o=o("DecisionTransformerModel"),v_o=o(" (Decision Transformer model)"),F_o=l(),$u=a("li"),zse=a("strong"),T_o=o("deit"),M_o=o(" \u2014 "),eq=a("a"),E_o=o("DeiTModel"),C_o=o(" (DeiT model)"),w_o=l(),ku=a("li"),Wse=a("strong"),A_o=o("detr"),y_o=o(" \u2014 "),oq=a("a"),L_o=o("DetrModel"),x_o=o(" (DETR model)"),$_o=l(),Su=a("li"),Qse=a("strong"),k_o=o("distilbert"),S_o=o(" \u2014 "),rq=a("a"),R_o=o("DistilBertModel"),P_o=o(" (DistilBERT model)"),B_o=l(),Ru=a("li"),Hse=a("strong"),I_o=o("dpr"),q_o=o(" \u2014 "),tq=a("a"),N_o=o("DPRQuestionEncoder"),j_o=o(" (DPR model)"),D_o=l(),Pu=a("li"),Use=a("strong"),G_o=o("dpt"),O_o=o(" \u2014 "),aq=a("a"),V_o=o("DPTModel"),X_o=o(" (DPT model)"),z_o=l(),Bu=a("li"),Jse=a("strong"),W_o=o("electra"),Q_o=o(" \u2014 "),nq=a("a"),H_o=o("ElectraModel"),U_o=o(" (ELECTRA model)"),J_o=l(),Iu=a("li"),Yse=a("strong"),Y_o=o("flaubert"),K_o=o(" \u2014 "),sq=a("a"),Z_o=o("FlaubertModel"),ebo=o(" (FlauBERT model)"),obo=l(),qu=a("li"),Kse=a("strong"),rbo=o("flava"),tbo=o(" \u2014 "),lq=a("a"),abo=o("FlavaModel"),nbo=o(" (Flava model)"),sbo=l(),Nu=a("li"),Zse=a("strong"),lbo=o("fnet"),ibo=o(" \u2014 "),iq=a("a"),dbo=o("FNetModel"),cbo=o(" (FNet model)"),mbo=l(),ju=a("li"),ele=a("strong"),fbo=o("fsmt"),gbo=o(" \u2014 "),dq=a("a"),hbo=o("FSMTModel"),ubo=o(" (FairSeq Machine-Translation model)"),pbo=l(),Ps=a("li"),ole=a("strong"),_bo=o("funnel"),bbo=o(" \u2014 "),cq=a("a"),vbo=o("FunnelModel"),Fbo=o(" or "),mq=a("a"),Tbo=o("FunnelBaseModel"),Mbo=o(" (Funnel Transformer model)"),Ebo=l(),Du=a("li"),rle=a("strong"),Cbo=o("glpn"),wbo=o(" \u2014 "),fq=a("a"),Abo=o("GLPNModel"),ybo=o(" (GLPN model)"),Lbo=l(),Gu=a("li"),tle=a("strong"),xbo=o("gpt2"),$bo=o(" \u2014 "),gq=a("a"),kbo=o("GPT2Model"),Sbo=o(" (OpenAI GPT-2 model)"),Rbo=l(),Ou=a("li"),ale=a("strong"),Pbo=o("gpt_neo"),Bbo=o(" \u2014 "),hq=a("a"),Ibo=o("GPTNeoModel"),qbo=o(" (GPT Neo model)"),Nbo=l(),Vu=a("li"),nle=a("strong"),jbo=o("gpt_neox"),Dbo=o(" \u2014 "),uq=a("a"),Gbo=o("GPTNeoXModel"),Obo=o(" (GPT NeoX model)"),Vbo=l(),Xu=a("li"),sle=a("strong"),Xbo=o("gptj"),zbo=o(" \u2014 "),pq=a("a"),Wbo=o("GPTJModel"),Qbo=o(" (GPT-J model)"),Hbo=l(),zu=a("li"),lle=a("strong"),Ubo=o("hubert"),Jbo=o(" \u2014 "),_q=a("a"),Ybo=o("HubertModel"),Kbo=o(" (Hubert model)"),Zbo=l(),Wu=a("li"),ile=a("strong"),e2o=o("ibert"),o2o=o(" \u2014 "),bq=a("a"),r2o=o("IBertModel"),t2o=o(" (I-BERT model)"),a2o=l(),Qu=a("li"),dle=a("strong"),n2o=o("imagegpt"),s2o=o(" \u2014 "),vq=a("a"),l2o=o("ImageGPTModel"),i2o=o(" (ImageGPT model)"),d2o=l(),Hu=a("li"),cle=a("strong"),c2o=o("layoutlm"),m2o=o(" \u2014 "),Fq=a("a"),f2o=o("LayoutLMModel"),g2o=o(" (LayoutLM model)"),h2o=l(),Uu=a("li"),mle=a("strong"),u2o=o("layoutlmv2"),p2o=o(" \u2014 "),Tq=a("a"),_2o=o("LayoutLMv2Model"),b2o=o(" (LayoutLMv2 model)"),v2o=l(),Ju=a("li"),fle=a("strong"),F2o=o("layoutlmv3"),T2o=o(" \u2014 "),Mq=a("a"),M2o=o("LayoutLMv3Model"),E2o=o(" (LayoutLMv3 model)"),C2o=l(),Yu=a("li"),gle=a("strong"),w2o=o("led"),A2o=o(" \u2014 "),Eq=a("a"),y2o=o("LEDModel"),L2o=o(" (LED model)"),x2o=l(),Ku=a("li"),hle=a("strong"),$2o=o("longformer"),k2o=o(" \u2014 "),Cq=a("a"),S2o=o("LongformerModel"),R2o=o(" (Longformer model)"),P2o=l(),Zu=a("li"),ule=a("strong"),B2o=o("luke"),I2o=o(" \u2014 "),wq=a("a"),q2o=o("LukeModel"),N2o=o(" (LUKE model)"),j2o=l(),ep=a("li"),ple=a("strong"),D2o=o("lxmert"),G2o=o(" \u2014 "),Aq=a("a"),O2o=o("LxmertModel"),V2o=o(" (LXMERT model)"),X2o=l(),op=a("li"),_le=a("strong"),z2o=o("m2m_100"),W2o=o(" \u2014 "),yq=a("a"),Q2o=o("M2M100Model"),H2o=o(" (M2M100 model)"),U2o=l(),rp=a("li"),ble=a("strong"),J2o=o("marian"),Y2o=o(" \u2014 "),Lq=a("a"),K2o=o("MarianModel"),Z2o=o(" (Marian model)"),evo=l(),tp=a("li"),vle=a("strong"),ovo=o("maskformer"),rvo=o(" \u2014 "),xq=a("a"),tvo=o("MaskFormerModel"),avo=o(" (MaskFormer model)"),nvo=l(),ap=a("li"),Fle=a("strong"),svo=o("mbart"),lvo=o(" \u2014 "),$q=a("a"),ivo=o("MBartModel"),dvo=o(" (mBART model)"),cvo=l(),np=a("li"),Tle=a("strong"),mvo=o("megatron-bert"),fvo=o(" \u2014 "),kq=a("a"),gvo=o("MegatronBertModel"),hvo=o(" (MegatronBert model)"),uvo=l(),sp=a("li"),Mle=a("strong"),pvo=o("mobilebert"),_vo=o(" \u2014 "),Sq=a("a"),bvo=o("MobileBertModel"),vvo=o(" (MobileBERT model)"),Fvo=l(),lp=a("li"),Ele=a("strong"),Tvo=o("mpnet"),Mvo=o(" \u2014 "),Rq=a("a"),Evo=o("MPNetModel"),Cvo=o(" (MPNet model)"),wvo=l(),ip=a("li"),Cle=a("strong"),Avo=o("mt5"),yvo=o(" \u2014 "),Pq=a("a"),Lvo=o("MT5Model"),xvo=o(" (mT5 model)"),$vo=l(),dp=a("li"),wle=a("strong"),kvo=o("nystromformer"),Svo=o(" \u2014 "),Bq=a("a"),Rvo=o("NystromformerModel"),Pvo=o(" (Nystromformer model)"),Bvo=l(),cp=a("li"),Ale=a("strong"),Ivo=o("openai-gpt"),qvo=o(" \u2014 "),Iq=a("a"),Nvo=o("OpenAIGPTModel"),jvo=o(" (OpenAI GPT model)"),Dvo=l(),mp=a("li"),yle=a("strong"),Gvo=o("opt"),Ovo=o(" \u2014 "),qq=a("a"),Vvo=o("OPTModel"),Xvo=o(" (OPT model)"),zvo=l(),fp=a("li"),Lle=a("strong"),Wvo=o("pegasus"),Qvo=o(" \u2014 "),Nq=a("a"),Hvo=o("PegasusModel"),Uvo=o(" (Pegasus model)"),Jvo=l(),gp=a("li"),xle=a("strong"),Yvo=o("perceiver"),Kvo=o(" \u2014 "),jq=a("a"),Zvo=o("PerceiverModel"),eFo=o(" (Perceiver model)"),oFo=l(),hp=a("li"),$le=a("strong"),rFo=o("plbart"),tFo=o(" \u2014 "),Dq=a("a"),aFo=o("PLBartModel"),nFo=o(" (PLBart model)"),sFo=l(),up=a("li"),kle=a("strong"),lFo=o("poolformer"),iFo=o(" \u2014 "),Gq=a("a"),dFo=o("PoolFormerModel"),cFo=o(" (PoolFormer model)"),mFo=l(),pp=a("li"),Sle=a("strong"),fFo=o("prophetnet"),gFo=o(" \u2014 "),Oq=a("a"),hFo=o("ProphetNetModel"),uFo=o(" (ProphetNet model)"),pFo=l(),_p=a("li"),Rle=a("strong"),_Fo=o("qdqbert"),bFo=o(" \u2014 "),Vq=a("a"),vFo=o("QDQBertModel"),FFo=o(" (QDQBert model)"),TFo=l(),bp=a("li"),Ple=a("strong"),MFo=o("reformer"),EFo=o(" \u2014 "),Xq=a("a"),CFo=o("ReformerModel"),wFo=o(" (Reformer model)"),AFo=l(),vp=a("li"),Ble=a("strong"),yFo=o("regnet"),LFo=o(" \u2014 "),zq=a("a"),xFo=o("RegNetModel"),$Fo=o(" (RegNet model)"),kFo=l(),Fp=a("li"),Ile=a("strong"),SFo=o("rembert"),RFo=o(" \u2014 "),Wq=a("a"),PFo=o("RemBertModel"),BFo=o(" (RemBERT model)"),IFo=l(),Tp=a("li"),qle=a("strong"),qFo=o("resnet"),NFo=o(" \u2014 "),Qq=a("a"),jFo=o("ResNetModel"),DFo=o(" (ResNet model)"),GFo=l(),Mp=a("li"),Nle=a("strong"),OFo=o("retribert"),VFo=o(" \u2014 "),Hq=a("a"),XFo=o("RetriBertModel"),zFo=o(" (RetriBERT model)"),WFo=l(),Ep=a("li"),jle=a("strong"),QFo=o("roberta"),HFo=o(" \u2014 "),Uq=a("a"),UFo=o("RobertaModel"),JFo=o(" (RoBERTa model)"),YFo=l(),Cp=a("li"),Dle=a("strong"),KFo=o("roformer"),ZFo=o(" \u2014 "),Jq=a("a"),e1o=o("RoFormerModel"),o1o=o(" (RoFormer model)"),r1o=l(),wp=a("li"),Gle=a("strong"),t1o=o("segformer"),a1o=o(" \u2014 "),Yq=a("a"),n1o=o("SegformerModel"),s1o=o(" (SegFormer model)"),l1o=l(),Ap=a("li"),Ole=a("strong"),i1o=o("sew"),d1o=o(" \u2014 "),Kq=a("a"),c1o=o("SEWModel"),m1o=o(" (SEW model)"),f1o=l(),yp=a("li"),Vle=a("strong"),g1o=o("sew-d"),h1o=o(" \u2014 "),Zq=a("a"),u1o=o("SEWDModel"),p1o=o(" (SEW-D model)"),_1o=l(),Lp=a("li"),Xle=a("strong"),b1o=o("speech_to_text"),v1o=o(" \u2014 "),eN=a("a"),F1o=o("Speech2TextModel"),T1o=o(" (Speech2Text model)"),M1o=l(),xp=a("li"),zle=a("strong"),E1o=o("splinter"),C1o=o(" \u2014 "),oN=a("a"),w1o=o("SplinterModel"),A1o=o(" (Splinter model)"),y1o=l(),$p=a("li"),Wle=a("strong"),L1o=o("squeezebert"),x1o=o(" \u2014 "),rN=a("a"),$1o=o("SqueezeBertModel"),k1o=o(" (SqueezeBERT model)"),S1o=l(),kp=a("li"),Qle=a("strong"),R1o=o("swin"),P1o=o(" \u2014 "),tN=a("a"),B1o=o("SwinModel"),I1o=o(" (Swin model)"),q1o=l(),Sp=a("li"),Hle=a("strong"),N1o=o("t5"),j1o=o(" \u2014 "),aN=a("a"),D1o=o("T5Model"),G1o=o(" (T5 model)"),O1o=l(),Rp=a("li"),Ule=a("strong"),V1o=o("tapas"),X1o=o(" \u2014 "),nN=a("a"),z1o=o("TapasModel"),W1o=o(" (TAPAS model)"),Q1o=l(),Pp=a("li"),Jle=a("strong"),H1o=o("trajectory_transformer"),U1o=o(" \u2014 "),sN=a("a"),J1o=o("TrajectoryTransformerModel"),Y1o=o(" (Trajectory Transformer model)"),K1o=l(),Bp=a("li"),Yle=a("strong"),Z1o=o("transfo-xl"),eTo=o(" \u2014 "),lN=a("a"),oTo=o("TransfoXLModel"),rTo=o(" (Transformer-XL model)"),tTo=l(),Ip=a("li"),Kle=a("strong"),aTo=o("unispeech"),nTo=o(" \u2014 "),iN=a("a"),sTo=o("UniSpeechModel"),lTo=o(" (UniSpeech model)"),iTo=l(),qp=a("li"),Zle=a("strong"),dTo=o("unispeech-sat"),cTo=o(" \u2014 "),dN=a("a"),mTo=o("UniSpeechSatModel"),fTo=o(" (UniSpeechSat model)"),gTo=l(),Np=a("li"),eie=a("strong"),hTo=o("van"),uTo=o(" \u2014 "),cN=a("a"),pTo=o("VanModel"),_To=o(" (VAN model)"),bTo=l(),jp=a("li"),oie=a("strong"),vTo=o("vilt"),FTo=o(" \u2014 "),mN=a("a"),TTo=o("ViltModel"),MTo=o(" (ViLT model)"),ETo=l(),Dp=a("li"),rie=a("strong"),CTo=o("vision-text-dual-encoder"),wTo=o(" \u2014 "),fN=a("a"),ATo=o("VisionTextDualEncoderModel"),yTo=o(" (VisionTextDualEncoder model)"),LTo=l(),Gp=a("li"),tie=a("strong"),xTo=o("visual_bert"),$To=o(" \u2014 "),gN=a("a"),kTo=o("VisualBertModel"),STo=o(" (VisualBert model)"),RTo=l(),Op=a("li"),aie=a("strong"),PTo=o("vit"),BTo=o(" \u2014 "),hN=a("a"),ITo=o("ViTModel"),qTo=o(" (ViT model)"),NTo=l(),Vp=a("li"),nie=a("strong"),jTo=o("vit_mae"),DTo=o(" \u2014 "),uN=a("a"),GTo=o("ViTMAEModel"),OTo=o(" (ViTMAE model)"),VTo=l(),Xp=a("li"),sie=a("strong"),XTo=o("wav2vec2"),zTo=o(" \u2014 "),pN=a("a"),WTo=o("Wav2Vec2Model"),QTo=o(" (Wav2Vec2 model)"),HTo=l(),zp=a("li"),lie=a("strong"),UTo=o("wav2vec2-conformer"),JTo=o(" \u2014 "),_N=a("a"),YTo=o("Wav2Vec2ConformerModel"),KTo=o(" (Wav2Vec2-Conformer model)"),ZTo=l(),Wp=a("li"),iie=a("strong"),eMo=o("wavlm"),oMo=o(" \u2014 "),bN=a("a"),rMo=o("WavLMModel"),tMo=o(" (WavLM model)"),aMo=l(),Qp=a("li"),die=a("strong"),nMo=o("xglm"),sMo=o(" \u2014 "),vN=a("a"),lMo=o("XGLMModel"),iMo=o(" (XGLM model)"),dMo=l(),Hp=a("li"),cie=a("strong"),cMo=o("xlm"),mMo=o(" \u2014 "),FN=a("a"),fMo=o("XLMModel"),gMo=o(" (XLM model)"),hMo=l(),Up=a("li"),mie=a("strong"),uMo=o("xlm-prophetnet"),pMo=o(" \u2014 "),TN=a("a"),_Mo=o("XLMProphetNetModel"),bMo=o(" (XLMProphetNet model)"),vMo=l(),Jp=a("li"),fie=a("strong"),FMo=o("xlm-roberta"),TMo=o(" \u2014 "),MN=a("a"),MMo=o("XLMRobertaModel"),EMo=o(" (XLM-RoBERTa model)"),CMo=l(),Yp=a("li"),gie=a("strong"),wMo=o("xlm-roberta-xl"),AMo=o(" \u2014 "),EN=a("a"),yMo=o("XLMRobertaXLModel"),LMo=o(" (XLM-RoBERTa-XL model)"),xMo=l(),Kp=a("li"),hie=a("strong"),$Mo=o("xlnet"),kMo=o(" \u2014 "),CN=a("a"),SMo=o("XLNetModel"),RMo=o(" (XLNet model)"),PMo=l(),Zp=a("li"),uie=a("strong"),BMo=o("yolos"),IMo=o(" \u2014 "),wN=a("a"),qMo=o("YolosModel"),NMo=o(" (YOLOS model)"),jMo=l(),e_=a("li"),pie=a("strong"),DMo=o("yoso"),GMo=o(" \u2014 "),AN=a("a"),OMo=o("YosoModel"),VMo=o(" (YOSO model)"),XMo=l(),o_=a("p"),zMo=o("The model is set in evaluation mode by default using "),_ie=a("code"),WMo=o("model.eval()"),QMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=a("code"),HMo=o("model.train()"),UMo=l(),F(r_.$$.fragment),gNe=l(),Li=a("h2"),t_=a("a"),vie=a("span"),F(aL.$$.fragment),JMo=l(),Fie=a("span"),YMo=o("AutoModelForPreTraining"),hNe=l(),xo=a("div"),F(nL.$$.fragment),KMo=l(),xi=a("p"),ZMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yN=a("a"),e4o=o("from_pretrained()"),o4o=o(" class method or the "),LN=a("a"),r4o=o("from_config()"),t4o=o(` class
method.`),a4o=l(),sL=a("p"),n4o=o("This class cannot be instantiated directly using "),Tie=a("code"),s4o=o("__init__()"),l4o=o(" (throws an error)."),i4o=l(),at=a("div"),F(lL.$$.fragment),d4o=l(),Mie=a("p"),c4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m4o=l(),$i=a("p"),f4o=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),g4o=o("not"),h4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=a("a"),u4o=o("from_pretrained()"),p4o=o(" to load the model weights."),_4o=l(),F(a_.$$.fragment),b4o=l(),Ye=a("div"),F(iL.$$.fragment),v4o=l(),Cie=a("p"),F4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T4o=l(),xa=a("p"),M4o=o("The model class to instantiate is selected based on the "),wie=a("code"),E4o=o("model_type"),C4o=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),w4o=o("pretrained_model_name_or_path"),A4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),y4o=o("pretrained_model_name_or_path"),L4o=o(":"),x4o=l(),G=a("ul"),n_=a("li"),Lie=a("strong"),$4o=o("albert"),k4o=o(" \u2014 "),$N=a("a"),S4o=o("AlbertForPreTraining"),R4o=o(" (ALBERT model)"),P4o=l(),s_=a("li"),xie=a("strong"),B4o=o("bart"),I4o=o(" \u2014 "),kN=a("a"),q4o=o("BartForConditionalGeneration"),N4o=o(" (BART model)"),j4o=l(),l_=a("li"),$ie=a("strong"),D4o=o("bert"),G4o=o(" \u2014 "),SN=a("a"),O4o=o("BertForPreTraining"),V4o=o(" (BERT model)"),X4o=l(),i_=a("li"),kie=a("strong"),z4o=o("big_bird"),W4o=o(" \u2014 "),RN=a("a"),Q4o=o("BigBirdForPreTraining"),H4o=o(" (BigBird model)"),U4o=l(),d_=a("li"),Sie=a("strong"),J4o=o("camembert"),Y4o=o(" \u2014 "),PN=a("a"),K4o=o("CamembertForMaskedLM"),Z4o=o(" (CamemBERT model)"),eEo=l(),c_=a("li"),Rie=a("strong"),oEo=o("ctrl"),rEo=o(" \u2014 "),BN=a("a"),tEo=o("CTRLLMHeadModel"),aEo=o(" (CTRL model)"),nEo=l(),m_=a("li"),Pie=a("strong"),sEo=o("data2vec-text"),lEo=o(" \u2014 "),IN=a("a"),iEo=o("Data2VecTextForMaskedLM"),dEo=o(" (Data2VecText model)"),cEo=l(),f_=a("li"),Bie=a("strong"),mEo=o("deberta"),fEo=o(" \u2014 "),qN=a("a"),gEo=o("DebertaForMaskedLM"),hEo=o(" (DeBERTa model)"),uEo=l(),g_=a("li"),Iie=a("strong"),pEo=o("deberta-v2"),_Eo=o(" \u2014 "),NN=a("a"),bEo=o("DebertaV2ForMaskedLM"),vEo=o(" (DeBERTa-v2 model)"),FEo=l(),h_=a("li"),qie=a("strong"),TEo=o("distilbert"),MEo=o(" \u2014 "),jN=a("a"),EEo=o("DistilBertForMaskedLM"),CEo=o(" (DistilBERT model)"),wEo=l(),u_=a("li"),Nie=a("strong"),AEo=o("electra"),yEo=o(" \u2014 "),DN=a("a"),LEo=o("ElectraForPreTraining"),xEo=o(" (ELECTRA model)"),$Eo=l(),p_=a("li"),jie=a("strong"),kEo=o("flaubert"),SEo=o(" \u2014 "),GN=a("a"),REo=o("FlaubertWithLMHeadModel"),PEo=o(" (FlauBERT model)"),BEo=l(),__=a("li"),Die=a("strong"),IEo=o("flava"),qEo=o(" \u2014 "),ON=a("a"),NEo=o("FlavaForPreTraining"),jEo=o(" (Flava model)"),DEo=l(),b_=a("li"),Gie=a("strong"),GEo=o("fnet"),OEo=o(" \u2014 "),VN=a("a"),VEo=o("FNetForPreTraining"),XEo=o(" (FNet model)"),zEo=l(),v_=a("li"),Oie=a("strong"),WEo=o("fsmt"),QEo=o(" \u2014 "),XN=a("a"),HEo=o("FSMTForConditionalGeneration"),UEo=o(" (FairSeq Machine-Translation model)"),JEo=l(),F_=a("li"),Vie=a("strong"),YEo=o("funnel"),KEo=o(" \u2014 "),zN=a("a"),ZEo=o("FunnelForPreTraining"),eCo=o(" (Funnel Transformer model)"),oCo=l(),T_=a("li"),Xie=a("strong"),rCo=o("gpt2"),tCo=o(" \u2014 "),WN=a("a"),aCo=o("GPT2LMHeadModel"),nCo=o(" (OpenAI GPT-2 model)"),sCo=l(),M_=a("li"),zie=a("strong"),lCo=o("ibert"),iCo=o(" \u2014 "),QN=a("a"),dCo=o("IBertForMaskedLM"),cCo=o(" (I-BERT model)"),mCo=l(),E_=a("li"),Wie=a("strong"),fCo=o("layoutlm"),gCo=o(" \u2014 "),HN=a("a"),hCo=o("LayoutLMForMaskedLM"),uCo=o(" (LayoutLM model)"),pCo=l(),C_=a("li"),Qie=a("strong"),_Co=o("longformer"),bCo=o(" \u2014 "),UN=a("a"),vCo=o("LongformerForMaskedLM"),FCo=o(" (Longformer model)"),TCo=l(),w_=a("li"),Hie=a("strong"),MCo=o("lxmert"),ECo=o(" \u2014 "),JN=a("a"),CCo=o("LxmertForPreTraining"),wCo=o(" (LXMERT model)"),ACo=l(),A_=a("li"),Uie=a("strong"),yCo=o("megatron-bert"),LCo=o(" \u2014 "),YN=a("a"),xCo=o("MegatronBertForPreTraining"),$Co=o(" (MegatronBert model)"),kCo=l(),y_=a("li"),Jie=a("strong"),SCo=o("mobilebert"),RCo=o(" \u2014 "),KN=a("a"),PCo=o("MobileBertForPreTraining"),BCo=o(" (MobileBERT model)"),ICo=l(),L_=a("li"),Yie=a("strong"),qCo=o("mpnet"),NCo=o(" \u2014 "),ZN=a("a"),jCo=o("MPNetForMaskedLM"),DCo=o(" (MPNet model)"),GCo=l(),x_=a("li"),Kie=a("strong"),OCo=o("openai-gpt"),VCo=o(" \u2014 "),ej=a("a"),XCo=o("OpenAIGPTLMHeadModel"),zCo=o(" (OpenAI GPT model)"),WCo=l(),$_=a("li"),Zie=a("strong"),QCo=o("retribert"),HCo=o(" \u2014 "),oj=a("a"),UCo=o("RetriBertModel"),JCo=o(" (RetriBERT model)"),YCo=l(),k_=a("li"),ede=a("strong"),KCo=o("roberta"),ZCo=o(" \u2014 "),rj=a("a"),e5o=o("RobertaForMaskedLM"),o5o=o(" (RoBERTa model)"),r5o=l(),S_=a("li"),ode=a("strong"),t5o=o("splinter"),a5o=o(" \u2014 "),tj=a("a"),n5o=o("SplinterForPreTraining"),s5o=o(" (Splinter model)"),l5o=l(),R_=a("li"),rde=a("strong"),i5o=o("squeezebert"),d5o=o(" \u2014 "),aj=a("a"),c5o=o("SqueezeBertForMaskedLM"),m5o=o(" (SqueezeBERT model)"),f5o=l(),P_=a("li"),tde=a("strong"),g5o=o("t5"),h5o=o(" \u2014 "),nj=a("a"),u5o=o("T5ForConditionalGeneration"),p5o=o(" (T5 model)"),_5o=l(),B_=a("li"),ade=a("strong"),b5o=o("tapas"),v5o=o(" \u2014 "),sj=a("a"),F5o=o("TapasForMaskedLM"),T5o=o(" (TAPAS model)"),M5o=l(),I_=a("li"),nde=a("strong"),E5o=o("transfo-xl"),C5o=o(" \u2014 "),lj=a("a"),w5o=o("TransfoXLLMHeadModel"),A5o=o(" (Transformer-XL model)"),y5o=l(),q_=a("li"),sde=a("strong"),L5o=o("unispeech"),x5o=o(" \u2014 "),ij=a("a"),$5o=o("UniSpeechForPreTraining"),k5o=o(" (UniSpeech model)"),S5o=l(),N_=a("li"),lde=a("strong"),R5o=o("unispeech-sat"),P5o=o(" \u2014 "),dj=a("a"),B5o=o("UniSpeechSatForPreTraining"),I5o=o(" (UniSpeechSat model)"),q5o=l(),j_=a("li"),ide=a("strong"),N5o=o("visual_bert"),j5o=o(" \u2014 "),cj=a("a"),D5o=o("VisualBertForPreTraining"),G5o=o(" (VisualBert model)"),O5o=l(),D_=a("li"),dde=a("strong"),V5o=o("vit_mae"),X5o=o(" \u2014 "),mj=a("a"),z5o=o("ViTMAEForPreTraining"),W5o=o(" (ViTMAE model)"),Q5o=l(),G_=a("li"),cde=a("strong"),H5o=o("wav2vec2"),U5o=o(" \u2014 "),fj=a("a"),J5o=o("Wav2Vec2ForPreTraining"),Y5o=o(" (Wav2Vec2 model)"),K5o=l(),O_=a("li"),mde=a("strong"),Z5o=o("wav2vec2-conformer"),e3o=o(" \u2014 "),gj=a("a"),o3o=o("Wav2Vec2ConformerForPreTraining"),r3o=o(" (Wav2Vec2-Conformer model)"),t3o=l(),V_=a("li"),fde=a("strong"),a3o=o("xlm"),n3o=o(" \u2014 "),hj=a("a"),s3o=o("XLMWithLMHeadModel"),l3o=o(" (XLM model)"),i3o=l(),X_=a("li"),gde=a("strong"),d3o=o("xlm-roberta"),c3o=o(" \u2014 "),uj=a("a"),m3o=o("XLMRobertaForMaskedLM"),f3o=o(" (XLM-RoBERTa model)"),g3o=l(),z_=a("li"),hde=a("strong"),h3o=o("xlm-roberta-xl"),u3o=o(" \u2014 "),pj=a("a"),p3o=o("XLMRobertaXLForMaskedLM"),_3o=o(" (XLM-RoBERTa-XL model)"),b3o=l(),W_=a("li"),ude=a("strong"),v3o=o("xlnet"),F3o=o(" \u2014 "),_j=a("a"),T3o=o("XLNetLMHeadModel"),M3o=o(" (XLNet model)"),E3o=l(),Q_=a("p"),C3o=o("The model is set in evaluation mode by default using "),pde=a("code"),w3o=o("model.eval()"),A3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),y3o=o("model.train()"),L3o=l(),F(H_.$$.fragment),uNe=l(),ki=a("h2"),U_=a("a"),bde=a("span"),F(dL.$$.fragment),x3o=l(),vde=a("span"),$3o=o("AutoModelForCausalLM"),pNe=l(),$o=a("div"),F(cL.$$.fragment),k3o=l(),Si=a("p"),S3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bj=a("a"),R3o=o("from_pretrained()"),P3o=o(" class method or the "),vj=a("a"),B3o=o("from_config()"),I3o=o(` class
method.`),q3o=l(),mL=a("p"),N3o=o("This class cannot be instantiated directly using "),Fde=a("code"),j3o=o("__init__()"),D3o=o(" (throws an error)."),G3o=l(),nt=a("div"),F(fL.$$.fragment),O3o=l(),Tde=a("p"),V3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X3o=l(),Ri=a("p"),z3o=o(`Note:
Loading a model from its configuration file does `),Mde=a("strong"),W3o=o("not"),Q3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),H3o=o("from_pretrained()"),U3o=o(" to load the model weights."),J3o=l(),F(J_.$$.fragment),Y3o=l(),Ke=a("div"),F(gL.$$.fragment),K3o=l(),Ede=a("p"),Z3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ewo=l(),$a=a("p"),owo=o("The model class to instantiate is selected based on the "),Cde=a("code"),rwo=o("model_type"),two=o(` property of the config object (either
passed as an argument or loaded from `),wde=a("code"),awo=o("pretrained_model_name_or_path"),nwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=a("code"),swo=o("pretrained_model_name_or_path"),lwo=o(":"),iwo=l(),z=a("ul"),Y_=a("li"),yde=a("strong"),dwo=o("bart"),cwo=o(" \u2014 "),Tj=a("a"),mwo=o("BartForCausalLM"),fwo=o(" (BART model)"),gwo=l(),K_=a("li"),Lde=a("strong"),hwo=o("bert"),uwo=o(" \u2014 "),Mj=a("a"),pwo=o("BertLMHeadModel"),_wo=o(" (BERT model)"),bwo=l(),Z_=a("li"),xde=a("strong"),vwo=o("bert-generation"),Fwo=o(" \u2014 "),Ej=a("a"),Two=o("BertGenerationDecoder"),Mwo=o(" (Bert Generation model)"),Ewo=l(),eb=a("li"),$de=a("strong"),Cwo=o("big_bird"),wwo=o(" \u2014 "),Cj=a("a"),Awo=o("BigBirdForCausalLM"),ywo=o(" (BigBird model)"),Lwo=l(),ob=a("li"),kde=a("strong"),xwo=o("bigbird_pegasus"),$wo=o(" \u2014 "),wj=a("a"),kwo=o("BigBirdPegasusForCausalLM"),Swo=o(" (BigBirdPegasus model)"),Rwo=l(),rb=a("li"),Sde=a("strong"),Pwo=o("blenderbot"),Bwo=o(" \u2014 "),Aj=a("a"),Iwo=o("BlenderbotForCausalLM"),qwo=o(" (Blenderbot model)"),Nwo=l(),tb=a("li"),Rde=a("strong"),jwo=o("blenderbot-small"),Dwo=o(" \u2014 "),yj=a("a"),Gwo=o("BlenderbotSmallForCausalLM"),Owo=o(" (BlenderbotSmall model)"),Vwo=l(),ab=a("li"),Pde=a("strong"),Xwo=o("camembert"),zwo=o(" \u2014 "),Lj=a("a"),Wwo=o("CamembertForCausalLM"),Qwo=o(" (CamemBERT model)"),Hwo=l(),nb=a("li"),Bde=a("strong"),Uwo=o("ctrl"),Jwo=o(" \u2014 "),xj=a("a"),Ywo=o("CTRLLMHeadModel"),Kwo=o(" (CTRL model)"),Zwo=l(),sb=a("li"),Ide=a("strong"),e0o=o("data2vec-text"),o0o=o(" \u2014 "),$j=a("a"),r0o=o("Data2VecTextForCausalLM"),t0o=o(" (Data2VecText model)"),a0o=l(),lb=a("li"),qde=a("strong"),n0o=o("electra"),s0o=o(" \u2014 "),kj=a("a"),l0o=o("ElectraForCausalLM"),i0o=o(" (ELECTRA model)"),d0o=l(),ib=a("li"),Nde=a("strong"),c0o=o("gpt2"),m0o=o(" \u2014 "),Sj=a("a"),f0o=o("GPT2LMHeadModel"),g0o=o(" (OpenAI GPT-2 model)"),h0o=l(),db=a("li"),jde=a("strong"),u0o=o("gpt_neo"),p0o=o(" \u2014 "),Rj=a("a"),_0o=o("GPTNeoForCausalLM"),b0o=o(" (GPT Neo model)"),v0o=l(),cb=a("li"),Dde=a("strong"),F0o=o("gpt_neox"),T0o=o(" \u2014 "),Pj=a("a"),M0o=o("GPTNeoXForCausalLM"),E0o=o(" (GPT NeoX model)"),C0o=l(),mb=a("li"),Gde=a("strong"),w0o=o("gptj"),A0o=o(" \u2014 "),Bj=a("a"),y0o=o("GPTJForCausalLM"),L0o=o(" (GPT-J model)"),x0o=l(),fb=a("li"),Ode=a("strong"),$0o=o("marian"),k0o=o(" \u2014 "),Ij=a("a"),S0o=o("MarianForCausalLM"),R0o=o(" (Marian model)"),P0o=l(),gb=a("li"),Vde=a("strong"),B0o=o("mbart"),I0o=o(" \u2014 "),qj=a("a"),q0o=o("MBartForCausalLM"),N0o=o(" (mBART model)"),j0o=l(),hb=a("li"),Xde=a("strong"),D0o=o("megatron-bert"),G0o=o(" \u2014 "),Nj=a("a"),O0o=o("MegatronBertForCausalLM"),V0o=o(" (MegatronBert model)"),X0o=l(),ub=a("li"),zde=a("strong"),z0o=o("openai-gpt"),W0o=o(" \u2014 "),jj=a("a"),Q0o=o("OpenAIGPTLMHeadModel"),H0o=o(" (OpenAI GPT model)"),U0o=l(),pb=a("li"),Wde=a("strong"),J0o=o("opt"),Y0o=o(" \u2014 "),Dj=a("a"),K0o=o("OPTForCausalLM"),Z0o=o(" (OPT model)"),eAo=l(),_b=a("li"),Qde=a("strong"),oAo=o("pegasus"),rAo=o(" \u2014 "),Gj=a("a"),tAo=o("PegasusForCausalLM"),aAo=o(" (Pegasus model)"),nAo=l(),bb=a("li"),Hde=a("strong"),sAo=o("plbart"),lAo=o(" \u2014 "),Oj=a("a"),iAo=o("PLBartForCausalLM"),dAo=o(" (PLBart model)"),cAo=l(),vb=a("li"),Ude=a("strong"),mAo=o("prophetnet"),fAo=o(" \u2014 "),Vj=a("a"),gAo=o("ProphetNetForCausalLM"),hAo=o(" (ProphetNet model)"),uAo=l(),Fb=a("li"),Jde=a("strong"),pAo=o("qdqbert"),_Ao=o(" \u2014 "),Xj=a("a"),bAo=o("QDQBertLMHeadModel"),vAo=o(" (QDQBert model)"),FAo=l(),Tb=a("li"),Yde=a("strong"),TAo=o("reformer"),MAo=o(" \u2014 "),zj=a("a"),EAo=o("ReformerModelWithLMHead"),CAo=o(" (Reformer model)"),wAo=l(),Mb=a("li"),Kde=a("strong"),AAo=o("rembert"),yAo=o(" \u2014 "),Wj=a("a"),LAo=o("RemBertForCausalLM"),xAo=o(" (RemBERT model)"),$Ao=l(),Eb=a("li"),Zde=a("strong"),kAo=o("roberta"),SAo=o(" \u2014 "),Qj=a("a"),RAo=o("RobertaForCausalLM"),PAo=o(" (RoBERTa model)"),BAo=l(),Cb=a("li"),ece=a("strong"),IAo=o("roformer"),qAo=o(" \u2014 "),Hj=a("a"),NAo=o("RoFormerForCausalLM"),jAo=o(" (RoFormer model)"),DAo=l(),wb=a("li"),oce=a("strong"),GAo=o("speech_to_text_2"),OAo=o(" \u2014 "),Uj=a("a"),VAo=o("Speech2Text2ForCausalLM"),XAo=o(" (Speech2Text2 model)"),zAo=l(),Ab=a("li"),rce=a("strong"),WAo=o("transfo-xl"),QAo=o(" \u2014 "),Jj=a("a"),HAo=o("TransfoXLLMHeadModel"),UAo=o(" (Transformer-XL model)"),JAo=l(),yb=a("li"),tce=a("strong"),YAo=o("trocr"),KAo=o(" \u2014 "),Yj=a("a"),ZAo=o("TrOCRForCausalLM"),e6o=o(" (TrOCR model)"),o6o=l(),Lb=a("li"),ace=a("strong"),r6o=o("xglm"),t6o=o(" \u2014 "),Kj=a("a"),a6o=o("XGLMForCausalLM"),n6o=o(" (XGLM model)"),s6o=l(),xb=a("li"),nce=a("strong"),l6o=o("xlm"),i6o=o(" \u2014 "),Zj=a("a"),d6o=o("XLMWithLMHeadModel"),c6o=o(" (XLM model)"),m6o=l(),$b=a("li"),sce=a("strong"),f6o=o("xlm-prophetnet"),g6o=o(" \u2014 "),eD=a("a"),h6o=o("XLMProphetNetForCausalLM"),u6o=o(" (XLMProphetNet model)"),p6o=l(),kb=a("li"),lce=a("strong"),_6o=o("xlm-roberta"),b6o=o(" \u2014 "),oD=a("a"),v6o=o("XLMRobertaForCausalLM"),F6o=o(" (XLM-RoBERTa model)"),T6o=l(),Sb=a("li"),ice=a("strong"),M6o=o("xlm-roberta-xl"),E6o=o(" \u2014 "),rD=a("a"),C6o=o("XLMRobertaXLForCausalLM"),w6o=o(" (XLM-RoBERTa-XL model)"),A6o=l(),Rb=a("li"),dce=a("strong"),y6o=o("xlnet"),L6o=o(" \u2014 "),tD=a("a"),x6o=o("XLNetLMHeadModel"),$6o=o(" (XLNet model)"),k6o=l(),Pb=a("p"),S6o=o("The model is set in evaluation mode by default using "),cce=a("code"),R6o=o("model.eval()"),P6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=a("code"),B6o=o("model.train()"),I6o=l(),F(Bb.$$.fragment),_Ne=l(),Pi=a("h2"),Ib=a("a"),fce=a("span"),F(hL.$$.fragment),q6o=l(),gce=a("span"),N6o=o("AutoModelForMaskedLM"),bNe=l(),ko=a("div"),F(uL.$$.fragment),j6o=l(),Bi=a("p"),D6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aD=a("a"),G6o=o("from_pretrained()"),O6o=o(" class method or the "),nD=a("a"),V6o=o("from_config()"),X6o=o(` class
method.`),z6o=l(),pL=a("p"),W6o=o("This class cannot be instantiated directly using "),hce=a("code"),Q6o=o("__init__()"),H6o=o(" (throws an error)."),U6o=l(),st=a("div"),F(_L.$$.fragment),J6o=l(),uce=a("p"),Y6o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),K6o=l(),Ii=a("p"),Z6o=o(`Note:
Loading a model from its configuration file does `),pce=a("strong"),eyo=o("not"),oyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=a("a"),ryo=o("from_pretrained()"),tyo=o(" to load the model weights."),ayo=l(),F(qb.$$.fragment),nyo=l(),Ze=a("div"),F(bL.$$.fragment),syo=l(),_ce=a("p"),lyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iyo=l(),ka=a("p"),dyo=o("The model class to instantiate is selected based on the "),bce=a("code"),cyo=o("model_type"),myo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),fyo=o("pretrained_model_name_or_path"),gyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),hyo=o("pretrained_model_name_or_path"),uyo=o(":"),pyo=l(),Q=a("ul"),Nb=a("li"),Tce=a("strong"),_yo=o("albert"),byo=o(" \u2014 "),lD=a("a"),vyo=o("AlbertForMaskedLM"),Fyo=o(" (ALBERT model)"),Tyo=l(),jb=a("li"),Mce=a("strong"),Myo=o("bart"),Eyo=o(" \u2014 "),iD=a("a"),Cyo=o("BartForConditionalGeneration"),wyo=o(" (BART model)"),Ayo=l(),Db=a("li"),Ece=a("strong"),yyo=o("bert"),Lyo=o(" \u2014 "),dD=a("a"),xyo=o("BertForMaskedLM"),$yo=o(" (BERT model)"),kyo=l(),Gb=a("li"),Cce=a("strong"),Syo=o("big_bird"),Ryo=o(" \u2014 "),cD=a("a"),Pyo=o("BigBirdForMaskedLM"),Byo=o(" (BigBird model)"),Iyo=l(),Ob=a("li"),wce=a("strong"),qyo=o("camembert"),Nyo=o(" \u2014 "),mD=a("a"),jyo=o("CamembertForMaskedLM"),Dyo=o(" (CamemBERT model)"),Gyo=l(),Vb=a("li"),Ace=a("strong"),Oyo=o("convbert"),Vyo=o(" \u2014 "),fD=a("a"),Xyo=o("ConvBertForMaskedLM"),zyo=o(" (ConvBERT model)"),Wyo=l(),Xb=a("li"),yce=a("strong"),Qyo=o("data2vec-text"),Hyo=o(" \u2014 "),gD=a("a"),Uyo=o("Data2VecTextForMaskedLM"),Jyo=o(" (Data2VecText model)"),Yyo=l(),zb=a("li"),Lce=a("strong"),Kyo=o("deberta"),Zyo=o(" \u2014 "),hD=a("a"),eLo=o("DebertaForMaskedLM"),oLo=o(" (DeBERTa model)"),rLo=l(),Wb=a("li"),xce=a("strong"),tLo=o("deberta-v2"),aLo=o(" \u2014 "),uD=a("a"),nLo=o("DebertaV2ForMaskedLM"),sLo=o(" (DeBERTa-v2 model)"),lLo=l(),Qb=a("li"),$ce=a("strong"),iLo=o("distilbert"),dLo=o(" \u2014 "),pD=a("a"),cLo=o("DistilBertForMaskedLM"),mLo=o(" (DistilBERT model)"),fLo=l(),Hb=a("li"),kce=a("strong"),gLo=o("electra"),hLo=o(" \u2014 "),_D=a("a"),uLo=o("ElectraForMaskedLM"),pLo=o(" (ELECTRA model)"),_Lo=l(),Ub=a("li"),Sce=a("strong"),bLo=o("flaubert"),vLo=o(" \u2014 "),bD=a("a"),FLo=o("FlaubertWithLMHeadModel"),TLo=o(" (FlauBERT model)"),MLo=l(),Jb=a("li"),Rce=a("strong"),ELo=o("fnet"),CLo=o(" \u2014 "),vD=a("a"),wLo=o("FNetForMaskedLM"),ALo=o(" (FNet model)"),yLo=l(),Yb=a("li"),Pce=a("strong"),LLo=o("funnel"),xLo=o(" \u2014 "),FD=a("a"),$Lo=o("FunnelForMaskedLM"),kLo=o(" (Funnel Transformer model)"),SLo=l(),Kb=a("li"),Bce=a("strong"),RLo=o("ibert"),PLo=o(" \u2014 "),TD=a("a"),BLo=o("IBertForMaskedLM"),ILo=o(" (I-BERT model)"),qLo=l(),Zb=a("li"),Ice=a("strong"),NLo=o("layoutlm"),jLo=o(" \u2014 "),MD=a("a"),DLo=o("LayoutLMForMaskedLM"),GLo=o(" (LayoutLM model)"),OLo=l(),e2=a("li"),qce=a("strong"),VLo=o("longformer"),XLo=o(" \u2014 "),ED=a("a"),zLo=o("LongformerForMaskedLM"),WLo=o(" (Longformer model)"),QLo=l(),o2=a("li"),Nce=a("strong"),HLo=o("mbart"),ULo=o(" \u2014 "),CD=a("a"),JLo=o("MBartForConditionalGeneration"),YLo=o(" (mBART model)"),KLo=l(),r2=a("li"),jce=a("strong"),ZLo=o("megatron-bert"),e8o=o(" \u2014 "),wD=a("a"),o8o=o("MegatronBertForMaskedLM"),r8o=o(" (MegatronBert model)"),t8o=l(),t2=a("li"),Dce=a("strong"),a8o=o("mobilebert"),n8o=o(" \u2014 "),AD=a("a"),s8o=o("MobileBertForMaskedLM"),l8o=o(" (MobileBERT model)"),i8o=l(),a2=a("li"),Gce=a("strong"),d8o=o("mpnet"),c8o=o(" \u2014 "),yD=a("a"),m8o=o("MPNetForMaskedLM"),f8o=o(" (MPNet model)"),g8o=l(),n2=a("li"),Oce=a("strong"),h8o=o("nystromformer"),u8o=o(" \u2014 "),LD=a("a"),p8o=o("NystromformerForMaskedLM"),_8o=o(" (Nystromformer model)"),b8o=l(),s2=a("li"),Vce=a("strong"),v8o=o("perceiver"),F8o=o(" \u2014 "),xD=a("a"),T8o=o("PerceiverForMaskedLM"),M8o=o(" (Perceiver model)"),E8o=l(),l2=a("li"),Xce=a("strong"),C8o=o("qdqbert"),w8o=o(" \u2014 "),$D=a("a"),A8o=o("QDQBertForMaskedLM"),y8o=o(" (QDQBert model)"),L8o=l(),i2=a("li"),zce=a("strong"),x8o=o("reformer"),$8o=o(" \u2014 "),kD=a("a"),k8o=o("ReformerForMaskedLM"),S8o=o(" (Reformer model)"),R8o=l(),d2=a("li"),Wce=a("strong"),P8o=o("rembert"),B8o=o(" \u2014 "),SD=a("a"),I8o=o("RemBertForMaskedLM"),q8o=o(" (RemBERT model)"),N8o=l(),c2=a("li"),Qce=a("strong"),j8o=o("roberta"),D8o=o(" \u2014 "),RD=a("a"),G8o=o("RobertaForMaskedLM"),O8o=o(" (RoBERTa model)"),V8o=l(),m2=a("li"),Hce=a("strong"),X8o=o("roformer"),z8o=o(" \u2014 "),PD=a("a"),W8o=o("RoFormerForMaskedLM"),Q8o=o(" (RoFormer model)"),H8o=l(),f2=a("li"),Uce=a("strong"),U8o=o("squeezebert"),J8o=o(" \u2014 "),BD=a("a"),Y8o=o("SqueezeBertForMaskedLM"),K8o=o(" (SqueezeBERT model)"),Z8o=l(),g2=a("li"),Jce=a("strong"),e7o=o("tapas"),o7o=o(" \u2014 "),ID=a("a"),r7o=o("TapasForMaskedLM"),t7o=o(" (TAPAS model)"),a7o=l(),h2=a("li"),Yce=a("strong"),n7o=o("wav2vec2"),s7o=o(" \u2014 "),Kce=a("code"),l7o=o("Wav2Vec2ForMaskedLM"),i7o=o(" (Wav2Vec2 model)"),d7o=l(),u2=a("li"),Zce=a("strong"),c7o=o("xlm"),m7o=o(" \u2014 "),qD=a("a"),f7o=o("XLMWithLMHeadModel"),g7o=o(" (XLM model)"),h7o=l(),p2=a("li"),eme=a("strong"),u7o=o("xlm-roberta"),p7o=o(" \u2014 "),ND=a("a"),_7o=o("XLMRobertaForMaskedLM"),b7o=o(" (XLM-RoBERTa model)"),v7o=l(),_2=a("li"),ome=a("strong"),F7o=o("xlm-roberta-xl"),T7o=o(" \u2014 "),jD=a("a"),M7o=o("XLMRobertaXLForMaskedLM"),E7o=o(" (XLM-RoBERTa-XL model)"),C7o=l(),b2=a("li"),rme=a("strong"),w7o=o("yoso"),A7o=o(" \u2014 "),DD=a("a"),y7o=o("YosoForMaskedLM"),L7o=o(" (YOSO model)"),x7o=l(),v2=a("p"),$7o=o("The model is set in evaluation mode by default using "),tme=a("code"),k7o=o("model.eval()"),S7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),R7o=o("model.train()"),P7o=l(),F(F2.$$.fragment),vNe=l(),qi=a("h2"),T2=a("a"),nme=a("span"),F(vL.$$.fragment),B7o=l(),sme=a("span"),I7o=o("AutoModelForSeq2SeqLM"),FNe=l(),So=a("div"),F(FL.$$.fragment),q7o=l(),Ni=a("p"),N7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GD=a("a"),j7o=o("from_pretrained()"),D7o=o(" class method or the "),OD=a("a"),G7o=o("from_config()"),O7o=o(` class
method.`),V7o=l(),TL=a("p"),X7o=o("This class cannot be instantiated directly using "),lme=a("code"),z7o=o("__init__()"),W7o=o(" (throws an error)."),Q7o=l(),lt=a("div"),F(ML.$$.fragment),H7o=l(),ime=a("p"),U7o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J7o=l(),ji=a("p"),Y7o=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),K7o=o("not"),Z7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),e9o=o("from_pretrained()"),o9o=o(" to load the model weights."),r9o=l(),F(M2.$$.fragment),t9o=l(),eo=a("div"),F(EL.$$.fragment),a9o=l(),cme=a("p"),n9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s9o=l(),Sa=a("p"),l9o=o("The model class to instantiate is selected based on the "),mme=a("code"),i9o=o("model_type"),d9o=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),c9o=o("pretrained_model_name_or_path"),m9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),f9o=o("pretrained_model_name_or_path"),g9o=o(":"),h9o=l(),pe=a("ul"),E2=a("li"),hme=a("strong"),u9o=o("bart"),p9o=o(" \u2014 "),XD=a("a"),_9o=o("BartForConditionalGeneration"),b9o=o(" (BART model)"),v9o=l(),C2=a("li"),ume=a("strong"),F9o=o("bigbird_pegasus"),T9o=o(" \u2014 "),zD=a("a"),M9o=o("BigBirdPegasusForConditionalGeneration"),E9o=o(" (BigBirdPegasus model)"),C9o=l(),w2=a("li"),pme=a("strong"),w9o=o("blenderbot"),A9o=o(" \u2014 "),WD=a("a"),y9o=o("BlenderbotForConditionalGeneration"),L9o=o(" (Blenderbot model)"),x9o=l(),A2=a("li"),_me=a("strong"),$9o=o("blenderbot-small"),k9o=o(" \u2014 "),QD=a("a"),S9o=o("BlenderbotSmallForConditionalGeneration"),R9o=o(" (BlenderbotSmall model)"),P9o=l(),y2=a("li"),bme=a("strong"),B9o=o("encoder-decoder"),I9o=o(" \u2014 "),HD=a("a"),q9o=o("EncoderDecoderModel"),N9o=o(" (Encoder decoder model)"),j9o=l(),L2=a("li"),vme=a("strong"),D9o=o("fsmt"),G9o=o(" \u2014 "),UD=a("a"),O9o=o("FSMTForConditionalGeneration"),V9o=o(" (FairSeq Machine-Translation model)"),X9o=l(),x2=a("li"),Fme=a("strong"),z9o=o("led"),W9o=o(" \u2014 "),JD=a("a"),Q9o=o("LEDForConditionalGeneration"),H9o=o(" (LED model)"),U9o=l(),$2=a("li"),Tme=a("strong"),J9o=o("m2m_100"),Y9o=o(" \u2014 "),YD=a("a"),K9o=o("M2M100ForConditionalGeneration"),Z9o=o(" (M2M100 model)"),exo=l(),k2=a("li"),Mme=a("strong"),oxo=o("marian"),rxo=o(" \u2014 "),KD=a("a"),txo=o("MarianMTModel"),axo=o(" (Marian model)"),nxo=l(),S2=a("li"),Eme=a("strong"),sxo=o("mbart"),lxo=o(" \u2014 "),ZD=a("a"),ixo=o("MBartForConditionalGeneration"),dxo=o(" (mBART model)"),cxo=l(),R2=a("li"),Cme=a("strong"),mxo=o("mt5"),fxo=o(" \u2014 "),eG=a("a"),gxo=o("MT5ForConditionalGeneration"),hxo=o(" (mT5 model)"),uxo=l(),P2=a("li"),wme=a("strong"),pxo=o("pegasus"),_xo=o(" \u2014 "),oG=a("a"),bxo=o("PegasusForConditionalGeneration"),vxo=o(" (Pegasus model)"),Fxo=l(),B2=a("li"),Ame=a("strong"),Txo=o("plbart"),Mxo=o(" \u2014 "),rG=a("a"),Exo=o("PLBartForConditionalGeneration"),Cxo=o(" (PLBart model)"),wxo=l(),I2=a("li"),yme=a("strong"),Axo=o("prophetnet"),yxo=o(" \u2014 "),tG=a("a"),Lxo=o("ProphetNetForConditionalGeneration"),xxo=o(" (ProphetNet model)"),$xo=l(),q2=a("li"),Lme=a("strong"),kxo=o("t5"),Sxo=o(" \u2014 "),aG=a("a"),Rxo=o("T5ForConditionalGeneration"),Pxo=o(" (T5 model)"),Bxo=l(),N2=a("li"),xme=a("strong"),Ixo=o("xlm-prophetnet"),qxo=o(" \u2014 "),nG=a("a"),Nxo=o("XLMProphetNetForConditionalGeneration"),jxo=o(" (XLMProphetNet model)"),Dxo=l(),j2=a("p"),Gxo=o("The model is set in evaluation mode by default using "),$me=a("code"),Oxo=o("model.eval()"),Vxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),Xxo=o("model.train()"),zxo=l(),F(D2.$$.fragment),TNe=l(),Di=a("h2"),G2=a("a"),Sme=a("span"),F(CL.$$.fragment),Wxo=l(),Rme=a("span"),Qxo=o("AutoModelForSequenceClassification"),MNe=l(),Ro=a("div"),F(wL.$$.fragment),Hxo=l(),Gi=a("p"),Uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sG=a("a"),Jxo=o("from_pretrained()"),Yxo=o(" class method or the "),lG=a("a"),Kxo=o("from_config()"),Zxo=o(` class
method.`),e$o=l(),AL=a("p"),o$o=o("This class cannot be instantiated directly using "),Pme=a("code"),r$o=o("__init__()"),t$o=o(" (throws an error)."),a$o=l(),it=a("div"),F(yL.$$.fragment),n$o=l(),Bme=a("p"),s$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l$o=l(),Oi=a("p"),i$o=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),d$o=o("not"),c$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),m$o=o("from_pretrained()"),f$o=o(" to load the model weights."),g$o=l(),F(O2.$$.fragment),h$o=l(),oo=a("div"),F(LL.$$.fragment),u$o=l(),qme=a("p"),p$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_$o=l(),Ra=a("p"),b$o=o("The model class to instantiate is selected based on the "),Nme=a("code"),v$o=o("model_type"),F$o=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),T$o=o("pretrained_model_name_or_path"),M$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),E$o=o("pretrained_model_name_or_path"),C$o=o(":"),w$o=l(),q=a("ul"),V2=a("li"),Gme=a("strong"),A$o=o("albert"),y$o=o(" \u2014 "),dG=a("a"),L$o=o("AlbertForSequenceClassification"),x$o=o(" (ALBERT model)"),$$o=l(),X2=a("li"),Ome=a("strong"),k$o=o("bart"),S$o=o(" \u2014 "),cG=a("a"),R$o=o("BartForSequenceClassification"),P$o=o(" (BART model)"),B$o=l(),z2=a("li"),Vme=a("strong"),I$o=o("bert"),q$o=o(" \u2014 "),mG=a("a"),N$o=o("BertForSequenceClassification"),j$o=o(" (BERT model)"),D$o=l(),W2=a("li"),Xme=a("strong"),G$o=o("big_bird"),O$o=o(" \u2014 "),fG=a("a"),V$o=o("BigBirdForSequenceClassification"),X$o=o(" (BigBird model)"),z$o=l(),Q2=a("li"),zme=a("strong"),W$o=o("bigbird_pegasus"),Q$o=o(" \u2014 "),gG=a("a"),H$o=o("BigBirdPegasusForSequenceClassification"),U$o=o(" (BigBirdPegasus model)"),J$o=l(),H2=a("li"),Wme=a("strong"),Y$o=o("camembert"),K$o=o(" \u2014 "),hG=a("a"),Z$o=o("CamembertForSequenceClassification"),eko=o(" (CamemBERT model)"),oko=l(),U2=a("li"),Qme=a("strong"),rko=o("canine"),tko=o(" \u2014 "),uG=a("a"),ako=o("CanineForSequenceClassification"),nko=o(" (Canine model)"),sko=l(),J2=a("li"),Hme=a("strong"),lko=o("convbert"),iko=o(" \u2014 "),pG=a("a"),dko=o("ConvBertForSequenceClassification"),cko=o(" (ConvBERT model)"),mko=l(),Y2=a("li"),Ume=a("strong"),fko=o("ctrl"),gko=o(" \u2014 "),_G=a("a"),hko=o("CTRLForSequenceClassification"),uko=o(" (CTRL model)"),pko=l(),K2=a("li"),Jme=a("strong"),_ko=o("data2vec-text"),bko=o(" \u2014 "),bG=a("a"),vko=o("Data2VecTextForSequenceClassification"),Fko=o(" (Data2VecText model)"),Tko=l(),Z2=a("li"),Yme=a("strong"),Mko=o("deberta"),Eko=o(" \u2014 "),vG=a("a"),Cko=o("DebertaForSequenceClassification"),wko=o(" (DeBERTa model)"),Ako=l(),ev=a("li"),Kme=a("strong"),yko=o("deberta-v2"),Lko=o(" \u2014 "),FG=a("a"),xko=o("DebertaV2ForSequenceClassification"),$ko=o(" (DeBERTa-v2 model)"),kko=l(),ov=a("li"),Zme=a("strong"),Sko=o("distilbert"),Rko=o(" \u2014 "),TG=a("a"),Pko=o("DistilBertForSequenceClassification"),Bko=o(" (DistilBERT model)"),Iko=l(),rv=a("li"),efe=a("strong"),qko=o("electra"),Nko=o(" \u2014 "),MG=a("a"),jko=o("ElectraForSequenceClassification"),Dko=o(" (ELECTRA model)"),Gko=l(),tv=a("li"),ofe=a("strong"),Oko=o("flaubert"),Vko=o(" \u2014 "),EG=a("a"),Xko=o("FlaubertForSequenceClassification"),zko=o(" (FlauBERT model)"),Wko=l(),av=a("li"),rfe=a("strong"),Qko=o("fnet"),Hko=o(" \u2014 "),CG=a("a"),Uko=o("FNetForSequenceClassification"),Jko=o(" (FNet model)"),Yko=l(),nv=a("li"),tfe=a("strong"),Kko=o("funnel"),Zko=o(" \u2014 "),wG=a("a"),eSo=o("FunnelForSequenceClassification"),oSo=o(" (Funnel Transformer model)"),rSo=l(),sv=a("li"),afe=a("strong"),tSo=o("gpt2"),aSo=o(" \u2014 "),AG=a("a"),nSo=o("GPT2ForSequenceClassification"),sSo=o(" (OpenAI GPT-2 model)"),lSo=l(),lv=a("li"),nfe=a("strong"),iSo=o("gpt_neo"),dSo=o(" \u2014 "),yG=a("a"),cSo=o("GPTNeoForSequenceClassification"),mSo=o(" (GPT Neo model)"),fSo=l(),iv=a("li"),sfe=a("strong"),gSo=o("gptj"),hSo=o(" \u2014 "),LG=a("a"),uSo=o("GPTJForSequenceClassification"),pSo=o(" (GPT-J model)"),_So=l(),dv=a("li"),lfe=a("strong"),bSo=o("ibert"),vSo=o(" \u2014 "),xG=a("a"),FSo=o("IBertForSequenceClassification"),TSo=o(" (I-BERT model)"),MSo=l(),cv=a("li"),ife=a("strong"),ESo=o("layoutlm"),CSo=o(" \u2014 "),$G=a("a"),wSo=o("LayoutLMForSequenceClassification"),ASo=o(" (LayoutLM model)"),ySo=l(),mv=a("li"),dfe=a("strong"),LSo=o("layoutlmv2"),xSo=o(" \u2014 "),kG=a("a"),$So=o("LayoutLMv2ForSequenceClassification"),kSo=o(" (LayoutLMv2 model)"),SSo=l(),fv=a("li"),cfe=a("strong"),RSo=o("layoutlmv3"),PSo=o(" \u2014 "),SG=a("a"),BSo=o("LayoutLMv3ForSequenceClassification"),ISo=o(" (LayoutLMv3 model)"),qSo=l(),gv=a("li"),mfe=a("strong"),NSo=o("led"),jSo=o(" \u2014 "),RG=a("a"),DSo=o("LEDForSequenceClassification"),GSo=o(" (LED model)"),OSo=l(),hv=a("li"),ffe=a("strong"),VSo=o("longformer"),XSo=o(" \u2014 "),PG=a("a"),zSo=o("LongformerForSequenceClassification"),WSo=o(" (Longformer model)"),QSo=l(),uv=a("li"),gfe=a("strong"),HSo=o("mbart"),USo=o(" \u2014 "),BG=a("a"),JSo=o("MBartForSequenceClassification"),YSo=o(" (mBART model)"),KSo=l(),pv=a("li"),hfe=a("strong"),ZSo=o("megatron-bert"),eRo=o(" \u2014 "),IG=a("a"),oRo=o("MegatronBertForSequenceClassification"),rRo=o(" (MegatronBert model)"),tRo=l(),_v=a("li"),ufe=a("strong"),aRo=o("mobilebert"),nRo=o(" \u2014 "),qG=a("a"),sRo=o("MobileBertForSequenceClassification"),lRo=o(" (MobileBERT model)"),iRo=l(),bv=a("li"),pfe=a("strong"),dRo=o("mpnet"),cRo=o(" \u2014 "),NG=a("a"),mRo=o("MPNetForSequenceClassification"),fRo=o(" (MPNet model)"),gRo=l(),vv=a("li"),_fe=a("strong"),hRo=o("nystromformer"),uRo=o(" \u2014 "),jG=a("a"),pRo=o("NystromformerForSequenceClassification"),_Ro=o(" (Nystromformer model)"),bRo=l(),Fv=a("li"),bfe=a("strong"),vRo=o("openai-gpt"),FRo=o(" \u2014 "),DG=a("a"),TRo=o("OpenAIGPTForSequenceClassification"),MRo=o(" (OpenAI GPT model)"),ERo=l(),Tv=a("li"),vfe=a("strong"),CRo=o("perceiver"),wRo=o(" \u2014 "),GG=a("a"),ARo=o("PerceiverForSequenceClassification"),yRo=o(" (Perceiver model)"),LRo=l(),Mv=a("li"),Ffe=a("strong"),xRo=o("plbart"),$Ro=o(" \u2014 "),OG=a("a"),kRo=o("PLBartForSequenceClassification"),SRo=o(" (PLBart model)"),RRo=l(),Ev=a("li"),Tfe=a("strong"),PRo=o("qdqbert"),BRo=o(" \u2014 "),VG=a("a"),IRo=o("QDQBertForSequenceClassification"),qRo=o(" (QDQBert model)"),NRo=l(),Cv=a("li"),Mfe=a("strong"),jRo=o("reformer"),DRo=o(" \u2014 "),XG=a("a"),GRo=o("ReformerForSequenceClassification"),ORo=o(" (Reformer model)"),VRo=l(),wv=a("li"),Efe=a("strong"),XRo=o("rembert"),zRo=o(" \u2014 "),zG=a("a"),WRo=o("RemBertForSequenceClassification"),QRo=o(" (RemBERT model)"),HRo=l(),Av=a("li"),Cfe=a("strong"),URo=o("roberta"),JRo=o(" \u2014 "),WG=a("a"),YRo=o("RobertaForSequenceClassification"),KRo=o(" (RoBERTa model)"),ZRo=l(),yv=a("li"),wfe=a("strong"),ePo=o("roformer"),oPo=o(" \u2014 "),QG=a("a"),rPo=o("RoFormerForSequenceClassification"),tPo=o(" (RoFormer model)"),aPo=l(),Lv=a("li"),Afe=a("strong"),nPo=o("squeezebert"),sPo=o(" \u2014 "),HG=a("a"),lPo=o("SqueezeBertForSequenceClassification"),iPo=o(" (SqueezeBERT model)"),dPo=l(),xv=a("li"),yfe=a("strong"),cPo=o("tapas"),mPo=o(" \u2014 "),UG=a("a"),fPo=o("TapasForSequenceClassification"),gPo=o(" (TAPAS model)"),hPo=l(),$v=a("li"),Lfe=a("strong"),uPo=o("transfo-xl"),pPo=o(" \u2014 "),JG=a("a"),_Po=o("TransfoXLForSequenceClassification"),bPo=o(" (Transformer-XL model)"),vPo=l(),kv=a("li"),xfe=a("strong"),FPo=o("xlm"),TPo=o(" \u2014 "),YG=a("a"),MPo=o("XLMForSequenceClassification"),EPo=o(" (XLM model)"),CPo=l(),Sv=a("li"),$fe=a("strong"),wPo=o("xlm-roberta"),APo=o(" \u2014 "),KG=a("a"),yPo=o("XLMRobertaForSequenceClassification"),LPo=o(" (XLM-RoBERTa model)"),xPo=l(),Rv=a("li"),kfe=a("strong"),$Po=o("xlm-roberta-xl"),kPo=o(" \u2014 "),ZG=a("a"),SPo=o("XLMRobertaXLForSequenceClassification"),RPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),Pv=a("li"),Sfe=a("strong"),BPo=o("xlnet"),IPo=o(" \u2014 "),eO=a("a"),qPo=o("XLNetForSequenceClassification"),NPo=o(" (XLNet model)"),jPo=l(),Bv=a("li"),Rfe=a("strong"),DPo=o("yoso"),GPo=o(" \u2014 "),oO=a("a"),OPo=o("YosoForSequenceClassification"),VPo=o(" (YOSO model)"),XPo=l(),Iv=a("p"),zPo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),WPo=o("model.eval()"),QPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=a("code"),HPo=o("model.train()"),UPo=l(),F(qv.$$.fragment),ENe=l(),Vi=a("h2"),Nv=a("a"),Ife=a("span"),F(xL.$$.fragment),JPo=l(),qfe=a("span"),YPo=o("AutoModelForMultipleChoice"),CNe=l(),Po=a("div"),F($L.$$.fragment),KPo=l(),Xi=a("p"),ZPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rO=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),tO=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),kL=a("p"),nBo=o("This class cannot be instantiated directly using "),Nfe=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),dt=a("div"),F(SL.$$.fragment),dBo=l(),jfe=a("p"),cBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mBo=l(),zi=a("p"),fBo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),uBo=o("from_pretrained()"),pBo=o(" to load the model weights."),_Bo=l(),F(jv.$$.fragment),bBo=l(),ro=a("div"),F(RL.$$.fragment),vBo=l(),Gfe=a("p"),FBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TBo=l(),Pa=a("p"),MBo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(":"),xBo=l(),K=a("ul"),Dv=a("li"),zfe=a("strong"),$Bo=o("albert"),kBo=o(" \u2014 "),nO=a("a"),SBo=o("AlbertForMultipleChoice"),RBo=o(" (ALBERT model)"),PBo=l(),Gv=a("li"),Wfe=a("strong"),BBo=o("bert"),IBo=o(" \u2014 "),sO=a("a"),qBo=o("BertForMultipleChoice"),NBo=o(" (BERT model)"),jBo=l(),Ov=a("li"),Qfe=a("strong"),DBo=o("big_bird"),GBo=o(" \u2014 "),lO=a("a"),OBo=o("BigBirdForMultipleChoice"),VBo=o(" (BigBird model)"),XBo=l(),Vv=a("li"),Hfe=a("strong"),zBo=o("camembert"),WBo=o(" \u2014 "),iO=a("a"),QBo=o("CamembertForMultipleChoice"),HBo=o(" (CamemBERT model)"),UBo=l(),Xv=a("li"),Ufe=a("strong"),JBo=o("canine"),YBo=o(" \u2014 "),dO=a("a"),KBo=o("CanineForMultipleChoice"),ZBo=o(" (Canine model)"),eIo=l(),zv=a("li"),Jfe=a("strong"),oIo=o("convbert"),rIo=o(" \u2014 "),cO=a("a"),tIo=o("ConvBertForMultipleChoice"),aIo=o(" (ConvBERT model)"),nIo=l(),Wv=a("li"),Yfe=a("strong"),sIo=o("data2vec-text"),lIo=o(" \u2014 "),mO=a("a"),iIo=o("Data2VecTextForMultipleChoice"),dIo=o(" (Data2VecText model)"),cIo=l(),Qv=a("li"),Kfe=a("strong"),mIo=o("deberta-v2"),fIo=o(" \u2014 "),fO=a("a"),gIo=o("DebertaV2ForMultipleChoice"),hIo=o(" (DeBERTa-v2 model)"),uIo=l(),Hv=a("li"),Zfe=a("strong"),pIo=o("distilbert"),_Io=o(" \u2014 "),gO=a("a"),bIo=o("DistilBertForMultipleChoice"),vIo=o(" (DistilBERT model)"),FIo=l(),Uv=a("li"),ege=a("strong"),TIo=o("electra"),MIo=o(" \u2014 "),hO=a("a"),EIo=o("ElectraForMultipleChoice"),CIo=o(" (ELECTRA model)"),wIo=l(),Jv=a("li"),oge=a("strong"),AIo=o("flaubert"),yIo=o(" \u2014 "),uO=a("a"),LIo=o("FlaubertForMultipleChoice"),xIo=o(" (FlauBERT model)"),$Io=l(),Yv=a("li"),rge=a("strong"),kIo=o("fnet"),SIo=o(" \u2014 "),pO=a("a"),RIo=o("FNetForMultipleChoice"),PIo=o(" (FNet model)"),BIo=l(),Kv=a("li"),tge=a("strong"),IIo=o("funnel"),qIo=o(" \u2014 "),_O=a("a"),NIo=o("FunnelForMultipleChoice"),jIo=o(" (Funnel Transformer model)"),DIo=l(),Zv=a("li"),age=a("strong"),GIo=o("ibert"),OIo=o(" \u2014 "),bO=a("a"),VIo=o("IBertForMultipleChoice"),XIo=o(" (I-BERT model)"),zIo=l(),eF=a("li"),nge=a("strong"),WIo=o("longformer"),QIo=o(" \u2014 "),vO=a("a"),HIo=o("LongformerForMultipleChoice"),UIo=o(" (Longformer model)"),JIo=l(),oF=a("li"),sge=a("strong"),YIo=o("megatron-bert"),KIo=o(" \u2014 "),FO=a("a"),ZIo=o("MegatronBertForMultipleChoice"),eqo=o(" (MegatronBert model)"),oqo=l(),rF=a("li"),lge=a("strong"),rqo=o("mobilebert"),tqo=o(" \u2014 "),TO=a("a"),aqo=o("MobileBertForMultipleChoice"),nqo=o(" (MobileBERT model)"),sqo=l(),tF=a("li"),ige=a("strong"),lqo=o("mpnet"),iqo=o(" \u2014 "),MO=a("a"),dqo=o("MPNetForMultipleChoice"),cqo=o(" (MPNet model)"),mqo=l(),aF=a("li"),dge=a("strong"),fqo=o("nystromformer"),gqo=o(" \u2014 "),EO=a("a"),hqo=o("NystromformerForMultipleChoice"),uqo=o(" (Nystromformer model)"),pqo=l(),nF=a("li"),cge=a("strong"),_qo=o("qdqbert"),bqo=o(" \u2014 "),CO=a("a"),vqo=o("QDQBertForMultipleChoice"),Fqo=o(" (QDQBert model)"),Tqo=l(),sF=a("li"),mge=a("strong"),Mqo=o("rembert"),Eqo=o(" \u2014 "),wO=a("a"),Cqo=o("RemBertForMultipleChoice"),wqo=o(" (RemBERT model)"),Aqo=l(),lF=a("li"),fge=a("strong"),yqo=o("roberta"),Lqo=o(" \u2014 "),AO=a("a"),xqo=o("RobertaForMultipleChoice"),$qo=o(" (RoBERTa model)"),kqo=l(),iF=a("li"),gge=a("strong"),Sqo=o("roformer"),Rqo=o(" \u2014 "),yO=a("a"),Pqo=o("RoFormerForMultipleChoice"),Bqo=o(" (RoFormer model)"),Iqo=l(),dF=a("li"),hge=a("strong"),qqo=o("squeezebert"),Nqo=o(" \u2014 "),LO=a("a"),jqo=o("SqueezeBertForMultipleChoice"),Dqo=o(" (SqueezeBERT model)"),Gqo=l(),cF=a("li"),uge=a("strong"),Oqo=o("xlm"),Vqo=o(" \u2014 "),xO=a("a"),Xqo=o("XLMForMultipleChoice"),zqo=o(" (XLM model)"),Wqo=l(),mF=a("li"),pge=a("strong"),Qqo=o("xlm-roberta"),Hqo=o(" \u2014 "),$O=a("a"),Uqo=o("XLMRobertaForMultipleChoice"),Jqo=o(" (XLM-RoBERTa model)"),Yqo=l(),fF=a("li"),_ge=a("strong"),Kqo=o("xlm-roberta-xl"),Zqo=o(" \u2014 "),kO=a("a"),eNo=o("XLMRobertaXLForMultipleChoice"),oNo=o(" (XLM-RoBERTa-XL model)"),rNo=l(),gF=a("li"),bge=a("strong"),tNo=o("xlnet"),aNo=o(" \u2014 "),SO=a("a"),nNo=o("XLNetForMultipleChoice"),sNo=o(" (XLNet model)"),lNo=l(),hF=a("li"),vge=a("strong"),iNo=o("yoso"),dNo=o(" \u2014 "),RO=a("a"),cNo=o("YosoForMultipleChoice"),mNo=o(" (YOSO model)"),fNo=l(),uF=a("p"),gNo=o("The model is set in evaluation mode by default using "),Fge=a("code"),hNo=o("model.eval()"),uNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),pNo=o("model.train()"),_No=l(),F(pF.$$.fragment),wNe=l(),Wi=a("h2"),_F=a("a"),Mge=a("span"),F(PL.$$.fragment),bNo=l(),Ege=a("span"),vNo=o("AutoModelForNextSentencePrediction"),ANe=l(),Bo=a("div"),F(BL.$$.fragment),FNo=l(),Qi=a("p"),TNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PO=a("a"),MNo=o("from_pretrained()"),ENo=o(" class method or the "),BO=a("a"),CNo=o("from_config()"),wNo=o(` class
method.`),ANo=l(),IL=a("p"),yNo=o("This class cannot be instantiated directly using "),Cge=a("code"),LNo=o("__init__()"),xNo=o(" (throws an error)."),$No=l(),ct=a("div"),F(qL.$$.fragment),kNo=l(),wge=a("p"),SNo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RNo=l(),Hi=a("p"),PNo=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),BNo=o("not"),INo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),qNo=o("from_pretrained()"),NNo=o(" to load the model weights."),jNo=l(),F(bF.$$.fragment),DNo=l(),to=a("div"),F(NL.$$.fragment),GNo=l(),yge=a("p"),ONo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VNo=l(),Ba=a("p"),XNo=o("The model class to instantiate is selected based on the "),Lge=a("code"),zNo=o("model_type"),WNo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),QNo=o("pretrained_model_name_or_path"),HNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),UNo=o("pretrained_model_name_or_path"),JNo=o(":"),YNo=l(),Yr=a("ul"),vF=a("li"),kge=a("strong"),KNo=o("bert"),ZNo=o(" \u2014 "),qO=a("a"),ejo=o("BertForNextSentencePrediction"),ojo=o(" (BERT model)"),rjo=l(),FF=a("li"),Sge=a("strong"),tjo=o("fnet"),ajo=o(" \u2014 "),NO=a("a"),njo=o("FNetForNextSentencePrediction"),sjo=o(" (FNet model)"),ljo=l(),TF=a("li"),Rge=a("strong"),ijo=o("megatron-bert"),djo=o(" \u2014 "),jO=a("a"),cjo=o("MegatronBertForNextSentencePrediction"),mjo=o(" (MegatronBert model)"),fjo=l(),MF=a("li"),Pge=a("strong"),gjo=o("mobilebert"),hjo=o(" \u2014 "),DO=a("a"),ujo=o("MobileBertForNextSentencePrediction"),pjo=o(" (MobileBERT model)"),_jo=l(),EF=a("li"),Bge=a("strong"),bjo=o("qdqbert"),vjo=o(" \u2014 "),GO=a("a"),Fjo=o("QDQBertForNextSentencePrediction"),Tjo=o(" (QDQBert model)"),Mjo=l(),CF=a("p"),Ejo=o("The model is set in evaluation mode by default using "),Ige=a("code"),Cjo=o("model.eval()"),wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),Ajo=o("model.train()"),yjo=l(),F(wF.$$.fragment),yNe=l(),Ui=a("h2"),AF=a("a"),Nge=a("span"),F(jL.$$.fragment),Ljo=l(),jge=a("span"),xjo=o("AutoModelForTokenClassification"),LNe=l(),Io=a("div"),F(DL.$$.fragment),$jo=l(),Ji=a("p"),kjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OO=a("a"),Sjo=o("from_pretrained()"),Rjo=o(" class method or the "),VO=a("a"),Pjo=o("from_config()"),Bjo=o(` class
method.`),Ijo=l(),GL=a("p"),qjo=o("This class cannot be instantiated directly using "),Dge=a("code"),Njo=o("__init__()"),jjo=o(" (throws an error)."),Djo=l(),mt=a("div"),F(OL.$$.fragment),Gjo=l(),Gge=a("p"),Ojo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vjo=l(),Yi=a("p"),Xjo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),zjo=o("not"),Wjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),Qjo=o("from_pretrained()"),Hjo=o(" to load the model weights."),Ujo=l(),F(yF.$$.fragment),Jjo=l(),ao=a("div"),F(VL.$$.fragment),Yjo=l(),Vge=a("p"),Kjo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zjo=l(),Ia=a("p"),eDo=o("The model class to instantiate is selected based on the "),Xge=a("code"),oDo=o("model_type"),rDo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),tDo=o("pretrained_model_name_or_path"),aDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),nDo=o("pretrained_model_name_or_path"),sDo=o(":"),lDo=l(),H=a("ul"),LF=a("li"),Qge=a("strong"),iDo=o("albert"),dDo=o(" \u2014 "),zO=a("a"),cDo=o("AlbertForTokenClassification"),mDo=o(" (ALBERT model)"),fDo=l(),xF=a("li"),Hge=a("strong"),gDo=o("bert"),hDo=o(" \u2014 "),WO=a("a"),uDo=o("BertForTokenClassification"),pDo=o(" (BERT model)"),_Do=l(),$F=a("li"),Uge=a("strong"),bDo=o("big_bird"),vDo=o(" \u2014 "),QO=a("a"),FDo=o("BigBirdForTokenClassification"),TDo=o(" (BigBird model)"),MDo=l(),kF=a("li"),Jge=a("strong"),EDo=o("camembert"),CDo=o(" \u2014 "),HO=a("a"),wDo=o("CamembertForTokenClassification"),ADo=o(" (CamemBERT model)"),yDo=l(),SF=a("li"),Yge=a("strong"),LDo=o("canine"),xDo=o(" \u2014 "),UO=a("a"),$Do=o("CanineForTokenClassification"),kDo=o(" (Canine model)"),SDo=l(),RF=a("li"),Kge=a("strong"),RDo=o("convbert"),PDo=o(" \u2014 "),JO=a("a"),BDo=o("ConvBertForTokenClassification"),IDo=o(" (ConvBERT model)"),qDo=l(),PF=a("li"),Zge=a("strong"),NDo=o("data2vec-text"),jDo=o(" \u2014 "),YO=a("a"),DDo=o("Data2VecTextForTokenClassification"),GDo=o(" (Data2VecText model)"),ODo=l(),BF=a("li"),ehe=a("strong"),VDo=o("deberta"),XDo=o(" \u2014 "),KO=a("a"),zDo=o("DebertaForTokenClassification"),WDo=o(" (DeBERTa model)"),QDo=l(),IF=a("li"),ohe=a("strong"),HDo=o("deberta-v2"),UDo=o(" \u2014 "),ZO=a("a"),JDo=o("DebertaV2ForTokenClassification"),YDo=o(" (DeBERTa-v2 model)"),KDo=l(),qF=a("li"),rhe=a("strong"),ZDo=o("distilbert"),eGo=o(" \u2014 "),eV=a("a"),oGo=o("DistilBertForTokenClassification"),rGo=o(" (DistilBERT model)"),tGo=l(),NF=a("li"),the=a("strong"),aGo=o("electra"),nGo=o(" \u2014 "),oV=a("a"),sGo=o("ElectraForTokenClassification"),lGo=o(" (ELECTRA model)"),iGo=l(),jF=a("li"),ahe=a("strong"),dGo=o("flaubert"),cGo=o(" \u2014 "),rV=a("a"),mGo=o("FlaubertForTokenClassification"),fGo=o(" (FlauBERT model)"),gGo=l(),DF=a("li"),nhe=a("strong"),hGo=o("fnet"),uGo=o(" \u2014 "),tV=a("a"),pGo=o("FNetForTokenClassification"),_Go=o(" (FNet model)"),bGo=l(),GF=a("li"),she=a("strong"),vGo=o("funnel"),FGo=o(" \u2014 "),aV=a("a"),TGo=o("FunnelForTokenClassification"),MGo=o(" (Funnel Transformer model)"),EGo=l(),OF=a("li"),lhe=a("strong"),CGo=o("gpt2"),wGo=o(" \u2014 "),nV=a("a"),AGo=o("GPT2ForTokenClassification"),yGo=o(" (OpenAI GPT-2 model)"),LGo=l(),VF=a("li"),ihe=a("strong"),xGo=o("ibert"),$Go=o(" \u2014 "),sV=a("a"),kGo=o("IBertForTokenClassification"),SGo=o(" (I-BERT model)"),RGo=l(),XF=a("li"),dhe=a("strong"),PGo=o("layoutlm"),BGo=o(" \u2014 "),lV=a("a"),IGo=o("LayoutLMForTokenClassification"),qGo=o(" (LayoutLM model)"),NGo=l(),zF=a("li"),che=a("strong"),jGo=o("layoutlmv2"),DGo=o(" \u2014 "),iV=a("a"),GGo=o("LayoutLMv2ForTokenClassification"),OGo=o(" (LayoutLMv2 model)"),VGo=l(),WF=a("li"),mhe=a("strong"),XGo=o("layoutlmv3"),zGo=o(" \u2014 "),dV=a("a"),WGo=o("LayoutLMv3ForTokenClassification"),QGo=o(" (LayoutLMv3 model)"),HGo=l(),QF=a("li"),fhe=a("strong"),UGo=o("longformer"),JGo=o(" \u2014 "),cV=a("a"),YGo=o("LongformerForTokenClassification"),KGo=o(" (Longformer model)"),ZGo=l(),HF=a("li"),ghe=a("strong"),eOo=o("megatron-bert"),oOo=o(" \u2014 "),mV=a("a"),rOo=o("MegatronBertForTokenClassification"),tOo=o(" (MegatronBert model)"),aOo=l(),UF=a("li"),hhe=a("strong"),nOo=o("mobilebert"),sOo=o(" \u2014 "),fV=a("a"),lOo=o("MobileBertForTokenClassification"),iOo=o(" (MobileBERT model)"),dOo=l(),JF=a("li"),uhe=a("strong"),cOo=o("mpnet"),mOo=o(" \u2014 "),gV=a("a"),fOo=o("MPNetForTokenClassification"),gOo=o(" (MPNet model)"),hOo=l(),YF=a("li"),phe=a("strong"),uOo=o("nystromformer"),pOo=o(" \u2014 "),hV=a("a"),_Oo=o("NystromformerForTokenClassification"),bOo=o(" (Nystromformer model)"),vOo=l(),KF=a("li"),_he=a("strong"),FOo=o("qdqbert"),TOo=o(" \u2014 "),uV=a("a"),MOo=o("QDQBertForTokenClassification"),EOo=o(" (QDQBert model)"),COo=l(),ZF=a("li"),bhe=a("strong"),wOo=o("rembert"),AOo=o(" \u2014 "),pV=a("a"),yOo=o("RemBertForTokenClassification"),LOo=o(" (RemBERT model)"),xOo=l(),e1=a("li"),vhe=a("strong"),$Oo=o("roberta"),kOo=o(" \u2014 "),_V=a("a"),SOo=o("RobertaForTokenClassification"),ROo=o(" (RoBERTa model)"),POo=l(),o1=a("li"),Fhe=a("strong"),BOo=o("roformer"),IOo=o(" \u2014 "),bV=a("a"),qOo=o("RoFormerForTokenClassification"),NOo=o(" (RoFormer model)"),jOo=l(),r1=a("li"),The=a("strong"),DOo=o("squeezebert"),GOo=o(" \u2014 "),vV=a("a"),OOo=o("SqueezeBertForTokenClassification"),VOo=o(" (SqueezeBERT model)"),XOo=l(),t1=a("li"),Mhe=a("strong"),zOo=o("xlm"),WOo=o(" \u2014 "),FV=a("a"),QOo=o("XLMForTokenClassification"),HOo=o(" (XLM model)"),UOo=l(),a1=a("li"),Ehe=a("strong"),JOo=o("xlm-roberta"),YOo=o(" \u2014 "),TV=a("a"),KOo=o("XLMRobertaForTokenClassification"),ZOo=o(" (XLM-RoBERTa model)"),eVo=l(),n1=a("li"),Che=a("strong"),oVo=o("xlm-roberta-xl"),rVo=o(" \u2014 "),MV=a("a"),tVo=o("XLMRobertaXLForTokenClassification"),aVo=o(" (XLM-RoBERTa-XL model)"),nVo=l(),s1=a("li"),whe=a("strong"),sVo=o("xlnet"),lVo=o(" \u2014 "),EV=a("a"),iVo=o("XLNetForTokenClassification"),dVo=o(" (XLNet model)"),cVo=l(),l1=a("li"),Ahe=a("strong"),mVo=o("yoso"),fVo=o(" \u2014 "),CV=a("a"),gVo=o("YosoForTokenClassification"),hVo=o(" (YOSO model)"),uVo=l(),i1=a("p"),pVo=o("The model is set in evaluation mode by default using "),yhe=a("code"),_Vo=o("model.eval()"),bVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),vVo=o("model.train()"),FVo=l(),F(d1.$$.fragment),xNe=l(),Ki=a("h2"),c1=a("a"),xhe=a("span"),F(XL.$$.fragment),TVo=l(),$he=a("span"),MVo=o("AutoModelForQuestionAnswering"),$Ne=l(),qo=a("div"),F(zL.$$.fragment),EVo=l(),Zi=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wV=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),AV=a("a"),yVo=o("from_config()"),LVo=o(` class
method.`),xVo=l(),WL=a("p"),$Vo=o("This class cannot be instantiated directly using "),khe=a("code"),kVo=o("__init__()"),SVo=o(" (throws an error)."),RVo=l(),ft=a("div"),F(QL.$$.fragment),PVo=l(),She=a("p"),BVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IVo=l(),ed=a("p"),qVo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),NVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),F(m1.$$.fragment),VVo=l(),no=a("div"),F(HL.$$.fragment),XVo=l(),Phe=a("p"),zVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WVo=l(),qa=a("p"),QVo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),HVo=o("model_type"),UVo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(":"),eXo=l(),V=a("ul"),f1=a("li"),Nhe=a("strong"),oXo=o("albert"),rXo=o(" \u2014 "),LV=a("a"),tXo=o("AlbertForQuestionAnswering"),aXo=o(" (ALBERT model)"),nXo=l(),g1=a("li"),jhe=a("strong"),sXo=o("bart"),lXo=o(" \u2014 "),xV=a("a"),iXo=o("BartForQuestionAnswering"),dXo=o(" (BART model)"),cXo=l(),h1=a("li"),Dhe=a("strong"),mXo=o("bert"),fXo=o(" \u2014 "),$V=a("a"),gXo=o("BertForQuestionAnswering"),hXo=o(" (BERT model)"),uXo=l(),u1=a("li"),Ghe=a("strong"),pXo=o("big_bird"),_Xo=o(" \u2014 "),kV=a("a"),bXo=o("BigBirdForQuestionAnswering"),vXo=o(" (BigBird model)"),FXo=l(),p1=a("li"),Ohe=a("strong"),TXo=o("bigbird_pegasus"),MXo=o(" \u2014 "),SV=a("a"),EXo=o("BigBirdPegasusForQuestionAnswering"),CXo=o(" (BigBirdPegasus model)"),wXo=l(),_1=a("li"),Vhe=a("strong"),AXo=o("camembert"),yXo=o(" \u2014 "),RV=a("a"),LXo=o("CamembertForQuestionAnswering"),xXo=o(" (CamemBERT model)"),$Xo=l(),b1=a("li"),Xhe=a("strong"),kXo=o("canine"),SXo=o(" \u2014 "),PV=a("a"),RXo=o("CanineForQuestionAnswering"),PXo=o(" (Canine model)"),BXo=l(),v1=a("li"),zhe=a("strong"),IXo=o("convbert"),qXo=o(" \u2014 "),BV=a("a"),NXo=o("ConvBertForQuestionAnswering"),jXo=o(" (ConvBERT model)"),DXo=l(),F1=a("li"),Whe=a("strong"),GXo=o("data2vec-text"),OXo=o(" \u2014 "),IV=a("a"),VXo=o("Data2VecTextForQuestionAnswering"),XXo=o(" (Data2VecText model)"),zXo=l(),T1=a("li"),Qhe=a("strong"),WXo=o("deberta"),QXo=o(" \u2014 "),qV=a("a"),HXo=o("DebertaForQuestionAnswering"),UXo=o(" (DeBERTa model)"),JXo=l(),M1=a("li"),Hhe=a("strong"),YXo=o("deberta-v2"),KXo=o(" \u2014 "),NV=a("a"),ZXo=o("DebertaV2ForQuestionAnswering"),ezo=o(" (DeBERTa-v2 model)"),ozo=l(),E1=a("li"),Uhe=a("strong"),rzo=o("distilbert"),tzo=o(" \u2014 "),jV=a("a"),azo=o("DistilBertForQuestionAnswering"),nzo=o(" (DistilBERT model)"),szo=l(),C1=a("li"),Jhe=a("strong"),lzo=o("electra"),izo=o(" \u2014 "),DV=a("a"),dzo=o("ElectraForQuestionAnswering"),czo=o(" (ELECTRA model)"),mzo=l(),w1=a("li"),Yhe=a("strong"),fzo=o("flaubert"),gzo=o(" \u2014 "),GV=a("a"),hzo=o("FlaubertForQuestionAnsweringSimple"),uzo=o(" (FlauBERT model)"),pzo=l(),A1=a("li"),Khe=a("strong"),_zo=o("fnet"),bzo=o(" \u2014 "),OV=a("a"),vzo=o("FNetForQuestionAnswering"),Fzo=o(" (FNet model)"),Tzo=l(),y1=a("li"),Zhe=a("strong"),Mzo=o("funnel"),Ezo=o(" \u2014 "),VV=a("a"),Czo=o("FunnelForQuestionAnswering"),wzo=o(" (Funnel Transformer model)"),Azo=l(),L1=a("li"),eue=a("strong"),yzo=o("gptj"),Lzo=o(" \u2014 "),XV=a("a"),xzo=o("GPTJForQuestionAnswering"),$zo=o(" (GPT-J model)"),kzo=l(),x1=a("li"),oue=a("strong"),Szo=o("ibert"),Rzo=o(" \u2014 "),zV=a("a"),Pzo=o("IBertForQuestionAnswering"),Bzo=o(" (I-BERT model)"),Izo=l(),$1=a("li"),rue=a("strong"),qzo=o("layoutlmv2"),Nzo=o(" \u2014 "),WV=a("a"),jzo=o("LayoutLMv2ForQuestionAnswering"),Dzo=o(" (LayoutLMv2 model)"),Gzo=l(),k1=a("li"),tue=a("strong"),Ozo=o("layoutlmv3"),Vzo=o(" \u2014 "),QV=a("a"),Xzo=o("LayoutLMv3ForQuestionAnswering"),zzo=o(" (LayoutLMv3 model)"),Wzo=l(),S1=a("li"),aue=a("strong"),Qzo=o("led"),Hzo=o(" \u2014 "),HV=a("a"),Uzo=o("LEDForQuestionAnswering"),Jzo=o(" (LED model)"),Yzo=l(),R1=a("li"),nue=a("strong"),Kzo=o("longformer"),Zzo=o(" \u2014 "),UV=a("a"),eWo=o("LongformerForQuestionAnswering"),oWo=o(" (Longformer model)"),rWo=l(),P1=a("li"),sue=a("strong"),tWo=o("lxmert"),aWo=o(" \u2014 "),JV=a("a"),nWo=o("LxmertForQuestionAnswering"),sWo=o(" (LXMERT model)"),lWo=l(),B1=a("li"),lue=a("strong"),iWo=o("mbart"),dWo=o(" \u2014 "),YV=a("a"),cWo=o("MBartForQuestionAnswering"),mWo=o(" (mBART model)"),fWo=l(),I1=a("li"),iue=a("strong"),gWo=o("megatron-bert"),hWo=o(" \u2014 "),KV=a("a"),uWo=o("MegatronBertForQuestionAnswering"),pWo=o(" (MegatronBert model)"),_Wo=l(),q1=a("li"),due=a("strong"),bWo=o("mobilebert"),vWo=o(" \u2014 "),ZV=a("a"),FWo=o("MobileBertForQuestionAnswering"),TWo=o(" (MobileBERT model)"),MWo=l(),N1=a("li"),cue=a("strong"),EWo=o("mpnet"),CWo=o(" \u2014 "),eX=a("a"),wWo=o("MPNetForQuestionAnswering"),AWo=o(" (MPNet model)"),yWo=l(),j1=a("li"),mue=a("strong"),LWo=o("nystromformer"),xWo=o(" \u2014 "),oX=a("a"),$Wo=o("NystromformerForQuestionAnswering"),kWo=o(" (Nystromformer model)"),SWo=l(),D1=a("li"),fue=a("strong"),RWo=o("qdqbert"),PWo=o(" \u2014 "),rX=a("a"),BWo=o("QDQBertForQuestionAnswering"),IWo=o(" (QDQBert model)"),qWo=l(),G1=a("li"),gue=a("strong"),NWo=o("reformer"),jWo=o(" \u2014 "),tX=a("a"),DWo=o("ReformerForQuestionAnswering"),GWo=o(" (Reformer model)"),OWo=l(),O1=a("li"),hue=a("strong"),VWo=o("rembert"),XWo=o(" \u2014 "),aX=a("a"),zWo=o("RemBertForQuestionAnswering"),WWo=o(" (RemBERT model)"),QWo=l(),V1=a("li"),uue=a("strong"),HWo=o("roberta"),UWo=o(" \u2014 "),nX=a("a"),JWo=o("RobertaForQuestionAnswering"),YWo=o(" (RoBERTa model)"),KWo=l(),X1=a("li"),pue=a("strong"),ZWo=o("roformer"),eQo=o(" \u2014 "),sX=a("a"),oQo=o("RoFormerForQuestionAnswering"),rQo=o(" (RoFormer model)"),tQo=l(),z1=a("li"),_ue=a("strong"),aQo=o("splinter"),nQo=o(" \u2014 "),lX=a("a"),sQo=o("SplinterForQuestionAnswering"),lQo=o(" (Splinter model)"),iQo=l(),W1=a("li"),bue=a("strong"),dQo=o("squeezebert"),cQo=o(" \u2014 "),iX=a("a"),mQo=o("SqueezeBertForQuestionAnswering"),fQo=o(" (SqueezeBERT model)"),gQo=l(),Q1=a("li"),vue=a("strong"),hQo=o("xlm"),uQo=o(" \u2014 "),dX=a("a"),pQo=o("XLMForQuestionAnsweringSimple"),_Qo=o(" (XLM model)"),bQo=l(),H1=a("li"),Fue=a("strong"),vQo=o("xlm-roberta"),FQo=o(" \u2014 "),cX=a("a"),TQo=o("XLMRobertaForQuestionAnswering"),MQo=o(" (XLM-RoBERTa model)"),EQo=l(),U1=a("li"),Tue=a("strong"),CQo=o("xlm-roberta-xl"),wQo=o(" \u2014 "),mX=a("a"),AQo=o("XLMRobertaXLForQuestionAnswering"),yQo=o(" (XLM-RoBERTa-XL model)"),LQo=l(),J1=a("li"),Mue=a("strong"),xQo=o("xlnet"),$Qo=o(" \u2014 "),fX=a("a"),kQo=o("XLNetForQuestionAnsweringSimple"),SQo=o(" (XLNet model)"),RQo=l(),Y1=a("li"),Eue=a("strong"),PQo=o("yoso"),BQo=o(" \u2014 "),gX=a("a"),IQo=o("YosoForQuestionAnswering"),qQo=o(" (YOSO model)"),NQo=l(),K1=a("p"),jQo=o("The model is set in evaluation mode by default using "),Cue=a("code"),DQo=o("model.eval()"),GQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),OQo=o("model.train()"),VQo=l(),F(Z1.$$.fragment),kNe=l(),od=a("h2"),eT=a("a"),Aue=a("span"),F(UL.$$.fragment),XQo=l(),yue=a("span"),zQo=o("AutoModelForTableQuestionAnswering"),SNe=l(),No=a("div"),F(JL.$$.fragment),WQo=l(),rd=a("p"),QQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=a("a"),HQo=o("from_pretrained()"),UQo=o(" class method or the "),uX=a("a"),JQo=o("from_config()"),YQo=o(` class
method.`),KQo=l(),YL=a("p"),ZQo=o("This class cannot be instantiated directly using "),Lue=a("code"),eHo=o("__init__()"),oHo=o(" (throws an error)."),rHo=l(),gt=a("div"),F(KL.$$.fragment),tHo=l(),xue=a("p"),aHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nHo=l(),td=a("p"),sHo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),lHo=o("not"),iHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),dHo=o("from_pretrained()"),cHo=o(" to load the model weights."),mHo=l(),F(oT.$$.fragment),fHo=l(),so=a("div"),F(ZL.$$.fragment),gHo=l(),kue=a("p"),hHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uHo=l(),Na=a("p"),pHo=o("The model class to instantiate is selected based on the "),Sue=a("code"),_Ho=o("model_type"),bHo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),vHo=o("pretrained_model_name_or_path"),FHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),THo=o("pretrained_model_name_or_path"),MHo=o(":"),EHo=l(),Bue=a("ul"),rT=a("li"),Iue=a("strong"),CHo=o("tapas"),wHo=o(" \u2014 "),_X=a("a"),AHo=o("TapasForQuestionAnswering"),yHo=o(" (TAPAS model)"),LHo=l(),tT=a("p"),xHo=o("The model is set in evaluation mode by default using "),que=a("code"),$Ho=o("model.eval()"),kHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),SHo=o("model.train()"),RHo=l(),F(aT.$$.fragment),RNe=l(),ad=a("h2"),nT=a("a"),jue=a("span"),F(e8.$$.fragment),PHo=l(),Due=a("span"),BHo=o("AutoModelForImageClassification"),PNe=l(),jo=a("div"),F(o8.$$.fragment),IHo=l(),nd=a("p"),qHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=a("a"),NHo=o("from_pretrained()"),jHo=o(" class method or the "),vX=a("a"),DHo=o("from_config()"),GHo=o(` class
method.`),OHo=l(),r8=a("p"),VHo=o("This class cannot be instantiated directly using "),Gue=a("code"),XHo=o("__init__()"),zHo=o(" (throws an error)."),WHo=l(),ht=a("div"),F(t8.$$.fragment),QHo=l(),Oue=a("p"),HHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UHo=l(),sd=a("p"),JHo=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),YHo=o("not"),KHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),ZHo=o("from_pretrained()"),eUo=o(" to load the model weights."),oUo=l(),F(sT.$$.fragment),rUo=l(),lo=a("div"),F(a8.$$.fragment),tUo=l(),Xue=a("p"),aUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nUo=l(),ja=a("p"),sUo=o("The model class to instantiate is selected based on the "),zue=a("code"),lUo=o("model_type"),iUo=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),mUo=o("pretrained_model_name_or_path"),fUo=o(":"),gUo=l(),Fe=a("ul"),lT=a("li"),Hue=a("strong"),hUo=o("beit"),uUo=o(" \u2014 "),TX=a("a"),pUo=o("BeitForImageClassification"),_Uo=o(" (BEiT model)"),bUo=l(),iT=a("li"),Uue=a("strong"),vUo=o("convnext"),FUo=o(" \u2014 "),MX=a("a"),TUo=o("ConvNextForImageClassification"),MUo=o(" (ConvNext model)"),EUo=l(),dT=a("li"),Jue=a("strong"),CUo=o("cvt"),wUo=o(" \u2014 "),EX=a("a"),AUo=o("CvtForImageClassification"),yUo=o(" (CvT model)"),LUo=l(),cT=a("li"),Yue=a("strong"),xUo=o("data2vec-vision"),$Uo=o(" \u2014 "),CX=a("a"),kUo=o("Data2VecVisionForImageClassification"),SUo=o(" (Data2VecVision model)"),RUo=l(),Bs=a("li"),Kue=a("strong"),PUo=o("deit"),BUo=o(" \u2014 "),wX=a("a"),IUo=o("DeiTForImageClassification"),qUo=o(" or "),AX=a("a"),NUo=o("DeiTForImageClassificationWithTeacher"),jUo=o(" (DeiT model)"),DUo=l(),mT=a("li"),Zue=a("strong"),GUo=o("imagegpt"),OUo=o(" \u2014 "),yX=a("a"),VUo=o("ImageGPTForImageClassification"),XUo=o(" (ImageGPT model)"),zUo=l(),ut=a("li"),epe=a("strong"),WUo=o("perceiver"),QUo=o(" \u2014 "),LX=a("a"),HUo=o("PerceiverForImageClassificationLearned"),UUo=o(" or "),xX=a("a"),JUo=o("PerceiverForImageClassificationFourier"),YUo=o(" or "),$X=a("a"),KUo=o("PerceiverForImageClassificationConvProcessing"),ZUo=o(" (Perceiver model)"),eJo=l(),fT=a("li"),ope=a("strong"),oJo=o("poolformer"),rJo=o(" \u2014 "),kX=a("a"),tJo=o("PoolFormerForImageClassification"),aJo=o(" (PoolFormer model)"),nJo=l(),gT=a("li"),rpe=a("strong"),sJo=o("regnet"),lJo=o(" \u2014 "),SX=a("a"),iJo=o("RegNetForImageClassification"),dJo=o(" (RegNet model)"),cJo=l(),hT=a("li"),tpe=a("strong"),mJo=o("resnet"),fJo=o(" \u2014 "),RX=a("a"),gJo=o("ResNetForImageClassification"),hJo=o(" (ResNet model)"),uJo=l(),uT=a("li"),ape=a("strong"),pJo=o("segformer"),_Jo=o(" \u2014 "),PX=a("a"),bJo=o("SegformerForImageClassification"),vJo=o(" (SegFormer model)"),FJo=l(),pT=a("li"),npe=a("strong"),TJo=o("swin"),MJo=o(" \u2014 "),BX=a("a"),EJo=o("SwinForImageClassification"),CJo=o(" (Swin model)"),wJo=l(),_T=a("li"),spe=a("strong"),AJo=o("van"),yJo=o(" \u2014 "),IX=a("a"),LJo=o("VanForImageClassification"),xJo=o(" (VAN model)"),$Jo=l(),bT=a("li"),lpe=a("strong"),kJo=o("vit"),SJo=o(" \u2014 "),qX=a("a"),RJo=o("ViTForImageClassification"),PJo=o(" (ViT model)"),BJo=l(),vT=a("p"),IJo=o("The model is set in evaluation mode by default using "),ipe=a("code"),qJo=o("model.eval()"),NJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=a("code"),jJo=o("model.train()"),DJo=l(),F(FT.$$.fragment),BNe=l(),ld=a("h2"),TT=a("a"),cpe=a("span"),F(n8.$$.fragment),GJo=l(),mpe=a("span"),OJo=o("AutoModelForVision2Seq"),INe=l(),Do=a("div"),F(s8.$$.fragment),VJo=l(),id=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NX=a("a"),zJo=o("from_pretrained()"),WJo=o(" class method or the "),jX=a("a"),QJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),l8=a("p"),JJo=o("This class cannot be instantiated directly using "),fpe=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),pt=a("div"),F(i8.$$.fragment),eYo=l(),gpe=a("p"),oYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rYo=l(),dd=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),F(MT.$$.fragment),dYo=l(),io=a("div"),F(d8.$$.fragment),cYo=l(),upe=a("p"),mYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fYo=l(),Da=a("p"),gYo=o("The model class to instantiate is selected based on the "),ppe=a("code"),hYo=o("model_type"),uYo=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),pYo=o("pretrained_model_name_or_path"),_Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=a("code"),bYo=o("pretrained_model_name_or_path"),vYo=o(":"),FYo=l(),vpe=a("ul"),ET=a("li"),Fpe=a("strong"),TYo=o("vision-encoder-decoder"),MYo=o(" \u2014 "),GX=a("a"),EYo=o("VisionEncoderDecoderModel"),CYo=o(" (Vision Encoder decoder model)"),wYo=l(),CT=a("p"),AYo=o("The model is set in evaluation mode by default using "),Tpe=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=a("code"),xYo=o("model.train()"),$Yo=l(),F(wT.$$.fragment),qNe=l(),cd=a("h2"),AT=a("a"),Epe=a("span"),F(c8.$$.fragment),kYo=l(),Cpe=a("span"),SYo=o("AutoModelForAudioClassification"),NNe=l(),Go=a("div"),F(m8.$$.fragment),RYo=l(),md=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OX=a("a"),BYo=o("from_pretrained()"),IYo=o(" class method or the "),VX=a("a"),qYo=o("from_config()"),NYo=o(` class
method.`),jYo=l(),f8=a("p"),DYo=o("This class cannot be instantiated directly using "),wpe=a("code"),GYo=o("__init__()"),OYo=o(" (throws an error)."),VYo=l(),_t=a("div"),F(g8.$$.fragment),XYo=l(),Ape=a("p"),zYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),WYo=l(),fd=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),ype=a("strong"),HYo=o("not"),UYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),JYo=o("from_pretrained()"),YYo=o(" to load the model weights."),KYo=l(),F(yT.$$.fragment),ZYo=l(),co=a("div"),F(h8.$$.fragment),eKo=l(),Lpe=a("p"),oKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rKo=l(),Ga=a("p"),tKo=o("The model class to instantiate is selected based on the "),xpe=a("code"),aKo=o("model_type"),nKo=o(` property of the config object (either
passed as an argument or loaded from `),$pe=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(":"),cKo=l(),ke=a("ul"),LT=a("li"),Spe=a("strong"),mKo=o("data2vec-audio"),fKo=o(" \u2014 "),zX=a("a"),gKo=o("Data2VecAudioForSequenceClassification"),hKo=o(" (Data2VecAudio model)"),uKo=l(),xT=a("li"),Rpe=a("strong"),pKo=o("hubert"),_Ko=o(" \u2014 "),WX=a("a"),bKo=o("HubertForSequenceClassification"),vKo=o(" (Hubert model)"),FKo=l(),$T=a("li"),Ppe=a("strong"),TKo=o("sew"),MKo=o(" \u2014 "),QX=a("a"),EKo=o("SEWForSequenceClassification"),CKo=o(" (SEW model)"),wKo=l(),kT=a("li"),Bpe=a("strong"),AKo=o("sew-d"),yKo=o(" \u2014 "),HX=a("a"),LKo=o("SEWDForSequenceClassification"),xKo=o(" (SEW-D model)"),$Ko=l(),ST=a("li"),Ipe=a("strong"),kKo=o("unispeech"),SKo=o(" \u2014 "),UX=a("a"),RKo=o("UniSpeechForSequenceClassification"),PKo=o(" (UniSpeech model)"),BKo=l(),RT=a("li"),qpe=a("strong"),IKo=o("unispeech-sat"),qKo=o(" \u2014 "),JX=a("a"),NKo=o("UniSpeechSatForSequenceClassification"),jKo=o(" (UniSpeechSat model)"),DKo=l(),PT=a("li"),Npe=a("strong"),GKo=o("wav2vec2"),OKo=o(" \u2014 "),YX=a("a"),VKo=o("Wav2Vec2ForSequenceClassification"),XKo=o(" (Wav2Vec2 model)"),zKo=l(),BT=a("li"),jpe=a("strong"),WKo=o("wav2vec2-conformer"),QKo=o(" \u2014 "),KX=a("a"),HKo=o("Wav2Vec2ConformerForSequenceClassification"),UKo=o(" (Wav2Vec2-Conformer model)"),JKo=l(),IT=a("li"),Dpe=a("strong"),YKo=o("wavlm"),KKo=o(" \u2014 "),ZX=a("a"),ZKo=o("WavLMForSequenceClassification"),eZo=o(" (WavLM model)"),oZo=l(),qT=a("p"),rZo=o("The model is set in evaluation mode by default using "),Gpe=a("code"),tZo=o("model.eval()"),aZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=a("code"),nZo=o("model.train()"),sZo=l(),F(NT.$$.fragment),jNe=l(),gd=a("h2"),jT=a("a"),Vpe=a("span"),F(u8.$$.fragment),lZo=l(),Xpe=a("span"),iZo=o("AutoModelForAudioFrameClassification"),DNe=l(),Oo=a("div"),F(p8.$$.fragment),dZo=l(),hd=a("p"),cZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ez=a("a"),mZo=o("from_pretrained()"),fZo=o(" class method or the "),oz=a("a"),gZo=o("from_config()"),hZo=o(` class
method.`),uZo=l(),_8=a("p"),pZo=o("This class cannot be instantiated directly using "),zpe=a("code"),_Zo=o("__init__()"),bZo=o(" (throws an error)."),vZo=l(),bt=a("div"),F(b8.$$.fragment),FZo=l(),Wpe=a("p"),TZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MZo=l(),ud=a("p"),EZo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),CZo=o("not"),wZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),AZo=o("from_pretrained()"),yZo=o(" to load the model weights."),LZo=l(),F(DT.$$.fragment),xZo=l(),mo=a("div"),F(v8.$$.fragment),$Zo=l(),Hpe=a("p"),kZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SZo=l(),Oa=a("p"),RZo=o("The model class to instantiate is selected based on the "),Upe=a("code"),PZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),IZo=o("pretrained_model_name_or_path"),qZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),NZo=o("pretrained_model_name_or_path"),jZo=o(":"),DZo=l(),Kr=a("ul"),GT=a("li"),Kpe=a("strong"),GZo=o("data2vec-audio"),OZo=o(" \u2014 "),tz=a("a"),VZo=o("Data2VecAudioForAudioFrameClassification"),XZo=o(" (Data2VecAudio model)"),zZo=l(),OT=a("li"),Zpe=a("strong"),WZo=o("unispeech-sat"),QZo=o(" \u2014 "),az=a("a"),HZo=o("UniSpeechSatForAudioFrameClassification"),UZo=o(" (UniSpeechSat model)"),JZo=l(),VT=a("li"),e_e=a("strong"),YZo=o("wav2vec2"),KZo=o(" \u2014 "),nz=a("a"),ZZo=o("Wav2Vec2ForAudioFrameClassification"),eer=o(" (Wav2Vec2 model)"),oer=l(),XT=a("li"),o_e=a("strong"),rer=o("wav2vec2-conformer"),ter=o(" \u2014 "),sz=a("a"),aer=o("Wav2Vec2ConformerForAudioFrameClassification"),ner=o(" (Wav2Vec2-Conformer model)"),ser=l(),zT=a("li"),r_e=a("strong"),ler=o("wavlm"),ier=o(" \u2014 "),lz=a("a"),der=o("WavLMForAudioFrameClassification"),cer=o(" (WavLM model)"),mer=l(),WT=a("p"),fer=o("The model is set in evaluation mode by default using "),t_e=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),uer=o("model.train()"),per=l(),F(QT.$$.fragment),GNe=l(),pd=a("h2"),HT=a("a"),n_e=a("span"),F(F8.$$.fragment),_er=l(),s_e=a("span"),ber=o("AutoModelForCTC"),ONe=l(),Vo=a("div"),F(T8.$$.fragment),ver=l(),_d=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iz=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),dz=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),M8=a("p"),Aer=o("This class cannot be instantiated directly using "),l_e=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),vt=a("div"),F(E8.$$.fragment),$er=l(),i_e=a("p"),ker=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ser=l(),bd=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),Ier=o("from_pretrained()"),qer=o(" to load the model weights."),Ner=l(),F(UT.$$.fragment),jer=l(),fo=a("div"),F(C8.$$.fragment),Der=l(),c_e=a("p"),Ger=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Oer=l(),Va=a("p"),Ver=o("The model class to instantiate is selected based on the "),m_e=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Se=a("ul"),JT=a("li"),h_e=a("strong"),Yer=o("data2vec-audio"),Ker=o(" \u2014 "),mz=a("a"),Zer=o("Data2VecAudioForCTC"),eor=o(" (Data2VecAudio model)"),oor=l(),YT=a("li"),u_e=a("strong"),ror=o("hubert"),tor=o(" \u2014 "),fz=a("a"),aor=o("HubertForCTC"),nor=o(" (Hubert model)"),sor=l(),KT=a("li"),p_e=a("strong"),lor=o("sew"),ior=o(" \u2014 "),gz=a("a"),dor=o("SEWForCTC"),cor=o(" (SEW model)"),mor=l(),ZT=a("li"),__e=a("strong"),gor=o("sew-d"),hor=o(" \u2014 "),hz=a("a"),uor=o("SEWDForCTC"),por=o(" (SEW-D model)"),_or=l(),eM=a("li"),b_e=a("strong"),bor=o("unispeech"),vor=o(" \u2014 "),uz=a("a"),For=o("UniSpeechForCTC"),Tor=o(" (UniSpeech model)"),Mor=l(),oM=a("li"),v_e=a("strong"),Eor=o("unispeech-sat"),Cor=o(" \u2014 "),pz=a("a"),wor=o("UniSpeechSatForCTC"),Aor=o(" (UniSpeechSat model)"),yor=l(),rM=a("li"),F_e=a("strong"),Lor=o("wav2vec2"),xor=o(" \u2014 "),_z=a("a"),$or=o("Wav2Vec2ForCTC"),kor=o(" (Wav2Vec2 model)"),Sor=l(),tM=a("li"),T_e=a("strong"),Ror=o("wav2vec2-conformer"),Por=o(" \u2014 "),bz=a("a"),Bor=o("Wav2Vec2ConformerForCTC"),Ior=o(" (Wav2Vec2-Conformer model)"),qor=l(),aM=a("li"),M_e=a("strong"),Nor=o("wavlm"),jor=o(" \u2014 "),vz=a("a"),Dor=o("WavLMForCTC"),Gor=o(" (WavLM model)"),Oor=l(),nM=a("p"),Vor=o("The model is set in evaluation mode by default using "),E_e=a("code"),Xor=o("model.eval()"),zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),Wor=o("model.train()"),Qor=l(),F(sM.$$.fragment),VNe=l(),vd=a("h2"),lM=a("a"),w_e=a("span"),F(w8.$$.fragment),Hor=l(),A_e=a("span"),Uor=o("AutoModelForSpeechSeq2Seq"),XNe=l(),Xo=a("div"),F(A8.$$.fragment),Jor=l(),Fd=a("p"),Yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fz=a("a"),Kor=o("from_pretrained()"),Zor=o(" class method or the "),Tz=a("a"),err=o("from_config()"),orr=o(` class
method.`),rrr=l(),y8=a("p"),trr=o("This class cannot be instantiated directly using "),y_e=a("code"),arr=o("__init__()"),nrr=o(" (throws an error)."),srr=l(),Ft=a("div"),F(L8.$$.fragment),lrr=l(),L_e=a("p"),irr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),drr=l(),Td=a("p"),crr=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),mrr=o("not"),frr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),grr=o("from_pretrained()"),hrr=o(" to load the model weights."),urr=l(),F(iM.$$.fragment),prr=l(),go=a("div"),F(x8.$$.fragment),_rr=l(),$_e=a("p"),brr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vrr=l(),Xa=a("p"),Frr=o("The model class to instantiate is selected based on the "),k_e=a("code"),Trr=o("model_type"),Mrr=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(":"),yrr=l(),$8=a("ul"),dM=a("li"),P_e=a("strong"),Lrr=o("speech-encoder-decoder"),xrr=o(" \u2014 "),Ez=a("a"),$rr=o("SpeechEncoderDecoderModel"),krr=o(" (Speech Encoder decoder model)"),Srr=l(),cM=a("li"),B_e=a("strong"),Rrr=o("speech_to_text"),Prr=o(" \u2014 "),Cz=a("a"),Brr=o("Speech2TextForConditionalGeneration"),Irr=o(" (Speech2Text model)"),qrr=l(),mM=a("p"),Nrr=o("The model is set in evaluation mode by default using "),I_e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),Grr=o("model.train()"),Orr=l(),F(fM.$$.fragment),zNe=l(),Md=a("h2"),gM=a("a"),N_e=a("span"),F(k8.$$.fragment),Vrr=l(),j_e=a("span"),Xrr=o("AutoModelForAudioXVector"),WNe=l(),zo=a("div"),F(S8.$$.fragment),zrr=l(),Ed=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wz=a("a"),Qrr=o("from_pretrained()"),Hrr=o(" class method or the "),Az=a("a"),Urr=o("from_config()"),Jrr=o(` class
method.`),Yrr=l(),R8=a("p"),Krr=o("This class cannot be instantiated directly using "),D_e=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),Tt=a("div"),F(P8.$$.fragment),rtr=l(),G_e=a("p"),ttr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),atr=l(),Cd=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),itr=o("from_pretrained()"),dtr=o(" to load the model weights."),ctr=l(),F(hM.$$.fragment),mtr=l(),ho=a("div"),F(B8.$$.fragment),ftr=l(),V_e=a("p"),gtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),htr=l(),za=a("p"),utr=o("The model class to instantiate is selected based on the "),X_e=a("code"),ptr=o("model_type"),_tr=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(":"),Mtr=l(),Zr=a("ul"),uM=a("li"),Q_e=a("strong"),Etr=o("data2vec-audio"),Ctr=o(" \u2014 "),Lz=a("a"),wtr=o("Data2VecAudioForXVector"),Atr=o(" (Data2VecAudio model)"),ytr=l(),pM=a("li"),H_e=a("strong"),Ltr=o("unispeech-sat"),xtr=o(" \u2014 "),xz=a("a"),$tr=o("UniSpeechSatForXVector"),ktr=o(" (UniSpeechSat model)"),Str=l(),_M=a("li"),U_e=a("strong"),Rtr=o("wav2vec2"),Ptr=o(" \u2014 "),$z=a("a"),Btr=o("Wav2Vec2ForXVector"),Itr=o(" (Wav2Vec2 model)"),qtr=l(),bM=a("li"),J_e=a("strong"),Ntr=o("wav2vec2-conformer"),jtr=o(" \u2014 "),kz=a("a"),Dtr=o("Wav2Vec2ConformerForXVector"),Gtr=o(" (Wav2Vec2-Conformer model)"),Otr=l(),vM=a("li"),Y_e=a("strong"),Vtr=o("wavlm"),Xtr=o(" \u2014 "),Sz=a("a"),ztr=o("WavLMForXVector"),Wtr=o(" (WavLM model)"),Qtr=l(),FM=a("p"),Htr=o("The model is set in evaluation mode by default using "),K_e=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),Ytr=o("model.train()"),Ktr=l(),F(TM.$$.fragment),QNe=l(),wd=a("h2"),MM=a("a"),ebe=a("span"),F(I8.$$.fragment),Ztr=l(),obe=a("span"),ear=o("AutoModelForMaskedImageModeling"),HNe=l(),Wo=a("div"),F(q8.$$.fragment),oar=l(),Ad=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),Pz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),N8=a("p"),iar=o("This class cannot be instantiated directly using "),rbe=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),mar=l(),Mt=a("div"),F(j8.$$.fragment),far=l(),tbe=a("p"),gar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),har=l(),yd=a("p"),uar=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),par=o("not"),_ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(EM.$$.fragment),Mar=l(),uo=a("div"),F(D8.$$.fragment),Ear=l(),nbe=a("p"),Car=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),war=l(),Wa=a("p"),Aar=o("The model class to instantiate is selected based on the "),sbe=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Ld=a("ul"),CM=a("li"),dbe=a("strong"),Par=o("deit"),Bar=o(" \u2014 "),Iz=a("a"),Iar=o("DeiTForMaskedImageModeling"),qar=o(" (DeiT model)"),Nar=l(),wM=a("li"),cbe=a("strong"),jar=o("swin"),Dar=o(" \u2014 "),qz=a("a"),Gar=o("SwinForMaskedImageModeling"),Oar=o(" (Swin model)"),Var=l(),AM=a("li"),mbe=a("strong"),Xar=o("vit"),zar=o(" \u2014 "),Nz=a("a"),War=o("ViTForMaskedImageModeling"),Qar=o(" (ViT model)"),Har=l(),yM=a("p"),Uar=o("The model is set in evaluation mode by default using "),fbe=a("code"),Jar=o("model.eval()"),Yar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=a("code"),Kar=o("model.train()"),Zar=l(),F(LM.$$.fragment),UNe=l(),xd=a("h2"),xM=a("a"),hbe=a("span"),F(G8.$$.fragment),enr=l(),ube=a("span"),onr=o("AutoModelForObjectDetection"),JNe=l(),Qo=a("div"),F(O8.$$.fragment),rnr=l(),$d=a("p"),tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jz=a("a"),anr=o("from_pretrained()"),nnr=o(" class method or the "),Dz=a("a"),snr=o("from_config()"),lnr=o(` class
method.`),inr=l(),V8=a("p"),dnr=o("This class cannot be instantiated directly using "),pbe=a("code"),cnr=o("__init__()"),mnr=o(" (throws an error)."),fnr=l(),Et=a("div"),F(X8.$$.fragment),gnr=l(),_be=a("p"),hnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),unr=l(),kd=a("p"),pnr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),_nr=o("not"),bnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),vnr=o("from_pretrained()"),Fnr=o(" to load the model weights."),Tnr=l(),F($M.$$.fragment),Mnr=l(),po=a("div"),F(z8.$$.fragment),Enr=l(),vbe=a("p"),Cnr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wnr=l(),Qa=a("p"),Anr=o("The model class to instantiate is selected based on the "),Fbe=a("code"),ynr=o("model_type"),Lnr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),xnr=o("pretrained_model_name_or_path"),$nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(":"),Rnr=l(),W8=a("ul"),kM=a("li"),Ebe=a("strong"),Pnr=o("detr"),Bnr=o(" \u2014 "),Oz=a("a"),Inr=o("DetrForObjectDetection"),qnr=o(" (DETR model)"),Nnr=l(),SM=a("li"),Cbe=a("strong"),jnr=o("yolos"),Dnr=o(" \u2014 "),Vz=a("a"),Gnr=o("YolosForObjectDetection"),Onr=o(" (YOLOS model)"),Vnr=l(),RM=a("p"),Xnr=o("The model is set in evaluation mode by default using "),wbe=a("code"),znr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),Qnr=o("model.train()"),Hnr=l(),F(PM.$$.fragment),YNe=l(),Sd=a("h2"),BM=a("a"),ybe=a("span"),F(Q8.$$.fragment),Unr=l(),Lbe=a("span"),Jnr=o("AutoModelForImageSegmentation"),KNe=l(),Ho=a("div"),F(H8.$$.fragment),Ynr=l(),Rd=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xz=a("a"),Znr=o("from_pretrained()"),esr=o(" class method or the "),zz=a("a"),osr=o("from_config()"),rsr=o(` class
method.`),tsr=l(),U8=a("p"),asr=o("This class cannot be instantiated directly using "),xbe=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),Ct=a("div"),F(J8.$$.fragment),isr=l(),$be=a("p"),dsr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),csr=l(),Pd=a("p"),msr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),fsr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),hsr=o("from_pretrained()"),usr=o(" to load the model weights."),psr=l(),F(IM.$$.fragment),_sr=l(),_o=a("div"),F(Y8.$$.fragment),bsr=l(),Sbe=a("p"),vsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Fsr=l(),Ha=a("p"),Tsr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),Msr=o("model_type"),Esr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),Csr=o("pretrained_model_name_or_path"),wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Asr=o("pretrained_model_name_or_path"),ysr=o(":"),Lsr=l(),Ibe=a("ul"),qM=a("li"),qbe=a("strong"),xsr=o("detr"),$sr=o(" \u2014 "),Qz=a("a"),ksr=o("DetrForSegmentation"),Ssr=o(" (DETR model)"),Rsr=l(),NM=a("p"),Psr=o("The model is set in evaluation mode by default using "),Nbe=a("code"),Bsr=o("model.eval()"),Isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=a("code"),qsr=o("model.train()"),Nsr=l(),F(jM.$$.fragment),ZNe=l(),Bd=a("h2"),DM=a("a"),Dbe=a("span"),F(K8.$$.fragment),jsr=l(),Gbe=a("span"),Dsr=o("AutoModelForSemanticSegmentation"),eje=l(),Uo=a("div"),F(Z8.$$.fragment),Gsr=l(),Id=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Hz=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" class method or the "),Uz=a("a"),zsr=o("from_config()"),Wsr=o(` class
method.`),Qsr=l(),e7=a("p"),Hsr=o("This class cannot be instantiated directly using "),Obe=a("code"),Usr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),wt=a("div"),F(o7.$$.fragment),Ksr=l(),Vbe=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),elr=l(),qd=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),alr=o("from_pretrained()"),nlr=o(" to load the model weights."),slr=l(),F(GM.$$.fragment),llr=l(),bo=a("div"),F(r7.$$.fragment),ilr=l(),zbe=a("p"),dlr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),clr=l(),Ua=a("p"),mlr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),flr=o("model_type"),glr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),hlr=o("pretrained_model_name_or_path"),ulr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(":"),blr=l(),Ja=a("ul"),OM=a("li"),Ube=a("strong"),vlr=o("beit"),Flr=o(" \u2014 "),Yz=a("a"),Tlr=o("BeitForSemanticSegmentation"),Mlr=o(" (BEiT model)"),Elr=l(),VM=a("li"),Jbe=a("strong"),Clr=o("data2vec-vision"),wlr=o(" \u2014 "),Kz=a("a"),Alr=o("Data2VecVisionForSemanticSegmentation"),ylr=o(" (Data2VecVision model)"),Llr=l(),XM=a("li"),Ybe=a("strong"),xlr=o("dpt"),$lr=o(" \u2014 "),Zz=a("a"),klr=o("DPTForSemanticSegmentation"),Slr=o(" (DPT model)"),Rlr=l(),zM=a("li"),Kbe=a("strong"),Plr=o("segformer"),Blr=o(" \u2014 "),eW=a("a"),Ilr=o("SegformerForSemanticSegmentation"),qlr=o(" (SegFormer model)"),Nlr=l(),WM=a("p"),jlr=o("The model is set in evaluation mode by default using "),Zbe=a("code"),Dlr=o("model.eval()"),Glr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),Olr=o("model.train()"),Vlr=l(),F(QM.$$.fragment),oje=l(),Nd=a("h2"),HM=a("a"),o2e=a("span"),F(t7.$$.fragment),Xlr=l(),r2e=a("span"),zlr=o("AutoModelForInstanceSegmentation"),rje=l(),Jo=a("div"),F(a7.$$.fragment),Wlr=l(),jd=a("p"),Qlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oW=a("a"),Hlr=o("from_pretrained()"),Ulr=o(" class method or the "),rW=a("a"),Jlr=o("from_config()"),Ylr=o(` class
method.`),Klr=l(),n7=a("p"),Zlr=o("This class cannot be instantiated directly using "),t2e=a("code"),eir=o("__init__()"),oir=o(" (throws an error)."),rir=l(),At=a("div"),F(s7.$$.fragment),tir=l(),a2e=a("p"),air=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),nir=l(),Dd=a("p"),sir=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),lir=o("not"),iir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),dir=o("from_pretrained()"),cir=o(" to load the model weights."),mir=l(),F(UM.$$.fragment),fir=l(),vo=a("div"),F(l7.$$.fragment),gir=l(),s2e=a("p"),hir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),uir=l(),Ya=a("p"),pir=o("The model class to instantiate is selected based on the "),l2e=a("code"),_ir=o("model_type"),bir=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(":"),Eir=l(),c2e=a("ul"),JM=a("li"),m2e=a("strong"),Cir=o("maskformer"),wir=o(" \u2014 "),aW=a("a"),Air=o("MaskFormerForInstanceSegmentation"),yir=o(" (MaskFormer model)"),Lir=l(),YM=a("p"),xir=o("The model is set in evaluation mode by default using "),f2e=a("code"),$ir=o("model.eval()"),kir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=a("code"),Sir=o("model.train()"),Rir=l(),F(KM.$$.fragment),tje=l(),Gd=a("h2"),ZM=a("a"),h2e=a("span"),F(i7.$$.fragment),Pir=l(),u2e=a("span"),Bir=o("TFAutoModel"),aje=l(),Yo=a("div"),F(d7.$$.fragment),Iir=l(),Od=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=a("a"),Nir=o("from_pretrained()"),jir=o(" class method or the "),sW=a("a"),Dir=o("from_config()"),Gir=o(` class
method.`),Oir=l(),c7=a("p"),Vir=o("This class cannot be instantiated directly using "),p2e=a("code"),Xir=o("__init__()"),zir=o(" (throws an error)."),Wir=l(),yt=a("div"),F(m7.$$.fragment),Qir=l(),_2e=a("p"),Hir=o("Instantiates one of the base model classes of the library from a configuration."),Uir=l(),Vd=a("p"),Jir=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),Yir=o("not"),Kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Zir=o("from_pretrained()"),edr=o(" to load the model weights."),odr=l(),F(e4.$$.fragment),rdr=l(),wr=a("div"),F(f7.$$.fragment),tdr=l(),v2e=a("p"),adr=o("Instantiate one of the base model classes of the library from a pretrained model."),ndr=l(),Ka=a("p"),sdr=o("The model class to instantiate is selected based on the "),F2e=a("code"),ldr=o("model_type"),idr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),mdr=o("pretrained_model_name_or_path"),fdr=o(":"),gdr=l(),N=a("ul"),o4=a("li"),E2e=a("strong"),hdr=o("albert"),udr=o(" \u2014 "),iW=a("a"),pdr=o("TFAlbertModel"),_dr=o(" (ALBERT model)"),bdr=l(),r4=a("li"),C2e=a("strong"),vdr=o("bart"),Fdr=o(" \u2014 "),dW=a("a"),Tdr=o("TFBartModel"),Mdr=o(" (BART model)"),Edr=l(),t4=a("li"),w2e=a("strong"),Cdr=o("bert"),wdr=o(" \u2014 "),cW=a("a"),Adr=o("TFBertModel"),ydr=o(" (BERT model)"),Ldr=l(),a4=a("li"),A2e=a("strong"),xdr=o("blenderbot"),$dr=o(" \u2014 "),mW=a("a"),kdr=o("TFBlenderbotModel"),Sdr=o(" (Blenderbot model)"),Rdr=l(),n4=a("li"),y2e=a("strong"),Pdr=o("blenderbot-small"),Bdr=o(" \u2014 "),fW=a("a"),Idr=o("TFBlenderbotSmallModel"),qdr=o(" (BlenderbotSmall model)"),Ndr=l(),s4=a("li"),L2e=a("strong"),jdr=o("camembert"),Ddr=o(" \u2014 "),gW=a("a"),Gdr=o("TFCamembertModel"),Odr=o(" (CamemBERT model)"),Vdr=l(),l4=a("li"),x2e=a("strong"),Xdr=o("clip"),zdr=o(" \u2014 "),hW=a("a"),Wdr=o("TFCLIPModel"),Qdr=o(" (CLIP model)"),Hdr=l(),i4=a("li"),$2e=a("strong"),Udr=o("convbert"),Jdr=o(" \u2014 "),uW=a("a"),Ydr=o("TFConvBertModel"),Kdr=o(" (ConvBERT model)"),Zdr=l(),d4=a("li"),k2e=a("strong"),ecr=o("convnext"),ocr=o(" \u2014 "),pW=a("a"),rcr=o("TFConvNextModel"),tcr=o(" (ConvNext model)"),acr=l(),c4=a("li"),S2e=a("strong"),ncr=o("ctrl"),scr=o(" \u2014 "),_W=a("a"),lcr=o("TFCTRLModel"),icr=o(" (CTRL model)"),dcr=l(),m4=a("li"),R2e=a("strong"),ccr=o("data2vec-vision"),mcr=o(" \u2014 "),bW=a("a"),fcr=o("TFData2VecVisionModel"),gcr=o(" (Data2VecVision model)"),hcr=l(),f4=a("li"),P2e=a("strong"),ucr=o("deberta"),pcr=o(" \u2014 "),vW=a("a"),_cr=o("TFDebertaModel"),bcr=o(" (DeBERTa model)"),vcr=l(),g4=a("li"),B2e=a("strong"),Fcr=o("deberta-v2"),Tcr=o(" \u2014 "),FW=a("a"),Mcr=o("TFDebertaV2Model"),Ecr=o(" (DeBERTa-v2 model)"),Ccr=l(),h4=a("li"),I2e=a("strong"),wcr=o("distilbert"),Acr=o(" \u2014 "),TW=a("a"),ycr=o("TFDistilBertModel"),Lcr=o(" (DistilBERT model)"),xcr=l(),u4=a("li"),q2e=a("strong"),$cr=o("dpr"),kcr=o(" \u2014 "),MW=a("a"),Scr=o("TFDPRQuestionEncoder"),Rcr=o(" (DPR model)"),Pcr=l(),p4=a("li"),N2e=a("strong"),Bcr=o("electra"),Icr=o(" \u2014 "),EW=a("a"),qcr=o("TFElectraModel"),Ncr=o(" (ELECTRA model)"),jcr=l(),_4=a("li"),j2e=a("strong"),Dcr=o("flaubert"),Gcr=o(" \u2014 "),CW=a("a"),Ocr=o("TFFlaubertModel"),Vcr=o(" (FlauBERT model)"),Xcr=l(),Is=a("li"),D2e=a("strong"),zcr=o("funnel"),Wcr=o(" \u2014 "),wW=a("a"),Qcr=o("TFFunnelModel"),Hcr=o(" or "),AW=a("a"),Ucr=o("TFFunnelBaseModel"),Jcr=o(" (Funnel Transformer model)"),Ycr=l(),b4=a("li"),G2e=a("strong"),Kcr=o("gpt2"),Zcr=o(" \u2014 "),yW=a("a"),emr=o("TFGPT2Model"),omr=o(" (OpenAI GPT-2 model)"),rmr=l(),v4=a("li"),O2e=a("strong"),tmr=o("gptj"),amr=o(" \u2014 "),LW=a("a"),nmr=o("TFGPTJModel"),smr=o(" (GPT-J model)"),lmr=l(),F4=a("li"),V2e=a("strong"),imr=o("hubert"),dmr=o(" \u2014 "),xW=a("a"),cmr=o("TFHubertModel"),mmr=o(" (Hubert model)"),fmr=l(),T4=a("li"),X2e=a("strong"),gmr=o("layoutlm"),hmr=o(" \u2014 "),$W=a("a"),umr=o("TFLayoutLMModel"),pmr=o(" (LayoutLM model)"),_mr=l(),M4=a("li"),z2e=a("strong"),bmr=o("led"),vmr=o(" \u2014 "),kW=a("a"),Fmr=o("TFLEDModel"),Tmr=o(" (LED model)"),Mmr=l(),E4=a("li"),W2e=a("strong"),Emr=o("longformer"),Cmr=o(" \u2014 "),SW=a("a"),wmr=o("TFLongformerModel"),Amr=o(" (Longformer model)"),ymr=l(),C4=a("li"),Q2e=a("strong"),Lmr=o("lxmert"),xmr=o(" \u2014 "),RW=a("a"),$mr=o("TFLxmertModel"),kmr=o(" (LXMERT model)"),Smr=l(),w4=a("li"),H2e=a("strong"),Rmr=o("marian"),Pmr=o(" \u2014 "),PW=a("a"),Bmr=o("TFMarianModel"),Imr=o(" (Marian model)"),qmr=l(),A4=a("li"),U2e=a("strong"),Nmr=o("mbart"),jmr=o(" \u2014 "),BW=a("a"),Dmr=o("TFMBartModel"),Gmr=o(" (mBART model)"),Omr=l(),y4=a("li"),J2e=a("strong"),Vmr=o("mobilebert"),Xmr=o(" \u2014 "),IW=a("a"),zmr=o("TFMobileBertModel"),Wmr=o(" (MobileBERT model)"),Qmr=l(),L4=a("li"),Y2e=a("strong"),Hmr=o("mpnet"),Umr=o(" \u2014 "),qW=a("a"),Jmr=o("TFMPNetModel"),Ymr=o(" (MPNet model)"),Kmr=l(),x4=a("li"),K2e=a("strong"),Zmr=o("mt5"),efr=o(" \u2014 "),NW=a("a"),ofr=o("TFMT5Model"),rfr=o(" (mT5 model)"),tfr=l(),$4=a("li"),Z2e=a("strong"),afr=o("openai-gpt"),nfr=o(" \u2014 "),jW=a("a"),sfr=o("TFOpenAIGPTModel"),lfr=o(" (OpenAI GPT model)"),ifr=l(),k4=a("li"),eve=a("strong"),dfr=o("pegasus"),cfr=o(" \u2014 "),DW=a("a"),mfr=o("TFPegasusModel"),ffr=o(" (Pegasus model)"),gfr=l(),S4=a("li"),ove=a("strong"),hfr=o("rembert"),ufr=o(" \u2014 "),GW=a("a"),pfr=o("TFRemBertModel"),_fr=o(" (RemBERT model)"),bfr=l(),R4=a("li"),rve=a("strong"),vfr=o("roberta"),Ffr=o(" \u2014 "),OW=a("a"),Tfr=o("TFRobertaModel"),Mfr=o(" (RoBERTa model)"),Efr=l(),P4=a("li"),tve=a("strong"),Cfr=o("roformer"),wfr=o(" \u2014 "),VW=a("a"),Afr=o("TFRoFormerModel"),yfr=o(" (RoFormer model)"),Lfr=l(),B4=a("li"),ave=a("strong"),xfr=o("speech_to_text"),$fr=o(" \u2014 "),XW=a("a"),kfr=o("TFSpeech2TextModel"),Sfr=o(" (Speech2Text model)"),Rfr=l(),I4=a("li"),nve=a("strong"),Pfr=o("swin"),Bfr=o(" \u2014 "),zW=a("a"),Ifr=o("TFSwinModel"),qfr=o(" (Swin model)"),Nfr=l(),q4=a("li"),sve=a("strong"),jfr=o("t5"),Dfr=o(" \u2014 "),WW=a("a"),Gfr=o("TFT5Model"),Ofr=o(" (T5 model)"),Vfr=l(),N4=a("li"),lve=a("strong"),Xfr=o("tapas"),zfr=o(" \u2014 "),QW=a("a"),Wfr=o("TFTapasModel"),Qfr=o(" (TAPAS model)"),Hfr=l(),j4=a("li"),ive=a("strong"),Ufr=o("transfo-xl"),Jfr=o(" \u2014 "),HW=a("a"),Yfr=o("TFTransfoXLModel"),Kfr=o(" (Transformer-XL model)"),Zfr=l(),D4=a("li"),dve=a("strong"),egr=o("vit"),ogr=o(" \u2014 "),UW=a("a"),rgr=o("TFViTModel"),tgr=o(" (ViT model)"),agr=l(),G4=a("li"),cve=a("strong"),ngr=o("vit_mae"),sgr=o(" \u2014 "),JW=a("a"),lgr=o("TFViTMAEModel"),igr=o(" (ViTMAE model)"),dgr=l(),O4=a("li"),mve=a("strong"),cgr=o("wav2vec2"),mgr=o(" \u2014 "),YW=a("a"),fgr=o("TFWav2Vec2Model"),ggr=o(" (Wav2Vec2 model)"),hgr=l(),V4=a("li"),fve=a("strong"),ugr=o("xlm"),pgr=o(" \u2014 "),KW=a("a"),_gr=o("TFXLMModel"),bgr=o(" (XLM model)"),vgr=l(),X4=a("li"),gve=a("strong"),Fgr=o("xlm-roberta"),Tgr=o(" \u2014 "),ZW=a("a"),Mgr=o("TFXLMRobertaModel"),Egr=o(" (XLM-RoBERTa model)"),Cgr=l(),z4=a("li"),hve=a("strong"),wgr=o("xlnet"),Agr=o(" \u2014 "),eQ=a("a"),ygr=o("TFXLNetModel"),Lgr=o(" (XLNet model)"),xgr=l(),F(W4.$$.fragment),nje=l(),Xd=a("h2"),Q4=a("a"),uve=a("span"),F(g7.$$.fragment),$gr=l(),pve=a("span"),kgr=o("TFAutoModelForPreTraining"),sje=l(),Ko=a("div"),F(h7.$$.fragment),Sgr=l(),zd=a("p"),Rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=a("a"),Pgr=o("from_pretrained()"),Bgr=o(" class method or the "),rQ=a("a"),Igr=o("from_config()"),qgr=o(` class
method.`),Ngr=l(),u7=a("p"),jgr=o("This class cannot be instantiated directly using "),_ve=a("code"),Dgr=o("__init__()"),Ggr=o(" (throws an error)."),Ogr=l(),Lt=a("div"),F(p7.$$.fragment),Vgr=l(),bve=a("p"),Xgr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zgr=l(),Wd=a("p"),Wgr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),Qgr=o("not"),Hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),Ugr=o("from_pretrained()"),Jgr=o(" to load the model weights."),Ygr=l(),F(H4.$$.fragment),Kgr=l(),Ar=a("div"),F(_7.$$.fragment),Zgr=l(),Fve=a("p"),ehr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ohr=l(),Za=a("p"),rhr=o("The model class to instantiate is selected based on the "),Tve=a("code"),thr=o("model_type"),ahr=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(":"),dhr=l(),se=a("ul"),U4=a("li"),Cve=a("strong"),chr=o("albert"),mhr=o(" \u2014 "),aQ=a("a"),fhr=o("TFAlbertForPreTraining"),ghr=o(" (ALBERT model)"),hhr=l(),J4=a("li"),wve=a("strong"),uhr=o("bart"),phr=o(" \u2014 "),nQ=a("a"),_hr=o("TFBartForConditionalGeneration"),bhr=o(" (BART model)"),vhr=l(),Y4=a("li"),Ave=a("strong"),Fhr=o("bert"),Thr=o(" \u2014 "),sQ=a("a"),Mhr=o("TFBertForPreTraining"),Ehr=o(" (BERT model)"),Chr=l(),K4=a("li"),yve=a("strong"),whr=o("camembert"),Ahr=o(" \u2014 "),lQ=a("a"),yhr=o("TFCamembertForMaskedLM"),Lhr=o(" (CamemBERT model)"),xhr=l(),Z4=a("li"),Lve=a("strong"),$hr=o("ctrl"),khr=o(" \u2014 "),iQ=a("a"),Shr=o("TFCTRLLMHeadModel"),Rhr=o(" (CTRL model)"),Phr=l(),eE=a("li"),xve=a("strong"),Bhr=o("distilbert"),Ihr=o(" \u2014 "),dQ=a("a"),qhr=o("TFDistilBertForMaskedLM"),Nhr=o(" (DistilBERT model)"),jhr=l(),oE=a("li"),$ve=a("strong"),Dhr=o("electra"),Ghr=o(" \u2014 "),cQ=a("a"),Ohr=o("TFElectraForPreTraining"),Vhr=o(" (ELECTRA model)"),Xhr=l(),rE=a("li"),kve=a("strong"),zhr=o("flaubert"),Whr=o(" \u2014 "),mQ=a("a"),Qhr=o("TFFlaubertWithLMHeadModel"),Hhr=o(" (FlauBERT model)"),Uhr=l(),tE=a("li"),Sve=a("strong"),Jhr=o("funnel"),Yhr=o(" \u2014 "),fQ=a("a"),Khr=o("TFFunnelForPreTraining"),Zhr=o(" (Funnel Transformer model)"),eur=l(),aE=a("li"),Rve=a("strong"),our=o("gpt2"),rur=o(" \u2014 "),gQ=a("a"),tur=o("TFGPT2LMHeadModel"),aur=o(" (OpenAI GPT-2 model)"),nur=l(),nE=a("li"),Pve=a("strong"),sur=o("layoutlm"),lur=o(" \u2014 "),hQ=a("a"),iur=o("TFLayoutLMForMaskedLM"),dur=o(" (LayoutLM model)"),cur=l(),sE=a("li"),Bve=a("strong"),mur=o("lxmert"),fur=o(" \u2014 "),uQ=a("a"),gur=o("TFLxmertForPreTraining"),hur=o(" (LXMERT model)"),uur=l(),lE=a("li"),Ive=a("strong"),pur=o("mobilebert"),_ur=o(" \u2014 "),pQ=a("a"),bur=o("TFMobileBertForPreTraining"),vur=o(" (MobileBERT model)"),Fur=l(),iE=a("li"),qve=a("strong"),Tur=o("mpnet"),Mur=o(" \u2014 "),_Q=a("a"),Eur=o("TFMPNetForMaskedLM"),Cur=o(" (MPNet model)"),wur=l(),dE=a("li"),Nve=a("strong"),Aur=o("openai-gpt"),yur=o(" \u2014 "),bQ=a("a"),Lur=o("TFOpenAIGPTLMHeadModel"),xur=o(" (OpenAI GPT model)"),$ur=l(),cE=a("li"),jve=a("strong"),kur=o("roberta"),Sur=o(" \u2014 "),vQ=a("a"),Rur=o("TFRobertaForMaskedLM"),Pur=o(" (RoBERTa model)"),Bur=l(),mE=a("li"),Dve=a("strong"),Iur=o("t5"),qur=o(" \u2014 "),FQ=a("a"),Nur=o("TFT5ForConditionalGeneration"),jur=o(" (T5 model)"),Dur=l(),fE=a("li"),Gve=a("strong"),Gur=o("tapas"),Our=o(" \u2014 "),TQ=a("a"),Vur=o("TFTapasForMaskedLM"),Xur=o(" (TAPAS model)"),zur=l(),gE=a("li"),Ove=a("strong"),Wur=o("transfo-xl"),Qur=o(" \u2014 "),MQ=a("a"),Hur=o("TFTransfoXLLMHeadModel"),Uur=o(" (Transformer-XL model)"),Jur=l(),hE=a("li"),Vve=a("strong"),Yur=o("vit_mae"),Kur=o(" \u2014 "),EQ=a("a"),Zur=o("TFViTMAEForPreTraining"),epr=o(" (ViTMAE model)"),opr=l(),uE=a("li"),Xve=a("strong"),rpr=o("xlm"),tpr=o(" \u2014 "),CQ=a("a"),apr=o("TFXLMWithLMHeadModel"),npr=o(" (XLM model)"),spr=l(),pE=a("li"),zve=a("strong"),lpr=o("xlm-roberta"),ipr=o(" \u2014 "),wQ=a("a"),dpr=o("TFXLMRobertaForMaskedLM"),cpr=o(" (XLM-RoBERTa model)"),mpr=l(),_E=a("li"),Wve=a("strong"),fpr=o("xlnet"),gpr=o(" \u2014 "),AQ=a("a"),hpr=o("TFXLNetLMHeadModel"),upr=o(" (XLNet model)"),ppr=l(),F(bE.$$.fragment),lje=l(),Qd=a("h2"),vE=a("a"),Qve=a("span"),F(b7.$$.fragment),_pr=l(),Hve=a("span"),bpr=o("TFAutoModelForCausalLM"),ije=l(),Zo=a("div"),F(v7.$$.fragment),vpr=l(),Hd=a("p"),Fpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=a("a"),Tpr=o("from_pretrained()"),Mpr=o(" class method or the "),LQ=a("a"),Epr=o("from_config()"),Cpr=o(` class
method.`),wpr=l(),F7=a("p"),Apr=o("This class cannot be instantiated directly using "),Uve=a("code"),ypr=o("__init__()"),Lpr=o(" (throws an error)."),xpr=l(),xt=a("div"),F(T7.$$.fragment),$pr=l(),Jve=a("p"),kpr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Spr=l(),Ud=a("p"),Rpr=o(`Note:
Loading a model from its configuration file does `),Yve=a("strong"),Ppr=o("not"),Bpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Ipr=o("from_pretrained()"),qpr=o(" to load the model weights."),Npr=l(),F(FE.$$.fragment),jpr=l(),yr=a("div"),F(M7.$$.fragment),Dpr=l(),Kve=a("p"),Gpr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Opr=l(),en=a("p"),Vpr=o("The model class to instantiate is selected based on the "),Zve=a("code"),Xpr=o("model_type"),zpr=o(` property of the config object (either
passed as an argument or loaded from `),eFe=a("code"),Wpr=o("pretrained_model_name_or_path"),Qpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(":"),Jpr=l(),Me=a("ul"),TE=a("li"),rFe=a("strong"),Ypr=o("bert"),Kpr=o(" \u2014 "),$Q=a("a"),Zpr=o("TFBertLMHeadModel"),e_r=o(" (BERT model)"),o_r=l(),ME=a("li"),tFe=a("strong"),r_r=o("camembert"),t_r=o(" \u2014 "),kQ=a("a"),a_r=o("TFCamembertForCausalLM"),n_r=o(" (CamemBERT model)"),s_r=l(),EE=a("li"),aFe=a("strong"),l_r=o("ctrl"),i_r=o(" \u2014 "),SQ=a("a"),d_r=o("TFCTRLLMHeadModel"),c_r=o(" (CTRL model)"),m_r=l(),CE=a("li"),nFe=a("strong"),f_r=o("gpt2"),g_r=o(" \u2014 "),RQ=a("a"),h_r=o("TFGPT2LMHeadModel"),u_r=o(" (OpenAI GPT-2 model)"),p_r=l(),wE=a("li"),sFe=a("strong"),__r=o("gptj"),b_r=o(" \u2014 "),PQ=a("a"),v_r=o("TFGPTJForCausalLM"),F_r=o(" (GPT-J model)"),T_r=l(),AE=a("li"),lFe=a("strong"),M_r=o("openai-gpt"),E_r=o(" \u2014 "),BQ=a("a"),C_r=o("TFOpenAIGPTLMHeadModel"),w_r=o(" (OpenAI GPT model)"),A_r=l(),yE=a("li"),iFe=a("strong"),y_r=o("rembert"),L_r=o(" \u2014 "),IQ=a("a"),x_r=o("TFRemBertForCausalLM"),$_r=o(" (RemBERT model)"),k_r=l(),LE=a("li"),dFe=a("strong"),S_r=o("roberta"),R_r=o(" \u2014 "),qQ=a("a"),P_r=o("TFRobertaForCausalLM"),B_r=o(" (RoBERTa model)"),I_r=l(),xE=a("li"),cFe=a("strong"),q_r=o("roformer"),N_r=o(" \u2014 "),NQ=a("a"),j_r=o("TFRoFormerForCausalLM"),D_r=o(" (RoFormer model)"),G_r=l(),$E=a("li"),mFe=a("strong"),O_r=o("transfo-xl"),V_r=o(" \u2014 "),jQ=a("a"),X_r=o("TFTransfoXLLMHeadModel"),z_r=o(" (Transformer-XL model)"),W_r=l(),kE=a("li"),fFe=a("strong"),Q_r=o("xlm"),H_r=o(" \u2014 "),DQ=a("a"),U_r=o("TFXLMWithLMHeadModel"),J_r=o(" (XLM model)"),Y_r=l(),SE=a("li"),gFe=a("strong"),K_r=o("xlnet"),Z_r=o(" \u2014 "),GQ=a("a"),ebr=o("TFXLNetLMHeadModel"),obr=o(" (XLNet model)"),rbr=l(),F(RE.$$.fragment),dje=l(),Jd=a("h2"),PE=a("a"),hFe=a("span"),F(E7.$$.fragment),tbr=l(),uFe=a("span"),abr=o("TFAutoModelForImageClassification"),cje=l(),er=a("div"),F(C7.$$.fragment),nbr=l(),Yd=a("p"),sbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=a("a"),lbr=o("from_pretrained()"),ibr=o(" class method or the "),VQ=a("a"),dbr=o("from_config()"),cbr=o(` class
method.`),mbr=l(),w7=a("p"),fbr=o("This class cannot be instantiated directly using "),pFe=a("code"),gbr=o("__init__()"),hbr=o(" (throws an error)."),ubr=l(),$t=a("div"),F(A7.$$.fragment),pbr=l(),_Fe=a("p"),_br=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bbr=l(),Kd=a("p"),vbr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),Fbr=o("not"),Tbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Mbr=o("from_pretrained()"),Ebr=o(" to load the model weights."),Cbr=l(),F(BE.$$.fragment),wbr=l(),Lr=a("div"),F(y7.$$.fragment),Abr=l(),vFe=a("p"),ybr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lbr=l(),on=a("p"),xbr=o("The model class to instantiate is selected based on the "),FFe=a("code"),$br=o("model_type"),kbr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),Sbr=o("pretrained_model_name_or_path"),Rbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),Pbr=o("pretrained_model_name_or_path"),Bbr=o(":"),Ibr=l(),rn=a("ul"),IE=a("li"),EFe=a("strong"),qbr=o("convnext"),Nbr=o(" \u2014 "),zQ=a("a"),jbr=o("TFConvNextForImageClassification"),Dbr=o(" (ConvNext model)"),Gbr=l(),qE=a("li"),CFe=a("strong"),Obr=o("data2vec-vision"),Vbr=o(" \u2014 "),WQ=a("a"),Xbr=o("TFData2VecVisionForImageClassification"),zbr=o(" (Data2VecVision model)"),Wbr=l(),NE=a("li"),wFe=a("strong"),Qbr=o("swin"),Hbr=o(" \u2014 "),QQ=a("a"),Ubr=o("TFSwinForImageClassification"),Jbr=o(" (Swin model)"),Ybr=l(),jE=a("li"),AFe=a("strong"),Kbr=o("vit"),Zbr=o(" \u2014 "),HQ=a("a"),e2r=o("TFViTForImageClassification"),o2r=o(" (ViT model)"),r2r=l(),F(DE.$$.fragment),mje=l(),Zd=a("h2"),GE=a("a"),yFe=a("span"),F(L7.$$.fragment),t2r=l(),LFe=a("span"),a2r=o("TFAutoModelForMaskedLM"),fje=l(),or=a("div"),F(x7.$$.fragment),n2r=l(),ec=a("p"),s2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UQ=a("a"),l2r=o("from_pretrained()"),i2r=o(" class method or the "),JQ=a("a"),d2r=o("from_config()"),c2r=o(` class
method.`),m2r=l(),$7=a("p"),f2r=o("This class cannot be instantiated directly using "),xFe=a("code"),g2r=o("__init__()"),h2r=o(" (throws an error)."),u2r=l(),kt=a("div"),F(k7.$$.fragment),p2r=l(),$Fe=a("p"),_2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b2r=l(),oc=a("p"),v2r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),F2r=o("not"),T2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),M2r=o("from_pretrained()"),E2r=o(" to load the model weights."),C2r=l(),F(OE.$$.fragment),w2r=l(),xr=a("div"),F(S7.$$.fragment),A2r=l(),SFe=a("p"),y2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L2r=l(),tn=a("p"),x2r=o("The model class to instantiate is selected based on the "),RFe=a("code"),$2r=o("model_type"),k2r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),S2r=o("pretrained_model_name_or_path"),R2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),P2r=o("pretrained_model_name_or_path"),B2r=o(":"),I2r=l(),ie=a("ul"),VE=a("li"),IFe=a("strong"),q2r=o("albert"),N2r=o(" \u2014 "),KQ=a("a"),j2r=o("TFAlbertForMaskedLM"),D2r=o(" (ALBERT model)"),G2r=l(),XE=a("li"),qFe=a("strong"),O2r=o("bert"),V2r=o(" \u2014 "),ZQ=a("a"),X2r=o("TFBertForMaskedLM"),z2r=o(" (BERT model)"),W2r=l(),zE=a("li"),NFe=a("strong"),Q2r=o("camembert"),H2r=o(" \u2014 "),eH=a("a"),U2r=o("TFCamembertForMaskedLM"),J2r=o(" (CamemBERT model)"),Y2r=l(),WE=a("li"),jFe=a("strong"),K2r=o("convbert"),Z2r=o(" \u2014 "),oH=a("a"),evr=o("TFConvBertForMaskedLM"),ovr=o(" (ConvBERT model)"),rvr=l(),QE=a("li"),DFe=a("strong"),tvr=o("deberta"),avr=o(" \u2014 "),rH=a("a"),nvr=o("TFDebertaForMaskedLM"),svr=o(" (DeBERTa model)"),lvr=l(),HE=a("li"),GFe=a("strong"),ivr=o("deberta-v2"),dvr=o(" \u2014 "),tH=a("a"),cvr=o("TFDebertaV2ForMaskedLM"),mvr=o(" (DeBERTa-v2 model)"),fvr=l(),UE=a("li"),OFe=a("strong"),gvr=o("distilbert"),hvr=o(" \u2014 "),aH=a("a"),uvr=o("TFDistilBertForMaskedLM"),pvr=o(" (DistilBERT model)"),_vr=l(),JE=a("li"),VFe=a("strong"),bvr=o("electra"),vvr=o(" \u2014 "),nH=a("a"),Fvr=o("TFElectraForMaskedLM"),Tvr=o(" (ELECTRA model)"),Mvr=l(),YE=a("li"),XFe=a("strong"),Evr=o("flaubert"),Cvr=o(" \u2014 "),sH=a("a"),wvr=o("TFFlaubertWithLMHeadModel"),Avr=o(" (FlauBERT model)"),yvr=l(),KE=a("li"),zFe=a("strong"),Lvr=o("funnel"),xvr=o(" \u2014 "),lH=a("a"),$vr=o("TFFunnelForMaskedLM"),kvr=o(" (Funnel Transformer model)"),Svr=l(),ZE=a("li"),WFe=a("strong"),Rvr=o("layoutlm"),Pvr=o(" \u2014 "),iH=a("a"),Bvr=o("TFLayoutLMForMaskedLM"),Ivr=o(" (LayoutLM model)"),qvr=l(),eC=a("li"),QFe=a("strong"),Nvr=o("longformer"),jvr=o(" \u2014 "),dH=a("a"),Dvr=o("TFLongformerForMaskedLM"),Gvr=o(" (Longformer model)"),Ovr=l(),oC=a("li"),HFe=a("strong"),Vvr=o("mobilebert"),Xvr=o(" \u2014 "),cH=a("a"),zvr=o("TFMobileBertForMaskedLM"),Wvr=o(" (MobileBERT model)"),Qvr=l(),rC=a("li"),UFe=a("strong"),Hvr=o("mpnet"),Uvr=o(" \u2014 "),mH=a("a"),Jvr=o("TFMPNetForMaskedLM"),Yvr=o(" (MPNet model)"),Kvr=l(),tC=a("li"),JFe=a("strong"),Zvr=o("rembert"),eFr=o(" \u2014 "),fH=a("a"),oFr=o("TFRemBertForMaskedLM"),rFr=o(" (RemBERT model)"),tFr=l(),aC=a("li"),YFe=a("strong"),aFr=o("roberta"),nFr=o(" \u2014 "),gH=a("a"),sFr=o("TFRobertaForMaskedLM"),lFr=o(" (RoBERTa model)"),iFr=l(),nC=a("li"),KFe=a("strong"),dFr=o("roformer"),cFr=o(" \u2014 "),hH=a("a"),mFr=o("TFRoFormerForMaskedLM"),fFr=o(" (RoFormer model)"),gFr=l(),sC=a("li"),ZFe=a("strong"),hFr=o("tapas"),uFr=o(" \u2014 "),uH=a("a"),pFr=o("TFTapasForMaskedLM"),_Fr=o(" (TAPAS model)"),bFr=l(),lC=a("li"),e1e=a("strong"),vFr=o("xlm"),FFr=o(" \u2014 "),pH=a("a"),TFr=o("TFXLMWithLMHeadModel"),MFr=o(" (XLM model)"),EFr=l(),iC=a("li"),o1e=a("strong"),CFr=o("xlm-roberta"),wFr=o(" \u2014 "),_H=a("a"),AFr=o("TFXLMRobertaForMaskedLM"),yFr=o(" (XLM-RoBERTa model)"),LFr=l(),F(dC.$$.fragment),gje=l(),rc=a("h2"),cC=a("a"),r1e=a("span"),F(R7.$$.fragment),xFr=l(),t1e=a("span"),$Fr=o("TFAutoModelForSeq2SeqLM"),hje=l(),rr=a("div"),F(P7.$$.fragment),kFr=l(),tc=a("p"),SFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bH=a("a"),RFr=o("from_pretrained()"),PFr=o(" class method or the "),vH=a("a"),BFr=o("from_config()"),IFr=o(` class
method.`),qFr=l(),B7=a("p"),NFr=o("This class cannot be instantiated directly using "),a1e=a("code"),jFr=o("__init__()"),DFr=o(" (throws an error)."),GFr=l(),St=a("div"),F(I7.$$.fragment),OFr=l(),n1e=a("p"),VFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XFr=l(),ac=a("p"),zFr=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),WFr=o("not"),QFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),HFr=o("from_pretrained()"),UFr=o(" to load the model weights."),JFr=l(),F(mC.$$.fragment),YFr=l(),$r=a("div"),F(q7.$$.fragment),KFr=l(),l1e=a("p"),ZFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e1r=l(),an=a("p"),o1r=o("The model class to instantiate is selected based on the "),i1e=a("code"),r1r=o("model_type"),t1r=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),a1r=o("pretrained_model_name_or_path"),n1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(":"),i1r=l(),ye=a("ul"),fC=a("li"),m1e=a("strong"),d1r=o("bart"),c1r=o(" \u2014 "),TH=a("a"),m1r=o("TFBartForConditionalGeneration"),f1r=o(" (BART model)"),g1r=l(),gC=a("li"),f1e=a("strong"),h1r=o("blenderbot"),u1r=o(" \u2014 "),MH=a("a"),p1r=o("TFBlenderbotForConditionalGeneration"),_1r=o(" (Blenderbot model)"),b1r=l(),hC=a("li"),g1e=a("strong"),v1r=o("blenderbot-small"),F1r=o(" \u2014 "),EH=a("a"),T1r=o("TFBlenderbotSmallForConditionalGeneration"),M1r=o(" (BlenderbotSmall model)"),E1r=l(),uC=a("li"),h1e=a("strong"),C1r=o("encoder-decoder"),w1r=o(" \u2014 "),CH=a("a"),A1r=o("TFEncoderDecoderModel"),y1r=o(" (Encoder decoder model)"),L1r=l(),pC=a("li"),u1e=a("strong"),x1r=o("led"),$1r=o(" \u2014 "),wH=a("a"),k1r=o("TFLEDForConditionalGeneration"),S1r=o(" (LED model)"),R1r=l(),_C=a("li"),p1e=a("strong"),P1r=o("marian"),B1r=o(" \u2014 "),AH=a("a"),I1r=o("TFMarianMTModel"),q1r=o(" (Marian model)"),N1r=l(),bC=a("li"),_1e=a("strong"),j1r=o("mbart"),D1r=o(" \u2014 "),yH=a("a"),G1r=o("TFMBartForConditionalGeneration"),O1r=o(" (mBART model)"),V1r=l(),vC=a("li"),b1e=a("strong"),X1r=o("mt5"),z1r=o(" \u2014 "),LH=a("a"),W1r=o("TFMT5ForConditionalGeneration"),Q1r=o(" (mT5 model)"),H1r=l(),FC=a("li"),v1e=a("strong"),U1r=o("pegasus"),J1r=o(" \u2014 "),xH=a("a"),Y1r=o("TFPegasusForConditionalGeneration"),K1r=o(" (Pegasus model)"),Z1r=l(),TC=a("li"),F1e=a("strong"),eTr=o("t5"),oTr=o(" \u2014 "),$H=a("a"),rTr=o("TFT5ForConditionalGeneration"),tTr=o(" (T5 model)"),aTr=l(),F(MC.$$.fragment),uje=l(),nc=a("h2"),EC=a("a"),T1e=a("span"),F(N7.$$.fragment),nTr=l(),M1e=a("span"),sTr=o("TFAutoModelForSequenceClassification"),pje=l(),tr=a("div"),F(j7.$$.fragment),lTr=l(),sc=a("p"),iTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=a("a"),dTr=o("from_pretrained()"),cTr=o(" class method or the "),SH=a("a"),mTr=o("from_config()"),fTr=o(` class
method.`),gTr=l(),D7=a("p"),hTr=o("This class cannot be instantiated directly using "),E1e=a("code"),uTr=o("__init__()"),pTr=o(" (throws an error)."),_Tr=l(),Rt=a("div"),F(G7.$$.fragment),bTr=l(),C1e=a("p"),vTr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FTr=l(),lc=a("p"),TTr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),MTr=o("not"),ETr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),CTr=o("from_pretrained()"),wTr=o(" to load the model weights."),ATr=l(),F(CC.$$.fragment),yTr=l(),kr=a("div"),F(O7.$$.fragment),LTr=l(),A1e=a("p"),xTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Tr=l(),nn=a("p"),kTr=o("The model class to instantiate is selected based on the "),y1e=a("code"),STr=o("model_type"),RTr=o(` property of the config object (either
passed as an argument or loaded from `),L1e=a("code"),PTr=o("pretrained_model_name_or_path"),BTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),ITr=o("pretrained_model_name_or_path"),qTr=o(":"),NTr=l(),oe=a("ul"),wC=a("li"),$1e=a("strong"),jTr=o("albert"),DTr=o(" \u2014 "),PH=a("a"),GTr=o("TFAlbertForSequenceClassification"),OTr=o(" (ALBERT model)"),VTr=l(),AC=a("li"),k1e=a("strong"),XTr=o("bert"),zTr=o(" \u2014 "),BH=a("a"),WTr=o("TFBertForSequenceClassification"),QTr=o(" (BERT model)"),HTr=l(),yC=a("li"),S1e=a("strong"),UTr=o("camembert"),JTr=o(" \u2014 "),IH=a("a"),YTr=o("TFCamembertForSequenceClassification"),KTr=o(" (CamemBERT model)"),ZTr=l(),LC=a("li"),R1e=a("strong"),eMr=o("convbert"),oMr=o(" \u2014 "),qH=a("a"),rMr=o("TFConvBertForSequenceClassification"),tMr=o(" (ConvBERT model)"),aMr=l(),xC=a("li"),P1e=a("strong"),nMr=o("ctrl"),sMr=o(" \u2014 "),NH=a("a"),lMr=o("TFCTRLForSequenceClassification"),iMr=o(" (CTRL model)"),dMr=l(),$C=a("li"),B1e=a("strong"),cMr=o("deberta"),mMr=o(" \u2014 "),jH=a("a"),fMr=o("TFDebertaForSequenceClassification"),gMr=o(" (DeBERTa model)"),hMr=l(),kC=a("li"),I1e=a("strong"),uMr=o("deberta-v2"),pMr=o(" \u2014 "),DH=a("a"),_Mr=o("TFDebertaV2ForSequenceClassification"),bMr=o(" (DeBERTa-v2 model)"),vMr=l(),SC=a("li"),q1e=a("strong"),FMr=o("distilbert"),TMr=o(" \u2014 "),GH=a("a"),MMr=o("TFDistilBertForSequenceClassification"),EMr=o(" (DistilBERT model)"),CMr=l(),RC=a("li"),N1e=a("strong"),wMr=o("electra"),AMr=o(" \u2014 "),OH=a("a"),yMr=o("TFElectraForSequenceClassification"),LMr=o(" (ELECTRA model)"),xMr=l(),PC=a("li"),j1e=a("strong"),$Mr=o("flaubert"),kMr=o(" \u2014 "),VH=a("a"),SMr=o("TFFlaubertForSequenceClassification"),RMr=o(" (FlauBERT model)"),PMr=l(),BC=a("li"),D1e=a("strong"),BMr=o("funnel"),IMr=o(" \u2014 "),XH=a("a"),qMr=o("TFFunnelForSequenceClassification"),NMr=o(" (Funnel Transformer model)"),jMr=l(),IC=a("li"),G1e=a("strong"),DMr=o("gpt2"),GMr=o(" \u2014 "),zH=a("a"),OMr=o("TFGPT2ForSequenceClassification"),VMr=o(" (OpenAI GPT-2 model)"),XMr=l(),qC=a("li"),O1e=a("strong"),zMr=o("gptj"),WMr=o(" \u2014 "),WH=a("a"),QMr=o("TFGPTJForSequenceClassification"),HMr=o(" (GPT-J model)"),UMr=l(),NC=a("li"),V1e=a("strong"),JMr=o("layoutlm"),YMr=o(" \u2014 "),QH=a("a"),KMr=o("TFLayoutLMForSequenceClassification"),ZMr=o(" (LayoutLM model)"),e4r=l(),jC=a("li"),X1e=a("strong"),o4r=o("longformer"),r4r=o(" \u2014 "),HH=a("a"),t4r=o("TFLongformerForSequenceClassification"),a4r=o(" (Longformer model)"),n4r=l(),DC=a("li"),z1e=a("strong"),s4r=o("mobilebert"),l4r=o(" \u2014 "),UH=a("a"),i4r=o("TFMobileBertForSequenceClassification"),d4r=o(" (MobileBERT model)"),c4r=l(),GC=a("li"),W1e=a("strong"),m4r=o("mpnet"),f4r=o(" \u2014 "),JH=a("a"),g4r=o("TFMPNetForSequenceClassification"),h4r=o(" (MPNet model)"),u4r=l(),OC=a("li"),Q1e=a("strong"),p4r=o("openai-gpt"),_4r=o(" \u2014 "),YH=a("a"),b4r=o("TFOpenAIGPTForSequenceClassification"),v4r=o(" (OpenAI GPT model)"),F4r=l(),VC=a("li"),H1e=a("strong"),T4r=o("rembert"),M4r=o(" \u2014 "),KH=a("a"),E4r=o("TFRemBertForSequenceClassification"),C4r=o(" (RemBERT model)"),w4r=l(),XC=a("li"),U1e=a("strong"),A4r=o("roberta"),y4r=o(" \u2014 "),ZH=a("a"),L4r=o("TFRobertaForSequenceClassification"),x4r=o(" (RoBERTa model)"),$4r=l(),zC=a("li"),J1e=a("strong"),k4r=o("roformer"),S4r=o(" \u2014 "),eU=a("a"),R4r=o("TFRoFormerForSequenceClassification"),P4r=o(" (RoFormer model)"),B4r=l(),WC=a("li"),Y1e=a("strong"),I4r=o("tapas"),q4r=o(" \u2014 "),oU=a("a"),N4r=o("TFTapasForSequenceClassification"),j4r=o(" (TAPAS model)"),D4r=l(),QC=a("li"),K1e=a("strong"),G4r=o("transfo-xl"),O4r=o(" \u2014 "),rU=a("a"),V4r=o("TFTransfoXLForSequenceClassification"),X4r=o(" (Transformer-XL model)"),z4r=l(),HC=a("li"),Z1e=a("strong"),W4r=o("xlm"),Q4r=o(" \u2014 "),tU=a("a"),H4r=o("TFXLMForSequenceClassification"),U4r=o(" (XLM model)"),J4r=l(),UC=a("li"),eTe=a("strong"),Y4r=o("xlm-roberta"),K4r=o(" \u2014 "),aU=a("a"),Z4r=o("TFXLMRobertaForSequenceClassification"),eEr=o(" (XLM-RoBERTa model)"),oEr=l(),JC=a("li"),oTe=a("strong"),rEr=o("xlnet"),tEr=o(" \u2014 "),nU=a("a"),aEr=o("TFXLNetForSequenceClassification"),nEr=o(" (XLNet model)"),sEr=l(),F(YC.$$.fragment),_je=l(),ic=a("h2"),KC=a("a"),rTe=a("span"),F(V7.$$.fragment),lEr=l(),tTe=a("span"),iEr=o("TFAutoModelForMultipleChoice"),bje=l(),ar=a("div"),F(X7.$$.fragment),dEr=l(),dc=a("p"),cEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sU=a("a"),mEr=o("from_pretrained()"),fEr=o(" class method or the "),lU=a("a"),gEr=o("from_config()"),hEr=o(` class
method.`),uEr=l(),z7=a("p"),pEr=o("This class cannot be instantiated directly using "),aTe=a("code"),_Er=o("__init__()"),bEr=o(" (throws an error)."),vEr=l(),Pt=a("div"),F(W7.$$.fragment),FEr=l(),nTe=a("p"),TEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MEr=l(),cc=a("p"),EEr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),CEr=o("not"),wEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),AEr=o("from_pretrained()"),yEr=o(" to load the model weights."),LEr=l(),F(ZC.$$.fragment),xEr=l(),Sr=a("div"),F(Q7.$$.fragment),$Er=l(),lTe=a("p"),kEr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SEr=l(),sn=a("p"),REr=o("The model class to instantiate is selected based on the "),iTe=a("code"),PEr=o("model_type"),BEr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),IEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),NEr=o("pretrained_model_name_or_path"),jEr=o(":"),DEr=l(),ue=a("ul"),e5=a("li"),mTe=a("strong"),GEr=o("albert"),OEr=o(" \u2014 "),dU=a("a"),VEr=o("TFAlbertForMultipleChoice"),XEr=o(" (ALBERT model)"),zEr=l(),o5=a("li"),fTe=a("strong"),WEr=o("bert"),QEr=o(" \u2014 "),cU=a("a"),HEr=o("TFBertForMultipleChoice"),UEr=o(" (BERT model)"),JEr=l(),r5=a("li"),gTe=a("strong"),YEr=o("camembert"),KEr=o(" \u2014 "),mU=a("a"),ZEr=o("TFCamembertForMultipleChoice"),eCr=o(" (CamemBERT model)"),oCr=l(),t5=a("li"),hTe=a("strong"),rCr=o("convbert"),tCr=o(" \u2014 "),fU=a("a"),aCr=o("TFConvBertForMultipleChoice"),nCr=o(" (ConvBERT model)"),sCr=l(),a5=a("li"),uTe=a("strong"),lCr=o("distilbert"),iCr=o(" \u2014 "),gU=a("a"),dCr=o("TFDistilBertForMultipleChoice"),cCr=o(" (DistilBERT model)"),mCr=l(),n5=a("li"),pTe=a("strong"),fCr=o("electra"),gCr=o(" \u2014 "),hU=a("a"),hCr=o("TFElectraForMultipleChoice"),uCr=o(" (ELECTRA model)"),pCr=l(),s5=a("li"),_Te=a("strong"),_Cr=o("flaubert"),bCr=o(" \u2014 "),uU=a("a"),vCr=o("TFFlaubertForMultipleChoice"),FCr=o(" (FlauBERT model)"),TCr=l(),l5=a("li"),bTe=a("strong"),MCr=o("funnel"),ECr=o(" \u2014 "),pU=a("a"),CCr=o("TFFunnelForMultipleChoice"),wCr=o(" (Funnel Transformer model)"),ACr=l(),i5=a("li"),vTe=a("strong"),yCr=o("longformer"),LCr=o(" \u2014 "),_U=a("a"),xCr=o("TFLongformerForMultipleChoice"),$Cr=o(" (Longformer model)"),kCr=l(),d5=a("li"),FTe=a("strong"),SCr=o("mobilebert"),RCr=o(" \u2014 "),bU=a("a"),PCr=o("TFMobileBertForMultipleChoice"),BCr=o(" (MobileBERT model)"),ICr=l(),c5=a("li"),TTe=a("strong"),qCr=o("mpnet"),NCr=o(" \u2014 "),vU=a("a"),jCr=o("TFMPNetForMultipleChoice"),DCr=o(" (MPNet model)"),GCr=l(),m5=a("li"),MTe=a("strong"),OCr=o("rembert"),VCr=o(" \u2014 "),FU=a("a"),XCr=o("TFRemBertForMultipleChoice"),zCr=o(" (RemBERT model)"),WCr=l(),f5=a("li"),ETe=a("strong"),QCr=o("roberta"),HCr=o(" \u2014 "),TU=a("a"),UCr=o("TFRobertaForMultipleChoice"),JCr=o(" (RoBERTa model)"),YCr=l(),g5=a("li"),CTe=a("strong"),KCr=o("roformer"),ZCr=o(" \u2014 "),MU=a("a"),e5r=o("TFRoFormerForMultipleChoice"),o5r=o(" (RoFormer model)"),r5r=l(),h5=a("li"),wTe=a("strong"),t5r=o("xlm"),a5r=o(" \u2014 "),EU=a("a"),n5r=o("TFXLMForMultipleChoice"),s5r=o(" (XLM model)"),l5r=l(),u5=a("li"),ATe=a("strong"),i5r=o("xlm-roberta"),d5r=o(" \u2014 "),CU=a("a"),c5r=o("TFXLMRobertaForMultipleChoice"),m5r=o(" (XLM-RoBERTa model)"),f5r=l(),p5=a("li"),yTe=a("strong"),g5r=o("xlnet"),h5r=o(" \u2014 "),wU=a("a"),u5r=o("TFXLNetForMultipleChoice"),p5r=o(" (XLNet model)"),_5r=l(),F(_5.$$.fragment),vje=l(),mc=a("h2"),b5=a("a"),LTe=a("span"),F(H7.$$.fragment),b5r=l(),xTe=a("span"),v5r=o("TFAutoModelForNextSentencePrediction"),Fje=l(),nr=a("div"),F(U7.$$.fragment),F5r=l(),fc=a("p"),T5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AU=a("a"),M5r=o("from_pretrained()"),E5r=o(" class method or the "),yU=a("a"),C5r=o("from_config()"),w5r=o(` class
method.`),A5r=l(),J7=a("p"),y5r=o("This class cannot be instantiated directly using "),$Te=a("code"),L5r=o("__init__()"),x5r=o(" (throws an error)."),$5r=l(),Bt=a("div"),F(Y7.$$.fragment),k5r=l(),kTe=a("p"),S5r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),R5r=l(),gc=a("p"),P5r=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),B5r=o("not"),I5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),q5r=o("from_pretrained()"),N5r=o(" to load the model weights."),j5r=l(),F(v5.$$.fragment),D5r=l(),Rr=a("div"),F(K7.$$.fragment),G5r=l(),RTe=a("p"),O5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),V5r=l(),ln=a("p"),X5r=o("The model class to instantiate is selected based on the "),PTe=a("code"),z5r=o("model_type"),W5r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),Q5r=o("pretrained_model_name_or_path"),H5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),U5r=o("pretrained_model_name_or_path"),J5r=o(":"),Y5r=l(),Z7=a("ul"),F5=a("li"),qTe=a("strong"),K5r=o("bert"),Z5r=o(" \u2014 "),xU=a("a"),e3r=o("TFBertForNextSentencePrediction"),o3r=o(" (BERT model)"),r3r=l(),T5=a("li"),NTe=a("strong"),t3r=o("mobilebert"),a3r=o(" \u2014 "),$U=a("a"),n3r=o("TFMobileBertForNextSentencePrediction"),s3r=o(" (MobileBERT model)"),l3r=l(),F(M5.$$.fragment),Tje=l(),hc=a("h2"),E5=a("a"),jTe=a("span"),F(e9.$$.fragment),i3r=l(),DTe=a("span"),d3r=o("TFAutoModelForTableQuestionAnswering"),Mje=l(),sr=a("div"),F(o9.$$.fragment),c3r=l(),uc=a("p"),m3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kU=a("a"),f3r=o("from_pretrained()"),g3r=o(" class method or the "),SU=a("a"),h3r=o("from_config()"),u3r=o(` class
method.`),p3r=l(),r9=a("p"),_3r=o("This class cannot be instantiated directly using "),GTe=a("code"),b3r=o("__init__()"),v3r=o(" (throws an error)."),F3r=l(),It=a("div"),F(t9.$$.fragment),T3r=l(),OTe=a("p"),M3r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),E3r=l(),pc=a("p"),C3r=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),w3r=o("not"),A3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),y3r=o("from_pretrained()"),L3r=o(" to load the model weights."),x3r=l(),F(C5.$$.fragment),$3r=l(),Pr=a("div"),F(a9.$$.fragment),k3r=l(),XTe=a("p"),S3r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R3r=l(),dn=a("p"),P3r=o("The model class to instantiate is selected based on the "),zTe=a("code"),B3r=o("model_type"),I3r=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),q3r=o("pretrained_model_name_or_path"),N3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),j3r=o("pretrained_model_name_or_path"),D3r=o(":"),G3r=l(),HTe=a("ul"),w5=a("li"),UTe=a("strong"),O3r=o("tapas"),V3r=o(" \u2014 "),PU=a("a"),X3r=o("TFTapasForQuestionAnswering"),z3r=o(" (TAPAS model)"),W3r=l(),F(A5.$$.fragment),Eje=l(),_c=a("h2"),y5=a("a"),JTe=a("span"),F(n9.$$.fragment),Q3r=l(),YTe=a("span"),H3r=o("TFAutoModelForTokenClassification"),Cje=l(),lr=a("div"),F(s9.$$.fragment),U3r=l(),bc=a("p"),J3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BU=a("a"),Y3r=o("from_pretrained()"),K3r=o(" class method or the "),IU=a("a"),Z3r=o("from_config()"),ewr=o(` class
method.`),owr=l(),l9=a("p"),rwr=o("This class cannot be instantiated directly using "),KTe=a("code"),twr=o("__init__()"),awr=o(" (throws an error)."),nwr=l(),qt=a("div"),F(i9.$$.fragment),swr=l(),ZTe=a("p"),lwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iwr=l(),vc=a("p"),dwr=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),cwr=o("not"),mwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),fwr=o("from_pretrained()"),gwr=o(" to load the model weights."),hwr=l(),F(L5.$$.fragment),uwr=l(),Br=a("div"),F(d9.$$.fragment),pwr=l(),oMe=a("p"),_wr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bwr=l(),cn=a("p"),vwr=o("The model class to instantiate is selected based on the "),rMe=a("code"),Fwr=o("model_type"),Twr=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),Cwr=o("pretrained_model_name_or_path"),wwr=o(":"),Awr=l(),de=a("ul"),x5=a("li"),nMe=a("strong"),ywr=o("albert"),Lwr=o(" \u2014 "),NU=a("a"),xwr=o("TFAlbertForTokenClassification"),$wr=o(" (ALBERT model)"),kwr=l(),$5=a("li"),sMe=a("strong"),Swr=o("bert"),Rwr=o(" \u2014 "),jU=a("a"),Pwr=o("TFBertForTokenClassification"),Bwr=o(" (BERT model)"),Iwr=l(),k5=a("li"),lMe=a("strong"),qwr=o("camembert"),Nwr=o(" \u2014 "),DU=a("a"),jwr=o("TFCamembertForTokenClassification"),Dwr=o(" (CamemBERT model)"),Gwr=l(),S5=a("li"),iMe=a("strong"),Owr=o("convbert"),Vwr=o(" \u2014 "),GU=a("a"),Xwr=o("TFConvBertForTokenClassification"),zwr=o(" (ConvBERT model)"),Wwr=l(),R5=a("li"),dMe=a("strong"),Qwr=o("deberta"),Hwr=o(" \u2014 "),OU=a("a"),Uwr=o("TFDebertaForTokenClassification"),Jwr=o(" (DeBERTa model)"),Ywr=l(),P5=a("li"),cMe=a("strong"),Kwr=o("deberta-v2"),Zwr=o(" \u2014 "),VU=a("a"),e0r=o("TFDebertaV2ForTokenClassification"),o0r=o(" (DeBERTa-v2 model)"),r0r=l(),B5=a("li"),mMe=a("strong"),t0r=o("distilbert"),a0r=o(" \u2014 "),XU=a("a"),n0r=o("TFDistilBertForTokenClassification"),s0r=o(" (DistilBERT model)"),l0r=l(),I5=a("li"),fMe=a("strong"),i0r=o("electra"),d0r=o(" \u2014 "),zU=a("a"),c0r=o("TFElectraForTokenClassification"),m0r=o(" (ELECTRA model)"),f0r=l(),q5=a("li"),gMe=a("strong"),g0r=o("flaubert"),h0r=o(" \u2014 "),WU=a("a"),u0r=o("TFFlaubertForTokenClassification"),p0r=o(" (FlauBERT model)"),_0r=l(),N5=a("li"),hMe=a("strong"),b0r=o("funnel"),v0r=o(" \u2014 "),QU=a("a"),F0r=o("TFFunnelForTokenClassification"),T0r=o(" (Funnel Transformer model)"),M0r=l(),j5=a("li"),uMe=a("strong"),E0r=o("layoutlm"),C0r=o(" \u2014 "),HU=a("a"),w0r=o("TFLayoutLMForTokenClassification"),A0r=o(" (LayoutLM model)"),y0r=l(),D5=a("li"),pMe=a("strong"),L0r=o("longformer"),x0r=o(" \u2014 "),UU=a("a"),$0r=o("TFLongformerForTokenClassification"),k0r=o(" (Longformer model)"),S0r=l(),G5=a("li"),_Me=a("strong"),R0r=o("mobilebert"),P0r=o(" \u2014 "),JU=a("a"),B0r=o("TFMobileBertForTokenClassification"),I0r=o(" (MobileBERT model)"),q0r=l(),O5=a("li"),bMe=a("strong"),N0r=o("mpnet"),j0r=o(" \u2014 "),YU=a("a"),D0r=o("TFMPNetForTokenClassification"),G0r=o(" (MPNet model)"),O0r=l(),V5=a("li"),vMe=a("strong"),V0r=o("rembert"),X0r=o(" \u2014 "),KU=a("a"),z0r=o("TFRemBertForTokenClassification"),W0r=o(" (RemBERT model)"),Q0r=l(),X5=a("li"),FMe=a("strong"),H0r=o("roberta"),U0r=o(" \u2014 "),ZU=a("a"),J0r=o("TFRobertaForTokenClassification"),Y0r=o(" (RoBERTa model)"),K0r=l(),z5=a("li"),TMe=a("strong"),Z0r=o("roformer"),eAr=o(" \u2014 "),eJ=a("a"),oAr=o("TFRoFormerForTokenClassification"),rAr=o(" (RoFormer model)"),tAr=l(),W5=a("li"),MMe=a("strong"),aAr=o("xlm"),nAr=o(" \u2014 "),oJ=a("a"),sAr=o("TFXLMForTokenClassification"),lAr=o(" (XLM model)"),iAr=l(),Q5=a("li"),EMe=a("strong"),dAr=o("xlm-roberta"),cAr=o(" \u2014 "),rJ=a("a"),mAr=o("TFXLMRobertaForTokenClassification"),fAr=o(" (XLM-RoBERTa model)"),gAr=l(),H5=a("li"),CMe=a("strong"),hAr=o("xlnet"),uAr=o(" \u2014 "),tJ=a("a"),pAr=o("TFXLNetForTokenClassification"),_Ar=o(" (XLNet model)"),bAr=l(),F(U5.$$.fragment),wje=l(),Fc=a("h2"),J5=a("a"),wMe=a("span"),F(c9.$$.fragment),vAr=l(),AMe=a("span"),FAr=o("TFAutoModelForQuestionAnswering"),Aje=l(),ir=a("div"),F(m9.$$.fragment),TAr=l(),Tc=a("p"),MAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aJ=a("a"),EAr=o("from_pretrained()"),CAr=o(" class method or the "),nJ=a("a"),wAr=o("from_config()"),AAr=o(` class
method.`),yAr=l(),f9=a("p"),LAr=o("This class cannot be instantiated directly using "),yMe=a("code"),xAr=o("__init__()"),$Ar=o(" (throws an error)."),kAr=l(),Nt=a("div"),F(g9.$$.fragment),SAr=l(),LMe=a("p"),RAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PAr=l(),Mc=a("p"),BAr=o(`Note:
Loading a model from its configuration file does `),xMe=a("strong"),IAr=o("not"),qAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),NAr=o("from_pretrained()"),jAr=o(" to load the model weights."),DAr=l(),F(Y5.$$.fragment),GAr=l(),Ir=a("div"),F(h9.$$.fragment),OAr=l(),$Me=a("p"),VAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XAr=l(),mn=a("p"),zAr=o("The model class to instantiate is selected based on the "),kMe=a("code"),WAr=o("model_type"),QAr=o(` property of the config object (either
passed as an argument or loaded from `),SMe=a("code"),HAr=o("pretrained_model_name_or_path"),UAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(":"),KAr=l(),ce=a("ul"),K5=a("li"),PMe=a("strong"),ZAr=o("albert"),e6r=o(" \u2014 "),lJ=a("a"),o6r=o("TFAlbertForQuestionAnswering"),r6r=o(" (ALBERT model)"),t6r=l(),Z5=a("li"),BMe=a("strong"),a6r=o("bert"),n6r=o(" \u2014 "),iJ=a("a"),s6r=o("TFBertForQuestionAnswering"),l6r=o(" (BERT model)"),i6r=l(),e3=a("li"),IMe=a("strong"),d6r=o("camembert"),c6r=o(" \u2014 "),dJ=a("a"),m6r=o("TFCamembertForQuestionAnswering"),f6r=o(" (CamemBERT model)"),g6r=l(),o3=a("li"),qMe=a("strong"),h6r=o("convbert"),u6r=o(" \u2014 "),cJ=a("a"),p6r=o("TFConvBertForQuestionAnswering"),_6r=o(" (ConvBERT model)"),b6r=l(),r3=a("li"),NMe=a("strong"),v6r=o("deberta"),F6r=o(" \u2014 "),mJ=a("a"),T6r=o("TFDebertaForQuestionAnswering"),M6r=o(" (DeBERTa model)"),E6r=l(),t3=a("li"),jMe=a("strong"),C6r=o("deberta-v2"),w6r=o(" \u2014 "),fJ=a("a"),A6r=o("TFDebertaV2ForQuestionAnswering"),y6r=o(" (DeBERTa-v2 model)"),L6r=l(),a3=a("li"),DMe=a("strong"),x6r=o("distilbert"),$6r=o(" \u2014 "),gJ=a("a"),k6r=o("TFDistilBertForQuestionAnswering"),S6r=o(" (DistilBERT model)"),R6r=l(),n3=a("li"),GMe=a("strong"),P6r=o("electra"),B6r=o(" \u2014 "),hJ=a("a"),I6r=o("TFElectraForQuestionAnswering"),q6r=o(" (ELECTRA model)"),N6r=l(),s3=a("li"),OMe=a("strong"),j6r=o("flaubert"),D6r=o(" \u2014 "),uJ=a("a"),G6r=o("TFFlaubertForQuestionAnsweringSimple"),O6r=o(" (FlauBERT model)"),V6r=l(),l3=a("li"),VMe=a("strong"),X6r=o("funnel"),z6r=o(" \u2014 "),pJ=a("a"),W6r=o("TFFunnelForQuestionAnswering"),Q6r=o(" (Funnel Transformer model)"),H6r=l(),i3=a("li"),XMe=a("strong"),U6r=o("gptj"),J6r=o(" \u2014 "),_J=a("a"),Y6r=o("TFGPTJForQuestionAnswering"),K6r=o(" (GPT-J model)"),Z6r=l(),d3=a("li"),zMe=a("strong"),eyr=o("longformer"),oyr=o(" \u2014 "),bJ=a("a"),ryr=o("TFLongformerForQuestionAnswering"),tyr=o(" (Longformer model)"),ayr=l(),c3=a("li"),WMe=a("strong"),nyr=o("mobilebert"),syr=o(" \u2014 "),vJ=a("a"),lyr=o("TFMobileBertForQuestionAnswering"),iyr=o(" (MobileBERT model)"),dyr=l(),m3=a("li"),QMe=a("strong"),cyr=o("mpnet"),myr=o(" \u2014 "),FJ=a("a"),fyr=o("TFMPNetForQuestionAnswering"),gyr=o(" (MPNet model)"),hyr=l(),f3=a("li"),HMe=a("strong"),uyr=o("rembert"),pyr=o(" \u2014 "),TJ=a("a"),_yr=o("TFRemBertForQuestionAnswering"),byr=o(" (RemBERT model)"),vyr=l(),g3=a("li"),UMe=a("strong"),Fyr=o("roberta"),Tyr=o(" \u2014 "),MJ=a("a"),Myr=o("TFRobertaForQuestionAnswering"),Eyr=o(" (RoBERTa model)"),Cyr=l(),h3=a("li"),JMe=a("strong"),wyr=o("roformer"),Ayr=o(" \u2014 "),EJ=a("a"),yyr=o("TFRoFormerForQuestionAnswering"),Lyr=o(" (RoFormer model)"),xyr=l(),u3=a("li"),YMe=a("strong"),$yr=o("xlm"),kyr=o(" \u2014 "),CJ=a("a"),Syr=o("TFXLMForQuestionAnsweringSimple"),Ryr=o(" (XLM model)"),Pyr=l(),p3=a("li"),KMe=a("strong"),Byr=o("xlm-roberta"),Iyr=o(" \u2014 "),wJ=a("a"),qyr=o("TFXLMRobertaForQuestionAnswering"),Nyr=o(" (XLM-RoBERTa model)"),jyr=l(),_3=a("li"),ZMe=a("strong"),Dyr=o("xlnet"),Gyr=o(" \u2014 "),AJ=a("a"),Oyr=o("TFXLNetForQuestionAnsweringSimple"),Vyr=o(" (XLNet model)"),Xyr=l(),F(b3.$$.fragment),yje=l(),Ec=a("h2"),v3=a("a"),e4e=a("span"),F(u9.$$.fragment),zyr=l(),o4e=a("span"),Wyr=o("TFAutoModelForVision2Seq"),Lje=l(),dr=a("div"),F(p9.$$.fragment),Qyr=l(),Cc=a("p"),Hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yJ=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" class method or the "),LJ=a("a"),Yyr=o("from_config()"),Kyr=o(` class
method.`),Zyr=l(),_9=a("p"),eLr=o("This class cannot be instantiated directly using "),r4e=a("code"),oLr=o("__init__()"),rLr=o(" (throws an error)."),tLr=l(),jt=a("div"),F(b9.$$.fragment),aLr=l(),t4e=a("p"),nLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sLr=l(),wc=a("p"),lLr=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),iLr=o("not"),dLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),cLr=o("from_pretrained()"),mLr=o(" to load the model weights."),fLr=l(),F(F3.$$.fragment),gLr=l(),qr=a("div"),F(v9.$$.fragment),hLr=l(),n4e=a("p"),uLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pLr=l(),fn=a("p"),_Lr=o("The model class to instantiate is selected based on the "),s4e=a("code"),bLr=o("model_type"),vLr=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),CLr=l(),d4e=a("ul"),T3=a("li"),c4e=a("strong"),wLr=o("vision-encoder-decoder"),ALr=o(" \u2014 "),$J=a("a"),yLr=o("TFVisionEncoderDecoderModel"),LLr=o(" (Vision Encoder decoder model)"),xLr=l(),F(M3.$$.fragment),xje=l(),Ac=a("h2"),E3=a("a"),m4e=a("span"),F(F9.$$.fragment),$Lr=l(),f4e=a("span"),kLr=o("TFAutoModelForSpeechSeq2Seq"),$je=l(),cr=a("div"),F(T9.$$.fragment),SLr=l(),yc=a("p"),RLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=a("a"),PLr=o("from_pretrained()"),BLr=o(" class method or the "),SJ=a("a"),ILr=o("from_config()"),qLr=o(` class
method.`),NLr=l(),M9=a("p"),jLr=o("This class cannot be instantiated directly using "),g4e=a("code"),DLr=o("__init__()"),GLr=o(" (throws an error)."),OLr=l(),Dt=a("div"),F(E9.$$.fragment),VLr=l(),h4e=a("p"),XLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zLr=l(),Lc=a("p"),WLr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),QLr=o("not"),HLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),ULr=o("from_pretrained()"),JLr=o(" to load the model weights."),YLr=l(),F(C3.$$.fragment),KLr=l(),Nr=a("div"),F(C9.$$.fragment),ZLr=l(),p4e=a("p"),e8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),o8r=l(),gn=a("p"),r8r=o("The model class to instantiate is selected based on the "),_4e=a("code"),t8r=o("model_type"),a8r=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),n8r=o("pretrained_model_name_or_path"),s8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),l8r=o("pretrained_model_name_or_path"),i8r=o(":"),d8r=l(),F4e=a("ul"),w3=a("li"),T4e=a("strong"),c8r=o("speech_to_text"),m8r=o(" \u2014 "),PJ=a("a"),f8r=o("TFSpeech2TextForConditionalGeneration"),g8r=o(" (Speech2Text model)"),h8r=l(),F(A3.$$.fragment),kje=l(),xc=a("h2"),y3=a("a"),M4e=a("span"),F(w9.$$.fragment),u8r=l(),E4e=a("span"),p8r=o("FlaxAutoModel"),Sje=l(),mr=a("div"),F(A9.$$.fragment),_8r=l(),$c=a("p"),b8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BJ=a("a"),v8r=o("from_pretrained()"),F8r=o(" class method or the "),IJ=a("a"),T8r=o("from_config()"),M8r=o(` class
method.`),E8r=l(),y9=a("p"),C8r=o("This class cannot be instantiated directly using "),C4e=a("code"),w8r=o("__init__()"),A8r=o(" (throws an error)."),y8r=l(),Gt=a("div"),F(L9.$$.fragment),L8r=l(),w4e=a("p"),x8r=o("Instantiates one of the base model classes of the library from a configuration."),$8r=l(),kc=a("p"),k8r=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),S8r=o("not"),R8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),P8r=o("from_pretrained()"),B8r=o(" to load the model weights."),I8r=l(),F(L3.$$.fragment),q8r=l(),jr=a("div"),F(x9.$$.fragment),N8r=l(),y4e=a("p"),j8r=o("Instantiate one of the base model classes of the library from a pretrained model."),D8r=l(),hn=a("p"),G8r=o("The model class to instantiate is selected based on the "),L4e=a("code"),O8r=o("model_type"),V8r=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),X8r=o("pretrained_model_name_or_path"),z8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),W8r=o("pretrained_model_name_or_path"),Q8r=o(":"),H8r=l(),te=a("ul"),x3=a("li"),k4e=a("strong"),U8r=o("albert"),J8r=o(" \u2014 "),NJ=a("a"),Y8r=o("FlaxAlbertModel"),K8r=o(" (ALBERT model)"),Z8r=l(),$3=a("li"),S4e=a("strong"),e7r=o("bart"),o7r=o(" \u2014 "),jJ=a("a"),r7r=o("FlaxBartModel"),t7r=o(" (BART model)"),a7r=l(),k3=a("li"),R4e=a("strong"),n7r=o("beit"),s7r=o(" \u2014 "),DJ=a("a"),l7r=o("FlaxBeitModel"),i7r=o(" (BEiT model)"),d7r=l(),S3=a("li"),P4e=a("strong"),c7r=o("bert"),m7r=o(" \u2014 "),GJ=a("a"),f7r=o("FlaxBertModel"),g7r=o(" (BERT model)"),h7r=l(),R3=a("li"),B4e=a("strong"),u7r=o("big_bird"),p7r=o(" \u2014 "),OJ=a("a"),_7r=o("FlaxBigBirdModel"),b7r=o(" (BigBird model)"),v7r=l(),P3=a("li"),I4e=a("strong"),F7r=o("blenderbot"),T7r=o(" \u2014 "),VJ=a("a"),M7r=o("FlaxBlenderbotModel"),E7r=o(" (Blenderbot model)"),C7r=l(),B3=a("li"),q4e=a("strong"),w7r=o("blenderbot-small"),A7r=o(" \u2014 "),XJ=a("a"),y7r=o("FlaxBlenderbotSmallModel"),L7r=o(" (BlenderbotSmall model)"),x7r=l(),I3=a("li"),N4e=a("strong"),$7r=o("clip"),k7r=o(" \u2014 "),zJ=a("a"),S7r=o("FlaxCLIPModel"),R7r=o(" (CLIP model)"),P7r=l(),q3=a("li"),j4e=a("strong"),B7r=o("distilbert"),I7r=o(" \u2014 "),WJ=a("a"),q7r=o("FlaxDistilBertModel"),N7r=o(" (DistilBERT model)"),j7r=l(),N3=a("li"),D4e=a("strong"),D7r=o("electra"),G7r=o(" \u2014 "),QJ=a("a"),O7r=o("FlaxElectraModel"),V7r=o(" (ELECTRA model)"),X7r=l(),j3=a("li"),G4e=a("strong"),z7r=o("gpt2"),W7r=o(" \u2014 "),HJ=a("a"),Q7r=o("FlaxGPT2Model"),H7r=o(" (OpenAI GPT-2 model)"),U7r=l(),D3=a("li"),O4e=a("strong"),J7r=o("gpt_neo"),Y7r=o(" \u2014 "),UJ=a("a"),K7r=o("FlaxGPTNeoModel"),Z7r=o(" (GPT Neo model)"),e9r=l(),G3=a("li"),V4e=a("strong"),o9r=o("gptj"),r9r=o(" \u2014 "),JJ=a("a"),t9r=o("FlaxGPTJModel"),a9r=o(" (GPT-J model)"),n9r=l(),O3=a("li"),X4e=a("strong"),s9r=o("marian"),l9r=o(" \u2014 "),YJ=a("a"),i9r=o("FlaxMarianModel"),d9r=o(" (Marian model)"),c9r=l(),V3=a("li"),z4e=a("strong"),m9r=o("mbart"),f9r=o(" \u2014 "),KJ=a("a"),g9r=o("FlaxMBartModel"),h9r=o(" (mBART model)"),u9r=l(),X3=a("li"),W4e=a("strong"),p9r=o("mt5"),_9r=o(" \u2014 "),ZJ=a("a"),b9r=o("FlaxMT5Model"),v9r=o(" (mT5 model)"),F9r=l(),z3=a("li"),Q4e=a("strong"),T9r=o("pegasus"),M9r=o(" \u2014 "),eY=a("a"),E9r=o("FlaxPegasusModel"),C9r=o(" (Pegasus model)"),w9r=l(),W3=a("li"),H4e=a("strong"),A9r=o("roberta"),y9r=o(" \u2014 "),oY=a("a"),L9r=o("FlaxRobertaModel"),x9r=o(" (RoBERTa model)"),$9r=l(),Q3=a("li"),U4e=a("strong"),k9r=o("roformer"),S9r=o(" \u2014 "),rY=a("a"),R9r=o("FlaxRoFormerModel"),P9r=o(" (RoFormer model)"),B9r=l(),H3=a("li"),J4e=a("strong"),I9r=o("t5"),q9r=o(" \u2014 "),tY=a("a"),N9r=o("FlaxT5Model"),j9r=o(" (T5 model)"),D9r=l(),U3=a("li"),Y4e=a("strong"),G9r=o("vision-text-dual-encoder"),O9r=o(" \u2014 "),aY=a("a"),V9r=o("FlaxVisionTextDualEncoderModel"),X9r=o(" (VisionTextDualEncoder model)"),z9r=l(),J3=a("li"),K4e=a("strong"),W9r=o("vit"),Q9r=o(" \u2014 "),nY=a("a"),H9r=o("FlaxViTModel"),U9r=o(" (ViT model)"),J9r=l(),Y3=a("li"),Z4e=a("strong"),Y9r=o("wav2vec2"),K9r=o(" \u2014 "),sY=a("a"),Z9r=o("FlaxWav2Vec2Model"),exr=o(" (Wav2Vec2 model)"),oxr=l(),K3=a("li"),eEe=a("strong"),rxr=o("xglm"),txr=o(" \u2014 "),lY=a("a"),axr=o("FlaxXGLMModel"),nxr=o(" (XGLM model)"),sxr=l(),Z3=a("li"),oEe=a("strong"),lxr=o("xlm-roberta"),ixr=o(" \u2014 "),iY=a("a"),dxr=o("FlaxXLMRobertaModel"),cxr=o(" (XLM-RoBERTa model)"),mxr=l(),F(ew.$$.fragment),Rje=l(),Sc=a("h2"),ow=a("a"),rEe=a("span"),F($9.$$.fragment),fxr=l(),tEe=a("span"),gxr=o("FlaxAutoModelForCausalLM"),Pje=l(),fr=a("div"),F(k9.$$.fragment),hxr=l(),Rc=a("p"),uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=a("a"),pxr=o("from_pretrained()"),_xr=o(" class method or the "),cY=a("a"),bxr=o("from_config()"),vxr=o(` class
method.`),Fxr=l(),S9=a("p"),Txr=o("This class cannot be instantiated directly using "),aEe=a("code"),Mxr=o("__init__()"),Exr=o(" (throws an error)."),Cxr=l(),Ot=a("div"),F(R9.$$.fragment),wxr=l(),nEe=a("p"),Axr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yxr=l(),Pc=a("p"),Lxr=o(`Note:
Loading a model from its configuration file does `),sEe=a("strong"),xxr=o("not"),$xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),kxr=o("from_pretrained()"),Sxr=o(" to load the model weights."),Rxr=l(),F(rw.$$.fragment),Pxr=l(),Dr=a("div"),F(P9.$$.fragment),Bxr=l(),lEe=a("p"),Ixr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qxr=l(),un=a("p"),Nxr=o("The model class to instantiate is selected based on the "),iEe=a("code"),jxr=o("model_type"),Dxr=o(` property of the config object (either
passed as an argument or loaded from `),dEe=a("code"),Gxr=o("pretrained_model_name_or_path"),Oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(":"),zxr=l(),Re=a("ul"),tw=a("li"),mEe=a("strong"),Wxr=o("bart"),Qxr=o(" \u2014 "),fY=a("a"),Hxr=o("FlaxBartForCausalLM"),Uxr=o(" (BART model)"),Jxr=l(),aw=a("li"),fEe=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),gY=a("a"),Zxr=o("FlaxBertForCausalLM"),e$r=o(" (BERT model)"),o$r=l(),nw=a("li"),gEe=a("strong"),r$r=o("big_bird"),t$r=o(" \u2014 "),hY=a("a"),a$r=o("FlaxBigBirdForCausalLM"),n$r=o(" (BigBird model)"),s$r=l(),sw=a("li"),hEe=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),uY=a("a"),d$r=o("FlaxElectraForCausalLM"),c$r=o(" (ELECTRA model)"),m$r=l(),lw=a("li"),uEe=a("strong"),f$r=o("gpt2"),g$r=o(" \u2014 "),pY=a("a"),h$r=o("FlaxGPT2LMHeadModel"),u$r=o(" (OpenAI GPT-2 model)"),p$r=l(),iw=a("li"),pEe=a("strong"),_$r=o("gpt_neo"),b$r=o(" \u2014 "),_Y=a("a"),v$r=o("FlaxGPTNeoForCausalLM"),F$r=o(" (GPT Neo model)"),T$r=l(),dw=a("li"),_Ee=a("strong"),M$r=o("gptj"),E$r=o(" \u2014 "),bY=a("a"),C$r=o("FlaxGPTJForCausalLM"),w$r=o(" (GPT-J model)"),A$r=l(),cw=a("li"),bEe=a("strong"),y$r=o("roberta"),L$r=o(" \u2014 "),vY=a("a"),x$r=o("FlaxRobertaForCausalLM"),$$r=o(" (RoBERTa model)"),k$r=l(),mw=a("li"),vEe=a("strong"),S$r=o("xglm"),R$r=o(" \u2014 "),FY=a("a"),P$r=o("FlaxXGLMForCausalLM"),B$r=o(" (XGLM model)"),I$r=l(),F(fw.$$.fragment),Bje=l(),Bc=a("h2"),gw=a("a"),FEe=a("span"),F(B9.$$.fragment),q$r=l(),TEe=a("span"),N$r=o("FlaxAutoModelForPreTraining"),Ije=l(),gr=a("div"),F(I9.$$.fragment),j$r=l(),Ic=a("p"),D$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TY=a("a"),G$r=o("from_pretrained()"),O$r=o(" class method or the "),MY=a("a"),V$r=o("from_config()"),X$r=o(` class
method.`),z$r=l(),q9=a("p"),W$r=o("This class cannot be instantiated directly using "),MEe=a("code"),Q$r=o("__init__()"),H$r=o(" (throws an error)."),U$r=l(),Vt=a("div"),F(N9.$$.fragment),J$r=l(),EEe=a("p"),Y$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K$r=l(),qc=a("p"),Z$r=o(`Note:
Loading a model from its configuration file does `),CEe=a("strong"),ekr=o("not"),okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),rkr=o("from_pretrained()"),tkr=o(" to load the model weights."),akr=l(),F(hw.$$.fragment),nkr=l(),Gr=a("div"),F(j9.$$.fragment),skr=l(),wEe=a("p"),lkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ikr=l(),pn=a("p"),dkr=o("The model class to instantiate is selected based on the "),AEe=a("code"),ckr=o("model_type"),mkr=o(` property of the config object (either
passed as an argument or loaded from `),yEe=a("code"),fkr=o("pretrained_model_name_or_path"),gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),hkr=o("pretrained_model_name_or_path"),ukr=o(":"),pkr=l(),Ee=a("ul"),uw=a("li"),xEe=a("strong"),_kr=o("albert"),bkr=o(" \u2014 "),CY=a("a"),vkr=o("FlaxAlbertForPreTraining"),Fkr=o(" (ALBERT model)"),Tkr=l(),pw=a("li"),$Ee=a("strong"),Mkr=o("bart"),Ekr=o(" \u2014 "),wY=a("a"),Ckr=o("FlaxBartForConditionalGeneration"),wkr=o(" (BART model)"),Akr=l(),_w=a("li"),kEe=a("strong"),ykr=o("bert"),Lkr=o(" \u2014 "),AY=a("a"),xkr=o("FlaxBertForPreTraining"),$kr=o(" (BERT model)"),kkr=l(),bw=a("li"),SEe=a("strong"),Skr=o("big_bird"),Rkr=o(" \u2014 "),yY=a("a"),Pkr=o("FlaxBigBirdForPreTraining"),Bkr=o(" (BigBird model)"),Ikr=l(),vw=a("li"),REe=a("strong"),qkr=o("electra"),Nkr=o(" \u2014 "),LY=a("a"),jkr=o("FlaxElectraForPreTraining"),Dkr=o(" (ELECTRA model)"),Gkr=l(),Fw=a("li"),PEe=a("strong"),Okr=o("mbart"),Vkr=o(" \u2014 "),xY=a("a"),Xkr=o("FlaxMBartForConditionalGeneration"),zkr=o(" (mBART model)"),Wkr=l(),Tw=a("li"),BEe=a("strong"),Qkr=o("mt5"),Hkr=o(" \u2014 "),$Y=a("a"),Ukr=o("FlaxMT5ForConditionalGeneration"),Jkr=o(" (mT5 model)"),Ykr=l(),Mw=a("li"),IEe=a("strong"),Kkr=o("roberta"),Zkr=o(" \u2014 "),kY=a("a"),eSr=o("FlaxRobertaForMaskedLM"),oSr=o(" (RoBERTa model)"),rSr=l(),Ew=a("li"),qEe=a("strong"),tSr=o("roformer"),aSr=o(" \u2014 "),SY=a("a"),nSr=o("FlaxRoFormerForMaskedLM"),sSr=o(" (RoFormer model)"),lSr=l(),Cw=a("li"),NEe=a("strong"),iSr=o("t5"),dSr=o(" \u2014 "),RY=a("a"),cSr=o("FlaxT5ForConditionalGeneration"),mSr=o(" (T5 model)"),fSr=l(),ww=a("li"),jEe=a("strong"),gSr=o("wav2vec2"),hSr=o(" \u2014 "),PY=a("a"),uSr=o("FlaxWav2Vec2ForPreTraining"),pSr=o(" (Wav2Vec2 model)"),_Sr=l(),Aw=a("li"),DEe=a("strong"),bSr=o("xlm-roberta"),vSr=o(" \u2014 "),BY=a("a"),FSr=o("FlaxXLMRobertaForMaskedLM"),TSr=o(" (XLM-RoBERTa model)"),MSr=l(),F(yw.$$.fragment),qje=l(),Nc=a("h2"),Lw=a("a"),GEe=a("span"),F(D9.$$.fragment),ESr=l(),OEe=a("span"),CSr=o("FlaxAutoModelForMaskedLM"),Nje=l(),hr=a("div"),F(G9.$$.fragment),wSr=l(),jc=a("p"),ASr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IY=a("a"),ySr=o("from_pretrained()"),LSr=o(" class method or the "),qY=a("a"),xSr=o("from_config()"),$Sr=o(` class
method.`),kSr=l(),O9=a("p"),SSr=o("This class cannot be instantiated directly using "),VEe=a("code"),RSr=o("__init__()"),PSr=o(" (throws an error)."),BSr=l(),Xt=a("div"),F(V9.$$.fragment),ISr=l(),XEe=a("p"),qSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NSr=l(),Dc=a("p"),jSr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),DSr=o("not"),GSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),OSr=o("from_pretrained()"),VSr=o(" to load the model weights."),XSr=l(),F(xw.$$.fragment),zSr=l(),Or=a("div"),F(X9.$$.fragment),WSr=l(),WEe=a("p"),QSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSr=l(),_n=a("p"),USr=o("The model class to instantiate is selected based on the "),QEe=a("code"),JSr=o("model_type"),YSr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),eRr=o("pretrained_model_name_or_path"),oRr=o(":"),rRr=l(),Le=a("ul"),$w=a("li"),JEe=a("strong"),tRr=o("albert"),aRr=o(" \u2014 "),jY=a("a"),nRr=o("FlaxAlbertForMaskedLM"),sRr=o(" (ALBERT model)"),lRr=l(),kw=a("li"),YEe=a("strong"),iRr=o("bart"),dRr=o(" \u2014 "),DY=a("a"),cRr=o("FlaxBartForConditionalGeneration"),mRr=o(" (BART model)"),fRr=l(),Sw=a("li"),KEe=a("strong"),gRr=o("bert"),hRr=o(" \u2014 "),GY=a("a"),uRr=o("FlaxBertForMaskedLM"),pRr=o(" (BERT model)"),_Rr=l(),Rw=a("li"),ZEe=a("strong"),bRr=o("big_bird"),vRr=o(" \u2014 "),OY=a("a"),FRr=o("FlaxBigBirdForMaskedLM"),TRr=o(" (BigBird model)"),MRr=l(),Pw=a("li"),eCe=a("strong"),ERr=o("distilbert"),CRr=o(" \u2014 "),VY=a("a"),wRr=o("FlaxDistilBertForMaskedLM"),ARr=o(" (DistilBERT model)"),yRr=l(),Bw=a("li"),oCe=a("strong"),LRr=o("electra"),xRr=o(" \u2014 "),XY=a("a"),$Rr=o("FlaxElectraForMaskedLM"),kRr=o(" (ELECTRA model)"),SRr=l(),Iw=a("li"),rCe=a("strong"),RRr=o("mbart"),PRr=o(" \u2014 "),zY=a("a"),BRr=o("FlaxMBartForConditionalGeneration"),IRr=o(" (mBART model)"),qRr=l(),qw=a("li"),tCe=a("strong"),NRr=o("roberta"),jRr=o(" \u2014 "),WY=a("a"),DRr=o("FlaxRobertaForMaskedLM"),GRr=o(" (RoBERTa model)"),ORr=l(),Nw=a("li"),aCe=a("strong"),VRr=o("roformer"),XRr=o(" \u2014 "),QY=a("a"),zRr=o("FlaxRoFormerForMaskedLM"),WRr=o(" (RoFormer model)"),QRr=l(),jw=a("li"),nCe=a("strong"),HRr=o("xlm-roberta"),URr=o(" \u2014 "),HY=a("a"),JRr=o("FlaxXLMRobertaForMaskedLM"),YRr=o(" (XLM-RoBERTa model)"),KRr=l(),F(Dw.$$.fragment),jje=l(),Gc=a("h2"),Gw=a("a"),sCe=a("span"),F(z9.$$.fragment),ZRr=l(),lCe=a("span"),ePr=o("FlaxAutoModelForSeq2SeqLM"),Dje=l(),ur=a("div"),F(W9.$$.fragment),oPr=l(),Oc=a("p"),rPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=a("a"),tPr=o("from_pretrained()"),aPr=o(" class method or the "),JY=a("a"),nPr=o("from_config()"),sPr=o(` class
method.`),lPr=l(),Q9=a("p"),iPr=o("This class cannot be instantiated directly using "),iCe=a("code"),dPr=o("__init__()"),cPr=o(" (throws an error)."),mPr=l(),zt=a("div"),F(H9.$$.fragment),fPr=l(),dCe=a("p"),gPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hPr=l(),Vc=a("p"),uPr=o(`Note:
Loading a model from its configuration file does `),cCe=a("strong"),pPr=o("not"),_Pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),bPr=o("from_pretrained()"),vPr=o(" to load the model weights."),FPr=l(),F(Ow.$$.fragment),TPr=l(),Vr=a("div"),F(U9.$$.fragment),MPr=l(),mCe=a("p"),EPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CPr=l(),bn=a("p"),wPr=o("The model class to instantiate is selected based on the "),fCe=a("code"),APr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),gCe=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=a("code"),$Pr=o("pretrained_model_name_or_path"),kPr=o(":"),SPr=l(),Pe=a("ul"),Vw=a("li"),uCe=a("strong"),RPr=o("bart"),PPr=o(" \u2014 "),KY=a("a"),BPr=o("FlaxBartForConditionalGeneration"),IPr=o(" (BART model)"),qPr=l(),Xw=a("li"),pCe=a("strong"),NPr=o("blenderbot"),jPr=o(" \u2014 "),ZY=a("a"),DPr=o("FlaxBlenderbotForConditionalGeneration"),GPr=o(" (Blenderbot model)"),OPr=l(),zw=a("li"),_Ce=a("strong"),VPr=o("blenderbot-small"),XPr=o(" \u2014 "),eK=a("a"),zPr=o("FlaxBlenderbotSmallForConditionalGeneration"),WPr=o(" (BlenderbotSmall model)"),QPr=l(),Ww=a("li"),bCe=a("strong"),HPr=o("encoder-decoder"),UPr=o(" \u2014 "),oK=a("a"),JPr=o("FlaxEncoderDecoderModel"),YPr=o(" (Encoder decoder model)"),KPr=l(),Qw=a("li"),vCe=a("strong"),ZPr=o("marian"),eBr=o(" \u2014 "),rK=a("a"),oBr=o("FlaxMarianMTModel"),rBr=o(" (Marian model)"),tBr=l(),Hw=a("li"),FCe=a("strong"),aBr=o("mbart"),nBr=o(" \u2014 "),tK=a("a"),sBr=o("FlaxMBartForConditionalGeneration"),lBr=o(" (mBART model)"),iBr=l(),Uw=a("li"),TCe=a("strong"),dBr=o("mt5"),cBr=o(" \u2014 "),aK=a("a"),mBr=o("FlaxMT5ForConditionalGeneration"),fBr=o(" (mT5 model)"),gBr=l(),Jw=a("li"),MCe=a("strong"),hBr=o("pegasus"),uBr=o(" \u2014 "),nK=a("a"),pBr=o("FlaxPegasusForConditionalGeneration"),_Br=o(" (Pegasus model)"),bBr=l(),Yw=a("li"),ECe=a("strong"),vBr=o("t5"),FBr=o(" \u2014 "),sK=a("a"),TBr=o("FlaxT5ForConditionalGeneration"),MBr=o(" (T5 model)"),EBr=l(),F(Kw.$$.fragment),Gje=l(),Xc=a("h2"),Zw=a("a"),CCe=a("span"),F(J9.$$.fragment),CBr=l(),wCe=a("span"),wBr=o("FlaxAutoModelForSequenceClassification"),Oje=l(),pr=a("div"),F(Y9.$$.fragment),ABr=l(),zc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lK=a("a"),LBr=o("from_pretrained()"),xBr=o(" class method or the "),iK=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),K9=a("p"),RBr=o("This class cannot be instantiated directly using "),ACe=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Wt=a("div"),F(Z9.$$.fragment),qBr=l(),yCe=a("p"),NBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jBr=l(),Wc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(e0.$$.fragment),WBr=l(),Xr=a("div"),F(ex.$$.fragment),QBr=l(),xCe=a("p"),HBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UBr=l(),vn=a("p"),JBr=o("The model class to instantiate is selected based on the "),$Ce=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),kCe=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),xe=a("ul"),o0=a("li"),RCe=a("strong"),aIr=o("albert"),nIr=o(" \u2014 "),cK=a("a"),sIr=o("FlaxAlbertForSequenceClassification"),lIr=o(" (ALBERT model)"),iIr=l(),r0=a("li"),PCe=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),mK=a("a"),mIr=o("FlaxBartForSequenceClassification"),fIr=o(" (BART model)"),gIr=l(),t0=a("li"),BCe=a("strong"),hIr=o("bert"),uIr=o(" \u2014 "),fK=a("a"),pIr=o("FlaxBertForSequenceClassification"),_Ir=o(" (BERT model)"),bIr=l(),a0=a("li"),ICe=a("strong"),vIr=o("big_bird"),FIr=o(" \u2014 "),gK=a("a"),TIr=o("FlaxBigBirdForSequenceClassification"),MIr=o(" (BigBird model)"),EIr=l(),n0=a("li"),qCe=a("strong"),CIr=o("distilbert"),wIr=o(" \u2014 "),hK=a("a"),AIr=o("FlaxDistilBertForSequenceClassification"),yIr=o(" (DistilBERT model)"),LIr=l(),s0=a("li"),NCe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),uK=a("a"),kIr=o("FlaxElectraForSequenceClassification"),SIr=o(" (ELECTRA model)"),RIr=l(),l0=a("li"),jCe=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),pK=a("a"),IIr=o("FlaxMBartForSequenceClassification"),qIr=o(" (mBART model)"),NIr=l(),i0=a("li"),DCe=a("strong"),jIr=o("roberta"),DIr=o(" \u2014 "),_K=a("a"),GIr=o("FlaxRobertaForSequenceClassification"),OIr=o(" (RoBERTa model)"),VIr=l(),d0=a("li"),GCe=a("strong"),XIr=o("roformer"),zIr=o(" \u2014 "),bK=a("a"),WIr=o("FlaxRoFormerForSequenceClassification"),QIr=o(" (RoFormer model)"),HIr=l(),c0=a("li"),OCe=a("strong"),UIr=o("xlm-roberta"),JIr=o(" \u2014 "),vK=a("a"),YIr=o("FlaxXLMRobertaForSequenceClassification"),KIr=o(" (XLM-RoBERTa model)"),ZIr=l(),F(m0.$$.fragment),Vje=l(),Qc=a("h2"),f0=a("a"),VCe=a("span"),F(ox.$$.fragment),eqr=l(),XCe=a("span"),oqr=o("FlaxAutoModelForQuestionAnswering"),Xje=l(),_r=a("div"),F(rx.$$.fragment),rqr=l(),Hc=a("p"),tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FK=a("a"),aqr=o("from_pretrained()"),nqr=o(" class method or the "),TK=a("a"),sqr=o("from_config()"),lqr=o(` class
method.`),iqr=l(),tx=a("p"),dqr=o("This class cannot be instantiated directly using "),zCe=a("code"),cqr=o("__init__()"),mqr=o(" (throws an error)."),fqr=l(),Qt=a("div"),F(ax.$$.fragment),gqr=l(),WCe=a("p"),hqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uqr=l(),Uc=a("p"),pqr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),_qr=o("not"),bqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),vqr=o("from_pretrained()"),Fqr=o(" to load the model weights."),Tqr=l(),F(g0.$$.fragment),Mqr=l(),zr=a("div"),F(nx.$$.fragment),Eqr=l(),HCe=a("p"),Cqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wqr=l(),Fn=a("p"),Aqr=o("The model class to instantiate is selected based on the "),UCe=a("code"),yqr=o("model_type"),Lqr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),kqr=o("pretrained_model_name_or_path"),Sqr=o(":"),Rqr=l(),$e=a("ul"),h0=a("li"),KCe=a("strong"),Pqr=o("albert"),Bqr=o(" \u2014 "),EK=a("a"),Iqr=o("FlaxAlbertForQuestionAnswering"),qqr=o(" (ALBERT model)"),Nqr=l(),u0=a("li"),ZCe=a("strong"),jqr=o("bart"),Dqr=o(" \u2014 "),CK=a("a"),Gqr=o("FlaxBartForQuestionAnswering"),Oqr=o(" (BART model)"),Vqr=l(),p0=a("li"),e5e=a("strong"),Xqr=o("bert"),zqr=o(" \u2014 "),wK=a("a"),Wqr=o("FlaxBertForQuestionAnswering"),Qqr=o(" (BERT model)"),Hqr=l(),_0=a("li"),o5e=a("strong"),Uqr=o("big_bird"),Jqr=o(" \u2014 "),AK=a("a"),Yqr=o("FlaxBigBirdForQuestionAnswering"),Kqr=o(" (BigBird model)"),Zqr=l(),b0=a("li"),r5e=a("strong"),eNr=o("distilbert"),oNr=o(" \u2014 "),yK=a("a"),rNr=o("FlaxDistilBertForQuestionAnswering"),tNr=o(" (DistilBERT model)"),aNr=l(),v0=a("li"),t5e=a("strong"),nNr=o("electra"),sNr=o(" \u2014 "),LK=a("a"),lNr=o("FlaxElectraForQuestionAnswering"),iNr=o(" (ELECTRA model)"),dNr=l(),F0=a("li"),a5e=a("strong"),cNr=o("mbart"),mNr=o(" \u2014 "),xK=a("a"),fNr=o("FlaxMBartForQuestionAnswering"),gNr=o(" (mBART model)"),hNr=l(),T0=a("li"),n5e=a("strong"),uNr=o("roberta"),pNr=o(" \u2014 "),$K=a("a"),_Nr=o("FlaxRobertaForQuestionAnswering"),bNr=o(" (RoBERTa model)"),vNr=l(),M0=a("li"),s5e=a("strong"),FNr=o("roformer"),TNr=o(" \u2014 "),kK=a("a"),MNr=o("FlaxRoFormerForQuestionAnswering"),ENr=o(" (RoFormer model)"),CNr=l(),E0=a("li"),l5e=a("strong"),wNr=o("xlm-roberta"),ANr=o(" \u2014 "),SK=a("a"),yNr=o("FlaxXLMRobertaForQuestionAnswering"),LNr=o(" (XLM-RoBERTa model)"),xNr=l(),F(C0.$$.fragment),zje=l(),Jc=a("h2"),w0=a("a"),i5e=a("span"),F(sx.$$.fragment),$Nr=l(),d5e=a("span"),kNr=o("FlaxAutoModelForTokenClassification"),Wje=l(),br=a("div"),F(lx.$$.fragment),SNr=l(),Yc=a("p"),RNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RK=a("a"),PNr=o("from_pretrained()"),BNr=o(" class method or the "),PK=a("a"),INr=o("from_config()"),qNr=o(` class
method.`),NNr=l(),ix=a("p"),jNr=o("This class cannot be instantiated directly using "),c5e=a("code"),DNr=o("__init__()"),GNr=o(" (throws an error)."),ONr=l(),Ht=a("div"),F(dx.$$.fragment),VNr=l(),m5e=a("p"),XNr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zNr=l(),Kc=a("p"),WNr=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),QNr=o("not"),HNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),UNr=o("from_pretrained()"),JNr=o(" to load the model weights."),YNr=l(),F(A0.$$.fragment),KNr=l(),Wr=a("div"),F(cx.$$.fragment),ZNr=l(),g5e=a("p"),ejr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ojr=l(),Tn=a("p"),rjr=o("The model class to instantiate is selected based on the "),h5e=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),De=a("ul"),y0=a("li"),_5e=a("strong"),cjr=o("albert"),mjr=o(" \u2014 "),IK=a("a"),fjr=o("FlaxAlbertForTokenClassification"),gjr=o(" (ALBERT model)"),hjr=l(),L0=a("li"),b5e=a("strong"),ujr=o("bert"),pjr=o(" \u2014 "),qK=a("a"),_jr=o("FlaxBertForTokenClassification"),bjr=o(" (BERT model)"),vjr=l(),x0=a("li"),v5e=a("strong"),Fjr=o("big_bird"),Tjr=o(" \u2014 "),NK=a("a"),Mjr=o("FlaxBigBirdForTokenClassification"),Ejr=o(" (BigBird model)"),Cjr=l(),$0=a("li"),F5e=a("strong"),wjr=o("distilbert"),Ajr=o(" \u2014 "),jK=a("a"),yjr=o("FlaxDistilBertForTokenClassification"),Ljr=o(" (DistilBERT model)"),xjr=l(),k0=a("li"),T5e=a("strong"),$jr=o("electra"),kjr=o(" \u2014 "),DK=a("a"),Sjr=o("FlaxElectraForTokenClassification"),Rjr=o(" (ELECTRA model)"),Pjr=l(),S0=a("li"),M5e=a("strong"),Bjr=o("roberta"),Ijr=o(" \u2014 "),GK=a("a"),qjr=o("FlaxRobertaForTokenClassification"),Njr=o(" (RoBERTa model)"),jjr=l(),R0=a("li"),E5e=a("strong"),Djr=o("roformer"),Gjr=o(" \u2014 "),OK=a("a"),Ojr=o("FlaxRoFormerForTokenClassification"),Vjr=o(" (RoFormer model)"),Xjr=l(),P0=a("li"),C5e=a("strong"),zjr=o("xlm-roberta"),Wjr=o(" \u2014 "),VK=a("a"),Qjr=o("FlaxXLMRobertaForTokenClassification"),Hjr=o(" (XLM-RoBERTa model)"),Ujr=l(),F(B0.$$.fragment),Qje=l(),Zc=a("h2"),I0=a("a"),w5e=a("span"),F(mx.$$.fragment),Jjr=l(),A5e=a("span"),Yjr=o("FlaxAutoModelForMultipleChoice"),Hje=l(),vr=a("div"),F(fx.$$.fragment),Kjr=l(),em=a("p"),Zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=a("a"),eDr=o("from_pretrained()"),oDr=o(" class method or the "),zK=a("a"),rDr=o("from_config()"),tDr=o(` class
method.`),aDr=l(),gx=a("p"),nDr=o("This class cannot be instantiated directly using "),y5e=a("code"),sDr=o("__init__()"),lDr=o(" (throws an error)."),iDr=l(),Ut=a("div"),F(hx.$$.fragment),dDr=l(),L5e=a("p"),cDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mDr=l(),om=a("p"),fDr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),gDr=o("not"),hDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),uDr=o("from_pretrained()"),pDr=o(" to load the model weights."),_Dr=l(),F(q0.$$.fragment),bDr=l(),Qr=a("div"),F(ux.$$.fragment),vDr=l(),$5e=a("p"),FDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TDr=l(),Mn=a("p"),MDr=o("The model class to instantiate is selected based on the "),k5e=a("code"),EDr=o("model_type"),CDr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),wDr=o("pretrained_model_name_or_path"),ADr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),yDr=o("pretrained_model_name_or_path"),LDr=o(":"),xDr=l(),Ge=a("ul"),N0=a("li"),P5e=a("strong"),$Dr=o("albert"),kDr=o(" \u2014 "),QK=a("a"),SDr=o("FlaxAlbertForMultipleChoice"),RDr=o(" (ALBERT model)"),PDr=l(),j0=a("li"),B5e=a("strong"),BDr=o("bert"),IDr=o(" \u2014 "),HK=a("a"),qDr=o("FlaxBertForMultipleChoice"),NDr=o(" (BERT model)"),jDr=l(),D0=a("li"),I5e=a("strong"),DDr=o("big_bird"),GDr=o(" \u2014 "),UK=a("a"),ODr=o("FlaxBigBirdForMultipleChoice"),VDr=o(" (BigBird model)"),XDr=l(),G0=a("li"),q5e=a("strong"),zDr=o("distilbert"),WDr=o(" \u2014 "),JK=a("a"),QDr=o("FlaxDistilBertForMultipleChoice"),HDr=o(" (DistilBERT model)"),UDr=l(),O0=a("li"),N5e=a("strong"),JDr=o("electra"),YDr=o(" \u2014 "),YK=a("a"),KDr=o("FlaxElectraForMultipleChoice"),ZDr=o(" (ELECTRA model)"),eGr=l(),V0=a("li"),j5e=a("strong"),oGr=o("roberta"),rGr=o(" \u2014 "),KK=a("a"),tGr=o("FlaxRobertaForMultipleChoice"),aGr=o(" (RoBERTa model)"),nGr=l(),X0=a("li"),D5e=a("strong"),sGr=o("roformer"),lGr=o(" \u2014 "),ZK=a("a"),iGr=o("FlaxRoFormerForMultipleChoice"),dGr=o(" (RoFormer model)"),cGr=l(),z0=a("li"),G5e=a("strong"),mGr=o("xlm-roberta"),fGr=o(" \u2014 "),eZ=a("a"),gGr=o("FlaxXLMRobertaForMultipleChoice"),hGr=o(" (XLM-RoBERTa model)"),uGr=l(),F(W0.$$.fragment),Uje=l(),rm=a("h2"),Q0=a("a"),O5e=a("span"),F(px.$$.fragment),pGr=l(),V5e=a("span"),_Gr=o("FlaxAutoModelForNextSentencePrediction"),Jje=l(),Fr=a("div"),F(_x.$$.fragment),bGr=l(),tm=a("p"),vGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oZ=a("a"),FGr=o("from_pretrained()"),TGr=o(" class method or the "),rZ=a("a"),MGr=o("from_config()"),EGr=o(` class
method.`),CGr=l(),bx=a("p"),wGr=o("This class cannot be instantiated directly using "),X5e=a("code"),AGr=o("__init__()"),yGr=o(" (throws an error)."),LGr=l(),Jt=a("div"),F(vx.$$.fragment),xGr=l(),z5e=a("p"),$Gr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kGr=l(),am=a("p"),SGr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),RGr=o("not"),PGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),BGr=o("from_pretrained()"),IGr=o(" to load the model weights."),qGr=l(),F(H0.$$.fragment),NGr=l(),Hr=a("div"),F(Fx.$$.fragment),jGr=l(),Q5e=a("p"),DGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GGr=l(),En=a("p"),OGr=o("The model class to instantiate is selected based on the "),H5e=a("code"),VGr=o("model_type"),XGr=o(` property of the config object (either
passed as an argument or loaded from `),U5e=a("code"),zGr=o("pretrained_model_name_or_path"),WGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(":"),UGr=l(),Y5e=a("ul"),U0=a("li"),K5e=a("strong"),JGr=o("bert"),YGr=o(" \u2014 "),aZ=a("a"),KGr=o("FlaxBertForNextSentencePrediction"),ZGr=o(" (BERT model)"),eOr=l(),F(J0.$$.fragment),Yje=l(),nm=a("h2"),Y0=a("a"),Z5e=a("span"),F(Tx.$$.fragment),oOr=l(),e3e=a("span"),rOr=o("FlaxAutoModelForImageClassification"),Kje=l(),Tr=a("div"),F(Mx.$$.fragment),tOr=l(),sm=a("p"),aOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nZ=a("a"),nOr=o("from_pretrained()"),sOr=o(" class method or the "),sZ=a("a"),lOr=o("from_config()"),iOr=o(` class
method.`),dOr=l(),Ex=a("p"),cOr=o("This class cannot be instantiated directly using "),o3e=a("code"),mOr=o("__init__()"),fOr=o(" (throws an error)."),gOr=l(),Yt=a("div"),F(Cx.$$.fragment),hOr=l(),r3e=a("p"),uOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pOr=l(),lm=a("p"),_Or=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),bOr=o("not"),vOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),FOr=o("from_pretrained()"),TOr=o(" to load the model weights."),MOr=l(),F(K0.$$.fragment),EOr=l(),Ur=a("div"),F(wx.$$.fragment),COr=l(),a3e=a("p"),wOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AOr=l(),Cn=a("p"),yOr=o("The model class to instantiate is selected based on the "),n3e=a("code"),LOr=o("model_type"),xOr=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),$Or=o("pretrained_model_name_or_path"),kOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(":"),POr=l(),Ax=a("ul"),Z0=a("li"),i3e=a("strong"),BOr=o("beit"),IOr=o(" \u2014 "),iZ=a("a"),qOr=o("FlaxBeitForImageClassification"),NOr=o(" (BEiT model)"),jOr=l(),eA=a("li"),d3e=a("strong"),DOr=o("vit"),GOr=o(" \u2014 "),dZ=a("a"),OOr=o("FlaxViTForImageClassification"),VOr=o(" (ViT model)"),XOr=l(),F(oA.$$.fragment),Zje=l(),im=a("h2"),rA=a("a"),c3e=a("span"),F(yx.$$.fragment),zOr=l(),m3e=a("span"),WOr=o("FlaxAutoModelForVision2Seq"),eDe=l(),Mr=a("div"),F(Lx.$$.fragment),QOr=l(),dm=a("p"),HOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cZ=a("a"),UOr=o("from_pretrained()"),JOr=o(" class method or the "),mZ=a("a"),YOr=o("from_config()"),KOr=o(` class
method.`),ZOr=l(),xx=a("p"),eVr=o("This class cannot be instantiated directly using "),f3e=a("code"),oVr=o("__init__()"),rVr=o(" (throws an error)."),tVr=l(),Kt=a("div"),F($x.$$.fragment),aVr=l(),g3e=a("p"),nVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sVr=l(),cm=a("p"),lVr=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),iVr=o("not"),dVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),cVr=o("from_pretrained()"),mVr=o(" to load the model weights."),fVr=l(),F(tA.$$.fragment),gVr=l(),Jr=a("div"),F(kx.$$.fragment),hVr=l(),u3e=a("p"),uVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pVr=l(),wn=a("p"),_Vr=o("The model class to instantiate is selected based on the "),p3e=a("code"),bVr=o("model_type"),vVr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=a("code"),MVr=o("pretrained_model_name_or_path"),EVr=o(":"),CVr=l(),v3e=a("ul"),aA=a("li"),F3e=a("strong"),wVr=o("vision-encoder-decoder"),AVr=o(" \u2014 "),gZ=a("a"),yVr=o("FlaxVisionEncoderDecoderModel"),LVr=o(" (Vision Encoder decoder model)"),xVr=l(),F(nA.$$.fragment),this.h()},l(m){const _=d$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var Sx=s(u);f=n(Sx,"A",{id:!0,class:!0,href:!0});var T3e=s(f);p=n(T3e,"SPAN",{});var M3e=s(p);T(d.$$.fragment,M3e),M3e.forEach(t),T3e.forEach(t),h=i(Sx),Mo=n(Sx,"SPAN",{});var E3e=s(Mo);mi=r(E3e,"Auto Classes"),E3e.forEach(t),Sx.forEach(t),hm=i(m),rt=n(m,"P",{});var Rx=s(rt);fi=r(Rx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Rx,"CODE",{});var C3e=s(gi);Ey=r(C3e,"from_pretrained()"),C3e.forEach(t),um=r(Rx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Rx.forEach(t),je=i(m),We=n(m,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var w3e=s(yn);Cy=r(w3e,"AutoConfig"),w3e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var A3e=s(xn);wy=r(A3e,"AutoModel"),A3e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var y3e=s($n);Ay=r(y3e,"AutoTokenizer"),y3e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),pm=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var Px=s(Ae);z$=r(Px,"will create a model that is an instance of "),_i=n(Px,"A",{href:!0});var L3e=s(_i);W$=r(L3e,"BertModel"),L3e.forEach(t),Q$=r(Px,"."),Px.forEach(t),Eo=i(m),wa=n(m,"P",{});var Bx=s(wa);H$=r(Bx,"There is one class of "),_m=n(Bx,"CODE",{});var x3e=s(_m);U$=r(x3e,"AutoModel"),x3e.forEach(t),dOe=r(Bx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bx.forEach(t),Kqe=i(m),bi=n(m,"H2",{class:!0});var Ix=s(bi);bm=n(Ix,"A",{id:!0,class:!0,href:!0});var $3e=s(bm);soe=n($3e,"SPAN",{});var k3e=s(soe);T(yy.$$.fragment,k3e),k3e.forEach(t),$3e.forEach(t),cOe=i(Ix),loe=n(Ix,"SPAN",{});var S3e=s(loe);mOe=r(S3e,"Extending the Auto Classes"),S3e.forEach(t),Ix.forEach(t),Zqe=i(m),kn=n(m,"P",{});var mm=s(kn);fOe=r(mm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ioe=n(mm,"CODE",{});var R3e=s(ioe);gOe=r(R3e,"NewModel"),R3e.forEach(t),hOe=r(mm,", make sure you have a "),doe=n(mm,"CODE",{});var P3e=s(doe);uOe=r(P3e,"NewModelConfig"),P3e.forEach(t),pOe=r(mm,` then you can add those to the auto
classes like this:`),mm.forEach(t),eNe=i(m),T(Ly.$$.fragment,m),oNe=i(m),J$=n(m,"P",{});var B3e=s(J$);_Oe=r(B3e,"You will then be able to use the auto classes like you would usually do!"),B3e.forEach(t),rNe=i(m),T(vm.$$.fragment,m),tNe=i(m),vi=n(m,"H2",{class:!0});var qx=s(vi);Fm=n(qx,"A",{id:!0,class:!0,href:!0});var I3e=s(Fm);coe=n(I3e,"SPAN",{});var q3e=s(coe);T(xy.$$.fragment,q3e),q3e.forEach(t),I3e.forEach(t),bOe=i(qx),moe=n(qx,"SPAN",{});var N3e=s(moe);vOe=r(N3e,"AutoConfig"),N3e.forEach(t),qx.forEach(t),aNe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T($y.$$.fragment,et),FOe=i(et),ky=n(et,"P",{});var Nx=s(ky);TOe=r(Nx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y$=n(Nx,"A",{href:!0});var j3e=s(Y$);MOe=r(j3e,"from_pretrained()"),j3e.forEach(t),EOe=r(Nx," class method."),Nx.forEach(t),COe=i(et),Sy=n(et,"P",{});var jx=s(Sy);wOe=r(jx,"This class cannot be instantiated directly using "),foe=n(jx,"CODE",{});var D3e=s(foe);AOe=r(D3e,"__init__()"),D3e.forEach(t),yOe=r(jx," (throws an error)."),jx.forEach(t),LOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Ry.$$.fragment,ot),xOe=i(ot),goe=n(ot,"P",{});var G3e=s(goe);$Oe=r(G3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),G3e.forEach(t),kOe=i(ot),Fi=n(ot,"P",{});var fm=s(Fi);SOe=r(fm,"The configuration class to instantiate is selected based on the "),hoe=n(fm,"CODE",{});var O3e=s(hoe);ROe=r(O3e,"model_type"),O3e.forEach(t),POe=r(fm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),uoe=n(fm,"CODE",{});var V3e=s(uoe);BOe=r(V3e,"pretrained_model_name_or_path"),V3e.forEach(t),IOe=r(fm,":"),fm.forEach(t),qOe=i(ot),A=n(ot,"UL",{});var y=s(A);Tm=n(y,"LI",{});var sA=s(Tm);poe=n(sA,"STRONG",{});var X3e=s(poe);NOe=r(X3e,"albert"),X3e.forEach(t),jOe=r(sA," \u2014 "),K$=n(sA,"A",{href:!0});var z3e=s(K$);DOe=r(z3e,"AlbertConfig"),z3e.forEach(t),GOe=r(sA," (ALBERT model)"),sA.forEach(t),OOe=i(y),Mm=n(y,"LI",{});var lA=s(Mm);_oe=n(lA,"STRONG",{});var W3e=s(_oe);VOe=r(W3e,"bart"),W3e.forEach(t),XOe=r(lA," \u2014 "),Z$=n(lA,"A",{href:!0});var Q3e=s(Z$);zOe=r(Q3e,"BartConfig"),Q3e.forEach(t),WOe=r(lA," (BART model)"),lA.forEach(t),QOe=i(y),Em=n(y,"LI",{});var iA=s(Em);boe=n(iA,"STRONG",{});var H3e=s(boe);HOe=r(H3e,"beit"),H3e.forEach(t),UOe=r(iA," \u2014 "),ek=n(iA,"A",{href:!0});var U3e=s(ek);JOe=r(U3e,"BeitConfig"),U3e.forEach(t),YOe=r(iA," (BEiT model)"),iA.forEach(t),KOe=i(y),Cm=n(y,"LI",{});var dA=s(Cm);voe=n(dA,"STRONG",{});var J3e=s(voe);ZOe=r(J3e,"bert"),J3e.forEach(t),eVe=r(dA," \u2014 "),ok=n(dA,"A",{href:!0});var Y3e=s(ok);oVe=r(Y3e,"BertConfig"),Y3e.forEach(t),rVe=r(dA," (BERT model)"),dA.forEach(t),tVe=i(y),wm=n(y,"LI",{});var cA=s(wm);Foe=n(cA,"STRONG",{});var K3e=s(Foe);aVe=r(K3e,"bert-generation"),K3e.forEach(t),nVe=r(cA," \u2014 "),rk=n(cA,"A",{href:!0});var Z3e=s(rk);sVe=r(Z3e,"BertGenerationConfig"),Z3e.forEach(t),lVe=r(cA," (Bert Generation model)"),cA.forEach(t),iVe=i(y),Am=n(y,"LI",{});var mA=s(Am);Toe=n(mA,"STRONG",{});var ewe=s(Toe);dVe=r(ewe,"big_bird"),ewe.forEach(t),cVe=r(mA," \u2014 "),tk=n(mA,"A",{href:!0});var owe=s(tk);mVe=r(owe,"BigBirdConfig"),owe.forEach(t),fVe=r(mA," (BigBird model)"),mA.forEach(t),gVe=i(y),ym=n(y,"LI",{});var fA=s(ym);Moe=n(fA,"STRONG",{});var rwe=s(Moe);hVe=r(rwe,"bigbird_pegasus"),rwe.forEach(t),uVe=r(fA," \u2014 "),ak=n(fA,"A",{href:!0});var twe=s(ak);pVe=r(twe,"BigBirdPegasusConfig"),twe.forEach(t),_Ve=r(fA," (BigBirdPegasus model)"),fA.forEach(t),bVe=i(y),Lm=n(y,"LI",{});var gA=s(Lm);Eoe=n(gA,"STRONG",{});var awe=s(Eoe);vVe=r(awe,"blenderbot"),awe.forEach(t),FVe=r(gA," \u2014 "),nk=n(gA,"A",{href:!0});var nwe=s(nk);TVe=r(nwe,"BlenderbotConfig"),nwe.forEach(t),MVe=r(gA," (Blenderbot model)"),gA.forEach(t),EVe=i(y),xm=n(y,"LI",{});var hA=s(xm);Coe=n(hA,"STRONG",{});var swe=s(Coe);CVe=r(swe,"blenderbot-small"),swe.forEach(t),wVe=r(hA," \u2014 "),sk=n(hA,"A",{href:!0});var lwe=s(sk);AVe=r(lwe,"BlenderbotSmallConfig"),lwe.forEach(t),yVe=r(hA," (BlenderbotSmall model)"),hA.forEach(t),LVe=i(y),$m=n(y,"LI",{});var uA=s($m);woe=n(uA,"STRONG",{});var iwe=s(woe);xVe=r(iwe,"camembert"),iwe.forEach(t),$Ve=r(uA," \u2014 "),lk=n(uA,"A",{href:!0});var dwe=s(lk);kVe=r(dwe,"CamembertConfig"),dwe.forEach(t),SVe=r(uA," (CamemBERT model)"),uA.forEach(t),RVe=i(y),km=n(y,"LI",{});var pA=s(km);Aoe=n(pA,"STRONG",{});var cwe=s(Aoe);PVe=r(cwe,"canine"),cwe.forEach(t),BVe=r(pA," \u2014 "),ik=n(pA,"A",{href:!0});var mwe=s(ik);IVe=r(mwe,"CanineConfig"),mwe.forEach(t),qVe=r(pA," (Canine model)"),pA.forEach(t),NVe=i(y),Sm=n(y,"LI",{});var _A=s(Sm);yoe=n(_A,"STRONG",{});var fwe=s(yoe);jVe=r(fwe,"clip"),fwe.forEach(t),DVe=r(_A," \u2014 "),dk=n(_A,"A",{href:!0});var gwe=s(dk);GVe=r(gwe,"CLIPConfig"),gwe.forEach(t),OVe=r(_A," (CLIP model)"),_A.forEach(t),VVe=i(y),Rm=n(y,"LI",{});var bA=s(Rm);Loe=n(bA,"STRONG",{});var hwe=s(Loe);XVe=r(hwe,"convbert"),hwe.forEach(t),zVe=r(bA," \u2014 "),ck=n(bA,"A",{href:!0});var uwe=s(ck);WVe=r(uwe,"ConvBertConfig"),uwe.forEach(t),QVe=r(bA," (ConvBERT model)"),bA.forEach(t),HVe=i(y),Pm=n(y,"LI",{});var vA=s(Pm);xoe=n(vA,"STRONG",{});var pwe=s(xoe);UVe=r(pwe,"convnext"),pwe.forEach(t),JVe=r(vA," \u2014 "),mk=n(vA,"A",{href:!0});var _we=s(mk);YVe=r(_we,"ConvNextConfig"),_we.forEach(t),KVe=r(vA," (ConvNext model)"),vA.forEach(t),ZVe=i(y),Bm=n(y,"LI",{});var FA=s(Bm);$oe=n(FA,"STRONG",{});var bwe=s($oe);eXe=r(bwe,"ctrl"),bwe.forEach(t),oXe=r(FA," \u2014 "),fk=n(FA,"A",{href:!0});var vwe=s(fk);rXe=r(vwe,"CTRLConfig"),vwe.forEach(t),tXe=r(FA," (CTRL model)"),FA.forEach(t),aXe=i(y),Im=n(y,"LI",{});var TA=s(Im);koe=n(TA,"STRONG",{});var Fwe=s(koe);nXe=r(Fwe,"cvt"),Fwe.forEach(t),sXe=r(TA," \u2014 "),gk=n(TA,"A",{href:!0});var Twe=s(gk);lXe=r(Twe,"CvtConfig"),Twe.forEach(t),iXe=r(TA," (CvT model)"),TA.forEach(t),dXe=i(y),qm=n(y,"LI",{});var MA=s(qm);Soe=n(MA,"STRONG",{});var Mwe=s(Soe);cXe=r(Mwe,"data2vec-audio"),Mwe.forEach(t),mXe=r(MA," \u2014 "),hk=n(MA,"A",{href:!0});var Ewe=s(hk);fXe=r(Ewe,"Data2VecAudioConfig"),Ewe.forEach(t),gXe=r(MA," (Data2VecAudio model)"),MA.forEach(t),hXe=i(y),Nm=n(y,"LI",{});var EA=s(Nm);Roe=n(EA,"STRONG",{});var Cwe=s(Roe);uXe=r(Cwe,"data2vec-text"),Cwe.forEach(t),pXe=r(EA," \u2014 "),uk=n(EA,"A",{href:!0});var wwe=s(uk);_Xe=r(wwe,"Data2VecTextConfig"),wwe.forEach(t),bXe=r(EA," (Data2VecText model)"),EA.forEach(t),vXe=i(y),jm=n(y,"LI",{});var CA=s(jm);Poe=n(CA,"STRONG",{});var Awe=s(Poe);FXe=r(Awe,"data2vec-vision"),Awe.forEach(t),TXe=r(CA," \u2014 "),pk=n(CA,"A",{href:!0});var ywe=s(pk);MXe=r(ywe,"Data2VecVisionConfig"),ywe.forEach(t),EXe=r(CA," (Data2VecVision model)"),CA.forEach(t),CXe=i(y),Dm=n(y,"LI",{});var wA=s(Dm);Boe=n(wA,"STRONG",{});var Lwe=s(Boe);wXe=r(Lwe,"deberta"),Lwe.forEach(t),AXe=r(wA," \u2014 "),_k=n(wA,"A",{href:!0});var xwe=s(_k);yXe=r(xwe,"DebertaConfig"),xwe.forEach(t),LXe=r(wA," (DeBERTa model)"),wA.forEach(t),xXe=i(y),Gm=n(y,"LI",{});var AA=s(Gm);Ioe=n(AA,"STRONG",{});var $we=s(Ioe);$Xe=r($we,"deberta-v2"),$we.forEach(t),kXe=r(AA," \u2014 "),bk=n(AA,"A",{href:!0});var kwe=s(bk);SXe=r(kwe,"DebertaV2Config"),kwe.forEach(t),RXe=r(AA," (DeBERTa-v2 model)"),AA.forEach(t),PXe=i(y),Om=n(y,"LI",{});var yA=s(Om);qoe=n(yA,"STRONG",{});var Swe=s(qoe);BXe=r(Swe,"decision_transformer"),Swe.forEach(t),IXe=r(yA," \u2014 "),vk=n(yA,"A",{href:!0});var Rwe=s(vk);qXe=r(Rwe,"DecisionTransformerConfig"),Rwe.forEach(t),NXe=r(yA," (Decision Transformer model)"),yA.forEach(t),jXe=i(y),Vm=n(y,"LI",{});var LA=s(Vm);Noe=n(LA,"STRONG",{});var Pwe=s(Noe);DXe=r(Pwe,"deit"),Pwe.forEach(t),GXe=r(LA," \u2014 "),Fk=n(LA,"A",{href:!0});var kVr=s(Fk);OXe=r(kVr,"DeiTConfig"),kVr.forEach(t),VXe=r(LA," (DeiT model)"),LA.forEach(t),XXe=i(y),Xm=n(y,"LI",{});var Bwe=s(Xm);joe=n(Bwe,"STRONG",{});var SVr=s(joe);zXe=r(SVr,"detr"),SVr.forEach(t),WXe=r(Bwe," \u2014 "),Tk=n(Bwe,"A",{href:!0});var RVr=s(Tk);QXe=r(RVr,"DetrConfig"),RVr.forEach(t),HXe=r(Bwe," (DETR model)"),Bwe.forEach(t),UXe=i(y),zm=n(y,"LI",{});var Iwe=s(zm);Doe=n(Iwe,"STRONG",{});var PVr=s(Doe);JXe=r(PVr,"distilbert"),PVr.forEach(t),YXe=r(Iwe," \u2014 "),Mk=n(Iwe,"A",{href:!0});var BVr=s(Mk);KXe=r(BVr,"DistilBertConfig"),BVr.forEach(t),ZXe=r(Iwe," (DistilBERT model)"),Iwe.forEach(t),eze=i(y),Wm=n(y,"LI",{});var qwe=s(Wm);Goe=n(qwe,"STRONG",{});var IVr=s(Goe);oze=r(IVr,"dpr"),IVr.forEach(t),rze=r(qwe," \u2014 "),Ek=n(qwe,"A",{href:!0});var qVr=s(Ek);tze=r(qVr,"DPRConfig"),qVr.forEach(t),aze=r(qwe," (DPR model)"),qwe.forEach(t),nze=i(y),Qm=n(y,"LI",{});var Nwe=s(Qm);Ooe=n(Nwe,"STRONG",{});var NVr=s(Ooe);sze=r(NVr,"dpt"),NVr.forEach(t),lze=r(Nwe," \u2014 "),Ck=n(Nwe,"A",{href:!0});var jVr=s(Ck);ize=r(jVr,"DPTConfig"),jVr.forEach(t),dze=r(Nwe," (DPT model)"),Nwe.forEach(t),cze=i(y),Hm=n(y,"LI",{});var jwe=s(Hm);Voe=n(jwe,"STRONG",{});var DVr=s(Voe);mze=r(DVr,"electra"),DVr.forEach(t),fze=r(jwe," \u2014 "),wk=n(jwe,"A",{href:!0});var GVr=s(wk);gze=r(GVr,"ElectraConfig"),GVr.forEach(t),hze=r(jwe," (ELECTRA model)"),jwe.forEach(t),uze=i(y),Um=n(y,"LI",{});var Dwe=s(Um);Xoe=n(Dwe,"STRONG",{});var OVr=s(Xoe);pze=r(OVr,"encoder-decoder"),OVr.forEach(t),_ze=r(Dwe," \u2014 "),Ak=n(Dwe,"A",{href:!0});var VVr=s(Ak);bze=r(VVr,"EncoderDecoderConfig"),VVr.forEach(t),vze=r(Dwe," (Encoder decoder model)"),Dwe.forEach(t),Fze=i(y),Jm=n(y,"LI",{});var Gwe=s(Jm);zoe=n(Gwe,"STRONG",{});var XVr=s(zoe);Tze=r(XVr,"flaubert"),XVr.forEach(t),Mze=r(Gwe," \u2014 "),yk=n(Gwe,"A",{href:!0});var zVr=s(yk);Eze=r(zVr,"FlaubertConfig"),zVr.forEach(t),Cze=r(Gwe," (FlauBERT model)"),Gwe.forEach(t),wze=i(y),Ym=n(y,"LI",{});var Owe=s(Ym);Woe=n(Owe,"STRONG",{});var WVr=s(Woe);Aze=r(WVr,"flava"),WVr.forEach(t),yze=r(Owe," \u2014 "),Lk=n(Owe,"A",{href:!0});var QVr=s(Lk);Lze=r(QVr,"FlavaConfig"),QVr.forEach(t),xze=r(Owe," (Flava model)"),Owe.forEach(t),$ze=i(y),Km=n(y,"LI",{});var Vwe=s(Km);Qoe=n(Vwe,"STRONG",{});var HVr=s(Qoe);kze=r(HVr,"fnet"),HVr.forEach(t),Sze=r(Vwe," \u2014 "),xk=n(Vwe,"A",{href:!0});var UVr=s(xk);Rze=r(UVr,"FNetConfig"),UVr.forEach(t),Pze=r(Vwe," (FNet model)"),Vwe.forEach(t),Bze=i(y),Zm=n(y,"LI",{});var Xwe=s(Zm);Hoe=n(Xwe,"STRONG",{});var JVr=s(Hoe);Ize=r(JVr,"fsmt"),JVr.forEach(t),qze=r(Xwe," \u2014 "),$k=n(Xwe,"A",{href:!0});var YVr=s($k);Nze=r(YVr,"FSMTConfig"),YVr.forEach(t),jze=r(Xwe," (FairSeq Machine-Translation model)"),Xwe.forEach(t),Dze=i(y),ef=n(y,"LI",{});var zwe=s(ef);Uoe=n(zwe,"STRONG",{});var KVr=s(Uoe);Gze=r(KVr,"funnel"),KVr.forEach(t),Oze=r(zwe," \u2014 "),kk=n(zwe,"A",{href:!0});var ZVr=s(kk);Vze=r(ZVr,"FunnelConfig"),ZVr.forEach(t),Xze=r(zwe," (Funnel Transformer model)"),zwe.forEach(t),zze=i(y),of=n(y,"LI",{});var Wwe=s(of);Joe=n(Wwe,"STRONG",{});var eXr=s(Joe);Wze=r(eXr,"glpn"),eXr.forEach(t),Qze=r(Wwe," \u2014 "),Sk=n(Wwe,"A",{href:!0});var oXr=s(Sk);Hze=r(oXr,"GLPNConfig"),oXr.forEach(t),Uze=r(Wwe," (GLPN model)"),Wwe.forEach(t),Jze=i(y),rf=n(y,"LI",{});var Qwe=s(rf);Yoe=n(Qwe,"STRONG",{});var rXr=s(Yoe);Yze=r(rXr,"gpt2"),rXr.forEach(t),Kze=r(Qwe," \u2014 "),Rk=n(Qwe,"A",{href:!0});var tXr=s(Rk);Zze=r(tXr,"GPT2Config"),tXr.forEach(t),eWe=r(Qwe," (OpenAI GPT-2 model)"),Qwe.forEach(t),oWe=i(y),tf=n(y,"LI",{});var Hwe=s(tf);Koe=n(Hwe,"STRONG",{});var aXr=s(Koe);rWe=r(aXr,"gpt_neo"),aXr.forEach(t),tWe=r(Hwe," \u2014 "),Pk=n(Hwe,"A",{href:!0});var nXr=s(Pk);aWe=r(nXr,"GPTNeoConfig"),nXr.forEach(t),nWe=r(Hwe," (GPT Neo model)"),Hwe.forEach(t),sWe=i(y),af=n(y,"LI",{});var Uwe=s(af);Zoe=n(Uwe,"STRONG",{});var sXr=s(Zoe);lWe=r(sXr,"gpt_neox"),sXr.forEach(t),iWe=r(Uwe," \u2014 "),Bk=n(Uwe,"A",{href:!0});var lXr=s(Bk);dWe=r(lXr,"GPTNeoXConfig"),lXr.forEach(t),cWe=r(Uwe," (GPT NeoX model)"),Uwe.forEach(t),mWe=i(y),nf=n(y,"LI",{});var Jwe=s(nf);ere=n(Jwe,"STRONG",{});var iXr=s(ere);fWe=r(iXr,"gptj"),iXr.forEach(t),gWe=r(Jwe," \u2014 "),Ik=n(Jwe,"A",{href:!0});var dXr=s(Ik);hWe=r(dXr,"GPTJConfig"),dXr.forEach(t),uWe=r(Jwe," (GPT-J model)"),Jwe.forEach(t),pWe=i(y),sf=n(y,"LI",{});var Ywe=s(sf);ore=n(Ywe,"STRONG",{});var cXr=s(ore);_We=r(cXr,"hubert"),cXr.forEach(t),bWe=r(Ywe," \u2014 "),qk=n(Ywe,"A",{href:!0});var mXr=s(qk);vWe=r(mXr,"HubertConfig"),mXr.forEach(t),FWe=r(Ywe," (Hubert model)"),Ywe.forEach(t),TWe=i(y),lf=n(y,"LI",{});var Kwe=s(lf);rre=n(Kwe,"STRONG",{});var fXr=s(rre);MWe=r(fXr,"ibert"),fXr.forEach(t),EWe=r(Kwe," \u2014 "),Nk=n(Kwe,"A",{href:!0});var gXr=s(Nk);CWe=r(gXr,"IBertConfig"),gXr.forEach(t),wWe=r(Kwe," (I-BERT model)"),Kwe.forEach(t),AWe=i(y),df=n(y,"LI",{});var Zwe=s(df);tre=n(Zwe,"STRONG",{});var hXr=s(tre);yWe=r(hXr,"imagegpt"),hXr.forEach(t),LWe=r(Zwe," \u2014 "),jk=n(Zwe,"A",{href:!0});var uXr=s(jk);xWe=r(uXr,"ImageGPTConfig"),uXr.forEach(t),$We=r(Zwe," (ImageGPT model)"),Zwe.forEach(t),kWe=i(y),cf=n(y,"LI",{});var e0e=s(cf);are=n(e0e,"STRONG",{});var pXr=s(are);SWe=r(pXr,"layoutlm"),pXr.forEach(t),RWe=r(e0e," \u2014 "),Dk=n(e0e,"A",{href:!0});var _Xr=s(Dk);PWe=r(_Xr,"LayoutLMConfig"),_Xr.forEach(t),BWe=r(e0e," (LayoutLM model)"),e0e.forEach(t),IWe=i(y),mf=n(y,"LI",{});var o0e=s(mf);nre=n(o0e,"STRONG",{});var bXr=s(nre);qWe=r(bXr,"layoutlmv2"),bXr.forEach(t),NWe=r(o0e," \u2014 "),Gk=n(o0e,"A",{href:!0});var vXr=s(Gk);jWe=r(vXr,"LayoutLMv2Config"),vXr.forEach(t),DWe=r(o0e," (LayoutLMv2 model)"),o0e.forEach(t),GWe=i(y),ff=n(y,"LI",{});var r0e=s(ff);sre=n(r0e,"STRONG",{});var FXr=s(sre);OWe=r(FXr,"layoutlmv3"),FXr.forEach(t),VWe=r(r0e," \u2014 "),Ok=n(r0e,"A",{href:!0});var TXr=s(Ok);XWe=r(TXr,"LayoutLMv3Config"),TXr.forEach(t),zWe=r(r0e," (LayoutLMv3 model)"),r0e.forEach(t),WWe=i(y),gf=n(y,"LI",{});var t0e=s(gf);lre=n(t0e,"STRONG",{});var MXr=s(lre);QWe=r(MXr,"led"),MXr.forEach(t),HWe=r(t0e," \u2014 "),Vk=n(t0e,"A",{href:!0});var EXr=s(Vk);UWe=r(EXr,"LEDConfig"),EXr.forEach(t),JWe=r(t0e," (LED model)"),t0e.forEach(t),YWe=i(y),hf=n(y,"LI",{});var a0e=s(hf);ire=n(a0e,"STRONG",{});var CXr=s(ire);KWe=r(CXr,"longformer"),CXr.forEach(t),ZWe=r(a0e," \u2014 "),Xk=n(a0e,"A",{href:!0});var wXr=s(Xk);eQe=r(wXr,"LongformerConfig"),wXr.forEach(t),oQe=r(a0e," (Longformer model)"),a0e.forEach(t),rQe=i(y),uf=n(y,"LI",{});var n0e=s(uf);dre=n(n0e,"STRONG",{});var AXr=s(dre);tQe=r(AXr,"luke"),AXr.forEach(t),aQe=r(n0e," \u2014 "),zk=n(n0e,"A",{href:!0});var yXr=s(zk);nQe=r(yXr,"LukeConfig"),yXr.forEach(t),sQe=r(n0e," (LUKE model)"),n0e.forEach(t),lQe=i(y),pf=n(y,"LI",{});var s0e=s(pf);cre=n(s0e,"STRONG",{});var LXr=s(cre);iQe=r(LXr,"lxmert"),LXr.forEach(t),dQe=r(s0e," \u2014 "),Wk=n(s0e,"A",{href:!0});var xXr=s(Wk);cQe=r(xXr,"LxmertConfig"),xXr.forEach(t),mQe=r(s0e," (LXMERT model)"),s0e.forEach(t),fQe=i(y),_f=n(y,"LI",{});var l0e=s(_f);mre=n(l0e,"STRONG",{});var $Xr=s(mre);gQe=r($Xr,"m2m_100"),$Xr.forEach(t),hQe=r(l0e," \u2014 "),Qk=n(l0e,"A",{href:!0});var kXr=s(Qk);uQe=r(kXr,"M2M100Config"),kXr.forEach(t),pQe=r(l0e," (M2M100 model)"),l0e.forEach(t),_Qe=i(y),bf=n(y,"LI",{});var i0e=s(bf);fre=n(i0e,"STRONG",{});var SXr=s(fre);bQe=r(SXr,"marian"),SXr.forEach(t),vQe=r(i0e," \u2014 "),Hk=n(i0e,"A",{href:!0});var RXr=s(Hk);FQe=r(RXr,"MarianConfig"),RXr.forEach(t),TQe=r(i0e," (Marian model)"),i0e.forEach(t),MQe=i(y),vf=n(y,"LI",{});var d0e=s(vf);gre=n(d0e,"STRONG",{});var PXr=s(gre);EQe=r(PXr,"maskformer"),PXr.forEach(t),CQe=r(d0e," \u2014 "),Uk=n(d0e,"A",{href:!0});var BXr=s(Uk);wQe=r(BXr,"MaskFormerConfig"),BXr.forEach(t),AQe=r(d0e," (MaskFormer model)"),d0e.forEach(t),yQe=i(y),Ff=n(y,"LI",{});var c0e=s(Ff);hre=n(c0e,"STRONG",{});var IXr=s(hre);LQe=r(IXr,"mbart"),IXr.forEach(t),xQe=r(c0e," \u2014 "),Jk=n(c0e,"A",{href:!0});var qXr=s(Jk);$Qe=r(qXr,"MBartConfig"),qXr.forEach(t),kQe=r(c0e," (mBART model)"),c0e.forEach(t),SQe=i(y),Tf=n(y,"LI",{});var m0e=s(Tf);ure=n(m0e,"STRONG",{});var NXr=s(ure);RQe=r(NXr,"megatron-bert"),NXr.forEach(t),PQe=r(m0e," \u2014 "),Yk=n(m0e,"A",{href:!0});var jXr=s(Yk);BQe=r(jXr,"MegatronBertConfig"),jXr.forEach(t),IQe=r(m0e," (MegatronBert model)"),m0e.forEach(t),qQe=i(y),Mf=n(y,"LI",{});var f0e=s(Mf);pre=n(f0e,"STRONG",{});var DXr=s(pre);NQe=r(DXr,"mobilebert"),DXr.forEach(t),jQe=r(f0e," \u2014 "),Kk=n(f0e,"A",{href:!0});var GXr=s(Kk);DQe=r(GXr,"MobileBertConfig"),GXr.forEach(t),GQe=r(f0e," (MobileBERT model)"),f0e.forEach(t),OQe=i(y),Ef=n(y,"LI",{});var g0e=s(Ef);_re=n(g0e,"STRONG",{});var OXr=s(_re);VQe=r(OXr,"mpnet"),OXr.forEach(t),XQe=r(g0e," \u2014 "),Zk=n(g0e,"A",{href:!0});var VXr=s(Zk);zQe=r(VXr,"MPNetConfig"),VXr.forEach(t),WQe=r(g0e," (MPNet model)"),g0e.forEach(t),QQe=i(y),Cf=n(y,"LI",{});var h0e=s(Cf);bre=n(h0e,"STRONG",{});var XXr=s(bre);HQe=r(XXr,"mt5"),XXr.forEach(t),UQe=r(h0e," \u2014 "),eS=n(h0e,"A",{href:!0});var zXr=s(eS);JQe=r(zXr,"MT5Config"),zXr.forEach(t),YQe=r(h0e," (mT5 model)"),h0e.forEach(t),KQe=i(y),wf=n(y,"LI",{});var u0e=s(wf);vre=n(u0e,"STRONG",{});var WXr=s(vre);ZQe=r(WXr,"nystromformer"),WXr.forEach(t),eHe=r(u0e," \u2014 "),oS=n(u0e,"A",{href:!0});var QXr=s(oS);oHe=r(QXr,"NystromformerConfig"),QXr.forEach(t),rHe=r(u0e," (Nystromformer model)"),u0e.forEach(t),tHe=i(y),Af=n(y,"LI",{});var p0e=s(Af);Fre=n(p0e,"STRONG",{});var HXr=s(Fre);aHe=r(HXr,"openai-gpt"),HXr.forEach(t),nHe=r(p0e," \u2014 "),rS=n(p0e,"A",{href:!0});var UXr=s(rS);sHe=r(UXr,"OpenAIGPTConfig"),UXr.forEach(t),lHe=r(p0e," (OpenAI GPT model)"),p0e.forEach(t),iHe=i(y),yf=n(y,"LI",{});var _0e=s(yf);Tre=n(_0e,"STRONG",{});var JXr=s(Tre);dHe=r(JXr,"opt"),JXr.forEach(t),cHe=r(_0e," \u2014 "),tS=n(_0e,"A",{href:!0});var YXr=s(tS);mHe=r(YXr,"OPTConfig"),YXr.forEach(t),fHe=r(_0e," (OPT model)"),_0e.forEach(t),gHe=i(y),Lf=n(y,"LI",{});var b0e=s(Lf);Mre=n(b0e,"STRONG",{});var KXr=s(Mre);hHe=r(KXr,"pegasus"),KXr.forEach(t),uHe=r(b0e," \u2014 "),aS=n(b0e,"A",{href:!0});var ZXr=s(aS);pHe=r(ZXr,"PegasusConfig"),ZXr.forEach(t),_He=r(b0e," (Pegasus model)"),b0e.forEach(t),bHe=i(y),xf=n(y,"LI",{});var v0e=s(xf);Ere=n(v0e,"STRONG",{});var ezr=s(Ere);vHe=r(ezr,"perceiver"),ezr.forEach(t),FHe=r(v0e," \u2014 "),nS=n(v0e,"A",{href:!0});var ozr=s(nS);THe=r(ozr,"PerceiverConfig"),ozr.forEach(t),MHe=r(v0e," (Perceiver model)"),v0e.forEach(t),EHe=i(y),$f=n(y,"LI",{});var F0e=s($f);Cre=n(F0e,"STRONG",{});var rzr=s(Cre);CHe=r(rzr,"plbart"),rzr.forEach(t),wHe=r(F0e," \u2014 "),sS=n(F0e,"A",{href:!0});var tzr=s(sS);AHe=r(tzr,"PLBartConfig"),tzr.forEach(t),yHe=r(F0e," (PLBart model)"),F0e.forEach(t),LHe=i(y),kf=n(y,"LI",{});var T0e=s(kf);wre=n(T0e,"STRONG",{});var azr=s(wre);xHe=r(azr,"poolformer"),azr.forEach(t),$He=r(T0e," \u2014 "),lS=n(T0e,"A",{href:!0});var nzr=s(lS);kHe=r(nzr,"PoolFormerConfig"),nzr.forEach(t),SHe=r(T0e," (PoolFormer model)"),T0e.forEach(t),RHe=i(y),Sf=n(y,"LI",{});var M0e=s(Sf);Are=n(M0e,"STRONG",{});var szr=s(Are);PHe=r(szr,"prophetnet"),szr.forEach(t),BHe=r(M0e," \u2014 "),iS=n(M0e,"A",{href:!0});var lzr=s(iS);IHe=r(lzr,"ProphetNetConfig"),lzr.forEach(t),qHe=r(M0e," (ProphetNet model)"),M0e.forEach(t),NHe=i(y),Rf=n(y,"LI",{});var E0e=s(Rf);yre=n(E0e,"STRONG",{});var izr=s(yre);jHe=r(izr,"qdqbert"),izr.forEach(t),DHe=r(E0e," \u2014 "),dS=n(E0e,"A",{href:!0});var dzr=s(dS);GHe=r(dzr,"QDQBertConfig"),dzr.forEach(t),OHe=r(E0e," (QDQBert model)"),E0e.forEach(t),VHe=i(y),Pf=n(y,"LI",{});var C0e=s(Pf);Lre=n(C0e,"STRONG",{});var czr=s(Lre);XHe=r(czr,"rag"),czr.forEach(t),zHe=r(C0e," \u2014 "),cS=n(C0e,"A",{href:!0});var mzr=s(cS);WHe=r(mzr,"RagConfig"),mzr.forEach(t),QHe=r(C0e," (RAG model)"),C0e.forEach(t),HHe=i(y),Bf=n(y,"LI",{});var w0e=s(Bf);xre=n(w0e,"STRONG",{});var fzr=s(xre);UHe=r(fzr,"realm"),fzr.forEach(t),JHe=r(w0e," \u2014 "),mS=n(w0e,"A",{href:!0});var gzr=s(mS);YHe=r(gzr,"RealmConfig"),gzr.forEach(t),KHe=r(w0e," (Realm model)"),w0e.forEach(t),ZHe=i(y),If=n(y,"LI",{});var A0e=s(If);$re=n(A0e,"STRONG",{});var hzr=s($re);eUe=r(hzr,"reformer"),hzr.forEach(t),oUe=r(A0e," \u2014 "),fS=n(A0e,"A",{href:!0});var uzr=s(fS);rUe=r(uzr,"ReformerConfig"),uzr.forEach(t),tUe=r(A0e," (Reformer model)"),A0e.forEach(t),aUe=i(y),qf=n(y,"LI",{});var y0e=s(qf);kre=n(y0e,"STRONG",{});var pzr=s(kre);nUe=r(pzr,"regnet"),pzr.forEach(t),sUe=r(y0e," \u2014 "),gS=n(y0e,"A",{href:!0});var _zr=s(gS);lUe=r(_zr,"RegNetConfig"),_zr.forEach(t),iUe=r(y0e," (RegNet model)"),y0e.forEach(t),dUe=i(y),Nf=n(y,"LI",{});var L0e=s(Nf);Sre=n(L0e,"STRONG",{});var bzr=s(Sre);cUe=r(bzr,"rembert"),bzr.forEach(t),mUe=r(L0e," \u2014 "),hS=n(L0e,"A",{href:!0});var vzr=s(hS);fUe=r(vzr,"RemBertConfig"),vzr.forEach(t),gUe=r(L0e," (RemBERT model)"),L0e.forEach(t),hUe=i(y),jf=n(y,"LI",{});var x0e=s(jf);Rre=n(x0e,"STRONG",{});var Fzr=s(Rre);uUe=r(Fzr,"resnet"),Fzr.forEach(t),pUe=r(x0e," \u2014 "),uS=n(x0e,"A",{href:!0});var Tzr=s(uS);_Ue=r(Tzr,"ResNetConfig"),Tzr.forEach(t),bUe=r(x0e," (ResNet model)"),x0e.forEach(t),vUe=i(y),Df=n(y,"LI",{});var $0e=s(Df);Pre=n($0e,"STRONG",{});var Mzr=s(Pre);FUe=r(Mzr,"retribert"),Mzr.forEach(t),TUe=r($0e," \u2014 "),pS=n($0e,"A",{href:!0});var Ezr=s(pS);MUe=r(Ezr,"RetriBertConfig"),Ezr.forEach(t),EUe=r($0e," (RetriBERT model)"),$0e.forEach(t),CUe=i(y),Gf=n(y,"LI",{});var k0e=s(Gf);Bre=n(k0e,"STRONG",{});var Czr=s(Bre);wUe=r(Czr,"roberta"),Czr.forEach(t),AUe=r(k0e," \u2014 "),_S=n(k0e,"A",{href:!0});var wzr=s(_S);yUe=r(wzr,"RobertaConfig"),wzr.forEach(t),LUe=r(k0e," (RoBERTa model)"),k0e.forEach(t),xUe=i(y),Of=n(y,"LI",{});var S0e=s(Of);Ire=n(S0e,"STRONG",{});var Azr=s(Ire);$Ue=r(Azr,"roformer"),Azr.forEach(t),kUe=r(S0e," \u2014 "),bS=n(S0e,"A",{href:!0});var yzr=s(bS);SUe=r(yzr,"RoFormerConfig"),yzr.forEach(t),RUe=r(S0e," (RoFormer model)"),S0e.forEach(t),PUe=i(y),Vf=n(y,"LI",{});var R0e=s(Vf);qre=n(R0e,"STRONG",{});var Lzr=s(qre);BUe=r(Lzr,"segformer"),Lzr.forEach(t),IUe=r(R0e," \u2014 "),vS=n(R0e,"A",{href:!0});var xzr=s(vS);qUe=r(xzr,"SegformerConfig"),xzr.forEach(t),NUe=r(R0e," (SegFormer model)"),R0e.forEach(t),jUe=i(y),Xf=n(y,"LI",{});var P0e=s(Xf);Nre=n(P0e,"STRONG",{});var $zr=s(Nre);DUe=r($zr,"sew"),$zr.forEach(t),GUe=r(P0e," \u2014 "),FS=n(P0e,"A",{href:!0});var kzr=s(FS);OUe=r(kzr,"SEWConfig"),kzr.forEach(t),VUe=r(P0e," (SEW model)"),P0e.forEach(t),XUe=i(y),zf=n(y,"LI",{});var B0e=s(zf);jre=n(B0e,"STRONG",{});var Szr=s(jre);zUe=r(Szr,"sew-d"),Szr.forEach(t),WUe=r(B0e," \u2014 "),TS=n(B0e,"A",{href:!0});var Rzr=s(TS);QUe=r(Rzr,"SEWDConfig"),Rzr.forEach(t),HUe=r(B0e," (SEW-D model)"),B0e.forEach(t),UUe=i(y),Wf=n(y,"LI",{});var I0e=s(Wf);Dre=n(I0e,"STRONG",{});var Pzr=s(Dre);JUe=r(Pzr,"speech-encoder-decoder"),Pzr.forEach(t),YUe=r(I0e," \u2014 "),MS=n(I0e,"A",{href:!0});var Bzr=s(MS);KUe=r(Bzr,"SpeechEncoderDecoderConfig"),Bzr.forEach(t),ZUe=r(I0e," (Speech Encoder decoder model)"),I0e.forEach(t),eJe=i(y),Qf=n(y,"LI",{});var q0e=s(Qf);Gre=n(q0e,"STRONG",{});var Izr=s(Gre);oJe=r(Izr,"speech_to_text"),Izr.forEach(t),rJe=r(q0e," \u2014 "),ES=n(q0e,"A",{href:!0});var qzr=s(ES);tJe=r(qzr,"Speech2TextConfig"),qzr.forEach(t),aJe=r(q0e," (Speech2Text model)"),q0e.forEach(t),nJe=i(y),Hf=n(y,"LI",{});var N0e=s(Hf);Ore=n(N0e,"STRONG",{});var Nzr=s(Ore);sJe=r(Nzr,"speech_to_text_2"),Nzr.forEach(t),lJe=r(N0e," \u2014 "),CS=n(N0e,"A",{href:!0});var jzr=s(CS);iJe=r(jzr,"Speech2Text2Config"),jzr.forEach(t),dJe=r(N0e," (Speech2Text2 model)"),N0e.forEach(t),cJe=i(y),Uf=n(y,"LI",{});var j0e=s(Uf);Vre=n(j0e,"STRONG",{});var Dzr=s(Vre);mJe=r(Dzr,"splinter"),Dzr.forEach(t),fJe=r(j0e," \u2014 "),wS=n(j0e,"A",{href:!0});var Gzr=s(wS);gJe=r(Gzr,"SplinterConfig"),Gzr.forEach(t),hJe=r(j0e," (Splinter model)"),j0e.forEach(t),uJe=i(y),Jf=n(y,"LI",{});var D0e=s(Jf);Xre=n(D0e,"STRONG",{});var Ozr=s(Xre);pJe=r(Ozr,"squeezebert"),Ozr.forEach(t),_Je=r(D0e," \u2014 "),AS=n(D0e,"A",{href:!0});var Vzr=s(AS);bJe=r(Vzr,"SqueezeBertConfig"),Vzr.forEach(t),vJe=r(D0e," (SqueezeBERT model)"),D0e.forEach(t),FJe=i(y),Yf=n(y,"LI",{});var G0e=s(Yf);zre=n(G0e,"STRONG",{});var Xzr=s(zre);TJe=r(Xzr,"swin"),Xzr.forEach(t),MJe=r(G0e," \u2014 "),yS=n(G0e,"A",{href:!0});var zzr=s(yS);EJe=r(zzr,"SwinConfig"),zzr.forEach(t),CJe=r(G0e," (Swin model)"),G0e.forEach(t),wJe=i(y),Kf=n(y,"LI",{});var O0e=s(Kf);Wre=n(O0e,"STRONG",{});var Wzr=s(Wre);AJe=r(Wzr,"t5"),Wzr.forEach(t),yJe=r(O0e," \u2014 "),LS=n(O0e,"A",{href:!0});var Qzr=s(LS);LJe=r(Qzr,"T5Config"),Qzr.forEach(t),xJe=r(O0e," (T5 model)"),O0e.forEach(t),$Je=i(y),Zf=n(y,"LI",{});var V0e=s(Zf);Qre=n(V0e,"STRONG",{});var Hzr=s(Qre);kJe=r(Hzr,"tapas"),Hzr.forEach(t),SJe=r(V0e," \u2014 "),xS=n(V0e,"A",{href:!0});var Uzr=s(xS);RJe=r(Uzr,"TapasConfig"),Uzr.forEach(t),PJe=r(V0e," (TAPAS model)"),V0e.forEach(t),BJe=i(y),eg=n(y,"LI",{});var X0e=s(eg);Hre=n(X0e,"STRONG",{});var Jzr=s(Hre);IJe=r(Jzr,"trajectory_transformer"),Jzr.forEach(t),qJe=r(X0e," \u2014 "),$S=n(X0e,"A",{href:!0});var Yzr=s($S);NJe=r(Yzr,"TrajectoryTransformerConfig"),Yzr.forEach(t),jJe=r(X0e," (Trajectory Transformer model)"),X0e.forEach(t),DJe=i(y),og=n(y,"LI",{});var z0e=s(og);Ure=n(z0e,"STRONG",{});var Kzr=s(Ure);GJe=r(Kzr,"transfo-xl"),Kzr.forEach(t),OJe=r(z0e," \u2014 "),kS=n(z0e,"A",{href:!0});var Zzr=s(kS);VJe=r(Zzr,"TransfoXLConfig"),Zzr.forEach(t),XJe=r(z0e," (Transformer-XL model)"),z0e.forEach(t),zJe=i(y),rg=n(y,"LI",{});var W0e=s(rg);Jre=n(W0e,"STRONG",{});var eWr=s(Jre);WJe=r(eWr,"trocr"),eWr.forEach(t),QJe=r(W0e," \u2014 "),SS=n(W0e,"A",{href:!0});var oWr=s(SS);HJe=r(oWr,"TrOCRConfig"),oWr.forEach(t),UJe=r(W0e," (TrOCR model)"),W0e.forEach(t),JJe=i(y),tg=n(y,"LI",{});var Q0e=s(tg);Yre=n(Q0e,"STRONG",{});var rWr=s(Yre);YJe=r(rWr,"unispeech"),rWr.forEach(t),KJe=r(Q0e," \u2014 "),RS=n(Q0e,"A",{href:!0});var tWr=s(RS);ZJe=r(tWr,"UniSpeechConfig"),tWr.forEach(t),eYe=r(Q0e," (UniSpeech model)"),Q0e.forEach(t),oYe=i(y),ag=n(y,"LI",{});var H0e=s(ag);Kre=n(H0e,"STRONG",{});var aWr=s(Kre);rYe=r(aWr,"unispeech-sat"),aWr.forEach(t),tYe=r(H0e," \u2014 "),PS=n(H0e,"A",{href:!0});var nWr=s(PS);aYe=r(nWr,"UniSpeechSatConfig"),nWr.forEach(t),nYe=r(H0e," (UniSpeechSat model)"),H0e.forEach(t),sYe=i(y),ng=n(y,"LI",{});var U0e=s(ng);Zre=n(U0e,"STRONG",{});var sWr=s(Zre);lYe=r(sWr,"van"),sWr.forEach(t),iYe=r(U0e," \u2014 "),BS=n(U0e,"A",{href:!0});var lWr=s(BS);dYe=r(lWr,"VanConfig"),lWr.forEach(t),cYe=r(U0e," (VAN model)"),U0e.forEach(t),mYe=i(y),sg=n(y,"LI",{});var J0e=s(sg);ete=n(J0e,"STRONG",{});var iWr=s(ete);fYe=r(iWr,"vilt"),iWr.forEach(t),gYe=r(J0e," \u2014 "),IS=n(J0e,"A",{href:!0});var dWr=s(IS);hYe=r(dWr,"ViltConfig"),dWr.forEach(t),uYe=r(J0e," (ViLT model)"),J0e.forEach(t),pYe=i(y),lg=n(y,"LI",{});var Y0e=s(lg);ote=n(Y0e,"STRONG",{});var cWr=s(ote);_Ye=r(cWr,"vision-encoder-decoder"),cWr.forEach(t),bYe=r(Y0e," \u2014 "),qS=n(Y0e,"A",{href:!0});var mWr=s(qS);vYe=r(mWr,"VisionEncoderDecoderConfig"),mWr.forEach(t),FYe=r(Y0e," (Vision Encoder decoder model)"),Y0e.forEach(t),TYe=i(y),ig=n(y,"LI",{});var K0e=s(ig);rte=n(K0e,"STRONG",{});var fWr=s(rte);MYe=r(fWr,"vision-text-dual-encoder"),fWr.forEach(t),EYe=r(K0e," \u2014 "),NS=n(K0e,"A",{href:!0});var gWr=s(NS);CYe=r(gWr,"VisionTextDualEncoderConfig"),gWr.forEach(t),wYe=r(K0e," (VisionTextDualEncoder model)"),K0e.forEach(t),AYe=i(y),dg=n(y,"LI",{});var Z0e=s(dg);tte=n(Z0e,"STRONG",{});var hWr=s(tte);yYe=r(hWr,"visual_bert"),hWr.forEach(t),LYe=r(Z0e," \u2014 "),jS=n(Z0e,"A",{href:!0});var uWr=s(jS);xYe=r(uWr,"VisualBertConfig"),uWr.forEach(t),$Ye=r(Z0e," (VisualBert model)"),Z0e.forEach(t),kYe=i(y),cg=n(y,"LI",{});var eAe=s(cg);ate=n(eAe,"STRONG",{});var pWr=s(ate);SYe=r(pWr,"vit"),pWr.forEach(t),RYe=r(eAe," \u2014 "),DS=n(eAe,"A",{href:!0});var _Wr=s(DS);PYe=r(_Wr,"ViTConfig"),_Wr.forEach(t),BYe=r(eAe," (ViT model)"),eAe.forEach(t),IYe=i(y),mg=n(y,"LI",{});var oAe=s(mg);nte=n(oAe,"STRONG",{});var bWr=s(nte);qYe=r(bWr,"vit_mae"),bWr.forEach(t),NYe=r(oAe," \u2014 "),GS=n(oAe,"A",{href:!0});var vWr=s(GS);jYe=r(vWr,"ViTMAEConfig"),vWr.forEach(t),DYe=r(oAe," (ViTMAE model)"),oAe.forEach(t),GYe=i(y),fg=n(y,"LI",{});var rAe=s(fg);ste=n(rAe,"STRONG",{});var FWr=s(ste);OYe=r(FWr,"wav2vec2"),FWr.forEach(t),VYe=r(rAe," \u2014 "),OS=n(rAe,"A",{href:!0});var TWr=s(OS);XYe=r(TWr,"Wav2Vec2Config"),TWr.forEach(t),zYe=r(rAe," (Wav2Vec2 model)"),rAe.forEach(t),WYe=i(y),gg=n(y,"LI",{});var tAe=s(gg);lte=n(tAe,"STRONG",{});var MWr=s(lte);QYe=r(MWr,"wav2vec2-conformer"),MWr.forEach(t),HYe=r(tAe," \u2014 "),VS=n(tAe,"A",{href:!0});var EWr=s(VS);UYe=r(EWr,"Wav2Vec2ConformerConfig"),EWr.forEach(t),JYe=r(tAe," (Wav2Vec2-Conformer model)"),tAe.forEach(t),YYe=i(y),hg=n(y,"LI",{});var aAe=s(hg);ite=n(aAe,"STRONG",{});var CWr=s(ite);KYe=r(CWr,"wavlm"),CWr.forEach(t),ZYe=r(aAe," \u2014 "),XS=n(aAe,"A",{href:!0});var wWr=s(XS);eKe=r(wWr,"WavLMConfig"),wWr.forEach(t),oKe=r(aAe," (WavLM model)"),aAe.forEach(t),rKe=i(y),ug=n(y,"LI",{});var nAe=s(ug);dte=n(nAe,"STRONG",{});var AWr=s(dte);tKe=r(AWr,"xglm"),AWr.forEach(t),aKe=r(nAe," \u2014 "),zS=n(nAe,"A",{href:!0});var yWr=s(zS);nKe=r(yWr,"XGLMConfig"),yWr.forEach(t),sKe=r(nAe," (XGLM model)"),nAe.forEach(t),lKe=i(y),pg=n(y,"LI",{});var sAe=s(pg);cte=n(sAe,"STRONG",{});var LWr=s(cte);iKe=r(LWr,"xlm"),LWr.forEach(t),dKe=r(sAe," \u2014 "),WS=n(sAe,"A",{href:!0});var xWr=s(WS);cKe=r(xWr,"XLMConfig"),xWr.forEach(t),mKe=r(sAe," (XLM model)"),sAe.forEach(t),fKe=i(y),_g=n(y,"LI",{});var lAe=s(_g);mte=n(lAe,"STRONG",{});var $Wr=s(mte);gKe=r($Wr,"xlm-prophetnet"),$Wr.forEach(t),hKe=r(lAe," \u2014 "),QS=n(lAe,"A",{href:!0});var kWr=s(QS);uKe=r(kWr,"XLMProphetNetConfig"),kWr.forEach(t),pKe=r(lAe," (XLMProphetNet model)"),lAe.forEach(t),_Ke=i(y),bg=n(y,"LI",{});var iAe=s(bg);fte=n(iAe,"STRONG",{});var SWr=s(fte);bKe=r(SWr,"xlm-roberta"),SWr.forEach(t),vKe=r(iAe," \u2014 "),HS=n(iAe,"A",{href:!0});var RWr=s(HS);FKe=r(RWr,"XLMRobertaConfig"),RWr.forEach(t),TKe=r(iAe," (XLM-RoBERTa model)"),iAe.forEach(t),MKe=i(y),vg=n(y,"LI",{});var dAe=s(vg);gte=n(dAe,"STRONG",{});var PWr=s(gte);EKe=r(PWr,"xlm-roberta-xl"),PWr.forEach(t),CKe=r(dAe," \u2014 "),US=n(dAe,"A",{href:!0});var BWr=s(US);wKe=r(BWr,"XLMRobertaXLConfig"),BWr.forEach(t),AKe=r(dAe," (XLM-RoBERTa-XL model)"),dAe.forEach(t),yKe=i(y),Fg=n(y,"LI",{});var cAe=s(Fg);hte=n(cAe,"STRONG",{});var IWr=s(hte);LKe=r(IWr,"xlnet"),IWr.forEach(t),xKe=r(cAe," \u2014 "),JS=n(cAe,"A",{href:!0});var qWr=s(JS);$Ke=r(qWr,"XLNetConfig"),qWr.forEach(t),kKe=r(cAe," (XLNet model)"),cAe.forEach(t),SKe=i(y),Tg=n(y,"LI",{});var mAe=s(Tg);ute=n(mAe,"STRONG",{});var NWr=s(ute);RKe=r(NWr,"yolos"),NWr.forEach(t),PKe=r(mAe," \u2014 "),YS=n(mAe,"A",{href:!0});var jWr=s(YS);BKe=r(jWr,"YolosConfig"),jWr.forEach(t),IKe=r(mAe," (YOLOS model)"),mAe.forEach(t),qKe=i(y),Mg=n(y,"LI",{});var fAe=s(Mg);pte=n(fAe,"STRONG",{});var DWr=s(pte);NKe=r(DWr,"yoso"),DWr.forEach(t),jKe=r(fAe," \u2014 "),KS=n(fAe,"A",{href:!0});var GWr=s(KS);DKe=r(GWr,"YosoConfig"),GWr.forEach(t),GKe=r(fAe," (YOSO model)"),fAe.forEach(t),y.forEach(t),OKe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),VKe=i(et),Cg=n(et,"DIV",{class:!0});var rDe=s(Cg);T(Py.$$.fragment,rDe),XKe=i(rDe),_te=n(rDe,"P",{});var OWr=s(_te);zKe=r(OWr,"Register a new configuration for this class."),OWr.forEach(t),rDe.forEach(t),et.forEach(t),nNe=i(m),Ti=n(m,"H2",{class:!0});var tDe=s(Ti);wg=n(tDe,"A",{id:!0,class:!0,href:!0});var VWr=s(wg);bte=n(VWr,"SPAN",{});var XWr=s(bte);T(By.$$.fragment,XWr),XWr.forEach(t),VWr.forEach(t),WKe=i(tDe),vte=n(tDe,"SPAN",{});var zWr=s(vte);QKe=r(zWr,"AutoTokenizer"),zWr.forEach(t),tDe.forEach(t),sNe=i(m),wo=n(m,"DIV",{class:!0});var qs=s(wo);T(Iy.$$.fragment,qs),HKe=i(qs),qy=n(qs,"P",{});var aDe=s(qy);UKe=r(aDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=n(aDe,"A",{href:!0});var WWr=s(ZS);JKe=r(WWr,"AutoTokenizer.from_pretrained()"),WWr.forEach(t),YKe=r(aDe," class method."),aDe.forEach(t),KKe=i(qs),Ny=n(qs,"P",{});var nDe=s(Ny);ZKe=r(nDe,"This class cannot be instantiated directly using "),Fte=n(nDe,"CODE",{});var QWr=s(Fte);eZe=r(QWr,"__init__()"),QWr.forEach(t),oZe=r(nDe," (throws an error)."),nDe.forEach(t),rZe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(jy.$$.fragment,Ns),tZe=i(Ns),Tte=n(Ns,"P",{});var HWr=s(Tte);aZe=r(HWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HWr.forEach(t),nZe=i(Ns),Aa=n(Ns,"P",{});var xA=s(Aa);sZe=r(xA,"The tokenizer class to instantiate is selected based on the "),Mte=n(xA,"CODE",{});var UWr=s(Mte);lZe=r(UWr,"model_type"),UWr.forEach(t),iZe=r(xA,` property of the config object (either
passed as an argument or loaded from `),Ete=n(xA,"CODE",{});var JWr=s(Ete);dZe=r(JWr,"pretrained_model_name_or_path"),JWr.forEach(t),cZe=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=n(xA,"CODE",{});var YWr=s(Cte);mZe=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),fZe=r(xA,":"),xA.forEach(t),gZe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Dx=s(Sn);wte=n(Dx,"STRONG",{});var KWr=s(wte);hZe=r(KWr,"albert"),KWr.forEach(t),uZe=r(Dx," \u2014 "),eR=n(Dx,"A",{href:!0});var ZWr=s(eR);pZe=r(ZWr,"AlbertTokenizer"),ZWr.forEach(t),_Ze=r(Dx," or "),oR=n(Dx,"A",{href:!0});var eQr=s(oR);bZe=r(eQr,"AlbertTokenizerFast"),eQr.forEach(t),vZe=r(Dx," (ALBERT model)"),Dx.forEach(t),FZe=i(S),Rn=n(S,"LI",{});var Gx=s(Rn);Ate=n(Gx,"STRONG",{});var oQr=s(Ate);TZe=r(oQr,"bart"),oQr.forEach(t),MZe=r(Gx," \u2014 "),rR=n(Gx,"A",{href:!0});var rQr=s(rR);EZe=r(rQr,"BartTokenizer"),rQr.forEach(t),CZe=r(Gx," or "),tR=n(Gx,"A",{href:!0});var tQr=s(tR);wZe=r(tQr,"BartTokenizerFast"),tQr.forEach(t),AZe=r(Gx," (BART model)"),Gx.forEach(t),yZe=i(S),Pn=n(S,"LI",{});var Ox=s(Pn);yte=n(Ox,"STRONG",{});var aQr=s(yte);LZe=r(aQr,"barthez"),aQr.forEach(t),xZe=r(Ox," \u2014 "),aR=n(Ox,"A",{href:!0});var nQr=s(aR);$Ze=r(nQr,"BarthezTokenizer"),nQr.forEach(t),kZe=r(Ox," or "),nR=n(Ox,"A",{href:!0});var sQr=s(nR);SZe=r(sQr,"BarthezTokenizerFast"),sQr.forEach(t),RZe=r(Ox," (BARThez model)"),Ox.forEach(t),PZe=i(S),Ag=n(S,"LI",{});var gAe=s(Ag);Lte=n(gAe,"STRONG",{});var lQr=s(Lte);BZe=r(lQr,"bartpho"),lQr.forEach(t),IZe=r(gAe," \u2014 "),sR=n(gAe,"A",{href:!0});var iQr=s(sR);qZe=r(iQr,"BartphoTokenizer"),iQr.forEach(t),NZe=r(gAe," (BARTpho model)"),gAe.forEach(t),jZe=i(S),Bn=n(S,"LI",{});var Vx=s(Bn);xte=n(Vx,"STRONG",{});var dQr=s(xte);DZe=r(dQr,"bert"),dQr.forEach(t),GZe=r(Vx," \u2014 "),lR=n(Vx,"A",{href:!0});var cQr=s(lR);OZe=r(cQr,"BertTokenizer"),cQr.forEach(t),VZe=r(Vx," or "),iR=n(Vx,"A",{href:!0});var mQr=s(iR);XZe=r(mQr,"BertTokenizerFast"),mQr.forEach(t),zZe=r(Vx," (BERT model)"),Vx.forEach(t),WZe=i(S),yg=n(S,"LI",{});var hAe=s(yg);$te=n(hAe,"STRONG",{});var fQr=s($te);QZe=r(fQr,"bert-generation"),fQr.forEach(t),HZe=r(hAe," \u2014 "),dR=n(hAe,"A",{href:!0});var gQr=s(dR);UZe=r(gQr,"BertGenerationTokenizer"),gQr.forEach(t),JZe=r(hAe," (Bert Generation model)"),hAe.forEach(t),YZe=i(S),Lg=n(S,"LI",{});var uAe=s(Lg);kte=n(uAe,"STRONG",{});var hQr=s(kte);KZe=r(hQr,"bert-japanese"),hQr.forEach(t),ZZe=r(uAe," \u2014 "),cR=n(uAe,"A",{href:!0});var uQr=s(cR);eeo=r(uQr,"BertJapaneseTokenizer"),uQr.forEach(t),oeo=r(uAe," (BertJapanese model)"),uAe.forEach(t),reo=i(S),xg=n(S,"LI",{});var pAe=s(xg);Ste=n(pAe,"STRONG",{});var pQr=s(Ste);teo=r(pQr,"bertweet"),pQr.forEach(t),aeo=r(pAe," \u2014 "),mR=n(pAe,"A",{href:!0});var _Qr=s(mR);neo=r(_Qr,"BertweetTokenizer"),_Qr.forEach(t),seo=r(pAe," (Bertweet model)"),pAe.forEach(t),leo=i(S),In=n(S,"LI",{});var Xx=s(In);Rte=n(Xx,"STRONG",{});var bQr=s(Rte);ieo=r(bQr,"big_bird"),bQr.forEach(t),deo=r(Xx," \u2014 "),fR=n(Xx,"A",{href:!0});var vQr=s(fR);ceo=r(vQr,"BigBirdTokenizer"),vQr.forEach(t),meo=r(Xx," or "),gR=n(Xx,"A",{href:!0});var FQr=s(gR);feo=r(FQr,"BigBirdTokenizerFast"),FQr.forEach(t),geo=r(Xx," (BigBird model)"),Xx.forEach(t),heo=i(S),qn=n(S,"LI",{});var zx=s(qn);Pte=n(zx,"STRONG",{});var TQr=s(Pte);ueo=r(TQr,"bigbird_pegasus"),TQr.forEach(t),peo=r(zx," \u2014 "),hR=n(zx,"A",{href:!0});var MQr=s(hR);_eo=r(MQr,"PegasusTokenizer"),MQr.forEach(t),beo=r(zx," or "),uR=n(zx,"A",{href:!0});var EQr=s(uR);veo=r(EQr,"PegasusTokenizerFast"),EQr.forEach(t),Feo=r(zx," (BigBirdPegasus model)"),zx.forEach(t),Teo=i(S),Nn=n(S,"LI",{});var Wx=s(Nn);Bte=n(Wx,"STRONG",{});var CQr=s(Bte);Meo=r(CQr,"blenderbot"),CQr.forEach(t),Eeo=r(Wx," \u2014 "),pR=n(Wx,"A",{href:!0});var wQr=s(pR);Ceo=r(wQr,"BlenderbotTokenizer"),wQr.forEach(t),weo=r(Wx," or "),_R=n(Wx,"A",{href:!0});var AQr=s(_R);Aeo=r(AQr,"BlenderbotTokenizerFast"),AQr.forEach(t),yeo=r(Wx," (Blenderbot model)"),Wx.forEach(t),Leo=i(S),$g=n(S,"LI",{});var _Ae=s($g);Ite=n(_Ae,"STRONG",{});var yQr=s(Ite);xeo=r(yQr,"blenderbot-small"),yQr.forEach(t),$eo=r(_Ae," \u2014 "),bR=n(_Ae,"A",{href:!0});var LQr=s(bR);keo=r(LQr,"BlenderbotSmallTokenizer"),LQr.forEach(t),Seo=r(_Ae," (BlenderbotSmall model)"),_Ae.forEach(t),Reo=i(S),kg=n(S,"LI",{});var bAe=s(kg);qte=n(bAe,"STRONG",{});var xQr=s(qte);Peo=r(xQr,"byt5"),xQr.forEach(t),Beo=r(bAe," \u2014 "),vR=n(bAe,"A",{href:!0});var $Qr=s(vR);Ieo=r($Qr,"ByT5Tokenizer"),$Qr.forEach(t),qeo=r(bAe," (ByT5 model)"),bAe.forEach(t),Neo=i(S),jn=n(S,"LI",{});var Qx=s(jn);Nte=n(Qx,"STRONG",{});var kQr=s(Nte);jeo=r(kQr,"camembert"),kQr.forEach(t),Deo=r(Qx," \u2014 "),FR=n(Qx,"A",{href:!0});var SQr=s(FR);Geo=r(SQr,"CamembertTokenizer"),SQr.forEach(t),Oeo=r(Qx," or "),TR=n(Qx,"A",{href:!0});var RQr=s(TR);Veo=r(RQr,"CamembertTokenizerFast"),RQr.forEach(t),Xeo=r(Qx," (CamemBERT model)"),Qx.forEach(t),zeo=i(S),Sg=n(S,"LI",{});var vAe=s(Sg);jte=n(vAe,"STRONG",{});var PQr=s(jte);Weo=r(PQr,"canine"),PQr.forEach(t),Qeo=r(vAe," \u2014 "),MR=n(vAe,"A",{href:!0});var BQr=s(MR);Heo=r(BQr,"CanineTokenizer"),BQr.forEach(t),Ueo=r(vAe," (Canine model)"),vAe.forEach(t),Jeo=i(S),Dn=n(S,"LI",{});var Hx=s(Dn);Dte=n(Hx,"STRONG",{});var IQr=s(Dte);Yeo=r(IQr,"clip"),IQr.forEach(t),Keo=r(Hx," \u2014 "),ER=n(Hx,"A",{href:!0});var qQr=s(ER);Zeo=r(qQr,"CLIPTokenizer"),qQr.forEach(t),eoo=r(Hx," or "),CR=n(Hx,"A",{href:!0});var NQr=s(CR);ooo=r(NQr,"CLIPTokenizerFast"),NQr.forEach(t),roo=r(Hx," (CLIP model)"),Hx.forEach(t),too=i(S),Gn=n(S,"LI",{});var Ux=s(Gn);Gte=n(Ux,"STRONG",{});var jQr=s(Gte);aoo=r(jQr,"convbert"),jQr.forEach(t),noo=r(Ux," \u2014 "),wR=n(Ux,"A",{href:!0});var DQr=s(wR);soo=r(DQr,"ConvBertTokenizer"),DQr.forEach(t),loo=r(Ux," or "),AR=n(Ux,"A",{href:!0});var GQr=s(AR);ioo=r(GQr,"ConvBertTokenizerFast"),GQr.forEach(t),doo=r(Ux," (ConvBERT model)"),Ux.forEach(t),coo=i(S),On=n(S,"LI",{});var Jx=s(On);Ote=n(Jx,"STRONG",{});var OQr=s(Ote);moo=r(OQr,"cpm"),OQr.forEach(t),foo=r(Jx," \u2014 "),yR=n(Jx,"A",{href:!0});var VQr=s(yR);goo=r(VQr,"CpmTokenizer"),VQr.forEach(t),hoo=r(Jx," or "),LR=n(Jx,"A",{href:!0});var XQr=s(LR);uoo=r(XQr,"CpmTokenizerFast"),XQr.forEach(t),poo=r(Jx," (CPM model)"),Jx.forEach(t),_oo=i(S),Rg=n(S,"LI",{});var FAe=s(Rg);Vte=n(FAe,"STRONG",{});var zQr=s(Vte);boo=r(zQr,"ctrl"),zQr.forEach(t),voo=r(FAe," \u2014 "),xR=n(FAe,"A",{href:!0});var WQr=s(xR);Foo=r(WQr,"CTRLTokenizer"),WQr.forEach(t),Too=r(FAe," (CTRL model)"),FAe.forEach(t),Moo=i(S),Vn=n(S,"LI",{});var Yx=s(Vn);Xte=n(Yx,"STRONG",{});var QQr=s(Xte);Eoo=r(QQr,"data2vec-text"),QQr.forEach(t),Coo=r(Yx," \u2014 "),$R=n(Yx,"A",{href:!0});var HQr=s($R);woo=r(HQr,"RobertaTokenizer"),HQr.forEach(t),Aoo=r(Yx," or "),kR=n(Yx,"A",{href:!0});var UQr=s(kR);yoo=r(UQr,"RobertaTokenizerFast"),UQr.forEach(t),Loo=r(Yx," (Data2VecText model)"),Yx.forEach(t),xoo=i(S),Xn=n(S,"LI",{});var Kx=s(Xn);zte=n(Kx,"STRONG",{});var JQr=s(zte);$oo=r(JQr,"deberta"),JQr.forEach(t),koo=r(Kx," \u2014 "),SR=n(Kx,"A",{href:!0});var YQr=s(SR);Soo=r(YQr,"DebertaTokenizer"),YQr.forEach(t),Roo=r(Kx," or "),RR=n(Kx,"A",{href:!0});var KQr=s(RR);Poo=r(KQr,"DebertaTokenizerFast"),KQr.forEach(t),Boo=r(Kx," (DeBERTa model)"),Kx.forEach(t),Ioo=i(S),zn=n(S,"LI",{});var Zx=s(zn);Wte=n(Zx,"STRONG",{});var ZQr=s(Wte);qoo=r(ZQr,"deberta-v2"),ZQr.forEach(t),Noo=r(Zx," \u2014 "),PR=n(Zx,"A",{href:!0});var eHr=s(PR);joo=r(eHr,"DebertaV2Tokenizer"),eHr.forEach(t),Doo=r(Zx," or "),BR=n(Zx,"A",{href:!0});var oHr=s(BR);Goo=r(oHr,"DebertaV2TokenizerFast"),oHr.forEach(t),Ooo=r(Zx," (DeBERTa-v2 model)"),Zx.forEach(t),Voo=i(S),Wn=n(S,"LI",{});var e$=s(Wn);Qte=n(e$,"STRONG",{});var rHr=s(Qte);Xoo=r(rHr,"distilbert"),rHr.forEach(t),zoo=r(e$," \u2014 "),IR=n(e$,"A",{href:!0});var tHr=s(IR);Woo=r(tHr,"DistilBertTokenizer"),tHr.forEach(t),Qoo=r(e$," or "),qR=n(e$,"A",{href:!0});var aHr=s(qR);Hoo=r(aHr,"DistilBertTokenizerFast"),aHr.forEach(t),Uoo=r(e$," (DistilBERT model)"),e$.forEach(t),Joo=i(S),Qn=n(S,"LI",{});var o$=s(Qn);Hte=n(o$,"STRONG",{});var nHr=s(Hte);Yoo=r(nHr,"dpr"),nHr.forEach(t),Koo=r(o$," \u2014 "),NR=n(o$,"A",{href:!0});var sHr=s(NR);Zoo=r(sHr,"DPRQuestionEncoderTokenizer"),sHr.forEach(t),ero=r(o$," or "),jR=n(o$,"A",{href:!0});var lHr=s(jR);oro=r(lHr,"DPRQuestionEncoderTokenizerFast"),lHr.forEach(t),rro=r(o$," (DPR model)"),o$.forEach(t),tro=i(S),Hn=n(S,"LI",{});var r$=s(Hn);Ute=n(r$,"STRONG",{});var iHr=s(Ute);aro=r(iHr,"electra"),iHr.forEach(t),nro=r(r$," \u2014 "),DR=n(r$,"A",{href:!0});var dHr=s(DR);sro=r(dHr,"ElectraTokenizer"),dHr.forEach(t),lro=r(r$," or "),GR=n(r$,"A",{href:!0});var cHr=s(GR);iro=r(cHr,"ElectraTokenizerFast"),cHr.forEach(t),dro=r(r$," (ELECTRA model)"),r$.forEach(t),cro=i(S),Pg=n(S,"LI",{});var TAe=s(Pg);Jte=n(TAe,"STRONG",{});var mHr=s(Jte);mro=r(mHr,"flaubert"),mHr.forEach(t),fro=r(TAe," \u2014 "),OR=n(TAe,"A",{href:!0});var fHr=s(OR);gro=r(fHr,"FlaubertTokenizer"),fHr.forEach(t),hro=r(TAe," (FlauBERT model)"),TAe.forEach(t),uro=i(S),Un=n(S,"LI",{});var t$=s(Un);Yte=n(t$,"STRONG",{});var gHr=s(Yte);pro=r(gHr,"fnet"),gHr.forEach(t),_ro=r(t$," \u2014 "),VR=n(t$,"A",{href:!0});var hHr=s(VR);bro=r(hHr,"FNetTokenizer"),hHr.forEach(t),vro=r(t$," or "),XR=n(t$,"A",{href:!0});var uHr=s(XR);Fro=r(uHr,"FNetTokenizerFast"),uHr.forEach(t),Tro=r(t$," (FNet model)"),t$.forEach(t),Mro=i(S),Bg=n(S,"LI",{});var MAe=s(Bg);Kte=n(MAe,"STRONG",{});var pHr=s(Kte);Ero=r(pHr,"fsmt"),pHr.forEach(t),Cro=r(MAe," \u2014 "),zR=n(MAe,"A",{href:!0});var _Hr=s(zR);wro=r(_Hr,"FSMTTokenizer"),_Hr.forEach(t),Aro=r(MAe," (FairSeq Machine-Translation model)"),MAe.forEach(t),yro=i(S),Jn=n(S,"LI",{});var a$=s(Jn);Zte=n(a$,"STRONG",{});var bHr=s(Zte);Lro=r(bHr,"funnel"),bHr.forEach(t),xro=r(a$," \u2014 "),WR=n(a$,"A",{href:!0});var vHr=s(WR);$ro=r(vHr,"FunnelTokenizer"),vHr.forEach(t),kro=r(a$," or "),QR=n(a$,"A",{href:!0});var FHr=s(QR);Sro=r(FHr,"FunnelTokenizerFast"),FHr.forEach(t),Rro=r(a$," (Funnel Transformer model)"),a$.forEach(t),Pro=i(S),Yn=n(S,"LI",{});var n$=s(Yn);eae=n(n$,"STRONG",{});var THr=s(eae);Bro=r(THr,"gpt2"),THr.forEach(t),Iro=r(n$," \u2014 "),HR=n(n$,"A",{href:!0});var MHr=s(HR);qro=r(MHr,"GPT2Tokenizer"),MHr.forEach(t),Nro=r(n$," or "),UR=n(n$,"A",{href:!0});var EHr=s(UR);jro=r(EHr,"GPT2TokenizerFast"),EHr.forEach(t),Dro=r(n$," (OpenAI GPT-2 model)"),n$.forEach(t),Gro=i(S),Kn=n(S,"LI",{});var s$=s(Kn);oae=n(s$,"STRONG",{});var CHr=s(oae);Oro=r(CHr,"gpt_neo"),CHr.forEach(t),Vro=r(s$," \u2014 "),JR=n(s$,"A",{href:!0});var wHr=s(JR);Xro=r(wHr,"GPT2Tokenizer"),wHr.forEach(t),zro=r(s$," or "),YR=n(s$,"A",{href:!0});var AHr=s(YR);Wro=r(AHr,"GPT2TokenizerFast"),AHr.forEach(t),Qro=r(s$," (GPT Neo model)"),s$.forEach(t),Hro=i(S),Ig=n(S,"LI",{});var EAe=s(Ig);rae=n(EAe,"STRONG",{});var yHr=s(rae);Uro=r(yHr,"gpt_neox"),yHr.forEach(t),Jro=r(EAe," \u2014 "),KR=n(EAe,"A",{href:!0});var LHr=s(KR);Yro=r(LHr,"GPTNeoXTokenizerFast"),LHr.forEach(t),Kro=r(EAe," (GPT NeoX model)"),EAe.forEach(t),Zro=i(S),Zn=n(S,"LI",{});var l$=s(Zn);tae=n(l$,"STRONG",{});var xHr=s(tae);eto=r(xHr,"gptj"),xHr.forEach(t),oto=r(l$," \u2014 "),ZR=n(l$,"A",{href:!0});var $Hr=s(ZR);rto=r($Hr,"GPT2Tokenizer"),$Hr.forEach(t),tto=r(l$," or "),eP=n(l$,"A",{href:!0});var kHr=s(eP);ato=r(kHr,"GPT2TokenizerFast"),kHr.forEach(t),nto=r(l$," (GPT-J model)"),l$.forEach(t),sto=i(S),es=n(S,"LI",{});var i$=s(es);aae=n(i$,"STRONG",{});var SHr=s(aae);lto=r(SHr,"herbert"),SHr.forEach(t),ito=r(i$," \u2014 "),oP=n(i$,"A",{href:!0});var RHr=s(oP);dto=r(RHr,"HerbertTokenizer"),RHr.forEach(t),cto=r(i$," or "),rP=n(i$,"A",{href:!0});var PHr=s(rP);mto=r(PHr,"HerbertTokenizerFast"),PHr.forEach(t),fto=r(i$," (HerBERT model)"),i$.forEach(t),gto=i(S),qg=n(S,"LI",{});var CAe=s(qg);nae=n(CAe,"STRONG",{});var BHr=s(nae);hto=r(BHr,"hubert"),BHr.forEach(t),uto=r(CAe," \u2014 "),tP=n(CAe,"A",{href:!0});var IHr=s(tP);pto=r(IHr,"Wav2Vec2CTCTokenizer"),IHr.forEach(t),_to=r(CAe," (Hubert model)"),CAe.forEach(t),bto=i(S),os=n(S,"LI",{});var d$=s(os);sae=n(d$,"STRONG",{});var qHr=s(sae);vto=r(qHr,"ibert"),qHr.forEach(t),Fto=r(d$," \u2014 "),aP=n(d$,"A",{href:!0});var NHr=s(aP);Tto=r(NHr,"RobertaTokenizer"),NHr.forEach(t),Mto=r(d$," or "),nP=n(d$,"A",{href:!0});var jHr=s(nP);Eto=r(jHr,"RobertaTokenizerFast"),jHr.forEach(t),Cto=r(d$," (I-BERT model)"),d$.forEach(t),wto=i(S),rs=n(S,"LI",{});var c$=s(rs);lae=n(c$,"STRONG",{});var DHr=s(lae);Ato=r(DHr,"layoutlm"),DHr.forEach(t),yto=r(c$," \u2014 "),sP=n(c$,"A",{href:!0});var GHr=s(sP);Lto=r(GHr,"LayoutLMTokenizer"),GHr.forEach(t),xto=r(c$," or "),lP=n(c$,"A",{href:!0});var OHr=s(lP);$to=r(OHr,"LayoutLMTokenizerFast"),OHr.forEach(t),kto=r(c$," (LayoutLM model)"),c$.forEach(t),Sto=i(S),ts=n(S,"LI",{});var m$=s(ts);iae=n(m$,"STRONG",{});var VHr=s(iae);Rto=r(VHr,"layoutlmv2"),VHr.forEach(t),Pto=r(m$," \u2014 "),iP=n(m$,"A",{href:!0});var XHr=s(iP);Bto=r(XHr,"LayoutLMv2Tokenizer"),XHr.forEach(t),Ito=r(m$," or "),dP=n(m$,"A",{href:!0});var zHr=s(dP);qto=r(zHr,"LayoutLMv2TokenizerFast"),zHr.forEach(t),Nto=r(m$," (LayoutLMv2 model)"),m$.forEach(t),jto=i(S),as=n(S,"LI",{});var f$=s(as);dae=n(f$,"STRONG",{});var WHr=s(dae);Dto=r(WHr,"layoutlmv3"),WHr.forEach(t),Gto=r(f$," \u2014 "),cP=n(f$,"A",{href:!0});var QHr=s(cP);Oto=r(QHr,"LayoutLMv3Tokenizer"),QHr.forEach(t),Vto=r(f$," or "),mP=n(f$,"A",{href:!0});var HHr=s(mP);Xto=r(HHr,"LayoutLMv3TokenizerFast"),HHr.forEach(t),zto=r(f$," (LayoutLMv3 model)"),f$.forEach(t),Wto=i(S),ns=n(S,"LI",{});var g$=s(ns);cae=n(g$,"STRONG",{});var UHr=s(cae);Qto=r(UHr,"layoutxlm"),UHr.forEach(t),Hto=r(g$," \u2014 "),fP=n(g$,"A",{href:!0});var JHr=s(fP);Uto=r(JHr,"LayoutXLMTokenizer"),JHr.forEach(t),Jto=r(g$," or "),gP=n(g$,"A",{href:!0});var YHr=s(gP);Yto=r(YHr,"LayoutXLMTokenizerFast"),YHr.forEach(t),Kto=r(g$," (LayoutXLM model)"),g$.forEach(t),Zto=i(S),ss=n(S,"LI",{});var h$=s(ss);mae=n(h$,"STRONG",{});var KHr=s(mae);eao=r(KHr,"led"),KHr.forEach(t),oao=r(h$," \u2014 "),hP=n(h$,"A",{href:!0});var ZHr=s(hP);rao=r(ZHr,"LEDTokenizer"),ZHr.forEach(t),tao=r(h$," or "),uP=n(h$,"A",{href:!0});var eUr=s(uP);aao=r(eUr,"LEDTokenizerFast"),eUr.forEach(t),nao=r(h$," (LED model)"),h$.forEach(t),sao=i(S),ls=n(S,"LI",{});var u$=s(ls);fae=n(u$,"STRONG",{});var oUr=s(fae);lao=r(oUr,"longformer"),oUr.forEach(t),iao=r(u$," \u2014 "),pP=n(u$,"A",{href:!0});var rUr=s(pP);dao=r(rUr,"LongformerTokenizer"),rUr.forEach(t),cao=r(u$," or "),_P=n(u$,"A",{href:!0});var tUr=s(_P);mao=r(tUr,"LongformerTokenizerFast"),tUr.forEach(t),fao=r(u$," (Longformer model)"),u$.forEach(t),gao=i(S),Ng=n(S,"LI",{});var wAe=s(Ng);gae=n(wAe,"STRONG",{});var aUr=s(gae);hao=r(aUr,"luke"),aUr.forEach(t),uao=r(wAe," \u2014 "),bP=n(wAe,"A",{href:!0});var nUr=s(bP);pao=r(nUr,"LukeTokenizer"),nUr.forEach(t),_ao=r(wAe," (LUKE model)"),wAe.forEach(t),bao=i(S),is=n(S,"LI",{});var p$=s(is);hae=n(p$,"STRONG",{});var sUr=s(hae);vao=r(sUr,"lxmert"),sUr.forEach(t),Fao=r(p$," \u2014 "),vP=n(p$,"A",{href:!0});var lUr=s(vP);Tao=r(lUr,"LxmertTokenizer"),lUr.forEach(t),Mao=r(p$," or "),FP=n(p$,"A",{href:!0});var iUr=s(FP);Eao=r(iUr,"LxmertTokenizerFast"),iUr.forEach(t),Cao=r(p$," (LXMERT model)"),p$.forEach(t),wao=i(S),jg=n(S,"LI",{});var AAe=s(jg);uae=n(AAe,"STRONG",{});var dUr=s(uae);Aao=r(dUr,"m2m_100"),dUr.forEach(t),yao=r(AAe," \u2014 "),TP=n(AAe,"A",{href:!0});var cUr=s(TP);Lao=r(cUr,"M2M100Tokenizer"),cUr.forEach(t),xao=r(AAe," (M2M100 model)"),AAe.forEach(t),$ao=i(S),Dg=n(S,"LI",{});var yAe=s(Dg);pae=n(yAe,"STRONG",{});var mUr=s(pae);kao=r(mUr,"marian"),mUr.forEach(t),Sao=r(yAe," \u2014 "),MP=n(yAe,"A",{href:!0});var fUr=s(MP);Rao=r(fUr,"MarianTokenizer"),fUr.forEach(t),Pao=r(yAe," (Marian model)"),yAe.forEach(t),Bao=i(S),ds=n(S,"LI",{});var _$=s(ds);_ae=n(_$,"STRONG",{});var gUr=s(_ae);Iao=r(gUr,"mbart"),gUr.forEach(t),qao=r(_$," \u2014 "),EP=n(_$,"A",{href:!0});var hUr=s(EP);Nao=r(hUr,"MBartTokenizer"),hUr.forEach(t),jao=r(_$," or "),CP=n(_$,"A",{href:!0});var uUr=s(CP);Dao=r(uUr,"MBartTokenizerFast"),uUr.forEach(t),Gao=r(_$," (mBART model)"),_$.forEach(t),Oao=i(S),cs=n(S,"LI",{});var b$=s(cs);bae=n(b$,"STRONG",{});var pUr=s(bae);Vao=r(pUr,"mbart50"),pUr.forEach(t),Xao=r(b$," \u2014 "),wP=n(b$,"A",{href:!0});var _Ur=s(wP);zao=r(_Ur,"MBart50Tokenizer"),_Ur.forEach(t),Wao=r(b$," or "),AP=n(b$,"A",{href:!0});var bUr=s(AP);Qao=r(bUr,"MBart50TokenizerFast"),bUr.forEach(t),Hao=r(b$," (mBART-50 model)"),b$.forEach(t),Uao=i(S),ms=n(S,"LI",{});var v$=s(ms);vae=n(v$,"STRONG",{});var vUr=s(vae);Jao=r(vUr,"megatron-bert"),vUr.forEach(t),Yao=r(v$," \u2014 "),yP=n(v$,"A",{href:!0});var FUr=s(yP);Kao=r(FUr,"BertTokenizer"),FUr.forEach(t),Zao=r(v$," or "),LP=n(v$,"A",{href:!0});var TUr=s(LP);eno=r(TUr,"BertTokenizerFast"),TUr.forEach(t),ono=r(v$," (MegatronBert model)"),v$.forEach(t),rno=i(S),Gg=n(S,"LI",{});var LAe=s(Gg);Fae=n(LAe,"STRONG",{});var MUr=s(Fae);tno=r(MUr,"mluke"),MUr.forEach(t),ano=r(LAe," \u2014 "),xP=n(LAe,"A",{href:!0});var EUr=s(xP);nno=r(EUr,"MLukeTokenizer"),EUr.forEach(t),sno=r(LAe," (mLUKE model)"),LAe.forEach(t),lno=i(S),fs=n(S,"LI",{});var F$=s(fs);Tae=n(F$,"STRONG",{});var CUr=s(Tae);ino=r(CUr,"mobilebert"),CUr.forEach(t),dno=r(F$," \u2014 "),$P=n(F$,"A",{href:!0});var wUr=s($P);cno=r(wUr,"MobileBertTokenizer"),wUr.forEach(t),mno=r(F$," or "),kP=n(F$,"A",{href:!0});var AUr=s(kP);fno=r(AUr,"MobileBertTokenizerFast"),AUr.forEach(t),gno=r(F$," (MobileBERT model)"),F$.forEach(t),hno=i(S),gs=n(S,"LI",{});var T$=s(gs);Mae=n(T$,"STRONG",{});var yUr=s(Mae);uno=r(yUr,"mpnet"),yUr.forEach(t),pno=r(T$," \u2014 "),SP=n(T$,"A",{href:!0});var LUr=s(SP);_no=r(LUr,"MPNetTokenizer"),LUr.forEach(t),bno=r(T$," or "),RP=n(T$,"A",{href:!0});var xUr=s(RP);vno=r(xUr,"MPNetTokenizerFast"),xUr.forEach(t),Fno=r(T$," (MPNet model)"),T$.forEach(t),Tno=i(S),hs=n(S,"LI",{});var M$=s(hs);Eae=n(M$,"STRONG",{});var $Ur=s(Eae);Mno=r($Ur,"mt5"),$Ur.forEach(t),Eno=r(M$," \u2014 "),PP=n(M$,"A",{href:!0});var kUr=s(PP);Cno=r(kUr,"MT5Tokenizer"),kUr.forEach(t),wno=r(M$," or "),BP=n(M$,"A",{href:!0});var SUr=s(BP);Ano=r(SUr,"MT5TokenizerFast"),SUr.forEach(t),yno=r(M$," (mT5 model)"),M$.forEach(t),Lno=i(S),us=n(S,"LI",{});var E$=s(us);Cae=n(E$,"STRONG",{});var RUr=s(Cae);xno=r(RUr,"nystromformer"),RUr.forEach(t),$no=r(E$," \u2014 "),IP=n(E$,"A",{href:!0});var PUr=s(IP);kno=r(PUr,"AlbertTokenizer"),PUr.forEach(t),Sno=r(E$," or "),qP=n(E$,"A",{href:!0});var BUr=s(qP);Rno=r(BUr,"AlbertTokenizerFast"),BUr.forEach(t),Pno=r(E$," (Nystromformer model)"),E$.forEach(t),Bno=i(S),ps=n(S,"LI",{});var C$=s(ps);wae=n(C$,"STRONG",{});var IUr=s(wae);Ino=r(IUr,"openai-gpt"),IUr.forEach(t),qno=r(C$," \u2014 "),NP=n(C$,"A",{href:!0});var qUr=s(NP);Nno=r(qUr,"OpenAIGPTTokenizer"),qUr.forEach(t),jno=r(C$," or "),jP=n(C$,"A",{href:!0});var NUr=s(jP);Dno=r(NUr,"OpenAIGPTTokenizerFast"),NUr.forEach(t),Gno=r(C$," (OpenAI GPT model)"),C$.forEach(t),Ono=i(S),Og=n(S,"LI",{});var xAe=s(Og);Aae=n(xAe,"STRONG",{});var jUr=s(Aae);Vno=r(jUr,"opt"),jUr.forEach(t),Xno=r(xAe," \u2014 "),DP=n(xAe,"A",{href:!0});var DUr=s(DP);zno=r(DUr,"GPT2Tokenizer"),DUr.forEach(t),Wno=r(xAe," (OPT model)"),xAe.forEach(t),Qno=i(S),_s=n(S,"LI",{});var w$=s(_s);yae=n(w$,"STRONG",{});var GUr=s(yae);Hno=r(GUr,"pegasus"),GUr.forEach(t),Uno=r(w$," \u2014 "),GP=n(w$,"A",{href:!0});var OUr=s(GP);Jno=r(OUr,"PegasusTokenizer"),OUr.forEach(t),Yno=r(w$," or "),OP=n(w$,"A",{href:!0});var VUr=s(OP);Kno=r(VUr,"PegasusTokenizerFast"),VUr.forEach(t),Zno=r(w$," (Pegasus model)"),w$.forEach(t),eso=i(S),Vg=n(S,"LI",{});var $Ae=s(Vg);Lae=n($Ae,"STRONG",{});var XUr=s(Lae);oso=r(XUr,"perceiver"),XUr.forEach(t),rso=r($Ae," \u2014 "),VP=n($Ae,"A",{href:!0});var zUr=s(VP);tso=r(zUr,"PerceiverTokenizer"),zUr.forEach(t),aso=r($Ae," (Perceiver model)"),$Ae.forEach(t),nso=i(S),Xg=n(S,"LI",{});var kAe=s(Xg);xae=n(kAe,"STRONG",{});var WUr=s(xae);sso=r(WUr,"phobert"),WUr.forEach(t),lso=r(kAe," \u2014 "),XP=n(kAe,"A",{href:!0});var QUr=s(XP);iso=r(QUr,"PhobertTokenizer"),QUr.forEach(t),dso=r(kAe," (PhoBERT model)"),kAe.forEach(t),cso=i(S),zg=n(S,"LI",{});var SAe=s(zg);$ae=n(SAe,"STRONG",{});var HUr=s($ae);mso=r(HUr,"plbart"),HUr.forEach(t),fso=r(SAe," \u2014 "),zP=n(SAe,"A",{href:!0});var UUr=s(zP);gso=r(UUr,"PLBartTokenizer"),UUr.forEach(t),hso=r(SAe," (PLBart model)"),SAe.forEach(t),uso=i(S),Wg=n(S,"LI",{});var RAe=s(Wg);kae=n(RAe,"STRONG",{});var JUr=s(kae);pso=r(JUr,"prophetnet"),JUr.forEach(t),_so=r(RAe," \u2014 "),WP=n(RAe,"A",{href:!0});var YUr=s(WP);bso=r(YUr,"ProphetNetTokenizer"),YUr.forEach(t),vso=r(RAe," (ProphetNet model)"),RAe.forEach(t),Fso=i(S),bs=n(S,"LI",{});var A$=s(bs);Sae=n(A$,"STRONG",{});var KUr=s(Sae);Tso=r(KUr,"qdqbert"),KUr.forEach(t),Mso=r(A$," \u2014 "),QP=n(A$,"A",{href:!0});var ZUr=s(QP);Eso=r(ZUr,"BertTokenizer"),ZUr.forEach(t),Cso=r(A$," or "),HP=n(A$,"A",{href:!0});var eJr=s(HP);wso=r(eJr,"BertTokenizerFast"),eJr.forEach(t),Aso=r(A$," (QDQBert model)"),A$.forEach(t),yso=i(S),Qg=n(S,"LI",{});var PAe=s(Qg);Rae=n(PAe,"STRONG",{});var oJr=s(Rae);Lso=r(oJr,"rag"),oJr.forEach(t),xso=r(PAe," \u2014 "),UP=n(PAe,"A",{href:!0});var rJr=s(UP);$so=r(rJr,"RagTokenizer"),rJr.forEach(t),kso=r(PAe," (RAG model)"),PAe.forEach(t),Sso=i(S),vs=n(S,"LI",{});var y$=s(vs);Pae=n(y$,"STRONG",{});var tJr=s(Pae);Rso=r(tJr,"realm"),tJr.forEach(t),Pso=r(y$," \u2014 "),JP=n(y$,"A",{href:!0});var aJr=s(JP);Bso=r(aJr,"RealmTokenizer"),aJr.forEach(t),Iso=r(y$," or "),YP=n(y$,"A",{href:!0});var nJr=s(YP);qso=r(nJr,"RealmTokenizerFast"),nJr.forEach(t),Nso=r(y$," (Realm model)"),y$.forEach(t),jso=i(S),Fs=n(S,"LI",{});var L$=s(Fs);Bae=n(L$,"STRONG",{});var sJr=s(Bae);Dso=r(sJr,"reformer"),sJr.forEach(t),Gso=r(L$," \u2014 "),KP=n(L$,"A",{href:!0});var lJr=s(KP);Oso=r(lJr,"ReformerTokenizer"),lJr.forEach(t),Vso=r(L$," or "),ZP=n(L$,"A",{href:!0});var iJr=s(ZP);Xso=r(iJr,"ReformerTokenizerFast"),iJr.forEach(t),zso=r(L$," (Reformer model)"),L$.forEach(t),Wso=i(S),Ts=n(S,"LI",{});var x$=s(Ts);Iae=n(x$,"STRONG",{});var dJr=s(Iae);Qso=r(dJr,"rembert"),dJr.forEach(t),Hso=r(x$," \u2014 "),eB=n(x$,"A",{href:!0});var cJr=s(eB);Uso=r(cJr,"RemBertTokenizer"),cJr.forEach(t),Jso=r(x$," or "),oB=n(x$,"A",{href:!0});var mJr=s(oB);Yso=r(mJr,"RemBertTokenizerFast"),mJr.forEach(t),Kso=r(x$," (RemBERT model)"),x$.forEach(t),Zso=i(S),Ms=n(S,"LI",{});var $$=s(Ms);qae=n($$,"STRONG",{});var fJr=s(qae);elo=r(fJr,"retribert"),fJr.forEach(t),olo=r($$," \u2014 "),rB=n($$,"A",{href:!0});var gJr=s(rB);rlo=r(gJr,"RetriBertTokenizer"),gJr.forEach(t),tlo=r($$," or "),tB=n($$,"A",{href:!0});var hJr=s(tB);alo=r(hJr,"RetriBertTokenizerFast"),hJr.forEach(t),nlo=r($$," (RetriBERT model)"),$$.forEach(t),slo=i(S),Es=n(S,"LI",{});var k$=s(Es);Nae=n(k$,"STRONG",{});var uJr=s(Nae);llo=r(uJr,"roberta"),uJr.forEach(t),ilo=r(k$," \u2014 "),aB=n(k$,"A",{href:!0});var pJr=s(aB);dlo=r(pJr,"RobertaTokenizer"),pJr.forEach(t),clo=r(k$," or "),nB=n(k$,"A",{href:!0});var _Jr=s(nB);mlo=r(_Jr,"RobertaTokenizerFast"),_Jr.forEach(t),flo=r(k$," (RoBERTa model)"),k$.forEach(t),glo=i(S),Cs=n(S,"LI",{});var S$=s(Cs);jae=n(S$,"STRONG",{});var bJr=s(jae);hlo=r(bJr,"roformer"),bJr.forEach(t),ulo=r(S$," \u2014 "),sB=n(S$,"A",{href:!0});var vJr=s(sB);plo=r(vJr,"RoFormerTokenizer"),vJr.forEach(t),_lo=r(S$," or "),lB=n(S$,"A",{href:!0});var FJr=s(lB);blo=r(FJr,"RoFormerTokenizerFast"),FJr.forEach(t),vlo=r(S$," (RoFormer model)"),S$.forEach(t),Flo=i(S),Hg=n(S,"LI",{});var BAe=s(Hg);Dae=n(BAe,"STRONG",{});var TJr=s(Dae);Tlo=r(TJr,"speech_to_text"),TJr.forEach(t),Mlo=r(BAe," \u2014 "),iB=n(BAe,"A",{href:!0});var MJr=s(iB);Elo=r(MJr,"Speech2TextTokenizer"),MJr.forEach(t),Clo=r(BAe," (Speech2Text model)"),BAe.forEach(t),wlo=i(S),Ug=n(S,"LI",{});var IAe=s(Ug);Gae=n(IAe,"STRONG",{});var EJr=s(Gae);Alo=r(EJr,"speech_to_text_2"),EJr.forEach(t),ylo=r(IAe," \u2014 "),dB=n(IAe,"A",{href:!0});var CJr=s(dB);Llo=r(CJr,"Speech2Text2Tokenizer"),CJr.forEach(t),xlo=r(IAe," (Speech2Text2 model)"),IAe.forEach(t),$lo=i(S),ws=n(S,"LI",{});var R$=s(ws);Oae=n(R$,"STRONG",{});var wJr=s(Oae);klo=r(wJr,"splinter"),wJr.forEach(t),Slo=r(R$," \u2014 "),cB=n(R$,"A",{href:!0});var AJr=s(cB);Rlo=r(AJr,"SplinterTokenizer"),AJr.forEach(t),Plo=r(R$," or "),mB=n(R$,"A",{href:!0});var yJr=s(mB);Blo=r(yJr,"SplinterTokenizerFast"),yJr.forEach(t),Ilo=r(R$," (Splinter model)"),R$.forEach(t),qlo=i(S),As=n(S,"LI",{});var P$=s(As);Vae=n(P$,"STRONG",{});var LJr=s(Vae);Nlo=r(LJr,"squeezebert"),LJr.forEach(t),jlo=r(P$," \u2014 "),fB=n(P$,"A",{href:!0});var xJr=s(fB);Dlo=r(xJr,"SqueezeBertTokenizer"),xJr.forEach(t),Glo=r(P$," or "),gB=n(P$,"A",{href:!0});var $Jr=s(gB);Olo=r($Jr,"SqueezeBertTokenizerFast"),$Jr.forEach(t),Vlo=r(P$," (SqueezeBERT model)"),P$.forEach(t),Xlo=i(S),ys=n(S,"LI",{});var B$=s(ys);Xae=n(B$,"STRONG",{});var kJr=s(Xae);zlo=r(kJr,"t5"),kJr.forEach(t),Wlo=r(B$," \u2014 "),hB=n(B$,"A",{href:!0});var SJr=s(hB);Qlo=r(SJr,"T5Tokenizer"),SJr.forEach(t),Hlo=r(B$," or "),uB=n(B$,"A",{href:!0});var RJr=s(uB);Ulo=r(RJr,"T5TokenizerFast"),RJr.forEach(t),Jlo=r(B$," (T5 model)"),B$.forEach(t),Ylo=i(S),Jg=n(S,"LI",{});var qAe=s(Jg);zae=n(qAe,"STRONG",{});var PJr=s(zae);Klo=r(PJr,"tapas"),PJr.forEach(t),Zlo=r(qAe," \u2014 "),pB=n(qAe,"A",{href:!0});var BJr=s(pB);eio=r(BJr,"TapasTokenizer"),BJr.forEach(t),oio=r(qAe," (TAPAS model)"),qAe.forEach(t),rio=i(S),Yg=n(S,"LI",{});var NAe=s(Yg);Wae=n(NAe,"STRONG",{});var IJr=s(Wae);tio=r(IJr,"tapex"),IJr.forEach(t),aio=r(NAe," \u2014 "),_B=n(NAe,"A",{href:!0});var qJr=s(_B);nio=r(qJr,"TapexTokenizer"),qJr.forEach(t),sio=r(NAe," (TAPEX model)"),NAe.forEach(t),lio=i(S),Kg=n(S,"LI",{});var jAe=s(Kg);Qae=n(jAe,"STRONG",{});var NJr=s(Qae);iio=r(NJr,"transfo-xl"),NJr.forEach(t),dio=r(jAe," \u2014 "),bB=n(jAe,"A",{href:!0});var jJr=s(bB);cio=r(jJr,"TransfoXLTokenizer"),jJr.forEach(t),mio=r(jAe," (Transformer-XL model)"),jAe.forEach(t),fio=i(S),Ls=n(S,"LI",{});var I$=s(Ls);Hae=n(I$,"STRONG",{});var DJr=s(Hae);gio=r(DJr,"visual_bert"),DJr.forEach(t),hio=r(I$," \u2014 "),vB=n(I$,"A",{href:!0});var GJr=s(vB);uio=r(GJr,"BertTokenizer"),GJr.forEach(t),pio=r(I$," or "),FB=n(I$,"A",{href:!0});var OJr=s(FB);_io=r(OJr,"BertTokenizerFast"),OJr.forEach(t),bio=r(I$," (VisualBert model)"),I$.forEach(t),vio=i(S),Zg=n(S,"LI",{});var DAe=s(Zg);Uae=n(DAe,"STRONG",{});var VJr=s(Uae);Fio=r(VJr,"wav2vec2"),VJr.forEach(t),Tio=r(DAe," \u2014 "),TB=n(DAe,"A",{href:!0});var XJr=s(TB);Mio=r(XJr,"Wav2Vec2CTCTokenizer"),XJr.forEach(t),Eio=r(DAe," (Wav2Vec2 model)"),DAe.forEach(t),Cio=i(S),eh=n(S,"LI",{});var GAe=s(eh);Jae=n(GAe,"STRONG",{});var zJr=s(Jae);wio=r(zJr,"wav2vec2-conformer"),zJr.forEach(t),Aio=r(GAe," \u2014 "),MB=n(GAe,"A",{href:!0});var WJr=s(MB);yio=r(WJr,"Wav2Vec2CTCTokenizer"),WJr.forEach(t),Lio=r(GAe," (Wav2Vec2-Conformer model)"),GAe.forEach(t),xio=i(S),oh=n(S,"LI",{});var OAe=s(oh);Yae=n(OAe,"STRONG",{});var QJr=s(Yae);$io=r(QJr,"wav2vec2_phoneme"),QJr.forEach(t),kio=r(OAe," \u2014 "),EB=n(OAe,"A",{href:!0});var HJr=s(EB);Sio=r(HJr,"Wav2Vec2PhonemeCTCTokenizer"),HJr.forEach(t),Rio=r(OAe," (Wav2Vec2Phoneme model)"),OAe.forEach(t),Pio=i(S),xs=n(S,"LI",{});var q$=s(xs);Kae=n(q$,"STRONG",{});var UJr=s(Kae);Bio=r(UJr,"xglm"),UJr.forEach(t),Iio=r(q$," \u2014 "),CB=n(q$,"A",{href:!0});var JJr=s(CB);qio=r(JJr,"XGLMTokenizer"),JJr.forEach(t),Nio=r(q$," or "),wB=n(q$,"A",{href:!0});var YJr=s(wB);jio=r(YJr,"XGLMTokenizerFast"),YJr.forEach(t),Dio=r(q$," (XGLM model)"),q$.forEach(t),Gio=i(S),rh=n(S,"LI",{});var VAe=s(rh);Zae=n(VAe,"STRONG",{});var KJr=s(Zae);Oio=r(KJr,"xlm"),KJr.forEach(t),Vio=r(VAe," \u2014 "),AB=n(VAe,"A",{href:!0});var ZJr=s(AB);Xio=r(ZJr,"XLMTokenizer"),ZJr.forEach(t),zio=r(VAe," (XLM model)"),VAe.forEach(t),Wio=i(S),th=n(S,"LI",{});var XAe=s(th);ene=n(XAe,"STRONG",{});var eYr=s(ene);Qio=r(eYr,"xlm-prophetnet"),eYr.forEach(t),Hio=r(XAe," \u2014 "),yB=n(XAe,"A",{href:!0});var oYr=s(yB);Uio=r(oYr,"XLMProphetNetTokenizer"),oYr.forEach(t),Jio=r(XAe," (XLMProphetNet model)"),XAe.forEach(t),Yio=i(S),$s=n(S,"LI",{});var N$=s($s);one=n(N$,"STRONG",{});var rYr=s(one);Kio=r(rYr,"xlm-roberta"),rYr.forEach(t),Zio=r(N$," \u2014 "),LB=n(N$,"A",{href:!0});var tYr=s(LB);edo=r(tYr,"XLMRobertaTokenizer"),tYr.forEach(t),odo=r(N$," or "),xB=n(N$,"A",{href:!0});var aYr=s(xB);rdo=r(aYr,"XLMRobertaTokenizerFast"),aYr.forEach(t),tdo=r(N$," (XLM-RoBERTa model)"),N$.forEach(t),ado=i(S),ks=n(S,"LI",{});var j$=s(ks);rne=n(j$,"STRONG",{});var nYr=s(rne);ndo=r(nYr,"xlm-roberta-xl"),nYr.forEach(t),sdo=r(j$," \u2014 "),$B=n(j$,"A",{href:!0});var sYr=s($B);ldo=r(sYr,"RobertaTokenizer"),sYr.forEach(t),ido=r(j$," or "),kB=n(j$,"A",{href:!0});var lYr=s(kB);ddo=r(lYr,"RobertaTokenizerFast"),lYr.forEach(t),cdo=r(j$," (XLM-RoBERTa-XL model)"),j$.forEach(t),mdo=i(S),Ss=n(S,"LI",{});var D$=s(Ss);tne=n(D$,"STRONG",{});var iYr=s(tne);fdo=r(iYr,"xlnet"),iYr.forEach(t),gdo=r(D$," \u2014 "),SB=n(D$,"A",{href:!0});var dYr=s(SB);hdo=r(dYr,"XLNetTokenizer"),dYr.forEach(t),udo=r(D$," or "),RB=n(D$,"A",{href:!0});var cYr=s(RB);pdo=r(cYr,"XLNetTokenizerFast"),cYr.forEach(t),_do=r(D$," (XLNet model)"),D$.forEach(t),bdo=i(S),Rs=n(S,"LI",{});var G$=s(Rs);ane=n(G$,"STRONG",{});var mYr=s(ane);vdo=r(mYr,"yoso"),mYr.forEach(t),Fdo=r(G$," \u2014 "),PB=n(G$,"A",{href:!0});var fYr=s(PB);Tdo=r(fYr,"AlbertTokenizer"),fYr.forEach(t),Mdo=r(G$," or "),BB=n(G$,"A",{href:!0});var gYr=s(BB);Edo=r(gYr,"AlbertTokenizerFast"),gYr.forEach(t),Cdo=r(G$," (YOSO model)"),G$.forEach(t),S.forEach(t),wdo=i(Ns),T(ah.$$.fragment,Ns),Ns.forEach(t),Ado=i(qs),nh=n(qs,"DIV",{class:!0});var sDe=s(nh);T(Dy.$$.fragment,sDe),ydo=i(sDe),nne=n(sDe,"P",{});var hYr=s(nne);Ldo=r(hYr,"Register a new tokenizer in this mapping."),hYr.forEach(t),sDe.forEach(t),qs.forEach(t),lNe=i(m),Mi=n(m,"H2",{class:!0});var lDe=s(Mi);sh=n(lDe,"A",{id:!0,class:!0,href:!0});var uYr=s(sh);sne=n(uYr,"SPAN",{});var pYr=s(sne);T(Gy.$$.fragment,pYr),pYr.forEach(t),uYr.forEach(t),xdo=i(lDe),lne=n(lDe,"SPAN",{});var _Yr=s(lne);$do=r(_Yr,"AutoFeatureExtractor"),_Yr.forEach(t),lDe.forEach(t),iNe=i(m),Ao=n(m,"DIV",{class:!0});var js=s(Ao);T(Oy.$$.fragment,js),kdo=i(js),Vy=n(js,"P",{});var iDe=s(Vy);Sdo=r(iDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=n(iDe,"A",{href:!0});var bYr=s(IB);Rdo=r(bYr,"AutoFeatureExtractor.from_pretrained()"),bYr.forEach(t),Pdo=r(iDe," class method."),iDe.forEach(t),Bdo=i(js),Xy=n(js,"P",{});var dDe=s(Xy);Ido=r(dDe,"This class cannot be instantiated directly using "),ine=n(dDe,"CODE",{});var vYr=s(ine);qdo=r(vYr,"__init__()"),vYr.forEach(t),Ndo=r(dDe," (throws an error)."),dDe.forEach(t),jdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(zy.$$.fragment,Zt),Ddo=i(Zt),dne=n(Zt,"P",{});var FYr=s(dne);Gdo=r(FYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),FYr.forEach(t),Odo=i(Zt),ya=n(Zt,"P",{});var $A=s(ya);Vdo=r($A,"The feature extractor class to instantiate is selected based on the "),cne=n($A,"CODE",{});var TYr=s(cne);Xdo=r(TYr,"model_type"),TYr.forEach(t),zdo=r($A,` property of the config object
(either passed as an argument or loaded from `),mne=n($A,"CODE",{});var MYr=s(mne);Wdo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),Qdo=r($A,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fne=n($A,"CODE",{});var EYr=s(fne);Hdo=r(EYr,"pretrained_model_name_or_path"),EYr.forEach(t),Udo=r($A,":"),$A.forEach(t),Jdo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var zAe=s(lh);gne=n(zAe,"STRONG",{});var CYr=s(gne);Ydo=r(CYr,"beit"),CYr.forEach(t),Kdo=r(zAe," \u2014 "),qB=n(zAe,"A",{href:!0});var wYr=s(qB);Zdo=r(wYr,"BeitFeatureExtractor"),wYr.forEach(t),eco=r(zAe," (BEiT model)"),zAe.forEach(t),oco=i(Z),ih=n(Z,"LI",{});var WAe=s(ih);hne=n(WAe,"STRONG",{});var AYr=s(hne);rco=r(AYr,"clip"),AYr.forEach(t),tco=r(WAe," \u2014 "),NB=n(WAe,"A",{href:!0});var yYr=s(NB);aco=r(yYr,"CLIPFeatureExtractor"),yYr.forEach(t),nco=r(WAe," (CLIP model)"),WAe.forEach(t),sco=i(Z),dh=n(Z,"LI",{});var QAe=s(dh);une=n(QAe,"STRONG",{});var LYr=s(une);lco=r(LYr,"convnext"),LYr.forEach(t),ico=r(QAe," \u2014 "),jB=n(QAe,"A",{href:!0});var xYr=s(jB);dco=r(xYr,"ConvNextFeatureExtractor"),xYr.forEach(t),cco=r(QAe," (ConvNext model)"),QAe.forEach(t),mco=i(Z),ch=n(Z,"LI",{});var HAe=s(ch);pne=n(HAe,"STRONG",{});var $Yr=s(pne);fco=r($Yr,"cvt"),$Yr.forEach(t),gco=r(HAe," \u2014 "),DB=n(HAe,"A",{href:!0});var kYr=s(DB);hco=r(kYr,"ConvNextFeatureExtractor"),kYr.forEach(t),uco=r(HAe," (CvT model)"),HAe.forEach(t),pco=i(Z),mh=n(Z,"LI",{});var UAe=s(mh);_ne=n(UAe,"STRONG",{});var SYr=s(_ne);_co=r(SYr,"data2vec-audio"),SYr.forEach(t),bco=r(UAe," \u2014 "),GB=n(UAe,"A",{href:!0});var RYr=s(GB);vco=r(RYr,"Wav2Vec2FeatureExtractor"),RYr.forEach(t),Fco=r(UAe," (Data2VecAudio model)"),UAe.forEach(t),Tco=i(Z),fh=n(Z,"LI",{});var JAe=s(fh);bne=n(JAe,"STRONG",{});var PYr=s(bne);Mco=r(PYr,"data2vec-vision"),PYr.forEach(t),Eco=r(JAe," \u2014 "),OB=n(JAe,"A",{href:!0});var BYr=s(OB);Cco=r(BYr,"BeitFeatureExtractor"),BYr.forEach(t),wco=r(JAe," (Data2VecVision model)"),JAe.forEach(t),Aco=i(Z),gh=n(Z,"LI",{});var YAe=s(gh);vne=n(YAe,"STRONG",{});var IYr=s(vne);yco=r(IYr,"deit"),IYr.forEach(t),Lco=r(YAe," \u2014 "),VB=n(YAe,"A",{href:!0});var qYr=s(VB);xco=r(qYr,"DeiTFeatureExtractor"),qYr.forEach(t),$co=r(YAe," (DeiT model)"),YAe.forEach(t),kco=i(Z),hh=n(Z,"LI",{});var KAe=s(hh);Fne=n(KAe,"STRONG",{});var NYr=s(Fne);Sco=r(NYr,"detr"),NYr.forEach(t),Rco=r(KAe," \u2014 "),XB=n(KAe,"A",{href:!0});var jYr=s(XB);Pco=r(jYr,"DetrFeatureExtractor"),jYr.forEach(t),Bco=r(KAe," (DETR model)"),KAe.forEach(t),Ico=i(Z),uh=n(Z,"LI",{});var ZAe=s(uh);Tne=n(ZAe,"STRONG",{});var DYr=s(Tne);qco=r(DYr,"dpt"),DYr.forEach(t),Nco=r(ZAe," \u2014 "),zB=n(ZAe,"A",{href:!0});var GYr=s(zB);jco=r(GYr,"DPTFeatureExtractor"),GYr.forEach(t),Dco=r(ZAe," (DPT model)"),ZAe.forEach(t),Gco=i(Z),ph=n(Z,"LI",{});var e6e=s(ph);Mne=n(e6e,"STRONG",{});var OYr=s(Mne);Oco=r(OYr,"flava"),OYr.forEach(t),Vco=r(e6e," \u2014 "),WB=n(e6e,"A",{href:!0});var VYr=s(WB);Xco=r(VYr,"FlavaFeatureExtractor"),VYr.forEach(t),zco=r(e6e," (Flava model)"),e6e.forEach(t),Wco=i(Z),_h=n(Z,"LI",{});var o6e=s(_h);Ene=n(o6e,"STRONG",{});var XYr=s(Ene);Qco=r(XYr,"glpn"),XYr.forEach(t),Hco=r(o6e," \u2014 "),QB=n(o6e,"A",{href:!0});var zYr=s(QB);Uco=r(zYr,"GLPNFeatureExtractor"),zYr.forEach(t),Jco=r(o6e," (GLPN model)"),o6e.forEach(t),Yco=i(Z),bh=n(Z,"LI",{});var r6e=s(bh);Cne=n(r6e,"STRONG",{});var WYr=s(Cne);Kco=r(WYr,"hubert"),WYr.forEach(t),Zco=r(r6e," \u2014 "),HB=n(r6e,"A",{href:!0});var QYr=s(HB);emo=r(QYr,"Wav2Vec2FeatureExtractor"),QYr.forEach(t),omo=r(r6e," (Hubert model)"),r6e.forEach(t),rmo=i(Z),vh=n(Z,"LI",{});var t6e=s(vh);wne=n(t6e,"STRONG",{});var HYr=s(wne);tmo=r(HYr,"imagegpt"),HYr.forEach(t),amo=r(t6e," \u2014 "),UB=n(t6e,"A",{href:!0});var UYr=s(UB);nmo=r(UYr,"ImageGPTFeatureExtractor"),UYr.forEach(t),smo=r(t6e," (ImageGPT model)"),t6e.forEach(t),lmo=i(Z),Fh=n(Z,"LI",{});var a6e=s(Fh);Ane=n(a6e,"STRONG",{});var JYr=s(Ane);imo=r(JYr,"layoutlmv2"),JYr.forEach(t),dmo=r(a6e," \u2014 "),JB=n(a6e,"A",{href:!0});var YYr=s(JB);cmo=r(YYr,"LayoutLMv2FeatureExtractor"),YYr.forEach(t),mmo=r(a6e," (LayoutLMv2 model)"),a6e.forEach(t),fmo=i(Z),Th=n(Z,"LI",{});var n6e=s(Th);yne=n(n6e,"STRONG",{});var KYr=s(yne);gmo=r(KYr,"layoutlmv3"),KYr.forEach(t),hmo=r(n6e," \u2014 "),YB=n(n6e,"A",{href:!0});var ZYr=s(YB);umo=r(ZYr,"LayoutLMv3FeatureExtractor"),ZYr.forEach(t),pmo=r(n6e," (LayoutLMv3 model)"),n6e.forEach(t),_mo=i(Z),Mh=n(Z,"LI",{});var s6e=s(Mh);Lne=n(s6e,"STRONG",{});var eKr=s(Lne);bmo=r(eKr,"maskformer"),eKr.forEach(t),vmo=r(s6e," \u2014 "),KB=n(s6e,"A",{href:!0});var oKr=s(KB);Fmo=r(oKr,"MaskFormerFeatureExtractor"),oKr.forEach(t),Tmo=r(s6e," (MaskFormer model)"),s6e.forEach(t),Mmo=i(Z),Eh=n(Z,"LI",{});var l6e=s(Eh);xne=n(l6e,"STRONG",{});var rKr=s(xne);Emo=r(rKr,"perceiver"),rKr.forEach(t),Cmo=r(l6e," \u2014 "),ZB=n(l6e,"A",{href:!0});var tKr=s(ZB);wmo=r(tKr,"PerceiverFeatureExtractor"),tKr.forEach(t),Amo=r(l6e," (Perceiver model)"),l6e.forEach(t),ymo=i(Z),Ch=n(Z,"LI",{});var i6e=s(Ch);$ne=n(i6e,"STRONG",{});var aKr=s($ne);Lmo=r(aKr,"poolformer"),aKr.forEach(t),xmo=r(i6e," \u2014 "),eI=n(i6e,"A",{href:!0});var nKr=s(eI);$mo=r(nKr,"PoolFormerFeatureExtractor"),nKr.forEach(t),kmo=r(i6e," (PoolFormer model)"),i6e.forEach(t),Smo=i(Z),wh=n(Z,"LI",{});var d6e=s(wh);kne=n(d6e,"STRONG",{});var sKr=s(kne);Rmo=r(sKr,"regnet"),sKr.forEach(t),Pmo=r(d6e," \u2014 "),oI=n(d6e,"A",{href:!0});var lKr=s(oI);Bmo=r(lKr,"ConvNextFeatureExtractor"),lKr.forEach(t),Imo=r(d6e," (RegNet model)"),d6e.forEach(t),qmo=i(Z),Ah=n(Z,"LI",{});var c6e=s(Ah);Sne=n(c6e,"STRONG",{});var iKr=s(Sne);Nmo=r(iKr,"resnet"),iKr.forEach(t),jmo=r(c6e," \u2014 "),rI=n(c6e,"A",{href:!0});var dKr=s(rI);Dmo=r(dKr,"ConvNextFeatureExtractor"),dKr.forEach(t),Gmo=r(c6e," (ResNet model)"),c6e.forEach(t),Omo=i(Z),yh=n(Z,"LI",{});var m6e=s(yh);Rne=n(m6e,"STRONG",{});var cKr=s(Rne);Vmo=r(cKr,"segformer"),cKr.forEach(t),Xmo=r(m6e," \u2014 "),tI=n(m6e,"A",{href:!0});var mKr=s(tI);zmo=r(mKr,"SegformerFeatureExtractor"),mKr.forEach(t),Wmo=r(m6e," (SegFormer model)"),m6e.forEach(t),Qmo=i(Z),Lh=n(Z,"LI",{});var f6e=s(Lh);Pne=n(f6e,"STRONG",{});var fKr=s(Pne);Hmo=r(fKr,"speech_to_text"),fKr.forEach(t),Umo=r(f6e," \u2014 "),aI=n(f6e,"A",{href:!0});var gKr=s(aI);Jmo=r(gKr,"Speech2TextFeatureExtractor"),gKr.forEach(t),Ymo=r(f6e," (Speech2Text model)"),f6e.forEach(t),Kmo=i(Z),xh=n(Z,"LI",{});var g6e=s(xh);Bne=n(g6e,"STRONG",{});var hKr=s(Bne);Zmo=r(hKr,"swin"),hKr.forEach(t),efo=r(g6e," \u2014 "),nI=n(g6e,"A",{href:!0});var uKr=s(nI);ofo=r(uKr,"ViTFeatureExtractor"),uKr.forEach(t),rfo=r(g6e," (Swin model)"),g6e.forEach(t),tfo=i(Z),$h=n(Z,"LI",{});var h6e=s($h);Ine=n(h6e,"STRONG",{});var pKr=s(Ine);afo=r(pKr,"van"),pKr.forEach(t),nfo=r(h6e," \u2014 "),sI=n(h6e,"A",{href:!0});var _Kr=s(sI);sfo=r(_Kr,"ConvNextFeatureExtractor"),_Kr.forEach(t),lfo=r(h6e," (VAN model)"),h6e.forEach(t),ifo=i(Z),kh=n(Z,"LI",{});var u6e=s(kh);qne=n(u6e,"STRONG",{});var bKr=s(qne);dfo=r(bKr,"vit"),bKr.forEach(t),cfo=r(u6e," \u2014 "),lI=n(u6e,"A",{href:!0});var vKr=s(lI);mfo=r(vKr,"ViTFeatureExtractor"),vKr.forEach(t),ffo=r(u6e," (ViT model)"),u6e.forEach(t),gfo=i(Z),Sh=n(Z,"LI",{});var p6e=s(Sh);Nne=n(p6e,"STRONG",{});var FKr=s(Nne);hfo=r(FKr,"vit_mae"),FKr.forEach(t),ufo=r(p6e," \u2014 "),iI=n(p6e,"A",{href:!0});var TKr=s(iI);pfo=r(TKr,"ViTFeatureExtractor"),TKr.forEach(t),_fo=r(p6e," (ViTMAE model)"),p6e.forEach(t),bfo=i(Z),Rh=n(Z,"LI",{});var _6e=s(Rh);jne=n(_6e,"STRONG",{});var MKr=s(jne);vfo=r(MKr,"wav2vec2"),MKr.forEach(t),Ffo=r(_6e," \u2014 "),dI=n(_6e,"A",{href:!0});var EKr=s(dI);Tfo=r(EKr,"Wav2Vec2FeatureExtractor"),EKr.forEach(t),Mfo=r(_6e," (Wav2Vec2 model)"),_6e.forEach(t),Efo=i(Z),Ph=n(Z,"LI",{});var b6e=s(Ph);Dne=n(b6e,"STRONG",{});var CKr=s(Dne);Cfo=r(CKr,"wav2vec2-conformer"),CKr.forEach(t),wfo=r(b6e," \u2014 "),cI=n(b6e,"A",{href:!0});var wKr=s(cI);Afo=r(wKr,"Wav2Vec2FeatureExtractor"),wKr.forEach(t),yfo=r(b6e," (Wav2Vec2-Conformer model)"),b6e.forEach(t),Lfo=i(Z),Bh=n(Z,"LI",{});var v6e=s(Bh);Gne=n(v6e,"STRONG",{});var AKr=s(Gne);xfo=r(AKr,"yolos"),AKr.forEach(t),$fo=r(v6e," \u2014 "),mI=n(v6e,"A",{href:!0});var yKr=s(mI);kfo=r(yKr,"YolosFeatureExtractor"),yKr.forEach(t),Sfo=r(v6e," (YOLOS model)"),v6e.forEach(t),Z.forEach(t),Rfo=i(Zt),T(Ih.$$.fragment,Zt),Pfo=i(Zt),T(qh.$$.fragment,Zt),Zt.forEach(t),Bfo=i(js),Nh=n(js,"DIV",{class:!0});var cDe=s(Nh);T(Wy.$$.fragment,cDe),Ifo=i(cDe),One=n(cDe,"P",{});var LKr=s(One);qfo=r(LKr,"Register a new feature extractor for this class."),LKr.forEach(t),cDe.forEach(t),js.forEach(t),dNe=i(m),Ei=n(m,"H2",{class:!0});var mDe=s(Ei);jh=n(mDe,"A",{id:!0,class:!0,href:!0});var xKr=s(jh);Vne=n(xKr,"SPAN",{});var $Kr=s(Vne);T(Qy.$$.fragment,$Kr),$Kr.forEach(t),xKr.forEach(t),Nfo=i(mDe),Xne=n(mDe,"SPAN",{});var kKr=s(Xne);jfo=r(kKr,"AutoProcessor"),kKr.forEach(t),mDe.forEach(t),cNe=i(m),yo=n(m,"DIV",{class:!0});var Ds=s(yo);T(Hy.$$.fragment,Ds),Dfo=i(Ds),Uy=n(Ds,"P",{});var fDe=s(Uy);Gfo=r(fDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fI=n(fDe,"A",{href:!0});var SKr=s(fI);Ofo=r(SKr,"AutoProcessor.from_pretrained()"),SKr.forEach(t),Vfo=r(fDe," class method."),fDe.forEach(t),Xfo=i(Ds),Jy=n(Ds,"P",{});var gDe=s(Jy);zfo=r(gDe,"This class cannot be instantiated directly using "),zne=n(gDe,"CODE",{});var RKr=s(zne);Wfo=r(RKr,"__init__()"),RKr.forEach(t),Qfo=r(gDe," (throws an error)."),gDe.forEach(t),Hfo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Yy.$$.fragment,ea),Ufo=i(ea),Wne=n(ea,"P",{});var PKr=s(Wne);Jfo=r(PKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PKr.forEach(t),Yfo=i(ea),Ci=n(ea,"P",{});var hZ=s(Ci);Kfo=r(hZ,"The processor class to instantiate is selected based on the "),Qne=n(hZ,"CODE",{});var BKr=s(Qne);Zfo=r(BKr,"model_type"),BKr.forEach(t),ego=r(hZ,` property of the config object (either
passed as an argument or loaded from `),Hne=n(hZ,"CODE",{});var IKr=s(Hne);ogo=r(IKr,"pretrained_model_name_or_path"),IKr.forEach(t),rgo=r(hZ," if possible):"),hZ.forEach(t),tgo=i(ea),he=n(ea,"UL",{});var _e=s(he);Dh=n(_e,"LI",{});var F6e=s(Dh);Une=n(F6e,"STRONG",{});var qKr=s(Une);ago=r(qKr,"clip"),qKr.forEach(t),ngo=r(F6e," \u2014 "),gI=n(F6e,"A",{href:!0});var NKr=s(gI);sgo=r(NKr,"CLIPProcessor"),NKr.forEach(t),lgo=r(F6e," (CLIP model)"),F6e.forEach(t),igo=i(_e),Gh=n(_e,"LI",{});var T6e=s(Gh);Jne=n(T6e,"STRONG",{});var jKr=s(Jne);dgo=r(jKr,"flava"),jKr.forEach(t),cgo=r(T6e," \u2014 "),Yne=n(T6e,"CODE",{});var DKr=s(Yne);mgo=r(DKr,"FLAVAProcessor"),DKr.forEach(t),fgo=r(T6e," (Flava model)"),T6e.forEach(t),ggo=i(_e),Oh=n(_e,"LI",{});var M6e=s(Oh);Kne=n(M6e,"STRONG",{});var GKr=s(Kne);hgo=r(GKr,"layoutlmv2"),GKr.forEach(t),ugo=r(M6e," \u2014 "),hI=n(M6e,"A",{href:!0});var OKr=s(hI);pgo=r(OKr,"LayoutLMv2Processor"),OKr.forEach(t),_go=r(M6e," (LayoutLMv2 model)"),M6e.forEach(t),bgo=i(_e),Vh=n(_e,"LI",{});var E6e=s(Vh);Zne=n(E6e,"STRONG",{});var VKr=s(Zne);vgo=r(VKr,"layoutlmv3"),VKr.forEach(t),Fgo=r(E6e," \u2014 "),uI=n(E6e,"A",{href:!0});var XKr=s(uI);Tgo=r(XKr,"LayoutLMv3Processor"),XKr.forEach(t),Mgo=r(E6e," (LayoutLMv3 model)"),E6e.forEach(t),Ego=i(_e),Xh=n(_e,"LI",{});var C6e=s(Xh);ese=n(C6e,"STRONG",{});var zKr=s(ese);Cgo=r(zKr,"layoutxlm"),zKr.forEach(t),wgo=r(C6e," \u2014 "),pI=n(C6e,"A",{href:!0});var WKr=s(pI);Ago=r(WKr,"LayoutXLMProcessor"),WKr.forEach(t),ygo=r(C6e," (LayoutXLM model)"),C6e.forEach(t),Lgo=i(_e),zh=n(_e,"LI",{});var w6e=s(zh);ose=n(w6e,"STRONG",{});var QKr=s(ose);xgo=r(QKr,"sew"),QKr.forEach(t),$go=r(w6e," \u2014 "),_I=n(w6e,"A",{href:!0});var HKr=s(_I);kgo=r(HKr,"Wav2Vec2Processor"),HKr.forEach(t),Sgo=r(w6e," (SEW model)"),w6e.forEach(t),Rgo=i(_e),Wh=n(_e,"LI",{});var A6e=s(Wh);rse=n(A6e,"STRONG",{});var UKr=s(rse);Pgo=r(UKr,"sew-d"),UKr.forEach(t),Bgo=r(A6e," \u2014 "),bI=n(A6e,"A",{href:!0});var JKr=s(bI);Igo=r(JKr,"Wav2Vec2Processor"),JKr.forEach(t),qgo=r(A6e," (SEW-D model)"),A6e.forEach(t),Ngo=i(_e),Qh=n(_e,"LI",{});var y6e=s(Qh);tse=n(y6e,"STRONG",{});var YKr=s(tse);jgo=r(YKr,"speech_to_text"),YKr.forEach(t),Dgo=r(y6e," \u2014 "),vI=n(y6e,"A",{href:!0});var KKr=s(vI);Ggo=r(KKr,"Speech2TextProcessor"),KKr.forEach(t),Ogo=r(y6e," (Speech2Text model)"),y6e.forEach(t),Vgo=i(_e),Hh=n(_e,"LI",{});var L6e=s(Hh);ase=n(L6e,"STRONG",{});var ZKr=s(ase);Xgo=r(ZKr,"speech_to_text_2"),ZKr.forEach(t),zgo=r(L6e," \u2014 "),FI=n(L6e,"A",{href:!0});var eZr=s(FI);Wgo=r(eZr,"Speech2Text2Processor"),eZr.forEach(t),Qgo=r(L6e," (Speech2Text2 model)"),L6e.forEach(t),Hgo=i(_e),Uh=n(_e,"LI",{});var x6e=s(Uh);nse=n(x6e,"STRONG",{});var oZr=s(nse);Ugo=r(oZr,"trocr"),oZr.forEach(t),Jgo=r(x6e," \u2014 "),TI=n(x6e,"A",{href:!0});var rZr=s(TI);Ygo=r(rZr,"TrOCRProcessor"),rZr.forEach(t),Kgo=r(x6e," (TrOCR model)"),x6e.forEach(t),Zgo=i(_e),Jh=n(_e,"LI",{});var $6e=s(Jh);sse=n($6e,"STRONG",{});var tZr=s(sse);eho=r(tZr,"unispeech"),tZr.forEach(t),oho=r($6e," \u2014 "),MI=n($6e,"A",{href:!0});var aZr=s(MI);rho=r(aZr,"Wav2Vec2Processor"),aZr.forEach(t),tho=r($6e," (UniSpeech model)"),$6e.forEach(t),aho=i(_e),Yh=n(_e,"LI",{});var k6e=s(Yh);lse=n(k6e,"STRONG",{});var nZr=s(lse);nho=r(nZr,"unispeech-sat"),nZr.forEach(t),sho=r(k6e," \u2014 "),EI=n(k6e,"A",{href:!0});var sZr=s(EI);lho=r(sZr,"Wav2Vec2Processor"),sZr.forEach(t),iho=r(k6e," (UniSpeechSat model)"),k6e.forEach(t),dho=i(_e),Kh=n(_e,"LI",{});var S6e=s(Kh);ise=n(S6e,"STRONG",{});var lZr=s(ise);cho=r(lZr,"vilt"),lZr.forEach(t),mho=r(S6e," \u2014 "),CI=n(S6e,"A",{href:!0});var iZr=s(CI);fho=r(iZr,"ViltProcessor"),iZr.forEach(t),gho=r(S6e," (ViLT model)"),S6e.forEach(t),hho=i(_e),Zh=n(_e,"LI",{});var R6e=s(Zh);dse=n(R6e,"STRONG",{});var dZr=s(dse);uho=r(dZr,"vision-text-dual-encoder"),dZr.forEach(t),pho=r(R6e," \u2014 "),wI=n(R6e,"A",{href:!0});var cZr=s(wI);_ho=r(cZr,"VisionTextDualEncoderProcessor"),cZr.forEach(t),bho=r(R6e," (VisionTextDualEncoder model)"),R6e.forEach(t),vho=i(_e),eu=n(_e,"LI",{});var P6e=s(eu);cse=n(P6e,"STRONG",{});var mZr=s(cse);Fho=r(mZr,"wav2vec2"),mZr.forEach(t),Tho=r(P6e," \u2014 "),AI=n(P6e,"A",{href:!0});var fZr=s(AI);Mho=r(fZr,"Wav2Vec2Processor"),fZr.forEach(t),Eho=r(P6e," (Wav2Vec2 model)"),P6e.forEach(t),Cho=i(_e),ou=n(_e,"LI",{});var B6e=s(ou);mse=n(B6e,"STRONG",{});var gZr=s(mse);who=r(gZr,"wav2vec2-conformer"),gZr.forEach(t),Aho=r(B6e," \u2014 "),yI=n(B6e,"A",{href:!0});var hZr=s(yI);yho=r(hZr,"Wav2Vec2Processor"),hZr.forEach(t),Lho=r(B6e," (Wav2Vec2-Conformer model)"),B6e.forEach(t),xho=i(_e),ru=n(_e,"LI",{});var I6e=s(ru);fse=n(I6e,"STRONG",{});var uZr=s(fse);$ho=r(uZr,"wavlm"),uZr.forEach(t),kho=r(I6e," \u2014 "),LI=n(I6e,"A",{href:!0});var pZr=s(LI);Sho=r(pZr,"Wav2Vec2Processor"),pZr.forEach(t),Rho=r(I6e," (WavLM model)"),I6e.forEach(t),_e.forEach(t),Pho=i(ea),T(tu.$$.fragment,ea),Bho=i(ea),T(au.$$.fragment,ea),ea.forEach(t),Iho=i(Ds),nu=n(Ds,"DIV",{class:!0});var hDe=s(nu);T(Ky.$$.fragment,hDe),qho=i(hDe),gse=n(hDe,"P",{});var _Zr=s(gse);Nho=r(_Zr,"Register a new processor for this class."),_Zr.forEach(t),hDe.forEach(t),Ds.forEach(t),mNe=i(m),wi=n(m,"H2",{class:!0});var uDe=s(wi);su=n(uDe,"A",{id:!0,class:!0,href:!0});var bZr=s(su);hse=n(bZr,"SPAN",{});var vZr=s(hse);T(Zy.$$.fragment,vZr),vZr.forEach(t),bZr.forEach(t),jho=i(uDe),use=n(uDe,"SPAN",{});var FZr=s(use);Dho=r(FZr,"AutoModel"),FZr.forEach(t),uDe.forEach(t),fNe=i(m),Lo=n(m,"DIV",{class:!0});var Gs=s(Lo);T(eL.$$.fragment,Gs),Gho=i(Gs),Ai=n(Gs,"P",{});var uZ=s(Ai);Oho=r(uZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xI=n(uZ,"A",{href:!0});var TZr=s(xI);Vho=r(TZr,"from_pretrained()"),TZr.forEach(t),Xho=r(uZ," class method or the "),$I=n(uZ,"A",{href:!0});var MZr=s($I);zho=r(MZr,"from_config()"),MZr.forEach(t),Who=r(uZ,` class
method.`),uZ.forEach(t),Qho=i(Gs),oL=n(Gs,"P",{});var pDe=s(oL);Hho=r(pDe,"This class cannot be instantiated directly using "),pse=n(pDe,"CODE",{});var EZr=s(pse);Uho=r(EZr,"__init__()"),EZr.forEach(t),Jho=r(pDe," (throws an error)."),pDe.forEach(t),Yho=i(Gs),tt=n(Gs,"DIV",{class:!0});var kA=s(tt);T(rL.$$.fragment,kA),Kho=i(kA),_se=n(kA,"P",{});var CZr=s(_se);Zho=r(CZr,"Instantiates one of the base model classes of the library from a configuration."),CZr.forEach(t),euo=i(kA),yi=n(kA,"P",{});var pZ=s(yi);ouo=r(pZ,`Note:
Loading a model from its configuration file does `),bse=n(pZ,"STRONG",{});var wZr=s(bse);ruo=r(wZr,"not"),wZr.forEach(t),tuo=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=n(pZ,"A",{href:!0});var AZr=s(kI);auo=r(AZr,"from_pretrained()"),AZr.forEach(t),nuo=r(pZ," to load the model weights."),pZ.forEach(t),suo=i(kA),T(lu.$$.fragment,kA),kA.forEach(t),luo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(tL.$$.fragment,oa),iuo=i(oa),vse=n(oa,"P",{});var yZr=s(vse);duo=r(yZr,"Instantiate one of the base model classes of the library from a pretrained model."),yZr.forEach(t),cuo=i(oa),La=n(oa,"P",{});var SA=s(La);muo=r(SA,"The model class to instantiate is selected based on the "),Fse=n(SA,"CODE",{});var LZr=s(Fse);fuo=r(LZr,"model_type"),LZr.forEach(t),guo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Tse=n(SA,"CODE",{});var xZr=s(Tse);huo=r(xZr,"pretrained_model_name_or_path"),xZr.forEach(t),uuo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=n(SA,"CODE",{});var $Zr=s(Mse);puo=r($Zr,"pretrained_model_name_or_path"),$Zr.forEach(t),_uo=r(SA,":"),SA.forEach(t),buo=i(oa),x=n(oa,"UL",{});var $=s(x);iu=n($,"LI",{});var q6e=s(iu);Ese=n(q6e,"STRONG",{});var kZr=s(Ese);vuo=r(kZr,"albert"),kZr.forEach(t),Fuo=r(q6e," \u2014 "),SI=n(q6e,"A",{href:!0});var SZr=s(SI);Tuo=r(SZr,"AlbertModel"),SZr.forEach(t),Muo=r(q6e," (ALBERT model)"),q6e.forEach(t),Euo=i($),du=n($,"LI",{});var N6e=s(du);Cse=n(N6e,"STRONG",{});var RZr=s(Cse);Cuo=r(RZr,"bart"),RZr.forEach(t),wuo=r(N6e," \u2014 "),RI=n(N6e,"A",{href:!0});var PZr=s(RI);Auo=r(PZr,"BartModel"),PZr.forEach(t),yuo=r(N6e," (BART model)"),N6e.forEach(t),Luo=i($),cu=n($,"LI",{});var j6e=s(cu);wse=n(j6e,"STRONG",{});var BZr=s(wse);xuo=r(BZr,"beit"),BZr.forEach(t),$uo=r(j6e," \u2014 "),PI=n(j6e,"A",{href:!0});var IZr=s(PI);kuo=r(IZr,"BeitModel"),IZr.forEach(t),Suo=r(j6e," (BEiT model)"),j6e.forEach(t),Ruo=i($),mu=n($,"LI",{});var D6e=s(mu);Ase=n(D6e,"STRONG",{});var qZr=s(Ase);Puo=r(qZr,"bert"),qZr.forEach(t),Buo=r(D6e," \u2014 "),BI=n(D6e,"A",{href:!0});var NZr=s(BI);Iuo=r(NZr,"BertModel"),NZr.forEach(t),quo=r(D6e," (BERT model)"),D6e.forEach(t),Nuo=i($),fu=n($,"LI",{});var G6e=s(fu);yse=n(G6e,"STRONG",{});var jZr=s(yse);juo=r(jZr,"bert-generation"),jZr.forEach(t),Duo=r(G6e," \u2014 "),II=n(G6e,"A",{href:!0});var DZr=s(II);Guo=r(DZr,"BertGenerationEncoder"),DZr.forEach(t),Ouo=r(G6e," (Bert Generation model)"),G6e.forEach(t),Vuo=i($),gu=n($,"LI",{});var O6e=s(gu);Lse=n(O6e,"STRONG",{});var GZr=s(Lse);Xuo=r(GZr,"big_bird"),GZr.forEach(t),zuo=r(O6e," \u2014 "),qI=n(O6e,"A",{href:!0});var OZr=s(qI);Wuo=r(OZr,"BigBirdModel"),OZr.forEach(t),Quo=r(O6e," (BigBird model)"),O6e.forEach(t),Huo=i($),hu=n($,"LI",{});var V6e=s(hu);xse=n(V6e,"STRONG",{});var VZr=s(xse);Uuo=r(VZr,"bigbird_pegasus"),VZr.forEach(t),Juo=r(V6e," \u2014 "),NI=n(V6e,"A",{href:!0});var XZr=s(NI);Yuo=r(XZr,"BigBirdPegasusModel"),XZr.forEach(t),Kuo=r(V6e," (BigBirdPegasus model)"),V6e.forEach(t),Zuo=i($),uu=n($,"LI",{});var X6e=s(uu);$se=n(X6e,"STRONG",{});var zZr=s($se);epo=r(zZr,"blenderbot"),zZr.forEach(t),opo=r(X6e," \u2014 "),jI=n(X6e,"A",{href:!0});var WZr=s(jI);rpo=r(WZr,"BlenderbotModel"),WZr.forEach(t),tpo=r(X6e," (Blenderbot model)"),X6e.forEach(t),apo=i($),pu=n($,"LI",{});var z6e=s(pu);kse=n(z6e,"STRONG",{});var QZr=s(kse);npo=r(QZr,"blenderbot-small"),QZr.forEach(t),spo=r(z6e," \u2014 "),DI=n(z6e,"A",{href:!0});var HZr=s(DI);lpo=r(HZr,"BlenderbotSmallModel"),HZr.forEach(t),ipo=r(z6e," (BlenderbotSmall model)"),z6e.forEach(t),dpo=i($),_u=n($,"LI",{});var W6e=s(_u);Sse=n(W6e,"STRONG",{});var UZr=s(Sse);cpo=r(UZr,"camembert"),UZr.forEach(t),mpo=r(W6e," \u2014 "),GI=n(W6e,"A",{href:!0});var JZr=s(GI);fpo=r(JZr,"CamembertModel"),JZr.forEach(t),gpo=r(W6e," (CamemBERT model)"),W6e.forEach(t),hpo=i($),bu=n($,"LI",{});var Q6e=s(bu);Rse=n(Q6e,"STRONG",{});var YZr=s(Rse);upo=r(YZr,"canine"),YZr.forEach(t),ppo=r(Q6e," \u2014 "),OI=n(Q6e,"A",{href:!0});var KZr=s(OI);_po=r(KZr,"CanineModel"),KZr.forEach(t),bpo=r(Q6e," (Canine model)"),Q6e.forEach(t),vpo=i($),vu=n($,"LI",{});var H6e=s(vu);Pse=n(H6e,"STRONG",{});var ZZr=s(Pse);Fpo=r(ZZr,"clip"),ZZr.forEach(t),Tpo=r(H6e," \u2014 "),VI=n(H6e,"A",{href:!0});var eet=s(VI);Mpo=r(eet,"CLIPModel"),eet.forEach(t),Epo=r(H6e," (CLIP model)"),H6e.forEach(t),Cpo=i($),Fu=n($,"LI",{});var U6e=s(Fu);Bse=n(U6e,"STRONG",{});var oet=s(Bse);wpo=r(oet,"convbert"),oet.forEach(t),Apo=r(U6e," \u2014 "),XI=n(U6e,"A",{href:!0});var ret=s(XI);ypo=r(ret,"ConvBertModel"),ret.forEach(t),Lpo=r(U6e," (ConvBERT model)"),U6e.forEach(t),xpo=i($),Tu=n($,"LI",{});var J6e=s(Tu);Ise=n(J6e,"STRONG",{});var tet=s(Ise);$po=r(tet,"convnext"),tet.forEach(t),kpo=r(J6e," \u2014 "),zI=n(J6e,"A",{href:!0});var aet=s(zI);Spo=r(aet,"ConvNextModel"),aet.forEach(t),Rpo=r(J6e," (ConvNext model)"),J6e.forEach(t),Ppo=i($),Mu=n($,"LI",{});var Y6e=s(Mu);qse=n(Y6e,"STRONG",{});var net=s(qse);Bpo=r(net,"ctrl"),net.forEach(t),Ipo=r(Y6e," \u2014 "),WI=n(Y6e,"A",{href:!0});var set=s(WI);qpo=r(set,"CTRLModel"),set.forEach(t),Npo=r(Y6e," (CTRL model)"),Y6e.forEach(t),jpo=i($),Eu=n($,"LI",{});var K6e=s(Eu);Nse=n(K6e,"STRONG",{});var iet=s(Nse);Dpo=r(iet,"cvt"),iet.forEach(t),Gpo=r(K6e," \u2014 "),QI=n(K6e,"A",{href:!0});var det=s(QI);Opo=r(det,"CvtModel"),det.forEach(t),Vpo=r(K6e," (CvT model)"),K6e.forEach(t),Xpo=i($),Cu=n($,"LI",{});var Z6e=s(Cu);jse=n(Z6e,"STRONG",{});var cet=s(jse);zpo=r(cet,"data2vec-audio"),cet.forEach(t),Wpo=r(Z6e," \u2014 "),HI=n(Z6e,"A",{href:!0});var met=s(HI);Qpo=r(met,"Data2VecAudioModel"),met.forEach(t),Hpo=r(Z6e," (Data2VecAudio model)"),Z6e.forEach(t),Upo=i($),wu=n($,"LI",{});var eye=s(wu);Dse=n(eye,"STRONG",{});var fet=s(Dse);Jpo=r(fet,"data2vec-text"),fet.forEach(t),Ypo=r(eye," \u2014 "),UI=n(eye,"A",{href:!0});var get=s(UI);Kpo=r(get,"Data2VecTextModel"),get.forEach(t),Zpo=r(eye," (Data2VecText model)"),eye.forEach(t),e_o=i($),Au=n($,"LI",{});var oye=s(Au);Gse=n(oye,"STRONG",{});var het=s(Gse);o_o=r(het,"data2vec-vision"),het.forEach(t),r_o=r(oye," \u2014 "),JI=n(oye,"A",{href:!0});var uet=s(JI);t_o=r(uet,"Data2VecVisionModel"),uet.forEach(t),a_o=r(oye," (Data2VecVision model)"),oye.forEach(t),n_o=i($),yu=n($,"LI",{});var rye=s(yu);Ose=n(rye,"STRONG",{});var pet=s(Ose);s_o=r(pet,"deberta"),pet.forEach(t),l_o=r(rye," \u2014 "),YI=n(rye,"A",{href:!0});var _et=s(YI);i_o=r(_et,"DebertaModel"),_et.forEach(t),d_o=r(rye," (DeBERTa model)"),rye.forEach(t),c_o=i($),Lu=n($,"LI",{});var tye=s(Lu);Vse=n(tye,"STRONG",{});var bet=s(Vse);m_o=r(bet,"deberta-v2"),bet.forEach(t),f_o=r(tye," \u2014 "),KI=n(tye,"A",{href:!0});var vet=s(KI);g_o=r(vet,"DebertaV2Model"),vet.forEach(t),h_o=r(tye," (DeBERTa-v2 model)"),tye.forEach(t),u_o=i($),xu=n($,"LI",{});var aye=s(xu);Xse=n(aye,"STRONG",{});var Fet=s(Xse);p_o=r(Fet,"decision_transformer"),Fet.forEach(t),__o=r(aye," \u2014 "),ZI=n(aye,"A",{href:!0});var Tet=s(ZI);b_o=r(Tet,"DecisionTransformerModel"),Tet.forEach(t),v_o=r(aye," (Decision Transformer model)"),aye.forEach(t),F_o=i($),$u=n($,"LI",{});var nye=s($u);zse=n(nye,"STRONG",{});var Met=s(zse);T_o=r(Met,"deit"),Met.forEach(t),M_o=r(nye," \u2014 "),eq=n(nye,"A",{href:!0});var Eet=s(eq);E_o=r(Eet,"DeiTModel"),Eet.forEach(t),C_o=r(nye," (DeiT model)"),nye.forEach(t),w_o=i($),ku=n($,"LI",{});var sye=s(ku);Wse=n(sye,"STRONG",{});var Cet=s(Wse);A_o=r(Cet,"detr"),Cet.forEach(t),y_o=r(sye," \u2014 "),oq=n(sye,"A",{href:!0});var wet=s(oq);L_o=r(wet,"DetrModel"),wet.forEach(t),x_o=r(sye," (DETR model)"),sye.forEach(t),$_o=i($),Su=n($,"LI",{});var lye=s(Su);Qse=n(lye,"STRONG",{});var Aet=s(Qse);k_o=r(Aet,"distilbert"),Aet.forEach(t),S_o=r(lye," \u2014 "),rq=n(lye,"A",{href:!0});var yet=s(rq);R_o=r(yet,"DistilBertModel"),yet.forEach(t),P_o=r(lye," (DistilBERT model)"),lye.forEach(t),B_o=i($),Ru=n($,"LI",{});var iye=s(Ru);Hse=n(iye,"STRONG",{});var Let=s(Hse);I_o=r(Let,"dpr"),Let.forEach(t),q_o=r(iye," \u2014 "),tq=n(iye,"A",{href:!0});var xet=s(tq);N_o=r(xet,"DPRQuestionEncoder"),xet.forEach(t),j_o=r(iye," (DPR model)"),iye.forEach(t),D_o=i($),Pu=n($,"LI",{});var dye=s(Pu);Use=n(dye,"STRONG",{});var $et=s(Use);G_o=r($et,"dpt"),$et.forEach(t),O_o=r(dye," \u2014 "),aq=n(dye,"A",{href:!0});var ket=s(aq);V_o=r(ket,"DPTModel"),ket.forEach(t),X_o=r(dye," (DPT model)"),dye.forEach(t),z_o=i($),Bu=n($,"LI",{});var cye=s(Bu);Jse=n(cye,"STRONG",{});var Set=s(Jse);W_o=r(Set,"electra"),Set.forEach(t),Q_o=r(cye," \u2014 "),nq=n(cye,"A",{href:!0});var Ret=s(nq);H_o=r(Ret,"ElectraModel"),Ret.forEach(t),U_o=r(cye," (ELECTRA model)"),cye.forEach(t),J_o=i($),Iu=n($,"LI",{});var mye=s(Iu);Yse=n(mye,"STRONG",{});var Pet=s(Yse);Y_o=r(Pet,"flaubert"),Pet.forEach(t),K_o=r(mye," \u2014 "),sq=n(mye,"A",{href:!0});var Bet=s(sq);Z_o=r(Bet,"FlaubertModel"),Bet.forEach(t),ebo=r(mye," (FlauBERT model)"),mye.forEach(t),obo=i($),qu=n($,"LI",{});var fye=s(qu);Kse=n(fye,"STRONG",{});var Iet=s(Kse);rbo=r(Iet,"flava"),Iet.forEach(t),tbo=r(fye," \u2014 "),lq=n(fye,"A",{href:!0});var qet=s(lq);abo=r(qet,"FlavaModel"),qet.forEach(t),nbo=r(fye," (Flava model)"),fye.forEach(t),sbo=i($),Nu=n($,"LI",{});var gye=s(Nu);Zse=n(gye,"STRONG",{});var Net=s(Zse);lbo=r(Net,"fnet"),Net.forEach(t),ibo=r(gye," \u2014 "),iq=n(gye,"A",{href:!0});var jet=s(iq);dbo=r(jet,"FNetModel"),jet.forEach(t),cbo=r(gye," (FNet model)"),gye.forEach(t),mbo=i($),ju=n($,"LI",{});var hye=s(ju);ele=n(hye,"STRONG",{});var Det=s(ele);fbo=r(Det,"fsmt"),Det.forEach(t),gbo=r(hye," \u2014 "),dq=n(hye,"A",{href:!0});var Get=s(dq);hbo=r(Get,"FSMTModel"),Get.forEach(t),ubo=r(hye," (FairSeq Machine-Translation model)"),hye.forEach(t),pbo=i($),Ps=n($,"LI",{});var O$=s(Ps);ole=n(O$,"STRONG",{});var Oet=s(ole);_bo=r(Oet,"funnel"),Oet.forEach(t),bbo=r(O$," \u2014 "),cq=n(O$,"A",{href:!0});var Vet=s(cq);vbo=r(Vet,"FunnelModel"),Vet.forEach(t),Fbo=r(O$," or "),mq=n(O$,"A",{href:!0});var Xet=s(mq);Tbo=r(Xet,"FunnelBaseModel"),Xet.forEach(t),Mbo=r(O$," (Funnel Transformer model)"),O$.forEach(t),Ebo=i($),Du=n($,"LI",{});var uye=s(Du);rle=n(uye,"STRONG",{});var zet=s(rle);Cbo=r(zet,"glpn"),zet.forEach(t),wbo=r(uye," \u2014 "),fq=n(uye,"A",{href:!0});var Wet=s(fq);Abo=r(Wet,"GLPNModel"),Wet.forEach(t),ybo=r(uye," (GLPN model)"),uye.forEach(t),Lbo=i($),Gu=n($,"LI",{});var pye=s(Gu);tle=n(pye,"STRONG",{});var Qet=s(tle);xbo=r(Qet,"gpt2"),Qet.forEach(t),$bo=r(pye," \u2014 "),gq=n(pye,"A",{href:!0});var Het=s(gq);kbo=r(Het,"GPT2Model"),Het.forEach(t),Sbo=r(pye," (OpenAI GPT-2 model)"),pye.forEach(t),Rbo=i($),Ou=n($,"LI",{});var _ye=s(Ou);ale=n(_ye,"STRONG",{});var Uet=s(ale);Pbo=r(Uet,"gpt_neo"),Uet.forEach(t),Bbo=r(_ye," \u2014 "),hq=n(_ye,"A",{href:!0});var Jet=s(hq);Ibo=r(Jet,"GPTNeoModel"),Jet.forEach(t),qbo=r(_ye," (GPT Neo model)"),_ye.forEach(t),Nbo=i($),Vu=n($,"LI",{});var bye=s(Vu);nle=n(bye,"STRONG",{});var Yet=s(nle);jbo=r(Yet,"gpt_neox"),Yet.forEach(t),Dbo=r(bye," \u2014 "),uq=n(bye,"A",{href:!0});var Ket=s(uq);Gbo=r(Ket,"GPTNeoXModel"),Ket.forEach(t),Obo=r(bye," (GPT NeoX model)"),bye.forEach(t),Vbo=i($),Xu=n($,"LI",{});var vye=s(Xu);sle=n(vye,"STRONG",{});var Zet=s(sle);Xbo=r(Zet,"gptj"),Zet.forEach(t),zbo=r(vye," \u2014 "),pq=n(vye,"A",{href:!0});var eot=s(pq);Wbo=r(eot,"GPTJModel"),eot.forEach(t),Qbo=r(vye," (GPT-J model)"),vye.forEach(t),Hbo=i($),zu=n($,"LI",{});var Fye=s(zu);lle=n(Fye,"STRONG",{});var oot=s(lle);Ubo=r(oot,"hubert"),oot.forEach(t),Jbo=r(Fye," \u2014 "),_q=n(Fye,"A",{href:!0});var rot=s(_q);Ybo=r(rot,"HubertModel"),rot.forEach(t),Kbo=r(Fye," (Hubert model)"),Fye.forEach(t),Zbo=i($),Wu=n($,"LI",{});var Tye=s(Wu);ile=n(Tye,"STRONG",{});var tot=s(ile);e2o=r(tot,"ibert"),tot.forEach(t),o2o=r(Tye," \u2014 "),bq=n(Tye,"A",{href:!0});var aot=s(bq);r2o=r(aot,"IBertModel"),aot.forEach(t),t2o=r(Tye," (I-BERT model)"),Tye.forEach(t),a2o=i($),Qu=n($,"LI",{});var Mye=s(Qu);dle=n(Mye,"STRONG",{});var not=s(dle);n2o=r(not,"imagegpt"),not.forEach(t),s2o=r(Mye," \u2014 "),vq=n(Mye,"A",{href:!0});var sot=s(vq);l2o=r(sot,"ImageGPTModel"),sot.forEach(t),i2o=r(Mye," (ImageGPT model)"),Mye.forEach(t),d2o=i($),Hu=n($,"LI",{});var Eye=s(Hu);cle=n(Eye,"STRONG",{});var lot=s(cle);c2o=r(lot,"layoutlm"),lot.forEach(t),m2o=r(Eye," \u2014 "),Fq=n(Eye,"A",{href:!0});var iot=s(Fq);f2o=r(iot,"LayoutLMModel"),iot.forEach(t),g2o=r(Eye," (LayoutLM model)"),Eye.forEach(t),h2o=i($),Uu=n($,"LI",{});var Cye=s(Uu);mle=n(Cye,"STRONG",{});var dot=s(mle);u2o=r(dot,"layoutlmv2"),dot.forEach(t),p2o=r(Cye," \u2014 "),Tq=n(Cye,"A",{href:!0});var cot=s(Tq);_2o=r(cot,"LayoutLMv2Model"),cot.forEach(t),b2o=r(Cye," (LayoutLMv2 model)"),Cye.forEach(t),v2o=i($),Ju=n($,"LI",{});var wye=s(Ju);fle=n(wye,"STRONG",{});var mot=s(fle);F2o=r(mot,"layoutlmv3"),mot.forEach(t),T2o=r(wye," \u2014 "),Mq=n(wye,"A",{href:!0});var fot=s(Mq);M2o=r(fot,"LayoutLMv3Model"),fot.forEach(t),E2o=r(wye," (LayoutLMv3 model)"),wye.forEach(t),C2o=i($),Yu=n($,"LI",{});var Aye=s(Yu);gle=n(Aye,"STRONG",{});var got=s(gle);w2o=r(got,"led"),got.forEach(t),A2o=r(Aye," \u2014 "),Eq=n(Aye,"A",{href:!0});var hot=s(Eq);y2o=r(hot,"LEDModel"),hot.forEach(t),L2o=r(Aye," (LED model)"),Aye.forEach(t),x2o=i($),Ku=n($,"LI",{});var yye=s(Ku);hle=n(yye,"STRONG",{});var uot=s(hle);$2o=r(uot,"longformer"),uot.forEach(t),k2o=r(yye," \u2014 "),Cq=n(yye,"A",{href:!0});var pot=s(Cq);S2o=r(pot,"LongformerModel"),pot.forEach(t),R2o=r(yye," (Longformer model)"),yye.forEach(t),P2o=i($),Zu=n($,"LI",{});var Lye=s(Zu);ule=n(Lye,"STRONG",{});var _ot=s(ule);B2o=r(_ot,"luke"),_ot.forEach(t),I2o=r(Lye," \u2014 "),wq=n(Lye,"A",{href:!0});var bot=s(wq);q2o=r(bot,"LukeModel"),bot.forEach(t),N2o=r(Lye," (LUKE model)"),Lye.forEach(t),j2o=i($),ep=n($,"LI",{});var xye=s(ep);ple=n(xye,"STRONG",{});var vot=s(ple);D2o=r(vot,"lxmert"),vot.forEach(t),G2o=r(xye," \u2014 "),Aq=n(xye,"A",{href:!0});var Fot=s(Aq);O2o=r(Fot,"LxmertModel"),Fot.forEach(t),V2o=r(xye," (LXMERT model)"),xye.forEach(t),X2o=i($),op=n($,"LI",{});var $ye=s(op);_le=n($ye,"STRONG",{});var Tot=s(_le);z2o=r(Tot,"m2m_100"),Tot.forEach(t),W2o=r($ye," \u2014 "),yq=n($ye,"A",{href:!0});var Mot=s(yq);Q2o=r(Mot,"M2M100Model"),Mot.forEach(t),H2o=r($ye," (M2M100 model)"),$ye.forEach(t),U2o=i($),rp=n($,"LI",{});var kye=s(rp);ble=n(kye,"STRONG",{});var Eot=s(ble);J2o=r(Eot,"marian"),Eot.forEach(t),Y2o=r(kye," \u2014 "),Lq=n(kye,"A",{href:!0});var Cot=s(Lq);K2o=r(Cot,"MarianModel"),Cot.forEach(t),Z2o=r(kye," (Marian model)"),kye.forEach(t),evo=i($),tp=n($,"LI",{});var Sye=s(tp);vle=n(Sye,"STRONG",{});var wot=s(vle);ovo=r(wot,"maskformer"),wot.forEach(t),rvo=r(Sye," \u2014 "),xq=n(Sye,"A",{href:!0});var Aot=s(xq);tvo=r(Aot,"MaskFormerModel"),Aot.forEach(t),avo=r(Sye," (MaskFormer model)"),Sye.forEach(t),nvo=i($),ap=n($,"LI",{});var Rye=s(ap);Fle=n(Rye,"STRONG",{});var yot=s(Fle);svo=r(yot,"mbart"),yot.forEach(t),lvo=r(Rye," \u2014 "),$q=n(Rye,"A",{href:!0});var Lot=s($q);ivo=r(Lot,"MBartModel"),Lot.forEach(t),dvo=r(Rye," (mBART model)"),Rye.forEach(t),cvo=i($),np=n($,"LI",{});var Pye=s(np);Tle=n(Pye,"STRONG",{});var xot=s(Tle);mvo=r(xot,"megatron-bert"),xot.forEach(t),fvo=r(Pye," \u2014 "),kq=n(Pye,"A",{href:!0});var $ot=s(kq);gvo=r($ot,"MegatronBertModel"),$ot.forEach(t),hvo=r(Pye," (MegatronBert model)"),Pye.forEach(t),uvo=i($),sp=n($,"LI",{});var Bye=s(sp);Mle=n(Bye,"STRONG",{});var kot=s(Mle);pvo=r(kot,"mobilebert"),kot.forEach(t),_vo=r(Bye," \u2014 "),Sq=n(Bye,"A",{href:!0});var Sot=s(Sq);bvo=r(Sot,"MobileBertModel"),Sot.forEach(t),vvo=r(Bye," (MobileBERT model)"),Bye.forEach(t),Fvo=i($),lp=n($,"LI",{});var Iye=s(lp);Ele=n(Iye,"STRONG",{});var Rot=s(Ele);Tvo=r(Rot,"mpnet"),Rot.forEach(t),Mvo=r(Iye," \u2014 "),Rq=n(Iye,"A",{href:!0});var Pot=s(Rq);Evo=r(Pot,"MPNetModel"),Pot.forEach(t),Cvo=r(Iye," (MPNet model)"),Iye.forEach(t),wvo=i($),ip=n($,"LI",{});var qye=s(ip);Cle=n(qye,"STRONG",{});var Bot=s(Cle);Avo=r(Bot,"mt5"),Bot.forEach(t),yvo=r(qye," \u2014 "),Pq=n(qye,"A",{href:!0});var Iot=s(Pq);Lvo=r(Iot,"MT5Model"),Iot.forEach(t),xvo=r(qye," (mT5 model)"),qye.forEach(t),$vo=i($),dp=n($,"LI",{});var Nye=s(dp);wle=n(Nye,"STRONG",{});var qot=s(wle);kvo=r(qot,"nystromformer"),qot.forEach(t),Svo=r(Nye," \u2014 "),Bq=n(Nye,"A",{href:!0});var Not=s(Bq);Rvo=r(Not,"NystromformerModel"),Not.forEach(t),Pvo=r(Nye," (Nystromformer model)"),Nye.forEach(t),Bvo=i($),cp=n($,"LI",{});var jye=s(cp);Ale=n(jye,"STRONG",{});var jot=s(Ale);Ivo=r(jot,"openai-gpt"),jot.forEach(t),qvo=r(jye," \u2014 "),Iq=n(jye,"A",{href:!0});var Dot=s(Iq);Nvo=r(Dot,"OpenAIGPTModel"),Dot.forEach(t),jvo=r(jye," (OpenAI GPT model)"),jye.forEach(t),Dvo=i($),mp=n($,"LI",{});var Dye=s(mp);yle=n(Dye,"STRONG",{});var Got=s(yle);Gvo=r(Got,"opt"),Got.forEach(t),Ovo=r(Dye," \u2014 "),qq=n(Dye,"A",{href:!0});var Oot=s(qq);Vvo=r(Oot,"OPTModel"),Oot.forEach(t),Xvo=r(Dye," (OPT model)"),Dye.forEach(t),zvo=i($),fp=n($,"LI",{});var Gye=s(fp);Lle=n(Gye,"STRONG",{});var Vot=s(Lle);Wvo=r(Vot,"pegasus"),Vot.forEach(t),Qvo=r(Gye," \u2014 "),Nq=n(Gye,"A",{href:!0});var Xot=s(Nq);Hvo=r(Xot,"PegasusModel"),Xot.forEach(t),Uvo=r(Gye," (Pegasus model)"),Gye.forEach(t),Jvo=i($),gp=n($,"LI",{});var Oye=s(gp);xle=n(Oye,"STRONG",{});var zot=s(xle);Yvo=r(zot,"perceiver"),zot.forEach(t),Kvo=r(Oye," \u2014 "),jq=n(Oye,"A",{href:!0});var Wot=s(jq);Zvo=r(Wot,"PerceiverModel"),Wot.forEach(t),eFo=r(Oye," (Perceiver model)"),Oye.forEach(t),oFo=i($),hp=n($,"LI",{});var Vye=s(hp);$le=n(Vye,"STRONG",{});var Qot=s($le);rFo=r(Qot,"plbart"),Qot.forEach(t),tFo=r(Vye," \u2014 "),Dq=n(Vye,"A",{href:!0});var Hot=s(Dq);aFo=r(Hot,"PLBartModel"),Hot.forEach(t),nFo=r(Vye," (PLBart model)"),Vye.forEach(t),sFo=i($),up=n($,"LI",{});var Xye=s(up);kle=n(Xye,"STRONG",{});var Uot=s(kle);lFo=r(Uot,"poolformer"),Uot.forEach(t),iFo=r(Xye," \u2014 "),Gq=n(Xye,"A",{href:!0});var Jot=s(Gq);dFo=r(Jot,"PoolFormerModel"),Jot.forEach(t),cFo=r(Xye," (PoolFormer model)"),Xye.forEach(t),mFo=i($),pp=n($,"LI",{});var zye=s(pp);Sle=n(zye,"STRONG",{});var Yot=s(Sle);fFo=r(Yot,"prophetnet"),Yot.forEach(t),gFo=r(zye," \u2014 "),Oq=n(zye,"A",{href:!0});var Kot=s(Oq);hFo=r(Kot,"ProphetNetModel"),Kot.forEach(t),uFo=r(zye," (ProphetNet model)"),zye.forEach(t),pFo=i($),_p=n($,"LI",{});var Wye=s(_p);Rle=n(Wye,"STRONG",{});var Zot=s(Rle);_Fo=r(Zot,"qdqbert"),Zot.forEach(t),bFo=r(Wye," \u2014 "),Vq=n(Wye,"A",{href:!0});var ert=s(Vq);vFo=r(ert,"QDQBertModel"),ert.forEach(t),FFo=r(Wye," (QDQBert model)"),Wye.forEach(t),TFo=i($),bp=n($,"LI",{});var Qye=s(bp);Ple=n(Qye,"STRONG",{});var ort=s(Ple);MFo=r(ort,"reformer"),ort.forEach(t),EFo=r(Qye," \u2014 "),Xq=n(Qye,"A",{href:!0});var rrt=s(Xq);CFo=r(rrt,"ReformerModel"),rrt.forEach(t),wFo=r(Qye," (Reformer model)"),Qye.forEach(t),AFo=i($),vp=n($,"LI",{});var Hye=s(vp);Ble=n(Hye,"STRONG",{});var trt=s(Ble);yFo=r(trt,"regnet"),trt.forEach(t),LFo=r(Hye," \u2014 "),zq=n(Hye,"A",{href:!0});var art=s(zq);xFo=r(art,"RegNetModel"),art.forEach(t),$Fo=r(Hye," (RegNet model)"),Hye.forEach(t),kFo=i($),Fp=n($,"LI",{});var Uye=s(Fp);Ile=n(Uye,"STRONG",{});var nrt=s(Ile);SFo=r(nrt,"rembert"),nrt.forEach(t),RFo=r(Uye," \u2014 "),Wq=n(Uye,"A",{href:!0});var srt=s(Wq);PFo=r(srt,"RemBertModel"),srt.forEach(t),BFo=r(Uye," (RemBERT model)"),Uye.forEach(t),IFo=i($),Tp=n($,"LI",{});var Jye=s(Tp);qle=n(Jye,"STRONG",{});var lrt=s(qle);qFo=r(lrt,"resnet"),lrt.forEach(t),NFo=r(Jye," \u2014 "),Qq=n(Jye,"A",{href:!0});var irt=s(Qq);jFo=r(irt,"ResNetModel"),irt.forEach(t),DFo=r(Jye," (ResNet model)"),Jye.forEach(t),GFo=i($),Mp=n($,"LI",{});var Yye=s(Mp);Nle=n(Yye,"STRONG",{});var drt=s(Nle);OFo=r(drt,"retribert"),drt.forEach(t),VFo=r(Yye," \u2014 "),Hq=n(Yye,"A",{href:!0});var crt=s(Hq);XFo=r(crt,"RetriBertModel"),crt.forEach(t),zFo=r(Yye," (RetriBERT model)"),Yye.forEach(t),WFo=i($),Ep=n($,"LI",{});var Kye=s(Ep);jle=n(Kye,"STRONG",{});var mrt=s(jle);QFo=r(mrt,"roberta"),mrt.forEach(t),HFo=r(Kye," \u2014 "),Uq=n(Kye,"A",{href:!0});var frt=s(Uq);UFo=r(frt,"RobertaModel"),frt.forEach(t),JFo=r(Kye," (RoBERTa model)"),Kye.forEach(t),YFo=i($),Cp=n($,"LI",{});var Zye=s(Cp);Dle=n(Zye,"STRONG",{});var grt=s(Dle);KFo=r(grt,"roformer"),grt.forEach(t),ZFo=r(Zye," \u2014 "),Jq=n(Zye,"A",{href:!0});var hrt=s(Jq);e1o=r(hrt,"RoFormerModel"),hrt.forEach(t),o1o=r(Zye," (RoFormer model)"),Zye.forEach(t),r1o=i($),wp=n($,"LI",{});var eLe=s(wp);Gle=n(eLe,"STRONG",{});var urt=s(Gle);t1o=r(urt,"segformer"),urt.forEach(t),a1o=r(eLe," \u2014 "),Yq=n(eLe,"A",{href:!0});var prt=s(Yq);n1o=r(prt,"SegformerModel"),prt.forEach(t),s1o=r(eLe," (SegFormer model)"),eLe.forEach(t),l1o=i($),Ap=n($,"LI",{});var oLe=s(Ap);Ole=n(oLe,"STRONG",{});var _rt=s(Ole);i1o=r(_rt,"sew"),_rt.forEach(t),d1o=r(oLe," \u2014 "),Kq=n(oLe,"A",{href:!0});var brt=s(Kq);c1o=r(brt,"SEWModel"),brt.forEach(t),m1o=r(oLe," (SEW model)"),oLe.forEach(t),f1o=i($),yp=n($,"LI",{});var rLe=s(yp);Vle=n(rLe,"STRONG",{});var vrt=s(Vle);g1o=r(vrt,"sew-d"),vrt.forEach(t),h1o=r(rLe," \u2014 "),Zq=n(rLe,"A",{href:!0});var Frt=s(Zq);u1o=r(Frt,"SEWDModel"),Frt.forEach(t),p1o=r(rLe," (SEW-D model)"),rLe.forEach(t),_1o=i($),Lp=n($,"LI",{});var tLe=s(Lp);Xle=n(tLe,"STRONG",{});var Trt=s(Xle);b1o=r(Trt,"speech_to_text"),Trt.forEach(t),v1o=r(tLe," \u2014 "),eN=n(tLe,"A",{href:!0});var Mrt=s(eN);F1o=r(Mrt,"Speech2TextModel"),Mrt.forEach(t),T1o=r(tLe," (Speech2Text model)"),tLe.forEach(t),M1o=i($),xp=n($,"LI",{});var aLe=s(xp);zle=n(aLe,"STRONG",{});var Ert=s(zle);E1o=r(Ert,"splinter"),Ert.forEach(t),C1o=r(aLe," \u2014 "),oN=n(aLe,"A",{href:!0});var Crt=s(oN);w1o=r(Crt,"SplinterModel"),Crt.forEach(t),A1o=r(aLe," (Splinter model)"),aLe.forEach(t),y1o=i($),$p=n($,"LI",{});var nLe=s($p);Wle=n(nLe,"STRONG",{});var wrt=s(Wle);L1o=r(wrt,"squeezebert"),wrt.forEach(t),x1o=r(nLe," \u2014 "),rN=n(nLe,"A",{href:!0});var Art=s(rN);$1o=r(Art,"SqueezeBertModel"),Art.forEach(t),k1o=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),S1o=i($),kp=n($,"LI",{});var sLe=s(kp);Qle=n(sLe,"STRONG",{});var yrt=s(Qle);R1o=r(yrt,"swin"),yrt.forEach(t),P1o=r(sLe," \u2014 "),tN=n(sLe,"A",{href:!0});var Lrt=s(tN);B1o=r(Lrt,"SwinModel"),Lrt.forEach(t),I1o=r(sLe," (Swin model)"),sLe.forEach(t),q1o=i($),Sp=n($,"LI",{});var lLe=s(Sp);Hle=n(lLe,"STRONG",{});var xrt=s(Hle);N1o=r(xrt,"t5"),xrt.forEach(t),j1o=r(lLe," \u2014 "),aN=n(lLe,"A",{href:!0});var $rt=s(aN);D1o=r($rt,"T5Model"),$rt.forEach(t),G1o=r(lLe," (T5 model)"),lLe.forEach(t),O1o=i($),Rp=n($,"LI",{});var iLe=s(Rp);Ule=n(iLe,"STRONG",{});var krt=s(Ule);V1o=r(krt,"tapas"),krt.forEach(t),X1o=r(iLe," \u2014 "),nN=n(iLe,"A",{href:!0});var Srt=s(nN);z1o=r(Srt,"TapasModel"),Srt.forEach(t),W1o=r(iLe," (TAPAS model)"),iLe.forEach(t),Q1o=i($),Pp=n($,"LI",{});var dLe=s(Pp);Jle=n(dLe,"STRONG",{});var Rrt=s(Jle);H1o=r(Rrt,"trajectory_transformer"),Rrt.forEach(t),U1o=r(dLe," \u2014 "),sN=n(dLe,"A",{href:!0});var Prt=s(sN);J1o=r(Prt,"TrajectoryTransformerModel"),Prt.forEach(t),Y1o=r(dLe," (Trajectory Transformer model)"),dLe.forEach(t),K1o=i($),Bp=n($,"LI",{});var cLe=s(Bp);Yle=n(cLe,"STRONG",{});var Brt=s(Yle);Z1o=r(Brt,"transfo-xl"),Brt.forEach(t),eTo=r(cLe," \u2014 "),lN=n(cLe,"A",{href:!0});var Irt=s(lN);oTo=r(Irt,"TransfoXLModel"),Irt.forEach(t),rTo=r(cLe," (Transformer-XL model)"),cLe.forEach(t),tTo=i($),Ip=n($,"LI",{});var mLe=s(Ip);Kle=n(mLe,"STRONG",{});var qrt=s(Kle);aTo=r(qrt,"unispeech"),qrt.forEach(t),nTo=r(mLe," \u2014 "),iN=n(mLe,"A",{href:!0});var Nrt=s(iN);sTo=r(Nrt,"UniSpeechModel"),Nrt.forEach(t),lTo=r(mLe," (UniSpeech model)"),mLe.forEach(t),iTo=i($),qp=n($,"LI",{});var fLe=s(qp);Zle=n(fLe,"STRONG",{});var jrt=s(Zle);dTo=r(jrt,"unispeech-sat"),jrt.forEach(t),cTo=r(fLe," \u2014 "),dN=n(fLe,"A",{href:!0});var Drt=s(dN);mTo=r(Drt,"UniSpeechSatModel"),Drt.forEach(t),fTo=r(fLe," (UniSpeechSat model)"),fLe.forEach(t),gTo=i($),Np=n($,"LI",{});var gLe=s(Np);eie=n(gLe,"STRONG",{});var Grt=s(eie);hTo=r(Grt,"van"),Grt.forEach(t),uTo=r(gLe," \u2014 "),cN=n(gLe,"A",{href:!0});var Ort=s(cN);pTo=r(Ort,"VanModel"),Ort.forEach(t),_To=r(gLe," (VAN model)"),gLe.forEach(t),bTo=i($),jp=n($,"LI",{});var hLe=s(jp);oie=n(hLe,"STRONG",{});var Vrt=s(oie);vTo=r(Vrt,"vilt"),Vrt.forEach(t),FTo=r(hLe," \u2014 "),mN=n(hLe,"A",{href:!0});var Xrt=s(mN);TTo=r(Xrt,"ViltModel"),Xrt.forEach(t),MTo=r(hLe," (ViLT model)"),hLe.forEach(t),ETo=i($),Dp=n($,"LI",{});var uLe=s(Dp);rie=n(uLe,"STRONG",{});var zrt=s(rie);CTo=r(zrt,"vision-text-dual-encoder"),zrt.forEach(t),wTo=r(uLe," \u2014 "),fN=n(uLe,"A",{href:!0});var Wrt=s(fN);ATo=r(Wrt,"VisionTextDualEncoderModel"),Wrt.forEach(t),yTo=r(uLe," (VisionTextDualEncoder model)"),uLe.forEach(t),LTo=i($),Gp=n($,"LI",{});var pLe=s(Gp);tie=n(pLe,"STRONG",{});var Qrt=s(tie);xTo=r(Qrt,"visual_bert"),Qrt.forEach(t),$To=r(pLe," \u2014 "),gN=n(pLe,"A",{href:!0});var Hrt=s(gN);kTo=r(Hrt,"VisualBertModel"),Hrt.forEach(t),STo=r(pLe," (VisualBert model)"),pLe.forEach(t),RTo=i($),Op=n($,"LI",{});var _Le=s(Op);aie=n(_Le,"STRONG",{});var Urt=s(aie);PTo=r(Urt,"vit"),Urt.forEach(t),BTo=r(_Le," \u2014 "),hN=n(_Le,"A",{href:!0});var Jrt=s(hN);ITo=r(Jrt,"ViTModel"),Jrt.forEach(t),qTo=r(_Le," (ViT model)"),_Le.forEach(t),NTo=i($),Vp=n($,"LI",{});var bLe=s(Vp);nie=n(bLe,"STRONG",{});var Yrt=s(nie);jTo=r(Yrt,"vit_mae"),Yrt.forEach(t),DTo=r(bLe," \u2014 "),uN=n(bLe,"A",{href:!0});var Krt=s(uN);GTo=r(Krt,"ViTMAEModel"),Krt.forEach(t),OTo=r(bLe," (ViTMAE model)"),bLe.forEach(t),VTo=i($),Xp=n($,"LI",{});var vLe=s(Xp);sie=n(vLe,"STRONG",{});var Zrt=s(sie);XTo=r(Zrt,"wav2vec2"),Zrt.forEach(t),zTo=r(vLe," \u2014 "),pN=n(vLe,"A",{href:!0});var ett=s(pN);WTo=r(ett,"Wav2Vec2Model"),ett.forEach(t),QTo=r(vLe," (Wav2Vec2 model)"),vLe.forEach(t),HTo=i($),zp=n($,"LI",{});var FLe=s(zp);lie=n(FLe,"STRONG",{});var ott=s(lie);UTo=r(ott,"wav2vec2-conformer"),ott.forEach(t),JTo=r(FLe," \u2014 "),_N=n(FLe,"A",{href:!0});var rtt=s(_N);YTo=r(rtt,"Wav2Vec2ConformerModel"),rtt.forEach(t),KTo=r(FLe," (Wav2Vec2-Conformer model)"),FLe.forEach(t),ZTo=i($),Wp=n($,"LI",{});var TLe=s(Wp);iie=n(TLe,"STRONG",{});var ttt=s(iie);eMo=r(ttt,"wavlm"),ttt.forEach(t),oMo=r(TLe," \u2014 "),bN=n(TLe,"A",{href:!0});var att=s(bN);rMo=r(att,"WavLMModel"),att.forEach(t),tMo=r(TLe," (WavLM model)"),TLe.forEach(t),aMo=i($),Qp=n($,"LI",{});var MLe=s(Qp);die=n(MLe,"STRONG",{});var ntt=s(die);nMo=r(ntt,"xglm"),ntt.forEach(t),sMo=r(MLe," \u2014 "),vN=n(MLe,"A",{href:!0});var stt=s(vN);lMo=r(stt,"XGLMModel"),stt.forEach(t),iMo=r(MLe," (XGLM model)"),MLe.forEach(t),dMo=i($),Hp=n($,"LI",{});var ELe=s(Hp);cie=n(ELe,"STRONG",{});var ltt=s(cie);cMo=r(ltt,"xlm"),ltt.forEach(t),mMo=r(ELe," \u2014 "),FN=n(ELe,"A",{href:!0});var itt=s(FN);fMo=r(itt,"XLMModel"),itt.forEach(t),gMo=r(ELe," (XLM model)"),ELe.forEach(t),hMo=i($),Up=n($,"LI",{});var CLe=s(Up);mie=n(CLe,"STRONG",{});var dtt=s(mie);uMo=r(dtt,"xlm-prophetnet"),dtt.forEach(t),pMo=r(CLe," \u2014 "),TN=n(CLe,"A",{href:!0});var ctt=s(TN);_Mo=r(ctt,"XLMProphetNetModel"),ctt.forEach(t),bMo=r(CLe," (XLMProphetNet model)"),CLe.forEach(t),vMo=i($),Jp=n($,"LI",{});var wLe=s(Jp);fie=n(wLe,"STRONG",{});var mtt=s(fie);FMo=r(mtt,"xlm-roberta"),mtt.forEach(t),TMo=r(wLe," \u2014 "),MN=n(wLe,"A",{href:!0});var ftt=s(MN);MMo=r(ftt,"XLMRobertaModel"),ftt.forEach(t),EMo=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),CMo=i($),Yp=n($,"LI",{});var ALe=s(Yp);gie=n(ALe,"STRONG",{});var gtt=s(gie);wMo=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),AMo=r(ALe," \u2014 "),EN=n(ALe,"A",{href:!0});var htt=s(EN);yMo=r(htt,"XLMRobertaXLModel"),htt.forEach(t),LMo=r(ALe," (XLM-RoBERTa-XL model)"),ALe.forEach(t),xMo=i($),Kp=n($,"LI",{});var yLe=s(Kp);hie=n(yLe,"STRONG",{});var utt=s(hie);$Mo=r(utt,"xlnet"),utt.forEach(t),kMo=r(yLe," \u2014 "),CN=n(yLe,"A",{href:!0});var ptt=s(CN);SMo=r(ptt,"XLNetModel"),ptt.forEach(t),RMo=r(yLe," (XLNet model)"),yLe.forEach(t),PMo=i($),Zp=n($,"LI",{});var LLe=s(Zp);uie=n(LLe,"STRONG",{});var _tt=s(uie);BMo=r(_tt,"yolos"),_tt.forEach(t),IMo=r(LLe," \u2014 "),wN=n(LLe,"A",{href:!0});var btt=s(wN);qMo=r(btt,"YolosModel"),btt.forEach(t),NMo=r(LLe," (YOLOS model)"),LLe.forEach(t),jMo=i($),e_=n($,"LI",{});var xLe=s(e_);pie=n(xLe,"STRONG",{});var vtt=s(pie);DMo=r(vtt,"yoso"),vtt.forEach(t),GMo=r(xLe," \u2014 "),AN=n(xLe,"A",{href:!0});var Ftt=s(AN);OMo=r(Ftt,"YosoModel"),Ftt.forEach(t),VMo=r(xLe," (YOSO model)"),xLe.forEach(t),$.forEach(t),XMo=i(oa),o_=n(oa,"P",{});var $Le=s(o_);zMo=r($Le,"The model is set in evaluation mode by default using "),_ie=n($Le,"CODE",{});var Ttt=s(_ie);WMo=r(Ttt,"model.eval()"),Ttt.forEach(t),QMo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=n($Le,"CODE",{});var Mtt=s(bie);HMo=r(Mtt,"model.train()"),Mtt.forEach(t),$Le.forEach(t),UMo=i(oa),T(r_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),gNe=i(m),Li=n(m,"H2",{class:!0});var _De=s(Li);t_=n(_De,"A",{id:!0,class:!0,href:!0});var Ett=s(t_);vie=n(Ett,"SPAN",{});var Ctt=s(vie);T(aL.$$.fragment,Ctt),Ctt.forEach(t),Ett.forEach(t),JMo=i(_De),Fie=n(_De,"SPAN",{});var wtt=s(Fie);YMo=r(wtt,"AutoModelForPreTraining"),wtt.forEach(t),_De.forEach(t),hNe=i(m),xo=n(m,"DIV",{class:!0});var Os=s(xo);T(nL.$$.fragment,Os),KMo=i(Os),xi=n(Os,"P",{});var _Z=s(xi);ZMo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yN=n(_Z,"A",{href:!0});var Att=s(yN);e4o=r(Att,"from_pretrained()"),Att.forEach(t),o4o=r(_Z," class method or the "),LN=n(_Z,"A",{href:!0});var ytt=s(LN);r4o=r(ytt,"from_config()"),ytt.forEach(t),t4o=r(_Z,` class
method.`),_Z.forEach(t),a4o=i(Os),sL=n(Os,"P",{});var bDe=s(sL);n4o=r(bDe,"This class cannot be instantiated directly using "),Tie=n(bDe,"CODE",{});var Ltt=s(Tie);s4o=r(Ltt,"__init__()"),Ltt.forEach(t),l4o=r(bDe," (throws an error)."),bDe.forEach(t),i4o=i(Os),at=n(Os,"DIV",{class:!0});var RA=s(at);T(lL.$$.fragment,RA),d4o=i(RA),Mie=n(RA,"P",{});var xtt=s(Mie);c4o=r(xtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xtt.forEach(t),m4o=i(RA),$i=n(RA,"P",{});var bZ=s($i);f4o=r(bZ,`Note:
Loading a model from its configuration file does `),Eie=n(bZ,"STRONG",{});var $tt=s(Eie);g4o=r($tt,"not"),$tt.forEach(t),h4o=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=n(bZ,"A",{href:!0});var ktt=s(xN);u4o=r(ktt,"from_pretrained()"),ktt.forEach(t),p4o=r(bZ," to load the model weights."),bZ.forEach(t),_4o=i(RA),T(a_.$$.fragment,RA),RA.forEach(t),b4o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(iL.$$.fragment,ra),v4o=i(ra),Cie=n(ra,"P",{});var Stt=s(Cie);F4o=r(Stt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Stt.forEach(t),T4o=i(ra),xa=n(ra,"P",{});var PA=s(xa);M4o=r(PA,"The model class to instantiate is selected based on the "),wie=n(PA,"CODE",{});var Rtt=s(wie);E4o=r(Rtt,"model_type"),Rtt.forEach(t),C4o=r(PA,` property of the config object (either
passed as an argument or loaded from `),Aie=n(PA,"CODE",{});var Ptt=s(Aie);w4o=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),A4o=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(PA,"CODE",{});var Btt=s(yie);y4o=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),L4o=r(PA,":"),PA.forEach(t),x4o=i(ra),G=n(ra,"UL",{});var O=s(G);n_=n(O,"LI",{});var kLe=s(n_);Lie=n(kLe,"STRONG",{});var Itt=s(Lie);$4o=r(Itt,"albert"),Itt.forEach(t),k4o=r(kLe," \u2014 "),$N=n(kLe,"A",{href:!0});var qtt=s($N);S4o=r(qtt,"AlbertForPreTraining"),qtt.forEach(t),R4o=r(kLe," (ALBERT model)"),kLe.forEach(t),P4o=i(O),s_=n(O,"LI",{});var SLe=s(s_);xie=n(SLe,"STRONG",{});var Ntt=s(xie);B4o=r(Ntt,"bart"),Ntt.forEach(t),I4o=r(SLe," \u2014 "),kN=n(SLe,"A",{href:!0});var jtt=s(kN);q4o=r(jtt,"BartForConditionalGeneration"),jtt.forEach(t),N4o=r(SLe," (BART model)"),SLe.forEach(t),j4o=i(O),l_=n(O,"LI",{});var RLe=s(l_);$ie=n(RLe,"STRONG",{});var Dtt=s($ie);D4o=r(Dtt,"bert"),Dtt.forEach(t),G4o=r(RLe," \u2014 "),SN=n(RLe,"A",{href:!0});var Gtt=s(SN);O4o=r(Gtt,"BertForPreTraining"),Gtt.forEach(t),V4o=r(RLe," (BERT model)"),RLe.forEach(t),X4o=i(O),i_=n(O,"LI",{});var PLe=s(i_);kie=n(PLe,"STRONG",{});var Ott=s(kie);z4o=r(Ott,"big_bird"),Ott.forEach(t),W4o=r(PLe," \u2014 "),RN=n(PLe,"A",{href:!0});var Vtt=s(RN);Q4o=r(Vtt,"BigBirdForPreTraining"),Vtt.forEach(t),H4o=r(PLe," (BigBird model)"),PLe.forEach(t),U4o=i(O),d_=n(O,"LI",{});var BLe=s(d_);Sie=n(BLe,"STRONG",{});var Xtt=s(Sie);J4o=r(Xtt,"camembert"),Xtt.forEach(t),Y4o=r(BLe," \u2014 "),PN=n(BLe,"A",{href:!0});var ztt=s(PN);K4o=r(ztt,"CamembertForMaskedLM"),ztt.forEach(t),Z4o=r(BLe," (CamemBERT model)"),BLe.forEach(t),eEo=i(O),c_=n(O,"LI",{});var ILe=s(c_);Rie=n(ILe,"STRONG",{});var Wtt=s(Rie);oEo=r(Wtt,"ctrl"),Wtt.forEach(t),rEo=r(ILe," \u2014 "),BN=n(ILe,"A",{href:!0});var Qtt=s(BN);tEo=r(Qtt,"CTRLLMHeadModel"),Qtt.forEach(t),aEo=r(ILe," (CTRL model)"),ILe.forEach(t),nEo=i(O),m_=n(O,"LI",{});var qLe=s(m_);Pie=n(qLe,"STRONG",{});var Htt=s(Pie);sEo=r(Htt,"data2vec-text"),Htt.forEach(t),lEo=r(qLe," \u2014 "),IN=n(qLe,"A",{href:!0});var Utt=s(IN);iEo=r(Utt,"Data2VecTextForMaskedLM"),Utt.forEach(t),dEo=r(qLe," (Data2VecText model)"),qLe.forEach(t),cEo=i(O),f_=n(O,"LI",{});var NLe=s(f_);Bie=n(NLe,"STRONG",{});var Jtt=s(Bie);mEo=r(Jtt,"deberta"),Jtt.forEach(t),fEo=r(NLe," \u2014 "),qN=n(NLe,"A",{href:!0});var Ytt=s(qN);gEo=r(Ytt,"DebertaForMaskedLM"),Ytt.forEach(t),hEo=r(NLe," (DeBERTa model)"),NLe.forEach(t),uEo=i(O),g_=n(O,"LI",{});var jLe=s(g_);Iie=n(jLe,"STRONG",{});var Ktt=s(Iie);pEo=r(Ktt,"deberta-v2"),Ktt.forEach(t),_Eo=r(jLe," \u2014 "),NN=n(jLe,"A",{href:!0});var Ztt=s(NN);bEo=r(Ztt,"DebertaV2ForMaskedLM"),Ztt.forEach(t),vEo=r(jLe," (DeBERTa-v2 model)"),jLe.forEach(t),FEo=i(O),h_=n(O,"LI",{});var DLe=s(h_);qie=n(DLe,"STRONG",{});var eat=s(qie);TEo=r(eat,"distilbert"),eat.forEach(t),MEo=r(DLe," \u2014 "),jN=n(DLe,"A",{href:!0});var oat=s(jN);EEo=r(oat,"DistilBertForMaskedLM"),oat.forEach(t),CEo=r(DLe," (DistilBERT model)"),DLe.forEach(t),wEo=i(O),u_=n(O,"LI",{});var GLe=s(u_);Nie=n(GLe,"STRONG",{});var rat=s(Nie);AEo=r(rat,"electra"),rat.forEach(t),yEo=r(GLe," \u2014 "),DN=n(GLe,"A",{href:!0});var tat=s(DN);LEo=r(tat,"ElectraForPreTraining"),tat.forEach(t),xEo=r(GLe," (ELECTRA model)"),GLe.forEach(t),$Eo=i(O),p_=n(O,"LI",{});var OLe=s(p_);jie=n(OLe,"STRONG",{});var aat=s(jie);kEo=r(aat,"flaubert"),aat.forEach(t),SEo=r(OLe," \u2014 "),GN=n(OLe,"A",{href:!0});var nat=s(GN);REo=r(nat,"FlaubertWithLMHeadModel"),nat.forEach(t),PEo=r(OLe," (FlauBERT model)"),OLe.forEach(t),BEo=i(O),__=n(O,"LI",{});var VLe=s(__);Die=n(VLe,"STRONG",{});var sat=s(Die);IEo=r(sat,"flava"),sat.forEach(t),qEo=r(VLe," \u2014 "),ON=n(VLe,"A",{href:!0});var lat=s(ON);NEo=r(lat,"FlavaForPreTraining"),lat.forEach(t),jEo=r(VLe," (Flava model)"),VLe.forEach(t),DEo=i(O),b_=n(O,"LI",{});var XLe=s(b_);Gie=n(XLe,"STRONG",{});var iat=s(Gie);GEo=r(iat,"fnet"),iat.forEach(t),OEo=r(XLe," \u2014 "),VN=n(XLe,"A",{href:!0});var dat=s(VN);VEo=r(dat,"FNetForPreTraining"),dat.forEach(t),XEo=r(XLe," (FNet model)"),XLe.forEach(t),zEo=i(O),v_=n(O,"LI",{});var zLe=s(v_);Oie=n(zLe,"STRONG",{});var cat=s(Oie);WEo=r(cat,"fsmt"),cat.forEach(t),QEo=r(zLe," \u2014 "),XN=n(zLe,"A",{href:!0});var mat=s(XN);HEo=r(mat,"FSMTForConditionalGeneration"),mat.forEach(t),UEo=r(zLe," (FairSeq Machine-Translation model)"),zLe.forEach(t),JEo=i(O),F_=n(O,"LI",{});var WLe=s(F_);Vie=n(WLe,"STRONG",{});var fat=s(Vie);YEo=r(fat,"funnel"),fat.forEach(t),KEo=r(WLe," \u2014 "),zN=n(WLe,"A",{href:!0});var gat=s(zN);ZEo=r(gat,"FunnelForPreTraining"),gat.forEach(t),eCo=r(WLe," (Funnel Transformer model)"),WLe.forEach(t),oCo=i(O),T_=n(O,"LI",{});var QLe=s(T_);Xie=n(QLe,"STRONG",{});var hat=s(Xie);rCo=r(hat,"gpt2"),hat.forEach(t),tCo=r(QLe," \u2014 "),WN=n(QLe,"A",{href:!0});var uat=s(WN);aCo=r(uat,"GPT2LMHeadModel"),uat.forEach(t),nCo=r(QLe," (OpenAI GPT-2 model)"),QLe.forEach(t),sCo=i(O),M_=n(O,"LI",{});var HLe=s(M_);zie=n(HLe,"STRONG",{});var pat=s(zie);lCo=r(pat,"ibert"),pat.forEach(t),iCo=r(HLe," \u2014 "),QN=n(HLe,"A",{href:!0});var _at=s(QN);dCo=r(_at,"IBertForMaskedLM"),_at.forEach(t),cCo=r(HLe," (I-BERT model)"),HLe.forEach(t),mCo=i(O),E_=n(O,"LI",{});var ULe=s(E_);Wie=n(ULe,"STRONG",{});var bat=s(Wie);fCo=r(bat,"layoutlm"),bat.forEach(t),gCo=r(ULe," \u2014 "),HN=n(ULe,"A",{href:!0});var vat=s(HN);hCo=r(vat,"LayoutLMForMaskedLM"),vat.forEach(t),uCo=r(ULe," (LayoutLM model)"),ULe.forEach(t),pCo=i(O),C_=n(O,"LI",{});var JLe=s(C_);Qie=n(JLe,"STRONG",{});var Fat=s(Qie);_Co=r(Fat,"longformer"),Fat.forEach(t),bCo=r(JLe," \u2014 "),UN=n(JLe,"A",{href:!0});var Tat=s(UN);vCo=r(Tat,"LongformerForMaskedLM"),Tat.forEach(t),FCo=r(JLe," (Longformer model)"),JLe.forEach(t),TCo=i(O),w_=n(O,"LI",{});var YLe=s(w_);Hie=n(YLe,"STRONG",{});var Mat=s(Hie);MCo=r(Mat,"lxmert"),Mat.forEach(t),ECo=r(YLe," \u2014 "),JN=n(YLe,"A",{href:!0});var Eat=s(JN);CCo=r(Eat,"LxmertForPreTraining"),Eat.forEach(t),wCo=r(YLe," (LXMERT model)"),YLe.forEach(t),ACo=i(O),A_=n(O,"LI",{});var KLe=s(A_);Uie=n(KLe,"STRONG",{});var Cat=s(Uie);yCo=r(Cat,"megatron-bert"),Cat.forEach(t),LCo=r(KLe," \u2014 "),YN=n(KLe,"A",{href:!0});var wat=s(YN);xCo=r(wat,"MegatronBertForPreTraining"),wat.forEach(t),$Co=r(KLe," (MegatronBert model)"),KLe.forEach(t),kCo=i(O),y_=n(O,"LI",{});var ZLe=s(y_);Jie=n(ZLe,"STRONG",{});var Aat=s(Jie);SCo=r(Aat,"mobilebert"),Aat.forEach(t),RCo=r(ZLe," \u2014 "),KN=n(ZLe,"A",{href:!0});var yat=s(KN);PCo=r(yat,"MobileBertForPreTraining"),yat.forEach(t),BCo=r(ZLe," (MobileBERT model)"),ZLe.forEach(t),ICo=i(O),L_=n(O,"LI",{});var e8e=s(L_);Yie=n(e8e,"STRONG",{});var Lat=s(Yie);qCo=r(Lat,"mpnet"),Lat.forEach(t),NCo=r(e8e," \u2014 "),ZN=n(e8e,"A",{href:!0});var xat=s(ZN);jCo=r(xat,"MPNetForMaskedLM"),xat.forEach(t),DCo=r(e8e," (MPNet model)"),e8e.forEach(t),GCo=i(O),x_=n(O,"LI",{});var o8e=s(x_);Kie=n(o8e,"STRONG",{});var $at=s(Kie);OCo=r($at,"openai-gpt"),$at.forEach(t),VCo=r(o8e," \u2014 "),ej=n(o8e,"A",{href:!0});var kat=s(ej);XCo=r(kat,"OpenAIGPTLMHeadModel"),kat.forEach(t),zCo=r(o8e," (OpenAI GPT model)"),o8e.forEach(t),WCo=i(O),$_=n(O,"LI",{});var r8e=s($_);Zie=n(r8e,"STRONG",{});var Sat=s(Zie);QCo=r(Sat,"retribert"),Sat.forEach(t),HCo=r(r8e," \u2014 "),oj=n(r8e,"A",{href:!0});var Rat=s(oj);UCo=r(Rat,"RetriBertModel"),Rat.forEach(t),JCo=r(r8e," (RetriBERT model)"),r8e.forEach(t),YCo=i(O),k_=n(O,"LI",{});var t8e=s(k_);ede=n(t8e,"STRONG",{});var Pat=s(ede);KCo=r(Pat,"roberta"),Pat.forEach(t),ZCo=r(t8e," \u2014 "),rj=n(t8e,"A",{href:!0});var Bat=s(rj);e5o=r(Bat,"RobertaForMaskedLM"),Bat.forEach(t),o5o=r(t8e," (RoBERTa model)"),t8e.forEach(t),r5o=i(O),S_=n(O,"LI",{});var a8e=s(S_);ode=n(a8e,"STRONG",{});var Iat=s(ode);t5o=r(Iat,"splinter"),Iat.forEach(t),a5o=r(a8e," \u2014 "),tj=n(a8e,"A",{href:!0});var qat=s(tj);n5o=r(qat,"SplinterForPreTraining"),qat.forEach(t),s5o=r(a8e," (Splinter model)"),a8e.forEach(t),l5o=i(O),R_=n(O,"LI",{});var n8e=s(R_);rde=n(n8e,"STRONG",{});var Nat=s(rde);i5o=r(Nat,"squeezebert"),Nat.forEach(t),d5o=r(n8e," \u2014 "),aj=n(n8e,"A",{href:!0});var jat=s(aj);c5o=r(jat,"SqueezeBertForMaskedLM"),jat.forEach(t),m5o=r(n8e," (SqueezeBERT model)"),n8e.forEach(t),f5o=i(O),P_=n(O,"LI",{});var s8e=s(P_);tde=n(s8e,"STRONG",{});var Dat=s(tde);g5o=r(Dat,"t5"),Dat.forEach(t),h5o=r(s8e," \u2014 "),nj=n(s8e,"A",{href:!0});var Gat=s(nj);u5o=r(Gat,"T5ForConditionalGeneration"),Gat.forEach(t),p5o=r(s8e," (T5 model)"),s8e.forEach(t),_5o=i(O),B_=n(O,"LI",{});var l8e=s(B_);ade=n(l8e,"STRONG",{});var Oat=s(ade);b5o=r(Oat,"tapas"),Oat.forEach(t),v5o=r(l8e," \u2014 "),sj=n(l8e,"A",{href:!0});var Vat=s(sj);F5o=r(Vat,"TapasForMaskedLM"),Vat.forEach(t),T5o=r(l8e," (TAPAS model)"),l8e.forEach(t),M5o=i(O),I_=n(O,"LI",{});var i8e=s(I_);nde=n(i8e,"STRONG",{});var Xat=s(nde);E5o=r(Xat,"transfo-xl"),Xat.forEach(t),C5o=r(i8e," \u2014 "),lj=n(i8e,"A",{href:!0});var zat=s(lj);w5o=r(zat,"TransfoXLLMHeadModel"),zat.forEach(t),A5o=r(i8e," (Transformer-XL model)"),i8e.forEach(t),y5o=i(O),q_=n(O,"LI",{});var d8e=s(q_);sde=n(d8e,"STRONG",{});var Wat=s(sde);L5o=r(Wat,"unispeech"),Wat.forEach(t),x5o=r(d8e," \u2014 "),ij=n(d8e,"A",{href:!0});var Qat=s(ij);$5o=r(Qat,"UniSpeechForPreTraining"),Qat.forEach(t),k5o=r(d8e," (UniSpeech model)"),d8e.forEach(t),S5o=i(O),N_=n(O,"LI",{});var c8e=s(N_);lde=n(c8e,"STRONG",{});var Hat=s(lde);R5o=r(Hat,"unispeech-sat"),Hat.forEach(t),P5o=r(c8e," \u2014 "),dj=n(c8e,"A",{href:!0});var Uat=s(dj);B5o=r(Uat,"UniSpeechSatForPreTraining"),Uat.forEach(t),I5o=r(c8e," (UniSpeechSat model)"),c8e.forEach(t),q5o=i(O),j_=n(O,"LI",{});var m8e=s(j_);ide=n(m8e,"STRONG",{});var Jat=s(ide);N5o=r(Jat,"visual_bert"),Jat.forEach(t),j5o=r(m8e," \u2014 "),cj=n(m8e,"A",{href:!0});var Yat=s(cj);D5o=r(Yat,"VisualBertForPreTraining"),Yat.forEach(t),G5o=r(m8e," (VisualBert model)"),m8e.forEach(t),O5o=i(O),D_=n(O,"LI",{});var f8e=s(D_);dde=n(f8e,"STRONG",{});var Kat=s(dde);V5o=r(Kat,"vit_mae"),Kat.forEach(t),X5o=r(f8e," \u2014 "),mj=n(f8e,"A",{href:!0});var Zat=s(mj);z5o=r(Zat,"ViTMAEForPreTraining"),Zat.forEach(t),W5o=r(f8e," (ViTMAE model)"),f8e.forEach(t),Q5o=i(O),G_=n(O,"LI",{});var g8e=s(G_);cde=n(g8e,"STRONG",{});var ent=s(cde);H5o=r(ent,"wav2vec2"),ent.forEach(t),U5o=r(g8e," \u2014 "),fj=n(g8e,"A",{href:!0});var ont=s(fj);J5o=r(ont,"Wav2Vec2ForPreTraining"),ont.forEach(t),Y5o=r(g8e," (Wav2Vec2 model)"),g8e.forEach(t),K5o=i(O),O_=n(O,"LI",{});var h8e=s(O_);mde=n(h8e,"STRONG",{});var rnt=s(mde);Z5o=r(rnt,"wav2vec2-conformer"),rnt.forEach(t),e3o=r(h8e," \u2014 "),gj=n(h8e,"A",{href:!0});var tnt=s(gj);o3o=r(tnt,"Wav2Vec2ConformerForPreTraining"),tnt.forEach(t),r3o=r(h8e," (Wav2Vec2-Conformer model)"),h8e.forEach(t),t3o=i(O),V_=n(O,"LI",{});var u8e=s(V_);fde=n(u8e,"STRONG",{});var ant=s(fde);a3o=r(ant,"xlm"),ant.forEach(t),n3o=r(u8e," \u2014 "),hj=n(u8e,"A",{href:!0});var nnt=s(hj);s3o=r(nnt,"XLMWithLMHeadModel"),nnt.forEach(t),l3o=r(u8e," (XLM model)"),u8e.forEach(t),i3o=i(O),X_=n(O,"LI",{});var p8e=s(X_);gde=n(p8e,"STRONG",{});var snt=s(gde);d3o=r(snt,"xlm-roberta"),snt.forEach(t),c3o=r(p8e," \u2014 "),uj=n(p8e,"A",{href:!0});var lnt=s(uj);m3o=r(lnt,"XLMRobertaForMaskedLM"),lnt.forEach(t),f3o=r(p8e," (XLM-RoBERTa model)"),p8e.forEach(t),g3o=i(O),z_=n(O,"LI",{});var _8e=s(z_);hde=n(_8e,"STRONG",{});var int=s(hde);h3o=r(int,"xlm-roberta-xl"),int.forEach(t),u3o=r(_8e," \u2014 "),pj=n(_8e,"A",{href:!0});var dnt=s(pj);p3o=r(dnt,"XLMRobertaXLForMaskedLM"),dnt.forEach(t),_3o=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),b3o=i(O),W_=n(O,"LI",{});var b8e=s(W_);ude=n(b8e,"STRONG",{});var cnt=s(ude);v3o=r(cnt,"xlnet"),cnt.forEach(t),F3o=r(b8e," \u2014 "),_j=n(b8e,"A",{href:!0});var mnt=s(_j);T3o=r(mnt,"XLNetLMHeadModel"),mnt.forEach(t),M3o=r(b8e," (XLNet model)"),b8e.forEach(t),O.forEach(t),E3o=i(ra),Q_=n(ra,"P",{});var v8e=s(Q_);C3o=r(v8e,"The model is set in evaluation mode by default using "),pde=n(v8e,"CODE",{});var fnt=s(pde);w3o=r(fnt,"model.eval()"),fnt.forEach(t),A3o=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(v8e,"CODE",{});var gnt=s(_de);y3o=r(gnt,"model.train()"),gnt.forEach(t),v8e.forEach(t),L3o=i(ra),T(H_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),uNe=i(m),ki=n(m,"H2",{class:!0});var vDe=s(ki);U_=n(vDe,"A",{id:!0,class:!0,href:!0});var hnt=s(U_);bde=n(hnt,"SPAN",{});var unt=s(bde);T(dL.$$.fragment,unt),unt.forEach(t),hnt.forEach(t),x3o=i(vDe),vde=n(vDe,"SPAN",{});var pnt=s(vde);$3o=r(pnt,"AutoModelForCausalLM"),pnt.forEach(t),vDe.forEach(t),pNe=i(m),$o=n(m,"DIV",{class:!0});var Vs=s($o);T(cL.$$.fragment,Vs),k3o=i(Vs),Si=n(Vs,"P",{});var vZ=s(Si);S3o=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bj=n(vZ,"A",{href:!0});var _nt=s(bj);R3o=r(_nt,"from_pretrained()"),_nt.forEach(t),P3o=r(vZ," class method or the "),vj=n(vZ,"A",{href:!0});var bnt=s(vj);B3o=r(bnt,"from_config()"),bnt.forEach(t),I3o=r(vZ,` class
method.`),vZ.forEach(t),q3o=i(Vs),mL=n(Vs,"P",{});var FDe=s(mL);N3o=r(FDe,"This class cannot be instantiated directly using "),Fde=n(FDe,"CODE",{});var vnt=s(Fde);j3o=r(vnt,"__init__()"),vnt.forEach(t),D3o=r(FDe," (throws an error)."),FDe.forEach(t),G3o=i(Vs),nt=n(Vs,"DIV",{class:!0});var BA=s(nt);T(fL.$$.fragment,BA),O3o=i(BA),Tde=n(BA,"P",{});var Fnt=s(Tde);V3o=r(Fnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fnt.forEach(t),X3o=i(BA),Ri=n(BA,"P",{});var FZ=s(Ri);z3o=r(FZ,`Note:
Loading a model from its configuration file does `),Mde=n(FZ,"STRONG",{});var Tnt=s(Mde);W3o=r(Tnt,"not"),Tnt.forEach(t),Q3o=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(FZ,"A",{href:!0});var Mnt=s(Fj);H3o=r(Mnt,"from_pretrained()"),Mnt.forEach(t),U3o=r(FZ," to load the model weights."),FZ.forEach(t),J3o=i(BA),T(J_.$$.fragment,BA),BA.forEach(t),Y3o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(gL.$$.fragment,ta),K3o=i(ta),Ede=n(ta,"P",{});var Ent=s(Ede);Z3o=r(Ent,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ent.forEach(t),ewo=i(ta),$a=n(ta,"P",{});var IA=s($a);owo=r(IA,"The model class to instantiate is selected based on the "),Cde=n(IA,"CODE",{});var Cnt=s(Cde);rwo=r(Cnt,"model_type"),Cnt.forEach(t),two=r(IA,` property of the config object (either
passed as an argument or loaded from `),wde=n(IA,"CODE",{});var wnt=s(wde);awo=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),nwo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=n(IA,"CODE",{});var Ant=s(Ade);swo=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),lwo=r(IA,":"),IA.forEach(t),iwo=i(ta),z=n(ta,"UL",{});var W=s(z);Y_=n(W,"LI",{});var F8e=s(Y_);yde=n(F8e,"STRONG",{});var ynt=s(yde);dwo=r(ynt,"bart"),ynt.forEach(t),cwo=r(F8e," \u2014 "),Tj=n(F8e,"A",{href:!0});var Lnt=s(Tj);mwo=r(Lnt,"BartForCausalLM"),Lnt.forEach(t),fwo=r(F8e," (BART model)"),F8e.forEach(t),gwo=i(W),K_=n(W,"LI",{});var T8e=s(K_);Lde=n(T8e,"STRONG",{});var xnt=s(Lde);hwo=r(xnt,"bert"),xnt.forEach(t),uwo=r(T8e," \u2014 "),Mj=n(T8e,"A",{href:!0});var $nt=s(Mj);pwo=r($nt,"BertLMHeadModel"),$nt.forEach(t),_wo=r(T8e," (BERT model)"),T8e.forEach(t),bwo=i(W),Z_=n(W,"LI",{});var M8e=s(Z_);xde=n(M8e,"STRONG",{});var knt=s(xde);vwo=r(knt,"bert-generation"),knt.forEach(t),Fwo=r(M8e," \u2014 "),Ej=n(M8e,"A",{href:!0});var Snt=s(Ej);Two=r(Snt,"BertGenerationDecoder"),Snt.forEach(t),Mwo=r(M8e," (Bert Generation model)"),M8e.forEach(t),Ewo=i(W),eb=n(W,"LI",{});var E8e=s(eb);$de=n(E8e,"STRONG",{});var Rnt=s($de);Cwo=r(Rnt,"big_bird"),Rnt.forEach(t),wwo=r(E8e," \u2014 "),Cj=n(E8e,"A",{href:!0});var Pnt=s(Cj);Awo=r(Pnt,"BigBirdForCausalLM"),Pnt.forEach(t),ywo=r(E8e," (BigBird model)"),E8e.forEach(t),Lwo=i(W),ob=n(W,"LI",{});var C8e=s(ob);kde=n(C8e,"STRONG",{});var Bnt=s(kde);xwo=r(Bnt,"bigbird_pegasus"),Bnt.forEach(t),$wo=r(C8e," \u2014 "),wj=n(C8e,"A",{href:!0});var Int=s(wj);kwo=r(Int,"BigBirdPegasusForCausalLM"),Int.forEach(t),Swo=r(C8e," (BigBirdPegasus model)"),C8e.forEach(t),Rwo=i(W),rb=n(W,"LI",{});var w8e=s(rb);Sde=n(w8e,"STRONG",{});var qnt=s(Sde);Pwo=r(qnt,"blenderbot"),qnt.forEach(t),Bwo=r(w8e," \u2014 "),Aj=n(w8e,"A",{href:!0});var Nnt=s(Aj);Iwo=r(Nnt,"BlenderbotForCausalLM"),Nnt.forEach(t),qwo=r(w8e," (Blenderbot model)"),w8e.forEach(t),Nwo=i(W),tb=n(W,"LI",{});var A8e=s(tb);Rde=n(A8e,"STRONG",{});var jnt=s(Rde);jwo=r(jnt,"blenderbot-small"),jnt.forEach(t),Dwo=r(A8e," \u2014 "),yj=n(A8e,"A",{href:!0});var Dnt=s(yj);Gwo=r(Dnt,"BlenderbotSmallForCausalLM"),Dnt.forEach(t),Owo=r(A8e," (BlenderbotSmall model)"),A8e.forEach(t),Vwo=i(W),ab=n(W,"LI",{});var y8e=s(ab);Pde=n(y8e,"STRONG",{});var Gnt=s(Pde);Xwo=r(Gnt,"camembert"),Gnt.forEach(t),zwo=r(y8e," \u2014 "),Lj=n(y8e,"A",{href:!0});var Ont=s(Lj);Wwo=r(Ont,"CamembertForCausalLM"),Ont.forEach(t),Qwo=r(y8e," (CamemBERT model)"),y8e.forEach(t),Hwo=i(W),nb=n(W,"LI",{});var L8e=s(nb);Bde=n(L8e,"STRONG",{});var Vnt=s(Bde);Uwo=r(Vnt,"ctrl"),Vnt.forEach(t),Jwo=r(L8e," \u2014 "),xj=n(L8e,"A",{href:!0});var Xnt=s(xj);Ywo=r(Xnt,"CTRLLMHeadModel"),Xnt.forEach(t),Kwo=r(L8e," (CTRL model)"),L8e.forEach(t),Zwo=i(W),sb=n(W,"LI",{});var x8e=s(sb);Ide=n(x8e,"STRONG",{});var znt=s(Ide);e0o=r(znt,"data2vec-text"),znt.forEach(t),o0o=r(x8e," \u2014 "),$j=n(x8e,"A",{href:!0});var Wnt=s($j);r0o=r(Wnt,"Data2VecTextForCausalLM"),Wnt.forEach(t),t0o=r(x8e," (Data2VecText model)"),x8e.forEach(t),a0o=i(W),lb=n(W,"LI",{});var $8e=s(lb);qde=n($8e,"STRONG",{});var Qnt=s(qde);n0o=r(Qnt,"electra"),Qnt.forEach(t),s0o=r($8e," \u2014 "),kj=n($8e,"A",{href:!0});var Hnt=s(kj);l0o=r(Hnt,"ElectraForCausalLM"),Hnt.forEach(t),i0o=r($8e," (ELECTRA model)"),$8e.forEach(t),d0o=i(W),ib=n(W,"LI",{});var k8e=s(ib);Nde=n(k8e,"STRONG",{});var Unt=s(Nde);c0o=r(Unt,"gpt2"),Unt.forEach(t),m0o=r(k8e," \u2014 "),Sj=n(k8e,"A",{href:!0});var Jnt=s(Sj);f0o=r(Jnt,"GPT2LMHeadModel"),Jnt.forEach(t),g0o=r(k8e," (OpenAI GPT-2 model)"),k8e.forEach(t),h0o=i(W),db=n(W,"LI",{});var S8e=s(db);jde=n(S8e,"STRONG",{});var Ynt=s(jde);u0o=r(Ynt,"gpt_neo"),Ynt.forEach(t),p0o=r(S8e," \u2014 "),Rj=n(S8e,"A",{href:!0});var Knt=s(Rj);_0o=r(Knt,"GPTNeoForCausalLM"),Knt.forEach(t),b0o=r(S8e," (GPT Neo model)"),S8e.forEach(t),v0o=i(W),cb=n(W,"LI",{});var R8e=s(cb);Dde=n(R8e,"STRONG",{});var Znt=s(Dde);F0o=r(Znt,"gpt_neox"),Znt.forEach(t),T0o=r(R8e," \u2014 "),Pj=n(R8e,"A",{href:!0});var est=s(Pj);M0o=r(est,"GPTNeoXForCausalLM"),est.forEach(t),E0o=r(R8e," (GPT NeoX model)"),R8e.forEach(t),C0o=i(W),mb=n(W,"LI",{});var P8e=s(mb);Gde=n(P8e,"STRONG",{});var ost=s(Gde);w0o=r(ost,"gptj"),ost.forEach(t),A0o=r(P8e," \u2014 "),Bj=n(P8e,"A",{href:!0});var rst=s(Bj);y0o=r(rst,"GPTJForCausalLM"),rst.forEach(t),L0o=r(P8e," (GPT-J model)"),P8e.forEach(t),x0o=i(W),fb=n(W,"LI",{});var B8e=s(fb);Ode=n(B8e,"STRONG",{});var tst=s(Ode);$0o=r(tst,"marian"),tst.forEach(t),k0o=r(B8e," \u2014 "),Ij=n(B8e,"A",{href:!0});var ast=s(Ij);S0o=r(ast,"MarianForCausalLM"),ast.forEach(t),R0o=r(B8e," (Marian model)"),B8e.forEach(t),P0o=i(W),gb=n(W,"LI",{});var I8e=s(gb);Vde=n(I8e,"STRONG",{});var nst=s(Vde);B0o=r(nst,"mbart"),nst.forEach(t),I0o=r(I8e," \u2014 "),qj=n(I8e,"A",{href:!0});var sst=s(qj);q0o=r(sst,"MBartForCausalLM"),sst.forEach(t),N0o=r(I8e," (mBART model)"),I8e.forEach(t),j0o=i(W),hb=n(W,"LI",{});var q8e=s(hb);Xde=n(q8e,"STRONG",{});var lst=s(Xde);D0o=r(lst,"megatron-bert"),lst.forEach(t),G0o=r(q8e," \u2014 "),Nj=n(q8e,"A",{href:!0});var ist=s(Nj);O0o=r(ist,"MegatronBertForCausalLM"),ist.forEach(t),V0o=r(q8e," (MegatronBert model)"),q8e.forEach(t),X0o=i(W),ub=n(W,"LI",{});var N8e=s(ub);zde=n(N8e,"STRONG",{});var dst=s(zde);z0o=r(dst,"openai-gpt"),dst.forEach(t),W0o=r(N8e," \u2014 "),jj=n(N8e,"A",{href:!0});var cst=s(jj);Q0o=r(cst,"OpenAIGPTLMHeadModel"),cst.forEach(t),H0o=r(N8e," (OpenAI GPT model)"),N8e.forEach(t),U0o=i(W),pb=n(W,"LI",{});var j8e=s(pb);Wde=n(j8e,"STRONG",{});var mst=s(Wde);J0o=r(mst,"opt"),mst.forEach(t),Y0o=r(j8e," \u2014 "),Dj=n(j8e,"A",{href:!0});var fst=s(Dj);K0o=r(fst,"OPTForCausalLM"),fst.forEach(t),Z0o=r(j8e," (OPT model)"),j8e.forEach(t),eAo=i(W),_b=n(W,"LI",{});var D8e=s(_b);Qde=n(D8e,"STRONG",{});var gst=s(Qde);oAo=r(gst,"pegasus"),gst.forEach(t),rAo=r(D8e," \u2014 "),Gj=n(D8e,"A",{href:!0});var hst=s(Gj);tAo=r(hst,"PegasusForCausalLM"),hst.forEach(t),aAo=r(D8e," (Pegasus model)"),D8e.forEach(t),nAo=i(W),bb=n(W,"LI",{});var G8e=s(bb);Hde=n(G8e,"STRONG",{});var ust=s(Hde);sAo=r(ust,"plbart"),ust.forEach(t),lAo=r(G8e," \u2014 "),Oj=n(G8e,"A",{href:!0});var pst=s(Oj);iAo=r(pst,"PLBartForCausalLM"),pst.forEach(t),dAo=r(G8e," (PLBart model)"),G8e.forEach(t),cAo=i(W),vb=n(W,"LI",{});var O8e=s(vb);Ude=n(O8e,"STRONG",{});var _st=s(Ude);mAo=r(_st,"prophetnet"),_st.forEach(t),fAo=r(O8e," \u2014 "),Vj=n(O8e,"A",{href:!0});var bst=s(Vj);gAo=r(bst,"ProphetNetForCausalLM"),bst.forEach(t),hAo=r(O8e," (ProphetNet model)"),O8e.forEach(t),uAo=i(W),Fb=n(W,"LI",{});var V8e=s(Fb);Jde=n(V8e,"STRONG",{});var vst=s(Jde);pAo=r(vst,"qdqbert"),vst.forEach(t),_Ao=r(V8e," \u2014 "),Xj=n(V8e,"A",{href:!0});var Fst=s(Xj);bAo=r(Fst,"QDQBertLMHeadModel"),Fst.forEach(t),vAo=r(V8e," (QDQBert model)"),V8e.forEach(t),FAo=i(W),Tb=n(W,"LI",{});var X8e=s(Tb);Yde=n(X8e,"STRONG",{});var Tst=s(Yde);TAo=r(Tst,"reformer"),Tst.forEach(t),MAo=r(X8e," \u2014 "),zj=n(X8e,"A",{href:!0});var Mst=s(zj);EAo=r(Mst,"ReformerModelWithLMHead"),Mst.forEach(t),CAo=r(X8e," (Reformer model)"),X8e.forEach(t),wAo=i(W),Mb=n(W,"LI",{});var z8e=s(Mb);Kde=n(z8e,"STRONG",{});var Est=s(Kde);AAo=r(Est,"rembert"),Est.forEach(t),yAo=r(z8e," \u2014 "),Wj=n(z8e,"A",{href:!0});var Cst=s(Wj);LAo=r(Cst,"RemBertForCausalLM"),Cst.forEach(t),xAo=r(z8e," (RemBERT model)"),z8e.forEach(t),$Ao=i(W),Eb=n(W,"LI",{});var W8e=s(Eb);Zde=n(W8e,"STRONG",{});var wst=s(Zde);kAo=r(wst,"roberta"),wst.forEach(t),SAo=r(W8e," \u2014 "),Qj=n(W8e,"A",{href:!0});var Ast=s(Qj);RAo=r(Ast,"RobertaForCausalLM"),Ast.forEach(t),PAo=r(W8e," (RoBERTa model)"),W8e.forEach(t),BAo=i(W),Cb=n(W,"LI",{});var Q8e=s(Cb);ece=n(Q8e,"STRONG",{});var yst=s(ece);IAo=r(yst,"roformer"),yst.forEach(t),qAo=r(Q8e," \u2014 "),Hj=n(Q8e,"A",{href:!0});var Lst=s(Hj);NAo=r(Lst,"RoFormerForCausalLM"),Lst.forEach(t),jAo=r(Q8e," (RoFormer model)"),Q8e.forEach(t),DAo=i(W),wb=n(W,"LI",{});var H8e=s(wb);oce=n(H8e,"STRONG",{});var xst=s(oce);GAo=r(xst,"speech_to_text_2"),xst.forEach(t),OAo=r(H8e," \u2014 "),Uj=n(H8e,"A",{href:!0});var $st=s(Uj);VAo=r($st,"Speech2Text2ForCausalLM"),$st.forEach(t),XAo=r(H8e," (Speech2Text2 model)"),H8e.forEach(t),zAo=i(W),Ab=n(W,"LI",{});var U8e=s(Ab);rce=n(U8e,"STRONG",{});var kst=s(rce);WAo=r(kst,"transfo-xl"),kst.forEach(t),QAo=r(U8e," \u2014 "),Jj=n(U8e,"A",{href:!0});var Sst=s(Jj);HAo=r(Sst,"TransfoXLLMHeadModel"),Sst.forEach(t),UAo=r(U8e," (Transformer-XL model)"),U8e.forEach(t),JAo=i(W),yb=n(W,"LI",{});var J8e=s(yb);tce=n(J8e,"STRONG",{});var Rst=s(tce);YAo=r(Rst,"trocr"),Rst.forEach(t),KAo=r(J8e," \u2014 "),Yj=n(J8e,"A",{href:!0});var Pst=s(Yj);ZAo=r(Pst,"TrOCRForCausalLM"),Pst.forEach(t),e6o=r(J8e," (TrOCR model)"),J8e.forEach(t),o6o=i(W),Lb=n(W,"LI",{});var Y8e=s(Lb);ace=n(Y8e,"STRONG",{});var Bst=s(ace);r6o=r(Bst,"xglm"),Bst.forEach(t),t6o=r(Y8e," \u2014 "),Kj=n(Y8e,"A",{href:!0});var Ist=s(Kj);a6o=r(Ist,"XGLMForCausalLM"),Ist.forEach(t),n6o=r(Y8e," (XGLM model)"),Y8e.forEach(t),s6o=i(W),xb=n(W,"LI",{});var K8e=s(xb);nce=n(K8e,"STRONG",{});var qst=s(nce);l6o=r(qst,"xlm"),qst.forEach(t),i6o=r(K8e," \u2014 "),Zj=n(K8e,"A",{href:!0});var Nst=s(Zj);d6o=r(Nst,"XLMWithLMHeadModel"),Nst.forEach(t),c6o=r(K8e," (XLM model)"),K8e.forEach(t),m6o=i(W),$b=n(W,"LI",{});var Z8e=s($b);sce=n(Z8e,"STRONG",{});var jst=s(sce);f6o=r(jst,"xlm-prophetnet"),jst.forEach(t),g6o=r(Z8e," \u2014 "),eD=n(Z8e,"A",{href:!0});var Dst=s(eD);h6o=r(Dst,"XLMProphetNetForCausalLM"),Dst.forEach(t),u6o=r(Z8e," (XLMProphetNet model)"),Z8e.forEach(t),p6o=i(W),kb=n(W,"LI",{});var e7e=s(kb);lce=n(e7e,"STRONG",{});var Gst=s(lce);_6o=r(Gst,"xlm-roberta"),Gst.forEach(t),b6o=r(e7e," \u2014 "),oD=n(e7e,"A",{href:!0});var Ost=s(oD);v6o=r(Ost,"XLMRobertaForCausalLM"),Ost.forEach(t),F6o=r(e7e," (XLM-RoBERTa model)"),e7e.forEach(t),T6o=i(W),Sb=n(W,"LI",{});var o7e=s(Sb);ice=n(o7e,"STRONG",{});var Vst=s(ice);M6o=r(Vst,"xlm-roberta-xl"),Vst.forEach(t),E6o=r(o7e," \u2014 "),rD=n(o7e,"A",{href:!0});var Xst=s(rD);C6o=r(Xst,"XLMRobertaXLForCausalLM"),Xst.forEach(t),w6o=r(o7e," (XLM-RoBERTa-XL model)"),o7e.forEach(t),A6o=i(W),Rb=n(W,"LI",{});var r7e=s(Rb);dce=n(r7e,"STRONG",{});var zst=s(dce);y6o=r(zst,"xlnet"),zst.forEach(t),L6o=r(r7e," \u2014 "),tD=n(r7e,"A",{href:!0});var Wst=s(tD);x6o=r(Wst,"XLNetLMHeadModel"),Wst.forEach(t),$6o=r(r7e," (XLNet model)"),r7e.forEach(t),W.forEach(t),k6o=i(ta),Pb=n(ta,"P",{});var t7e=s(Pb);S6o=r(t7e,"The model is set in evaluation mode by default using "),cce=n(t7e,"CODE",{});var Qst=s(cce);R6o=r(Qst,"model.eval()"),Qst.forEach(t),P6o=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=n(t7e,"CODE",{});var Hst=s(mce);B6o=r(Hst,"model.train()"),Hst.forEach(t),t7e.forEach(t),I6o=i(ta),T(Bb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),_Ne=i(m),Pi=n(m,"H2",{class:!0});var TDe=s(Pi);Ib=n(TDe,"A",{id:!0,class:!0,href:!0});var Ust=s(Ib);fce=n(Ust,"SPAN",{});var Jst=s(fce);T(hL.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),q6o=i(TDe),gce=n(TDe,"SPAN",{});var Yst=s(gce);N6o=r(Yst,"AutoModelForMaskedLM"),Yst.forEach(t),TDe.forEach(t),bNe=i(m),ko=n(m,"DIV",{class:!0});var Xs=s(ko);T(uL.$$.fragment,Xs),j6o=i(Xs),Bi=n(Xs,"P",{});var TZ=s(Bi);D6o=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aD=n(TZ,"A",{href:!0});var Kst=s(aD);G6o=r(Kst,"from_pretrained()"),Kst.forEach(t),O6o=r(TZ," class method or the "),nD=n(TZ,"A",{href:!0});var Zst=s(nD);V6o=r(Zst,"from_config()"),Zst.forEach(t),X6o=r(TZ,` class
method.`),TZ.forEach(t),z6o=i(Xs),pL=n(Xs,"P",{});var MDe=s(pL);W6o=r(MDe,"This class cannot be instantiated directly using "),hce=n(MDe,"CODE",{});var elt=s(hce);Q6o=r(elt,"__init__()"),elt.forEach(t),H6o=r(MDe," (throws an error)."),MDe.forEach(t),U6o=i(Xs),st=n(Xs,"DIV",{class:!0});var qA=s(st);T(_L.$$.fragment,qA),J6o=i(qA),uce=n(qA,"P",{});var olt=s(uce);Y6o=r(olt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),olt.forEach(t),K6o=i(qA),Ii=n(qA,"P",{});var MZ=s(Ii);Z6o=r(MZ,`Note:
Loading a model from its configuration file does `),pce=n(MZ,"STRONG",{});var rlt=s(pce);eyo=r(rlt,"not"),rlt.forEach(t),oyo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=n(MZ,"A",{href:!0});var tlt=s(sD);ryo=r(tlt,"from_pretrained()"),tlt.forEach(t),tyo=r(MZ," to load the model weights."),MZ.forEach(t),ayo=i(qA),T(qb.$$.fragment,qA),qA.forEach(t),nyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(bL.$$.fragment,aa),syo=i(aa),_ce=n(aa,"P",{});var alt=s(_ce);lyo=r(alt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),alt.forEach(t),iyo=i(aa),ka=n(aa,"P",{});var NA=s(ka);dyo=r(NA,"The model class to instantiate is selected based on the "),bce=n(NA,"CODE",{});var nlt=s(bce);cyo=r(nlt,"model_type"),nlt.forEach(t),myo=r(NA,` property of the config object (either
passed as an argument or loaded from `),vce=n(NA,"CODE",{});var slt=s(vce);fyo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),gyo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(NA,"CODE",{});var llt=s(Fce);hyo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),uyo=r(NA,":"),NA.forEach(t),pyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);Nb=n(U,"LI",{});var a7e=s(Nb);Tce=n(a7e,"STRONG",{});var ilt=s(Tce);_yo=r(ilt,"albert"),ilt.forEach(t),byo=r(a7e," \u2014 "),lD=n(a7e,"A",{href:!0});var dlt=s(lD);vyo=r(dlt,"AlbertForMaskedLM"),dlt.forEach(t),Fyo=r(a7e," (ALBERT model)"),a7e.forEach(t),Tyo=i(U),jb=n(U,"LI",{});var n7e=s(jb);Mce=n(n7e,"STRONG",{});var clt=s(Mce);Myo=r(clt,"bart"),clt.forEach(t),Eyo=r(n7e," \u2014 "),iD=n(n7e,"A",{href:!0});var mlt=s(iD);Cyo=r(mlt,"BartForConditionalGeneration"),mlt.forEach(t),wyo=r(n7e," (BART model)"),n7e.forEach(t),Ayo=i(U),Db=n(U,"LI",{});var s7e=s(Db);Ece=n(s7e,"STRONG",{});var flt=s(Ece);yyo=r(flt,"bert"),flt.forEach(t),Lyo=r(s7e," \u2014 "),dD=n(s7e,"A",{href:!0});var glt=s(dD);xyo=r(glt,"BertForMaskedLM"),glt.forEach(t),$yo=r(s7e," (BERT model)"),s7e.forEach(t),kyo=i(U),Gb=n(U,"LI",{});var l7e=s(Gb);Cce=n(l7e,"STRONG",{});var hlt=s(Cce);Syo=r(hlt,"big_bird"),hlt.forEach(t),Ryo=r(l7e," \u2014 "),cD=n(l7e,"A",{href:!0});var ult=s(cD);Pyo=r(ult,"BigBirdForMaskedLM"),ult.forEach(t),Byo=r(l7e," (BigBird model)"),l7e.forEach(t),Iyo=i(U),Ob=n(U,"LI",{});var i7e=s(Ob);wce=n(i7e,"STRONG",{});var plt=s(wce);qyo=r(plt,"camembert"),plt.forEach(t),Nyo=r(i7e," \u2014 "),mD=n(i7e,"A",{href:!0});var _lt=s(mD);jyo=r(_lt,"CamembertForMaskedLM"),_lt.forEach(t),Dyo=r(i7e," (CamemBERT model)"),i7e.forEach(t),Gyo=i(U),Vb=n(U,"LI",{});var d7e=s(Vb);Ace=n(d7e,"STRONG",{});var blt=s(Ace);Oyo=r(blt,"convbert"),blt.forEach(t),Vyo=r(d7e," \u2014 "),fD=n(d7e,"A",{href:!0});var vlt=s(fD);Xyo=r(vlt,"ConvBertForMaskedLM"),vlt.forEach(t),zyo=r(d7e," (ConvBERT model)"),d7e.forEach(t),Wyo=i(U),Xb=n(U,"LI",{});var c7e=s(Xb);yce=n(c7e,"STRONG",{});var Flt=s(yce);Qyo=r(Flt,"data2vec-text"),Flt.forEach(t),Hyo=r(c7e," \u2014 "),gD=n(c7e,"A",{href:!0});var Tlt=s(gD);Uyo=r(Tlt,"Data2VecTextForMaskedLM"),Tlt.forEach(t),Jyo=r(c7e," (Data2VecText model)"),c7e.forEach(t),Yyo=i(U),zb=n(U,"LI",{});var m7e=s(zb);Lce=n(m7e,"STRONG",{});var Mlt=s(Lce);Kyo=r(Mlt,"deberta"),Mlt.forEach(t),Zyo=r(m7e," \u2014 "),hD=n(m7e,"A",{href:!0});var Elt=s(hD);eLo=r(Elt,"DebertaForMaskedLM"),Elt.forEach(t),oLo=r(m7e," (DeBERTa model)"),m7e.forEach(t),rLo=i(U),Wb=n(U,"LI",{});var f7e=s(Wb);xce=n(f7e,"STRONG",{});var Clt=s(xce);tLo=r(Clt,"deberta-v2"),Clt.forEach(t),aLo=r(f7e," \u2014 "),uD=n(f7e,"A",{href:!0});var wlt=s(uD);nLo=r(wlt,"DebertaV2ForMaskedLM"),wlt.forEach(t),sLo=r(f7e," (DeBERTa-v2 model)"),f7e.forEach(t),lLo=i(U),Qb=n(U,"LI",{});var g7e=s(Qb);$ce=n(g7e,"STRONG",{});var Alt=s($ce);iLo=r(Alt,"distilbert"),Alt.forEach(t),dLo=r(g7e," \u2014 "),pD=n(g7e,"A",{href:!0});var ylt=s(pD);cLo=r(ylt,"DistilBertForMaskedLM"),ylt.forEach(t),mLo=r(g7e," (DistilBERT model)"),g7e.forEach(t),fLo=i(U),Hb=n(U,"LI",{});var h7e=s(Hb);kce=n(h7e,"STRONG",{});var Llt=s(kce);gLo=r(Llt,"electra"),Llt.forEach(t),hLo=r(h7e," \u2014 "),_D=n(h7e,"A",{href:!0});var xlt=s(_D);uLo=r(xlt,"ElectraForMaskedLM"),xlt.forEach(t),pLo=r(h7e," (ELECTRA model)"),h7e.forEach(t),_Lo=i(U),Ub=n(U,"LI",{});var u7e=s(Ub);Sce=n(u7e,"STRONG",{});var $lt=s(Sce);bLo=r($lt,"flaubert"),$lt.forEach(t),vLo=r(u7e," \u2014 "),bD=n(u7e,"A",{href:!0});var klt=s(bD);FLo=r(klt,"FlaubertWithLMHeadModel"),klt.forEach(t),TLo=r(u7e," (FlauBERT model)"),u7e.forEach(t),MLo=i(U),Jb=n(U,"LI",{});var p7e=s(Jb);Rce=n(p7e,"STRONG",{});var Slt=s(Rce);ELo=r(Slt,"fnet"),Slt.forEach(t),CLo=r(p7e," \u2014 "),vD=n(p7e,"A",{href:!0});var Rlt=s(vD);wLo=r(Rlt,"FNetForMaskedLM"),Rlt.forEach(t),ALo=r(p7e," (FNet model)"),p7e.forEach(t),yLo=i(U),Yb=n(U,"LI",{});var _7e=s(Yb);Pce=n(_7e,"STRONG",{});var Plt=s(Pce);LLo=r(Plt,"funnel"),Plt.forEach(t),xLo=r(_7e," \u2014 "),FD=n(_7e,"A",{href:!0});var Blt=s(FD);$Lo=r(Blt,"FunnelForMaskedLM"),Blt.forEach(t),kLo=r(_7e," (Funnel Transformer model)"),_7e.forEach(t),SLo=i(U),Kb=n(U,"LI",{});var b7e=s(Kb);Bce=n(b7e,"STRONG",{});var Ilt=s(Bce);RLo=r(Ilt,"ibert"),Ilt.forEach(t),PLo=r(b7e," \u2014 "),TD=n(b7e,"A",{href:!0});var qlt=s(TD);BLo=r(qlt,"IBertForMaskedLM"),qlt.forEach(t),ILo=r(b7e," (I-BERT model)"),b7e.forEach(t),qLo=i(U),Zb=n(U,"LI",{});var v7e=s(Zb);Ice=n(v7e,"STRONG",{});var Nlt=s(Ice);NLo=r(Nlt,"layoutlm"),Nlt.forEach(t),jLo=r(v7e," \u2014 "),MD=n(v7e,"A",{href:!0});var jlt=s(MD);DLo=r(jlt,"LayoutLMForMaskedLM"),jlt.forEach(t),GLo=r(v7e," (LayoutLM model)"),v7e.forEach(t),OLo=i(U),e2=n(U,"LI",{});var F7e=s(e2);qce=n(F7e,"STRONG",{});var Dlt=s(qce);VLo=r(Dlt,"longformer"),Dlt.forEach(t),XLo=r(F7e," \u2014 "),ED=n(F7e,"A",{href:!0});var Glt=s(ED);zLo=r(Glt,"LongformerForMaskedLM"),Glt.forEach(t),WLo=r(F7e," (Longformer model)"),F7e.forEach(t),QLo=i(U),o2=n(U,"LI",{});var T7e=s(o2);Nce=n(T7e,"STRONG",{});var Olt=s(Nce);HLo=r(Olt,"mbart"),Olt.forEach(t),ULo=r(T7e," \u2014 "),CD=n(T7e,"A",{href:!0});var Vlt=s(CD);JLo=r(Vlt,"MBartForConditionalGeneration"),Vlt.forEach(t),YLo=r(T7e," (mBART model)"),T7e.forEach(t),KLo=i(U),r2=n(U,"LI",{});var M7e=s(r2);jce=n(M7e,"STRONG",{});var Xlt=s(jce);ZLo=r(Xlt,"megatron-bert"),Xlt.forEach(t),e8o=r(M7e," \u2014 "),wD=n(M7e,"A",{href:!0});var zlt=s(wD);o8o=r(zlt,"MegatronBertForMaskedLM"),zlt.forEach(t),r8o=r(M7e," (MegatronBert model)"),M7e.forEach(t),t8o=i(U),t2=n(U,"LI",{});var E7e=s(t2);Dce=n(E7e,"STRONG",{});var Wlt=s(Dce);a8o=r(Wlt,"mobilebert"),Wlt.forEach(t),n8o=r(E7e," \u2014 "),AD=n(E7e,"A",{href:!0});var Qlt=s(AD);s8o=r(Qlt,"MobileBertForMaskedLM"),Qlt.forEach(t),l8o=r(E7e," (MobileBERT model)"),E7e.forEach(t),i8o=i(U),a2=n(U,"LI",{});var C7e=s(a2);Gce=n(C7e,"STRONG",{});var Hlt=s(Gce);d8o=r(Hlt,"mpnet"),Hlt.forEach(t),c8o=r(C7e," \u2014 "),yD=n(C7e,"A",{href:!0});var Ult=s(yD);m8o=r(Ult,"MPNetForMaskedLM"),Ult.forEach(t),f8o=r(C7e," (MPNet model)"),C7e.forEach(t),g8o=i(U),n2=n(U,"LI",{});var w7e=s(n2);Oce=n(w7e,"STRONG",{});var Jlt=s(Oce);h8o=r(Jlt,"nystromformer"),Jlt.forEach(t),u8o=r(w7e," \u2014 "),LD=n(w7e,"A",{href:!0});var Ylt=s(LD);p8o=r(Ylt,"NystromformerForMaskedLM"),Ylt.forEach(t),_8o=r(w7e," (Nystromformer model)"),w7e.forEach(t),b8o=i(U),s2=n(U,"LI",{});var A7e=s(s2);Vce=n(A7e,"STRONG",{});var Klt=s(Vce);v8o=r(Klt,"perceiver"),Klt.forEach(t),F8o=r(A7e," \u2014 "),xD=n(A7e,"A",{href:!0});var Zlt=s(xD);T8o=r(Zlt,"PerceiverForMaskedLM"),Zlt.forEach(t),M8o=r(A7e," (Perceiver model)"),A7e.forEach(t),E8o=i(U),l2=n(U,"LI",{});var y7e=s(l2);Xce=n(y7e,"STRONG",{});var eit=s(Xce);C8o=r(eit,"qdqbert"),eit.forEach(t),w8o=r(y7e," \u2014 "),$D=n(y7e,"A",{href:!0});var oit=s($D);A8o=r(oit,"QDQBertForMaskedLM"),oit.forEach(t),y8o=r(y7e," (QDQBert model)"),y7e.forEach(t),L8o=i(U),i2=n(U,"LI",{});var L7e=s(i2);zce=n(L7e,"STRONG",{});var rit=s(zce);x8o=r(rit,"reformer"),rit.forEach(t),$8o=r(L7e," \u2014 "),kD=n(L7e,"A",{href:!0});var tit=s(kD);k8o=r(tit,"ReformerForMaskedLM"),tit.forEach(t),S8o=r(L7e," (Reformer model)"),L7e.forEach(t),R8o=i(U),d2=n(U,"LI",{});var x7e=s(d2);Wce=n(x7e,"STRONG",{});var ait=s(Wce);P8o=r(ait,"rembert"),ait.forEach(t),B8o=r(x7e," \u2014 "),SD=n(x7e,"A",{href:!0});var nit=s(SD);I8o=r(nit,"RemBertForMaskedLM"),nit.forEach(t),q8o=r(x7e," (RemBERT model)"),x7e.forEach(t),N8o=i(U),c2=n(U,"LI",{});var $7e=s(c2);Qce=n($7e,"STRONG",{});var sit=s(Qce);j8o=r(sit,"roberta"),sit.forEach(t),D8o=r($7e," \u2014 "),RD=n($7e,"A",{href:!0});var lit=s(RD);G8o=r(lit,"RobertaForMaskedLM"),lit.forEach(t),O8o=r($7e," (RoBERTa model)"),$7e.forEach(t),V8o=i(U),m2=n(U,"LI",{});var k7e=s(m2);Hce=n(k7e,"STRONG",{});var iit=s(Hce);X8o=r(iit,"roformer"),iit.forEach(t),z8o=r(k7e," \u2014 "),PD=n(k7e,"A",{href:!0});var dit=s(PD);W8o=r(dit,"RoFormerForMaskedLM"),dit.forEach(t),Q8o=r(k7e," (RoFormer model)"),k7e.forEach(t),H8o=i(U),f2=n(U,"LI",{});var S7e=s(f2);Uce=n(S7e,"STRONG",{});var cit=s(Uce);U8o=r(cit,"squeezebert"),cit.forEach(t),J8o=r(S7e," \u2014 "),BD=n(S7e,"A",{href:!0});var mit=s(BD);Y8o=r(mit,"SqueezeBertForMaskedLM"),mit.forEach(t),K8o=r(S7e," (SqueezeBERT model)"),S7e.forEach(t),Z8o=i(U),g2=n(U,"LI",{});var R7e=s(g2);Jce=n(R7e,"STRONG",{});var fit=s(Jce);e7o=r(fit,"tapas"),fit.forEach(t),o7o=r(R7e," \u2014 "),ID=n(R7e,"A",{href:!0});var git=s(ID);r7o=r(git,"TapasForMaskedLM"),git.forEach(t),t7o=r(R7e," (TAPAS model)"),R7e.forEach(t),a7o=i(U),h2=n(U,"LI",{});var P7e=s(h2);Yce=n(P7e,"STRONG",{});var hit=s(Yce);n7o=r(hit,"wav2vec2"),hit.forEach(t),s7o=r(P7e," \u2014 "),Kce=n(P7e,"CODE",{});var uit=s(Kce);l7o=r(uit,"Wav2Vec2ForMaskedLM"),uit.forEach(t),i7o=r(P7e," (Wav2Vec2 model)"),P7e.forEach(t),d7o=i(U),u2=n(U,"LI",{});var B7e=s(u2);Zce=n(B7e,"STRONG",{});var pit=s(Zce);c7o=r(pit,"xlm"),pit.forEach(t),m7o=r(B7e," \u2014 "),qD=n(B7e,"A",{href:!0});var _it=s(qD);f7o=r(_it,"XLMWithLMHeadModel"),_it.forEach(t),g7o=r(B7e," (XLM model)"),B7e.forEach(t),h7o=i(U),p2=n(U,"LI",{});var I7e=s(p2);eme=n(I7e,"STRONG",{});var bit=s(eme);u7o=r(bit,"xlm-roberta"),bit.forEach(t),p7o=r(I7e," \u2014 "),ND=n(I7e,"A",{href:!0});var vit=s(ND);_7o=r(vit,"XLMRobertaForMaskedLM"),vit.forEach(t),b7o=r(I7e," (XLM-RoBERTa model)"),I7e.forEach(t),v7o=i(U),_2=n(U,"LI",{});var q7e=s(_2);ome=n(q7e,"STRONG",{});var Fit=s(ome);F7o=r(Fit,"xlm-roberta-xl"),Fit.forEach(t),T7o=r(q7e," \u2014 "),jD=n(q7e,"A",{href:!0});var Tit=s(jD);M7o=r(Tit,"XLMRobertaXLForMaskedLM"),Tit.forEach(t),E7o=r(q7e," (XLM-RoBERTa-XL model)"),q7e.forEach(t),C7o=i(U),b2=n(U,"LI",{});var N7e=s(b2);rme=n(N7e,"STRONG",{});var Mit=s(rme);w7o=r(Mit,"yoso"),Mit.forEach(t),A7o=r(N7e," \u2014 "),DD=n(N7e,"A",{href:!0});var Eit=s(DD);y7o=r(Eit,"YosoForMaskedLM"),Eit.forEach(t),L7o=r(N7e," (YOSO model)"),N7e.forEach(t),U.forEach(t),x7o=i(aa),v2=n(aa,"P",{});var j7e=s(v2);$7o=r(j7e,"The model is set in evaluation mode by default using "),tme=n(j7e,"CODE",{});var Cit=s(tme);k7o=r(Cit,"model.eval()"),Cit.forEach(t),S7o=r(j7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(j7e,"CODE",{});var wit=s(ame);R7o=r(wit,"model.train()"),wit.forEach(t),j7e.forEach(t),P7o=i(aa),T(F2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),vNe=i(m),qi=n(m,"H2",{class:!0});var EDe=s(qi);T2=n(EDe,"A",{id:!0,class:!0,href:!0});var Ait=s(T2);nme=n(Ait,"SPAN",{});var yit=s(nme);T(vL.$$.fragment,yit),yit.forEach(t),Ait.forEach(t),B7o=i(EDe),sme=n(EDe,"SPAN",{});var Lit=s(sme);I7o=r(Lit,"AutoModelForSeq2SeqLM"),Lit.forEach(t),EDe.forEach(t),FNe=i(m),So=n(m,"DIV",{class:!0});var zs=s(So);T(FL.$$.fragment,zs),q7o=i(zs),Ni=n(zs,"P",{});var EZ=s(Ni);N7o=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GD=n(EZ,"A",{href:!0});var xit=s(GD);j7o=r(xit,"from_pretrained()"),xit.forEach(t),D7o=r(EZ," class method or the "),OD=n(EZ,"A",{href:!0});var $it=s(OD);G7o=r($it,"from_config()"),$it.forEach(t),O7o=r(EZ,` class
method.`),EZ.forEach(t),V7o=i(zs),TL=n(zs,"P",{});var CDe=s(TL);X7o=r(CDe,"This class cannot be instantiated directly using "),lme=n(CDe,"CODE",{});var kit=s(lme);z7o=r(kit,"__init__()"),kit.forEach(t),W7o=r(CDe," (throws an error)."),CDe.forEach(t),Q7o=i(zs),lt=n(zs,"DIV",{class:!0});var jA=s(lt);T(ML.$$.fragment,jA),H7o=i(jA),ime=n(jA,"P",{});var Sit=s(ime);U7o=r(Sit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sit.forEach(t),J7o=i(jA),ji=n(jA,"P",{});var CZ=s(ji);Y7o=r(CZ,`Note:
Loading a model from its configuration file does `),dme=n(CZ,"STRONG",{});var Rit=s(dme);K7o=r(Rit,"not"),Rit.forEach(t),Z7o=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(CZ,"A",{href:!0});var Pit=s(VD);e9o=r(Pit,"from_pretrained()"),Pit.forEach(t),o9o=r(CZ," to load the model weights."),CZ.forEach(t),r9o=i(jA),T(M2.$$.fragment,jA),jA.forEach(t),t9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(EL.$$.fragment,na),a9o=i(na),cme=n(na,"P",{});var Bit=s(cme);n9o=r(Bit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bit.forEach(t),s9o=i(na),Sa=n(na,"P",{});var DA=s(Sa);l9o=r(DA,"The model class to instantiate is selected based on the "),mme=n(DA,"CODE",{});var Iit=s(mme);i9o=r(Iit,"model_type"),Iit.forEach(t),d9o=r(DA,` property of the config object (either
passed as an argument or loaded from `),fme=n(DA,"CODE",{});var qit=s(fme);c9o=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),m9o=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(DA,"CODE",{});var Nit=s(gme);f9o=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),g9o=r(DA,":"),DA.forEach(t),h9o=i(na),pe=n(na,"UL",{});var ve=s(pe);E2=n(ve,"LI",{});var D7e=s(E2);hme=n(D7e,"STRONG",{});var jit=s(hme);u9o=r(jit,"bart"),jit.forEach(t),p9o=r(D7e," \u2014 "),XD=n(D7e,"A",{href:!0});var Dit=s(XD);_9o=r(Dit,"BartForConditionalGeneration"),Dit.forEach(t),b9o=r(D7e," (BART model)"),D7e.forEach(t),v9o=i(ve),C2=n(ve,"LI",{});var G7e=s(C2);ume=n(G7e,"STRONG",{});var Git=s(ume);F9o=r(Git,"bigbird_pegasus"),Git.forEach(t),T9o=r(G7e," \u2014 "),zD=n(G7e,"A",{href:!0});var Oit=s(zD);M9o=r(Oit,"BigBirdPegasusForConditionalGeneration"),Oit.forEach(t),E9o=r(G7e," (BigBirdPegasus model)"),G7e.forEach(t),C9o=i(ve),w2=n(ve,"LI",{});var O7e=s(w2);pme=n(O7e,"STRONG",{});var Vit=s(pme);w9o=r(Vit,"blenderbot"),Vit.forEach(t),A9o=r(O7e," \u2014 "),WD=n(O7e,"A",{href:!0});var Xit=s(WD);y9o=r(Xit,"BlenderbotForConditionalGeneration"),Xit.forEach(t),L9o=r(O7e," (Blenderbot model)"),O7e.forEach(t),x9o=i(ve),A2=n(ve,"LI",{});var V7e=s(A2);_me=n(V7e,"STRONG",{});var zit=s(_me);$9o=r(zit,"blenderbot-small"),zit.forEach(t),k9o=r(V7e," \u2014 "),QD=n(V7e,"A",{href:!0});var Wit=s(QD);S9o=r(Wit,"BlenderbotSmallForConditionalGeneration"),Wit.forEach(t),R9o=r(V7e," (BlenderbotSmall model)"),V7e.forEach(t),P9o=i(ve),y2=n(ve,"LI",{});var X7e=s(y2);bme=n(X7e,"STRONG",{});var Qit=s(bme);B9o=r(Qit,"encoder-decoder"),Qit.forEach(t),I9o=r(X7e," \u2014 "),HD=n(X7e,"A",{href:!0});var Hit=s(HD);q9o=r(Hit,"EncoderDecoderModel"),Hit.forEach(t),N9o=r(X7e," (Encoder decoder model)"),X7e.forEach(t),j9o=i(ve),L2=n(ve,"LI",{});var z7e=s(L2);vme=n(z7e,"STRONG",{});var Uit=s(vme);D9o=r(Uit,"fsmt"),Uit.forEach(t),G9o=r(z7e," \u2014 "),UD=n(z7e,"A",{href:!0});var Jit=s(UD);O9o=r(Jit,"FSMTForConditionalGeneration"),Jit.forEach(t),V9o=r(z7e," (FairSeq Machine-Translation model)"),z7e.forEach(t),X9o=i(ve),x2=n(ve,"LI",{});var W7e=s(x2);Fme=n(W7e,"STRONG",{});var Yit=s(Fme);z9o=r(Yit,"led"),Yit.forEach(t),W9o=r(W7e," \u2014 "),JD=n(W7e,"A",{href:!0});var Kit=s(JD);Q9o=r(Kit,"LEDForConditionalGeneration"),Kit.forEach(t),H9o=r(W7e," (LED model)"),W7e.forEach(t),U9o=i(ve),$2=n(ve,"LI",{});var Q7e=s($2);Tme=n(Q7e,"STRONG",{});var Zit=s(Tme);J9o=r(Zit,"m2m_100"),Zit.forEach(t),Y9o=r(Q7e," \u2014 "),YD=n(Q7e,"A",{href:!0});var edt=s(YD);K9o=r(edt,"M2M100ForConditionalGeneration"),edt.forEach(t),Z9o=r(Q7e," (M2M100 model)"),Q7e.forEach(t),exo=i(ve),k2=n(ve,"LI",{});var H7e=s(k2);Mme=n(H7e,"STRONG",{});var odt=s(Mme);oxo=r(odt,"marian"),odt.forEach(t),rxo=r(H7e," \u2014 "),KD=n(H7e,"A",{href:!0});var rdt=s(KD);txo=r(rdt,"MarianMTModel"),rdt.forEach(t),axo=r(H7e," (Marian model)"),H7e.forEach(t),nxo=i(ve),S2=n(ve,"LI",{});var U7e=s(S2);Eme=n(U7e,"STRONG",{});var tdt=s(Eme);sxo=r(tdt,"mbart"),tdt.forEach(t),lxo=r(U7e," \u2014 "),ZD=n(U7e,"A",{href:!0});var adt=s(ZD);ixo=r(adt,"MBartForConditionalGeneration"),adt.forEach(t),dxo=r(U7e," (mBART model)"),U7e.forEach(t),cxo=i(ve),R2=n(ve,"LI",{});var J7e=s(R2);Cme=n(J7e,"STRONG",{});var ndt=s(Cme);mxo=r(ndt,"mt5"),ndt.forEach(t),fxo=r(J7e," \u2014 "),eG=n(J7e,"A",{href:!0});var sdt=s(eG);gxo=r(sdt,"MT5ForConditionalGeneration"),sdt.forEach(t),hxo=r(J7e," (mT5 model)"),J7e.forEach(t),uxo=i(ve),P2=n(ve,"LI",{});var Y7e=s(P2);wme=n(Y7e,"STRONG",{});var ldt=s(wme);pxo=r(ldt,"pegasus"),ldt.forEach(t),_xo=r(Y7e," \u2014 "),oG=n(Y7e,"A",{href:!0});var idt=s(oG);bxo=r(idt,"PegasusForConditionalGeneration"),idt.forEach(t),vxo=r(Y7e," (Pegasus model)"),Y7e.forEach(t),Fxo=i(ve),B2=n(ve,"LI",{});var K7e=s(B2);Ame=n(K7e,"STRONG",{});var ddt=s(Ame);Txo=r(ddt,"plbart"),ddt.forEach(t),Mxo=r(K7e," \u2014 "),rG=n(K7e,"A",{href:!0});var cdt=s(rG);Exo=r(cdt,"PLBartForConditionalGeneration"),cdt.forEach(t),Cxo=r(K7e," (PLBart model)"),K7e.forEach(t),wxo=i(ve),I2=n(ve,"LI",{});var Z7e=s(I2);yme=n(Z7e,"STRONG",{});var mdt=s(yme);Axo=r(mdt,"prophetnet"),mdt.forEach(t),yxo=r(Z7e," \u2014 "),tG=n(Z7e,"A",{href:!0});var fdt=s(tG);Lxo=r(fdt,"ProphetNetForConditionalGeneration"),fdt.forEach(t),xxo=r(Z7e," (ProphetNet model)"),Z7e.forEach(t),$xo=i(ve),q2=n(ve,"LI",{});var e9e=s(q2);Lme=n(e9e,"STRONG",{});var gdt=s(Lme);kxo=r(gdt,"t5"),gdt.forEach(t),Sxo=r(e9e," \u2014 "),aG=n(e9e,"A",{href:!0});var hdt=s(aG);Rxo=r(hdt,"T5ForConditionalGeneration"),hdt.forEach(t),Pxo=r(e9e," (T5 model)"),e9e.forEach(t),Bxo=i(ve),N2=n(ve,"LI",{});var o9e=s(N2);xme=n(o9e,"STRONG",{});var udt=s(xme);Ixo=r(udt,"xlm-prophetnet"),udt.forEach(t),qxo=r(o9e," \u2014 "),nG=n(o9e,"A",{href:!0});var pdt=s(nG);Nxo=r(pdt,"XLMProphetNetForConditionalGeneration"),pdt.forEach(t),jxo=r(o9e," (XLMProphetNet model)"),o9e.forEach(t),ve.forEach(t),Dxo=i(na),j2=n(na,"P",{});var r9e=s(j2);Gxo=r(r9e,"The model is set in evaluation mode by default using "),$me=n(r9e,"CODE",{});var _dt=s($me);Oxo=r(_dt,"model.eval()"),_dt.forEach(t),Vxo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(r9e,"CODE",{});var bdt=s(kme);Xxo=r(bdt,"model.train()"),bdt.forEach(t),r9e.forEach(t),zxo=i(na),T(D2.$$.fragment,na),na.forEach(t),zs.forEach(t),TNe=i(m),Di=n(m,"H2",{class:!0});var wDe=s(Di);G2=n(wDe,"A",{id:!0,class:!0,href:!0});var vdt=s(G2);Sme=n(vdt,"SPAN",{});var Fdt=s(Sme);T(CL.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),Wxo=i(wDe),Rme=n(wDe,"SPAN",{});var Tdt=s(Rme);Qxo=r(Tdt,"AutoModelForSequenceClassification"),Tdt.forEach(t),wDe.forEach(t),MNe=i(m),Ro=n(m,"DIV",{class:!0});var Ws=s(Ro);T(wL.$$.fragment,Ws),Hxo=i(Ws),Gi=n(Ws,"P",{});var wZ=s(Gi);Uxo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sG=n(wZ,"A",{href:!0});var Mdt=s(sG);Jxo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),Yxo=r(wZ," class method or the "),lG=n(wZ,"A",{href:!0});var Edt=s(lG);Kxo=r(Edt,"from_config()"),Edt.forEach(t),Zxo=r(wZ,` class
method.`),wZ.forEach(t),e$o=i(Ws),AL=n(Ws,"P",{});var ADe=s(AL);o$o=r(ADe,"This class cannot be instantiated directly using "),Pme=n(ADe,"CODE",{});var Cdt=s(Pme);r$o=r(Cdt,"__init__()"),Cdt.forEach(t),t$o=r(ADe," (throws an error)."),ADe.forEach(t),a$o=i(Ws),it=n(Ws,"DIV",{class:!0});var GA=s(it);T(yL.$$.fragment,GA),n$o=i(GA),Bme=n(GA,"P",{});var wdt=s(Bme);s$o=r(wdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wdt.forEach(t),l$o=i(GA),Oi=n(GA,"P",{});var AZ=s(Oi);i$o=r(AZ,`Note:
Loading a model from its configuration file does `),Ime=n(AZ,"STRONG",{});var Adt=s(Ime);d$o=r(Adt,"not"),Adt.forEach(t),c$o=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(AZ,"A",{href:!0});var ydt=s(iG);m$o=r(ydt,"from_pretrained()"),ydt.forEach(t),f$o=r(AZ," to load the model weights."),AZ.forEach(t),g$o=i(GA),T(O2.$$.fragment,GA),GA.forEach(t),h$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(LL.$$.fragment,sa),u$o=i(sa),qme=n(sa,"P",{});var Ldt=s(qme);p$o=r(Ldt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ldt.forEach(t),_$o=i(sa),Ra=n(sa,"P",{});var OA=s(Ra);b$o=r(OA,"The model class to instantiate is selected based on the "),Nme=n(OA,"CODE",{});var xdt=s(Nme);v$o=r(xdt,"model_type"),xdt.forEach(t),F$o=r(OA,` property of the config object (either
passed as an argument or loaded from `),jme=n(OA,"CODE",{});var $dt=s(jme);T$o=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),M$o=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(OA,"CODE",{});var kdt=s(Dme);E$o=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),C$o=r(OA,":"),OA.forEach(t),w$o=i(sa),q=n(sa,"UL",{});var j=s(q);V2=n(j,"LI",{});var t9e=s(V2);Gme=n(t9e,"STRONG",{});var Sdt=s(Gme);A$o=r(Sdt,"albert"),Sdt.forEach(t),y$o=r(t9e," \u2014 "),dG=n(t9e,"A",{href:!0});var Rdt=s(dG);L$o=r(Rdt,"AlbertForSequenceClassification"),Rdt.forEach(t),x$o=r(t9e," (ALBERT model)"),t9e.forEach(t),$$o=i(j),X2=n(j,"LI",{});var a9e=s(X2);Ome=n(a9e,"STRONG",{});var Pdt=s(Ome);k$o=r(Pdt,"bart"),Pdt.forEach(t),S$o=r(a9e," \u2014 "),cG=n(a9e,"A",{href:!0});var Bdt=s(cG);R$o=r(Bdt,"BartForSequenceClassification"),Bdt.forEach(t),P$o=r(a9e," (BART model)"),a9e.forEach(t),B$o=i(j),z2=n(j,"LI",{});var n9e=s(z2);Vme=n(n9e,"STRONG",{});var Idt=s(Vme);I$o=r(Idt,"bert"),Idt.forEach(t),q$o=r(n9e," \u2014 "),mG=n(n9e,"A",{href:!0});var qdt=s(mG);N$o=r(qdt,"BertForSequenceClassification"),qdt.forEach(t),j$o=r(n9e," (BERT model)"),n9e.forEach(t),D$o=i(j),W2=n(j,"LI",{});var s9e=s(W2);Xme=n(s9e,"STRONG",{});var Ndt=s(Xme);G$o=r(Ndt,"big_bird"),Ndt.forEach(t),O$o=r(s9e," \u2014 "),fG=n(s9e,"A",{href:!0});var jdt=s(fG);V$o=r(jdt,"BigBirdForSequenceClassification"),jdt.forEach(t),X$o=r(s9e," (BigBird model)"),s9e.forEach(t),z$o=i(j),Q2=n(j,"LI",{});var l9e=s(Q2);zme=n(l9e,"STRONG",{});var Ddt=s(zme);W$o=r(Ddt,"bigbird_pegasus"),Ddt.forEach(t),Q$o=r(l9e," \u2014 "),gG=n(l9e,"A",{href:!0});var Gdt=s(gG);H$o=r(Gdt,"BigBirdPegasusForSequenceClassification"),Gdt.forEach(t),U$o=r(l9e," (BigBirdPegasus model)"),l9e.forEach(t),J$o=i(j),H2=n(j,"LI",{});var i9e=s(H2);Wme=n(i9e,"STRONG",{});var Odt=s(Wme);Y$o=r(Odt,"camembert"),Odt.forEach(t),K$o=r(i9e," \u2014 "),hG=n(i9e,"A",{href:!0});var Vdt=s(hG);Z$o=r(Vdt,"CamembertForSequenceClassification"),Vdt.forEach(t),eko=r(i9e," (CamemBERT model)"),i9e.forEach(t),oko=i(j),U2=n(j,"LI",{});var d9e=s(U2);Qme=n(d9e,"STRONG",{});var Xdt=s(Qme);rko=r(Xdt,"canine"),Xdt.forEach(t),tko=r(d9e," \u2014 "),uG=n(d9e,"A",{href:!0});var zdt=s(uG);ako=r(zdt,"CanineForSequenceClassification"),zdt.forEach(t),nko=r(d9e," (Canine model)"),d9e.forEach(t),sko=i(j),J2=n(j,"LI",{});var c9e=s(J2);Hme=n(c9e,"STRONG",{});var Wdt=s(Hme);lko=r(Wdt,"convbert"),Wdt.forEach(t),iko=r(c9e," \u2014 "),pG=n(c9e,"A",{href:!0});var Qdt=s(pG);dko=r(Qdt,"ConvBertForSequenceClassification"),Qdt.forEach(t),cko=r(c9e," (ConvBERT model)"),c9e.forEach(t),mko=i(j),Y2=n(j,"LI",{});var m9e=s(Y2);Ume=n(m9e,"STRONG",{});var Hdt=s(Ume);fko=r(Hdt,"ctrl"),Hdt.forEach(t),gko=r(m9e," \u2014 "),_G=n(m9e,"A",{href:!0});var Udt=s(_G);hko=r(Udt,"CTRLForSequenceClassification"),Udt.forEach(t),uko=r(m9e," (CTRL model)"),m9e.forEach(t),pko=i(j),K2=n(j,"LI",{});var f9e=s(K2);Jme=n(f9e,"STRONG",{});var Jdt=s(Jme);_ko=r(Jdt,"data2vec-text"),Jdt.forEach(t),bko=r(f9e," \u2014 "),bG=n(f9e,"A",{href:!0});var Ydt=s(bG);vko=r(Ydt,"Data2VecTextForSequenceClassification"),Ydt.forEach(t),Fko=r(f9e," (Data2VecText model)"),f9e.forEach(t),Tko=i(j),Z2=n(j,"LI",{});var g9e=s(Z2);Yme=n(g9e,"STRONG",{});var Kdt=s(Yme);Mko=r(Kdt,"deberta"),Kdt.forEach(t),Eko=r(g9e," \u2014 "),vG=n(g9e,"A",{href:!0});var Zdt=s(vG);Cko=r(Zdt,"DebertaForSequenceClassification"),Zdt.forEach(t),wko=r(g9e," (DeBERTa model)"),g9e.forEach(t),Ako=i(j),ev=n(j,"LI",{});var h9e=s(ev);Kme=n(h9e,"STRONG",{});var ect=s(Kme);yko=r(ect,"deberta-v2"),ect.forEach(t),Lko=r(h9e," \u2014 "),FG=n(h9e,"A",{href:!0});var oct=s(FG);xko=r(oct,"DebertaV2ForSequenceClassification"),oct.forEach(t),$ko=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),kko=i(j),ov=n(j,"LI",{});var u9e=s(ov);Zme=n(u9e,"STRONG",{});var rct=s(Zme);Sko=r(rct,"distilbert"),rct.forEach(t),Rko=r(u9e," \u2014 "),TG=n(u9e,"A",{href:!0});var tct=s(TG);Pko=r(tct,"DistilBertForSequenceClassification"),tct.forEach(t),Bko=r(u9e," (DistilBERT model)"),u9e.forEach(t),Iko=i(j),rv=n(j,"LI",{});var p9e=s(rv);efe=n(p9e,"STRONG",{});var act=s(efe);qko=r(act,"electra"),act.forEach(t),Nko=r(p9e," \u2014 "),MG=n(p9e,"A",{href:!0});var nct=s(MG);jko=r(nct,"ElectraForSequenceClassification"),nct.forEach(t),Dko=r(p9e," (ELECTRA model)"),p9e.forEach(t),Gko=i(j),tv=n(j,"LI",{});var _9e=s(tv);ofe=n(_9e,"STRONG",{});var sct=s(ofe);Oko=r(sct,"flaubert"),sct.forEach(t),Vko=r(_9e," \u2014 "),EG=n(_9e,"A",{href:!0});var lct=s(EG);Xko=r(lct,"FlaubertForSequenceClassification"),lct.forEach(t),zko=r(_9e," (FlauBERT model)"),_9e.forEach(t),Wko=i(j),av=n(j,"LI",{});var b9e=s(av);rfe=n(b9e,"STRONG",{});var ict=s(rfe);Qko=r(ict,"fnet"),ict.forEach(t),Hko=r(b9e," \u2014 "),CG=n(b9e,"A",{href:!0});var dct=s(CG);Uko=r(dct,"FNetForSequenceClassification"),dct.forEach(t),Jko=r(b9e," (FNet model)"),b9e.forEach(t),Yko=i(j),nv=n(j,"LI",{});var v9e=s(nv);tfe=n(v9e,"STRONG",{});var cct=s(tfe);Kko=r(cct,"funnel"),cct.forEach(t),Zko=r(v9e," \u2014 "),wG=n(v9e,"A",{href:!0});var mct=s(wG);eSo=r(mct,"FunnelForSequenceClassification"),mct.forEach(t),oSo=r(v9e," (Funnel Transformer model)"),v9e.forEach(t),rSo=i(j),sv=n(j,"LI",{});var F9e=s(sv);afe=n(F9e,"STRONG",{});var fct=s(afe);tSo=r(fct,"gpt2"),fct.forEach(t),aSo=r(F9e," \u2014 "),AG=n(F9e,"A",{href:!0});var gct=s(AG);nSo=r(gct,"GPT2ForSequenceClassification"),gct.forEach(t),sSo=r(F9e," (OpenAI GPT-2 model)"),F9e.forEach(t),lSo=i(j),lv=n(j,"LI",{});var T9e=s(lv);nfe=n(T9e,"STRONG",{});var hct=s(nfe);iSo=r(hct,"gpt_neo"),hct.forEach(t),dSo=r(T9e," \u2014 "),yG=n(T9e,"A",{href:!0});var uct=s(yG);cSo=r(uct,"GPTNeoForSequenceClassification"),uct.forEach(t),mSo=r(T9e," (GPT Neo model)"),T9e.forEach(t),fSo=i(j),iv=n(j,"LI",{});var M9e=s(iv);sfe=n(M9e,"STRONG",{});var pct=s(sfe);gSo=r(pct,"gptj"),pct.forEach(t),hSo=r(M9e," \u2014 "),LG=n(M9e,"A",{href:!0});var _ct=s(LG);uSo=r(_ct,"GPTJForSequenceClassification"),_ct.forEach(t),pSo=r(M9e," (GPT-J model)"),M9e.forEach(t),_So=i(j),dv=n(j,"LI",{});var E9e=s(dv);lfe=n(E9e,"STRONG",{});var bct=s(lfe);bSo=r(bct,"ibert"),bct.forEach(t),vSo=r(E9e," \u2014 "),xG=n(E9e,"A",{href:!0});var vct=s(xG);FSo=r(vct,"IBertForSequenceClassification"),vct.forEach(t),TSo=r(E9e," (I-BERT model)"),E9e.forEach(t),MSo=i(j),cv=n(j,"LI",{});var C9e=s(cv);ife=n(C9e,"STRONG",{});var Fct=s(ife);ESo=r(Fct,"layoutlm"),Fct.forEach(t),CSo=r(C9e," \u2014 "),$G=n(C9e,"A",{href:!0});var Tct=s($G);wSo=r(Tct,"LayoutLMForSequenceClassification"),Tct.forEach(t),ASo=r(C9e," (LayoutLM model)"),C9e.forEach(t),ySo=i(j),mv=n(j,"LI",{});var w9e=s(mv);dfe=n(w9e,"STRONG",{});var Mct=s(dfe);LSo=r(Mct,"layoutlmv2"),Mct.forEach(t),xSo=r(w9e," \u2014 "),kG=n(w9e,"A",{href:!0});var Ect=s(kG);$So=r(Ect,"LayoutLMv2ForSequenceClassification"),Ect.forEach(t),kSo=r(w9e," (LayoutLMv2 model)"),w9e.forEach(t),SSo=i(j),fv=n(j,"LI",{});var A9e=s(fv);cfe=n(A9e,"STRONG",{});var Cct=s(cfe);RSo=r(Cct,"layoutlmv3"),Cct.forEach(t),PSo=r(A9e," \u2014 "),SG=n(A9e,"A",{href:!0});var wct=s(SG);BSo=r(wct,"LayoutLMv3ForSequenceClassification"),wct.forEach(t),ISo=r(A9e," (LayoutLMv3 model)"),A9e.forEach(t),qSo=i(j),gv=n(j,"LI",{});var y9e=s(gv);mfe=n(y9e,"STRONG",{});var Act=s(mfe);NSo=r(Act,"led"),Act.forEach(t),jSo=r(y9e," \u2014 "),RG=n(y9e,"A",{href:!0});var yct=s(RG);DSo=r(yct,"LEDForSequenceClassification"),yct.forEach(t),GSo=r(y9e," (LED model)"),y9e.forEach(t),OSo=i(j),hv=n(j,"LI",{});var L9e=s(hv);ffe=n(L9e,"STRONG",{});var Lct=s(ffe);VSo=r(Lct,"longformer"),Lct.forEach(t),XSo=r(L9e," \u2014 "),PG=n(L9e,"A",{href:!0});var xct=s(PG);zSo=r(xct,"LongformerForSequenceClassification"),xct.forEach(t),WSo=r(L9e," (Longformer model)"),L9e.forEach(t),QSo=i(j),uv=n(j,"LI",{});var x9e=s(uv);gfe=n(x9e,"STRONG",{});var $ct=s(gfe);HSo=r($ct,"mbart"),$ct.forEach(t),USo=r(x9e," \u2014 "),BG=n(x9e,"A",{href:!0});var kct=s(BG);JSo=r(kct,"MBartForSequenceClassification"),kct.forEach(t),YSo=r(x9e," (mBART model)"),x9e.forEach(t),KSo=i(j),pv=n(j,"LI",{});var $9e=s(pv);hfe=n($9e,"STRONG",{});var Sct=s(hfe);ZSo=r(Sct,"megatron-bert"),Sct.forEach(t),eRo=r($9e," \u2014 "),IG=n($9e,"A",{href:!0});var Rct=s(IG);oRo=r(Rct,"MegatronBertForSequenceClassification"),Rct.forEach(t),rRo=r($9e," (MegatronBert model)"),$9e.forEach(t),tRo=i(j),_v=n(j,"LI",{});var k9e=s(_v);ufe=n(k9e,"STRONG",{});var Pct=s(ufe);aRo=r(Pct,"mobilebert"),Pct.forEach(t),nRo=r(k9e," \u2014 "),qG=n(k9e,"A",{href:!0});var Bct=s(qG);sRo=r(Bct,"MobileBertForSequenceClassification"),Bct.forEach(t),lRo=r(k9e," (MobileBERT model)"),k9e.forEach(t),iRo=i(j),bv=n(j,"LI",{});var S9e=s(bv);pfe=n(S9e,"STRONG",{});var Ict=s(pfe);dRo=r(Ict,"mpnet"),Ict.forEach(t),cRo=r(S9e," \u2014 "),NG=n(S9e,"A",{href:!0});var qct=s(NG);mRo=r(qct,"MPNetForSequenceClassification"),qct.forEach(t),fRo=r(S9e," (MPNet model)"),S9e.forEach(t),gRo=i(j),vv=n(j,"LI",{});var R9e=s(vv);_fe=n(R9e,"STRONG",{});var Nct=s(_fe);hRo=r(Nct,"nystromformer"),Nct.forEach(t),uRo=r(R9e," \u2014 "),jG=n(R9e,"A",{href:!0});var jct=s(jG);pRo=r(jct,"NystromformerForSequenceClassification"),jct.forEach(t),_Ro=r(R9e," (Nystromformer model)"),R9e.forEach(t),bRo=i(j),Fv=n(j,"LI",{});var P9e=s(Fv);bfe=n(P9e,"STRONG",{});var Dct=s(bfe);vRo=r(Dct,"openai-gpt"),Dct.forEach(t),FRo=r(P9e," \u2014 "),DG=n(P9e,"A",{href:!0});var Gct=s(DG);TRo=r(Gct,"OpenAIGPTForSequenceClassification"),Gct.forEach(t),MRo=r(P9e," (OpenAI GPT model)"),P9e.forEach(t),ERo=i(j),Tv=n(j,"LI",{});var B9e=s(Tv);vfe=n(B9e,"STRONG",{});var Oct=s(vfe);CRo=r(Oct,"perceiver"),Oct.forEach(t),wRo=r(B9e," \u2014 "),GG=n(B9e,"A",{href:!0});var Vct=s(GG);ARo=r(Vct,"PerceiverForSequenceClassification"),Vct.forEach(t),yRo=r(B9e," (Perceiver model)"),B9e.forEach(t),LRo=i(j),Mv=n(j,"LI",{});var I9e=s(Mv);Ffe=n(I9e,"STRONG",{});var Xct=s(Ffe);xRo=r(Xct,"plbart"),Xct.forEach(t),$Ro=r(I9e," \u2014 "),OG=n(I9e,"A",{href:!0});var zct=s(OG);kRo=r(zct,"PLBartForSequenceClassification"),zct.forEach(t),SRo=r(I9e," (PLBart model)"),I9e.forEach(t),RRo=i(j),Ev=n(j,"LI",{});var q9e=s(Ev);Tfe=n(q9e,"STRONG",{});var Wct=s(Tfe);PRo=r(Wct,"qdqbert"),Wct.forEach(t),BRo=r(q9e," \u2014 "),VG=n(q9e,"A",{href:!0});var Qct=s(VG);IRo=r(Qct,"QDQBertForSequenceClassification"),Qct.forEach(t),qRo=r(q9e," (QDQBert model)"),q9e.forEach(t),NRo=i(j),Cv=n(j,"LI",{});var N9e=s(Cv);Mfe=n(N9e,"STRONG",{});var Hct=s(Mfe);jRo=r(Hct,"reformer"),Hct.forEach(t),DRo=r(N9e," \u2014 "),XG=n(N9e,"A",{href:!0});var Uct=s(XG);GRo=r(Uct,"ReformerForSequenceClassification"),Uct.forEach(t),ORo=r(N9e," (Reformer model)"),N9e.forEach(t),VRo=i(j),wv=n(j,"LI",{});var j9e=s(wv);Efe=n(j9e,"STRONG",{});var Jct=s(Efe);XRo=r(Jct,"rembert"),Jct.forEach(t),zRo=r(j9e," \u2014 "),zG=n(j9e,"A",{href:!0});var Yct=s(zG);WRo=r(Yct,"RemBertForSequenceClassification"),Yct.forEach(t),QRo=r(j9e," (RemBERT model)"),j9e.forEach(t),HRo=i(j),Av=n(j,"LI",{});var D9e=s(Av);Cfe=n(D9e,"STRONG",{});var Kct=s(Cfe);URo=r(Kct,"roberta"),Kct.forEach(t),JRo=r(D9e," \u2014 "),WG=n(D9e,"A",{href:!0});var Zct=s(WG);YRo=r(Zct,"RobertaForSequenceClassification"),Zct.forEach(t),KRo=r(D9e," (RoBERTa model)"),D9e.forEach(t),ZRo=i(j),yv=n(j,"LI",{});var G9e=s(yv);wfe=n(G9e,"STRONG",{});var emt=s(wfe);ePo=r(emt,"roformer"),emt.forEach(t),oPo=r(G9e," \u2014 "),QG=n(G9e,"A",{href:!0});var omt=s(QG);rPo=r(omt,"RoFormerForSequenceClassification"),omt.forEach(t),tPo=r(G9e," (RoFormer model)"),G9e.forEach(t),aPo=i(j),Lv=n(j,"LI",{});var O9e=s(Lv);Afe=n(O9e,"STRONG",{});var rmt=s(Afe);nPo=r(rmt,"squeezebert"),rmt.forEach(t),sPo=r(O9e," \u2014 "),HG=n(O9e,"A",{href:!0});var tmt=s(HG);lPo=r(tmt,"SqueezeBertForSequenceClassification"),tmt.forEach(t),iPo=r(O9e," (SqueezeBERT model)"),O9e.forEach(t),dPo=i(j),xv=n(j,"LI",{});var V9e=s(xv);yfe=n(V9e,"STRONG",{});var amt=s(yfe);cPo=r(amt,"tapas"),amt.forEach(t),mPo=r(V9e," \u2014 "),UG=n(V9e,"A",{href:!0});var nmt=s(UG);fPo=r(nmt,"TapasForSequenceClassification"),nmt.forEach(t),gPo=r(V9e," (TAPAS model)"),V9e.forEach(t),hPo=i(j),$v=n(j,"LI",{});var X9e=s($v);Lfe=n(X9e,"STRONG",{});var smt=s(Lfe);uPo=r(smt,"transfo-xl"),smt.forEach(t),pPo=r(X9e," \u2014 "),JG=n(X9e,"A",{href:!0});var lmt=s(JG);_Po=r(lmt,"TransfoXLForSequenceClassification"),lmt.forEach(t),bPo=r(X9e," (Transformer-XL model)"),X9e.forEach(t),vPo=i(j),kv=n(j,"LI",{});var z9e=s(kv);xfe=n(z9e,"STRONG",{});var imt=s(xfe);FPo=r(imt,"xlm"),imt.forEach(t),TPo=r(z9e," \u2014 "),YG=n(z9e,"A",{href:!0});var dmt=s(YG);MPo=r(dmt,"XLMForSequenceClassification"),dmt.forEach(t),EPo=r(z9e," (XLM model)"),z9e.forEach(t),CPo=i(j),Sv=n(j,"LI",{});var W9e=s(Sv);$fe=n(W9e,"STRONG",{});var cmt=s($fe);wPo=r(cmt,"xlm-roberta"),cmt.forEach(t),APo=r(W9e," \u2014 "),KG=n(W9e,"A",{href:!0});var mmt=s(KG);yPo=r(mmt,"XLMRobertaForSequenceClassification"),mmt.forEach(t),LPo=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),xPo=i(j),Rv=n(j,"LI",{});var Q9e=s(Rv);kfe=n(Q9e,"STRONG",{});var fmt=s(kfe);$Po=r(fmt,"xlm-roberta-xl"),fmt.forEach(t),kPo=r(Q9e," \u2014 "),ZG=n(Q9e,"A",{href:!0});var gmt=s(ZG);SPo=r(gmt,"XLMRobertaXLForSequenceClassification"),gmt.forEach(t),RPo=r(Q9e," (XLM-RoBERTa-XL model)"),Q9e.forEach(t),PPo=i(j),Pv=n(j,"LI",{});var H9e=s(Pv);Sfe=n(H9e,"STRONG",{});var hmt=s(Sfe);BPo=r(hmt,"xlnet"),hmt.forEach(t),IPo=r(H9e," \u2014 "),eO=n(H9e,"A",{href:!0});var umt=s(eO);qPo=r(umt,"XLNetForSequenceClassification"),umt.forEach(t),NPo=r(H9e," (XLNet model)"),H9e.forEach(t),jPo=i(j),Bv=n(j,"LI",{});var U9e=s(Bv);Rfe=n(U9e,"STRONG",{});var pmt=s(Rfe);DPo=r(pmt,"yoso"),pmt.forEach(t),GPo=r(U9e," \u2014 "),oO=n(U9e,"A",{href:!0});var _mt=s(oO);OPo=r(_mt,"YosoForSequenceClassification"),_mt.forEach(t),VPo=r(U9e," (YOSO model)"),U9e.forEach(t),j.forEach(t),XPo=i(sa),Iv=n(sa,"P",{});var J9e=s(Iv);zPo=r(J9e,"The model is set in evaluation mode by default using "),Pfe=n(J9e,"CODE",{});var bmt=s(Pfe);WPo=r(bmt,"model.eval()"),bmt.forEach(t),QPo=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=n(J9e,"CODE",{});var vmt=s(Bfe);HPo=r(vmt,"model.train()"),vmt.forEach(t),J9e.forEach(t),UPo=i(sa),T(qv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),ENe=i(m),Vi=n(m,"H2",{class:!0});var yDe=s(Vi);Nv=n(yDe,"A",{id:!0,class:!0,href:!0});var Fmt=s(Nv);Ife=n(Fmt,"SPAN",{});var Tmt=s(Ife);T(xL.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),JPo=i(yDe),qfe=n(yDe,"SPAN",{});var Mmt=s(qfe);YPo=r(Mmt,"AutoModelForMultipleChoice"),Mmt.forEach(t),yDe.forEach(t),CNe=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T($L.$$.fragment,Qs),KPo=i(Qs),Xi=n(Qs,"P",{});var yZ=s(Xi);ZPo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rO=n(yZ,"A",{href:!0});var Emt=s(rO);eBo=r(Emt,"from_pretrained()"),Emt.forEach(t),oBo=r(yZ," class method or the "),tO=n(yZ,"A",{href:!0});var Cmt=s(tO);rBo=r(Cmt,"from_config()"),Cmt.forEach(t),tBo=r(yZ,` class
method.`),yZ.forEach(t),aBo=i(Qs),kL=n(Qs,"P",{});var LDe=s(kL);nBo=r(LDe,"This class cannot be instantiated directly using "),Nfe=n(LDe,"CODE",{});var wmt=s(Nfe);sBo=r(wmt,"__init__()"),wmt.forEach(t),lBo=r(LDe," (throws an error)."),LDe.forEach(t),iBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var VA=s(dt);T(SL.$$.fragment,VA),dBo=i(VA),jfe=n(VA,"P",{});var Amt=s(jfe);cBo=r(Amt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Amt.forEach(t),mBo=i(VA),zi=n(VA,"P",{});var LZ=s(zi);fBo=r(LZ,`Note:
Loading a model from its configuration file does `),Dfe=n(LZ,"STRONG",{});var ymt=s(Dfe);gBo=r(ymt,"not"),ymt.forEach(t),hBo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(LZ,"A",{href:!0});var Lmt=s(aO);uBo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),pBo=r(LZ," to load the model weights."),LZ.forEach(t),_Bo=i(VA),T(jv.$$.fragment,VA),VA.forEach(t),bBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(RL.$$.fragment,la),vBo=i(la),Gfe=n(la,"P",{});var xmt=s(Gfe);FBo=r(xmt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xmt.forEach(t),TBo=i(la),Pa=n(la,"P",{});var XA=s(Pa);MBo=r(XA,"The model class to instantiate is selected based on the "),Ofe=n(XA,"CODE",{});var $mt=s(Ofe);EBo=r($mt,"model_type"),$mt.forEach(t),CBo=r(XA,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(XA,"CODE",{});var kmt=s(Vfe);wBo=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),ABo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(XA,"CODE",{});var Smt=s(Xfe);yBo=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),LBo=r(XA,":"),XA.forEach(t),xBo=i(la),K=n(la,"UL",{});var ee=s(K);Dv=n(ee,"LI",{});var Y9e=s(Dv);zfe=n(Y9e,"STRONG",{});var Rmt=s(zfe);$Bo=r(Rmt,"albert"),Rmt.forEach(t),kBo=r(Y9e," \u2014 "),nO=n(Y9e,"A",{href:!0});var Pmt=s(nO);SBo=r(Pmt,"AlbertForMultipleChoice"),Pmt.forEach(t),RBo=r(Y9e," (ALBERT model)"),Y9e.forEach(t),PBo=i(ee),Gv=n(ee,"LI",{});var K9e=s(Gv);Wfe=n(K9e,"STRONG",{});var Bmt=s(Wfe);BBo=r(Bmt,"bert"),Bmt.forEach(t),IBo=r(K9e," \u2014 "),sO=n(K9e,"A",{href:!0});var Imt=s(sO);qBo=r(Imt,"BertForMultipleChoice"),Imt.forEach(t),NBo=r(K9e," (BERT model)"),K9e.forEach(t),jBo=i(ee),Ov=n(ee,"LI",{});var Z9e=s(Ov);Qfe=n(Z9e,"STRONG",{});var qmt=s(Qfe);DBo=r(qmt,"big_bird"),qmt.forEach(t),GBo=r(Z9e," \u2014 "),lO=n(Z9e,"A",{href:!0});var Nmt=s(lO);OBo=r(Nmt,"BigBirdForMultipleChoice"),Nmt.forEach(t),VBo=r(Z9e," (BigBird model)"),Z9e.forEach(t),XBo=i(ee),Vv=n(ee,"LI",{});var exe=s(Vv);Hfe=n(exe,"STRONG",{});var jmt=s(Hfe);zBo=r(jmt,"camembert"),jmt.forEach(t),WBo=r(exe," \u2014 "),iO=n(exe,"A",{href:!0});var Dmt=s(iO);QBo=r(Dmt,"CamembertForMultipleChoice"),Dmt.forEach(t),HBo=r(exe," (CamemBERT model)"),exe.forEach(t),UBo=i(ee),Xv=n(ee,"LI",{});var oxe=s(Xv);Ufe=n(oxe,"STRONG",{});var Gmt=s(Ufe);JBo=r(Gmt,"canine"),Gmt.forEach(t),YBo=r(oxe," \u2014 "),dO=n(oxe,"A",{href:!0});var Omt=s(dO);KBo=r(Omt,"CanineForMultipleChoice"),Omt.forEach(t),ZBo=r(oxe," (Canine model)"),oxe.forEach(t),eIo=i(ee),zv=n(ee,"LI",{});var rxe=s(zv);Jfe=n(rxe,"STRONG",{});var Vmt=s(Jfe);oIo=r(Vmt,"convbert"),Vmt.forEach(t),rIo=r(rxe," \u2014 "),cO=n(rxe,"A",{href:!0});var Xmt=s(cO);tIo=r(Xmt,"ConvBertForMultipleChoice"),Xmt.forEach(t),aIo=r(rxe," (ConvBERT model)"),rxe.forEach(t),nIo=i(ee),Wv=n(ee,"LI",{});var txe=s(Wv);Yfe=n(txe,"STRONG",{});var zmt=s(Yfe);sIo=r(zmt,"data2vec-text"),zmt.forEach(t),lIo=r(txe," \u2014 "),mO=n(txe,"A",{href:!0});var Wmt=s(mO);iIo=r(Wmt,"Data2VecTextForMultipleChoice"),Wmt.forEach(t),dIo=r(txe," (Data2VecText model)"),txe.forEach(t),cIo=i(ee),Qv=n(ee,"LI",{});var axe=s(Qv);Kfe=n(axe,"STRONG",{});var Qmt=s(Kfe);mIo=r(Qmt,"deberta-v2"),Qmt.forEach(t),fIo=r(axe," \u2014 "),fO=n(axe,"A",{href:!0});var Hmt=s(fO);gIo=r(Hmt,"DebertaV2ForMultipleChoice"),Hmt.forEach(t),hIo=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),uIo=i(ee),Hv=n(ee,"LI",{});var nxe=s(Hv);Zfe=n(nxe,"STRONG",{});var Umt=s(Zfe);pIo=r(Umt,"distilbert"),Umt.forEach(t),_Io=r(nxe," \u2014 "),gO=n(nxe,"A",{href:!0});var Jmt=s(gO);bIo=r(Jmt,"DistilBertForMultipleChoice"),Jmt.forEach(t),vIo=r(nxe," (DistilBERT model)"),nxe.forEach(t),FIo=i(ee),Uv=n(ee,"LI",{});var sxe=s(Uv);ege=n(sxe,"STRONG",{});var Ymt=s(ege);TIo=r(Ymt,"electra"),Ymt.forEach(t),MIo=r(sxe," \u2014 "),hO=n(sxe,"A",{href:!0});var Kmt=s(hO);EIo=r(Kmt,"ElectraForMultipleChoice"),Kmt.forEach(t),CIo=r(sxe," (ELECTRA model)"),sxe.forEach(t),wIo=i(ee),Jv=n(ee,"LI",{});var lxe=s(Jv);oge=n(lxe,"STRONG",{});var Zmt=s(oge);AIo=r(Zmt,"flaubert"),Zmt.forEach(t),yIo=r(lxe," \u2014 "),uO=n(lxe,"A",{href:!0});var eft=s(uO);LIo=r(eft,"FlaubertForMultipleChoice"),eft.forEach(t),xIo=r(lxe," (FlauBERT model)"),lxe.forEach(t),$Io=i(ee),Yv=n(ee,"LI",{});var ixe=s(Yv);rge=n(ixe,"STRONG",{});var oft=s(rge);kIo=r(oft,"fnet"),oft.forEach(t),SIo=r(ixe," \u2014 "),pO=n(ixe,"A",{href:!0});var rft=s(pO);RIo=r(rft,"FNetForMultipleChoice"),rft.forEach(t),PIo=r(ixe," (FNet model)"),ixe.forEach(t),BIo=i(ee),Kv=n(ee,"LI",{});var dxe=s(Kv);tge=n(dxe,"STRONG",{});var tft=s(tge);IIo=r(tft,"funnel"),tft.forEach(t),qIo=r(dxe," \u2014 "),_O=n(dxe,"A",{href:!0});var aft=s(_O);NIo=r(aft,"FunnelForMultipleChoice"),aft.forEach(t),jIo=r(dxe," (Funnel Transformer model)"),dxe.forEach(t),DIo=i(ee),Zv=n(ee,"LI",{});var cxe=s(Zv);age=n(cxe,"STRONG",{});var nft=s(age);GIo=r(nft,"ibert"),nft.forEach(t),OIo=r(cxe," \u2014 "),bO=n(cxe,"A",{href:!0});var sft=s(bO);VIo=r(sft,"IBertForMultipleChoice"),sft.forEach(t),XIo=r(cxe," (I-BERT model)"),cxe.forEach(t),zIo=i(ee),eF=n(ee,"LI",{});var mxe=s(eF);nge=n(mxe,"STRONG",{});var lft=s(nge);WIo=r(lft,"longformer"),lft.forEach(t),QIo=r(mxe," \u2014 "),vO=n(mxe,"A",{href:!0});var ift=s(vO);HIo=r(ift,"LongformerForMultipleChoice"),ift.forEach(t),UIo=r(mxe," (Longformer model)"),mxe.forEach(t),JIo=i(ee),oF=n(ee,"LI",{});var fxe=s(oF);sge=n(fxe,"STRONG",{});var dft=s(sge);YIo=r(dft,"megatron-bert"),dft.forEach(t),KIo=r(fxe," \u2014 "),FO=n(fxe,"A",{href:!0});var cft=s(FO);ZIo=r(cft,"MegatronBertForMultipleChoice"),cft.forEach(t),eqo=r(fxe," (MegatronBert model)"),fxe.forEach(t),oqo=i(ee),rF=n(ee,"LI",{});var gxe=s(rF);lge=n(gxe,"STRONG",{});var mft=s(lge);rqo=r(mft,"mobilebert"),mft.forEach(t),tqo=r(gxe," \u2014 "),TO=n(gxe,"A",{href:!0});var fft=s(TO);aqo=r(fft,"MobileBertForMultipleChoice"),fft.forEach(t),nqo=r(gxe," (MobileBERT model)"),gxe.forEach(t),sqo=i(ee),tF=n(ee,"LI",{});var hxe=s(tF);ige=n(hxe,"STRONG",{});var gft=s(ige);lqo=r(gft,"mpnet"),gft.forEach(t),iqo=r(hxe," \u2014 "),MO=n(hxe,"A",{href:!0});var hft=s(MO);dqo=r(hft,"MPNetForMultipleChoice"),hft.forEach(t),cqo=r(hxe," (MPNet model)"),hxe.forEach(t),mqo=i(ee),aF=n(ee,"LI",{});var uxe=s(aF);dge=n(uxe,"STRONG",{});var uft=s(dge);fqo=r(uft,"nystromformer"),uft.forEach(t),gqo=r(uxe," \u2014 "),EO=n(uxe,"A",{href:!0});var pft=s(EO);hqo=r(pft,"NystromformerForMultipleChoice"),pft.forEach(t),uqo=r(uxe," (Nystromformer model)"),uxe.forEach(t),pqo=i(ee),nF=n(ee,"LI",{});var pxe=s(nF);cge=n(pxe,"STRONG",{});var _ft=s(cge);_qo=r(_ft,"qdqbert"),_ft.forEach(t),bqo=r(pxe," \u2014 "),CO=n(pxe,"A",{href:!0});var bft=s(CO);vqo=r(bft,"QDQBertForMultipleChoice"),bft.forEach(t),Fqo=r(pxe," (QDQBert model)"),pxe.forEach(t),Tqo=i(ee),sF=n(ee,"LI",{});var _xe=s(sF);mge=n(_xe,"STRONG",{});var vft=s(mge);Mqo=r(vft,"rembert"),vft.forEach(t),Eqo=r(_xe," \u2014 "),wO=n(_xe,"A",{href:!0});var Fft=s(wO);Cqo=r(Fft,"RemBertForMultipleChoice"),Fft.forEach(t),wqo=r(_xe," (RemBERT model)"),_xe.forEach(t),Aqo=i(ee),lF=n(ee,"LI",{});var bxe=s(lF);fge=n(bxe,"STRONG",{});var Tft=s(fge);yqo=r(Tft,"roberta"),Tft.forEach(t),Lqo=r(bxe," \u2014 "),AO=n(bxe,"A",{href:!0});var Mft=s(AO);xqo=r(Mft,"RobertaForMultipleChoice"),Mft.forEach(t),$qo=r(bxe," (RoBERTa model)"),bxe.forEach(t),kqo=i(ee),iF=n(ee,"LI",{});var vxe=s(iF);gge=n(vxe,"STRONG",{});var Eft=s(gge);Sqo=r(Eft,"roformer"),Eft.forEach(t),Rqo=r(vxe," \u2014 "),yO=n(vxe,"A",{href:!0});var Cft=s(yO);Pqo=r(Cft,"RoFormerForMultipleChoice"),Cft.forEach(t),Bqo=r(vxe," (RoFormer model)"),vxe.forEach(t),Iqo=i(ee),dF=n(ee,"LI",{});var Fxe=s(dF);hge=n(Fxe,"STRONG",{});var wft=s(hge);qqo=r(wft,"squeezebert"),wft.forEach(t),Nqo=r(Fxe," \u2014 "),LO=n(Fxe,"A",{href:!0});var Aft=s(LO);jqo=r(Aft,"SqueezeBertForMultipleChoice"),Aft.forEach(t),Dqo=r(Fxe," (SqueezeBERT model)"),Fxe.forEach(t),Gqo=i(ee),cF=n(ee,"LI",{});var Txe=s(cF);uge=n(Txe,"STRONG",{});var yft=s(uge);Oqo=r(yft,"xlm"),yft.forEach(t),Vqo=r(Txe," \u2014 "),xO=n(Txe,"A",{href:!0});var Lft=s(xO);Xqo=r(Lft,"XLMForMultipleChoice"),Lft.forEach(t),zqo=r(Txe," (XLM model)"),Txe.forEach(t),Wqo=i(ee),mF=n(ee,"LI",{});var Mxe=s(mF);pge=n(Mxe,"STRONG",{});var xft=s(pge);Qqo=r(xft,"xlm-roberta"),xft.forEach(t),Hqo=r(Mxe," \u2014 "),$O=n(Mxe,"A",{href:!0});var $ft=s($O);Uqo=r($ft,"XLMRobertaForMultipleChoice"),$ft.forEach(t),Jqo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),Yqo=i(ee),fF=n(ee,"LI",{});var Exe=s(fF);_ge=n(Exe,"STRONG",{});var kft=s(_ge);Kqo=r(kft,"xlm-roberta-xl"),kft.forEach(t),Zqo=r(Exe," \u2014 "),kO=n(Exe,"A",{href:!0});var Sft=s(kO);eNo=r(Sft,"XLMRobertaXLForMultipleChoice"),Sft.forEach(t),oNo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),rNo=i(ee),gF=n(ee,"LI",{});var Cxe=s(gF);bge=n(Cxe,"STRONG",{});var Rft=s(bge);tNo=r(Rft,"xlnet"),Rft.forEach(t),aNo=r(Cxe," \u2014 "),SO=n(Cxe,"A",{href:!0});var Pft=s(SO);nNo=r(Pft,"XLNetForMultipleChoice"),Pft.forEach(t),sNo=r(Cxe," (XLNet model)"),Cxe.forEach(t),lNo=i(ee),hF=n(ee,"LI",{});var wxe=s(hF);vge=n(wxe,"STRONG",{});var Bft=s(vge);iNo=r(Bft,"yoso"),Bft.forEach(t),dNo=r(wxe," \u2014 "),RO=n(wxe,"A",{href:!0});var Ift=s(RO);cNo=r(Ift,"YosoForMultipleChoice"),Ift.forEach(t),mNo=r(wxe," (YOSO model)"),wxe.forEach(t),ee.forEach(t),fNo=i(la),uF=n(la,"P",{});var Axe=s(uF);gNo=r(Axe,"The model is set in evaluation mode by default using "),Fge=n(Axe,"CODE",{});var qft=s(Fge);hNo=r(qft,"model.eval()"),qft.forEach(t),uNo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(Axe,"CODE",{});var Nft=s(Tge);pNo=r(Nft,"model.train()"),Nft.forEach(t),Axe.forEach(t),_No=i(la),T(pF.$$.fragment,la),la.forEach(t),Qs.forEach(t),wNe=i(m),Wi=n(m,"H2",{class:!0});var xDe=s(Wi);_F=n(xDe,"A",{id:!0,class:!0,href:!0});var jft=s(_F);Mge=n(jft,"SPAN",{});var Dft=s(Mge);T(PL.$$.fragment,Dft),Dft.forEach(t),jft.forEach(t),bNo=i(xDe),Ege=n(xDe,"SPAN",{});var Gft=s(Ege);vNo=r(Gft,"AutoModelForNextSentencePrediction"),Gft.forEach(t),xDe.forEach(t),ANe=i(m),Bo=n(m,"DIV",{class:!0});var Hs=s(Bo);T(BL.$$.fragment,Hs),FNo=i(Hs),Qi=n(Hs,"P",{});var xZ=s(Qi);TNo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PO=n(xZ,"A",{href:!0});var Oft=s(PO);MNo=r(Oft,"from_pretrained()"),Oft.forEach(t),ENo=r(xZ," class method or the "),BO=n(xZ,"A",{href:!0});var Vft=s(BO);CNo=r(Vft,"from_config()"),Vft.forEach(t),wNo=r(xZ,` class
method.`),xZ.forEach(t),ANo=i(Hs),IL=n(Hs,"P",{});var $De=s(IL);yNo=r($De,"This class cannot be instantiated directly using "),Cge=n($De,"CODE",{});var Xft=s(Cge);LNo=r(Xft,"__init__()"),Xft.forEach(t),xNo=r($De," (throws an error)."),$De.forEach(t),$No=i(Hs),ct=n(Hs,"DIV",{class:!0});var zA=s(ct);T(qL.$$.fragment,zA),kNo=i(zA),wge=n(zA,"P",{});var zft=s(wge);SNo=r(zft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zft.forEach(t),RNo=i(zA),Hi=n(zA,"P",{});var $Z=s(Hi);PNo=r($Z,`Note:
Loading a model from its configuration file does `),Age=n($Z,"STRONG",{});var Wft=s(Age);BNo=r(Wft,"not"),Wft.forEach(t),INo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n($Z,"A",{href:!0});var Qft=s(IO);qNo=r(Qft,"from_pretrained()"),Qft.forEach(t),NNo=r($Z," to load the model weights."),$Z.forEach(t),jNo=i(zA),T(bF.$$.fragment,zA),zA.forEach(t),DNo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(NL.$$.fragment,ia),GNo=i(ia),yge=n(ia,"P",{});var Hft=s(yge);ONo=r(Hft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hft.forEach(t),VNo=i(ia),Ba=n(ia,"P",{});var WA=s(Ba);XNo=r(WA,"The model class to instantiate is selected based on the "),Lge=n(WA,"CODE",{});var Uft=s(Lge);zNo=r(Uft,"model_type"),Uft.forEach(t),WNo=r(WA,` property of the config object (either
passed as an argument or loaded from `),xge=n(WA,"CODE",{});var Jft=s(xge);QNo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),HNo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(WA,"CODE",{});var Yft=s($ge);UNo=r(Yft,"pretrained_model_name_or_path"),Yft.forEach(t),JNo=r(WA,":"),WA.forEach(t),YNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);vF=n(Us,"LI",{});var yxe=s(vF);kge=n(yxe,"STRONG",{});var Kft=s(kge);KNo=r(Kft,"bert"),Kft.forEach(t),ZNo=r(yxe," \u2014 "),qO=n(yxe,"A",{href:!0});var Zft=s(qO);ejo=r(Zft,"BertForNextSentencePrediction"),Zft.forEach(t),ojo=r(yxe," (BERT model)"),yxe.forEach(t),rjo=i(Us),FF=n(Us,"LI",{});var Lxe=s(FF);Sge=n(Lxe,"STRONG",{});var egt=s(Sge);tjo=r(egt,"fnet"),egt.forEach(t),ajo=r(Lxe," \u2014 "),NO=n(Lxe,"A",{href:!0});var ogt=s(NO);njo=r(ogt,"FNetForNextSentencePrediction"),ogt.forEach(t),sjo=r(Lxe," (FNet model)"),Lxe.forEach(t),ljo=i(Us),TF=n(Us,"LI",{});var xxe=s(TF);Rge=n(xxe,"STRONG",{});var rgt=s(Rge);ijo=r(rgt,"megatron-bert"),rgt.forEach(t),djo=r(xxe," \u2014 "),jO=n(xxe,"A",{href:!0});var tgt=s(jO);cjo=r(tgt,"MegatronBertForNextSentencePrediction"),tgt.forEach(t),mjo=r(xxe," (MegatronBert model)"),xxe.forEach(t),fjo=i(Us),MF=n(Us,"LI",{});var $xe=s(MF);Pge=n($xe,"STRONG",{});var agt=s(Pge);gjo=r(agt,"mobilebert"),agt.forEach(t),hjo=r($xe," \u2014 "),DO=n($xe,"A",{href:!0});var ngt=s(DO);ujo=r(ngt,"MobileBertForNextSentencePrediction"),ngt.forEach(t),pjo=r($xe," (MobileBERT model)"),$xe.forEach(t),_jo=i(Us),EF=n(Us,"LI",{});var kxe=s(EF);Bge=n(kxe,"STRONG",{});var sgt=s(Bge);bjo=r(sgt,"qdqbert"),sgt.forEach(t),vjo=r(kxe," \u2014 "),GO=n(kxe,"A",{href:!0});var lgt=s(GO);Fjo=r(lgt,"QDQBertForNextSentencePrediction"),lgt.forEach(t),Tjo=r(kxe," (QDQBert model)"),kxe.forEach(t),Us.forEach(t),Mjo=i(ia),CF=n(ia,"P",{});var Sxe=s(CF);Ejo=r(Sxe,"The model is set in evaluation mode by default using "),Ige=n(Sxe,"CODE",{});var igt=s(Ige);Cjo=r(igt,"model.eval()"),igt.forEach(t),wjo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(Sxe,"CODE",{});var dgt=s(qge);Ajo=r(dgt,"model.train()"),dgt.forEach(t),Sxe.forEach(t),yjo=i(ia),T(wF.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),yNe=i(m),Ui=n(m,"H2",{class:!0});var kDe=s(Ui);AF=n(kDe,"A",{id:!0,class:!0,href:!0});var cgt=s(AF);Nge=n(cgt,"SPAN",{});var mgt=s(Nge);T(jL.$$.fragment,mgt),mgt.forEach(t),cgt.forEach(t),Ljo=i(kDe),jge=n(kDe,"SPAN",{});var fgt=s(jge);xjo=r(fgt,"AutoModelForTokenClassification"),fgt.forEach(t),kDe.forEach(t),LNe=i(m),Io=n(m,"DIV",{class:!0});var Js=s(Io);T(DL.$$.fragment,Js),$jo=i(Js),Ji=n(Js,"P",{});var kZ=s(Ji);kjo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OO=n(kZ,"A",{href:!0});var ggt=s(OO);Sjo=r(ggt,"from_pretrained()"),ggt.forEach(t),Rjo=r(kZ," class method or the "),VO=n(kZ,"A",{href:!0});var hgt=s(VO);Pjo=r(hgt,"from_config()"),hgt.forEach(t),Bjo=r(kZ,` class
method.`),kZ.forEach(t),Ijo=i(Js),GL=n(Js,"P",{});var SDe=s(GL);qjo=r(SDe,"This class cannot be instantiated directly using "),Dge=n(SDe,"CODE",{});var ugt=s(Dge);Njo=r(ugt,"__init__()"),ugt.forEach(t),jjo=r(SDe," (throws an error)."),SDe.forEach(t),Djo=i(Js),mt=n(Js,"DIV",{class:!0});var QA=s(mt);T(OL.$$.fragment,QA),Gjo=i(QA),Gge=n(QA,"P",{});var pgt=s(Gge);Ojo=r(pgt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pgt.forEach(t),Vjo=i(QA),Yi=n(QA,"P",{});var SZ=s(Yi);Xjo=r(SZ,`Note:
Loading a model from its configuration file does `),Oge=n(SZ,"STRONG",{});var _gt=s(Oge);zjo=r(_gt,"not"),_gt.forEach(t),Wjo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(SZ,"A",{href:!0});var bgt=s(XO);Qjo=r(bgt,"from_pretrained()"),bgt.forEach(t),Hjo=r(SZ," to load the model weights."),SZ.forEach(t),Ujo=i(QA),T(yF.$$.fragment,QA),QA.forEach(t),Jjo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(VL.$$.fragment,da),Yjo=i(da),Vge=n(da,"P",{});var vgt=s(Vge);Kjo=r(vgt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vgt.forEach(t),Zjo=i(da),Ia=n(da,"P",{});var HA=s(Ia);eDo=r(HA,"The model class to instantiate is selected based on the "),Xge=n(HA,"CODE",{});var Fgt=s(Xge);oDo=r(Fgt,"model_type"),Fgt.forEach(t),rDo=r(HA,` property of the config object (either
passed as an argument or loaded from `),zge=n(HA,"CODE",{});var Tgt=s(zge);tDo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),aDo=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(HA,"CODE",{});var Mgt=s(Wge);nDo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),sDo=r(HA,":"),HA.forEach(t),lDo=i(da),H=n(da,"UL",{});var J=s(H);LF=n(J,"LI",{});var Rxe=s(LF);Qge=n(Rxe,"STRONG",{});var Egt=s(Qge);iDo=r(Egt,"albert"),Egt.forEach(t),dDo=r(Rxe," \u2014 "),zO=n(Rxe,"A",{href:!0});var Cgt=s(zO);cDo=r(Cgt,"AlbertForTokenClassification"),Cgt.forEach(t),mDo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),fDo=i(J),xF=n(J,"LI",{});var Pxe=s(xF);Hge=n(Pxe,"STRONG",{});var wgt=s(Hge);gDo=r(wgt,"bert"),wgt.forEach(t),hDo=r(Pxe," \u2014 "),WO=n(Pxe,"A",{href:!0});var Agt=s(WO);uDo=r(Agt,"BertForTokenClassification"),Agt.forEach(t),pDo=r(Pxe," (BERT model)"),Pxe.forEach(t),_Do=i(J),$F=n(J,"LI",{});var Bxe=s($F);Uge=n(Bxe,"STRONG",{});var ygt=s(Uge);bDo=r(ygt,"big_bird"),ygt.forEach(t),vDo=r(Bxe," \u2014 "),QO=n(Bxe,"A",{href:!0});var Lgt=s(QO);FDo=r(Lgt,"BigBirdForTokenClassification"),Lgt.forEach(t),TDo=r(Bxe," (BigBird model)"),Bxe.forEach(t),MDo=i(J),kF=n(J,"LI",{});var Ixe=s(kF);Jge=n(Ixe,"STRONG",{});var xgt=s(Jge);EDo=r(xgt,"camembert"),xgt.forEach(t),CDo=r(Ixe," \u2014 "),HO=n(Ixe,"A",{href:!0});var $gt=s(HO);wDo=r($gt,"CamembertForTokenClassification"),$gt.forEach(t),ADo=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),yDo=i(J),SF=n(J,"LI",{});var qxe=s(SF);Yge=n(qxe,"STRONG",{});var kgt=s(Yge);LDo=r(kgt,"canine"),kgt.forEach(t),xDo=r(qxe," \u2014 "),UO=n(qxe,"A",{href:!0});var Sgt=s(UO);$Do=r(Sgt,"CanineForTokenClassification"),Sgt.forEach(t),kDo=r(qxe," (Canine model)"),qxe.forEach(t),SDo=i(J),RF=n(J,"LI",{});var Nxe=s(RF);Kge=n(Nxe,"STRONG",{});var Rgt=s(Kge);RDo=r(Rgt,"convbert"),Rgt.forEach(t),PDo=r(Nxe," \u2014 "),JO=n(Nxe,"A",{href:!0});var Pgt=s(JO);BDo=r(Pgt,"ConvBertForTokenClassification"),Pgt.forEach(t),IDo=r(Nxe," (ConvBERT model)"),Nxe.forEach(t),qDo=i(J),PF=n(J,"LI",{});var jxe=s(PF);Zge=n(jxe,"STRONG",{});var Bgt=s(Zge);NDo=r(Bgt,"data2vec-text"),Bgt.forEach(t),jDo=r(jxe," \u2014 "),YO=n(jxe,"A",{href:!0});var Igt=s(YO);DDo=r(Igt,"Data2VecTextForTokenClassification"),Igt.forEach(t),GDo=r(jxe," (Data2VecText model)"),jxe.forEach(t),ODo=i(J),BF=n(J,"LI",{});var Dxe=s(BF);ehe=n(Dxe,"STRONG",{});var qgt=s(ehe);VDo=r(qgt,"deberta"),qgt.forEach(t),XDo=r(Dxe," \u2014 "),KO=n(Dxe,"A",{href:!0});var Ngt=s(KO);zDo=r(Ngt,"DebertaForTokenClassification"),Ngt.forEach(t),WDo=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),QDo=i(J),IF=n(J,"LI",{});var Gxe=s(IF);ohe=n(Gxe,"STRONG",{});var jgt=s(ohe);HDo=r(jgt,"deberta-v2"),jgt.forEach(t),UDo=r(Gxe," \u2014 "),ZO=n(Gxe,"A",{href:!0});var Dgt=s(ZO);JDo=r(Dgt,"DebertaV2ForTokenClassification"),Dgt.forEach(t),YDo=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),KDo=i(J),qF=n(J,"LI",{});var Oxe=s(qF);rhe=n(Oxe,"STRONG",{});var Ggt=s(rhe);ZDo=r(Ggt,"distilbert"),Ggt.forEach(t),eGo=r(Oxe," \u2014 "),eV=n(Oxe,"A",{href:!0});var Ogt=s(eV);oGo=r(Ogt,"DistilBertForTokenClassification"),Ogt.forEach(t),rGo=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),tGo=i(J),NF=n(J,"LI",{});var Vxe=s(NF);the=n(Vxe,"STRONG",{});var Vgt=s(the);aGo=r(Vgt,"electra"),Vgt.forEach(t),nGo=r(Vxe," \u2014 "),oV=n(Vxe,"A",{href:!0});var Xgt=s(oV);sGo=r(Xgt,"ElectraForTokenClassification"),Xgt.forEach(t),lGo=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),iGo=i(J),jF=n(J,"LI",{});var Xxe=s(jF);ahe=n(Xxe,"STRONG",{});var zgt=s(ahe);dGo=r(zgt,"flaubert"),zgt.forEach(t),cGo=r(Xxe," \u2014 "),rV=n(Xxe,"A",{href:!0});var Wgt=s(rV);mGo=r(Wgt,"FlaubertForTokenClassification"),Wgt.forEach(t),fGo=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),gGo=i(J),DF=n(J,"LI",{});var zxe=s(DF);nhe=n(zxe,"STRONG",{});var Qgt=s(nhe);hGo=r(Qgt,"fnet"),Qgt.forEach(t),uGo=r(zxe," \u2014 "),tV=n(zxe,"A",{href:!0});var Hgt=s(tV);pGo=r(Hgt,"FNetForTokenClassification"),Hgt.forEach(t),_Go=r(zxe," (FNet model)"),zxe.forEach(t),bGo=i(J),GF=n(J,"LI",{});var Wxe=s(GF);she=n(Wxe,"STRONG",{});var Ugt=s(she);vGo=r(Ugt,"funnel"),Ugt.forEach(t),FGo=r(Wxe," \u2014 "),aV=n(Wxe,"A",{href:!0});var Jgt=s(aV);TGo=r(Jgt,"FunnelForTokenClassification"),Jgt.forEach(t),MGo=r(Wxe," (Funnel Transformer model)"),Wxe.forEach(t),EGo=i(J),OF=n(J,"LI",{});var Qxe=s(OF);lhe=n(Qxe,"STRONG",{});var Ygt=s(lhe);CGo=r(Ygt,"gpt2"),Ygt.forEach(t),wGo=r(Qxe," \u2014 "),nV=n(Qxe,"A",{href:!0});var Kgt=s(nV);AGo=r(Kgt,"GPT2ForTokenClassification"),Kgt.forEach(t),yGo=r(Qxe," (OpenAI GPT-2 model)"),Qxe.forEach(t),LGo=i(J),VF=n(J,"LI",{});var Hxe=s(VF);ihe=n(Hxe,"STRONG",{});var Zgt=s(ihe);xGo=r(Zgt,"ibert"),Zgt.forEach(t),$Go=r(Hxe," \u2014 "),sV=n(Hxe,"A",{href:!0});var eht=s(sV);kGo=r(eht,"IBertForTokenClassification"),eht.forEach(t),SGo=r(Hxe," (I-BERT model)"),Hxe.forEach(t),RGo=i(J),XF=n(J,"LI",{});var Uxe=s(XF);dhe=n(Uxe,"STRONG",{});var oht=s(dhe);PGo=r(oht,"layoutlm"),oht.forEach(t),BGo=r(Uxe," \u2014 "),lV=n(Uxe,"A",{href:!0});var rht=s(lV);IGo=r(rht,"LayoutLMForTokenClassification"),rht.forEach(t),qGo=r(Uxe," (LayoutLM model)"),Uxe.forEach(t),NGo=i(J),zF=n(J,"LI",{});var Jxe=s(zF);che=n(Jxe,"STRONG",{});var tht=s(che);jGo=r(tht,"layoutlmv2"),tht.forEach(t),DGo=r(Jxe," \u2014 "),iV=n(Jxe,"A",{href:!0});var aht=s(iV);GGo=r(aht,"LayoutLMv2ForTokenClassification"),aht.forEach(t),OGo=r(Jxe," (LayoutLMv2 model)"),Jxe.forEach(t),VGo=i(J),WF=n(J,"LI",{});var Yxe=s(WF);mhe=n(Yxe,"STRONG",{});var nht=s(mhe);XGo=r(nht,"layoutlmv3"),nht.forEach(t),zGo=r(Yxe," \u2014 "),dV=n(Yxe,"A",{href:!0});var sht=s(dV);WGo=r(sht,"LayoutLMv3ForTokenClassification"),sht.forEach(t),QGo=r(Yxe," (LayoutLMv3 model)"),Yxe.forEach(t),HGo=i(J),QF=n(J,"LI",{});var Kxe=s(QF);fhe=n(Kxe,"STRONG",{});var lht=s(fhe);UGo=r(lht,"longformer"),lht.forEach(t),JGo=r(Kxe," \u2014 "),cV=n(Kxe,"A",{href:!0});var iht=s(cV);YGo=r(iht,"LongformerForTokenClassification"),iht.forEach(t),KGo=r(Kxe," (Longformer model)"),Kxe.forEach(t),ZGo=i(J),HF=n(J,"LI",{});var Zxe=s(HF);ghe=n(Zxe,"STRONG",{});var dht=s(ghe);eOo=r(dht,"megatron-bert"),dht.forEach(t),oOo=r(Zxe," \u2014 "),mV=n(Zxe,"A",{href:!0});var cht=s(mV);rOo=r(cht,"MegatronBertForTokenClassification"),cht.forEach(t),tOo=r(Zxe," (MegatronBert model)"),Zxe.forEach(t),aOo=i(J),UF=n(J,"LI",{});var e$e=s(UF);hhe=n(e$e,"STRONG",{});var mht=s(hhe);nOo=r(mht,"mobilebert"),mht.forEach(t),sOo=r(e$e," \u2014 "),fV=n(e$e,"A",{href:!0});var fht=s(fV);lOo=r(fht,"MobileBertForTokenClassification"),fht.forEach(t),iOo=r(e$e," (MobileBERT model)"),e$e.forEach(t),dOo=i(J),JF=n(J,"LI",{});var o$e=s(JF);uhe=n(o$e,"STRONG",{});var ght=s(uhe);cOo=r(ght,"mpnet"),ght.forEach(t),mOo=r(o$e," \u2014 "),gV=n(o$e,"A",{href:!0});var hht=s(gV);fOo=r(hht,"MPNetForTokenClassification"),hht.forEach(t),gOo=r(o$e," (MPNet model)"),o$e.forEach(t),hOo=i(J),YF=n(J,"LI",{});var r$e=s(YF);phe=n(r$e,"STRONG",{});var uht=s(phe);uOo=r(uht,"nystromformer"),uht.forEach(t),pOo=r(r$e," \u2014 "),hV=n(r$e,"A",{href:!0});var pht=s(hV);_Oo=r(pht,"NystromformerForTokenClassification"),pht.forEach(t),bOo=r(r$e," (Nystromformer model)"),r$e.forEach(t),vOo=i(J),KF=n(J,"LI",{});var t$e=s(KF);_he=n(t$e,"STRONG",{});var _ht=s(_he);FOo=r(_ht,"qdqbert"),_ht.forEach(t),TOo=r(t$e," \u2014 "),uV=n(t$e,"A",{href:!0});var bht=s(uV);MOo=r(bht,"QDQBertForTokenClassification"),bht.forEach(t),EOo=r(t$e," (QDQBert model)"),t$e.forEach(t),COo=i(J),ZF=n(J,"LI",{});var a$e=s(ZF);bhe=n(a$e,"STRONG",{});var vht=s(bhe);wOo=r(vht,"rembert"),vht.forEach(t),AOo=r(a$e," \u2014 "),pV=n(a$e,"A",{href:!0});var Fht=s(pV);yOo=r(Fht,"RemBertForTokenClassification"),Fht.forEach(t),LOo=r(a$e," (RemBERT model)"),a$e.forEach(t),xOo=i(J),e1=n(J,"LI",{});var n$e=s(e1);vhe=n(n$e,"STRONG",{});var Tht=s(vhe);$Oo=r(Tht,"roberta"),Tht.forEach(t),kOo=r(n$e," \u2014 "),_V=n(n$e,"A",{href:!0});var Mht=s(_V);SOo=r(Mht,"RobertaForTokenClassification"),Mht.forEach(t),ROo=r(n$e," (RoBERTa model)"),n$e.forEach(t),POo=i(J),o1=n(J,"LI",{});var s$e=s(o1);Fhe=n(s$e,"STRONG",{});var Eht=s(Fhe);BOo=r(Eht,"roformer"),Eht.forEach(t),IOo=r(s$e," \u2014 "),bV=n(s$e,"A",{href:!0});var Cht=s(bV);qOo=r(Cht,"RoFormerForTokenClassification"),Cht.forEach(t),NOo=r(s$e," (RoFormer model)"),s$e.forEach(t),jOo=i(J),r1=n(J,"LI",{});var l$e=s(r1);The=n(l$e,"STRONG",{});var wht=s(The);DOo=r(wht,"squeezebert"),wht.forEach(t),GOo=r(l$e," \u2014 "),vV=n(l$e,"A",{href:!0});var Aht=s(vV);OOo=r(Aht,"SqueezeBertForTokenClassification"),Aht.forEach(t),VOo=r(l$e," (SqueezeBERT model)"),l$e.forEach(t),XOo=i(J),t1=n(J,"LI",{});var i$e=s(t1);Mhe=n(i$e,"STRONG",{});var yht=s(Mhe);zOo=r(yht,"xlm"),yht.forEach(t),WOo=r(i$e," \u2014 "),FV=n(i$e,"A",{href:!0});var Lht=s(FV);QOo=r(Lht,"XLMForTokenClassification"),Lht.forEach(t),HOo=r(i$e," (XLM model)"),i$e.forEach(t),UOo=i(J),a1=n(J,"LI",{});var d$e=s(a1);Ehe=n(d$e,"STRONG",{});var xht=s(Ehe);JOo=r(xht,"xlm-roberta"),xht.forEach(t),YOo=r(d$e," \u2014 "),TV=n(d$e,"A",{href:!0});var $ht=s(TV);KOo=r($ht,"XLMRobertaForTokenClassification"),$ht.forEach(t),ZOo=r(d$e," (XLM-RoBERTa model)"),d$e.forEach(t),eVo=i(J),n1=n(J,"LI",{});var c$e=s(n1);Che=n(c$e,"STRONG",{});var kht=s(Che);oVo=r(kht,"xlm-roberta-xl"),kht.forEach(t),rVo=r(c$e," \u2014 "),MV=n(c$e,"A",{href:!0});var Sht=s(MV);tVo=r(Sht,"XLMRobertaXLForTokenClassification"),Sht.forEach(t),aVo=r(c$e," (XLM-RoBERTa-XL model)"),c$e.forEach(t),nVo=i(J),s1=n(J,"LI",{});var m$e=s(s1);whe=n(m$e,"STRONG",{});var Rht=s(whe);sVo=r(Rht,"xlnet"),Rht.forEach(t),lVo=r(m$e," \u2014 "),EV=n(m$e,"A",{href:!0});var Pht=s(EV);iVo=r(Pht,"XLNetForTokenClassification"),Pht.forEach(t),dVo=r(m$e," (XLNet model)"),m$e.forEach(t),cVo=i(J),l1=n(J,"LI",{});var f$e=s(l1);Ahe=n(f$e,"STRONG",{});var Bht=s(Ahe);mVo=r(Bht,"yoso"),Bht.forEach(t),fVo=r(f$e," \u2014 "),CV=n(f$e,"A",{href:!0});var Iht=s(CV);gVo=r(Iht,"YosoForTokenClassification"),Iht.forEach(t),hVo=r(f$e," (YOSO model)"),f$e.forEach(t),J.forEach(t),uVo=i(da),i1=n(da,"P",{});var g$e=s(i1);pVo=r(g$e,"The model is set in evaluation mode by default using "),yhe=n(g$e,"CODE",{});var qht=s(yhe);_Vo=r(qht,"model.eval()"),qht.forEach(t),bVo=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(g$e,"CODE",{});var Nht=s(Lhe);vVo=r(Nht,"model.train()"),Nht.forEach(t),g$e.forEach(t),FVo=i(da),T(d1.$$.fragment,da),da.forEach(t),Js.forEach(t),xNe=i(m),Ki=n(m,"H2",{class:!0});var RDe=s(Ki);c1=n(RDe,"A",{id:!0,class:!0,href:!0});var jht=s(c1);xhe=n(jht,"SPAN",{});var Dht=s(xhe);T(XL.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),TVo=i(RDe),$he=n(RDe,"SPAN",{});var Ght=s($he);MVo=r(Ght,"AutoModelForQuestionAnswering"),Ght.forEach(t),RDe.forEach(t),$Ne=i(m),qo=n(m,"DIV",{class:!0});var Ys=s(qo);T(zL.$$.fragment,Ys),EVo=i(Ys),Zi=n(Ys,"P",{});var RZ=s(Zi);CVo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wV=n(RZ,"A",{href:!0});var Oht=s(wV);wVo=r(Oht,"from_pretrained()"),Oht.forEach(t),AVo=r(RZ," class method or the "),AV=n(RZ,"A",{href:!0});var Vht=s(AV);yVo=r(Vht,"from_config()"),Vht.forEach(t),LVo=r(RZ,` class
method.`),RZ.forEach(t),xVo=i(Ys),WL=n(Ys,"P",{});var PDe=s(WL);$Vo=r(PDe,"This class cannot be instantiated directly using "),khe=n(PDe,"CODE",{});var Xht=s(khe);kVo=r(Xht,"__init__()"),Xht.forEach(t),SVo=r(PDe," (throws an error)."),PDe.forEach(t),RVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var UA=s(ft);T(QL.$$.fragment,UA),PVo=i(UA),She=n(UA,"P",{});var zht=s(She);BVo=r(zht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zht.forEach(t),IVo=i(UA),ed=n(UA,"P",{});var PZ=s(ed);qVo=r(PZ,`Note:
Loading a model from its configuration file does `),Rhe=n(PZ,"STRONG",{});var Wht=s(Rhe);NVo=r(Wht,"not"),Wht.forEach(t),jVo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(PZ,"A",{href:!0});var Qht=s(yV);DVo=r(Qht,"from_pretrained()"),Qht.forEach(t),GVo=r(PZ," to load the model weights."),PZ.forEach(t),OVo=i(UA),T(m1.$$.fragment,UA),UA.forEach(t),VVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(HL.$$.fragment,ca),XVo=i(ca),Phe=n(ca,"P",{});var Hht=s(Phe);zVo=r(Hht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hht.forEach(t),WVo=i(ca),qa=n(ca,"P",{});var JA=s(qa);QVo=r(JA,"The model class to instantiate is selected based on the "),Bhe=n(JA,"CODE",{});var Uht=s(Bhe);HVo=r(Uht,"model_type"),Uht.forEach(t),UVo=r(JA,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(JA,"CODE",{});var Jht=s(Ihe);JVo=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),YVo=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(JA,"CODE",{});var Yht=s(qhe);KVo=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),ZVo=r(JA,":"),JA.forEach(t),eXo=i(ca),V=n(ca,"UL",{});var X=s(V);f1=n(X,"LI",{});var h$e=s(f1);Nhe=n(h$e,"STRONG",{});var Kht=s(Nhe);oXo=r(Kht,"albert"),Kht.forEach(t),rXo=r(h$e," \u2014 "),LV=n(h$e,"A",{href:!0});var Zht=s(LV);tXo=r(Zht,"AlbertForQuestionAnswering"),Zht.forEach(t),aXo=r(h$e," (ALBERT model)"),h$e.forEach(t),nXo=i(X),g1=n(X,"LI",{});var u$e=s(g1);jhe=n(u$e,"STRONG",{});var eut=s(jhe);sXo=r(eut,"bart"),eut.forEach(t),lXo=r(u$e," \u2014 "),xV=n(u$e,"A",{href:!0});var out=s(xV);iXo=r(out,"BartForQuestionAnswering"),out.forEach(t),dXo=r(u$e," (BART model)"),u$e.forEach(t),cXo=i(X),h1=n(X,"LI",{});var p$e=s(h1);Dhe=n(p$e,"STRONG",{});var rut=s(Dhe);mXo=r(rut,"bert"),rut.forEach(t),fXo=r(p$e," \u2014 "),$V=n(p$e,"A",{href:!0});var tut=s($V);gXo=r(tut,"BertForQuestionAnswering"),tut.forEach(t),hXo=r(p$e," (BERT model)"),p$e.forEach(t),uXo=i(X),u1=n(X,"LI",{});var _$e=s(u1);Ghe=n(_$e,"STRONG",{});var aut=s(Ghe);pXo=r(aut,"big_bird"),aut.forEach(t),_Xo=r(_$e," \u2014 "),kV=n(_$e,"A",{href:!0});var nut=s(kV);bXo=r(nut,"BigBirdForQuestionAnswering"),nut.forEach(t),vXo=r(_$e," (BigBird model)"),_$e.forEach(t),FXo=i(X),p1=n(X,"LI",{});var b$e=s(p1);Ohe=n(b$e,"STRONG",{});var sut=s(Ohe);TXo=r(sut,"bigbird_pegasus"),sut.forEach(t),MXo=r(b$e," \u2014 "),SV=n(b$e,"A",{href:!0});var lut=s(SV);EXo=r(lut,"BigBirdPegasusForQuestionAnswering"),lut.forEach(t),CXo=r(b$e," (BigBirdPegasus model)"),b$e.forEach(t),wXo=i(X),_1=n(X,"LI",{});var v$e=s(_1);Vhe=n(v$e,"STRONG",{});var iut=s(Vhe);AXo=r(iut,"camembert"),iut.forEach(t),yXo=r(v$e," \u2014 "),RV=n(v$e,"A",{href:!0});var dut=s(RV);LXo=r(dut,"CamembertForQuestionAnswering"),dut.forEach(t),xXo=r(v$e," (CamemBERT model)"),v$e.forEach(t),$Xo=i(X),b1=n(X,"LI",{});var F$e=s(b1);Xhe=n(F$e,"STRONG",{});var cut=s(Xhe);kXo=r(cut,"canine"),cut.forEach(t),SXo=r(F$e," \u2014 "),PV=n(F$e,"A",{href:!0});var mut=s(PV);RXo=r(mut,"CanineForQuestionAnswering"),mut.forEach(t),PXo=r(F$e," (Canine model)"),F$e.forEach(t),BXo=i(X),v1=n(X,"LI",{});var T$e=s(v1);zhe=n(T$e,"STRONG",{});var fut=s(zhe);IXo=r(fut,"convbert"),fut.forEach(t),qXo=r(T$e," \u2014 "),BV=n(T$e,"A",{href:!0});var gut=s(BV);NXo=r(gut,"ConvBertForQuestionAnswering"),gut.forEach(t),jXo=r(T$e," (ConvBERT model)"),T$e.forEach(t),DXo=i(X),F1=n(X,"LI",{});var M$e=s(F1);Whe=n(M$e,"STRONG",{});var hut=s(Whe);GXo=r(hut,"data2vec-text"),hut.forEach(t),OXo=r(M$e," \u2014 "),IV=n(M$e,"A",{href:!0});var uut=s(IV);VXo=r(uut,"Data2VecTextForQuestionAnswering"),uut.forEach(t),XXo=r(M$e," (Data2VecText model)"),M$e.forEach(t),zXo=i(X),T1=n(X,"LI",{});var E$e=s(T1);Qhe=n(E$e,"STRONG",{});var put=s(Qhe);WXo=r(put,"deberta"),put.forEach(t),QXo=r(E$e," \u2014 "),qV=n(E$e,"A",{href:!0});var _ut=s(qV);HXo=r(_ut,"DebertaForQuestionAnswering"),_ut.forEach(t),UXo=r(E$e," (DeBERTa model)"),E$e.forEach(t),JXo=i(X),M1=n(X,"LI",{});var C$e=s(M1);Hhe=n(C$e,"STRONG",{});var but=s(Hhe);YXo=r(but,"deberta-v2"),but.forEach(t),KXo=r(C$e," \u2014 "),NV=n(C$e,"A",{href:!0});var vut=s(NV);ZXo=r(vut,"DebertaV2ForQuestionAnswering"),vut.forEach(t),ezo=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),ozo=i(X),E1=n(X,"LI",{});var w$e=s(E1);Uhe=n(w$e,"STRONG",{});var Fut=s(Uhe);rzo=r(Fut,"distilbert"),Fut.forEach(t),tzo=r(w$e," \u2014 "),jV=n(w$e,"A",{href:!0});var Tut=s(jV);azo=r(Tut,"DistilBertForQuestionAnswering"),Tut.forEach(t),nzo=r(w$e," (DistilBERT model)"),w$e.forEach(t),szo=i(X),C1=n(X,"LI",{});var A$e=s(C1);Jhe=n(A$e,"STRONG",{});var Mut=s(Jhe);lzo=r(Mut,"electra"),Mut.forEach(t),izo=r(A$e," \u2014 "),DV=n(A$e,"A",{href:!0});var Eut=s(DV);dzo=r(Eut,"ElectraForQuestionAnswering"),Eut.forEach(t),czo=r(A$e," (ELECTRA model)"),A$e.forEach(t),mzo=i(X),w1=n(X,"LI",{});var y$e=s(w1);Yhe=n(y$e,"STRONG",{});var Cut=s(Yhe);fzo=r(Cut,"flaubert"),Cut.forEach(t),gzo=r(y$e," \u2014 "),GV=n(y$e,"A",{href:!0});var wut=s(GV);hzo=r(wut,"FlaubertForQuestionAnsweringSimple"),wut.forEach(t),uzo=r(y$e," (FlauBERT model)"),y$e.forEach(t),pzo=i(X),A1=n(X,"LI",{});var L$e=s(A1);Khe=n(L$e,"STRONG",{});var Aut=s(Khe);_zo=r(Aut,"fnet"),Aut.forEach(t),bzo=r(L$e," \u2014 "),OV=n(L$e,"A",{href:!0});var yut=s(OV);vzo=r(yut,"FNetForQuestionAnswering"),yut.forEach(t),Fzo=r(L$e," (FNet model)"),L$e.forEach(t),Tzo=i(X),y1=n(X,"LI",{});var x$e=s(y1);Zhe=n(x$e,"STRONG",{});var Lut=s(Zhe);Mzo=r(Lut,"funnel"),Lut.forEach(t),Ezo=r(x$e," \u2014 "),VV=n(x$e,"A",{href:!0});var xut=s(VV);Czo=r(xut,"FunnelForQuestionAnswering"),xut.forEach(t),wzo=r(x$e," (Funnel Transformer model)"),x$e.forEach(t),Azo=i(X),L1=n(X,"LI",{});var $$e=s(L1);eue=n($$e,"STRONG",{});var $ut=s(eue);yzo=r($ut,"gptj"),$ut.forEach(t),Lzo=r($$e," \u2014 "),XV=n($$e,"A",{href:!0});var kut=s(XV);xzo=r(kut,"GPTJForQuestionAnswering"),kut.forEach(t),$zo=r($$e," (GPT-J model)"),$$e.forEach(t),kzo=i(X),x1=n(X,"LI",{});var k$e=s(x1);oue=n(k$e,"STRONG",{});var Sut=s(oue);Szo=r(Sut,"ibert"),Sut.forEach(t),Rzo=r(k$e," \u2014 "),zV=n(k$e,"A",{href:!0});var Rut=s(zV);Pzo=r(Rut,"IBertForQuestionAnswering"),Rut.forEach(t),Bzo=r(k$e," (I-BERT model)"),k$e.forEach(t),Izo=i(X),$1=n(X,"LI",{});var S$e=s($1);rue=n(S$e,"STRONG",{});var Put=s(rue);qzo=r(Put,"layoutlmv2"),Put.forEach(t),Nzo=r(S$e," \u2014 "),WV=n(S$e,"A",{href:!0});var But=s(WV);jzo=r(But,"LayoutLMv2ForQuestionAnswering"),But.forEach(t),Dzo=r(S$e," (LayoutLMv2 model)"),S$e.forEach(t),Gzo=i(X),k1=n(X,"LI",{});var R$e=s(k1);tue=n(R$e,"STRONG",{});var Iut=s(tue);Ozo=r(Iut,"layoutlmv3"),Iut.forEach(t),Vzo=r(R$e," \u2014 "),QV=n(R$e,"A",{href:!0});var qut=s(QV);Xzo=r(qut,"LayoutLMv3ForQuestionAnswering"),qut.forEach(t),zzo=r(R$e," (LayoutLMv3 model)"),R$e.forEach(t),Wzo=i(X),S1=n(X,"LI",{});var P$e=s(S1);aue=n(P$e,"STRONG",{});var Nut=s(aue);Qzo=r(Nut,"led"),Nut.forEach(t),Hzo=r(P$e," \u2014 "),HV=n(P$e,"A",{href:!0});var jut=s(HV);Uzo=r(jut,"LEDForQuestionAnswering"),jut.forEach(t),Jzo=r(P$e," (LED model)"),P$e.forEach(t),Yzo=i(X),R1=n(X,"LI",{});var B$e=s(R1);nue=n(B$e,"STRONG",{});var Dut=s(nue);Kzo=r(Dut,"longformer"),Dut.forEach(t),Zzo=r(B$e," \u2014 "),UV=n(B$e,"A",{href:!0});var Gut=s(UV);eWo=r(Gut,"LongformerForQuestionAnswering"),Gut.forEach(t),oWo=r(B$e," (Longformer model)"),B$e.forEach(t),rWo=i(X),P1=n(X,"LI",{});var I$e=s(P1);sue=n(I$e,"STRONG",{});var Out=s(sue);tWo=r(Out,"lxmert"),Out.forEach(t),aWo=r(I$e," \u2014 "),JV=n(I$e,"A",{href:!0});var Vut=s(JV);nWo=r(Vut,"LxmertForQuestionAnswering"),Vut.forEach(t),sWo=r(I$e," (LXMERT model)"),I$e.forEach(t),lWo=i(X),B1=n(X,"LI",{});var q$e=s(B1);lue=n(q$e,"STRONG",{});var Xut=s(lue);iWo=r(Xut,"mbart"),Xut.forEach(t),dWo=r(q$e," \u2014 "),YV=n(q$e,"A",{href:!0});var zut=s(YV);cWo=r(zut,"MBartForQuestionAnswering"),zut.forEach(t),mWo=r(q$e," (mBART model)"),q$e.forEach(t),fWo=i(X),I1=n(X,"LI",{});var N$e=s(I1);iue=n(N$e,"STRONG",{});var Wut=s(iue);gWo=r(Wut,"megatron-bert"),Wut.forEach(t),hWo=r(N$e," \u2014 "),KV=n(N$e,"A",{href:!0});var Qut=s(KV);uWo=r(Qut,"MegatronBertForQuestionAnswering"),Qut.forEach(t),pWo=r(N$e," (MegatronBert model)"),N$e.forEach(t),_Wo=i(X),q1=n(X,"LI",{});var j$e=s(q1);due=n(j$e,"STRONG",{});var Hut=s(due);bWo=r(Hut,"mobilebert"),Hut.forEach(t),vWo=r(j$e," \u2014 "),ZV=n(j$e,"A",{href:!0});var Uut=s(ZV);FWo=r(Uut,"MobileBertForQuestionAnswering"),Uut.forEach(t),TWo=r(j$e," (MobileBERT model)"),j$e.forEach(t),MWo=i(X),N1=n(X,"LI",{});var D$e=s(N1);cue=n(D$e,"STRONG",{});var Jut=s(cue);EWo=r(Jut,"mpnet"),Jut.forEach(t),CWo=r(D$e," \u2014 "),eX=n(D$e,"A",{href:!0});var Yut=s(eX);wWo=r(Yut,"MPNetForQuestionAnswering"),Yut.forEach(t),AWo=r(D$e," (MPNet model)"),D$e.forEach(t),yWo=i(X),j1=n(X,"LI",{});var G$e=s(j1);mue=n(G$e,"STRONG",{});var Kut=s(mue);LWo=r(Kut,"nystromformer"),Kut.forEach(t),xWo=r(G$e," \u2014 "),oX=n(G$e,"A",{href:!0});var Zut=s(oX);$Wo=r(Zut,"NystromformerForQuestionAnswering"),Zut.forEach(t),kWo=r(G$e," (Nystromformer model)"),G$e.forEach(t),SWo=i(X),D1=n(X,"LI",{});var O$e=s(D1);fue=n(O$e,"STRONG",{});var ept=s(fue);RWo=r(ept,"qdqbert"),ept.forEach(t),PWo=r(O$e," \u2014 "),rX=n(O$e,"A",{href:!0});var opt=s(rX);BWo=r(opt,"QDQBertForQuestionAnswering"),opt.forEach(t),IWo=r(O$e," (QDQBert model)"),O$e.forEach(t),qWo=i(X),G1=n(X,"LI",{});var V$e=s(G1);gue=n(V$e,"STRONG",{});var rpt=s(gue);NWo=r(rpt,"reformer"),rpt.forEach(t),jWo=r(V$e," \u2014 "),tX=n(V$e,"A",{href:!0});var tpt=s(tX);DWo=r(tpt,"ReformerForQuestionAnswering"),tpt.forEach(t),GWo=r(V$e," (Reformer model)"),V$e.forEach(t),OWo=i(X),O1=n(X,"LI",{});var X$e=s(O1);hue=n(X$e,"STRONG",{});var apt=s(hue);VWo=r(apt,"rembert"),apt.forEach(t),XWo=r(X$e," \u2014 "),aX=n(X$e,"A",{href:!0});var npt=s(aX);zWo=r(npt,"RemBertForQuestionAnswering"),npt.forEach(t),WWo=r(X$e," (RemBERT model)"),X$e.forEach(t),QWo=i(X),V1=n(X,"LI",{});var z$e=s(V1);uue=n(z$e,"STRONG",{});var spt=s(uue);HWo=r(spt,"roberta"),spt.forEach(t),UWo=r(z$e," \u2014 "),nX=n(z$e,"A",{href:!0});var lpt=s(nX);JWo=r(lpt,"RobertaForQuestionAnswering"),lpt.forEach(t),YWo=r(z$e," (RoBERTa model)"),z$e.forEach(t),KWo=i(X),X1=n(X,"LI",{});var W$e=s(X1);pue=n(W$e,"STRONG",{});var ipt=s(pue);ZWo=r(ipt,"roformer"),ipt.forEach(t),eQo=r(W$e," \u2014 "),sX=n(W$e,"A",{href:!0});var dpt=s(sX);oQo=r(dpt,"RoFormerForQuestionAnswering"),dpt.forEach(t),rQo=r(W$e," (RoFormer model)"),W$e.forEach(t),tQo=i(X),z1=n(X,"LI",{});var Q$e=s(z1);_ue=n(Q$e,"STRONG",{});var cpt=s(_ue);aQo=r(cpt,"splinter"),cpt.forEach(t),nQo=r(Q$e," \u2014 "),lX=n(Q$e,"A",{href:!0});var mpt=s(lX);sQo=r(mpt,"SplinterForQuestionAnswering"),mpt.forEach(t),lQo=r(Q$e," (Splinter model)"),Q$e.forEach(t),iQo=i(X),W1=n(X,"LI",{});var H$e=s(W1);bue=n(H$e,"STRONG",{});var fpt=s(bue);dQo=r(fpt,"squeezebert"),fpt.forEach(t),cQo=r(H$e," \u2014 "),iX=n(H$e,"A",{href:!0});var gpt=s(iX);mQo=r(gpt,"SqueezeBertForQuestionAnswering"),gpt.forEach(t),fQo=r(H$e," (SqueezeBERT model)"),H$e.forEach(t),gQo=i(X),Q1=n(X,"LI",{});var U$e=s(Q1);vue=n(U$e,"STRONG",{});var hpt=s(vue);hQo=r(hpt,"xlm"),hpt.forEach(t),uQo=r(U$e," \u2014 "),dX=n(U$e,"A",{href:!0});var upt=s(dX);pQo=r(upt,"XLMForQuestionAnsweringSimple"),upt.forEach(t),_Qo=r(U$e," (XLM model)"),U$e.forEach(t),bQo=i(X),H1=n(X,"LI",{});var J$e=s(H1);Fue=n(J$e,"STRONG",{});var ppt=s(Fue);vQo=r(ppt,"xlm-roberta"),ppt.forEach(t),FQo=r(J$e," \u2014 "),cX=n(J$e,"A",{href:!0});var _pt=s(cX);TQo=r(_pt,"XLMRobertaForQuestionAnswering"),_pt.forEach(t),MQo=r(J$e," (XLM-RoBERTa model)"),J$e.forEach(t),EQo=i(X),U1=n(X,"LI",{});var Y$e=s(U1);Tue=n(Y$e,"STRONG",{});var bpt=s(Tue);CQo=r(bpt,"xlm-roberta-xl"),bpt.forEach(t),wQo=r(Y$e," \u2014 "),mX=n(Y$e,"A",{href:!0});var vpt=s(mX);AQo=r(vpt,"XLMRobertaXLForQuestionAnswering"),vpt.forEach(t),yQo=r(Y$e," (XLM-RoBERTa-XL model)"),Y$e.forEach(t),LQo=i(X),J1=n(X,"LI",{});var K$e=s(J1);Mue=n(K$e,"STRONG",{});var Fpt=s(Mue);xQo=r(Fpt,"xlnet"),Fpt.forEach(t),$Qo=r(K$e," \u2014 "),fX=n(K$e,"A",{href:!0});var Tpt=s(fX);kQo=r(Tpt,"XLNetForQuestionAnsweringSimple"),Tpt.forEach(t),SQo=r(K$e," (XLNet model)"),K$e.forEach(t),RQo=i(X),Y1=n(X,"LI",{});var Z$e=s(Y1);Eue=n(Z$e,"STRONG",{});var Mpt=s(Eue);PQo=r(Mpt,"yoso"),Mpt.forEach(t),BQo=r(Z$e," \u2014 "),gX=n(Z$e,"A",{href:!0});var Ept=s(gX);IQo=r(Ept,"YosoForQuestionAnswering"),Ept.forEach(t),qQo=r(Z$e," (YOSO model)"),Z$e.forEach(t),X.forEach(t),NQo=i(ca),K1=n(ca,"P",{});var eke=s(K1);jQo=r(eke,"The model is set in evaluation mode by default using "),Cue=n(eke,"CODE",{});var Cpt=s(Cue);DQo=r(Cpt,"model.eval()"),Cpt.forEach(t),GQo=r(eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(eke,"CODE",{});var wpt=s(wue);OQo=r(wpt,"model.train()"),wpt.forEach(t),eke.forEach(t),VQo=i(ca),T(Z1.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),kNe=i(m),od=n(m,"H2",{class:!0});var BDe=s(od);eT=n(BDe,"A",{id:!0,class:!0,href:!0});var Apt=s(eT);Aue=n(Apt,"SPAN",{});var ypt=s(Aue);T(UL.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),XQo=i(BDe),yue=n(BDe,"SPAN",{});var Lpt=s(yue);zQo=r(Lpt,"AutoModelForTableQuestionAnswering"),Lpt.forEach(t),BDe.forEach(t),SNe=i(m),No=n(m,"DIV",{class:!0});var Ks=s(No);T(JL.$$.fragment,Ks),WQo=i(Ks),rd=n(Ks,"P",{});var BZ=s(rd);QQo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=n(BZ,"A",{href:!0});var xpt=s(hX);HQo=r(xpt,"from_pretrained()"),xpt.forEach(t),UQo=r(BZ," class method or the "),uX=n(BZ,"A",{href:!0});var $pt=s(uX);JQo=r($pt,"from_config()"),$pt.forEach(t),YQo=r(BZ,` class
method.`),BZ.forEach(t),KQo=i(Ks),YL=n(Ks,"P",{});var IDe=s(YL);ZQo=r(IDe,"This class cannot be instantiated directly using "),Lue=n(IDe,"CODE",{});var kpt=s(Lue);eHo=r(kpt,"__init__()"),kpt.forEach(t),oHo=r(IDe," (throws an error)."),IDe.forEach(t),rHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var YA=s(gt);T(KL.$$.fragment,YA),tHo=i(YA),xue=n(YA,"P",{});var Spt=s(xue);aHo=r(Spt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Spt.forEach(t),nHo=i(YA),td=n(YA,"P",{});var IZ=s(td);sHo=r(IZ,`Note:
Loading a model from its configuration file does `),$ue=n(IZ,"STRONG",{});var Rpt=s($ue);lHo=r(Rpt,"not"),Rpt.forEach(t),iHo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(IZ,"A",{href:!0});var Ppt=s(pX);dHo=r(Ppt,"from_pretrained()"),Ppt.forEach(t),cHo=r(IZ," to load the model weights."),IZ.forEach(t),mHo=i(YA),T(oT.$$.fragment,YA),YA.forEach(t),fHo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(ZL.$$.fragment,ma),gHo=i(ma),kue=n(ma,"P",{});var Bpt=s(kue);hHo=r(Bpt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Bpt.forEach(t),uHo=i(ma),Na=n(ma,"P",{});var KA=s(Na);pHo=r(KA,"The model class to instantiate is selected based on the "),Sue=n(KA,"CODE",{});var Ipt=s(Sue);_Ho=r(Ipt,"model_type"),Ipt.forEach(t),bHo=r(KA,` property of the config object (either
passed as an argument or loaded from `),Rue=n(KA,"CODE",{});var qpt=s(Rue);vHo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),FHo=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(KA,"CODE",{});var Npt=s(Pue);THo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),MHo=r(KA,":"),KA.forEach(t),EHo=i(ma),Bue=n(ma,"UL",{});var jpt=s(Bue);rT=n(jpt,"LI",{});var oke=s(rT);Iue=n(oke,"STRONG",{});var Dpt=s(Iue);CHo=r(Dpt,"tapas"),Dpt.forEach(t),wHo=r(oke," \u2014 "),_X=n(oke,"A",{href:!0});var Gpt=s(_X);AHo=r(Gpt,"TapasForQuestionAnswering"),Gpt.forEach(t),yHo=r(oke," (TAPAS model)"),oke.forEach(t),jpt.forEach(t),LHo=i(ma),tT=n(ma,"P",{});var rke=s(tT);xHo=r(rke,"The model is set in evaluation mode by default using "),que=n(rke,"CODE",{});var Opt=s(que);$Ho=r(Opt,"model.eval()"),Opt.forEach(t),kHo=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(rke,"CODE",{});var Vpt=s(Nue);SHo=r(Vpt,"model.train()"),Vpt.forEach(t),rke.forEach(t),RHo=i(ma),T(aT.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),RNe=i(m),ad=n(m,"H2",{class:!0});var qDe=s(ad);nT=n(qDe,"A",{id:!0,class:!0,href:!0});var Xpt=s(nT);jue=n(Xpt,"SPAN",{});var zpt=s(jue);T(e8.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),PHo=i(qDe),Due=n(qDe,"SPAN",{});var Wpt=s(Due);BHo=r(Wpt,"AutoModelForImageClassification"),Wpt.forEach(t),qDe.forEach(t),PNe=i(m),jo=n(m,"DIV",{class:!0});var Zs=s(jo);T(o8.$$.fragment,Zs),IHo=i(Zs),nd=n(Zs,"P",{});var qZ=s(nd);qHo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=n(qZ,"A",{href:!0});var Qpt=s(bX);NHo=r(Qpt,"from_pretrained()"),Qpt.forEach(t),jHo=r(qZ," class method or the "),vX=n(qZ,"A",{href:!0});var Hpt=s(vX);DHo=r(Hpt,"from_config()"),Hpt.forEach(t),GHo=r(qZ,` class
method.`),qZ.forEach(t),OHo=i(Zs),r8=n(Zs,"P",{});var NDe=s(r8);VHo=r(NDe,"This class cannot be instantiated directly using "),Gue=n(NDe,"CODE",{});var Upt=s(Gue);XHo=r(Upt,"__init__()"),Upt.forEach(t),zHo=r(NDe," (throws an error)."),NDe.forEach(t),WHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var ZA=s(ht);T(t8.$$.fragment,ZA),QHo=i(ZA),Oue=n(ZA,"P",{});var Jpt=s(Oue);HHo=r(Jpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jpt.forEach(t),UHo=i(ZA),sd=n(ZA,"P",{});var NZ=s(sd);JHo=r(NZ,`Note:
Loading a model from its configuration file does `),Vue=n(NZ,"STRONG",{});var Ypt=s(Vue);YHo=r(Ypt,"not"),Ypt.forEach(t),KHo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(NZ,"A",{href:!0});var Kpt=s(FX);ZHo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),eUo=r(NZ," to load the model weights."),NZ.forEach(t),oUo=i(ZA),T(sT.$$.fragment,ZA),ZA.forEach(t),rUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(a8.$$.fragment,fa),tUo=i(fa),Xue=n(fa,"P",{});var Zpt=s(Xue);aUo=r(Zpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zpt.forEach(t),nUo=i(fa),ja=n(fa,"P",{});var e6=s(ja);sUo=r(e6,"The model class to instantiate is selected based on the "),zue=n(e6,"CODE",{});var e_t=s(zue);lUo=r(e_t,"model_type"),e_t.forEach(t),iUo=r(e6,` property of the config object (either
passed as an argument or loaded from `),Wue=n(e6,"CODE",{});var o_t=s(Wue);dUo=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),cUo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(e6,"CODE",{});var r_t=s(Que);mUo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),fUo=r(e6,":"),e6.forEach(t),gUo=i(fa),Fe=n(fa,"UL",{});var Te=s(Fe);lT=n(Te,"LI",{});var tke=s(lT);Hue=n(tke,"STRONG",{});var t_t=s(Hue);hUo=r(t_t,"beit"),t_t.forEach(t),uUo=r(tke," \u2014 "),TX=n(tke,"A",{href:!0});var a_t=s(TX);pUo=r(a_t,"BeitForImageClassification"),a_t.forEach(t),_Uo=r(tke," (BEiT model)"),tke.forEach(t),bUo=i(Te),iT=n(Te,"LI",{});var ake=s(iT);Uue=n(ake,"STRONG",{});var n_t=s(Uue);vUo=r(n_t,"convnext"),n_t.forEach(t),FUo=r(ake," \u2014 "),MX=n(ake,"A",{href:!0});var s_t=s(MX);TUo=r(s_t,"ConvNextForImageClassification"),s_t.forEach(t),MUo=r(ake," (ConvNext model)"),ake.forEach(t),EUo=i(Te),dT=n(Te,"LI",{});var nke=s(dT);Jue=n(nke,"STRONG",{});var l_t=s(Jue);CUo=r(l_t,"cvt"),l_t.forEach(t),wUo=r(nke," \u2014 "),EX=n(nke,"A",{href:!0});var i_t=s(EX);AUo=r(i_t,"CvtForImageClassification"),i_t.forEach(t),yUo=r(nke," (CvT model)"),nke.forEach(t),LUo=i(Te),cT=n(Te,"LI",{});var ske=s(cT);Yue=n(ske,"STRONG",{});var d_t=s(Yue);xUo=r(d_t,"data2vec-vision"),d_t.forEach(t),$Uo=r(ske," \u2014 "),CX=n(ske,"A",{href:!0});var c_t=s(CX);kUo=r(c_t,"Data2VecVisionForImageClassification"),c_t.forEach(t),SUo=r(ske," (Data2VecVision model)"),ske.forEach(t),RUo=i(Te),Bs=n(Te,"LI",{});var V$=s(Bs);Kue=n(V$,"STRONG",{});var m_t=s(Kue);PUo=r(m_t,"deit"),m_t.forEach(t),BUo=r(V$," \u2014 "),wX=n(V$,"A",{href:!0});var f_t=s(wX);IUo=r(f_t,"DeiTForImageClassification"),f_t.forEach(t),qUo=r(V$," or "),AX=n(V$,"A",{href:!0});var g_t=s(AX);NUo=r(g_t,"DeiTForImageClassificationWithTeacher"),g_t.forEach(t),jUo=r(V$," (DeiT model)"),V$.forEach(t),DUo=i(Te),mT=n(Te,"LI",{});var lke=s(mT);Zue=n(lke,"STRONG",{});var h_t=s(Zue);GUo=r(h_t,"imagegpt"),h_t.forEach(t),OUo=r(lke," \u2014 "),yX=n(lke,"A",{href:!0});var u_t=s(yX);VUo=r(u_t,"ImageGPTForImageClassification"),u_t.forEach(t),XUo=r(lke," (ImageGPT model)"),lke.forEach(t),zUo=i(Te),ut=n(Te,"LI",{});var gm=s(ut);epe=n(gm,"STRONG",{});var p_t=s(epe);WUo=r(p_t,"perceiver"),p_t.forEach(t),QUo=r(gm," \u2014 "),LX=n(gm,"A",{href:!0});var __t=s(LX);HUo=r(__t,"PerceiverForImageClassificationLearned"),__t.forEach(t),UUo=r(gm," or "),xX=n(gm,"A",{href:!0});var b_t=s(xX);JUo=r(b_t,"PerceiverForImageClassificationFourier"),b_t.forEach(t),YUo=r(gm," or "),$X=n(gm,"A",{href:!0});var v_t=s($X);KUo=r(v_t,"PerceiverForImageClassificationConvProcessing"),v_t.forEach(t),ZUo=r(gm," (Perceiver model)"),gm.forEach(t),eJo=i(Te),fT=n(Te,"LI",{});var ike=s(fT);ope=n(ike,"STRONG",{});var F_t=s(ope);oJo=r(F_t,"poolformer"),F_t.forEach(t),rJo=r(ike," \u2014 "),kX=n(ike,"A",{href:!0});var T_t=s(kX);tJo=r(T_t,"PoolFormerForImageClassification"),T_t.forEach(t),aJo=r(ike," (PoolFormer model)"),ike.forEach(t),nJo=i(Te),gT=n(Te,"LI",{});var dke=s(gT);rpe=n(dke,"STRONG",{});var M_t=s(rpe);sJo=r(M_t,"regnet"),M_t.forEach(t),lJo=r(dke," \u2014 "),SX=n(dke,"A",{href:!0});var E_t=s(SX);iJo=r(E_t,"RegNetForImageClassification"),E_t.forEach(t),dJo=r(dke," (RegNet model)"),dke.forEach(t),cJo=i(Te),hT=n(Te,"LI",{});var cke=s(hT);tpe=n(cke,"STRONG",{});var C_t=s(tpe);mJo=r(C_t,"resnet"),C_t.forEach(t),fJo=r(cke," \u2014 "),RX=n(cke,"A",{href:!0});var w_t=s(RX);gJo=r(w_t,"ResNetForImageClassification"),w_t.forEach(t),hJo=r(cke," (ResNet model)"),cke.forEach(t),uJo=i(Te),uT=n(Te,"LI",{});var mke=s(uT);ape=n(mke,"STRONG",{});var A_t=s(ape);pJo=r(A_t,"segformer"),A_t.forEach(t),_Jo=r(mke," \u2014 "),PX=n(mke,"A",{href:!0});var y_t=s(PX);bJo=r(y_t,"SegformerForImageClassification"),y_t.forEach(t),vJo=r(mke," (SegFormer model)"),mke.forEach(t),FJo=i(Te),pT=n(Te,"LI",{});var fke=s(pT);npe=n(fke,"STRONG",{});var L_t=s(npe);TJo=r(L_t,"swin"),L_t.forEach(t),MJo=r(fke," \u2014 "),BX=n(fke,"A",{href:!0});var x_t=s(BX);EJo=r(x_t,"SwinForImageClassification"),x_t.forEach(t),CJo=r(fke," (Swin model)"),fke.forEach(t),wJo=i(Te),_T=n(Te,"LI",{});var gke=s(_T);spe=n(gke,"STRONG",{});var $_t=s(spe);AJo=r($_t,"van"),$_t.forEach(t),yJo=r(gke," \u2014 "),IX=n(gke,"A",{href:!0});var k_t=s(IX);LJo=r(k_t,"VanForImageClassification"),k_t.forEach(t),xJo=r(gke," (VAN model)"),gke.forEach(t),$Jo=i(Te),bT=n(Te,"LI",{});var hke=s(bT);lpe=n(hke,"STRONG",{});var S_t=s(lpe);kJo=r(S_t,"vit"),S_t.forEach(t),SJo=r(hke," \u2014 "),qX=n(hke,"A",{href:!0});var R_t=s(qX);RJo=r(R_t,"ViTForImageClassification"),R_t.forEach(t),PJo=r(hke," (ViT model)"),hke.forEach(t),Te.forEach(t),BJo=i(fa),vT=n(fa,"P",{});var uke=s(vT);IJo=r(uke,"The model is set in evaluation mode by default using "),ipe=n(uke,"CODE",{});var P_t=s(ipe);qJo=r(P_t,"model.eval()"),P_t.forEach(t),NJo=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=n(uke,"CODE",{});var B_t=s(dpe);jJo=r(B_t,"model.train()"),B_t.forEach(t),uke.forEach(t),DJo=i(fa),T(FT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),BNe=i(m),ld=n(m,"H2",{class:!0});var jDe=s(ld);TT=n(jDe,"A",{id:!0,class:!0,href:!0});var I_t=s(TT);cpe=n(I_t,"SPAN",{});var q_t=s(cpe);T(n8.$$.fragment,q_t),q_t.forEach(t),I_t.forEach(t),GJo=i(jDe),mpe=n(jDe,"SPAN",{});var N_t=s(mpe);OJo=r(N_t,"AutoModelForVision2Seq"),N_t.forEach(t),jDe.forEach(t),INe=i(m),Do=n(m,"DIV",{class:!0});var el=s(Do);T(s8.$$.fragment,el),VJo=i(el),id=n(el,"P",{});var jZ=s(id);XJo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NX=n(jZ,"A",{href:!0});var j_t=s(NX);zJo=r(j_t,"from_pretrained()"),j_t.forEach(t),WJo=r(jZ," class method or the "),jX=n(jZ,"A",{href:!0});var D_t=s(jX);QJo=r(D_t,"from_config()"),D_t.forEach(t),HJo=r(jZ,` class
method.`),jZ.forEach(t),UJo=i(el),l8=n(el,"P",{});var DDe=s(l8);JJo=r(DDe,"This class cannot be instantiated directly using "),fpe=n(DDe,"CODE",{});var G_t=s(fpe);YJo=r(G_t,"__init__()"),G_t.forEach(t),KJo=r(DDe," (throws an error)."),DDe.forEach(t),ZJo=i(el),pt=n(el,"DIV",{class:!0});var o6=s(pt);T(i8.$$.fragment,o6),eYo=i(o6),gpe=n(o6,"P",{});var O_t=s(gpe);oYo=r(O_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),O_t.forEach(t),rYo=i(o6),dd=n(o6,"P",{});var DZ=s(dd);tYo=r(DZ,`Note:
Loading a model from its configuration file does `),hpe=n(DZ,"STRONG",{});var V_t=s(hpe);aYo=r(V_t,"not"),V_t.forEach(t),nYo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(DZ,"A",{href:!0});var X_t=s(DX);sYo=r(X_t,"from_pretrained()"),X_t.forEach(t),lYo=r(DZ," to load the model weights."),DZ.forEach(t),iYo=i(o6),T(MT.$$.fragment,o6),o6.forEach(t),dYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(d8.$$.fragment,ga),cYo=i(ga),upe=n(ga,"P",{});var z_t=s(upe);mYo=r(z_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),z_t.forEach(t),fYo=i(ga),Da=n(ga,"P",{});var r6=s(Da);gYo=r(r6,"The model class to instantiate is selected based on the "),ppe=n(r6,"CODE",{});var W_t=s(ppe);hYo=r(W_t,"model_type"),W_t.forEach(t),uYo=r(r6,` property of the config object (either
passed as an argument or loaded from `),_pe=n(r6,"CODE",{});var Q_t=s(_pe);pYo=r(Q_t,"pretrained_model_name_or_path"),Q_t.forEach(t),_Yo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=n(r6,"CODE",{});var H_t=s(bpe);bYo=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),vYo=r(r6,":"),r6.forEach(t),FYo=i(ga),vpe=n(ga,"UL",{});var U_t=s(vpe);ET=n(U_t,"LI",{});var pke=s(ET);Fpe=n(pke,"STRONG",{});var J_t=s(Fpe);TYo=r(J_t,"vision-encoder-decoder"),J_t.forEach(t),MYo=r(pke," \u2014 "),GX=n(pke,"A",{href:!0});var Y_t=s(GX);EYo=r(Y_t,"VisionEncoderDecoderModel"),Y_t.forEach(t),CYo=r(pke," (Vision Encoder decoder model)"),pke.forEach(t),U_t.forEach(t),wYo=i(ga),CT=n(ga,"P",{});var _ke=s(CT);AYo=r(_ke,"The model is set in evaluation mode by default using "),Tpe=n(_ke,"CODE",{});var K_t=s(Tpe);yYo=r(K_t,"model.eval()"),K_t.forEach(t),LYo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=n(_ke,"CODE",{});var Z_t=s(Mpe);xYo=r(Z_t,"model.train()"),Z_t.forEach(t),_ke.forEach(t),$Yo=i(ga),T(wT.$$.fragment,ga),ga.forEach(t),el.forEach(t),qNe=i(m),cd=n(m,"H2",{class:!0});var GDe=s(cd);AT=n(GDe,"A",{id:!0,class:!0,href:!0});var ebt=s(AT);Epe=n(ebt,"SPAN",{});var obt=s(Epe);T(c8.$$.fragment,obt),obt.forEach(t),ebt.forEach(t),kYo=i(GDe),Cpe=n(GDe,"SPAN",{});var rbt=s(Cpe);SYo=r(rbt,"AutoModelForAudioClassification"),rbt.forEach(t),GDe.forEach(t),NNe=i(m),Go=n(m,"DIV",{class:!0});var ol=s(Go);T(m8.$$.fragment,ol),RYo=i(ol),md=n(ol,"P",{});var GZ=s(md);PYo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OX=n(GZ,"A",{href:!0});var tbt=s(OX);BYo=r(tbt,"from_pretrained()"),tbt.forEach(t),IYo=r(GZ," class method or the "),VX=n(GZ,"A",{href:!0});var abt=s(VX);qYo=r(abt,"from_config()"),abt.forEach(t),NYo=r(GZ,` class
method.`),GZ.forEach(t),jYo=i(ol),f8=n(ol,"P",{});var ODe=s(f8);DYo=r(ODe,"This class cannot be instantiated directly using "),wpe=n(ODe,"CODE",{});var nbt=s(wpe);GYo=r(nbt,"__init__()"),nbt.forEach(t),OYo=r(ODe," (throws an error)."),ODe.forEach(t),VYo=i(ol),_t=n(ol,"DIV",{class:!0});var t6=s(_t);T(g8.$$.fragment,t6),XYo=i(t6),Ape=n(t6,"P",{});var sbt=s(Ape);zYo=r(sbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sbt.forEach(t),WYo=i(t6),fd=n(t6,"P",{});var OZ=s(fd);QYo=r(OZ,`Note:
Loading a model from its configuration file does `),ype=n(OZ,"STRONG",{});var lbt=s(ype);HYo=r(lbt,"not"),lbt.forEach(t),UYo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(OZ,"A",{href:!0});var ibt=s(XX);JYo=r(ibt,"from_pretrained()"),ibt.forEach(t),YYo=r(OZ," to load the model weights."),OZ.forEach(t),KYo=i(t6),T(yT.$$.fragment,t6),t6.forEach(t),ZYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(h8.$$.fragment,ha),eKo=i(ha),Lpe=n(ha,"P",{});var dbt=s(Lpe);oKo=r(dbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dbt.forEach(t),rKo=i(ha),Ga=n(ha,"P",{});var a6=s(Ga);tKo=r(a6,"The model class to instantiate is selected based on the "),xpe=n(a6,"CODE",{});var cbt=s(xpe);aKo=r(cbt,"model_type"),cbt.forEach(t),nKo=r(a6,` property of the config object (either
passed as an argument or loaded from `),$pe=n(a6,"CODE",{});var mbt=s($pe);sKo=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),lKo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=n(a6,"CODE",{});var fbt=s(kpe);iKo=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),dKo=r(a6,":"),a6.forEach(t),cKo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);LT=n(Oe,"LI",{});var bke=s(LT);Spe=n(bke,"STRONG",{});var gbt=s(Spe);mKo=r(gbt,"data2vec-audio"),gbt.forEach(t),fKo=r(bke," \u2014 "),zX=n(bke,"A",{href:!0});var hbt=s(zX);gKo=r(hbt,"Data2VecAudioForSequenceClassification"),hbt.forEach(t),hKo=r(bke," (Data2VecAudio model)"),bke.forEach(t),uKo=i(Oe),xT=n(Oe,"LI",{});var vke=s(xT);Rpe=n(vke,"STRONG",{});var ubt=s(Rpe);pKo=r(ubt,"hubert"),ubt.forEach(t),_Ko=r(vke," \u2014 "),WX=n(vke,"A",{href:!0});var pbt=s(WX);bKo=r(pbt,"HubertForSequenceClassification"),pbt.forEach(t),vKo=r(vke," (Hubert model)"),vke.forEach(t),FKo=i(Oe),$T=n(Oe,"LI",{});var Fke=s($T);Ppe=n(Fke,"STRONG",{});var _bt=s(Ppe);TKo=r(_bt,"sew"),_bt.forEach(t),MKo=r(Fke," \u2014 "),QX=n(Fke,"A",{href:!0});var bbt=s(QX);EKo=r(bbt,"SEWForSequenceClassification"),bbt.forEach(t),CKo=r(Fke," (SEW model)"),Fke.forEach(t),wKo=i(Oe),kT=n(Oe,"LI",{});var Tke=s(kT);Bpe=n(Tke,"STRONG",{});var vbt=s(Bpe);AKo=r(vbt,"sew-d"),vbt.forEach(t),yKo=r(Tke," \u2014 "),HX=n(Tke,"A",{href:!0});var Fbt=s(HX);LKo=r(Fbt,"SEWDForSequenceClassification"),Fbt.forEach(t),xKo=r(Tke," (SEW-D model)"),Tke.forEach(t),$Ko=i(Oe),ST=n(Oe,"LI",{});var Mke=s(ST);Ipe=n(Mke,"STRONG",{});var Tbt=s(Ipe);kKo=r(Tbt,"unispeech"),Tbt.forEach(t),SKo=r(Mke," \u2014 "),UX=n(Mke,"A",{href:!0});var Mbt=s(UX);RKo=r(Mbt,"UniSpeechForSequenceClassification"),Mbt.forEach(t),PKo=r(Mke," (UniSpeech model)"),Mke.forEach(t),BKo=i(Oe),RT=n(Oe,"LI",{});var Eke=s(RT);qpe=n(Eke,"STRONG",{});var Ebt=s(qpe);IKo=r(Ebt,"unispeech-sat"),Ebt.forEach(t),qKo=r(Eke," \u2014 "),JX=n(Eke,"A",{href:!0});var Cbt=s(JX);NKo=r(Cbt,"UniSpeechSatForSequenceClassification"),Cbt.forEach(t),jKo=r(Eke," (UniSpeechSat model)"),Eke.forEach(t),DKo=i(Oe),PT=n(Oe,"LI",{});var Cke=s(PT);Npe=n(Cke,"STRONG",{});var wbt=s(Npe);GKo=r(wbt,"wav2vec2"),wbt.forEach(t),OKo=r(Cke," \u2014 "),YX=n(Cke,"A",{href:!0});var Abt=s(YX);VKo=r(Abt,"Wav2Vec2ForSequenceClassification"),Abt.forEach(t),XKo=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),zKo=i(Oe),BT=n(Oe,"LI",{});var wke=s(BT);jpe=n(wke,"STRONG",{});var ybt=s(jpe);WKo=r(ybt,"wav2vec2-conformer"),ybt.forEach(t),QKo=r(wke," \u2014 "),KX=n(wke,"A",{href:!0});var Lbt=s(KX);HKo=r(Lbt,"Wav2Vec2ConformerForSequenceClassification"),Lbt.forEach(t),UKo=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),JKo=i(Oe),IT=n(Oe,"LI",{});var Ake=s(IT);Dpe=n(Ake,"STRONG",{});var xbt=s(Dpe);YKo=r(xbt,"wavlm"),xbt.forEach(t),KKo=r(Ake," \u2014 "),ZX=n(Ake,"A",{href:!0});var $bt=s(ZX);ZKo=r($bt,"WavLMForSequenceClassification"),$bt.forEach(t),eZo=r(Ake," (WavLM model)"),Ake.forEach(t),Oe.forEach(t),oZo=i(ha),qT=n(ha,"P",{});var yke=s(qT);rZo=r(yke,"The model is set in evaluation mode by default using "),Gpe=n(yke,"CODE",{});var kbt=s(Gpe);tZo=r(kbt,"model.eval()"),kbt.forEach(t),aZo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=n(yke,"CODE",{});var Sbt=s(Ope);nZo=r(Sbt,"model.train()"),Sbt.forEach(t),yke.forEach(t),sZo=i(ha),T(NT.$$.fragment,ha),ha.forEach(t),ol.forEach(t),jNe=i(m),gd=n(m,"H2",{class:!0});var VDe=s(gd);jT=n(VDe,"A",{id:!0,class:!0,href:!0});var Rbt=s(jT);Vpe=n(Rbt,"SPAN",{});var Pbt=s(Vpe);T(u8.$$.fragment,Pbt),Pbt.forEach(t),Rbt.forEach(t),lZo=i(VDe),Xpe=n(VDe,"SPAN",{});var Bbt=s(Xpe);iZo=r(Bbt,"AutoModelForAudioFrameClassification"),Bbt.forEach(t),VDe.forEach(t),DNe=i(m),Oo=n(m,"DIV",{class:!0});var rl=s(Oo);T(p8.$$.fragment,rl),dZo=i(rl),hd=n(rl,"P",{});var VZ=s(hd);cZo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ez=n(VZ,"A",{href:!0});var Ibt=s(ez);mZo=r(Ibt,"from_pretrained()"),Ibt.forEach(t),fZo=r(VZ," class method or the "),oz=n(VZ,"A",{href:!0});var qbt=s(oz);gZo=r(qbt,"from_config()"),qbt.forEach(t),hZo=r(VZ,` class
method.`),VZ.forEach(t),uZo=i(rl),_8=n(rl,"P",{});var XDe=s(_8);pZo=r(XDe,"This class cannot be instantiated directly using "),zpe=n(XDe,"CODE",{});var Nbt=s(zpe);_Zo=r(Nbt,"__init__()"),Nbt.forEach(t),bZo=r(XDe," (throws an error)."),XDe.forEach(t),vZo=i(rl),bt=n(rl,"DIV",{class:!0});var n6=s(bt);T(b8.$$.fragment,n6),FZo=i(n6),Wpe=n(n6,"P",{});var jbt=s(Wpe);TZo=r(jbt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jbt.forEach(t),MZo=i(n6),ud=n(n6,"P",{});var XZ=s(ud);EZo=r(XZ,`Note:
Loading a model from its configuration file does `),Qpe=n(XZ,"STRONG",{});var Dbt=s(Qpe);CZo=r(Dbt,"not"),Dbt.forEach(t),wZo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(XZ,"A",{href:!0});var Gbt=s(rz);AZo=r(Gbt,"from_pretrained()"),Gbt.forEach(t),yZo=r(XZ," to load the model weights."),XZ.forEach(t),LZo=i(n6),T(DT.$$.fragment,n6),n6.forEach(t),xZo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(v8.$$.fragment,ua),$Zo=i(ua),Hpe=n(ua,"P",{});var Obt=s(Hpe);kZo=r(Obt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Obt.forEach(t),SZo=i(ua),Oa=n(ua,"P",{});var s6=s(Oa);RZo=r(s6,"The model class to instantiate is selected based on the "),Upe=n(s6,"CODE",{});var Vbt=s(Upe);PZo=r(Vbt,"model_type"),Vbt.forEach(t),BZo=r(s6,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(s6,"CODE",{});var Xbt=s(Jpe);IZo=r(Xbt,"pretrained_model_name_or_path"),Xbt.forEach(t),qZo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(s6,"CODE",{});var zbt=s(Ype);NZo=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),jZo=r(s6,":"),s6.forEach(t),DZo=i(ua),Kr=n(ua,"UL",{});var tl=s(Kr);GT=n(tl,"LI",{});var Lke=s(GT);Kpe=n(Lke,"STRONG",{});var Wbt=s(Kpe);GZo=r(Wbt,"data2vec-audio"),Wbt.forEach(t),OZo=r(Lke," \u2014 "),tz=n(Lke,"A",{href:!0});var Qbt=s(tz);VZo=r(Qbt,"Data2VecAudioForAudioFrameClassification"),Qbt.forEach(t),XZo=r(Lke," (Data2VecAudio model)"),Lke.forEach(t),zZo=i(tl),OT=n(tl,"LI",{});var xke=s(OT);Zpe=n(xke,"STRONG",{});var Hbt=s(Zpe);WZo=r(Hbt,"unispeech-sat"),Hbt.forEach(t),QZo=r(xke," \u2014 "),az=n(xke,"A",{href:!0});var Ubt=s(az);HZo=r(Ubt,"UniSpeechSatForAudioFrameClassification"),Ubt.forEach(t),UZo=r(xke," (UniSpeechSat model)"),xke.forEach(t),JZo=i(tl),VT=n(tl,"LI",{});var $ke=s(VT);e_e=n($ke,"STRONG",{});var Jbt=s(e_e);YZo=r(Jbt,"wav2vec2"),Jbt.forEach(t),KZo=r($ke," \u2014 "),nz=n($ke,"A",{href:!0});var Ybt=s(nz);ZZo=r(Ybt,"Wav2Vec2ForAudioFrameClassification"),Ybt.forEach(t),eer=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),oer=i(tl),XT=n(tl,"LI",{});var kke=s(XT);o_e=n(kke,"STRONG",{});var Kbt=s(o_e);rer=r(Kbt,"wav2vec2-conformer"),Kbt.forEach(t),ter=r(kke," \u2014 "),sz=n(kke,"A",{href:!0});var Zbt=s(sz);aer=r(Zbt,"Wav2Vec2ConformerForAudioFrameClassification"),Zbt.forEach(t),ner=r(kke," (Wav2Vec2-Conformer model)"),kke.forEach(t),ser=i(tl),zT=n(tl,"LI",{});var Ske=s(zT);r_e=n(Ske,"STRONG",{});var e2t=s(r_e);ler=r(e2t,"wavlm"),e2t.forEach(t),ier=r(Ske," \u2014 "),lz=n(Ske,"A",{href:!0});var o2t=s(lz);der=r(o2t,"WavLMForAudioFrameClassification"),o2t.forEach(t),cer=r(Ske," (WavLM model)"),Ske.forEach(t),tl.forEach(t),mer=i(ua),WT=n(ua,"P",{});var Rke=s(WT);fer=r(Rke,"The model is set in evaluation mode by default using "),t_e=n(Rke,"CODE",{});var r2t=s(t_e);ger=r(r2t,"model.eval()"),r2t.forEach(t),her=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(Rke,"CODE",{});var t2t=s(a_e);uer=r(t2t,"model.train()"),t2t.forEach(t),Rke.forEach(t),per=i(ua),T(QT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),GNe=i(m),pd=n(m,"H2",{class:!0});var zDe=s(pd);HT=n(zDe,"A",{id:!0,class:!0,href:!0});var a2t=s(HT);n_e=n(a2t,"SPAN",{});var n2t=s(n_e);T(F8.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),_er=i(zDe),s_e=n(zDe,"SPAN",{});var s2t=s(s_e);ber=r(s2t,"AutoModelForCTC"),s2t.forEach(t),zDe.forEach(t),ONe=i(m),Vo=n(m,"DIV",{class:!0});var al=s(Vo);T(T8.$$.fragment,al),ver=i(al),_d=n(al,"P",{});var zZ=s(_d);Fer=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iz=n(zZ,"A",{href:!0});var l2t=s(iz);Ter=r(l2t,"from_pretrained()"),l2t.forEach(t),Mer=r(zZ," class method or the "),dz=n(zZ,"A",{href:!0});var i2t=s(dz);Eer=r(i2t,"from_config()"),i2t.forEach(t),Cer=r(zZ,` class
method.`),zZ.forEach(t),wer=i(al),M8=n(al,"P",{});var WDe=s(M8);Aer=r(WDe,"This class cannot be instantiated directly using "),l_e=n(WDe,"CODE",{});var d2t=s(l_e);yer=r(d2t,"__init__()"),d2t.forEach(t),Ler=r(WDe," (throws an error)."),WDe.forEach(t),xer=i(al),vt=n(al,"DIV",{class:!0});var l6=s(vt);T(E8.$$.fragment,l6),$er=i(l6),i_e=n(l6,"P",{});var c2t=s(i_e);ker=r(c2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),c2t.forEach(t),Ser=i(l6),bd=n(l6,"P",{});var WZ=s(bd);Rer=r(WZ,`Note:
Loading a model from its configuration file does `),d_e=n(WZ,"STRONG",{});var m2t=s(d_e);Per=r(m2t,"not"),m2t.forEach(t),Ber=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(WZ,"A",{href:!0});var f2t=s(cz);Ier=r(f2t,"from_pretrained()"),f2t.forEach(t),qer=r(WZ," to load the model weights."),WZ.forEach(t),Ner=i(l6),T(UT.$$.fragment,l6),l6.forEach(t),jer=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(C8.$$.fragment,pa),Der=i(pa),c_e=n(pa,"P",{});var g2t=s(c_e);Ger=r(g2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),g2t.forEach(t),Oer=i(pa),Va=n(pa,"P",{});var i6=s(Va);Ver=r(i6,"The model class to instantiate is selected based on the "),m_e=n(i6,"CODE",{});var h2t=s(m_e);Xer=r(h2t,"model_type"),h2t.forEach(t),zer=r(i6,` property of the config object (either
passed as an argument or loaded from `),f_e=n(i6,"CODE",{});var u2t=s(f_e);Wer=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),Qer=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(i6,"CODE",{});var p2t=s(g_e);Her=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),Uer=r(i6,":"),i6.forEach(t),Jer=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);JT=n(Ve,"LI",{});var Pke=s(JT);h_e=n(Pke,"STRONG",{});var _2t=s(h_e);Yer=r(_2t,"data2vec-audio"),_2t.forEach(t),Ker=r(Pke," \u2014 "),mz=n(Pke,"A",{href:!0});var b2t=s(mz);Zer=r(b2t,"Data2VecAudioForCTC"),b2t.forEach(t),eor=r(Pke," (Data2VecAudio model)"),Pke.forEach(t),oor=i(Ve),YT=n(Ve,"LI",{});var Bke=s(YT);u_e=n(Bke,"STRONG",{});var v2t=s(u_e);ror=r(v2t,"hubert"),v2t.forEach(t),tor=r(Bke," \u2014 "),fz=n(Bke,"A",{href:!0});var F2t=s(fz);aor=r(F2t,"HubertForCTC"),F2t.forEach(t),nor=r(Bke," (Hubert model)"),Bke.forEach(t),sor=i(Ve),KT=n(Ve,"LI",{});var Ike=s(KT);p_e=n(Ike,"STRONG",{});var T2t=s(p_e);lor=r(T2t,"sew"),T2t.forEach(t),ior=r(Ike," \u2014 "),gz=n(Ike,"A",{href:!0});var M2t=s(gz);dor=r(M2t,"SEWForCTC"),M2t.forEach(t),cor=r(Ike," (SEW model)"),Ike.forEach(t),mor=i(Ve),ZT=n(Ve,"LI",{});var qke=s(ZT);__e=n(qke,"STRONG",{});var E2t=s(__e);gor=r(E2t,"sew-d"),E2t.forEach(t),hor=r(qke," \u2014 "),hz=n(qke,"A",{href:!0});var C2t=s(hz);uor=r(C2t,"SEWDForCTC"),C2t.forEach(t),por=r(qke," (SEW-D model)"),qke.forEach(t),_or=i(Ve),eM=n(Ve,"LI",{});var Nke=s(eM);b_e=n(Nke,"STRONG",{});var w2t=s(b_e);bor=r(w2t,"unispeech"),w2t.forEach(t),vor=r(Nke," \u2014 "),uz=n(Nke,"A",{href:!0});var A2t=s(uz);For=r(A2t,"UniSpeechForCTC"),A2t.forEach(t),Tor=r(Nke," (UniSpeech model)"),Nke.forEach(t),Mor=i(Ve),oM=n(Ve,"LI",{});var jke=s(oM);v_e=n(jke,"STRONG",{});var y2t=s(v_e);Eor=r(y2t,"unispeech-sat"),y2t.forEach(t),Cor=r(jke," \u2014 "),pz=n(jke,"A",{href:!0});var L2t=s(pz);wor=r(L2t,"UniSpeechSatForCTC"),L2t.forEach(t),Aor=r(jke," (UniSpeechSat model)"),jke.forEach(t),yor=i(Ve),rM=n(Ve,"LI",{});var Dke=s(rM);F_e=n(Dke,"STRONG",{});var x2t=s(F_e);Lor=r(x2t,"wav2vec2"),x2t.forEach(t),xor=r(Dke," \u2014 "),_z=n(Dke,"A",{href:!0});var $2t=s(_z);$or=r($2t,"Wav2Vec2ForCTC"),$2t.forEach(t),kor=r(Dke," (Wav2Vec2 model)"),Dke.forEach(t),Sor=i(Ve),tM=n(Ve,"LI",{});var Gke=s(tM);T_e=n(Gke,"STRONG",{});var k2t=s(T_e);Ror=r(k2t,"wav2vec2-conformer"),k2t.forEach(t),Por=r(Gke," \u2014 "),bz=n(Gke,"A",{href:!0});var S2t=s(bz);Bor=r(S2t,"Wav2Vec2ConformerForCTC"),S2t.forEach(t),Ior=r(Gke," (Wav2Vec2-Conformer model)"),Gke.forEach(t),qor=i(Ve),aM=n(Ve,"LI",{});var Oke=s(aM);M_e=n(Oke,"STRONG",{});var R2t=s(M_e);Nor=r(R2t,"wavlm"),R2t.forEach(t),jor=r(Oke," \u2014 "),vz=n(Oke,"A",{href:!0});var P2t=s(vz);Dor=r(P2t,"WavLMForCTC"),P2t.forEach(t),Gor=r(Oke," (WavLM model)"),Oke.forEach(t),Ve.forEach(t),Oor=i(pa),nM=n(pa,"P",{});var Vke=s(nM);Vor=r(Vke,"The model is set in evaluation mode by default using "),E_e=n(Vke,"CODE",{});var B2t=s(E_e);Xor=r(B2t,"model.eval()"),B2t.forEach(t),zor=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(Vke,"CODE",{});var I2t=s(C_e);Wor=r(I2t,"model.train()"),I2t.forEach(t),Vke.forEach(t),Qor=i(pa),T(sM.$$.fragment,pa),pa.forEach(t),al.forEach(t),VNe=i(m),vd=n(m,"H2",{class:!0});var QDe=s(vd);lM=n(QDe,"A",{id:!0,class:!0,href:!0});var q2t=s(lM);w_e=n(q2t,"SPAN",{});var N2t=s(w_e);T(w8.$$.fragment,N2t),N2t.forEach(t),q2t.forEach(t),Hor=i(QDe),A_e=n(QDe,"SPAN",{});var j2t=s(A_e);Uor=r(j2t,"AutoModelForSpeechSeq2Seq"),j2t.forEach(t),QDe.forEach(t),XNe=i(m),Xo=n(m,"DIV",{class:!0});var nl=s(Xo);T(A8.$$.fragment,nl),Jor=i(nl),Fd=n(nl,"P",{});var QZ=s(Fd);Yor=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fz=n(QZ,"A",{href:!0});var D2t=s(Fz);Kor=r(D2t,"from_pretrained()"),D2t.forEach(t),Zor=r(QZ," class method or the "),Tz=n(QZ,"A",{href:!0});var G2t=s(Tz);err=r(G2t,"from_config()"),G2t.forEach(t),orr=r(QZ,` class
method.`),QZ.forEach(t),rrr=i(nl),y8=n(nl,"P",{});var HDe=s(y8);trr=r(HDe,"This class cannot be instantiated directly using "),y_e=n(HDe,"CODE",{});var O2t=s(y_e);arr=r(O2t,"__init__()"),O2t.forEach(t),nrr=r(HDe," (throws an error)."),HDe.forEach(t),srr=i(nl),Ft=n(nl,"DIV",{class:!0});var d6=s(Ft);T(L8.$$.fragment,d6),lrr=i(d6),L_e=n(d6,"P",{});var V2t=s(L_e);irr=r(V2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),V2t.forEach(t),drr=i(d6),Td=n(d6,"P",{});var HZ=s(Td);crr=r(HZ,`Note:
Loading a model from its configuration file does `),x_e=n(HZ,"STRONG",{});var X2t=s(x_e);mrr=r(X2t,"not"),X2t.forEach(t),frr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(HZ,"A",{href:!0});var z2t=s(Mz);grr=r(z2t,"from_pretrained()"),z2t.forEach(t),hrr=r(HZ," to load the model weights."),HZ.forEach(t),urr=i(d6),T(iM.$$.fragment,d6),d6.forEach(t),prr=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(x8.$$.fragment,_a),_rr=i(_a),$_e=n(_a,"P",{});var W2t=s($_e);brr=r(W2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W2t.forEach(t),vrr=i(_a),Xa=n(_a,"P",{});var c6=s(Xa);Frr=r(c6,"The model class to instantiate is selected based on the "),k_e=n(c6,"CODE",{});var Q2t=s(k_e);Trr=r(Q2t,"model_type"),Q2t.forEach(t),Mrr=r(c6,` property of the config object (either
passed as an argument or loaded from `),S_e=n(c6,"CODE",{});var H2t=s(S_e);Err=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),Crr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(c6,"CODE",{});var U2t=s(R_e);wrr=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),Arr=r(c6,":"),c6.forEach(t),yrr=i(_a),$8=n(_a,"UL",{});var UDe=s($8);dM=n(UDe,"LI",{});var Xke=s(dM);P_e=n(Xke,"STRONG",{});var J2t=s(P_e);Lrr=r(J2t,"speech-encoder-decoder"),J2t.forEach(t),xrr=r(Xke," \u2014 "),Ez=n(Xke,"A",{href:!0});var Y2t=s(Ez);$rr=r(Y2t,"SpeechEncoderDecoderModel"),Y2t.forEach(t),krr=r(Xke," (Speech Encoder decoder model)"),Xke.forEach(t),Srr=i(UDe),cM=n(UDe,"LI",{});var zke=s(cM);B_e=n(zke,"STRONG",{});var K2t=s(B_e);Rrr=r(K2t,"speech_to_text"),K2t.forEach(t),Prr=r(zke," \u2014 "),Cz=n(zke,"A",{href:!0});var Z2t=s(Cz);Brr=r(Z2t,"Speech2TextForConditionalGeneration"),Z2t.forEach(t),Irr=r(zke," (Speech2Text model)"),zke.forEach(t),UDe.forEach(t),qrr=i(_a),mM=n(_a,"P",{});var Wke=s(mM);Nrr=r(Wke,"The model is set in evaluation mode by default using "),I_e=n(Wke,"CODE",{});var evt=s(I_e);jrr=r(evt,"model.eval()"),evt.forEach(t),Drr=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(Wke,"CODE",{});var ovt=s(q_e);Grr=r(ovt,"model.train()"),ovt.forEach(t),Wke.forEach(t),Orr=i(_a),T(fM.$$.fragment,_a),_a.forEach(t),nl.forEach(t),zNe=i(m),Md=n(m,"H2",{class:!0});var JDe=s(Md);gM=n(JDe,"A",{id:!0,class:!0,href:!0});var rvt=s(gM);N_e=n(rvt,"SPAN",{});var tvt=s(N_e);T(k8.$$.fragment,tvt),tvt.forEach(t),rvt.forEach(t),Vrr=i(JDe),j_e=n(JDe,"SPAN",{});var avt=s(j_e);Xrr=r(avt,"AutoModelForAudioXVector"),avt.forEach(t),JDe.forEach(t),WNe=i(m),zo=n(m,"DIV",{class:!0});var sl=s(zo);T(S8.$$.fragment,sl),zrr=i(sl),Ed=n(sl,"P",{});var UZ=s(Ed);Wrr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wz=n(UZ,"A",{href:!0});var nvt=s(wz);Qrr=r(nvt,"from_pretrained()"),nvt.forEach(t),Hrr=r(UZ," class method or the "),Az=n(UZ,"A",{href:!0});var svt=s(Az);Urr=r(svt,"from_config()"),svt.forEach(t),Jrr=r(UZ,` class
method.`),UZ.forEach(t),Yrr=i(sl),R8=n(sl,"P",{});var YDe=s(R8);Krr=r(YDe,"This class cannot be instantiated directly using "),D_e=n(YDe,"CODE",{});var lvt=s(D_e);Zrr=r(lvt,"__init__()"),lvt.forEach(t),etr=r(YDe," (throws an error)."),YDe.forEach(t),otr=i(sl),Tt=n(sl,"DIV",{class:!0});var m6=s(Tt);T(P8.$$.fragment,m6),rtr=i(m6),G_e=n(m6,"P",{});var ivt=s(G_e);ttr=r(ivt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ivt.forEach(t),atr=i(m6),Cd=n(m6,"P",{});var JZ=s(Cd);ntr=r(JZ,`Note:
Loading a model from its configuration file does `),O_e=n(JZ,"STRONG",{});var dvt=s(O_e);str=r(dvt,"not"),dvt.forEach(t),ltr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(JZ,"A",{href:!0});var cvt=s(yz);itr=r(cvt,"from_pretrained()"),cvt.forEach(t),dtr=r(JZ," to load the model weights."),JZ.forEach(t),ctr=i(m6),T(hM.$$.fragment,m6),m6.forEach(t),mtr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(B8.$$.fragment,ba),ftr=i(ba),V_e=n(ba,"P",{});var mvt=s(V_e);gtr=r(mvt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mvt.forEach(t),htr=i(ba),za=n(ba,"P",{});var f6=s(za);utr=r(f6,"The model class to instantiate is selected based on the "),X_e=n(f6,"CODE",{});var fvt=s(X_e);ptr=r(fvt,"model_type"),fvt.forEach(t),_tr=r(f6,` property of the config object (either
passed as an argument or loaded from `),z_e=n(f6,"CODE",{});var gvt=s(z_e);btr=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),vtr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(f6,"CODE",{});var hvt=s(W_e);Ftr=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),Ttr=r(f6,":"),f6.forEach(t),Mtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);uM=n(ll,"LI",{});var Qke=s(uM);Q_e=n(Qke,"STRONG",{});var uvt=s(Q_e);Etr=r(uvt,"data2vec-audio"),uvt.forEach(t),Ctr=r(Qke," \u2014 "),Lz=n(Qke,"A",{href:!0});var pvt=s(Lz);wtr=r(pvt,"Data2VecAudioForXVector"),pvt.forEach(t),Atr=r(Qke," (Data2VecAudio model)"),Qke.forEach(t),ytr=i(ll),pM=n(ll,"LI",{});var Hke=s(pM);H_e=n(Hke,"STRONG",{});var _vt=s(H_e);Ltr=r(_vt,"unispeech-sat"),_vt.forEach(t),xtr=r(Hke," \u2014 "),xz=n(Hke,"A",{href:!0});var bvt=s(xz);$tr=r(bvt,"UniSpeechSatForXVector"),bvt.forEach(t),ktr=r(Hke," (UniSpeechSat model)"),Hke.forEach(t),Str=i(ll),_M=n(ll,"LI",{});var Uke=s(_M);U_e=n(Uke,"STRONG",{});var vvt=s(U_e);Rtr=r(vvt,"wav2vec2"),vvt.forEach(t),Ptr=r(Uke," \u2014 "),$z=n(Uke,"A",{href:!0});var Fvt=s($z);Btr=r(Fvt,"Wav2Vec2ForXVector"),Fvt.forEach(t),Itr=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),qtr=i(ll),bM=n(ll,"LI",{});var Jke=s(bM);J_e=n(Jke,"STRONG",{});var Tvt=s(J_e);Ntr=r(Tvt,"wav2vec2-conformer"),Tvt.forEach(t),jtr=r(Jke," \u2014 "),kz=n(Jke,"A",{href:!0});var Mvt=s(kz);Dtr=r(Mvt,"Wav2Vec2ConformerForXVector"),Mvt.forEach(t),Gtr=r(Jke," (Wav2Vec2-Conformer model)"),Jke.forEach(t),Otr=i(ll),vM=n(ll,"LI",{});var Yke=s(vM);Y_e=n(Yke,"STRONG",{});var Evt=s(Y_e);Vtr=r(Evt,"wavlm"),Evt.forEach(t),Xtr=r(Yke," \u2014 "),Sz=n(Yke,"A",{href:!0});var Cvt=s(Sz);ztr=r(Cvt,"WavLMForXVector"),Cvt.forEach(t),Wtr=r(Yke," (WavLM model)"),Yke.forEach(t),ll.forEach(t),Qtr=i(ba),FM=n(ba,"P",{});var Kke=s(FM);Htr=r(Kke,"The model is set in evaluation mode by default using "),K_e=n(Kke,"CODE",{});var wvt=s(K_e);Utr=r(wvt,"model.eval()"),wvt.forEach(t),Jtr=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Kke,"CODE",{});var Avt=s(Z_e);Ytr=r(Avt,"model.train()"),Avt.forEach(t),Kke.forEach(t),Ktr=i(ba),T(TM.$$.fragment,ba),ba.forEach(t),sl.forEach(t),QNe=i(m),wd=n(m,"H2",{class:!0});var KDe=s(wd);MM=n(KDe,"A",{id:!0,class:!0,href:!0});var yvt=s(MM);ebe=n(yvt,"SPAN",{});var Lvt=s(ebe);T(I8.$$.fragment,Lvt),Lvt.forEach(t),yvt.forEach(t),Ztr=i(KDe),obe=n(KDe,"SPAN",{});var xvt=s(obe);ear=r(xvt,"AutoModelForMaskedImageModeling"),xvt.forEach(t),KDe.forEach(t),HNe=i(m),Wo=n(m,"DIV",{class:!0});var il=s(Wo);T(q8.$$.fragment,il),oar=i(il),Ad=n(il,"P",{});var YZ=s(Ad);rar=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rz=n(YZ,"A",{href:!0});var $vt=s(Rz);tar=r($vt,"from_pretrained()"),$vt.forEach(t),aar=r(YZ," class method or the "),Pz=n(YZ,"A",{href:!0});var kvt=s(Pz);nar=r(kvt,"from_config()"),kvt.forEach(t),sar=r(YZ,` class
method.`),YZ.forEach(t),lar=i(il),N8=n(il,"P",{});var ZDe=s(N8);iar=r(ZDe,"This class cannot be instantiated directly using "),rbe=n(ZDe,"CODE",{});var Svt=s(rbe);dar=r(Svt,"__init__()"),Svt.forEach(t),car=r(ZDe," (throws an error)."),ZDe.forEach(t),mar=i(il),Mt=n(il,"DIV",{class:!0});var g6=s(Mt);T(j8.$$.fragment,g6),far=i(g6),tbe=n(g6,"P",{});var Rvt=s(tbe);gar=r(Rvt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rvt.forEach(t),har=i(g6),yd=n(g6,"P",{});var KZ=s(yd);uar=r(KZ,`Note:
Loading a model from its configuration file does `),abe=n(KZ,"STRONG",{});var Pvt=s(abe);par=r(Pvt,"not"),Pvt.forEach(t),_ar=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(KZ,"A",{href:!0});var Bvt=s(Bz);bar=r(Bvt,"from_pretrained()"),Bvt.forEach(t),Far=r(KZ," to load the model weights."),KZ.forEach(t),Tar=i(g6),T(EM.$$.fragment,g6),g6.forEach(t),Mar=i(il),uo=n(il,"DIV",{class:!0});var va=s(uo);T(D8.$$.fragment,va),Ear=i(va),nbe=n(va,"P",{});var Ivt=s(nbe);Car=r(Ivt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ivt.forEach(t),war=i(va),Wa=n(va,"P",{});var h6=s(Wa);Aar=r(h6,"The model class to instantiate is selected based on the "),sbe=n(h6,"CODE",{});var qvt=s(sbe);yar=r(qvt,"model_type"),qvt.forEach(t),Lar=r(h6,` property of the config object (either
passed as an argument or loaded from `),lbe=n(h6,"CODE",{});var Nvt=s(lbe);xar=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),$ar=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(h6,"CODE",{});var jvt=s(ibe);kar=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),Sar=r(h6,":"),h6.forEach(t),Rar=i(va),Ld=n(va,"UL",{});var ZZ=s(Ld);CM=n(ZZ,"LI",{});var Zke=s(CM);dbe=n(Zke,"STRONG",{});var Dvt=s(dbe);Par=r(Dvt,"deit"),Dvt.forEach(t),Bar=r(Zke," \u2014 "),Iz=n(Zke,"A",{href:!0});var Gvt=s(Iz);Iar=r(Gvt,"DeiTForMaskedImageModeling"),Gvt.forEach(t),qar=r(Zke," (DeiT model)"),Zke.forEach(t),Nar=i(ZZ),wM=n(ZZ,"LI",{});var eSe=s(wM);cbe=n(eSe,"STRONG",{});var Ovt=s(cbe);jar=r(Ovt,"swin"),Ovt.forEach(t),Dar=r(eSe," \u2014 "),qz=n(eSe,"A",{href:!0});var Vvt=s(qz);Gar=r(Vvt,"SwinForMaskedImageModeling"),Vvt.forEach(t),Oar=r(eSe," (Swin model)"),eSe.forEach(t),Var=i(ZZ),AM=n(ZZ,"LI",{});var oSe=s(AM);mbe=n(oSe,"STRONG",{});var Xvt=s(mbe);Xar=r(Xvt,"vit"),Xvt.forEach(t),zar=r(oSe," \u2014 "),Nz=n(oSe,"A",{href:!0});var zvt=s(Nz);War=r(zvt,"ViTForMaskedImageModeling"),zvt.forEach(t),Qar=r(oSe," (ViT model)"),oSe.forEach(t),ZZ.forEach(t),Har=i(va),yM=n(va,"P",{});var rSe=s(yM);Uar=r(rSe,"The model is set in evaluation mode by default using "),fbe=n(rSe,"CODE",{});var Wvt=s(fbe);Jar=r(Wvt,"model.eval()"),Wvt.forEach(t),Yar=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=n(rSe,"CODE",{});var Qvt=s(gbe);Kar=r(Qvt,"model.train()"),Qvt.forEach(t),rSe.forEach(t),Zar=i(va),T(LM.$$.fragment,va),va.forEach(t),il.forEach(t),UNe=i(m),xd=n(m,"H2",{class:!0});var eGe=s(xd);xM=n(eGe,"A",{id:!0,class:!0,href:!0});var Hvt=s(xM);hbe=n(Hvt,"SPAN",{});var Uvt=s(hbe);T(G8.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),enr=i(eGe),ube=n(eGe,"SPAN",{});var Jvt=s(ube);onr=r(Jvt,"AutoModelForObjectDetection"),Jvt.forEach(t),eGe.forEach(t),JNe=i(m),Qo=n(m,"DIV",{class:!0});var dl=s(Qo);T(O8.$$.fragment,dl),rnr=i(dl),$d=n(dl,"P",{});var eee=s($d);tnr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jz=n(eee,"A",{href:!0});var Yvt=s(jz);anr=r(Yvt,"from_pretrained()"),Yvt.forEach(t),nnr=r(eee," class method or the "),Dz=n(eee,"A",{href:!0});var Kvt=s(Dz);snr=r(Kvt,"from_config()"),Kvt.forEach(t),lnr=r(eee,` class
method.`),eee.forEach(t),inr=i(dl),V8=n(dl,"P",{});var oGe=s(V8);dnr=r(oGe,"This class cannot be instantiated directly using "),pbe=n(oGe,"CODE",{});var Zvt=s(pbe);cnr=r(Zvt,"__init__()"),Zvt.forEach(t),mnr=r(oGe," (throws an error)."),oGe.forEach(t),fnr=i(dl),Et=n(dl,"DIV",{class:!0});var u6=s(Et);T(X8.$$.fragment,u6),gnr=i(u6),_be=n(u6,"P",{});var eFt=s(_be);hnr=r(eFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),eFt.forEach(t),unr=i(u6),kd=n(u6,"P",{});var oee=s(kd);pnr=r(oee,`Note:
Loading a model from its configuration file does `),bbe=n(oee,"STRONG",{});var oFt=s(bbe);_nr=r(oFt,"not"),oFt.forEach(t),bnr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(oee,"A",{href:!0});var rFt=s(Gz);vnr=r(rFt,"from_pretrained()"),rFt.forEach(t),Fnr=r(oee," to load the model weights."),oee.forEach(t),Tnr=i(u6),T($M.$$.fragment,u6),u6.forEach(t),Mnr=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(z8.$$.fragment,Fa),Enr=i(Fa),vbe=n(Fa,"P",{});var tFt=s(vbe);Cnr=r(tFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tFt.forEach(t),wnr=i(Fa),Qa=n(Fa,"P",{});var p6=s(Qa);Anr=r(p6,"The model class to instantiate is selected based on the "),Fbe=n(p6,"CODE",{});var aFt=s(Fbe);ynr=r(aFt,"model_type"),aFt.forEach(t),Lnr=r(p6,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(p6,"CODE",{});var nFt=s(Tbe);xnr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),$nr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(p6,"CODE",{});var sFt=s(Mbe);knr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),Snr=r(p6,":"),p6.forEach(t),Rnr=i(Fa),W8=n(Fa,"UL",{});var rGe=s(W8);kM=n(rGe,"LI",{});var tSe=s(kM);Ebe=n(tSe,"STRONG",{});var lFt=s(Ebe);Pnr=r(lFt,"detr"),lFt.forEach(t),Bnr=r(tSe," \u2014 "),Oz=n(tSe,"A",{href:!0});var iFt=s(Oz);Inr=r(iFt,"DetrForObjectDetection"),iFt.forEach(t),qnr=r(tSe," (DETR model)"),tSe.forEach(t),Nnr=i(rGe),SM=n(rGe,"LI",{});var aSe=s(SM);Cbe=n(aSe,"STRONG",{});var dFt=s(Cbe);jnr=r(dFt,"yolos"),dFt.forEach(t),Dnr=r(aSe," \u2014 "),Vz=n(aSe,"A",{href:!0});var cFt=s(Vz);Gnr=r(cFt,"YolosForObjectDetection"),cFt.forEach(t),Onr=r(aSe," (YOLOS model)"),aSe.forEach(t),rGe.forEach(t),Vnr=i(Fa),RM=n(Fa,"P",{});var nSe=s(RM);Xnr=r(nSe,"The model is set in evaluation mode by default using "),wbe=n(nSe,"CODE",{});var mFt=s(wbe);znr=r(mFt,"model.eval()"),mFt.forEach(t),Wnr=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(nSe,"CODE",{});var fFt=s(Abe);Qnr=r(fFt,"model.train()"),fFt.forEach(t),nSe.forEach(t),Hnr=i(Fa),T(PM.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),YNe=i(m),Sd=n(m,"H2",{class:!0});var tGe=s(Sd);BM=n(tGe,"A",{id:!0,class:!0,href:!0});var gFt=s(BM);ybe=n(gFt,"SPAN",{});var hFt=s(ybe);T(Q8.$$.fragment,hFt),hFt.forEach(t),gFt.forEach(t),Unr=i(tGe),Lbe=n(tGe,"SPAN",{});var uFt=s(Lbe);Jnr=r(uFt,"AutoModelForImageSegmentation"),uFt.forEach(t),tGe.forEach(t),KNe=i(m),Ho=n(m,"DIV",{class:!0});var cl=s(Ho);T(H8.$$.fragment,cl),Ynr=i(cl),Rd=n(cl,"P",{});var ree=s(Rd);Knr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xz=n(ree,"A",{href:!0});var pFt=s(Xz);Znr=r(pFt,"from_pretrained()"),pFt.forEach(t),esr=r(ree," class method or the "),zz=n(ree,"A",{href:!0});var _Ft=s(zz);osr=r(_Ft,"from_config()"),_Ft.forEach(t),rsr=r(ree,` class
method.`),ree.forEach(t),tsr=i(cl),U8=n(cl,"P",{});var aGe=s(U8);asr=r(aGe,"This class cannot be instantiated directly using "),xbe=n(aGe,"CODE",{});var bFt=s(xbe);nsr=r(bFt,"__init__()"),bFt.forEach(t),ssr=r(aGe," (throws an error)."),aGe.forEach(t),lsr=i(cl),Ct=n(cl,"DIV",{class:!0});var _6=s(Ct);T(J8.$$.fragment,_6),isr=i(_6),$be=n(_6,"P",{});var vFt=s($be);dsr=r(vFt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vFt.forEach(t),csr=i(_6),Pd=n(_6,"P",{});var tee=s(Pd);msr=r(tee,`Note:
Loading a model from its configuration file does `),kbe=n(tee,"STRONG",{});var FFt=s(kbe);fsr=r(FFt,"not"),FFt.forEach(t),gsr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(tee,"A",{href:!0});var TFt=s(Wz);hsr=r(TFt,"from_pretrained()"),TFt.forEach(t),usr=r(tee," to load the model weights."),tee.forEach(t),psr=i(_6),T(IM.$$.fragment,_6),_6.forEach(t),_sr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(Y8.$$.fragment,Ta),bsr=i(Ta),Sbe=n(Ta,"P",{});var MFt=s(Sbe);vsr=r(MFt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),MFt.forEach(t),Fsr=i(Ta),Ha=n(Ta,"P",{});var b6=s(Ha);Tsr=r(b6,"The model class to instantiate is selected based on the "),Rbe=n(b6,"CODE",{});var EFt=s(Rbe);Msr=r(EFt,"model_type"),EFt.forEach(t),Esr=r(b6,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(b6,"CODE",{});var CFt=s(Pbe);Csr=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),wsr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(b6,"CODE",{});var wFt=s(Bbe);Asr=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),ysr=r(b6,":"),b6.forEach(t),Lsr=i(Ta),Ibe=n(Ta,"UL",{});var AFt=s(Ibe);qM=n(AFt,"LI",{});var sSe=s(qM);qbe=n(sSe,"STRONG",{});var yFt=s(qbe);xsr=r(yFt,"detr"),yFt.forEach(t),$sr=r(sSe," \u2014 "),Qz=n(sSe,"A",{href:!0});var LFt=s(Qz);ksr=r(LFt,"DetrForSegmentation"),LFt.forEach(t),Ssr=r(sSe," (DETR model)"),sSe.forEach(t),AFt.forEach(t),Rsr=i(Ta),NM=n(Ta,"P",{});var lSe=s(NM);Psr=r(lSe,"The model is set in evaluation mode by default using "),Nbe=n(lSe,"CODE",{});var xFt=s(Nbe);Bsr=r(xFt,"model.eval()"),xFt.forEach(t),Isr=r(lSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=n(lSe,"CODE",{});var $Ft=s(jbe);qsr=r($Ft,"model.train()"),$Ft.forEach(t),lSe.forEach(t),Nsr=i(Ta),T(jM.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),ZNe=i(m),Bd=n(m,"H2",{class:!0});var nGe=s(Bd);DM=n(nGe,"A",{id:!0,class:!0,href:!0});var kFt=s(DM);Dbe=n(kFt,"SPAN",{});var SFt=s(Dbe);T(K8.$$.fragment,SFt),SFt.forEach(t),kFt.forEach(t),jsr=i(nGe),Gbe=n(nGe,"SPAN",{});var RFt=s(Gbe);Dsr=r(RFt,"AutoModelForSemanticSegmentation"),RFt.forEach(t),nGe.forEach(t),eje=i(m),Uo=n(m,"DIV",{class:!0});var ml=s(Uo);T(Z8.$$.fragment,ml),Gsr=i(ml),Id=n(ml,"P",{});var aee=s(Id);Osr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Hz=n(aee,"A",{href:!0});var PFt=s(Hz);Vsr=r(PFt,"from_pretrained()"),PFt.forEach(t),Xsr=r(aee," class method or the "),Uz=n(aee,"A",{href:!0});var BFt=s(Uz);zsr=r(BFt,"from_config()"),BFt.forEach(t),Wsr=r(aee,` class
method.`),aee.forEach(t),Qsr=i(ml),e7=n(ml,"P",{});var sGe=s(e7);Hsr=r(sGe,"This class cannot be instantiated directly using "),Obe=n(sGe,"CODE",{});var IFt=s(Obe);Usr=r(IFt,"__init__()"),IFt.forEach(t),Jsr=r(sGe," (throws an error)."),sGe.forEach(t),Ysr=i(ml),wt=n(ml,"DIV",{class:!0});var v6=s(wt);T(o7.$$.fragment,v6),Ksr=i(v6),Vbe=n(v6,"P",{});var qFt=s(Vbe);Zsr=r(qFt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qFt.forEach(t),elr=i(v6),qd=n(v6,"P",{});var nee=s(qd);olr=r(nee,`Note:
Loading a model from its configuration file does `),Xbe=n(nee,"STRONG",{});var NFt=s(Xbe);rlr=r(NFt,"not"),NFt.forEach(t),tlr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(nee,"A",{href:!0});var jFt=s(Jz);alr=r(jFt,"from_pretrained()"),jFt.forEach(t),nlr=r(nee," to load the model weights."),nee.forEach(t),slr=i(v6),T(GM.$$.fragment,v6),v6.forEach(t),llr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(r7.$$.fragment,Ma),ilr=i(Ma),zbe=n(Ma,"P",{});var DFt=s(zbe);dlr=r(DFt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),DFt.forEach(t),clr=i(Ma),Ua=n(Ma,"P",{});var F6=s(Ua);mlr=r(F6,"The model class to instantiate is selected based on the "),Wbe=n(F6,"CODE",{});var GFt=s(Wbe);flr=r(GFt,"model_type"),GFt.forEach(t),glr=r(F6,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(F6,"CODE",{});var OFt=s(Qbe);hlr=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),ulr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(F6,"CODE",{});var VFt=s(Hbe);plr=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),_lr=r(F6,":"),F6.forEach(t),blr=i(Ma),Ja=n(Ma,"UL",{});var T6=s(Ja);OM=n(T6,"LI",{});var iSe=s(OM);Ube=n(iSe,"STRONG",{});var XFt=s(Ube);vlr=r(XFt,"beit"),XFt.forEach(t),Flr=r(iSe," \u2014 "),Yz=n(iSe,"A",{href:!0});var zFt=s(Yz);Tlr=r(zFt,"BeitForSemanticSegmentation"),zFt.forEach(t),Mlr=r(iSe," (BEiT model)"),iSe.forEach(t),Elr=i(T6),VM=n(T6,"LI",{});var dSe=s(VM);Jbe=n(dSe,"STRONG",{});var WFt=s(Jbe);Clr=r(WFt,"data2vec-vision"),WFt.forEach(t),wlr=r(dSe," \u2014 "),Kz=n(dSe,"A",{href:!0});var QFt=s(Kz);Alr=r(QFt,"Data2VecVisionForSemanticSegmentation"),QFt.forEach(t),ylr=r(dSe," (Data2VecVision model)"),dSe.forEach(t),Llr=i(T6),XM=n(T6,"LI",{});var cSe=s(XM);Ybe=n(cSe,"STRONG",{});var HFt=s(Ybe);xlr=r(HFt,"dpt"),HFt.forEach(t),$lr=r(cSe," \u2014 "),Zz=n(cSe,"A",{href:!0});var UFt=s(Zz);klr=r(UFt,"DPTForSemanticSegmentation"),UFt.forEach(t),Slr=r(cSe," (DPT model)"),cSe.forEach(t),Rlr=i(T6),zM=n(T6,"LI",{});var mSe=s(zM);Kbe=n(mSe,"STRONG",{});var JFt=s(Kbe);Plr=r(JFt,"segformer"),JFt.forEach(t),Blr=r(mSe," \u2014 "),eW=n(mSe,"A",{href:!0});var YFt=s(eW);Ilr=r(YFt,"SegformerForSemanticSegmentation"),YFt.forEach(t),qlr=r(mSe," (SegFormer model)"),mSe.forEach(t),T6.forEach(t),Nlr=i(Ma),WM=n(Ma,"P",{});var fSe=s(WM);jlr=r(fSe,"The model is set in evaluation mode by default using "),Zbe=n(fSe,"CODE",{});var KFt=s(Zbe);Dlr=r(KFt,"model.eval()"),KFt.forEach(t),Glr=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(fSe,"CODE",{});var ZFt=s(e2e);Olr=r(ZFt,"model.train()"),ZFt.forEach(t),fSe.forEach(t),Vlr=i(Ma),T(QM.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),oje=i(m),Nd=n(m,"H2",{class:!0});var lGe=s(Nd);HM=n(lGe,"A",{id:!0,class:!0,href:!0});var e1t=s(HM);o2e=n(e1t,"SPAN",{});var o1t=s(o2e);T(t7.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),Xlr=i(lGe),r2e=n(lGe,"SPAN",{});var r1t=s(r2e);zlr=r(r1t,"AutoModelForInstanceSegmentation"),r1t.forEach(t),lGe.forEach(t),rje=i(m),Jo=n(m,"DIV",{class:!0});var fl=s(Jo);T(a7.$$.fragment,fl),Wlr=i(fl),jd=n(fl,"P",{});var see=s(jd);Qlr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oW=n(see,"A",{href:!0});var t1t=s(oW);Hlr=r(t1t,"from_pretrained()"),t1t.forEach(t),Ulr=r(see," class method or the "),rW=n(see,"A",{href:!0});var a1t=s(rW);Jlr=r(a1t,"from_config()"),a1t.forEach(t),Ylr=r(see,` class
method.`),see.forEach(t),Klr=i(fl),n7=n(fl,"P",{});var iGe=s(n7);Zlr=r(iGe,"This class cannot be instantiated directly using "),t2e=n(iGe,"CODE",{});var n1t=s(t2e);eir=r(n1t,"__init__()"),n1t.forEach(t),oir=r(iGe," (throws an error)."),iGe.forEach(t),rir=i(fl),At=n(fl,"DIV",{class:!0});var M6=s(At);T(s7.$$.fragment,M6),tir=i(M6),a2e=n(M6,"P",{});var s1t=s(a2e);air=r(s1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),s1t.forEach(t),nir=i(M6),Dd=n(M6,"P",{});var lee=s(Dd);sir=r(lee,`Note:
Loading a model from its configuration file does `),n2e=n(lee,"STRONG",{});var l1t=s(n2e);lir=r(l1t,"not"),l1t.forEach(t),iir=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(lee,"A",{href:!0});var i1t=s(tW);dir=r(i1t,"from_pretrained()"),i1t.forEach(t),cir=r(lee," to load the model weights."),lee.forEach(t),mir=i(M6),T(UM.$$.fragment,M6),M6.forEach(t),fir=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(l7.$$.fragment,Ea),gir=i(Ea),s2e=n(Ea,"P",{});var d1t=s(s2e);hir=r(d1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),d1t.forEach(t),uir=i(Ea),Ya=n(Ea,"P",{});var E6=s(Ya);pir=r(E6,"The model class to instantiate is selected based on the "),l2e=n(E6,"CODE",{});var c1t=s(l2e);_ir=r(c1t,"model_type"),c1t.forEach(t),bir=r(E6,` property of the config object (either
passed as an argument or loaded from `),i2e=n(E6,"CODE",{});var m1t=s(i2e);vir=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),Fir=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(E6,"CODE",{});var f1t=s(d2e);Tir=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),Mir=r(E6,":"),E6.forEach(t),Eir=i(Ea),c2e=n(Ea,"UL",{});var g1t=s(c2e);JM=n(g1t,"LI",{});var gSe=s(JM);m2e=n(gSe,"STRONG",{});var h1t=s(m2e);Cir=r(h1t,"maskformer"),h1t.forEach(t),wir=r(gSe," \u2014 "),aW=n(gSe,"A",{href:!0});var u1t=s(aW);Air=r(u1t,"MaskFormerForInstanceSegmentation"),u1t.forEach(t),yir=r(gSe," (MaskFormer model)"),gSe.forEach(t),g1t.forEach(t),Lir=i(Ea),YM=n(Ea,"P",{});var hSe=s(YM);xir=r(hSe,"The model is set in evaluation mode by default using "),f2e=n(hSe,"CODE",{});var p1t=s(f2e);$ir=r(p1t,"model.eval()"),p1t.forEach(t),kir=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=n(hSe,"CODE",{});var _1t=s(g2e);Sir=r(_1t,"model.train()"),_1t.forEach(t),hSe.forEach(t),Rir=i(Ea),T(KM.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),tje=i(m),Gd=n(m,"H2",{class:!0});var dGe=s(Gd);ZM=n(dGe,"A",{id:!0,class:!0,href:!0});var b1t=s(ZM);h2e=n(b1t,"SPAN",{});var v1t=s(h2e);T(i7.$$.fragment,v1t),v1t.forEach(t),b1t.forEach(t),Pir=i(dGe),u2e=n(dGe,"SPAN",{});var F1t=s(u2e);Bir=r(F1t,"TFAutoModel"),F1t.forEach(t),dGe.forEach(t),aje=i(m),Yo=n(m,"DIV",{class:!0});var gl=s(Yo);T(d7.$$.fragment,gl),Iir=i(gl),Od=n(gl,"P",{});var iee=s(Od);qir=r(iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=n(iee,"A",{href:!0});var T1t=s(nW);Nir=r(T1t,"from_pretrained()"),T1t.forEach(t),jir=r(iee," class method or the "),sW=n(iee,"A",{href:!0});var M1t=s(sW);Dir=r(M1t,"from_config()"),M1t.forEach(t),Gir=r(iee,` class
method.`),iee.forEach(t),Oir=i(gl),c7=n(gl,"P",{});var cGe=s(c7);Vir=r(cGe,"This class cannot be instantiated directly using "),p2e=n(cGe,"CODE",{});var E1t=s(p2e);Xir=r(E1t,"__init__()"),E1t.forEach(t),zir=r(cGe," (throws an error)."),cGe.forEach(t),Wir=i(gl),yt=n(gl,"DIV",{class:!0});var C6=s(yt);T(m7.$$.fragment,C6),Qir=i(C6),_2e=n(C6,"P",{});var C1t=s(_2e);Hir=r(C1t,"Instantiates one of the base model classes of the library from a configuration."),C1t.forEach(t),Uir=i(C6),Vd=n(C6,"P",{});var dee=s(Vd);Jir=r(dee,`Note:
Loading a model from its configuration file does `),b2e=n(dee,"STRONG",{});var w1t=s(b2e);Yir=r(w1t,"not"),w1t.forEach(t),Kir=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(dee,"A",{href:!0});var A1t=s(lW);Zir=r(A1t,"from_pretrained()"),A1t.forEach(t),edr=r(dee," to load the model weights."),dee.forEach(t),odr=i(C6),T(e4.$$.fragment,C6),C6.forEach(t),rdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(f7.$$.fragment,hl),tdr=i(hl),v2e=n(hl,"P",{});var y1t=s(v2e);adr=r(y1t,"Instantiate one of the base model classes of the library from a pretrained model."),y1t.forEach(t),ndr=i(hl),Ka=n(hl,"P",{});var w6=s(Ka);sdr=r(w6,"The model class to instantiate is selected based on the "),F2e=n(w6,"CODE",{});var L1t=s(F2e);ldr=r(L1t,"model_type"),L1t.forEach(t),idr=r(w6,` property of the config object (either
passed as an argument or loaded from `),T2e=n(w6,"CODE",{});var x1t=s(T2e);ddr=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),cdr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(w6,"CODE",{});var $1t=s(M2e);mdr=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),fdr=r(w6,":"),w6.forEach(t),gdr=i(hl),N=n(hl,"UL",{});var D=s(N);o4=n(D,"LI",{});var uSe=s(o4);E2e=n(uSe,"STRONG",{});var k1t=s(E2e);hdr=r(k1t,"albert"),k1t.forEach(t),udr=r(uSe," \u2014 "),iW=n(uSe,"A",{href:!0});var S1t=s(iW);pdr=r(S1t,"TFAlbertModel"),S1t.forEach(t),_dr=r(uSe," (ALBERT model)"),uSe.forEach(t),bdr=i(D),r4=n(D,"LI",{});var pSe=s(r4);C2e=n(pSe,"STRONG",{});var R1t=s(C2e);vdr=r(R1t,"bart"),R1t.forEach(t),Fdr=r(pSe," \u2014 "),dW=n(pSe,"A",{href:!0});var P1t=s(dW);Tdr=r(P1t,"TFBartModel"),P1t.forEach(t),Mdr=r(pSe," (BART model)"),pSe.forEach(t),Edr=i(D),t4=n(D,"LI",{});var _Se=s(t4);w2e=n(_Se,"STRONG",{});var B1t=s(w2e);Cdr=r(B1t,"bert"),B1t.forEach(t),wdr=r(_Se," \u2014 "),cW=n(_Se,"A",{href:!0});var I1t=s(cW);Adr=r(I1t,"TFBertModel"),I1t.forEach(t),ydr=r(_Se," (BERT model)"),_Se.forEach(t),Ldr=i(D),a4=n(D,"LI",{});var bSe=s(a4);A2e=n(bSe,"STRONG",{});var q1t=s(A2e);xdr=r(q1t,"blenderbot"),q1t.forEach(t),$dr=r(bSe," \u2014 "),mW=n(bSe,"A",{href:!0});var N1t=s(mW);kdr=r(N1t,"TFBlenderbotModel"),N1t.forEach(t),Sdr=r(bSe," (Blenderbot model)"),bSe.forEach(t),Rdr=i(D),n4=n(D,"LI",{});var vSe=s(n4);y2e=n(vSe,"STRONG",{});var j1t=s(y2e);Pdr=r(j1t,"blenderbot-small"),j1t.forEach(t),Bdr=r(vSe," \u2014 "),fW=n(vSe,"A",{href:!0});var D1t=s(fW);Idr=r(D1t,"TFBlenderbotSmallModel"),D1t.forEach(t),qdr=r(vSe," (BlenderbotSmall model)"),vSe.forEach(t),Ndr=i(D),s4=n(D,"LI",{});var FSe=s(s4);L2e=n(FSe,"STRONG",{});var G1t=s(L2e);jdr=r(G1t,"camembert"),G1t.forEach(t),Ddr=r(FSe," \u2014 "),gW=n(FSe,"A",{href:!0});var O1t=s(gW);Gdr=r(O1t,"TFCamembertModel"),O1t.forEach(t),Odr=r(FSe," (CamemBERT model)"),FSe.forEach(t),Vdr=i(D),l4=n(D,"LI",{});var TSe=s(l4);x2e=n(TSe,"STRONG",{});var V1t=s(x2e);Xdr=r(V1t,"clip"),V1t.forEach(t),zdr=r(TSe," \u2014 "),hW=n(TSe,"A",{href:!0});var X1t=s(hW);Wdr=r(X1t,"TFCLIPModel"),X1t.forEach(t),Qdr=r(TSe," (CLIP model)"),TSe.forEach(t),Hdr=i(D),i4=n(D,"LI",{});var MSe=s(i4);$2e=n(MSe,"STRONG",{});var z1t=s($2e);Udr=r(z1t,"convbert"),z1t.forEach(t),Jdr=r(MSe," \u2014 "),uW=n(MSe,"A",{href:!0});var W1t=s(uW);Ydr=r(W1t,"TFConvBertModel"),W1t.forEach(t),Kdr=r(MSe," (ConvBERT model)"),MSe.forEach(t),Zdr=i(D),d4=n(D,"LI",{});var ESe=s(d4);k2e=n(ESe,"STRONG",{});var Q1t=s(k2e);ecr=r(Q1t,"convnext"),Q1t.forEach(t),ocr=r(ESe," \u2014 "),pW=n(ESe,"A",{href:!0});var H1t=s(pW);rcr=r(H1t,"TFConvNextModel"),H1t.forEach(t),tcr=r(ESe," (ConvNext model)"),ESe.forEach(t),acr=i(D),c4=n(D,"LI",{});var CSe=s(c4);S2e=n(CSe,"STRONG",{});var U1t=s(S2e);ncr=r(U1t,"ctrl"),U1t.forEach(t),scr=r(CSe," \u2014 "),_W=n(CSe,"A",{href:!0});var J1t=s(_W);lcr=r(J1t,"TFCTRLModel"),J1t.forEach(t),icr=r(CSe," (CTRL model)"),CSe.forEach(t),dcr=i(D),m4=n(D,"LI",{});var wSe=s(m4);R2e=n(wSe,"STRONG",{});var Y1t=s(R2e);ccr=r(Y1t,"data2vec-vision"),Y1t.forEach(t),mcr=r(wSe," \u2014 "),bW=n(wSe,"A",{href:!0});var K1t=s(bW);fcr=r(K1t,"TFData2VecVisionModel"),K1t.forEach(t),gcr=r(wSe," (Data2VecVision model)"),wSe.forEach(t),hcr=i(D),f4=n(D,"LI",{});var ASe=s(f4);P2e=n(ASe,"STRONG",{});var Z1t=s(P2e);ucr=r(Z1t,"deberta"),Z1t.forEach(t),pcr=r(ASe," \u2014 "),vW=n(ASe,"A",{href:!0});var eTt=s(vW);_cr=r(eTt,"TFDebertaModel"),eTt.forEach(t),bcr=r(ASe," (DeBERTa model)"),ASe.forEach(t),vcr=i(D),g4=n(D,"LI",{});var ySe=s(g4);B2e=n(ySe,"STRONG",{});var oTt=s(B2e);Fcr=r(oTt,"deberta-v2"),oTt.forEach(t),Tcr=r(ySe," \u2014 "),FW=n(ySe,"A",{href:!0});var rTt=s(FW);Mcr=r(rTt,"TFDebertaV2Model"),rTt.forEach(t),Ecr=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),Ccr=i(D),h4=n(D,"LI",{});var LSe=s(h4);I2e=n(LSe,"STRONG",{});var tTt=s(I2e);wcr=r(tTt,"distilbert"),tTt.forEach(t),Acr=r(LSe," \u2014 "),TW=n(LSe,"A",{href:!0});var aTt=s(TW);ycr=r(aTt,"TFDistilBertModel"),aTt.forEach(t),Lcr=r(LSe," (DistilBERT model)"),LSe.forEach(t),xcr=i(D),u4=n(D,"LI",{});var xSe=s(u4);q2e=n(xSe,"STRONG",{});var nTt=s(q2e);$cr=r(nTt,"dpr"),nTt.forEach(t),kcr=r(xSe," \u2014 "),MW=n(xSe,"A",{href:!0});var sTt=s(MW);Scr=r(sTt,"TFDPRQuestionEncoder"),sTt.forEach(t),Rcr=r(xSe," (DPR model)"),xSe.forEach(t),Pcr=i(D),p4=n(D,"LI",{});var $Se=s(p4);N2e=n($Se,"STRONG",{});var lTt=s(N2e);Bcr=r(lTt,"electra"),lTt.forEach(t),Icr=r($Se," \u2014 "),EW=n($Se,"A",{href:!0});var iTt=s(EW);qcr=r(iTt,"TFElectraModel"),iTt.forEach(t),Ncr=r($Se," (ELECTRA model)"),$Se.forEach(t),jcr=i(D),_4=n(D,"LI",{});var kSe=s(_4);j2e=n(kSe,"STRONG",{});var dTt=s(j2e);Dcr=r(dTt,"flaubert"),dTt.forEach(t),Gcr=r(kSe," \u2014 "),CW=n(kSe,"A",{href:!0});var cTt=s(CW);Ocr=r(cTt,"TFFlaubertModel"),cTt.forEach(t),Vcr=r(kSe," (FlauBERT model)"),kSe.forEach(t),Xcr=i(D),Is=n(D,"LI",{});var X$=s(Is);D2e=n(X$,"STRONG",{});var mTt=s(D2e);zcr=r(mTt,"funnel"),mTt.forEach(t),Wcr=r(X$," \u2014 "),wW=n(X$,"A",{href:!0});var fTt=s(wW);Qcr=r(fTt,"TFFunnelModel"),fTt.forEach(t),Hcr=r(X$," or "),AW=n(X$,"A",{href:!0});var gTt=s(AW);Ucr=r(gTt,"TFFunnelBaseModel"),gTt.forEach(t),Jcr=r(X$," (Funnel Transformer model)"),X$.forEach(t),Ycr=i(D),b4=n(D,"LI",{});var SSe=s(b4);G2e=n(SSe,"STRONG",{});var hTt=s(G2e);Kcr=r(hTt,"gpt2"),hTt.forEach(t),Zcr=r(SSe," \u2014 "),yW=n(SSe,"A",{href:!0});var uTt=s(yW);emr=r(uTt,"TFGPT2Model"),uTt.forEach(t),omr=r(SSe," (OpenAI GPT-2 model)"),SSe.forEach(t),rmr=i(D),v4=n(D,"LI",{});var RSe=s(v4);O2e=n(RSe,"STRONG",{});var pTt=s(O2e);tmr=r(pTt,"gptj"),pTt.forEach(t),amr=r(RSe," \u2014 "),LW=n(RSe,"A",{href:!0});var _Tt=s(LW);nmr=r(_Tt,"TFGPTJModel"),_Tt.forEach(t),smr=r(RSe," (GPT-J model)"),RSe.forEach(t),lmr=i(D),F4=n(D,"LI",{});var PSe=s(F4);V2e=n(PSe,"STRONG",{});var bTt=s(V2e);imr=r(bTt,"hubert"),bTt.forEach(t),dmr=r(PSe," \u2014 "),xW=n(PSe,"A",{href:!0});var vTt=s(xW);cmr=r(vTt,"TFHubertModel"),vTt.forEach(t),mmr=r(PSe," (Hubert model)"),PSe.forEach(t),fmr=i(D),T4=n(D,"LI",{});var BSe=s(T4);X2e=n(BSe,"STRONG",{});var FTt=s(X2e);gmr=r(FTt,"layoutlm"),FTt.forEach(t),hmr=r(BSe," \u2014 "),$W=n(BSe,"A",{href:!0});var TTt=s($W);umr=r(TTt,"TFLayoutLMModel"),TTt.forEach(t),pmr=r(BSe," (LayoutLM model)"),BSe.forEach(t),_mr=i(D),M4=n(D,"LI",{});var ISe=s(M4);z2e=n(ISe,"STRONG",{});var MTt=s(z2e);bmr=r(MTt,"led"),MTt.forEach(t),vmr=r(ISe," \u2014 "),kW=n(ISe,"A",{href:!0});var ETt=s(kW);Fmr=r(ETt,"TFLEDModel"),ETt.forEach(t),Tmr=r(ISe," (LED model)"),ISe.forEach(t),Mmr=i(D),E4=n(D,"LI",{});var qSe=s(E4);W2e=n(qSe,"STRONG",{});var CTt=s(W2e);Emr=r(CTt,"longformer"),CTt.forEach(t),Cmr=r(qSe," \u2014 "),SW=n(qSe,"A",{href:!0});var wTt=s(SW);wmr=r(wTt,"TFLongformerModel"),wTt.forEach(t),Amr=r(qSe," (Longformer model)"),qSe.forEach(t),ymr=i(D),C4=n(D,"LI",{});var NSe=s(C4);Q2e=n(NSe,"STRONG",{});var ATt=s(Q2e);Lmr=r(ATt,"lxmert"),ATt.forEach(t),xmr=r(NSe," \u2014 "),RW=n(NSe,"A",{href:!0});var yTt=s(RW);$mr=r(yTt,"TFLxmertModel"),yTt.forEach(t),kmr=r(NSe," (LXMERT model)"),NSe.forEach(t),Smr=i(D),w4=n(D,"LI",{});var jSe=s(w4);H2e=n(jSe,"STRONG",{});var LTt=s(H2e);Rmr=r(LTt,"marian"),LTt.forEach(t),Pmr=r(jSe," \u2014 "),PW=n(jSe,"A",{href:!0});var xTt=s(PW);Bmr=r(xTt,"TFMarianModel"),xTt.forEach(t),Imr=r(jSe," (Marian model)"),jSe.forEach(t),qmr=i(D),A4=n(D,"LI",{});var DSe=s(A4);U2e=n(DSe,"STRONG",{});var $Tt=s(U2e);Nmr=r($Tt,"mbart"),$Tt.forEach(t),jmr=r(DSe," \u2014 "),BW=n(DSe,"A",{href:!0});var kTt=s(BW);Dmr=r(kTt,"TFMBartModel"),kTt.forEach(t),Gmr=r(DSe," (mBART model)"),DSe.forEach(t),Omr=i(D),y4=n(D,"LI",{});var GSe=s(y4);J2e=n(GSe,"STRONG",{});var STt=s(J2e);Vmr=r(STt,"mobilebert"),STt.forEach(t),Xmr=r(GSe," \u2014 "),IW=n(GSe,"A",{href:!0});var RTt=s(IW);zmr=r(RTt,"TFMobileBertModel"),RTt.forEach(t),Wmr=r(GSe," (MobileBERT model)"),GSe.forEach(t),Qmr=i(D),L4=n(D,"LI",{});var OSe=s(L4);Y2e=n(OSe,"STRONG",{});var PTt=s(Y2e);Hmr=r(PTt,"mpnet"),PTt.forEach(t),Umr=r(OSe," \u2014 "),qW=n(OSe,"A",{href:!0});var BTt=s(qW);Jmr=r(BTt,"TFMPNetModel"),BTt.forEach(t),Ymr=r(OSe," (MPNet model)"),OSe.forEach(t),Kmr=i(D),x4=n(D,"LI",{});var VSe=s(x4);K2e=n(VSe,"STRONG",{});var ITt=s(K2e);Zmr=r(ITt,"mt5"),ITt.forEach(t),efr=r(VSe," \u2014 "),NW=n(VSe,"A",{href:!0});var qTt=s(NW);ofr=r(qTt,"TFMT5Model"),qTt.forEach(t),rfr=r(VSe," (mT5 model)"),VSe.forEach(t),tfr=i(D),$4=n(D,"LI",{});var XSe=s($4);Z2e=n(XSe,"STRONG",{});var NTt=s(Z2e);afr=r(NTt,"openai-gpt"),NTt.forEach(t),nfr=r(XSe," \u2014 "),jW=n(XSe,"A",{href:!0});var jTt=s(jW);sfr=r(jTt,"TFOpenAIGPTModel"),jTt.forEach(t),lfr=r(XSe," (OpenAI GPT model)"),XSe.forEach(t),ifr=i(D),k4=n(D,"LI",{});var zSe=s(k4);eve=n(zSe,"STRONG",{});var DTt=s(eve);dfr=r(DTt,"pegasus"),DTt.forEach(t),cfr=r(zSe," \u2014 "),DW=n(zSe,"A",{href:!0});var GTt=s(DW);mfr=r(GTt,"TFPegasusModel"),GTt.forEach(t),ffr=r(zSe," (Pegasus model)"),zSe.forEach(t),gfr=i(D),S4=n(D,"LI",{});var WSe=s(S4);ove=n(WSe,"STRONG",{});var OTt=s(ove);hfr=r(OTt,"rembert"),OTt.forEach(t),ufr=r(WSe," \u2014 "),GW=n(WSe,"A",{href:!0});var VTt=s(GW);pfr=r(VTt,"TFRemBertModel"),VTt.forEach(t),_fr=r(WSe," (RemBERT model)"),WSe.forEach(t),bfr=i(D),R4=n(D,"LI",{});var QSe=s(R4);rve=n(QSe,"STRONG",{});var XTt=s(rve);vfr=r(XTt,"roberta"),XTt.forEach(t),Ffr=r(QSe," \u2014 "),OW=n(QSe,"A",{href:!0});var zTt=s(OW);Tfr=r(zTt,"TFRobertaModel"),zTt.forEach(t),Mfr=r(QSe," (RoBERTa model)"),QSe.forEach(t),Efr=i(D),P4=n(D,"LI",{});var HSe=s(P4);tve=n(HSe,"STRONG",{});var WTt=s(tve);Cfr=r(WTt,"roformer"),WTt.forEach(t),wfr=r(HSe," \u2014 "),VW=n(HSe,"A",{href:!0});var QTt=s(VW);Afr=r(QTt,"TFRoFormerModel"),QTt.forEach(t),yfr=r(HSe," (RoFormer model)"),HSe.forEach(t),Lfr=i(D),B4=n(D,"LI",{});var USe=s(B4);ave=n(USe,"STRONG",{});var HTt=s(ave);xfr=r(HTt,"speech_to_text"),HTt.forEach(t),$fr=r(USe," \u2014 "),XW=n(USe,"A",{href:!0});var UTt=s(XW);kfr=r(UTt,"TFSpeech2TextModel"),UTt.forEach(t),Sfr=r(USe," (Speech2Text model)"),USe.forEach(t),Rfr=i(D),I4=n(D,"LI",{});var JSe=s(I4);nve=n(JSe,"STRONG",{});var JTt=s(nve);Pfr=r(JTt,"swin"),JTt.forEach(t),Bfr=r(JSe," \u2014 "),zW=n(JSe,"A",{href:!0});var YTt=s(zW);Ifr=r(YTt,"TFSwinModel"),YTt.forEach(t),qfr=r(JSe," (Swin model)"),JSe.forEach(t),Nfr=i(D),q4=n(D,"LI",{});var YSe=s(q4);sve=n(YSe,"STRONG",{});var KTt=s(sve);jfr=r(KTt,"t5"),KTt.forEach(t),Dfr=r(YSe," \u2014 "),WW=n(YSe,"A",{href:!0});var ZTt=s(WW);Gfr=r(ZTt,"TFT5Model"),ZTt.forEach(t),Ofr=r(YSe," (T5 model)"),YSe.forEach(t),Vfr=i(D),N4=n(D,"LI",{});var KSe=s(N4);lve=n(KSe,"STRONG",{});var eMt=s(lve);Xfr=r(eMt,"tapas"),eMt.forEach(t),zfr=r(KSe," \u2014 "),QW=n(KSe,"A",{href:!0});var oMt=s(QW);Wfr=r(oMt,"TFTapasModel"),oMt.forEach(t),Qfr=r(KSe," (TAPAS model)"),KSe.forEach(t),Hfr=i(D),j4=n(D,"LI",{});var ZSe=s(j4);ive=n(ZSe,"STRONG",{});var rMt=s(ive);Ufr=r(rMt,"transfo-xl"),rMt.forEach(t),Jfr=r(ZSe," \u2014 "),HW=n(ZSe,"A",{href:!0});var tMt=s(HW);Yfr=r(tMt,"TFTransfoXLModel"),tMt.forEach(t),Kfr=r(ZSe," (Transformer-XL model)"),ZSe.forEach(t),Zfr=i(D),D4=n(D,"LI",{});var eRe=s(D4);dve=n(eRe,"STRONG",{});var aMt=s(dve);egr=r(aMt,"vit"),aMt.forEach(t),ogr=r(eRe," \u2014 "),UW=n(eRe,"A",{href:!0});var nMt=s(UW);rgr=r(nMt,"TFViTModel"),nMt.forEach(t),tgr=r(eRe," (ViT model)"),eRe.forEach(t),agr=i(D),G4=n(D,"LI",{});var oRe=s(G4);cve=n(oRe,"STRONG",{});var sMt=s(cve);ngr=r(sMt,"vit_mae"),sMt.forEach(t),sgr=r(oRe," \u2014 "),JW=n(oRe,"A",{href:!0});var lMt=s(JW);lgr=r(lMt,"TFViTMAEModel"),lMt.forEach(t),igr=r(oRe," (ViTMAE model)"),oRe.forEach(t),dgr=i(D),O4=n(D,"LI",{});var rRe=s(O4);mve=n(rRe,"STRONG",{});var iMt=s(mve);cgr=r(iMt,"wav2vec2"),iMt.forEach(t),mgr=r(rRe," \u2014 "),YW=n(rRe,"A",{href:!0});var dMt=s(YW);fgr=r(dMt,"TFWav2Vec2Model"),dMt.forEach(t),ggr=r(rRe," (Wav2Vec2 model)"),rRe.forEach(t),hgr=i(D),V4=n(D,"LI",{});var tRe=s(V4);fve=n(tRe,"STRONG",{});var cMt=s(fve);ugr=r(cMt,"xlm"),cMt.forEach(t),pgr=r(tRe," \u2014 "),KW=n(tRe,"A",{href:!0});var mMt=s(KW);_gr=r(mMt,"TFXLMModel"),mMt.forEach(t),bgr=r(tRe," (XLM model)"),tRe.forEach(t),vgr=i(D),X4=n(D,"LI",{});var aRe=s(X4);gve=n(aRe,"STRONG",{});var fMt=s(gve);Fgr=r(fMt,"xlm-roberta"),fMt.forEach(t),Tgr=r(aRe," \u2014 "),ZW=n(aRe,"A",{href:!0});var gMt=s(ZW);Mgr=r(gMt,"TFXLMRobertaModel"),gMt.forEach(t),Egr=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),Cgr=i(D),z4=n(D,"LI",{});var nRe=s(z4);hve=n(nRe,"STRONG",{});var hMt=s(hve);wgr=r(hMt,"xlnet"),hMt.forEach(t),Agr=r(nRe," \u2014 "),eQ=n(nRe,"A",{href:!0});var uMt=s(eQ);ygr=r(uMt,"TFXLNetModel"),uMt.forEach(t),Lgr=r(nRe," (XLNet model)"),nRe.forEach(t),D.forEach(t),xgr=i(hl),T(W4.$$.fragment,hl),hl.forEach(t),gl.forEach(t),nje=i(m),Xd=n(m,"H2",{class:!0});var mGe=s(Xd);Q4=n(mGe,"A",{id:!0,class:!0,href:!0});var pMt=s(Q4);uve=n(pMt,"SPAN",{});var _Mt=s(uve);T(g7.$$.fragment,_Mt),_Mt.forEach(t),pMt.forEach(t),$gr=i(mGe),pve=n(mGe,"SPAN",{});var bMt=s(pve);kgr=r(bMt,"TFAutoModelForPreTraining"),bMt.forEach(t),mGe.forEach(t),sje=i(m),Ko=n(m,"DIV",{class:!0});var ul=s(Ko);T(h7.$$.fragment,ul),Sgr=i(ul),zd=n(ul,"P",{});var cee=s(zd);Rgr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=n(cee,"A",{href:!0});var vMt=s(oQ);Pgr=r(vMt,"from_pretrained()"),vMt.forEach(t),Bgr=r(cee," class method or the "),rQ=n(cee,"A",{href:!0});var FMt=s(rQ);Igr=r(FMt,"from_config()"),FMt.forEach(t),qgr=r(cee,` class
method.`),cee.forEach(t),Ngr=i(ul),u7=n(ul,"P",{});var fGe=s(u7);jgr=r(fGe,"This class cannot be instantiated directly using "),_ve=n(fGe,"CODE",{});var TMt=s(_ve);Dgr=r(TMt,"__init__()"),TMt.forEach(t),Ggr=r(fGe," (throws an error)."),fGe.forEach(t),Ogr=i(ul),Lt=n(ul,"DIV",{class:!0});var A6=s(Lt);T(p7.$$.fragment,A6),Vgr=i(A6),bve=n(A6,"P",{});var MMt=s(bve);Xgr=r(MMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MMt.forEach(t),zgr=i(A6),Wd=n(A6,"P",{});var mee=s(Wd);Wgr=r(mee,`Note:
Loading a model from its configuration file does `),vve=n(mee,"STRONG",{});var EMt=s(vve);Qgr=r(EMt,"not"),EMt.forEach(t),Hgr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(mee,"A",{href:!0});var CMt=s(tQ);Ugr=r(CMt,"from_pretrained()"),CMt.forEach(t),Jgr=r(mee," to load the model weights."),mee.forEach(t),Ygr=i(A6),T(H4.$$.fragment,A6),A6.forEach(t),Kgr=i(ul),Ar=n(ul,"DIV",{class:!0});var pl=s(Ar);T(_7.$$.fragment,pl),Zgr=i(pl),Fve=n(pl,"P",{});var wMt=s(Fve);ehr=r(wMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wMt.forEach(t),ohr=i(pl),Za=n(pl,"P",{});var y6=s(Za);rhr=r(y6,"The model class to instantiate is selected based on the "),Tve=n(y6,"CODE",{});var AMt=s(Tve);thr=r(AMt,"model_type"),AMt.forEach(t),ahr=r(y6,` property of the config object (either
passed as an argument or loaded from `),Mve=n(y6,"CODE",{});var yMt=s(Mve);nhr=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),shr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(y6,"CODE",{});var LMt=s(Eve);lhr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),ihr=r(y6,":"),y6.forEach(t),dhr=i(pl),se=n(pl,"UL",{});var le=s(se);U4=n(le,"LI",{});var sRe=s(U4);Cve=n(sRe,"STRONG",{});var xMt=s(Cve);chr=r(xMt,"albert"),xMt.forEach(t),mhr=r(sRe," \u2014 "),aQ=n(sRe,"A",{href:!0});var $Mt=s(aQ);fhr=r($Mt,"TFAlbertForPreTraining"),$Mt.forEach(t),ghr=r(sRe," (ALBERT model)"),sRe.forEach(t),hhr=i(le),J4=n(le,"LI",{});var lRe=s(J4);wve=n(lRe,"STRONG",{});var kMt=s(wve);uhr=r(kMt,"bart"),kMt.forEach(t),phr=r(lRe," \u2014 "),nQ=n(lRe,"A",{href:!0});var SMt=s(nQ);_hr=r(SMt,"TFBartForConditionalGeneration"),SMt.forEach(t),bhr=r(lRe," (BART model)"),lRe.forEach(t),vhr=i(le),Y4=n(le,"LI",{});var iRe=s(Y4);Ave=n(iRe,"STRONG",{});var RMt=s(Ave);Fhr=r(RMt,"bert"),RMt.forEach(t),Thr=r(iRe," \u2014 "),sQ=n(iRe,"A",{href:!0});var PMt=s(sQ);Mhr=r(PMt,"TFBertForPreTraining"),PMt.forEach(t),Ehr=r(iRe," (BERT model)"),iRe.forEach(t),Chr=i(le),K4=n(le,"LI",{});var dRe=s(K4);yve=n(dRe,"STRONG",{});var BMt=s(yve);whr=r(BMt,"camembert"),BMt.forEach(t),Ahr=r(dRe," \u2014 "),lQ=n(dRe,"A",{href:!0});var IMt=s(lQ);yhr=r(IMt,"TFCamembertForMaskedLM"),IMt.forEach(t),Lhr=r(dRe," (CamemBERT model)"),dRe.forEach(t),xhr=i(le),Z4=n(le,"LI",{});var cRe=s(Z4);Lve=n(cRe,"STRONG",{});var qMt=s(Lve);$hr=r(qMt,"ctrl"),qMt.forEach(t),khr=r(cRe," \u2014 "),iQ=n(cRe,"A",{href:!0});var NMt=s(iQ);Shr=r(NMt,"TFCTRLLMHeadModel"),NMt.forEach(t),Rhr=r(cRe," (CTRL model)"),cRe.forEach(t),Phr=i(le),eE=n(le,"LI",{});var mRe=s(eE);xve=n(mRe,"STRONG",{});var jMt=s(xve);Bhr=r(jMt,"distilbert"),jMt.forEach(t),Ihr=r(mRe," \u2014 "),dQ=n(mRe,"A",{href:!0});var DMt=s(dQ);qhr=r(DMt,"TFDistilBertForMaskedLM"),DMt.forEach(t),Nhr=r(mRe," (DistilBERT model)"),mRe.forEach(t),jhr=i(le),oE=n(le,"LI",{});var fRe=s(oE);$ve=n(fRe,"STRONG",{});var GMt=s($ve);Dhr=r(GMt,"electra"),GMt.forEach(t),Ghr=r(fRe," \u2014 "),cQ=n(fRe,"A",{href:!0});var OMt=s(cQ);Ohr=r(OMt,"TFElectraForPreTraining"),OMt.forEach(t),Vhr=r(fRe," (ELECTRA model)"),fRe.forEach(t),Xhr=i(le),rE=n(le,"LI",{});var gRe=s(rE);kve=n(gRe,"STRONG",{});var VMt=s(kve);zhr=r(VMt,"flaubert"),VMt.forEach(t),Whr=r(gRe," \u2014 "),mQ=n(gRe,"A",{href:!0});var XMt=s(mQ);Qhr=r(XMt,"TFFlaubertWithLMHeadModel"),XMt.forEach(t),Hhr=r(gRe," (FlauBERT model)"),gRe.forEach(t),Uhr=i(le),tE=n(le,"LI",{});var hRe=s(tE);Sve=n(hRe,"STRONG",{});var zMt=s(Sve);Jhr=r(zMt,"funnel"),zMt.forEach(t),Yhr=r(hRe," \u2014 "),fQ=n(hRe,"A",{href:!0});var WMt=s(fQ);Khr=r(WMt,"TFFunnelForPreTraining"),WMt.forEach(t),Zhr=r(hRe," (Funnel Transformer model)"),hRe.forEach(t),eur=i(le),aE=n(le,"LI",{});var uRe=s(aE);Rve=n(uRe,"STRONG",{});var QMt=s(Rve);our=r(QMt,"gpt2"),QMt.forEach(t),rur=r(uRe," \u2014 "),gQ=n(uRe,"A",{href:!0});var HMt=s(gQ);tur=r(HMt,"TFGPT2LMHeadModel"),HMt.forEach(t),aur=r(uRe," (OpenAI GPT-2 model)"),uRe.forEach(t),nur=i(le),nE=n(le,"LI",{});var pRe=s(nE);Pve=n(pRe,"STRONG",{});var UMt=s(Pve);sur=r(UMt,"layoutlm"),UMt.forEach(t),lur=r(pRe," \u2014 "),hQ=n(pRe,"A",{href:!0});var JMt=s(hQ);iur=r(JMt,"TFLayoutLMForMaskedLM"),JMt.forEach(t),dur=r(pRe," (LayoutLM model)"),pRe.forEach(t),cur=i(le),sE=n(le,"LI",{});var _Re=s(sE);Bve=n(_Re,"STRONG",{});var YMt=s(Bve);mur=r(YMt,"lxmert"),YMt.forEach(t),fur=r(_Re," \u2014 "),uQ=n(_Re,"A",{href:!0});var KMt=s(uQ);gur=r(KMt,"TFLxmertForPreTraining"),KMt.forEach(t),hur=r(_Re," (LXMERT model)"),_Re.forEach(t),uur=i(le),lE=n(le,"LI",{});var bRe=s(lE);Ive=n(bRe,"STRONG",{});var ZMt=s(Ive);pur=r(ZMt,"mobilebert"),ZMt.forEach(t),_ur=r(bRe," \u2014 "),pQ=n(bRe,"A",{href:!0});var e4t=s(pQ);bur=r(e4t,"TFMobileBertForPreTraining"),e4t.forEach(t),vur=r(bRe," (MobileBERT model)"),bRe.forEach(t),Fur=i(le),iE=n(le,"LI",{});var vRe=s(iE);qve=n(vRe,"STRONG",{});var o4t=s(qve);Tur=r(o4t,"mpnet"),o4t.forEach(t),Mur=r(vRe," \u2014 "),_Q=n(vRe,"A",{href:!0});var r4t=s(_Q);Eur=r(r4t,"TFMPNetForMaskedLM"),r4t.forEach(t),Cur=r(vRe," (MPNet model)"),vRe.forEach(t),wur=i(le),dE=n(le,"LI",{});var FRe=s(dE);Nve=n(FRe,"STRONG",{});var t4t=s(Nve);Aur=r(t4t,"openai-gpt"),t4t.forEach(t),yur=r(FRe," \u2014 "),bQ=n(FRe,"A",{href:!0});var a4t=s(bQ);Lur=r(a4t,"TFOpenAIGPTLMHeadModel"),a4t.forEach(t),xur=r(FRe," (OpenAI GPT model)"),FRe.forEach(t),$ur=i(le),cE=n(le,"LI",{});var TRe=s(cE);jve=n(TRe,"STRONG",{});var n4t=s(jve);kur=r(n4t,"roberta"),n4t.forEach(t),Sur=r(TRe," \u2014 "),vQ=n(TRe,"A",{href:!0});var s4t=s(vQ);Rur=r(s4t,"TFRobertaForMaskedLM"),s4t.forEach(t),Pur=r(TRe," (RoBERTa model)"),TRe.forEach(t),Bur=i(le),mE=n(le,"LI",{});var MRe=s(mE);Dve=n(MRe,"STRONG",{});var l4t=s(Dve);Iur=r(l4t,"t5"),l4t.forEach(t),qur=r(MRe," \u2014 "),FQ=n(MRe,"A",{href:!0});var i4t=s(FQ);Nur=r(i4t,"TFT5ForConditionalGeneration"),i4t.forEach(t),jur=r(MRe," (T5 model)"),MRe.forEach(t),Dur=i(le),fE=n(le,"LI",{});var ERe=s(fE);Gve=n(ERe,"STRONG",{});var d4t=s(Gve);Gur=r(d4t,"tapas"),d4t.forEach(t),Our=r(ERe," \u2014 "),TQ=n(ERe,"A",{href:!0});var c4t=s(TQ);Vur=r(c4t,"TFTapasForMaskedLM"),c4t.forEach(t),Xur=r(ERe," (TAPAS model)"),ERe.forEach(t),zur=i(le),gE=n(le,"LI",{});var CRe=s(gE);Ove=n(CRe,"STRONG",{});var m4t=s(Ove);Wur=r(m4t,"transfo-xl"),m4t.forEach(t),Qur=r(CRe," \u2014 "),MQ=n(CRe,"A",{href:!0});var f4t=s(MQ);Hur=r(f4t,"TFTransfoXLLMHeadModel"),f4t.forEach(t),Uur=r(CRe," (Transformer-XL model)"),CRe.forEach(t),Jur=i(le),hE=n(le,"LI",{});var wRe=s(hE);Vve=n(wRe,"STRONG",{});var g4t=s(Vve);Yur=r(g4t,"vit_mae"),g4t.forEach(t),Kur=r(wRe," \u2014 "),EQ=n(wRe,"A",{href:!0});var h4t=s(EQ);Zur=r(h4t,"TFViTMAEForPreTraining"),h4t.forEach(t),epr=r(wRe," (ViTMAE model)"),wRe.forEach(t),opr=i(le),uE=n(le,"LI",{});var ARe=s(uE);Xve=n(ARe,"STRONG",{});var u4t=s(Xve);rpr=r(u4t,"xlm"),u4t.forEach(t),tpr=r(ARe," \u2014 "),CQ=n(ARe,"A",{href:!0});var p4t=s(CQ);apr=r(p4t,"TFXLMWithLMHeadModel"),p4t.forEach(t),npr=r(ARe," (XLM model)"),ARe.forEach(t),spr=i(le),pE=n(le,"LI",{});var yRe=s(pE);zve=n(yRe,"STRONG",{});var _4t=s(zve);lpr=r(_4t,"xlm-roberta"),_4t.forEach(t),ipr=r(yRe," \u2014 "),wQ=n(yRe,"A",{href:!0});var b4t=s(wQ);dpr=r(b4t,"TFXLMRobertaForMaskedLM"),b4t.forEach(t),cpr=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),mpr=i(le),_E=n(le,"LI",{});var LRe=s(_E);Wve=n(LRe,"STRONG",{});var v4t=s(Wve);fpr=r(v4t,"xlnet"),v4t.forEach(t),gpr=r(LRe," \u2014 "),AQ=n(LRe,"A",{href:!0});var F4t=s(AQ);hpr=r(F4t,"TFXLNetLMHeadModel"),F4t.forEach(t),upr=r(LRe," (XLNet model)"),LRe.forEach(t),le.forEach(t),ppr=i(pl),T(bE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),lje=i(m),Qd=n(m,"H2",{class:!0});var gGe=s(Qd);vE=n(gGe,"A",{id:!0,class:!0,href:!0});var T4t=s(vE);Qve=n(T4t,"SPAN",{});var M4t=s(Qve);T(b7.$$.fragment,M4t),M4t.forEach(t),T4t.forEach(t),_pr=i(gGe),Hve=n(gGe,"SPAN",{});var E4t=s(Hve);bpr=r(E4t,"TFAutoModelForCausalLM"),E4t.forEach(t),gGe.forEach(t),ije=i(m),Zo=n(m,"DIV",{class:!0});var _l=s(Zo);T(v7.$$.fragment,_l),vpr=i(_l),Hd=n(_l,"P",{});var fee=s(Hd);Fpr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=n(fee,"A",{href:!0});var C4t=s(yQ);Tpr=r(C4t,"from_pretrained()"),C4t.forEach(t),Mpr=r(fee," class method or the "),LQ=n(fee,"A",{href:!0});var w4t=s(LQ);Epr=r(w4t,"from_config()"),w4t.forEach(t),Cpr=r(fee,` class
method.`),fee.forEach(t),wpr=i(_l),F7=n(_l,"P",{});var hGe=s(F7);Apr=r(hGe,"This class cannot be instantiated directly using "),Uve=n(hGe,"CODE",{});var A4t=s(Uve);ypr=r(A4t,"__init__()"),A4t.forEach(t),Lpr=r(hGe," (throws an error)."),hGe.forEach(t),xpr=i(_l),xt=n(_l,"DIV",{class:!0});var L6=s(xt);T(T7.$$.fragment,L6),$pr=i(L6),Jve=n(L6,"P",{});var y4t=s(Jve);kpr=r(y4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y4t.forEach(t),Spr=i(L6),Ud=n(L6,"P",{});var gee=s(Ud);Rpr=r(gee,`Note:
Loading a model from its configuration file does `),Yve=n(gee,"STRONG",{});var L4t=s(Yve);Ppr=r(L4t,"not"),L4t.forEach(t),Bpr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(gee,"A",{href:!0});var x4t=s(xQ);Ipr=r(x4t,"from_pretrained()"),x4t.forEach(t),qpr=r(gee," to load the model weights."),gee.forEach(t),Npr=i(L6),T(FE.$$.fragment,L6),L6.forEach(t),jpr=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(M7.$$.fragment,bl),Dpr=i(bl),Kve=n(bl,"P",{});var $4t=s(Kve);Gpr=r($4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$4t.forEach(t),Opr=i(bl),en=n(bl,"P",{});var x6=s(en);Vpr=r(x6,"The model class to instantiate is selected based on the "),Zve=n(x6,"CODE",{});var k4t=s(Zve);Xpr=r(k4t,"model_type"),k4t.forEach(t),zpr=r(x6,` property of the config object (either
passed as an argument or loaded from `),eFe=n(x6,"CODE",{});var S4t=s(eFe);Wpr=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),Qpr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=n(x6,"CODE",{});var R4t=s(oFe);Hpr=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),Upr=r(x6,":"),x6.forEach(t),Jpr=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);TE=n(Ce,"LI",{});var xRe=s(TE);rFe=n(xRe,"STRONG",{});var P4t=s(rFe);Ypr=r(P4t,"bert"),P4t.forEach(t),Kpr=r(xRe," \u2014 "),$Q=n(xRe,"A",{href:!0});var B4t=s($Q);Zpr=r(B4t,"TFBertLMHeadModel"),B4t.forEach(t),e_r=r(xRe," (BERT model)"),xRe.forEach(t),o_r=i(Ce),ME=n(Ce,"LI",{});var $Re=s(ME);tFe=n($Re,"STRONG",{});var I4t=s(tFe);r_r=r(I4t,"camembert"),I4t.forEach(t),t_r=r($Re," \u2014 "),kQ=n($Re,"A",{href:!0});var q4t=s(kQ);a_r=r(q4t,"TFCamembertForCausalLM"),q4t.forEach(t),n_r=r($Re," (CamemBERT model)"),$Re.forEach(t),s_r=i(Ce),EE=n(Ce,"LI",{});var kRe=s(EE);aFe=n(kRe,"STRONG",{});var N4t=s(aFe);l_r=r(N4t,"ctrl"),N4t.forEach(t),i_r=r(kRe," \u2014 "),SQ=n(kRe,"A",{href:!0});var j4t=s(SQ);d_r=r(j4t,"TFCTRLLMHeadModel"),j4t.forEach(t),c_r=r(kRe," (CTRL model)"),kRe.forEach(t),m_r=i(Ce),CE=n(Ce,"LI",{});var SRe=s(CE);nFe=n(SRe,"STRONG",{});var D4t=s(nFe);f_r=r(D4t,"gpt2"),D4t.forEach(t),g_r=r(SRe," \u2014 "),RQ=n(SRe,"A",{href:!0});var G4t=s(RQ);h_r=r(G4t,"TFGPT2LMHeadModel"),G4t.forEach(t),u_r=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),p_r=i(Ce),wE=n(Ce,"LI",{});var RRe=s(wE);sFe=n(RRe,"STRONG",{});var O4t=s(sFe);__r=r(O4t,"gptj"),O4t.forEach(t),b_r=r(RRe," \u2014 "),PQ=n(RRe,"A",{href:!0});var V4t=s(PQ);v_r=r(V4t,"TFGPTJForCausalLM"),V4t.forEach(t),F_r=r(RRe," (GPT-J model)"),RRe.forEach(t),T_r=i(Ce),AE=n(Ce,"LI",{});var PRe=s(AE);lFe=n(PRe,"STRONG",{});var X4t=s(lFe);M_r=r(X4t,"openai-gpt"),X4t.forEach(t),E_r=r(PRe," \u2014 "),BQ=n(PRe,"A",{href:!0});var z4t=s(BQ);C_r=r(z4t,"TFOpenAIGPTLMHeadModel"),z4t.forEach(t),w_r=r(PRe," (OpenAI GPT model)"),PRe.forEach(t),A_r=i(Ce),yE=n(Ce,"LI",{});var BRe=s(yE);iFe=n(BRe,"STRONG",{});var W4t=s(iFe);y_r=r(W4t,"rembert"),W4t.forEach(t),L_r=r(BRe," \u2014 "),IQ=n(BRe,"A",{href:!0});var Q4t=s(IQ);x_r=r(Q4t,"TFRemBertForCausalLM"),Q4t.forEach(t),$_r=r(BRe," (RemBERT model)"),BRe.forEach(t),k_r=i(Ce),LE=n(Ce,"LI",{});var IRe=s(LE);dFe=n(IRe,"STRONG",{});var H4t=s(dFe);S_r=r(H4t,"roberta"),H4t.forEach(t),R_r=r(IRe," \u2014 "),qQ=n(IRe,"A",{href:!0});var U4t=s(qQ);P_r=r(U4t,"TFRobertaForCausalLM"),U4t.forEach(t),B_r=r(IRe," (RoBERTa model)"),IRe.forEach(t),I_r=i(Ce),xE=n(Ce,"LI",{});var qRe=s(xE);cFe=n(qRe,"STRONG",{});var J4t=s(cFe);q_r=r(J4t,"roformer"),J4t.forEach(t),N_r=r(qRe," \u2014 "),NQ=n(qRe,"A",{href:!0});var Y4t=s(NQ);j_r=r(Y4t,"TFRoFormerForCausalLM"),Y4t.forEach(t),D_r=r(qRe," (RoFormer model)"),qRe.forEach(t),G_r=i(Ce),$E=n(Ce,"LI",{});var NRe=s($E);mFe=n(NRe,"STRONG",{});var K4t=s(mFe);O_r=r(K4t,"transfo-xl"),K4t.forEach(t),V_r=r(NRe," \u2014 "),jQ=n(NRe,"A",{href:!0});var Z4t=s(jQ);X_r=r(Z4t,"TFTransfoXLLMHeadModel"),Z4t.forEach(t),z_r=r(NRe," (Transformer-XL model)"),NRe.forEach(t),W_r=i(Ce),kE=n(Ce,"LI",{});var jRe=s(kE);fFe=n(jRe,"STRONG",{});var eEt=s(fFe);Q_r=r(eEt,"xlm"),eEt.forEach(t),H_r=r(jRe," \u2014 "),DQ=n(jRe,"A",{href:!0});var oEt=s(DQ);U_r=r(oEt,"TFXLMWithLMHeadModel"),oEt.forEach(t),J_r=r(jRe," (XLM model)"),jRe.forEach(t),Y_r=i(Ce),SE=n(Ce,"LI",{});var DRe=s(SE);gFe=n(DRe,"STRONG",{});var rEt=s(gFe);K_r=r(rEt,"xlnet"),rEt.forEach(t),Z_r=r(DRe," \u2014 "),GQ=n(DRe,"A",{href:!0});var tEt=s(GQ);ebr=r(tEt,"TFXLNetLMHeadModel"),tEt.forEach(t),obr=r(DRe," (XLNet model)"),DRe.forEach(t),Ce.forEach(t),rbr=i(bl),T(RE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),dje=i(m),Jd=n(m,"H2",{class:!0});var uGe=s(Jd);PE=n(uGe,"A",{id:!0,class:!0,href:!0});var aEt=s(PE);hFe=n(aEt,"SPAN",{});var nEt=s(hFe);T(E7.$$.fragment,nEt),nEt.forEach(t),aEt.forEach(t),tbr=i(uGe),uFe=n(uGe,"SPAN",{});var sEt=s(uFe);abr=r(sEt,"TFAutoModelForImageClassification"),sEt.forEach(t),uGe.forEach(t),cje=i(m),er=n(m,"DIV",{class:!0});var vl=s(er);T(C7.$$.fragment,vl),nbr=i(vl),Yd=n(vl,"P",{});var hee=s(Yd);sbr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=n(hee,"A",{href:!0});var lEt=s(OQ);lbr=r(lEt,"from_pretrained()"),lEt.forEach(t),ibr=r(hee," class method or the "),VQ=n(hee,"A",{href:!0});var iEt=s(VQ);dbr=r(iEt,"from_config()"),iEt.forEach(t),cbr=r(hee,` class
method.`),hee.forEach(t),mbr=i(vl),w7=n(vl,"P",{});var pGe=s(w7);fbr=r(pGe,"This class cannot be instantiated directly using "),pFe=n(pGe,"CODE",{});var dEt=s(pFe);gbr=r(dEt,"__init__()"),dEt.forEach(t),hbr=r(pGe," (throws an error)."),pGe.forEach(t),ubr=i(vl),$t=n(vl,"DIV",{class:!0});var $6=s($t);T(A7.$$.fragment,$6),pbr=i($6),_Fe=n($6,"P",{});var cEt=s(_Fe);_br=r(cEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cEt.forEach(t),bbr=i($6),Kd=n($6,"P",{});var uee=s(Kd);vbr=r(uee,`Note:
Loading a model from its configuration file does `),bFe=n(uee,"STRONG",{});var mEt=s(bFe);Fbr=r(mEt,"not"),mEt.forEach(t),Tbr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(uee,"A",{href:!0});var fEt=s(XQ);Mbr=r(fEt,"from_pretrained()"),fEt.forEach(t),Ebr=r(uee," to load the model weights."),uee.forEach(t),Cbr=i($6),T(BE.$$.fragment,$6),$6.forEach(t),wbr=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(y7.$$.fragment,Fl),Abr=i(Fl),vFe=n(Fl,"P",{});var gEt=s(vFe);ybr=r(gEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gEt.forEach(t),Lbr=i(Fl),on=n(Fl,"P",{});var k6=s(on);xbr=r(k6,"The model class to instantiate is selected based on the "),FFe=n(k6,"CODE",{});var hEt=s(FFe);$br=r(hEt,"model_type"),hEt.forEach(t),kbr=r(k6,` property of the config object (either
passed as an argument or loaded from `),TFe=n(k6,"CODE",{});var uEt=s(TFe);Sbr=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),Rbr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(k6,"CODE",{});var pEt=s(MFe);Pbr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),Bbr=r(k6,":"),k6.forEach(t),Ibr=i(Fl),rn=n(Fl,"UL",{});var S6=s(rn);IE=n(S6,"LI",{});var GRe=s(IE);EFe=n(GRe,"STRONG",{});var _Et=s(EFe);qbr=r(_Et,"convnext"),_Et.forEach(t),Nbr=r(GRe," \u2014 "),zQ=n(GRe,"A",{href:!0});var bEt=s(zQ);jbr=r(bEt,"TFConvNextForImageClassification"),bEt.forEach(t),Dbr=r(GRe," (ConvNext model)"),GRe.forEach(t),Gbr=i(S6),qE=n(S6,"LI",{});var ORe=s(qE);CFe=n(ORe,"STRONG",{});var vEt=s(CFe);Obr=r(vEt,"data2vec-vision"),vEt.forEach(t),Vbr=r(ORe," \u2014 "),WQ=n(ORe,"A",{href:!0});var FEt=s(WQ);Xbr=r(FEt,"TFData2VecVisionForImageClassification"),FEt.forEach(t),zbr=r(ORe," (Data2VecVision model)"),ORe.forEach(t),Wbr=i(S6),NE=n(S6,"LI",{});var VRe=s(NE);wFe=n(VRe,"STRONG",{});var TEt=s(wFe);Qbr=r(TEt,"swin"),TEt.forEach(t),Hbr=r(VRe," \u2014 "),QQ=n(VRe,"A",{href:!0});var MEt=s(QQ);Ubr=r(MEt,"TFSwinForImageClassification"),MEt.forEach(t),Jbr=r(VRe," (Swin model)"),VRe.forEach(t),Ybr=i(S6),jE=n(S6,"LI",{});var XRe=s(jE);AFe=n(XRe,"STRONG",{});var EEt=s(AFe);Kbr=r(EEt,"vit"),EEt.forEach(t),Zbr=r(XRe," \u2014 "),HQ=n(XRe,"A",{href:!0});var CEt=s(HQ);e2r=r(CEt,"TFViTForImageClassification"),CEt.forEach(t),o2r=r(XRe," (ViT model)"),XRe.forEach(t),S6.forEach(t),r2r=i(Fl),T(DE.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),mje=i(m),Zd=n(m,"H2",{class:!0});var _Ge=s(Zd);GE=n(_Ge,"A",{id:!0,class:!0,href:!0});var wEt=s(GE);yFe=n(wEt,"SPAN",{});var AEt=s(yFe);T(L7.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),t2r=i(_Ge),LFe=n(_Ge,"SPAN",{});var yEt=s(LFe);a2r=r(yEt,"TFAutoModelForMaskedLM"),yEt.forEach(t),_Ge.forEach(t),fje=i(m),or=n(m,"DIV",{class:!0});var Tl=s(or);T(x7.$$.fragment,Tl),n2r=i(Tl),ec=n(Tl,"P",{});var pee=s(ec);s2r=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UQ=n(pee,"A",{href:!0});var LEt=s(UQ);l2r=r(LEt,"from_pretrained()"),LEt.forEach(t),i2r=r(pee," class method or the "),JQ=n(pee,"A",{href:!0});var xEt=s(JQ);d2r=r(xEt,"from_config()"),xEt.forEach(t),c2r=r(pee,` class
method.`),pee.forEach(t),m2r=i(Tl),$7=n(Tl,"P",{});var bGe=s($7);f2r=r(bGe,"This class cannot be instantiated directly using "),xFe=n(bGe,"CODE",{});var $Et=s(xFe);g2r=r($Et,"__init__()"),$Et.forEach(t),h2r=r(bGe," (throws an error)."),bGe.forEach(t),u2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var R6=s(kt);T(k7.$$.fragment,R6),p2r=i(R6),$Fe=n(R6,"P",{});var kEt=s($Fe);_2r=r(kEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kEt.forEach(t),b2r=i(R6),oc=n(R6,"P",{});var _ee=s(oc);v2r=r(_ee,`Note:
Loading a model from its configuration file does `),kFe=n(_ee,"STRONG",{});var SEt=s(kFe);F2r=r(SEt,"not"),SEt.forEach(t),T2r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(_ee,"A",{href:!0});var REt=s(YQ);M2r=r(REt,"from_pretrained()"),REt.forEach(t),E2r=r(_ee," to load the model weights."),_ee.forEach(t),C2r=i(R6),T(OE.$$.fragment,R6),R6.forEach(t),w2r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(S7.$$.fragment,Ml),A2r=i(Ml),SFe=n(Ml,"P",{});var PEt=s(SFe);y2r=r(PEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PEt.forEach(t),L2r=i(Ml),tn=n(Ml,"P",{});var P6=s(tn);x2r=r(P6,"The model class to instantiate is selected based on the "),RFe=n(P6,"CODE",{});var BEt=s(RFe);$2r=r(BEt,"model_type"),BEt.forEach(t),k2r=r(P6,` property of the config object (either
passed as an argument or loaded from `),PFe=n(P6,"CODE",{});var IEt=s(PFe);S2r=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),R2r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(P6,"CODE",{});var qEt=s(BFe);P2r=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),B2r=r(P6,":"),P6.forEach(t),I2r=i(Ml),ie=n(Ml,"UL",{});var me=s(ie);VE=n(me,"LI",{});var zRe=s(VE);IFe=n(zRe,"STRONG",{});var NEt=s(IFe);q2r=r(NEt,"albert"),NEt.forEach(t),N2r=r(zRe," \u2014 "),KQ=n(zRe,"A",{href:!0});var jEt=s(KQ);j2r=r(jEt,"TFAlbertForMaskedLM"),jEt.forEach(t),D2r=r(zRe," (ALBERT model)"),zRe.forEach(t),G2r=i(me),XE=n(me,"LI",{});var WRe=s(XE);qFe=n(WRe,"STRONG",{});var DEt=s(qFe);O2r=r(DEt,"bert"),DEt.forEach(t),V2r=r(WRe," \u2014 "),ZQ=n(WRe,"A",{href:!0});var GEt=s(ZQ);X2r=r(GEt,"TFBertForMaskedLM"),GEt.forEach(t),z2r=r(WRe," (BERT model)"),WRe.forEach(t),W2r=i(me),zE=n(me,"LI",{});var QRe=s(zE);NFe=n(QRe,"STRONG",{});var OEt=s(NFe);Q2r=r(OEt,"camembert"),OEt.forEach(t),H2r=r(QRe," \u2014 "),eH=n(QRe,"A",{href:!0});var VEt=s(eH);U2r=r(VEt,"TFCamembertForMaskedLM"),VEt.forEach(t),J2r=r(QRe," (CamemBERT model)"),QRe.forEach(t),Y2r=i(me),WE=n(me,"LI",{});var HRe=s(WE);jFe=n(HRe,"STRONG",{});var XEt=s(jFe);K2r=r(XEt,"convbert"),XEt.forEach(t),Z2r=r(HRe," \u2014 "),oH=n(HRe,"A",{href:!0});var zEt=s(oH);evr=r(zEt,"TFConvBertForMaskedLM"),zEt.forEach(t),ovr=r(HRe," (ConvBERT model)"),HRe.forEach(t),rvr=i(me),QE=n(me,"LI",{});var URe=s(QE);DFe=n(URe,"STRONG",{});var WEt=s(DFe);tvr=r(WEt,"deberta"),WEt.forEach(t),avr=r(URe," \u2014 "),rH=n(URe,"A",{href:!0});var QEt=s(rH);nvr=r(QEt,"TFDebertaForMaskedLM"),QEt.forEach(t),svr=r(URe," (DeBERTa model)"),URe.forEach(t),lvr=i(me),HE=n(me,"LI",{});var JRe=s(HE);GFe=n(JRe,"STRONG",{});var HEt=s(GFe);ivr=r(HEt,"deberta-v2"),HEt.forEach(t),dvr=r(JRe," \u2014 "),tH=n(JRe,"A",{href:!0});var UEt=s(tH);cvr=r(UEt,"TFDebertaV2ForMaskedLM"),UEt.forEach(t),mvr=r(JRe," (DeBERTa-v2 model)"),JRe.forEach(t),fvr=i(me),UE=n(me,"LI",{});var YRe=s(UE);OFe=n(YRe,"STRONG",{});var JEt=s(OFe);gvr=r(JEt,"distilbert"),JEt.forEach(t),hvr=r(YRe," \u2014 "),aH=n(YRe,"A",{href:!0});var YEt=s(aH);uvr=r(YEt,"TFDistilBertForMaskedLM"),YEt.forEach(t),pvr=r(YRe," (DistilBERT model)"),YRe.forEach(t),_vr=i(me),JE=n(me,"LI",{});var KRe=s(JE);VFe=n(KRe,"STRONG",{});var KEt=s(VFe);bvr=r(KEt,"electra"),KEt.forEach(t),vvr=r(KRe," \u2014 "),nH=n(KRe,"A",{href:!0});var ZEt=s(nH);Fvr=r(ZEt,"TFElectraForMaskedLM"),ZEt.forEach(t),Tvr=r(KRe," (ELECTRA model)"),KRe.forEach(t),Mvr=i(me),YE=n(me,"LI",{});var ZRe=s(YE);XFe=n(ZRe,"STRONG",{});var eCt=s(XFe);Evr=r(eCt,"flaubert"),eCt.forEach(t),Cvr=r(ZRe," \u2014 "),sH=n(ZRe,"A",{href:!0});var oCt=s(sH);wvr=r(oCt,"TFFlaubertWithLMHeadModel"),oCt.forEach(t),Avr=r(ZRe," (FlauBERT model)"),ZRe.forEach(t),yvr=i(me),KE=n(me,"LI",{});var ePe=s(KE);zFe=n(ePe,"STRONG",{});var rCt=s(zFe);Lvr=r(rCt,"funnel"),rCt.forEach(t),xvr=r(ePe," \u2014 "),lH=n(ePe,"A",{href:!0});var tCt=s(lH);$vr=r(tCt,"TFFunnelForMaskedLM"),tCt.forEach(t),kvr=r(ePe," (Funnel Transformer model)"),ePe.forEach(t),Svr=i(me),ZE=n(me,"LI",{});var oPe=s(ZE);WFe=n(oPe,"STRONG",{});var aCt=s(WFe);Rvr=r(aCt,"layoutlm"),aCt.forEach(t),Pvr=r(oPe," \u2014 "),iH=n(oPe,"A",{href:!0});var nCt=s(iH);Bvr=r(nCt,"TFLayoutLMForMaskedLM"),nCt.forEach(t),Ivr=r(oPe," (LayoutLM model)"),oPe.forEach(t),qvr=i(me),eC=n(me,"LI",{});var rPe=s(eC);QFe=n(rPe,"STRONG",{});var sCt=s(QFe);Nvr=r(sCt,"longformer"),sCt.forEach(t),jvr=r(rPe," \u2014 "),dH=n(rPe,"A",{href:!0});var lCt=s(dH);Dvr=r(lCt,"TFLongformerForMaskedLM"),lCt.forEach(t),Gvr=r(rPe," (Longformer model)"),rPe.forEach(t),Ovr=i(me),oC=n(me,"LI",{});var tPe=s(oC);HFe=n(tPe,"STRONG",{});var iCt=s(HFe);Vvr=r(iCt,"mobilebert"),iCt.forEach(t),Xvr=r(tPe," \u2014 "),cH=n(tPe,"A",{href:!0});var dCt=s(cH);zvr=r(dCt,"TFMobileBertForMaskedLM"),dCt.forEach(t),Wvr=r(tPe," (MobileBERT model)"),tPe.forEach(t),Qvr=i(me),rC=n(me,"LI",{});var aPe=s(rC);UFe=n(aPe,"STRONG",{});var cCt=s(UFe);Hvr=r(cCt,"mpnet"),cCt.forEach(t),Uvr=r(aPe," \u2014 "),mH=n(aPe,"A",{href:!0});var mCt=s(mH);Jvr=r(mCt,"TFMPNetForMaskedLM"),mCt.forEach(t),Yvr=r(aPe," (MPNet model)"),aPe.forEach(t),Kvr=i(me),tC=n(me,"LI",{});var nPe=s(tC);JFe=n(nPe,"STRONG",{});var fCt=s(JFe);Zvr=r(fCt,"rembert"),fCt.forEach(t),eFr=r(nPe," \u2014 "),fH=n(nPe,"A",{href:!0});var gCt=s(fH);oFr=r(gCt,"TFRemBertForMaskedLM"),gCt.forEach(t),rFr=r(nPe," (RemBERT model)"),nPe.forEach(t),tFr=i(me),aC=n(me,"LI",{});var sPe=s(aC);YFe=n(sPe,"STRONG",{});var hCt=s(YFe);aFr=r(hCt,"roberta"),hCt.forEach(t),nFr=r(sPe," \u2014 "),gH=n(sPe,"A",{href:!0});var uCt=s(gH);sFr=r(uCt,"TFRobertaForMaskedLM"),uCt.forEach(t),lFr=r(sPe," (RoBERTa model)"),sPe.forEach(t),iFr=i(me),nC=n(me,"LI",{});var lPe=s(nC);KFe=n(lPe,"STRONG",{});var pCt=s(KFe);dFr=r(pCt,"roformer"),pCt.forEach(t),cFr=r(lPe," \u2014 "),hH=n(lPe,"A",{href:!0});var _Ct=s(hH);mFr=r(_Ct,"TFRoFormerForMaskedLM"),_Ct.forEach(t),fFr=r(lPe," (RoFormer model)"),lPe.forEach(t),gFr=i(me),sC=n(me,"LI",{});var iPe=s(sC);ZFe=n(iPe,"STRONG",{});var bCt=s(ZFe);hFr=r(bCt,"tapas"),bCt.forEach(t),uFr=r(iPe," \u2014 "),uH=n(iPe,"A",{href:!0});var vCt=s(uH);pFr=r(vCt,"TFTapasForMaskedLM"),vCt.forEach(t),_Fr=r(iPe," (TAPAS model)"),iPe.forEach(t),bFr=i(me),lC=n(me,"LI",{});var dPe=s(lC);e1e=n(dPe,"STRONG",{});var FCt=s(e1e);vFr=r(FCt,"xlm"),FCt.forEach(t),FFr=r(dPe," \u2014 "),pH=n(dPe,"A",{href:!0});var TCt=s(pH);TFr=r(TCt,"TFXLMWithLMHeadModel"),TCt.forEach(t),MFr=r(dPe," (XLM model)"),dPe.forEach(t),EFr=i(me),iC=n(me,"LI",{});var cPe=s(iC);o1e=n(cPe,"STRONG",{});var MCt=s(o1e);CFr=r(MCt,"xlm-roberta"),MCt.forEach(t),wFr=r(cPe," \u2014 "),_H=n(cPe,"A",{href:!0});var ECt=s(_H);AFr=r(ECt,"TFXLMRobertaForMaskedLM"),ECt.forEach(t),yFr=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),me.forEach(t),LFr=i(Ml),T(dC.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),gje=i(m),rc=n(m,"H2",{class:!0});var vGe=s(rc);cC=n(vGe,"A",{id:!0,class:!0,href:!0});var CCt=s(cC);r1e=n(CCt,"SPAN",{});var wCt=s(r1e);T(R7.$$.fragment,wCt),wCt.forEach(t),CCt.forEach(t),xFr=i(vGe),t1e=n(vGe,"SPAN",{});var ACt=s(t1e);$Fr=r(ACt,"TFAutoModelForSeq2SeqLM"),ACt.forEach(t),vGe.forEach(t),hje=i(m),rr=n(m,"DIV",{class:!0});var El=s(rr);T(P7.$$.fragment,El),kFr=i(El),tc=n(El,"P",{});var bee=s(tc);SFr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bH=n(bee,"A",{href:!0});var yCt=s(bH);RFr=r(yCt,"from_pretrained()"),yCt.forEach(t),PFr=r(bee," class method or the "),vH=n(bee,"A",{href:!0});var LCt=s(vH);BFr=r(LCt,"from_config()"),LCt.forEach(t),IFr=r(bee,` class
method.`),bee.forEach(t),qFr=i(El),B7=n(El,"P",{});var FGe=s(B7);NFr=r(FGe,"This class cannot be instantiated directly using "),a1e=n(FGe,"CODE",{});var xCt=s(a1e);jFr=r(xCt,"__init__()"),xCt.forEach(t),DFr=r(FGe," (throws an error)."),FGe.forEach(t),GFr=i(El),St=n(El,"DIV",{class:!0});var B6=s(St);T(I7.$$.fragment,B6),OFr=i(B6),n1e=n(B6,"P",{});var $Ct=s(n1e);VFr=r($Ct,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$Ct.forEach(t),XFr=i(B6),ac=n(B6,"P",{});var vee=s(ac);zFr=r(vee,`Note:
Loading a model from its configuration file does `),s1e=n(vee,"STRONG",{});var kCt=s(s1e);WFr=r(kCt,"not"),kCt.forEach(t),QFr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(vee,"A",{href:!0});var SCt=s(FH);HFr=r(SCt,"from_pretrained()"),SCt.forEach(t),UFr=r(vee," to load the model weights."),vee.forEach(t),JFr=i(B6),T(mC.$$.fragment,B6),B6.forEach(t),YFr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(q7.$$.fragment,Cl),KFr=i(Cl),l1e=n(Cl,"P",{});var RCt=s(l1e);ZFr=r(RCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RCt.forEach(t),e1r=i(Cl),an=n(Cl,"P",{});var I6=s(an);o1r=r(I6,"The model class to instantiate is selected based on the "),i1e=n(I6,"CODE",{});var PCt=s(i1e);r1r=r(PCt,"model_type"),PCt.forEach(t),t1r=r(I6,` property of the config object (either
passed as an argument or loaded from `),d1e=n(I6,"CODE",{});var BCt=s(d1e);a1r=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),n1r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(I6,"CODE",{});var ICt=s(c1e);s1r=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),l1r=r(I6,":"),I6.forEach(t),i1r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);fC=n(Be,"LI",{});var mPe=s(fC);m1e=n(mPe,"STRONG",{});var qCt=s(m1e);d1r=r(qCt,"bart"),qCt.forEach(t),c1r=r(mPe," \u2014 "),TH=n(mPe,"A",{href:!0});var NCt=s(TH);m1r=r(NCt,"TFBartForConditionalGeneration"),NCt.forEach(t),f1r=r(mPe," (BART model)"),mPe.forEach(t),g1r=i(Be),gC=n(Be,"LI",{});var fPe=s(gC);f1e=n(fPe,"STRONG",{});var jCt=s(f1e);h1r=r(jCt,"blenderbot"),jCt.forEach(t),u1r=r(fPe," \u2014 "),MH=n(fPe,"A",{href:!0});var DCt=s(MH);p1r=r(DCt,"TFBlenderbotForConditionalGeneration"),DCt.forEach(t),_1r=r(fPe," (Blenderbot model)"),fPe.forEach(t),b1r=i(Be),hC=n(Be,"LI",{});var gPe=s(hC);g1e=n(gPe,"STRONG",{});var GCt=s(g1e);v1r=r(GCt,"blenderbot-small"),GCt.forEach(t),F1r=r(gPe," \u2014 "),EH=n(gPe,"A",{href:!0});var OCt=s(EH);T1r=r(OCt,"TFBlenderbotSmallForConditionalGeneration"),OCt.forEach(t),M1r=r(gPe," (BlenderbotSmall model)"),gPe.forEach(t),E1r=i(Be),uC=n(Be,"LI",{});var hPe=s(uC);h1e=n(hPe,"STRONG",{});var VCt=s(h1e);C1r=r(VCt,"encoder-decoder"),VCt.forEach(t),w1r=r(hPe," \u2014 "),CH=n(hPe,"A",{href:!0});var XCt=s(CH);A1r=r(XCt,"TFEncoderDecoderModel"),XCt.forEach(t),y1r=r(hPe," (Encoder decoder model)"),hPe.forEach(t),L1r=i(Be),pC=n(Be,"LI",{});var uPe=s(pC);u1e=n(uPe,"STRONG",{});var zCt=s(u1e);x1r=r(zCt,"led"),zCt.forEach(t),$1r=r(uPe," \u2014 "),wH=n(uPe,"A",{href:!0});var WCt=s(wH);k1r=r(WCt,"TFLEDForConditionalGeneration"),WCt.forEach(t),S1r=r(uPe," (LED model)"),uPe.forEach(t),R1r=i(Be),_C=n(Be,"LI",{});var pPe=s(_C);p1e=n(pPe,"STRONG",{});var QCt=s(p1e);P1r=r(QCt,"marian"),QCt.forEach(t),B1r=r(pPe," \u2014 "),AH=n(pPe,"A",{href:!0});var HCt=s(AH);I1r=r(HCt,"TFMarianMTModel"),HCt.forEach(t),q1r=r(pPe," (Marian model)"),pPe.forEach(t),N1r=i(Be),bC=n(Be,"LI",{});var _Pe=s(bC);_1e=n(_Pe,"STRONG",{});var UCt=s(_1e);j1r=r(UCt,"mbart"),UCt.forEach(t),D1r=r(_Pe," \u2014 "),yH=n(_Pe,"A",{href:!0});var JCt=s(yH);G1r=r(JCt,"TFMBartForConditionalGeneration"),JCt.forEach(t),O1r=r(_Pe," (mBART model)"),_Pe.forEach(t),V1r=i(Be),vC=n(Be,"LI",{});var bPe=s(vC);b1e=n(bPe,"STRONG",{});var YCt=s(b1e);X1r=r(YCt,"mt5"),YCt.forEach(t),z1r=r(bPe," \u2014 "),LH=n(bPe,"A",{href:!0});var KCt=s(LH);W1r=r(KCt,"TFMT5ForConditionalGeneration"),KCt.forEach(t),Q1r=r(bPe," (mT5 model)"),bPe.forEach(t),H1r=i(Be),FC=n(Be,"LI",{});var vPe=s(FC);v1e=n(vPe,"STRONG",{});var ZCt=s(v1e);U1r=r(ZCt,"pegasus"),ZCt.forEach(t),J1r=r(vPe," \u2014 "),xH=n(vPe,"A",{href:!0});var e5t=s(xH);Y1r=r(e5t,"TFPegasusForConditionalGeneration"),e5t.forEach(t),K1r=r(vPe," (Pegasus model)"),vPe.forEach(t),Z1r=i(Be),TC=n(Be,"LI",{});var FPe=s(TC);F1e=n(FPe,"STRONG",{});var o5t=s(F1e);eTr=r(o5t,"t5"),o5t.forEach(t),oTr=r(FPe," \u2014 "),$H=n(FPe,"A",{href:!0});var r5t=s($H);rTr=r(r5t,"TFT5ForConditionalGeneration"),r5t.forEach(t),tTr=r(FPe," (T5 model)"),FPe.forEach(t),Be.forEach(t),aTr=i(Cl),T(MC.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),uje=i(m),nc=n(m,"H2",{class:!0});var TGe=s(nc);EC=n(TGe,"A",{id:!0,class:!0,href:!0});var t5t=s(EC);T1e=n(t5t,"SPAN",{});var a5t=s(T1e);T(N7.$$.fragment,a5t),a5t.forEach(t),t5t.forEach(t),nTr=i(TGe),M1e=n(TGe,"SPAN",{});var n5t=s(M1e);sTr=r(n5t,"TFAutoModelForSequenceClassification"),n5t.forEach(t),TGe.forEach(t),pje=i(m),tr=n(m,"DIV",{class:!0});var wl=s(tr);T(j7.$$.fragment,wl),lTr=i(wl),sc=n(wl,"P",{});var Fee=s(sc);iTr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=n(Fee,"A",{href:!0});var s5t=s(kH);dTr=r(s5t,"from_pretrained()"),s5t.forEach(t),cTr=r(Fee," class method or the "),SH=n(Fee,"A",{href:!0});var l5t=s(SH);mTr=r(l5t,"from_config()"),l5t.forEach(t),fTr=r(Fee,` class
method.`),Fee.forEach(t),gTr=i(wl),D7=n(wl,"P",{});var MGe=s(D7);hTr=r(MGe,"This class cannot be instantiated directly using "),E1e=n(MGe,"CODE",{});var i5t=s(E1e);uTr=r(i5t,"__init__()"),i5t.forEach(t),pTr=r(MGe," (throws an error)."),MGe.forEach(t),_Tr=i(wl),Rt=n(wl,"DIV",{class:!0});var q6=s(Rt);T(G7.$$.fragment,q6),bTr=i(q6),C1e=n(q6,"P",{});var d5t=s(C1e);vTr=r(d5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d5t.forEach(t),FTr=i(q6),lc=n(q6,"P",{});var Tee=s(lc);TTr=r(Tee,`Note:
Loading a model from its configuration file does `),w1e=n(Tee,"STRONG",{});var c5t=s(w1e);MTr=r(c5t,"not"),c5t.forEach(t),ETr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Tee,"A",{href:!0});var m5t=s(RH);CTr=r(m5t,"from_pretrained()"),m5t.forEach(t),wTr=r(Tee," to load the model weights."),Tee.forEach(t),ATr=i(q6),T(CC.$$.fragment,q6),q6.forEach(t),yTr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(O7.$$.fragment,Al),LTr=i(Al),A1e=n(Al,"P",{});var f5t=s(A1e);xTr=r(f5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),f5t.forEach(t),$Tr=i(Al),nn=n(Al,"P",{});var N6=s(nn);kTr=r(N6,"The model class to instantiate is selected based on the "),y1e=n(N6,"CODE",{});var g5t=s(y1e);STr=r(g5t,"model_type"),g5t.forEach(t),RTr=r(N6,` property of the config object (either
passed as an argument or loaded from `),L1e=n(N6,"CODE",{});var h5t=s(L1e);PTr=r(h5t,"pretrained_model_name_or_path"),h5t.forEach(t),BTr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(N6,"CODE",{});var u5t=s(x1e);ITr=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),qTr=r(N6,":"),N6.forEach(t),NTr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);wC=n(ae,"LI",{});var TPe=s(wC);$1e=n(TPe,"STRONG",{});var p5t=s($1e);jTr=r(p5t,"albert"),p5t.forEach(t),DTr=r(TPe," \u2014 "),PH=n(TPe,"A",{href:!0});var _5t=s(PH);GTr=r(_5t,"TFAlbertForSequenceClassification"),_5t.forEach(t),OTr=r(TPe," (ALBERT model)"),TPe.forEach(t),VTr=i(ae),AC=n(ae,"LI",{});var MPe=s(AC);k1e=n(MPe,"STRONG",{});var b5t=s(k1e);XTr=r(b5t,"bert"),b5t.forEach(t),zTr=r(MPe," \u2014 "),BH=n(MPe,"A",{href:!0});var v5t=s(BH);WTr=r(v5t,"TFBertForSequenceClassification"),v5t.forEach(t),QTr=r(MPe," (BERT model)"),MPe.forEach(t),HTr=i(ae),yC=n(ae,"LI",{});var EPe=s(yC);S1e=n(EPe,"STRONG",{});var F5t=s(S1e);UTr=r(F5t,"camembert"),F5t.forEach(t),JTr=r(EPe," \u2014 "),IH=n(EPe,"A",{href:!0});var T5t=s(IH);YTr=r(T5t,"TFCamembertForSequenceClassification"),T5t.forEach(t),KTr=r(EPe," (CamemBERT model)"),EPe.forEach(t),ZTr=i(ae),LC=n(ae,"LI",{});var CPe=s(LC);R1e=n(CPe,"STRONG",{});var M5t=s(R1e);eMr=r(M5t,"convbert"),M5t.forEach(t),oMr=r(CPe," \u2014 "),qH=n(CPe,"A",{href:!0});var E5t=s(qH);rMr=r(E5t,"TFConvBertForSequenceClassification"),E5t.forEach(t),tMr=r(CPe," (ConvBERT model)"),CPe.forEach(t),aMr=i(ae),xC=n(ae,"LI",{});var wPe=s(xC);P1e=n(wPe,"STRONG",{});var C5t=s(P1e);nMr=r(C5t,"ctrl"),C5t.forEach(t),sMr=r(wPe," \u2014 "),NH=n(wPe,"A",{href:!0});var w5t=s(NH);lMr=r(w5t,"TFCTRLForSequenceClassification"),w5t.forEach(t),iMr=r(wPe," (CTRL model)"),wPe.forEach(t),dMr=i(ae),$C=n(ae,"LI",{});var APe=s($C);B1e=n(APe,"STRONG",{});var A5t=s(B1e);cMr=r(A5t,"deberta"),A5t.forEach(t),mMr=r(APe," \u2014 "),jH=n(APe,"A",{href:!0});var y5t=s(jH);fMr=r(y5t,"TFDebertaForSequenceClassification"),y5t.forEach(t),gMr=r(APe," (DeBERTa model)"),APe.forEach(t),hMr=i(ae),kC=n(ae,"LI",{});var yPe=s(kC);I1e=n(yPe,"STRONG",{});var L5t=s(I1e);uMr=r(L5t,"deberta-v2"),L5t.forEach(t),pMr=r(yPe," \u2014 "),DH=n(yPe,"A",{href:!0});var x5t=s(DH);_Mr=r(x5t,"TFDebertaV2ForSequenceClassification"),x5t.forEach(t),bMr=r(yPe," (DeBERTa-v2 model)"),yPe.forEach(t),vMr=i(ae),SC=n(ae,"LI",{});var LPe=s(SC);q1e=n(LPe,"STRONG",{});var $5t=s(q1e);FMr=r($5t,"distilbert"),$5t.forEach(t),TMr=r(LPe," \u2014 "),GH=n(LPe,"A",{href:!0});var k5t=s(GH);MMr=r(k5t,"TFDistilBertForSequenceClassification"),k5t.forEach(t),EMr=r(LPe," (DistilBERT model)"),LPe.forEach(t),CMr=i(ae),RC=n(ae,"LI",{});var xPe=s(RC);N1e=n(xPe,"STRONG",{});var S5t=s(N1e);wMr=r(S5t,"electra"),S5t.forEach(t),AMr=r(xPe," \u2014 "),OH=n(xPe,"A",{href:!0});var R5t=s(OH);yMr=r(R5t,"TFElectraForSequenceClassification"),R5t.forEach(t),LMr=r(xPe," (ELECTRA model)"),xPe.forEach(t),xMr=i(ae),PC=n(ae,"LI",{});var $Pe=s(PC);j1e=n($Pe,"STRONG",{});var P5t=s(j1e);$Mr=r(P5t,"flaubert"),P5t.forEach(t),kMr=r($Pe," \u2014 "),VH=n($Pe,"A",{href:!0});var B5t=s(VH);SMr=r(B5t,"TFFlaubertForSequenceClassification"),B5t.forEach(t),RMr=r($Pe," (FlauBERT model)"),$Pe.forEach(t),PMr=i(ae),BC=n(ae,"LI",{});var kPe=s(BC);D1e=n(kPe,"STRONG",{});var I5t=s(D1e);BMr=r(I5t,"funnel"),I5t.forEach(t),IMr=r(kPe," \u2014 "),XH=n(kPe,"A",{href:!0});var q5t=s(XH);qMr=r(q5t,"TFFunnelForSequenceClassification"),q5t.forEach(t),NMr=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),jMr=i(ae),IC=n(ae,"LI",{});var SPe=s(IC);G1e=n(SPe,"STRONG",{});var N5t=s(G1e);DMr=r(N5t,"gpt2"),N5t.forEach(t),GMr=r(SPe," \u2014 "),zH=n(SPe,"A",{href:!0});var j5t=s(zH);OMr=r(j5t,"TFGPT2ForSequenceClassification"),j5t.forEach(t),VMr=r(SPe," (OpenAI GPT-2 model)"),SPe.forEach(t),XMr=i(ae),qC=n(ae,"LI",{});var RPe=s(qC);O1e=n(RPe,"STRONG",{});var D5t=s(O1e);zMr=r(D5t,"gptj"),D5t.forEach(t),WMr=r(RPe," \u2014 "),WH=n(RPe,"A",{href:!0});var G5t=s(WH);QMr=r(G5t,"TFGPTJForSequenceClassification"),G5t.forEach(t),HMr=r(RPe," (GPT-J model)"),RPe.forEach(t),UMr=i(ae),NC=n(ae,"LI",{});var PPe=s(NC);V1e=n(PPe,"STRONG",{});var O5t=s(V1e);JMr=r(O5t,"layoutlm"),O5t.forEach(t),YMr=r(PPe," \u2014 "),QH=n(PPe,"A",{href:!0});var V5t=s(QH);KMr=r(V5t,"TFLayoutLMForSequenceClassification"),V5t.forEach(t),ZMr=r(PPe," (LayoutLM model)"),PPe.forEach(t),e4r=i(ae),jC=n(ae,"LI",{});var BPe=s(jC);X1e=n(BPe,"STRONG",{});var X5t=s(X1e);o4r=r(X5t,"longformer"),X5t.forEach(t),r4r=r(BPe," \u2014 "),HH=n(BPe,"A",{href:!0});var z5t=s(HH);t4r=r(z5t,"TFLongformerForSequenceClassification"),z5t.forEach(t),a4r=r(BPe," (Longformer model)"),BPe.forEach(t),n4r=i(ae),DC=n(ae,"LI",{});var IPe=s(DC);z1e=n(IPe,"STRONG",{});var W5t=s(z1e);s4r=r(W5t,"mobilebert"),W5t.forEach(t),l4r=r(IPe," \u2014 "),UH=n(IPe,"A",{href:!0});var Q5t=s(UH);i4r=r(Q5t,"TFMobileBertForSequenceClassification"),Q5t.forEach(t),d4r=r(IPe," (MobileBERT model)"),IPe.forEach(t),c4r=i(ae),GC=n(ae,"LI",{});var qPe=s(GC);W1e=n(qPe,"STRONG",{});var H5t=s(W1e);m4r=r(H5t,"mpnet"),H5t.forEach(t),f4r=r(qPe," \u2014 "),JH=n(qPe,"A",{href:!0});var U5t=s(JH);g4r=r(U5t,"TFMPNetForSequenceClassification"),U5t.forEach(t),h4r=r(qPe," (MPNet model)"),qPe.forEach(t),u4r=i(ae),OC=n(ae,"LI",{});var NPe=s(OC);Q1e=n(NPe,"STRONG",{});var J5t=s(Q1e);p4r=r(J5t,"openai-gpt"),J5t.forEach(t),_4r=r(NPe," \u2014 "),YH=n(NPe,"A",{href:!0});var Y5t=s(YH);b4r=r(Y5t,"TFOpenAIGPTForSequenceClassification"),Y5t.forEach(t),v4r=r(NPe," (OpenAI GPT model)"),NPe.forEach(t),F4r=i(ae),VC=n(ae,"LI",{});var jPe=s(VC);H1e=n(jPe,"STRONG",{});var K5t=s(H1e);T4r=r(K5t,"rembert"),K5t.forEach(t),M4r=r(jPe," \u2014 "),KH=n(jPe,"A",{href:!0});var Z5t=s(KH);E4r=r(Z5t,"TFRemBertForSequenceClassification"),Z5t.forEach(t),C4r=r(jPe," (RemBERT model)"),jPe.forEach(t),w4r=i(ae),XC=n(ae,"LI",{});var DPe=s(XC);U1e=n(DPe,"STRONG",{});var e3t=s(U1e);A4r=r(e3t,"roberta"),e3t.forEach(t),y4r=r(DPe," \u2014 "),ZH=n(DPe,"A",{href:!0});var o3t=s(ZH);L4r=r(o3t,"TFRobertaForSequenceClassification"),o3t.forEach(t),x4r=r(DPe," (RoBERTa model)"),DPe.forEach(t),$4r=i(ae),zC=n(ae,"LI",{});var GPe=s(zC);J1e=n(GPe,"STRONG",{});var r3t=s(J1e);k4r=r(r3t,"roformer"),r3t.forEach(t),S4r=r(GPe," \u2014 "),eU=n(GPe,"A",{href:!0});var t3t=s(eU);R4r=r(t3t,"TFRoFormerForSequenceClassification"),t3t.forEach(t),P4r=r(GPe," (RoFormer model)"),GPe.forEach(t),B4r=i(ae),WC=n(ae,"LI",{});var OPe=s(WC);Y1e=n(OPe,"STRONG",{});var a3t=s(Y1e);I4r=r(a3t,"tapas"),a3t.forEach(t),q4r=r(OPe," \u2014 "),oU=n(OPe,"A",{href:!0});var n3t=s(oU);N4r=r(n3t,"TFTapasForSequenceClassification"),n3t.forEach(t),j4r=r(OPe," (TAPAS model)"),OPe.forEach(t),D4r=i(ae),QC=n(ae,"LI",{});var VPe=s(QC);K1e=n(VPe,"STRONG",{});var s3t=s(K1e);G4r=r(s3t,"transfo-xl"),s3t.forEach(t),O4r=r(VPe," \u2014 "),rU=n(VPe,"A",{href:!0});var l3t=s(rU);V4r=r(l3t,"TFTransfoXLForSequenceClassification"),l3t.forEach(t),X4r=r(VPe," (Transformer-XL model)"),VPe.forEach(t),z4r=i(ae),HC=n(ae,"LI",{});var XPe=s(HC);Z1e=n(XPe,"STRONG",{});var i3t=s(Z1e);W4r=r(i3t,"xlm"),i3t.forEach(t),Q4r=r(XPe," \u2014 "),tU=n(XPe,"A",{href:!0});var d3t=s(tU);H4r=r(d3t,"TFXLMForSequenceClassification"),d3t.forEach(t),U4r=r(XPe," (XLM model)"),XPe.forEach(t),J4r=i(ae),UC=n(ae,"LI",{});var zPe=s(UC);eTe=n(zPe,"STRONG",{});var c3t=s(eTe);Y4r=r(c3t,"xlm-roberta"),c3t.forEach(t),K4r=r(zPe," \u2014 "),aU=n(zPe,"A",{href:!0});var m3t=s(aU);Z4r=r(m3t,"TFXLMRobertaForSequenceClassification"),m3t.forEach(t),eEr=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),oEr=i(ae),JC=n(ae,"LI",{});var WPe=s(JC);oTe=n(WPe,"STRONG",{});var f3t=s(oTe);rEr=r(f3t,"xlnet"),f3t.forEach(t),tEr=r(WPe," \u2014 "),nU=n(WPe,"A",{href:!0});var g3t=s(nU);aEr=r(g3t,"TFXLNetForSequenceClassification"),g3t.forEach(t),nEr=r(WPe," (XLNet model)"),WPe.forEach(t),ae.forEach(t),sEr=i(Al),T(YC.$$.fragment,Al),Al.forEach(t),wl.forEach(t),_je=i(m),ic=n(m,"H2",{class:!0});var EGe=s(ic);KC=n(EGe,"A",{id:!0,class:!0,href:!0});var h3t=s(KC);rTe=n(h3t,"SPAN",{});var u3t=s(rTe);T(V7.$$.fragment,u3t),u3t.forEach(t),h3t.forEach(t),lEr=i(EGe),tTe=n(EGe,"SPAN",{});var p3t=s(tTe);iEr=r(p3t,"TFAutoModelForMultipleChoice"),p3t.forEach(t),EGe.forEach(t),bje=i(m),ar=n(m,"DIV",{class:!0});var yl=s(ar);T(X7.$$.fragment,yl),dEr=i(yl),dc=n(yl,"P",{});var Mee=s(dc);cEr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sU=n(Mee,"A",{href:!0});var _3t=s(sU);mEr=r(_3t,"from_pretrained()"),_3t.forEach(t),fEr=r(Mee," class method or the "),lU=n(Mee,"A",{href:!0});var b3t=s(lU);gEr=r(b3t,"from_config()"),b3t.forEach(t),hEr=r(Mee,` class
method.`),Mee.forEach(t),uEr=i(yl),z7=n(yl,"P",{});var CGe=s(z7);pEr=r(CGe,"This class cannot be instantiated directly using "),aTe=n(CGe,"CODE",{});var v3t=s(aTe);_Er=r(v3t,"__init__()"),v3t.forEach(t),bEr=r(CGe," (throws an error)."),CGe.forEach(t),vEr=i(yl),Pt=n(yl,"DIV",{class:!0});var j6=s(Pt);T(W7.$$.fragment,j6),FEr=i(j6),nTe=n(j6,"P",{});var F3t=s(nTe);TEr=r(F3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F3t.forEach(t),MEr=i(j6),cc=n(j6,"P",{});var Eee=s(cc);EEr=r(Eee,`Note:
Loading a model from its configuration file does `),sTe=n(Eee,"STRONG",{});var T3t=s(sTe);CEr=r(T3t,"not"),T3t.forEach(t),wEr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(Eee,"A",{href:!0});var M3t=s(iU);AEr=r(M3t,"from_pretrained()"),M3t.forEach(t),yEr=r(Eee," to load the model weights."),Eee.forEach(t),LEr=i(j6),T(ZC.$$.fragment,j6),j6.forEach(t),xEr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(Q7.$$.fragment,Ll),$Er=i(Ll),lTe=n(Ll,"P",{});var E3t=s(lTe);kEr=r(E3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E3t.forEach(t),SEr=i(Ll),sn=n(Ll,"P",{});var D6=s(sn);REr=r(D6,"The model class to instantiate is selected based on the "),iTe=n(D6,"CODE",{});var C3t=s(iTe);PEr=r(C3t,"model_type"),C3t.forEach(t),BEr=r(D6,` property of the config object (either
passed as an argument or loaded from `),dTe=n(D6,"CODE",{});var w3t=s(dTe);IEr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),qEr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(D6,"CODE",{});var A3t=s(cTe);NEr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),jEr=r(D6,":"),D6.forEach(t),DEr=i(Ll),ue=n(Ll,"UL",{});var be=s(ue);e5=n(be,"LI",{});var QPe=s(e5);mTe=n(QPe,"STRONG",{});var y3t=s(mTe);GEr=r(y3t,"albert"),y3t.forEach(t),OEr=r(QPe," \u2014 "),dU=n(QPe,"A",{href:!0});var L3t=s(dU);VEr=r(L3t,"TFAlbertForMultipleChoice"),L3t.forEach(t),XEr=r(QPe," (ALBERT model)"),QPe.forEach(t),zEr=i(be),o5=n(be,"LI",{});var HPe=s(o5);fTe=n(HPe,"STRONG",{});var x3t=s(fTe);WEr=r(x3t,"bert"),x3t.forEach(t),QEr=r(HPe," \u2014 "),cU=n(HPe,"A",{href:!0});var $3t=s(cU);HEr=r($3t,"TFBertForMultipleChoice"),$3t.forEach(t),UEr=r(HPe," (BERT model)"),HPe.forEach(t),JEr=i(be),r5=n(be,"LI",{});var UPe=s(r5);gTe=n(UPe,"STRONG",{});var k3t=s(gTe);YEr=r(k3t,"camembert"),k3t.forEach(t),KEr=r(UPe," \u2014 "),mU=n(UPe,"A",{href:!0});var S3t=s(mU);ZEr=r(S3t,"TFCamembertForMultipleChoice"),S3t.forEach(t),eCr=r(UPe," (CamemBERT model)"),UPe.forEach(t),oCr=i(be),t5=n(be,"LI",{});var JPe=s(t5);hTe=n(JPe,"STRONG",{});var R3t=s(hTe);rCr=r(R3t,"convbert"),R3t.forEach(t),tCr=r(JPe," \u2014 "),fU=n(JPe,"A",{href:!0});var P3t=s(fU);aCr=r(P3t,"TFConvBertForMultipleChoice"),P3t.forEach(t),nCr=r(JPe," (ConvBERT model)"),JPe.forEach(t),sCr=i(be),a5=n(be,"LI",{});var YPe=s(a5);uTe=n(YPe,"STRONG",{});var B3t=s(uTe);lCr=r(B3t,"distilbert"),B3t.forEach(t),iCr=r(YPe," \u2014 "),gU=n(YPe,"A",{href:!0});var I3t=s(gU);dCr=r(I3t,"TFDistilBertForMultipleChoice"),I3t.forEach(t),cCr=r(YPe," (DistilBERT model)"),YPe.forEach(t),mCr=i(be),n5=n(be,"LI",{});var KPe=s(n5);pTe=n(KPe,"STRONG",{});var q3t=s(pTe);fCr=r(q3t,"electra"),q3t.forEach(t),gCr=r(KPe," \u2014 "),hU=n(KPe,"A",{href:!0});var N3t=s(hU);hCr=r(N3t,"TFElectraForMultipleChoice"),N3t.forEach(t),uCr=r(KPe," (ELECTRA model)"),KPe.forEach(t),pCr=i(be),s5=n(be,"LI",{});var ZPe=s(s5);_Te=n(ZPe,"STRONG",{});var j3t=s(_Te);_Cr=r(j3t,"flaubert"),j3t.forEach(t),bCr=r(ZPe," \u2014 "),uU=n(ZPe,"A",{href:!0});var D3t=s(uU);vCr=r(D3t,"TFFlaubertForMultipleChoice"),D3t.forEach(t),FCr=r(ZPe," (FlauBERT model)"),ZPe.forEach(t),TCr=i(be),l5=n(be,"LI",{});var eBe=s(l5);bTe=n(eBe,"STRONG",{});var G3t=s(bTe);MCr=r(G3t,"funnel"),G3t.forEach(t),ECr=r(eBe," \u2014 "),pU=n(eBe,"A",{href:!0});var O3t=s(pU);CCr=r(O3t,"TFFunnelForMultipleChoice"),O3t.forEach(t),wCr=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),ACr=i(be),i5=n(be,"LI",{});var oBe=s(i5);vTe=n(oBe,"STRONG",{});var V3t=s(vTe);yCr=r(V3t,"longformer"),V3t.forEach(t),LCr=r(oBe," \u2014 "),_U=n(oBe,"A",{href:!0});var X3t=s(_U);xCr=r(X3t,"TFLongformerForMultipleChoice"),X3t.forEach(t),$Cr=r(oBe," (Longformer model)"),oBe.forEach(t),kCr=i(be),d5=n(be,"LI",{});var rBe=s(d5);FTe=n(rBe,"STRONG",{});var z3t=s(FTe);SCr=r(z3t,"mobilebert"),z3t.forEach(t),RCr=r(rBe," \u2014 "),bU=n(rBe,"A",{href:!0});var W3t=s(bU);PCr=r(W3t,"TFMobileBertForMultipleChoice"),W3t.forEach(t),BCr=r(rBe," (MobileBERT model)"),rBe.forEach(t),ICr=i(be),c5=n(be,"LI",{});var tBe=s(c5);TTe=n(tBe,"STRONG",{});var Q3t=s(TTe);qCr=r(Q3t,"mpnet"),Q3t.forEach(t),NCr=r(tBe," \u2014 "),vU=n(tBe,"A",{href:!0});var H3t=s(vU);jCr=r(H3t,"TFMPNetForMultipleChoice"),H3t.forEach(t),DCr=r(tBe," (MPNet model)"),tBe.forEach(t),GCr=i(be),m5=n(be,"LI",{});var aBe=s(m5);MTe=n(aBe,"STRONG",{});var U3t=s(MTe);OCr=r(U3t,"rembert"),U3t.forEach(t),VCr=r(aBe," \u2014 "),FU=n(aBe,"A",{href:!0});var J3t=s(FU);XCr=r(J3t,"TFRemBertForMultipleChoice"),J3t.forEach(t),zCr=r(aBe," (RemBERT model)"),aBe.forEach(t),WCr=i(be),f5=n(be,"LI",{});var nBe=s(f5);ETe=n(nBe,"STRONG",{});var Y3t=s(ETe);QCr=r(Y3t,"roberta"),Y3t.forEach(t),HCr=r(nBe," \u2014 "),TU=n(nBe,"A",{href:!0});var K3t=s(TU);UCr=r(K3t,"TFRobertaForMultipleChoice"),K3t.forEach(t),JCr=r(nBe," (RoBERTa model)"),nBe.forEach(t),YCr=i(be),g5=n(be,"LI",{});var sBe=s(g5);CTe=n(sBe,"STRONG",{});var Z3t=s(CTe);KCr=r(Z3t,"roformer"),Z3t.forEach(t),ZCr=r(sBe," \u2014 "),MU=n(sBe,"A",{href:!0});var ewt=s(MU);e5r=r(ewt,"TFRoFormerForMultipleChoice"),ewt.forEach(t),o5r=r(sBe," (RoFormer model)"),sBe.forEach(t),r5r=i(be),h5=n(be,"LI",{});var lBe=s(h5);wTe=n(lBe,"STRONG",{});var owt=s(wTe);t5r=r(owt,"xlm"),owt.forEach(t),a5r=r(lBe," \u2014 "),EU=n(lBe,"A",{href:!0});var rwt=s(EU);n5r=r(rwt,"TFXLMForMultipleChoice"),rwt.forEach(t),s5r=r(lBe," (XLM model)"),lBe.forEach(t),l5r=i(be),u5=n(be,"LI",{});var iBe=s(u5);ATe=n(iBe,"STRONG",{});var twt=s(ATe);i5r=r(twt,"xlm-roberta"),twt.forEach(t),d5r=r(iBe," \u2014 "),CU=n(iBe,"A",{href:!0});var awt=s(CU);c5r=r(awt,"TFXLMRobertaForMultipleChoice"),awt.forEach(t),m5r=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),f5r=i(be),p5=n(be,"LI",{});var dBe=s(p5);yTe=n(dBe,"STRONG",{});var nwt=s(yTe);g5r=r(nwt,"xlnet"),nwt.forEach(t),h5r=r(dBe," \u2014 "),wU=n(dBe,"A",{href:!0});var swt=s(wU);u5r=r(swt,"TFXLNetForMultipleChoice"),swt.forEach(t),p5r=r(dBe," (XLNet model)"),dBe.forEach(t),be.forEach(t),_5r=i(Ll),T(_5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),vje=i(m),mc=n(m,"H2",{class:!0});var wGe=s(mc);b5=n(wGe,"A",{id:!0,class:!0,href:!0});var lwt=s(b5);LTe=n(lwt,"SPAN",{});var iwt=s(LTe);T(H7.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),b5r=i(wGe),xTe=n(wGe,"SPAN",{});var dwt=s(xTe);v5r=r(dwt,"TFAutoModelForNextSentencePrediction"),dwt.forEach(t),wGe.forEach(t),Fje=i(m),nr=n(m,"DIV",{class:!0});var xl=s(nr);T(U7.$$.fragment,xl),F5r=i(xl),fc=n(xl,"P",{});var Cee=s(fc);T5r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AU=n(Cee,"A",{href:!0});var cwt=s(AU);M5r=r(cwt,"from_pretrained()"),cwt.forEach(t),E5r=r(Cee," class method or the "),yU=n(Cee,"A",{href:!0});var mwt=s(yU);C5r=r(mwt,"from_config()"),mwt.forEach(t),w5r=r(Cee,` class
method.`),Cee.forEach(t),A5r=i(xl),J7=n(xl,"P",{});var AGe=s(J7);y5r=r(AGe,"This class cannot be instantiated directly using "),$Te=n(AGe,"CODE",{});var fwt=s($Te);L5r=r(fwt,"__init__()"),fwt.forEach(t),x5r=r(AGe," (throws an error)."),AGe.forEach(t),$5r=i(xl),Bt=n(xl,"DIV",{class:!0});var G6=s(Bt);T(Y7.$$.fragment,G6),k5r=i(G6),kTe=n(G6,"P",{});var gwt=s(kTe);S5r=r(gwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gwt.forEach(t),R5r=i(G6),gc=n(G6,"P",{});var wee=s(gc);P5r=r(wee,`Note:
Loading a model from its configuration file does `),STe=n(wee,"STRONG",{});var hwt=s(STe);B5r=r(hwt,"not"),hwt.forEach(t),I5r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(wee,"A",{href:!0});var uwt=s(LU);q5r=r(uwt,"from_pretrained()"),uwt.forEach(t),N5r=r(wee," to load the model weights."),wee.forEach(t),j5r=i(G6),T(v5.$$.fragment,G6),G6.forEach(t),D5r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(K7.$$.fragment,$l),G5r=i($l),RTe=n($l,"P",{});var pwt=s(RTe);O5r=r(pwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pwt.forEach(t),V5r=i($l),ln=n($l,"P",{});var O6=s(ln);X5r=r(O6,"The model class to instantiate is selected based on the "),PTe=n(O6,"CODE",{});var _wt=s(PTe);z5r=r(_wt,"model_type"),_wt.forEach(t),W5r=r(O6,` property of the config object (either
passed as an argument or loaded from `),BTe=n(O6,"CODE",{});var bwt=s(BTe);Q5r=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),H5r=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(O6,"CODE",{});var vwt=s(ITe);U5r=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),J5r=r(O6,":"),O6.forEach(t),Y5r=i($l),Z7=n($l,"UL",{});var yGe=s(Z7);F5=n(yGe,"LI",{});var cBe=s(F5);qTe=n(cBe,"STRONG",{});var Fwt=s(qTe);K5r=r(Fwt,"bert"),Fwt.forEach(t),Z5r=r(cBe," \u2014 "),xU=n(cBe,"A",{href:!0});var Twt=s(xU);e3r=r(Twt,"TFBertForNextSentencePrediction"),Twt.forEach(t),o3r=r(cBe," (BERT model)"),cBe.forEach(t),r3r=i(yGe),T5=n(yGe,"LI",{});var mBe=s(T5);NTe=n(mBe,"STRONG",{});var Mwt=s(NTe);t3r=r(Mwt,"mobilebert"),Mwt.forEach(t),a3r=r(mBe," \u2014 "),$U=n(mBe,"A",{href:!0});var Ewt=s($U);n3r=r(Ewt,"TFMobileBertForNextSentencePrediction"),Ewt.forEach(t),s3r=r(mBe," (MobileBERT model)"),mBe.forEach(t),yGe.forEach(t),l3r=i($l),T(M5.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Tje=i(m),hc=n(m,"H2",{class:!0});var LGe=s(hc);E5=n(LGe,"A",{id:!0,class:!0,href:!0});var Cwt=s(E5);jTe=n(Cwt,"SPAN",{});var wwt=s(jTe);T(e9.$$.fragment,wwt),wwt.forEach(t),Cwt.forEach(t),i3r=i(LGe),DTe=n(LGe,"SPAN",{});var Awt=s(DTe);d3r=r(Awt,"TFAutoModelForTableQuestionAnswering"),Awt.forEach(t),LGe.forEach(t),Mje=i(m),sr=n(m,"DIV",{class:!0});var kl=s(sr);T(o9.$$.fragment,kl),c3r=i(kl),uc=n(kl,"P",{});var Aee=s(uc);m3r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kU=n(Aee,"A",{href:!0});var ywt=s(kU);f3r=r(ywt,"from_pretrained()"),ywt.forEach(t),g3r=r(Aee," class method or the "),SU=n(Aee,"A",{href:!0});var Lwt=s(SU);h3r=r(Lwt,"from_config()"),Lwt.forEach(t),u3r=r(Aee,` class
method.`),Aee.forEach(t),p3r=i(kl),r9=n(kl,"P",{});var xGe=s(r9);_3r=r(xGe,"This class cannot be instantiated directly using "),GTe=n(xGe,"CODE",{});var xwt=s(GTe);b3r=r(xwt,"__init__()"),xwt.forEach(t),v3r=r(xGe," (throws an error)."),xGe.forEach(t),F3r=i(kl),It=n(kl,"DIV",{class:!0});var V6=s(It);T(t9.$$.fragment,V6),T3r=i(V6),OTe=n(V6,"P",{});var $wt=s(OTe);M3r=r($wt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$wt.forEach(t),E3r=i(V6),pc=n(V6,"P",{});var yee=s(pc);C3r=r(yee,`Note:
Loading a model from its configuration file does `),VTe=n(yee,"STRONG",{});var kwt=s(VTe);w3r=r(kwt,"not"),kwt.forEach(t),A3r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(yee,"A",{href:!0});var Swt=s(RU);y3r=r(Swt,"from_pretrained()"),Swt.forEach(t),L3r=r(yee," to load the model weights."),yee.forEach(t),x3r=i(V6),T(C5.$$.fragment,V6),V6.forEach(t),$3r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(a9.$$.fragment,Sl),k3r=i(Sl),XTe=n(Sl,"P",{});var Rwt=s(XTe);S3r=r(Rwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rwt.forEach(t),R3r=i(Sl),dn=n(Sl,"P",{});var X6=s(dn);P3r=r(X6,"The model class to instantiate is selected based on the "),zTe=n(X6,"CODE",{});var Pwt=s(zTe);B3r=r(Pwt,"model_type"),Pwt.forEach(t),I3r=r(X6,` property of the config object (either
passed as an argument or loaded from `),WTe=n(X6,"CODE",{});var Bwt=s(WTe);q3r=r(Bwt,"pretrained_model_name_or_path"),Bwt.forEach(t),N3r=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(X6,"CODE",{});var Iwt=s(QTe);j3r=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),D3r=r(X6,":"),X6.forEach(t),G3r=i(Sl),HTe=n(Sl,"UL",{});var qwt=s(HTe);w5=n(qwt,"LI",{});var fBe=s(w5);UTe=n(fBe,"STRONG",{});var Nwt=s(UTe);O3r=r(Nwt,"tapas"),Nwt.forEach(t),V3r=r(fBe," \u2014 "),PU=n(fBe,"A",{href:!0});var jwt=s(PU);X3r=r(jwt,"TFTapasForQuestionAnswering"),jwt.forEach(t),z3r=r(fBe," (TAPAS model)"),fBe.forEach(t),qwt.forEach(t),W3r=i(Sl),T(A5.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Eje=i(m),_c=n(m,"H2",{class:!0});var $Ge=s(_c);y5=n($Ge,"A",{id:!0,class:!0,href:!0});var Dwt=s(y5);JTe=n(Dwt,"SPAN",{});var Gwt=s(JTe);T(n9.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),Q3r=i($Ge),YTe=n($Ge,"SPAN",{});var Owt=s(YTe);H3r=r(Owt,"TFAutoModelForTokenClassification"),Owt.forEach(t),$Ge.forEach(t),Cje=i(m),lr=n(m,"DIV",{class:!0});var Rl=s(lr);T(s9.$$.fragment,Rl),U3r=i(Rl),bc=n(Rl,"P",{});var Lee=s(bc);J3r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BU=n(Lee,"A",{href:!0});var Vwt=s(BU);Y3r=r(Vwt,"from_pretrained()"),Vwt.forEach(t),K3r=r(Lee," class method or the "),IU=n(Lee,"A",{href:!0});var Xwt=s(IU);Z3r=r(Xwt,"from_config()"),Xwt.forEach(t),ewr=r(Lee,` class
method.`),Lee.forEach(t),owr=i(Rl),l9=n(Rl,"P",{});var kGe=s(l9);rwr=r(kGe,"This class cannot be instantiated directly using "),KTe=n(kGe,"CODE",{});var zwt=s(KTe);twr=r(zwt,"__init__()"),zwt.forEach(t),awr=r(kGe," (throws an error)."),kGe.forEach(t),nwr=i(Rl),qt=n(Rl,"DIV",{class:!0});var z6=s(qt);T(i9.$$.fragment,z6),swr=i(z6),ZTe=n(z6,"P",{});var Wwt=s(ZTe);lwr=r(Wwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wwt.forEach(t),iwr=i(z6),vc=n(z6,"P",{});var xee=s(vc);dwr=r(xee,`Note:
Loading a model from its configuration file does `),eMe=n(xee,"STRONG",{});var Qwt=s(eMe);cwr=r(Qwt,"not"),Qwt.forEach(t),mwr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(xee,"A",{href:!0});var Hwt=s(qU);fwr=r(Hwt,"from_pretrained()"),Hwt.forEach(t),gwr=r(xee," to load the model weights."),xee.forEach(t),hwr=i(z6),T(L5.$$.fragment,z6),z6.forEach(t),uwr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(d9.$$.fragment,Pl),pwr=i(Pl),oMe=n(Pl,"P",{});var Uwt=s(oMe);_wr=r(Uwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uwt.forEach(t),bwr=i(Pl),cn=n(Pl,"P",{});var W6=s(cn);vwr=r(W6,"The model class to instantiate is selected based on the "),rMe=n(W6,"CODE",{});var Jwt=s(rMe);Fwr=r(Jwt,"model_type"),Jwt.forEach(t),Twr=r(W6,` property of the config object (either
passed as an argument or loaded from `),tMe=n(W6,"CODE",{});var Ywt=s(tMe);Mwr=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),Ewr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(W6,"CODE",{});var Kwt=s(aMe);Cwr=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),wwr=r(W6,":"),W6.forEach(t),Awr=i(Pl),de=n(Pl,"UL",{});var fe=s(de);x5=n(fe,"LI",{});var gBe=s(x5);nMe=n(gBe,"STRONG",{});var Zwt=s(nMe);ywr=r(Zwt,"albert"),Zwt.forEach(t),Lwr=r(gBe," \u2014 "),NU=n(gBe,"A",{href:!0});var e0t=s(NU);xwr=r(e0t,"TFAlbertForTokenClassification"),e0t.forEach(t),$wr=r(gBe," (ALBERT model)"),gBe.forEach(t),kwr=i(fe),$5=n(fe,"LI",{});var hBe=s($5);sMe=n(hBe,"STRONG",{});var o0t=s(sMe);Swr=r(o0t,"bert"),o0t.forEach(t),Rwr=r(hBe," \u2014 "),jU=n(hBe,"A",{href:!0});var r0t=s(jU);Pwr=r(r0t,"TFBertForTokenClassification"),r0t.forEach(t),Bwr=r(hBe," (BERT model)"),hBe.forEach(t),Iwr=i(fe),k5=n(fe,"LI",{});var uBe=s(k5);lMe=n(uBe,"STRONG",{});var t0t=s(lMe);qwr=r(t0t,"camembert"),t0t.forEach(t),Nwr=r(uBe," \u2014 "),DU=n(uBe,"A",{href:!0});var a0t=s(DU);jwr=r(a0t,"TFCamembertForTokenClassification"),a0t.forEach(t),Dwr=r(uBe," (CamemBERT model)"),uBe.forEach(t),Gwr=i(fe),S5=n(fe,"LI",{});var pBe=s(S5);iMe=n(pBe,"STRONG",{});var n0t=s(iMe);Owr=r(n0t,"convbert"),n0t.forEach(t),Vwr=r(pBe," \u2014 "),GU=n(pBe,"A",{href:!0});var s0t=s(GU);Xwr=r(s0t,"TFConvBertForTokenClassification"),s0t.forEach(t),zwr=r(pBe," (ConvBERT model)"),pBe.forEach(t),Wwr=i(fe),R5=n(fe,"LI",{});var _Be=s(R5);dMe=n(_Be,"STRONG",{});var l0t=s(dMe);Qwr=r(l0t,"deberta"),l0t.forEach(t),Hwr=r(_Be," \u2014 "),OU=n(_Be,"A",{href:!0});var i0t=s(OU);Uwr=r(i0t,"TFDebertaForTokenClassification"),i0t.forEach(t),Jwr=r(_Be," (DeBERTa model)"),_Be.forEach(t),Ywr=i(fe),P5=n(fe,"LI",{});var bBe=s(P5);cMe=n(bBe,"STRONG",{});var d0t=s(cMe);Kwr=r(d0t,"deberta-v2"),d0t.forEach(t),Zwr=r(bBe," \u2014 "),VU=n(bBe,"A",{href:!0});var c0t=s(VU);e0r=r(c0t,"TFDebertaV2ForTokenClassification"),c0t.forEach(t),o0r=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),r0r=i(fe),B5=n(fe,"LI",{});var vBe=s(B5);mMe=n(vBe,"STRONG",{});var m0t=s(mMe);t0r=r(m0t,"distilbert"),m0t.forEach(t),a0r=r(vBe," \u2014 "),XU=n(vBe,"A",{href:!0});var f0t=s(XU);n0r=r(f0t,"TFDistilBertForTokenClassification"),f0t.forEach(t),s0r=r(vBe," (DistilBERT model)"),vBe.forEach(t),l0r=i(fe),I5=n(fe,"LI",{});var FBe=s(I5);fMe=n(FBe,"STRONG",{});var g0t=s(fMe);i0r=r(g0t,"electra"),g0t.forEach(t),d0r=r(FBe," \u2014 "),zU=n(FBe,"A",{href:!0});var h0t=s(zU);c0r=r(h0t,"TFElectraForTokenClassification"),h0t.forEach(t),m0r=r(FBe," (ELECTRA model)"),FBe.forEach(t),f0r=i(fe),q5=n(fe,"LI",{});var TBe=s(q5);gMe=n(TBe,"STRONG",{});var u0t=s(gMe);g0r=r(u0t,"flaubert"),u0t.forEach(t),h0r=r(TBe," \u2014 "),WU=n(TBe,"A",{href:!0});var p0t=s(WU);u0r=r(p0t,"TFFlaubertForTokenClassification"),p0t.forEach(t),p0r=r(TBe," (FlauBERT model)"),TBe.forEach(t),_0r=i(fe),N5=n(fe,"LI",{});var MBe=s(N5);hMe=n(MBe,"STRONG",{});var _0t=s(hMe);b0r=r(_0t,"funnel"),_0t.forEach(t),v0r=r(MBe," \u2014 "),QU=n(MBe,"A",{href:!0});var b0t=s(QU);F0r=r(b0t,"TFFunnelForTokenClassification"),b0t.forEach(t),T0r=r(MBe," (Funnel Transformer model)"),MBe.forEach(t),M0r=i(fe),j5=n(fe,"LI",{});var EBe=s(j5);uMe=n(EBe,"STRONG",{});var v0t=s(uMe);E0r=r(v0t,"layoutlm"),v0t.forEach(t),C0r=r(EBe," \u2014 "),HU=n(EBe,"A",{href:!0});var F0t=s(HU);w0r=r(F0t,"TFLayoutLMForTokenClassification"),F0t.forEach(t),A0r=r(EBe," (LayoutLM model)"),EBe.forEach(t),y0r=i(fe),D5=n(fe,"LI",{});var CBe=s(D5);pMe=n(CBe,"STRONG",{});var T0t=s(pMe);L0r=r(T0t,"longformer"),T0t.forEach(t),x0r=r(CBe," \u2014 "),UU=n(CBe,"A",{href:!0});var M0t=s(UU);$0r=r(M0t,"TFLongformerForTokenClassification"),M0t.forEach(t),k0r=r(CBe," (Longformer model)"),CBe.forEach(t),S0r=i(fe),G5=n(fe,"LI",{});var wBe=s(G5);_Me=n(wBe,"STRONG",{});var E0t=s(_Me);R0r=r(E0t,"mobilebert"),E0t.forEach(t),P0r=r(wBe," \u2014 "),JU=n(wBe,"A",{href:!0});var C0t=s(JU);B0r=r(C0t,"TFMobileBertForTokenClassification"),C0t.forEach(t),I0r=r(wBe," (MobileBERT model)"),wBe.forEach(t),q0r=i(fe),O5=n(fe,"LI",{});var ABe=s(O5);bMe=n(ABe,"STRONG",{});var w0t=s(bMe);N0r=r(w0t,"mpnet"),w0t.forEach(t),j0r=r(ABe," \u2014 "),YU=n(ABe,"A",{href:!0});var A0t=s(YU);D0r=r(A0t,"TFMPNetForTokenClassification"),A0t.forEach(t),G0r=r(ABe," (MPNet model)"),ABe.forEach(t),O0r=i(fe),V5=n(fe,"LI",{});var yBe=s(V5);vMe=n(yBe,"STRONG",{});var y0t=s(vMe);V0r=r(y0t,"rembert"),y0t.forEach(t),X0r=r(yBe," \u2014 "),KU=n(yBe,"A",{href:!0});var L0t=s(KU);z0r=r(L0t,"TFRemBertForTokenClassification"),L0t.forEach(t),W0r=r(yBe," (RemBERT model)"),yBe.forEach(t),Q0r=i(fe),X5=n(fe,"LI",{});var LBe=s(X5);FMe=n(LBe,"STRONG",{});var x0t=s(FMe);H0r=r(x0t,"roberta"),x0t.forEach(t),U0r=r(LBe," \u2014 "),ZU=n(LBe,"A",{href:!0});var $0t=s(ZU);J0r=r($0t,"TFRobertaForTokenClassification"),$0t.forEach(t),Y0r=r(LBe," (RoBERTa model)"),LBe.forEach(t),K0r=i(fe),z5=n(fe,"LI",{});var xBe=s(z5);TMe=n(xBe,"STRONG",{});var k0t=s(TMe);Z0r=r(k0t,"roformer"),k0t.forEach(t),eAr=r(xBe," \u2014 "),eJ=n(xBe,"A",{href:!0});var S0t=s(eJ);oAr=r(S0t,"TFRoFormerForTokenClassification"),S0t.forEach(t),rAr=r(xBe," (RoFormer model)"),xBe.forEach(t),tAr=i(fe),W5=n(fe,"LI",{});var $Be=s(W5);MMe=n($Be,"STRONG",{});var R0t=s(MMe);aAr=r(R0t,"xlm"),R0t.forEach(t),nAr=r($Be," \u2014 "),oJ=n($Be,"A",{href:!0});var P0t=s(oJ);sAr=r(P0t,"TFXLMForTokenClassification"),P0t.forEach(t),lAr=r($Be," (XLM model)"),$Be.forEach(t),iAr=i(fe),Q5=n(fe,"LI",{});var kBe=s(Q5);EMe=n(kBe,"STRONG",{});var B0t=s(EMe);dAr=r(B0t,"xlm-roberta"),B0t.forEach(t),cAr=r(kBe," \u2014 "),rJ=n(kBe,"A",{href:!0});var I0t=s(rJ);mAr=r(I0t,"TFXLMRobertaForTokenClassification"),I0t.forEach(t),fAr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),gAr=i(fe),H5=n(fe,"LI",{});var SBe=s(H5);CMe=n(SBe,"STRONG",{});var q0t=s(CMe);hAr=r(q0t,"xlnet"),q0t.forEach(t),uAr=r(SBe," \u2014 "),tJ=n(SBe,"A",{href:!0});var N0t=s(tJ);pAr=r(N0t,"TFXLNetForTokenClassification"),N0t.forEach(t),_Ar=r(SBe," (XLNet model)"),SBe.forEach(t),fe.forEach(t),bAr=i(Pl),T(U5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),wje=i(m),Fc=n(m,"H2",{class:!0});var SGe=s(Fc);J5=n(SGe,"A",{id:!0,class:!0,href:!0});var j0t=s(J5);wMe=n(j0t,"SPAN",{});var D0t=s(wMe);T(c9.$$.fragment,D0t),D0t.forEach(t),j0t.forEach(t),vAr=i(SGe),AMe=n(SGe,"SPAN",{});var G0t=s(AMe);FAr=r(G0t,"TFAutoModelForQuestionAnswering"),G0t.forEach(t),SGe.forEach(t),Aje=i(m),ir=n(m,"DIV",{class:!0});var Bl=s(ir);T(m9.$$.fragment,Bl),TAr=i(Bl),Tc=n(Bl,"P",{});var $ee=s(Tc);MAr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aJ=n($ee,"A",{href:!0});var O0t=s(aJ);EAr=r(O0t,"from_pretrained()"),O0t.forEach(t),CAr=r($ee," class method or the "),nJ=n($ee,"A",{href:!0});var V0t=s(nJ);wAr=r(V0t,"from_config()"),V0t.forEach(t),AAr=r($ee,` class
method.`),$ee.forEach(t),yAr=i(Bl),f9=n(Bl,"P",{});var RGe=s(f9);LAr=r(RGe,"This class cannot be instantiated directly using "),yMe=n(RGe,"CODE",{});var X0t=s(yMe);xAr=r(X0t,"__init__()"),X0t.forEach(t),$Ar=r(RGe," (throws an error)."),RGe.forEach(t),kAr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Q6=s(Nt);T(g9.$$.fragment,Q6),SAr=i(Q6),LMe=n(Q6,"P",{});var z0t=s(LMe);RAr=r(z0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z0t.forEach(t),PAr=i(Q6),Mc=n(Q6,"P",{});var kee=s(Mc);BAr=r(kee,`Note:
Loading a model from its configuration file does `),xMe=n(kee,"STRONG",{});var W0t=s(xMe);IAr=r(W0t,"not"),W0t.forEach(t),qAr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(kee,"A",{href:!0});var Q0t=s(sJ);NAr=r(Q0t,"from_pretrained()"),Q0t.forEach(t),jAr=r(kee," to load the model weights."),kee.forEach(t),DAr=i(Q6),T(Y5.$$.fragment,Q6),Q6.forEach(t),GAr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(h9.$$.fragment,Il),OAr=i(Il),$Me=n(Il,"P",{});var H0t=s($Me);VAr=r(H0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H0t.forEach(t),XAr=i(Il),mn=n(Il,"P",{});var H6=s(mn);zAr=r(H6,"The model class to instantiate is selected based on the "),kMe=n(H6,"CODE",{});var U0t=s(kMe);WAr=r(U0t,"model_type"),U0t.forEach(t),QAr=r(H6,` property of the config object (either
passed as an argument or loaded from `),SMe=n(H6,"CODE",{});var J0t=s(SMe);HAr=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),UAr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=n(H6,"CODE",{});var Y0t=s(RMe);JAr=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),YAr=r(H6,":"),H6.forEach(t),KAr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);K5=n(ge,"LI",{});var RBe=s(K5);PMe=n(RBe,"STRONG",{});var K0t=s(PMe);ZAr=r(K0t,"albert"),K0t.forEach(t),e6r=r(RBe," \u2014 "),lJ=n(RBe,"A",{href:!0});var Z0t=s(lJ);o6r=r(Z0t,"TFAlbertForQuestionAnswering"),Z0t.forEach(t),r6r=r(RBe," (ALBERT model)"),RBe.forEach(t),t6r=i(ge),Z5=n(ge,"LI",{});var PBe=s(Z5);BMe=n(PBe,"STRONG",{});var eAt=s(BMe);a6r=r(eAt,"bert"),eAt.forEach(t),n6r=r(PBe," \u2014 "),iJ=n(PBe,"A",{href:!0});var oAt=s(iJ);s6r=r(oAt,"TFBertForQuestionAnswering"),oAt.forEach(t),l6r=r(PBe," (BERT model)"),PBe.forEach(t),i6r=i(ge),e3=n(ge,"LI",{});var BBe=s(e3);IMe=n(BBe,"STRONG",{});var rAt=s(IMe);d6r=r(rAt,"camembert"),rAt.forEach(t),c6r=r(BBe," \u2014 "),dJ=n(BBe,"A",{href:!0});var tAt=s(dJ);m6r=r(tAt,"TFCamembertForQuestionAnswering"),tAt.forEach(t),f6r=r(BBe," (CamemBERT model)"),BBe.forEach(t),g6r=i(ge),o3=n(ge,"LI",{});var IBe=s(o3);qMe=n(IBe,"STRONG",{});var aAt=s(qMe);h6r=r(aAt,"convbert"),aAt.forEach(t),u6r=r(IBe," \u2014 "),cJ=n(IBe,"A",{href:!0});var nAt=s(cJ);p6r=r(nAt,"TFConvBertForQuestionAnswering"),nAt.forEach(t),_6r=r(IBe," (ConvBERT model)"),IBe.forEach(t),b6r=i(ge),r3=n(ge,"LI",{});var qBe=s(r3);NMe=n(qBe,"STRONG",{});var sAt=s(NMe);v6r=r(sAt,"deberta"),sAt.forEach(t),F6r=r(qBe," \u2014 "),mJ=n(qBe,"A",{href:!0});var lAt=s(mJ);T6r=r(lAt,"TFDebertaForQuestionAnswering"),lAt.forEach(t),M6r=r(qBe," (DeBERTa model)"),qBe.forEach(t),E6r=i(ge),t3=n(ge,"LI",{});var NBe=s(t3);jMe=n(NBe,"STRONG",{});var iAt=s(jMe);C6r=r(iAt,"deberta-v2"),iAt.forEach(t),w6r=r(NBe," \u2014 "),fJ=n(NBe,"A",{href:!0});var dAt=s(fJ);A6r=r(dAt,"TFDebertaV2ForQuestionAnswering"),dAt.forEach(t),y6r=r(NBe," (DeBERTa-v2 model)"),NBe.forEach(t),L6r=i(ge),a3=n(ge,"LI",{});var jBe=s(a3);DMe=n(jBe,"STRONG",{});var cAt=s(DMe);x6r=r(cAt,"distilbert"),cAt.forEach(t),$6r=r(jBe," \u2014 "),gJ=n(jBe,"A",{href:!0});var mAt=s(gJ);k6r=r(mAt,"TFDistilBertForQuestionAnswering"),mAt.forEach(t),S6r=r(jBe," (DistilBERT model)"),jBe.forEach(t),R6r=i(ge),n3=n(ge,"LI",{});var DBe=s(n3);GMe=n(DBe,"STRONG",{});var fAt=s(GMe);P6r=r(fAt,"electra"),fAt.forEach(t),B6r=r(DBe," \u2014 "),hJ=n(DBe,"A",{href:!0});var gAt=s(hJ);I6r=r(gAt,"TFElectraForQuestionAnswering"),gAt.forEach(t),q6r=r(DBe," (ELECTRA model)"),DBe.forEach(t),N6r=i(ge),s3=n(ge,"LI",{});var GBe=s(s3);OMe=n(GBe,"STRONG",{});var hAt=s(OMe);j6r=r(hAt,"flaubert"),hAt.forEach(t),D6r=r(GBe," \u2014 "),uJ=n(GBe,"A",{href:!0});var uAt=s(uJ);G6r=r(uAt,"TFFlaubertForQuestionAnsweringSimple"),uAt.forEach(t),O6r=r(GBe," (FlauBERT model)"),GBe.forEach(t),V6r=i(ge),l3=n(ge,"LI",{});var OBe=s(l3);VMe=n(OBe,"STRONG",{});var pAt=s(VMe);X6r=r(pAt,"funnel"),pAt.forEach(t),z6r=r(OBe," \u2014 "),pJ=n(OBe,"A",{href:!0});var _At=s(pJ);W6r=r(_At,"TFFunnelForQuestionAnswering"),_At.forEach(t),Q6r=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),H6r=i(ge),i3=n(ge,"LI",{});var VBe=s(i3);XMe=n(VBe,"STRONG",{});var bAt=s(XMe);U6r=r(bAt,"gptj"),bAt.forEach(t),J6r=r(VBe," \u2014 "),_J=n(VBe,"A",{href:!0});var vAt=s(_J);Y6r=r(vAt,"TFGPTJForQuestionAnswering"),vAt.forEach(t),K6r=r(VBe," (GPT-J model)"),VBe.forEach(t),Z6r=i(ge),d3=n(ge,"LI",{});var XBe=s(d3);zMe=n(XBe,"STRONG",{});var FAt=s(zMe);eyr=r(FAt,"longformer"),FAt.forEach(t),oyr=r(XBe," \u2014 "),bJ=n(XBe,"A",{href:!0});var TAt=s(bJ);ryr=r(TAt,"TFLongformerForQuestionAnswering"),TAt.forEach(t),tyr=r(XBe," (Longformer model)"),XBe.forEach(t),ayr=i(ge),c3=n(ge,"LI",{});var zBe=s(c3);WMe=n(zBe,"STRONG",{});var MAt=s(WMe);nyr=r(MAt,"mobilebert"),MAt.forEach(t),syr=r(zBe," \u2014 "),vJ=n(zBe,"A",{href:!0});var EAt=s(vJ);lyr=r(EAt,"TFMobileBertForQuestionAnswering"),EAt.forEach(t),iyr=r(zBe," (MobileBERT model)"),zBe.forEach(t),dyr=i(ge),m3=n(ge,"LI",{});var WBe=s(m3);QMe=n(WBe,"STRONG",{});var CAt=s(QMe);cyr=r(CAt,"mpnet"),CAt.forEach(t),myr=r(WBe," \u2014 "),FJ=n(WBe,"A",{href:!0});var wAt=s(FJ);fyr=r(wAt,"TFMPNetForQuestionAnswering"),wAt.forEach(t),gyr=r(WBe," (MPNet model)"),WBe.forEach(t),hyr=i(ge),f3=n(ge,"LI",{});var QBe=s(f3);HMe=n(QBe,"STRONG",{});var AAt=s(HMe);uyr=r(AAt,"rembert"),AAt.forEach(t),pyr=r(QBe," \u2014 "),TJ=n(QBe,"A",{href:!0});var yAt=s(TJ);_yr=r(yAt,"TFRemBertForQuestionAnswering"),yAt.forEach(t),byr=r(QBe," (RemBERT model)"),QBe.forEach(t),vyr=i(ge),g3=n(ge,"LI",{});var HBe=s(g3);UMe=n(HBe,"STRONG",{});var LAt=s(UMe);Fyr=r(LAt,"roberta"),LAt.forEach(t),Tyr=r(HBe," \u2014 "),MJ=n(HBe,"A",{href:!0});var xAt=s(MJ);Myr=r(xAt,"TFRobertaForQuestionAnswering"),xAt.forEach(t),Eyr=r(HBe," (RoBERTa model)"),HBe.forEach(t),Cyr=i(ge),h3=n(ge,"LI",{});var UBe=s(h3);JMe=n(UBe,"STRONG",{});var $At=s(JMe);wyr=r($At,"roformer"),$At.forEach(t),Ayr=r(UBe," \u2014 "),EJ=n(UBe,"A",{href:!0});var kAt=s(EJ);yyr=r(kAt,"TFRoFormerForQuestionAnswering"),kAt.forEach(t),Lyr=r(UBe," (RoFormer model)"),UBe.forEach(t),xyr=i(ge),u3=n(ge,"LI",{});var JBe=s(u3);YMe=n(JBe,"STRONG",{});var SAt=s(YMe);$yr=r(SAt,"xlm"),SAt.forEach(t),kyr=r(JBe," \u2014 "),CJ=n(JBe,"A",{href:!0});var RAt=s(CJ);Syr=r(RAt,"TFXLMForQuestionAnsweringSimple"),RAt.forEach(t),Ryr=r(JBe," (XLM model)"),JBe.forEach(t),Pyr=i(ge),p3=n(ge,"LI",{});var YBe=s(p3);KMe=n(YBe,"STRONG",{});var PAt=s(KMe);Byr=r(PAt,"xlm-roberta"),PAt.forEach(t),Iyr=r(YBe," \u2014 "),wJ=n(YBe,"A",{href:!0});var BAt=s(wJ);qyr=r(BAt,"TFXLMRobertaForQuestionAnswering"),BAt.forEach(t),Nyr=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),jyr=i(ge),_3=n(ge,"LI",{});var KBe=s(_3);ZMe=n(KBe,"STRONG",{});var IAt=s(ZMe);Dyr=r(IAt,"xlnet"),IAt.forEach(t),Gyr=r(KBe," \u2014 "),AJ=n(KBe,"A",{href:!0});var qAt=s(AJ);Oyr=r(qAt,"TFXLNetForQuestionAnsweringSimple"),qAt.forEach(t),Vyr=r(KBe," (XLNet model)"),KBe.forEach(t),ge.forEach(t),Xyr=i(Il),T(b3.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),yje=i(m),Ec=n(m,"H2",{class:!0});var PGe=s(Ec);v3=n(PGe,"A",{id:!0,class:!0,href:!0});var NAt=s(v3);e4e=n(NAt,"SPAN",{});var jAt=s(e4e);T(u9.$$.fragment,jAt),jAt.forEach(t),NAt.forEach(t),zyr=i(PGe),o4e=n(PGe,"SPAN",{});var DAt=s(o4e);Wyr=r(DAt,"TFAutoModelForVision2Seq"),DAt.forEach(t),PGe.forEach(t),Lje=i(m),dr=n(m,"DIV",{class:!0});var ql=s(dr);T(p9.$$.fragment,ql),Qyr=i(ql),Cc=n(ql,"P",{});var See=s(Cc);Hyr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yJ=n(See,"A",{href:!0});var GAt=s(yJ);Uyr=r(GAt,"from_pretrained()"),GAt.forEach(t),Jyr=r(See," class method or the "),LJ=n(See,"A",{href:!0});var OAt=s(LJ);Yyr=r(OAt,"from_config()"),OAt.forEach(t),Kyr=r(See,` class
method.`),See.forEach(t),Zyr=i(ql),_9=n(ql,"P",{});var BGe=s(_9);eLr=r(BGe,"This class cannot be instantiated directly using "),r4e=n(BGe,"CODE",{});var VAt=s(r4e);oLr=r(VAt,"__init__()"),VAt.forEach(t),rLr=r(BGe," (throws an error)."),BGe.forEach(t),tLr=i(ql),jt=n(ql,"DIV",{class:!0});var U6=s(jt);T(b9.$$.fragment,U6),aLr=i(U6),t4e=n(U6,"P",{});var XAt=s(t4e);nLr=r(XAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XAt.forEach(t),sLr=i(U6),wc=n(U6,"P",{});var Ree=s(wc);lLr=r(Ree,`Note:
Loading a model from its configuration file does `),a4e=n(Ree,"STRONG",{});var zAt=s(a4e);iLr=r(zAt,"not"),zAt.forEach(t),dLr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Ree,"A",{href:!0});var WAt=s(xJ);cLr=r(WAt,"from_pretrained()"),WAt.forEach(t),mLr=r(Ree," to load the model weights."),Ree.forEach(t),fLr=i(U6),T(F3.$$.fragment,U6),U6.forEach(t),gLr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(v9.$$.fragment,Nl),hLr=i(Nl),n4e=n(Nl,"P",{});var QAt=s(n4e);uLr=r(QAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QAt.forEach(t),pLr=i(Nl),fn=n(Nl,"P",{});var J6=s(fn);_Lr=r(J6,"The model class to instantiate is selected based on the "),s4e=n(J6,"CODE",{});var HAt=s(s4e);bLr=r(HAt,"model_type"),HAt.forEach(t),vLr=r(J6,` property of the config object (either
passed as an argument or loaded from `),l4e=n(J6,"CODE",{});var UAt=s(l4e);FLr=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),TLr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(J6,"CODE",{});var JAt=s(i4e);MLr=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),ELr=r(J6,":"),J6.forEach(t),CLr=i(Nl),d4e=n(Nl,"UL",{});var YAt=s(d4e);T3=n(YAt,"LI",{});var ZBe=s(T3);c4e=n(ZBe,"STRONG",{});var KAt=s(c4e);wLr=r(KAt,"vision-encoder-decoder"),KAt.forEach(t),ALr=r(ZBe," \u2014 "),$J=n(ZBe,"A",{href:!0});var ZAt=s($J);yLr=r(ZAt,"TFVisionEncoderDecoderModel"),ZAt.forEach(t),LLr=r(ZBe," (Vision Encoder decoder model)"),ZBe.forEach(t),YAt.forEach(t),xLr=i(Nl),T(M3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),xje=i(m),Ac=n(m,"H2",{class:!0});var IGe=s(Ac);E3=n(IGe,"A",{id:!0,class:!0,href:!0});var e6t=s(E3);m4e=n(e6t,"SPAN",{});var o6t=s(m4e);T(F9.$$.fragment,o6t),o6t.forEach(t),e6t.forEach(t),$Lr=i(IGe),f4e=n(IGe,"SPAN",{});var r6t=s(f4e);kLr=r(r6t,"TFAutoModelForSpeechSeq2Seq"),r6t.forEach(t),IGe.forEach(t),$je=i(m),cr=n(m,"DIV",{class:!0});var jl=s(cr);T(T9.$$.fragment,jl),SLr=i(jl),yc=n(jl,"P",{});var Pee=s(yc);RLr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=n(Pee,"A",{href:!0});var t6t=s(kJ);PLr=r(t6t,"from_pretrained()"),t6t.forEach(t),BLr=r(Pee," class method or the "),SJ=n(Pee,"A",{href:!0});var a6t=s(SJ);ILr=r(a6t,"from_config()"),a6t.forEach(t),qLr=r(Pee,` class
method.`),Pee.forEach(t),NLr=i(jl),M9=n(jl,"P",{});var qGe=s(M9);jLr=r(qGe,"This class cannot be instantiated directly using "),g4e=n(qGe,"CODE",{});var n6t=s(g4e);DLr=r(n6t,"__init__()"),n6t.forEach(t),GLr=r(qGe," (throws an error)."),qGe.forEach(t),OLr=i(jl),Dt=n(jl,"DIV",{class:!0});var Y6=s(Dt);T(E9.$$.fragment,Y6),VLr=i(Y6),h4e=n(Y6,"P",{});var s6t=s(h4e);XLr=r(s6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),s6t.forEach(t),zLr=i(Y6),Lc=n(Y6,"P",{});var Bee=s(Lc);WLr=r(Bee,`Note:
Loading a model from its configuration file does `),u4e=n(Bee,"STRONG",{});var l6t=s(u4e);QLr=r(l6t,"not"),l6t.forEach(t),HLr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Bee,"A",{href:!0});var i6t=s(RJ);ULr=r(i6t,"from_pretrained()"),i6t.forEach(t),JLr=r(Bee," to load the model weights."),Bee.forEach(t),YLr=i(Y6),T(C3.$$.fragment,Y6),Y6.forEach(t),KLr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(C9.$$.fragment,Dl),ZLr=i(Dl),p4e=n(Dl,"P",{});var d6t=s(p4e);e8r=r(d6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),d6t.forEach(t),o8r=i(Dl),gn=n(Dl,"P",{});var K6=s(gn);r8r=r(K6,"The model class to instantiate is selected based on the "),_4e=n(K6,"CODE",{});var c6t=s(_4e);t8r=r(c6t,"model_type"),c6t.forEach(t),a8r=r(K6,` property of the config object (either
passed as an argument or loaded from `),b4e=n(K6,"CODE",{});var m6t=s(b4e);n8r=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),s8r=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(K6,"CODE",{});var f6t=s(v4e);l8r=r(f6t,"pretrained_model_name_or_path"),f6t.forEach(t),i8r=r(K6,":"),K6.forEach(t),d8r=i(Dl),F4e=n(Dl,"UL",{});var g6t=s(F4e);w3=n(g6t,"LI",{});var eIe=s(w3);T4e=n(eIe,"STRONG",{});var h6t=s(T4e);c8r=r(h6t,"speech_to_text"),h6t.forEach(t),m8r=r(eIe," \u2014 "),PJ=n(eIe,"A",{href:!0});var u6t=s(PJ);f8r=r(u6t,"TFSpeech2TextForConditionalGeneration"),u6t.forEach(t),g8r=r(eIe," (Speech2Text model)"),eIe.forEach(t),g6t.forEach(t),h8r=i(Dl),T(A3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),kje=i(m),xc=n(m,"H2",{class:!0});var NGe=s(xc);y3=n(NGe,"A",{id:!0,class:!0,href:!0});var p6t=s(y3);M4e=n(p6t,"SPAN",{});var _6t=s(M4e);T(w9.$$.fragment,_6t),_6t.forEach(t),p6t.forEach(t),u8r=i(NGe),E4e=n(NGe,"SPAN",{});var b6t=s(E4e);p8r=r(b6t,"FlaxAutoModel"),b6t.forEach(t),NGe.forEach(t),Sje=i(m),mr=n(m,"DIV",{class:!0});var Gl=s(mr);T(A9.$$.fragment,Gl),_8r=i(Gl),$c=n(Gl,"P",{});var Iee=s($c);b8r=r(Iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BJ=n(Iee,"A",{href:!0});var v6t=s(BJ);v8r=r(v6t,"from_pretrained()"),v6t.forEach(t),F8r=r(Iee," class method or the "),IJ=n(Iee,"A",{href:!0});var F6t=s(IJ);T8r=r(F6t,"from_config()"),F6t.forEach(t),M8r=r(Iee,` class
method.`),Iee.forEach(t),E8r=i(Gl),y9=n(Gl,"P",{});var jGe=s(y9);C8r=r(jGe,"This class cannot be instantiated directly using "),C4e=n(jGe,"CODE",{});var T6t=s(C4e);w8r=r(T6t,"__init__()"),T6t.forEach(t),A8r=r(jGe," (throws an error)."),jGe.forEach(t),y8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Z6=s(Gt);T(L9.$$.fragment,Z6),L8r=i(Z6),w4e=n(Z6,"P",{});var M6t=s(w4e);x8r=r(M6t,"Instantiates one of the base model classes of the library from a configuration."),M6t.forEach(t),$8r=i(Z6),kc=n(Z6,"P",{});var qee=s(kc);k8r=r(qee,`Note:
Loading a model from its configuration file does `),A4e=n(qee,"STRONG",{});var E6t=s(A4e);S8r=r(E6t,"not"),E6t.forEach(t),R8r=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(qee,"A",{href:!0});var C6t=s(qJ);P8r=r(C6t,"from_pretrained()"),C6t.forEach(t),B8r=r(qee," to load the model weights."),qee.forEach(t),I8r=i(Z6),T(L3.$$.fragment,Z6),Z6.forEach(t),q8r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(x9.$$.fragment,Ol),N8r=i(Ol),y4e=n(Ol,"P",{});var w6t=s(y4e);j8r=r(w6t,"Instantiate one of the base model classes of the library from a pretrained model."),w6t.forEach(t),D8r=i(Ol),hn=n(Ol,"P",{});var ey=s(hn);G8r=r(ey,"The model class to instantiate is selected based on the "),L4e=n(ey,"CODE",{});var A6t=s(L4e);O8r=r(A6t,"model_type"),A6t.forEach(t),V8r=r(ey,` property of the config object (either
passed as an argument or loaded from `),x4e=n(ey,"CODE",{});var y6t=s(x4e);X8r=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),z8r=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(ey,"CODE",{});var L6t=s($4e);W8r=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),Q8r=r(ey,":"),ey.forEach(t),H8r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);x3=n(ne,"LI",{});var oIe=s(x3);k4e=n(oIe,"STRONG",{});var x6t=s(k4e);U8r=r(x6t,"albert"),x6t.forEach(t),J8r=r(oIe," \u2014 "),NJ=n(oIe,"A",{href:!0});var $6t=s(NJ);Y8r=r($6t,"FlaxAlbertModel"),$6t.forEach(t),K8r=r(oIe," (ALBERT model)"),oIe.forEach(t),Z8r=i(ne),$3=n(ne,"LI",{});var rIe=s($3);S4e=n(rIe,"STRONG",{});var k6t=s(S4e);e7r=r(k6t,"bart"),k6t.forEach(t),o7r=r(rIe," \u2014 "),jJ=n(rIe,"A",{href:!0});var S6t=s(jJ);r7r=r(S6t,"FlaxBartModel"),S6t.forEach(t),t7r=r(rIe," (BART model)"),rIe.forEach(t),a7r=i(ne),k3=n(ne,"LI",{});var tIe=s(k3);R4e=n(tIe,"STRONG",{});var R6t=s(R4e);n7r=r(R6t,"beit"),R6t.forEach(t),s7r=r(tIe," \u2014 "),DJ=n(tIe,"A",{href:!0});var P6t=s(DJ);l7r=r(P6t,"FlaxBeitModel"),P6t.forEach(t),i7r=r(tIe," (BEiT model)"),tIe.forEach(t),d7r=i(ne),S3=n(ne,"LI",{});var aIe=s(S3);P4e=n(aIe,"STRONG",{});var B6t=s(P4e);c7r=r(B6t,"bert"),B6t.forEach(t),m7r=r(aIe," \u2014 "),GJ=n(aIe,"A",{href:!0});var I6t=s(GJ);f7r=r(I6t,"FlaxBertModel"),I6t.forEach(t),g7r=r(aIe," (BERT model)"),aIe.forEach(t),h7r=i(ne),R3=n(ne,"LI",{});var nIe=s(R3);B4e=n(nIe,"STRONG",{});var q6t=s(B4e);u7r=r(q6t,"big_bird"),q6t.forEach(t),p7r=r(nIe," \u2014 "),OJ=n(nIe,"A",{href:!0});var N6t=s(OJ);_7r=r(N6t,"FlaxBigBirdModel"),N6t.forEach(t),b7r=r(nIe," (BigBird model)"),nIe.forEach(t),v7r=i(ne),P3=n(ne,"LI",{});var sIe=s(P3);I4e=n(sIe,"STRONG",{});var j6t=s(I4e);F7r=r(j6t,"blenderbot"),j6t.forEach(t),T7r=r(sIe," \u2014 "),VJ=n(sIe,"A",{href:!0});var D6t=s(VJ);M7r=r(D6t,"FlaxBlenderbotModel"),D6t.forEach(t),E7r=r(sIe," (Blenderbot model)"),sIe.forEach(t),C7r=i(ne),B3=n(ne,"LI",{});var lIe=s(B3);q4e=n(lIe,"STRONG",{});var G6t=s(q4e);w7r=r(G6t,"blenderbot-small"),G6t.forEach(t),A7r=r(lIe," \u2014 "),XJ=n(lIe,"A",{href:!0});var O6t=s(XJ);y7r=r(O6t,"FlaxBlenderbotSmallModel"),O6t.forEach(t),L7r=r(lIe," (BlenderbotSmall model)"),lIe.forEach(t),x7r=i(ne),I3=n(ne,"LI",{});var iIe=s(I3);N4e=n(iIe,"STRONG",{});var V6t=s(N4e);$7r=r(V6t,"clip"),V6t.forEach(t),k7r=r(iIe," \u2014 "),zJ=n(iIe,"A",{href:!0});var X6t=s(zJ);S7r=r(X6t,"FlaxCLIPModel"),X6t.forEach(t),R7r=r(iIe," (CLIP model)"),iIe.forEach(t),P7r=i(ne),q3=n(ne,"LI",{});var dIe=s(q3);j4e=n(dIe,"STRONG",{});var z6t=s(j4e);B7r=r(z6t,"distilbert"),z6t.forEach(t),I7r=r(dIe," \u2014 "),WJ=n(dIe,"A",{href:!0});var W6t=s(WJ);q7r=r(W6t,"FlaxDistilBertModel"),W6t.forEach(t),N7r=r(dIe," (DistilBERT model)"),dIe.forEach(t),j7r=i(ne),N3=n(ne,"LI",{});var cIe=s(N3);D4e=n(cIe,"STRONG",{});var Q6t=s(D4e);D7r=r(Q6t,"electra"),Q6t.forEach(t),G7r=r(cIe," \u2014 "),QJ=n(cIe,"A",{href:!0});var H6t=s(QJ);O7r=r(H6t,"FlaxElectraModel"),H6t.forEach(t),V7r=r(cIe," (ELECTRA model)"),cIe.forEach(t),X7r=i(ne),j3=n(ne,"LI",{});var mIe=s(j3);G4e=n(mIe,"STRONG",{});var U6t=s(G4e);z7r=r(U6t,"gpt2"),U6t.forEach(t),W7r=r(mIe," \u2014 "),HJ=n(mIe,"A",{href:!0});var J6t=s(HJ);Q7r=r(J6t,"FlaxGPT2Model"),J6t.forEach(t),H7r=r(mIe," (OpenAI GPT-2 model)"),mIe.forEach(t),U7r=i(ne),D3=n(ne,"LI",{});var fIe=s(D3);O4e=n(fIe,"STRONG",{});var Y6t=s(O4e);J7r=r(Y6t,"gpt_neo"),Y6t.forEach(t),Y7r=r(fIe," \u2014 "),UJ=n(fIe,"A",{href:!0});var K6t=s(UJ);K7r=r(K6t,"FlaxGPTNeoModel"),K6t.forEach(t),Z7r=r(fIe," (GPT Neo model)"),fIe.forEach(t),e9r=i(ne),G3=n(ne,"LI",{});var gIe=s(G3);V4e=n(gIe,"STRONG",{});var Z6t=s(V4e);o9r=r(Z6t,"gptj"),Z6t.forEach(t),r9r=r(gIe," \u2014 "),JJ=n(gIe,"A",{href:!0});var eyt=s(JJ);t9r=r(eyt,"FlaxGPTJModel"),eyt.forEach(t),a9r=r(gIe," (GPT-J model)"),gIe.forEach(t),n9r=i(ne),O3=n(ne,"LI",{});var hIe=s(O3);X4e=n(hIe,"STRONG",{});var oyt=s(X4e);s9r=r(oyt,"marian"),oyt.forEach(t),l9r=r(hIe," \u2014 "),YJ=n(hIe,"A",{href:!0});var ryt=s(YJ);i9r=r(ryt,"FlaxMarianModel"),ryt.forEach(t),d9r=r(hIe," (Marian model)"),hIe.forEach(t),c9r=i(ne),V3=n(ne,"LI",{});var uIe=s(V3);z4e=n(uIe,"STRONG",{});var tyt=s(z4e);m9r=r(tyt,"mbart"),tyt.forEach(t),f9r=r(uIe," \u2014 "),KJ=n(uIe,"A",{href:!0});var ayt=s(KJ);g9r=r(ayt,"FlaxMBartModel"),ayt.forEach(t),h9r=r(uIe," (mBART model)"),uIe.forEach(t),u9r=i(ne),X3=n(ne,"LI",{});var pIe=s(X3);W4e=n(pIe,"STRONG",{});var nyt=s(W4e);p9r=r(nyt,"mt5"),nyt.forEach(t),_9r=r(pIe," \u2014 "),ZJ=n(pIe,"A",{href:!0});var syt=s(ZJ);b9r=r(syt,"FlaxMT5Model"),syt.forEach(t),v9r=r(pIe," (mT5 model)"),pIe.forEach(t),F9r=i(ne),z3=n(ne,"LI",{});var _Ie=s(z3);Q4e=n(_Ie,"STRONG",{});var lyt=s(Q4e);T9r=r(lyt,"pegasus"),lyt.forEach(t),M9r=r(_Ie," \u2014 "),eY=n(_Ie,"A",{href:!0});var iyt=s(eY);E9r=r(iyt,"FlaxPegasusModel"),iyt.forEach(t),C9r=r(_Ie," (Pegasus model)"),_Ie.forEach(t),w9r=i(ne),W3=n(ne,"LI",{});var bIe=s(W3);H4e=n(bIe,"STRONG",{});var dyt=s(H4e);A9r=r(dyt,"roberta"),dyt.forEach(t),y9r=r(bIe," \u2014 "),oY=n(bIe,"A",{href:!0});var cyt=s(oY);L9r=r(cyt,"FlaxRobertaModel"),cyt.forEach(t),x9r=r(bIe," (RoBERTa model)"),bIe.forEach(t),$9r=i(ne),Q3=n(ne,"LI",{});var vIe=s(Q3);U4e=n(vIe,"STRONG",{});var myt=s(U4e);k9r=r(myt,"roformer"),myt.forEach(t),S9r=r(vIe," \u2014 "),rY=n(vIe,"A",{href:!0});var fyt=s(rY);R9r=r(fyt,"FlaxRoFormerModel"),fyt.forEach(t),P9r=r(vIe," (RoFormer model)"),vIe.forEach(t),B9r=i(ne),H3=n(ne,"LI",{});var FIe=s(H3);J4e=n(FIe,"STRONG",{});var gyt=s(J4e);I9r=r(gyt,"t5"),gyt.forEach(t),q9r=r(FIe," \u2014 "),tY=n(FIe,"A",{href:!0});var hyt=s(tY);N9r=r(hyt,"FlaxT5Model"),hyt.forEach(t),j9r=r(FIe," (T5 model)"),FIe.forEach(t),D9r=i(ne),U3=n(ne,"LI",{});var TIe=s(U3);Y4e=n(TIe,"STRONG",{});var uyt=s(Y4e);G9r=r(uyt,"vision-text-dual-encoder"),uyt.forEach(t),O9r=r(TIe," \u2014 "),aY=n(TIe,"A",{href:!0});var pyt=s(aY);V9r=r(pyt,"FlaxVisionTextDualEncoderModel"),pyt.forEach(t),X9r=r(TIe," (VisionTextDualEncoder model)"),TIe.forEach(t),z9r=i(ne),J3=n(ne,"LI",{});var MIe=s(J3);K4e=n(MIe,"STRONG",{});var _yt=s(K4e);W9r=r(_yt,"vit"),_yt.forEach(t),Q9r=r(MIe," \u2014 "),nY=n(MIe,"A",{href:!0});var byt=s(nY);H9r=r(byt,"FlaxViTModel"),byt.forEach(t),U9r=r(MIe," (ViT model)"),MIe.forEach(t),J9r=i(ne),Y3=n(ne,"LI",{});var EIe=s(Y3);Z4e=n(EIe,"STRONG",{});var vyt=s(Z4e);Y9r=r(vyt,"wav2vec2"),vyt.forEach(t),K9r=r(EIe," \u2014 "),sY=n(EIe,"A",{href:!0});var Fyt=s(sY);Z9r=r(Fyt,"FlaxWav2Vec2Model"),Fyt.forEach(t),exr=r(EIe," (Wav2Vec2 model)"),EIe.forEach(t),oxr=i(ne),K3=n(ne,"LI",{});var CIe=s(K3);eEe=n(CIe,"STRONG",{});var Tyt=s(eEe);rxr=r(Tyt,"xglm"),Tyt.forEach(t),txr=r(CIe," \u2014 "),lY=n(CIe,"A",{href:!0});var Myt=s(lY);axr=r(Myt,"FlaxXGLMModel"),Myt.forEach(t),nxr=r(CIe," (XGLM model)"),CIe.forEach(t),sxr=i(ne),Z3=n(ne,"LI",{});var wIe=s(Z3);oEe=n(wIe,"STRONG",{});var Eyt=s(oEe);lxr=r(Eyt,"xlm-roberta"),Eyt.forEach(t),ixr=r(wIe," \u2014 "),iY=n(wIe,"A",{href:!0});var Cyt=s(iY);dxr=r(Cyt,"FlaxXLMRobertaModel"),Cyt.forEach(t),cxr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),ne.forEach(t),mxr=i(Ol),T(ew.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Rje=i(m),Sc=n(m,"H2",{class:!0});var DGe=s(Sc);ow=n(DGe,"A",{id:!0,class:!0,href:!0});var wyt=s(ow);rEe=n(wyt,"SPAN",{});var Ayt=s(rEe);T($9.$$.fragment,Ayt),Ayt.forEach(t),wyt.forEach(t),fxr=i(DGe),tEe=n(DGe,"SPAN",{});var yyt=s(tEe);gxr=r(yyt,"FlaxAutoModelForCausalLM"),yyt.forEach(t),DGe.forEach(t),Pje=i(m),fr=n(m,"DIV",{class:!0});var Vl=s(fr);T(k9.$$.fragment,Vl),hxr=i(Vl),Rc=n(Vl,"P",{});var Nee=s(Rc);uxr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=n(Nee,"A",{href:!0});var Lyt=s(dY);pxr=r(Lyt,"from_pretrained()"),Lyt.forEach(t),_xr=r(Nee," class method or the "),cY=n(Nee,"A",{href:!0});var xyt=s(cY);bxr=r(xyt,"from_config()"),xyt.forEach(t),vxr=r(Nee,` class
method.`),Nee.forEach(t),Fxr=i(Vl),S9=n(Vl,"P",{});var GGe=s(S9);Txr=r(GGe,"This class cannot be instantiated directly using "),aEe=n(GGe,"CODE",{});var $yt=s(aEe);Mxr=r($yt,"__init__()"),$yt.forEach(t),Exr=r(GGe," (throws an error)."),GGe.forEach(t),Cxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var oy=s(Ot);T(R9.$$.fragment,oy),wxr=i(oy),nEe=n(oy,"P",{});var kyt=s(nEe);Axr=r(kyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kyt.forEach(t),yxr=i(oy),Pc=n(oy,"P",{});var jee=s(Pc);Lxr=r(jee,`Note:
Loading a model from its configuration file does `),sEe=n(jee,"STRONG",{});var Syt=s(sEe);xxr=r(Syt,"not"),Syt.forEach(t),$xr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(jee,"A",{href:!0});var Ryt=s(mY);kxr=r(Ryt,"from_pretrained()"),Ryt.forEach(t),Sxr=r(jee," to load the model weights."),jee.forEach(t),Rxr=i(oy),T(rw.$$.fragment,oy),oy.forEach(t),Pxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(P9.$$.fragment,Xl),Bxr=i(Xl),lEe=n(Xl,"P",{});var Pyt=s(lEe);Ixr=r(Pyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pyt.forEach(t),qxr=i(Xl),un=n(Xl,"P",{});var ry=s(un);Nxr=r(ry,"The model class to instantiate is selected based on the "),iEe=n(ry,"CODE",{});var Byt=s(iEe);jxr=r(Byt,"model_type"),Byt.forEach(t),Dxr=r(ry,` property of the config object (either
passed as an argument or loaded from `),dEe=n(ry,"CODE",{});var Iyt=s(dEe);Gxr=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),Oxr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=n(ry,"CODE",{});var qyt=s(cEe);Vxr=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),Xxr=r(ry,":"),ry.forEach(t),zxr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);tw=n(Xe,"LI",{});var AIe=s(tw);mEe=n(AIe,"STRONG",{});var Nyt=s(mEe);Wxr=r(Nyt,"bart"),Nyt.forEach(t),Qxr=r(AIe," \u2014 "),fY=n(AIe,"A",{href:!0});var jyt=s(fY);Hxr=r(jyt,"FlaxBartForCausalLM"),jyt.forEach(t),Uxr=r(AIe," (BART model)"),AIe.forEach(t),Jxr=i(Xe),aw=n(Xe,"LI",{});var yIe=s(aw);fEe=n(yIe,"STRONG",{});var Dyt=s(fEe);Yxr=r(Dyt,"bert"),Dyt.forEach(t),Kxr=r(yIe," \u2014 "),gY=n(yIe,"A",{href:!0});var Gyt=s(gY);Zxr=r(Gyt,"FlaxBertForCausalLM"),Gyt.forEach(t),e$r=r(yIe," (BERT model)"),yIe.forEach(t),o$r=i(Xe),nw=n(Xe,"LI",{});var LIe=s(nw);gEe=n(LIe,"STRONG",{});var Oyt=s(gEe);r$r=r(Oyt,"big_bird"),Oyt.forEach(t),t$r=r(LIe," \u2014 "),hY=n(LIe,"A",{href:!0});var Vyt=s(hY);a$r=r(Vyt,"FlaxBigBirdForCausalLM"),Vyt.forEach(t),n$r=r(LIe," (BigBird model)"),LIe.forEach(t),s$r=i(Xe),sw=n(Xe,"LI",{});var xIe=s(sw);hEe=n(xIe,"STRONG",{});var Xyt=s(hEe);l$r=r(Xyt,"electra"),Xyt.forEach(t),i$r=r(xIe," \u2014 "),uY=n(xIe,"A",{href:!0});var zyt=s(uY);d$r=r(zyt,"FlaxElectraForCausalLM"),zyt.forEach(t),c$r=r(xIe," (ELECTRA model)"),xIe.forEach(t),m$r=i(Xe),lw=n(Xe,"LI",{});var $Ie=s(lw);uEe=n($Ie,"STRONG",{});var Wyt=s(uEe);f$r=r(Wyt,"gpt2"),Wyt.forEach(t),g$r=r($Ie," \u2014 "),pY=n($Ie,"A",{href:!0});var Qyt=s(pY);h$r=r(Qyt,"FlaxGPT2LMHeadModel"),Qyt.forEach(t),u$r=r($Ie," (OpenAI GPT-2 model)"),$Ie.forEach(t),p$r=i(Xe),iw=n(Xe,"LI",{});var kIe=s(iw);pEe=n(kIe,"STRONG",{});var Hyt=s(pEe);_$r=r(Hyt,"gpt_neo"),Hyt.forEach(t),b$r=r(kIe," \u2014 "),_Y=n(kIe,"A",{href:!0});var Uyt=s(_Y);v$r=r(Uyt,"FlaxGPTNeoForCausalLM"),Uyt.forEach(t),F$r=r(kIe," (GPT Neo model)"),kIe.forEach(t),T$r=i(Xe),dw=n(Xe,"LI",{});var SIe=s(dw);_Ee=n(SIe,"STRONG",{});var Jyt=s(_Ee);M$r=r(Jyt,"gptj"),Jyt.forEach(t),E$r=r(SIe," \u2014 "),bY=n(SIe,"A",{href:!0});var Yyt=s(bY);C$r=r(Yyt,"FlaxGPTJForCausalLM"),Yyt.forEach(t),w$r=r(SIe," (GPT-J model)"),SIe.forEach(t),A$r=i(Xe),cw=n(Xe,"LI",{});var RIe=s(cw);bEe=n(RIe,"STRONG",{});var Kyt=s(bEe);y$r=r(Kyt,"roberta"),Kyt.forEach(t),L$r=r(RIe," \u2014 "),vY=n(RIe,"A",{href:!0});var Zyt=s(vY);x$r=r(Zyt,"FlaxRobertaForCausalLM"),Zyt.forEach(t),$$r=r(RIe," (RoBERTa model)"),RIe.forEach(t),k$r=i(Xe),mw=n(Xe,"LI",{});var PIe=s(mw);vEe=n(PIe,"STRONG",{});var eLt=s(vEe);S$r=r(eLt,"xglm"),eLt.forEach(t),R$r=r(PIe," \u2014 "),FY=n(PIe,"A",{href:!0});var oLt=s(FY);P$r=r(oLt,"FlaxXGLMForCausalLM"),oLt.forEach(t),B$r=r(PIe," (XGLM model)"),PIe.forEach(t),Xe.forEach(t),I$r=i(Xl),T(fw.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Bje=i(m),Bc=n(m,"H2",{class:!0});var OGe=s(Bc);gw=n(OGe,"A",{id:!0,class:!0,href:!0});var rLt=s(gw);FEe=n(rLt,"SPAN",{});var tLt=s(FEe);T(B9.$$.fragment,tLt),tLt.forEach(t),rLt.forEach(t),q$r=i(OGe),TEe=n(OGe,"SPAN",{});var aLt=s(TEe);N$r=r(aLt,"FlaxAutoModelForPreTraining"),aLt.forEach(t),OGe.forEach(t),Ije=i(m),gr=n(m,"DIV",{class:!0});var zl=s(gr);T(I9.$$.fragment,zl),j$r=i(zl),Ic=n(zl,"P",{});var Dee=s(Ic);D$r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TY=n(Dee,"A",{href:!0});var nLt=s(TY);G$r=r(nLt,"from_pretrained()"),nLt.forEach(t),O$r=r(Dee," class method or the "),MY=n(Dee,"A",{href:!0});var sLt=s(MY);V$r=r(sLt,"from_config()"),sLt.forEach(t),X$r=r(Dee,` class
method.`),Dee.forEach(t),z$r=i(zl),q9=n(zl,"P",{});var VGe=s(q9);W$r=r(VGe,"This class cannot be instantiated directly using "),MEe=n(VGe,"CODE",{});var lLt=s(MEe);Q$r=r(lLt,"__init__()"),lLt.forEach(t),H$r=r(VGe," (throws an error)."),VGe.forEach(t),U$r=i(zl),Vt=n(zl,"DIV",{class:!0});var ty=s(Vt);T(N9.$$.fragment,ty),J$r=i(ty),EEe=n(ty,"P",{});var iLt=s(EEe);Y$r=r(iLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iLt.forEach(t),K$r=i(ty),qc=n(ty,"P",{});var Gee=s(qc);Z$r=r(Gee,`Note:
Loading a model from its configuration file does `),CEe=n(Gee,"STRONG",{});var dLt=s(CEe);ekr=r(dLt,"not"),dLt.forEach(t),okr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Gee,"A",{href:!0});var cLt=s(EY);rkr=r(cLt,"from_pretrained()"),cLt.forEach(t),tkr=r(Gee," to load the model weights."),Gee.forEach(t),akr=i(ty),T(hw.$$.fragment,ty),ty.forEach(t),nkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(j9.$$.fragment,Wl),skr=i(Wl),wEe=n(Wl,"P",{});var mLt=s(wEe);lkr=r(mLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mLt.forEach(t),ikr=i(Wl),pn=n(Wl,"P",{});var ay=s(pn);dkr=r(ay,"The model class to instantiate is selected based on the "),AEe=n(ay,"CODE",{});var fLt=s(AEe);ckr=r(fLt,"model_type"),fLt.forEach(t),mkr=r(ay,` property of the config object (either
passed as an argument or loaded from `),yEe=n(ay,"CODE",{});var gLt=s(yEe);fkr=r(gLt,"pretrained_model_name_or_path"),gLt.forEach(t),gkr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(ay,"CODE",{});var hLt=s(LEe);hkr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),ukr=r(ay,":"),ay.forEach(t),pkr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);uw=n(we,"LI",{});var BIe=s(uw);xEe=n(BIe,"STRONG",{});var uLt=s(xEe);_kr=r(uLt,"albert"),uLt.forEach(t),bkr=r(BIe," \u2014 "),CY=n(BIe,"A",{href:!0});var pLt=s(CY);vkr=r(pLt,"FlaxAlbertForPreTraining"),pLt.forEach(t),Fkr=r(BIe," (ALBERT model)"),BIe.forEach(t),Tkr=i(we),pw=n(we,"LI",{});var IIe=s(pw);$Ee=n(IIe,"STRONG",{});var _Lt=s($Ee);Mkr=r(_Lt,"bart"),_Lt.forEach(t),Ekr=r(IIe," \u2014 "),wY=n(IIe,"A",{href:!0});var bLt=s(wY);Ckr=r(bLt,"FlaxBartForConditionalGeneration"),bLt.forEach(t),wkr=r(IIe," (BART model)"),IIe.forEach(t),Akr=i(we),_w=n(we,"LI",{});var qIe=s(_w);kEe=n(qIe,"STRONG",{});var vLt=s(kEe);ykr=r(vLt,"bert"),vLt.forEach(t),Lkr=r(qIe," \u2014 "),AY=n(qIe,"A",{href:!0});var FLt=s(AY);xkr=r(FLt,"FlaxBertForPreTraining"),FLt.forEach(t),$kr=r(qIe," (BERT model)"),qIe.forEach(t),kkr=i(we),bw=n(we,"LI",{});var NIe=s(bw);SEe=n(NIe,"STRONG",{});var TLt=s(SEe);Skr=r(TLt,"big_bird"),TLt.forEach(t),Rkr=r(NIe," \u2014 "),yY=n(NIe,"A",{href:!0});var MLt=s(yY);Pkr=r(MLt,"FlaxBigBirdForPreTraining"),MLt.forEach(t),Bkr=r(NIe," (BigBird model)"),NIe.forEach(t),Ikr=i(we),vw=n(we,"LI",{});var jIe=s(vw);REe=n(jIe,"STRONG",{});var ELt=s(REe);qkr=r(ELt,"electra"),ELt.forEach(t),Nkr=r(jIe," \u2014 "),LY=n(jIe,"A",{href:!0});var CLt=s(LY);jkr=r(CLt,"FlaxElectraForPreTraining"),CLt.forEach(t),Dkr=r(jIe," (ELECTRA model)"),jIe.forEach(t),Gkr=i(we),Fw=n(we,"LI",{});var DIe=s(Fw);PEe=n(DIe,"STRONG",{});var wLt=s(PEe);Okr=r(wLt,"mbart"),wLt.forEach(t),Vkr=r(DIe," \u2014 "),xY=n(DIe,"A",{href:!0});var ALt=s(xY);Xkr=r(ALt,"FlaxMBartForConditionalGeneration"),ALt.forEach(t),zkr=r(DIe," (mBART model)"),DIe.forEach(t),Wkr=i(we),Tw=n(we,"LI",{});var GIe=s(Tw);BEe=n(GIe,"STRONG",{});var yLt=s(BEe);Qkr=r(yLt,"mt5"),yLt.forEach(t),Hkr=r(GIe," \u2014 "),$Y=n(GIe,"A",{href:!0});var LLt=s($Y);Ukr=r(LLt,"FlaxMT5ForConditionalGeneration"),LLt.forEach(t),Jkr=r(GIe," (mT5 model)"),GIe.forEach(t),Ykr=i(we),Mw=n(we,"LI",{});var OIe=s(Mw);IEe=n(OIe,"STRONG",{});var xLt=s(IEe);Kkr=r(xLt,"roberta"),xLt.forEach(t),Zkr=r(OIe," \u2014 "),kY=n(OIe,"A",{href:!0});var $Lt=s(kY);eSr=r($Lt,"FlaxRobertaForMaskedLM"),$Lt.forEach(t),oSr=r(OIe," (RoBERTa model)"),OIe.forEach(t),rSr=i(we),Ew=n(we,"LI",{});var VIe=s(Ew);qEe=n(VIe,"STRONG",{});var kLt=s(qEe);tSr=r(kLt,"roformer"),kLt.forEach(t),aSr=r(VIe," \u2014 "),SY=n(VIe,"A",{href:!0});var SLt=s(SY);nSr=r(SLt,"FlaxRoFormerForMaskedLM"),SLt.forEach(t),sSr=r(VIe," (RoFormer model)"),VIe.forEach(t),lSr=i(we),Cw=n(we,"LI",{});var XIe=s(Cw);NEe=n(XIe,"STRONG",{});var RLt=s(NEe);iSr=r(RLt,"t5"),RLt.forEach(t),dSr=r(XIe," \u2014 "),RY=n(XIe,"A",{href:!0});var PLt=s(RY);cSr=r(PLt,"FlaxT5ForConditionalGeneration"),PLt.forEach(t),mSr=r(XIe," (T5 model)"),XIe.forEach(t),fSr=i(we),ww=n(we,"LI",{});var zIe=s(ww);jEe=n(zIe,"STRONG",{});var BLt=s(jEe);gSr=r(BLt,"wav2vec2"),BLt.forEach(t),hSr=r(zIe," \u2014 "),PY=n(zIe,"A",{href:!0});var ILt=s(PY);uSr=r(ILt,"FlaxWav2Vec2ForPreTraining"),ILt.forEach(t),pSr=r(zIe," (Wav2Vec2 model)"),zIe.forEach(t),_Sr=i(we),Aw=n(we,"LI",{});var WIe=s(Aw);DEe=n(WIe,"STRONG",{});var qLt=s(DEe);bSr=r(qLt,"xlm-roberta"),qLt.forEach(t),vSr=r(WIe," \u2014 "),BY=n(WIe,"A",{href:!0});var NLt=s(BY);FSr=r(NLt,"FlaxXLMRobertaForMaskedLM"),NLt.forEach(t),TSr=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),we.forEach(t),MSr=i(Wl),T(yw.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),qje=i(m),Nc=n(m,"H2",{class:!0});var XGe=s(Nc);Lw=n(XGe,"A",{id:!0,class:!0,href:!0});var jLt=s(Lw);GEe=n(jLt,"SPAN",{});var DLt=s(GEe);T(D9.$$.fragment,DLt),DLt.forEach(t),jLt.forEach(t),ESr=i(XGe),OEe=n(XGe,"SPAN",{});var GLt=s(OEe);CSr=r(GLt,"FlaxAutoModelForMaskedLM"),GLt.forEach(t),XGe.forEach(t),Nje=i(m),hr=n(m,"DIV",{class:!0});var Ql=s(hr);T(G9.$$.fragment,Ql),wSr=i(Ql),jc=n(Ql,"P",{});var Oee=s(jc);ASr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IY=n(Oee,"A",{href:!0});var OLt=s(IY);ySr=r(OLt,"from_pretrained()"),OLt.forEach(t),LSr=r(Oee," class method or the "),qY=n(Oee,"A",{href:!0});var VLt=s(qY);xSr=r(VLt,"from_config()"),VLt.forEach(t),$Sr=r(Oee,` class
method.`),Oee.forEach(t),kSr=i(Ql),O9=n(Ql,"P",{});var zGe=s(O9);SSr=r(zGe,"This class cannot be instantiated directly using "),VEe=n(zGe,"CODE",{});var XLt=s(VEe);RSr=r(XLt,"__init__()"),XLt.forEach(t),PSr=r(zGe," (throws an error)."),zGe.forEach(t),BSr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var ny=s(Xt);T(V9.$$.fragment,ny),ISr=i(ny),XEe=n(ny,"P",{});var zLt=s(XEe);qSr=r(zLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zLt.forEach(t),NSr=i(ny),Dc=n(ny,"P",{});var Vee=s(Dc);jSr=r(Vee,`Note:
Loading a model from its configuration file does `),zEe=n(Vee,"STRONG",{});var WLt=s(zEe);DSr=r(WLt,"not"),WLt.forEach(t),GSr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(Vee,"A",{href:!0});var QLt=s(NY);OSr=r(QLt,"from_pretrained()"),QLt.forEach(t),VSr=r(Vee," to load the model weights."),Vee.forEach(t),XSr=i(ny),T(xw.$$.fragment,ny),ny.forEach(t),zSr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(X9.$$.fragment,Hl),WSr=i(Hl),WEe=n(Hl,"P",{});var HLt=s(WEe);QSr=r(HLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HLt.forEach(t),HSr=i(Hl),_n=n(Hl,"P",{});var sy=s(_n);USr=r(sy,"The model class to instantiate is selected based on the "),QEe=n(sy,"CODE",{});var ULt=s(QEe);JSr=r(ULt,"model_type"),ULt.forEach(t),YSr=r(sy,` property of the config object (either
passed as an argument or loaded from `),HEe=n(sy,"CODE",{});var JLt=s(HEe);KSr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),ZSr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(sy,"CODE",{});var YLt=s(UEe);eRr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),oRr=r(sy,":"),sy.forEach(t),rRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);$w=n(Ie,"LI",{});var QIe=s($w);JEe=n(QIe,"STRONG",{});var KLt=s(JEe);tRr=r(KLt,"albert"),KLt.forEach(t),aRr=r(QIe," \u2014 "),jY=n(QIe,"A",{href:!0});var ZLt=s(jY);nRr=r(ZLt,"FlaxAlbertForMaskedLM"),ZLt.forEach(t),sRr=r(QIe," (ALBERT model)"),QIe.forEach(t),lRr=i(Ie),kw=n(Ie,"LI",{});var HIe=s(kw);YEe=n(HIe,"STRONG",{});var e8t=s(YEe);iRr=r(e8t,"bart"),e8t.forEach(t),dRr=r(HIe," \u2014 "),DY=n(HIe,"A",{href:!0});var o8t=s(DY);cRr=r(o8t,"FlaxBartForConditionalGeneration"),o8t.forEach(t),mRr=r(HIe," (BART model)"),HIe.forEach(t),fRr=i(Ie),Sw=n(Ie,"LI",{});var UIe=s(Sw);KEe=n(UIe,"STRONG",{});var r8t=s(KEe);gRr=r(r8t,"bert"),r8t.forEach(t),hRr=r(UIe," \u2014 "),GY=n(UIe,"A",{href:!0});var t8t=s(GY);uRr=r(t8t,"FlaxBertForMaskedLM"),t8t.forEach(t),pRr=r(UIe," (BERT model)"),UIe.forEach(t),_Rr=i(Ie),Rw=n(Ie,"LI",{});var JIe=s(Rw);ZEe=n(JIe,"STRONG",{});var a8t=s(ZEe);bRr=r(a8t,"big_bird"),a8t.forEach(t),vRr=r(JIe," \u2014 "),OY=n(JIe,"A",{href:!0});var n8t=s(OY);FRr=r(n8t,"FlaxBigBirdForMaskedLM"),n8t.forEach(t),TRr=r(JIe," (BigBird model)"),JIe.forEach(t),MRr=i(Ie),Pw=n(Ie,"LI",{});var YIe=s(Pw);eCe=n(YIe,"STRONG",{});var s8t=s(eCe);ERr=r(s8t,"distilbert"),s8t.forEach(t),CRr=r(YIe," \u2014 "),VY=n(YIe,"A",{href:!0});var l8t=s(VY);wRr=r(l8t,"FlaxDistilBertForMaskedLM"),l8t.forEach(t),ARr=r(YIe," (DistilBERT model)"),YIe.forEach(t),yRr=i(Ie),Bw=n(Ie,"LI",{});var KIe=s(Bw);oCe=n(KIe,"STRONG",{});var i8t=s(oCe);LRr=r(i8t,"electra"),i8t.forEach(t),xRr=r(KIe," \u2014 "),XY=n(KIe,"A",{href:!0});var d8t=s(XY);$Rr=r(d8t,"FlaxElectraForMaskedLM"),d8t.forEach(t),kRr=r(KIe," (ELECTRA model)"),KIe.forEach(t),SRr=i(Ie),Iw=n(Ie,"LI",{});var ZIe=s(Iw);rCe=n(ZIe,"STRONG",{});var c8t=s(rCe);RRr=r(c8t,"mbart"),c8t.forEach(t),PRr=r(ZIe," \u2014 "),zY=n(ZIe,"A",{href:!0});var m8t=s(zY);BRr=r(m8t,"FlaxMBartForConditionalGeneration"),m8t.forEach(t),IRr=r(ZIe," (mBART model)"),ZIe.forEach(t),qRr=i(Ie),qw=n(Ie,"LI",{});var eqe=s(qw);tCe=n(eqe,"STRONG",{});var f8t=s(tCe);NRr=r(f8t,"roberta"),f8t.forEach(t),jRr=r(eqe," \u2014 "),WY=n(eqe,"A",{href:!0});var g8t=s(WY);DRr=r(g8t,"FlaxRobertaForMaskedLM"),g8t.forEach(t),GRr=r(eqe," (RoBERTa model)"),eqe.forEach(t),ORr=i(Ie),Nw=n(Ie,"LI",{});var oqe=s(Nw);aCe=n(oqe,"STRONG",{});var h8t=s(aCe);VRr=r(h8t,"roformer"),h8t.forEach(t),XRr=r(oqe," \u2014 "),QY=n(oqe,"A",{href:!0});var u8t=s(QY);zRr=r(u8t,"FlaxRoFormerForMaskedLM"),u8t.forEach(t),WRr=r(oqe," (RoFormer model)"),oqe.forEach(t),QRr=i(Ie),jw=n(Ie,"LI",{});var rqe=s(jw);nCe=n(rqe,"STRONG",{});var p8t=s(nCe);HRr=r(p8t,"xlm-roberta"),p8t.forEach(t),URr=r(rqe," \u2014 "),HY=n(rqe,"A",{href:!0});var _8t=s(HY);JRr=r(_8t,"FlaxXLMRobertaForMaskedLM"),_8t.forEach(t),YRr=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),Ie.forEach(t),KRr=i(Hl),T(Dw.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),jje=i(m),Gc=n(m,"H2",{class:!0});var WGe=s(Gc);Gw=n(WGe,"A",{id:!0,class:!0,href:!0});var b8t=s(Gw);sCe=n(b8t,"SPAN",{});var v8t=s(sCe);T(z9.$$.fragment,v8t),v8t.forEach(t),b8t.forEach(t),ZRr=i(WGe),lCe=n(WGe,"SPAN",{});var F8t=s(lCe);ePr=r(F8t,"FlaxAutoModelForSeq2SeqLM"),F8t.forEach(t),WGe.forEach(t),Dje=i(m),ur=n(m,"DIV",{class:!0});var Ul=s(ur);T(W9.$$.fragment,Ul),oPr=i(Ul),Oc=n(Ul,"P",{});var Xee=s(Oc);rPr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=n(Xee,"A",{href:!0});var T8t=s(UY);tPr=r(T8t,"from_pretrained()"),T8t.forEach(t),aPr=r(Xee," class method or the "),JY=n(Xee,"A",{href:!0});var M8t=s(JY);nPr=r(M8t,"from_config()"),M8t.forEach(t),sPr=r(Xee,` class
method.`),Xee.forEach(t),lPr=i(Ul),Q9=n(Ul,"P",{});var QGe=s(Q9);iPr=r(QGe,"This class cannot be instantiated directly using "),iCe=n(QGe,"CODE",{});var E8t=s(iCe);dPr=r(E8t,"__init__()"),E8t.forEach(t),cPr=r(QGe," (throws an error)."),QGe.forEach(t),mPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var ly=s(zt);T(H9.$$.fragment,ly),fPr=i(ly),dCe=n(ly,"P",{});var C8t=s(dCe);gPr=r(C8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C8t.forEach(t),hPr=i(ly),Vc=n(ly,"P",{});var zee=s(Vc);uPr=r(zee,`Note:
Loading a model from its configuration file does `),cCe=n(zee,"STRONG",{});var w8t=s(cCe);pPr=r(w8t,"not"),w8t.forEach(t),_Pr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(zee,"A",{href:!0});var A8t=s(YY);bPr=r(A8t,"from_pretrained()"),A8t.forEach(t),vPr=r(zee," to load the model weights."),zee.forEach(t),FPr=i(ly),T(Ow.$$.fragment,ly),ly.forEach(t),TPr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(U9.$$.fragment,Jl),MPr=i(Jl),mCe=n(Jl,"P",{});var y8t=s(mCe);EPr=r(y8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y8t.forEach(t),CPr=i(Jl),bn=n(Jl,"P",{});var iy=s(bn);wPr=r(iy,"The model class to instantiate is selected based on the "),fCe=n(iy,"CODE",{});var L8t=s(fCe);APr=r(L8t,"model_type"),L8t.forEach(t),yPr=r(iy,` property of the config object (either
passed as an argument or loaded from `),gCe=n(iy,"CODE",{});var x8t=s(gCe);LPr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),xPr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=n(iy,"CODE",{});var $8t=s(hCe);$Pr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),kPr=r(iy,":"),iy.forEach(t),SPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);Vw=n(ze,"LI",{});var tqe=s(Vw);uCe=n(tqe,"STRONG",{});var k8t=s(uCe);RPr=r(k8t,"bart"),k8t.forEach(t),PPr=r(tqe," \u2014 "),KY=n(tqe,"A",{href:!0});var S8t=s(KY);BPr=r(S8t,"FlaxBartForConditionalGeneration"),S8t.forEach(t),IPr=r(tqe," (BART model)"),tqe.forEach(t),qPr=i(ze),Xw=n(ze,"LI",{});var aqe=s(Xw);pCe=n(aqe,"STRONG",{});var R8t=s(pCe);NPr=r(R8t,"blenderbot"),R8t.forEach(t),jPr=r(aqe," \u2014 "),ZY=n(aqe,"A",{href:!0});var P8t=s(ZY);DPr=r(P8t,"FlaxBlenderbotForConditionalGeneration"),P8t.forEach(t),GPr=r(aqe," (Blenderbot model)"),aqe.forEach(t),OPr=i(ze),zw=n(ze,"LI",{});var nqe=s(zw);_Ce=n(nqe,"STRONG",{});var B8t=s(_Ce);VPr=r(B8t,"blenderbot-small"),B8t.forEach(t),XPr=r(nqe," \u2014 "),eK=n(nqe,"A",{href:!0});var I8t=s(eK);zPr=r(I8t,"FlaxBlenderbotSmallForConditionalGeneration"),I8t.forEach(t),WPr=r(nqe," (BlenderbotSmall model)"),nqe.forEach(t),QPr=i(ze),Ww=n(ze,"LI",{});var sqe=s(Ww);bCe=n(sqe,"STRONG",{});var q8t=s(bCe);HPr=r(q8t,"encoder-decoder"),q8t.forEach(t),UPr=r(sqe," \u2014 "),oK=n(sqe,"A",{href:!0});var N8t=s(oK);JPr=r(N8t,"FlaxEncoderDecoderModel"),N8t.forEach(t),YPr=r(sqe," (Encoder decoder model)"),sqe.forEach(t),KPr=i(ze),Qw=n(ze,"LI",{});var lqe=s(Qw);vCe=n(lqe,"STRONG",{});var j8t=s(vCe);ZPr=r(j8t,"marian"),j8t.forEach(t),eBr=r(lqe," \u2014 "),rK=n(lqe,"A",{href:!0});var D8t=s(rK);oBr=r(D8t,"FlaxMarianMTModel"),D8t.forEach(t),rBr=r(lqe," (Marian model)"),lqe.forEach(t),tBr=i(ze),Hw=n(ze,"LI",{});var iqe=s(Hw);FCe=n(iqe,"STRONG",{});var G8t=s(FCe);aBr=r(G8t,"mbart"),G8t.forEach(t),nBr=r(iqe," \u2014 "),tK=n(iqe,"A",{href:!0});var O8t=s(tK);sBr=r(O8t,"FlaxMBartForConditionalGeneration"),O8t.forEach(t),lBr=r(iqe," (mBART model)"),iqe.forEach(t),iBr=i(ze),Uw=n(ze,"LI",{});var dqe=s(Uw);TCe=n(dqe,"STRONG",{});var V8t=s(TCe);dBr=r(V8t,"mt5"),V8t.forEach(t),cBr=r(dqe," \u2014 "),aK=n(dqe,"A",{href:!0});var X8t=s(aK);mBr=r(X8t,"FlaxMT5ForConditionalGeneration"),X8t.forEach(t),fBr=r(dqe," (mT5 model)"),dqe.forEach(t),gBr=i(ze),Jw=n(ze,"LI",{});var cqe=s(Jw);MCe=n(cqe,"STRONG",{});var z8t=s(MCe);hBr=r(z8t,"pegasus"),z8t.forEach(t),uBr=r(cqe," \u2014 "),nK=n(cqe,"A",{href:!0});var W8t=s(nK);pBr=r(W8t,"FlaxPegasusForConditionalGeneration"),W8t.forEach(t),_Br=r(cqe," (Pegasus model)"),cqe.forEach(t),bBr=i(ze),Yw=n(ze,"LI",{});var mqe=s(Yw);ECe=n(mqe,"STRONG",{});var Q8t=s(ECe);vBr=r(Q8t,"t5"),Q8t.forEach(t),FBr=r(mqe," \u2014 "),sK=n(mqe,"A",{href:!0});var H8t=s(sK);TBr=r(H8t,"FlaxT5ForConditionalGeneration"),H8t.forEach(t),MBr=r(mqe," (T5 model)"),mqe.forEach(t),ze.forEach(t),EBr=i(Jl),T(Kw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Gje=i(m),Xc=n(m,"H2",{class:!0});var HGe=s(Xc);Zw=n(HGe,"A",{id:!0,class:!0,href:!0});var U8t=s(Zw);CCe=n(U8t,"SPAN",{});var J8t=s(CCe);T(J9.$$.fragment,J8t),J8t.forEach(t),U8t.forEach(t),CBr=i(HGe),wCe=n(HGe,"SPAN",{});var Y8t=s(wCe);wBr=r(Y8t,"FlaxAutoModelForSequenceClassification"),Y8t.forEach(t),HGe.forEach(t),Oje=i(m),pr=n(m,"DIV",{class:!0});var Yl=s(pr);T(Y9.$$.fragment,Yl),ABr=i(Yl),zc=n(Yl,"P",{});var Wee=s(zc);yBr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lK=n(Wee,"A",{href:!0});var K8t=s(lK);LBr=r(K8t,"from_pretrained()"),K8t.forEach(t),xBr=r(Wee," class method or the "),iK=n(Wee,"A",{href:!0});var Z8t=s(iK);$Br=r(Z8t,"from_config()"),Z8t.forEach(t),kBr=r(Wee,` class
method.`),Wee.forEach(t),SBr=i(Yl),K9=n(Yl,"P",{});var UGe=s(K9);RBr=r(UGe,"This class cannot be instantiated directly using "),ACe=n(UGe,"CODE",{});var e7t=s(ACe);PBr=r(e7t,"__init__()"),e7t.forEach(t),BBr=r(UGe," (throws an error)."),UGe.forEach(t),IBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var dy=s(Wt);T(Z9.$$.fragment,dy),qBr=i(dy),yCe=n(dy,"P",{});var o7t=s(yCe);NBr=r(o7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o7t.forEach(t),jBr=i(dy),Wc=n(dy,"P",{});var Qee=s(Wc);DBr=r(Qee,`Note:
Loading a model from its configuration file does `),LCe=n(Qee,"STRONG",{});var r7t=s(LCe);GBr=r(r7t,"not"),r7t.forEach(t),OBr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(Qee,"A",{href:!0});var t7t=s(dK);VBr=r(t7t,"from_pretrained()"),t7t.forEach(t),XBr=r(Qee," to load the model weights."),Qee.forEach(t),zBr=i(dy),T(e0.$$.fragment,dy),dy.forEach(t),WBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(ex.$$.fragment,Kl),QBr=i(Kl),xCe=n(Kl,"P",{});var a7t=s(xCe);HBr=r(a7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a7t.forEach(t),UBr=i(Kl),vn=n(Kl,"P",{});var cy=s(vn);JBr=r(cy,"The model class to instantiate is selected based on the "),$Ce=n(cy,"CODE",{});var n7t=s($Ce);YBr=r(n7t,"model_type"),n7t.forEach(t),KBr=r(cy,` property of the config object (either
passed as an argument or loaded from `),kCe=n(cy,"CODE",{});var s7t=s(kCe);ZBr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),eIr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=n(cy,"CODE",{});var l7t=s(SCe);oIr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),rIr=r(cy,":"),cy.forEach(t),tIr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);o0=n(qe,"LI",{});var fqe=s(o0);RCe=n(fqe,"STRONG",{});var i7t=s(RCe);aIr=r(i7t,"albert"),i7t.forEach(t),nIr=r(fqe," \u2014 "),cK=n(fqe,"A",{href:!0});var d7t=s(cK);sIr=r(d7t,"FlaxAlbertForSequenceClassification"),d7t.forEach(t),lIr=r(fqe," (ALBERT model)"),fqe.forEach(t),iIr=i(qe),r0=n(qe,"LI",{});var gqe=s(r0);PCe=n(gqe,"STRONG",{});var c7t=s(PCe);dIr=r(c7t,"bart"),c7t.forEach(t),cIr=r(gqe," \u2014 "),mK=n(gqe,"A",{href:!0});var m7t=s(mK);mIr=r(m7t,"FlaxBartForSequenceClassification"),m7t.forEach(t),fIr=r(gqe," (BART model)"),gqe.forEach(t),gIr=i(qe),t0=n(qe,"LI",{});var hqe=s(t0);BCe=n(hqe,"STRONG",{});var f7t=s(BCe);hIr=r(f7t,"bert"),f7t.forEach(t),uIr=r(hqe," \u2014 "),fK=n(hqe,"A",{href:!0});var g7t=s(fK);pIr=r(g7t,"FlaxBertForSequenceClassification"),g7t.forEach(t),_Ir=r(hqe," (BERT model)"),hqe.forEach(t),bIr=i(qe),a0=n(qe,"LI",{});var uqe=s(a0);ICe=n(uqe,"STRONG",{});var h7t=s(ICe);vIr=r(h7t,"big_bird"),h7t.forEach(t),FIr=r(uqe," \u2014 "),gK=n(uqe,"A",{href:!0});var u7t=s(gK);TIr=r(u7t,"FlaxBigBirdForSequenceClassification"),u7t.forEach(t),MIr=r(uqe," (BigBird model)"),uqe.forEach(t),EIr=i(qe),n0=n(qe,"LI",{});var pqe=s(n0);qCe=n(pqe,"STRONG",{});var p7t=s(qCe);CIr=r(p7t,"distilbert"),p7t.forEach(t),wIr=r(pqe," \u2014 "),hK=n(pqe,"A",{href:!0});var _7t=s(hK);AIr=r(_7t,"FlaxDistilBertForSequenceClassification"),_7t.forEach(t),yIr=r(pqe," (DistilBERT model)"),pqe.forEach(t),LIr=i(qe),s0=n(qe,"LI",{});var _qe=s(s0);NCe=n(_qe,"STRONG",{});var b7t=s(NCe);xIr=r(b7t,"electra"),b7t.forEach(t),$Ir=r(_qe," \u2014 "),uK=n(_qe,"A",{href:!0});var v7t=s(uK);kIr=r(v7t,"FlaxElectraForSequenceClassification"),v7t.forEach(t),SIr=r(_qe," (ELECTRA model)"),_qe.forEach(t),RIr=i(qe),l0=n(qe,"LI",{});var bqe=s(l0);jCe=n(bqe,"STRONG",{});var F7t=s(jCe);PIr=r(F7t,"mbart"),F7t.forEach(t),BIr=r(bqe," \u2014 "),pK=n(bqe,"A",{href:!0});var T7t=s(pK);IIr=r(T7t,"FlaxMBartForSequenceClassification"),T7t.forEach(t),qIr=r(bqe," (mBART model)"),bqe.forEach(t),NIr=i(qe),i0=n(qe,"LI",{});var vqe=s(i0);DCe=n(vqe,"STRONG",{});var M7t=s(DCe);jIr=r(M7t,"roberta"),M7t.forEach(t),DIr=r(vqe," \u2014 "),_K=n(vqe,"A",{href:!0});var E7t=s(_K);GIr=r(E7t,"FlaxRobertaForSequenceClassification"),E7t.forEach(t),OIr=r(vqe," (RoBERTa model)"),vqe.forEach(t),VIr=i(qe),d0=n(qe,"LI",{});var Fqe=s(d0);GCe=n(Fqe,"STRONG",{});var C7t=s(GCe);XIr=r(C7t,"roformer"),C7t.forEach(t),zIr=r(Fqe," \u2014 "),bK=n(Fqe,"A",{href:!0});var w7t=s(bK);WIr=r(w7t,"FlaxRoFormerForSequenceClassification"),w7t.forEach(t),QIr=r(Fqe," (RoFormer model)"),Fqe.forEach(t),HIr=i(qe),c0=n(qe,"LI",{});var Tqe=s(c0);OCe=n(Tqe,"STRONG",{});var A7t=s(OCe);UIr=r(A7t,"xlm-roberta"),A7t.forEach(t),JIr=r(Tqe," \u2014 "),vK=n(Tqe,"A",{href:!0});var y7t=s(vK);YIr=r(y7t,"FlaxXLMRobertaForSequenceClassification"),y7t.forEach(t),KIr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),qe.forEach(t),ZIr=i(Kl),T(m0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Vje=i(m),Qc=n(m,"H2",{class:!0});var JGe=s(Qc);f0=n(JGe,"A",{id:!0,class:!0,href:!0});var L7t=s(f0);VCe=n(L7t,"SPAN",{});var x7t=s(VCe);T(ox.$$.fragment,x7t),x7t.forEach(t),L7t.forEach(t),eqr=i(JGe),XCe=n(JGe,"SPAN",{});var $7t=s(XCe);oqr=r($7t,"FlaxAutoModelForQuestionAnswering"),$7t.forEach(t),JGe.forEach(t),Xje=i(m),_r=n(m,"DIV",{class:!0});var Zl=s(_r);T(rx.$$.fragment,Zl),rqr=i(Zl),Hc=n(Zl,"P",{});var Hee=s(Hc);tqr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FK=n(Hee,"A",{href:!0});var k7t=s(FK);aqr=r(k7t,"from_pretrained()"),k7t.forEach(t),nqr=r(Hee," class method or the "),TK=n(Hee,"A",{href:!0});var S7t=s(TK);sqr=r(S7t,"from_config()"),S7t.forEach(t),lqr=r(Hee,` class
method.`),Hee.forEach(t),iqr=i(Zl),tx=n(Zl,"P",{});var YGe=s(tx);dqr=r(YGe,"This class cannot be instantiated directly using "),zCe=n(YGe,"CODE",{});var R7t=s(zCe);cqr=r(R7t,"__init__()"),R7t.forEach(t),mqr=r(YGe," (throws an error)."),YGe.forEach(t),fqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var my=s(Qt);T(ax.$$.fragment,my),gqr=i(my),WCe=n(my,"P",{});var P7t=s(WCe);hqr=r(P7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P7t.forEach(t),uqr=i(my),Uc=n(my,"P",{});var Uee=s(Uc);pqr=r(Uee,`Note:
Loading a model from its configuration file does `),QCe=n(Uee,"STRONG",{});var B7t=s(QCe);_qr=r(B7t,"not"),B7t.forEach(t),bqr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(Uee,"A",{href:!0});var I7t=s(MK);vqr=r(I7t,"from_pretrained()"),I7t.forEach(t),Fqr=r(Uee," to load the model weights."),Uee.forEach(t),Tqr=i(my),T(g0.$$.fragment,my),my.forEach(t),Mqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(nx.$$.fragment,ei),Eqr=i(ei),HCe=n(ei,"P",{});var q7t=s(HCe);Cqr=r(q7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q7t.forEach(t),wqr=i(ei),Fn=n(ei,"P",{});var fy=s(Fn);Aqr=r(fy,"The model class to instantiate is selected based on the "),UCe=n(fy,"CODE",{});var N7t=s(UCe);yqr=r(N7t,"model_type"),N7t.forEach(t),Lqr=r(fy,` property of the config object (either
passed as an argument or loaded from `),JCe=n(fy,"CODE",{});var j7t=s(JCe);xqr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),$qr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(fy,"CODE",{});var D7t=s(YCe);kqr=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),Sqr=r(fy,":"),fy.forEach(t),Rqr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);h0=n(Ne,"LI",{});var Mqe=s(h0);KCe=n(Mqe,"STRONG",{});var G7t=s(KCe);Pqr=r(G7t,"albert"),G7t.forEach(t),Bqr=r(Mqe," \u2014 "),EK=n(Mqe,"A",{href:!0});var O7t=s(EK);Iqr=r(O7t,"FlaxAlbertForQuestionAnswering"),O7t.forEach(t),qqr=r(Mqe," (ALBERT model)"),Mqe.forEach(t),Nqr=i(Ne),u0=n(Ne,"LI",{});var Eqe=s(u0);ZCe=n(Eqe,"STRONG",{});var V7t=s(ZCe);jqr=r(V7t,"bart"),V7t.forEach(t),Dqr=r(Eqe," \u2014 "),CK=n(Eqe,"A",{href:!0});var X7t=s(CK);Gqr=r(X7t,"FlaxBartForQuestionAnswering"),X7t.forEach(t),Oqr=r(Eqe," (BART model)"),Eqe.forEach(t),Vqr=i(Ne),p0=n(Ne,"LI",{});var Cqe=s(p0);e5e=n(Cqe,"STRONG",{});var z7t=s(e5e);Xqr=r(z7t,"bert"),z7t.forEach(t),zqr=r(Cqe," \u2014 "),wK=n(Cqe,"A",{href:!0});var W7t=s(wK);Wqr=r(W7t,"FlaxBertForQuestionAnswering"),W7t.forEach(t),Qqr=r(Cqe," (BERT model)"),Cqe.forEach(t),Hqr=i(Ne),_0=n(Ne,"LI",{});var wqe=s(_0);o5e=n(wqe,"STRONG",{});var Q7t=s(o5e);Uqr=r(Q7t,"big_bird"),Q7t.forEach(t),Jqr=r(wqe," \u2014 "),AK=n(wqe,"A",{href:!0});var H7t=s(AK);Yqr=r(H7t,"FlaxBigBirdForQuestionAnswering"),H7t.forEach(t),Kqr=r(wqe," (BigBird model)"),wqe.forEach(t),Zqr=i(Ne),b0=n(Ne,"LI",{});var Aqe=s(b0);r5e=n(Aqe,"STRONG",{});var U7t=s(r5e);eNr=r(U7t,"distilbert"),U7t.forEach(t),oNr=r(Aqe," \u2014 "),yK=n(Aqe,"A",{href:!0});var J7t=s(yK);rNr=r(J7t,"FlaxDistilBertForQuestionAnswering"),J7t.forEach(t),tNr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),aNr=i(Ne),v0=n(Ne,"LI",{});var yqe=s(v0);t5e=n(yqe,"STRONG",{});var Y7t=s(t5e);nNr=r(Y7t,"electra"),Y7t.forEach(t),sNr=r(yqe," \u2014 "),LK=n(yqe,"A",{href:!0});var K7t=s(LK);lNr=r(K7t,"FlaxElectraForQuestionAnswering"),K7t.forEach(t),iNr=r(yqe," (ELECTRA model)"),yqe.forEach(t),dNr=i(Ne),F0=n(Ne,"LI",{});var Lqe=s(F0);a5e=n(Lqe,"STRONG",{});var Z7t=s(a5e);cNr=r(Z7t,"mbart"),Z7t.forEach(t),mNr=r(Lqe," \u2014 "),xK=n(Lqe,"A",{href:!0});var e9t=s(xK);fNr=r(e9t,"FlaxMBartForQuestionAnswering"),e9t.forEach(t),gNr=r(Lqe," (mBART model)"),Lqe.forEach(t),hNr=i(Ne),T0=n(Ne,"LI",{});var xqe=s(T0);n5e=n(xqe,"STRONG",{});var o9t=s(n5e);uNr=r(o9t,"roberta"),o9t.forEach(t),pNr=r(xqe," \u2014 "),$K=n(xqe,"A",{href:!0});var r9t=s($K);_Nr=r(r9t,"FlaxRobertaForQuestionAnswering"),r9t.forEach(t),bNr=r(xqe," (RoBERTa model)"),xqe.forEach(t),vNr=i(Ne),M0=n(Ne,"LI",{});var $qe=s(M0);s5e=n($qe,"STRONG",{});var t9t=s(s5e);FNr=r(t9t,"roformer"),t9t.forEach(t),TNr=r($qe," \u2014 "),kK=n($qe,"A",{href:!0});var a9t=s(kK);MNr=r(a9t,"FlaxRoFormerForQuestionAnswering"),a9t.forEach(t),ENr=r($qe," (RoFormer model)"),$qe.forEach(t),CNr=i(Ne),E0=n(Ne,"LI",{});var kqe=s(E0);l5e=n(kqe,"STRONG",{});var n9t=s(l5e);wNr=r(n9t,"xlm-roberta"),n9t.forEach(t),ANr=r(kqe," \u2014 "),SK=n(kqe,"A",{href:!0});var s9t=s(SK);yNr=r(s9t,"FlaxXLMRobertaForQuestionAnswering"),s9t.forEach(t),LNr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),Ne.forEach(t),xNr=i(ei),T(C0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),zje=i(m),Jc=n(m,"H2",{class:!0});var KGe=s(Jc);w0=n(KGe,"A",{id:!0,class:!0,href:!0});var l9t=s(w0);i5e=n(l9t,"SPAN",{});var i9t=s(i5e);T(sx.$$.fragment,i9t),i9t.forEach(t),l9t.forEach(t),$Nr=i(KGe),d5e=n(KGe,"SPAN",{});var d9t=s(d5e);kNr=r(d9t,"FlaxAutoModelForTokenClassification"),d9t.forEach(t),KGe.forEach(t),Wje=i(m),br=n(m,"DIV",{class:!0});var oi=s(br);T(lx.$$.fragment,oi),SNr=i(oi),Yc=n(oi,"P",{});var Jee=s(Yc);RNr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RK=n(Jee,"A",{href:!0});var c9t=s(RK);PNr=r(c9t,"from_pretrained()"),c9t.forEach(t),BNr=r(Jee," class method or the "),PK=n(Jee,"A",{href:!0});var m9t=s(PK);INr=r(m9t,"from_config()"),m9t.forEach(t),qNr=r(Jee,` class
method.`),Jee.forEach(t),NNr=i(oi),ix=n(oi,"P",{});var ZGe=s(ix);jNr=r(ZGe,"This class cannot be instantiated directly using "),c5e=n(ZGe,"CODE",{});var f9t=s(c5e);DNr=r(f9t,"__init__()"),f9t.forEach(t),GNr=r(ZGe," (throws an error)."),ZGe.forEach(t),ONr=i(oi),Ht=n(oi,"DIV",{class:!0});var gy=s(Ht);T(dx.$$.fragment,gy),VNr=i(gy),m5e=n(gy,"P",{});var g9t=s(m5e);XNr=r(g9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g9t.forEach(t),zNr=i(gy),Kc=n(gy,"P",{});var Yee=s(Kc);WNr=r(Yee,`Note:
Loading a model from its configuration file does `),f5e=n(Yee,"STRONG",{});var h9t=s(f5e);QNr=r(h9t,"not"),h9t.forEach(t),HNr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(Yee,"A",{href:!0});var u9t=s(BK);UNr=r(u9t,"from_pretrained()"),u9t.forEach(t),JNr=r(Yee," to load the model weights."),Yee.forEach(t),YNr=i(gy),T(A0.$$.fragment,gy),gy.forEach(t),KNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(cx.$$.fragment,ri),ZNr=i(ri),g5e=n(ri,"P",{});var p9t=s(g5e);ejr=r(p9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p9t.forEach(t),ojr=i(ri),Tn=n(ri,"P",{});var hy=s(Tn);rjr=r(hy,"The model class to instantiate is selected based on the "),h5e=n(hy,"CODE",{});var _9t=s(h5e);tjr=r(_9t,"model_type"),_9t.forEach(t),ajr=r(hy,` property of the config object (either
passed as an argument or loaded from `),u5e=n(hy,"CODE",{});var b9t=s(u5e);njr=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),sjr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(hy,"CODE",{});var v9t=s(p5e);ljr=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),ijr=r(hy,":"),hy.forEach(t),djr=i(ri),De=n(ri,"UL",{});var Fo=s(De);y0=n(Fo,"LI",{});var Sqe=s(y0);_5e=n(Sqe,"STRONG",{});var F9t=s(_5e);cjr=r(F9t,"albert"),F9t.forEach(t),mjr=r(Sqe," \u2014 "),IK=n(Sqe,"A",{href:!0});var T9t=s(IK);fjr=r(T9t,"FlaxAlbertForTokenClassification"),T9t.forEach(t),gjr=r(Sqe," (ALBERT model)"),Sqe.forEach(t),hjr=i(Fo),L0=n(Fo,"LI",{});var Rqe=s(L0);b5e=n(Rqe,"STRONG",{});var M9t=s(b5e);ujr=r(M9t,"bert"),M9t.forEach(t),pjr=r(Rqe," \u2014 "),qK=n(Rqe,"A",{href:!0});var E9t=s(qK);_jr=r(E9t,"FlaxBertForTokenClassification"),E9t.forEach(t),bjr=r(Rqe," (BERT model)"),Rqe.forEach(t),vjr=i(Fo),x0=n(Fo,"LI",{});var Pqe=s(x0);v5e=n(Pqe,"STRONG",{});var C9t=s(v5e);Fjr=r(C9t,"big_bird"),C9t.forEach(t),Tjr=r(Pqe," \u2014 "),NK=n(Pqe,"A",{href:!0});var w9t=s(NK);Mjr=r(w9t,"FlaxBigBirdForTokenClassification"),w9t.forEach(t),Ejr=r(Pqe," (BigBird model)"),Pqe.forEach(t),Cjr=i(Fo),$0=n(Fo,"LI",{});var Bqe=s($0);F5e=n(Bqe,"STRONG",{});var A9t=s(F5e);wjr=r(A9t,"distilbert"),A9t.forEach(t),Ajr=r(Bqe," \u2014 "),jK=n(Bqe,"A",{href:!0});var y9t=s(jK);yjr=r(y9t,"FlaxDistilBertForTokenClassification"),y9t.forEach(t),Ljr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),xjr=i(Fo),k0=n(Fo,"LI",{});var Iqe=s(k0);T5e=n(Iqe,"STRONG",{});var L9t=s(T5e);$jr=r(L9t,"electra"),L9t.forEach(t),kjr=r(Iqe," \u2014 "),DK=n(Iqe,"A",{href:!0});var x9t=s(DK);Sjr=r(x9t,"FlaxElectraForTokenClassification"),x9t.forEach(t),Rjr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),Pjr=i(Fo),S0=n(Fo,"LI",{});var qqe=s(S0);M5e=n(qqe,"STRONG",{});var $9t=s(M5e);Bjr=r($9t,"roberta"),$9t.forEach(t),Ijr=r(qqe," \u2014 "),GK=n(qqe,"A",{href:!0});var k9t=s(GK);qjr=r(k9t,"FlaxRobertaForTokenClassification"),k9t.forEach(t),Njr=r(qqe," (RoBERTa model)"),qqe.forEach(t),jjr=i(Fo),R0=n(Fo,"LI",{});var Nqe=s(R0);E5e=n(Nqe,"STRONG",{});var S9t=s(E5e);Djr=r(S9t,"roformer"),S9t.forEach(t),Gjr=r(Nqe," \u2014 "),OK=n(Nqe,"A",{href:!0});var R9t=s(OK);Ojr=r(R9t,"FlaxRoFormerForTokenClassification"),R9t.forEach(t),Vjr=r(Nqe," (RoFormer model)"),Nqe.forEach(t),Xjr=i(Fo),P0=n(Fo,"LI",{});var jqe=s(P0);C5e=n(jqe,"STRONG",{});var P9t=s(C5e);zjr=r(P9t,"xlm-roberta"),P9t.forEach(t),Wjr=r(jqe," \u2014 "),VK=n(jqe,"A",{href:!0});var B9t=s(VK);Qjr=r(B9t,"FlaxXLMRobertaForTokenClassification"),B9t.forEach(t),Hjr=r(jqe," (XLM-RoBERTa model)"),jqe.forEach(t),Fo.forEach(t),Ujr=i(ri),T(B0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Qje=i(m),Zc=n(m,"H2",{class:!0});var eOe=s(Zc);I0=n(eOe,"A",{id:!0,class:!0,href:!0});var I9t=s(I0);w5e=n(I9t,"SPAN",{});var q9t=s(w5e);T(mx.$$.fragment,q9t),q9t.forEach(t),I9t.forEach(t),Jjr=i(eOe),A5e=n(eOe,"SPAN",{});var N9t=s(A5e);Yjr=r(N9t,"FlaxAutoModelForMultipleChoice"),N9t.forEach(t),eOe.forEach(t),Hje=i(m),vr=n(m,"DIV",{class:!0});var ti=s(vr);T(fx.$$.fragment,ti),Kjr=i(ti),em=n(ti,"P",{});var Kee=s(em);Zjr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=n(Kee,"A",{href:!0});var j9t=s(XK);eDr=r(j9t,"from_pretrained()"),j9t.forEach(t),oDr=r(Kee," class method or the "),zK=n(Kee,"A",{href:!0});var D9t=s(zK);rDr=r(D9t,"from_config()"),D9t.forEach(t),tDr=r(Kee,` class
method.`),Kee.forEach(t),aDr=i(ti),gx=n(ti,"P",{});var oOe=s(gx);nDr=r(oOe,"This class cannot be instantiated directly using "),y5e=n(oOe,"CODE",{});var G9t=s(y5e);sDr=r(G9t,"__init__()"),G9t.forEach(t),lDr=r(oOe," (throws an error)."),oOe.forEach(t),iDr=i(ti),Ut=n(ti,"DIV",{class:!0});var uy=s(Ut);T(hx.$$.fragment,uy),dDr=i(uy),L5e=n(uy,"P",{});var O9t=s(L5e);cDr=r(O9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O9t.forEach(t),mDr=i(uy),om=n(uy,"P",{});var Zee=s(om);fDr=r(Zee,`Note:
Loading a model from its configuration file does `),x5e=n(Zee,"STRONG",{});var V9t=s(x5e);gDr=r(V9t,"not"),V9t.forEach(t),hDr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Zee,"A",{href:!0});var X9t=s(WK);uDr=r(X9t,"from_pretrained()"),X9t.forEach(t),pDr=r(Zee," to load the model weights."),Zee.forEach(t),_Dr=i(uy),T(q0.$$.fragment,uy),uy.forEach(t),bDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(ux.$$.fragment,ai),vDr=i(ai),$5e=n(ai,"P",{});var z9t=s($5e);FDr=r(z9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z9t.forEach(t),TDr=i(ai),Mn=n(ai,"P",{});var py=s(Mn);MDr=r(py,"The model class to instantiate is selected based on the "),k5e=n(py,"CODE",{});var W9t=s(k5e);EDr=r(W9t,"model_type"),W9t.forEach(t),CDr=r(py,` property of the config object (either
passed as an argument or loaded from `),S5e=n(py,"CODE",{});var Q9t=s(S5e);wDr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),ADr=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(py,"CODE",{});var H9t=s(R5e);yDr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),LDr=r(py,":"),py.forEach(t),xDr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);N0=n(To,"LI",{});var Dqe=s(N0);P5e=n(Dqe,"STRONG",{});var U9t=s(P5e);$Dr=r(U9t,"albert"),U9t.forEach(t),kDr=r(Dqe," \u2014 "),QK=n(Dqe,"A",{href:!0});var J9t=s(QK);SDr=r(J9t,"FlaxAlbertForMultipleChoice"),J9t.forEach(t),RDr=r(Dqe," (ALBERT model)"),Dqe.forEach(t),PDr=i(To),j0=n(To,"LI",{});var Gqe=s(j0);B5e=n(Gqe,"STRONG",{});var Y9t=s(B5e);BDr=r(Y9t,"bert"),Y9t.forEach(t),IDr=r(Gqe," \u2014 "),HK=n(Gqe,"A",{href:!0});var K9t=s(HK);qDr=r(K9t,"FlaxBertForMultipleChoice"),K9t.forEach(t),NDr=r(Gqe," (BERT model)"),Gqe.forEach(t),jDr=i(To),D0=n(To,"LI",{});var Oqe=s(D0);I5e=n(Oqe,"STRONG",{});var Z9t=s(I5e);DDr=r(Z9t,"big_bird"),Z9t.forEach(t),GDr=r(Oqe," \u2014 "),UK=n(Oqe,"A",{href:!0});var ext=s(UK);ODr=r(ext,"FlaxBigBirdForMultipleChoice"),ext.forEach(t),VDr=r(Oqe," (BigBird model)"),Oqe.forEach(t),XDr=i(To),G0=n(To,"LI",{});var Vqe=s(G0);q5e=n(Vqe,"STRONG",{});var oxt=s(q5e);zDr=r(oxt,"distilbert"),oxt.forEach(t),WDr=r(Vqe," \u2014 "),JK=n(Vqe,"A",{href:!0});var rxt=s(JK);QDr=r(rxt,"FlaxDistilBertForMultipleChoice"),rxt.forEach(t),HDr=r(Vqe," (DistilBERT model)"),Vqe.forEach(t),UDr=i(To),O0=n(To,"LI",{});var Xqe=s(O0);N5e=n(Xqe,"STRONG",{});var txt=s(N5e);JDr=r(txt,"electra"),txt.forEach(t),YDr=r(Xqe," \u2014 "),YK=n(Xqe,"A",{href:!0});var axt=s(YK);KDr=r(axt,"FlaxElectraForMultipleChoice"),axt.forEach(t),ZDr=r(Xqe," (ELECTRA model)"),Xqe.forEach(t),eGr=i(To),V0=n(To,"LI",{});var zqe=s(V0);j5e=n(zqe,"STRONG",{});var nxt=s(j5e);oGr=r(nxt,"roberta"),nxt.forEach(t),rGr=r(zqe," \u2014 "),KK=n(zqe,"A",{href:!0});var sxt=s(KK);tGr=r(sxt,"FlaxRobertaForMultipleChoice"),sxt.forEach(t),aGr=r(zqe," (RoBERTa model)"),zqe.forEach(t),nGr=i(To),X0=n(To,"LI",{});var Wqe=s(X0);D5e=n(Wqe,"STRONG",{});var lxt=s(D5e);sGr=r(lxt,"roformer"),lxt.forEach(t),lGr=r(Wqe," \u2014 "),ZK=n(Wqe,"A",{href:!0});var ixt=s(ZK);iGr=r(ixt,"FlaxRoFormerForMultipleChoice"),ixt.forEach(t),dGr=r(Wqe," (RoFormer model)"),Wqe.forEach(t),cGr=i(To),z0=n(To,"LI",{});var Qqe=s(z0);G5e=n(Qqe,"STRONG",{});var dxt=s(G5e);mGr=r(dxt,"xlm-roberta"),dxt.forEach(t),fGr=r(Qqe," \u2014 "),eZ=n(Qqe,"A",{href:!0});var cxt=s(eZ);gGr=r(cxt,"FlaxXLMRobertaForMultipleChoice"),cxt.forEach(t),hGr=r(Qqe," (XLM-RoBERTa model)"),Qqe.forEach(t),To.forEach(t),uGr=i(ai),T(W0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Uje=i(m),rm=n(m,"H2",{class:!0});var rOe=s(rm);Q0=n(rOe,"A",{id:!0,class:!0,href:!0});var mxt=s(Q0);O5e=n(mxt,"SPAN",{});var fxt=s(O5e);T(px.$$.fragment,fxt),fxt.forEach(t),mxt.forEach(t),pGr=i(rOe),V5e=n(rOe,"SPAN",{});var gxt=s(V5e);_Gr=r(gxt,"FlaxAutoModelForNextSentencePrediction"),gxt.forEach(t),rOe.forEach(t),Jje=i(m),Fr=n(m,"DIV",{class:!0});var ni=s(Fr);T(_x.$$.fragment,ni),bGr=i(ni),tm=n(ni,"P",{});var eoe=s(tm);vGr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oZ=n(eoe,"A",{href:!0});var hxt=s(oZ);FGr=r(hxt,"from_pretrained()"),hxt.forEach(t),TGr=r(eoe," class method or the "),rZ=n(eoe,"A",{href:!0});var uxt=s(rZ);MGr=r(uxt,"from_config()"),uxt.forEach(t),EGr=r(eoe,` class
method.`),eoe.forEach(t),CGr=i(ni),bx=n(ni,"P",{});var tOe=s(bx);wGr=r(tOe,"This class cannot be instantiated directly using "),X5e=n(tOe,"CODE",{});var pxt=s(X5e);AGr=r(pxt,"__init__()"),pxt.forEach(t),yGr=r(tOe," (throws an error)."),tOe.forEach(t),LGr=i(ni),Jt=n(ni,"DIV",{class:!0});var _y=s(Jt);T(vx.$$.fragment,_y),xGr=i(_y),z5e=n(_y,"P",{});var _xt=s(z5e);$Gr=r(_xt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_xt.forEach(t),kGr=i(_y),am=n(_y,"P",{});var ooe=s(am);SGr=r(ooe,`Note:
Loading a model from its configuration file does `),W5e=n(ooe,"STRONG",{});var bxt=s(W5e);RGr=r(bxt,"not"),bxt.forEach(t),PGr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(ooe,"A",{href:!0});var vxt=s(tZ);BGr=r(vxt,"from_pretrained()"),vxt.forEach(t),IGr=r(ooe," to load the model weights."),ooe.forEach(t),qGr=i(_y),T(H0.$$.fragment,_y),_y.forEach(t),NGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Fx.$$.fragment,si),jGr=i(si),Q5e=n(si,"P",{});var Fxt=s(Q5e);DGr=r(Fxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fxt.forEach(t),GGr=i(si),En=n(si,"P",{});var by=s(En);OGr=r(by,"The model class to instantiate is selected based on the "),H5e=n(by,"CODE",{});var Txt=s(H5e);VGr=r(Txt,"model_type"),Txt.forEach(t),XGr=r(by,` property of the config object (either
passed as an argument or loaded from `),U5e=n(by,"CODE",{});var Mxt=s(U5e);zGr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),WGr=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(by,"CODE",{});var Ext=s(J5e);QGr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),HGr=r(by,":"),by.forEach(t),UGr=i(si),Y5e=n(si,"UL",{});var Cxt=s(Y5e);U0=n(Cxt,"LI",{});var Hqe=s(U0);K5e=n(Hqe,"STRONG",{});var wxt=s(K5e);JGr=r(wxt,"bert"),wxt.forEach(t),YGr=r(Hqe," \u2014 "),aZ=n(Hqe,"A",{href:!0});var Axt=s(aZ);KGr=r(Axt,"FlaxBertForNextSentencePrediction"),Axt.forEach(t),ZGr=r(Hqe," (BERT model)"),Hqe.forEach(t),Cxt.forEach(t),eOr=i(si),T(J0.$$.fragment,si),si.forEach(t),ni.forEach(t),Yje=i(m),nm=n(m,"H2",{class:!0});var aOe=s(nm);Y0=n(aOe,"A",{id:!0,class:!0,href:!0});var yxt=s(Y0);Z5e=n(yxt,"SPAN",{});var Lxt=s(Z5e);T(Tx.$$.fragment,Lxt),Lxt.forEach(t),yxt.forEach(t),oOr=i(aOe),e3e=n(aOe,"SPAN",{});var xxt=s(e3e);rOr=r(xxt,"FlaxAutoModelForImageClassification"),xxt.forEach(t),aOe.forEach(t),Kje=i(m),Tr=n(m,"DIV",{class:!0});var li=s(Tr);T(Mx.$$.fragment,li),tOr=i(li),sm=n(li,"P",{});var roe=s(sm);aOr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nZ=n(roe,"A",{href:!0});var $xt=s(nZ);nOr=r($xt,"from_pretrained()"),$xt.forEach(t),sOr=r(roe," class method or the "),sZ=n(roe,"A",{href:!0});var kxt=s(sZ);lOr=r(kxt,"from_config()"),kxt.forEach(t),iOr=r(roe,` class
method.`),roe.forEach(t),dOr=i(li),Ex=n(li,"P",{});var nOe=s(Ex);cOr=r(nOe,"This class cannot be instantiated directly using "),o3e=n(nOe,"CODE",{});var Sxt=s(o3e);mOr=r(Sxt,"__init__()"),Sxt.forEach(t),fOr=r(nOe," (throws an error)."),nOe.forEach(t),gOr=i(li),Yt=n(li,"DIV",{class:!0});var vy=s(Yt);T(Cx.$$.fragment,vy),hOr=i(vy),r3e=n(vy,"P",{});var Rxt=s(r3e);uOr=r(Rxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rxt.forEach(t),pOr=i(vy),lm=n(vy,"P",{});var toe=s(lm);_Or=r(toe,`Note:
Loading a model from its configuration file does `),t3e=n(toe,"STRONG",{});var Pxt=s(t3e);bOr=r(Pxt,"not"),Pxt.forEach(t),vOr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(toe,"A",{href:!0});var Bxt=s(lZ);FOr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),TOr=r(toe," to load the model weights."),toe.forEach(t),MOr=i(vy),T(K0.$$.fragment,vy),vy.forEach(t),EOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(wx.$$.fragment,ii),COr=i(ii),a3e=n(ii,"P",{});var Ixt=s(a3e);wOr=r(Ixt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ixt.forEach(t),AOr=i(ii),Cn=n(ii,"P",{});var Fy=s(Cn);yOr=r(Fy,"The model class to instantiate is selected based on the "),n3e=n(Fy,"CODE",{});var qxt=s(n3e);LOr=r(qxt,"model_type"),qxt.forEach(t),xOr=r(Fy,` property of the config object (either
passed as an argument or loaded from `),s3e=n(Fy,"CODE",{});var Nxt=s(s3e);$Or=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),kOr=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(Fy,"CODE",{});var jxt=s(l3e);SOr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),ROr=r(Fy,":"),Fy.forEach(t),POr=i(ii),Ax=n(ii,"UL",{});var sOe=s(Ax);Z0=n(sOe,"LI",{});var Uqe=s(Z0);i3e=n(Uqe,"STRONG",{});var Dxt=s(i3e);BOr=r(Dxt,"beit"),Dxt.forEach(t),IOr=r(Uqe," \u2014 "),iZ=n(Uqe,"A",{href:!0});var Gxt=s(iZ);qOr=r(Gxt,"FlaxBeitForImageClassification"),Gxt.forEach(t),NOr=r(Uqe," (BEiT model)"),Uqe.forEach(t),jOr=i(sOe),eA=n(sOe,"LI",{});var Jqe=s(eA);d3e=n(Jqe,"STRONG",{});var Oxt=s(d3e);DOr=r(Oxt,"vit"),Oxt.forEach(t),GOr=r(Jqe," \u2014 "),dZ=n(Jqe,"A",{href:!0});var Vxt=s(dZ);OOr=r(Vxt,"FlaxViTForImageClassification"),Vxt.forEach(t),VOr=r(Jqe," (ViT model)"),Jqe.forEach(t),sOe.forEach(t),XOr=i(ii),T(oA.$$.fragment,ii),ii.forEach(t),li.forEach(t),Zje=i(m),im=n(m,"H2",{class:!0});var lOe=s(im);rA=n(lOe,"A",{id:!0,class:!0,href:!0});var Xxt=s(rA);c3e=n(Xxt,"SPAN",{});var zxt=s(c3e);T(yx.$$.fragment,zxt),zxt.forEach(t),Xxt.forEach(t),zOr=i(lOe),m3e=n(lOe,"SPAN",{});var Wxt=s(m3e);WOr=r(Wxt,"FlaxAutoModelForVision2Seq"),Wxt.forEach(t),lOe.forEach(t),eDe=i(m),Mr=n(m,"DIV",{class:!0});var di=s(Mr);T(Lx.$$.fragment,di),QOr=i(di),dm=n(di,"P",{});var aoe=s(dm);HOr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cZ=n(aoe,"A",{href:!0});var Qxt=s(cZ);UOr=r(Qxt,"from_pretrained()"),Qxt.forEach(t),JOr=r(aoe," class method or the "),mZ=n(aoe,"A",{href:!0});var Hxt=s(mZ);YOr=r(Hxt,"from_config()"),Hxt.forEach(t),KOr=r(aoe,` class
method.`),aoe.forEach(t),ZOr=i(di),xx=n(di,"P",{});var iOe=s(xx);eVr=r(iOe,"This class cannot be instantiated directly using "),f3e=n(iOe,"CODE",{});var Uxt=s(f3e);oVr=r(Uxt,"__init__()"),Uxt.forEach(t),rVr=r(iOe," (throws an error)."),iOe.forEach(t),tVr=i(di),Kt=n(di,"DIV",{class:!0});var Ty=s(Kt);T($x.$$.fragment,Ty),aVr=i(Ty),g3e=n(Ty,"P",{});var Jxt=s(g3e);nVr=r(Jxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jxt.forEach(t),sVr=i(Ty),cm=n(Ty,"P",{});var noe=s(cm);lVr=r(noe,`Note:
Loading a model from its configuration file does `),h3e=n(noe,"STRONG",{});var Yxt=s(h3e);iVr=r(Yxt,"not"),Yxt.forEach(t),dVr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(noe,"A",{href:!0});var Kxt=s(fZ);cVr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),mVr=r(noe," to load the model weights."),noe.forEach(t),fVr=i(Ty),T(tA.$$.fragment,Ty),Ty.forEach(t),gVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(kx.$$.fragment,ci),hVr=i(ci),u3e=n(ci,"P",{});var Zxt=s(u3e);uVr=r(Zxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zxt.forEach(t),pVr=i(ci),wn=n(ci,"P",{});var My=s(wn);_Vr=r(My,"The model class to instantiate is selected based on the "),p3e=n(My,"CODE",{});var e$t=s(p3e);bVr=r(e$t,"model_type"),e$t.forEach(t),vVr=r(My,` property of the config object (either
passed as an argument or loaded from `),_3e=n(My,"CODE",{});var o$t=s(_3e);FVr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),TVr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=n(My,"CODE",{});var r$t=s(b3e);MVr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),EVr=r(My,":"),My.forEach(t),CVr=i(ci),v3e=n(ci,"UL",{});var t$t=s(v3e);aA=n(t$t,"LI",{});var Yqe=s(aA);F3e=n(Yqe,"STRONG",{});var a$t=s(F3e);wVr=r(a$t,"vision-encoder-decoder"),a$t.forEach(t),AVr=r(Yqe," \u2014 "),gZ=n(Yqe,"A",{href:!0});var n$t=s(gZ);yVr=r(n$t,"FlaxVisionEncoderDecoderModel"),n$t.forEach(t),LVr=r(Yqe," (Vision Encoder decoder model)"),Yqe.forEach(t),t$t.forEach(t),xVr=i(ci),T(nA.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dSt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(bm,"id","extending-the-auto-classes"),c(bm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bm,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Fm,"id","transformers.AutoConfig"),c(Fm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fm,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(Y$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(K$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(vk,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c($k,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(Pk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ok,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Vk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(Hk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(oS,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(wS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(xS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c($S,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(US,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(ZS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(eR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(oR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(aR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(sR,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(mR,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(gR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(hR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(pR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(_R,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(bR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(MR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(AR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(yR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(xR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(PR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(NR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(XR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(zR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(HR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(rP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(tP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(lP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(iP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(dP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(cP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(mP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(fP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(gP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(hP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(uP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(pP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(bP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(vP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(TP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(MP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(wP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(AP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(yP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(xP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c($P,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(kP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(SP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(RP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(PP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(IP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(NP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(DP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(VP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(UP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(KP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(eB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(aB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(hB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(TB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c($B,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(PB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(IB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(NB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(jB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(VB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(XB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(zB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(WB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(QB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(HB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(JB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(YB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(eI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(oI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(fI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(gI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(hI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(uI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(pI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(_I,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(FI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(TI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(MI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(wI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(AI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModel"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(xI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($I,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(RI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(PI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(BI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(II,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(qI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(NI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(jI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(DI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(GI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(OI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(VI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(XI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(zI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(WI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(QI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(HI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(UI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(JI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(YI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(KI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(ZI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(eq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(oq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(rq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(tq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(aq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(nq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(sq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(lq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(iq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(dq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(cq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(mq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(fq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(gq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(hq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(uq,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(pq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(_q,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(vq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Mq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Eq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(wq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(yq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(Lq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(xq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c($q,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(kq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(Bq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(qq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(jq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(zq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(eN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(rN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tN,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(aN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(nN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(sN,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(lN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(iN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(dN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(cN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(mN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(fN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(gN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(hN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(uN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(pN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(_N,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(bN,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(vN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(FN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(TN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(MN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(EN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(CN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(wN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(AN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t_,"id","transformers.AutoModelForPreTraining"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(yN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($N,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(RN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(PN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(IN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(NN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(DN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(GN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ON,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(VN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(XN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(WN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(QN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(HN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(UN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(JN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(YN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(KN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(ZN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ej,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(rj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(aj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ij,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(dj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(cj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(mj,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(fj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(gj,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(hj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(pj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_j,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForCausalLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(bj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Mj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Cj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(wj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Aj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(yj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(xj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($j,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(kj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Bj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(qj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Nj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Dj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(Gj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Vj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Xj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(zj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Wj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Qj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Hj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Uj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Jj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Yj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ib,"id","transformers.AutoModelForMaskedLM"),c(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ib,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(aD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(iD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(cD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(mD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_D,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(FD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(TD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ED,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(AD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(yD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($D,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(BD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ID,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ND,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForSeq2SeqLM"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(GD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HD,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForSequenceClassification"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(sG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(EG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($G,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(RG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(PG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(IG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(qG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(NG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(jG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(DG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(GG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForMultipleChoice"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(rO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(mO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(fO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_O,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(FO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(TO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(MO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(EO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(CO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(AO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(yO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(LO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($O,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(SO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(RO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForNextSentencePrediction"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(NO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForTokenClassification"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(OO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(QO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(mV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(TV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(MV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(EV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForQuestionAnswering"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(wV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($V,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(SV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(RV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(BV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(NV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(DV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(GV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(OV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(VV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(XV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(HV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(fX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForTableQuestionAnswering"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForImageClassification"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(bX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yX,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($X,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForVision2Seq"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.AutoModelForAudioClassification"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(OX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(WX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(JX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(YX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(KX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(ZX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForAudioFrameClassification"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(az,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(nz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(sz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(lz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.AutoModelForCTC"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(fz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(gz,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(hz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(pz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(_z,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.AutoModelForAudioXVector"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($z,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Sz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MM,"id","transformers.AutoModelForMaskedImageModeling"),c(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MM,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Nz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.AutoModelForObjectDetection"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Vz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.AutoModelForImageSegmentation"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForSemanticSegmentation"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Kz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Zz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(eW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.AutoModelForInstanceSegmentation"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(oW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModel"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(dW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(cW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(mW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(fW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(gW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(hW,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(uW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(pW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(_W,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(bW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(vW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(FW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(TW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(MW,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(EW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(CW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(wW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(AW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(xW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c($W,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(kW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(SW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(RW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(PW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(BW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(IW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(NW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(jW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(DW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(OW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(VW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(XW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(zW,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(WW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(QW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(HW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(UW,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(JW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(YW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(KW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(ZW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForPreTraining"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(oQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(nQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(lQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(mQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(gQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(pQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(_Q,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(vQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(TQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(EQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(CQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForCausalLM"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(yQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(kQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(RQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(qQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForImageClassification"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.TFAutoModelForMaskedLM"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(UQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(eH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(oH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(rH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(tH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(aH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(sH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(iH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(cH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(mH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(fH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(gH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(uH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(pH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_H,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(EH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(CH,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(wH,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(AH,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(yH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(LH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(xH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c($H,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForSequenceClassification"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.TFAutoModelForMultipleChoice"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(cU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(mU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(fU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(gU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(hU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(uU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(pU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(_U,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(bU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(vU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(FU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(TU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(MU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(EU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(CU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(wU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c($U,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(kU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.TFAutoModelForTokenClassification"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(BU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(OU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(VU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(XU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(zU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(JU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(YU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(KU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForQuestionAnswering"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(iJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(dJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(cJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(mJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(fJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(gJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(uJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(pJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(_J,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(bJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(vJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(FJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(TJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(EJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(CJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(wJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(AJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.TFAutoModelForVision2Seq"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(kJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y3,"id","transformers.FlaxAutoModel"),c(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y3,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(jJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(DJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(GJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(OJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(VJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(XJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(zJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(WJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(QJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(HJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(UJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(YJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(KJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(ZJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(eY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(oY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(rY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(tY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(aY,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(nY,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(sY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(lY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(iY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForCausalLM"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(gY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(hY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(uY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(pY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(_Y,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(bY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(vY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(FY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.FlaxAutoModelForPreTraining"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(wY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(yY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(LY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(xY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($Y,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(PY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(BY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForMaskedLM"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(DY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(OY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(VY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(XY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(zY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(eK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(oK,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(rK,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(sK,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(bK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(FK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(wK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(AK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(LK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(xK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c($K,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(SK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.FlaxAutoModelForTokenClassification"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(qK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(NK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(jK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(DK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(GK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(OK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(VK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(HK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(UK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(JK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(YK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(KK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ZK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(eZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rm,"class","relative group"),c(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.FlaxAutoModelForImageClassification"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.FlaxAutoModelForImageClassification"),c(nm,"class","relative group"),c(nZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(dZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rA,"id","transformers.FlaxAutoModelForVision2Seq"),c(rA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(im,"class","relative group"),c(cZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,mi),b(m,hm,_),b(m,rt,_),e(rt,fi),e(rt,gi),e(gi,Ey),e(rt,um),b(m,je,_),b(m,We,_),e(We,hi),e(We,yn),e(yn,Cy),e(We,Ln),e(We,xn),e(xn,wy),e(We,ui),e(We,$n),e($n,Ay),e(We,pi),b(m,pm,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,z$),e(Ae,_i),e(_i,W$),e(Ae,Q$),b(m,Eo,_),b(m,wa,_),e(wa,H$),e(wa,_m),e(_m,U$),e(wa,dOe),b(m,Kqe,_),b(m,bi,_),e(bi,bm),e(bm,soe),M(yy,soe,null),e(bi,cOe),e(bi,loe),e(loe,mOe),b(m,Zqe,_),b(m,kn,_),e(kn,fOe),e(kn,ioe),e(ioe,gOe),e(kn,hOe),e(kn,doe),e(doe,uOe),e(kn,pOe),b(m,eNe,_),M(Ly,m,_),b(m,oNe,_),b(m,J$,_),e(J$,_Oe),b(m,rNe,_),M(vm,m,_),b(m,tNe,_),b(m,vi,_),e(vi,Fm),e(Fm,coe),M(xy,coe,null),e(vi,bOe),e(vi,moe),e(moe,vOe),b(m,aNe,_),b(m,Co,_),M($y,Co,null),e(Co,FOe),e(Co,ky),e(ky,TOe),e(ky,Y$),e(Y$,MOe),e(ky,EOe),e(Co,COe),e(Co,Sy),e(Sy,wOe),e(Sy,foe),e(foe,AOe),e(Sy,yOe),e(Co,LOe),e(Co,Er),M(Ry,Er,null),e(Er,xOe),e(Er,goe),e(goe,$Oe),e(Er,kOe),e(Er,Fi),e(Fi,SOe),e(Fi,hoe),e(hoe,ROe),e(Fi,POe),e(Fi,uoe),e(uoe,BOe),e(Fi,IOe),e(Er,qOe),e(Er,A),e(A,Tm),e(Tm,poe),e(poe,NOe),e(Tm,jOe),e(Tm,K$),e(K$,DOe),e(Tm,GOe),e(A,OOe),e(A,Mm),e(Mm,_oe),e(_oe,VOe),e(Mm,XOe),e(Mm,Z$),e(Z$,zOe),e(Mm,WOe),e(A,QOe),e(A,Em),e(Em,boe),e(boe,HOe),e(Em,UOe),e(Em,ek),e(ek,JOe),e(Em,YOe),e(A,KOe),e(A,Cm),e(Cm,voe),e(voe,ZOe),e(Cm,eVe),e(Cm,ok),e(ok,oVe),e(Cm,rVe),e(A,tVe),e(A,wm),e(wm,Foe),e(Foe,aVe),e(wm,nVe),e(wm,rk),e(rk,sVe),e(wm,lVe),e(A,iVe),e(A,Am),e(Am,Toe),e(Toe,dVe),e(Am,cVe),e(Am,tk),e(tk,mVe),e(Am,fVe),e(A,gVe),e(A,ym),e(ym,Moe),e(Moe,hVe),e(ym,uVe),e(ym,ak),e(ak,pVe),e(ym,_Ve),e(A,bVe),e(A,Lm),e(Lm,Eoe),e(Eoe,vVe),e(Lm,FVe),e(Lm,nk),e(nk,TVe),e(Lm,MVe),e(A,EVe),e(A,xm),e(xm,Coe),e(Coe,CVe),e(xm,wVe),e(xm,sk),e(sk,AVe),e(xm,yVe),e(A,LVe),e(A,$m),e($m,woe),e(woe,xVe),e($m,$Ve),e($m,lk),e(lk,kVe),e($m,SVe),e(A,RVe),e(A,km),e(km,Aoe),e(Aoe,PVe),e(km,BVe),e(km,ik),e(ik,IVe),e(km,qVe),e(A,NVe),e(A,Sm),e(Sm,yoe),e(yoe,jVe),e(Sm,DVe),e(Sm,dk),e(dk,GVe),e(Sm,OVe),e(A,VVe),e(A,Rm),e(Rm,Loe),e(Loe,XVe),e(Rm,zVe),e(Rm,ck),e(ck,WVe),e(Rm,QVe),e(A,HVe),e(A,Pm),e(Pm,xoe),e(xoe,UVe),e(Pm,JVe),e(Pm,mk),e(mk,YVe),e(Pm,KVe),e(A,ZVe),e(A,Bm),e(Bm,$oe),e($oe,eXe),e(Bm,oXe),e(Bm,fk),e(fk,rXe),e(Bm,tXe),e(A,aXe),e(A,Im),e(Im,koe),e(koe,nXe),e(Im,sXe),e(Im,gk),e(gk,lXe),e(Im,iXe),e(A,dXe),e(A,qm),e(qm,Soe),e(Soe,cXe),e(qm,mXe),e(qm,hk),e(hk,fXe),e(qm,gXe),e(A,hXe),e(A,Nm),e(Nm,Roe),e(Roe,uXe),e(Nm,pXe),e(Nm,uk),e(uk,_Xe),e(Nm,bXe),e(A,vXe),e(A,jm),e(jm,Poe),e(Poe,FXe),e(jm,TXe),e(jm,pk),e(pk,MXe),e(jm,EXe),e(A,CXe),e(A,Dm),e(Dm,Boe),e(Boe,wXe),e(Dm,AXe),e(Dm,_k),e(_k,yXe),e(Dm,LXe),e(A,xXe),e(A,Gm),e(Gm,Ioe),e(Ioe,$Xe),e(Gm,kXe),e(Gm,bk),e(bk,SXe),e(Gm,RXe),e(A,PXe),e(A,Om),e(Om,qoe),e(qoe,BXe),e(Om,IXe),e(Om,vk),e(vk,qXe),e(Om,NXe),e(A,jXe),e(A,Vm),e(Vm,Noe),e(Noe,DXe),e(Vm,GXe),e(Vm,Fk),e(Fk,OXe),e(Vm,VXe),e(A,XXe),e(A,Xm),e(Xm,joe),e(joe,zXe),e(Xm,WXe),e(Xm,Tk),e(Tk,QXe),e(Xm,HXe),e(A,UXe),e(A,zm),e(zm,Doe),e(Doe,JXe),e(zm,YXe),e(zm,Mk),e(Mk,KXe),e(zm,ZXe),e(A,eze),e(A,Wm),e(Wm,Goe),e(Goe,oze),e(Wm,rze),e(Wm,Ek),e(Ek,tze),e(Wm,aze),e(A,nze),e(A,Qm),e(Qm,Ooe),e(Ooe,sze),e(Qm,lze),e(Qm,Ck),e(Ck,ize),e(Qm,dze),e(A,cze),e(A,Hm),e(Hm,Voe),e(Voe,mze),e(Hm,fze),e(Hm,wk),e(wk,gze),e(Hm,hze),e(A,uze),e(A,Um),e(Um,Xoe),e(Xoe,pze),e(Um,_ze),e(Um,Ak),e(Ak,bze),e(Um,vze),e(A,Fze),e(A,Jm),e(Jm,zoe),e(zoe,Tze),e(Jm,Mze),e(Jm,yk),e(yk,Eze),e(Jm,Cze),e(A,wze),e(A,Ym),e(Ym,Woe),e(Woe,Aze),e(Ym,yze),e(Ym,Lk),e(Lk,Lze),e(Ym,xze),e(A,$ze),e(A,Km),e(Km,Qoe),e(Qoe,kze),e(Km,Sze),e(Km,xk),e(xk,Rze),e(Km,Pze),e(A,Bze),e(A,Zm),e(Zm,Hoe),e(Hoe,Ize),e(Zm,qze),e(Zm,$k),e($k,Nze),e(Zm,jze),e(A,Dze),e(A,ef),e(ef,Uoe),e(Uoe,Gze),e(ef,Oze),e(ef,kk),e(kk,Vze),e(ef,Xze),e(A,zze),e(A,of),e(of,Joe),e(Joe,Wze),e(of,Qze),e(of,Sk),e(Sk,Hze),e(of,Uze),e(A,Jze),e(A,rf),e(rf,Yoe),e(Yoe,Yze),e(rf,Kze),e(rf,Rk),e(Rk,Zze),e(rf,eWe),e(A,oWe),e(A,tf),e(tf,Koe),e(Koe,rWe),e(tf,tWe),e(tf,Pk),e(Pk,aWe),e(tf,nWe),e(A,sWe),e(A,af),e(af,Zoe),e(Zoe,lWe),e(af,iWe),e(af,Bk),e(Bk,dWe),e(af,cWe),e(A,mWe),e(A,nf),e(nf,ere),e(ere,fWe),e(nf,gWe),e(nf,Ik),e(Ik,hWe),e(nf,uWe),e(A,pWe),e(A,sf),e(sf,ore),e(ore,_We),e(sf,bWe),e(sf,qk),e(qk,vWe),e(sf,FWe),e(A,TWe),e(A,lf),e(lf,rre),e(rre,MWe),e(lf,EWe),e(lf,Nk),e(Nk,CWe),e(lf,wWe),e(A,AWe),e(A,df),e(df,tre),e(tre,yWe),e(df,LWe),e(df,jk),e(jk,xWe),e(df,$We),e(A,kWe),e(A,cf),e(cf,are),e(are,SWe),e(cf,RWe),e(cf,Dk),e(Dk,PWe),e(cf,BWe),e(A,IWe),e(A,mf),e(mf,nre),e(nre,qWe),e(mf,NWe),e(mf,Gk),e(Gk,jWe),e(mf,DWe),e(A,GWe),e(A,ff),e(ff,sre),e(sre,OWe),e(ff,VWe),e(ff,Ok),e(Ok,XWe),e(ff,zWe),e(A,WWe),e(A,gf),e(gf,lre),e(lre,QWe),e(gf,HWe),e(gf,Vk),e(Vk,UWe),e(gf,JWe),e(A,YWe),e(A,hf),e(hf,ire),e(ire,KWe),e(hf,ZWe),e(hf,Xk),e(Xk,eQe),e(hf,oQe),e(A,rQe),e(A,uf),e(uf,dre),e(dre,tQe),e(uf,aQe),e(uf,zk),e(zk,nQe),e(uf,sQe),e(A,lQe),e(A,pf),e(pf,cre),e(cre,iQe),e(pf,dQe),e(pf,Wk),e(Wk,cQe),e(pf,mQe),e(A,fQe),e(A,_f),e(_f,mre),e(mre,gQe),e(_f,hQe),e(_f,Qk),e(Qk,uQe),e(_f,pQe),e(A,_Qe),e(A,bf),e(bf,fre),e(fre,bQe),e(bf,vQe),e(bf,Hk),e(Hk,FQe),e(bf,TQe),e(A,MQe),e(A,vf),e(vf,gre),e(gre,EQe),e(vf,CQe),e(vf,Uk),e(Uk,wQe),e(vf,AQe),e(A,yQe),e(A,Ff),e(Ff,hre),e(hre,LQe),e(Ff,xQe),e(Ff,Jk),e(Jk,$Qe),e(Ff,kQe),e(A,SQe),e(A,Tf),e(Tf,ure),e(ure,RQe),e(Tf,PQe),e(Tf,Yk),e(Yk,BQe),e(Tf,IQe),e(A,qQe),e(A,Mf),e(Mf,pre),e(pre,NQe),e(Mf,jQe),e(Mf,Kk),e(Kk,DQe),e(Mf,GQe),e(A,OQe),e(A,Ef),e(Ef,_re),e(_re,VQe),e(Ef,XQe),e(Ef,Zk),e(Zk,zQe),e(Ef,WQe),e(A,QQe),e(A,Cf),e(Cf,bre),e(bre,HQe),e(Cf,UQe),e(Cf,eS),e(eS,JQe),e(Cf,YQe),e(A,KQe),e(A,wf),e(wf,vre),e(vre,ZQe),e(wf,eHe),e(wf,oS),e(oS,oHe),e(wf,rHe),e(A,tHe),e(A,Af),e(Af,Fre),e(Fre,aHe),e(Af,nHe),e(Af,rS),e(rS,sHe),e(Af,lHe),e(A,iHe),e(A,yf),e(yf,Tre),e(Tre,dHe),e(yf,cHe),e(yf,tS),e(tS,mHe),e(yf,fHe),e(A,gHe),e(A,Lf),e(Lf,Mre),e(Mre,hHe),e(Lf,uHe),e(Lf,aS),e(aS,pHe),e(Lf,_He),e(A,bHe),e(A,xf),e(xf,Ere),e(Ere,vHe),e(xf,FHe),e(xf,nS),e(nS,THe),e(xf,MHe),e(A,EHe),e(A,$f),e($f,Cre),e(Cre,CHe),e($f,wHe),e($f,sS),e(sS,AHe),e($f,yHe),e(A,LHe),e(A,kf),e(kf,wre),e(wre,xHe),e(kf,$He),e(kf,lS),e(lS,kHe),e(kf,SHe),e(A,RHe),e(A,Sf),e(Sf,Are),e(Are,PHe),e(Sf,BHe),e(Sf,iS),e(iS,IHe),e(Sf,qHe),e(A,NHe),e(A,Rf),e(Rf,yre),e(yre,jHe),e(Rf,DHe),e(Rf,dS),e(dS,GHe),e(Rf,OHe),e(A,VHe),e(A,Pf),e(Pf,Lre),e(Lre,XHe),e(Pf,zHe),e(Pf,cS),e(cS,WHe),e(Pf,QHe),e(A,HHe),e(A,Bf),e(Bf,xre),e(xre,UHe),e(Bf,JHe),e(Bf,mS),e(mS,YHe),e(Bf,KHe),e(A,ZHe),e(A,If),e(If,$re),e($re,eUe),e(If,oUe),e(If,fS),e(fS,rUe),e(If,tUe),e(A,aUe),e(A,qf),e(qf,kre),e(kre,nUe),e(qf,sUe),e(qf,gS),e(gS,lUe),e(qf,iUe),e(A,dUe),e(A,Nf),e(Nf,Sre),e(Sre,cUe),e(Nf,mUe),e(Nf,hS),e(hS,fUe),e(Nf,gUe),e(A,hUe),e(A,jf),e(jf,Rre),e(Rre,uUe),e(jf,pUe),e(jf,uS),e(uS,_Ue),e(jf,bUe),e(A,vUe),e(A,Df),e(Df,Pre),e(Pre,FUe),e(Df,TUe),e(Df,pS),e(pS,MUe),e(Df,EUe),e(A,CUe),e(A,Gf),e(Gf,Bre),e(Bre,wUe),e(Gf,AUe),e(Gf,_S),e(_S,yUe),e(Gf,LUe),e(A,xUe),e(A,Of),e(Of,Ire),e(Ire,$Ue),e(Of,kUe),e(Of,bS),e(bS,SUe),e(Of,RUe),e(A,PUe),e(A,Vf),e(Vf,qre),e(qre,BUe),e(Vf,IUe),e(Vf,vS),e(vS,qUe),e(Vf,NUe),e(A,jUe),e(A,Xf),e(Xf,Nre),e(Nre,DUe),e(Xf,GUe),e(Xf,FS),e(FS,OUe),e(Xf,VUe),e(A,XUe),e(A,zf),e(zf,jre),e(jre,zUe),e(zf,WUe),e(zf,TS),e(TS,QUe),e(zf,HUe),e(A,UUe),e(A,Wf),e(Wf,Dre),e(Dre,JUe),e(Wf,YUe),e(Wf,MS),e(MS,KUe),e(Wf,ZUe),e(A,eJe),e(A,Qf),e(Qf,Gre),e(Gre,oJe),e(Qf,rJe),e(Qf,ES),e(ES,tJe),e(Qf,aJe),e(A,nJe),e(A,Hf),e(Hf,Ore),e(Ore,sJe),e(Hf,lJe),e(Hf,CS),e(CS,iJe),e(Hf,dJe),e(A,cJe),e(A,Uf),e(Uf,Vre),e(Vre,mJe),e(Uf,fJe),e(Uf,wS),e(wS,gJe),e(Uf,hJe),e(A,uJe),e(A,Jf),e(Jf,Xre),e(Xre,pJe),e(Jf,_Je),e(Jf,AS),e(AS,bJe),e(Jf,vJe),e(A,FJe),e(A,Yf),e(Yf,zre),e(zre,TJe),e(Yf,MJe),e(Yf,yS),e(yS,EJe),e(Yf,CJe),e(A,wJe),e(A,Kf),e(Kf,Wre),e(Wre,AJe),e(Kf,yJe),e(Kf,LS),e(LS,LJe),e(Kf,xJe),e(A,$Je),e(A,Zf),e(Zf,Qre),e(Qre,kJe),e(Zf,SJe),e(Zf,xS),e(xS,RJe),e(Zf,PJe),e(A,BJe),e(A,eg),e(eg,Hre),e(Hre,IJe),e(eg,qJe),e(eg,$S),e($S,NJe),e(eg,jJe),e(A,DJe),e(A,og),e(og,Ure),e(Ure,GJe),e(og,OJe),e(og,kS),e(kS,VJe),e(og,XJe),e(A,zJe),e(A,rg),e(rg,Jre),e(Jre,WJe),e(rg,QJe),e(rg,SS),e(SS,HJe),e(rg,UJe),e(A,JJe),e(A,tg),e(tg,Yre),e(Yre,YJe),e(tg,KJe),e(tg,RS),e(RS,ZJe),e(tg,eYe),e(A,oYe),e(A,ag),e(ag,Kre),e(Kre,rYe),e(ag,tYe),e(ag,PS),e(PS,aYe),e(ag,nYe),e(A,sYe),e(A,ng),e(ng,Zre),e(Zre,lYe),e(ng,iYe),e(ng,BS),e(BS,dYe),e(ng,cYe),e(A,mYe),e(A,sg),e(sg,ete),e(ete,fYe),e(sg,gYe),e(sg,IS),e(IS,hYe),e(sg,uYe),e(A,pYe),e(A,lg),e(lg,ote),e(ote,_Ye),e(lg,bYe),e(lg,qS),e(qS,vYe),e(lg,FYe),e(A,TYe),e(A,ig),e(ig,rte),e(rte,MYe),e(ig,EYe),e(ig,NS),e(NS,CYe),e(ig,wYe),e(A,AYe),e(A,dg),e(dg,tte),e(tte,yYe),e(dg,LYe),e(dg,jS),e(jS,xYe),e(dg,$Ye),e(A,kYe),e(A,cg),e(cg,ate),e(ate,SYe),e(cg,RYe),e(cg,DS),e(DS,PYe),e(cg,BYe),e(A,IYe),e(A,mg),e(mg,nte),e(nte,qYe),e(mg,NYe),e(mg,GS),e(GS,jYe),e(mg,DYe),e(A,GYe),e(A,fg),e(fg,ste),e(ste,OYe),e(fg,VYe),e(fg,OS),e(OS,XYe),e(fg,zYe),e(A,WYe),e(A,gg),e(gg,lte),e(lte,QYe),e(gg,HYe),e(gg,VS),e(VS,UYe),e(gg,JYe),e(A,YYe),e(A,hg),e(hg,ite),e(ite,KYe),e(hg,ZYe),e(hg,XS),e(XS,eKe),e(hg,oKe),e(A,rKe),e(A,ug),e(ug,dte),e(dte,tKe),e(ug,aKe),e(ug,zS),e(zS,nKe),e(ug,sKe),e(A,lKe),e(A,pg),e(pg,cte),e(cte,iKe),e(pg,dKe),e(pg,WS),e(WS,cKe),e(pg,mKe),e(A,fKe),e(A,_g),e(_g,mte),e(mte,gKe),e(_g,hKe),e(_g,QS),e(QS,uKe),e(_g,pKe),e(A,_Ke),e(A,bg),e(bg,fte),e(fte,bKe),e(bg,vKe),e(bg,HS),e(HS,FKe),e(bg,TKe),e(A,MKe),e(A,vg),e(vg,gte),e(gte,EKe),e(vg,CKe),e(vg,US),e(US,wKe),e(vg,AKe),e(A,yKe),e(A,Fg),e(Fg,hte),e(hte,LKe),e(Fg,xKe),e(Fg,JS),e(JS,$Ke),e(Fg,kKe),e(A,SKe),e(A,Tg),e(Tg,ute),e(ute,RKe),e(Tg,PKe),e(Tg,YS),e(YS,BKe),e(Tg,IKe),e(A,qKe),e(A,Mg),e(Mg,pte),e(pte,NKe),e(Mg,jKe),e(Mg,KS),e(KS,DKe),e(Mg,GKe),e(Er,OKe),M(Eg,Er,null),e(Co,VKe),e(Co,Cg),M(Py,Cg,null),e(Cg,XKe),e(Cg,_te),e(_te,zKe),b(m,nNe,_),b(m,Ti,_),e(Ti,wg),e(wg,bte),M(By,bte,null),e(Ti,WKe),e(Ti,vte),e(vte,QKe),b(m,sNe,_),b(m,wo,_),M(Iy,wo,null),e(wo,HKe),e(wo,qy),e(qy,UKe),e(qy,ZS),e(ZS,JKe),e(qy,YKe),e(wo,KKe),e(wo,Ny),e(Ny,ZKe),e(Ny,Fte),e(Fte,eZe),e(Ny,oZe),e(wo,rZe),e(wo,Cr),M(jy,Cr,null),e(Cr,tZe),e(Cr,Tte),e(Tte,aZe),e(Cr,nZe),e(Cr,Aa),e(Aa,sZe),e(Aa,Mte),e(Mte,lZe),e(Aa,iZe),e(Aa,Ete),e(Ete,dZe),e(Aa,cZe),e(Aa,Cte),e(Cte,mZe),e(Aa,fZe),e(Cr,gZe),e(Cr,k),e(k,Sn),e(Sn,wte),e(wte,hZe),e(Sn,uZe),e(Sn,eR),e(eR,pZe),e(Sn,_Ze),e(Sn,oR),e(oR,bZe),e(Sn,vZe),e(k,FZe),e(k,Rn),e(Rn,Ate),e(Ate,TZe),e(Rn,MZe),e(Rn,rR),e(rR,EZe),e(Rn,CZe),e(Rn,tR),e(tR,wZe),e(Rn,AZe),e(k,yZe),e(k,Pn),e(Pn,yte),e(yte,LZe),e(Pn,xZe),e(Pn,aR),e(aR,$Ze),e(Pn,kZe),e(Pn,nR),e(nR,SZe),e(Pn,RZe),e(k,PZe),e(k,Ag),e(Ag,Lte),e(Lte,BZe),e(Ag,IZe),e(Ag,sR),e(sR,qZe),e(Ag,NZe),e(k,jZe),e(k,Bn),e(Bn,xte),e(xte,DZe),e(Bn,GZe),e(Bn,lR),e(lR,OZe),e(Bn,VZe),e(Bn,iR),e(iR,XZe),e(Bn,zZe),e(k,WZe),e(k,yg),e(yg,$te),e($te,QZe),e(yg,HZe),e(yg,dR),e(dR,UZe),e(yg,JZe),e(k,YZe),e(k,Lg),e(Lg,kte),e(kte,KZe),e(Lg,ZZe),e(Lg,cR),e(cR,eeo),e(Lg,oeo),e(k,reo),e(k,xg),e(xg,Ste),e(Ste,teo),e(xg,aeo),e(xg,mR),e(mR,neo),e(xg,seo),e(k,leo),e(k,In),e(In,Rte),e(Rte,ieo),e(In,deo),e(In,fR),e(fR,ceo),e(In,meo),e(In,gR),e(gR,feo),e(In,geo),e(k,heo),e(k,qn),e(qn,Pte),e(Pte,ueo),e(qn,peo),e(qn,hR),e(hR,_eo),e(qn,beo),e(qn,uR),e(uR,veo),e(qn,Feo),e(k,Teo),e(k,Nn),e(Nn,Bte),e(Bte,Meo),e(Nn,Eeo),e(Nn,pR),e(pR,Ceo),e(Nn,weo),e(Nn,_R),e(_R,Aeo),e(Nn,yeo),e(k,Leo),e(k,$g),e($g,Ite),e(Ite,xeo),e($g,$eo),e($g,bR),e(bR,keo),e($g,Seo),e(k,Reo),e(k,kg),e(kg,qte),e(qte,Peo),e(kg,Beo),e(kg,vR),e(vR,Ieo),e(kg,qeo),e(k,Neo),e(k,jn),e(jn,Nte),e(Nte,jeo),e(jn,Deo),e(jn,FR),e(FR,Geo),e(jn,Oeo),e(jn,TR),e(TR,Veo),e(jn,Xeo),e(k,zeo),e(k,Sg),e(Sg,jte),e(jte,Weo),e(Sg,Qeo),e(Sg,MR),e(MR,Heo),e(Sg,Ueo),e(k,Jeo),e(k,Dn),e(Dn,Dte),e(Dte,Yeo),e(Dn,Keo),e(Dn,ER),e(ER,Zeo),e(Dn,eoo),e(Dn,CR),e(CR,ooo),e(Dn,roo),e(k,too),e(k,Gn),e(Gn,Gte),e(Gte,aoo),e(Gn,noo),e(Gn,wR),e(wR,soo),e(Gn,loo),e(Gn,AR),e(AR,ioo),e(Gn,doo),e(k,coo),e(k,On),e(On,Ote),e(Ote,moo),e(On,foo),e(On,yR),e(yR,goo),e(On,hoo),e(On,LR),e(LR,uoo),e(On,poo),e(k,_oo),e(k,Rg),e(Rg,Vte),e(Vte,boo),e(Rg,voo),e(Rg,xR),e(xR,Foo),e(Rg,Too),e(k,Moo),e(k,Vn),e(Vn,Xte),e(Xte,Eoo),e(Vn,Coo),e(Vn,$R),e($R,woo),e(Vn,Aoo),e(Vn,kR),e(kR,yoo),e(Vn,Loo),e(k,xoo),e(k,Xn),e(Xn,zte),e(zte,$oo),e(Xn,koo),e(Xn,SR),e(SR,Soo),e(Xn,Roo),e(Xn,RR),e(RR,Poo),e(Xn,Boo),e(k,Ioo),e(k,zn),e(zn,Wte),e(Wte,qoo),e(zn,Noo),e(zn,PR),e(PR,joo),e(zn,Doo),e(zn,BR),e(BR,Goo),e(zn,Ooo),e(k,Voo),e(k,Wn),e(Wn,Qte),e(Qte,Xoo),e(Wn,zoo),e(Wn,IR),e(IR,Woo),e(Wn,Qoo),e(Wn,qR),e(qR,Hoo),e(Wn,Uoo),e(k,Joo),e(k,Qn),e(Qn,Hte),e(Hte,Yoo),e(Qn,Koo),e(Qn,NR),e(NR,Zoo),e(Qn,ero),e(Qn,jR),e(jR,oro),e(Qn,rro),e(k,tro),e(k,Hn),e(Hn,Ute),e(Ute,aro),e(Hn,nro),e(Hn,DR),e(DR,sro),e(Hn,lro),e(Hn,GR),e(GR,iro),e(Hn,dro),e(k,cro),e(k,Pg),e(Pg,Jte),e(Jte,mro),e(Pg,fro),e(Pg,OR),e(OR,gro),e(Pg,hro),e(k,uro),e(k,Un),e(Un,Yte),e(Yte,pro),e(Un,_ro),e(Un,VR),e(VR,bro),e(Un,vro),e(Un,XR),e(XR,Fro),e(Un,Tro),e(k,Mro),e(k,Bg),e(Bg,Kte),e(Kte,Ero),e(Bg,Cro),e(Bg,zR),e(zR,wro),e(Bg,Aro),e(k,yro),e(k,Jn),e(Jn,Zte),e(Zte,Lro),e(Jn,xro),e(Jn,WR),e(WR,$ro),e(Jn,kro),e(Jn,QR),e(QR,Sro),e(Jn,Rro),e(k,Pro),e(k,Yn),e(Yn,eae),e(eae,Bro),e(Yn,Iro),e(Yn,HR),e(HR,qro),e(Yn,Nro),e(Yn,UR),e(UR,jro),e(Yn,Dro),e(k,Gro),e(k,Kn),e(Kn,oae),e(oae,Oro),e(Kn,Vro),e(Kn,JR),e(JR,Xro),e(Kn,zro),e(Kn,YR),e(YR,Wro),e(Kn,Qro),e(k,Hro),e(k,Ig),e(Ig,rae),e(rae,Uro),e(Ig,Jro),e(Ig,KR),e(KR,Yro),e(Ig,Kro),e(k,Zro),e(k,Zn),e(Zn,tae),e(tae,eto),e(Zn,oto),e(Zn,ZR),e(ZR,rto),e(Zn,tto),e(Zn,eP),e(eP,ato),e(Zn,nto),e(k,sto),e(k,es),e(es,aae),e(aae,lto),e(es,ito),e(es,oP),e(oP,dto),e(es,cto),e(es,rP),e(rP,mto),e(es,fto),e(k,gto),e(k,qg),e(qg,nae),e(nae,hto),e(qg,uto),e(qg,tP),e(tP,pto),e(qg,_to),e(k,bto),e(k,os),e(os,sae),e(sae,vto),e(os,Fto),e(os,aP),e(aP,Tto),e(os,Mto),e(os,nP),e(nP,Eto),e(os,Cto),e(k,wto),e(k,rs),e(rs,lae),e(lae,Ato),e(rs,yto),e(rs,sP),e(sP,Lto),e(rs,xto),e(rs,lP),e(lP,$to),e(rs,kto),e(k,Sto),e(k,ts),e(ts,iae),e(iae,Rto),e(ts,Pto),e(ts,iP),e(iP,Bto),e(ts,Ito),e(ts,dP),e(dP,qto),e(ts,Nto),e(k,jto),e(k,as),e(as,dae),e(dae,Dto),e(as,Gto),e(as,cP),e(cP,Oto),e(as,Vto),e(as,mP),e(mP,Xto),e(as,zto),e(k,Wto),e(k,ns),e(ns,cae),e(cae,Qto),e(ns,Hto),e(ns,fP),e(fP,Uto),e(ns,Jto),e(ns,gP),e(gP,Yto),e(ns,Kto),e(k,Zto),e(k,ss),e(ss,mae),e(mae,eao),e(ss,oao),e(ss,hP),e(hP,rao),e(ss,tao),e(ss,uP),e(uP,aao),e(ss,nao),e(k,sao),e(k,ls),e(ls,fae),e(fae,lao),e(ls,iao),e(ls,pP),e(pP,dao),e(ls,cao),e(ls,_P),e(_P,mao),e(ls,fao),e(k,gao),e(k,Ng),e(Ng,gae),e(gae,hao),e(Ng,uao),e(Ng,bP),e(bP,pao),e(Ng,_ao),e(k,bao),e(k,is),e(is,hae),e(hae,vao),e(is,Fao),e(is,vP),e(vP,Tao),e(is,Mao),e(is,FP),e(FP,Eao),e(is,Cao),e(k,wao),e(k,jg),e(jg,uae),e(uae,Aao),e(jg,yao),e(jg,TP),e(TP,Lao),e(jg,xao),e(k,$ao),e(k,Dg),e(Dg,pae),e(pae,kao),e(Dg,Sao),e(Dg,MP),e(MP,Rao),e(Dg,Pao),e(k,Bao),e(k,ds),e(ds,_ae),e(_ae,Iao),e(ds,qao),e(ds,EP),e(EP,Nao),e(ds,jao),e(ds,CP),e(CP,Dao),e(ds,Gao),e(k,Oao),e(k,cs),e(cs,bae),e(bae,Vao),e(cs,Xao),e(cs,wP),e(wP,zao),e(cs,Wao),e(cs,AP),e(AP,Qao),e(cs,Hao),e(k,Uao),e(k,ms),e(ms,vae),e(vae,Jao),e(ms,Yao),e(ms,yP),e(yP,Kao),e(ms,Zao),e(ms,LP),e(LP,eno),e(ms,ono),e(k,rno),e(k,Gg),e(Gg,Fae),e(Fae,tno),e(Gg,ano),e(Gg,xP),e(xP,nno),e(Gg,sno),e(k,lno),e(k,fs),e(fs,Tae),e(Tae,ino),e(fs,dno),e(fs,$P),e($P,cno),e(fs,mno),e(fs,kP),e(kP,fno),e(fs,gno),e(k,hno),e(k,gs),e(gs,Mae),e(Mae,uno),e(gs,pno),e(gs,SP),e(SP,_no),e(gs,bno),e(gs,RP),e(RP,vno),e(gs,Fno),e(k,Tno),e(k,hs),e(hs,Eae),e(Eae,Mno),e(hs,Eno),e(hs,PP),e(PP,Cno),e(hs,wno),e(hs,BP),e(BP,Ano),e(hs,yno),e(k,Lno),e(k,us),e(us,Cae),e(Cae,xno),e(us,$no),e(us,IP),e(IP,kno),e(us,Sno),e(us,qP),e(qP,Rno),e(us,Pno),e(k,Bno),e(k,ps),e(ps,wae),e(wae,Ino),e(ps,qno),e(ps,NP),e(NP,Nno),e(ps,jno),e(ps,jP),e(jP,Dno),e(ps,Gno),e(k,Ono),e(k,Og),e(Og,Aae),e(Aae,Vno),e(Og,Xno),e(Og,DP),e(DP,zno),e(Og,Wno),e(k,Qno),e(k,_s),e(_s,yae),e(yae,Hno),e(_s,Uno),e(_s,GP),e(GP,Jno),e(_s,Yno),e(_s,OP),e(OP,Kno),e(_s,Zno),e(k,eso),e(k,Vg),e(Vg,Lae),e(Lae,oso),e(Vg,rso),e(Vg,VP),e(VP,tso),e(Vg,aso),e(k,nso),e(k,Xg),e(Xg,xae),e(xae,sso),e(Xg,lso),e(Xg,XP),e(XP,iso),e(Xg,dso),e(k,cso),e(k,zg),e(zg,$ae),e($ae,mso),e(zg,fso),e(zg,zP),e(zP,gso),e(zg,hso),e(k,uso),e(k,Wg),e(Wg,kae),e(kae,pso),e(Wg,_so),e(Wg,WP),e(WP,bso),e(Wg,vso),e(k,Fso),e(k,bs),e(bs,Sae),e(Sae,Tso),e(bs,Mso),e(bs,QP),e(QP,Eso),e(bs,Cso),e(bs,HP),e(HP,wso),e(bs,Aso),e(k,yso),e(k,Qg),e(Qg,Rae),e(Rae,Lso),e(Qg,xso),e(Qg,UP),e(UP,$so),e(Qg,kso),e(k,Sso),e(k,vs),e(vs,Pae),e(Pae,Rso),e(vs,Pso),e(vs,JP),e(JP,Bso),e(vs,Iso),e(vs,YP),e(YP,qso),e(vs,Nso),e(k,jso),e(k,Fs),e(Fs,Bae),e(Bae,Dso),e(Fs,Gso),e(Fs,KP),e(KP,Oso),e(Fs,Vso),e(Fs,ZP),e(ZP,Xso),e(Fs,zso),e(k,Wso),e(k,Ts),e(Ts,Iae),e(Iae,Qso),e(Ts,Hso),e(Ts,eB),e(eB,Uso),e(Ts,Jso),e(Ts,oB),e(oB,Yso),e(Ts,Kso),e(k,Zso),e(k,Ms),e(Ms,qae),e(qae,elo),e(Ms,olo),e(Ms,rB),e(rB,rlo),e(Ms,tlo),e(Ms,tB),e(tB,alo),e(Ms,nlo),e(k,slo),e(k,Es),e(Es,Nae),e(Nae,llo),e(Es,ilo),e(Es,aB),e(aB,dlo),e(Es,clo),e(Es,nB),e(nB,mlo),e(Es,flo),e(k,glo),e(k,Cs),e(Cs,jae),e(jae,hlo),e(Cs,ulo),e(Cs,sB),e(sB,plo),e(Cs,_lo),e(Cs,lB),e(lB,blo),e(Cs,vlo),e(k,Flo),e(k,Hg),e(Hg,Dae),e(Dae,Tlo),e(Hg,Mlo),e(Hg,iB),e(iB,Elo),e(Hg,Clo),e(k,wlo),e(k,Ug),e(Ug,Gae),e(Gae,Alo),e(Ug,ylo),e(Ug,dB),e(dB,Llo),e(Ug,xlo),e(k,$lo),e(k,ws),e(ws,Oae),e(Oae,klo),e(ws,Slo),e(ws,cB),e(cB,Rlo),e(ws,Plo),e(ws,mB),e(mB,Blo),e(ws,Ilo),e(k,qlo),e(k,As),e(As,Vae),e(Vae,Nlo),e(As,jlo),e(As,fB),e(fB,Dlo),e(As,Glo),e(As,gB),e(gB,Olo),e(As,Vlo),e(k,Xlo),e(k,ys),e(ys,Xae),e(Xae,zlo),e(ys,Wlo),e(ys,hB),e(hB,Qlo),e(ys,Hlo),e(ys,uB),e(uB,Ulo),e(ys,Jlo),e(k,Ylo),e(k,Jg),e(Jg,zae),e(zae,Klo),e(Jg,Zlo),e(Jg,pB),e(pB,eio),e(Jg,oio),e(k,rio),e(k,Yg),e(Yg,Wae),e(Wae,tio),e(Yg,aio),e(Yg,_B),e(_B,nio),e(Yg,sio),e(k,lio),e(k,Kg),e(Kg,Qae),e(Qae,iio),e(Kg,dio),e(Kg,bB),e(bB,cio),e(Kg,mio),e(k,fio),e(k,Ls),e(Ls,Hae),e(Hae,gio),e(Ls,hio),e(Ls,vB),e(vB,uio),e(Ls,pio),e(Ls,FB),e(FB,_io),e(Ls,bio),e(k,vio),e(k,Zg),e(Zg,Uae),e(Uae,Fio),e(Zg,Tio),e(Zg,TB),e(TB,Mio),e(Zg,Eio),e(k,Cio),e(k,eh),e(eh,Jae),e(Jae,wio),e(eh,Aio),e(eh,MB),e(MB,yio),e(eh,Lio),e(k,xio),e(k,oh),e(oh,Yae),e(Yae,$io),e(oh,kio),e(oh,EB),e(EB,Sio),e(oh,Rio),e(k,Pio),e(k,xs),e(xs,Kae),e(Kae,Bio),e(xs,Iio),e(xs,CB),e(CB,qio),e(xs,Nio),e(xs,wB),e(wB,jio),e(xs,Dio),e(k,Gio),e(k,rh),e(rh,Zae),e(Zae,Oio),e(rh,Vio),e(rh,AB),e(AB,Xio),e(rh,zio),e(k,Wio),e(k,th),e(th,ene),e(ene,Qio),e(th,Hio),e(th,yB),e(yB,Uio),e(th,Jio),e(k,Yio),e(k,$s),e($s,one),e(one,Kio),e($s,Zio),e($s,LB),e(LB,edo),e($s,odo),e($s,xB),e(xB,rdo),e($s,tdo),e(k,ado),e(k,ks),e(ks,rne),e(rne,ndo),e(ks,sdo),e(ks,$B),e($B,ldo),e(ks,ido),e(ks,kB),e(kB,ddo),e(ks,cdo),e(k,mdo),e(k,Ss),e(Ss,tne),e(tne,fdo),e(Ss,gdo),e(Ss,SB),e(SB,hdo),e(Ss,udo),e(Ss,RB),e(RB,pdo),e(Ss,_do),e(k,bdo),e(k,Rs),e(Rs,ane),e(ane,vdo),e(Rs,Fdo),e(Rs,PB),e(PB,Tdo),e(Rs,Mdo),e(Rs,BB),e(BB,Edo),e(Rs,Cdo),e(Cr,wdo),M(ah,Cr,null),e(wo,Ado),e(wo,nh),M(Dy,nh,null),e(nh,ydo),e(nh,nne),e(nne,Ldo),b(m,lNe,_),b(m,Mi,_),e(Mi,sh),e(sh,sne),M(Gy,sne,null),e(Mi,xdo),e(Mi,lne),e(lne,$do),b(m,iNe,_),b(m,Ao,_),M(Oy,Ao,null),e(Ao,kdo),e(Ao,Vy),e(Vy,Sdo),e(Vy,IB),e(IB,Rdo),e(Vy,Pdo),e(Ao,Bdo),e(Ao,Xy),e(Xy,Ido),e(Xy,ine),e(ine,qdo),e(Xy,Ndo),e(Ao,jdo),e(Ao,He),M(zy,He,null),e(He,Ddo),e(He,dne),e(dne,Gdo),e(He,Odo),e(He,ya),e(ya,Vdo),e(ya,cne),e(cne,Xdo),e(ya,zdo),e(ya,mne),e(mne,Wdo),e(ya,Qdo),e(ya,fne),e(fne,Hdo),e(ya,Udo),e(He,Jdo),e(He,Y),e(Y,lh),e(lh,gne),e(gne,Ydo),e(lh,Kdo),e(lh,qB),e(qB,Zdo),e(lh,eco),e(Y,oco),e(Y,ih),e(ih,hne),e(hne,rco),e(ih,tco),e(ih,NB),e(NB,aco),e(ih,nco),e(Y,sco),e(Y,dh),e(dh,une),e(une,lco),e(dh,ico),e(dh,jB),e(jB,dco),e(dh,cco),e(Y,mco),e(Y,ch),e(ch,pne),e(pne,fco),e(ch,gco),e(ch,DB),e(DB,hco),e(ch,uco),e(Y,pco),e(Y,mh),e(mh,_ne),e(_ne,_co),e(mh,bco),e(mh,GB),e(GB,vco),e(mh,Fco),e(Y,Tco),e(Y,fh),e(fh,bne),e(bne,Mco),e(fh,Eco),e(fh,OB),e(OB,Cco),e(fh,wco),e(Y,Aco),e(Y,gh),e(gh,vne),e(vne,yco),e(gh,Lco),e(gh,VB),e(VB,xco),e(gh,$co),e(Y,kco),e(Y,hh),e(hh,Fne),e(Fne,Sco),e(hh,Rco),e(hh,XB),e(XB,Pco),e(hh,Bco),e(Y,Ico),e(Y,uh),e(uh,Tne),e(Tne,qco),e(uh,Nco),e(uh,zB),e(zB,jco),e(uh,Dco),e(Y,Gco),e(Y,ph),e(ph,Mne),e(Mne,Oco),e(ph,Vco),e(ph,WB),e(WB,Xco),e(ph,zco),e(Y,Wco),e(Y,_h),e(_h,Ene),e(Ene,Qco),e(_h,Hco),e(_h,QB),e(QB,Uco),e(_h,Jco),e(Y,Yco),e(Y,bh),e(bh,Cne),e(Cne,Kco),e(bh,Zco),e(bh,HB),e(HB,emo),e(bh,omo),e(Y,rmo),e(Y,vh),e(vh,wne),e(wne,tmo),e(vh,amo),e(vh,UB),e(UB,nmo),e(vh,smo),e(Y,lmo),e(Y,Fh),e(Fh,Ane),e(Ane,imo),e(Fh,dmo),e(Fh,JB),e(JB,cmo),e(Fh,mmo),e(Y,fmo),e(Y,Th),e(Th,yne),e(yne,gmo),e(Th,hmo),e(Th,YB),e(YB,umo),e(Th,pmo),e(Y,_mo),e(Y,Mh),e(Mh,Lne),e(Lne,bmo),e(Mh,vmo),e(Mh,KB),e(KB,Fmo),e(Mh,Tmo),e(Y,Mmo),e(Y,Eh),e(Eh,xne),e(xne,Emo),e(Eh,Cmo),e(Eh,ZB),e(ZB,wmo),e(Eh,Amo),e(Y,ymo),e(Y,Ch),e(Ch,$ne),e($ne,Lmo),e(Ch,xmo),e(Ch,eI),e(eI,$mo),e(Ch,kmo),e(Y,Smo),e(Y,wh),e(wh,kne),e(kne,Rmo),e(wh,Pmo),e(wh,oI),e(oI,Bmo),e(wh,Imo),e(Y,qmo),e(Y,Ah),e(Ah,Sne),e(Sne,Nmo),e(Ah,jmo),e(Ah,rI),e(rI,Dmo),e(Ah,Gmo),e(Y,Omo),e(Y,yh),e(yh,Rne),e(Rne,Vmo),e(yh,Xmo),e(yh,tI),e(tI,zmo),e(yh,Wmo),e(Y,Qmo),e(Y,Lh),e(Lh,Pne),e(Pne,Hmo),e(Lh,Umo),e(Lh,aI),e(aI,Jmo),e(Lh,Ymo),e(Y,Kmo),e(Y,xh),e(xh,Bne),e(Bne,Zmo),e(xh,efo),e(xh,nI),e(nI,ofo),e(xh,rfo),e(Y,tfo),e(Y,$h),e($h,Ine),e(Ine,afo),e($h,nfo),e($h,sI),e(sI,sfo),e($h,lfo),e(Y,ifo),e(Y,kh),e(kh,qne),e(qne,dfo),e(kh,cfo),e(kh,lI),e(lI,mfo),e(kh,ffo),e(Y,gfo),e(Y,Sh),e(Sh,Nne),e(Nne,hfo),e(Sh,ufo),e(Sh,iI),e(iI,pfo),e(Sh,_fo),e(Y,bfo),e(Y,Rh),e(Rh,jne),e(jne,vfo),e(Rh,Ffo),e(Rh,dI),e(dI,Tfo),e(Rh,Mfo),e(Y,Efo),e(Y,Ph),e(Ph,Dne),e(Dne,Cfo),e(Ph,wfo),e(Ph,cI),e(cI,Afo),e(Ph,yfo),e(Y,Lfo),e(Y,Bh),e(Bh,Gne),e(Gne,xfo),e(Bh,$fo),e(Bh,mI),e(mI,kfo),e(Bh,Sfo),e(He,Rfo),M(Ih,He,null),e(He,Pfo),M(qh,He,null),e(Ao,Bfo),e(Ao,Nh),M(Wy,Nh,null),e(Nh,Ifo),e(Nh,One),e(One,qfo),b(m,dNe,_),b(m,Ei,_),e(Ei,jh),e(jh,Vne),M(Qy,Vne,null),e(Ei,Nfo),e(Ei,Xne),e(Xne,jfo),b(m,cNe,_),b(m,yo,_),M(Hy,yo,null),e(yo,Dfo),e(yo,Uy),e(Uy,Gfo),e(Uy,fI),e(fI,Ofo),e(Uy,Vfo),e(yo,Xfo),e(yo,Jy),e(Jy,zfo),e(Jy,zne),e(zne,Wfo),e(Jy,Qfo),e(yo,Hfo),e(yo,Ue),M(Yy,Ue,null),e(Ue,Ufo),e(Ue,Wne),e(Wne,Jfo),e(Ue,Yfo),e(Ue,Ci),e(Ci,Kfo),e(Ci,Qne),e(Qne,Zfo),e(Ci,ego),e(Ci,Hne),e(Hne,ogo),e(Ci,rgo),e(Ue,tgo),e(Ue,he),e(he,Dh),e(Dh,Une),e(Une,ago),e(Dh,ngo),e(Dh,gI),e(gI,sgo),e(Dh,lgo),e(he,igo),e(he,Gh),e(Gh,Jne),e(Jne,dgo),e(Gh,cgo),e(Gh,Yne),e(Yne,mgo),e(Gh,fgo),e(he,ggo),e(he,Oh),e(Oh,Kne),e(Kne,hgo),e(Oh,ugo),e(Oh,hI),e(hI,pgo),e(Oh,_go),e(he,bgo),e(he,Vh),e(Vh,Zne),e(Zne,vgo),e(Vh,Fgo),e(Vh,uI),e(uI,Tgo),e(Vh,Mgo),e(he,Ego),e(he,Xh),e(Xh,ese),e(ese,Cgo),e(Xh,wgo),e(Xh,pI),e(pI,Ago),e(Xh,ygo),e(he,Lgo),e(he,zh),e(zh,ose),e(ose,xgo),e(zh,$go),e(zh,_I),e(_I,kgo),e(zh,Sgo),e(he,Rgo),e(he,Wh),e(Wh,rse),e(rse,Pgo),e(Wh,Bgo),e(Wh,bI),e(bI,Igo),e(Wh,qgo),e(he,Ngo),e(he,Qh),e(Qh,tse),e(tse,jgo),e(Qh,Dgo),e(Qh,vI),e(vI,Ggo),e(Qh,Ogo),e(he,Vgo),e(he,Hh),e(Hh,ase),e(ase,Xgo),e(Hh,zgo),e(Hh,FI),e(FI,Wgo),e(Hh,Qgo),e(he,Hgo),e(he,Uh),e(Uh,nse),e(nse,Ugo),e(Uh,Jgo),e(Uh,TI),e(TI,Ygo),e(Uh,Kgo),e(he,Zgo),e(he,Jh),e(Jh,sse),e(sse,eho),e(Jh,oho),e(Jh,MI),e(MI,rho),e(Jh,tho),e(he,aho),e(he,Yh),e(Yh,lse),e(lse,nho),e(Yh,sho),e(Yh,EI),e(EI,lho),e(Yh,iho),e(he,dho),e(he,Kh),e(Kh,ise),e(ise,cho),e(Kh,mho),e(Kh,CI),e(CI,fho),e(Kh,gho),e(he,hho),e(he,Zh),e(Zh,dse),e(dse,uho),e(Zh,pho),e(Zh,wI),e(wI,_ho),e(Zh,bho),e(he,vho),e(he,eu),e(eu,cse),e(cse,Fho),e(eu,Tho),e(eu,AI),e(AI,Mho),e(eu,Eho),e(he,Cho),e(he,ou),e(ou,mse),e(mse,who),e(ou,Aho),e(ou,yI),e(yI,yho),e(ou,Lho),e(he,xho),e(he,ru),e(ru,fse),e(fse,$ho),e(ru,kho),e(ru,LI),e(LI,Sho),e(ru,Rho),e(Ue,Pho),M(tu,Ue,null),e(Ue,Bho),M(au,Ue,null),e(yo,Iho),e(yo,nu),M(Ky,nu,null),e(nu,qho),e(nu,gse),e(gse,Nho),b(m,mNe,_),b(m,wi,_),e(wi,su),e(su,hse),M(Zy,hse,null),e(wi,jho),e(wi,use),e(use,Dho),b(m,fNe,_),b(m,Lo,_),M(eL,Lo,null),e(Lo,Gho),e(Lo,Ai),e(Ai,Oho),e(Ai,xI),e(xI,Vho),e(Ai,Xho),e(Ai,$I),e($I,zho),e(Ai,Who),e(Lo,Qho),e(Lo,oL),e(oL,Hho),e(oL,pse),e(pse,Uho),e(oL,Jho),e(Lo,Yho),e(Lo,tt),M(rL,tt,null),e(tt,Kho),e(tt,_se),e(_se,Zho),e(tt,euo),e(tt,yi),e(yi,ouo),e(yi,bse),e(bse,ruo),e(yi,tuo),e(yi,kI),e(kI,auo),e(yi,nuo),e(tt,suo),M(lu,tt,null),e(Lo,luo),e(Lo,Je),M(tL,Je,null),e(Je,iuo),e(Je,vse),e(vse,duo),e(Je,cuo),e(Je,La),e(La,muo),e(La,Fse),e(Fse,fuo),e(La,guo),e(La,Tse),e(Tse,huo),e(La,uuo),e(La,Mse),e(Mse,puo),e(La,_uo),e(Je,buo),e(Je,x),e(x,iu),e(iu,Ese),e(Ese,vuo),e(iu,Fuo),e(iu,SI),e(SI,Tuo),e(iu,Muo),e(x,Euo),e(x,du),e(du,Cse),e(Cse,Cuo),e(du,wuo),e(du,RI),e(RI,Auo),e(du,yuo),e(x,Luo),e(x,cu),e(cu,wse),e(wse,xuo),e(cu,$uo),e(cu,PI),e(PI,kuo),e(cu,Suo),e(x,Ruo),e(x,mu),e(mu,Ase),e(Ase,Puo),e(mu,Buo),e(mu,BI),e(BI,Iuo),e(mu,quo),e(x,Nuo),e(x,fu),e(fu,yse),e(yse,juo),e(fu,Duo),e(fu,II),e(II,Guo),e(fu,Ouo),e(x,Vuo),e(x,gu),e(gu,Lse),e(Lse,Xuo),e(gu,zuo),e(gu,qI),e(qI,Wuo),e(gu,Quo),e(x,Huo),e(x,hu),e(hu,xse),e(xse,Uuo),e(hu,Juo),e(hu,NI),e(NI,Yuo),e(hu,Kuo),e(x,Zuo),e(x,uu),e(uu,$se),e($se,epo),e(uu,opo),e(uu,jI),e(jI,rpo),e(uu,tpo),e(x,apo),e(x,pu),e(pu,kse),e(kse,npo),e(pu,spo),e(pu,DI),e(DI,lpo),e(pu,ipo),e(x,dpo),e(x,_u),e(_u,Sse),e(Sse,cpo),e(_u,mpo),e(_u,GI),e(GI,fpo),e(_u,gpo),e(x,hpo),e(x,bu),e(bu,Rse),e(Rse,upo),e(bu,ppo),e(bu,OI),e(OI,_po),e(bu,bpo),e(x,vpo),e(x,vu),e(vu,Pse),e(Pse,Fpo),e(vu,Tpo),e(vu,VI),e(VI,Mpo),e(vu,Epo),e(x,Cpo),e(x,Fu),e(Fu,Bse),e(Bse,wpo),e(Fu,Apo),e(Fu,XI),e(XI,ypo),e(Fu,Lpo),e(x,xpo),e(x,Tu),e(Tu,Ise),e(Ise,$po),e(Tu,kpo),e(Tu,zI),e(zI,Spo),e(Tu,Rpo),e(x,Ppo),e(x,Mu),e(Mu,qse),e(qse,Bpo),e(Mu,Ipo),e(Mu,WI),e(WI,qpo),e(Mu,Npo),e(x,jpo),e(x,Eu),e(Eu,Nse),e(Nse,Dpo),e(Eu,Gpo),e(Eu,QI),e(QI,Opo),e(Eu,Vpo),e(x,Xpo),e(x,Cu),e(Cu,jse),e(jse,zpo),e(Cu,Wpo),e(Cu,HI),e(HI,Qpo),e(Cu,Hpo),e(x,Upo),e(x,wu),e(wu,Dse),e(Dse,Jpo),e(wu,Ypo),e(wu,UI),e(UI,Kpo),e(wu,Zpo),e(x,e_o),e(x,Au),e(Au,Gse),e(Gse,o_o),e(Au,r_o),e(Au,JI),e(JI,t_o),e(Au,a_o),e(x,n_o),e(x,yu),e(yu,Ose),e(Ose,s_o),e(yu,l_o),e(yu,YI),e(YI,i_o),e(yu,d_o),e(x,c_o),e(x,Lu),e(Lu,Vse),e(Vse,m_o),e(Lu,f_o),e(Lu,KI),e(KI,g_o),e(Lu,h_o),e(x,u_o),e(x,xu),e(xu,Xse),e(Xse,p_o),e(xu,__o),e(xu,ZI),e(ZI,b_o),e(xu,v_o),e(x,F_o),e(x,$u),e($u,zse),e(zse,T_o),e($u,M_o),e($u,eq),e(eq,E_o),e($u,C_o),e(x,w_o),e(x,ku),e(ku,Wse),e(Wse,A_o),e(ku,y_o),e(ku,oq),e(oq,L_o),e(ku,x_o),e(x,$_o),e(x,Su),e(Su,Qse),e(Qse,k_o),e(Su,S_o),e(Su,rq),e(rq,R_o),e(Su,P_o),e(x,B_o),e(x,Ru),e(Ru,Hse),e(Hse,I_o),e(Ru,q_o),e(Ru,tq),e(tq,N_o),e(Ru,j_o),e(x,D_o),e(x,Pu),e(Pu,Use),e(Use,G_o),e(Pu,O_o),e(Pu,aq),e(aq,V_o),e(Pu,X_o),e(x,z_o),e(x,Bu),e(Bu,Jse),e(Jse,W_o),e(Bu,Q_o),e(Bu,nq),e(nq,H_o),e(Bu,U_o),e(x,J_o),e(x,Iu),e(Iu,Yse),e(Yse,Y_o),e(Iu,K_o),e(Iu,sq),e(sq,Z_o),e(Iu,ebo),e(x,obo),e(x,qu),e(qu,Kse),e(Kse,rbo),e(qu,tbo),e(qu,lq),e(lq,abo),e(qu,nbo),e(x,sbo),e(x,Nu),e(Nu,Zse),e(Zse,lbo),e(Nu,ibo),e(Nu,iq),e(iq,dbo),e(Nu,cbo),e(x,mbo),e(x,ju),e(ju,ele),e(ele,fbo),e(ju,gbo),e(ju,dq),e(dq,hbo),e(ju,ubo),e(x,pbo),e(x,Ps),e(Ps,ole),e(ole,_bo),e(Ps,bbo),e(Ps,cq),e(cq,vbo),e(Ps,Fbo),e(Ps,mq),e(mq,Tbo),e(Ps,Mbo),e(x,Ebo),e(x,Du),e(Du,rle),e(rle,Cbo),e(Du,wbo),e(Du,fq),e(fq,Abo),e(Du,ybo),e(x,Lbo),e(x,Gu),e(Gu,tle),e(tle,xbo),e(Gu,$bo),e(Gu,gq),e(gq,kbo),e(Gu,Sbo),e(x,Rbo),e(x,Ou),e(Ou,ale),e(ale,Pbo),e(Ou,Bbo),e(Ou,hq),e(hq,Ibo),e(Ou,qbo),e(x,Nbo),e(x,Vu),e(Vu,nle),e(nle,jbo),e(Vu,Dbo),e(Vu,uq),e(uq,Gbo),e(Vu,Obo),e(x,Vbo),e(x,Xu),e(Xu,sle),e(sle,Xbo),e(Xu,zbo),e(Xu,pq),e(pq,Wbo),e(Xu,Qbo),e(x,Hbo),e(x,zu),e(zu,lle),e(lle,Ubo),e(zu,Jbo),e(zu,_q),e(_q,Ybo),e(zu,Kbo),e(x,Zbo),e(x,Wu),e(Wu,ile),e(ile,e2o),e(Wu,o2o),e(Wu,bq),e(bq,r2o),e(Wu,t2o),e(x,a2o),e(x,Qu),e(Qu,dle),e(dle,n2o),e(Qu,s2o),e(Qu,vq),e(vq,l2o),e(Qu,i2o),e(x,d2o),e(x,Hu),e(Hu,cle),e(cle,c2o),e(Hu,m2o),e(Hu,Fq),e(Fq,f2o),e(Hu,g2o),e(x,h2o),e(x,Uu),e(Uu,mle),e(mle,u2o),e(Uu,p2o),e(Uu,Tq),e(Tq,_2o),e(Uu,b2o),e(x,v2o),e(x,Ju),e(Ju,fle),e(fle,F2o),e(Ju,T2o),e(Ju,Mq),e(Mq,M2o),e(Ju,E2o),e(x,C2o),e(x,Yu),e(Yu,gle),e(gle,w2o),e(Yu,A2o),e(Yu,Eq),e(Eq,y2o),e(Yu,L2o),e(x,x2o),e(x,Ku),e(Ku,hle),e(hle,$2o),e(Ku,k2o),e(Ku,Cq),e(Cq,S2o),e(Ku,R2o),e(x,P2o),e(x,Zu),e(Zu,ule),e(ule,B2o),e(Zu,I2o),e(Zu,wq),e(wq,q2o),e(Zu,N2o),e(x,j2o),e(x,ep),e(ep,ple),e(ple,D2o),e(ep,G2o),e(ep,Aq),e(Aq,O2o),e(ep,V2o),e(x,X2o),e(x,op),e(op,_le),e(_le,z2o),e(op,W2o),e(op,yq),e(yq,Q2o),e(op,H2o),e(x,U2o),e(x,rp),e(rp,ble),e(ble,J2o),e(rp,Y2o),e(rp,Lq),e(Lq,K2o),e(rp,Z2o),e(x,evo),e(x,tp),e(tp,vle),e(vle,ovo),e(tp,rvo),e(tp,xq),e(xq,tvo),e(tp,avo),e(x,nvo),e(x,ap),e(ap,Fle),e(Fle,svo),e(ap,lvo),e(ap,$q),e($q,ivo),e(ap,dvo),e(x,cvo),e(x,np),e(np,Tle),e(Tle,mvo),e(np,fvo),e(np,kq),e(kq,gvo),e(np,hvo),e(x,uvo),e(x,sp),e(sp,Mle),e(Mle,pvo),e(sp,_vo),e(sp,Sq),e(Sq,bvo),e(sp,vvo),e(x,Fvo),e(x,lp),e(lp,Ele),e(Ele,Tvo),e(lp,Mvo),e(lp,Rq),e(Rq,Evo),e(lp,Cvo),e(x,wvo),e(x,ip),e(ip,Cle),e(Cle,Avo),e(ip,yvo),e(ip,Pq),e(Pq,Lvo),e(ip,xvo),e(x,$vo),e(x,dp),e(dp,wle),e(wle,kvo),e(dp,Svo),e(dp,Bq),e(Bq,Rvo),e(dp,Pvo),e(x,Bvo),e(x,cp),e(cp,Ale),e(Ale,Ivo),e(cp,qvo),e(cp,Iq),e(Iq,Nvo),e(cp,jvo),e(x,Dvo),e(x,mp),e(mp,yle),e(yle,Gvo),e(mp,Ovo),e(mp,qq),e(qq,Vvo),e(mp,Xvo),e(x,zvo),e(x,fp),e(fp,Lle),e(Lle,Wvo),e(fp,Qvo),e(fp,Nq),e(Nq,Hvo),e(fp,Uvo),e(x,Jvo),e(x,gp),e(gp,xle),e(xle,Yvo),e(gp,Kvo),e(gp,jq),e(jq,Zvo),e(gp,eFo),e(x,oFo),e(x,hp),e(hp,$le),e($le,rFo),e(hp,tFo),e(hp,Dq),e(Dq,aFo),e(hp,nFo),e(x,sFo),e(x,up),e(up,kle),e(kle,lFo),e(up,iFo),e(up,Gq),e(Gq,dFo),e(up,cFo),e(x,mFo),e(x,pp),e(pp,Sle),e(Sle,fFo),e(pp,gFo),e(pp,Oq),e(Oq,hFo),e(pp,uFo),e(x,pFo),e(x,_p),e(_p,Rle),e(Rle,_Fo),e(_p,bFo),e(_p,Vq),e(Vq,vFo),e(_p,FFo),e(x,TFo),e(x,bp),e(bp,Ple),e(Ple,MFo),e(bp,EFo),e(bp,Xq),e(Xq,CFo),e(bp,wFo),e(x,AFo),e(x,vp),e(vp,Ble),e(Ble,yFo),e(vp,LFo),e(vp,zq),e(zq,xFo),e(vp,$Fo),e(x,kFo),e(x,Fp),e(Fp,Ile),e(Ile,SFo),e(Fp,RFo),e(Fp,Wq),e(Wq,PFo),e(Fp,BFo),e(x,IFo),e(x,Tp),e(Tp,qle),e(qle,qFo),e(Tp,NFo),e(Tp,Qq),e(Qq,jFo),e(Tp,DFo),e(x,GFo),e(x,Mp),e(Mp,Nle),e(Nle,OFo),e(Mp,VFo),e(Mp,Hq),e(Hq,XFo),e(Mp,zFo),e(x,WFo),e(x,Ep),e(Ep,jle),e(jle,QFo),e(Ep,HFo),e(Ep,Uq),e(Uq,UFo),e(Ep,JFo),e(x,YFo),e(x,Cp),e(Cp,Dle),e(Dle,KFo),e(Cp,ZFo),e(Cp,Jq),e(Jq,e1o),e(Cp,o1o),e(x,r1o),e(x,wp),e(wp,Gle),e(Gle,t1o),e(wp,a1o),e(wp,Yq),e(Yq,n1o),e(wp,s1o),e(x,l1o),e(x,Ap),e(Ap,Ole),e(Ole,i1o),e(Ap,d1o),e(Ap,Kq),e(Kq,c1o),e(Ap,m1o),e(x,f1o),e(x,yp),e(yp,Vle),e(Vle,g1o),e(yp,h1o),e(yp,Zq),e(Zq,u1o),e(yp,p1o),e(x,_1o),e(x,Lp),e(Lp,Xle),e(Xle,b1o),e(Lp,v1o),e(Lp,eN),e(eN,F1o),e(Lp,T1o),e(x,M1o),e(x,xp),e(xp,zle),e(zle,E1o),e(xp,C1o),e(xp,oN),e(oN,w1o),e(xp,A1o),e(x,y1o),e(x,$p),e($p,Wle),e(Wle,L1o),e($p,x1o),e($p,rN),e(rN,$1o),e($p,k1o),e(x,S1o),e(x,kp),e(kp,Qle),e(Qle,R1o),e(kp,P1o),e(kp,tN),e(tN,B1o),e(kp,I1o),e(x,q1o),e(x,Sp),e(Sp,Hle),e(Hle,N1o),e(Sp,j1o),e(Sp,aN),e(aN,D1o),e(Sp,G1o),e(x,O1o),e(x,Rp),e(Rp,Ule),e(Ule,V1o),e(Rp,X1o),e(Rp,nN),e(nN,z1o),e(Rp,W1o),e(x,Q1o),e(x,Pp),e(Pp,Jle),e(Jle,H1o),e(Pp,U1o),e(Pp,sN),e(sN,J1o),e(Pp,Y1o),e(x,K1o),e(x,Bp),e(Bp,Yle),e(Yle,Z1o),e(Bp,eTo),e(Bp,lN),e(lN,oTo),e(Bp,rTo),e(x,tTo),e(x,Ip),e(Ip,Kle),e(Kle,aTo),e(Ip,nTo),e(Ip,iN),e(iN,sTo),e(Ip,lTo),e(x,iTo),e(x,qp),e(qp,Zle),e(Zle,dTo),e(qp,cTo),e(qp,dN),e(dN,mTo),e(qp,fTo),e(x,gTo),e(x,Np),e(Np,eie),e(eie,hTo),e(Np,uTo),e(Np,cN),e(cN,pTo),e(Np,_To),e(x,bTo),e(x,jp),e(jp,oie),e(oie,vTo),e(jp,FTo),e(jp,mN),e(mN,TTo),e(jp,MTo),e(x,ETo),e(x,Dp),e(Dp,rie),e(rie,CTo),e(Dp,wTo),e(Dp,fN),e(fN,ATo),e(Dp,yTo),e(x,LTo),e(x,Gp),e(Gp,tie),e(tie,xTo),e(Gp,$To),e(Gp,gN),e(gN,kTo),e(Gp,STo),e(x,RTo),e(x,Op),e(Op,aie),e(aie,PTo),e(Op,BTo),e(Op,hN),e(hN,ITo),e(Op,qTo),e(x,NTo),e(x,Vp),e(Vp,nie),e(nie,jTo),e(Vp,DTo),e(Vp,uN),e(uN,GTo),e(Vp,OTo),e(x,VTo),e(x,Xp),e(Xp,sie),e(sie,XTo),e(Xp,zTo),e(Xp,pN),e(pN,WTo),e(Xp,QTo),e(x,HTo),e(x,zp),e(zp,lie),e(lie,UTo),e(zp,JTo),e(zp,_N),e(_N,YTo),e(zp,KTo),e(x,ZTo),e(x,Wp),e(Wp,iie),e(iie,eMo),e(Wp,oMo),e(Wp,bN),e(bN,rMo),e(Wp,tMo),e(x,aMo),e(x,Qp),e(Qp,die),e(die,nMo),e(Qp,sMo),e(Qp,vN),e(vN,lMo),e(Qp,iMo),e(x,dMo),e(x,Hp),e(Hp,cie),e(cie,cMo),e(Hp,mMo),e(Hp,FN),e(FN,fMo),e(Hp,gMo),e(x,hMo),e(x,Up),e(Up,mie),e(mie,uMo),e(Up,pMo),e(Up,TN),e(TN,_Mo),e(Up,bMo),e(x,vMo),e(x,Jp),e(Jp,fie),e(fie,FMo),e(Jp,TMo),e(Jp,MN),e(MN,MMo),e(Jp,EMo),e(x,CMo),e(x,Yp),e(Yp,gie),e(gie,wMo),e(Yp,AMo),e(Yp,EN),e(EN,yMo),e(Yp,LMo),e(x,xMo),e(x,Kp),e(Kp,hie),e(hie,$Mo),e(Kp,kMo),e(Kp,CN),e(CN,SMo),e(Kp,RMo),e(x,PMo),e(x,Zp),e(Zp,uie),e(uie,BMo),e(Zp,IMo),e(Zp,wN),e(wN,qMo),e(Zp,NMo),e(x,jMo),e(x,e_),e(e_,pie),e(pie,DMo),e(e_,GMo),e(e_,AN),e(AN,OMo),e(e_,VMo),e(Je,XMo),e(Je,o_),e(o_,zMo),e(o_,_ie),e(_ie,WMo),e(o_,QMo),e(o_,bie),e(bie,HMo),e(Je,UMo),M(r_,Je,null),b(m,gNe,_),b(m,Li,_),e(Li,t_),e(t_,vie),M(aL,vie,null),e(Li,JMo),e(Li,Fie),e(Fie,YMo),b(m,hNe,_),b(m,xo,_),M(nL,xo,null),e(xo,KMo),e(xo,xi),e(xi,ZMo),e(xi,yN),e(yN,e4o),e(xi,o4o),e(xi,LN),e(LN,r4o),e(xi,t4o),e(xo,a4o),e(xo,sL),e(sL,n4o),e(sL,Tie),e(Tie,s4o),e(sL,l4o),e(xo,i4o),e(xo,at),M(lL,at,null),e(at,d4o),e(at,Mie),e(Mie,c4o),e(at,m4o),e(at,$i),e($i,f4o),e($i,Eie),e(Eie,g4o),e($i,h4o),e($i,xN),e(xN,u4o),e($i,p4o),e(at,_4o),M(a_,at,null),e(xo,b4o),e(xo,Ye),M(iL,Ye,null),e(Ye,v4o),e(Ye,Cie),e(Cie,F4o),e(Ye,T4o),e(Ye,xa),e(xa,M4o),e(xa,wie),e(wie,E4o),e(xa,C4o),e(xa,Aie),e(Aie,w4o),e(xa,A4o),e(xa,yie),e(yie,y4o),e(xa,L4o),e(Ye,x4o),e(Ye,G),e(G,n_),e(n_,Lie),e(Lie,$4o),e(n_,k4o),e(n_,$N),e($N,S4o),e(n_,R4o),e(G,P4o),e(G,s_),e(s_,xie),e(xie,B4o),e(s_,I4o),e(s_,kN),e(kN,q4o),e(s_,N4o),e(G,j4o),e(G,l_),e(l_,$ie),e($ie,D4o),e(l_,G4o),e(l_,SN),e(SN,O4o),e(l_,V4o),e(G,X4o),e(G,i_),e(i_,kie),e(kie,z4o),e(i_,W4o),e(i_,RN),e(RN,Q4o),e(i_,H4o),e(G,U4o),e(G,d_),e(d_,Sie),e(Sie,J4o),e(d_,Y4o),e(d_,PN),e(PN,K4o),e(d_,Z4o),e(G,eEo),e(G,c_),e(c_,Rie),e(Rie,oEo),e(c_,rEo),e(c_,BN),e(BN,tEo),e(c_,aEo),e(G,nEo),e(G,m_),e(m_,Pie),e(Pie,sEo),e(m_,lEo),e(m_,IN),e(IN,iEo),e(m_,dEo),e(G,cEo),e(G,f_),e(f_,Bie),e(Bie,mEo),e(f_,fEo),e(f_,qN),e(qN,gEo),e(f_,hEo),e(G,uEo),e(G,g_),e(g_,Iie),e(Iie,pEo),e(g_,_Eo),e(g_,NN),e(NN,bEo),e(g_,vEo),e(G,FEo),e(G,h_),e(h_,qie),e(qie,TEo),e(h_,MEo),e(h_,jN),e(jN,EEo),e(h_,CEo),e(G,wEo),e(G,u_),e(u_,Nie),e(Nie,AEo),e(u_,yEo),e(u_,DN),e(DN,LEo),e(u_,xEo),e(G,$Eo),e(G,p_),e(p_,jie),e(jie,kEo),e(p_,SEo),e(p_,GN),e(GN,REo),e(p_,PEo),e(G,BEo),e(G,__),e(__,Die),e(Die,IEo),e(__,qEo),e(__,ON),e(ON,NEo),e(__,jEo),e(G,DEo),e(G,b_),e(b_,Gie),e(Gie,GEo),e(b_,OEo),e(b_,VN),e(VN,VEo),e(b_,XEo),e(G,zEo),e(G,v_),e(v_,Oie),e(Oie,WEo),e(v_,QEo),e(v_,XN),e(XN,HEo),e(v_,UEo),e(G,JEo),e(G,F_),e(F_,Vie),e(Vie,YEo),e(F_,KEo),e(F_,zN),e(zN,ZEo),e(F_,eCo),e(G,oCo),e(G,T_),e(T_,Xie),e(Xie,rCo),e(T_,tCo),e(T_,WN),e(WN,aCo),e(T_,nCo),e(G,sCo),e(G,M_),e(M_,zie),e(zie,lCo),e(M_,iCo),e(M_,QN),e(QN,dCo),e(M_,cCo),e(G,mCo),e(G,E_),e(E_,Wie),e(Wie,fCo),e(E_,gCo),e(E_,HN),e(HN,hCo),e(E_,uCo),e(G,pCo),e(G,C_),e(C_,Qie),e(Qie,_Co),e(C_,bCo),e(C_,UN),e(UN,vCo),e(C_,FCo),e(G,TCo),e(G,w_),e(w_,Hie),e(Hie,MCo),e(w_,ECo),e(w_,JN),e(JN,CCo),e(w_,wCo),e(G,ACo),e(G,A_),e(A_,Uie),e(Uie,yCo),e(A_,LCo),e(A_,YN),e(YN,xCo),e(A_,$Co),e(G,kCo),e(G,y_),e(y_,Jie),e(Jie,SCo),e(y_,RCo),e(y_,KN),e(KN,PCo),e(y_,BCo),e(G,ICo),e(G,L_),e(L_,Yie),e(Yie,qCo),e(L_,NCo),e(L_,ZN),e(ZN,jCo),e(L_,DCo),e(G,GCo),e(G,x_),e(x_,Kie),e(Kie,OCo),e(x_,VCo),e(x_,ej),e(ej,XCo),e(x_,zCo),e(G,WCo),e(G,$_),e($_,Zie),e(Zie,QCo),e($_,HCo),e($_,oj),e(oj,UCo),e($_,JCo),e(G,YCo),e(G,k_),e(k_,ede),e(ede,KCo),e(k_,ZCo),e(k_,rj),e(rj,e5o),e(k_,o5o),e(G,r5o),e(G,S_),e(S_,ode),e(ode,t5o),e(S_,a5o),e(S_,tj),e(tj,n5o),e(S_,s5o),e(G,l5o),e(G,R_),e(R_,rde),e(rde,i5o),e(R_,d5o),e(R_,aj),e(aj,c5o),e(R_,m5o),e(G,f5o),e(G,P_),e(P_,tde),e(tde,g5o),e(P_,h5o),e(P_,nj),e(nj,u5o),e(P_,p5o),e(G,_5o),e(G,B_),e(B_,ade),e(ade,b5o),e(B_,v5o),e(B_,sj),e(sj,F5o),e(B_,T5o),e(G,M5o),e(G,I_),e(I_,nde),e(nde,E5o),e(I_,C5o),e(I_,lj),e(lj,w5o),e(I_,A5o),e(G,y5o),e(G,q_),e(q_,sde),e(sde,L5o),e(q_,x5o),e(q_,ij),e(ij,$5o),e(q_,k5o),e(G,S5o),e(G,N_),e(N_,lde),e(lde,R5o),e(N_,P5o),e(N_,dj),e(dj,B5o),e(N_,I5o),e(G,q5o),e(G,j_),e(j_,ide),e(ide,N5o),e(j_,j5o),e(j_,cj),e(cj,D5o),e(j_,G5o),e(G,O5o),e(G,D_),e(D_,dde),e(dde,V5o),e(D_,X5o),e(D_,mj),e(mj,z5o),e(D_,W5o),e(G,Q5o),e(G,G_),e(G_,cde),e(cde,H5o),e(G_,U5o),e(G_,fj),e(fj,J5o),e(G_,Y5o),e(G,K5o),e(G,O_),e(O_,mde),e(mde,Z5o),e(O_,e3o),e(O_,gj),e(gj,o3o),e(O_,r3o),e(G,t3o),e(G,V_),e(V_,fde),e(fde,a3o),e(V_,n3o),e(V_,hj),e(hj,s3o),e(V_,l3o),e(G,i3o),e(G,X_),e(X_,gde),e(gde,d3o),e(X_,c3o),e(X_,uj),e(uj,m3o),e(X_,f3o),e(G,g3o),e(G,z_),e(z_,hde),e(hde,h3o),e(z_,u3o),e(z_,pj),e(pj,p3o),e(z_,_3o),e(G,b3o),e(G,W_),e(W_,ude),e(ude,v3o),e(W_,F3o),e(W_,_j),e(_j,T3o),e(W_,M3o),e(Ye,E3o),e(Ye,Q_),e(Q_,C3o),e(Q_,pde),e(pde,w3o),e(Q_,A3o),e(Q_,_de),e(_de,y3o),e(Ye,L3o),M(H_,Ye,null),b(m,uNe,_),b(m,ki,_),e(ki,U_),e(U_,bde),M(dL,bde,null),e(ki,x3o),e(ki,vde),e(vde,$3o),b(m,pNe,_),b(m,$o,_),M(cL,$o,null),e($o,k3o),e($o,Si),e(Si,S3o),e(Si,bj),e(bj,R3o),e(Si,P3o),e(Si,vj),e(vj,B3o),e(Si,I3o),e($o,q3o),e($o,mL),e(mL,N3o),e(mL,Fde),e(Fde,j3o),e(mL,D3o),e($o,G3o),e($o,nt),M(fL,nt,null),e(nt,O3o),e(nt,Tde),e(Tde,V3o),e(nt,X3o),e(nt,Ri),e(Ri,z3o),e(Ri,Mde),e(Mde,W3o),e(Ri,Q3o),e(Ri,Fj),e(Fj,H3o),e(Ri,U3o),e(nt,J3o),M(J_,nt,null),e($o,Y3o),e($o,Ke),M(gL,Ke,null),e(Ke,K3o),e(Ke,Ede),e(Ede,Z3o),e(Ke,ewo),e(Ke,$a),e($a,owo),e($a,Cde),e(Cde,rwo),e($a,two),e($a,wde),e(wde,awo),e($a,nwo),e($a,Ade),e(Ade,swo),e($a,lwo),e(Ke,iwo),e(Ke,z),e(z,Y_),e(Y_,yde),e(yde,dwo),e(Y_,cwo),e(Y_,Tj),e(Tj,mwo),e(Y_,fwo),e(z,gwo),e(z,K_),e(K_,Lde),e(Lde,hwo),e(K_,uwo),e(K_,Mj),e(Mj,pwo),e(K_,_wo),e(z,bwo),e(z,Z_),e(Z_,xde),e(xde,vwo),e(Z_,Fwo),e(Z_,Ej),e(Ej,Two),e(Z_,Mwo),e(z,Ewo),e(z,eb),e(eb,$de),e($de,Cwo),e(eb,wwo),e(eb,Cj),e(Cj,Awo),e(eb,ywo),e(z,Lwo),e(z,ob),e(ob,kde),e(kde,xwo),e(ob,$wo),e(ob,wj),e(wj,kwo),e(ob,Swo),e(z,Rwo),e(z,rb),e(rb,Sde),e(Sde,Pwo),e(rb,Bwo),e(rb,Aj),e(Aj,Iwo),e(rb,qwo),e(z,Nwo),e(z,tb),e(tb,Rde),e(Rde,jwo),e(tb,Dwo),e(tb,yj),e(yj,Gwo),e(tb,Owo),e(z,Vwo),e(z,ab),e(ab,Pde),e(Pde,Xwo),e(ab,zwo),e(ab,Lj),e(Lj,Wwo),e(ab,Qwo),e(z,Hwo),e(z,nb),e(nb,Bde),e(Bde,Uwo),e(nb,Jwo),e(nb,xj),e(xj,Ywo),e(nb,Kwo),e(z,Zwo),e(z,sb),e(sb,Ide),e(Ide,e0o),e(sb,o0o),e(sb,$j),e($j,r0o),e(sb,t0o),e(z,a0o),e(z,lb),e(lb,qde),e(qde,n0o),e(lb,s0o),e(lb,kj),e(kj,l0o),e(lb,i0o),e(z,d0o),e(z,ib),e(ib,Nde),e(Nde,c0o),e(ib,m0o),e(ib,Sj),e(Sj,f0o),e(ib,g0o),e(z,h0o),e(z,db),e(db,jde),e(jde,u0o),e(db,p0o),e(db,Rj),e(Rj,_0o),e(db,b0o),e(z,v0o),e(z,cb),e(cb,Dde),e(Dde,F0o),e(cb,T0o),e(cb,Pj),e(Pj,M0o),e(cb,E0o),e(z,C0o),e(z,mb),e(mb,Gde),e(Gde,w0o),e(mb,A0o),e(mb,Bj),e(Bj,y0o),e(mb,L0o),e(z,x0o),e(z,fb),e(fb,Ode),e(Ode,$0o),e(fb,k0o),e(fb,Ij),e(Ij,S0o),e(fb,R0o),e(z,P0o),e(z,gb),e(gb,Vde),e(Vde,B0o),e(gb,I0o),e(gb,qj),e(qj,q0o),e(gb,N0o),e(z,j0o),e(z,hb),e(hb,Xde),e(Xde,D0o),e(hb,G0o),e(hb,Nj),e(Nj,O0o),e(hb,V0o),e(z,X0o),e(z,ub),e(ub,zde),e(zde,z0o),e(ub,W0o),e(ub,jj),e(jj,Q0o),e(ub,H0o),e(z,U0o),e(z,pb),e(pb,Wde),e(Wde,J0o),e(pb,Y0o),e(pb,Dj),e(Dj,K0o),e(pb,Z0o),e(z,eAo),e(z,_b),e(_b,Qde),e(Qde,oAo),e(_b,rAo),e(_b,Gj),e(Gj,tAo),e(_b,aAo),e(z,nAo),e(z,bb),e(bb,Hde),e(Hde,sAo),e(bb,lAo),e(bb,Oj),e(Oj,iAo),e(bb,dAo),e(z,cAo),e(z,vb),e(vb,Ude),e(Ude,mAo),e(vb,fAo),e(vb,Vj),e(Vj,gAo),e(vb,hAo),e(z,uAo),e(z,Fb),e(Fb,Jde),e(Jde,pAo),e(Fb,_Ao),e(Fb,Xj),e(Xj,bAo),e(Fb,vAo),e(z,FAo),e(z,Tb),e(Tb,Yde),e(Yde,TAo),e(Tb,MAo),e(Tb,zj),e(zj,EAo),e(Tb,CAo),e(z,wAo),e(z,Mb),e(Mb,Kde),e(Kde,AAo),e(Mb,yAo),e(Mb,Wj),e(Wj,LAo),e(Mb,xAo),e(z,$Ao),e(z,Eb),e(Eb,Zde),e(Zde,kAo),e(Eb,SAo),e(Eb,Qj),e(Qj,RAo),e(Eb,PAo),e(z,BAo),e(z,Cb),e(Cb,ece),e(ece,IAo),e(Cb,qAo),e(Cb,Hj),e(Hj,NAo),e(Cb,jAo),e(z,DAo),e(z,wb),e(wb,oce),e(oce,GAo),e(wb,OAo),e(wb,Uj),e(Uj,VAo),e(wb,XAo),e(z,zAo),e(z,Ab),e(Ab,rce),e(rce,WAo),e(Ab,QAo),e(Ab,Jj),e(Jj,HAo),e(Ab,UAo),e(z,JAo),e(z,yb),e(yb,tce),e(tce,YAo),e(yb,KAo),e(yb,Yj),e(Yj,ZAo),e(yb,e6o),e(z,o6o),e(z,Lb),e(Lb,ace),e(ace,r6o),e(Lb,t6o),e(Lb,Kj),e(Kj,a6o),e(Lb,n6o),e(z,s6o),e(z,xb),e(xb,nce),e(nce,l6o),e(xb,i6o),e(xb,Zj),e(Zj,d6o),e(xb,c6o),e(z,m6o),e(z,$b),e($b,sce),e(sce,f6o),e($b,g6o),e($b,eD),e(eD,h6o),e($b,u6o),e(z,p6o),e(z,kb),e(kb,lce),e(lce,_6o),e(kb,b6o),e(kb,oD),e(oD,v6o),e(kb,F6o),e(z,T6o),e(z,Sb),e(Sb,ice),e(ice,M6o),e(Sb,E6o),e(Sb,rD),e(rD,C6o),e(Sb,w6o),e(z,A6o),e(z,Rb),e(Rb,dce),e(dce,y6o),e(Rb,L6o),e(Rb,tD),e(tD,x6o),e(Rb,$6o),e(Ke,k6o),e(Ke,Pb),e(Pb,S6o),e(Pb,cce),e(cce,R6o),e(Pb,P6o),e(Pb,mce),e(mce,B6o),e(Ke,I6o),M(Bb,Ke,null),b(m,_Ne,_),b(m,Pi,_),e(Pi,Ib),e(Ib,fce),M(hL,fce,null),e(Pi,q6o),e(Pi,gce),e(gce,N6o),b(m,bNe,_),b(m,ko,_),M(uL,ko,null),e(ko,j6o),e(ko,Bi),e(Bi,D6o),e(Bi,aD),e(aD,G6o),e(Bi,O6o),e(Bi,nD),e(nD,V6o),e(Bi,X6o),e(ko,z6o),e(ko,pL),e(pL,W6o),e(pL,hce),e(hce,Q6o),e(pL,H6o),e(ko,U6o),e(ko,st),M(_L,st,null),e(st,J6o),e(st,uce),e(uce,Y6o),e(st,K6o),e(st,Ii),e(Ii,Z6o),e(Ii,pce),e(pce,eyo),e(Ii,oyo),e(Ii,sD),e(sD,ryo),e(Ii,tyo),e(st,ayo),M(qb,st,null),e(ko,nyo),e(ko,Ze),M(bL,Ze,null),e(Ze,syo),e(Ze,_ce),e(_ce,lyo),e(Ze,iyo),e(Ze,ka),e(ka,dyo),e(ka,bce),e(bce,cyo),e(ka,myo),e(ka,vce),e(vce,fyo),e(ka,gyo),e(ka,Fce),e(Fce,hyo),e(ka,uyo),e(Ze,pyo),e(Ze,Q),e(Q,Nb),e(Nb,Tce),e(Tce,_yo),e(Nb,byo),e(Nb,lD),e(lD,vyo),e(Nb,Fyo),e(Q,Tyo),e(Q,jb),e(jb,Mce),e(Mce,Myo),e(jb,Eyo),e(jb,iD),e(iD,Cyo),e(jb,wyo),e(Q,Ayo),e(Q,Db),e(Db,Ece),e(Ece,yyo),e(Db,Lyo),e(Db,dD),e(dD,xyo),e(Db,$yo),e(Q,kyo),e(Q,Gb),e(Gb,Cce),e(Cce,Syo),e(Gb,Ryo),e(Gb,cD),e(cD,Pyo),e(Gb,Byo),e(Q,Iyo),e(Q,Ob),e(Ob,wce),e(wce,qyo),e(Ob,Nyo),e(Ob,mD),e(mD,jyo),e(Ob,Dyo),e(Q,Gyo),e(Q,Vb),e(Vb,Ace),e(Ace,Oyo),e(Vb,Vyo),e(Vb,fD),e(fD,Xyo),e(Vb,zyo),e(Q,Wyo),e(Q,Xb),e(Xb,yce),e(yce,Qyo),e(Xb,Hyo),e(Xb,gD),e(gD,Uyo),e(Xb,Jyo),e(Q,Yyo),e(Q,zb),e(zb,Lce),e(Lce,Kyo),e(zb,Zyo),e(zb,hD),e(hD,eLo),e(zb,oLo),e(Q,rLo),e(Q,Wb),e(Wb,xce),e(xce,tLo),e(Wb,aLo),e(Wb,uD),e(uD,nLo),e(Wb,sLo),e(Q,lLo),e(Q,Qb),e(Qb,$ce),e($ce,iLo),e(Qb,dLo),e(Qb,pD),e(pD,cLo),e(Qb,mLo),e(Q,fLo),e(Q,Hb),e(Hb,kce),e(kce,gLo),e(Hb,hLo),e(Hb,_D),e(_D,uLo),e(Hb,pLo),e(Q,_Lo),e(Q,Ub),e(Ub,Sce),e(Sce,bLo),e(Ub,vLo),e(Ub,bD),e(bD,FLo),e(Ub,TLo),e(Q,MLo),e(Q,Jb),e(Jb,Rce),e(Rce,ELo),e(Jb,CLo),e(Jb,vD),e(vD,wLo),e(Jb,ALo),e(Q,yLo),e(Q,Yb),e(Yb,Pce),e(Pce,LLo),e(Yb,xLo),e(Yb,FD),e(FD,$Lo),e(Yb,kLo),e(Q,SLo),e(Q,Kb),e(Kb,Bce),e(Bce,RLo),e(Kb,PLo),e(Kb,TD),e(TD,BLo),e(Kb,ILo),e(Q,qLo),e(Q,Zb),e(Zb,Ice),e(Ice,NLo),e(Zb,jLo),e(Zb,MD),e(MD,DLo),e(Zb,GLo),e(Q,OLo),e(Q,e2),e(e2,qce),e(qce,VLo),e(e2,XLo),e(e2,ED),e(ED,zLo),e(e2,WLo),e(Q,QLo),e(Q,o2),e(o2,Nce),e(Nce,HLo),e(o2,ULo),e(o2,CD),e(CD,JLo),e(o2,YLo),e(Q,KLo),e(Q,r2),e(r2,jce),e(jce,ZLo),e(r2,e8o),e(r2,wD),e(wD,o8o),e(r2,r8o),e(Q,t8o),e(Q,t2),e(t2,Dce),e(Dce,a8o),e(t2,n8o),e(t2,AD),e(AD,s8o),e(t2,l8o),e(Q,i8o),e(Q,a2),e(a2,Gce),e(Gce,d8o),e(a2,c8o),e(a2,yD),e(yD,m8o),e(a2,f8o),e(Q,g8o),e(Q,n2),e(n2,Oce),e(Oce,h8o),e(n2,u8o),e(n2,LD),e(LD,p8o),e(n2,_8o),e(Q,b8o),e(Q,s2),e(s2,Vce),e(Vce,v8o),e(s2,F8o),e(s2,xD),e(xD,T8o),e(s2,M8o),e(Q,E8o),e(Q,l2),e(l2,Xce),e(Xce,C8o),e(l2,w8o),e(l2,$D),e($D,A8o),e(l2,y8o),e(Q,L8o),e(Q,i2),e(i2,zce),e(zce,x8o),e(i2,$8o),e(i2,kD),e(kD,k8o),e(i2,S8o),e(Q,R8o),e(Q,d2),e(d2,Wce),e(Wce,P8o),e(d2,B8o),e(d2,SD),e(SD,I8o),e(d2,q8o),e(Q,N8o),e(Q,c2),e(c2,Qce),e(Qce,j8o),e(c2,D8o),e(c2,RD),e(RD,G8o),e(c2,O8o),e(Q,V8o),e(Q,m2),e(m2,Hce),e(Hce,X8o),e(m2,z8o),e(m2,PD),e(PD,W8o),e(m2,Q8o),e(Q,H8o),e(Q,f2),e(f2,Uce),e(Uce,U8o),e(f2,J8o),e(f2,BD),e(BD,Y8o),e(f2,K8o),e(Q,Z8o),e(Q,g2),e(g2,Jce),e(Jce,e7o),e(g2,o7o),e(g2,ID),e(ID,r7o),e(g2,t7o),e(Q,a7o),e(Q,h2),e(h2,Yce),e(Yce,n7o),e(h2,s7o),e(h2,Kce),e(Kce,l7o),e(h2,i7o),e(Q,d7o),e(Q,u2),e(u2,Zce),e(Zce,c7o),e(u2,m7o),e(u2,qD),e(qD,f7o),e(u2,g7o),e(Q,h7o),e(Q,p2),e(p2,eme),e(eme,u7o),e(p2,p7o),e(p2,ND),e(ND,_7o),e(p2,b7o),e(Q,v7o),e(Q,_2),e(_2,ome),e(ome,F7o),e(_2,T7o),e(_2,jD),e(jD,M7o),e(_2,E7o),e(Q,C7o),e(Q,b2),e(b2,rme),e(rme,w7o),e(b2,A7o),e(b2,DD),e(DD,y7o),e(b2,L7o),e(Ze,x7o),e(Ze,v2),e(v2,$7o),e(v2,tme),e(tme,k7o),e(v2,S7o),e(v2,ame),e(ame,R7o),e(Ze,P7o),M(F2,Ze,null),b(m,vNe,_),b(m,qi,_),e(qi,T2),e(T2,nme),M(vL,nme,null),e(qi,B7o),e(qi,sme),e(sme,I7o),b(m,FNe,_),b(m,So,_),M(FL,So,null),e(So,q7o),e(So,Ni),e(Ni,N7o),e(Ni,GD),e(GD,j7o),e(Ni,D7o),e(Ni,OD),e(OD,G7o),e(Ni,O7o),e(So,V7o),e(So,TL),e(TL,X7o),e(TL,lme),e(lme,z7o),e(TL,W7o),e(So,Q7o),e(So,lt),M(ML,lt,null),e(lt,H7o),e(lt,ime),e(ime,U7o),e(lt,J7o),e(lt,ji),e(ji,Y7o),e(ji,dme),e(dme,K7o),e(ji,Z7o),e(ji,VD),e(VD,e9o),e(ji,o9o),e(lt,r9o),M(M2,lt,null),e(So,t9o),e(So,eo),M(EL,eo,null),e(eo,a9o),e(eo,cme),e(cme,n9o),e(eo,s9o),e(eo,Sa),e(Sa,l9o),e(Sa,mme),e(mme,i9o),e(Sa,d9o),e(Sa,fme),e(fme,c9o),e(Sa,m9o),e(Sa,gme),e(gme,f9o),e(Sa,g9o),e(eo,h9o),e(eo,pe),e(pe,E2),e(E2,hme),e(hme,u9o),e(E2,p9o),e(E2,XD),e(XD,_9o),e(E2,b9o),e(pe,v9o),e(pe,C2),e(C2,ume),e(ume,F9o),e(C2,T9o),e(C2,zD),e(zD,M9o),e(C2,E9o),e(pe,C9o),e(pe,w2),e(w2,pme),e(pme,w9o),e(w2,A9o),e(w2,WD),e(WD,y9o),e(w2,L9o),e(pe,x9o),e(pe,A2),e(A2,_me),e(_me,$9o),e(A2,k9o),e(A2,QD),e(QD,S9o),e(A2,R9o),e(pe,P9o),e(pe,y2),e(y2,bme),e(bme,B9o),e(y2,I9o),e(y2,HD),e(HD,q9o),e(y2,N9o),e(pe,j9o),e(pe,L2),e(L2,vme),e(vme,D9o),e(L2,G9o),e(L2,UD),e(UD,O9o),e(L2,V9o),e(pe,X9o),e(pe,x2),e(x2,Fme),e(Fme,z9o),e(x2,W9o),e(x2,JD),e(JD,Q9o),e(x2,H9o),e(pe,U9o),e(pe,$2),e($2,Tme),e(Tme,J9o),e($2,Y9o),e($2,YD),e(YD,K9o),e($2,Z9o),e(pe,exo),e(pe,k2),e(k2,Mme),e(Mme,oxo),e(k2,rxo),e(k2,KD),e(KD,txo),e(k2,axo),e(pe,nxo),e(pe,S2),e(S2,Eme),e(Eme,sxo),e(S2,lxo),e(S2,ZD),e(ZD,ixo),e(S2,dxo),e(pe,cxo),e(pe,R2),e(R2,Cme),e(Cme,mxo),e(R2,fxo),e(R2,eG),e(eG,gxo),e(R2,hxo),e(pe,uxo),e(pe,P2),e(P2,wme),e(wme,pxo),e(P2,_xo),e(P2,oG),e(oG,bxo),e(P2,vxo),e(pe,Fxo),e(pe,B2),e(B2,Ame),e(Ame,Txo),e(B2,Mxo),e(B2,rG),e(rG,Exo),e(B2,Cxo),e(pe,wxo),e(pe,I2),e(I2,yme),e(yme,Axo),e(I2,yxo),e(I2,tG),e(tG,Lxo),e(I2,xxo),e(pe,$xo),e(pe,q2),e(q2,Lme),e(Lme,kxo),e(q2,Sxo),e(q2,aG),e(aG,Rxo),e(q2,Pxo),e(pe,Bxo),e(pe,N2),e(N2,xme),e(xme,Ixo),e(N2,qxo),e(N2,nG),e(nG,Nxo),e(N2,jxo),e(eo,Dxo),e(eo,j2),e(j2,Gxo),e(j2,$me),e($me,Oxo),e(j2,Vxo),e(j2,kme),e(kme,Xxo),e(eo,zxo),M(D2,eo,null),b(m,TNe,_),b(m,Di,_),e(Di,G2),e(G2,Sme),M(CL,Sme,null),e(Di,Wxo),e(Di,Rme),e(Rme,Qxo),b(m,MNe,_),b(m,Ro,_),M(wL,Ro,null),e(Ro,Hxo),e(Ro,Gi),e(Gi,Uxo),e(Gi,sG),e(sG,Jxo),e(Gi,Yxo),e(Gi,lG),e(lG,Kxo),e(Gi,Zxo),e(Ro,e$o),e(Ro,AL),e(AL,o$o),e(AL,Pme),e(Pme,r$o),e(AL,t$o),e(Ro,a$o),e(Ro,it),M(yL,it,null),e(it,n$o),e(it,Bme),e(Bme,s$o),e(it,l$o),e(it,Oi),e(Oi,i$o),e(Oi,Ime),e(Ime,d$o),e(Oi,c$o),e(Oi,iG),e(iG,m$o),e(Oi,f$o),e(it,g$o),M(O2,it,null),e(Ro,h$o),e(Ro,oo),M(LL,oo,null),e(oo,u$o),e(oo,qme),e(qme,p$o),e(oo,_$o),e(oo,Ra),e(Ra,b$o),e(Ra,Nme),e(Nme,v$o),e(Ra,F$o),e(Ra,jme),e(jme,T$o),e(Ra,M$o),e(Ra,Dme),e(Dme,E$o),e(Ra,C$o),e(oo,w$o),e(oo,q),e(q,V2),e(V2,Gme),e(Gme,A$o),e(V2,y$o),e(V2,dG),e(dG,L$o),e(V2,x$o),e(q,$$o),e(q,X2),e(X2,Ome),e(Ome,k$o),e(X2,S$o),e(X2,cG),e(cG,R$o),e(X2,P$o),e(q,B$o),e(q,z2),e(z2,Vme),e(Vme,I$o),e(z2,q$o),e(z2,mG),e(mG,N$o),e(z2,j$o),e(q,D$o),e(q,W2),e(W2,Xme),e(Xme,G$o),e(W2,O$o),e(W2,fG),e(fG,V$o),e(W2,X$o),e(q,z$o),e(q,Q2),e(Q2,zme),e(zme,W$o),e(Q2,Q$o),e(Q2,gG),e(gG,H$o),e(Q2,U$o),e(q,J$o),e(q,H2),e(H2,Wme),e(Wme,Y$o),e(H2,K$o),e(H2,hG),e(hG,Z$o),e(H2,eko),e(q,oko),e(q,U2),e(U2,Qme),e(Qme,rko),e(U2,tko),e(U2,uG),e(uG,ako),e(U2,nko),e(q,sko),e(q,J2),e(J2,Hme),e(Hme,lko),e(J2,iko),e(J2,pG),e(pG,dko),e(J2,cko),e(q,mko),e(q,Y2),e(Y2,Ume),e(Ume,fko),e(Y2,gko),e(Y2,_G),e(_G,hko),e(Y2,uko),e(q,pko),e(q,K2),e(K2,Jme),e(Jme,_ko),e(K2,bko),e(K2,bG),e(bG,vko),e(K2,Fko),e(q,Tko),e(q,Z2),e(Z2,Yme),e(Yme,Mko),e(Z2,Eko),e(Z2,vG),e(vG,Cko),e(Z2,wko),e(q,Ako),e(q,ev),e(ev,Kme),e(Kme,yko),e(ev,Lko),e(ev,FG),e(FG,xko),e(ev,$ko),e(q,kko),e(q,ov),e(ov,Zme),e(Zme,Sko),e(ov,Rko),e(ov,TG),e(TG,Pko),e(ov,Bko),e(q,Iko),e(q,rv),e(rv,efe),e(efe,qko),e(rv,Nko),e(rv,MG),e(MG,jko),e(rv,Dko),e(q,Gko),e(q,tv),e(tv,ofe),e(ofe,Oko),e(tv,Vko),e(tv,EG),e(EG,Xko),e(tv,zko),e(q,Wko),e(q,av),e(av,rfe),e(rfe,Qko),e(av,Hko),e(av,CG),e(CG,Uko),e(av,Jko),e(q,Yko),e(q,nv),e(nv,tfe),e(tfe,Kko),e(nv,Zko),e(nv,wG),e(wG,eSo),e(nv,oSo),e(q,rSo),e(q,sv),e(sv,afe),e(afe,tSo),e(sv,aSo),e(sv,AG),e(AG,nSo),e(sv,sSo),e(q,lSo),e(q,lv),e(lv,nfe),e(nfe,iSo),e(lv,dSo),e(lv,yG),e(yG,cSo),e(lv,mSo),e(q,fSo),e(q,iv),e(iv,sfe),e(sfe,gSo),e(iv,hSo),e(iv,LG),e(LG,uSo),e(iv,pSo),e(q,_So),e(q,dv),e(dv,lfe),e(lfe,bSo),e(dv,vSo),e(dv,xG),e(xG,FSo),e(dv,TSo),e(q,MSo),e(q,cv),e(cv,ife),e(ife,ESo),e(cv,CSo),e(cv,$G),e($G,wSo),e(cv,ASo),e(q,ySo),e(q,mv),e(mv,dfe),e(dfe,LSo),e(mv,xSo),e(mv,kG),e(kG,$So),e(mv,kSo),e(q,SSo),e(q,fv),e(fv,cfe),e(cfe,RSo),e(fv,PSo),e(fv,SG),e(SG,BSo),e(fv,ISo),e(q,qSo),e(q,gv),e(gv,mfe),e(mfe,NSo),e(gv,jSo),e(gv,RG),e(RG,DSo),e(gv,GSo),e(q,OSo),e(q,hv),e(hv,ffe),e(ffe,VSo),e(hv,XSo),e(hv,PG),e(PG,zSo),e(hv,WSo),e(q,QSo),e(q,uv),e(uv,gfe),e(gfe,HSo),e(uv,USo),e(uv,BG),e(BG,JSo),e(uv,YSo),e(q,KSo),e(q,pv),e(pv,hfe),e(hfe,ZSo),e(pv,eRo),e(pv,IG),e(IG,oRo),e(pv,rRo),e(q,tRo),e(q,_v),e(_v,ufe),e(ufe,aRo),e(_v,nRo),e(_v,qG),e(qG,sRo),e(_v,lRo),e(q,iRo),e(q,bv),e(bv,pfe),e(pfe,dRo),e(bv,cRo),e(bv,NG),e(NG,mRo),e(bv,fRo),e(q,gRo),e(q,vv),e(vv,_fe),e(_fe,hRo),e(vv,uRo),e(vv,jG),e(jG,pRo),e(vv,_Ro),e(q,bRo),e(q,Fv),e(Fv,bfe),e(bfe,vRo),e(Fv,FRo),e(Fv,DG),e(DG,TRo),e(Fv,MRo),e(q,ERo),e(q,Tv),e(Tv,vfe),e(vfe,CRo),e(Tv,wRo),e(Tv,GG),e(GG,ARo),e(Tv,yRo),e(q,LRo),e(q,Mv),e(Mv,Ffe),e(Ffe,xRo),e(Mv,$Ro),e(Mv,OG),e(OG,kRo),e(Mv,SRo),e(q,RRo),e(q,Ev),e(Ev,Tfe),e(Tfe,PRo),e(Ev,BRo),e(Ev,VG),e(VG,IRo),e(Ev,qRo),e(q,NRo),e(q,Cv),e(Cv,Mfe),e(Mfe,jRo),e(Cv,DRo),e(Cv,XG),e(XG,GRo),e(Cv,ORo),e(q,VRo),e(q,wv),e(wv,Efe),e(Efe,XRo),e(wv,zRo),e(wv,zG),e(zG,WRo),e(wv,QRo),e(q,HRo),e(q,Av),e(Av,Cfe),e(Cfe,URo),e(Av,JRo),e(Av,WG),e(WG,YRo),e(Av,KRo),e(q,ZRo),e(q,yv),e(yv,wfe),e(wfe,ePo),e(yv,oPo),e(yv,QG),e(QG,rPo),e(yv,tPo),e(q,aPo),e(q,Lv),e(Lv,Afe),e(Afe,nPo),e(Lv,sPo),e(Lv,HG),e(HG,lPo),e(Lv,iPo),e(q,dPo),e(q,xv),e(xv,yfe),e(yfe,cPo),e(xv,mPo),e(xv,UG),e(UG,fPo),e(xv,gPo),e(q,hPo),e(q,$v),e($v,Lfe),e(Lfe,uPo),e($v,pPo),e($v,JG),e(JG,_Po),e($v,bPo),e(q,vPo),e(q,kv),e(kv,xfe),e(xfe,FPo),e(kv,TPo),e(kv,YG),e(YG,MPo),e(kv,EPo),e(q,CPo),e(q,Sv),e(Sv,$fe),e($fe,wPo),e(Sv,APo),e(Sv,KG),e(KG,yPo),e(Sv,LPo),e(q,xPo),e(q,Rv),e(Rv,kfe),e(kfe,$Po),e(Rv,kPo),e(Rv,ZG),e(ZG,SPo),e(Rv,RPo),e(q,PPo),e(q,Pv),e(Pv,Sfe),e(Sfe,BPo),e(Pv,IPo),e(Pv,eO),e(eO,qPo),e(Pv,NPo),e(q,jPo),e(q,Bv),e(Bv,Rfe),e(Rfe,DPo),e(Bv,GPo),e(Bv,oO),e(oO,OPo),e(Bv,VPo),e(oo,XPo),e(oo,Iv),e(Iv,zPo),e(Iv,Pfe),e(Pfe,WPo),e(Iv,QPo),e(Iv,Bfe),e(Bfe,HPo),e(oo,UPo),M(qv,oo,null),b(m,ENe,_),b(m,Vi,_),e(Vi,Nv),e(Nv,Ife),M(xL,Ife,null),e(Vi,JPo),e(Vi,qfe),e(qfe,YPo),b(m,CNe,_),b(m,Po,_),M($L,Po,null),e(Po,KPo),e(Po,Xi),e(Xi,ZPo),e(Xi,rO),e(rO,eBo),e(Xi,oBo),e(Xi,tO),e(tO,rBo),e(Xi,tBo),e(Po,aBo),e(Po,kL),e(kL,nBo),e(kL,Nfe),e(Nfe,sBo),e(kL,lBo),e(Po,iBo),e(Po,dt),M(SL,dt,null),e(dt,dBo),e(dt,jfe),e(jfe,cBo),e(dt,mBo),e(dt,zi),e(zi,fBo),e(zi,Dfe),e(Dfe,gBo),e(zi,hBo),e(zi,aO),e(aO,uBo),e(zi,pBo),e(dt,_Bo),M(jv,dt,null),e(Po,bBo),e(Po,ro),M(RL,ro,null),e(ro,vBo),e(ro,Gfe),e(Gfe,FBo),e(ro,TBo),e(ro,Pa),e(Pa,MBo),e(Pa,Ofe),e(Ofe,EBo),e(Pa,CBo),e(Pa,Vfe),e(Vfe,wBo),e(Pa,ABo),e(Pa,Xfe),e(Xfe,yBo),e(Pa,LBo),e(ro,xBo),e(ro,K),e(K,Dv),e(Dv,zfe),e(zfe,$Bo),e(Dv,kBo),e(Dv,nO),e(nO,SBo),e(Dv,RBo),e(K,PBo),e(K,Gv),e(Gv,Wfe),e(Wfe,BBo),e(Gv,IBo),e(Gv,sO),e(sO,qBo),e(Gv,NBo),e(K,jBo),e(K,Ov),e(Ov,Qfe),e(Qfe,DBo),e(Ov,GBo),e(Ov,lO),e(lO,OBo),e(Ov,VBo),e(K,XBo),e(K,Vv),e(Vv,Hfe),e(Hfe,zBo),e(Vv,WBo),e(Vv,iO),e(iO,QBo),e(Vv,HBo),e(K,UBo),e(K,Xv),e(Xv,Ufe),e(Ufe,JBo),e(Xv,YBo),e(Xv,dO),e(dO,KBo),e(Xv,ZBo),e(K,eIo),e(K,zv),e(zv,Jfe),e(Jfe,oIo),e(zv,rIo),e(zv,cO),e(cO,tIo),e(zv,aIo),e(K,nIo),e(K,Wv),e(Wv,Yfe),e(Yfe,sIo),e(Wv,lIo),e(Wv,mO),e(mO,iIo),e(Wv,dIo),e(K,cIo),e(K,Qv),e(Qv,Kfe),e(Kfe,mIo),e(Qv,fIo),e(Qv,fO),e(fO,gIo),e(Qv,hIo),e(K,uIo),e(K,Hv),e(Hv,Zfe),e(Zfe,pIo),e(Hv,_Io),e(Hv,gO),e(gO,bIo),e(Hv,vIo),e(K,FIo),e(K,Uv),e(Uv,ege),e(ege,TIo),e(Uv,MIo),e(Uv,hO),e(hO,EIo),e(Uv,CIo),e(K,wIo),e(K,Jv),e(Jv,oge),e(oge,AIo),e(Jv,yIo),e(Jv,uO),e(uO,LIo),e(Jv,xIo),e(K,$Io),e(K,Yv),e(Yv,rge),e(rge,kIo),e(Yv,SIo),e(Yv,pO),e(pO,RIo),e(Yv,PIo),e(K,BIo),e(K,Kv),e(Kv,tge),e(tge,IIo),e(Kv,qIo),e(Kv,_O),e(_O,NIo),e(Kv,jIo),e(K,DIo),e(K,Zv),e(Zv,age),e(age,GIo),e(Zv,OIo),e(Zv,bO),e(bO,VIo),e(Zv,XIo),e(K,zIo),e(K,eF),e(eF,nge),e(nge,WIo),e(eF,QIo),e(eF,vO),e(vO,HIo),e(eF,UIo),e(K,JIo),e(K,oF),e(oF,sge),e(sge,YIo),e(oF,KIo),e(oF,FO),e(FO,ZIo),e(oF,eqo),e(K,oqo),e(K,rF),e(rF,lge),e(lge,rqo),e(rF,tqo),e(rF,TO),e(TO,aqo),e(rF,nqo),e(K,sqo),e(K,tF),e(tF,ige),e(ige,lqo),e(tF,iqo),e(tF,MO),e(MO,dqo),e(tF,cqo),e(K,mqo),e(K,aF),e(aF,dge),e(dge,fqo),e(aF,gqo),e(aF,EO),e(EO,hqo),e(aF,uqo),e(K,pqo),e(K,nF),e(nF,cge),e(cge,_qo),e(nF,bqo),e(nF,CO),e(CO,vqo),e(nF,Fqo),e(K,Tqo),e(K,sF),e(sF,mge),e(mge,Mqo),e(sF,Eqo),e(sF,wO),e(wO,Cqo),e(sF,wqo),e(K,Aqo),e(K,lF),e(lF,fge),e(fge,yqo),e(lF,Lqo),e(lF,AO),e(AO,xqo),e(lF,$qo),e(K,kqo),e(K,iF),e(iF,gge),e(gge,Sqo),e(iF,Rqo),e(iF,yO),e(yO,Pqo),e(iF,Bqo),e(K,Iqo),e(K,dF),e(dF,hge),e(hge,qqo),e(dF,Nqo),e(dF,LO),e(LO,jqo),e(dF,Dqo),e(K,Gqo),e(K,cF),e(cF,uge),e(uge,Oqo),e(cF,Vqo),e(cF,xO),e(xO,Xqo),e(cF,zqo),e(K,Wqo),e(K,mF),e(mF,pge),e(pge,Qqo),e(mF,Hqo),e(mF,$O),e($O,Uqo),e(mF,Jqo),e(K,Yqo),e(K,fF),e(fF,_ge),e(_ge,Kqo),e(fF,Zqo),e(fF,kO),e(kO,eNo),e(fF,oNo),e(K,rNo),e(K,gF),e(gF,bge),e(bge,tNo),e(gF,aNo),e(gF,SO),e(SO,nNo),e(gF,sNo),e(K,lNo),e(K,hF),e(hF,vge),e(vge,iNo),e(hF,dNo),e(hF,RO),e(RO,cNo),e(hF,mNo),e(ro,fNo),e(ro,uF),e(uF,gNo),e(uF,Fge),e(Fge,hNo),e(uF,uNo),e(uF,Tge),e(Tge,pNo),e(ro,_No),M(pF,ro,null),b(m,wNe,_),b(m,Wi,_),e(Wi,_F),e(_F,Mge),M(PL,Mge,null),e(Wi,bNo),e(Wi,Ege),e(Ege,vNo),b(m,ANe,_),b(m,Bo,_),M(BL,Bo,null),e(Bo,FNo),e(Bo,Qi),e(Qi,TNo),e(Qi,PO),e(PO,MNo),e(Qi,ENo),e(Qi,BO),e(BO,CNo),e(Qi,wNo),e(Bo,ANo),e(Bo,IL),e(IL,yNo),e(IL,Cge),e(Cge,LNo),e(IL,xNo),e(Bo,$No),e(Bo,ct),M(qL,ct,null),e(ct,kNo),e(ct,wge),e(wge,SNo),e(ct,RNo),e(ct,Hi),e(Hi,PNo),e(Hi,Age),e(Age,BNo),e(Hi,INo),e(Hi,IO),e(IO,qNo),e(Hi,NNo),e(ct,jNo),M(bF,ct,null),e(Bo,DNo),e(Bo,to),M(NL,to,null),e(to,GNo),e(to,yge),e(yge,ONo),e(to,VNo),e(to,Ba),e(Ba,XNo),e(Ba,Lge),e(Lge,zNo),e(Ba,WNo),e(Ba,xge),e(xge,QNo),e(Ba,HNo),e(Ba,$ge),e($ge,UNo),e(Ba,JNo),e(to,YNo),e(to,Yr),e(Yr,vF),e(vF,kge),e(kge,KNo),e(vF,ZNo),e(vF,qO),e(qO,ejo),e(vF,ojo),e(Yr,rjo),e(Yr,FF),e(FF,Sge),e(Sge,tjo),e(FF,ajo),e(FF,NO),e(NO,njo),e(FF,sjo),e(Yr,ljo),e(Yr,TF),e(TF,Rge),e(Rge,ijo),e(TF,djo),e(TF,jO),e(jO,cjo),e(TF,mjo),e(Yr,fjo),e(Yr,MF),e(MF,Pge),e(Pge,gjo),e(MF,hjo),e(MF,DO),e(DO,ujo),e(MF,pjo),e(Yr,_jo),e(Yr,EF),e(EF,Bge),e(Bge,bjo),e(EF,vjo),e(EF,GO),e(GO,Fjo),e(EF,Tjo),e(to,Mjo),e(to,CF),e(CF,Ejo),e(CF,Ige),e(Ige,Cjo),e(CF,wjo),e(CF,qge),e(qge,Ajo),e(to,yjo),M(wF,to,null),b(m,yNe,_),b(m,Ui,_),e(Ui,AF),e(AF,Nge),M(jL,Nge,null),e(Ui,Ljo),e(Ui,jge),e(jge,xjo),b(m,LNe,_),b(m,Io,_),M(DL,Io,null),e(Io,$jo),e(Io,Ji),e(Ji,kjo),e(Ji,OO),e(OO,Sjo),e(Ji,Rjo),e(Ji,VO),e(VO,Pjo),e(Ji,Bjo),e(Io,Ijo),e(Io,GL),e(GL,qjo),e(GL,Dge),e(Dge,Njo),e(GL,jjo),e(Io,Djo),e(Io,mt),M(OL,mt,null),e(mt,Gjo),e(mt,Gge),e(Gge,Ojo),e(mt,Vjo),e(mt,Yi),e(Yi,Xjo),e(Yi,Oge),e(Oge,zjo),e(Yi,Wjo),e(Yi,XO),e(XO,Qjo),e(Yi,Hjo),e(mt,Ujo),M(yF,mt,null),e(Io,Jjo),e(Io,ao),M(VL,ao,null),e(ao,Yjo),e(ao,Vge),e(Vge,Kjo),e(ao,Zjo),e(ao,Ia),e(Ia,eDo),e(Ia,Xge),e(Xge,oDo),e(Ia,rDo),e(Ia,zge),e(zge,tDo),e(Ia,aDo),e(Ia,Wge),e(Wge,nDo),e(Ia,sDo),e(ao,lDo),e(ao,H),e(H,LF),e(LF,Qge),e(Qge,iDo),e(LF,dDo),e(LF,zO),e(zO,cDo),e(LF,mDo),e(H,fDo),e(H,xF),e(xF,Hge),e(Hge,gDo),e(xF,hDo),e(xF,WO),e(WO,uDo),e(xF,pDo),e(H,_Do),e(H,$F),e($F,Uge),e(Uge,bDo),e($F,vDo),e($F,QO),e(QO,FDo),e($F,TDo),e(H,MDo),e(H,kF),e(kF,Jge),e(Jge,EDo),e(kF,CDo),e(kF,HO),e(HO,wDo),e(kF,ADo),e(H,yDo),e(H,SF),e(SF,Yge),e(Yge,LDo),e(SF,xDo),e(SF,UO),e(UO,$Do),e(SF,kDo),e(H,SDo),e(H,RF),e(RF,Kge),e(Kge,RDo),e(RF,PDo),e(RF,JO),e(JO,BDo),e(RF,IDo),e(H,qDo),e(H,PF),e(PF,Zge),e(Zge,NDo),e(PF,jDo),e(PF,YO),e(YO,DDo),e(PF,GDo),e(H,ODo),e(H,BF),e(BF,ehe),e(ehe,VDo),e(BF,XDo),e(BF,KO),e(KO,zDo),e(BF,WDo),e(H,QDo),e(H,IF),e(IF,ohe),e(ohe,HDo),e(IF,UDo),e(IF,ZO),e(ZO,JDo),e(IF,YDo),e(H,KDo),e(H,qF),e(qF,rhe),e(rhe,ZDo),e(qF,eGo),e(qF,eV),e(eV,oGo),e(qF,rGo),e(H,tGo),e(H,NF),e(NF,the),e(the,aGo),e(NF,nGo),e(NF,oV),e(oV,sGo),e(NF,lGo),e(H,iGo),e(H,jF),e(jF,ahe),e(ahe,dGo),e(jF,cGo),e(jF,rV),e(rV,mGo),e(jF,fGo),e(H,gGo),e(H,DF),e(DF,nhe),e(nhe,hGo),e(DF,uGo),e(DF,tV),e(tV,pGo),e(DF,_Go),e(H,bGo),e(H,GF),e(GF,she),e(she,vGo),e(GF,FGo),e(GF,aV),e(aV,TGo),e(GF,MGo),e(H,EGo),e(H,OF),e(OF,lhe),e(lhe,CGo),e(OF,wGo),e(OF,nV),e(nV,AGo),e(OF,yGo),e(H,LGo),e(H,VF),e(VF,ihe),e(ihe,xGo),e(VF,$Go),e(VF,sV),e(sV,kGo),e(VF,SGo),e(H,RGo),e(H,XF),e(XF,dhe),e(dhe,PGo),e(XF,BGo),e(XF,lV),e(lV,IGo),e(XF,qGo),e(H,NGo),e(H,zF),e(zF,che),e(che,jGo),e(zF,DGo),e(zF,iV),e(iV,GGo),e(zF,OGo),e(H,VGo),e(H,WF),e(WF,mhe),e(mhe,XGo),e(WF,zGo),e(WF,dV),e(dV,WGo),e(WF,QGo),e(H,HGo),e(H,QF),e(QF,fhe),e(fhe,UGo),e(QF,JGo),e(QF,cV),e(cV,YGo),e(QF,KGo),e(H,ZGo),e(H,HF),e(HF,ghe),e(ghe,eOo),e(HF,oOo),e(HF,mV),e(mV,rOo),e(HF,tOo),e(H,aOo),e(H,UF),e(UF,hhe),e(hhe,nOo),e(UF,sOo),e(UF,fV),e(fV,lOo),e(UF,iOo),e(H,dOo),e(H,JF),e(JF,uhe),e(uhe,cOo),e(JF,mOo),e(JF,gV),e(gV,fOo),e(JF,gOo),e(H,hOo),e(H,YF),e(YF,phe),e(phe,uOo),e(YF,pOo),e(YF,hV),e(hV,_Oo),e(YF,bOo),e(H,vOo),e(H,KF),e(KF,_he),e(_he,FOo),e(KF,TOo),e(KF,uV),e(uV,MOo),e(KF,EOo),e(H,COo),e(H,ZF),e(ZF,bhe),e(bhe,wOo),e(ZF,AOo),e(ZF,pV),e(pV,yOo),e(ZF,LOo),e(H,xOo),e(H,e1),e(e1,vhe),e(vhe,$Oo),e(e1,kOo),e(e1,_V),e(_V,SOo),e(e1,ROo),e(H,POo),e(H,o1),e(o1,Fhe),e(Fhe,BOo),e(o1,IOo),e(o1,bV),e(bV,qOo),e(o1,NOo),e(H,jOo),e(H,r1),e(r1,The),e(The,DOo),e(r1,GOo),e(r1,vV),e(vV,OOo),e(r1,VOo),e(H,XOo),e(H,t1),e(t1,Mhe),e(Mhe,zOo),e(t1,WOo),e(t1,FV),e(FV,QOo),e(t1,HOo),e(H,UOo),e(H,a1),e(a1,Ehe),e(Ehe,JOo),e(a1,YOo),e(a1,TV),e(TV,KOo),e(a1,ZOo),e(H,eVo),e(H,n1),e(n1,Che),e(Che,oVo),e(n1,rVo),e(n1,MV),e(MV,tVo),e(n1,aVo),e(H,nVo),e(H,s1),e(s1,whe),e(whe,sVo),e(s1,lVo),e(s1,EV),e(EV,iVo),e(s1,dVo),e(H,cVo),e(H,l1),e(l1,Ahe),e(Ahe,mVo),e(l1,fVo),e(l1,CV),e(CV,gVo),e(l1,hVo),e(ao,uVo),e(ao,i1),e(i1,pVo),e(i1,yhe),e(yhe,_Vo),e(i1,bVo),e(i1,Lhe),e(Lhe,vVo),e(ao,FVo),M(d1,ao,null),b(m,xNe,_),b(m,Ki,_),e(Ki,c1),e(c1,xhe),M(XL,xhe,null),e(Ki,TVo),e(Ki,$he),e($he,MVo),b(m,$Ne,_),b(m,qo,_),M(zL,qo,null),e(qo,EVo),e(qo,Zi),e(Zi,CVo),e(Zi,wV),e(wV,wVo),e(Zi,AVo),e(Zi,AV),e(AV,yVo),e(Zi,LVo),e(qo,xVo),e(qo,WL),e(WL,$Vo),e(WL,khe),e(khe,kVo),e(WL,SVo),e(qo,RVo),e(qo,ft),M(QL,ft,null),e(ft,PVo),e(ft,She),e(She,BVo),e(ft,IVo),e(ft,ed),e(ed,qVo),e(ed,Rhe),e(Rhe,NVo),e(ed,jVo),e(ed,yV),e(yV,DVo),e(ed,GVo),e(ft,OVo),M(m1,ft,null),e(qo,VVo),e(qo,no),M(HL,no,null),e(no,XVo),e(no,Phe),e(Phe,zVo),e(no,WVo),e(no,qa),e(qa,QVo),e(qa,Bhe),e(Bhe,HVo),e(qa,UVo),e(qa,Ihe),e(Ihe,JVo),e(qa,YVo),e(qa,qhe),e(qhe,KVo),e(qa,ZVo),e(no,eXo),e(no,V),e(V,f1),e(f1,Nhe),e(Nhe,oXo),e(f1,rXo),e(f1,LV),e(LV,tXo),e(f1,aXo),e(V,nXo),e(V,g1),e(g1,jhe),e(jhe,sXo),e(g1,lXo),e(g1,xV),e(xV,iXo),e(g1,dXo),e(V,cXo),e(V,h1),e(h1,Dhe),e(Dhe,mXo),e(h1,fXo),e(h1,$V),e($V,gXo),e(h1,hXo),e(V,uXo),e(V,u1),e(u1,Ghe),e(Ghe,pXo),e(u1,_Xo),e(u1,kV),e(kV,bXo),e(u1,vXo),e(V,FXo),e(V,p1),e(p1,Ohe),e(Ohe,TXo),e(p1,MXo),e(p1,SV),e(SV,EXo),e(p1,CXo),e(V,wXo),e(V,_1),e(_1,Vhe),e(Vhe,AXo),e(_1,yXo),e(_1,RV),e(RV,LXo),e(_1,xXo),e(V,$Xo),e(V,b1),e(b1,Xhe),e(Xhe,kXo),e(b1,SXo),e(b1,PV),e(PV,RXo),e(b1,PXo),e(V,BXo),e(V,v1),e(v1,zhe),e(zhe,IXo),e(v1,qXo),e(v1,BV),e(BV,NXo),e(v1,jXo),e(V,DXo),e(V,F1),e(F1,Whe),e(Whe,GXo),e(F1,OXo),e(F1,IV),e(IV,VXo),e(F1,XXo),e(V,zXo),e(V,T1),e(T1,Qhe),e(Qhe,WXo),e(T1,QXo),e(T1,qV),e(qV,HXo),e(T1,UXo),e(V,JXo),e(V,M1),e(M1,Hhe),e(Hhe,YXo),e(M1,KXo),e(M1,NV),e(NV,ZXo),e(M1,ezo),e(V,ozo),e(V,E1),e(E1,Uhe),e(Uhe,rzo),e(E1,tzo),e(E1,jV),e(jV,azo),e(E1,nzo),e(V,szo),e(V,C1),e(C1,Jhe),e(Jhe,lzo),e(C1,izo),e(C1,DV),e(DV,dzo),e(C1,czo),e(V,mzo),e(V,w1),e(w1,Yhe),e(Yhe,fzo),e(w1,gzo),e(w1,GV),e(GV,hzo),e(w1,uzo),e(V,pzo),e(V,A1),e(A1,Khe),e(Khe,_zo),e(A1,bzo),e(A1,OV),e(OV,vzo),e(A1,Fzo),e(V,Tzo),e(V,y1),e(y1,Zhe),e(Zhe,Mzo),e(y1,Ezo),e(y1,VV),e(VV,Czo),e(y1,wzo),e(V,Azo),e(V,L1),e(L1,eue),e(eue,yzo),e(L1,Lzo),e(L1,XV),e(XV,xzo),e(L1,$zo),e(V,kzo),e(V,x1),e(x1,oue),e(oue,Szo),e(x1,Rzo),e(x1,zV),e(zV,Pzo),e(x1,Bzo),e(V,Izo),e(V,$1),e($1,rue),e(rue,qzo),e($1,Nzo),e($1,WV),e(WV,jzo),e($1,Dzo),e(V,Gzo),e(V,k1),e(k1,tue),e(tue,Ozo),e(k1,Vzo),e(k1,QV),e(QV,Xzo),e(k1,zzo),e(V,Wzo),e(V,S1),e(S1,aue),e(aue,Qzo),e(S1,Hzo),e(S1,HV),e(HV,Uzo),e(S1,Jzo),e(V,Yzo),e(V,R1),e(R1,nue),e(nue,Kzo),e(R1,Zzo),e(R1,UV),e(UV,eWo),e(R1,oWo),e(V,rWo),e(V,P1),e(P1,sue),e(sue,tWo),e(P1,aWo),e(P1,JV),e(JV,nWo),e(P1,sWo),e(V,lWo),e(V,B1),e(B1,lue),e(lue,iWo),e(B1,dWo),e(B1,YV),e(YV,cWo),e(B1,mWo),e(V,fWo),e(V,I1),e(I1,iue),e(iue,gWo),e(I1,hWo),e(I1,KV),e(KV,uWo),e(I1,pWo),e(V,_Wo),e(V,q1),e(q1,due),e(due,bWo),e(q1,vWo),e(q1,ZV),e(ZV,FWo),e(q1,TWo),e(V,MWo),e(V,N1),e(N1,cue),e(cue,EWo),e(N1,CWo),e(N1,eX),e(eX,wWo),e(N1,AWo),e(V,yWo),e(V,j1),e(j1,mue),e(mue,LWo),e(j1,xWo),e(j1,oX),e(oX,$Wo),e(j1,kWo),e(V,SWo),e(V,D1),e(D1,fue),e(fue,RWo),e(D1,PWo),e(D1,rX),e(rX,BWo),e(D1,IWo),e(V,qWo),e(V,G1),e(G1,gue),e(gue,NWo),e(G1,jWo),e(G1,tX),e(tX,DWo),e(G1,GWo),e(V,OWo),e(V,O1),e(O1,hue),e(hue,VWo),e(O1,XWo),e(O1,aX),e(aX,zWo),e(O1,WWo),e(V,QWo),e(V,V1),e(V1,uue),e(uue,HWo),e(V1,UWo),e(V1,nX),e(nX,JWo),e(V1,YWo),e(V,KWo),e(V,X1),e(X1,pue),e(pue,ZWo),e(X1,eQo),e(X1,sX),e(sX,oQo),e(X1,rQo),e(V,tQo),e(V,z1),e(z1,_ue),e(_ue,aQo),e(z1,nQo),e(z1,lX),e(lX,sQo),e(z1,lQo),e(V,iQo),e(V,W1),e(W1,bue),e(bue,dQo),e(W1,cQo),e(W1,iX),e(iX,mQo),e(W1,fQo),e(V,gQo),e(V,Q1),e(Q1,vue),e(vue,hQo),e(Q1,uQo),e(Q1,dX),e(dX,pQo),e(Q1,_Qo),e(V,bQo),e(V,H1),e(H1,Fue),e(Fue,vQo),e(H1,FQo),e(H1,cX),e(cX,TQo),e(H1,MQo),e(V,EQo),e(V,U1),e(U1,Tue),e(Tue,CQo),e(U1,wQo),e(U1,mX),e(mX,AQo),e(U1,yQo),e(V,LQo),e(V,J1),e(J1,Mue),e(Mue,xQo),e(J1,$Qo),e(J1,fX),e(fX,kQo),e(J1,SQo),e(V,RQo),e(V,Y1),e(Y1,Eue),e(Eue,PQo),e(Y1,BQo),e(Y1,gX),e(gX,IQo),e(Y1,qQo),e(no,NQo),e(no,K1),e(K1,jQo),e(K1,Cue),e(Cue,DQo),e(K1,GQo),e(K1,wue),e(wue,OQo),e(no,VQo),M(Z1,no,null),b(m,kNe,_),b(m,od,_),e(od,eT),e(eT,Aue),M(UL,Aue,null),e(od,XQo),e(od,yue),e(yue,zQo),b(m,SNe,_),b(m,No,_),M(JL,No,null),e(No,WQo),e(No,rd),e(rd,QQo),e(rd,hX),e(hX,HQo),e(rd,UQo),e(rd,uX),e(uX,JQo),e(rd,YQo),e(No,KQo),e(No,YL),e(YL,ZQo),e(YL,Lue),e(Lue,eHo),e(YL,oHo),e(No,rHo),e(No,gt),M(KL,gt,null),e(gt,tHo),e(gt,xue),e(xue,aHo),e(gt,nHo),e(gt,td),e(td,sHo),e(td,$ue),e($ue,lHo),e(td,iHo),e(td,pX),e(pX,dHo),e(td,cHo),e(gt,mHo),M(oT,gt,null),e(No,fHo),e(No,so),M(ZL,so,null),e(so,gHo),e(so,kue),e(kue,hHo),e(so,uHo),e(so,Na),e(Na,pHo),e(Na,Sue),e(Sue,_Ho),e(Na,bHo),e(Na,Rue),e(Rue,vHo),e(Na,FHo),e(Na,Pue),e(Pue,THo),e(Na,MHo),e(so,EHo),e(so,Bue),e(Bue,rT),e(rT,Iue),e(Iue,CHo),e(rT,wHo),e(rT,_X),e(_X,AHo),e(rT,yHo),e(so,LHo),e(so,tT),e(tT,xHo),e(tT,que),e(que,$Ho),e(tT,kHo),e(tT,Nue),e(Nue,SHo),e(so,RHo),M(aT,so,null),b(m,RNe,_),b(m,ad,_),e(ad,nT),e(nT,jue),M(e8,jue,null),e(ad,PHo),e(ad,Due),e(Due,BHo),b(m,PNe,_),b(m,jo,_),M(o8,jo,null),e(jo,IHo),e(jo,nd),e(nd,qHo),e(nd,bX),e(bX,NHo),e(nd,jHo),e(nd,vX),e(vX,DHo),e(nd,GHo),e(jo,OHo),e(jo,r8),e(r8,VHo),e(r8,Gue),e(Gue,XHo),e(r8,zHo),e(jo,WHo),e(jo,ht),M(t8,ht,null),e(ht,QHo),e(ht,Oue),e(Oue,HHo),e(ht,UHo),e(ht,sd),e(sd,JHo),e(sd,Vue),e(Vue,YHo),e(sd,KHo),e(sd,FX),e(FX,ZHo),e(sd,eUo),e(ht,oUo),M(sT,ht,null),e(jo,rUo),e(jo,lo),M(a8,lo,null),e(lo,tUo),e(lo,Xue),e(Xue,aUo),e(lo,nUo),e(lo,ja),e(ja,sUo),e(ja,zue),e(zue,lUo),e(ja,iUo),e(ja,Wue),e(Wue,dUo),e(ja,cUo),e(ja,Que),e(Que,mUo),e(ja,fUo),e(lo,gUo),e(lo,Fe),e(Fe,lT),e(lT,Hue),e(Hue,hUo),e(lT,uUo),e(lT,TX),e(TX,pUo),e(lT,_Uo),e(Fe,bUo),e(Fe,iT),e(iT,Uue),e(Uue,vUo),e(iT,FUo),e(iT,MX),e(MX,TUo),e(iT,MUo),e(Fe,EUo),e(Fe,dT),e(dT,Jue),e(Jue,CUo),e(dT,wUo),e(dT,EX),e(EX,AUo),e(dT,yUo),e(Fe,LUo),e(Fe,cT),e(cT,Yue),e(Yue,xUo),e(cT,$Uo),e(cT,CX),e(CX,kUo),e(cT,SUo),e(Fe,RUo),e(Fe,Bs),e(Bs,Kue),e(Kue,PUo),e(Bs,BUo),e(Bs,wX),e(wX,IUo),e(Bs,qUo),e(Bs,AX),e(AX,NUo),e(Bs,jUo),e(Fe,DUo),e(Fe,mT),e(mT,Zue),e(Zue,GUo),e(mT,OUo),e(mT,yX),e(yX,VUo),e(mT,XUo),e(Fe,zUo),e(Fe,ut),e(ut,epe),e(epe,WUo),e(ut,QUo),e(ut,LX),e(LX,HUo),e(ut,UUo),e(ut,xX),e(xX,JUo),e(ut,YUo),e(ut,$X),e($X,KUo),e(ut,ZUo),e(Fe,eJo),e(Fe,fT),e(fT,ope),e(ope,oJo),e(fT,rJo),e(fT,kX),e(kX,tJo),e(fT,aJo),e(Fe,nJo),e(Fe,gT),e(gT,rpe),e(rpe,sJo),e(gT,lJo),e(gT,SX),e(SX,iJo),e(gT,dJo),e(Fe,cJo),e(Fe,hT),e(hT,tpe),e(tpe,mJo),e(hT,fJo),e(hT,RX),e(RX,gJo),e(hT,hJo),e(Fe,uJo),e(Fe,uT),e(uT,ape),e(ape,pJo),e(uT,_Jo),e(uT,PX),e(PX,bJo),e(uT,vJo),e(Fe,FJo),e(Fe,pT),e(pT,npe),e(npe,TJo),e(pT,MJo),e(pT,BX),e(BX,EJo),e(pT,CJo),e(Fe,wJo),e(Fe,_T),e(_T,spe),e(spe,AJo),e(_T,yJo),e(_T,IX),e(IX,LJo),e(_T,xJo),e(Fe,$Jo),e(Fe,bT),e(bT,lpe),e(lpe,kJo),e(bT,SJo),e(bT,qX),e(qX,RJo),e(bT,PJo),e(lo,BJo),e(lo,vT),e(vT,IJo),e(vT,ipe),e(ipe,qJo),e(vT,NJo),e(vT,dpe),e(dpe,jJo),e(lo,DJo),M(FT,lo,null),b(m,BNe,_),b(m,ld,_),e(ld,TT),e(TT,cpe),M(n8,cpe,null),e(ld,GJo),e(ld,mpe),e(mpe,OJo),b(m,INe,_),b(m,Do,_),M(s8,Do,null),e(Do,VJo),e(Do,id),e(id,XJo),e(id,NX),e(NX,zJo),e(id,WJo),e(id,jX),e(jX,QJo),e(id,HJo),e(Do,UJo),e(Do,l8),e(l8,JJo),e(l8,fpe),e(fpe,YJo),e(l8,KJo),e(Do,ZJo),e(Do,pt),M(i8,pt,null),e(pt,eYo),e(pt,gpe),e(gpe,oYo),e(pt,rYo),e(pt,dd),e(dd,tYo),e(dd,hpe),e(hpe,aYo),e(dd,nYo),e(dd,DX),e(DX,sYo),e(dd,lYo),e(pt,iYo),M(MT,pt,null),e(Do,dYo),e(Do,io),M(d8,io,null),e(io,cYo),e(io,upe),e(upe,mYo),e(io,fYo),e(io,Da),e(Da,gYo),e(Da,ppe),e(ppe,hYo),e(Da,uYo),e(Da,_pe),e(_pe,pYo),e(Da,_Yo),e(Da,bpe),e(bpe,bYo),e(Da,vYo),e(io,FYo),e(io,vpe),e(vpe,ET),e(ET,Fpe),e(Fpe,TYo),e(ET,MYo),e(ET,GX),e(GX,EYo),e(ET,CYo),e(io,wYo),e(io,CT),e(CT,AYo),e(CT,Tpe),e(Tpe,yYo),e(CT,LYo),e(CT,Mpe),e(Mpe,xYo),e(io,$Yo),M(wT,io,null),b(m,qNe,_),b(m,cd,_),e(cd,AT),e(AT,Epe),M(c8,Epe,null),e(cd,kYo),e(cd,Cpe),e(Cpe,SYo),b(m,NNe,_),b(m,Go,_),M(m8,Go,null),e(Go,RYo),e(Go,md),e(md,PYo),e(md,OX),e(OX,BYo),e(md,IYo),e(md,VX),e(VX,qYo),e(md,NYo),e(Go,jYo),e(Go,f8),e(f8,DYo),e(f8,wpe),e(wpe,GYo),e(f8,OYo),e(Go,VYo),e(Go,_t),M(g8,_t,null),e(_t,XYo),e(_t,Ape),e(Ape,zYo),e(_t,WYo),e(_t,fd),e(fd,QYo),e(fd,ype),e(ype,HYo),e(fd,UYo),e(fd,XX),e(XX,JYo),e(fd,YYo),e(_t,KYo),M(yT,_t,null),e(Go,ZYo),e(Go,co),M(h8,co,null),e(co,eKo),e(co,Lpe),e(Lpe,oKo),e(co,rKo),e(co,Ga),e(Ga,tKo),e(Ga,xpe),e(xpe,aKo),e(Ga,nKo),e(Ga,$pe),e($pe,sKo),e(Ga,lKo),e(Ga,kpe),e(kpe,iKo),e(Ga,dKo),e(co,cKo),e(co,ke),e(ke,LT),e(LT,Spe),e(Spe,mKo),e(LT,fKo),e(LT,zX),e(zX,gKo),e(LT,hKo),e(ke,uKo),e(ke,xT),e(xT,Rpe),e(Rpe,pKo),e(xT,_Ko),e(xT,WX),e(WX,bKo),e(xT,vKo),e(ke,FKo),e(ke,$T),e($T,Ppe),e(Ppe,TKo),e($T,MKo),e($T,QX),e(QX,EKo),e($T,CKo),e(ke,wKo),e(ke,kT),e(kT,Bpe),e(Bpe,AKo),e(kT,yKo),e(kT,HX),e(HX,LKo),e(kT,xKo),e(ke,$Ko),e(ke,ST),e(ST,Ipe),e(Ipe,kKo),e(ST,SKo),e(ST,UX),e(UX,RKo),e(ST,PKo),e(ke,BKo),e(ke,RT),e(RT,qpe),e(qpe,IKo),e(RT,qKo),e(RT,JX),e(JX,NKo),e(RT,jKo),e(ke,DKo),e(ke,PT),e(PT,Npe),e(Npe,GKo),e(PT,OKo),e(PT,YX),e(YX,VKo),e(PT,XKo),e(ke,zKo),e(ke,BT),e(BT,jpe),e(jpe,WKo),e(BT,QKo),e(BT,KX),e(KX,HKo),e(BT,UKo),e(ke,JKo),e(ke,IT),e(IT,Dpe),e(Dpe,YKo),e(IT,KKo),e(IT,ZX),e(ZX,ZKo),e(IT,eZo),e(co,oZo),e(co,qT),e(qT,rZo),e(qT,Gpe),e(Gpe,tZo),e(qT,aZo),e(qT,Ope),e(Ope,nZo),e(co,sZo),M(NT,co,null),b(m,jNe,_),b(m,gd,_),e(gd,jT),e(jT,Vpe),M(u8,Vpe,null),e(gd,lZo),e(gd,Xpe),e(Xpe,iZo),b(m,DNe,_),b(m,Oo,_),M(p8,Oo,null),e(Oo,dZo),e(Oo,hd),e(hd,cZo),e(hd,ez),e(ez,mZo),e(hd,fZo),e(hd,oz),e(oz,gZo),e(hd,hZo),e(Oo,uZo),e(Oo,_8),e(_8,pZo),e(_8,zpe),e(zpe,_Zo),e(_8,bZo),e(Oo,vZo),e(Oo,bt),M(b8,bt,null),e(bt,FZo),e(bt,Wpe),e(Wpe,TZo),e(bt,MZo),e(bt,ud),e(ud,EZo),e(ud,Qpe),e(Qpe,CZo),e(ud,wZo),e(ud,rz),e(rz,AZo),e(ud,yZo),e(bt,LZo),M(DT,bt,null),e(Oo,xZo),e(Oo,mo),M(v8,mo,null),e(mo,$Zo),e(mo,Hpe),e(Hpe,kZo),e(mo,SZo),e(mo,Oa),e(Oa,RZo),e(Oa,Upe),e(Upe,PZo),e(Oa,BZo),e(Oa,Jpe),e(Jpe,IZo),e(Oa,qZo),e(Oa,Ype),e(Ype,NZo),e(Oa,jZo),e(mo,DZo),e(mo,Kr),e(Kr,GT),e(GT,Kpe),e(Kpe,GZo),e(GT,OZo),e(GT,tz),e(tz,VZo),e(GT,XZo),e(Kr,zZo),e(Kr,OT),e(OT,Zpe),e(Zpe,WZo),e(OT,QZo),e(OT,az),e(az,HZo),e(OT,UZo),e(Kr,JZo),e(Kr,VT),e(VT,e_e),e(e_e,YZo),e(VT,KZo),e(VT,nz),e(nz,ZZo),e(VT,eer),e(Kr,oer),e(Kr,XT),e(XT,o_e),e(o_e,rer),e(XT,ter),e(XT,sz),e(sz,aer),e(XT,ner),e(Kr,ser),e(Kr,zT),e(zT,r_e),e(r_e,ler),e(zT,ier),e(zT,lz),e(lz,der),e(zT,cer),e(mo,mer),e(mo,WT),e(WT,fer),e(WT,t_e),e(t_e,ger),e(WT,her),e(WT,a_e),e(a_e,uer),e(mo,per),M(QT,mo,null),b(m,GNe,_),b(m,pd,_),e(pd,HT),e(HT,n_e),M(F8,n_e,null),e(pd,_er),e(pd,s_e),e(s_e,ber),b(m,ONe,_),b(m,Vo,_),M(T8,Vo,null),e(Vo,ver),e(Vo,_d),e(_d,Fer),e(_d,iz),e(iz,Ter),e(_d,Mer),e(_d,dz),e(dz,Eer),e(_d,Cer),e(Vo,wer),e(Vo,M8),e(M8,Aer),e(M8,l_e),e(l_e,yer),e(M8,Ler),e(Vo,xer),e(Vo,vt),M(E8,vt,null),e(vt,$er),e(vt,i_e),e(i_e,ker),e(vt,Ser),e(vt,bd),e(bd,Rer),e(bd,d_e),e(d_e,Per),e(bd,Ber),e(bd,cz),e(cz,Ier),e(bd,qer),e(vt,Ner),M(UT,vt,null),e(Vo,jer),e(Vo,fo),M(C8,fo,null),e(fo,Der),e(fo,c_e),e(c_e,Ger),e(fo,Oer),e(fo,Va),e(Va,Ver),e(Va,m_e),e(m_e,Xer),e(Va,zer),e(Va,f_e),e(f_e,Wer),e(Va,Qer),e(Va,g_e),e(g_e,Her),e(Va,Uer),e(fo,Jer),e(fo,Se),e(Se,JT),e(JT,h_e),e(h_e,Yer),e(JT,Ker),e(JT,mz),e(mz,Zer),e(JT,eor),e(Se,oor),e(Se,YT),e(YT,u_e),e(u_e,ror),e(YT,tor),e(YT,fz),e(fz,aor),e(YT,nor),e(Se,sor),e(Se,KT),e(KT,p_e),e(p_e,lor),e(KT,ior),e(KT,gz),e(gz,dor),e(KT,cor),e(Se,mor),e(Se,ZT),e(ZT,__e),e(__e,gor),e(ZT,hor),e(ZT,hz),e(hz,uor),e(ZT,por),e(Se,_or),e(Se,eM),e(eM,b_e),e(b_e,bor),e(eM,vor),e(eM,uz),e(uz,For),e(eM,Tor),e(Se,Mor),e(Se,oM),e(oM,v_e),e(v_e,Eor),e(oM,Cor),e(oM,pz),e(pz,wor),e(oM,Aor),e(Se,yor),e(Se,rM),e(rM,F_e),e(F_e,Lor),e(rM,xor),e(rM,_z),e(_z,$or),e(rM,kor),e(Se,Sor),e(Se,tM),e(tM,T_e),e(T_e,Ror),e(tM,Por),e(tM,bz),e(bz,Bor),e(tM,Ior),e(Se,qor),e(Se,aM),e(aM,M_e),e(M_e,Nor),e(aM,jor),e(aM,vz),e(vz,Dor),e(aM,Gor),e(fo,Oor),e(fo,nM),e(nM,Vor),e(nM,E_e),e(E_e,Xor),e(nM,zor),e(nM,C_e),e(C_e,Wor),e(fo,Qor),M(sM,fo,null),b(m,VNe,_),b(m,vd,_),e(vd,lM),e(lM,w_e),M(w8,w_e,null),e(vd,Hor),e(vd,A_e),e(A_e,Uor),b(m,XNe,_),b(m,Xo,_),M(A8,Xo,null),e(Xo,Jor),e(Xo,Fd),e(Fd,Yor),e(Fd,Fz),e(Fz,Kor),e(Fd,Zor),e(Fd,Tz),e(Tz,err),e(Fd,orr),e(Xo,rrr),e(Xo,y8),e(y8,trr),e(y8,y_e),e(y_e,arr),e(y8,nrr),e(Xo,srr),e(Xo,Ft),M(L8,Ft,null),e(Ft,lrr),e(Ft,L_e),e(L_e,irr),e(Ft,drr),e(Ft,Td),e(Td,crr),e(Td,x_e),e(x_e,mrr),e(Td,frr),e(Td,Mz),e(Mz,grr),e(Td,hrr),e(Ft,urr),M(iM,Ft,null),e(Xo,prr),e(Xo,go),M(x8,go,null),e(go,_rr),e(go,$_e),e($_e,brr),e(go,vrr),e(go,Xa),e(Xa,Frr),e(Xa,k_e),e(k_e,Trr),e(Xa,Mrr),e(Xa,S_e),e(S_e,Err),e(Xa,Crr),e(Xa,R_e),e(R_e,wrr),e(Xa,Arr),e(go,yrr),e(go,$8),e($8,dM),e(dM,P_e),e(P_e,Lrr),e(dM,xrr),e(dM,Ez),e(Ez,$rr),e(dM,krr),e($8,Srr),e($8,cM),e(cM,B_e),e(B_e,Rrr),e(cM,Prr),e(cM,Cz),e(Cz,Brr),e(cM,Irr),e(go,qrr),e(go,mM),e(mM,Nrr),e(mM,I_e),e(I_e,jrr),e(mM,Drr),e(mM,q_e),e(q_e,Grr),e(go,Orr),M(fM,go,null),b(m,zNe,_),b(m,Md,_),e(Md,gM),e(gM,N_e),M(k8,N_e,null),e(Md,Vrr),e(Md,j_e),e(j_e,Xrr),b(m,WNe,_),b(m,zo,_),M(S8,zo,null),e(zo,zrr),e(zo,Ed),e(Ed,Wrr),e(Ed,wz),e(wz,Qrr),e(Ed,Hrr),e(Ed,Az),e(Az,Urr),e(Ed,Jrr),e(zo,Yrr),e(zo,R8),e(R8,Krr),e(R8,D_e),e(D_e,Zrr),e(R8,etr),e(zo,otr),e(zo,Tt),M(P8,Tt,null),e(Tt,rtr),e(Tt,G_e),e(G_e,ttr),e(Tt,atr),e(Tt,Cd),e(Cd,ntr),e(Cd,O_e),e(O_e,str),e(Cd,ltr),e(Cd,yz),e(yz,itr),e(Cd,dtr),e(Tt,ctr),M(hM,Tt,null),e(zo,mtr),e(zo,ho),M(B8,ho,null),e(ho,ftr),e(ho,V_e),e(V_e,gtr),e(ho,htr),e(ho,za),e(za,utr),e(za,X_e),e(X_e,ptr),e(za,_tr),e(za,z_e),e(z_e,btr),e(za,vtr),e(za,W_e),e(W_e,Ftr),e(za,Ttr),e(ho,Mtr),e(ho,Zr),e(Zr,uM),e(uM,Q_e),e(Q_e,Etr),e(uM,Ctr),e(uM,Lz),e(Lz,wtr),e(uM,Atr),e(Zr,ytr),e(Zr,pM),e(pM,H_e),e(H_e,Ltr),e(pM,xtr),e(pM,xz),e(xz,$tr),e(pM,ktr),e(Zr,Str),e(Zr,_M),e(_M,U_e),e(U_e,Rtr),e(_M,Ptr),e(_M,$z),e($z,Btr),e(_M,Itr),e(Zr,qtr),e(Zr,bM),e(bM,J_e),e(J_e,Ntr),e(bM,jtr),e(bM,kz),e(kz,Dtr),e(bM,Gtr),e(Zr,Otr),e(Zr,vM),e(vM,Y_e),e(Y_e,Vtr),e(vM,Xtr),e(vM,Sz),e(Sz,ztr),e(vM,Wtr),e(ho,Qtr),e(ho,FM),e(FM,Htr),e(FM,K_e),e(K_e,Utr),e(FM,Jtr),e(FM,Z_e),e(Z_e,Ytr),e(ho,Ktr),M(TM,ho,null),b(m,QNe,_),b(m,wd,_),e(wd,MM),e(MM,ebe),M(I8,ebe,null),e(wd,Ztr),e(wd,obe),e(obe,ear),b(m,HNe,_),b(m,Wo,_),M(q8,Wo,null),e(Wo,oar),e(Wo,Ad),e(Ad,rar),e(Ad,Rz),e(Rz,tar),e(Ad,aar),e(Ad,Pz),e(Pz,nar),e(Ad,sar),e(Wo,lar),e(Wo,N8),e(N8,iar),e(N8,rbe),e(rbe,dar),e(N8,car),e(Wo,mar),e(Wo,Mt),M(j8,Mt,null),e(Mt,far),e(Mt,tbe),e(tbe,gar),e(Mt,har),e(Mt,yd),e(yd,uar),e(yd,abe),e(abe,par),e(yd,_ar),e(yd,Bz),e(Bz,bar),e(yd,Far),e(Mt,Tar),M(EM,Mt,null),e(Wo,Mar),e(Wo,uo),M(D8,uo,null),e(uo,Ear),e(uo,nbe),e(nbe,Car),e(uo,war),e(uo,Wa),e(Wa,Aar),e(Wa,sbe),e(sbe,yar),e(Wa,Lar),e(Wa,lbe),e(lbe,xar),e(Wa,$ar),e(Wa,ibe),e(ibe,kar),e(Wa,Sar),e(uo,Rar),e(uo,Ld),e(Ld,CM),e(CM,dbe),e(dbe,Par),e(CM,Bar),e(CM,Iz),e(Iz,Iar),e(CM,qar),e(Ld,Nar),e(Ld,wM),e(wM,cbe),e(cbe,jar),e(wM,Dar),e(wM,qz),e(qz,Gar),e(wM,Oar),e(Ld,Var),e(Ld,AM),e(AM,mbe),e(mbe,Xar),e(AM,zar),e(AM,Nz),e(Nz,War),e(AM,Qar),e(uo,Har),e(uo,yM),e(yM,Uar),e(yM,fbe),e(fbe,Jar),e(yM,Yar),e(yM,gbe),e(gbe,Kar),e(uo,Zar),M(LM,uo,null),b(m,UNe,_),b(m,xd,_),e(xd,xM),e(xM,hbe),M(G8,hbe,null),e(xd,enr),e(xd,ube),e(ube,onr),b(m,JNe,_),b(m,Qo,_),M(O8,Qo,null),e(Qo,rnr),e(Qo,$d),e($d,tnr),e($d,jz),e(jz,anr),e($d,nnr),e($d,Dz),e(Dz,snr),e($d,lnr),e(Qo,inr),e(Qo,V8),e(V8,dnr),e(V8,pbe),e(pbe,cnr),e(V8,mnr),e(Qo,fnr),e(Qo,Et),M(X8,Et,null),e(Et,gnr),e(Et,_be),e(_be,hnr),e(Et,unr),e(Et,kd),e(kd,pnr),e(kd,bbe),e(bbe,_nr),e(kd,bnr),e(kd,Gz),e(Gz,vnr),e(kd,Fnr),e(Et,Tnr),M($M,Et,null),e(Qo,Mnr),e(Qo,po),M(z8,po,null),e(po,Enr),e(po,vbe),e(vbe,Cnr),e(po,wnr),e(po,Qa),e(Qa,Anr),e(Qa,Fbe),e(Fbe,ynr),e(Qa,Lnr),e(Qa,Tbe),e(Tbe,xnr),e(Qa,$nr),e(Qa,Mbe),e(Mbe,knr),e(Qa,Snr),e(po,Rnr),e(po,W8),e(W8,kM),e(kM,Ebe),e(Ebe,Pnr),e(kM,Bnr),e(kM,Oz),e(Oz,Inr),e(kM,qnr),e(W8,Nnr),e(W8,SM),e(SM,Cbe),e(Cbe,jnr),e(SM,Dnr),e(SM,Vz),e(Vz,Gnr),e(SM,Onr),e(po,Vnr),e(po,RM),e(RM,Xnr),e(RM,wbe),e(wbe,znr),e(RM,Wnr),e(RM,Abe),e(Abe,Qnr),e(po,Hnr),M(PM,po,null),b(m,YNe,_),b(m,Sd,_),e(Sd,BM),e(BM,ybe),M(Q8,ybe,null),e(Sd,Unr),e(Sd,Lbe),e(Lbe,Jnr),b(m,KNe,_),b(m,Ho,_),M(H8,Ho,null),e(Ho,Ynr),e(Ho,Rd),e(Rd,Knr),e(Rd,Xz),e(Xz,Znr),e(Rd,esr),e(Rd,zz),e(zz,osr),e(Rd,rsr),e(Ho,tsr),e(Ho,U8),e(U8,asr),e(U8,xbe),e(xbe,nsr),e(U8,ssr),e(Ho,lsr),e(Ho,Ct),M(J8,Ct,null),e(Ct,isr),e(Ct,$be),e($be,dsr),e(Ct,csr),e(Ct,Pd),e(Pd,msr),e(Pd,kbe),e(kbe,fsr),e(Pd,gsr),e(Pd,Wz),e(Wz,hsr),e(Pd,usr),e(Ct,psr),M(IM,Ct,null),e(Ho,_sr),e(Ho,_o),M(Y8,_o,null),e(_o,bsr),e(_o,Sbe),e(Sbe,vsr),e(_o,Fsr),e(_o,Ha),e(Ha,Tsr),e(Ha,Rbe),e(Rbe,Msr),e(Ha,Esr),e(Ha,Pbe),e(Pbe,Csr),e(Ha,wsr),e(Ha,Bbe),e(Bbe,Asr),e(Ha,ysr),e(_o,Lsr),e(_o,Ibe),e(Ibe,qM),e(qM,qbe),e(qbe,xsr),e(qM,$sr),e(qM,Qz),e(Qz,ksr),e(qM,Ssr),e(_o,Rsr),e(_o,NM),e(NM,Psr),e(NM,Nbe),e(Nbe,Bsr),e(NM,Isr),e(NM,jbe),e(jbe,qsr),e(_o,Nsr),M(jM,_o,null),b(m,ZNe,_),b(m,Bd,_),e(Bd,DM),e(DM,Dbe),M(K8,Dbe,null),e(Bd,jsr),e(Bd,Gbe),e(Gbe,Dsr),b(m,eje,_),b(m,Uo,_),M(Z8,Uo,null),e(Uo,Gsr),e(Uo,Id),e(Id,Osr),e(Id,Hz),e(Hz,Vsr),e(Id,Xsr),e(Id,Uz),e(Uz,zsr),e(Id,Wsr),e(Uo,Qsr),e(Uo,e7),e(e7,Hsr),e(e7,Obe),e(Obe,Usr),e(e7,Jsr),e(Uo,Ysr),e(Uo,wt),M(o7,wt,null),e(wt,Ksr),e(wt,Vbe),e(Vbe,Zsr),e(wt,elr),e(wt,qd),e(qd,olr),e(qd,Xbe),e(Xbe,rlr),e(qd,tlr),e(qd,Jz),e(Jz,alr),e(qd,nlr),e(wt,slr),M(GM,wt,null),e(Uo,llr),e(Uo,bo),M(r7,bo,null),e(bo,ilr),e(bo,zbe),e(zbe,dlr),e(bo,clr),e(bo,Ua),e(Ua,mlr),e(Ua,Wbe),e(Wbe,flr),e(Ua,glr),e(Ua,Qbe),e(Qbe,hlr),e(Ua,ulr),e(Ua,Hbe),e(Hbe,plr),e(Ua,_lr),e(bo,blr),e(bo,Ja),e(Ja,OM),e(OM,Ube),e(Ube,vlr),e(OM,Flr),e(OM,Yz),e(Yz,Tlr),e(OM,Mlr),e(Ja,Elr),e(Ja,VM),e(VM,Jbe),e(Jbe,Clr),e(VM,wlr),e(VM,Kz),e(Kz,Alr),e(VM,ylr),e(Ja,Llr),e(Ja,XM),e(XM,Ybe),e(Ybe,xlr),e(XM,$lr),e(XM,Zz),e(Zz,klr),e(XM,Slr),e(Ja,Rlr),e(Ja,zM),e(zM,Kbe),e(Kbe,Plr),e(zM,Blr),e(zM,eW),e(eW,Ilr),e(zM,qlr),e(bo,Nlr),e(bo,WM),e(WM,jlr),e(WM,Zbe),e(Zbe,Dlr),e(WM,Glr),e(WM,e2e),e(e2e,Olr),e(bo,Vlr),M(QM,bo,null),b(m,oje,_),b(m,Nd,_),e(Nd,HM),e(HM,o2e),M(t7,o2e,null),e(Nd,Xlr),e(Nd,r2e),e(r2e,zlr),b(m,rje,_),b(m,Jo,_),M(a7,Jo,null),e(Jo,Wlr),e(Jo,jd),e(jd,Qlr),e(jd,oW),e(oW,Hlr),e(jd,Ulr),e(jd,rW),e(rW,Jlr),e(jd,Ylr),e(Jo,Klr),e(Jo,n7),e(n7,Zlr),e(n7,t2e),e(t2e,eir),e(n7,oir),e(Jo,rir),e(Jo,At),M(s7,At,null),e(At,tir),e(At,a2e),e(a2e,air),e(At,nir),e(At,Dd),e(Dd,sir),e(Dd,n2e),e(n2e,lir),e(Dd,iir),e(Dd,tW),e(tW,dir),e(Dd,cir),e(At,mir),M(UM,At,null),e(Jo,fir),e(Jo,vo),M(l7,vo,null),e(vo,gir),e(vo,s2e),e(s2e,hir),e(vo,uir),e(vo,Ya),e(Ya,pir),e(Ya,l2e),e(l2e,_ir),e(Ya,bir),e(Ya,i2e),e(i2e,vir),e(Ya,Fir),e(Ya,d2e),e(d2e,Tir),e(Ya,Mir),e(vo,Eir),e(vo,c2e),e(c2e,JM),e(JM,m2e),e(m2e,Cir),e(JM,wir),e(JM,aW),e(aW,Air),e(JM,yir),e(vo,Lir),e(vo,YM),e(YM,xir),e(YM,f2e),e(f2e,$ir),e(YM,kir),e(YM,g2e),e(g2e,Sir),e(vo,Rir),M(KM,vo,null),b(m,tje,_),b(m,Gd,_),e(Gd,ZM),e(ZM,h2e),M(i7,h2e,null),e(Gd,Pir),e(Gd,u2e),e(u2e,Bir),b(m,aje,_),b(m,Yo,_),M(d7,Yo,null),e(Yo,Iir),e(Yo,Od),e(Od,qir),e(Od,nW),e(nW,Nir),e(Od,jir),e(Od,sW),e(sW,Dir),e(Od,Gir),e(Yo,Oir),e(Yo,c7),e(c7,Vir),e(c7,p2e),e(p2e,Xir),e(c7,zir),e(Yo,Wir),e(Yo,yt),M(m7,yt,null),e(yt,Qir),e(yt,_2e),e(_2e,Hir),e(yt,Uir),e(yt,Vd),e(Vd,Jir),e(Vd,b2e),e(b2e,Yir),e(Vd,Kir),e(Vd,lW),e(lW,Zir),e(Vd,edr),e(yt,odr),M(e4,yt,null),e(Yo,rdr),e(Yo,wr),M(f7,wr,null),e(wr,tdr),e(wr,v2e),e(v2e,adr),e(wr,ndr),e(wr,Ka),e(Ka,sdr),e(Ka,F2e),e(F2e,ldr),e(Ka,idr),e(Ka,T2e),e(T2e,ddr),e(Ka,cdr),e(Ka,M2e),e(M2e,mdr),e(Ka,fdr),e(wr,gdr),e(wr,N),e(N,o4),e(o4,E2e),e(E2e,hdr),e(o4,udr),e(o4,iW),e(iW,pdr),e(o4,_dr),e(N,bdr),e(N,r4),e(r4,C2e),e(C2e,vdr),e(r4,Fdr),e(r4,dW),e(dW,Tdr),e(r4,Mdr),e(N,Edr),e(N,t4),e(t4,w2e),e(w2e,Cdr),e(t4,wdr),e(t4,cW),e(cW,Adr),e(t4,ydr),e(N,Ldr),e(N,a4),e(a4,A2e),e(A2e,xdr),e(a4,$dr),e(a4,mW),e(mW,kdr),e(a4,Sdr),e(N,Rdr),e(N,n4),e(n4,y2e),e(y2e,Pdr),e(n4,Bdr),e(n4,fW),e(fW,Idr),e(n4,qdr),e(N,Ndr),e(N,s4),e(s4,L2e),e(L2e,jdr),e(s4,Ddr),e(s4,gW),e(gW,Gdr),e(s4,Odr),e(N,Vdr),e(N,l4),e(l4,x2e),e(x2e,Xdr),e(l4,zdr),e(l4,hW),e(hW,Wdr),e(l4,Qdr),e(N,Hdr),e(N,i4),e(i4,$2e),e($2e,Udr),e(i4,Jdr),e(i4,uW),e(uW,Ydr),e(i4,Kdr),e(N,Zdr),e(N,d4),e(d4,k2e),e(k2e,ecr),e(d4,ocr),e(d4,pW),e(pW,rcr),e(d4,tcr),e(N,acr),e(N,c4),e(c4,S2e),e(S2e,ncr),e(c4,scr),e(c4,_W),e(_W,lcr),e(c4,icr),e(N,dcr),e(N,m4),e(m4,R2e),e(R2e,ccr),e(m4,mcr),e(m4,bW),e(bW,fcr),e(m4,gcr),e(N,hcr),e(N,f4),e(f4,P2e),e(P2e,ucr),e(f4,pcr),e(f4,vW),e(vW,_cr),e(f4,bcr),e(N,vcr),e(N,g4),e(g4,B2e),e(B2e,Fcr),e(g4,Tcr),e(g4,FW),e(FW,Mcr),e(g4,Ecr),e(N,Ccr),e(N,h4),e(h4,I2e),e(I2e,wcr),e(h4,Acr),e(h4,TW),e(TW,ycr),e(h4,Lcr),e(N,xcr),e(N,u4),e(u4,q2e),e(q2e,$cr),e(u4,kcr),e(u4,MW),e(MW,Scr),e(u4,Rcr),e(N,Pcr),e(N,p4),e(p4,N2e),e(N2e,Bcr),e(p4,Icr),e(p4,EW),e(EW,qcr),e(p4,Ncr),e(N,jcr),e(N,_4),e(_4,j2e),e(j2e,Dcr),e(_4,Gcr),e(_4,CW),e(CW,Ocr),e(_4,Vcr),e(N,Xcr),e(N,Is),e(Is,D2e),e(D2e,zcr),e(Is,Wcr),e(Is,wW),e(wW,Qcr),e(Is,Hcr),e(Is,AW),e(AW,Ucr),e(Is,Jcr),e(N,Ycr),e(N,b4),e(b4,G2e),e(G2e,Kcr),e(b4,Zcr),e(b4,yW),e(yW,emr),e(b4,omr),e(N,rmr),e(N,v4),e(v4,O2e),e(O2e,tmr),e(v4,amr),e(v4,LW),e(LW,nmr),e(v4,smr),e(N,lmr),e(N,F4),e(F4,V2e),e(V2e,imr),e(F4,dmr),e(F4,xW),e(xW,cmr),e(F4,mmr),e(N,fmr),e(N,T4),e(T4,X2e),e(X2e,gmr),e(T4,hmr),e(T4,$W),e($W,umr),e(T4,pmr),e(N,_mr),e(N,M4),e(M4,z2e),e(z2e,bmr),e(M4,vmr),e(M4,kW),e(kW,Fmr),e(M4,Tmr),e(N,Mmr),e(N,E4),e(E4,W2e),e(W2e,Emr),e(E4,Cmr),e(E4,SW),e(SW,wmr),e(E4,Amr),e(N,ymr),e(N,C4),e(C4,Q2e),e(Q2e,Lmr),e(C4,xmr),e(C4,RW),e(RW,$mr),e(C4,kmr),e(N,Smr),e(N,w4),e(w4,H2e),e(H2e,Rmr),e(w4,Pmr),e(w4,PW),e(PW,Bmr),e(w4,Imr),e(N,qmr),e(N,A4),e(A4,U2e),e(U2e,Nmr),e(A4,jmr),e(A4,BW),e(BW,Dmr),e(A4,Gmr),e(N,Omr),e(N,y4),e(y4,J2e),e(J2e,Vmr),e(y4,Xmr),e(y4,IW),e(IW,zmr),e(y4,Wmr),e(N,Qmr),e(N,L4),e(L4,Y2e),e(Y2e,Hmr),e(L4,Umr),e(L4,qW),e(qW,Jmr),e(L4,Ymr),e(N,Kmr),e(N,x4),e(x4,K2e),e(K2e,Zmr),e(x4,efr),e(x4,NW),e(NW,ofr),e(x4,rfr),e(N,tfr),e(N,$4),e($4,Z2e),e(Z2e,afr),e($4,nfr),e($4,jW),e(jW,sfr),e($4,lfr),e(N,ifr),e(N,k4),e(k4,eve),e(eve,dfr),e(k4,cfr),e(k4,DW),e(DW,mfr),e(k4,ffr),e(N,gfr),e(N,S4),e(S4,ove),e(ove,hfr),e(S4,ufr),e(S4,GW),e(GW,pfr),e(S4,_fr),e(N,bfr),e(N,R4),e(R4,rve),e(rve,vfr),e(R4,Ffr),e(R4,OW),e(OW,Tfr),e(R4,Mfr),e(N,Efr),e(N,P4),e(P4,tve),e(tve,Cfr),e(P4,wfr),e(P4,VW),e(VW,Afr),e(P4,yfr),e(N,Lfr),e(N,B4),e(B4,ave),e(ave,xfr),e(B4,$fr),e(B4,XW),e(XW,kfr),e(B4,Sfr),e(N,Rfr),e(N,I4),e(I4,nve),e(nve,Pfr),e(I4,Bfr),e(I4,zW),e(zW,Ifr),e(I4,qfr),e(N,Nfr),e(N,q4),e(q4,sve),e(sve,jfr),e(q4,Dfr),e(q4,WW),e(WW,Gfr),e(q4,Ofr),e(N,Vfr),e(N,N4),e(N4,lve),e(lve,Xfr),e(N4,zfr),e(N4,QW),e(QW,Wfr),e(N4,Qfr),e(N,Hfr),e(N,j4),e(j4,ive),e(ive,Ufr),e(j4,Jfr),e(j4,HW),e(HW,Yfr),e(j4,Kfr),e(N,Zfr),e(N,D4),e(D4,dve),e(dve,egr),e(D4,ogr),e(D4,UW),e(UW,rgr),e(D4,tgr),e(N,agr),e(N,G4),e(G4,cve),e(cve,ngr),e(G4,sgr),e(G4,JW),e(JW,lgr),e(G4,igr),e(N,dgr),e(N,O4),e(O4,mve),e(mve,cgr),e(O4,mgr),e(O4,YW),e(YW,fgr),e(O4,ggr),e(N,hgr),e(N,V4),e(V4,fve),e(fve,ugr),e(V4,pgr),e(V4,KW),e(KW,_gr),e(V4,bgr),e(N,vgr),e(N,X4),e(X4,gve),e(gve,Fgr),e(X4,Tgr),e(X4,ZW),e(ZW,Mgr),e(X4,Egr),e(N,Cgr),e(N,z4),e(z4,hve),e(hve,wgr),e(z4,Agr),e(z4,eQ),e(eQ,ygr),e(z4,Lgr),e(wr,xgr),M(W4,wr,null),b(m,nje,_),b(m,Xd,_),e(Xd,Q4),e(Q4,uve),M(g7,uve,null),e(Xd,$gr),e(Xd,pve),e(pve,kgr),b(m,sje,_),b(m,Ko,_),M(h7,Ko,null),e(Ko,Sgr),e(Ko,zd),e(zd,Rgr),e(zd,oQ),e(oQ,Pgr),e(zd,Bgr),e(zd,rQ),e(rQ,Igr),e(zd,qgr),e(Ko,Ngr),e(Ko,u7),e(u7,jgr),e(u7,_ve),e(_ve,Dgr),e(u7,Ggr),e(Ko,Ogr),e(Ko,Lt),M(p7,Lt,null),e(Lt,Vgr),e(Lt,bve),e(bve,Xgr),e(Lt,zgr),e(Lt,Wd),e(Wd,Wgr),e(Wd,vve),e(vve,Qgr),e(Wd,Hgr),e(Wd,tQ),e(tQ,Ugr),e(Wd,Jgr),e(Lt,Ygr),M(H4,Lt,null),e(Ko,Kgr),e(Ko,Ar),M(_7,Ar,null),e(Ar,Zgr),e(Ar,Fve),e(Fve,ehr),e(Ar,ohr),e(Ar,Za),e(Za,rhr),e(Za,Tve),e(Tve,thr),e(Za,ahr),e(Za,Mve),e(Mve,nhr),e(Za,shr),e(Za,Eve),e(Eve,lhr),e(Za,ihr),e(Ar,dhr),e(Ar,se),e(se,U4),e(U4,Cve),e(Cve,chr),e(U4,mhr),e(U4,aQ),e(aQ,fhr),e(U4,ghr),e(se,hhr),e(se,J4),e(J4,wve),e(wve,uhr),e(J4,phr),e(J4,nQ),e(nQ,_hr),e(J4,bhr),e(se,vhr),e(se,Y4),e(Y4,Ave),e(Ave,Fhr),e(Y4,Thr),e(Y4,sQ),e(sQ,Mhr),e(Y4,Ehr),e(se,Chr),e(se,K4),e(K4,yve),e(yve,whr),e(K4,Ahr),e(K4,lQ),e(lQ,yhr),e(K4,Lhr),e(se,xhr),e(se,Z4),e(Z4,Lve),e(Lve,$hr),e(Z4,khr),e(Z4,iQ),e(iQ,Shr),e(Z4,Rhr),e(se,Phr),e(se,eE),e(eE,xve),e(xve,Bhr),e(eE,Ihr),e(eE,dQ),e(dQ,qhr),e(eE,Nhr),e(se,jhr),e(se,oE),e(oE,$ve),e($ve,Dhr),e(oE,Ghr),e(oE,cQ),e(cQ,Ohr),e(oE,Vhr),e(se,Xhr),e(se,rE),e(rE,kve),e(kve,zhr),e(rE,Whr),e(rE,mQ),e(mQ,Qhr),e(rE,Hhr),e(se,Uhr),e(se,tE),e(tE,Sve),e(Sve,Jhr),e(tE,Yhr),e(tE,fQ),e(fQ,Khr),e(tE,Zhr),e(se,eur),e(se,aE),e(aE,Rve),e(Rve,our),e(aE,rur),e(aE,gQ),e(gQ,tur),e(aE,aur),e(se,nur),e(se,nE),e(nE,Pve),e(Pve,sur),e(nE,lur),e(nE,hQ),e(hQ,iur),e(nE,dur),e(se,cur),e(se,sE),e(sE,Bve),e(Bve,mur),e(sE,fur),e(sE,uQ),e(uQ,gur),e(sE,hur),e(se,uur),e(se,lE),e(lE,Ive),e(Ive,pur),e(lE,_ur),e(lE,pQ),e(pQ,bur),e(lE,vur),e(se,Fur),e(se,iE),e(iE,qve),e(qve,Tur),e(iE,Mur),e(iE,_Q),e(_Q,Eur),e(iE,Cur),e(se,wur),e(se,dE),e(dE,Nve),e(Nve,Aur),e(dE,yur),e(dE,bQ),e(bQ,Lur),e(dE,xur),e(se,$ur),e(se,cE),e(cE,jve),e(jve,kur),e(cE,Sur),e(cE,vQ),e(vQ,Rur),e(cE,Pur),e(se,Bur),e(se,mE),e(mE,Dve),e(Dve,Iur),e(mE,qur),e(mE,FQ),e(FQ,Nur),e(mE,jur),e(se,Dur),e(se,fE),e(fE,Gve),e(Gve,Gur),e(fE,Our),e(fE,TQ),e(TQ,Vur),e(fE,Xur),e(se,zur),e(se,gE),e(gE,Ove),e(Ove,Wur),e(gE,Qur),e(gE,MQ),e(MQ,Hur),e(gE,Uur),e(se,Jur),e(se,hE),e(hE,Vve),e(Vve,Yur),e(hE,Kur),e(hE,EQ),e(EQ,Zur),e(hE,epr),e(se,opr),e(se,uE),e(uE,Xve),e(Xve,rpr),e(uE,tpr),e(uE,CQ),e(CQ,apr),e(uE,npr),e(se,spr),e(se,pE),e(pE,zve),e(zve,lpr),e(pE,ipr),e(pE,wQ),e(wQ,dpr),e(pE,cpr),e(se,mpr),e(se,_E),e(_E,Wve),e(Wve,fpr),e(_E,gpr),e(_E,AQ),e(AQ,hpr),e(_E,upr),e(Ar,ppr),M(bE,Ar,null),b(m,lje,_),b(m,Qd,_),e(Qd,vE),e(vE,Qve),M(b7,Qve,null),e(Qd,_pr),e(Qd,Hve),e(Hve,bpr),b(m,ije,_),b(m,Zo,_),M(v7,Zo,null),e(Zo,vpr),e(Zo,Hd),e(Hd,Fpr),e(Hd,yQ),e(yQ,Tpr),e(Hd,Mpr),e(Hd,LQ),e(LQ,Epr),e(Hd,Cpr),e(Zo,wpr),e(Zo,F7),e(F7,Apr),e(F7,Uve),e(Uve,ypr),e(F7,Lpr),e(Zo,xpr),e(Zo,xt),M(T7,xt,null),e(xt,$pr),e(xt,Jve),e(Jve,kpr),e(xt,Spr),e(xt,Ud),e(Ud,Rpr),e(Ud,Yve),e(Yve,Ppr),e(Ud,Bpr),e(Ud,xQ),e(xQ,Ipr),e(Ud,qpr),e(xt,Npr),M(FE,xt,null),e(Zo,jpr),e(Zo,yr),M(M7,yr,null),e(yr,Dpr),e(yr,Kve),e(Kve,Gpr),e(yr,Opr),e(yr,en),e(en,Vpr),e(en,Zve),e(Zve,Xpr),e(en,zpr),e(en,eFe),e(eFe,Wpr),e(en,Qpr),e(en,oFe),e(oFe,Hpr),e(en,Upr),e(yr,Jpr),e(yr,Me),e(Me,TE),e(TE,rFe),e(rFe,Ypr),e(TE,Kpr),e(TE,$Q),e($Q,Zpr),e(TE,e_r),e(Me,o_r),e(Me,ME),e(ME,tFe),e(tFe,r_r),e(ME,t_r),e(ME,kQ),e(kQ,a_r),e(ME,n_r),e(Me,s_r),e(Me,EE),e(EE,aFe),e(aFe,l_r),e(EE,i_r),e(EE,SQ),e(SQ,d_r),e(EE,c_r),e(Me,m_r),e(Me,CE),e(CE,nFe),e(nFe,f_r),e(CE,g_r),e(CE,RQ),e(RQ,h_r),e(CE,u_r),e(Me,p_r),e(Me,wE),e(wE,sFe),e(sFe,__r),e(wE,b_r),e(wE,PQ),e(PQ,v_r),e(wE,F_r),e(Me,T_r),e(Me,AE),e(AE,lFe),e(lFe,M_r),e(AE,E_r),e(AE,BQ),e(BQ,C_r),e(AE,w_r),e(Me,A_r),e(Me,yE),e(yE,iFe),e(iFe,y_r),e(yE,L_r),e(yE,IQ),e(IQ,x_r),e(yE,$_r),e(Me,k_r),e(Me,LE),e(LE,dFe),e(dFe,S_r),e(LE,R_r),e(LE,qQ),e(qQ,P_r),e(LE,B_r),e(Me,I_r),e(Me,xE),e(xE,cFe),e(cFe,q_r),e(xE,N_r),e(xE,NQ),e(NQ,j_r),e(xE,D_r),e(Me,G_r),e(Me,$E),e($E,mFe),e(mFe,O_r),e($E,V_r),e($E,jQ),e(jQ,X_r),e($E,z_r),e(Me,W_r),e(Me,kE),e(kE,fFe),e(fFe,Q_r),e(kE,H_r),e(kE,DQ),e(DQ,U_r),e(kE,J_r),e(Me,Y_r),e(Me,SE),e(SE,gFe),e(gFe,K_r),e(SE,Z_r),e(SE,GQ),e(GQ,ebr),e(SE,obr),e(yr,rbr),M(RE,yr,null),b(m,dje,_),b(m,Jd,_),e(Jd,PE),e(PE,hFe),M(E7,hFe,null),e(Jd,tbr),e(Jd,uFe),e(uFe,abr),b(m,cje,_),b(m,er,_),M(C7,er,null),e(er,nbr),e(er,Yd),e(Yd,sbr),e(Yd,OQ),e(OQ,lbr),e(Yd,ibr),e(Yd,VQ),e(VQ,dbr),e(Yd,cbr),e(er,mbr),e(er,w7),e(w7,fbr),e(w7,pFe),e(pFe,gbr),e(w7,hbr),e(er,ubr),e(er,$t),M(A7,$t,null),e($t,pbr),e($t,_Fe),e(_Fe,_br),e($t,bbr),e($t,Kd),e(Kd,vbr),e(Kd,bFe),e(bFe,Fbr),e(Kd,Tbr),e(Kd,XQ),e(XQ,Mbr),e(Kd,Ebr),e($t,Cbr),M(BE,$t,null),e(er,wbr),e(er,Lr),M(y7,Lr,null),e(Lr,Abr),e(Lr,vFe),e(vFe,ybr),e(Lr,Lbr),e(Lr,on),e(on,xbr),e(on,FFe),e(FFe,$br),e(on,kbr),e(on,TFe),e(TFe,Sbr),e(on,Rbr),e(on,MFe),e(MFe,Pbr),e(on,Bbr),e(Lr,Ibr),e(Lr,rn),e(rn,IE),e(IE,EFe),e(EFe,qbr),e(IE,Nbr),e(IE,zQ),e(zQ,jbr),e(IE,Dbr),e(rn,Gbr),e(rn,qE),e(qE,CFe),e(CFe,Obr),e(qE,Vbr),e(qE,WQ),e(WQ,Xbr),e(qE,zbr),e(rn,Wbr),e(rn,NE),e(NE,wFe),e(wFe,Qbr),e(NE,Hbr),e(NE,QQ),e(QQ,Ubr),e(NE,Jbr),e(rn,Ybr),e(rn,jE),e(jE,AFe),e(AFe,Kbr),e(jE,Zbr),e(jE,HQ),e(HQ,e2r),e(jE,o2r),e(Lr,r2r),M(DE,Lr,null),b(m,mje,_),b(m,Zd,_),e(Zd,GE),e(GE,yFe),M(L7,yFe,null),e(Zd,t2r),e(Zd,LFe),e(LFe,a2r),b(m,fje,_),b(m,or,_),M(x7,or,null),e(or,n2r),e(or,ec),e(ec,s2r),e(ec,UQ),e(UQ,l2r),e(ec,i2r),e(ec,JQ),e(JQ,d2r),e(ec,c2r),e(or,m2r),e(or,$7),e($7,f2r),e($7,xFe),e(xFe,g2r),e($7,h2r),e(or,u2r),e(or,kt),M(k7,kt,null),e(kt,p2r),e(kt,$Fe),e($Fe,_2r),e(kt,b2r),e(kt,oc),e(oc,v2r),e(oc,kFe),e(kFe,F2r),e(oc,T2r),e(oc,YQ),e(YQ,M2r),e(oc,E2r),e(kt,C2r),M(OE,kt,null),e(or,w2r),e(or,xr),M(S7,xr,null),e(xr,A2r),e(xr,SFe),e(SFe,y2r),e(xr,L2r),e(xr,tn),e(tn,x2r),e(tn,RFe),e(RFe,$2r),e(tn,k2r),e(tn,PFe),e(PFe,S2r),e(tn,R2r),e(tn,BFe),e(BFe,P2r),e(tn,B2r),e(xr,I2r),e(xr,ie),e(ie,VE),e(VE,IFe),e(IFe,q2r),e(VE,N2r),e(VE,KQ),e(KQ,j2r),e(VE,D2r),e(ie,G2r),e(ie,XE),e(XE,qFe),e(qFe,O2r),e(XE,V2r),e(XE,ZQ),e(ZQ,X2r),e(XE,z2r),e(ie,W2r),e(ie,zE),e(zE,NFe),e(NFe,Q2r),e(zE,H2r),e(zE,eH),e(eH,U2r),e(zE,J2r),e(ie,Y2r),e(ie,WE),e(WE,jFe),e(jFe,K2r),e(WE,Z2r),e(WE,oH),e(oH,evr),e(WE,ovr),e(ie,rvr),e(ie,QE),e(QE,DFe),e(DFe,tvr),e(QE,avr),e(QE,rH),e(rH,nvr),e(QE,svr),e(ie,lvr),e(ie,HE),e(HE,GFe),e(GFe,ivr),e(HE,dvr),e(HE,tH),e(tH,cvr),e(HE,mvr),e(ie,fvr),e(ie,UE),e(UE,OFe),e(OFe,gvr),e(UE,hvr),e(UE,aH),e(aH,uvr),e(UE,pvr),e(ie,_vr),e(ie,JE),e(JE,VFe),e(VFe,bvr),e(JE,vvr),e(JE,nH),e(nH,Fvr),e(JE,Tvr),e(ie,Mvr),e(ie,YE),e(YE,XFe),e(XFe,Evr),e(YE,Cvr),e(YE,sH),e(sH,wvr),e(YE,Avr),e(ie,yvr),e(ie,KE),e(KE,zFe),e(zFe,Lvr),e(KE,xvr),e(KE,lH),e(lH,$vr),e(KE,kvr),e(ie,Svr),e(ie,ZE),e(ZE,WFe),e(WFe,Rvr),e(ZE,Pvr),e(ZE,iH),e(iH,Bvr),e(ZE,Ivr),e(ie,qvr),e(ie,eC),e(eC,QFe),e(QFe,Nvr),e(eC,jvr),e(eC,dH),e(dH,Dvr),e(eC,Gvr),e(ie,Ovr),e(ie,oC),e(oC,HFe),e(HFe,Vvr),e(oC,Xvr),e(oC,cH),e(cH,zvr),e(oC,Wvr),e(ie,Qvr),e(ie,rC),e(rC,UFe),e(UFe,Hvr),e(rC,Uvr),e(rC,mH),e(mH,Jvr),e(rC,Yvr),e(ie,Kvr),e(ie,tC),e(tC,JFe),e(JFe,Zvr),e(tC,eFr),e(tC,fH),e(fH,oFr),e(tC,rFr),e(ie,tFr),e(ie,aC),e(aC,YFe),e(YFe,aFr),e(aC,nFr),e(aC,gH),e(gH,sFr),e(aC,lFr),e(ie,iFr),e(ie,nC),e(nC,KFe),e(KFe,dFr),e(nC,cFr),e(nC,hH),e(hH,mFr),e(nC,fFr),e(ie,gFr),e(ie,sC),e(sC,ZFe),e(ZFe,hFr),e(sC,uFr),e(sC,uH),e(uH,pFr),e(sC,_Fr),e(ie,bFr),e(ie,lC),e(lC,e1e),e(e1e,vFr),e(lC,FFr),e(lC,pH),e(pH,TFr),e(lC,MFr),e(ie,EFr),e(ie,iC),e(iC,o1e),e(o1e,CFr),e(iC,wFr),e(iC,_H),e(_H,AFr),e(iC,yFr),e(xr,LFr),M(dC,xr,null),b(m,gje,_),b(m,rc,_),e(rc,cC),e(cC,r1e),M(R7,r1e,null),e(rc,xFr),e(rc,t1e),e(t1e,$Fr),b(m,hje,_),b(m,rr,_),M(P7,rr,null),e(rr,kFr),e(rr,tc),e(tc,SFr),e(tc,bH),e(bH,RFr),e(tc,PFr),e(tc,vH),e(vH,BFr),e(tc,IFr),e(rr,qFr),e(rr,B7),e(B7,NFr),e(B7,a1e),e(a1e,jFr),e(B7,DFr),e(rr,GFr),e(rr,St),M(I7,St,null),e(St,OFr),e(St,n1e),e(n1e,VFr),e(St,XFr),e(St,ac),e(ac,zFr),e(ac,s1e),e(s1e,WFr),e(ac,QFr),e(ac,FH),e(FH,HFr),e(ac,UFr),e(St,JFr),M(mC,St,null),e(rr,YFr),e(rr,$r),M(q7,$r,null),e($r,KFr),e($r,l1e),e(l1e,ZFr),e($r,e1r),e($r,an),e(an,o1r),e(an,i1e),e(i1e,r1r),e(an,t1r),e(an,d1e),e(d1e,a1r),e(an,n1r),e(an,c1e),e(c1e,s1r),e(an,l1r),e($r,i1r),e($r,ye),e(ye,fC),e(fC,m1e),e(m1e,d1r),e(fC,c1r),e(fC,TH),e(TH,m1r),e(fC,f1r),e(ye,g1r),e(ye,gC),e(gC,f1e),e(f1e,h1r),e(gC,u1r),e(gC,MH),e(MH,p1r),e(gC,_1r),e(ye,b1r),e(ye,hC),e(hC,g1e),e(g1e,v1r),e(hC,F1r),e(hC,EH),e(EH,T1r),e(hC,M1r),e(ye,E1r),e(ye,uC),e(uC,h1e),e(h1e,C1r),e(uC,w1r),e(uC,CH),e(CH,A1r),e(uC,y1r),e(ye,L1r),e(ye,pC),e(pC,u1e),e(u1e,x1r),e(pC,$1r),e(pC,wH),e(wH,k1r),e(pC,S1r),e(ye,R1r),e(ye,_C),e(_C,p1e),e(p1e,P1r),e(_C,B1r),e(_C,AH),e(AH,I1r),e(_C,q1r),e(ye,N1r),e(ye,bC),e(bC,_1e),e(_1e,j1r),e(bC,D1r),e(bC,yH),e(yH,G1r),e(bC,O1r),e(ye,V1r),e(ye,vC),e(vC,b1e),e(b1e,X1r),e(vC,z1r),e(vC,LH),e(LH,W1r),e(vC,Q1r),e(ye,H1r),e(ye,FC),e(FC,v1e),e(v1e,U1r),e(FC,J1r),e(FC,xH),e(xH,Y1r),e(FC,K1r),e(ye,Z1r),e(ye,TC),e(TC,F1e),e(F1e,eTr),e(TC,oTr),e(TC,$H),e($H,rTr),e(TC,tTr),e($r,aTr),M(MC,$r,null),b(m,uje,_),b(m,nc,_),e(nc,EC),e(EC,T1e),M(N7,T1e,null),e(nc,nTr),e(nc,M1e),e(M1e,sTr),b(m,pje,_),b(m,tr,_),M(j7,tr,null),e(tr,lTr),e(tr,sc),e(sc,iTr),e(sc,kH),e(kH,dTr),e(sc,cTr),e(sc,SH),e(SH,mTr),e(sc,fTr),e(tr,gTr),e(tr,D7),e(D7,hTr),e(D7,E1e),e(E1e,uTr),e(D7,pTr),e(tr,_Tr),e(tr,Rt),M(G7,Rt,null),e(Rt,bTr),e(Rt,C1e),e(C1e,vTr),e(Rt,FTr),e(Rt,lc),e(lc,TTr),e(lc,w1e),e(w1e,MTr),e(lc,ETr),e(lc,RH),e(RH,CTr),e(lc,wTr),e(Rt,ATr),M(CC,Rt,null),e(tr,yTr),e(tr,kr),M(O7,kr,null),e(kr,LTr),e(kr,A1e),e(A1e,xTr),e(kr,$Tr),e(kr,nn),e(nn,kTr),e(nn,y1e),e(y1e,STr),e(nn,RTr),e(nn,L1e),e(L1e,PTr),e(nn,BTr),e(nn,x1e),e(x1e,ITr),e(nn,qTr),e(kr,NTr),e(kr,oe),e(oe,wC),e(wC,$1e),e($1e,jTr),e(wC,DTr),e(wC,PH),e(PH,GTr),e(wC,OTr),e(oe,VTr),e(oe,AC),e(AC,k1e),e(k1e,XTr),e(AC,zTr),e(AC,BH),e(BH,WTr),e(AC,QTr),e(oe,HTr),e(oe,yC),e(yC,S1e),e(S1e,UTr),e(yC,JTr),e(yC,IH),e(IH,YTr),e(yC,KTr),e(oe,ZTr),e(oe,LC),e(LC,R1e),e(R1e,eMr),e(LC,oMr),e(LC,qH),e(qH,rMr),e(LC,tMr),e(oe,aMr),e(oe,xC),e(xC,P1e),e(P1e,nMr),e(xC,sMr),e(xC,NH),e(NH,lMr),e(xC,iMr),e(oe,dMr),e(oe,$C),e($C,B1e),e(B1e,cMr),e($C,mMr),e($C,jH),e(jH,fMr),e($C,gMr),e(oe,hMr),e(oe,kC),e(kC,I1e),e(I1e,uMr),e(kC,pMr),e(kC,DH),e(DH,_Mr),e(kC,bMr),e(oe,vMr),e(oe,SC),e(SC,q1e),e(q1e,FMr),e(SC,TMr),e(SC,GH),e(GH,MMr),e(SC,EMr),e(oe,CMr),e(oe,RC),e(RC,N1e),e(N1e,wMr),e(RC,AMr),e(RC,OH),e(OH,yMr),e(RC,LMr),e(oe,xMr),e(oe,PC),e(PC,j1e),e(j1e,$Mr),e(PC,kMr),e(PC,VH),e(VH,SMr),e(PC,RMr),e(oe,PMr),e(oe,BC),e(BC,D1e),e(D1e,BMr),e(BC,IMr),e(BC,XH),e(XH,qMr),e(BC,NMr),e(oe,jMr),e(oe,IC),e(IC,G1e),e(G1e,DMr),e(IC,GMr),e(IC,zH),e(zH,OMr),e(IC,VMr),e(oe,XMr),e(oe,qC),e(qC,O1e),e(O1e,zMr),e(qC,WMr),e(qC,WH),e(WH,QMr),e(qC,HMr),e(oe,UMr),e(oe,NC),e(NC,V1e),e(V1e,JMr),e(NC,YMr),e(NC,QH),e(QH,KMr),e(NC,ZMr),e(oe,e4r),e(oe,jC),e(jC,X1e),e(X1e,o4r),e(jC,r4r),e(jC,HH),e(HH,t4r),e(jC,a4r),e(oe,n4r),e(oe,DC),e(DC,z1e),e(z1e,s4r),e(DC,l4r),e(DC,UH),e(UH,i4r),e(DC,d4r),e(oe,c4r),e(oe,GC),e(GC,W1e),e(W1e,m4r),e(GC,f4r),e(GC,JH),e(JH,g4r),e(GC,h4r),e(oe,u4r),e(oe,OC),e(OC,Q1e),e(Q1e,p4r),e(OC,_4r),e(OC,YH),e(YH,b4r),e(OC,v4r),e(oe,F4r),e(oe,VC),e(VC,H1e),e(H1e,T4r),e(VC,M4r),e(VC,KH),e(KH,E4r),e(VC,C4r),e(oe,w4r),e(oe,XC),e(XC,U1e),e(U1e,A4r),e(XC,y4r),e(XC,ZH),e(ZH,L4r),e(XC,x4r),e(oe,$4r),e(oe,zC),e(zC,J1e),e(J1e,k4r),e(zC,S4r),e(zC,eU),e(eU,R4r),e(zC,P4r),e(oe,B4r),e(oe,WC),e(WC,Y1e),e(Y1e,I4r),e(WC,q4r),e(WC,oU),e(oU,N4r),e(WC,j4r),e(oe,D4r),e(oe,QC),e(QC,K1e),e(K1e,G4r),e(QC,O4r),e(QC,rU),e(rU,V4r),e(QC,X4r),e(oe,z4r),e(oe,HC),e(HC,Z1e),e(Z1e,W4r),e(HC,Q4r),e(HC,tU),e(tU,H4r),e(HC,U4r),e(oe,J4r),e(oe,UC),e(UC,eTe),e(eTe,Y4r),e(UC,K4r),e(UC,aU),e(aU,Z4r),e(UC,eEr),e(oe,oEr),e(oe,JC),e(JC,oTe),e(oTe,rEr),e(JC,tEr),e(JC,nU),e(nU,aEr),e(JC,nEr),e(kr,sEr),M(YC,kr,null),b(m,_je,_),b(m,ic,_),e(ic,KC),e(KC,rTe),M(V7,rTe,null),e(ic,lEr),e(ic,tTe),e(tTe,iEr),b(m,bje,_),b(m,ar,_),M(X7,ar,null),e(ar,dEr),e(ar,dc),e(dc,cEr),e(dc,sU),e(sU,mEr),e(dc,fEr),e(dc,lU),e(lU,gEr),e(dc,hEr),e(ar,uEr),e(ar,z7),e(z7,pEr),e(z7,aTe),e(aTe,_Er),e(z7,bEr),e(ar,vEr),e(ar,Pt),M(W7,Pt,null),e(Pt,FEr),e(Pt,nTe),e(nTe,TEr),e(Pt,MEr),e(Pt,cc),e(cc,EEr),e(cc,sTe),e(sTe,CEr),e(cc,wEr),e(cc,iU),e(iU,AEr),e(cc,yEr),e(Pt,LEr),M(ZC,Pt,null),e(ar,xEr),e(ar,Sr),M(Q7,Sr,null),e(Sr,$Er),e(Sr,lTe),e(lTe,kEr),e(Sr,SEr),e(Sr,sn),e(sn,REr),e(sn,iTe),e(iTe,PEr),e(sn,BEr),e(sn,dTe),e(dTe,IEr),e(sn,qEr),e(sn,cTe),e(cTe,NEr),e(sn,jEr),e(Sr,DEr),e(Sr,ue),e(ue,e5),e(e5,mTe),e(mTe,GEr),e(e5,OEr),e(e5,dU),e(dU,VEr),e(e5,XEr),e(ue,zEr),e(ue,o5),e(o5,fTe),e(fTe,WEr),e(o5,QEr),e(o5,cU),e(cU,HEr),e(o5,UEr),e(ue,JEr),e(ue,r5),e(r5,gTe),e(gTe,YEr),e(r5,KEr),e(r5,mU),e(mU,ZEr),e(r5,eCr),e(ue,oCr),e(ue,t5),e(t5,hTe),e(hTe,rCr),e(t5,tCr),e(t5,fU),e(fU,aCr),e(t5,nCr),e(ue,sCr),e(ue,a5),e(a5,uTe),e(uTe,lCr),e(a5,iCr),e(a5,gU),e(gU,dCr),e(a5,cCr),e(ue,mCr),e(ue,n5),e(n5,pTe),e(pTe,fCr),e(n5,gCr),e(n5,hU),e(hU,hCr),e(n5,uCr),e(ue,pCr),e(ue,s5),e(s5,_Te),e(_Te,_Cr),e(s5,bCr),e(s5,uU),e(uU,vCr),e(s5,FCr),e(ue,TCr),e(ue,l5),e(l5,bTe),e(bTe,MCr),e(l5,ECr),e(l5,pU),e(pU,CCr),e(l5,wCr),e(ue,ACr),e(ue,i5),e(i5,vTe),e(vTe,yCr),e(i5,LCr),e(i5,_U),e(_U,xCr),e(i5,$Cr),e(ue,kCr),e(ue,d5),e(d5,FTe),e(FTe,SCr),e(d5,RCr),e(d5,bU),e(bU,PCr),e(d5,BCr),e(ue,ICr),e(ue,c5),e(c5,TTe),e(TTe,qCr),e(c5,NCr),e(c5,vU),e(vU,jCr),e(c5,DCr),e(ue,GCr),e(ue,m5),e(m5,MTe),e(MTe,OCr),e(m5,VCr),e(m5,FU),e(FU,XCr),e(m5,zCr),e(ue,WCr),e(ue,f5),e(f5,ETe),e(ETe,QCr),e(f5,HCr),e(f5,TU),e(TU,UCr),e(f5,JCr),e(ue,YCr),e(ue,g5),e(g5,CTe),e(CTe,KCr),e(g5,ZCr),e(g5,MU),e(MU,e5r),e(g5,o5r),e(ue,r5r),e(ue,h5),e(h5,wTe),e(wTe,t5r),e(h5,a5r),e(h5,EU),e(EU,n5r),e(h5,s5r),e(ue,l5r),e(ue,u5),e(u5,ATe),e(ATe,i5r),e(u5,d5r),e(u5,CU),e(CU,c5r),e(u5,m5r),e(ue,f5r),e(ue,p5),e(p5,yTe),e(yTe,g5r),e(p5,h5r),e(p5,wU),e(wU,u5r),e(p5,p5r),e(Sr,_5r),M(_5,Sr,null),b(m,vje,_),b(m,mc,_),e(mc,b5),e(b5,LTe),M(H7,LTe,null),e(mc,b5r),e(mc,xTe),e(xTe,v5r),b(m,Fje,_),b(m,nr,_),M(U7,nr,null),e(nr,F5r),e(nr,fc),e(fc,T5r),e(fc,AU),e(AU,M5r),e(fc,E5r),e(fc,yU),e(yU,C5r),e(fc,w5r),e(nr,A5r),e(nr,J7),e(J7,y5r),e(J7,$Te),e($Te,L5r),e(J7,x5r),e(nr,$5r),e(nr,Bt),M(Y7,Bt,null),e(Bt,k5r),e(Bt,kTe),e(kTe,S5r),e(Bt,R5r),e(Bt,gc),e(gc,P5r),e(gc,STe),e(STe,B5r),e(gc,I5r),e(gc,LU),e(LU,q5r),e(gc,N5r),e(Bt,j5r),M(v5,Bt,null),e(nr,D5r),e(nr,Rr),M(K7,Rr,null),e(Rr,G5r),e(Rr,RTe),e(RTe,O5r),e(Rr,V5r),e(Rr,ln),e(ln,X5r),e(ln,PTe),e(PTe,z5r),e(ln,W5r),e(ln,BTe),e(BTe,Q5r),e(ln,H5r),e(ln,ITe),e(ITe,U5r),e(ln,J5r),e(Rr,Y5r),e(Rr,Z7),e(Z7,F5),e(F5,qTe),e(qTe,K5r),e(F5,Z5r),e(F5,xU),e(xU,e3r),e(F5,o3r),e(Z7,r3r),e(Z7,T5),e(T5,NTe),e(NTe,t3r),e(T5,a3r),e(T5,$U),e($U,n3r),e(T5,s3r),e(Rr,l3r),M(M5,Rr,null),b(m,Tje,_),b(m,hc,_),e(hc,E5),e(E5,jTe),M(e9,jTe,null),e(hc,i3r),e(hc,DTe),e(DTe,d3r),b(m,Mje,_),b(m,sr,_),M(o9,sr,null),e(sr,c3r),e(sr,uc),e(uc,m3r),e(uc,kU),e(kU,f3r),e(uc,g3r),e(uc,SU),e(SU,h3r),e(uc,u3r),e(sr,p3r),e(sr,r9),e(r9,_3r),e(r9,GTe),e(GTe,b3r),e(r9,v3r),e(sr,F3r),e(sr,It),M(t9,It,null),e(It,T3r),e(It,OTe),e(OTe,M3r),e(It,E3r),e(It,pc),e(pc,C3r),e(pc,VTe),e(VTe,w3r),e(pc,A3r),e(pc,RU),e(RU,y3r),e(pc,L3r),e(It,x3r),M(C5,It,null),e(sr,$3r),e(sr,Pr),M(a9,Pr,null),e(Pr,k3r),e(Pr,XTe),e(XTe,S3r),e(Pr,R3r),e(Pr,dn),e(dn,P3r),e(dn,zTe),e(zTe,B3r),e(dn,I3r),e(dn,WTe),e(WTe,q3r),e(dn,N3r),e(dn,QTe),e(QTe,j3r),e(dn,D3r),e(Pr,G3r),e(Pr,HTe),e(HTe,w5),e(w5,UTe),e(UTe,O3r),e(w5,V3r),e(w5,PU),e(PU,X3r),e(w5,z3r),e(Pr,W3r),M(A5,Pr,null),b(m,Eje,_),b(m,_c,_),e(_c,y5),e(y5,JTe),M(n9,JTe,null),e(_c,Q3r),e(_c,YTe),e(YTe,H3r),b(m,Cje,_),b(m,lr,_),M(s9,lr,null),e(lr,U3r),e(lr,bc),e(bc,J3r),e(bc,BU),e(BU,Y3r),e(bc,K3r),e(bc,IU),e(IU,Z3r),e(bc,ewr),e(lr,owr),e(lr,l9),e(l9,rwr),e(l9,KTe),e(KTe,twr),e(l9,awr),e(lr,nwr),e(lr,qt),M(i9,qt,null),e(qt,swr),e(qt,ZTe),e(ZTe,lwr),e(qt,iwr),e(qt,vc),e(vc,dwr),e(vc,eMe),e(eMe,cwr),e(vc,mwr),e(vc,qU),e(qU,fwr),e(vc,gwr),e(qt,hwr),M(L5,qt,null),e(lr,uwr),e(lr,Br),M(d9,Br,null),e(Br,pwr),e(Br,oMe),e(oMe,_wr),e(Br,bwr),e(Br,cn),e(cn,vwr),e(cn,rMe),e(rMe,Fwr),e(cn,Twr),e(cn,tMe),e(tMe,Mwr),e(cn,Ewr),e(cn,aMe),e(aMe,Cwr),e(cn,wwr),e(Br,Awr),e(Br,de),e(de,x5),e(x5,nMe),e(nMe,ywr),e(x5,Lwr),e(x5,NU),e(NU,xwr),e(x5,$wr),e(de,kwr),e(de,$5),e($5,sMe),e(sMe,Swr),e($5,Rwr),e($5,jU),e(jU,Pwr),e($5,Bwr),e(de,Iwr),e(de,k5),e(k5,lMe),e(lMe,qwr),e(k5,Nwr),e(k5,DU),e(DU,jwr),e(k5,Dwr),e(de,Gwr),e(de,S5),e(S5,iMe),e(iMe,Owr),e(S5,Vwr),e(S5,GU),e(GU,Xwr),e(S5,zwr),e(de,Wwr),e(de,R5),e(R5,dMe),e(dMe,Qwr),e(R5,Hwr),e(R5,OU),e(OU,Uwr),e(R5,Jwr),e(de,Ywr),e(de,P5),e(P5,cMe),e(cMe,Kwr),e(P5,Zwr),e(P5,VU),e(VU,e0r),e(P5,o0r),e(de,r0r),e(de,B5),e(B5,mMe),e(mMe,t0r),e(B5,a0r),e(B5,XU),e(XU,n0r),e(B5,s0r),e(de,l0r),e(de,I5),e(I5,fMe),e(fMe,i0r),e(I5,d0r),e(I5,zU),e(zU,c0r),e(I5,m0r),e(de,f0r),e(de,q5),e(q5,gMe),e(gMe,g0r),e(q5,h0r),e(q5,WU),e(WU,u0r),e(q5,p0r),e(de,_0r),e(de,N5),e(N5,hMe),e(hMe,b0r),e(N5,v0r),e(N5,QU),e(QU,F0r),e(N5,T0r),e(de,M0r),e(de,j5),e(j5,uMe),e(uMe,E0r),e(j5,C0r),e(j5,HU),e(HU,w0r),e(j5,A0r),e(de,y0r),e(de,D5),e(D5,pMe),e(pMe,L0r),e(D5,x0r),e(D5,UU),e(UU,$0r),e(D5,k0r),e(de,S0r),e(de,G5),e(G5,_Me),e(_Me,R0r),e(G5,P0r),e(G5,JU),e(JU,B0r),e(G5,I0r),e(de,q0r),e(de,O5),e(O5,bMe),e(bMe,N0r),e(O5,j0r),e(O5,YU),e(YU,D0r),e(O5,G0r),e(de,O0r),e(de,V5),e(V5,vMe),e(vMe,V0r),e(V5,X0r),e(V5,KU),e(KU,z0r),e(V5,W0r),e(de,Q0r),e(de,X5),e(X5,FMe),e(FMe,H0r),e(X5,U0r),e(X5,ZU),e(ZU,J0r),e(X5,Y0r),e(de,K0r),e(de,z5),e(z5,TMe),e(TMe,Z0r),e(z5,eAr),e(z5,eJ),e(eJ,oAr),e(z5,rAr),e(de,tAr),e(de,W5),e(W5,MMe),e(MMe,aAr),e(W5,nAr),e(W5,oJ),e(oJ,sAr),e(W5,lAr),e(de,iAr),e(de,Q5),e(Q5,EMe),e(EMe,dAr),e(Q5,cAr),e(Q5,rJ),e(rJ,mAr),e(Q5,fAr),e(de,gAr),e(de,H5),e(H5,CMe),e(CMe,hAr),e(H5,uAr),e(H5,tJ),e(tJ,pAr),e(H5,_Ar),e(Br,bAr),M(U5,Br,null),b(m,wje,_),b(m,Fc,_),e(Fc,J5),e(J5,wMe),M(c9,wMe,null),e(Fc,vAr),e(Fc,AMe),e(AMe,FAr),b(m,Aje,_),b(m,ir,_),M(m9,ir,null),e(ir,TAr),e(ir,Tc),e(Tc,MAr),e(Tc,aJ),e(aJ,EAr),e(Tc,CAr),e(Tc,nJ),e(nJ,wAr),e(Tc,AAr),e(ir,yAr),e(ir,f9),e(f9,LAr),e(f9,yMe),e(yMe,xAr),e(f9,$Ar),e(ir,kAr),e(ir,Nt),M(g9,Nt,null),e(Nt,SAr),e(Nt,LMe),e(LMe,RAr),e(Nt,PAr),e(Nt,Mc),e(Mc,BAr),e(Mc,xMe),e(xMe,IAr),e(Mc,qAr),e(Mc,sJ),e(sJ,NAr),e(Mc,jAr),e(Nt,DAr),M(Y5,Nt,null),e(ir,GAr),e(ir,Ir),M(h9,Ir,null),e(Ir,OAr),e(Ir,$Me),e($Me,VAr),e(Ir,XAr),e(Ir,mn),e(mn,zAr),e(mn,kMe),e(kMe,WAr),e(mn,QAr),e(mn,SMe),e(SMe,HAr),e(mn,UAr),e(mn,RMe),e(RMe,JAr),e(mn,YAr),e(Ir,KAr),e(Ir,ce),e(ce,K5),e(K5,PMe),e(PMe,ZAr),e(K5,e6r),e(K5,lJ),e(lJ,o6r),e(K5,r6r),e(ce,t6r),e(ce,Z5),e(Z5,BMe),e(BMe,a6r),e(Z5,n6r),e(Z5,iJ),e(iJ,s6r),e(Z5,l6r),e(ce,i6r),e(ce,e3),e(e3,IMe),e(IMe,d6r),e(e3,c6r),e(e3,dJ),e(dJ,m6r),e(e3,f6r),e(ce,g6r),e(ce,o3),e(o3,qMe),e(qMe,h6r),e(o3,u6r),e(o3,cJ),e(cJ,p6r),e(o3,_6r),e(ce,b6r),e(ce,r3),e(r3,NMe),e(NMe,v6r),e(r3,F6r),e(r3,mJ),e(mJ,T6r),e(r3,M6r),e(ce,E6r),e(ce,t3),e(t3,jMe),e(jMe,C6r),e(t3,w6r),e(t3,fJ),e(fJ,A6r),e(t3,y6r),e(ce,L6r),e(ce,a3),e(a3,DMe),e(DMe,x6r),e(a3,$6r),e(a3,gJ),e(gJ,k6r),e(a3,S6r),e(ce,R6r),e(ce,n3),e(n3,GMe),e(GMe,P6r),e(n3,B6r),e(n3,hJ),e(hJ,I6r),e(n3,q6r),e(ce,N6r),e(ce,s3),e(s3,OMe),e(OMe,j6r),e(s3,D6r),e(s3,uJ),e(uJ,G6r),e(s3,O6r),e(ce,V6r),e(ce,l3),e(l3,VMe),e(VMe,X6r),e(l3,z6r),e(l3,pJ),e(pJ,W6r),e(l3,Q6r),e(ce,H6r),e(ce,i3),e(i3,XMe),e(XMe,U6r),e(i3,J6r),e(i3,_J),e(_J,Y6r),e(i3,K6r),e(ce,Z6r),e(ce,d3),e(d3,zMe),e(zMe,eyr),e(d3,oyr),e(d3,bJ),e(bJ,ryr),e(d3,tyr),e(ce,ayr),e(ce,c3),e(c3,WMe),e(WMe,nyr),e(c3,syr),e(c3,vJ),e(vJ,lyr),e(c3,iyr),e(ce,dyr),e(ce,m3),e(m3,QMe),e(QMe,cyr),e(m3,myr),e(m3,FJ),e(FJ,fyr),e(m3,gyr),e(ce,hyr),e(ce,f3),e(f3,HMe),e(HMe,uyr),e(f3,pyr),e(f3,TJ),e(TJ,_yr),e(f3,byr),e(ce,vyr),e(ce,g3),e(g3,UMe),e(UMe,Fyr),e(g3,Tyr),e(g3,MJ),e(MJ,Myr),e(g3,Eyr),e(ce,Cyr),e(ce,h3),e(h3,JMe),e(JMe,wyr),e(h3,Ayr),e(h3,EJ),e(EJ,yyr),e(h3,Lyr),e(ce,xyr),e(ce,u3),e(u3,YMe),e(YMe,$yr),e(u3,kyr),e(u3,CJ),e(CJ,Syr),e(u3,Ryr),e(ce,Pyr),e(ce,p3),e(p3,KMe),e(KMe,Byr),e(p3,Iyr),e(p3,wJ),e(wJ,qyr),e(p3,Nyr),e(ce,jyr),e(ce,_3),e(_3,ZMe),e(ZMe,Dyr),e(_3,Gyr),e(_3,AJ),e(AJ,Oyr),e(_3,Vyr),e(Ir,Xyr),M(b3,Ir,null),b(m,yje,_),b(m,Ec,_),e(Ec,v3),e(v3,e4e),M(u9,e4e,null),e(Ec,zyr),e(Ec,o4e),e(o4e,Wyr),b(m,Lje,_),b(m,dr,_),M(p9,dr,null),e(dr,Qyr),e(dr,Cc),e(Cc,Hyr),e(Cc,yJ),e(yJ,Uyr),e(Cc,Jyr),e(Cc,LJ),e(LJ,Yyr),e(Cc,Kyr),e(dr,Zyr),e(dr,_9),e(_9,eLr),e(_9,r4e),e(r4e,oLr),e(_9,rLr),e(dr,tLr),e(dr,jt),M(b9,jt,null),e(jt,aLr),e(jt,t4e),e(t4e,nLr),e(jt,sLr),e(jt,wc),e(wc,lLr),e(wc,a4e),e(a4e,iLr),e(wc,dLr),e(wc,xJ),e(xJ,cLr),e(wc,mLr),e(jt,fLr),M(F3,jt,null),e(dr,gLr),e(dr,qr),M(v9,qr,null),e(qr,hLr),e(qr,n4e),e(n4e,uLr),e(qr,pLr),e(qr,fn),e(fn,_Lr),e(fn,s4e),e(s4e,bLr),e(fn,vLr),e(fn,l4e),e(l4e,FLr),e(fn,TLr),e(fn,i4e),e(i4e,MLr),e(fn,ELr),e(qr,CLr),e(qr,d4e),e(d4e,T3),e(T3,c4e),e(c4e,wLr),e(T3,ALr),e(T3,$J),e($J,yLr),e(T3,LLr),e(qr,xLr),M(M3,qr,null),b(m,xje,_),b(m,Ac,_),e(Ac,E3),e(E3,m4e),M(F9,m4e,null),e(Ac,$Lr),e(Ac,f4e),e(f4e,kLr),b(m,$je,_),b(m,cr,_),M(T9,cr,null),e(cr,SLr),e(cr,yc),e(yc,RLr),e(yc,kJ),e(kJ,PLr),e(yc,BLr),e(yc,SJ),e(SJ,ILr),e(yc,qLr),e(cr,NLr),e(cr,M9),e(M9,jLr),e(M9,g4e),e(g4e,DLr),e(M9,GLr),e(cr,OLr),e(cr,Dt),M(E9,Dt,null),e(Dt,VLr),e(Dt,h4e),e(h4e,XLr),e(Dt,zLr),e(Dt,Lc),e(Lc,WLr),e(Lc,u4e),e(u4e,QLr),e(Lc,HLr),e(Lc,RJ),e(RJ,ULr),e(Lc,JLr),e(Dt,YLr),M(C3,Dt,null),e(cr,KLr),e(cr,Nr),M(C9,Nr,null),e(Nr,ZLr),e(Nr,p4e),e(p4e,e8r),e(Nr,o8r),e(Nr,gn),e(gn,r8r),e(gn,_4e),e(_4e,t8r),e(gn,a8r),e(gn,b4e),e(b4e,n8r),e(gn,s8r),e(gn,v4e),e(v4e,l8r),e(gn,i8r),e(Nr,d8r),e(Nr,F4e),e(F4e,w3),e(w3,T4e),e(T4e,c8r),e(w3,m8r),e(w3,PJ),e(PJ,f8r),e(w3,g8r),e(Nr,h8r),M(A3,Nr,null),b(m,kje,_),b(m,xc,_),e(xc,y3),e(y3,M4e),M(w9,M4e,null),e(xc,u8r),e(xc,E4e),e(E4e,p8r),b(m,Sje,_),b(m,mr,_),M(A9,mr,null),e(mr,_8r),e(mr,$c),e($c,b8r),e($c,BJ),e(BJ,v8r),e($c,F8r),e($c,IJ),e(IJ,T8r),e($c,M8r),e(mr,E8r),e(mr,y9),e(y9,C8r),e(y9,C4e),e(C4e,w8r),e(y9,A8r),e(mr,y8r),e(mr,Gt),M(L9,Gt,null),e(Gt,L8r),e(Gt,w4e),e(w4e,x8r),e(Gt,$8r),e(Gt,kc),e(kc,k8r),e(kc,A4e),e(A4e,S8r),e(kc,R8r),e(kc,qJ),e(qJ,P8r),e(kc,B8r),e(Gt,I8r),M(L3,Gt,null),e(mr,q8r),e(mr,jr),M(x9,jr,null),e(jr,N8r),e(jr,y4e),e(y4e,j8r),e(jr,D8r),e(jr,hn),e(hn,G8r),e(hn,L4e),e(L4e,O8r),e(hn,V8r),e(hn,x4e),e(x4e,X8r),e(hn,z8r),e(hn,$4e),e($4e,W8r),e(hn,Q8r),e(jr,H8r),e(jr,te),e(te,x3),e(x3,k4e),e(k4e,U8r),e(x3,J8r),e(x3,NJ),e(NJ,Y8r),e(x3,K8r),e(te,Z8r),e(te,$3),e($3,S4e),e(S4e,e7r),e($3,o7r),e($3,jJ),e(jJ,r7r),e($3,t7r),e(te,a7r),e(te,k3),e(k3,R4e),e(R4e,n7r),e(k3,s7r),e(k3,DJ),e(DJ,l7r),e(k3,i7r),e(te,d7r),e(te,S3),e(S3,P4e),e(P4e,c7r),e(S3,m7r),e(S3,GJ),e(GJ,f7r),e(S3,g7r),e(te,h7r),e(te,R3),e(R3,B4e),e(B4e,u7r),e(R3,p7r),e(R3,OJ),e(OJ,_7r),e(R3,b7r),e(te,v7r),e(te,P3),e(P3,I4e),e(I4e,F7r),e(P3,T7r),e(P3,VJ),e(VJ,M7r),e(P3,E7r),e(te,C7r),e(te,B3),e(B3,q4e),e(q4e,w7r),e(B3,A7r),e(B3,XJ),e(XJ,y7r),e(B3,L7r),e(te,x7r),e(te,I3),e(I3,N4e),e(N4e,$7r),e(I3,k7r),e(I3,zJ),e(zJ,S7r),e(I3,R7r),e(te,P7r),e(te,q3),e(q3,j4e),e(j4e,B7r),e(q3,I7r),e(q3,WJ),e(WJ,q7r),e(q3,N7r),e(te,j7r),e(te,N3),e(N3,D4e),e(D4e,D7r),e(N3,G7r),e(N3,QJ),e(QJ,O7r),e(N3,V7r),e(te,X7r),e(te,j3),e(j3,G4e),e(G4e,z7r),e(j3,W7r),e(j3,HJ),e(HJ,Q7r),e(j3,H7r),e(te,U7r),e(te,D3),e(D3,O4e),e(O4e,J7r),e(D3,Y7r),e(D3,UJ),e(UJ,K7r),e(D3,Z7r),e(te,e9r),e(te,G3),e(G3,V4e),e(V4e,o9r),e(G3,r9r),e(G3,JJ),e(JJ,t9r),e(G3,a9r),e(te,n9r),e(te,O3),e(O3,X4e),e(X4e,s9r),e(O3,l9r),e(O3,YJ),e(YJ,i9r),e(O3,d9r),e(te,c9r),e(te,V3),e(V3,z4e),e(z4e,m9r),e(V3,f9r),e(V3,KJ),e(KJ,g9r),e(V3,h9r),e(te,u9r),e(te,X3),e(X3,W4e),e(W4e,p9r),e(X3,_9r),e(X3,ZJ),e(ZJ,b9r),e(X3,v9r),e(te,F9r),e(te,z3),e(z3,Q4e),e(Q4e,T9r),e(z3,M9r),e(z3,eY),e(eY,E9r),e(z3,C9r),e(te,w9r),e(te,W3),e(W3,H4e),e(H4e,A9r),e(W3,y9r),e(W3,oY),e(oY,L9r),e(W3,x9r),e(te,$9r),e(te,Q3),e(Q3,U4e),e(U4e,k9r),e(Q3,S9r),e(Q3,rY),e(rY,R9r),e(Q3,P9r),e(te,B9r),e(te,H3),e(H3,J4e),e(J4e,I9r),e(H3,q9r),e(H3,tY),e(tY,N9r),e(H3,j9r),e(te,D9r),e(te,U3),e(U3,Y4e),e(Y4e,G9r),e(U3,O9r),e(U3,aY),e(aY,V9r),e(U3,X9r),e(te,z9r),e(te,J3),e(J3,K4e),e(K4e,W9r),e(J3,Q9r),e(J3,nY),e(nY,H9r),e(J3,U9r),e(te,J9r),e(te,Y3),e(Y3,Z4e),e(Z4e,Y9r),e(Y3,K9r),e(Y3,sY),e(sY,Z9r),e(Y3,exr),e(te,oxr),e(te,K3),e(K3,eEe),e(eEe,rxr),e(K3,txr),e(K3,lY),e(lY,axr),e(K3,nxr),e(te,sxr),e(te,Z3),e(Z3,oEe),e(oEe,lxr),e(Z3,ixr),e(Z3,iY),e(iY,dxr),e(Z3,cxr),e(jr,mxr),M(ew,jr,null),b(m,Rje,_),b(m,Sc,_),e(Sc,ow),e(ow,rEe),M($9,rEe,null),e(Sc,fxr),e(Sc,tEe),e(tEe,gxr),b(m,Pje,_),b(m,fr,_),M(k9,fr,null),e(fr,hxr),e(fr,Rc),e(Rc,uxr),e(Rc,dY),e(dY,pxr),e(Rc,_xr),e(Rc,cY),e(cY,bxr),e(Rc,vxr),e(fr,Fxr),e(fr,S9),e(S9,Txr),e(S9,aEe),e(aEe,Mxr),e(S9,Exr),e(fr,Cxr),e(fr,Ot),M(R9,Ot,null),e(Ot,wxr),e(Ot,nEe),e(nEe,Axr),e(Ot,yxr),e(Ot,Pc),e(Pc,Lxr),e(Pc,sEe),e(sEe,xxr),e(Pc,$xr),e(Pc,mY),e(mY,kxr),e(Pc,Sxr),e(Ot,Rxr),M(rw,Ot,null),e(fr,Pxr),e(fr,Dr),M(P9,Dr,null),e(Dr,Bxr),e(Dr,lEe),e(lEe,Ixr),e(Dr,qxr),e(Dr,un),e(un,Nxr),e(un,iEe),e(iEe,jxr),e(un,Dxr),e(un,dEe),e(dEe,Gxr),e(un,Oxr),e(un,cEe),e(cEe,Vxr),e(un,Xxr),e(Dr,zxr),e(Dr,Re),e(Re,tw),e(tw,mEe),e(mEe,Wxr),e(tw,Qxr),e(tw,fY),e(fY,Hxr),e(tw,Uxr),e(Re,Jxr),e(Re,aw),e(aw,fEe),e(fEe,Yxr),e(aw,Kxr),e(aw,gY),e(gY,Zxr),e(aw,e$r),e(Re,o$r),e(Re,nw),e(nw,gEe),e(gEe,r$r),e(nw,t$r),e(nw,hY),e(hY,a$r),e(nw,n$r),e(Re,s$r),e(Re,sw),e(sw,hEe),e(hEe,l$r),e(sw,i$r),e(sw,uY),e(uY,d$r),e(sw,c$r),e(Re,m$r),e(Re,lw),e(lw,uEe),e(uEe,f$r),e(lw,g$r),e(lw,pY),e(pY,h$r),e(lw,u$r),e(Re,p$r),e(Re,iw),e(iw,pEe),e(pEe,_$r),e(iw,b$r),e(iw,_Y),e(_Y,v$r),e(iw,F$r),e(Re,T$r),e(Re,dw),e(dw,_Ee),e(_Ee,M$r),e(dw,E$r),e(dw,bY),e(bY,C$r),e(dw,w$r),e(Re,A$r),e(Re,cw),e(cw,bEe),e(bEe,y$r),e(cw,L$r),e(cw,vY),e(vY,x$r),e(cw,$$r),e(Re,k$r),e(Re,mw),e(mw,vEe),e(vEe,S$r),e(mw,R$r),e(mw,FY),e(FY,P$r),e(mw,B$r),e(Dr,I$r),M(fw,Dr,null),b(m,Bje,_),b(m,Bc,_),e(Bc,gw),e(gw,FEe),M(B9,FEe,null),e(Bc,q$r),e(Bc,TEe),e(TEe,N$r),b(m,Ije,_),b(m,gr,_),M(I9,gr,null),e(gr,j$r),e(gr,Ic),e(Ic,D$r),e(Ic,TY),e(TY,G$r),e(Ic,O$r),e(Ic,MY),e(MY,V$r),e(Ic,X$r),e(gr,z$r),e(gr,q9),e(q9,W$r),e(q9,MEe),e(MEe,Q$r),e(q9,H$r),e(gr,U$r),e(gr,Vt),M(N9,Vt,null),e(Vt,J$r),e(Vt,EEe),e(EEe,Y$r),e(Vt,K$r),e(Vt,qc),e(qc,Z$r),e(qc,CEe),e(CEe,ekr),e(qc,okr),e(qc,EY),e(EY,rkr),e(qc,tkr),e(Vt,akr),M(hw,Vt,null),e(gr,nkr),e(gr,Gr),M(j9,Gr,null),e(Gr,skr),e(Gr,wEe),e(wEe,lkr),e(Gr,ikr),e(Gr,pn),e(pn,dkr),e(pn,AEe),e(AEe,ckr),e(pn,mkr),e(pn,yEe),e(yEe,fkr),e(pn,gkr),e(pn,LEe),e(LEe,hkr),e(pn,ukr),e(Gr,pkr),e(Gr,Ee),e(Ee,uw),e(uw,xEe),e(xEe,_kr),e(uw,bkr),e(uw,CY),e(CY,vkr),e(uw,Fkr),e(Ee,Tkr),e(Ee,pw),e(pw,$Ee),e($Ee,Mkr),e(pw,Ekr),e(pw,wY),e(wY,Ckr),e(pw,wkr),e(Ee,Akr),e(Ee,_w),e(_w,kEe),e(kEe,ykr),e(_w,Lkr),e(_w,AY),e(AY,xkr),e(_w,$kr),e(Ee,kkr),e(Ee,bw),e(bw,SEe),e(SEe,Skr),e(bw,Rkr),e(bw,yY),e(yY,Pkr),e(bw,Bkr),e(Ee,Ikr),e(Ee,vw),e(vw,REe),e(REe,qkr),e(vw,Nkr),e(vw,LY),e(LY,jkr),e(vw,Dkr),e(Ee,Gkr),e(Ee,Fw),e(Fw,PEe),e(PEe,Okr),e(Fw,Vkr),e(Fw,xY),e(xY,Xkr),e(Fw,zkr),e(Ee,Wkr),e(Ee,Tw),e(Tw,BEe),e(BEe,Qkr),e(Tw,Hkr),e(Tw,$Y),e($Y,Ukr),e(Tw,Jkr),e(Ee,Ykr),e(Ee,Mw),e(Mw,IEe),e(IEe,Kkr),e(Mw,Zkr),e(Mw,kY),e(kY,eSr),e(Mw,oSr),e(Ee,rSr),e(Ee,Ew),e(Ew,qEe),e(qEe,tSr),e(Ew,aSr),e(Ew,SY),e(SY,nSr),e(Ew,sSr),e(Ee,lSr),e(Ee,Cw),e(Cw,NEe),e(NEe,iSr),e(Cw,dSr),e(Cw,RY),e(RY,cSr),e(Cw,mSr),e(Ee,fSr),e(Ee,ww),e(ww,jEe),e(jEe,gSr),e(ww,hSr),e(ww,PY),e(PY,uSr),e(ww,pSr),e(Ee,_Sr),e(Ee,Aw),e(Aw,DEe),e(DEe,bSr),e(Aw,vSr),e(Aw,BY),e(BY,FSr),e(Aw,TSr),e(Gr,MSr),M(yw,Gr,null),b(m,qje,_),b(m,Nc,_),e(Nc,Lw),e(Lw,GEe),M(D9,GEe,null),e(Nc,ESr),e(Nc,OEe),e(OEe,CSr),b(m,Nje,_),b(m,hr,_),M(G9,hr,null),e(hr,wSr),e(hr,jc),e(jc,ASr),e(jc,IY),e(IY,ySr),e(jc,LSr),e(jc,qY),e(qY,xSr),e(jc,$Sr),e(hr,kSr),e(hr,O9),e(O9,SSr),e(O9,VEe),e(VEe,RSr),e(O9,PSr),e(hr,BSr),e(hr,Xt),M(V9,Xt,null),e(Xt,ISr),e(Xt,XEe),e(XEe,qSr),e(Xt,NSr),e(Xt,Dc),e(Dc,jSr),e(Dc,zEe),e(zEe,DSr),e(Dc,GSr),e(Dc,NY),e(NY,OSr),e(Dc,VSr),e(Xt,XSr),M(xw,Xt,null),e(hr,zSr),e(hr,Or),M(X9,Or,null),e(Or,WSr),e(Or,WEe),e(WEe,QSr),e(Or,HSr),e(Or,_n),e(_n,USr),e(_n,QEe),e(QEe,JSr),e(_n,YSr),e(_n,HEe),e(HEe,KSr),e(_n,ZSr),e(_n,UEe),e(UEe,eRr),e(_n,oRr),e(Or,rRr),e(Or,Le),e(Le,$w),e($w,JEe),e(JEe,tRr),e($w,aRr),e($w,jY),e(jY,nRr),e($w,sRr),e(Le,lRr),e(Le,kw),e(kw,YEe),e(YEe,iRr),e(kw,dRr),e(kw,DY),e(DY,cRr),e(kw,mRr),e(Le,fRr),e(Le,Sw),e(Sw,KEe),e(KEe,gRr),e(Sw,hRr),e(Sw,GY),e(GY,uRr),e(Sw,pRr),e(Le,_Rr),e(Le,Rw),e(Rw,ZEe),e(ZEe,bRr),e(Rw,vRr),e(Rw,OY),e(OY,FRr),e(Rw,TRr),e(Le,MRr),e(Le,Pw),e(Pw,eCe),e(eCe,ERr),e(Pw,CRr),e(Pw,VY),e(VY,wRr),e(Pw,ARr),e(Le,yRr),e(Le,Bw),e(Bw,oCe),e(oCe,LRr),e(Bw,xRr),e(Bw,XY),e(XY,$Rr),e(Bw,kRr),e(Le,SRr),e(Le,Iw),e(Iw,rCe),e(rCe,RRr),e(Iw,PRr),e(Iw,zY),e(zY,BRr),e(Iw,IRr),e(Le,qRr),e(Le,qw),e(qw,tCe),e(tCe,NRr),e(qw,jRr),e(qw,WY),e(WY,DRr),e(qw,GRr),e(Le,ORr),e(Le,Nw),e(Nw,aCe),e(aCe,VRr),e(Nw,XRr),e(Nw,QY),e(QY,zRr),e(Nw,WRr),e(Le,QRr),e(Le,jw),e(jw,nCe),e(nCe,HRr),e(jw,URr),e(jw,HY),e(HY,JRr),e(jw,YRr),e(Or,KRr),M(Dw,Or,null),b(m,jje,_),b(m,Gc,_),e(Gc,Gw),e(Gw,sCe),M(z9,sCe,null),e(Gc,ZRr),e(Gc,lCe),e(lCe,ePr),b(m,Dje,_),b(m,ur,_),M(W9,ur,null),e(ur,oPr),e(ur,Oc),e(Oc,rPr),e(Oc,UY),e(UY,tPr),e(Oc,aPr),e(Oc,JY),e(JY,nPr),e(Oc,sPr),e(ur,lPr),e(ur,Q9),e(Q9,iPr),e(Q9,iCe),e(iCe,dPr),e(Q9,cPr),e(ur,mPr),e(ur,zt),M(H9,zt,null),e(zt,fPr),e(zt,dCe),e(dCe,gPr),e(zt,hPr),e(zt,Vc),e(Vc,uPr),e(Vc,cCe),e(cCe,pPr),e(Vc,_Pr),e(Vc,YY),e(YY,bPr),e(Vc,vPr),e(zt,FPr),M(Ow,zt,null),e(ur,TPr),e(ur,Vr),M(U9,Vr,null),e(Vr,MPr),e(Vr,mCe),e(mCe,EPr),e(Vr,CPr),e(Vr,bn),e(bn,wPr),e(bn,fCe),e(fCe,APr),e(bn,yPr),e(bn,gCe),e(gCe,LPr),e(bn,xPr),e(bn,hCe),e(hCe,$Pr),e(bn,kPr),e(Vr,SPr),e(Vr,Pe),e(Pe,Vw),e(Vw,uCe),e(uCe,RPr),e(Vw,PPr),e(Vw,KY),e(KY,BPr),e(Vw,IPr),e(Pe,qPr),e(Pe,Xw),e(Xw,pCe),e(pCe,NPr),e(Xw,jPr),e(Xw,ZY),e(ZY,DPr),e(Xw,GPr),e(Pe,OPr),e(Pe,zw),e(zw,_Ce),e(_Ce,VPr),e(zw,XPr),e(zw,eK),e(eK,zPr),e(zw,WPr),e(Pe,QPr),e(Pe,Ww),e(Ww,bCe),e(bCe,HPr),e(Ww,UPr),e(Ww,oK),e(oK,JPr),e(Ww,YPr),e(Pe,KPr),e(Pe,Qw),e(Qw,vCe),e(vCe,ZPr),e(Qw,eBr),e(Qw,rK),e(rK,oBr),e(Qw,rBr),e(Pe,tBr),e(Pe,Hw),e(Hw,FCe),e(FCe,aBr),e(Hw,nBr),e(Hw,tK),e(tK,sBr),e(Hw,lBr),e(Pe,iBr),e(Pe,Uw),e(Uw,TCe),e(TCe,dBr),e(Uw,cBr),e(Uw,aK),e(aK,mBr),e(Uw,fBr),e(Pe,gBr),e(Pe,Jw),e(Jw,MCe),e(MCe,hBr),e(Jw,uBr),e(Jw,nK),e(nK,pBr),e(Jw,_Br),e(Pe,bBr),e(Pe,Yw),e(Yw,ECe),e(ECe,vBr),e(Yw,FBr),e(Yw,sK),e(sK,TBr),e(Yw,MBr),e(Vr,EBr),M(Kw,Vr,null),b(m,Gje,_),b(m,Xc,_),e(Xc,Zw),e(Zw,CCe),M(J9,CCe,null),e(Xc,CBr),e(Xc,wCe),e(wCe,wBr),b(m,Oje,_),b(m,pr,_),M(Y9,pr,null),e(pr,ABr),e(pr,zc),e(zc,yBr),e(zc,lK),e(lK,LBr),e(zc,xBr),e(zc,iK),e(iK,$Br),e(zc,kBr),e(pr,SBr),e(pr,K9),e(K9,RBr),e(K9,ACe),e(ACe,PBr),e(K9,BBr),e(pr,IBr),e(pr,Wt),M(Z9,Wt,null),e(Wt,qBr),e(Wt,yCe),e(yCe,NBr),e(Wt,jBr),e(Wt,Wc),e(Wc,DBr),e(Wc,LCe),e(LCe,GBr),e(Wc,OBr),e(Wc,dK),e(dK,VBr),e(Wc,XBr),e(Wt,zBr),M(e0,Wt,null),e(pr,WBr),e(pr,Xr),M(ex,Xr,null),e(Xr,QBr),e(Xr,xCe),e(xCe,HBr),e(Xr,UBr),e(Xr,vn),e(vn,JBr),e(vn,$Ce),e($Ce,YBr),e(vn,KBr),e(vn,kCe),e(kCe,ZBr),e(vn,eIr),e(vn,SCe),e(SCe,oIr),e(vn,rIr),e(Xr,tIr),e(Xr,xe),e(xe,o0),e(o0,RCe),e(RCe,aIr),e(o0,nIr),e(o0,cK),e(cK,sIr),e(o0,lIr),e(xe,iIr),e(xe,r0),e(r0,PCe),e(PCe,dIr),e(r0,cIr),e(r0,mK),e(mK,mIr),e(r0,fIr),e(xe,gIr),e(xe,t0),e(t0,BCe),e(BCe,hIr),e(t0,uIr),e(t0,fK),e(fK,pIr),e(t0,_Ir),e(xe,bIr),e(xe,a0),e(a0,ICe),e(ICe,vIr),e(a0,FIr),e(a0,gK),e(gK,TIr),e(a0,MIr),e(xe,EIr),e(xe,n0),e(n0,qCe),e(qCe,CIr),e(n0,wIr),e(n0,hK),e(hK,AIr),e(n0,yIr),e(xe,LIr),e(xe,s0),e(s0,NCe),e(NCe,xIr),e(s0,$Ir),e(s0,uK),e(uK,kIr),e(s0,SIr),e(xe,RIr),e(xe,l0),e(l0,jCe),e(jCe,PIr),e(l0,BIr),e(l0,pK),e(pK,IIr),e(l0,qIr),e(xe,NIr),e(xe,i0),e(i0,DCe),e(DCe,jIr),e(i0,DIr),e(i0,_K),e(_K,GIr),e(i0,OIr),e(xe,VIr),e(xe,d0),e(d0,GCe),e(GCe,XIr),e(d0,zIr),e(d0,bK),e(bK,WIr),e(d0,QIr),e(xe,HIr),e(xe,c0),e(c0,OCe),e(OCe,UIr),e(c0,JIr),e(c0,vK),e(vK,YIr),e(c0,KIr),e(Xr,ZIr),M(m0,Xr,null),b(m,Vje,_),b(m,Qc,_),e(Qc,f0),e(f0,VCe),M(ox,VCe,null),e(Qc,eqr),e(Qc,XCe),e(XCe,oqr),b(m,Xje,_),b(m,_r,_),M(rx,_r,null),e(_r,rqr),e(_r,Hc),e(Hc,tqr),e(Hc,FK),e(FK,aqr),e(Hc,nqr),e(Hc,TK),e(TK,sqr),e(Hc,lqr),e(_r,iqr),e(_r,tx),e(tx,dqr),e(tx,zCe),e(zCe,cqr),e(tx,mqr),e(_r,fqr),e(_r,Qt),M(ax,Qt,null),e(Qt,gqr),e(Qt,WCe),e(WCe,hqr),e(Qt,uqr),e(Qt,Uc),e(Uc,pqr),e(Uc,QCe),e(QCe,_qr),e(Uc,bqr),e(Uc,MK),e(MK,vqr),e(Uc,Fqr),e(Qt,Tqr),M(g0,Qt,null),e(_r,Mqr),e(_r,zr),M(nx,zr,null),e(zr,Eqr),e(zr,HCe),e(HCe,Cqr),e(zr,wqr),e(zr,Fn),e(Fn,Aqr),e(Fn,UCe),e(UCe,yqr),e(Fn,Lqr),e(Fn,JCe),e(JCe,xqr),e(Fn,$qr),e(Fn,YCe),e(YCe,kqr),e(Fn,Sqr),e(zr,Rqr),e(zr,$e),e($e,h0),e(h0,KCe),e(KCe,Pqr),e(h0,Bqr),e(h0,EK),e(EK,Iqr),e(h0,qqr),e($e,Nqr),e($e,u0),e(u0,ZCe),e(ZCe,jqr),e(u0,Dqr),e(u0,CK),e(CK,Gqr),e(u0,Oqr),e($e,Vqr),e($e,p0),e(p0,e5e),e(e5e,Xqr),e(p0,zqr),e(p0,wK),e(wK,Wqr),e(p0,Qqr),e($e,Hqr),e($e,_0),e(_0,o5e),e(o5e,Uqr),e(_0,Jqr),e(_0,AK),e(AK,Yqr),e(_0,Kqr),e($e,Zqr),e($e,b0),e(b0,r5e),e(r5e,eNr),e(b0,oNr),e(b0,yK),e(yK,rNr),e(b0,tNr),e($e,aNr),e($e,v0),e(v0,t5e),e(t5e,nNr),e(v0,sNr),e(v0,LK),e(LK,lNr),e(v0,iNr),e($e,dNr),e($e,F0),e(F0,a5e),e(a5e,cNr),e(F0,mNr),e(F0,xK),e(xK,fNr),e(F0,gNr),e($e,hNr),e($e,T0),e(T0,n5e),e(n5e,uNr),e(T0,pNr),e(T0,$K),e($K,_Nr),e(T0,bNr),e($e,vNr),e($e,M0),e(M0,s5e),e(s5e,FNr),e(M0,TNr),e(M0,kK),e(kK,MNr),e(M0,ENr),e($e,CNr),e($e,E0),e(E0,l5e),e(l5e,wNr),e(E0,ANr),e(E0,SK),e(SK,yNr),e(E0,LNr),e(zr,xNr),M(C0,zr,null),b(m,zje,_),b(m,Jc,_),e(Jc,w0),e(w0,i5e),M(sx,i5e,null),e(Jc,$Nr),e(Jc,d5e),e(d5e,kNr),b(m,Wje,_),b(m,br,_),M(lx,br,null),e(br,SNr),e(br,Yc),e(Yc,RNr),e(Yc,RK),e(RK,PNr),e(Yc,BNr),e(Yc,PK),e(PK,INr),e(Yc,qNr),e(br,NNr),e(br,ix),e(ix,jNr),e(ix,c5e),e(c5e,DNr),e(ix,GNr),e(br,ONr),e(br,Ht),M(dx,Ht,null),e(Ht,VNr),e(Ht,m5e),e(m5e,XNr),e(Ht,zNr),e(Ht,Kc),e(Kc,WNr),e(Kc,f5e),e(f5e,QNr),e(Kc,HNr),e(Kc,BK),e(BK,UNr),e(Kc,JNr),e(Ht,YNr),M(A0,Ht,null),e(br,KNr),e(br,Wr),M(cx,Wr,null),e(Wr,ZNr),e(Wr,g5e),e(g5e,ejr),e(Wr,ojr),e(Wr,Tn),e(Tn,rjr),e(Tn,h5e),e(h5e,tjr),e(Tn,ajr),e(Tn,u5e),e(u5e,njr),e(Tn,sjr),e(Tn,p5e),e(p5e,ljr),e(Tn,ijr),e(Wr,djr),e(Wr,De),e(De,y0),e(y0,_5e),e(_5e,cjr),e(y0,mjr),e(y0,IK),e(IK,fjr),e(y0,gjr),e(De,hjr),e(De,L0),e(L0,b5e),e(b5e,ujr),e(L0,pjr),e(L0,qK),e(qK,_jr),e(L0,bjr),e(De,vjr),e(De,x0),e(x0,v5e),e(v5e,Fjr),e(x0,Tjr),e(x0,NK),e(NK,Mjr),e(x0,Ejr),e(De,Cjr),e(De,$0),e($0,F5e),e(F5e,wjr),e($0,Ajr),e($0,jK),e(jK,yjr),e($0,Ljr),e(De,xjr),e(De,k0),e(k0,T5e),e(T5e,$jr),e(k0,kjr),e(k0,DK),e(DK,Sjr),e(k0,Rjr),e(De,Pjr),e(De,S0),e(S0,M5e),e(M5e,Bjr),e(S0,Ijr),e(S0,GK),e(GK,qjr),e(S0,Njr),e(De,jjr),e(De,R0),e(R0,E5e),e(E5e,Djr),e(R0,Gjr),e(R0,OK),e(OK,Ojr),e(R0,Vjr),e(De,Xjr),e(De,P0),e(P0,C5e),e(C5e,zjr),e(P0,Wjr),e(P0,VK),e(VK,Qjr),e(P0,Hjr),e(Wr,Ujr),M(B0,Wr,null),b(m,Qje,_),b(m,Zc,_),e(Zc,I0),e(I0,w5e),M(mx,w5e,null),e(Zc,Jjr),e(Zc,A5e),e(A5e,Yjr),b(m,Hje,_),b(m,vr,_),M(fx,vr,null),e(vr,Kjr),e(vr,em),e(em,Zjr),e(em,XK),e(XK,eDr),e(em,oDr),e(em,zK),e(zK,rDr),e(em,tDr),e(vr,aDr),e(vr,gx),e(gx,nDr),e(gx,y5e),e(y5e,sDr),e(gx,lDr),e(vr,iDr),e(vr,Ut),M(hx,Ut,null),e(Ut,dDr),e(Ut,L5e),e(L5e,cDr),e(Ut,mDr),e(Ut,om),e(om,fDr),e(om,x5e),e(x5e,gDr),e(om,hDr),e(om,WK),e(WK,uDr),e(om,pDr),e(Ut,_Dr),M(q0,Ut,null),e(vr,bDr),e(vr,Qr),M(ux,Qr,null),e(Qr,vDr),e(Qr,$5e),e($5e,FDr),e(Qr,TDr),e(Qr,Mn),e(Mn,MDr),e(Mn,k5e),e(k5e,EDr),e(Mn,CDr),e(Mn,S5e),e(S5e,wDr),e(Mn,ADr),e(Mn,R5e),e(R5e,yDr),e(Mn,LDr),e(Qr,xDr),e(Qr,Ge),e(Ge,N0),e(N0,P5e),e(P5e,$Dr),e(N0,kDr),e(N0,QK),e(QK,SDr),e(N0,RDr),e(Ge,PDr),e(Ge,j0),e(j0,B5e),e(B5e,BDr),e(j0,IDr),e(j0,HK),e(HK,qDr),e(j0,NDr),e(Ge,jDr),e(Ge,D0),e(D0,I5e),e(I5e,DDr),e(D0,GDr),e(D0,UK),e(UK,ODr),e(D0,VDr),e(Ge,XDr),e(Ge,G0),e(G0,q5e),e(q5e,zDr),e(G0,WDr),e(G0,JK),e(JK,QDr),e(G0,HDr),e(Ge,UDr),e(Ge,O0),e(O0,N5e),e(N5e,JDr),e(O0,YDr),e(O0,YK),e(YK,KDr),e(O0,ZDr),e(Ge,eGr),e(Ge,V0),e(V0,j5e),e(j5e,oGr),e(V0,rGr),e(V0,KK),e(KK,tGr),e(V0,aGr),e(Ge,nGr),e(Ge,X0),e(X0,D5e),e(D5e,sGr),e(X0,lGr),e(X0,ZK),e(ZK,iGr),e(X0,dGr),e(Ge,cGr),e(Ge,z0),e(z0,G5e),e(G5e,mGr),e(z0,fGr),e(z0,eZ),e(eZ,gGr),e(z0,hGr),e(Qr,uGr),M(W0,Qr,null),b(m,Uje,_),b(m,rm,_),e(rm,Q0),e(Q0,O5e),M(px,O5e,null),e(rm,pGr),e(rm,V5e),e(V5e,_Gr),b(m,Jje,_),b(m,Fr,_),M(_x,Fr,null),e(Fr,bGr),e(Fr,tm),e(tm,vGr),e(tm,oZ),e(oZ,FGr),e(tm,TGr),e(tm,rZ),e(rZ,MGr),e(tm,EGr),e(Fr,CGr),e(Fr,bx),e(bx,wGr),e(bx,X5e),e(X5e,AGr),e(bx,yGr),e(Fr,LGr),e(Fr,Jt),M(vx,Jt,null),e(Jt,xGr),e(Jt,z5e),e(z5e,$Gr),e(Jt,kGr),e(Jt,am),e(am,SGr),e(am,W5e),e(W5e,RGr),e(am,PGr),e(am,tZ),e(tZ,BGr),e(am,IGr),e(Jt,qGr),M(H0,Jt,null),e(Fr,NGr),e(Fr,Hr),M(Fx,Hr,null),e(Hr,jGr),e(Hr,Q5e),e(Q5e,DGr),e(Hr,GGr),e(Hr,En),e(En,OGr),e(En,H5e),e(H5e,VGr),e(En,XGr),e(En,U5e),e(U5e,zGr),e(En,WGr),e(En,J5e),e(J5e,QGr),e(En,HGr),e(Hr,UGr),e(Hr,Y5e),e(Y5e,U0),e(U0,K5e),e(K5e,JGr),e(U0,YGr),e(U0,aZ),e(aZ,KGr),e(U0,ZGr),e(Hr,eOr),M(J0,Hr,null),b(m,Yje,_),b(m,nm,_),e(nm,Y0),e(Y0,Z5e),M(Tx,Z5e,null),e(nm,oOr),e(nm,e3e),e(e3e,rOr),b(m,Kje,_),b(m,Tr,_),M(Mx,Tr,null),e(Tr,tOr),e(Tr,sm),e(sm,aOr),e(sm,nZ),e(nZ,nOr),e(sm,sOr),e(sm,sZ),e(sZ,lOr),e(sm,iOr),e(Tr,dOr),e(Tr,Ex),e(Ex,cOr),e(Ex,o3e),e(o3e,mOr),e(Ex,fOr),e(Tr,gOr),e(Tr,Yt),M(Cx,Yt,null),e(Yt,hOr),e(Yt,r3e),e(r3e,uOr),e(Yt,pOr),e(Yt,lm),e(lm,_Or),e(lm,t3e),e(t3e,bOr),e(lm,vOr),e(lm,lZ),e(lZ,FOr),e(lm,TOr),e(Yt,MOr),M(K0,Yt,null),e(Tr,EOr),e(Tr,Ur),M(wx,Ur,null),e(Ur,COr),e(Ur,a3e),e(a3e,wOr),e(Ur,AOr),e(Ur,Cn),e(Cn,yOr),e(Cn,n3e),e(n3e,LOr),e(Cn,xOr),e(Cn,s3e),e(s3e,$Or),e(Cn,kOr),e(Cn,l3e),e(l3e,SOr),e(Cn,ROr),e(Ur,POr),e(Ur,Ax),e(Ax,Z0),e(Z0,i3e),e(i3e,BOr),e(Z0,IOr),e(Z0,iZ),e(iZ,qOr),e(Z0,NOr),e(Ax,jOr),e(Ax,eA),e(eA,d3e),e(d3e,DOr),e(eA,GOr),e(eA,dZ),e(dZ,OOr),e(eA,VOr),e(Ur,XOr),M(oA,Ur,null),b(m,Zje,_),b(m,im,_),e(im,rA),e(rA,c3e),M(yx,c3e,null),e(im,zOr),e(im,m3e),e(m3e,WOr),b(m,eDe,_),b(m,Mr,_),M(Lx,Mr,null),e(Mr,QOr),e(Mr,dm),e(dm,HOr),e(dm,cZ),e(cZ,UOr),e(dm,JOr),e(dm,mZ),e(mZ,YOr),e(dm,KOr),e(Mr,ZOr),e(Mr,xx),e(xx,eVr),e(xx,f3e),e(f3e,oVr),e(xx,rVr),e(Mr,tVr),e(Mr,Kt),M($x,Kt,null),e(Kt,aVr),e(Kt,g3e),e(g3e,nVr),e(Kt,sVr),e(Kt,cm),e(cm,lVr),e(cm,h3e),e(h3e,iVr),e(cm,dVr),e(cm,fZ),e(fZ,cVr),e(cm,mVr),e(Kt,fVr),M(tA,Kt,null),e(Mr,gVr),e(Mr,Jr),M(kx,Jr,null),e(Jr,hVr),e(Jr,u3e),e(u3e,uVr),e(Jr,pVr),e(Jr,wn),e(wn,_Vr),e(wn,p3e),e(p3e,bVr),e(wn,vVr),e(wn,_3e),e(_3e,FVr),e(wn,TVr),e(wn,b3e),e(b3e,MVr),e(wn,EVr),e(Jr,CVr),e(Jr,v3e),e(v3e,aA),e(aA,F3e),e(F3e,wVr),e(aA,AVr),e(aA,gZ),e(gZ,yVr),e(aA,LVr),e(Jr,xVr),M(nA,Jr,null),oDe=!0},p(m,[_]){const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:m}),vm.$set(Sx);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:m}),Eg.$set(T3e);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:m}),ah.$set(M3e);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:m}),Ih.$set(E3e);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:m}),qh.$set(Rx);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:m}),tu.$set(C3e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),au.$set(An);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:m}),lu.$set(w3e);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:m}),r_.$set(A3e);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:m}),a_.$set(y3e);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:m}),H_.$set(Px);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:m}),J_.$set(L3e);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:m}),Bb.$set(Bx);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:m}),qb.$set(x3e);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:m}),F2.$set(Ix);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:m}),M2.$set($3e);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:m}),D2.$set(k3e);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:m}),O2.$set(S3e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),qv.$set(mm);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:m}),jv.$set(R3e);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:m}),pF.$set(P3e);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:m}),bF.$set(B3e);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:m}),wF.$set(qx);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:m}),yF.$set(I3e);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:m}),d1.$set(q3e);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:m}),m1.$set(N3e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),Z1.$set(et);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:m}),oT.$set(Nx);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:m}),aT.$set(j3e);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:m}),sT.$set(jx);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:m}),FT.$set(D3e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),MT.$set(ot);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:m}),wT.$set(G3e);const fm={};_&2&&(fm.$$scope={dirty:_,ctx:m}),yT.$set(fm);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:m}),NT.$set(O3e);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:m}),DT.$set(V3e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),QT.$set(y);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:m}),UT.$set(sA);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:m}),sM.$set(X3e);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:m}),iM.$set(z3e);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:m}),fM.$set(lA);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:m}),hM.$set(W3e);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:m}),TM.$set(Q3e);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:m}),EM.$set(iA);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:m}),LM.$set(H3e);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:m}),$M.$set(U3e);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:m}),PM.$set(dA);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:m}),IM.$set(J3e);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:m}),jM.$set(Y3e);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:m}),GM.$set(cA);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:m}),QM.$set(K3e);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:m}),UM.$set(Z3e);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:m}),KM.$set(mA);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:m}),e4.$set(ewe);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:m}),W4.$set(owe);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:m}),H4.$set(fA);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:m}),bE.$set(rwe);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:m}),FE.$set(twe);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:m}),RE.$set(gA);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:m}),BE.$set(awe);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:m}),DE.$set(nwe);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:m}),OE.$set(hA);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:m}),dC.$set(swe);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:m}),mC.$set(lwe);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:m}),MC.$set(uA);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:m}),CC.$set(iwe);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:m}),YC.$set(dwe);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:m}),ZC.$set(pA);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:m}),_5.$set(cwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:m}),v5.$set(mwe);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:m}),M5.$set(_A);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:m}),C5.$set(fwe);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:m}),A5.$set(gwe);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:m}),L5.$set(bA);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:m}),U5.$set(hwe);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:m}),Y5.$set(uwe);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:m}),b3.$set(vA);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:m}),F3.$set(pwe);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:m}),M3.$set(_we);const FA={};_&2&&(FA.$$scope={dirty:_,ctx:m}),C3.$set(FA);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:m}),A3.$set(bwe);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:m}),L3.$set(vwe);const TA={};_&2&&(TA.$$scope={dirty:_,ctx:m}),ew.$set(TA);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:m}),rw.$set(Fwe);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:m}),fw.$set(Twe);const MA={};_&2&&(MA.$$scope={dirty:_,ctx:m}),hw.$set(MA);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:m}),yw.$set(Mwe);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:m}),xw.$set(Ewe);const EA={};_&2&&(EA.$$scope={dirty:_,ctx:m}),Dw.$set(EA);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:m}),Ow.$set(Cwe);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:m}),Kw.$set(wwe);const CA={};_&2&&(CA.$$scope={dirty:_,ctx:m}),e0.$set(CA);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:m}),m0.$set(Awe);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:m}),g0.$set(ywe);const wA={};_&2&&(wA.$$scope={dirty:_,ctx:m}),C0.$set(wA);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:m}),A0.$set(Lwe);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:m}),B0.$set(xwe);const AA={};_&2&&(AA.$$scope={dirty:_,ctx:m}),q0.$set(AA);const $we={};_&2&&($we.$$scope={dirty:_,ctx:m}),W0.$set($we);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:m}),H0.$set(kwe);const yA={};_&2&&(yA.$$scope={dirty:_,ctx:m}),J0.$set(yA);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:m}),K0.$set(Swe);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:m}),oA.$set(Rwe);const LA={};_&2&&(LA.$$scope={dirty:_,ctx:m}),tA.$set(LA);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:m}),nA.$set(Pwe)},i(m){oDe||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(yy.$$.fragment,m),E(Ly.$$.fragment,m),E(vm.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(Ry.$$.fragment,m),E(Eg.$$.fragment,m),E(Py.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(jy.$$.fragment,m),E(ah.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Oy.$$.fragment,m),E(zy.$$.fragment,m),E(Ih.$$.fragment,m),E(qh.$$.fragment,m),E(Wy.$$.fragment,m),E(Qy.$$.fragment,m),E(Hy.$$.fragment,m),E(Yy.$$.fragment,m),E(tu.$$.fragment,m),E(au.$$.fragment,m),E(Ky.$$.fragment,m),E(Zy.$$.fragment,m),E(eL.$$.fragment,m),E(rL.$$.fragment,m),E(lu.$$.fragment,m),E(tL.$$.fragment,m),E(r_.$$.fragment,m),E(aL.$$.fragment,m),E(nL.$$.fragment,m),E(lL.$$.fragment,m),E(a_.$$.fragment,m),E(iL.$$.fragment,m),E(H_.$$.fragment,m),E(dL.$$.fragment,m),E(cL.$$.fragment,m),E(fL.$$.fragment,m),E(J_.$$.fragment,m),E(gL.$$.fragment,m),E(Bb.$$.fragment,m),E(hL.$$.fragment,m),E(uL.$$.fragment,m),E(_L.$$.fragment,m),E(qb.$$.fragment,m),E(bL.$$.fragment,m),E(F2.$$.fragment,m),E(vL.$$.fragment,m),E(FL.$$.fragment,m),E(ML.$$.fragment,m),E(M2.$$.fragment,m),E(EL.$$.fragment,m),E(D2.$$.fragment,m),E(CL.$$.fragment,m),E(wL.$$.fragment,m),E(yL.$$.fragment,m),E(O2.$$.fragment,m),E(LL.$$.fragment,m),E(qv.$$.fragment,m),E(xL.$$.fragment,m),E($L.$$.fragment,m),E(SL.$$.fragment,m),E(jv.$$.fragment,m),E(RL.$$.fragment,m),E(pF.$$.fragment,m),E(PL.$$.fragment,m),E(BL.$$.fragment,m),E(qL.$$.fragment,m),E(bF.$$.fragment,m),E(NL.$$.fragment,m),E(wF.$$.fragment,m),E(jL.$$.fragment,m),E(DL.$$.fragment,m),E(OL.$$.fragment,m),E(yF.$$.fragment,m),E(VL.$$.fragment,m),E(d1.$$.fragment,m),E(XL.$$.fragment,m),E(zL.$$.fragment,m),E(QL.$$.fragment,m),E(m1.$$.fragment,m),E(HL.$$.fragment,m),E(Z1.$$.fragment,m),E(UL.$$.fragment,m),E(JL.$$.fragment,m),E(KL.$$.fragment,m),E(oT.$$.fragment,m),E(ZL.$$.fragment,m),E(aT.$$.fragment,m),E(e8.$$.fragment,m),E(o8.$$.fragment,m),E(t8.$$.fragment,m),E(sT.$$.fragment,m),E(a8.$$.fragment,m),E(FT.$$.fragment,m),E(n8.$$.fragment,m),E(s8.$$.fragment,m),E(i8.$$.fragment,m),E(MT.$$.fragment,m),E(d8.$$.fragment,m),E(wT.$$.fragment,m),E(c8.$$.fragment,m),E(m8.$$.fragment,m),E(g8.$$.fragment,m),E(yT.$$.fragment,m),E(h8.$$.fragment,m),E(NT.$$.fragment,m),E(u8.$$.fragment,m),E(p8.$$.fragment,m),E(b8.$$.fragment,m),E(DT.$$.fragment,m),E(v8.$$.fragment,m),E(QT.$$.fragment,m),E(F8.$$.fragment,m),E(T8.$$.fragment,m),E(E8.$$.fragment,m),E(UT.$$.fragment,m),E(C8.$$.fragment,m),E(sM.$$.fragment,m),E(w8.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(iM.$$.fragment,m),E(x8.$$.fragment,m),E(fM.$$.fragment,m),E(k8.$$.fragment,m),E(S8.$$.fragment,m),E(P8.$$.fragment,m),E(hM.$$.fragment,m),E(B8.$$.fragment,m),E(TM.$$.fragment,m),E(I8.$$.fragment,m),E(q8.$$.fragment,m),E(j8.$$.fragment,m),E(EM.$$.fragment,m),E(D8.$$.fragment,m),E(LM.$$.fragment,m),E(G8.$$.fragment,m),E(O8.$$.fragment,m),E(X8.$$.fragment,m),E($M.$$.fragment,m),E(z8.$$.fragment,m),E(PM.$$.fragment,m),E(Q8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(IM.$$.fragment,m),E(Y8.$$.fragment,m),E(jM.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o7.$$.fragment,m),E(GM.$$.fragment,m),E(r7.$$.fragment,m),E(QM.$$.fragment,m),E(t7.$$.fragment,m),E(a7.$$.fragment,m),E(s7.$$.fragment,m),E(UM.$$.fragment,m),E(l7.$$.fragment,m),E(KM.$$.fragment,m),E(i7.$$.fragment,m),E(d7.$$.fragment,m),E(m7.$$.fragment,m),E(e4.$$.fragment,m),E(f7.$$.fragment,m),E(W4.$$.fragment,m),E(g7.$$.fragment,m),E(h7.$$.fragment,m),E(p7.$$.fragment,m),E(H4.$$.fragment,m),E(_7.$$.fragment,m),E(bE.$$.fragment,m),E(b7.$$.fragment,m),E(v7.$$.fragment,m),E(T7.$$.fragment,m),E(FE.$$.fragment,m),E(M7.$$.fragment,m),E(RE.$$.fragment,m),E(E7.$$.fragment,m),E(C7.$$.fragment,m),E(A7.$$.fragment,m),E(BE.$$.fragment,m),E(y7.$$.fragment,m),E(DE.$$.fragment,m),E(L7.$$.fragment,m),E(x7.$$.fragment,m),E(k7.$$.fragment,m),E(OE.$$.fragment,m),E(S7.$$.fragment,m),E(dC.$$.fragment,m),E(R7.$$.fragment,m),E(P7.$$.fragment,m),E(I7.$$.fragment,m),E(mC.$$.fragment,m),E(q7.$$.fragment,m),E(MC.$$.fragment,m),E(N7.$$.fragment,m),E(j7.$$.fragment,m),E(G7.$$.fragment,m),E(CC.$$.fragment,m),E(O7.$$.fragment,m),E(YC.$$.fragment,m),E(V7.$$.fragment,m),E(X7.$$.fragment,m),E(W7.$$.fragment,m),E(ZC.$$.fragment,m),E(Q7.$$.fragment,m),E(_5.$$.fragment,m),E(H7.$$.fragment,m),E(U7.$$.fragment,m),E(Y7.$$.fragment,m),E(v5.$$.fragment,m),E(K7.$$.fragment,m),E(M5.$$.fragment,m),E(e9.$$.fragment,m),E(o9.$$.fragment,m),E(t9.$$.fragment,m),E(C5.$$.fragment,m),E(a9.$$.fragment,m),E(A5.$$.fragment,m),E(n9.$$.fragment,m),E(s9.$$.fragment,m),E(i9.$$.fragment,m),E(L5.$$.fragment,m),E(d9.$$.fragment,m),E(U5.$$.fragment,m),E(c9.$$.fragment,m),E(m9.$$.fragment,m),E(g9.$$.fragment,m),E(Y5.$$.fragment,m),E(h9.$$.fragment,m),E(b3.$$.fragment,m),E(u9.$$.fragment,m),E(p9.$$.fragment,m),E(b9.$$.fragment,m),E(F3.$$.fragment,m),E(v9.$$.fragment,m),E(M3.$$.fragment,m),E(F9.$$.fragment,m),E(T9.$$.fragment,m),E(E9.$$.fragment,m),E(C3.$$.fragment,m),E(C9.$$.fragment,m),E(A3.$$.fragment,m),E(w9.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E(L3.$$.fragment,m),E(x9.$$.fragment,m),E(ew.$$.fragment,m),E($9.$$.fragment,m),E(k9.$$.fragment,m),E(R9.$$.fragment,m),E(rw.$$.fragment,m),E(P9.$$.fragment,m),E(fw.$$.fragment,m),E(B9.$$.fragment,m),E(I9.$$.fragment,m),E(N9.$$.fragment,m),E(hw.$$.fragment,m),E(j9.$$.fragment,m),E(yw.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(xw.$$.fragment,m),E(X9.$$.fragment,m),E(Dw.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(H9.$$.fragment,m),E(Ow.$$.fragment,m),E(U9.$$.fragment,m),E(Kw.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(Z9.$$.fragment,m),E(e0.$$.fragment,m),E(ex.$$.fragment,m),E(m0.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(ax.$$.fragment,m),E(g0.$$.fragment,m),E(nx.$$.fragment,m),E(C0.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(dx.$$.fragment,m),E(A0.$$.fragment,m),E(cx.$$.fragment,m),E(B0.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(hx.$$.fragment,m),E(q0.$$.fragment,m),E(ux.$$.fragment,m),E(W0.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E(H0.$$.fragment,m),E(Fx.$$.fragment,m),E(J0.$$.fragment,m),E(Tx.$$.fragment,m),E(Mx.$$.fragment,m),E(Cx.$$.fragment,m),E(K0.$$.fragment,m),E(wx.$$.fragment,m),E(oA.$$.fragment,m),E(yx.$$.fragment,m),E(Lx.$$.fragment,m),E($x.$$.fragment,m),E(tA.$$.fragment,m),E(kx.$$.fragment,m),E(nA.$$.fragment,m),oDe=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(yy.$$.fragment,m),C(Ly.$$.fragment,m),C(vm.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(Ry.$$.fragment,m),C(Eg.$$.fragment,m),C(Py.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(jy.$$.fragment,m),C(ah.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Oy.$$.fragment,m),C(zy.$$.fragment,m),C(Ih.$$.fragment,m),C(qh.$$.fragment,m),C(Wy.$$.fragment,m),C(Qy.$$.fragment,m),C(Hy.$$.fragment,m),C(Yy.$$.fragment,m),C(tu.$$.fragment,m),C(au.$$.fragment,m),C(Ky.$$.fragment,m),C(Zy.$$.fragment,m),C(eL.$$.fragment,m),C(rL.$$.fragment,m),C(lu.$$.fragment,m),C(tL.$$.fragment,m),C(r_.$$.fragment,m),C(aL.$$.fragment,m),C(nL.$$.fragment,m),C(lL.$$.fragment,m),C(a_.$$.fragment,m),C(iL.$$.fragment,m),C(H_.$$.fragment,m),C(dL.$$.fragment,m),C(cL.$$.fragment,m),C(fL.$$.fragment,m),C(J_.$$.fragment,m),C(gL.$$.fragment,m),C(Bb.$$.fragment,m),C(hL.$$.fragment,m),C(uL.$$.fragment,m),C(_L.$$.fragment,m),C(qb.$$.fragment,m),C(bL.$$.fragment,m),C(F2.$$.fragment,m),C(vL.$$.fragment,m),C(FL.$$.fragment,m),C(ML.$$.fragment,m),C(M2.$$.fragment,m),C(EL.$$.fragment,m),C(D2.$$.fragment,m),C(CL.$$.fragment,m),C(wL.$$.fragment,m),C(yL.$$.fragment,m),C(O2.$$.fragment,m),C(LL.$$.fragment,m),C(qv.$$.fragment,m),C(xL.$$.fragment,m),C($L.$$.fragment,m),C(SL.$$.fragment,m),C(jv.$$.fragment,m),C(RL.$$.fragment,m),C(pF.$$.fragment,m),C(PL.$$.fragment,m),C(BL.$$.fragment,m),C(qL.$$.fragment,m),C(bF.$$.fragment,m),C(NL.$$.fragment,m),C(wF.$$.fragment,m),C(jL.$$.fragment,m),C(DL.$$.fragment,m),C(OL.$$.fragment,m),C(yF.$$.fragment,m),C(VL.$$.fragment,m),C(d1.$$.fragment,m),C(XL.$$.fragment,m),C(zL.$$.fragment,m),C(QL.$$.fragment,m),C(m1.$$.fragment,m),C(HL.$$.fragment,m),C(Z1.$$.fragment,m),C(UL.$$.fragment,m),C(JL.$$.fragment,m),C(KL.$$.fragment,m),C(oT.$$.fragment,m),C(ZL.$$.fragment,m),C(aT.$$.fragment,m),C(e8.$$.fragment,m),C(o8.$$.fragment,m),C(t8.$$.fragment,m),C(sT.$$.fragment,m),C(a8.$$.fragment,m),C(FT.$$.fragment,m),C(n8.$$.fragment,m),C(s8.$$.fragment,m),C(i8.$$.fragment,m),C(MT.$$.fragment,m),C(d8.$$.fragment,m),C(wT.$$.fragment,m),C(c8.$$.fragment,m),C(m8.$$.fragment,m),C(g8.$$.fragment,m),C(yT.$$.fragment,m),C(h8.$$.fragment,m),C(NT.$$.fragment,m),C(u8.$$.fragment,m),C(p8.$$.fragment,m),C(b8.$$.fragment,m),C(DT.$$.fragment,m),C(v8.$$.fragment,m),C(QT.$$.fragment,m),C(F8.$$.fragment,m),C(T8.$$.fragment,m),C(E8.$$.fragment,m),C(UT.$$.fragment,m),C(C8.$$.fragment,m),C(sM.$$.fragment,m),C(w8.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(iM.$$.fragment,m),C(x8.$$.fragment,m),C(fM.$$.fragment,m),C(k8.$$.fragment,m),C(S8.$$.fragment,m),C(P8.$$.fragment,m),C(hM.$$.fragment,m),C(B8.$$.fragment,m),C(TM.$$.fragment,m),C(I8.$$.fragment,m),C(q8.$$.fragment,m),C(j8.$$.fragment,m),C(EM.$$.fragment,m),C(D8.$$.fragment,m),C(LM.$$.fragment,m),C(G8.$$.fragment,m),C(O8.$$.fragment,m),C(X8.$$.fragment,m),C($M.$$.fragment,m),C(z8.$$.fragment,m),C(PM.$$.fragment,m),C(Q8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(IM.$$.fragment,m),C(Y8.$$.fragment,m),C(jM.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o7.$$.fragment,m),C(GM.$$.fragment,m),C(r7.$$.fragment,m),C(QM.$$.fragment,m),C(t7.$$.fragment,m),C(a7.$$.fragment,m),C(s7.$$.fragment,m),C(UM.$$.fragment,m),C(l7.$$.fragment,m),C(KM.$$.fragment,m),C(i7.$$.fragment,m),C(d7.$$.fragment,m),C(m7.$$.fragment,m),C(e4.$$.fragment,m),C(f7.$$.fragment,m),C(W4.$$.fragment,m),C(g7.$$.fragment,m),C(h7.$$.fragment,m),C(p7.$$.fragment,m),C(H4.$$.fragment,m),C(_7.$$.fragment,m),C(bE.$$.fragment,m),C(b7.$$.fragment,m),C(v7.$$.fragment,m),C(T7.$$.fragment,m),C(FE.$$.fragment,m),C(M7.$$.fragment,m),C(RE.$$.fragment,m),C(E7.$$.fragment,m),C(C7.$$.fragment,m),C(A7.$$.fragment,m),C(BE.$$.fragment,m),C(y7.$$.fragment,m),C(DE.$$.fragment,m),C(L7.$$.fragment,m),C(x7.$$.fragment,m),C(k7.$$.fragment,m),C(OE.$$.fragment,m),C(S7.$$.fragment,m),C(dC.$$.fragment,m),C(R7.$$.fragment,m),C(P7.$$.fragment,m),C(I7.$$.fragment,m),C(mC.$$.fragment,m),C(q7.$$.fragment,m),C(MC.$$.fragment,m),C(N7.$$.fragment,m),C(j7.$$.fragment,m),C(G7.$$.fragment,m),C(CC.$$.fragment,m),C(O7.$$.fragment,m),C(YC.$$.fragment,m),C(V7.$$.fragment,m),C(X7.$$.fragment,m),C(W7.$$.fragment,m),C(ZC.$$.fragment,m),C(Q7.$$.fragment,m),C(_5.$$.fragment,m),C(H7.$$.fragment,m),C(U7.$$.fragment,m),C(Y7.$$.fragment,m),C(v5.$$.fragment,m),C(K7.$$.fragment,m),C(M5.$$.fragment,m),C(e9.$$.fragment,m),C(o9.$$.fragment,m),C(t9.$$.fragment,m),C(C5.$$.fragment,m),C(a9.$$.fragment,m),C(A5.$$.fragment,m),C(n9.$$.fragment,m),C(s9.$$.fragment,m),C(i9.$$.fragment,m),C(L5.$$.fragment,m),C(d9.$$.fragment,m),C(U5.$$.fragment,m),C(c9.$$.fragment,m),C(m9.$$.fragment,m),C(g9.$$.fragment,m),C(Y5.$$.fragment,m),C(h9.$$.fragment,m),C(b3.$$.fragment,m),C(u9.$$.fragment,m),C(p9.$$.fragment,m),C(b9.$$.fragment,m),C(F3.$$.fragment,m),C(v9.$$.fragment,m),C(M3.$$.fragment,m),C(F9.$$.fragment,m),C(T9.$$.fragment,m),C(E9.$$.fragment,m),C(C3.$$.fragment,m),C(C9.$$.fragment,m),C(A3.$$.fragment,m),C(w9.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C(L3.$$.fragment,m),C(x9.$$.fragment,m),C(ew.$$.fragment,m),C($9.$$.fragment,m),C(k9.$$.fragment,m),C(R9.$$.fragment,m),C(rw.$$.fragment,m),C(P9.$$.fragment,m),C(fw.$$.fragment,m),C(B9.$$.fragment,m),C(I9.$$.fragment,m),C(N9.$$.fragment,m),C(hw.$$.fragment,m),C(j9.$$.fragment,m),C(yw.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(xw.$$.fragment,m),C(X9.$$.fragment,m),C(Dw.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(H9.$$.fragment,m),C(Ow.$$.fragment,m),C(U9.$$.fragment,m),C(Kw.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(Z9.$$.fragment,m),C(e0.$$.fragment,m),C(ex.$$.fragment,m),C(m0.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(ax.$$.fragment,m),C(g0.$$.fragment,m),C(nx.$$.fragment,m),C(C0.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(dx.$$.fragment,m),C(A0.$$.fragment,m),C(cx.$$.fragment,m),C(B0.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(hx.$$.fragment,m),C(q0.$$.fragment,m),C(ux.$$.fragment,m),C(W0.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C(H0.$$.fragment,m),C(Fx.$$.fragment,m),C(J0.$$.fragment,m),C(Tx.$$.fragment,m),C(Mx.$$.fragment,m),C(Cx.$$.fragment,m),C(K0.$$.fragment,m),C(wx.$$.fragment,m),C(oA.$$.fragment,m),C(yx.$$.fragment,m),C(Lx.$$.fragment,m),C($x.$$.fragment,m),C(tA.$$.fragment,m),C(kx.$$.fragment,m),C(nA.$$.fragment,m),oDe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(hm),m&&t(rt),m&&t(je),m&&t(We),m&&t(pm),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(Kqe),m&&t(bi),w(yy),m&&t(Zqe),m&&t(kn),m&&t(eNe),w(Ly,m),m&&t(oNe),m&&t(J$),m&&t(rNe),w(vm,m),m&&t(tNe),m&&t(vi),w(xy),m&&t(aNe),m&&t(Co),w($y),w(Ry),w(Eg),w(Py),m&&t(nNe),m&&t(Ti),w(By),m&&t(sNe),m&&t(wo),w(Iy),w(jy),w(ah),w(Dy),m&&t(lNe),m&&t(Mi),w(Gy),m&&t(iNe),m&&t(Ao),w(Oy),w(zy),w(Ih),w(qh),w(Wy),m&&t(dNe),m&&t(Ei),w(Qy),m&&t(cNe),m&&t(yo),w(Hy),w(Yy),w(tu),w(au),w(Ky),m&&t(mNe),m&&t(wi),w(Zy),m&&t(fNe),m&&t(Lo),w(eL),w(rL),w(lu),w(tL),w(r_),m&&t(gNe),m&&t(Li),w(aL),m&&t(hNe),m&&t(xo),w(nL),w(lL),w(a_),w(iL),w(H_),m&&t(uNe),m&&t(ki),w(dL),m&&t(pNe),m&&t($o),w(cL),w(fL),w(J_),w(gL),w(Bb),m&&t(_Ne),m&&t(Pi),w(hL),m&&t(bNe),m&&t(ko),w(uL),w(_L),w(qb),w(bL),w(F2),m&&t(vNe),m&&t(qi),w(vL),m&&t(FNe),m&&t(So),w(FL),w(ML),w(M2),w(EL),w(D2),m&&t(TNe),m&&t(Di),w(CL),m&&t(MNe),m&&t(Ro),w(wL),w(yL),w(O2),w(LL),w(qv),m&&t(ENe),m&&t(Vi),w(xL),m&&t(CNe),m&&t(Po),w($L),w(SL),w(jv),w(RL),w(pF),m&&t(wNe),m&&t(Wi),w(PL),m&&t(ANe),m&&t(Bo),w(BL),w(qL),w(bF),w(NL),w(wF),m&&t(yNe),m&&t(Ui),w(jL),m&&t(LNe),m&&t(Io),w(DL),w(OL),w(yF),w(VL),w(d1),m&&t(xNe),m&&t(Ki),w(XL),m&&t($Ne),m&&t(qo),w(zL),w(QL),w(m1),w(HL),w(Z1),m&&t(kNe),m&&t(od),w(UL),m&&t(SNe),m&&t(No),w(JL),w(KL),w(oT),w(ZL),w(aT),m&&t(RNe),m&&t(ad),w(e8),m&&t(PNe),m&&t(jo),w(o8),w(t8),w(sT),w(a8),w(FT),m&&t(BNe),m&&t(ld),w(n8),m&&t(INe),m&&t(Do),w(s8),w(i8),w(MT),w(d8),w(wT),m&&t(qNe),m&&t(cd),w(c8),m&&t(NNe),m&&t(Go),w(m8),w(g8),w(yT),w(h8),w(NT),m&&t(jNe),m&&t(gd),w(u8),m&&t(DNe),m&&t(Oo),w(p8),w(b8),w(DT),w(v8),w(QT),m&&t(GNe),m&&t(pd),w(F8),m&&t(ONe),m&&t(Vo),w(T8),w(E8),w(UT),w(C8),w(sM),m&&t(VNe),m&&t(vd),w(w8),m&&t(XNe),m&&t(Xo),w(A8),w(L8),w(iM),w(x8),w(fM),m&&t(zNe),m&&t(Md),w(k8),m&&t(WNe),m&&t(zo),w(S8),w(P8),w(hM),w(B8),w(TM),m&&t(QNe),m&&t(wd),w(I8),m&&t(HNe),m&&t(Wo),w(q8),w(j8),w(EM),w(D8),w(LM),m&&t(UNe),m&&t(xd),w(G8),m&&t(JNe),m&&t(Qo),w(O8),w(X8),w($M),w(z8),w(PM),m&&t(YNe),m&&t(Sd),w(Q8),m&&t(KNe),m&&t(Ho),w(H8),w(J8),w(IM),w(Y8),w(jM),m&&t(ZNe),m&&t(Bd),w(K8),m&&t(eje),m&&t(Uo),w(Z8),w(o7),w(GM),w(r7),w(QM),m&&t(oje),m&&t(Nd),w(t7),m&&t(rje),m&&t(Jo),w(a7),w(s7),w(UM),w(l7),w(KM),m&&t(tje),m&&t(Gd),w(i7),m&&t(aje),m&&t(Yo),w(d7),w(m7),w(e4),w(f7),w(W4),m&&t(nje),m&&t(Xd),w(g7),m&&t(sje),m&&t(Ko),w(h7),w(p7),w(H4),w(_7),w(bE),m&&t(lje),m&&t(Qd),w(b7),m&&t(ije),m&&t(Zo),w(v7),w(T7),w(FE),w(M7),w(RE),m&&t(dje),m&&t(Jd),w(E7),m&&t(cje),m&&t(er),w(C7),w(A7),w(BE),w(y7),w(DE),m&&t(mje),m&&t(Zd),w(L7),m&&t(fje),m&&t(or),w(x7),w(k7),w(OE),w(S7),w(dC),m&&t(gje),m&&t(rc),w(R7),m&&t(hje),m&&t(rr),w(P7),w(I7),w(mC),w(q7),w(MC),m&&t(uje),m&&t(nc),w(N7),m&&t(pje),m&&t(tr),w(j7),w(G7),w(CC),w(O7),w(YC),m&&t(_je),m&&t(ic),w(V7),m&&t(bje),m&&t(ar),w(X7),w(W7),w(ZC),w(Q7),w(_5),m&&t(vje),m&&t(mc),w(H7),m&&t(Fje),m&&t(nr),w(U7),w(Y7),w(v5),w(K7),w(M5),m&&t(Tje),m&&t(hc),w(e9),m&&t(Mje),m&&t(sr),w(o9),w(t9),w(C5),w(a9),w(A5),m&&t(Eje),m&&t(_c),w(n9),m&&t(Cje),m&&t(lr),w(s9),w(i9),w(L5),w(d9),w(U5),m&&t(wje),m&&t(Fc),w(c9),m&&t(Aje),m&&t(ir),w(m9),w(g9),w(Y5),w(h9),w(b3),m&&t(yje),m&&t(Ec),w(u9),m&&t(Lje),m&&t(dr),w(p9),w(b9),w(F3),w(v9),w(M3),m&&t(xje),m&&t(Ac),w(F9),m&&t($je),m&&t(cr),w(T9),w(E9),w(C3),w(C9),w(A3),m&&t(kje),m&&t(xc),w(w9),m&&t(Sje),m&&t(mr),w(A9),w(L9),w(L3),w(x9),w(ew),m&&t(Rje),m&&t(Sc),w($9),m&&t(Pje),m&&t(fr),w(k9),w(R9),w(rw),w(P9),w(fw),m&&t(Bje),m&&t(Bc),w(B9),m&&t(Ije),m&&t(gr),w(I9),w(N9),w(hw),w(j9),w(yw),m&&t(qje),m&&t(Nc),w(D9),m&&t(Nje),m&&t(hr),w(G9),w(V9),w(xw),w(X9),w(Dw),m&&t(jje),m&&t(Gc),w(z9),m&&t(Dje),m&&t(ur),w(W9),w(H9),w(Ow),w(U9),w(Kw),m&&t(Gje),m&&t(Xc),w(J9),m&&t(Oje),m&&t(pr),w(Y9),w(Z9),w(e0),w(ex),w(m0),m&&t(Vje),m&&t(Qc),w(ox),m&&t(Xje),m&&t(_r),w(rx),w(ax),w(g0),w(nx),w(C0),m&&t(zje),m&&t(Jc),w(sx),m&&t(Wje),m&&t(br),w(lx),w(dx),w(A0),w(cx),w(B0),m&&t(Qje),m&&t(Zc),w(mx),m&&t(Hje),m&&t(vr),w(fx),w(hx),w(q0),w(ux),w(W0),m&&t(Uje),m&&t(rm),w(px),m&&t(Jje),m&&t(Fr),w(_x),w(vx),w(H0),w(Fx),w(J0),m&&t(Yje),m&&t(nm),w(Tx),m&&t(Kje),m&&t(Tr),w(Mx),w(Cx),w(K0),w(wx),w(oA),m&&t(Zje),m&&t(im),w(yx),m&&t(eDe),m&&t(Mr),w(Lx),w($x),w(tA),w(kx),w(nA)}}}const dSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cSt(L){return c$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _St extends s$t{constructor(g){super();l$t(this,g,cSt,iSt,i$t,{})}}export{_St as default,dSt as metadata};
