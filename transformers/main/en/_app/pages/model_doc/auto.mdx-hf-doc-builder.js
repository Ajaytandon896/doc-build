import{S as lpa,i as ipa,s as dpa,e as a,k as l,w as F,t as o,M as cpa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as mpa,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as kFt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function fpa($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,q9,Cf,Ve,He,sd,es,j9,os,rs,D9,ld,ts,G9,id,wf,Qa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),td=a("code"),Ef=o("model_type"),pt=o(" attribute is set to the same key you use when registering the config (here "),ad=a("code"),nd=o('"new-model"'),q9=o(")."),Cf=l(),Ve=a("p"),He=o("Likewise, if your "),sd=a("code"),es=o("NewModel"),j9=o(" is a subclass of "),os=a("a"),rs=o("PreTrainedModel"),D9=o(`, make sure its
`),ld=a("code"),ts=o("config_class"),G9=o(` attribute is set to the same class you use when registering the model (here
`),id=a("code"),wf=o("NewModelConfig"),Qa=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var OB=s(u);f=r(OB,"NewModelConfig"),OB.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var dd=s(d);h=r(dd,"PretrainedConfig"),dd.forEach(t),yo=r(Ae,`, make sure its
`),td=n(Ae,"CODE",{});var VB=s(td);Ef=r(VB,"model_type"),VB.forEach(t),pt=r(Ae," attribute is set to the same key you use when registering the config (here "),ad=n(Ae,"CODE",{});var XB=s(ad);nd=r(XB,'"new-model"'),XB.forEach(t),q9=r(Ae,")."),Ae.forEach(t),Cf=i(Je),Ve=n(Je,"P",{});var xo=s(Ve);He=r(xo,"Likewise, if your "),sd=n(xo,"CODE",{});var Wa=s(sd);es=r(Wa,"NewModel"),Wa.forEach(t),j9=r(xo," is a subclass of "),os=n(xo,"A",{href:!0});var zB=s(os);rs=r(zB,"PreTrainedModel"),zB.forEach(t),D9=r(xo,`, make sure its
`),ld=n(xo,"CODE",{});var Af=s(ld);ts=r(Af,"config_class"),Af.forEach(t),G9=r(xo,` attribute is set to the same class you use when registering the model (here
`),id=n(xo,"CODE",{});var QB=s(id);wf=r(QB,"NewModelConfig"),QB.forEach(t),Qa=r(xo,")."),xo.forEach(t),this.h()},h(){c(os,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,yo),e(g,td),e(td,Ef),e(g,pt),e(g,ad),e(ad,nd),e(g,q9),b(Je,Cf,Ae),b(Je,Ve,Ae),e(Ve,He),e(Ve,sd),e(sd,es),e(Ve,j9),e(Ve,os),e(os,rs),e(Ve,D9),e(Ve,ld),e(ld,ts),e(Ve,G9),e(Ve,id),e(id,wf),e(Ve,Qa)},d(Je){Je&&t(g),Je&&t(Cf),Je&&t(Ve)}}}function gpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function upa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function ppa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _pa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function bpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Epa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Apa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ypa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $pa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Spa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ppa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ipa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Npa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Opa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Upa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ypa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function __a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vba($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,q9,Cf,Ve,He,sd,es,j9,os,rs,D9,ld,ts,G9,id,wf,Qa,Je,Ae,OB,dd,VB,XB,xo,Wa,zB,Af,QB,Mto,QKe,cd,Lf,$de,O9,Eto,kde,Cto,WKe,as,wto,Sde,Ato,Lto,Rde,yto,xto,UKe,V9,HKe,WB,$to,JKe,yf,YKe,md,xf,Pde,X9,kto,Bde,Sto,KKe,$o,z9,Rto,Q9,Pto,UB,Bto,Ito,Nto,W9,qto,Ide,jto,Dto,Gto,Pr,U9,Oto,Nde,Vto,Xto,fd,zto,qde,Qto,Wto,jde,Uto,Hto,Jto,A,$f,Dde,Yto,Kto,HB,Zto,eao,oao,kf,Gde,rao,tao,JB,aao,nao,sao,Sf,Ode,lao,iao,YB,dao,cao,mao,Rf,Vde,fao,gao,KB,hao,uao,pao,Pf,Xde,_ao,bao,ZB,vao,Fao,Tao,Bf,zde,Mao,Eao,eI,Cao,wao,Aao,If,Qde,Lao,yao,oI,xao,$ao,kao,Nf,Wde,Sao,Rao,rI,Pao,Bao,Iao,qf,Ude,Nao,qao,tI,jao,Dao,Gao,jf,Hde,Oao,Vao,aI,Xao,zao,Qao,Df,Jde,Wao,Uao,nI,Hao,Jao,Yao,Gf,Yde,Kao,Zao,sI,eno,ono,rno,Of,Kde,tno,ano,lI,nno,sno,lno,Vf,Zde,ino,dno,iI,cno,mno,fno,Xf,ece,gno,hno,dI,uno,pno,_no,zf,oce,bno,vno,cI,Fno,Tno,Mno,Qf,rce,Eno,Cno,mI,wno,Ano,Lno,Wf,tce,yno,xno,fI,$no,kno,Sno,Uf,ace,Rno,Pno,gI,Bno,Ino,Nno,Hf,nce,qno,jno,hI,Dno,Gno,Ono,Jf,sce,Vno,Xno,uI,zno,Qno,Wno,Yf,lce,Uno,Hno,pI,Jno,Yno,Kno,Kf,ice,Zno,eso,_I,oso,rso,tso,Zf,dce,aso,nso,bI,sso,lso,iso,eg,cce,dso,cso,vI,mso,fso,gso,og,mce,hso,uso,FI,pso,_so,bso,rg,fce,vso,Fso,TI,Tso,Mso,Eso,tg,gce,Cso,wso,MI,Aso,Lso,yso,ag,hce,xso,$so,EI,kso,Sso,Rso,ng,uce,Pso,Bso,CI,Iso,Nso,qso,sg,pce,jso,Dso,wI,Gso,Oso,Vso,lg,_ce,Xso,zso,AI,Qso,Wso,Uso,ig,bce,Hso,Jso,LI,Yso,Kso,Zso,dg,vce,elo,olo,yI,rlo,tlo,alo,cg,Fce,nlo,slo,xI,llo,ilo,dlo,mg,Tce,clo,mlo,$I,flo,glo,hlo,fg,Mce,ulo,plo,kI,_lo,blo,vlo,gg,Ece,Flo,Tlo,SI,Mlo,Elo,Clo,hg,Cce,wlo,Alo,RI,Llo,ylo,xlo,ug,wce,$lo,klo,PI,Slo,Rlo,Plo,pg,Ace,Blo,Ilo,BI,Nlo,qlo,jlo,_g,Lce,Dlo,Glo,II,Olo,Vlo,Xlo,bg,yce,zlo,Qlo,NI,Wlo,Ulo,Hlo,vg,xce,Jlo,Ylo,qI,Klo,Zlo,eio,Fg,$ce,oio,rio,jI,tio,aio,nio,Tg,kce,sio,lio,DI,iio,dio,cio,Mg,Sce,mio,fio,GI,gio,hio,uio,Eg,Rce,pio,_io,OI,bio,vio,Fio,Cg,Pce,Tio,Mio,VI,Eio,Cio,wio,wg,Bce,Aio,Lio,XI,yio,xio,$io,Ag,Ice,kio,Sio,zI,Rio,Pio,Bio,Lg,Nce,Iio,Nio,QI,qio,jio,Dio,yg,qce,Gio,Oio,WI,Vio,Xio,zio,xg,jce,Qio,Wio,UI,Uio,Hio,Jio,$g,Dce,Yio,Kio,HI,Zio,edo,odo,kg,Gce,rdo,tdo,JI,ado,ndo,sdo,Sg,Oce,ldo,ido,YI,ddo,cdo,mdo,Rg,Vce,fdo,gdo,KI,hdo,udo,pdo,Pg,Xce,_do,bdo,ZI,vdo,Fdo,Tdo,Bg,zce,Mdo,Edo,eN,Cdo,wdo,Ado,Ig,Qce,Ldo,ydo,oN,xdo,$do,kdo,Ng,Wce,Sdo,Rdo,rN,Pdo,Bdo,Ido,qg,Uce,Ndo,qdo,tN,jdo,Ddo,Gdo,jg,Hce,Odo,Vdo,aN,Xdo,zdo,Qdo,Dg,Jce,Wdo,Udo,nN,Hdo,Jdo,Ydo,Gg,Yce,Kdo,Zdo,sN,eco,oco,rco,Og,Kce,tco,aco,lN,nco,sco,lco,Vg,Zce,ico,dco,iN,cco,mco,fco,Xg,eme,gco,hco,dN,uco,pco,_co,zg,ome,bco,vco,cN,Fco,Tco,Mco,Qg,rme,Eco,Cco,mN,wco,Aco,Lco,Wg,tme,yco,xco,fN,$co,kco,Sco,Ug,ame,Rco,Pco,gN,Bco,Ico,Nco,Hg,nme,qco,jco,hN,Dco,Gco,Oco,Jg,sme,Vco,Xco,uN,zco,Qco,Wco,Yg,lme,Uco,Hco,pN,Jco,Yco,Kco,Kg,ime,Zco,emo,_N,omo,rmo,tmo,Zg,dme,amo,nmo,bN,smo,lmo,imo,eh,cme,dmo,cmo,vN,mmo,fmo,gmo,oh,mme,hmo,umo,FN,pmo,_mo,bmo,rh,fme,vmo,Fmo,TN,Tmo,Mmo,Emo,th,gme,Cmo,wmo,MN,Amo,Lmo,ymo,ah,hme,xmo,$mo,EN,kmo,Smo,Rmo,nh,ume,Pmo,Bmo,CN,Imo,Nmo,qmo,sh,pme,jmo,Dmo,wN,Gmo,Omo,Vmo,lh,_me,Xmo,zmo,AN,Qmo,Wmo,Umo,ih,bme,Hmo,Jmo,LN,Ymo,Kmo,Zmo,dh,vme,efo,ofo,yN,rfo,tfo,afo,ch,Fme,nfo,sfo,xN,lfo,ifo,dfo,mh,Tme,cfo,mfo,$N,ffo,gfo,hfo,fh,Mme,ufo,pfo,kN,_fo,bfo,vfo,gh,Eme,Ffo,Tfo,SN,Mfo,Efo,Cfo,hh,Cme,wfo,Afo,RN,Lfo,yfo,xfo,uh,wme,$fo,kfo,PN,Sfo,Rfo,Pfo,ph,Ame,Bfo,Ifo,BN,Nfo,qfo,jfo,_h,Lme,Dfo,Gfo,IN,Ofo,Vfo,Xfo,bh,yme,zfo,Qfo,NN,Wfo,Ufo,Hfo,vh,xme,Jfo,Yfo,qN,Kfo,Zfo,ego,Fh,$me,ogo,rgo,jN,tgo,ago,ngo,Th,kme,sgo,lgo,DN,igo,dgo,cgo,Mh,Sme,mgo,fgo,GN,ggo,hgo,ugo,Eh,Rme,pgo,_go,ON,bgo,vgo,Fgo,Ch,Pme,Tgo,Mgo,VN,Ego,Cgo,wgo,wh,Bme,Ago,Lgo,XN,ygo,xgo,$go,Ah,Ime,kgo,Sgo,zN,Rgo,Pgo,Bgo,Lh,Nme,Igo,Ngo,QN,qgo,jgo,Dgo,yh,qme,Ggo,Ogo,WN,Vgo,Xgo,zgo,xh,jme,Qgo,Wgo,UN,Ugo,Hgo,Jgo,$h,Dme,Ygo,Kgo,HN,Zgo,eho,oho,kh,Gme,rho,tho,JN,aho,nho,sho,Sh,Ome,lho,iho,YN,dho,cho,mho,Rh,Vme,fho,gho,KN,hho,uho,pho,Ph,Xme,_ho,bho,ZN,vho,Fho,Tho,Bh,zme,Mho,Eho,eq,Cho,who,Aho,Ih,Qme,Lho,yho,oq,xho,$ho,kho,Nh,Wme,Sho,Rho,rq,Pho,Bho,Iho,qh,Ume,Nho,qho,tq,jho,Dho,Gho,jh,Hme,Oho,Vho,aq,Xho,zho,Qho,Dh,Jme,Who,Uho,nq,Hho,Jho,Yho,Gh,Yme,Kho,Zho,sq,euo,ouo,ruo,Oh,Kme,tuo,auo,lq,nuo,suo,luo,Vh,Zme,iuo,duo,iq,cuo,muo,fuo,Xh,efe,guo,huo,dq,uuo,puo,_uo,zh,ofe,buo,vuo,cq,Fuo,Tuo,Muo,Qh,rfe,Euo,Cuo,mq,wuo,Auo,Luo,Wh,tfe,yuo,xuo,fq,$uo,kuo,Suo,Uh,afe,Ruo,Puo,gq,Buo,Iuo,Nuo,Hh,nfe,quo,juo,hq,Duo,Guo,Ouo,Jh,sfe,Vuo,Xuo,uq,zuo,Quo,Wuo,Yh,Uuo,Kh,H9,Huo,lfe,Juo,ZKe,gd,Zh,ife,J9,Yuo,dfe,Kuo,eZe,ko,Y9,Zuo,K9,epo,pq,opo,rpo,tpo,Z9,apo,cfe,npo,spo,lpo,Br,ex,ipo,mfe,dpo,cpo,Ua,mpo,ffe,fpo,gpo,gfe,hpo,upo,hfe,ppo,_po,bpo,k,ns,ufe,vpo,Fpo,_q,Tpo,Mpo,bq,Epo,Cpo,wpo,ss,pfe,Apo,Lpo,vq,ypo,xpo,Fq,$po,kpo,Spo,ls,_fe,Rpo,Ppo,Tq,Bpo,Ipo,Mq,Npo,qpo,jpo,eu,bfe,Dpo,Gpo,Eq,Opo,Vpo,Xpo,is,vfe,zpo,Qpo,Cq,Wpo,Upo,wq,Hpo,Jpo,Ypo,ou,Ffe,Kpo,Zpo,Aq,e_o,o_o,r_o,ru,Tfe,t_o,a_o,Lq,n_o,s_o,l_o,tu,Mfe,i_o,d_o,yq,c_o,m_o,f_o,ds,Efe,g_o,h_o,xq,u_o,p_o,$q,__o,b_o,v_o,cs,Cfe,F_o,T_o,kq,M_o,E_o,Sq,C_o,w_o,A_o,ms,wfe,L_o,y_o,Rq,x_o,$_o,Pq,k_o,S_o,R_o,au,Afe,P_o,B_o,Bq,I_o,N_o,q_o,nu,Lfe,j_o,D_o,Iq,G_o,O_o,V_o,su,yfe,X_o,z_o,Nq,Q_o,W_o,U_o,fs,xfe,H_o,J_o,qq,Y_o,K_o,jq,Z_o,ebo,obo,lu,$fe,rbo,tbo,Dq,abo,nbo,sbo,gs,kfe,lbo,ibo,Gq,dbo,cbo,Oq,mbo,fbo,gbo,hs,Sfe,hbo,ubo,Vq,pbo,_bo,Xq,bbo,vbo,Fbo,us,Rfe,Tbo,Mbo,zq,Ebo,Cbo,Qq,wbo,Abo,Lbo,ps,Pfe,ybo,xbo,Wq,$bo,kbo,Uq,Sbo,Rbo,Pbo,iu,Bfe,Bbo,Ibo,Hq,Nbo,qbo,jbo,_s,Ife,Dbo,Gbo,Jq,Obo,Vbo,Yq,Xbo,zbo,Qbo,bs,Nfe,Wbo,Ubo,Kq,Hbo,Jbo,Zq,Ybo,Kbo,Zbo,vs,qfe,e2o,o2o,ej,r2o,t2o,oj,a2o,n2o,s2o,Fs,jfe,l2o,i2o,rj,d2o,c2o,tj,m2o,f2o,g2o,Ts,Dfe,h2o,u2o,aj,p2o,_2o,nj,b2o,v2o,F2o,Ms,Gfe,T2o,M2o,sj,E2o,C2o,lj,w2o,A2o,L2o,Es,Ofe,y2o,x2o,ij,$2o,k2o,dj,S2o,R2o,P2o,du,Vfe,B2o,I2o,cj,N2o,q2o,j2o,Cs,Xfe,D2o,G2o,mj,O2o,V2o,fj,X2o,z2o,Q2o,cu,zfe,W2o,U2o,gj,H2o,J2o,Y2o,ws,Qfe,K2o,Z2o,hj,e1o,o1o,uj,r1o,t1o,a1o,As,Wfe,n1o,s1o,pj,l1o,i1o,_j,d1o,c1o,m1o,Ls,Ufe,f1o,g1o,bj,h1o,u1o,vj,p1o,_1o,b1o,mu,Hfe,v1o,F1o,Fj,T1o,M1o,E1o,fu,Jfe,C1o,w1o,Tj,A1o,L1o,y1o,ys,Yfe,x1o,$1o,Mj,k1o,S1o,Ej,R1o,P1o,B1o,xs,Kfe,I1o,N1o,Cj,q1o,j1o,wj,D1o,G1o,O1o,$s,Zfe,V1o,X1o,Aj,z1o,Q1o,Lj,W1o,U1o,H1o,gu,ege,J1o,Y1o,yj,K1o,Z1o,evo,ks,oge,ovo,rvo,xj,tvo,avo,$j,nvo,svo,lvo,Ss,rge,ivo,dvo,kj,cvo,mvo,Sj,fvo,gvo,hvo,Rs,tge,uvo,pvo,Rj,_vo,bvo,Pj,vvo,Fvo,Tvo,Ps,age,Mvo,Evo,Bj,Cvo,wvo,Ij,Avo,Lvo,yvo,Bs,nge,xvo,$vo,Nj,kvo,Svo,qj,Rvo,Pvo,Bvo,Is,sge,Ivo,Nvo,jj,qvo,jvo,Dj,Dvo,Gvo,Ovo,Ns,lge,Vvo,Xvo,Gj,zvo,Qvo,Oj,Wvo,Uvo,Hvo,qs,ige,Jvo,Yvo,Vj,Kvo,Zvo,Xj,eFo,oFo,rFo,hu,dge,tFo,aFo,zj,nFo,sFo,lFo,js,cge,iFo,dFo,Qj,cFo,mFo,Wj,fFo,gFo,hFo,uu,mge,uFo,pFo,Uj,_Fo,bFo,vFo,pu,fge,FFo,TFo,Hj,MFo,EFo,CFo,Ds,gge,wFo,AFo,Jj,LFo,yFo,Yj,xFo,$Fo,kFo,Gs,hge,SFo,RFo,Kj,PFo,BFo,Zj,IFo,NFo,qFo,Os,uge,jFo,DFo,eD,GFo,OFo,oD,VFo,XFo,zFo,_u,pge,QFo,WFo,rD,UFo,HFo,JFo,Vs,_ge,YFo,KFo,tD,ZFo,eTo,aD,oTo,rTo,tTo,Xs,bge,aTo,nTo,nD,sTo,lTo,sD,iTo,dTo,cTo,zs,vge,mTo,fTo,lD,gTo,hTo,iD,uTo,pTo,_To,Qs,Fge,bTo,vTo,dD,FTo,TTo,cD,MTo,ETo,CTo,Ws,Tge,wTo,ATo,mD,LTo,yTo,fD,xTo,$To,kTo,Us,Mge,STo,RTo,gD,PTo,BTo,hD,ITo,NTo,qTo,Hs,Ege,jTo,DTo,uD,GTo,OTo,pD,VTo,XTo,zTo,Js,Cge,QTo,WTo,_D,UTo,HTo,bD,JTo,YTo,KTo,bu,wge,ZTo,eMo,vD,oMo,rMo,tMo,Ys,Age,aMo,nMo,FD,sMo,lMo,TD,iMo,dMo,cMo,Ks,Lge,mMo,fMo,MD,gMo,hMo,ED,uMo,pMo,_Mo,vu,yge,bMo,vMo,CD,FMo,TMo,MMo,Fu,xge,EMo,CMo,wD,wMo,AMo,LMo,Tu,$ge,yMo,xMo,AD,$Mo,kMo,SMo,Mu,kge,RMo,PMo,LD,BMo,IMo,NMo,Zs,Sge,qMo,jMo,yD,DMo,GMo,xD,OMo,VMo,XMo,Eu,Rge,zMo,QMo,$D,WMo,UMo,HMo,el,Pge,JMo,YMo,kD,KMo,ZMo,SD,eEo,oEo,rEo,ol,Bge,tEo,aEo,RD,nEo,sEo,PD,lEo,iEo,dEo,rl,Ige,cEo,mEo,BD,fEo,gEo,ID,hEo,uEo,pEo,tl,Nge,_Eo,bEo,ND,vEo,FEo,qD,TEo,MEo,EEo,al,qge,CEo,wEo,jD,AEo,LEo,DD,yEo,xEo,$Eo,nl,jge,kEo,SEo,GD,REo,PEo,OD,BEo,IEo,NEo,Cu,Dge,qEo,jEo,VD,DEo,GEo,OEo,wu,Gge,VEo,XEo,XD,zEo,QEo,WEo,sl,Oge,UEo,HEo,zD,JEo,YEo,QD,KEo,ZEo,e4o,ll,Vge,o4o,r4o,WD,t4o,a4o,UD,n4o,s4o,l4o,il,Xge,i4o,d4o,HD,c4o,m4o,JD,f4o,g4o,h4o,Au,zge,u4o,p4o,YD,_4o,b4o,v4o,Lu,Qge,F4o,T4o,KD,M4o,E4o,C4o,yu,Wge,w4o,A4o,ZD,L4o,y4o,x4o,dl,Uge,$4o,k4o,eG,S4o,R4o,oG,P4o,B4o,I4o,cl,Hge,N4o,q4o,rG,j4o,D4o,tG,G4o,O4o,V4o,xu,Jge,X4o,z4o,aG,Q4o,W4o,U4o,$u,Yge,H4o,J4o,nG,Y4o,K4o,Z4o,ku,Kge,eCo,oCo,sG,rCo,tCo,aCo,ml,Zge,nCo,sCo,lG,lCo,iCo,iG,dCo,cCo,mCo,fl,ehe,fCo,gCo,dG,hCo,uCo,cG,pCo,_Co,bCo,Su,ohe,vCo,FCo,mG,TCo,MCo,ECo,Ru,rhe,CCo,wCo,fG,ACo,LCo,yCo,gl,the,xCo,$Co,gG,kCo,SCo,hG,RCo,PCo,BCo,hl,ahe,ICo,NCo,uG,qCo,jCo,pG,DCo,GCo,OCo,ul,nhe,VCo,XCo,_G,zCo,QCo,bG,WCo,UCo,HCo,pl,she,JCo,YCo,vG,KCo,ZCo,FG,e3o,o3o,r3o,Pu,t3o,Bu,ox,a3o,lhe,n3o,oZe,hd,Iu,ihe,rx,s3o,dhe,l3o,rZe,So,tx,i3o,ax,d3o,TG,c3o,m3o,f3o,nx,g3o,che,h3o,u3o,p3o,Ye,sx,_3o,mhe,b3o,v3o,Ha,F3o,fhe,T3o,M3o,ghe,E3o,C3o,hhe,w3o,A3o,L3o,z,Nu,uhe,y3o,x3o,MG,$3o,k3o,S3o,qu,phe,R3o,P3o,EG,B3o,I3o,N3o,ju,_he,q3o,j3o,CG,D3o,G3o,O3o,Du,bhe,V3o,X3o,wG,z3o,Q3o,W3o,Gu,vhe,U3o,H3o,AG,J3o,Y3o,K3o,Ou,Fhe,Z3o,e5o,LG,o5o,r5o,t5o,Vu,The,a5o,n5o,yG,s5o,l5o,i5o,Xu,Mhe,d5o,c5o,xG,m5o,f5o,g5o,zu,Ehe,h5o,u5o,$G,p5o,_5o,b5o,Qu,Che,v5o,F5o,kG,T5o,M5o,E5o,Wu,whe,C5o,w5o,SG,A5o,L5o,y5o,Uu,Ahe,x5o,$5o,RG,k5o,S5o,R5o,Hu,Lhe,P5o,B5o,PG,I5o,N5o,q5o,Ju,yhe,j5o,D5o,BG,G5o,O5o,V5o,Yu,xhe,X5o,z5o,IG,Q5o,W5o,U5o,Ku,$he,H5o,J5o,NG,Y5o,K5o,Z5o,Zu,khe,e0o,o0o,qG,r0o,t0o,a0o,ep,She,n0o,s0o,jG,l0o,i0o,d0o,op,Rhe,c0o,m0o,DG,f0o,g0o,h0o,rp,Phe,u0o,p0o,GG,_0o,b0o,v0o,tp,Bhe,F0o,T0o,OG,M0o,E0o,C0o,ap,Ihe,w0o,A0o,VG,L0o,y0o,x0o,np,Nhe,$0o,k0o,XG,S0o,R0o,P0o,sp,qhe,B0o,I0o,zG,N0o,q0o,j0o,lp,jhe,D0o,G0o,QG,O0o,V0o,X0o,ip,Dhe,z0o,Q0o,WG,W0o,U0o,H0o,dp,Ghe,J0o,Y0o,UG,K0o,Z0o,ewo,cp,Ohe,owo,rwo,HG,two,awo,nwo,mp,Vhe,swo,lwo,JG,iwo,dwo,cwo,fp,Xhe,mwo,fwo,YG,gwo,hwo,uwo,gp,zhe,pwo,_wo,KG,bwo,vwo,Fwo,hp,Qhe,Two,Mwo,ZG,Ewo,Cwo,wwo,up,Whe,Awo,Lwo,eO,ywo,xwo,$wo,pp,Uhe,kwo,Swo,oO,Rwo,Pwo,Bwo,_p,Hhe,Iwo,Nwo,rO,qwo,jwo,Dwo,bp,Jhe,Gwo,Owo,tO,Vwo,Xwo,zwo,vp,Yhe,Qwo,Wwo,aO,Uwo,Hwo,Jwo,Fp,Khe,Ywo,Kwo,nO,Zwo,eAo,oAo,Tp,Zhe,rAo,tAo,sO,aAo,nAo,sAo,Mp,eue,lAo,iAo,lO,dAo,cAo,mAo,Ep,oue,fAo,gAo,iO,hAo,uAo,pAo,Cp,rue,_Ao,bAo,dO,vAo,FAo,TAo,wp,MAo,Ap,EAo,Lp,lx,CAo,tue,wAo,tZe,ud,yp,aue,ix,AAo,nue,LAo,aZe,Ro,dx,yAo,cx,xAo,cO,$Ao,kAo,SAo,mx,RAo,sue,PAo,BAo,IAo,Ke,fx,NAo,lue,qAo,jAo,pd,DAo,iue,GAo,OAo,due,VAo,XAo,zAo,ie,xp,cue,QAo,WAo,mO,UAo,HAo,JAo,$p,mue,YAo,KAo,fO,ZAo,e6o,o6o,kp,fue,r6o,t6o,gO,a6o,n6o,s6o,Sp,gue,l6o,i6o,hO,d6o,c6o,m6o,Rp,hue,f6o,g6o,uO,h6o,u6o,p6o,Pp,uue,_6o,b6o,pO,v6o,F6o,T6o,Bp,pue,M6o,E6o,_O,C6o,w6o,A6o,Ip,_ue,L6o,y6o,bO,x6o,$6o,k6o,Np,bue,S6o,R6o,vO,P6o,B6o,I6o,qp,vue,N6o,q6o,FO,j6o,D6o,G6o,jp,Fue,O6o,V6o,TO,X6o,z6o,Q6o,Dp,Tue,W6o,U6o,MO,H6o,J6o,Y6o,Gp,Mue,K6o,Z6o,EO,e7o,o7o,r7o,Op,Eue,t7o,a7o,CO,n7o,s7o,l7o,Vp,Cue,i7o,d7o,wO,c7o,m7o,f7o,Xp,wue,g7o,h7o,AO,u7o,p7o,_7o,zp,Aue,b7o,v7o,LO,F7o,T7o,M7o,Qp,Lue,E7o,C7o,yO,w7o,A7o,L7o,Wp,yue,y7o,x7o,xO,$7o,k7o,S7o,Up,xue,R7o,P7o,$O,B7o,I7o,N7o,Hp,$ue,q7o,j7o,kO,D7o,G7o,O7o,Jp,V7o,Yp,X7o,Kp,gx,z7o,kue,Q7o,nZe,_d,Zp,Sue,hx,W7o,Rue,U7o,sZe,Po,ux,H7o,bd,J7o,SO,Y7o,K7o,RO,Z7o,eLo,oLo,px,rLo,Pue,tLo,aLo,nLo,_t,_x,sLo,Bue,lLo,iLo,vd,dLo,Iue,cLo,mLo,PO,fLo,gLo,hLo,e_,uLo,Ze,bx,pLo,Nue,_Lo,bLo,Ja,vLo,que,FLo,TLo,jue,MLo,ELo,Due,CLo,wLo,ALo,y,o_,Gue,LLo,yLo,BO,xLo,$Lo,kLo,r_,Oue,SLo,RLo,IO,PLo,BLo,ILo,t_,Vue,NLo,qLo,NO,jLo,DLo,GLo,a_,Xue,OLo,VLo,qO,XLo,zLo,QLo,n_,zue,WLo,ULo,jO,HLo,JLo,YLo,s_,Que,KLo,ZLo,DO,eyo,oyo,ryo,l_,Wue,tyo,ayo,GO,nyo,syo,lyo,i_,Uue,iyo,dyo,OO,cyo,myo,fyo,d_,Hue,gyo,hyo,VO,uyo,pyo,_yo,c_,Jue,byo,vyo,XO,Fyo,Tyo,Myo,m_,Yue,Eyo,Cyo,zO,wyo,Ayo,Lyo,f_,Kue,yyo,xyo,QO,$yo,kyo,Syo,g_,Zue,Ryo,Pyo,WO,Byo,Iyo,Nyo,h_,epe,qyo,jyo,UO,Dyo,Gyo,Oyo,u_,ope,Vyo,Xyo,HO,zyo,Qyo,Wyo,p_,rpe,Uyo,Hyo,JO,Jyo,Yyo,Kyo,__,tpe,Zyo,e8o,YO,o8o,r8o,t8o,b_,ape,a8o,n8o,KO,s8o,l8o,i8o,v_,npe,d8o,c8o,ZO,m8o,f8o,g8o,F_,spe,h8o,u8o,eV,p8o,_8o,b8o,T_,lpe,v8o,F8o,oV,T8o,M8o,E8o,M_,ipe,C8o,w8o,rV,A8o,L8o,y8o,E_,dpe,x8o,$8o,tV,k8o,S8o,R8o,C_,cpe,P8o,B8o,aV,I8o,N8o,q8o,w_,mpe,j8o,D8o,nV,G8o,O8o,V8o,A_,fpe,X8o,z8o,sV,Q8o,W8o,U8o,L_,gpe,H8o,J8o,lV,Y8o,K8o,Z8o,y_,hpe,e9o,o9o,iV,r9o,t9o,a9o,x_,upe,n9o,s9o,dV,l9o,i9o,d9o,$_,ppe,c9o,m9o,cV,f9o,g9o,h9o,k_,_pe,u9o,p9o,mV,_9o,b9o,v9o,S_,bpe,F9o,T9o,fV,M9o,E9o,C9o,R_,vpe,w9o,A9o,gV,L9o,y9o,x9o,P_,Fpe,$9o,k9o,hV,S9o,R9o,P9o,B_,Tpe,B9o,I9o,uV,N9o,q9o,j9o,I_,Mpe,D9o,G9o,pV,O9o,V9o,X9o,N_,Epe,z9o,Q9o,_V,W9o,U9o,H9o,q_,Cpe,J9o,Y9o,bV,K9o,Z9o,exo,_l,wpe,oxo,rxo,vV,txo,axo,FV,nxo,sxo,lxo,j_,Ape,ixo,dxo,TV,cxo,mxo,fxo,D_,Lpe,gxo,hxo,MV,uxo,pxo,_xo,G_,ype,bxo,vxo,EV,Fxo,Txo,Mxo,O_,xpe,Exo,Cxo,CV,wxo,Axo,Lxo,V_,$pe,yxo,xxo,wV,$xo,kxo,Sxo,X_,kpe,Rxo,Pxo,AV,Bxo,Ixo,Nxo,z_,Spe,qxo,jxo,LV,Dxo,Gxo,Oxo,Q_,Rpe,Vxo,Xxo,yV,zxo,Qxo,Wxo,W_,Ppe,Uxo,Hxo,xV,Jxo,Yxo,Kxo,U_,Bpe,Zxo,e$o,$V,o$o,r$o,t$o,H_,Ipe,a$o,n$o,kV,s$o,l$o,i$o,J_,Npe,d$o,c$o,SV,m$o,f$o,g$o,Y_,qpe,h$o,u$o,RV,p$o,_$o,b$o,K_,jpe,v$o,F$o,PV,T$o,M$o,E$o,Z_,Dpe,C$o,w$o,BV,A$o,L$o,y$o,eb,Gpe,x$o,$$o,IV,k$o,S$o,R$o,ob,Ope,P$o,B$o,NV,I$o,N$o,q$o,rb,Vpe,j$o,D$o,qV,G$o,O$o,V$o,tb,Xpe,X$o,z$o,jV,Q$o,W$o,U$o,ab,zpe,H$o,J$o,DV,Y$o,K$o,Z$o,nb,Qpe,eko,oko,GV,rko,tko,ako,sb,Wpe,nko,sko,OV,lko,iko,dko,lb,Upe,cko,mko,VV,fko,gko,hko,ib,Hpe,uko,pko,XV,_ko,bko,vko,db,Jpe,Fko,Tko,zV,Mko,Eko,Cko,cb,Ype,wko,Ako,QV,Lko,yko,xko,mb,Kpe,$ko,kko,WV,Sko,Rko,Pko,fb,Zpe,Bko,Iko,UV,Nko,qko,jko,gb,e_e,Dko,Gko,HV,Oko,Vko,Xko,hb,o_e,zko,Qko,JV,Wko,Uko,Hko,ub,r_e,Jko,Yko,YV,Kko,Zko,eSo,pb,t_e,oSo,rSo,KV,tSo,aSo,nSo,_b,a_e,sSo,lSo,ZV,iSo,dSo,cSo,bb,n_e,mSo,fSo,eX,gSo,hSo,uSo,vb,s_e,pSo,_So,oX,bSo,vSo,FSo,Fb,l_e,TSo,MSo,rX,ESo,CSo,wSo,Tb,i_e,ASo,LSo,tX,ySo,xSo,$So,Mb,d_e,kSo,SSo,aX,RSo,PSo,BSo,Eb,c_e,ISo,NSo,nX,qSo,jSo,DSo,Cb,m_e,GSo,OSo,sX,VSo,XSo,zSo,wb,f_e,QSo,WSo,lX,USo,HSo,JSo,Ab,g_e,YSo,KSo,iX,ZSo,eRo,oRo,Lb,h_e,rRo,tRo,dX,aRo,nRo,sRo,yb,u_e,lRo,iRo,cX,dRo,cRo,mRo,xb,p_e,fRo,gRo,mX,hRo,uRo,pRo,$b,__e,_Ro,bRo,fX,vRo,FRo,TRo,kb,b_e,MRo,ERo,gX,CRo,wRo,ARo,Sb,v_e,LRo,yRo,hX,xRo,$Ro,kRo,Rb,F_e,SRo,RRo,uX,PRo,BRo,IRo,Pb,T_e,NRo,qRo,pX,jRo,DRo,GRo,Bb,M_e,ORo,VRo,_X,XRo,zRo,QRo,Ib,E_e,WRo,URo,bX,HRo,JRo,YRo,Nb,C_e,KRo,ZRo,vX,ePo,oPo,rPo,qb,w_e,tPo,aPo,FX,nPo,sPo,lPo,jb,A_e,iPo,dPo,TX,cPo,mPo,fPo,Db,L_e,gPo,hPo,MX,uPo,pPo,_Po,Gb,y_e,bPo,vPo,EX,FPo,TPo,MPo,Ob,x_e,EPo,CPo,CX,wPo,APo,LPo,Vb,$_e,yPo,xPo,wX,$Po,kPo,SPo,Xb,k_e,RPo,PPo,AX,BPo,IPo,NPo,zb,S_e,qPo,jPo,LX,DPo,GPo,OPo,Qb,R_e,VPo,XPo,yX,zPo,QPo,WPo,Wb,P_e,UPo,HPo,xX,JPo,YPo,KPo,Ub,B_e,ZPo,eBo,$X,oBo,rBo,tBo,Hb,I_e,aBo,nBo,kX,sBo,lBo,iBo,Jb,N_e,dBo,cBo,SX,mBo,fBo,gBo,Yb,q_e,hBo,uBo,RX,pBo,_Bo,bBo,Kb,j_e,vBo,FBo,PX,TBo,MBo,EBo,Zb,D_e,CBo,wBo,BX,ABo,LBo,yBo,e2,G_e,xBo,$Bo,IX,kBo,SBo,RBo,o2,O_e,PBo,BBo,NX,IBo,NBo,qBo,r2,V_e,jBo,DBo,qX,GBo,OBo,VBo,t2,X_e,XBo,zBo,jX,QBo,WBo,UBo,a2,z_e,HBo,JBo,DX,YBo,KBo,ZBo,n2,Q_e,eIo,oIo,GX,rIo,tIo,aIo,s2,W_e,nIo,sIo,OX,lIo,iIo,dIo,l2,U_e,cIo,mIo,VX,fIo,gIo,hIo,i2,H_e,uIo,pIo,XX,_Io,bIo,vIo,d2,J_e,FIo,TIo,zX,MIo,EIo,CIo,c2,Y_e,wIo,AIo,QX,LIo,yIo,xIo,m2,K_e,$Io,kIo,WX,SIo,RIo,PIo,f2,Z_e,BIo,IIo,UX,NIo,qIo,jIo,g2,ebe,DIo,GIo,HX,OIo,VIo,XIo,h2,obe,zIo,QIo,JX,WIo,UIo,HIo,u2,JIo,rbe,YIo,KIo,tbe,ZIo,eNo,p2,lZe,Fd,_2,abe,vx,oNo,nbe,rNo,iZe,Bo,Fx,tNo,Td,aNo,YX,nNo,sNo,KX,lNo,iNo,dNo,Tx,cNo,sbe,mNo,fNo,gNo,bt,Mx,hNo,lbe,uNo,pNo,Md,_No,ibe,bNo,vNo,ZX,FNo,TNo,MNo,b2,ENo,eo,Ex,CNo,dbe,wNo,ANo,Ya,LNo,cbe,yNo,xNo,mbe,$No,kNo,fbe,SNo,RNo,PNo,G,v2,gbe,BNo,INo,ez,NNo,qNo,jNo,F2,hbe,DNo,GNo,oz,ONo,VNo,XNo,T2,ube,zNo,QNo,rz,WNo,UNo,HNo,M2,pbe,JNo,YNo,tz,KNo,ZNo,eqo,E2,_be,oqo,rqo,az,tqo,aqo,nqo,C2,bbe,sqo,lqo,nz,iqo,dqo,cqo,w2,vbe,mqo,fqo,sz,gqo,hqo,uqo,A2,Fbe,pqo,_qo,lz,bqo,vqo,Fqo,L2,Tbe,Tqo,Mqo,iz,Eqo,Cqo,wqo,y2,Mbe,Aqo,Lqo,dz,yqo,xqo,$qo,x2,Ebe,kqo,Sqo,cz,Rqo,Pqo,Bqo,$2,Cbe,Iqo,Nqo,mz,qqo,jqo,Dqo,k2,wbe,Gqo,Oqo,fz,Vqo,Xqo,zqo,S2,Abe,Qqo,Wqo,gz,Uqo,Hqo,Jqo,R2,Lbe,Yqo,Kqo,hz,Zqo,ejo,ojo,P2,ybe,rjo,tjo,uz,ajo,njo,sjo,B2,xbe,ljo,ijo,pz,djo,cjo,mjo,I2,$be,fjo,gjo,_z,hjo,ujo,pjo,N2,kbe,_jo,bjo,bz,vjo,Fjo,Tjo,q2,Sbe,Mjo,Ejo,vz,Cjo,wjo,Ajo,j2,Rbe,Ljo,yjo,Fz,xjo,$jo,kjo,D2,Pbe,Sjo,Rjo,Tz,Pjo,Bjo,Ijo,G2,Bbe,Njo,qjo,Mz,jjo,Djo,Gjo,O2,Ibe,Ojo,Vjo,Ez,Xjo,zjo,Qjo,V2,Nbe,Wjo,Ujo,Cz,Hjo,Jjo,Yjo,X2,qbe,Kjo,Zjo,wz,eDo,oDo,rDo,z2,jbe,tDo,aDo,Az,nDo,sDo,lDo,Q2,Dbe,iDo,dDo,Lz,cDo,mDo,fDo,W2,Gbe,gDo,hDo,yz,uDo,pDo,_Do,U2,Obe,bDo,vDo,xz,FDo,TDo,MDo,H2,Vbe,EDo,CDo,$z,wDo,ADo,LDo,J2,Xbe,yDo,xDo,kz,$Do,kDo,SDo,Y2,zbe,RDo,PDo,Sz,BDo,IDo,NDo,K2,Qbe,qDo,jDo,Rz,DDo,GDo,ODo,Z2,Wbe,VDo,XDo,Pz,zDo,QDo,WDo,e1,Ube,UDo,HDo,Bz,JDo,YDo,KDo,o1,Hbe,ZDo,eGo,Iz,oGo,rGo,tGo,r1,Jbe,aGo,nGo,Nz,sGo,lGo,iGo,t1,Ybe,dGo,cGo,qz,mGo,fGo,gGo,a1,Kbe,hGo,uGo,jz,pGo,_Go,bGo,n1,Zbe,vGo,FGo,Dz,TGo,MGo,EGo,s1,e2e,CGo,wGo,Gz,AGo,LGo,yGo,l1,o2e,xGo,$Go,Oz,kGo,SGo,RGo,i1,r2e,PGo,BGo,Vz,IGo,NGo,qGo,d1,t2e,jGo,DGo,Xz,GGo,OGo,VGo,c1,a2e,XGo,zGo,zz,QGo,WGo,UGo,m1,n2e,HGo,JGo,Qz,YGo,KGo,ZGo,f1,s2e,eOo,oOo,Wz,rOo,tOo,aOo,g1,nOo,l2e,sOo,lOo,i2e,iOo,dOo,h1,dZe,Ed,u1,d2e,Cx,cOo,c2e,mOo,cZe,Io,wx,fOo,Cd,gOo,Uz,hOo,uOo,Hz,pOo,_Oo,bOo,Ax,vOo,m2e,FOo,TOo,MOo,vt,Lx,EOo,f2e,COo,wOo,wd,AOo,g2e,LOo,yOo,Jz,xOo,$Oo,kOo,p1,SOo,oo,yx,ROo,h2e,POo,BOo,Ka,IOo,u2e,NOo,qOo,p2e,jOo,DOo,_2e,GOo,OOo,VOo,Q,_1,b2e,XOo,zOo,Yz,QOo,WOo,UOo,b1,v2e,HOo,JOo,Kz,YOo,KOo,ZOo,v1,F2e,eVo,oVo,Zz,rVo,tVo,aVo,F1,T2e,nVo,sVo,eQ,lVo,iVo,dVo,T1,M2e,cVo,mVo,oQ,fVo,gVo,hVo,M1,E2e,uVo,pVo,rQ,_Vo,bVo,vVo,E1,C2e,FVo,TVo,tQ,MVo,EVo,CVo,C1,w2e,wVo,AVo,aQ,LVo,yVo,xVo,w1,A2e,$Vo,kVo,nQ,SVo,RVo,PVo,A1,L2e,BVo,IVo,sQ,NVo,qVo,jVo,L1,y2e,DVo,GVo,lQ,OVo,VVo,XVo,y1,x2e,zVo,QVo,iQ,WVo,UVo,HVo,x1,$2e,JVo,YVo,dQ,KVo,ZVo,eXo,$1,k2e,oXo,rXo,cQ,tXo,aXo,nXo,k1,S2e,sXo,lXo,mQ,iXo,dXo,cXo,S1,R2e,mXo,fXo,fQ,gXo,hXo,uXo,R1,P2e,pXo,_Xo,gQ,bXo,vXo,FXo,P1,B2e,TXo,MXo,hQ,EXo,CXo,wXo,B1,I2e,AXo,LXo,uQ,yXo,xXo,$Xo,I1,N2e,kXo,SXo,pQ,RXo,PXo,BXo,N1,q2e,IXo,NXo,_Q,qXo,jXo,DXo,q1,j2e,GXo,OXo,bQ,VXo,XXo,zXo,j1,D2e,QXo,WXo,vQ,UXo,HXo,JXo,D1,G2e,YXo,KXo,FQ,ZXo,ezo,ozo,G1,O2e,rzo,tzo,TQ,azo,nzo,szo,O1,V2e,lzo,izo,MQ,dzo,czo,mzo,V1,X2e,fzo,gzo,EQ,hzo,uzo,pzo,X1,z2e,_zo,bzo,CQ,vzo,Fzo,Tzo,z1,Q2e,Mzo,Ezo,wQ,Czo,wzo,Azo,Q1,W2e,Lzo,yzo,AQ,xzo,$zo,kzo,W1,U2e,Szo,Rzo,LQ,Pzo,Bzo,Izo,U1,H2e,Nzo,qzo,yQ,jzo,Dzo,Gzo,H1,J2e,Ozo,Vzo,xQ,Xzo,zzo,Qzo,J1,Y2e,Wzo,Uzo,$Q,Hzo,Jzo,Yzo,Y1,K2e,Kzo,Zzo,kQ,eQo,oQo,rQo,K1,Z2e,tQo,aQo,SQ,nQo,sQo,lQo,Z1,e1e,iQo,dQo,RQ,cQo,mQo,fQo,ev,o1e,gQo,hQo,PQ,uQo,pQo,_Qo,ov,r1e,bQo,vQo,BQ,FQo,TQo,MQo,rv,t1e,EQo,CQo,IQ,wQo,AQo,LQo,tv,a1e,yQo,xQo,NQ,$Qo,kQo,SQo,av,n1e,RQo,PQo,qQ,BQo,IQo,NQo,nv,qQo,s1e,jQo,DQo,l1e,GQo,OQo,sv,mZe,Ad,lv,i1e,xx,VQo,d1e,XQo,fZe,No,$x,zQo,Ld,QQo,jQ,WQo,UQo,DQ,HQo,JQo,YQo,kx,KQo,c1e,ZQo,eWo,oWo,Ft,Sx,rWo,m1e,tWo,aWo,yd,nWo,f1e,sWo,lWo,GQ,iWo,dWo,cWo,iv,mWo,ro,Rx,fWo,g1e,gWo,hWo,Za,uWo,h1e,pWo,_Wo,u1e,bWo,vWo,p1e,FWo,TWo,MWo,H,dv,_1e,EWo,CWo,OQ,wWo,AWo,LWo,cv,b1e,yWo,xWo,VQ,$Wo,kWo,SWo,mv,v1e,RWo,PWo,XQ,BWo,IWo,NWo,fv,F1e,qWo,jWo,zQ,DWo,GWo,OWo,gv,T1e,VWo,XWo,QQ,zWo,QWo,WWo,hv,M1e,UWo,HWo,WQ,JWo,YWo,KWo,uv,E1e,ZWo,eUo,UQ,oUo,rUo,tUo,pv,C1e,aUo,nUo,HQ,sUo,lUo,iUo,_v,w1e,dUo,cUo,JQ,mUo,fUo,gUo,bv,A1e,hUo,uUo,YQ,pUo,_Uo,bUo,vv,L1e,vUo,FUo,KQ,TUo,MUo,EUo,Fv,y1e,CUo,wUo,ZQ,AUo,LUo,yUo,Tv,x1e,xUo,$Uo,eW,kUo,SUo,RUo,Mv,$1e,PUo,BUo,oW,IUo,NUo,qUo,Ev,k1e,jUo,DUo,rW,GUo,OUo,VUo,Cv,S1e,XUo,zUo,tW,QUo,WUo,UUo,wv,R1e,HUo,JUo,aW,YUo,KUo,ZUo,Av,P1e,eHo,oHo,nW,rHo,tHo,aHo,Lv,B1e,nHo,sHo,sW,lHo,iHo,dHo,yv,I1e,cHo,mHo,lW,fHo,gHo,hHo,xv,N1e,uHo,pHo,iW,_Ho,bHo,vHo,$v,q1e,FHo,THo,dW,MHo,EHo,CHo,kv,j1e,wHo,AHo,cW,LHo,yHo,xHo,Sv,D1e,$Ho,kHo,mW,SHo,RHo,PHo,Rv,G1e,BHo,IHo,fW,NHo,qHo,jHo,Pv,O1e,DHo,GHo,gW,OHo,VHo,XHo,Bv,V1e,zHo,QHo,hW,WHo,UHo,HHo,Iv,X1e,JHo,YHo,uW,KHo,ZHo,eJo,Nv,z1e,oJo,rJo,pW,tJo,aJo,nJo,qv,Q1e,sJo,lJo,_W,iJo,dJo,cJo,jv,W1e,mJo,fJo,bW,gJo,hJo,uJo,Dv,U1e,pJo,_Jo,vW,bJo,vJo,FJo,Gv,H1e,TJo,MJo,FW,EJo,CJo,wJo,Ov,J1e,AJo,LJo,TW,yJo,xJo,$Jo,Vv,Y1e,kJo,SJo,K1e,RJo,PJo,BJo,Xv,Z1e,IJo,NJo,MW,qJo,jJo,DJo,zv,eve,GJo,OJo,EW,VJo,XJo,zJo,Qv,ove,QJo,WJo,CW,UJo,HJo,JJo,Wv,rve,YJo,KJo,wW,ZJo,eYo,oYo,Uv,rYo,tve,tYo,aYo,ave,nYo,sYo,Hv,gZe,xd,Jv,nve,Px,lYo,sve,iYo,hZe,qo,Bx,dYo,$d,cYo,AW,mYo,fYo,LW,gYo,hYo,uYo,Ix,pYo,lve,_Yo,bYo,vYo,Tt,Nx,FYo,ive,TYo,MYo,kd,EYo,dve,CYo,wYo,yW,AYo,LYo,yYo,Yv,xYo,to,qx,$Yo,cve,kYo,SYo,en,RYo,mve,PYo,BYo,fve,IYo,NYo,gve,qYo,jYo,DYo,me,Kv,hve,GYo,OYo,xW,VYo,XYo,zYo,Zv,uve,QYo,WYo,$W,UYo,HYo,JYo,eF,pve,YYo,KYo,kW,ZYo,eKo,oKo,oF,_ve,rKo,tKo,SW,aKo,nKo,sKo,rF,bve,lKo,iKo,RW,dKo,cKo,mKo,tF,vve,fKo,gKo,PW,hKo,uKo,pKo,aF,Fve,_Ko,bKo,BW,vKo,FKo,TKo,nF,Tve,MKo,EKo,IW,CKo,wKo,AKo,sF,Mve,LKo,yKo,NW,xKo,$Ko,kKo,lF,Eve,SKo,RKo,qW,PKo,BKo,IKo,iF,Cve,NKo,qKo,jW,jKo,DKo,GKo,dF,wve,OKo,VKo,DW,XKo,zKo,QKo,cF,Ave,WKo,UKo,GW,HKo,JKo,YKo,mF,Lve,KKo,ZKo,OW,eZo,oZo,rZo,fF,yve,tZo,aZo,VW,nZo,sZo,lZo,gF,xve,iZo,dZo,XW,cZo,mZo,fZo,hF,$ve,gZo,hZo,zW,uZo,pZo,_Zo,uF,kve,bZo,vZo,QW,FZo,TZo,MZo,pF,Sve,EZo,CZo,WW,wZo,AZo,LZo,_F,Rve,yZo,xZo,UW,$Zo,kZo,SZo,bF,RZo,Pve,PZo,BZo,Bve,IZo,NZo,vF,uZe,Sd,FF,Ive,jx,qZo,Nve,jZo,pZe,jo,Dx,DZo,Rd,GZo,HW,OZo,VZo,JW,XZo,zZo,QZo,Gx,WZo,qve,UZo,HZo,JZo,Mt,Ox,YZo,jve,KZo,ZZo,Pd,eer,Dve,oer,rer,YW,ter,aer,ner,TF,ser,ao,Vx,ler,Gve,ier,der,on,cer,Ove,mer,fer,Vve,ger,her,Xve,uer,per,_er,j,MF,zve,ber,ver,KW,Fer,Ter,Mer,EF,Qve,Eer,Cer,ZW,wer,Aer,Ler,CF,Wve,yer,xer,eU,$er,ker,Ser,wF,Uve,Rer,Per,oU,Ber,Ier,Ner,AF,Hve,qer,jer,rU,Der,Ger,Oer,LF,Jve,Ver,Xer,tU,zer,Qer,Wer,yF,Yve,Uer,Her,aU,Jer,Yer,Ker,xF,Kve,Zer,eor,nU,oor,ror,tor,$F,Zve,aor,nor,sU,sor,lor,ior,kF,eFe,dor,cor,lU,mor,gor,hor,SF,oFe,uor,por,iU,_or,bor,vor,RF,rFe,For,Tor,dU,Mor,Eor,Cor,PF,tFe,wor,Aor,cU,Lor,yor,xor,BF,aFe,$or,kor,mU,Sor,Ror,Por,IF,nFe,Bor,Ior,fU,Nor,qor,jor,NF,sFe,Dor,Gor,gU,Oor,Vor,Xor,qF,lFe,zor,Qor,hU,Wor,Uor,Hor,jF,iFe,Jor,Yor,uU,Kor,Zor,err,DF,dFe,orr,rrr,pU,trr,arr,nrr,GF,cFe,srr,lrr,_U,irr,drr,crr,OF,mFe,mrr,frr,bU,grr,hrr,urr,VF,fFe,prr,_rr,vU,brr,vrr,Frr,XF,gFe,Trr,Mrr,FU,Err,Crr,wrr,zF,hFe,Arr,Lrr,TU,yrr,xrr,$rr,QF,uFe,krr,Srr,MU,Rrr,Prr,Brr,WF,pFe,Irr,Nrr,EU,qrr,jrr,Drr,UF,_Fe,Grr,Orr,CU,Vrr,Xrr,zrr,HF,bFe,Qrr,Wrr,wU,Urr,Hrr,Jrr,JF,vFe,Yrr,Krr,AU,Zrr,etr,otr,YF,FFe,rtr,ttr,LU,atr,ntr,str,KF,TFe,ltr,itr,yU,dtr,ctr,mtr,ZF,MFe,ftr,gtr,xU,htr,utr,ptr,eT,EFe,_tr,btr,$U,vtr,Ftr,Ttr,oT,CFe,Mtr,Etr,kU,Ctr,wtr,Atr,rT,wFe,Ltr,ytr,SU,xtr,$tr,ktr,tT,AFe,Str,Rtr,RU,Ptr,Btr,Itr,aT,LFe,Ntr,qtr,PU,jtr,Dtr,Gtr,nT,yFe,Otr,Vtr,BU,Xtr,ztr,Qtr,sT,xFe,Wtr,Utr,IU,Htr,Jtr,Ytr,lT,$Fe,Ktr,Ztr,NU,ear,oar,rar,iT,kFe,tar,aar,qU,nar,sar,lar,dT,SFe,iar,dar,jU,car,mar,far,cT,RFe,gar,har,DU,uar,par,_ar,mT,PFe,bar,Far,GU,Tar,Mar,Ear,fT,BFe,Car,war,OU,Aar,Lar,yar,gT,IFe,xar,$ar,VU,kar,Sar,Rar,hT,NFe,Par,Bar,XU,Iar,Nar,qar,uT,qFe,jar,Dar,zU,Gar,Oar,Var,pT,jFe,Xar,zar,QU,Qar,War,Uar,_T,DFe,Har,Jar,WU,Yar,Kar,Zar,bT,GFe,enr,onr,UU,rnr,tnr,anr,vT,OFe,nnr,snr,HU,lnr,inr,dnr,FT,VFe,cnr,mnr,JU,fnr,gnr,hnr,TT,unr,XFe,pnr,_nr,zFe,bnr,vnr,MT,_Ze,Bd,ET,QFe,Xx,Fnr,WFe,Tnr,bZe,Do,zx,Mnr,Id,Enr,YU,Cnr,wnr,KU,Anr,Lnr,ynr,Qx,xnr,UFe,$nr,knr,Snr,Et,Wx,Rnr,HFe,Pnr,Bnr,Nd,Inr,JFe,Nnr,qnr,ZU,jnr,Dnr,Gnr,CT,Onr,no,Ux,Vnr,YFe,Xnr,znr,rn,Qnr,KFe,Wnr,Unr,ZFe,Hnr,Jnr,eTe,Ynr,Knr,Znr,Z,wT,oTe,esr,osr,eH,rsr,tsr,asr,AT,rTe,nsr,ssr,oH,lsr,isr,dsr,LT,tTe,csr,msr,rH,fsr,gsr,hsr,yT,aTe,usr,psr,tH,_sr,bsr,vsr,xT,nTe,Fsr,Tsr,aH,Msr,Esr,Csr,$T,sTe,wsr,Asr,nH,Lsr,ysr,xsr,kT,lTe,$sr,ksr,sH,Ssr,Rsr,Psr,ST,iTe,Bsr,Isr,lH,Nsr,qsr,jsr,RT,dTe,Dsr,Gsr,iH,Osr,Vsr,Xsr,PT,cTe,zsr,Qsr,dH,Wsr,Usr,Hsr,BT,mTe,Jsr,Ysr,cH,Ksr,Zsr,elr,IT,fTe,olr,rlr,mH,tlr,alr,nlr,NT,gTe,slr,llr,fH,ilr,dlr,clr,qT,hTe,mlr,flr,gH,glr,hlr,ulr,jT,uTe,plr,_lr,hH,blr,vlr,Flr,DT,pTe,Tlr,Mlr,uH,Elr,Clr,wlr,GT,_Te,Alr,Llr,pH,ylr,xlr,$lr,OT,bTe,klr,Slr,_H,Rlr,Plr,Blr,VT,vTe,Ilr,Nlr,bH,qlr,jlr,Dlr,XT,FTe,Glr,Olr,vH,Vlr,Xlr,zlr,zT,TTe,Qlr,Wlr,FH,Ulr,Hlr,Jlr,QT,MTe,Ylr,Klr,TH,Zlr,eir,oir,WT,ETe,rir,tir,MH,air,nir,sir,UT,CTe,lir,iir,EH,dir,cir,mir,HT,wTe,fir,gir,CH,hir,uir,pir,JT,ATe,_ir,bir,wH,vir,Fir,Tir,YT,LTe,Mir,Eir,AH,Cir,wir,Air,KT,yTe,Lir,yir,LH,xir,$ir,kir,ZT,xTe,Sir,Rir,yH,Pir,Bir,Iir,eM,$Te,Nir,qir,xH,jir,Dir,Gir,oM,kTe,Oir,Vir,$H,Xir,zir,Qir,rM,STe,Wir,Uir,kH,Hir,Jir,Yir,tM,Kir,RTe,Zir,edr,PTe,odr,rdr,aM,vZe,qd,nM,BTe,Hx,tdr,ITe,adr,FZe,Go,Jx,ndr,jd,sdr,SH,ldr,idr,RH,ddr,cdr,mdr,Yx,fdr,NTe,gdr,hdr,udr,Ct,Kx,pdr,qTe,_dr,bdr,Dd,vdr,jTe,Fdr,Tdr,PH,Mdr,Edr,Cdr,sM,wdr,so,Zx,Adr,DTe,Ldr,ydr,tn,xdr,GTe,$dr,kdr,OTe,Sdr,Rdr,VTe,Pdr,Bdr,Idr,Ue,lM,XTe,Ndr,qdr,BH,jdr,Ddr,Gdr,iM,zTe,Odr,Vdr,IH,Xdr,zdr,Qdr,dM,QTe,Wdr,Udr,NH,Hdr,Jdr,Ydr,cM,WTe,Kdr,Zdr,qH,ecr,ocr,rcr,mM,UTe,tcr,acr,jH,ncr,scr,lcr,fM,HTe,icr,dcr,DH,ccr,mcr,fcr,gM,JTe,gcr,hcr,GH,ucr,pcr,_cr,hM,bcr,YTe,vcr,Fcr,KTe,Tcr,Mcr,uM,TZe,Gd,pM,ZTe,e$,Ecr,eMe,Ccr,MZe,Oo,o$,wcr,Od,Acr,OH,Lcr,ycr,VH,xcr,$cr,kcr,r$,Scr,oMe,Rcr,Pcr,Bcr,wt,t$,Icr,rMe,Ncr,qcr,Vd,jcr,tMe,Dcr,Gcr,XH,Ocr,Vcr,Xcr,_M,zcr,lo,a$,Qcr,aMe,Wcr,Ucr,an,Hcr,nMe,Jcr,Ycr,sMe,Kcr,Zcr,lMe,emr,omr,rmr,J,bM,iMe,tmr,amr,zH,nmr,smr,lmr,vM,dMe,imr,dmr,QH,cmr,mmr,fmr,FM,cMe,gmr,hmr,WH,umr,pmr,_mr,TM,mMe,bmr,vmr,UH,Fmr,Tmr,Mmr,MM,fMe,Emr,Cmr,HH,wmr,Amr,Lmr,EM,gMe,ymr,xmr,JH,$mr,kmr,Smr,CM,hMe,Rmr,Pmr,YH,Bmr,Imr,Nmr,wM,uMe,qmr,jmr,KH,Dmr,Gmr,Omr,AM,pMe,Vmr,Xmr,ZH,zmr,Qmr,Wmr,LM,_Me,Umr,Hmr,eJ,Jmr,Ymr,Kmr,yM,bMe,Zmr,efr,oJ,ofr,rfr,tfr,xM,vMe,afr,nfr,rJ,sfr,lfr,ifr,$M,FMe,dfr,cfr,tJ,mfr,ffr,gfr,kM,TMe,hfr,ufr,aJ,pfr,_fr,bfr,SM,MMe,vfr,Ffr,nJ,Tfr,Mfr,Efr,RM,EMe,Cfr,wfr,sJ,Afr,Lfr,yfr,PM,CMe,xfr,$fr,lJ,kfr,Sfr,Rfr,BM,wMe,Pfr,Bfr,iJ,Ifr,Nfr,qfr,IM,AMe,jfr,Dfr,dJ,Gfr,Ofr,Vfr,NM,LMe,Xfr,zfr,cJ,Qfr,Wfr,Ufr,qM,yMe,Hfr,Jfr,mJ,Yfr,Kfr,Zfr,jM,xMe,egr,ogr,fJ,rgr,tgr,agr,DM,$Me,ngr,sgr,gJ,lgr,igr,dgr,GM,kMe,cgr,mgr,hJ,fgr,ggr,hgr,OM,SMe,ugr,pgr,uJ,_gr,bgr,vgr,VM,RMe,Fgr,Tgr,pJ,Mgr,Egr,Cgr,XM,PMe,wgr,Agr,_J,Lgr,ygr,xgr,zM,BMe,$gr,kgr,bJ,Sgr,Rgr,Pgr,QM,IMe,Bgr,Igr,vJ,Ngr,qgr,jgr,WM,NMe,Dgr,Ggr,FJ,Ogr,Vgr,Xgr,UM,qMe,zgr,Qgr,TJ,Wgr,Ugr,Hgr,HM,jMe,Jgr,Ygr,MJ,Kgr,Zgr,ehr,JM,DMe,ohr,rhr,EJ,thr,ahr,nhr,YM,GMe,shr,lhr,CJ,ihr,dhr,chr,KM,OMe,mhr,fhr,wJ,ghr,hhr,uhr,ZM,VMe,phr,_hr,AJ,bhr,vhr,Fhr,eE,XMe,Thr,Mhr,LJ,Ehr,Chr,whr,oE,zMe,Ahr,Lhr,yJ,yhr,xhr,$hr,rE,khr,QMe,Shr,Rhr,WMe,Phr,Bhr,tE,EZe,Xd,aE,UMe,n$,Ihr,HMe,Nhr,CZe,Vo,s$,qhr,zd,jhr,xJ,Dhr,Ghr,$J,Ohr,Vhr,Xhr,l$,zhr,JMe,Qhr,Whr,Uhr,At,i$,Hhr,YMe,Jhr,Yhr,Qd,Khr,KMe,Zhr,eur,kJ,our,rur,tur,nE,aur,io,d$,nur,ZMe,sur,lur,nn,iur,eEe,dur,cur,oEe,mur,fur,rEe,gur,hur,uur,V,sE,tEe,pur,_ur,SJ,bur,vur,Fur,lE,aEe,Tur,Mur,RJ,Eur,Cur,wur,iE,nEe,Aur,Lur,PJ,yur,xur,$ur,dE,sEe,kur,Sur,BJ,Rur,Pur,Bur,cE,lEe,Iur,Nur,IJ,qur,jur,Dur,mE,iEe,Gur,Our,NJ,Vur,Xur,zur,fE,dEe,Qur,Wur,qJ,Uur,Hur,Jur,gE,cEe,Yur,Kur,jJ,Zur,epr,opr,hE,mEe,rpr,tpr,DJ,apr,npr,spr,uE,fEe,lpr,ipr,GJ,dpr,cpr,mpr,pE,gEe,fpr,gpr,OJ,hpr,upr,ppr,_E,hEe,_pr,bpr,VJ,vpr,Fpr,Tpr,bE,uEe,Mpr,Epr,XJ,Cpr,wpr,Apr,vE,pEe,Lpr,ypr,zJ,xpr,$pr,kpr,FE,_Ee,Spr,Rpr,QJ,Ppr,Bpr,Ipr,TE,bEe,Npr,qpr,WJ,jpr,Dpr,Gpr,ME,vEe,Opr,Vpr,UJ,Xpr,zpr,Qpr,EE,FEe,Wpr,Upr,HJ,Hpr,Jpr,Ypr,CE,TEe,Kpr,Zpr,JJ,e_r,o_r,r_r,wE,MEe,t_r,a_r,YJ,n_r,s_r,l_r,AE,EEe,i_r,d_r,KJ,c_r,m_r,f_r,LE,CEe,g_r,h_r,ZJ,u_r,p_r,__r,yE,wEe,b_r,v_r,eY,F_r,T_r,M_r,xE,AEe,E_r,C_r,oY,w_r,A_r,L_r,$E,LEe,y_r,x_r,rY,$_r,k_r,S_r,kE,yEe,R_r,P_r,tY,B_r,I_r,N_r,SE,xEe,q_r,j_r,aY,D_r,G_r,O_r,RE,$Ee,V_r,X_r,nY,z_r,Q_r,W_r,PE,kEe,U_r,H_r,sY,J_r,Y_r,K_r,BE,SEe,Z_r,ebr,lY,obr,rbr,tbr,IE,REe,abr,nbr,iY,sbr,lbr,ibr,NE,PEe,dbr,cbr,dY,mbr,fbr,gbr,qE,BEe,hbr,ubr,cY,pbr,_br,bbr,jE,IEe,vbr,Fbr,mY,Tbr,Mbr,Ebr,DE,NEe,Cbr,wbr,fY,Abr,Lbr,ybr,GE,qEe,xbr,$br,gY,kbr,Sbr,Rbr,OE,jEe,Pbr,Bbr,hY,Ibr,Nbr,qbr,VE,DEe,jbr,Dbr,uY,Gbr,Obr,Vbr,XE,GEe,Xbr,zbr,pY,Qbr,Wbr,Ubr,zE,OEe,Hbr,Jbr,_Y,Ybr,Kbr,Zbr,QE,VEe,e2r,o2r,bY,r2r,t2r,a2r,WE,XEe,n2r,s2r,vY,l2r,i2r,d2r,UE,zEe,c2r,m2r,FY,f2r,g2r,h2r,HE,QEe,u2r,p2r,TY,_2r,b2r,v2r,JE,F2r,WEe,T2r,M2r,UEe,E2r,C2r,YE,wZe,Wd,KE,HEe,c$,w2r,JEe,A2r,AZe,Xo,m$,L2r,Ud,y2r,MY,x2r,$2r,EY,k2r,S2r,R2r,f$,P2r,YEe,B2r,I2r,N2r,Lt,g$,q2r,KEe,j2r,D2r,Hd,G2r,ZEe,O2r,V2r,CY,X2r,z2r,Q2r,ZE,W2r,co,h$,U2r,e4e,H2r,J2r,sn,Y2r,o4e,K2r,Z2r,r4e,e1r,o1r,t4e,r1r,t1r,a1r,a4e,e4,n4e,n1r,s1r,wY,l1r,i1r,d1r,o4,c1r,s4e,m1r,f1r,l4e,g1r,h1r,r4,LZe,Jd,t4,i4e,u$,u1r,d4e,p1r,yZe,zo,p$,_1r,Yd,b1r,AY,v1r,F1r,LY,T1r,M1r,E1r,_$,C1r,c4e,w1r,A1r,L1r,yt,b$,y1r,m4e,x1r,$1r,Kd,k1r,f4e,S1r,R1r,yY,P1r,B1r,I1r,a4,N1r,mo,v$,q1r,g4e,j1r,D1r,ln,G1r,h4e,O1r,V1r,u4e,X1r,z1r,p4e,Q1r,W1r,U1r,Zd,n4,_4e,H1r,J1r,xY,Y1r,K1r,Z1r,s4,b4e,evr,ovr,$Y,rvr,tvr,avr,l4,v4e,nvr,svr,kY,lvr,ivr,dvr,i4,cvr,F4e,mvr,fvr,T4e,gvr,hvr,d4,xZe,ec,c4,M4e,F$,uvr,E4e,pvr,$Ze,Qo,T$,_vr,oc,bvr,SY,vvr,Fvr,RY,Tvr,Mvr,Evr,M$,Cvr,C4e,wvr,Avr,Lvr,xt,E$,yvr,w4e,xvr,$vr,rc,kvr,A4e,Svr,Rvr,PY,Pvr,Bvr,Ivr,m4,Nvr,fo,C$,qvr,L4e,jvr,Dvr,dn,Gvr,y4e,Ovr,Vvr,x4e,Xvr,zvr,$4e,Qvr,Wvr,Uvr,be,f4,k4e,Hvr,Jvr,BY,Yvr,Kvr,Zvr,g4,S4e,eFr,oFr,IY,rFr,tFr,aFr,h4,R4e,nFr,sFr,NY,lFr,iFr,dFr,u4,P4e,cFr,mFr,qY,fFr,gFr,hFr,bl,B4e,uFr,pFr,jY,_Fr,bFr,DY,vFr,FFr,TFr,p4,I4e,MFr,EFr,GY,CFr,wFr,AFr,vl,N4e,LFr,yFr,OY,xFr,$Fr,VY,kFr,SFr,RFr,_4,q4e,PFr,BFr,XY,IFr,NFr,qFr,$t,j4e,jFr,DFr,zY,GFr,OFr,QY,VFr,XFr,WY,zFr,QFr,WFr,b4,D4e,UFr,HFr,UY,JFr,YFr,KFr,v4,G4e,ZFr,eTr,HY,oTr,rTr,tTr,F4,O4e,aTr,nTr,JY,sTr,lTr,iTr,T4,V4e,dTr,cTr,YY,mTr,fTr,gTr,M4,X4e,hTr,uTr,KY,pTr,_Tr,bTr,E4,z4e,vTr,FTr,ZY,TTr,MTr,ETr,C4,Q4e,CTr,wTr,eK,ATr,LTr,yTr,w4,W4e,xTr,$Tr,oK,kTr,STr,RTr,A4,U4e,PTr,BTr,rK,ITr,NTr,qTr,L4,jTr,H4e,DTr,GTr,J4e,OTr,VTr,y4,kZe,tc,x4,Y4e,w$,XTr,K4e,zTr,SZe,Wo,A$,QTr,ac,WTr,tK,UTr,HTr,aK,JTr,YTr,KTr,L$,ZTr,Z4e,eMr,oMr,rMr,kt,y$,tMr,eCe,aMr,nMr,nc,sMr,oCe,lMr,iMr,nK,dMr,cMr,mMr,$4,fMr,go,x$,gMr,rCe,hMr,uMr,cn,pMr,tCe,_Mr,bMr,aCe,vMr,FMr,nCe,TMr,MMr,EMr,sCe,k4,lCe,CMr,wMr,sK,AMr,LMr,yMr,S4,xMr,iCe,$Mr,kMr,dCe,SMr,RMr,R4,RZe,sc,P4,cCe,$$,PMr,mCe,BMr,PZe,Uo,k$,IMr,lc,NMr,lK,qMr,jMr,iK,DMr,GMr,OMr,S$,VMr,fCe,XMr,zMr,QMr,St,R$,WMr,gCe,UMr,HMr,ic,JMr,hCe,YMr,KMr,dK,ZMr,eEr,oEr,B4,rEr,ho,P$,tEr,uCe,aEr,nEr,mn,sEr,pCe,lEr,iEr,_Ce,dEr,cEr,bCe,mEr,fEr,gEr,vCe,I4,FCe,hEr,uEr,cK,pEr,_Er,bEr,N4,vEr,TCe,FEr,TEr,MCe,MEr,EEr,q4,BZe,dc,j4,ECe,B$,CEr,CCe,wEr,IZe,Ho,I$,AEr,cc,LEr,mK,yEr,xEr,fK,$Er,kEr,SEr,N$,REr,wCe,PEr,BEr,IEr,Rt,q$,NEr,ACe,qEr,jEr,mc,DEr,LCe,GEr,OEr,gK,VEr,XEr,zEr,D4,QEr,uo,j$,WEr,yCe,UEr,HEr,fn,JEr,xCe,YEr,KEr,$Ce,ZEr,e4r,kCe,o4r,r4r,t4r,SCe,G4,RCe,a4r,n4r,hK,s4r,l4r,i4r,O4,d4r,PCe,c4r,m4r,BCe,f4r,g4r,V4,NZe,fc,X4,ICe,D$,h4r,NCe,u4r,qZe,Jo,G$,p4r,gc,_4r,uK,b4r,v4r,pK,F4r,T4r,M4r,O$,E4r,qCe,C4r,w4r,A4r,Pt,V$,L4r,jCe,y4r,x4r,hc,$4r,DCe,k4r,S4r,_K,R4r,P4r,B4r,z4,I4r,po,X$,N4r,GCe,q4r,j4r,gn,D4r,OCe,G4r,O4r,VCe,V4r,X4r,XCe,z4r,Q4r,W4r,Pe,Q4,zCe,U4r,H4r,bK,J4r,Y4r,K4r,W4,QCe,Z4r,eCr,vK,oCr,rCr,tCr,U4,WCe,aCr,nCr,FK,sCr,lCr,iCr,H4,UCe,dCr,cCr,TK,mCr,fCr,gCr,J4,HCe,hCr,uCr,MK,pCr,_Cr,bCr,Y4,JCe,vCr,FCr,EK,TCr,MCr,ECr,K4,YCe,CCr,wCr,CK,ACr,LCr,yCr,Z4,KCe,xCr,$Cr,wK,kCr,SCr,RCr,eC,ZCe,PCr,BCr,AK,ICr,NCr,qCr,oC,jCr,e3e,DCr,GCr,o3e,OCr,VCr,rC,jZe,uc,tC,r3e,z$,XCr,t3e,zCr,DZe,Yo,Q$,QCr,pc,WCr,LK,UCr,HCr,yK,JCr,YCr,KCr,W$,ZCr,a3e,e3r,o3r,r3r,Bt,U$,t3r,n3e,a3r,n3r,_c,s3r,s3e,l3r,i3r,xK,d3r,c3r,m3r,aC,f3r,_o,H$,g3r,l3e,h3r,u3r,hn,p3r,i3e,_3r,b3r,d3e,v3r,F3r,c3e,T3r,M3r,E3r,mt,nC,m3e,C3r,w3r,$K,A3r,L3r,y3r,sC,f3e,x3r,$3r,kK,k3r,S3r,R3r,lC,g3e,P3r,B3r,SK,I3r,N3r,q3r,iC,h3e,j3r,D3r,RK,G3r,O3r,V3r,dC,u3e,X3r,z3r,PK,Q3r,W3r,U3r,cC,H3r,p3e,J3r,Y3r,_3e,K3r,Z3r,mC,GZe,bc,fC,b3e,J$,e5r,v3e,o5r,OZe,Ko,Y$,r5r,vc,t5r,BK,a5r,n5r,IK,s5r,l5r,i5r,K$,d5r,F3e,c5r,m5r,f5r,It,Z$,g5r,T3e,h5r,u5r,Fc,p5r,M3e,_5r,b5r,NK,v5r,F5r,T5r,gC,M5r,bo,ek,E5r,E3e,C5r,w5r,un,A5r,C3e,L5r,y5r,w3e,x5r,$5r,A3e,k5r,S5r,R5r,Le,hC,L3e,P5r,B5r,qK,I5r,N5r,q5r,uC,y3e,j5r,D5r,jK,G5r,O5r,V5r,pC,x3e,X5r,z5r,DK,Q5r,W5r,U5r,_C,$3e,H5r,J5r,GK,Y5r,K5r,Z5r,bC,k3e,e0r,o0r,OK,r0r,t0r,a0r,vC,S3e,n0r,s0r,VK,l0r,i0r,d0r,FC,R3e,c0r,m0r,XK,f0r,g0r,h0r,TC,P3e,u0r,p0r,zK,_0r,b0r,v0r,MC,B3e,F0r,T0r,QK,M0r,E0r,C0r,EC,I3e,w0r,A0r,WK,L0r,y0r,x0r,CC,$0r,N3e,k0r,S0r,q3e,R0r,P0r,wC,VZe,Tc,AC,j3e,ok,B0r,D3e,I0r,XZe,Zo,rk,N0r,Mc,q0r,UK,j0r,D0r,HK,G0r,O0r,V0r,tk,X0r,G3e,z0r,Q0r,W0r,Nt,ak,U0r,O3e,H0r,J0r,Ec,Y0r,V3e,K0r,Z0r,JK,ewr,owr,rwr,LC,twr,vo,nk,awr,X3e,nwr,swr,pn,lwr,z3e,iwr,dwr,Q3e,cwr,mwr,W3e,fwr,gwr,hwr,sk,yC,U3e,uwr,pwr,YK,_wr,bwr,vwr,xC,H3e,Fwr,Twr,KK,Mwr,Ewr,Cwr,$C,wwr,J3e,Awr,Lwr,Y3e,ywr,xwr,kC,zZe,Cc,SC,K3e,lk,$wr,Z3e,kwr,QZe,er,ik,Swr,wc,Rwr,ZK,Pwr,Bwr,eZ,Iwr,Nwr,qwr,dk,jwr,e5e,Dwr,Gwr,Owr,qt,ck,Vwr,o5e,Xwr,zwr,Ac,Qwr,r5e,Wwr,Uwr,oZ,Hwr,Jwr,Ywr,RC,Kwr,Fo,mk,Zwr,t5e,eAr,oAr,_n,rAr,a5e,tAr,aAr,n5e,nAr,sAr,s5e,lAr,iAr,dAr,ft,PC,l5e,cAr,mAr,rZ,fAr,gAr,hAr,BC,i5e,uAr,pAr,tZ,_Ar,bAr,vAr,IC,d5e,FAr,TAr,aZ,MAr,EAr,CAr,NC,c5e,wAr,AAr,nZ,LAr,yAr,xAr,qC,m5e,$Ar,kAr,sZ,SAr,RAr,PAr,jC,BAr,f5e,IAr,NAr,g5e,qAr,jAr,DC,WZe,Lc,GC,h5e,fk,DAr,u5e,GAr,UZe,or,gk,OAr,yc,VAr,lZ,XAr,zAr,iZ,QAr,WAr,UAr,hk,HAr,p5e,JAr,YAr,KAr,jt,uk,ZAr,_5e,e6r,o6r,xc,r6r,b5e,t6r,a6r,dZ,n6r,s6r,l6r,OC,i6r,To,pk,d6r,v5e,c6r,m6r,bn,f6r,F5e,g6r,h6r,T5e,u6r,p6r,M5e,_6r,b6r,v6r,vn,VC,E5e,F6r,T6r,cZ,M6r,E6r,C6r,XC,C5e,w6r,A6r,mZ,L6r,y6r,x6r,zC,w5e,$6r,k6r,fZ,S6r,R6r,P6r,QC,A5e,B6r,I6r,gZ,N6r,q6r,j6r,WC,D6r,L5e,G6r,O6r,y5e,V6r,X6r,UC,HZe,$c,HC,x5e,_k,z6r,$5e,Q6r,JZe,rr,bk,W6r,kc,U6r,hZ,H6r,J6r,uZ,Y6r,K6r,Z6r,vk,e7r,k5e,o7r,r7r,t7r,Dt,Fk,a7r,S5e,n7r,s7r,Sc,l7r,R5e,i7r,d7r,pZ,c7r,m7r,f7r,JC,g7r,Mo,Tk,h7r,P5e,u7r,p7r,Fn,_7r,B5e,b7r,v7r,I5e,F7r,T7r,N5e,M7r,E7r,C7r,Tn,YC,q5e,w7r,A7r,_Z,L7r,y7r,x7r,KC,j5e,$7r,k7r,bZ,S7r,R7r,P7r,ZC,D5e,B7r,I7r,vZ,N7r,q7r,j7r,e3,G5e,D7r,G7r,FZ,O7r,V7r,X7r,o3,z7r,O5e,Q7r,W7r,V5e,U7r,H7r,r3,YZe,Rc,t3,X5e,Mk,J7r,z5e,Y7r,KZe,tr,Ek,K7r,Pc,Z7r,TZ,eLr,oLr,MZ,rLr,tLr,aLr,Ck,nLr,Q5e,sLr,lLr,iLr,Gt,wk,dLr,W5e,cLr,mLr,Bc,fLr,U5e,gLr,hLr,EZ,uLr,pLr,_Lr,a3,bLr,Eo,Ak,vLr,H5e,FLr,TLr,Mn,MLr,J5e,ELr,CLr,Y5e,wLr,ALr,K5e,LLr,yLr,xLr,Z5e,n3,e0e,$Lr,kLr,CZ,SLr,RLr,PLr,s3,BLr,o0e,ILr,NLr,r0e,qLr,jLr,l3,ZZe,Ic,i3,t0e,Lk,DLr,a0e,GLr,eeo,ar,yk,OLr,Nc,VLr,wZ,XLr,zLr,AZ,QLr,WLr,ULr,xk,HLr,n0e,JLr,YLr,KLr,Ot,$k,ZLr,s0e,eyr,oyr,qc,ryr,l0e,tyr,ayr,LZ,nyr,syr,lyr,d3,iyr,Co,kk,dyr,i0e,cyr,myr,En,fyr,d0e,gyr,hyr,c0e,uyr,pyr,m0e,_yr,byr,vyr,gt,c3,f0e,Fyr,Tyr,yZ,Myr,Eyr,Cyr,m3,g0e,wyr,Ayr,xZ,Lyr,yyr,xyr,f3,h0e,$yr,kyr,$Z,Syr,Ryr,Pyr,g3,u0e,Byr,Iyr,kZ,Nyr,qyr,jyr,h3,p0e,Dyr,Gyr,SZ,Oyr,Vyr,Xyr,u3,zyr,_0e,Qyr,Wyr,b0e,Uyr,Hyr,p3,oeo,jc,_3,v0e,Sk,Jyr,F0e,Yyr,reo,nr,Rk,Kyr,Dc,Zyr,RZ,e8r,o8r,PZ,r8r,t8r,a8r,Pk,n8r,T0e,s8r,l8r,i8r,Vt,Bk,d8r,M0e,c8r,m8r,Gc,f8r,E0e,g8r,h8r,BZ,u8r,p8r,_8r,b3,b8r,wo,Ik,v8r,C0e,F8r,T8r,Cn,M8r,w0e,E8r,C8r,A0e,w8r,A8r,L0e,L8r,y8r,x8r,y0e,v3,x0e,$8r,k8r,IZ,S8r,R8r,P8r,F3,B8r,$0e,I8r,N8r,k0e,q8r,j8r,T3,teo,Oc,M3,S0e,Nk,D8r,R0e,G8r,aeo,sr,qk,O8r,Vc,V8r,NZ,X8r,z8r,qZ,Q8r,W8r,U8r,jk,H8r,P0e,J8r,Y8r,K8r,Xt,Dk,Z8r,B0e,e9r,o9r,Xc,r9r,I0e,t9r,a9r,jZ,n9r,s9r,l9r,E3,i9r,Ir,Gk,d9r,N0e,c9r,m9r,wn,f9r,q0e,g9r,h9r,j0e,u9r,p9r,D0e,_9r,b9r,v9r,B,C3,G0e,F9r,T9r,DZ,M9r,E9r,C9r,w3,O0e,w9r,A9r,GZ,L9r,y9r,x9r,A3,V0e,$9r,k9r,OZ,S9r,R9r,P9r,L3,X0e,B9r,I9r,VZ,N9r,q9r,j9r,y3,z0e,D9r,G9r,XZ,O9r,V9r,X9r,x3,Q0e,z9r,Q9r,zZ,W9r,U9r,H9r,$3,W0e,J9r,Y9r,QZ,K9r,Z9r,exr,k3,U0e,oxr,rxr,WZ,txr,axr,nxr,S3,H0e,sxr,lxr,UZ,ixr,dxr,cxr,R3,J0e,mxr,fxr,HZ,gxr,hxr,uxr,P3,Y0e,pxr,_xr,JZ,bxr,vxr,Fxr,B3,K0e,Txr,Mxr,YZ,Exr,Cxr,wxr,I3,Z0e,Axr,Lxr,KZ,yxr,xxr,$xr,N3,ewe,kxr,Sxr,ZZ,Rxr,Pxr,Bxr,q3,owe,Ixr,Nxr,eee,qxr,jxr,Dxr,j3,rwe,Gxr,Oxr,oee,Vxr,Xxr,zxr,D3,twe,Qxr,Wxr,ree,Uxr,Hxr,Jxr,G3,awe,Yxr,Kxr,tee,Zxr,e$r,o$r,Fl,nwe,r$r,t$r,aee,a$r,n$r,nee,s$r,l$r,i$r,O3,swe,d$r,c$r,see,m$r,f$r,g$r,V3,lwe,h$r,u$r,lee,p$r,_$r,b$r,X3,iwe,v$r,F$r,iee,T$r,M$r,E$r,z3,dwe,C$r,w$r,dee,A$r,L$r,y$r,Q3,cwe,x$r,$$r,cee,k$r,S$r,R$r,W3,mwe,P$r,B$r,mee,I$r,N$r,q$r,U3,fwe,j$r,D$r,fee,G$r,O$r,V$r,H3,gwe,X$r,z$r,gee,Q$r,W$r,U$r,J3,hwe,H$r,J$r,hee,Y$r,K$r,Z$r,Y3,uwe,ekr,okr,uee,rkr,tkr,akr,K3,pwe,nkr,skr,pee,lkr,ikr,dkr,Z3,_we,ckr,mkr,_ee,fkr,gkr,hkr,e5,bwe,ukr,pkr,bee,_kr,bkr,vkr,o5,vwe,Fkr,Tkr,vee,Mkr,Ekr,Ckr,r5,Fwe,wkr,Akr,Fee,Lkr,ykr,xkr,t5,Twe,$kr,kkr,Tee,Skr,Rkr,Pkr,a5,Mwe,Bkr,Ikr,Mee,Nkr,qkr,jkr,n5,Ewe,Dkr,Gkr,Eee,Okr,Vkr,Xkr,s5,Cwe,zkr,Qkr,Cee,Wkr,Ukr,Hkr,l5,wwe,Jkr,Ykr,wee,Kkr,Zkr,eSr,i5,Awe,oSr,rSr,Aee,tSr,aSr,nSr,d5,Lwe,sSr,lSr,Lee,iSr,dSr,cSr,c5,ywe,mSr,fSr,yee,gSr,hSr,uSr,m5,xwe,pSr,_Sr,xee,bSr,vSr,FSr,f5,$we,TSr,MSr,$ee,ESr,CSr,wSr,g5,kwe,ASr,LSr,kee,ySr,xSr,$Sr,h5,Swe,kSr,SSr,See,RSr,PSr,BSr,u5,Rwe,ISr,NSr,Ree,qSr,jSr,DSr,p5,Pwe,GSr,OSr,Pee,VSr,XSr,zSr,_5,Bwe,QSr,WSr,Bee,USr,HSr,JSr,b5,Iwe,YSr,KSr,Iee,ZSr,eRr,oRr,v5,Nwe,rRr,tRr,Nee,aRr,nRr,sRr,F5,qwe,lRr,iRr,qee,dRr,cRr,mRr,T5,jwe,fRr,gRr,jee,hRr,uRr,pRr,M5,Dwe,_Rr,bRr,Dee,vRr,FRr,TRr,E5,Gwe,MRr,ERr,Gee,CRr,wRr,ARr,C5,neo,zc,w5,Owe,Ok,LRr,Vwe,yRr,seo,lr,Vk,xRr,Qc,$Rr,Oee,kRr,SRr,Vee,RRr,PRr,BRr,Xk,IRr,Xwe,NRr,qRr,jRr,zt,zk,DRr,zwe,GRr,ORr,Wc,VRr,Qwe,XRr,zRr,Xee,QRr,WRr,URr,A5,HRr,Nr,Qk,JRr,Wwe,YRr,KRr,An,ZRr,Uwe,ePr,oPr,Hwe,rPr,tPr,Jwe,aPr,nPr,sPr,se,L5,Ywe,lPr,iPr,zee,dPr,cPr,mPr,y5,Kwe,fPr,gPr,Qee,hPr,uPr,pPr,x5,Zwe,_Pr,bPr,Wee,vPr,FPr,TPr,$5,eAe,MPr,EPr,Uee,CPr,wPr,APr,k5,oAe,LPr,yPr,Hee,xPr,$Pr,kPr,S5,rAe,SPr,RPr,Jee,PPr,BPr,IPr,R5,tAe,NPr,qPr,Yee,jPr,DPr,GPr,P5,aAe,OPr,VPr,Kee,XPr,zPr,QPr,B5,nAe,WPr,UPr,Zee,HPr,JPr,YPr,I5,sAe,KPr,ZPr,eoe,eBr,oBr,rBr,N5,lAe,tBr,aBr,ooe,nBr,sBr,lBr,q5,iAe,iBr,dBr,roe,cBr,mBr,fBr,j5,dAe,gBr,hBr,toe,uBr,pBr,_Br,D5,cAe,bBr,vBr,aoe,FBr,TBr,MBr,G5,mAe,EBr,CBr,noe,wBr,ABr,LBr,O5,fAe,yBr,xBr,soe,$Br,kBr,SBr,V5,gAe,RBr,PBr,loe,BBr,IBr,NBr,X5,hAe,qBr,jBr,ioe,DBr,GBr,OBr,z5,uAe,VBr,XBr,doe,zBr,QBr,WBr,Q5,pAe,UBr,HBr,coe,JBr,YBr,KBr,W5,_Ae,ZBr,eIr,moe,oIr,rIr,tIr,U5,bAe,aIr,nIr,foe,sIr,lIr,iIr,H5,vAe,dIr,cIr,goe,mIr,fIr,gIr,J5,leo,Uc,Y5,FAe,Wk,hIr,TAe,uIr,ieo,ir,Uk,pIr,Hc,_Ir,hoe,bIr,vIr,uoe,FIr,TIr,MIr,Hk,EIr,MAe,CIr,wIr,AIr,Qt,Jk,LIr,EAe,yIr,xIr,Jc,$Ir,CAe,kIr,SIr,poe,RIr,PIr,BIr,K5,IIr,qr,Yk,NIr,wAe,qIr,jIr,Ln,DIr,AAe,GIr,OIr,LAe,VIr,XIr,yAe,zIr,QIr,WIr,Me,Z5,xAe,UIr,HIr,_oe,JIr,YIr,KIr,e0,$Ae,ZIr,eNr,boe,oNr,rNr,tNr,o0,kAe,aNr,nNr,voe,sNr,lNr,iNr,r0,SAe,dNr,cNr,Foe,mNr,fNr,gNr,t0,RAe,hNr,uNr,Toe,pNr,_Nr,bNr,a0,PAe,vNr,FNr,Moe,TNr,MNr,ENr,n0,BAe,CNr,wNr,Eoe,ANr,LNr,yNr,s0,IAe,xNr,$Nr,Coe,kNr,SNr,RNr,l0,NAe,PNr,BNr,woe,INr,NNr,qNr,i0,qAe,jNr,DNr,Aoe,GNr,ONr,VNr,d0,jAe,XNr,zNr,Loe,QNr,WNr,UNr,c0,DAe,HNr,JNr,yoe,YNr,KNr,ZNr,m0,GAe,eqr,oqr,xoe,rqr,tqr,aqr,f0,OAe,nqr,sqr,$oe,lqr,iqr,dqr,g0,deo,Yc,h0,VAe,Kk,cqr,XAe,mqr,ceo,dr,Zk,fqr,Kc,gqr,koe,hqr,uqr,Soe,pqr,_qr,bqr,eS,vqr,zAe,Fqr,Tqr,Mqr,Wt,oS,Eqr,QAe,Cqr,wqr,Zc,Aqr,WAe,Lqr,yqr,Roe,xqr,$qr,kqr,u0,Sqr,jr,rS,Rqr,UAe,Pqr,Bqr,yn,Iqr,HAe,Nqr,qqr,JAe,jqr,Dqr,YAe,Gqr,Oqr,Vqr,Be,p0,KAe,Xqr,zqr,Poe,Qqr,Wqr,Uqr,_0,ZAe,Hqr,Jqr,Boe,Yqr,Kqr,Zqr,Tl,e6e,ejr,ojr,Ioe,rjr,tjr,Noe,ajr,njr,sjr,b0,o6e,ljr,ijr,qoe,djr,cjr,mjr,v0,r6e,fjr,gjr,joe,hjr,ujr,pjr,F0,t6e,_jr,bjr,Doe,vjr,Fjr,Tjr,T0,a6e,Mjr,Ejr,Goe,Cjr,wjr,Ajr,M0,n6e,Ljr,yjr,Ooe,xjr,$jr,kjr,E0,s6e,Sjr,Rjr,Voe,Pjr,Bjr,Ijr,C0,meo,em,w0,l6e,tS,Njr,i6e,qjr,feo,cr,aS,jjr,om,Djr,Xoe,Gjr,Ojr,zoe,Vjr,Xjr,zjr,nS,Qjr,d6e,Wjr,Ujr,Hjr,Ut,sS,Jjr,c6e,Yjr,Kjr,rm,Zjr,m6e,eDr,oDr,Qoe,rDr,tDr,aDr,A0,nDr,Dr,lS,sDr,f6e,lDr,iDr,xn,dDr,g6e,cDr,mDr,h6e,fDr,gDr,u6e,hDr,uDr,pDr,tm,L0,p6e,_Dr,bDr,Woe,vDr,FDr,TDr,y0,_6e,MDr,EDr,Uoe,CDr,wDr,ADr,x0,b6e,LDr,yDr,Hoe,xDr,$Dr,kDr,$0,geo,am,k0,v6e,iS,SDr,F6e,RDr,heo,mr,dS,PDr,nm,BDr,Joe,IDr,NDr,Yoe,qDr,jDr,DDr,cS,GDr,T6e,ODr,VDr,XDr,Ht,mS,zDr,M6e,QDr,WDr,sm,UDr,E6e,HDr,JDr,Koe,YDr,KDr,ZDr,S0,eGr,Gr,fS,oGr,C6e,rGr,tGr,$n,aGr,w6e,nGr,sGr,A6e,lGr,iGr,L6e,dGr,cGr,mGr,fe,R0,y6e,fGr,gGr,Zoe,hGr,uGr,pGr,P0,x6e,_Gr,bGr,ere,vGr,FGr,TGr,B0,$6e,MGr,EGr,ore,CGr,wGr,AGr,I0,k6e,LGr,yGr,rre,xGr,$Gr,kGr,N0,S6e,SGr,RGr,tre,PGr,BGr,IGr,q0,R6e,NGr,qGr,are,jGr,DGr,GGr,j0,P6e,OGr,VGr,nre,XGr,zGr,QGr,D0,B6e,WGr,UGr,sre,HGr,JGr,YGr,G0,I6e,KGr,ZGr,lre,eOr,oOr,rOr,O0,N6e,tOr,aOr,ire,nOr,sOr,lOr,V0,q6e,iOr,dOr,dre,cOr,mOr,fOr,X0,j6e,gOr,hOr,cre,uOr,pOr,_Or,z0,D6e,bOr,vOr,mre,FOr,TOr,MOr,Q0,G6e,EOr,COr,fre,wOr,AOr,LOr,W0,O6e,yOr,xOr,gre,$Or,kOr,SOr,U0,V6e,ROr,POr,hre,BOr,IOr,NOr,H0,X6e,qOr,jOr,ure,DOr,GOr,OOr,J0,z6e,VOr,XOr,pre,zOr,QOr,WOr,Y0,Q6e,UOr,HOr,_re,JOr,YOr,KOr,K0,W6e,ZOr,eVr,bre,oVr,rVr,tVr,Z0,ueo,lm,ew,U6e,gS,aVr,H6e,nVr,peo,fr,hS,sVr,im,lVr,vre,iVr,dVr,Fre,cVr,mVr,fVr,uS,gVr,J6e,hVr,uVr,pVr,Jt,pS,_Vr,Y6e,bVr,vVr,dm,FVr,K6e,TVr,MVr,Tre,EVr,CVr,wVr,ow,AVr,Or,_S,LVr,Z6e,yVr,xVr,kn,$Vr,e7e,kVr,SVr,o7e,RVr,PVr,r7e,BVr,IVr,NVr,ye,rw,t7e,qVr,jVr,Mre,DVr,GVr,OVr,tw,a7e,VVr,XVr,Ere,zVr,QVr,WVr,aw,n7e,UVr,HVr,Cre,JVr,YVr,KVr,nw,s7e,ZVr,eXr,wre,oXr,rXr,tXr,sw,l7e,aXr,nXr,Are,sXr,lXr,iXr,lw,i7e,dXr,cXr,Lre,mXr,fXr,gXr,iw,d7e,hXr,uXr,yre,pXr,_Xr,bXr,dw,c7e,vXr,FXr,xre,TXr,MXr,EXr,cw,m7e,CXr,wXr,$re,AXr,LXr,yXr,mw,f7e,xXr,$Xr,kre,kXr,SXr,RXr,fw,_eo,cm,gw,g7e,bS,PXr,h7e,BXr,beo,gr,vS,IXr,mm,NXr,Sre,qXr,jXr,Rre,DXr,GXr,OXr,FS,VXr,u7e,XXr,zXr,QXr,Yt,TS,WXr,p7e,UXr,HXr,fm,JXr,_7e,YXr,KXr,Pre,ZXr,ezr,ozr,hw,rzr,Vr,MS,tzr,b7e,azr,nzr,Sn,szr,v7e,lzr,izr,F7e,dzr,czr,T7e,mzr,fzr,gzr,re,uw,M7e,hzr,uzr,Bre,pzr,_zr,bzr,pw,E7e,vzr,Fzr,Ire,Tzr,Mzr,Ezr,_w,C7e,Czr,wzr,Nre,Azr,Lzr,yzr,bw,w7e,xzr,$zr,qre,kzr,Szr,Rzr,vw,A7e,Pzr,Bzr,jre,Izr,Nzr,qzr,Fw,L7e,jzr,Dzr,Dre,Gzr,Ozr,Vzr,Tw,y7e,Xzr,zzr,Gre,Qzr,Wzr,Uzr,Mw,x7e,Hzr,Jzr,Ore,Yzr,Kzr,Zzr,Ew,$7e,eQr,oQr,Vre,rQr,tQr,aQr,Cw,k7e,nQr,sQr,Xre,lQr,iQr,dQr,ww,S7e,cQr,mQr,zre,fQr,gQr,hQr,Aw,R7e,uQr,pQr,Qre,_Qr,bQr,vQr,Lw,P7e,FQr,TQr,Wre,MQr,EQr,CQr,yw,B7e,wQr,AQr,Ure,LQr,yQr,xQr,xw,I7e,$Qr,kQr,Hre,SQr,RQr,PQr,$w,N7e,BQr,IQr,Jre,NQr,qQr,jQr,kw,q7e,DQr,GQr,Yre,OQr,VQr,XQr,Sw,j7e,zQr,QQr,Kre,WQr,UQr,HQr,Rw,D7e,JQr,YQr,Zre,KQr,ZQr,eWr,Pw,G7e,oWr,rWr,ete,tWr,aWr,nWr,Bw,O7e,sWr,lWr,ote,iWr,dWr,cWr,Iw,V7e,mWr,fWr,rte,gWr,hWr,uWr,Nw,X7e,pWr,_Wr,tte,bWr,vWr,FWr,qw,z7e,TWr,MWr,ate,EWr,CWr,wWr,jw,Q7e,AWr,LWr,nte,yWr,xWr,$Wr,Dw,W7e,kWr,SWr,ste,RWr,PWr,BWr,Gw,U7e,IWr,NWr,lte,qWr,jWr,DWr,Ow,veo,gm,Vw,H7e,ES,GWr,J7e,OWr,Feo,hr,CS,VWr,hm,XWr,ite,zWr,QWr,dte,WWr,UWr,HWr,wS,JWr,Y7e,YWr,KWr,ZWr,Kt,AS,eUr,K7e,oUr,rUr,um,tUr,Z7e,aUr,nUr,cte,sUr,lUr,iUr,Xw,dUr,Xr,LS,cUr,eLe,mUr,fUr,Rn,gUr,oLe,hUr,uUr,rLe,pUr,_Ur,tLe,bUr,vUr,FUr,ve,zw,aLe,TUr,MUr,mte,EUr,CUr,wUr,Qw,nLe,AUr,LUr,fte,yUr,xUr,$Ur,Ww,sLe,kUr,SUr,gte,RUr,PUr,BUr,Uw,lLe,IUr,NUr,hte,qUr,jUr,DUr,Hw,iLe,GUr,OUr,ute,VUr,XUr,zUr,Jw,dLe,QUr,WUr,pte,UUr,HUr,JUr,Yw,cLe,YUr,KUr,_te,ZUr,eHr,oHr,Kw,mLe,rHr,tHr,bte,aHr,nHr,sHr,Zw,fLe,lHr,iHr,vte,dHr,cHr,mHr,eA,gLe,fHr,gHr,Fte,hHr,uHr,pHr,oA,hLe,_Hr,bHr,Tte,vHr,FHr,THr,rA,uLe,MHr,EHr,Mte,CHr,wHr,AHr,tA,pLe,LHr,yHr,Ete,xHr,$Hr,kHr,aA,_Le,SHr,RHr,Cte,PHr,BHr,IHr,nA,bLe,NHr,qHr,wte,jHr,DHr,GHr,sA,vLe,OHr,VHr,Ate,XHr,zHr,QHr,lA,FLe,WHr,UHr,Lte,HHr,JHr,YHr,iA,Teo,pm,dA,TLe,yS,KHr,MLe,ZHr,Meo,ur,xS,eJr,_m,oJr,yte,rJr,tJr,xte,aJr,nJr,sJr,$S,lJr,ELe,iJr,dJr,cJr,Zt,kS,mJr,CLe,fJr,gJr,bm,hJr,wLe,uJr,pJr,$te,_Jr,bJr,vJr,cA,FJr,zr,SS,TJr,ALe,MJr,EJr,Pn,CJr,LLe,wJr,AJr,yLe,LJr,yJr,xLe,xJr,$Jr,kJr,RS,mA,$Le,SJr,RJr,kte,PJr,BJr,IJr,fA,kLe,NJr,qJr,Ste,jJr,DJr,GJr,gA,Eeo,vm,hA,SLe,PS,OJr,RLe,VJr,Ceo,pr,BS,XJr,Fm,zJr,Rte,QJr,WJr,Pte,UJr,HJr,JJr,IS,YJr,PLe,KJr,ZJr,eYr,ea,NS,oYr,BLe,rYr,tYr,Tm,aYr,ILe,nYr,sYr,Bte,lYr,iYr,dYr,uA,cYr,Qr,qS,mYr,NLe,fYr,gYr,Bn,hYr,qLe,uYr,pYr,jLe,_Yr,bYr,DLe,vYr,FYr,TYr,GLe,pA,OLe,MYr,EYr,Ite,CYr,wYr,AYr,_A,weo,Mm,bA,VLe,jS,LYr,XLe,yYr,Aeo,_r,DS,xYr,Em,$Yr,Nte,kYr,SYr,qte,RYr,PYr,BYr,GS,IYr,zLe,NYr,qYr,jYr,oa,OS,DYr,QLe,GYr,OYr,Cm,VYr,WLe,XYr,zYr,jte,QYr,WYr,UYr,vA,HYr,Wr,VS,JYr,ULe,YYr,KYr,In,ZYr,HLe,eKr,oKr,JLe,rKr,tKr,YLe,aKr,nKr,sKr,KLe,FA,ZLe,lKr,iKr,Dte,dKr,cKr,mKr,TA,Leo,wm,MA,eye,XS,fKr,oye,gKr,yeo,br,zS,hKr,Am,uKr,Gte,pKr,_Kr,Ote,bKr,vKr,FKr,QS,TKr,rye,MKr,EKr,CKr,ra,WS,wKr,tye,AKr,LKr,Lm,yKr,aye,xKr,$Kr,Vte,kKr,SKr,RKr,EA,PKr,Ur,US,BKr,nye,IKr,NKr,Nn,qKr,sye,jKr,DKr,lye,GKr,OKr,iye,VKr,XKr,zKr,de,CA,dye,QKr,WKr,Xte,UKr,HKr,JKr,wA,cye,YKr,KKr,zte,ZKr,eZr,oZr,AA,mye,rZr,tZr,Qte,aZr,nZr,sZr,LA,fye,lZr,iZr,Wte,dZr,cZr,mZr,yA,gye,fZr,gZr,Ute,hZr,uZr,pZr,xA,hye,_Zr,bZr,Hte,vZr,FZr,TZr,$A,uye,MZr,EZr,Jte,CZr,wZr,AZr,kA,pye,LZr,yZr,Yte,xZr,$Zr,kZr,SA,_ye,SZr,RZr,Kte,PZr,BZr,IZr,RA,bye,NZr,qZr,Zte,jZr,DZr,GZr,PA,vye,OZr,VZr,eae,XZr,zZr,QZr,BA,Fye,WZr,UZr,oae,HZr,JZr,YZr,IA,Tye,KZr,ZZr,rae,eet,oet,ret,NA,Mye,tet,aet,tae,net,set,iet,qA,Eye,det,cet,aae,met,fet,get,jA,Cye,het,uet,nae,pet,_et,bet,DA,wye,vet,Fet,sae,Tet,Met,Eet,GA,Aye,Cet,wet,lae,Aet,Let,yet,OA,Lye,xet,$et,iae,ket,Set,Ret,VA,yye,Pet,Bet,dae,Iet,Net,qet,XA,xye,jet,Det,cae,Get,Oet,Vet,zA,xeo,ym,QA,$ye,HS,Xet,kye,zet,$eo,vr,JS,Qet,xm,Wet,mae,Uet,Het,fae,Jet,Yet,Ket,YS,Zet,Sye,eot,oot,rot,ta,KS,tot,Rye,aot,not,$m,sot,Pye,lot,iot,gae,dot,cot,mot,WA,fot,Hr,ZS,got,Bye,hot,uot,qn,pot,Iye,_ot,bot,Nye,vot,Fot,qye,Tot,Mot,Eot,ce,UA,jye,Cot,wot,hae,Aot,Lot,yot,HA,Dye,xot,$ot,uae,kot,Sot,Rot,JA,Gye,Pot,Bot,pae,Iot,Not,qot,YA,Oye,jot,Dot,_ae,Got,Oot,Vot,KA,Vye,Xot,zot,bae,Qot,Wot,Uot,ZA,Xye,Hot,Jot,vae,Yot,Kot,Zot,e6,zye,ert,ort,Fae,rrt,trt,art,o6,Qye,nrt,srt,Tae,lrt,irt,drt,r6,Wye,crt,mrt,Mae,frt,grt,hrt,t6,Uye,urt,prt,Eae,_rt,brt,vrt,a6,Hye,Frt,Trt,Cae,Mrt,Ert,Crt,n6,Jye,wrt,Art,wae,Lrt,yrt,xrt,s6,Yye,$rt,krt,Aae,Srt,Rrt,Prt,l6,Kye,Brt,Irt,Lae,Nrt,qrt,jrt,i6,Zye,Drt,Grt,yae,Ort,Vrt,Xrt,d6,e8e,zrt,Qrt,xae,Wrt,Urt,Hrt,c6,o8e,Jrt,Yrt,$ae,Krt,Zrt,ett,m6,r8e,ott,rtt,kae,ttt,att,ntt,f6,t8e,stt,ltt,Sae,itt,dtt,ctt,g6,a8e,mtt,ftt,Rae,gtt,htt,utt,h6,n8e,ptt,_tt,Pae,btt,vtt,Ftt,u6,keo,km,p6,s8e,eR,Ttt,l8e,Mtt,Seo,Fr,oR,Ett,Sm,Ctt,Bae,wtt,Att,Iae,Ltt,ytt,xtt,rR,$tt,i8e,ktt,Stt,Rtt,aa,tR,Ptt,d8e,Btt,Itt,Rm,Ntt,c8e,qtt,jtt,Nae,Dtt,Gtt,Ott,_6,Vtt,Jr,aR,Xtt,m8e,ztt,Qtt,jn,Wtt,f8e,Utt,Htt,g8e,Jtt,Ytt,h8e,Ktt,Ztt,eat,u8e,b6,p8e,oat,rat,qae,tat,aat,nat,v6,Reo,Pm,F6,_8e,nR,sat,b8e,lat,Peo,Tr,sR,iat,Bm,dat,jae,cat,mat,Dae,fat,gat,hat,lR,uat,v8e,pat,_at,bat,na,iR,vat,F8e,Fat,Tat,Im,Mat,T8e,Eat,Cat,Gae,wat,Aat,Lat,T6,yat,Yr,dR,xat,M8e,$at,kat,Dn,Sat,E8e,Rat,Pat,C8e,Bat,Iat,w8e,Nat,qat,jat,A8e,M6,L8e,Dat,Gat,Oae,Oat,Vat,Xat,E6,Beo,Nm,C6,y8e,cR,zat,x8e,Qat,Ieo,Mr,mR,Wat,qm,Uat,Vae,Hat,Jat,Xae,Yat,Kat,Zat,fR,ent,$8e,ont,rnt,tnt,sa,gR,ant,k8e,nnt,snt,jm,lnt,S8e,int,dnt,zae,cnt,mnt,fnt,w6,gnt,Kr,hR,hnt,R8e,unt,pnt,Gn,_nt,P8e,bnt,vnt,B8e,Fnt,Tnt,I8e,Mnt,Ent,Cnt,te,A6,N8e,wnt,Ant,Qae,Lnt,ynt,xnt,L6,q8e,$nt,knt,Wae,Snt,Rnt,Pnt,y6,j8e,Bnt,Int,Uae,Nnt,qnt,jnt,x6,D8e,Dnt,Gnt,Hae,Ont,Vnt,Xnt,$6,G8e,znt,Qnt,Jae,Wnt,Unt,Hnt,k6,O8e,Jnt,Ynt,Yae,Knt,Znt,est,S6,V8e,ost,rst,Kae,tst,ast,nst,R6,X8e,sst,lst,Zae,ist,dst,cst,P6,z8e,mst,fst,ene,gst,hst,ust,B6,Q8e,pst,_st,one,bst,vst,Fst,I6,W8e,Tst,Mst,rne,Est,Cst,wst,N6,U8e,Ast,Lst,tne,yst,xst,$st,q6,H8e,kst,Sst,ane,Rst,Pst,Bst,j6,J8e,Ist,Nst,nne,qst,jst,Dst,D6,Y8e,Gst,Ost,sne,Vst,Xst,zst,G6,K8e,Qst,Wst,lne,Ust,Hst,Jst,O6,Z8e,Yst,Kst,ine,Zst,elt,olt,V6,e9e,rlt,tlt,dne,alt,nlt,slt,X6,o9e,llt,ilt,cne,dlt,clt,mlt,z6,r9e,flt,glt,mne,hlt,ult,plt,Q6,t9e,_lt,blt,fne,vlt,Flt,Tlt,W6,a9e,Mlt,Elt,gne,Clt,wlt,Alt,U6,n9e,Llt,ylt,hne,xlt,$lt,klt,H6,s9e,Slt,Rlt,une,Plt,Blt,Ilt,J6,l9e,Nlt,qlt,pne,jlt,Dlt,Glt,Y6,i9e,Olt,Vlt,_ne,Xlt,zlt,Qlt,K6,d9e,Wlt,Ult,bne,Hlt,Jlt,Ylt,Z6,Neo,Dm,e7,c9e,uR,Klt,m9e,Zlt,qeo,Er,pR,eit,Gm,oit,vne,rit,tit,Fne,ait,nit,sit,_R,lit,f9e,iit,dit,cit,la,bR,mit,g9e,fit,git,Om,hit,h9e,uit,pit,Tne,_it,bit,vit,o7,Fit,Zr,vR,Tit,u9e,Mit,Eit,On,Cit,p9e,wit,Ait,_9e,Lit,yit,b9e,xit,$it,kit,xe,r7,v9e,Sit,Rit,Mne,Pit,Bit,Iit,t7,F9e,Nit,qit,Ene,jit,Dit,Git,a7,T9e,Oit,Vit,Cne,Xit,zit,Qit,n7,M9e,Wit,Uit,wne,Hit,Jit,Yit,s7,E9e,Kit,Zit,Ane,edt,odt,rdt,l7,C9e,tdt,adt,Lne,ndt,sdt,ldt,i7,w9e,idt,ddt,yne,cdt,mdt,fdt,d7,A9e,gdt,hdt,xne,udt,pdt,_dt,c7,L9e,bdt,vdt,$ne,Fdt,Tdt,Mdt,m7,y9e,Edt,Cdt,kne,wdt,Adt,Ldt,f7,jeo,Vm,g7,x9e,FR,ydt,$9e,xdt,Deo,Cr,TR,$dt,Xm,kdt,Sne,Sdt,Rdt,Rne,Pdt,Bdt,Idt,MR,Ndt,k9e,qdt,jdt,Ddt,ia,ER,Gdt,S9e,Odt,Vdt,zm,Xdt,R9e,zdt,Qdt,Pne,Wdt,Udt,Hdt,h7,Jdt,et,CR,Ydt,P9e,Kdt,Zdt,Vn,ect,B9e,oct,rct,I9e,tct,act,N9e,nct,sct,lct,Ee,u7,q9e,ict,dct,Bne,cct,mct,fct,p7,j9e,gct,hct,Ine,uct,pct,_ct,_7,D9e,bct,vct,Nne,Fct,Tct,Mct,b7,G9e,Ect,Cct,qne,wct,Act,Lct,v7,O9e,yct,xct,jne,$ct,kct,Sct,F7,V9e,Rct,Pct,Dne,Bct,Ict,Nct,T7,X9e,qct,jct,Gne,Dct,Gct,Oct,M7,z9e,Vct,Xct,One,zct,Qct,Wct,E7,Q9e,Uct,Hct,Vne,Jct,Yct,Kct,C7,W9e,Zct,emt,Xne,omt,rmt,tmt,w7,U9e,amt,nmt,zne,smt,lmt,imt,A7,H9e,dmt,cmt,Qne,mmt,fmt,gmt,L7,J9e,hmt,umt,Wne,pmt,_mt,bmt,y7,Geo,Qm,x7,Y9e,wR,vmt,K9e,Fmt,Oeo,wr,AR,Tmt,Wm,Mmt,Une,Emt,Cmt,Hne,wmt,Amt,Lmt,LR,ymt,Z9e,xmt,$mt,kmt,da,yR,Smt,exe,Rmt,Pmt,Um,Bmt,oxe,Imt,Nmt,Jne,qmt,jmt,Dmt,$7,Gmt,ot,xR,Omt,rxe,Vmt,Xmt,Xn,zmt,txe,Qmt,Wmt,axe,Umt,Hmt,nxe,Jmt,Ymt,Kmt,$e,k7,sxe,Zmt,eft,Yne,oft,rft,tft,S7,lxe,aft,nft,Kne,sft,lft,ift,R7,ixe,dft,cft,Zne,mft,fft,gft,P7,dxe,hft,uft,ese,pft,_ft,bft,B7,cxe,vft,Fft,ose,Tft,Mft,Eft,I7,mxe,Cft,wft,rse,Aft,Lft,yft,N7,fxe,xft,$ft,tse,kft,Sft,Rft,q7,gxe,Pft,Bft,ase,Ift,Nft,qft,j7,hxe,jft,Dft,nse,Gft,Oft,Vft,D7,uxe,Xft,zft,sse,Qft,Wft,Uft,G7,Veo,Hm,O7,pxe,$R,Hft,_xe,Jft,Xeo,Ar,kR,Yft,Jm,Kft,lse,Zft,egt,ise,ogt,rgt,tgt,SR,agt,bxe,ngt,sgt,lgt,ca,RR,igt,vxe,dgt,cgt,Ym,mgt,Fxe,fgt,ggt,dse,hgt,ugt,pgt,V7,_gt,rt,PR,bgt,Txe,vgt,Fgt,zn,Tgt,Mxe,Mgt,Egt,Exe,Cgt,wgt,Cxe,Agt,Lgt,ygt,ke,X7,wxe,xgt,$gt,cse,kgt,Sgt,Rgt,z7,Axe,Pgt,Bgt,mse,Igt,Ngt,qgt,Q7,Lxe,jgt,Dgt,fse,Ggt,Ogt,Vgt,W7,yxe,Xgt,zgt,gse,Qgt,Wgt,Ugt,U7,xxe,Hgt,Jgt,hse,Ygt,Kgt,Zgt,H7,$xe,eht,oht,use,rht,tht,aht,J7,kxe,nht,sht,pse,lht,iht,dht,Y7,Sxe,cht,mht,_se,fht,ght,hht,K7,Rxe,uht,pht,bse,_ht,bht,vht,Z7,Pxe,Fht,Tht,vse,Mht,Eht,Cht,eL,zeo,Km,oL,Bxe,BR,wht,Ixe,Aht,Qeo,Lr,IR,Lht,Zm,yht,Fse,xht,$ht,Tse,kht,Sht,Rht,NR,Pht,Nxe,Bht,Iht,Nht,ma,qR,qht,qxe,jht,Dht,ef,Ght,jxe,Oht,Vht,Mse,Xht,zht,Qht,rL,Wht,tt,jR,Uht,Dxe,Hht,Jht,Qn,Yht,Gxe,Kht,Zht,Oxe,eut,out,Vxe,rut,tut,aut,Se,tL,Xxe,nut,sut,Ese,lut,iut,dut,aL,zxe,cut,mut,Cse,fut,gut,hut,nL,Qxe,uut,put,wse,_ut,but,vut,sL,Wxe,Fut,Tut,Ase,Mut,Eut,Cut,lL,Uxe,wut,Aut,Lse,Lut,yut,xut,iL,Hxe,$ut,kut,yse,Sut,Rut,Put,dL,Jxe,But,Iut,xse,Nut,qut,jut,cL,Yxe,Dut,Gut,$se,Out,Vut,Xut,mL,Kxe,zut,Qut,kse,Wut,Uut,Hut,fL,Zxe,Jut,Yut,Sse,Kut,Zut,ept,gL,Weo,of,hL,e$e,DR,opt,o$e,rpt,Ueo,yr,GR,tpt,rf,apt,Rse,npt,spt,Pse,lpt,ipt,dpt,OR,cpt,r$e,mpt,fpt,gpt,fa,VR,hpt,t$e,upt,ppt,tf,_pt,a$e,bpt,vpt,Bse,Fpt,Tpt,Mpt,uL,Ept,at,XR,Cpt,n$e,wpt,Apt,Wn,Lpt,s$e,ypt,xpt,l$e,$pt,kpt,i$e,Spt,Rpt,Ppt,Re,pL,d$e,Bpt,Ipt,Ise,Npt,qpt,jpt,_L,c$e,Dpt,Gpt,Nse,Opt,Vpt,Xpt,bL,m$e,zpt,Qpt,qse,Wpt,Upt,Hpt,vL,f$e,Jpt,Ypt,jse,Kpt,Zpt,e_t,FL,g$e,o_t,r_t,Dse,t_t,a_t,n_t,TL,h$e,s_t,l_t,Gse,i_t,d_t,c_t,ML,u$e,m_t,f_t,Ose,g_t,h_t,u_t,EL,p$e,p_t,__t,Vse,b_t,v_t,F_t,CL,_$e,T_t,M_t,Xse,E_t,C_t,w_t,wL,b$e,A_t,L_t,zse,y_t,x_t,$_t,AL,Heo,af,LL,v$e,zR,k_t,F$e,S_t,Jeo,xr,QR,R_t,nf,P_t,Qse,B_t,I_t,Wse,N_t,q_t,j_t,WR,D_t,T$e,G_t,O_t,V_t,ga,UR,X_t,M$e,z_t,Q_t,sf,W_t,E$e,U_t,H_t,Use,J_t,Y_t,K_t,yL,Z_t,nt,HR,ebt,C$e,obt,rbt,Un,tbt,w$e,abt,nbt,A$e,sbt,lbt,L$e,ibt,dbt,cbt,Xe,xL,y$e,mbt,fbt,Hse,gbt,hbt,ubt,$L,x$e,pbt,_bt,Jse,bbt,vbt,Fbt,kL,$$e,Tbt,Mbt,Yse,Ebt,Cbt,wbt,SL,k$e,Abt,Lbt,Kse,ybt,xbt,$bt,RL,S$e,kbt,Sbt,Zse,Rbt,Pbt,Bbt,PL,R$e,Ibt,Nbt,ele,qbt,jbt,Dbt,BL,P$e,Gbt,Obt,ole,Vbt,Xbt,zbt,IL,B$e,Qbt,Wbt,rle,Ubt,Hbt,Jbt,NL,Yeo,lf,qL,I$e,JR,Ybt,N$e,Kbt,Keo,$r,YR,Zbt,df,e2t,tle,o2t,r2t,ale,t2t,a2t,n2t,KR,s2t,q$e,l2t,i2t,d2t,ha,ZR,c2t,j$e,m2t,f2t,cf,g2t,D$e,h2t,u2t,nle,p2t,_2t,b2t,jL,v2t,st,eP,F2t,G$e,T2t,M2t,Hn,E2t,O$e,C2t,w2t,V$e,A2t,L2t,X$e,y2t,x2t,$2t,ze,DL,z$e,k2t,S2t,sle,R2t,P2t,B2t,GL,Q$e,I2t,N2t,lle,q2t,j2t,D2t,OL,W$e,G2t,O2t,ile,V2t,X2t,z2t,VL,U$e,Q2t,W2t,dle,U2t,H2t,J2t,XL,H$e,Y2t,K2t,cle,Z2t,e1t,o1t,zL,J$e,r1t,t1t,mle,a1t,n1t,s1t,QL,Y$e,l1t,i1t,fle,d1t,c1t,m1t,WL,K$e,f1t,g1t,gle,h1t,u1t,p1t,UL,Zeo,mf,HL,Z$e,oP,_1t,eke,b1t,eoo,kr,rP,v1t,ff,F1t,hle,T1t,M1t,ule,E1t,C1t,w1t,tP,A1t,oke,L1t,y1t,x1t,ua,aP,$1t,rke,k1t,S1t,gf,R1t,tke,P1t,B1t,ple,I1t,N1t,q1t,JL,j1t,lt,nP,D1t,ake,G1t,O1t,Jn,V1t,nke,X1t,z1t,ske,Q1t,W1t,lke,U1t,H1t,J1t,ike,YL,dke,Y1t,K1t,_le,Z1t,evt,ovt,KL,ooo,hf,ZL,cke,sP,rvt,mke,tvt,roo,Sr,lP,avt,uf,nvt,ble,svt,lvt,vle,ivt,dvt,cvt,iP,mvt,fke,fvt,gvt,hvt,pa,dP,uvt,gke,pvt,_vt,pf,bvt,hke,vvt,Fvt,Fle,Tvt,Mvt,Evt,ey,Cvt,it,cP,wvt,uke,Avt,Lvt,Yn,yvt,pke,xvt,$vt,_ke,kvt,Svt,bke,Rvt,Pvt,Bvt,mP,oy,vke,Ivt,Nvt,Tle,qvt,jvt,Dvt,ry,Fke,Gvt,Ovt,Mle,Vvt,Xvt,zvt,ty,too,_f,ay,Tke,fP,Qvt,Mke,Wvt,aoo,Rr,gP,Uvt,bf,Hvt,Ele,Jvt,Yvt,Cle,Kvt,Zvt,eFt,hP,oFt,Eke,rFt,tFt,aFt,_a,uP,nFt,Cke,sFt,lFt,vf,iFt,wke,dFt,cFt,wle,mFt,fFt,gFt,ny,hFt,dt,pP,uFt,Ake,pFt,_Ft,Kn,bFt,Lke,vFt,FFt,yke,TFt,MFt,xke,EFt,CFt,wFt,$ke,sy,kke,AFt,LFt,Ale,yFt,xFt,$Ft,ly,noo;return d=new oe({}),Qa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),O9=new oe({}),V9=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),yf=new kFt({props:{warning:!0,$$slots:{default:[fpa]},$$scope:{ctx:$}}}),X9=new oe({}),z9=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L647"}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L670"}}),Yh=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[gpa]},$$scope:{ctx:$}}}),H9=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L793"}}),J9=new oe({}),Y9=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L427"}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L441"}}),Pu=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[hpa]},$$scope:{ctx:$}}}),ox=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L642"}}),rx=new oe({}),tx=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L216"}}),wp=new kFt({props:{$$slots:{default:[upa]},$$scope:{ctx:$}}}),Ap=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[ppa]},$$scope:{ctx:$}}}),lx=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L343"}}),ix=new oe({}),dx=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L94"}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L108"}}),Jp=new kFt({props:{$$slots:{default:[_pa]},$$scope:{ctx:$}}}),Yp=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[bpa]},$$scope:{ctx:$}}}),gx=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L275"}}),hx=new oe({}),ux=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L849"}}),_x=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e_=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[vpa]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Fpa]},$$scope:{ctx:$}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L856"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b2=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Tpa]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mpa]},$$scope:{ctx:$}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L871"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p1=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Epa]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sv=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Cpa]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iv=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[wpa]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Apa]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Lpa]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ypa]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[xpa]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$pa]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L950"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[kpa]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Spa]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L957"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rpa]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ppa]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L943"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bpa]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ipa]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L903"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Npa]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qpa]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L910"}}),g$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jpa]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Dpa]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L932"}}),b$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new I({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Gpa]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new I({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Opa]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L966"}}),E$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Vpa]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Xpa]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1005"}}),y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[zpa]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Qpa]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1012"}}),R$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Wpa]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Upa]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L921"}}),q$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Hpa]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Jpa]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1019"}}),V$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Ypa]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Kpa]},$$scope:{ctx:$}}}),z$=new oe({}),Q$=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1042"}}),U$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Zpa]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[e_a]},$$scope:{ctx:$}}}),J$=new oe({}),Y$=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1026"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[o_a]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[r_a]},$$scope:{ctx:$}}}),ok=new oe({}),rk=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1033"}}),ak=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[t_a]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[a_a]},$$scope:{ctx:$}}}),lk=new oe({}),ik=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1051"}}),ck=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[n_a]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[s_a]},$$scope:{ctx:$}}}),fk=new oe({}),gk=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1058"}}),uk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[l_a]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[i_a]},$$scope:{ctx:$}}}),_k=new oe({}),bk=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L998"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[d_a]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[c_a]},$$scope:{ctx:$}}}),Mk=new oe({}),Ek=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L973"}}),wk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[m_a]},$$scope:{ctx:$}}}),Ak=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[f_a]},$$scope:{ctx:$}}}),Lk=new oe({}),yk=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L980"}}),$k=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[g_a]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[h_a]},$$scope:{ctx:$}}}),Sk=new oe({}),Rk=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L989"}}),Bk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[u_a]},$$scope:{ctx:$}}}),Ik=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[p_a]},$$scope:{ctx:$}}}),Nk=new oe({}),qk=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),Dk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[__a]},$$scope:{ctx:$}}}),Gk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[b_a]},$$scope:{ctx:$}}}),Ok=new oe({}),Vk=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),zk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[v_a]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[F_a]},$$scope:{ctx:$}}}),Wk=new oe({}),Uk=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),Jk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[T_a]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[M_a]},$$scope:{ctx:$}}}),Kk=new oe({}),Zk=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),oS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[E_a]},$$scope:{ctx:$}}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[C_a]},$$scope:{ctx:$}}}),tS=new oe({}),aS=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),sS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[w_a]},$$scope:{ctx:$}}}),lS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[A_a]},$$scope:{ctx:$}}}),iS=new oe({}),dS=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),mS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[L_a]},$$scope:{ctx:$}}}),fS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[y_a]},$$scope:{ctx:$}}}),gS=new oe({}),hS=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),pS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[x_a]},$$scope:{ctx:$}}}),_S=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$_a]},$$scope:{ctx:$}}}),bS=new oe({}),vS=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L513"}}),TS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[k_a]},$$scope:{ctx:$}}}),MS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[S_a]},$$scope:{ctx:$}}}),ES=new oe({}),CS=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L560"}}),AS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[R_a]},$$scope:{ctx:$}}}),LS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[P_a]},$$scope:{ctx:$}}}),yS=new oe({}),xS=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L567"}}),kS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cA=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[B_a]},$$scope:{ctx:$}}}),SS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gA=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[I_a]},$$scope:{ctx:$}}}),PS=new oe({}),BS=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),NS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uA=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N_a]},$$scope:{ctx:$}}}),qS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[q_a]},$$scope:{ctx:$}}}),jS=new oe({}),DS=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L529"}}),OS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new I({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[j_a]},$$scope:{ctx:$}}}),VS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new I({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[D_a]},$$scope:{ctx:$}}}),XS=new oe({}),zS=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L551"}}),WS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[G_a]},$$scope:{ctx:$}}}),US=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zA=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[O_a]},$$scope:{ctx:$}}}),HS=new oe({}),JS=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),KS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WA=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[V_a]},$$scope:{ctx:$}}}),ZS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[X_a]},$$scope:{ctx:$}}}),eR=new oe({}),oR=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),tR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_6=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[z_a]},$$scope:{ctx:$}}}),aR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Q_a]},$$scope:{ctx:$}}}),nR=new oe({}),sR=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L576"}}),iR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[W_a]},$$scope:{ctx:$}}}),dR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[U_a]},$$scope:{ctx:$}}}),cR=new oe({}),mR=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),gR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[H_a]},$$scope:{ctx:$}}}),hR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[J_a]},$$scope:{ctx:$}}}),uR=new oe({}),pR=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),bR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Y_a]},$$scope:{ctx:$}}}),vR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[K_a]},$$scope:{ctx:$}}}),FR=new oe({}),TR=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),ER=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Z_a]},$$scope:{ctx:$}}}),CR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eba]},$$scope:{ctx:$}}}),wR=new oe({}),AR=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),yR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[oba]},$$scope:{ctx:$}}}),xR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rba]},$$scope:{ctx:$}}}),$R=new oe({}),kR=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),RR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tba]},$$scope:{ctx:$}}}),PR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eL=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[aba]},$$scope:{ctx:$}}}),BR=new oe({}),IR=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),qR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rL=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nba]},$$scope:{ctx:$}}}),jR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gL=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[sba]},$$scope:{ctx:$}}}),DR=new oe({}),GR=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),VR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uL=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[lba]},$$scope:{ctx:$}}}),XR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AL=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[iba]},$$scope:{ctx:$}}}),zR=new oe({}),QR=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),UR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yL=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[dba]},$$scope:{ctx:$}}}),HR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NL=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cba]},$$scope:{ctx:$}}}),JR=new oe({}),YR=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),ZR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jL=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mba]},$$scope:{ctx:$}}}),eP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UL=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fba]},$$scope:{ctx:$}}}),oP=new oe({}),rP=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),aP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JL=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gba]},$$scope:{ctx:$}}}),nP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KL=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hba]},$$scope:{ctx:$}}}),sP=new oe({}),lP=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),dP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ey=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[uba]},$$scope:{ctx:$}}}),cP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ty=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[pba]},$$scope:{ctx:$}}}),fP=new oe({}),gP=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),uP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ny=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[_ba]},$$scope:{ctx:$}}}),pP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ly=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bba]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),td=o("Auto Classes"),Ef=l(),pt=a("p"),ad=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=a("code"),q9=o("from_pretrained()"),Cf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),sd=o("Instantiating one of "),es=a("a"),j9=o("AutoConfig"),os=o(", "),rs=a("a"),D9=o("AutoModel"),ld=o(`, and
`),ts=a("a"),G9=o("AutoTokenizer"),id=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),F(Qa.$$.fragment),Je=l(),Ae=a("p"),OB=o("will create a model that is an instance of "),dd=a("a"),VB=o("BertModel"),XB=o("."),xo=l(),Wa=a("p"),zB=o("There is one class of "),Af=a("code"),QB=o("AutoModel"),Mto=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),QKe=l(),cd=a("h2"),Lf=a("a"),$de=a("span"),F(O9.$$.fragment),Eto=l(),kde=a("span"),Cto=o("Extending the Auto Classes"),WKe=l(),as=a("p"),wto=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Sde=a("code"),Ato=o("NewModel"),Lto=o(", make sure you have a "),Rde=a("code"),yto=o("NewModelConfig"),xto=o(` then you can add those to the auto
classes like this:`),UKe=l(),F(V9.$$.fragment),HKe=l(),WB=a("p"),$to=o("You will then be able to use the auto classes like you would usually do!"),JKe=l(),F(yf.$$.fragment),YKe=l(),md=a("h2"),xf=a("a"),Pde=a("span"),F(X9.$$.fragment),kto=l(),Bde=a("span"),Sto=o("AutoConfig"),KKe=l(),$o=a("div"),F(z9.$$.fragment),Rto=l(),Q9=a("p"),Pto=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),UB=a("a"),Bto=o("from_pretrained()"),Ito=o(" class method."),Nto=l(),W9=a("p"),qto=o("This class cannot be instantiated directly using "),Ide=a("code"),jto=o("__init__()"),Dto=o(" (throws an error)."),Gto=l(),Pr=a("div"),F(U9.$$.fragment),Oto=l(),Nde=a("p"),Vto=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Xto=l(),fd=a("p"),zto=o("The configuration class to instantiate is selected based on the "),qde=a("code"),Qto=o("model_type"),Wto=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),jde=a("code"),Uto=o("pretrained_model_name_or_path"),Hto=o(":"),Jto=l(),A=a("ul"),$f=a("li"),Dde=a("strong"),Yto=o("albert"),Kto=o(" \u2014 "),HB=a("a"),Zto=o("AlbertConfig"),eao=o(" (ALBERT model)"),oao=l(),kf=a("li"),Gde=a("strong"),rao=o("bart"),tao=o(" \u2014 "),JB=a("a"),aao=o("BartConfig"),nao=o(" (BART model)"),sao=l(),Sf=a("li"),Ode=a("strong"),lao=o("beit"),iao=o(" \u2014 "),YB=a("a"),dao=o("BeitConfig"),cao=o(" (BEiT model)"),mao=l(),Rf=a("li"),Vde=a("strong"),fao=o("bert"),gao=o(" \u2014 "),KB=a("a"),hao=o("BertConfig"),uao=o(" (BERT model)"),pao=l(),Pf=a("li"),Xde=a("strong"),_ao=o("bert-generation"),bao=o(" \u2014 "),ZB=a("a"),vao=o("BertGenerationConfig"),Fao=o(" (Bert Generation model)"),Tao=l(),Bf=a("li"),zde=a("strong"),Mao=o("big_bird"),Eao=o(" \u2014 "),eI=a("a"),Cao=o("BigBirdConfig"),wao=o(" (BigBird model)"),Aao=l(),If=a("li"),Qde=a("strong"),Lao=o("bigbird_pegasus"),yao=o(" \u2014 "),oI=a("a"),xao=o("BigBirdPegasusConfig"),$ao=o(" (BigBird-Pegasus model)"),kao=l(),Nf=a("li"),Wde=a("strong"),Sao=o("blenderbot"),Rao=o(" \u2014 "),rI=a("a"),Pao=o("BlenderbotConfig"),Bao=o(" (Blenderbot model)"),Iao=l(),qf=a("li"),Ude=a("strong"),Nao=o("blenderbot-small"),qao=o(" \u2014 "),tI=a("a"),jao=o("BlenderbotSmallConfig"),Dao=o(" (BlenderbotSmall model)"),Gao=l(),jf=a("li"),Hde=a("strong"),Oao=o("bloom"),Vao=o(" \u2014 "),aI=a("a"),Xao=o("BloomConfig"),zao=o(" (BLOOM model)"),Qao=l(),Df=a("li"),Jde=a("strong"),Wao=o("camembert"),Uao=o(" \u2014 "),nI=a("a"),Hao=o("CamembertConfig"),Jao=o(" (CamemBERT model)"),Yao=l(),Gf=a("li"),Yde=a("strong"),Kao=o("canine"),Zao=o(" \u2014 "),sI=a("a"),eno=o("CanineConfig"),ono=o(" (CANINE model)"),rno=l(),Of=a("li"),Kde=a("strong"),tno=o("clip"),ano=o(" \u2014 "),lI=a("a"),nno=o("CLIPConfig"),sno=o(" (CLIP model)"),lno=l(),Vf=a("li"),Zde=a("strong"),ino=o("codegen"),dno=o(" \u2014 "),iI=a("a"),cno=o("CodeGenConfig"),mno=o(" (CodeGen model)"),fno=l(),Xf=a("li"),ece=a("strong"),gno=o("conditional_detr"),hno=o(" \u2014 "),dI=a("a"),uno=o("ConditionalDetrConfig"),pno=o(" (Conditional DETR model)"),_no=l(),zf=a("li"),oce=a("strong"),bno=o("convbert"),vno=o(" \u2014 "),cI=a("a"),Fno=o("ConvBertConfig"),Tno=o(" (ConvBERT model)"),Mno=l(),Qf=a("li"),rce=a("strong"),Eno=o("convnext"),Cno=o(" \u2014 "),mI=a("a"),wno=o("ConvNextConfig"),Ano=o(" (ConvNeXT model)"),Lno=l(),Wf=a("li"),tce=a("strong"),yno=o("ctrl"),xno=o(" \u2014 "),fI=a("a"),$no=o("CTRLConfig"),kno=o(" (CTRL model)"),Sno=l(),Uf=a("li"),ace=a("strong"),Rno=o("cvt"),Pno=o(" \u2014 "),gI=a("a"),Bno=o("CvtConfig"),Ino=o(" (CvT model)"),Nno=l(),Hf=a("li"),nce=a("strong"),qno=o("data2vec-audio"),jno=o(" \u2014 "),hI=a("a"),Dno=o("Data2VecAudioConfig"),Gno=o(" (Data2VecAudio model)"),Ono=l(),Jf=a("li"),sce=a("strong"),Vno=o("data2vec-text"),Xno=o(" \u2014 "),uI=a("a"),zno=o("Data2VecTextConfig"),Qno=o(" (Data2VecText model)"),Wno=l(),Yf=a("li"),lce=a("strong"),Uno=o("data2vec-vision"),Hno=o(" \u2014 "),pI=a("a"),Jno=o("Data2VecVisionConfig"),Yno=o(" (Data2VecVision model)"),Kno=l(),Kf=a("li"),ice=a("strong"),Zno=o("deberta"),eso=o(" \u2014 "),_I=a("a"),oso=o("DebertaConfig"),rso=o(" (DeBERTa model)"),tso=l(),Zf=a("li"),dce=a("strong"),aso=o("deberta-v2"),nso=o(" \u2014 "),bI=a("a"),sso=o("DebertaV2Config"),lso=o(" (DeBERTa-v2 model)"),iso=l(),eg=a("li"),cce=a("strong"),dso=o("decision_transformer"),cso=o(" \u2014 "),vI=a("a"),mso=o("DecisionTransformerConfig"),fso=o(" (Decision Transformer model)"),gso=l(),og=a("li"),mce=a("strong"),hso=o("deformable_detr"),uso=o(" \u2014 "),FI=a("a"),pso=o("DeformableDetrConfig"),_so=o(" (Deformable DETR model)"),bso=l(),rg=a("li"),fce=a("strong"),vso=o("deit"),Fso=o(" \u2014 "),TI=a("a"),Tso=o("DeiTConfig"),Mso=o(" (DeiT model)"),Eso=l(),tg=a("li"),gce=a("strong"),Cso=o("detr"),wso=o(" \u2014 "),MI=a("a"),Aso=o("DetrConfig"),Lso=o(" (DETR model)"),yso=l(),ag=a("li"),hce=a("strong"),xso=o("distilbert"),$so=o(" \u2014 "),EI=a("a"),kso=o("DistilBertConfig"),Sso=o(" (DistilBERT model)"),Rso=l(),ng=a("li"),uce=a("strong"),Pso=o("donut-swin"),Bso=o(" \u2014 "),CI=a("a"),Iso=o("DonutSwinConfig"),Nso=o(" (DonutSwin model)"),qso=l(),sg=a("li"),pce=a("strong"),jso=o("dpr"),Dso=o(" \u2014 "),wI=a("a"),Gso=o("DPRConfig"),Oso=o(" (DPR model)"),Vso=l(),lg=a("li"),_ce=a("strong"),Xso=o("dpt"),zso=o(" \u2014 "),AI=a("a"),Qso=o("DPTConfig"),Wso=o(" (DPT model)"),Uso=l(),ig=a("li"),bce=a("strong"),Hso=o("electra"),Jso=o(" \u2014 "),LI=a("a"),Yso=o("ElectraConfig"),Kso=o(" (ELECTRA model)"),Zso=l(),dg=a("li"),vce=a("strong"),elo=o("encoder-decoder"),olo=o(" \u2014 "),yI=a("a"),rlo=o("EncoderDecoderConfig"),tlo=o(" (Encoder decoder model)"),alo=l(),cg=a("li"),Fce=a("strong"),nlo=o("ernie"),slo=o(" \u2014 "),xI=a("a"),llo=o("ErnieConfig"),ilo=o(" (ERNIE model)"),dlo=l(),mg=a("li"),Tce=a("strong"),clo=o("flaubert"),mlo=o(" \u2014 "),$I=a("a"),flo=o("FlaubertConfig"),glo=o(" (FlauBERT model)"),hlo=l(),fg=a("li"),Mce=a("strong"),ulo=o("flava"),plo=o(" \u2014 "),kI=a("a"),_lo=o("FlavaConfig"),blo=o(" (FLAVA model)"),vlo=l(),gg=a("li"),Ece=a("strong"),Flo=o("fnet"),Tlo=o(" \u2014 "),SI=a("a"),Mlo=o("FNetConfig"),Elo=o(" (FNet model)"),Clo=l(),hg=a("li"),Cce=a("strong"),wlo=o("fsmt"),Alo=o(" \u2014 "),RI=a("a"),Llo=o("FSMTConfig"),ylo=o(" (FairSeq Machine-Translation model)"),xlo=l(),ug=a("li"),wce=a("strong"),$lo=o("funnel"),klo=o(" \u2014 "),PI=a("a"),Slo=o("FunnelConfig"),Rlo=o(" (Funnel Transformer model)"),Plo=l(),pg=a("li"),Ace=a("strong"),Blo=o("glpn"),Ilo=o(" \u2014 "),BI=a("a"),Nlo=o("GLPNConfig"),qlo=o(" (GLPN model)"),jlo=l(),_g=a("li"),Lce=a("strong"),Dlo=o("gpt2"),Glo=o(" \u2014 "),II=a("a"),Olo=o("GPT2Config"),Vlo=o(" (OpenAI GPT-2 model)"),Xlo=l(),bg=a("li"),yce=a("strong"),zlo=o("gpt_neo"),Qlo=o(" \u2014 "),NI=a("a"),Wlo=o("GPTNeoConfig"),Ulo=o(" (GPT Neo model)"),Hlo=l(),vg=a("li"),xce=a("strong"),Jlo=o("gpt_neox"),Ylo=o(" \u2014 "),qI=a("a"),Klo=o("GPTNeoXConfig"),Zlo=o(" (GPT NeoX model)"),eio=l(),Fg=a("li"),$ce=a("strong"),oio=o("gpt_neox_japanese"),rio=o(" \u2014 "),jI=a("a"),tio=o("GPTNeoXJapaneseConfig"),aio=o(" (GPT NeoX Japanese model)"),nio=l(),Tg=a("li"),kce=a("strong"),sio=o("gptj"),lio=o(" \u2014 "),DI=a("a"),iio=o("GPTJConfig"),dio=o(" (GPT-J model)"),cio=l(),Mg=a("li"),Sce=a("strong"),mio=o("groupvit"),fio=o(" \u2014 "),GI=a("a"),gio=o("GroupViTConfig"),hio=o(" (GroupViT model)"),uio=l(),Eg=a("li"),Rce=a("strong"),pio=o("hubert"),_io=o(" \u2014 "),OI=a("a"),bio=o("HubertConfig"),vio=o(" (Hubert model)"),Fio=l(),Cg=a("li"),Pce=a("strong"),Tio=o("ibert"),Mio=o(" \u2014 "),VI=a("a"),Eio=o("IBertConfig"),Cio=o(" (I-BERT model)"),wio=l(),wg=a("li"),Bce=a("strong"),Aio=o("imagegpt"),Lio=o(" \u2014 "),XI=a("a"),yio=o("ImageGPTConfig"),xio=o(" (ImageGPT model)"),$io=l(),Ag=a("li"),Ice=a("strong"),kio=o("layoutlm"),Sio=o(" \u2014 "),zI=a("a"),Rio=o("LayoutLMConfig"),Pio=o(" (LayoutLM model)"),Bio=l(),Lg=a("li"),Nce=a("strong"),Iio=o("layoutlmv2"),Nio=o(" \u2014 "),QI=a("a"),qio=o("LayoutLMv2Config"),jio=o(" (LayoutLMv2 model)"),Dio=l(),yg=a("li"),qce=a("strong"),Gio=o("layoutlmv3"),Oio=o(" \u2014 "),WI=a("a"),Vio=o("LayoutLMv3Config"),Xio=o(" (LayoutLMv3 model)"),zio=l(),xg=a("li"),jce=a("strong"),Qio=o("led"),Wio=o(" \u2014 "),UI=a("a"),Uio=o("LEDConfig"),Hio=o(" (LED model)"),Jio=l(),$g=a("li"),Dce=a("strong"),Yio=o("levit"),Kio=o(" \u2014 "),HI=a("a"),Zio=o("LevitConfig"),edo=o(" (LeViT model)"),odo=l(),kg=a("li"),Gce=a("strong"),rdo=o("longformer"),tdo=o(" \u2014 "),JI=a("a"),ado=o("LongformerConfig"),ndo=o(" (Longformer model)"),sdo=l(),Sg=a("li"),Oce=a("strong"),ldo=o("longt5"),ido=o(" \u2014 "),YI=a("a"),ddo=o("LongT5Config"),cdo=o(" (LongT5 model)"),mdo=l(),Rg=a("li"),Vce=a("strong"),fdo=o("luke"),gdo=o(" \u2014 "),KI=a("a"),hdo=o("LukeConfig"),udo=o(" (LUKE model)"),pdo=l(),Pg=a("li"),Xce=a("strong"),_do=o("lxmert"),bdo=o(" \u2014 "),ZI=a("a"),vdo=o("LxmertConfig"),Fdo=o(" (LXMERT model)"),Tdo=l(),Bg=a("li"),zce=a("strong"),Mdo=o("m2m_100"),Edo=o(" \u2014 "),eN=a("a"),Cdo=o("M2M100Config"),wdo=o(" (M2M100 model)"),Ado=l(),Ig=a("li"),Qce=a("strong"),Ldo=o("marian"),ydo=o(" \u2014 "),oN=a("a"),xdo=o("MarianConfig"),$do=o(" (Marian model)"),kdo=l(),Ng=a("li"),Wce=a("strong"),Sdo=o("maskformer"),Rdo=o(" \u2014 "),rN=a("a"),Pdo=o("MaskFormerConfig"),Bdo=o(" (MaskFormer model)"),Ido=l(),qg=a("li"),Uce=a("strong"),Ndo=o("mbart"),qdo=o(" \u2014 "),tN=a("a"),jdo=o("MBartConfig"),Ddo=o(" (mBART model)"),Gdo=l(),jg=a("li"),Hce=a("strong"),Odo=o("mctct"),Vdo=o(" \u2014 "),aN=a("a"),Xdo=o("MCTCTConfig"),zdo=o(" (M-CTC-T model)"),Qdo=l(),Dg=a("li"),Jce=a("strong"),Wdo=o("megatron-bert"),Udo=o(" \u2014 "),nN=a("a"),Hdo=o("MegatronBertConfig"),Jdo=o(" (Megatron-BERT model)"),Ydo=l(),Gg=a("li"),Yce=a("strong"),Kdo=o("mobilebert"),Zdo=o(" \u2014 "),sN=a("a"),eco=o("MobileBertConfig"),oco=o(" (MobileBERT model)"),rco=l(),Og=a("li"),Kce=a("strong"),tco=o("mobilevit"),aco=o(" \u2014 "),lN=a("a"),nco=o("MobileViTConfig"),sco=o(" (MobileViT model)"),lco=l(),Vg=a("li"),Zce=a("strong"),ico=o("mpnet"),dco=o(" \u2014 "),iN=a("a"),cco=o("MPNetConfig"),mco=o(" (MPNet model)"),fco=l(),Xg=a("li"),eme=a("strong"),gco=o("mt5"),hco=o(" \u2014 "),dN=a("a"),uco=o("MT5Config"),pco=o(" (MT5 model)"),_co=l(),zg=a("li"),ome=a("strong"),bco=o("mvp"),vco=o(" \u2014 "),cN=a("a"),Fco=o("MvpConfig"),Tco=o(" (MVP model)"),Mco=l(),Qg=a("li"),rme=a("strong"),Eco=o("nezha"),Cco=o(" \u2014 "),mN=a("a"),wco=o("NezhaConfig"),Aco=o(" (Nezha model)"),Lco=l(),Wg=a("li"),tme=a("strong"),yco=o("nystromformer"),xco=o(" \u2014 "),fN=a("a"),$co=o("NystromformerConfig"),kco=o(" (Nystr\xF6mformer model)"),Sco=l(),Ug=a("li"),ame=a("strong"),Rco=o("openai-gpt"),Pco=o(" \u2014 "),gN=a("a"),Bco=o("OpenAIGPTConfig"),Ico=o(" (OpenAI GPT model)"),Nco=l(),Hg=a("li"),nme=a("strong"),qco=o("opt"),jco=o(" \u2014 "),hN=a("a"),Dco=o("OPTConfig"),Gco=o(" (OPT model)"),Oco=l(),Jg=a("li"),sme=a("strong"),Vco=o("owlvit"),Xco=o(" \u2014 "),uN=a("a"),zco=o("OwlViTConfig"),Qco=o(" (OWL-ViT model)"),Wco=l(),Yg=a("li"),lme=a("strong"),Uco=o("pegasus"),Hco=o(" \u2014 "),pN=a("a"),Jco=o("PegasusConfig"),Yco=o(" (Pegasus model)"),Kco=l(),Kg=a("li"),ime=a("strong"),Zco=o("pegasus_x"),emo=o(" \u2014 "),_N=a("a"),omo=o("PegasusXConfig"),rmo=o(" (PEGASUS-X model)"),tmo=l(),Zg=a("li"),dme=a("strong"),amo=o("perceiver"),nmo=o(" \u2014 "),bN=a("a"),smo=o("PerceiverConfig"),lmo=o(" (Perceiver model)"),imo=l(),eh=a("li"),cme=a("strong"),dmo=o("plbart"),cmo=o(" \u2014 "),vN=a("a"),mmo=o("PLBartConfig"),fmo=o(" (PLBart model)"),gmo=l(),oh=a("li"),mme=a("strong"),hmo=o("poolformer"),umo=o(" \u2014 "),FN=a("a"),pmo=o("PoolFormerConfig"),_mo=o(" (PoolFormer model)"),bmo=l(),rh=a("li"),fme=a("strong"),vmo=o("prophetnet"),Fmo=o(" \u2014 "),TN=a("a"),Tmo=o("ProphetNetConfig"),Mmo=o(" (ProphetNet model)"),Emo=l(),th=a("li"),gme=a("strong"),Cmo=o("qdqbert"),wmo=o(" \u2014 "),MN=a("a"),Amo=o("QDQBertConfig"),Lmo=o(" (QDQBert model)"),ymo=l(),ah=a("li"),hme=a("strong"),xmo=o("rag"),$mo=o(" \u2014 "),EN=a("a"),kmo=o("RagConfig"),Smo=o(" (RAG model)"),Rmo=l(),nh=a("li"),ume=a("strong"),Pmo=o("realm"),Bmo=o(" \u2014 "),CN=a("a"),Imo=o("RealmConfig"),Nmo=o(" (REALM model)"),qmo=l(),sh=a("li"),pme=a("strong"),jmo=o("reformer"),Dmo=o(" \u2014 "),wN=a("a"),Gmo=o("ReformerConfig"),Omo=o(" (Reformer model)"),Vmo=l(),lh=a("li"),_me=a("strong"),Xmo=o("regnet"),zmo=o(" \u2014 "),AN=a("a"),Qmo=o("RegNetConfig"),Wmo=o(" (RegNet model)"),Umo=l(),ih=a("li"),bme=a("strong"),Hmo=o("rembert"),Jmo=o(" \u2014 "),LN=a("a"),Ymo=o("RemBertConfig"),Kmo=o(" (RemBERT model)"),Zmo=l(),dh=a("li"),vme=a("strong"),efo=o("resnet"),ofo=o(" \u2014 "),yN=a("a"),rfo=o("ResNetConfig"),tfo=o(" (ResNet model)"),afo=l(),ch=a("li"),Fme=a("strong"),nfo=o("retribert"),sfo=o(" \u2014 "),xN=a("a"),lfo=o("RetriBertConfig"),ifo=o(" (RetriBERT model)"),dfo=l(),mh=a("li"),Tme=a("strong"),cfo=o("roberta"),mfo=o(" \u2014 "),$N=a("a"),ffo=o("RobertaConfig"),gfo=o(" (RoBERTa model)"),hfo=l(),fh=a("li"),Mme=a("strong"),ufo=o("roformer"),pfo=o(" \u2014 "),kN=a("a"),_fo=o("RoFormerConfig"),bfo=o(" (RoFormer model)"),vfo=l(),gh=a("li"),Eme=a("strong"),Ffo=o("segformer"),Tfo=o(" \u2014 "),SN=a("a"),Mfo=o("SegformerConfig"),Efo=o(" (SegFormer model)"),Cfo=l(),hh=a("li"),Cme=a("strong"),wfo=o("sew"),Afo=o(" \u2014 "),RN=a("a"),Lfo=o("SEWConfig"),yfo=o(" (SEW model)"),xfo=l(),uh=a("li"),wme=a("strong"),$fo=o("sew-d"),kfo=o(" \u2014 "),PN=a("a"),Sfo=o("SEWDConfig"),Rfo=o(" (SEW-D model)"),Pfo=l(),ph=a("li"),Ame=a("strong"),Bfo=o("speech-encoder-decoder"),Ifo=o(" \u2014 "),BN=a("a"),Nfo=o("SpeechEncoderDecoderConfig"),qfo=o(" (Speech Encoder decoder model)"),jfo=l(),_h=a("li"),Lme=a("strong"),Dfo=o("speech_to_text"),Gfo=o(" \u2014 "),IN=a("a"),Ofo=o("Speech2TextConfig"),Vfo=o(" (Speech2Text model)"),Xfo=l(),bh=a("li"),yme=a("strong"),zfo=o("speech_to_text_2"),Qfo=o(" \u2014 "),NN=a("a"),Wfo=o("Speech2Text2Config"),Ufo=o(" (Speech2Text2 model)"),Hfo=l(),vh=a("li"),xme=a("strong"),Jfo=o("splinter"),Yfo=o(" \u2014 "),qN=a("a"),Kfo=o("SplinterConfig"),Zfo=o(" (Splinter model)"),ego=l(),Fh=a("li"),$me=a("strong"),ogo=o("squeezebert"),rgo=o(" \u2014 "),jN=a("a"),tgo=o("SqueezeBertConfig"),ago=o(" (SqueezeBERT model)"),ngo=l(),Th=a("li"),kme=a("strong"),sgo=o("swin"),lgo=o(" \u2014 "),DN=a("a"),igo=o("SwinConfig"),dgo=o(" (Swin Transformer model)"),cgo=l(),Mh=a("li"),Sme=a("strong"),mgo=o("swinv2"),fgo=o(" \u2014 "),GN=a("a"),ggo=o("Swinv2Config"),hgo=o(" (Swin Transformer V2 model)"),ugo=l(),Eh=a("li"),Rme=a("strong"),pgo=o("t5"),_go=o(" \u2014 "),ON=a("a"),bgo=o("T5Config"),vgo=o(" (T5 model)"),Fgo=l(),Ch=a("li"),Pme=a("strong"),Tgo=o("tapas"),Mgo=o(" \u2014 "),VN=a("a"),Ego=o("TapasConfig"),Cgo=o(" (TAPAS model)"),wgo=l(),wh=a("li"),Bme=a("strong"),Ago=o("trajectory_transformer"),Lgo=o(" \u2014 "),XN=a("a"),ygo=o("TrajectoryTransformerConfig"),xgo=o(" (Trajectory Transformer model)"),$go=l(),Ah=a("li"),Ime=a("strong"),kgo=o("transfo-xl"),Sgo=o(" \u2014 "),zN=a("a"),Rgo=o("TransfoXLConfig"),Pgo=o(" (Transformer-XL model)"),Bgo=l(),Lh=a("li"),Nme=a("strong"),Igo=o("trocr"),Ngo=o(" \u2014 "),QN=a("a"),qgo=o("TrOCRConfig"),jgo=o(" (TrOCR model)"),Dgo=l(),yh=a("li"),qme=a("strong"),Ggo=o("unispeech"),Ogo=o(" \u2014 "),WN=a("a"),Vgo=o("UniSpeechConfig"),Xgo=o(" (UniSpeech model)"),zgo=l(),xh=a("li"),jme=a("strong"),Qgo=o("unispeech-sat"),Wgo=o(" \u2014 "),UN=a("a"),Ugo=o("UniSpeechSatConfig"),Hgo=o(" (UniSpeechSat model)"),Jgo=l(),$h=a("li"),Dme=a("strong"),Ygo=o("van"),Kgo=o(" \u2014 "),HN=a("a"),Zgo=o("VanConfig"),eho=o(" (VAN model)"),oho=l(),kh=a("li"),Gme=a("strong"),rho=o("videomae"),tho=o(" \u2014 "),JN=a("a"),aho=o("VideoMAEConfig"),nho=o(" (VideoMAE model)"),sho=l(),Sh=a("li"),Ome=a("strong"),lho=o("vilt"),iho=o(" \u2014 "),YN=a("a"),dho=o("ViltConfig"),cho=o(" (ViLT model)"),mho=l(),Rh=a("li"),Vme=a("strong"),fho=o("vision-encoder-decoder"),gho=o(" \u2014 "),KN=a("a"),hho=o("VisionEncoderDecoderConfig"),uho=o(" (Vision Encoder decoder model)"),pho=l(),Ph=a("li"),Xme=a("strong"),_ho=o("vision-text-dual-encoder"),bho=o(" \u2014 "),ZN=a("a"),vho=o("VisionTextDualEncoderConfig"),Fho=o(" (VisionTextDualEncoder model)"),Tho=l(),Bh=a("li"),zme=a("strong"),Mho=o("visual_bert"),Eho=o(" \u2014 "),eq=a("a"),Cho=o("VisualBertConfig"),who=o(" (VisualBERT model)"),Aho=l(),Ih=a("li"),Qme=a("strong"),Lho=o("vit"),yho=o(" \u2014 "),oq=a("a"),xho=o("ViTConfig"),$ho=o(" (ViT model)"),kho=l(),Nh=a("li"),Wme=a("strong"),Sho=o("vit_mae"),Rho=o(" \u2014 "),rq=a("a"),Pho=o("ViTMAEConfig"),Bho=o(" (ViTMAE model)"),Iho=l(),qh=a("li"),Ume=a("strong"),Nho=o("vit_msn"),qho=o(" \u2014 "),tq=a("a"),jho=o("ViTMSNConfig"),Dho=o(" (ViTMSN model)"),Gho=l(),jh=a("li"),Hme=a("strong"),Oho=o("wav2vec2"),Vho=o(" \u2014 "),aq=a("a"),Xho=o("Wav2Vec2Config"),zho=o(" (Wav2Vec2 model)"),Qho=l(),Dh=a("li"),Jme=a("strong"),Who=o("wav2vec2-conformer"),Uho=o(" \u2014 "),nq=a("a"),Hho=o("Wav2Vec2ConformerConfig"),Jho=o(" (Wav2Vec2-Conformer model)"),Yho=l(),Gh=a("li"),Yme=a("strong"),Kho=o("wavlm"),Zho=o(" \u2014 "),sq=a("a"),euo=o("WavLMConfig"),ouo=o(" (WavLM model)"),ruo=l(),Oh=a("li"),Kme=a("strong"),tuo=o("xclip"),auo=o(" \u2014 "),lq=a("a"),nuo=o("XCLIPConfig"),suo=o(" (X-CLIP model)"),luo=l(),Vh=a("li"),Zme=a("strong"),iuo=o("xglm"),duo=o(" \u2014 "),iq=a("a"),cuo=o("XGLMConfig"),muo=o(" (XGLM model)"),fuo=l(),Xh=a("li"),efe=a("strong"),guo=o("xlm"),huo=o(" \u2014 "),dq=a("a"),uuo=o("XLMConfig"),puo=o(" (XLM model)"),_uo=l(),zh=a("li"),ofe=a("strong"),buo=o("xlm-prophetnet"),vuo=o(" \u2014 "),cq=a("a"),Fuo=o("XLMProphetNetConfig"),Tuo=o(" (XLM-ProphetNet model)"),Muo=l(),Qh=a("li"),rfe=a("strong"),Euo=o("xlm-roberta"),Cuo=o(" \u2014 "),mq=a("a"),wuo=o("XLMRobertaConfig"),Auo=o(" (XLM-RoBERTa model)"),Luo=l(),Wh=a("li"),tfe=a("strong"),yuo=o("xlm-roberta-xl"),xuo=o(" \u2014 "),fq=a("a"),$uo=o("XLMRobertaXLConfig"),kuo=o(" (XLM-RoBERTa-XL model)"),Suo=l(),Uh=a("li"),afe=a("strong"),Ruo=o("xlnet"),Puo=o(" \u2014 "),gq=a("a"),Buo=o("XLNetConfig"),Iuo=o(" (XLNet model)"),Nuo=l(),Hh=a("li"),nfe=a("strong"),quo=o("yolos"),juo=o(" \u2014 "),hq=a("a"),Duo=o("YolosConfig"),Guo=o(" (YOLOS model)"),Ouo=l(),Jh=a("li"),sfe=a("strong"),Vuo=o("yoso"),Xuo=o(" \u2014 "),uq=a("a"),zuo=o("YosoConfig"),Quo=o(" (YOSO model)"),Wuo=l(),F(Yh.$$.fragment),Uuo=l(),Kh=a("div"),F(H9.$$.fragment),Huo=l(),lfe=a("p"),Juo=o("Register a new configuration for this class."),ZKe=l(),gd=a("h2"),Zh=a("a"),ife=a("span"),F(J9.$$.fragment),Yuo=l(),dfe=a("span"),Kuo=o("AutoTokenizer"),eZe=l(),ko=a("div"),F(Y9.$$.fragment),Zuo=l(),K9=a("p"),epo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pq=a("a"),opo=o("AutoTokenizer.from_pretrained()"),rpo=o(" class method."),tpo=l(),Z9=a("p"),apo=o("This class cannot be instantiated directly using "),cfe=a("code"),npo=o("__init__()"),spo=o(" (throws an error)."),lpo=l(),Br=a("div"),F(ex.$$.fragment),ipo=l(),mfe=a("p"),dpo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cpo=l(),Ua=a("p"),mpo=o("The tokenizer class to instantiate is selected based on the "),ffe=a("code"),fpo=o("model_type"),gpo=o(` property of the config object (either
passed as an argument or loaded from `),gfe=a("code"),hpo=o("pretrained_model_name_or_path"),upo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=a("code"),ppo=o("pretrained_model_name_or_path"),_po=o(":"),bpo=l(),k=a("ul"),ns=a("li"),ufe=a("strong"),vpo=o("albert"),Fpo=o(" \u2014 "),_q=a("a"),Tpo=o("AlbertTokenizer"),Mpo=o(" or "),bq=a("a"),Epo=o("AlbertTokenizerFast"),Cpo=o(" (ALBERT model)"),wpo=l(),ss=a("li"),pfe=a("strong"),Apo=o("bart"),Lpo=o(" \u2014 "),vq=a("a"),ypo=o("BartTokenizer"),xpo=o(" or "),Fq=a("a"),$po=o("BartTokenizerFast"),kpo=o(" (BART model)"),Spo=l(),ls=a("li"),_fe=a("strong"),Rpo=o("barthez"),Ppo=o(" \u2014 "),Tq=a("a"),Bpo=o("BarthezTokenizer"),Ipo=o(" or "),Mq=a("a"),Npo=o("BarthezTokenizerFast"),qpo=o(" (BARThez model)"),jpo=l(),eu=a("li"),bfe=a("strong"),Dpo=o("bartpho"),Gpo=o(" \u2014 "),Eq=a("a"),Opo=o("BartphoTokenizer"),Vpo=o(" (BARTpho model)"),Xpo=l(),is=a("li"),vfe=a("strong"),zpo=o("bert"),Qpo=o(" \u2014 "),Cq=a("a"),Wpo=o("BertTokenizer"),Upo=o(" or "),wq=a("a"),Hpo=o("BertTokenizerFast"),Jpo=o(" (BERT model)"),Ypo=l(),ou=a("li"),Ffe=a("strong"),Kpo=o("bert-generation"),Zpo=o(" \u2014 "),Aq=a("a"),e_o=o("BertGenerationTokenizer"),o_o=o(" (Bert Generation model)"),r_o=l(),ru=a("li"),Tfe=a("strong"),t_o=o("bert-japanese"),a_o=o(" \u2014 "),Lq=a("a"),n_o=o("BertJapaneseTokenizer"),s_o=o(" (BertJapanese model)"),l_o=l(),tu=a("li"),Mfe=a("strong"),i_o=o("bertweet"),d_o=o(" \u2014 "),yq=a("a"),c_o=o("BertweetTokenizer"),m_o=o(" (BERTweet model)"),f_o=l(),ds=a("li"),Efe=a("strong"),g_o=o("big_bird"),h_o=o(" \u2014 "),xq=a("a"),u_o=o("BigBirdTokenizer"),p_o=o(" or "),$q=a("a"),__o=o("BigBirdTokenizerFast"),b_o=o(" (BigBird model)"),v_o=l(),cs=a("li"),Cfe=a("strong"),F_o=o("bigbird_pegasus"),T_o=o(" \u2014 "),kq=a("a"),M_o=o("PegasusTokenizer"),E_o=o(" or "),Sq=a("a"),C_o=o("PegasusTokenizerFast"),w_o=o(" (BigBird-Pegasus model)"),A_o=l(),ms=a("li"),wfe=a("strong"),L_o=o("blenderbot"),y_o=o(" \u2014 "),Rq=a("a"),x_o=o("BlenderbotTokenizer"),$_o=o(" or "),Pq=a("a"),k_o=o("BlenderbotTokenizerFast"),S_o=o(" (Blenderbot model)"),R_o=l(),au=a("li"),Afe=a("strong"),P_o=o("blenderbot-small"),B_o=o(" \u2014 "),Bq=a("a"),I_o=o("BlenderbotSmallTokenizer"),N_o=o(" (BlenderbotSmall model)"),q_o=l(),nu=a("li"),Lfe=a("strong"),j_o=o("bloom"),D_o=o(" \u2014 "),Iq=a("a"),G_o=o("BloomTokenizerFast"),O_o=o(" (BLOOM model)"),V_o=l(),su=a("li"),yfe=a("strong"),X_o=o("byt5"),z_o=o(" \u2014 "),Nq=a("a"),Q_o=o("ByT5Tokenizer"),W_o=o(" (ByT5 model)"),U_o=l(),fs=a("li"),xfe=a("strong"),H_o=o("camembert"),J_o=o(" \u2014 "),qq=a("a"),Y_o=o("CamembertTokenizer"),K_o=o(" or "),jq=a("a"),Z_o=o("CamembertTokenizerFast"),ebo=o(" (CamemBERT model)"),obo=l(),lu=a("li"),$fe=a("strong"),rbo=o("canine"),tbo=o(" \u2014 "),Dq=a("a"),abo=o("CanineTokenizer"),nbo=o(" (CANINE model)"),sbo=l(),gs=a("li"),kfe=a("strong"),lbo=o("clip"),ibo=o(" \u2014 "),Gq=a("a"),dbo=o("CLIPTokenizer"),cbo=o(" or "),Oq=a("a"),mbo=o("CLIPTokenizerFast"),fbo=o(" (CLIP model)"),gbo=l(),hs=a("li"),Sfe=a("strong"),hbo=o("codegen"),ubo=o(" \u2014 "),Vq=a("a"),pbo=o("CodeGenTokenizer"),_bo=o(" or "),Xq=a("a"),bbo=o("CodeGenTokenizerFast"),vbo=o(" (CodeGen model)"),Fbo=l(),us=a("li"),Rfe=a("strong"),Tbo=o("convbert"),Mbo=o(" \u2014 "),zq=a("a"),Ebo=o("ConvBertTokenizer"),Cbo=o(" or "),Qq=a("a"),wbo=o("ConvBertTokenizerFast"),Abo=o(" (ConvBERT model)"),Lbo=l(),ps=a("li"),Pfe=a("strong"),ybo=o("cpm"),xbo=o(" \u2014 "),Wq=a("a"),$bo=o("CpmTokenizer"),kbo=o(" or "),Uq=a("a"),Sbo=o("CpmTokenizerFast"),Rbo=o(" (CPM model)"),Pbo=l(),iu=a("li"),Bfe=a("strong"),Bbo=o("ctrl"),Ibo=o(" \u2014 "),Hq=a("a"),Nbo=o("CTRLTokenizer"),qbo=o(" (CTRL model)"),jbo=l(),_s=a("li"),Ife=a("strong"),Dbo=o("data2vec-text"),Gbo=o(" \u2014 "),Jq=a("a"),Obo=o("RobertaTokenizer"),Vbo=o(" or "),Yq=a("a"),Xbo=o("RobertaTokenizerFast"),zbo=o(" (Data2VecText model)"),Qbo=l(),bs=a("li"),Nfe=a("strong"),Wbo=o("deberta"),Ubo=o(" \u2014 "),Kq=a("a"),Hbo=o("DebertaTokenizer"),Jbo=o(" or "),Zq=a("a"),Ybo=o("DebertaTokenizerFast"),Kbo=o(" (DeBERTa model)"),Zbo=l(),vs=a("li"),qfe=a("strong"),e2o=o("deberta-v2"),o2o=o(" \u2014 "),ej=a("a"),r2o=o("DebertaV2Tokenizer"),t2o=o(" or "),oj=a("a"),a2o=o("DebertaV2TokenizerFast"),n2o=o(" (DeBERTa-v2 model)"),s2o=l(),Fs=a("li"),jfe=a("strong"),l2o=o("distilbert"),i2o=o(" \u2014 "),rj=a("a"),d2o=o("DistilBertTokenizer"),c2o=o(" or "),tj=a("a"),m2o=o("DistilBertTokenizerFast"),f2o=o(" (DistilBERT model)"),g2o=l(),Ts=a("li"),Dfe=a("strong"),h2o=o("dpr"),u2o=o(" \u2014 "),aj=a("a"),p2o=o("DPRQuestionEncoderTokenizer"),_2o=o(" or "),nj=a("a"),b2o=o("DPRQuestionEncoderTokenizerFast"),v2o=o(" (DPR model)"),F2o=l(),Ms=a("li"),Gfe=a("strong"),T2o=o("electra"),M2o=o(" \u2014 "),sj=a("a"),E2o=o("ElectraTokenizer"),C2o=o(" or "),lj=a("a"),w2o=o("ElectraTokenizerFast"),A2o=o(" (ELECTRA model)"),L2o=l(),Es=a("li"),Ofe=a("strong"),y2o=o("ernie"),x2o=o(" \u2014 "),ij=a("a"),$2o=o("BertTokenizer"),k2o=o(" or "),dj=a("a"),S2o=o("BertTokenizerFast"),R2o=o(" (ERNIE model)"),P2o=l(),du=a("li"),Vfe=a("strong"),B2o=o("flaubert"),I2o=o(" \u2014 "),cj=a("a"),N2o=o("FlaubertTokenizer"),q2o=o(" (FlauBERT model)"),j2o=l(),Cs=a("li"),Xfe=a("strong"),D2o=o("fnet"),G2o=o(" \u2014 "),mj=a("a"),O2o=o("FNetTokenizer"),V2o=o(" or "),fj=a("a"),X2o=o("FNetTokenizerFast"),z2o=o(" (FNet model)"),Q2o=l(),cu=a("li"),zfe=a("strong"),W2o=o("fsmt"),U2o=o(" \u2014 "),gj=a("a"),H2o=o("FSMTTokenizer"),J2o=o(" (FairSeq Machine-Translation model)"),Y2o=l(),ws=a("li"),Qfe=a("strong"),K2o=o("funnel"),Z2o=o(" \u2014 "),hj=a("a"),e1o=o("FunnelTokenizer"),o1o=o(" or "),uj=a("a"),r1o=o("FunnelTokenizerFast"),t1o=o(" (Funnel Transformer model)"),a1o=l(),As=a("li"),Wfe=a("strong"),n1o=o("gpt2"),s1o=o(" \u2014 "),pj=a("a"),l1o=o("GPT2Tokenizer"),i1o=o(" or "),_j=a("a"),d1o=o("GPT2TokenizerFast"),c1o=o(" (OpenAI GPT-2 model)"),m1o=l(),Ls=a("li"),Ufe=a("strong"),f1o=o("gpt_neo"),g1o=o(" \u2014 "),bj=a("a"),h1o=o("GPT2Tokenizer"),u1o=o(" or "),vj=a("a"),p1o=o("GPT2TokenizerFast"),_1o=o(" (GPT Neo model)"),b1o=l(),mu=a("li"),Hfe=a("strong"),v1o=o("gpt_neox"),F1o=o(" \u2014 "),Fj=a("a"),T1o=o("GPTNeoXTokenizerFast"),M1o=o(" (GPT NeoX model)"),E1o=l(),fu=a("li"),Jfe=a("strong"),C1o=o("gpt_neox_japanese"),w1o=o(" \u2014 "),Tj=a("a"),A1o=o("GPTNeoXJapaneseTokenizer"),L1o=o(" (GPT NeoX Japanese model)"),y1o=l(),ys=a("li"),Yfe=a("strong"),x1o=o("gptj"),$1o=o(" \u2014 "),Mj=a("a"),k1o=o("GPT2Tokenizer"),S1o=o(" or "),Ej=a("a"),R1o=o("GPT2TokenizerFast"),P1o=o(" (GPT-J model)"),B1o=l(),xs=a("li"),Kfe=a("strong"),I1o=o("groupvit"),N1o=o(" \u2014 "),Cj=a("a"),q1o=o("CLIPTokenizer"),j1o=o(" or "),wj=a("a"),D1o=o("CLIPTokenizerFast"),G1o=o(" (GroupViT model)"),O1o=l(),$s=a("li"),Zfe=a("strong"),V1o=o("herbert"),X1o=o(" \u2014 "),Aj=a("a"),z1o=o("HerbertTokenizer"),Q1o=o(" or "),Lj=a("a"),W1o=o("HerbertTokenizerFast"),U1o=o(" (HerBERT model)"),H1o=l(),gu=a("li"),ege=a("strong"),J1o=o("hubert"),Y1o=o(" \u2014 "),yj=a("a"),K1o=o("Wav2Vec2CTCTokenizer"),Z1o=o(" (Hubert model)"),evo=l(),ks=a("li"),oge=a("strong"),ovo=o("ibert"),rvo=o(" \u2014 "),xj=a("a"),tvo=o("RobertaTokenizer"),avo=o(" or "),$j=a("a"),nvo=o("RobertaTokenizerFast"),svo=o(" (I-BERT model)"),lvo=l(),Ss=a("li"),rge=a("strong"),ivo=o("layoutlm"),dvo=o(" \u2014 "),kj=a("a"),cvo=o("LayoutLMTokenizer"),mvo=o(" or "),Sj=a("a"),fvo=o("LayoutLMTokenizerFast"),gvo=o(" (LayoutLM model)"),hvo=l(),Rs=a("li"),tge=a("strong"),uvo=o("layoutlmv2"),pvo=o(" \u2014 "),Rj=a("a"),_vo=o("LayoutLMv2Tokenizer"),bvo=o(" or "),Pj=a("a"),vvo=o("LayoutLMv2TokenizerFast"),Fvo=o(" (LayoutLMv2 model)"),Tvo=l(),Ps=a("li"),age=a("strong"),Mvo=o("layoutlmv3"),Evo=o(" \u2014 "),Bj=a("a"),Cvo=o("LayoutLMv3Tokenizer"),wvo=o(" or "),Ij=a("a"),Avo=o("LayoutLMv3TokenizerFast"),Lvo=o(" (LayoutLMv3 model)"),yvo=l(),Bs=a("li"),nge=a("strong"),xvo=o("layoutxlm"),$vo=o(" \u2014 "),Nj=a("a"),kvo=o("LayoutXLMTokenizer"),Svo=o(" or "),qj=a("a"),Rvo=o("LayoutXLMTokenizerFast"),Pvo=o(" (LayoutXLM model)"),Bvo=l(),Is=a("li"),sge=a("strong"),Ivo=o("led"),Nvo=o(" \u2014 "),jj=a("a"),qvo=o("LEDTokenizer"),jvo=o(" or "),Dj=a("a"),Dvo=o("LEDTokenizerFast"),Gvo=o(" (LED model)"),Ovo=l(),Ns=a("li"),lge=a("strong"),Vvo=o("longformer"),Xvo=o(" \u2014 "),Gj=a("a"),zvo=o("LongformerTokenizer"),Qvo=o(" or "),Oj=a("a"),Wvo=o("LongformerTokenizerFast"),Uvo=o(" (Longformer model)"),Hvo=l(),qs=a("li"),ige=a("strong"),Jvo=o("longt5"),Yvo=o(" \u2014 "),Vj=a("a"),Kvo=o("T5Tokenizer"),Zvo=o(" or "),Xj=a("a"),eFo=o("T5TokenizerFast"),oFo=o(" (LongT5 model)"),rFo=l(),hu=a("li"),dge=a("strong"),tFo=o("luke"),aFo=o(" \u2014 "),zj=a("a"),nFo=o("LukeTokenizer"),sFo=o(" (LUKE model)"),lFo=l(),js=a("li"),cge=a("strong"),iFo=o("lxmert"),dFo=o(" \u2014 "),Qj=a("a"),cFo=o("LxmertTokenizer"),mFo=o(" or "),Wj=a("a"),fFo=o("LxmertTokenizerFast"),gFo=o(" (LXMERT model)"),hFo=l(),uu=a("li"),mge=a("strong"),uFo=o("m2m_100"),pFo=o(" \u2014 "),Uj=a("a"),_Fo=o("M2M100Tokenizer"),bFo=o(" (M2M100 model)"),vFo=l(),pu=a("li"),fge=a("strong"),FFo=o("marian"),TFo=o(" \u2014 "),Hj=a("a"),MFo=o("MarianTokenizer"),EFo=o(" (Marian model)"),CFo=l(),Ds=a("li"),gge=a("strong"),wFo=o("mbart"),AFo=o(" \u2014 "),Jj=a("a"),LFo=o("MBartTokenizer"),yFo=o(" or "),Yj=a("a"),xFo=o("MBartTokenizerFast"),$Fo=o(" (mBART model)"),kFo=l(),Gs=a("li"),hge=a("strong"),SFo=o("mbart50"),RFo=o(" \u2014 "),Kj=a("a"),PFo=o("MBart50Tokenizer"),BFo=o(" or "),Zj=a("a"),IFo=o("MBart50TokenizerFast"),NFo=o(" (mBART-50 model)"),qFo=l(),Os=a("li"),uge=a("strong"),jFo=o("megatron-bert"),DFo=o(" \u2014 "),eD=a("a"),GFo=o("BertTokenizer"),OFo=o(" or "),oD=a("a"),VFo=o("BertTokenizerFast"),XFo=o(" (Megatron-BERT model)"),zFo=l(),_u=a("li"),pge=a("strong"),QFo=o("mluke"),WFo=o(" \u2014 "),rD=a("a"),UFo=o("MLukeTokenizer"),HFo=o(" (mLUKE model)"),JFo=l(),Vs=a("li"),_ge=a("strong"),YFo=o("mobilebert"),KFo=o(" \u2014 "),tD=a("a"),ZFo=o("MobileBertTokenizer"),eTo=o(" or "),aD=a("a"),oTo=o("MobileBertTokenizerFast"),rTo=o(" (MobileBERT model)"),tTo=l(),Xs=a("li"),bge=a("strong"),aTo=o("mpnet"),nTo=o(" \u2014 "),nD=a("a"),sTo=o("MPNetTokenizer"),lTo=o(" or "),sD=a("a"),iTo=o("MPNetTokenizerFast"),dTo=o(" (MPNet model)"),cTo=l(),zs=a("li"),vge=a("strong"),mTo=o("mt5"),fTo=o(" \u2014 "),lD=a("a"),gTo=o("MT5Tokenizer"),hTo=o(" or "),iD=a("a"),uTo=o("MT5TokenizerFast"),pTo=o(" (MT5 model)"),_To=l(),Qs=a("li"),Fge=a("strong"),bTo=o("mvp"),vTo=o(" \u2014 "),dD=a("a"),FTo=o("MvpTokenizer"),TTo=o(" or "),cD=a("a"),MTo=o("MvpTokenizerFast"),ETo=o(" (MVP model)"),CTo=l(),Ws=a("li"),Tge=a("strong"),wTo=o("nezha"),ATo=o(" \u2014 "),mD=a("a"),LTo=o("BertTokenizer"),yTo=o(" or "),fD=a("a"),xTo=o("BertTokenizerFast"),$To=o(" (Nezha model)"),kTo=l(),Us=a("li"),Mge=a("strong"),STo=o("nllb"),RTo=o(" \u2014 "),gD=a("a"),PTo=o("NllbTokenizer"),BTo=o(" or "),hD=a("a"),ITo=o("NllbTokenizerFast"),NTo=o(" (NLLB model)"),qTo=l(),Hs=a("li"),Ege=a("strong"),jTo=o("nystromformer"),DTo=o(" \u2014 "),uD=a("a"),GTo=o("AlbertTokenizer"),OTo=o(" or "),pD=a("a"),VTo=o("AlbertTokenizerFast"),XTo=o(" (Nystr\xF6mformer model)"),zTo=l(),Js=a("li"),Cge=a("strong"),QTo=o("openai-gpt"),WTo=o(" \u2014 "),_D=a("a"),UTo=o("OpenAIGPTTokenizer"),HTo=o(" or "),bD=a("a"),JTo=o("OpenAIGPTTokenizerFast"),YTo=o(" (OpenAI GPT model)"),KTo=l(),bu=a("li"),wge=a("strong"),ZTo=o("opt"),eMo=o(" \u2014 "),vD=a("a"),oMo=o("GPT2Tokenizer"),rMo=o(" (OPT model)"),tMo=l(),Ys=a("li"),Age=a("strong"),aMo=o("owlvit"),nMo=o(" \u2014 "),FD=a("a"),sMo=o("CLIPTokenizer"),lMo=o(" or "),TD=a("a"),iMo=o("CLIPTokenizerFast"),dMo=o(" (OWL-ViT model)"),cMo=l(),Ks=a("li"),Lge=a("strong"),mMo=o("pegasus"),fMo=o(" \u2014 "),MD=a("a"),gMo=o("PegasusTokenizer"),hMo=o(" or "),ED=a("a"),uMo=o("PegasusTokenizerFast"),pMo=o(" (Pegasus model)"),_Mo=l(),vu=a("li"),yge=a("strong"),bMo=o("perceiver"),vMo=o(" \u2014 "),CD=a("a"),FMo=o("PerceiverTokenizer"),TMo=o(" (Perceiver model)"),MMo=l(),Fu=a("li"),xge=a("strong"),EMo=o("phobert"),CMo=o(" \u2014 "),wD=a("a"),wMo=o("PhobertTokenizer"),AMo=o(" (PhoBERT model)"),LMo=l(),Tu=a("li"),$ge=a("strong"),yMo=o("plbart"),xMo=o(" \u2014 "),AD=a("a"),$Mo=o("PLBartTokenizer"),kMo=o(" (PLBart model)"),SMo=l(),Mu=a("li"),kge=a("strong"),RMo=o("prophetnet"),PMo=o(" \u2014 "),LD=a("a"),BMo=o("ProphetNetTokenizer"),IMo=o(" (ProphetNet model)"),NMo=l(),Zs=a("li"),Sge=a("strong"),qMo=o("qdqbert"),jMo=o(" \u2014 "),yD=a("a"),DMo=o("BertTokenizer"),GMo=o(" or "),xD=a("a"),OMo=o("BertTokenizerFast"),VMo=o(" (QDQBert model)"),XMo=l(),Eu=a("li"),Rge=a("strong"),zMo=o("rag"),QMo=o(" \u2014 "),$D=a("a"),WMo=o("RagTokenizer"),UMo=o(" (RAG model)"),HMo=l(),el=a("li"),Pge=a("strong"),JMo=o("realm"),YMo=o(" \u2014 "),kD=a("a"),KMo=o("RealmTokenizer"),ZMo=o(" or "),SD=a("a"),eEo=o("RealmTokenizerFast"),oEo=o(" (REALM model)"),rEo=l(),ol=a("li"),Bge=a("strong"),tEo=o("reformer"),aEo=o(" \u2014 "),RD=a("a"),nEo=o("ReformerTokenizer"),sEo=o(" or "),PD=a("a"),lEo=o("ReformerTokenizerFast"),iEo=o(" (Reformer model)"),dEo=l(),rl=a("li"),Ige=a("strong"),cEo=o("rembert"),mEo=o(" \u2014 "),BD=a("a"),fEo=o("RemBertTokenizer"),gEo=o(" or "),ID=a("a"),hEo=o("RemBertTokenizerFast"),uEo=o(" (RemBERT model)"),pEo=l(),tl=a("li"),Nge=a("strong"),_Eo=o("retribert"),bEo=o(" \u2014 "),ND=a("a"),vEo=o("RetriBertTokenizer"),FEo=o(" or "),qD=a("a"),TEo=o("RetriBertTokenizerFast"),MEo=o(" (RetriBERT model)"),EEo=l(),al=a("li"),qge=a("strong"),CEo=o("roberta"),wEo=o(" \u2014 "),jD=a("a"),AEo=o("RobertaTokenizer"),LEo=o(" or "),DD=a("a"),yEo=o("RobertaTokenizerFast"),xEo=o(" (RoBERTa model)"),$Eo=l(),nl=a("li"),jge=a("strong"),kEo=o("roformer"),SEo=o(" \u2014 "),GD=a("a"),REo=o("RoFormerTokenizer"),PEo=o(" or "),OD=a("a"),BEo=o("RoFormerTokenizerFast"),IEo=o(" (RoFormer model)"),NEo=l(),Cu=a("li"),Dge=a("strong"),qEo=o("speech_to_text"),jEo=o(" \u2014 "),VD=a("a"),DEo=o("Speech2TextTokenizer"),GEo=o(" (Speech2Text model)"),OEo=l(),wu=a("li"),Gge=a("strong"),VEo=o("speech_to_text_2"),XEo=o(" \u2014 "),XD=a("a"),zEo=o("Speech2Text2Tokenizer"),QEo=o(" (Speech2Text2 model)"),WEo=l(),sl=a("li"),Oge=a("strong"),UEo=o("splinter"),HEo=o(" \u2014 "),zD=a("a"),JEo=o("SplinterTokenizer"),YEo=o(" or "),QD=a("a"),KEo=o("SplinterTokenizerFast"),ZEo=o(" (Splinter model)"),e4o=l(),ll=a("li"),Vge=a("strong"),o4o=o("squeezebert"),r4o=o(" \u2014 "),WD=a("a"),t4o=o("SqueezeBertTokenizer"),a4o=o(" or "),UD=a("a"),n4o=o("SqueezeBertTokenizerFast"),s4o=o(" (SqueezeBERT model)"),l4o=l(),il=a("li"),Xge=a("strong"),i4o=o("t5"),d4o=o(" \u2014 "),HD=a("a"),c4o=o("T5Tokenizer"),m4o=o(" or "),JD=a("a"),f4o=o("T5TokenizerFast"),g4o=o(" (T5 model)"),h4o=l(),Au=a("li"),zge=a("strong"),u4o=o("tapas"),p4o=o(" \u2014 "),YD=a("a"),_4o=o("TapasTokenizer"),b4o=o(" (TAPAS model)"),v4o=l(),Lu=a("li"),Qge=a("strong"),F4o=o("tapex"),T4o=o(" \u2014 "),KD=a("a"),M4o=o("TapexTokenizer"),E4o=o(" (TAPEX model)"),C4o=l(),yu=a("li"),Wge=a("strong"),w4o=o("transfo-xl"),A4o=o(" \u2014 "),ZD=a("a"),L4o=o("TransfoXLTokenizer"),y4o=o(" (Transformer-XL model)"),x4o=l(),dl=a("li"),Uge=a("strong"),$4o=o("vilt"),k4o=o(" \u2014 "),eG=a("a"),S4o=o("BertTokenizer"),R4o=o(" or "),oG=a("a"),P4o=o("BertTokenizerFast"),B4o=o(" (ViLT model)"),I4o=l(),cl=a("li"),Hge=a("strong"),N4o=o("visual_bert"),q4o=o(" \u2014 "),rG=a("a"),j4o=o("BertTokenizer"),D4o=o(" or "),tG=a("a"),G4o=o("BertTokenizerFast"),O4o=o(" (VisualBERT model)"),V4o=l(),xu=a("li"),Jge=a("strong"),X4o=o("wav2vec2"),z4o=o(" \u2014 "),aG=a("a"),Q4o=o("Wav2Vec2CTCTokenizer"),W4o=o(" (Wav2Vec2 model)"),U4o=l(),$u=a("li"),Yge=a("strong"),H4o=o("wav2vec2-conformer"),J4o=o(" \u2014 "),nG=a("a"),Y4o=o("Wav2Vec2CTCTokenizer"),K4o=o(" (Wav2Vec2-Conformer model)"),Z4o=l(),ku=a("li"),Kge=a("strong"),eCo=o("wav2vec2_phoneme"),oCo=o(" \u2014 "),sG=a("a"),rCo=o("Wav2Vec2PhonemeCTCTokenizer"),tCo=o(" (Wav2Vec2Phoneme model)"),aCo=l(),ml=a("li"),Zge=a("strong"),nCo=o("xclip"),sCo=o(" \u2014 "),lG=a("a"),lCo=o("CLIPTokenizer"),iCo=o(" or "),iG=a("a"),dCo=o("CLIPTokenizerFast"),cCo=o(" (X-CLIP model)"),mCo=l(),fl=a("li"),ehe=a("strong"),fCo=o("xglm"),gCo=o(" \u2014 "),dG=a("a"),hCo=o("XGLMTokenizer"),uCo=o(" or "),cG=a("a"),pCo=o("XGLMTokenizerFast"),_Co=o(" (XGLM model)"),bCo=l(),Su=a("li"),ohe=a("strong"),vCo=o("xlm"),FCo=o(" \u2014 "),mG=a("a"),TCo=o("XLMTokenizer"),MCo=o(" (XLM model)"),ECo=l(),Ru=a("li"),rhe=a("strong"),CCo=o("xlm-prophetnet"),wCo=o(" \u2014 "),fG=a("a"),ACo=o("XLMProphetNetTokenizer"),LCo=o(" (XLM-ProphetNet model)"),yCo=l(),gl=a("li"),the=a("strong"),xCo=o("xlm-roberta"),$Co=o(" \u2014 "),gG=a("a"),kCo=o("XLMRobertaTokenizer"),SCo=o(" or "),hG=a("a"),RCo=o("XLMRobertaTokenizerFast"),PCo=o(" (XLM-RoBERTa model)"),BCo=l(),hl=a("li"),ahe=a("strong"),ICo=o("xlm-roberta-xl"),NCo=o(" \u2014 "),uG=a("a"),qCo=o("XLMRobertaTokenizer"),jCo=o(" or "),pG=a("a"),DCo=o("XLMRobertaTokenizerFast"),GCo=o(" (XLM-RoBERTa-XL model)"),OCo=l(),ul=a("li"),nhe=a("strong"),VCo=o("xlnet"),XCo=o(" \u2014 "),_G=a("a"),zCo=o("XLNetTokenizer"),QCo=o(" or "),bG=a("a"),WCo=o("XLNetTokenizerFast"),UCo=o(" (XLNet model)"),HCo=l(),pl=a("li"),she=a("strong"),JCo=o("yoso"),YCo=o(" \u2014 "),vG=a("a"),KCo=o("AlbertTokenizer"),ZCo=o(" or "),FG=a("a"),e3o=o("AlbertTokenizerFast"),o3o=o(" (YOSO model)"),r3o=l(),F(Pu.$$.fragment),t3o=l(),Bu=a("div"),F(ox.$$.fragment),a3o=l(),lhe=a("p"),n3o=o("Register a new tokenizer in this mapping."),oZe=l(),hd=a("h2"),Iu=a("a"),ihe=a("span"),F(rx.$$.fragment),s3o=l(),dhe=a("span"),l3o=o("AutoFeatureExtractor"),rZe=l(),So=a("div"),F(tx.$$.fragment),i3o=l(),ax=a("p"),d3o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TG=a("a"),c3o=o("AutoFeatureExtractor.from_pretrained()"),m3o=o(" class method."),f3o=l(),nx=a("p"),g3o=o("This class cannot be instantiated directly using "),che=a("code"),h3o=o("__init__()"),u3o=o(" (throws an error)."),p3o=l(),Ye=a("div"),F(sx.$$.fragment),_3o=l(),mhe=a("p"),b3o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),v3o=l(),Ha=a("p"),F3o=o("The feature extractor class to instantiate is selected based on the "),fhe=a("code"),T3o=o("model_type"),M3o=o(` property of the config object
(either passed as an argument or loaded from `),ghe=a("code"),E3o=o("pretrained_model_name_or_path"),C3o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hhe=a("code"),w3o=o("pretrained_model_name_or_path"),A3o=o(":"),L3o=l(),z=a("ul"),Nu=a("li"),uhe=a("strong"),y3o=o("beit"),x3o=o(" \u2014 "),MG=a("a"),$3o=o("BeitFeatureExtractor"),k3o=o(" (BEiT model)"),S3o=l(),qu=a("li"),phe=a("strong"),R3o=o("clip"),P3o=o(" \u2014 "),EG=a("a"),B3o=o("CLIPFeatureExtractor"),I3o=o(" (CLIP model)"),N3o=l(),ju=a("li"),_he=a("strong"),q3o=o("conditional_detr"),j3o=o(" \u2014 "),CG=a("a"),D3o=o("ConditionalDetrFeatureExtractor"),G3o=o(" (Conditional DETR model)"),O3o=l(),Du=a("li"),bhe=a("strong"),V3o=o("convnext"),X3o=o(" \u2014 "),wG=a("a"),z3o=o("ConvNextFeatureExtractor"),Q3o=o(" (ConvNeXT model)"),W3o=l(),Gu=a("li"),vhe=a("strong"),U3o=o("cvt"),H3o=o(" \u2014 "),AG=a("a"),J3o=o("ConvNextFeatureExtractor"),Y3o=o(" (CvT model)"),K3o=l(),Ou=a("li"),Fhe=a("strong"),Z3o=o("data2vec-audio"),e5o=o(" \u2014 "),LG=a("a"),o5o=o("Wav2Vec2FeatureExtractor"),r5o=o(" (Data2VecAudio model)"),t5o=l(),Vu=a("li"),The=a("strong"),a5o=o("data2vec-vision"),n5o=o(" \u2014 "),yG=a("a"),s5o=o("BeitFeatureExtractor"),l5o=o(" (Data2VecVision model)"),i5o=l(),Xu=a("li"),Mhe=a("strong"),d5o=o("deformable_detr"),c5o=o(" \u2014 "),xG=a("a"),m5o=o("DeformableDetrFeatureExtractor"),f5o=o(" (Deformable DETR model)"),g5o=l(),zu=a("li"),Ehe=a("strong"),h5o=o("deit"),u5o=o(" \u2014 "),$G=a("a"),p5o=o("DeiTFeatureExtractor"),_5o=o(" (DeiT model)"),b5o=l(),Qu=a("li"),Che=a("strong"),v5o=o("detr"),F5o=o(" \u2014 "),kG=a("a"),T5o=o("DetrFeatureExtractor"),M5o=o(" (DETR model)"),E5o=l(),Wu=a("li"),whe=a("strong"),C5o=o("donut"),w5o=o(" \u2014 "),SG=a("a"),A5o=o("DonutFeatureExtractor"),L5o=o(" (Donut model)"),y5o=l(),Uu=a("li"),Ahe=a("strong"),x5o=o("dpt"),$5o=o(" \u2014 "),RG=a("a"),k5o=o("DPTFeatureExtractor"),S5o=o(" (DPT model)"),R5o=l(),Hu=a("li"),Lhe=a("strong"),P5o=o("flava"),B5o=o(" \u2014 "),PG=a("a"),I5o=o("FlavaFeatureExtractor"),N5o=o(" (FLAVA model)"),q5o=l(),Ju=a("li"),yhe=a("strong"),j5o=o("glpn"),D5o=o(" \u2014 "),BG=a("a"),G5o=o("GLPNFeatureExtractor"),O5o=o(" (GLPN model)"),V5o=l(),Yu=a("li"),xhe=a("strong"),X5o=o("groupvit"),z5o=o(" \u2014 "),IG=a("a"),Q5o=o("CLIPFeatureExtractor"),W5o=o(" (GroupViT model)"),U5o=l(),Ku=a("li"),$he=a("strong"),H5o=o("hubert"),J5o=o(" \u2014 "),NG=a("a"),Y5o=o("Wav2Vec2FeatureExtractor"),K5o=o(" (Hubert model)"),Z5o=l(),Zu=a("li"),khe=a("strong"),e0o=o("imagegpt"),o0o=o(" \u2014 "),qG=a("a"),r0o=o("ImageGPTFeatureExtractor"),t0o=o(" (ImageGPT model)"),a0o=l(),ep=a("li"),She=a("strong"),n0o=o("layoutlmv2"),s0o=o(" \u2014 "),jG=a("a"),l0o=o("LayoutLMv2FeatureExtractor"),i0o=o(" (LayoutLMv2 model)"),d0o=l(),op=a("li"),Rhe=a("strong"),c0o=o("layoutlmv3"),m0o=o(" \u2014 "),DG=a("a"),f0o=o("LayoutLMv3FeatureExtractor"),g0o=o(" (LayoutLMv3 model)"),h0o=l(),rp=a("li"),Phe=a("strong"),u0o=o("levit"),p0o=o(" \u2014 "),GG=a("a"),_0o=o("LevitFeatureExtractor"),b0o=o(" (LeViT model)"),v0o=l(),tp=a("li"),Bhe=a("strong"),F0o=o("maskformer"),T0o=o(" \u2014 "),OG=a("a"),M0o=o("MaskFormerFeatureExtractor"),E0o=o(" (MaskFormer model)"),C0o=l(),ap=a("li"),Ihe=a("strong"),w0o=o("mctct"),A0o=o(" \u2014 "),VG=a("a"),L0o=o("MCTCTFeatureExtractor"),y0o=o(" (M-CTC-T model)"),x0o=l(),np=a("li"),Nhe=a("strong"),$0o=o("mobilevit"),k0o=o(" \u2014 "),XG=a("a"),S0o=o("MobileViTFeatureExtractor"),R0o=o(" (MobileViT model)"),P0o=l(),sp=a("li"),qhe=a("strong"),B0o=o("owlvit"),I0o=o(" \u2014 "),zG=a("a"),N0o=o("OwlViTFeatureExtractor"),q0o=o(" (OWL-ViT model)"),j0o=l(),lp=a("li"),jhe=a("strong"),D0o=o("perceiver"),G0o=o(" \u2014 "),QG=a("a"),O0o=o("PerceiverFeatureExtractor"),V0o=o(" (Perceiver model)"),X0o=l(),ip=a("li"),Dhe=a("strong"),z0o=o("poolformer"),Q0o=o(" \u2014 "),WG=a("a"),W0o=o("PoolFormerFeatureExtractor"),U0o=o(" (PoolFormer model)"),H0o=l(),dp=a("li"),Ghe=a("strong"),J0o=o("regnet"),Y0o=o(" \u2014 "),UG=a("a"),K0o=o("ConvNextFeatureExtractor"),Z0o=o(" (RegNet model)"),ewo=l(),cp=a("li"),Ohe=a("strong"),owo=o("resnet"),rwo=o(" \u2014 "),HG=a("a"),two=o("ConvNextFeatureExtractor"),awo=o(" (ResNet model)"),nwo=l(),mp=a("li"),Vhe=a("strong"),swo=o("segformer"),lwo=o(" \u2014 "),JG=a("a"),iwo=o("SegformerFeatureExtractor"),dwo=o(" (SegFormer model)"),cwo=l(),fp=a("li"),Xhe=a("strong"),mwo=o("speech_to_text"),fwo=o(" \u2014 "),YG=a("a"),gwo=o("Speech2TextFeatureExtractor"),hwo=o(" (Speech2Text model)"),uwo=l(),gp=a("li"),zhe=a("strong"),pwo=o("swin"),_wo=o(" \u2014 "),KG=a("a"),bwo=o("ViTFeatureExtractor"),vwo=o(" (Swin Transformer model)"),Fwo=l(),hp=a("li"),Qhe=a("strong"),Two=o("swinv2"),Mwo=o(" \u2014 "),ZG=a("a"),Ewo=o("ViTFeatureExtractor"),Cwo=o(" (Swin Transformer V2 model)"),wwo=l(),up=a("li"),Whe=a("strong"),Awo=o("van"),Lwo=o(" \u2014 "),eO=a("a"),ywo=o("ConvNextFeatureExtractor"),xwo=o(" (VAN model)"),$wo=l(),pp=a("li"),Uhe=a("strong"),kwo=o("videomae"),Swo=o(" \u2014 "),oO=a("a"),Rwo=o("VideoMAEFeatureExtractor"),Pwo=o(" (VideoMAE model)"),Bwo=l(),_p=a("li"),Hhe=a("strong"),Iwo=o("vilt"),Nwo=o(" \u2014 "),rO=a("a"),qwo=o("ViltFeatureExtractor"),jwo=o(" (ViLT model)"),Dwo=l(),bp=a("li"),Jhe=a("strong"),Gwo=o("vit"),Owo=o(" \u2014 "),tO=a("a"),Vwo=o("ViTFeatureExtractor"),Xwo=o(" (ViT model)"),zwo=l(),vp=a("li"),Yhe=a("strong"),Qwo=o("vit_mae"),Wwo=o(" \u2014 "),aO=a("a"),Uwo=o("ViTFeatureExtractor"),Hwo=o(" (ViTMAE model)"),Jwo=l(),Fp=a("li"),Khe=a("strong"),Ywo=o("vit_msn"),Kwo=o(" \u2014 "),nO=a("a"),Zwo=o("ViTFeatureExtractor"),eAo=o(" (ViTMSN model)"),oAo=l(),Tp=a("li"),Zhe=a("strong"),rAo=o("wav2vec2"),tAo=o(" \u2014 "),sO=a("a"),aAo=o("Wav2Vec2FeatureExtractor"),nAo=o(" (Wav2Vec2 model)"),sAo=l(),Mp=a("li"),eue=a("strong"),lAo=o("wav2vec2-conformer"),iAo=o(" \u2014 "),lO=a("a"),dAo=o("Wav2Vec2FeatureExtractor"),cAo=o(" (Wav2Vec2-Conformer model)"),mAo=l(),Ep=a("li"),oue=a("strong"),fAo=o("xclip"),gAo=o(" \u2014 "),iO=a("a"),hAo=o("CLIPFeatureExtractor"),uAo=o(" (X-CLIP model)"),pAo=l(),Cp=a("li"),rue=a("strong"),_Ao=o("yolos"),bAo=o(" \u2014 "),dO=a("a"),vAo=o("YolosFeatureExtractor"),FAo=o(" (YOLOS model)"),TAo=l(),F(wp.$$.fragment),MAo=l(),F(Ap.$$.fragment),EAo=l(),Lp=a("div"),F(lx.$$.fragment),CAo=l(),tue=a("p"),wAo=o("Register a new feature extractor for this class."),tZe=l(),ud=a("h2"),yp=a("a"),aue=a("span"),F(ix.$$.fragment),AAo=l(),nue=a("span"),LAo=o("AutoProcessor"),aZe=l(),Ro=a("div"),F(dx.$$.fragment),yAo=l(),cx=a("p"),xAo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cO=a("a"),$Ao=o("AutoProcessor.from_pretrained()"),kAo=o(" class method."),SAo=l(),mx=a("p"),RAo=o("This class cannot be instantiated directly using "),sue=a("code"),PAo=o("__init__()"),BAo=o(" (throws an error)."),IAo=l(),Ke=a("div"),F(fx.$$.fragment),NAo=l(),lue=a("p"),qAo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jAo=l(),pd=a("p"),DAo=o("The processor class to instantiate is selected based on the "),iue=a("code"),GAo=o("model_type"),OAo=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),VAo=o("pretrained_model_name_or_path"),XAo=o(" if possible):"),zAo=l(),ie=a("ul"),xp=a("li"),cue=a("strong"),QAo=o("clip"),WAo=o(" \u2014 "),mO=a("a"),UAo=o("CLIPProcessor"),HAo=o(" (CLIP model)"),JAo=l(),$p=a("li"),mue=a("strong"),YAo=o("donut"),KAo=o(" \u2014 "),fO=a("a"),ZAo=o("DonutProcessor"),e6o=o(" (Donut model)"),o6o=l(),kp=a("li"),fue=a("strong"),r6o=o("flava"),t6o=o(" \u2014 "),gO=a("a"),a6o=o("FlavaProcessor"),n6o=o(" (FLAVA model)"),s6o=l(),Sp=a("li"),gue=a("strong"),l6o=o("groupvit"),i6o=o(" \u2014 "),hO=a("a"),d6o=o("CLIPProcessor"),c6o=o(" (GroupViT model)"),m6o=l(),Rp=a("li"),hue=a("strong"),f6o=o("layoutlmv2"),g6o=o(" \u2014 "),uO=a("a"),h6o=o("LayoutLMv2Processor"),u6o=o(" (LayoutLMv2 model)"),p6o=l(),Pp=a("li"),uue=a("strong"),_6o=o("layoutlmv3"),b6o=o(" \u2014 "),pO=a("a"),v6o=o("LayoutLMv3Processor"),F6o=o(" (LayoutLMv3 model)"),T6o=l(),Bp=a("li"),pue=a("strong"),M6o=o("layoutxlm"),E6o=o(" \u2014 "),_O=a("a"),C6o=o("LayoutXLMProcessor"),w6o=o(" (LayoutXLM model)"),A6o=l(),Ip=a("li"),_ue=a("strong"),L6o=o("owlvit"),y6o=o(" \u2014 "),bO=a("a"),x6o=o("OwlViTProcessor"),$6o=o(" (OWL-ViT model)"),k6o=l(),Np=a("li"),bue=a("strong"),S6o=o("sew"),R6o=o(" \u2014 "),vO=a("a"),P6o=o("Wav2Vec2Processor"),B6o=o(" (SEW model)"),I6o=l(),qp=a("li"),vue=a("strong"),N6o=o("sew-d"),q6o=o(" \u2014 "),FO=a("a"),j6o=o("Wav2Vec2Processor"),D6o=o(" (SEW-D model)"),G6o=l(),jp=a("li"),Fue=a("strong"),O6o=o("speech_to_text"),V6o=o(" \u2014 "),TO=a("a"),X6o=o("Speech2TextProcessor"),z6o=o(" (Speech2Text model)"),Q6o=l(),Dp=a("li"),Tue=a("strong"),W6o=o("speech_to_text_2"),U6o=o(" \u2014 "),MO=a("a"),H6o=o("Speech2Text2Processor"),J6o=o(" (Speech2Text2 model)"),Y6o=l(),Gp=a("li"),Mue=a("strong"),K6o=o("trocr"),Z6o=o(" \u2014 "),EO=a("a"),e7o=o("TrOCRProcessor"),o7o=o(" (TrOCR model)"),r7o=l(),Op=a("li"),Eue=a("strong"),t7o=o("unispeech"),a7o=o(" \u2014 "),CO=a("a"),n7o=o("Wav2Vec2Processor"),s7o=o(" (UniSpeech model)"),l7o=l(),Vp=a("li"),Cue=a("strong"),i7o=o("unispeech-sat"),d7o=o(" \u2014 "),wO=a("a"),c7o=o("Wav2Vec2Processor"),m7o=o(" (UniSpeechSat model)"),f7o=l(),Xp=a("li"),wue=a("strong"),g7o=o("vilt"),h7o=o(" \u2014 "),AO=a("a"),u7o=o("ViltProcessor"),p7o=o(" (ViLT model)"),_7o=l(),zp=a("li"),Aue=a("strong"),b7o=o("vision-text-dual-encoder"),v7o=o(" \u2014 "),LO=a("a"),F7o=o("VisionTextDualEncoderProcessor"),T7o=o(" (VisionTextDualEncoder model)"),M7o=l(),Qp=a("li"),Lue=a("strong"),E7o=o("wav2vec2"),C7o=o(" \u2014 "),yO=a("a"),w7o=o("Wav2Vec2Processor"),A7o=o(" (Wav2Vec2 model)"),L7o=l(),Wp=a("li"),yue=a("strong"),y7o=o("wav2vec2-conformer"),x7o=o(" \u2014 "),xO=a("a"),$7o=o("Wav2Vec2Processor"),k7o=o(" (Wav2Vec2-Conformer model)"),S7o=l(),Up=a("li"),xue=a("strong"),R7o=o("wavlm"),P7o=o(" \u2014 "),$O=a("a"),B7o=o("Wav2Vec2Processor"),I7o=o(" (WavLM model)"),N7o=l(),Hp=a("li"),$ue=a("strong"),q7o=o("xclip"),j7o=o(" \u2014 "),kO=a("a"),D7o=o("CLIPProcessor"),G7o=o(" (X-CLIP model)"),O7o=l(),F(Jp.$$.fragment),V7o=l(),F(Yp.$$.fragment),X7o=l(),Kp=a("div"),F(gx.$$.fragment),z7o=l(),kue=a("p"),Q7o=o("Register a new processor for this class."),nZe=l(),_d=a("h2"),Zp=a("a"),Sue=a("span"),F(hx.$$.fragment),W7o=l(),Rue=a("span"),U7o=o("AutoModel"),sZe=l(),Po=a("div"),F(ux.$$.fragment),H7o=l(),bd=a("p"),J7o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SO=a("a"),Y7o=o("from_pretrained()"),K7o=o(" class method or the "),RO=a("a"),Z7o=o("from_config()"),eLo=o(` class
method.`),oLo=l(),px=a("p"),rLo=o("This class cannot be instantiated directly using "),Pue=a("code"),tLo=o("__init__()"),aLo=o(" (throws an error)."),nLo=l(),_t=a("div"),F(_x.$$.fragment),sLo=l(),Bue=a("p"),lLo=o("Instantiates one of the base model classes of the library from a configuration."),iLo=l(),vd=a("p"),dLo=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),cLo=o("not"),mLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),fLo=o("from_pretrained()"),gLo=o(" to load the model weights."),hLo=l(),F(e_.$$.fragment),uLo=l(),Ze=a("div"),F(bx.$$.fragment),pLo=l(),Nue=a("p"),_Lo=o("Instantiate one of the base model classes of the library from a pretrained model."),bLo=l(),Ja=a("p"),vLo=o("The model class to instantiate is selected based on the "),que=a("code"),FLo=o("model_type"),TLo=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),MLo=o("pretrained_model_name_or_path"),ELo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),CLo=o("pretrained_model_name_or_path"),wLo=o(":"),ALo=l(),y=a("ul"),o_=a("li"),Gue=a("strong"),LLo=o("albert"),yLo=o(" \u2014 "),BO=a("a"),xLo=o("AlbertModel"),$Lo=o(" (ALBERT model)"),kLo=l(),r_=a("li"),Oue=a("strong"),SLo=o("bart"),RLo=o(" \u2014 "),IO=a("a"),PLo=o("BartModel"),BLo=o(" (BART model)"),ILo=l(),t_=a("li"),Vue=a("strong"),NLo=o("beit"),qLo=o(" \u2014 "),NO=a("a"),jLo=o("BeitModel"),DLo=o(" (BEiT model)"),GLo=l(),a_=a("li"),Xue=a("strong"),OLo=o("bert"),VLo=o(" \u2014 "),qO=a("a"),XLo=o("BertModel"),zLo=o(" (BERT model)"),QLo=l(),n_=a("li"),zue=a("strong"),WLo=o("bert-generation"),ULo=o(" \u2014 "),jO=a("a"),HLo=o("BertGenerationEncoder"),JLo=o(" (Bert Generation model)"),YLo=l(),s_=a("li"),Que=a("strong"),KLo=o("big_bird"),ZLo=o(" \u2014 "),DO=a("a"),eyo=o("BigBirdModel"),oyo=o(" (BigBird model)"),ryo=l(),l_=a("li"),Wue=a("strong"),tyo=o("bigbird_pegasus"),ayo=o(" \u2014 "),GO=a("a"),nyo=o("BigBirdPegasusModel"),syo=o(" (BigBird-Pegasus model)"),lyo=l(),i_=a("li"),Uue=a("strong"),iyo=o("blenderbot"),dyo=o(" \u2014 "),OO=a("a"),cyo=o("BlenderbotModel"),myo=o(" (Blenderbot model)"),fyo=l(),d_=a("li"),Hue=a("strong"),gyo=o("blenderbot-small"),hyo=o(" \u2014 "),VO=a("a"),uyo=o("BlenderbotSmallModel"),pyo=o(" (BlenderbotSmall model)"),_yo=l(),c_=a("li"),Jue=a("strong"),byo=o("bloom"),vyo=o(" \u2014 "),XO=a("a"),Fyo=o("BloomModel"),Tyo=o(" (BLOOM model)"),Myo=l(),m_=a("li"),Yue=a("strong"),Eyo=o("camembert"),Cyo=o(" \u2014 "),zO=a("a"),wyo=o("CamembertModel"),Ayo=o(" (CamemBERT model)"),Lyo=l(),f_=a("li"),Kue=a("strong"),yyo=o("canine"),xyo=o(" \u2014 "),QO=a("a"),$yo=o("CanineModel"),kyo=o(" (CANINE model)"),Syo=l(),g_=a("li"),Zue=a("strong"),Ryo=o("clip"),Pyo=o(" \u2014 "),WO=a("a"),Byo=o("CLIPModel"),Iyo=o(" (CLIP model)"),Nyo=l(),h_=a("li"),epe=a("strong"),qyo=o("codegen"),jyo=o(" \u2014 "),UO=a("a"),Dyo=o("CodeGenModel"),Gyo=o(" (CodeGen model)"),Oyo=l(),u_=a("li"),ope=a("strong"),Vyo=o("conditional_detr"),Xyo=o(" \u2014 "),HO=a("a"),zyo=o("ConditionalDetrModel"),Qyo=o(" (Conditional DETR model)"),Wyo=l(),p_=a("li"),rpe=a("strong"),Uyo=o("convbert"),Hyo=o(" \u2014 "),JO=a("a"),Jyo=o("ConvBertModel"),Yyo=o(" (ConvBERT model)"),Kyo=l(),__=a("li"),tpe=a("strong"),Zyo=o("convnext"),e8o=o(" \u2014 "),YO=a("a"),o8o=o("ConvNextModel"),r8o=o(" (ConvNeXT model)"),t8o=l(),b_=a("li"),ape=a("strong"),a8o=o("ctrl"),n8o=o(" \u2014 "),KO=a("a"),s8o=o("CTRLModel"),l8o=o(" (CTRL model)"),i8o=l(),v_=a("li"),npe=a("strong"),d8o=o("cvt"),c8o=o(" \u2014 "),ZO=a("a"),m8o=o("CvtModel"),f8o=o(" (CvT model)"),g8o=l(),F_=a("li"),spe=a("strong"),h8o=o("data2vec-audio"),u8o=o(" \u2014 "),eV=a("a"),p8o=o("Data2VecAudioModel"),_8o=o(" (Data2VecAudio model)"),b8o=l(),T_=a("li"),lpe=a("strong"),v8o=o("data2vec-text"),F8o=o(" \u2014 "),oV=a("a"),T8o=o("Data2VecTextModel"),M8o=o(" (Data2VecText model)"),E8o=l(),M_=a("li"),ipe=a("strong"),C8o=o("data2vec-vision"),w8o=o(" \u2014 "),rV=a("a"),A8o=o("Data2VecVisionModel"),L8o=o(" (Data2VecVision model)"),y8o=l(),E_=a("li"),dpe=a("strong"),x8o=o("deberta"),$8o=o(" \u2014 "),tV=a("a"),k8o=o("DebertaModel"),S8o=o(" (DeBERTa model)"),R8o=l(),C_=a("li"),cpe=a("strong"),P8o=o("deberta-v2"),B8o=o(" \u2014 "),aV=a("a"),I8o=o("DebertaV2Model"),N8o=o(" (DeBERTa-v2 model)"),q8o=l(),w_=a("li"),mpe=a("strong"),j8o=o("decision_transformer"),D8o=o(" \u2014 "),nV=a("a"),G8o=o("DecisionTransformerModel"),O8o=o(" (Decision Transformer model)"),V8o=l(),A_=a("li"),fpe=a("strong"),X8o=o("deformable_detr"),z8o=o(" \u2014 "),sV=a("a"),Q8o=o("DeformableDetrModel"),W8o=o(" (Deformable DETR model)"),U8o=l(),L_=a("li"),gpe=a("strong"),H8o=o("deit"),J8o=o(" \u2014 "),lV=a("a"),Y8o=o("DeiTModel"),K8o=o(" (DeiT model)"),Z8o=l(),y_=a("li"),hpe=a("strong"),e9o=o("detr"),o9o=o(" \u2014 "),iV=a("a"),r9o=o("DetrModel"),t9o=o(" (DETR model)"),a9o=l(),x_=a("li"),upe=a("strong"),n9o=o("distilbert"),s9o=o(" \u2014 "),dV=a("a"),l9o=o("DistilBertModel"),i9o=o(" (DistilBERT model)"),d9o=l(),$_=a("li"),ppe=a("strong"),c9o=o("donut-swin"),m9o=o(" \u2014 "),cV=a("a"),f9o=o("DonutSwinModel"),g9o=o(" (DonutSwin model)"),h9o=l(),k_=a("li"),_pe=a("strong"),u9o=o("dpr"),p9o=o(" \u2014 "),mV=a("a"),_9o=o("DPRQuestionEncoder"),b9o=o(" (DPR model)"),v9o=l(),S_=a("li"),bpe=a("strong"),F9o=o("dpt"),T9o=o(" \u2014 "),fV=a("a"),M9o=o("DPTModel"),E9o=o(" (DPT model)"),C9o=l(),R_=a("li"),vpe=a("strong"),w9o=o("electra"),A9o=o(" \u2014 "),gV=a("a"),L9o=o("ElectraModel"),y9o=o(" (ELECTRA model)"),x9o=l(),P_=a("li"),Fpe=a("strong"),$9o=o("ernie"),k9o=o(" \u2014 "),hV=a("a"),S9o=o("ErnieModel"),R9o=o(" (ERNIE model)"),P9o=l(),B_=a("li"),Tpe=a("strong"),B9o=o("flaubert"),I9o=o(" \u2014 "),uV=a("a"),N9o=o("FlaubertModel"),q9o=o(" (FlauBERT model)"),j9o=l(),I_=a("li"),Mpe=a("strong"),D9o=o("flava"),G9o=o(" \u2014 "),pV=a("a"),O9o=o("FlavaModel"),V9o=o(" (FLAVA model)"),X9o=l(),N_=a("li"),Epe=a("strong"),z9o=o("fnet"),Q9o=o(" \u2014 "),_V=a("a"),W9o=o("FNetModel"),U9o=o(" (FNet model)"),H9o=l(),q_=a("li"),Cpe=a("strong"),J9o=o("fsmt"),Y9o=o(" \u2014 "),bV=a("a"),K9o=o("FSMTModel"),Z9o=o(" (FairSeq Machine-Translation model)"),exo=l(),_l=a("li"),wpe=a("strong"),oxo=o("funnel"),rxo=o(" \u2014 "),vV=a("a"),txo=o("FunnelModel"),axo=o(" or "),FV=a("a"),nxo=o("FunnelBaseModel"),sxo=o(" (Funnel Transformer model)"),lxo=l(),j_=a("li"),Ape=a("strong"),ixo=o("glpn"),dxo=o(" \u2014 "),TV=a("a"),cxo=o("GLPNModel"),mxo=o(" (GLPN model)"),fxo=l(),D_=a("li"),Lpe=a("strong"),gxo=o("gpt2"),hxo=o(" \u2014 "),MV=a("a"),uxo=o("GPT2Model"),pxo=o(" (OpenAI GPT-2 model)"),_xo=l(),G_=a("li"),ype=a("strong"),bxo=o("gpt_neo"),vxo=o(" \u2014 "),EV=a("a"),Fxo=o("GPTNeoModel"),Txo=o(" (GPT Neo model)"),Mxo=l(),O_=a("li"),xpe=a("strong"),Exo=o("gpt_neox"),Cxo=o(" \u2014 "),CV=a("a"),wxo=o("GPTNeoXModel"),Axo=o(" (GPT NeoX model)"),Lxo=l(),V_=a("li"),$pe=a("strong"),yxo=o("gpt_neox_japanese"),xxo=o(" \u2014 "),wV=a("a"),$xo=o("GPTNeoXJapaneseModel"),kxo=o(" (GPT NeoX Japanese model)"),Sxo=l(),X_=a("li"),kpe=a("strong"),Rxo=o("gptj"),Pxo=o(" \u2014 "),AV=a("a"),Bxo=o("GPTJModel"),Ixo=o(" (GPT-J model)"),Nxo=l(),z_=a("li"),Spe=a("strong"),qxo=o("groupvit"),jxo=o(" \u2014 "),LV=a("a"),Dxo=o("GroupViTModel"),Gxo=o(" (GroupViT model)"),Oxo=l(),Q_=a("li"),Rpe=a("strong"),Vxo=o("hubert"),Xxo=o(" \u2014 "),yV=a("a"),zxo=o("HubertModel"),Qxo=o(" (Hubert model)"),Wxo=l(),W_=a("li"),Ppe=a("strong"),Uxo=o("ibert"),Hxo=o(" \u2014 "),xV=a("a"),Jxo=o("IBertModel"),Yxo=o(" (I-BERT model)"),Kxo=l(),U_=a("li"),Bpe=a("strong"),Zxo=o("imagegpt"),e$o=o(" \u2014 "),$V=a("a"),o$o=o("ImageGPTModel"),r$o=o(" (ImageGPT model)"),t$o=l(),H_=a("li"),Ipe=a("strong"),a$o=o("layoutlm"),n$o=o(" \u2014 "),kV=a("a"),s$o=o("LayoutLMModel"),l$o=o(" (LayoutLM model)"),i$o=l(),J_=a("li"),Npe=a("strong"),d$o=o("layoutlmv2"),c$o=o(" \u2014 "),SV=a("a"),m$o=o("LayoutLMv2Model"),f$o=o(" (LayoutLMv2 model)"),g$o=l(),Y_=a("li"),qpe=a("strong"),h$o=o("layoutlmv3"),u$o=o(" \u2014 "),RV=a("a"),p$o=o("LayoutLMv3Model"),_$o=o(" (LayoutLMv3 model)"),b$o=l(),K_=a("li"),jpe=a("strong"),v$o=o("led"),F$o=o(" \u2014 "),PV=a("a"),T$o=o("LEDModel"),M$o=o(" (LED model)"),E$o=l(),Z_=a("li"),Dpe=a("strong"),C$o=o("levit"),w$o=o(" \u2014 "),BV=a("a"),A$o=o("LevitModel"),L$o=o(" (LeViT model)"),y$o=l(),eb=a("li"),Gpe=a("strong"),x$o=o("longformer"),$$o=o(" \u2014 "),IV=a("a"),k$o=o("LongformerModel"),S$o=o(" (Longformer model)"),R$o=l(),ob=a("li"),Ope=a("strong"),P$o=o("longt5"),B$o=o(" \u2014 "),NV=a("a"),I$o=o("LongT5Model"),N$o=o(" (LongT5 model)"),q$o=l(),rb=a("li"),Vpe=a("strong"),j$o=o("luke"),D$o=o(" \u2014 "),qV=a("a"),G$o=o("LukeModel"),O$o=o(" (LUKE model)"),V$o=l(),tb=a("li"),Xpe=a("strong"),X$o=o("lxmert"),z$o=o(" \u2014 "),jV=a("a"),Q$o=o("LxmertModel"),W$o=o(" (LXMERT model)"),U$o=l(),ab=a("li"),zpe=a("strong"),H$o=o("m2m_100"),J$o=o(" \u2014 "),DV=a("a"),Y$o=o("M2M100Model"),K$o=o(" (M2M100 model)"),Z$o=l(),nb=a("li"),Qpe=a("strong"),eko=o("marian"),oko=o(" \u2014 "),GV=a("a"),rko=o("MarianModel"),tko=o(" (Marian model)"),ako=l(),sb=a("li"),Wpe=a("strong"),nko=o("maskformer"),sko=o(" \u2014 "),OV=a("a"),lko=o("MaskFormerModel"),iko=o(" (MaskFormer model)"),dko=l(),lb=a("li"),Upe=a("strong"),cko=o("mbart"),mko=o(" \u2014 "),VV=a("a"),fko=o("MBartModel"),gko=o(" (mBART model)"),hko=l(),ib=a("li"),Hpe=a("strong"),uko=o("mctct"),pko=o(" \u2014 "),XV=a("a"),_ko=o("MCTCTModel"),bko=o(" (M-CTC-T model)"),vko=l(),db=a("li"),Jpe=a("strong"),Fko=o("megatron-bert"),Tko=o(" \u2014 "),zV=a("a"),Mko=o("MegatronBertModel"),Eko=o(" (Megatron-BERT model)"),Cko=l(),cb=a("li"),Ype=a("strong"),wko=o("mobilebert"),Ako=o(" \u2014 "),QV=a("a"),Lko=o("MobileBertModel"),yko=o(" (MobileBERT model)"),xko=l(),mb=a("li"),Kpe=a("strong"),$ko=o("mobilevit"),kko=o(" \u2014 "),WV=a("a"),Sko=o("MobileViTModel"),Rko=o(" (MobileViT model)"),Pko=l(),fb=a("li"),Zpe=a("strong"),Bko=o("mpnet"),Iko=o(" \u2014 "),UV=a("a"),Nko=o("MPNetModel"),qko=o(" (MPNet model)"),jko=l(),gb=a("li"),e_e=a("strong"),Dko=o("mt5"),Gko=o(" \u2014 "),HV=a("a"),Oko=o("MT5Model"),Vko=o(" (MT5 model)"),Xko=l(),hb=a("li"),o_e=a("strong"),zko=o("mvp"),Qko=o(" \u2014 "),JV=a("a"),Wko=o("MvpModel"),Uko=o(" (MVP model)"),Hko=l(),ub=a("li"),r_e=a("strong"),Jko=o("nezha"),Yko=o(" \u2014 "),YV=a("a"),Kko=o("NezhaModel"),Zko=o(" (Nezha model)"),eSo=l(),pb=a("li"),t_e=a("strong"),oSo=o("nllb"),rSo=o(" \u2014 "),KV=a("a"),tSo=o("M2M100Model"),aSo=o(" (NLLB model)"),nSo=l(),_b=a("li"),a_e=a("strong"),sSo=o("nystromformer"),lSo=o(" \u2014 "),ZV=a("a"),iSo=o("NystromformerModel"),dSo=o(" (Nystr\xF6mformer model)"),cSo=l(),bb=a("li"),n_e=a("strong"),mSo=o("openai-gpt"),fSo=o(" \u2014 "),eX=a("a"),gSo=o("OpenAIGPTModel"),hSo=o(" (OpenAI GPT model)"),uSo=l(),vb=a("li"),s_e=a("strong"),pSo=o("opt"),_So=o(" \u2014 "),oX=a("a"),bSo=o("OPTModel"),vSo=o(" (OPT model)"),FSo=l(),Fb=a("li"),l_e=a("strong"),TSo=o("owlvit"),MSo=o(" \u2014 "),rX=a("a"),ESo=o("OwlViTModel"),CSo=o(" (OWL-ViT model)"),wSo=l(),Tb=a("li"),i_e=a("strong"),ASo=o("pegasus"),LSo=o(" \u2014 "),tX=a("a"),ySo=o("PegasusModel"),xSo=o(" (Pegasus model)"),$So=l(),Mb=a("li"),d_e=a("strong"),kSo=o("pegasus_x"),SSo=o(" \u2014 "),aX=a("a"),RSo=o("PegasusXModel"),PSo=o(" (PEGASUS-X model)"),BSo=l(),Eb=a("li"),c_e=a("strong"),ISo=o("perceiver"),NSo=o(" \u2014 "),nX=a("a"),qSo=o("PerceiverModel"),jSo=o(" (Perceiver model)"),DSo=l(),Cb=a("li"),m_e=a("strong"),GSo=o("plbart"),OSo=o(" \u2014 "),sX=a("a"),VSo=o("PLBartModel"),XSo=o(" (PLBart model)"),zSo=l(),wb=a("li"),f_e=a("strong"),QSo=o("poolformer"),WSo=o(" \u2014 "),lX=a("a"),USo=o("PoolFormerModel"),HSo=o(" (PoolFormer model)"),JSo=l(),Ab=a("li"),g_e=a("strong"),YSo=o("prophetnet"),KSo=o(" \u2014 "),iX=a("a"),ZSo=o("ProphetNetModel"),eRo=o(" (ProphetNet model)"),oRo=l(),Lb=a("li"),h_e=a("strong"),rRo=o("qdqbert"),tRo=o(" \u2014 "),dX=a("a"),aRo=o("QDQBertModel"),nRo=o(" (QDQBert model)"),sRo=l(),yb=a("li"),u_e=a("strong"),lRo=o("reformer"),iRo=o(" \u2014 "),cX=a("a"),dRo=o("ReformerModel"),cRo=o(" (Reformer model)"),mRo=l(),xb=a("li"),p_e=a("strong"),fRo=o("regnet"),gRo=o(" \u2014 "),mX=a("a"),hRo=o("RegNetModel"),uRo=o(" (RegNet model)"),pRo=l(),$b=a("li"),__e=a("strong"),_Ro=o("rembert"),bRo=o(" \u2014 "),fX=a("a"),vRo=o("RemBertModel"),FRo=o(" (RemBERT model)"),TRo=l(),kb=a("li"),b_e=a("strong"),MRo=o("resnet"),ERo=o(" \u2014 "),gX=a("a"),CRo=o("ResNetModel"),wRo=o(" (ResNet model)"),ARo=l(),Sb=a("li"),v_e=a("strong"),LRo=o("retribert"),yRo=o(" \u2014 "),hX=a("a"),xRo=o("RetriBertModel"),$Ro=o(" (RetriBERT model)"),kRo=l(),Rb=a("li"),F_e=a("strong"),SRo=o("roberta"),RRo=o(" \u2014 "),uX=a("a"),PRo=o("RobertaModel"),BRo=o(" (RoBERTa model)"),IRo=l(),Pb=a("li"),T_e=a("strong"),NRo=o("roformer"),qRo=o(" \u2014 "),pX=a("a"),jRo=o("RoFormerModel"),DRo=o(" (RoFormer model)"),GRo=l(),Bb=a("li"),M_e=a("strong"),ORo=o("segformer"),VRo=o(" \u2014 "),_X=a("a"),XRo=o("SegformerModel"),zRo=o(" (SegFormer model)"),QRo=l(),Ib=a("li"),E_e=a("strong"),WRo=o("sew"),URo=o(" \u2014 "),bX=a("a"),HRo=o("SEWModel"),JRo=o(" (SEW model)"),YRo=l(),Nb=a("li"),C_e=a("strong"),KRo=o("sew-d"),ZRo=o(" \u2014 "),vX=a("a"),ePo=o("SEWDModel"),oPo=o(" (SEW-D model)"),rPo=l(),qb=a("li"),w_e=a("strong"),tPo=o("speech_to_text"),aPo=o(" \u2014 "),FX=a("a"),nPo=o("Speech2TextModel"),sPo=o(" (Speech2Text model)"),lPo=l(),jb=a("li"),A_e=a("strong"),iPo=o("splinter"),dPo=o(" \u2014 "),TX=a("a"),cPo=o("SplinterModel"),mPo=o(" (Splinter model)"),fPo=l(),Db=a("li"),L_e=a("strong"),gPo=o("squeezebert"),hPo=o(" \u2014 "),MX=a("a"),uPo=o("SqueezeBertModel"),pPo=o(" (SqueezeBERT model)"),_Po=l(),Gb=a("li"),y_e=a("strong"),bPo=o("swin"),vPo=o(" \u2014 "),EX=a("a"),FPo=o("SwinModel"),TPo=o(" (Swin Transformer model)"),MPo=l(),Ob=a("li"),x_e=a("strong"),EPo=o("swinv2"),CPo=o(" \u2014 "),CX=a("a"),wPo=o("Swinv2Model"),APo=o(" (Swin Transformer V2 model)"),LPo=l(),Vb=a("li"),$_e=a("strong"),yPo=o("t5"),xPo=o(" \u2014 "),wX=a("a"),$Po=o("T5Model"),kPo=o(" (T5 model)"),SPo=l(),Xb=a("li"),k_e=a("strong"),RPo=o("tapas"),PPo=o(" \u2014 "),AX=a("a"),BPo=o("TapasModel"),IPo=o(" (TAPAS model)"),NPo=l(),zb=a("li"),S_e=a("strong"),qPo=o("trajectory_transformer"),jPo=o(" \u2014 "),LX=a("a"),DPo=o("TrajectoryTransformerModel"),GPo=o(" (Trajectory Transformer model)"),OPo=l(),Qb=a("li"),R_e=a("strong"),VPo=o("transfo-xl"),XPo=o(" \u2014 "),yX=a("a"),zPo=o("TransfoXLModel"),QPo=o(" (Transformer-XL model)"),WPo=l(),Wb=a("li"),P_e=a("strong"),UPo=o("unispeech"),HPo=o(" \u2014 "),xX=a("a"),JPo=o("UniSpeechModel"),YPo=o(" (UniSpeech model)"),KPo=l(),Ub=a("li"),B_e=a("strong"),ZPo=o("unispeech-sat"),eBo=o(" \u2014 "),$X=a("a"),oBo=o("UniSpeechSatModel"),rBo=o(" (UniSpeechSat model)"),tBo=l(),Hb=a("li"),I_e=a("strong"),aBo=o("van"),nBo=o(" \u2014 "),kX=a("a"),sBo=o("VanModel"),lBo=o(" (VAN model)"),iBo=l(),Jb=a("li"),N_e=a("strong"),dBo=o("videomae"),cBo=o(" \u2014 "),SX=a("a"),mBo=o("VideoMAEModel"),fBo=o(" (VideoMAE model)"),gBo=l(),Yb=a("li"),q_e=a("strong"),hBo=o("vilt"),uBo=o(" \u2014 "),RX=a("a"),pBo=o("ViltModel"),_Bo=o(" (ViLT model)"),bBo=l(),Kb=a("li"),j_e=a("strong"),vBo=o("vision-text-dual-encoder"),FBo=o(" \u2014 "),PX=a("a"),TBo=o("VisionTextDualEncoderModel"),MBo=o(" (VisionTextDualEncoder model)"),EBo=l(),Zb=a("li"),D_e=a("strong"),CBo=o("visual_bert"),wBo=o(" \u2014 "),BX=a("a"),ABo=o("VisualBertModel"),LBo=o(" (VisualBERT model)"),yBo=l(),e2=a("li"),G_e=a("strong"),xBo=o("vit"),$Bo=o(" \u2014 "),IX=a("a"),kBo=o("ViTModel"),SBo=o(" (ViT model)"),RBo=l(),o2=a("li"),O_e=a("strong"),PBo=o("vit_mae"),BBo=o(" \u2014 "),NX=a("a"),IBo=o("ViTMAEModel"),NBo=o(" (ViTMAE model)"),qBo=l(),r2=a("li"),V_e=a("strong"),jBo=o("vit_msn"),DBo=o(" \u2014 "),qX=a("a"),GBo=o("ViTMSNModel"),OBo=o(" (ViTMSN model)"),VBo=l(),t2=a("li"),X_e=a("strong"),XBo=o("wav2vec2"),zBo=o(" \u2014 "),jX=a("a"),QBo=o("Wav2Vec2Model"),WBo=o(" (Wav2Vec2 model)"),UBo=l(),a2=a("li"),z_e=a("strong"),HBo=o("wav2vec2-conformer"),JBo=o(" \u2014 "),DX=a("a"),YBo=o("Wav2Vec2ConformerModel"),KBo=o(" (Wav2Vec2-Conformer model)"),ZBo=l(),n2=a("li"),Q_e=a("strong"),eIo=o("wavlm"),oIo=o(" \u2014 "),GX=a("a"),rIo=o("WavLMModel"),tIo=o(" (WavLM model)"),aIo=l(),s2=a("li"),W_e=a("strong"),nIo=o("xclip"),sIo=o(" \u2014 "),OX=a("a"),lIo=o("XCLIPModel"),iIo=o(" (X-CLIP model)"),dIo=l(),l2=a("li"),U_e=a("strong"),cIo=o("xglm"),mIo=o(" \u2014 "),VX=a("a"),fIo=o("XGLMModel"),gIo=o(" (XGLM model)"),hIo=l(),i2=a("li"),H_e=a("strong"),uIo=o("xlm"),pIo=o(" \u2014 "),XX=a("a"),_Io=o("XLMModel"),bIo=o(" (XLM model)"),vIo=l(),d2=a("li"),J_e=a("strong"),FIo=o("xlm-prophetnet"),TIo=o(" \u2014 "),zX=a("a"),MIo=o("XLMProphetNetModel"),EIo=o(" (XLM-ProphetNet model)"),CIo=l(),c2=a("li"),Y_e=a("strong"),wIo=o("xlm-roberta"),AIo=o(" \u2014 "),QX=a("a"),LIo=o("XLMRobertaModel"),yIo=o(" (XLM-RoBERTa model)"),xIo=l(),m2=a("li"),K_e=a("strong"),$Io=o("xlm-roberta-xl"),kIo=o(" \u2014 "),WX=a("a"),SIo=o("XLMRobertaXLModel"),RIo=o(" (XLM-RoBERTa-XL model)"),PIo=l(),f2=a("li"),Z_e=a("strong"),BIo=o("xlnet"),IIo=o(" \u2014 "),UX=a("a"),NIo=o("XLNetModel"),qIo=o(" (XLNet model)"),jIo=l(),g2=a("li"),ebe=a("strong"),DIo=o("yolos"),GIo=o(" \u2014 "),HX=a("a"),OIo=o("YolosModel"),VIo=o(" (YOLOS model)"),XIo=l(),h2=a("li"),obe=a("strong"),zIo=o("yoso"),QIo=o(" \u2014 "),JX=a("a"),WIo=o("YosoModel"),UIo=o(" (YOSO model)"),HIo=l(),u2=a("p"),JIo=o("The model is set in evaluation mode by default using "),rbe=a("code"),YIo=o("model.eval()"),KIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),ZIo=o("model.train()"),eNo=l(),F(p2.$$.fragment),lZe=l(),Fd=a("h2"),_2=a("a"),abe=a("span"),F(vx.$$.fragment),oNo=l(),nbe=a("span"),rNo=o("AutoModelForPreTraining"),iZe=l(),Bo=a("div"),F(Fx.$$.fragment),tNo=l(),Td=a("p"),aNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YX=a("a"),nNo=o("from_pretrained()"),sNo=o(" class method or the "),KX=a("a"),lNo=o("from_config()"),iNo=o(` class
method.`),dNo=l(),Tx=a("p"),cNo=o("This class cannot be instantiated directly using "),sbe=a("code"),mNo=o("__init__()"),fNo=o(" (throws an error)."),gNo=l(),bt=a("div"),F(Mx.$$.fragment),hNo=l(),lbe=a("p"),uNo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pNo=l(),Md=a("p"),_No=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),bNo=o("not"),vNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),FNo=o("from_pretrained()"),TNo=o(" to load the model weights."),MNo=l(),F(b2.$$.fragment),ENo=l(),eo=a("div"),F(Ex.$$.fragment),CNo=l(),dbe=a("p"),wNo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ANo=l(),Ya=a("p"),LNo=o("The model class to instantiate is selected based on the "),cbe=a("code"),yNo=o("model_type"),xNo=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),$No=o("pretrained_model_name_or_path"),kNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),SNo=o("pretrained_model_name_or_path"),RNo=o(":"),PNo=l(),G=a("ul"),v2=a("li"),gbe=a("strong"),BNo=o("albert"),INo=o(" \u2014 "),ez=a("a"),NNo=o("AlbertForPreTraining"),qNo=o(" (ALBERT model)"),jNo=l(),F2=a("li"),hbe=a("strong"),DNo=o("bart"),GNo=o(" \u2014 "),oz=a("a"),ONo=o("BartForConditionalGeneration"),VNo=o(" (BART model)"),XNo=l(),T2=a("li"),ube=a("strong"),zNo=o("bert"),QNo=o(" \u2014 "),rz=a("a"),WNo=o("BertForPreTraining"),UNo=o(" (BERT model)"),HNo=l(),M2=a("li"),pbe=a("strong"),JNo=o("big_bird"),YNo=o(" \u2014 "),tz=a("a"),KNo=o("BigBirdForPreTraining"),ZNo=o(" (BigBird model)"),eqo=l(),E2=a("li"),_be=a("strong"),oqo=o("bloom"),rqo=o(" \u2014 "),az=a("a"),tqo=o("BloomForCausalLM"),aqo=o(" (BLOOM model)"),nqo=l(),C2=a("li"),bbe=a("strong"),sqo=o("camembert"),lqo=o(" \u2014 "),nz=a("a"),iqo=o("CamembertForMaskedLM"),dqo=o(" (CamemBERT model)"),cqo=l(),w2=a("li"),vbe=a("strong"),mqo=o("ctrl"),fqo=o(" \u2014 "),sz=a("a"),gqo=o("CTRLLMHeadModel"),hqo=o(" (CTRL model)"),uqo=l(),A2=a("li"),Fbe=a("strong"),pqo=o("data2vec-text"),_qo=o(" \u2014 "),lz=a("a"),bqo=o("Data2VecTextForMaskedLM"),vqo=o(" (Data2VecText model)"),Fqo=l(),L2=a("li"),Tbe=a("strong"),Tqo=o("deberta"),Mqo=o(" \u2014 "),iz=a("a"),Eqo=o("DebertaForMaskedLM"),Cqo=o(" (DeBERTa model)"),wqo=l(),y2=a("li"),Mbe=a("strong"),Aqo=o("deberta-v2"),Lqo=o(" \u2014 "),dz=a("a"),yqo=o("DebertaV2ForMaskedLM"),xqo=o(" (DeBERTa-v2 model)"),$qo=l(),x2=a("li"),Ebe=a("strong"),kqo=o("distilbert"),Sqo=o(" \u2014 "),cz=a("a"),Rqo=o("DistilBertForMaskedLM"),Pqo=o(" (DistilBERT model)"),Bqo=l(),$2=a("li"),Cbe=a("strong"),Iqo=o("electra"),Nqo=o(" \u2014 "),mz=a("a"),qqo=o("ElectraForPreTraining"),jqo=o(" (ELECTRA model)"),Dqo=l(),k2=a("li"),wbe=a("strong"),Gqo=o("ernie"),Oqo=o(" \u2014 "),fz=a("a"),Vqo=o("ErnieForPreTraining"),Xqo=o(" (ERNIE model)"),zqo=l(),S2=a("li"),Abe=a("strong"),Qqo=o("flaubert"),Wqo=o(" \u2014 "),gz=a("a"),Uqo=o("FlaubertWithLMHeadModel"),Hqo=o(" (FlauBERT model)"),Jqo=l(),R2=a("li"),Lbe=a("strong"),Yqo=o("flava"),Kqo=o(" \u2014 "),hz=a("a"),Zqo=o("FlavaForPreTraining"),ejo=o(" (FLAVA model)"),ojo=l(),P2=a("li"),ybe=a("strong"),rjo=o("fnet"),tjo=o(" \u2014 "),uz=a("a"),ajo=o("FNetForPreTraining"),njo=o(" (FNet model)"),sjo=l(),B2=a("li"),xbe=a("strong"),ljo=o("fsmt"),ijo=o(" \u2014 "),pz=a("a"),djo=o("FSMTForConditionalGeneration"),cjo=o(" (FairSeq Machine-Translation model)"),mjo=l(),I2=a("li"),$be=a("strong"),fjo=o("funnel"),gjo=o(" \u2014 "),_z=a("a"),hjo=o("FunnelForPreTraining"),ujo=o(" (Funnel Transformer model)"),pjo=l(),N2=a("li"),kbe=a("strong"),_jo=o("gpt2"),bjo=o(" \u2014 "),bz=a("a"),vjo=o("GPT2LMHeadModel"),Fjo=o(" (OpenAI GPT-2 model)"),Tjo=l(),q2=a("li"),Sbe=a("strong"),Mjo=o("ibert"),Ejo=o(" \u2014 "),vz=a("a"),Cjo=o("IBertForMaskedLM"),wjo=o(" (I-BERT model)"),Ajo=l(),j2=a("li"),Rbe=a("strong"),Ljo=o("layoutlm"),yjo=o(" \u2014 "),Fz=a("a"),xjo=o("LayoutLMForMaskedLM"),$jo=o(" (LayoutLM model)"),kjo=l(),D2=a("li"),Pbe=a("strong"),Sjo=o("longformer"),Rjo=o(" \u2014 "),Tz=a("a"),Pjo=o("LongformerForMaskedLM"),Bjo=o(" (Longformer model)"),Ijo=l(),G2=a("li"),Bbe=a("strong"),Njo=o("luke"),qjo=o(" \u2014 "),Mz=a("a"),jjo=o("LukeForMaskedLM"),Djo=o(" (LUKE model)"),Gjo=l(),O2=a("li"),Ibe=a("strong"),Ojo=o("lxmert"),Vjo=o(" \u2014 "),Ez=a("a"),Xjo=o("LxmertForPreTraining"),zjo=o(" (LXMERT model)"),Qjo=l(),V2=a("li"),Nbe=a("strong"),Wjo=o("megatron-bert"),Ujo=o(" \u2014 "),Cz=a("a"),Hjo=o("MegatronBertForPreTraining"),Jjo=o(" (Megatron-BERT model)"),Yjo=l(),X2=a("li"),qbe=a("strong"),Kjo=o("mobilebert"),Zjo=o(" \u2014 "),wz=a("a"),eDo=o("MobileBertForPreTraining"),oDo=o(" (MobileBERT model)"),rDo=l(),z2=a("li"),jbe=a("strong"),tDo=o("mpnet"),aDo=o(" \u2014 "),Az=a("a"),nDo=o("MPNetForMaskedLM"),sDo=o(" (MPNet model)"),lDo=l(),Q2=a("li"),Dbe=a("strong"),iDo=o("mvp"),dDo=o(" \u2014 "),Lz=a("a"),cDo=o("MvpForConditionalGeneration"),mDo=o(" (MVP model)"),fDo=l(),W2=a("li"),Gbe=a("strong"),gDo=o("nezha"),hDo=o(" \u2014 "),yz=a("a"),uDo=o("NezhaForPreTraining"),pDo=o(" (Nezha model)"),_Do=l(),U2=a("li"),Obe=a("strong"),bDo=o("openai-gpt"),vDo=o(" \u2014 "),xz=a("a"),FDo=o("OpenAIGPTLMHeadModel"),TDo=o(" (OpenAI GPT model)"),MDo=l(),H2=a("li"),Vbe=a("strong"),EDo=o("retribert"),CDo=o(" \u2014 "),$z=a("a"),wDo=o("RetriBertModel"),ADo=o(" (RetriBERT model)"),LDo=l(),J2=a("li"),Xbe=a("strong"),yDo=o("roberta"),xDo=o(" \u2014 "),kz=a("a"),$Do=o("RobertaForMaskedLM"),kDo=o(" (RoBERTa model)"),SDo=l(),Y2=a("li"),zbe=a("strong"),RDo=o("splinter"),PDo=o(" \u2014 "),Sz=a("a"),BDo=o("SplinterForPreTraining"),IDo=o(" (Splinter model)"),NDo=l(),K2=a("li"),Qbe=a("strong"),qDo=o("squeezebert"),jDo=o(" \u2014 "),Rz=a("a"),DDo=o("SqueezeBertForMaskedLM"),GDo=o(" (SqueezeBERT model)"),ODo=l(),Z2=a("li"),Wbe=a("strong"),VDo=o("t5"),XDo=o(" \u2014 "),Pz=a("a"),zDo=o("T5ForConditionalGeneration"),QDo=o(" (T5 model)"),WDo=l(),e1=a("li"),Ube=a("strong"),UDo=o("tapas"),HDo=o(" \u2014 "),Bz=a("a"),JDo=o("TapasForMaskedLM"),YDo=o(" (TAPAS model)"),KDo=l(),o1=a("li"),Hbe=a("strong"),ZDo=o("transfo-xl"),eGo=o(" \u2014 "),Iz=a("a"),oGo=o("TransfoXLLMHeadModel"),rGo=o(" (Transformer-XL model)"),tGo=l(),r1=a("li"),Jbe=a("strong"),aGo=o("unispeech"),nGo=o(" \u2014 "),Nz=a("a"),sGo=o("UniSpeechForPreTraining"),lGo=o(" (UniSpeech model)"),iGo=l(),t1=a("li"),Ybe=a("strong"),dGo=o("unispeech-sat"),cGo=o(" \u2014 "),qz=a("a"),mGo=o("UniSpeechSatForPreTraining"),fGo=o(" (UniSpeechSat model)"),gGo=l(),a1=a("li"),Kbe=a("strong"),hGo=o("videomae"),uGo=o(" \u2014 "),jz=a("a"),pGo=o("VideoMAEForPreTraining"),_Go=o(" (VideoMAE model)"),bGo=l(),n1=a("li"),Zbe=a("strong"),vGo=o("visual_bert"),FGo=o(" \u2014 "),Dz=a("a"),TGo=o("VisualBertForPreTraining"),MGo=o(" (VisualBERT model)"),EGo=l(),s1=a("li"),e2e=a("strong"),CGo=o("vit_mae"),wGo=o(" \u2014 "),Gz=a("a"),AGo=o("ViTMAEForPreTraining"),LGo=o(" (ViTMAE model)"),yGo=l(),l1=a("li"),o2e=a("strong"),xGo=o("wav2vec2"),$Go=o(" \u2014 "),Oz=a("a"),kGo=o("Wav2Vec2ForPreTraining"),SGo=o(" (Wav2Vec2 model)"),RGo=l(),i1=a("li"),r2e=a("strong"),PGo=o("wav2vec2-conformer"),BGo=o(" \u2014 "),Vz=a("a"),IGo=o("Wav2Vec2ConformerForPreTraining"),NGo=o(" (Wav2Vec2-Conformer model)"),qGo=l(),d1=a("li"),t2e=a("strong"),jGo=o("xlm"),DGo=o(" \u2014 "),Xz=a("a"),GGo=o("XLMWithLMHeadModel"),OGo=o(" (XLM model)"),VGo=l(),c1=a("li"),a2e=a("strong"),XGo=o("xlm-roberta"),zGo=o(" \u2014 "),zz=a("a"),QGo=o("XLMRobertaForMaskedLM"),WGo=o(" (XLM-RoBERTa model)"),UGo=l(),m1=a("li"),n2e=a("strong"),HGo=o("xlm-roberta-xl"),JGo=o(" \u2014 "),Qz=a("a"),YGo=o("XLMRobertaXLForMaskedLM"),KGo=o(" (XLM-RoBERTa-XL model)"),ZGo=l(),f1=a("li"),s2e=a("strong"),eOo=o("xlnet"),oOo=o(" \u2014 "),Wz=a("a"),rOo=o("XLNetLMHeadModel"),tOo=o(" (XLNet model)"),aOo=l(),g1=a("p"),nOo=o("The model is set in evaluation mode by default using "),l2e=a("code"),sOo=o("model.eval()"),lOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=a("code"),iOo=o("model.train()"),dOo=l(),F(h1.$$.fragment),dZe=l(),Ed=a("h2"),u1=a("a"),d2e=a("span"),F(Cx.$$.fragment),cOo=l(),c2e=a("span"),mOo=o("AutoModelForCausalLM"),cZe=l(),Io=a("div"),F(wx.$$.fragment),fOo=l(),Cd=a("p"),gOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uz=a("a"),hOo=o("from_pretrained()"),uOo=o(" class method or the "),Hz=a("a"),pOo=o("from_config()"),_Oo=o(` class
method.`),bOo=l(),Ax=a("p"),vOo=o("This class cannot be instantiated directly using "),m2e=a("code"),FOo=o("__init__()"),TOo=o(" (throws an error)."),MOo=l(),vt=a("div"),F(Lx.$$.fragment),EOo=l(),f2e=a("p"),COo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wOo=l(),wd=a("p"),AOo=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),LOo=o("not"),yOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),xOo=o("from_pretrained()"),$Oo=o(" to load the model weights."),kOo=l(),F(p1.$$.fragment),SOo=l(),oo=a("div"),F(yx.$$.fragment),ROo=l(),h2e=a("p"),POo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BOo=l(),Ka=a("p"),IOo=o("The model class to instantiate is selected based on the "),u2e=a("code"),NOo=o("model_type"),qOo=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),jOo=o("pretrained_model_name_or_path"),DOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),GOo=o("pretrained_model_name_or_path"),OOo=o(":"),VOo=l(),Q=a("ul"),_1=a("li"),b2e=a("strong"),XOo=o("bart"),zOo=o(" \u2014 "),Yz=a("a"),QOo=o("BartForCausalLM"),WOo=o(" (BART model)"),UOo=l(),b1=a("li"),v2e=a("strong"),HOo=o("bert"),JOo=o(" \u2014 "),Kz=a("a"),YOo=o("BertLMHeadModel"),KOo=o(" (BERT model)"),ZOo=l(),v1=a("li"),F2e=a("strong"),eVo=o("bert-generation"),oVo=o(" \u2014 "),Zz=a("a"),rVo=o("BertGenerationDecoder"),tVo=o(" (Bert Generation model)"),aVo=l(),F1=a("li"),T2e=a("strong"),nVo=o("big_bird"),sVo=o(" \u2014 "),eQ=a("a"),lVo=o("BigBirdForCausalLM"),iVo=o(" (BigBird model)"),dVo=l(),T1=a("li"),M2e=a("strong"),cVo=o("bigbird_pegasus"),mVo=o(" \u2014 "),oQ=a("a"),fVo=o("BigBirdPegasusForCausalLM"),gVo=o(" (BigBird-Pegasus model)"),hVo=l(),M1=a("li"),E2e=a("strong"),uVo=o("blenderbot"),pVo=o(" \u2014 "),rQ=a("a"),_Vo=o("BlenderbotForCausalLM"),bVo=o(" (Blenderbot model)"),vVo=l(),E1=a("li"),C2e=a("strong"),FVo=o("blenderbot-small"),TVo=o(" \u2014 "),tQ=a("a"),MVo=o("BlenderbotSmallForCausalLM"),EVo=o(" (BlenderbotSmall model)"),CVo=l(),C1=a("li"),w2e=a("strong"),wVo=o("bloom"),AVo=o(" \u2014 "),aQ=a("a"),LVo=o("BloomForCausalLM"),yVo=o(" (BLOOM model)"),xVo=l(),w1=a("li"),A2e=a("strong"),$Vo=o("camembert"),kVo=o(" \u2014 "),nQ=a("a"),SVo=o("CamembertForCausalLM"),RVo=o(" (CamemBERT model)"),PVo=l(),A1=a("li"),L2e=a("strong"),BVo=o("codegen"),IVo=o(" \u2014 "),sQ=a("a"),NVo=o("CodeGenForCausalLM"),qVo=o(" (CodeGen model)"),jVo=l(),L1=a("li"),y2e=a("strong"),DVo=o("ctrl"),GVo=o(" \u2014 "),lQ=a("a"),OVo=o("CTRLLMHeadModel"),VVo=o(" (CTRL model)"),XVo=l(),y1=a("li"),x2e=a("strong"),zVo=o("data2vec-text"),QVo=o(" \u2014 "),iQ=a("a"),WVo=o("Data2VecTextForCausalLM"),UVo=o(" (Data2VecText model)"),HVo=l(),x1=a("li"),$2e=a("strong"),JVo=o("electra"),YVo=o(" \u2014 "),dQ=a("a"),KVo=o("ElectraForCausalLM"),ZVo=o(" (ELECTRA model)"),eXo=l(),$1=a("li"),k2e=a("strong"),oXo=o("ernie"),rXo=o(" \u2014 "),cQ=a("a"),tXo=o("ErnieForCausalLM"),aXo=o(" (ERNIE model)"),nXo=l(),k1=a("li"),S2e=a("strong"),sXo=o("gpt2"),lXo=o(" \u2014 "),mQ=a("a"),iXo=o("GPT2LMHeadModel"),dXo=o(" (OpenAI GPT-2 model)"),cXo=l(),S1=a("li"),R2e=a("strong"),mXo=o("gpt_neo"),fXo=o(" \u2014 "),fQ=a("a"),gXo=o("GPTNeoForCausalLM"),hXo=o(" (GPT Neo model)"),uXo=l(),R1=a("li"),P2e=a("strong"),pXo=o("gpt_neox"),_Xo=o(" \u2014 "),gQ=a("a"),bXo=o("GPTNeoXForCausalLM"),vXo=o(" (GPT NeoX model)"),FXo=l(),P1=a("li"),B2e=a("strong"),TXo=o("gpt_neox_japanese"),MXo=o(" \u2014 "),hQ=a("a"),EXo=o("GPTNeoXJapaneseForCausalLM"),CXo=o(" (GPT NeoX Japanese model)"),wXo=l(),B1=a("li"),I2e=a("strong"),AXo=o("gptj"),LXo=o(" \u2014 "),uQ=a("a"),yXo=o("GPTJForCausalLM"),xXo=o(" (GPT-J model)"),$Xo=l(),I1=a("li"),N2e=a("strong"),kXo=o("marian"),SXo=o(" \u2014 "),pQ=a("a"),RXo=o("MarianForCausalLM"),PXo=o(" (Marian model)"),BXo=l(),N1=a("li"),q2e=a("strong"),IXo=o("mbart"),NXo=o(" \u2014 "),_Q=a("a"),qXo=o("MBartForCausalLM"),jXo=o(" (mBART model)"),DXo=l(),q1=a("li"),j2e=a("strong"),GXo=o("megatron-bert"),OXo=o(" \u2014 "),bQ=a("a"),VXo=o("MegatronBertForCausalLM"),XXo=o(" (Megatron-BERT model)"),zXo=l(),j1=a("li"),D2e=a("strong"),QXo=o("mvp"),WXo=o(" \u2014 "),vQ=a("a"),UXo=o("MvpForCausalLM"),HXo=o(" (MVP model)"),JXo=l(),D1=a("li"),G2e=a("strong"),YXo=o("openai-gpt"),KXo=o(" \u2014 "),FQ=a("a"),ZXo=o("OpenAIGPTLMHeadModel"),ezo=o(" (OpenAI GPT model)"),ozo=l(),G1=a("li"),O2e=a("strong"),rzo=o("opt"),tzo=o(" \u2014 "),TQ=a("a"),azo=o("OPTForCausalLM"),nzo=o(" (OPT model)"),szo=l(),O1=a("li"),V2e=a("strong"),lzo=o("pegasus"),izo=o(" \u2014 "),MQ=a("a"),dzo=o("PegasusForCausalLM"),czo=o(" (Pegasus model)"),mzo=l(),V1=a("li"),X2e=a("strong"),fzo=o("plbart"),gzo=o(" \u2014 "),EQ=a("a"),hzo=o("PLBartForCausalLM"),uzo=o(" (PLBart model)"),pzo=l(),X1=a("li"),z2e=a("strong"),_zo=o("prophetnet"),bzo=o(" \u2014 "),CQ=a("a"),vzo=o("ProphetNetForCausalLM"),Fzo=o(" (ProphetNet model)"),Tzo=l(),z1=a("li"),Q2e=a("strong"),Mzo=o("qdqbert"),Ezo=o(" \u2014 "),wQ=a("a"),Czo=o("QDQBertLMHeadModel"),wzo=o(" (QDQBert model)"),Azo=l(),Q1=a("li"),W2e=a("strong"),Lzo=o("reformer"),yzo=o(" \u2014 "),AQ=a("a"),xzo=o("ReformerModelWithLMHead"),$zo=o(" (Reformer model)"),kzo=l(),W1=a("li"),U2e=a("strong"),Szo=o("rembert"),Rzo=o(" \u2014 "),LQ=a("a"),Pzo=o("RemBertForCausalLM"),Bzo=o(" (RemBERT model)"),Izo=l(),U1=a("li"),H2e=a("strong"),Nzo=o("roberta"),qzo=o(" \u2014 "),yQ=a("a"),jzo=o("RobertaForCausalLM"),Dzo=o(" (RoBERTa model)"),Gzo=l(),H1=a("li"),J2e=a("strong"),Ozo=o("roformer"),Vzo=o(" \u2014 "),xQ=a("a"),Xzo=o("RoFormerForCausalLM"),zzo=o(" (RoFormer model)"),Qzo=l(),J1=a("li"),Y2e=a("strong"),Wzo=o("speech_to_text_2"),Uzo=o(" \u2014 "),$Q=a("a"),Hzo=o("Speech2Text2ForCausalLM"),Jzo=o(" (Speech2Text2 model)"),Yzo=l(),Y1=a("li"),K2e=a("strong"),Kzo=o("transfo-xl"),Zzo=o(" \u2014 "),kQ=a("a"),eQo=o("TransfoXLLMHeadModel"),oQo=o(" (Transformer-XL model)"),rQo=l(),K1=a("li"),Z2e=a("strong"),tQo=o("trocr"),aQo=o(" \u2014 "),SQ=a("a"),nQo=o("TrOCRForCausalLM"),sQo=o(" (TrOCR model)"),lQo=l(),Z1=a("li"),e1e=a("strong"),iQo=o("xglm"),dQo=o(" \u2014 "),RQ=a("a"),cQo=o("XGLMForCausalLM"),mQo=o(" (XGLM model)"),fQo=l(),ev=a("li"),o1e=a("strong"),gQo=o("xlm"),hQo=o(" \u2014 "),PQ=a("a"),uQo=o("XLMWithLMHeadModel"),pQo=o(" (XLM model)"),_Qo=l(),ov=a("li"),r1e=a("strong"),bQo=o("xlm-prophetnet"),vQo=o(" \u2014 "),BQ=a("a"),FQo=o("XLMProphetNetForCausalLM"),TQo=o(" (XLM-ProphetNet model)"),MQo=l(),rv=a("li"),t1e=a("strong"),EQo=o("xlm-roberta"),CQo=o(" \u2014 "),IQ=a("a"),wQo=o("XLMRobertaForCausalLM"),AQo=o(" (XLM-RoBERTa model)"),LQo=l(),tv=a("li"),a1e=a("strong"),yQo=o("xlm-roberta-xl"),xQo=o(" \u2014 "),NQ=a("a"),$Qo=o("XLMRobertaXLForCausalLM"),kQo=o(" (XLM-RoBERTa-XL model)"),SQo=l(),av=a("li"),n1e=a("strong"),RQo=o("xlnet"),PQo=o(" \u2014 "),qQ=a("a"),BQo=o("XLNetLMHeadModel"),IQo=o(" (XLNet model)"),NQo=l(),nv=a("p"),qQo=o("The model is set in evaluation mode by default using "),s1e=a("code"),jQo=o("model.eval()"),DQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=a("code"),GQo=o("model.train()"),OQo=l(),F(sv.$$.fragment),mZe=l(),Ad=a("h2"),lv=a("a"),i1e=a("span"),F(xx.$$.fragment),VQo=l(),d1e=a("span"),XQo=o("AutoModelForMaskedLM"),fZe=l(),No=a("div"),F($x.$$.fragment),zQo=l(),Ld=a("p"),QQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=a("a"),WQo=o("from_pretrained()"),UQo=o(" class method or the "),DQ=a("a"),HQo=o("from_config()"),JQo=o(` class
method.`),YQo=l(),kx=a("p"),KQo=o("This class cannot be instantiated directly using "),c1e=a("code"),ZQo=o("__init__()"),eWo=o(" (throws an error)."),oWo=l(),Ft=a("div"),F(Sx.$$.fragment),rWo=l(),m1e=a("p"),tWo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aWo=l(),yd=a("p"),nWo=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),sWo=o("not"),lWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),iWo=o("from_pretrained()"),dWo=o(" to load the model weights."),cWo=l(),F(iv.$$.fragment),mWo=l(),ro=a("div"),F(Rx.$$.fragment),fWo=l(),g1e=a("p"),gWo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hWo=l(),Za=a("p"),uWo=o("The model class to instantiate is selected based on the "),h1e=a("code"),pWo=o("model_type"),_Wo=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),bWo=o("pretrained_model_name_or_path"),vWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),FWo=o("pretrained_model_name_or_path"),TWo=o(":"),MWo=l(),H=a("ul"),dv=a("li"),_1e=a("strong"),EWo=o("albert"),CWo=o(" \u2014 "),OQ=a("a"),wWo=o("AlbertForMaskedLM"),AWo=o(" (ALBERT model)"),LWo=l(),cv=a("li"),b1e=a("strong"),yWo=o("bart"),xWo=o(" \u2014 "),VQ=a("a"),$Wo=o("BartForConditionalGeneration"),kWo=o(" (BART model)"),SWo=l(),mv=a("li"),v1e=a("strong"),RWo=o("bert"),PWo=o(" \u2014 "),XQ=a("a"),BWo=o("BertForMaskedLM"),IWo=o(" (BERT model)"),NWo=l(),fv=a("li"),F1e=a("strong"),qWo=o("big_bird"),jWo=o(" \u2014 "),zQ=a("a"),DWo=o("BigBirdForMaskedLM"),GWo=o(" (BigBird model)"),OWo=l(),gv=a("li"),T1e=a("strong"),VWo=o("camembert"),XWo=o(" \u2014 "),QQ=a("a"),zWo=o("CamembertForMaskedLM"),QWo=o(" (CamemBERT model)"),WWo=l(),hv=a("li"),M1e=a("strong"),UWo=o("convbert"),HWo=o(" \u2014 "),WQ=a("a"),JWo=o("ConvBertForMaskedLM"),YWo=o(" (ConvBERT model)"),KWo=l(),uv=a("li"),E1e=a("strong"),ZWo=o("data2vec-text"),eUo=o(" \u2014 "),UQ=a("a"),oUo=o("Data2VecTextForMaskedLM"),rUo=o(" (Data2VecText model)"),tUo=l(),pv=a("li"),C1e=a("strong"),aUo=o("deberta"),nUo=o(" \u2014 "),HQ=a("a"),sUo=o("DebertaForMaskedLM"),lUo=o(" (DeBERTa model)"),iUo=l(),_v=a("li"),w1e=a("strong"),dUo=o("deberta-v2"),cUo=o(" \u2014 "),JQ=a("a"),mUo=o("DebertaV2ForMaskedLM"),fUo=o(" (DeBERTa-v2 model)"),gUo=l(),bv=a("li"),A1e=a("strong"),hUo=o("distilbert"),uUo=o(" \u2014 "),YQ=a("a"),pUo=o("DistilBertForMaskedLM"),_Uo=o(" (DistilBERT model)"),bUo=l(),vv=a("li"),L1e=a("strong"),vUo=o("electra"),FUo=o(" \u2014 "),KQ=a("a"),TUo=o("ElectraForMaskedLM"),MUo=o(" (ELECTRA model)"),EUo=l(),Fv=a("li"),y1e=a("strong"),CUo=o("ernie"),wUo=o(" \u2014 "),ZQ=a("a"),AUo=o("ErnieForMaskedLM"),LUo=o(" (ERNIE model)"),yUo=l(),Tv=a("li"),x1e=a("strong"),xUo=o("flaubert"),$Uo=o(" \u2014 "),eW=a("a"),kUo=o("FlaubertWithLMHeadModel"),SUo=o(" (FlauBERT model)"),RUo=l(),Mv=a("li"),$1e=a("strong"),PUo=o("fnet"),BUo=o(" \u2014 "),oW=a("a"),IUo=o("FNetForMaskedLM"),NUo=o(" (FNet model)"),qUo=l(),Ev=a("li"),k1e=a("strong"),jUo=o("funnel"),DUo=o(" \u2014 "),rW=a("a"),GUo=o("FunnelForMaskedLM"),OUo=o(" (Funnel Transformer model)"),VUo=l(),Cv=a("li"),S1e=a("strong"),XUo=o("ibert"),zUo=o(" \u2014 "),tW=a("a"),QUo=o("IBertForMaskedLM"),WUo=o(" (I-BERT model)"),UUo=l(),wv=a("li"),R1e=a("strong"),HUo=o("layoutlm"),JUo=o(" \u2014 "),aW=a("a"),YUo=o("LayoutLMForMaskedLM"),KUo=o(" (LayoutLM model)"),ZUo=l(),Av=a("li"),P1e=a("strong"),eHo=o("longformer"),oHo=o(" \u2014 "),nW=a("a"),rHo=o("LongformerForMaskedLM"),tHo=o(" (Longformer model)"),aHo=l(),Lv=a("li"),B1e=a("strong"),nHo=o("luke"),sHo=o(" \u2014 "),sW=a("a"),lHo=o("LukeForMaskedLM"),iHo=o(" (LUKE model)"),dHo=l(),yv=a("li"),I1e=a("strong"),cHo=o("mbart"),mHo=o(" \u2014 "),lW=a("a"),fHo=o("MBartForConditionalGeneration"),gHo=o(" (mBART model)"),hHo=l(),xv=a("li"),N1e=a("strong"),uHo=o("megatron-bert"),pHo=o(" \u2014 "),iW=a("a"),_Ho=o("MegatronBertForMaskedLM"),bHo=o(" (Megatron-BERT model)"),vHo=l(),$v=a("li"),q1e=a("strong"),FHo=o("mobilebert"),THo=o(" \u2014 "),dW=a("a"),MHo=o("MobileBertForMaskedLM"),EHo=o(" (MobileBERT model)"),CHo=l(),kv=a("li"),j1e=a("strong"),wHo=o("mpnet"),AHo=o(" \u2014 "),cW=a("a"),LHo=o("MPNetForMaskedLM"),yHo=o(" (MPNet model)"),xHo=l(),Sv=a("li"),D1e=a("strong"),$Ho=o("mvp"),kHo=o(" \u2014 "),mW=a("a"),SHo=o("MvpForConditionalGeneration"),RHo=o(" (MVP model)"),PHo=l(),Rv=a("li"),G1e=a("strong"),BHo=o("nezha"),IHo=o(" \u2014 "),fW=a("a"),NHo=o("NezhaForMaskedLM"),qHo=o(" (Nezha model)"),jHo=l(),Pv=a("li"),O1e=a("strong"),DHo=o("nystromformer"),GHo=o(" \u2014 "),gW=a("a"),OHo=o("NystromformerForMaskedLM"),VHo=o(" (Nystr\xF6mformer model)"),XHo=l(),Bv=a("li"),V1e=a("strong"),zHo=o("perceiver"),QHo=o(" \u2014 "),hW=a("a"),WHo=o("PerceiverForMaskedLM"),UHo=o(" (Perceiver model)"),HHo=l(),Iv=a("li"),X1e=a("strong"),JHo=o("qdqbert"),YHo=o(" \u2014 "),uW=a("a"),KHo=o("QDQBertForMaskedLM"),ZHo=o(" (QDQBert model)"),eJo=l(),Nv=a("li"),z1e=a("strong"),oJo=o("reformer"),rJo=o(" \u2014 "),pW=a("a"),tJo=o("ReformerForMaskedLM"),aJo=o(" (Reformer model)"),nJo=l(),qv=a("li"),Q1e=a("strong"),sJo=o("rembert"),lJo=o(" \u2014 "),_W=a("a"),iJo=o("RemBertForMaskedLM"),dJo=o(" (RemBERT model)"),cJo=l(),jv=a("li"),W1e=a("strong"),mJo=o("roberta"),fJo=o(" \u2014 "),bW=a("a"),gJo=o("RobertaForMaskedLM"),hJo=o(" (RoBERTa model)"),uJo=l(),Dv=a("li"),U1e=a("strong"),pJo=o("roformer"),_Jo=o(" \u2014 "),vW=a("a"),bJo=o("RoFormerForMaskedLM"),vJo=o(" (RoFormer model)"),FJo=l(),Gv=a("li"),H1e=a("strong"),TJo=o("squeezebert"),MJo=o(" \u2014 "),FW=a("a"),EJo=o("SqueezeBertForMaskedLM"),CJo=o(" (SqueezeBERT model)"),wJo=l(),Ov=a("li"),J1e=a("strong"),AJo=o("tapas"),LJo=o(" \u2014 "),TW=a("a"),yJo=o("TapasForMaskedLM"),xJo=o(" (TAPAS model)"),$Jo=l(),Vv=a("li"),Y1e=a("strong"),kJo=o("wav2vec2"),SJo=o(" \u2014 "),K1e=a("code"),RJo=o("Wav2Vec2ForMaskedLM"),PJo=o(" (Wav2Vec2 model)"),BJo=l(),Xv=a("li"),Z1e=a("strong"),IJo=o("xlm"),NJo=o(" \u2014 "),MW=a("a"),qJo=o("XLMWithLMHeadModel"),jJo=o(" (XLM model)"),DJo=l(),zv=a("li"),eve=a("strong"),GJo=o("xlm-roberta"),OJo=o(" \u2014 "),EW=a("a"),VJo=o("XLMRobertaForMaskedLM"),XJo=o(" (XLM-RoBERTa model)"),zJo=l(),Qv=a("li"),ove=a("strong"),QJo=o("xlm-roberta-xl"),WJo=o(" \u2014 "),CW=a("a"),UJo=o("XLMRobertaXLForMaskedLM"),HJo=o(" (XLM-RoBERTa-XL model)"),JJo=l(),Wv=a("li"),rve=a("strong"),YJo=o("yoso"),KJo=o(" \u2014 "),wW=a("a"),ZJo=o("YosoForMaskedLM"),eYo=o(" (YOSO model)"),oYo=l(),Uv=a("p"),rYo=o("The model is set in evaluation mode by default using "),tve=a("code"),tYo=o("model.eval()"),aYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=a("code"),nYo=o("model.train()"),sYo=l(),F(Hv.$$.fragment),gZe=l(),xd=a("h2"),Jv=a("a"),nve=a("span"),F(Px.$$.fragment),lYo=l(),sve=a("span"),iYo=o("AutoModelForSeq2SeqLM"),hZe=l(),qo=a("div"),F(Bx.$$.fragment),dYo=l(),$d=a("p"),cYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AW=a("a"),mYo=o("from_pretrained()"),fYo=o(" class method or the "),LW=a("a"),gYo=o("from_config()"),hYo=o(` class
method.`),uYo=l(),Ix=a("p"),pYo=o("This class cannot be instantiated directly using "),lve=a("code"),_Yo=o("__init__()"),bYo=o(" (throws an error)."),vYo=l(),Tt=a("div"),F(Nx.$$.fragment),FYo=l(),ive=a("p"),TYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MYo=l(),kd=a("p"),EYo=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),CYo=o("not"),wYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),AYo=o("from_pretrained()"),LYo=o(" to load the model weights."),yYo=l(),F(Yv.$$.fragment),xYo=l(),to=a("div"),F(qx.$$.fragment),$Yo=l(),cve=a("p"),kYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SYo=l(),en=a("p"),RYo=o("The model class to instantiate is selected based on the "),mve=a("code"),PYo=o("model_type"),BYo=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),IYo=o("pretrained_model_name_or_path"),NYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),qYo=o("pretrained_model_name_or_path"),jYo=o(":"),DYo=l(),me=a("ul"),Kv=a("li"),hve=a("strong"),GYo=o("bart"),OYo=o(" \u2014 "),xW=a("a"),VYo=o("BartForConditionalGeneration"),XYo=o(" (BART model)"),zYo=l(),Zv=a("li"),uve=a("strong"),QYo=o("bigbird_pegasus"),WYo=o(" \u2014 "),$W=a("a"),UYo=o("BigBirdPegasusForConditionalGeneration"),HYo=o(" (BigBird-Pegasus model)"),JYo=l(),eF=a("li"),pve=a("strong"),YYo=o("blenderbot"),KYo=o(" \u2014 "),kW=a("a"),ZYo=o("BlenderbotForConditionalGeneration"),eKo=o(" (Blenderbot model)"),oKo=l(),oF=a("li"),_ve=a("strong"),rKo=o("blenderbot-small"),tKo=o(" \u2014 "),SW=a("a"),aKo=o("BlenderbotSmallForConditionalGeneration"),nKo=o(" (BlenderbotSmall model)"),sKo=l(),rF=a("li"),bve=a("strong"),lKo=o("encoder-decoder"),iKo=o(" \u2014 "),RW=a("a"),dKo=o("EncoderDecoderModel"),cKo=o(" (Encoder decoder model)"),mKo=l(),tF=a("li"),vve=a("strong"),fKo=o("fsmt"),gKo=o(" \u2014 "),PW=a("a"),hKo=o("FSMTForConditionalGeneration"),uKo=o(" (FairSeq Machine-Translation model)"),pKo=l(),aF=a("li"),Fve=a("strong"),_Ko=o("led"),bKo=o(" \u2014 "),BW=a("a"),vKo=o("LEDForConditionalGeneration"),FKo=o(" (LED model)"),TKo=l(),nF=a("li"),Tve=a("strong"),MKo=o("longt5"),EKo=o(" \u2014 "),IW=a("a"),CKo=o("LongT5ForConditionalGeneration"),wKo=o(" (LongT5 model)"),AKo=l(),sF=a("li"),Mve=a("strong"),LKo=o("m2m_100"),yKo=o(" \u2014 "),NW=a("a"),xKo=o("M2M100ForConditionalGeneration"),$Ko=o(" (M2M100 model)"),kKo=l(),lF=a("li"),Eve=a("strong"),SKo=o("marian"),RKo=o(" \u2014 "),qW=a("a"),PKo=o("MarianMTModel"),BKo=o(" (Marian model)"),IKo=l(),iF=a("li"),Cve=a("strong"),NKo=o("mbart"),qKo=o(" \u2014 "),jW=a("a"),jKo=o("MBartForConditionalGeneration"),DKo=o(" (mBART model)"),GKo=l(),dF=a("li"),wve=a("strong"),OKo=o("mt5"),VKo=o(" \u2014 "),DW=a("a"),XKo=o("MT5ForConditionalGeneration"),zKo=o(" (MT5 model)"),QKo=l(),cF=a("li"),Ave=a("strong"),WKo=o("mvp"),UKo=o(" \u2014 "),GW=a("a"),HKo=o("MvpForConditionalGeneration"),JKo=o(" (MVP model)"),YKo=l(),mF=a("li"),Lve=a("strong"),KKo=o("nllb"),ZKo=o(" \u2014 "),OW=a("a"),eZo=o("M2M100ForConditionalGeneration"),oZo=o(" (NLLB model)"),rZo=l(),fF=a("li"),yve=a("strong"),tZo=o("pegasus"),aZo=o(" \u2014 "),VW=a("a"),nZo=o("PegasusForConditionalGeneration"),sZo=o(" (Pegasus model)"),lZo=l(),gF=a("li"),xve=a("strong"),iZo=o("pegasus_x"),dZo=o(" \u2014 "),XW=a("a"),cZo=o("PegasusXForConditionalGeneration"),mZo=o(" (PEGASUS-X model)"),fZo=l(),hF=a("li"),$ve=a("strong"),gZo=o("plbart"),hZo=o(" \u2014 "),zW=a("a"),uZo=o("PLBartForConditionalGeneration"),pZo=o(" (PLBart model)"),_Zo=l(),uF=a("li"),kve=a("strong"),bZo=o("prophetnet"),vZo=o(" \u2014 "),QW=a("a"),FZo=o("ProphetNetForConditionalGeneration"),TZo=o(" (ProphetNet model)"),MZo=l(),pF=a("li"),Sve=a("strong"),EZo=o("t5"),CZo=o(" \u2014 "),WW=a("a"),wZo=o("T5ForConditionalGeneration"),AZo=o(" (T5 model)"),LZo=l(),_F=a("li"),Rve=a("strong"),yZo=o("xlm-prophetnet"),xZo=o(" \u2014 "),UW=a("a"),$Zo=o("XLMProphetNetForConditionalGeneration"),kZo=o(" (XLM-ProphetNet model)"),SZo=l(),bF=a("p"),RZo=o("The model is set in evaluation mode by default using "),Pve=a("code"),PZo=o("model.eval()"),BZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=a("code"),IZo=o("model.train()"),NZo=l(),F(vF.$$.fragment),uZe=l(),Sd=a("h2"),FF=a("a"),Ive=a("span"),F(jx.$$.fragment),qZo=l(),Nve=a("span"),jZo=o("AutoModelForSequenceClassification"),pZe=l(),jo=a("div"),F(Dx.$$.fragment),DZo=l(),Rd=a("p"),GZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HW=a("a"),OZo=o("from_pretrained()"),VZo=o(" class method or the "),JW=a("a"),XZo=o("from_config()"),zZo=o(` class
method.`),QZo=l(),Gx=a("p"),WZo=o("This class cannot be instantiated directly using "),qve=a("code"),UZo=o("__init__()"),HZo=o(" (throws an error)."),JZo=l(),Mt=a("div"),F(Ox.$$.fragment),YZo=l(),jve=a("p"),KZo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZZo=l(),Pd=a("p"),eer=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),oer=o("not"),rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),ter=o("from_pretrained()"),aer=o(" to load the model weights."),ner=l(),F(TF.$$.fragment),ser=l(),ao=a("div"),F(Vx.$$.fragment),ler=l(),Gve=a("p"),ier=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),der=l(),on=a("p"),cer=o("The model class to instantiate is selected based on the "),Ove=a("code"),mer=o("model_type"),fer=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),uer=o("pretrained_model_name_or_path"),per=o(":"),_er=l(),j=a("ul"),MF=a("li"),zve=a("strong"),ber=o("albert"),ver=o(" \u2014 "),KW=a("a"),Fer=o("AlbertForSequenceClassification"),Ter=o(" (ALBERT model)"),Mer=l(),EF=a("li"),Qve=a("strong"),Eer=o("bart"),Cer=o(" \u2014 "),ZW=a("a"),wer=o("BartForSequenceClassification"),Aer=o(" (BART model)"),Ler=l(),CF=a("li"),Wve=a("strong"),yer=o("bert"),xer=o(" \u2014 "),eU=a("a"),$er=o("BertForSequenceClassification"),ker=o(" (BERT model)"),Ser=l(),wF=a("li"),Uve=a("strong"),Rer=o("big_bird"),Per=o(" \u2014 "),oU=a("a"),Ber=o("BigBirdForSequenceClassification"),Ier=o(" (BigBird model)"),Ner=l(),AF=a("li"),Hve=a("strong"),qer=o("bigbird_pegasus"),jer=o(" \u2014 "),rU=a("a"),Der=o("BigBirdPegasusForSequenceClassification"),Ger=o(" (BigBird-Pegasus model)"),Oer=l(),LF=a("li"),Jve=a("strong"),Ver=o("bloom"),Xer=o(" \u2014 "),tU=a("a"),zer=o("BloomForSequenceClassification"),Qer=o(" (BLOOM model)"),Wer=l(),yF=a("li"),Yve=a("strong"),Uer=o("camembert"),Her=o(" \u2014 "),aU=a("a"),Jer=o("CamembertForSequenceClassification"),Yer=o(" (CamemBERT model)"),Ker=l(),xF=a("li"),Kve=a("strong"),Zer=o("canine"),eor=o(" \u2014 "),nU=a("a"),oor=o("CanineForSequenceClassification"),ror=o(" (CANINE model)"),tor=l(),$F=a("li"),Zve=a("strong"),aor=o("convbert"),nor=o(" \u2014 "),sU=a("a"),sor=o("ConvBertForSequenceClassification"),lor=o(" (ConvBERT model)"),ior=l(),kF=a("li"),eFe=a("strong"),dor=o("ctrl"),cor=o(" \u2014 "),lU=a("a"),mor=o("CTRLForSequenceClassification"),gor=o(" (CTRL model)"),hor=l(),SF=a("li"),oFe=a("strong"),uor=o("data2vec-text"),por=o(" \u2014 "),iU=a("a"),_or=o("Data2VecTextForSequenceClassification"),bor=o(" (Data2VecText model)"),vor=l(),RF=a("li"),rFe=a("strong"),For=o("deberta"),Tor=o(" \u2014 "),dU=a("a"),Mor=o("DebertaForSequenceClassification"),Eor=o(" (DeBERTa model)"),Cor=l(),PF=a("li"),tFe=a("strong"),wor=o("deberta-v2"),Aor=o(" \u2014 "),cU=a("a"),Lor=o("DebertaV2ForSequenceClassification"),yor=o(" (DeBERTa-v2 model)"),xor=l(),BF=a("li"),aFe=a("strong"),$or=o("distilbert"),kor=o(" \u2014 "),mU=a("a"),Sor=o("DistilBertForSequenceClassification"),Ror=o(" (DistilBERT model)"),Por=l(),IF=a("li"),nFe=a("strong"),Bor=o("electra"),Ior=o(" \u2014 "),fU=a("a"),Nor=o("ElectraForSequenceClassification"),qor=o(" (ELECTRA model)"),jor=l(),NF=a("li"),sFe=a("strong"),Dor=o("ernie"),Gor=o(" \u2014 "),gU=a("a"),Oor=o("ErnieForSequenceClassification"),Vor=o(" (ERNIE model)"),Xor=l(),qF=a("li"),lFe=a("strong"),zor=o("flaubert"),Qor=o(" \u2014 "),hU=a("a"),Wor=o("FlaubertForSequenceClassification"),Uor=o(" (FlauBERT model)"),Hor=l(),jF=a("li"),iFe=a("strong"),Jor=o("fnet"),Yor=o(" \u2014 "),uU=a("a"),Kor=o("FNetForSequenceClassification"),Zor=o(" (FNet model)"),err=l(),DF=a("li"),dFe=a("strong"),orr=o("funnel"),rrr=o(" \u2014 "),pU=a("a"),trr=o("FunnelForSequenceClassification"),arr=o(" (Funnel Transformer model)"),nrr=l(),GF=a("li"),cFe=a("strong"),srr=o("gpt2"),lrr=o(" \u2014 "),_U=a("a"),irr=o("GPT2ForSequenceClassification"),drr=o(" (OpenAI GPT-2 model)"),crr=l(),OF=a("li"),mFe=a("strong"),mrr=o("gpt_neo"),frr=o(" \u2014 "),bU=a("a"),grr=o("GPTNeoForSequenceClassification"),hrr=o(" (GPT Neo model)"),urr=l(),VF=a("li"),fFe=a("strong"),prr=o("gptj"),_rr=o(" \u2014 "),vU=a("a"),brr=o("GPTJForSequenceClassification"),vrr=o(" (GPT-J model)"),Frr=l(),XF=a("li"),gFe=a("strong"),Trr=o("ibert"),Mrr=o(" \u2014 "),FU=a("a"),Err=o("IBertForSequenceClassification"),Crr=o(" (I-BERT model)"),wrr=l(),zF=a("li"),hFe=a("strong"),Arr=o("layoutlm"),Lrr=o(" \u2014 "),TU=a("a"),yrr=o("LayoutLMForSequenceClassification"),xrr=o(" (LayoutLM model)"),$rr=l(),QF=a("li"),uFe=a("strong"),krr=o("layoutlmv2"),Srr=o(" \u2014 "),MU=a("a"),Rrr=o("LayoutLMv2ForSequenceClassification"),Prr=o(" (LayoutLMv2 model)"),Brr=l(),WF=a("li"),pFe=a("strong"),Irr=o("layoutlmv3"),Nrr=o(" \u2014 "),EU=a("a"),qrr=o("LayoutLMv3ForSequenceClassification"),jrr=o(" (LayoutLMv3 model)"),Drr=l(),UF=a("li"),_Fe=a("strong"),Grr=o("led"),Orr=o(" \u2014 "),CU=a("a"),Vrr=o("LEDForSequenceClassification"),Xrr=o(" (LED model)"),zrr=l(),HF=a("li"),bFe=a("strong"),Qrr=o("longformer"),Wrr=o(" \u2014 "),wU=a("a"),Urr=o("LongformerForSequenceClassification"),Hrr=o(" (Longformer model)"),Jrr=l(),JF=a("li"),vFe=a("strong"),Yrr=o("luke"),Krr=o(" \u2014 "),AU=a("a"),Zrr=o("LukeForSequenceClassification"),etr=o(" (LUKE model)"),otr=l(),YF=a("li"),FFe=a("strong"),rtr=o("mbart"),ttr=o(" \u2014 "),LU=a("a"),atr=o("MBartForSequenceClassification"),ntr=o(" (mBART model)"),str=l(),KF=a("li"),TFe=a("strong"),ltr=o("megatron-bert"),itr=o(" \u2014 "),yU=a("a"),dtr=o("MegatronBertForSequenceClassification"),ctr=o(" (Megatron-BERT model)"),mtr=l(),ZF=a("li"),MFe=a("strong"),ftr=o("mobilebert"),gtr=o(" \u2014 "),xU=a("a"),htr=o("MobileBertForSequenceClassification"),utr=o(" (MobileBERT model)"),ptr=l(),eT=a("li"),EFe=a("strong"),_tr=o("mpnet"),btr=o(" \u2014 "),$U=a("a"),vtr=o("MPNetForSequenceClassification"),Ftr=o(" (MPNet model)"),Ttr=l(),oT=a("li"),CFe=a("strong"),Mtr=o("mvp"),Etr=o(" \u2014 "),kU=a("a"),Ctr=o("MvpForSequenceClassification"),wtr=o(" (MVP model)"),Atr=l(),rT=a("li"),wFe=a("strong"),Ltr=o("nezha"),ytr=o(" \u2014 "),SU=a("a"),xtr=o("NezhaForSequenceClassification"),$tr=o(" (Nezha model)"),ktr=l(),tT=a("li"),AFe=a("strong"),Str=o("nystromformer"),Rtr=o(" \u2014 "),RU=a("a"),Ptr=o("NystromformerForSequenceClassification"),Btr=o(" (Nystr\xF6mformer model)"),Itr=l(),aT=a("li"),LFe=a("strong"),Ntr=o("openai-gpt"),qtr=o(" \u2014 "),PU=a("a"),jtr=o("OpenAIGPTForSequenceClassification"),Dtr=o(" (OpenAI GPT model)"),Gtr=l(),nT=a("li"),yFe=a("strong"),Otr=o("opt"),Vtr=o(" \u2014 "),BU=a("a"),Xtr=o("OPTForSequenceClassification"),ztr=o(" (OPT model)"),Qtr=l(),sT=a("li"),xFe=a("strong"),Wtr=o("perceiver"),Utr=o(" \u2014 "),IU=a("a"),Htr=o("PerceiverForSequenceClassification"),Jtr=o(" (Perceiver model)"),Ytr=l(),lT=a("li"),$Fe=a("strong"),Ktr=o("plbart"),Ztr=o(" \u2014 "),NU=a("a"),ear=o("PLBartForSequenceClassification"),oar=o(" (PLBart model)"),rar=l(),iT=a("li"),kFe=a("strong"),tar=o("qdqbert"),aar=o(" \u2014 "),qU=a("a"),nar=o("QDQBertForSequenceClassification"),sar=o(" (QDQBert model)"),lar=l(),dT=a("li"),SFe=a("strong"),iar=o("reformer"),dar=o(" \u2014 "),jU=a("a"),car=o("ReformerForSequenceClassification"),mar=o(" (Reformer model)"),far=l(),cT=a("li"),RFe=a("strong"),gar=o("rembert"),har=o(" \u2014 "),DU=a("a"),uar=o("RemBertForSequenceClassification"),par=o(" (RemBERT model)"),_ar=l(),mT=a("li"),PFe=a("strong"),bar=o("roberta"),Far=o(" \u2014 "),GU=a("a"),Tar=o("RobertaForSequenceClassification"),Mar=o(" (RoBERTa model)"),Ear=l(),fT=a("li"),BFe=a("strong"),Car=o("roformer"),war=o(" \u2014 "),OU=a("a"),Aar=o("RoFormerForSequenceClassification"),Lar=o(" (RoFormer model)"),yar=l(),gT=a("li"),IFe=a("strong"),xar=o("squeezebert"),$ar=o(" \u2014 "),VU=a("a"),kar=o("SqueezeBertForSequenceClassification"),Sar=o(" (SqueezeBERT model)"),Rar=l(),hT=a("li"),NFe=a("strong"),Par=o("tapas"),Bar=o(" \u2014 "),XU=a("a"),Iar=o("TapasForSequenceClassification"),Nar=o(" (TAPAS model)"),qar=l(),uT=a("li"),qFe=a("strong"),jar=o("transfo-xl"),Dar=o(" \u2014 "),zU=a("a"),Gar=o("TransfoXLForSequenceClassification"),Oar=o(" (Transformer-XL model)"),Var=l(),pT=a("li"),jFe=a("strong"),Xar=o("xlm"),zar=o(" \u2014 "),QU=a("a"),Qar=o("XLMForSequenceClassification"),War=o(" (XLM model)"),Uar=l(),_T=a("li"),DFe=a("strong"),Har=o("xlm-roberta"),Jar=o(" \u2014 "),WU=a("a"),Yar=o("XLMRobertaForSequenceClassification"),Kar=o(" (XLM-RoBERTa model)"),Zar=l(),bT=a("li"),GFe=a("strong"),enr=o("xlm-roberta-xl"),onr=o(" \u2014 "),UU=a("a"),rnr=o("XLMRobertaXLForSequenceClassification"),tnr=o(" (XLM-RoBERTa-XL model)"),anr=l(),vT=a("li"),OFe=a("strong"),nnr=o("xlnet"),snr=o(" \u2014 "),HU=a("a"),lnr=o("XLNetForSequenceClassification"),inr=o(" (XLNet model)"),dnr=l(),FT=a("li"),VFe=a("strong"),cnr=o("yoso"),mnr=o(" \u2014 "),JU=a("a"),fnr=o("YosoForSequenceClassification"),gnr=o(" (YOSO model)"),hnr=l(),TT=a("p"),unr=o("The model is set in evaluation mode by default using "),XFe=a("code"),pnr=o("model.eval()"),_nr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=a("code"),bnr=o("model.train()"),vnr=l(),F(MT.$$.fragment),_Ze=l(),Bd=a("h2"),ET=a("a"),QFe=a("span"),F(Xx.$$.fragment),Fnr=l(),WFe=a("span"),Tnr=o("AutoModelForMultipleChoice"),bZe=l(),Do=a("div"),F(zx.$$.fragment),Mnr=l(),Id=a("p"),Enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YU=a("a"),Cnr=o("from_pretrained()"),wnr=o(" class method or the "),KU=a("a"),Anr=o("from_config()"),Lnr=o(` class
method.`),ynr=l(),Qx=a("p"),xnr=o("This class cannot be instantiated directly using "),UFe=a("code"),$nr=o("__init__()"),knr=o(" (throws an error)."),Snr=l(),Et=a("div"),F(Wx.$$.fragment),Rnr=l(),HFe=a("p"),Pnr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bnr=l(),Nd=a("p"),Inr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),Nnr=o("not"),qnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),jnr=o("from_pretrained()"),Dnr=o(" to load the model weights."),Gnr=l(),F(CT.$$.fragment),Onr=l(),no=a("div"),F(Ux.$$.fragment),Vnr=l(),YFe=a("p"),Xnr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),znr=l(),rn=a("p"),Qnr=o("The model class to instantiate is selected based on the "),KFe=a("code"),Wnr=o("model_type"),Unr=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),Hnr=o("pretrained_model_name_or_path"),Jnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(":"),Znr=l(),Z=a("ul"),wT=a("li"),oTe=a("strong"),esr=o("albert"),osr=o(" \u2014 "),eH=a("a"),rsr=o("AlbertForMultipleChoice"),tsr=o(" (ALBERT model)"),asr=l(),AT=a("li"),rTe=a("strong"),nsr=o("bert"),ssr=o(" \u2014 "),oH=a("a"),lsr=o("BertForMultipleChoice"),isr=o(" (BERT model)"),dsr=l(),LT=a("li"),tTe=a("strong"),csr=o("big_bird"),msr=o(" \u2014 "),rH=a("a"),fsr=o("BigBirdForMultipleChoice"),gsr=o(" (BigBird model)"),hsr=l(),yT=a("li"),aTe=a("strong"),usr=o("camembert"),psr=o(" \u2014 "),tH=a("a"),_sr=o("CamembertForMultipleChoice"),bsr=o(" (CamemBERT model)"),vsr=l(),xT=a("li"),nTe=a("strong"),Fsr=o("canine"),Tsr=o(" \u2014 "),aH=a("a"),Msr=o("CanineForMultipleChoice"),Esr=o(" (CANINE model)"),Csr=l(),$T=a("li"),sTe=a("strong"),wsr=o("convbert"),Asr=o(" \u2014 "),nH=a("a"),Lsr=o("ConvBertForMultipleChoice"),ysr=o(" (ConvBERT model)"),xsr=l(),kT=a("li"),lTe=a("strong"),$sr=o("data2vec-text"),ksr=o(" \u2014 "),sH=a("a"),Ssr=o("Data2VecTextForMultipleChoice"),Rsr=o(" (Data2VecText model)"),Psr=l(),ST=a("li"),iTe=a("strong"),Bsr=o("deberta-v2"),Isr=o(" \u2014 "),lH=a("a"),Nsr=o("DebertaV2ForMultipleChoice"),qsr=o(" (DeBERTa-v2 model)"),jsr=l(),RT=a("li"),dTe=a("strong"),Dsr=o("distilbert"),Gsr=o(" \u2014 "),iH=a("a"),Osr=o("DistilBertForMultipleChoice"),Vsr=o(" (DistilBERT model)"),Xsr=l(),PT=a("li"),cTe=a("strong"),zsr=o("electra"),Qsr=o(" \u2014 "),dH=a("a"),Wsr=o("ElectraForMultipleChoice"),Usr=o(" (ELECTRA model)"),Hsr=l(),BT=a("li"),mTe=a("strong"),Jsr=o("ernie"),Ysr=o(" \u2014 "),cH=a("a"),Ksr=o("ErnieForMultipleChoice"),Zsr=o(" (ERNIE model)"),elr=l(),IT=a("li"),fTe=a("strong"),olr=o("flaubert"),rlr=o(" \u2014 "),mH=a("a"),tlr=o("FlaubertForMultipleChoice"),alr=o(" (FlauBERT model)"),nlr=l(),NT=a("li"),gTe=a("strong"),slr=o("fnet"),llr=o(" \u2014 "),fH=a("a"),ilr=o("FNetForMultipleChoice"),dlr=o(" (FNet model)"),clr=l(),qT=a("li"),hTe=a("strong"),mlr=o("funnel"),flr=o(" \u2014 "),gH=a("a"),glr=o("FunnelForMultipleChoice"),hlr=o(" (Funnel Transformer model)"),ulr=l(),jT=a("li"),uTe=a("strong"),plr=o("ibert"),_lr=o(" \u2014 "),hH=a("a"),blr=o("IBertForMultipleChoice"),vlr=o(" (I-BERT model)"),Flr=l(),DT=a("li"),pTe=a("strong"),Tlr=o("longformer"),Mlr=o(" \u2014 "),uH=a("a"),Elr=o("LongformerForMultipleChoice"),Clr=o(" (Longformer model)"),wlr=l(),GT=a("li"),_Te=a("strong"),Alr=o("luke"),Llr=o(" \u2014 "),pH=a("a"),ylr=o("LukeForMultipleChoice"),xlr=o(" (LUKE model)"),$lr=l(),OT=a("li"),bTe=a("strong"),klr=o("megatron-bert"),Slr=o(" \u2014 "),_H=a("a"),Rlr=o("MegatronBertForMultipleChoice"),Plr=o(" (Megatron-BERT model)"),Blr=l(),VT=a("li"),vTe=a("strong"),Ilr=o("mobilebert"),Nlr=o(" \u2014 "),bH=a("a"),qlr=o("MobileBertForMultipleChoice"),jlr=o(" (MobileBERT model)"),Dlr=l(),XT=a("li"),FTe=a("strong"),Glr=o("mpnet"),Olr=o(" \u2014 "),vH=a("a"),Vlr=o("MPNetForMultipleChoice"),Xlr=o(" (MPNet model)"),zlr=l(),zT=a("li"),TTe=a("strong"),Qlr=o("nezha"),Wlr=o(" \u2014 "),FH=a("a"),Ulr=o("NezhaForMultipleChoice"),Hlr=o(" (Nezha model)"),Jlr=l(),QT=a("li"),MTe=a("strong"),Ylr=o("nystromformer"),Klr=o(" \u2014 "),TH=a("a"),Zlr=o("NystromformerForMultipleChoice"),eir=o(" (Nystr\xF6mformer model)"),oir=l(),WT=a("li"),ETe=a("strong"),rir=o("qdqbert"),tir=o(" \u2014 "),MH=a("a"),air=o("QDQBertForMultipleChoice"),nir=o(" (QDQBert model)"),sir=l(),UT=a("li"),CTe=a("strong"),lir=o("rembert"),iir=o(" \u2014 "),EH=a("a"),dir=o("RemBertForMultipleChoice"),cir=o(" (RemBERT model)"),mir=l(),HT=a("li"),wTe=a("strong"),fir=o("roberta"),gir=o(" \u2014 "),CH=a("a"),hir=o("RobertaForMultipleChoice"),uir=o(" (RoBERTa model)"),pir=l(),JT=a("li"),ATe=a("strong"),_ir=o("roformer"),bir=o(" \u2014 "),wH=a("a"),vir=o("RoFormerForMultipleChoice"),Fir=o(" (RoFormer model)"),Tir=l(),YT=a("li"),LTe=a("strong"),Mir=o("squeezebert"),Eir=o(" \u2014 "),AH=a("a"),Cir=o("SqueezeBertForMultipleChoice"),wir=o(" (SqueezeBERT model)"),Air=l(),KT=a("li"),yTe=a("strong"),Lir=o("xlm"),yir=o(" \u2014 "),LH=a("a"),xir=o("XLMForMultipleChoice"),$ir=o(" (XLM model)"),kir=l(),ZT=a("li"),xTe=a("strong"),Sir=o("xlm-roberta"),Rir=o(" \u2014 "),yH=a("a"),Pir=o("XLMRobertaForMultipleChoice"),Bir=o(" (XLM-RoBERTa model)"),Iir=l(),eM=a("li"),$Te=a("strong"),Nir=o("xlm-roberta-xl"),qir=o(" \u2014 "),xH=a("a"),jir=o("XLMRobertaXLForMultipleChoice"),Dir=o(" (XLM-RoBERTa-XL model)"),Gir=l(),oM=a("li"),kTe=a("strong"),Oir=o("xlnet"),Vir=o(" \u2014 "),$H=a("a"),Xir=o("XLNetForMultipleChoice"),zir=o(" (XLNet model)"),Qir=l(),rM=a("li"),STe=a("strong"),Wir=o("yoso"),Uir=o(" \u2014 "),kH=a("a"),Hir=o("YosoForMultipleChoice"),Jir=o(" (YOSO model)"),Yir=l(),tM=a("p"),Kir=o("The model is set in evaluation mode by default using "),RTe=a("code"),Zir=o("model.eval()"),edr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=a("code"),odr=o("model.train()"),rdr=l(),F(aM.$$.fragment),vZe=l(),qd=a("h2"),nM=a("a"),BTe=a("span"),F(Hx.$$.fragment),tdr=l(),ITe=a("span"),adr=o("AutoModelForNextSentencePrediction"),FZe=l(),Go=a("div"),F(Jx.$$.fragment),ndr=l(),jd=a("p"),sdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SH=a("a"),ldr=o("from_pretrained()"),idr=o(" class method or the "),RH=a("a"),ddr=o("from_config()"),cdr=o(` class
method.`),mdr=l(),Yx=a("p"),fdr=o("This class cannot be instantiated directly using "),NTe=a("code"),gdr=o("__init__()"),hdr=o(" (throws an error)."),udr=l(),Ct=a("div"),F(Kx.$$.fragment),pdr=l(),qTe=a("p"),_dr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bdr=l(),Dd=a("p"),vdr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),Fdr=o("not"),Tdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),Mdr=o("from_pretrained()"),Edr=o(" to load the model weights."),Cdr=l(),F(sM.$$.fragment),wdr=l(),so=a("div"),F(Zx.$$.fragment),Adr=l(),DTe=a("p"),Ldr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ydr=l(),tn=a("p"),xdr=o("The model class to instantiate is selected based on the "),GTe=a("code"),$dr=o("model_type"),kdr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),Sdr=o("pretrained_model_name_or_path"),Rdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),Pdr=o("pretrained_model_name_or_path"),Bdr=o(":"),Idr=l(),Ue=a("ul"),lM=a("li"),XTe=a("strong"),Ndr=o("bert"),qdr=o(" \u2014 "),BH=a("a"),jdr=o("BertForNextSentencePrediction"),Ddr=o(" (BERT model)"),Gdr=l(),iM=a("li"),zTe=a("strong"),Odr=o("ernie"),Vdr=o(" \u2014 "),IH=a("a"),Xdr=o("ErnieForNextSentencePrediction"),zdr=o(" (ERNIE model)"),Qdr=l(),dM=a("li"),QTe=a("strong"),Wdr=o("fnet"),Udr=o(" \u2014 "),NH=a("a"),Hdr=o("FNetForNextSentencePrediction"),Jdr=o(" (FNet model)"),Ydr=l(),cM=a("li"),WTe=a("strong"),Kdr=o("megatron-bert"),Zdr=o(" \u2014 "),qH=a("a"),ecr=o("MegatronBertForNextSentencePrediction"),ocr=o(" (Megatron-BERT model)"),rcr=l(),mM=a("li"),UTe=a("strong"),tcr=o("mobilebert"),acr=o(" \u2014 "),jH=a("a"),ncr=o("MobileBertForNextSentencePrediction"),scr=o(" (MobileBERT model)"),lcr=l(),fM=a("li"),HTe=a("strong"),icr=o("nezha"),dcr=o(" \u2014 "),DH=a("a"),ccr=o("NezhaForNextSentencePrediction"),mcr=o(" (Nezha model)"),fcr=l(),gM=a("li"),JTe=a("strong"),gcr=o("qdqbert"),hcr=o(" \u2014 "),GH=a("a"),ucr=o("QDQBertForNextSentencePrediction"),pcr=o(" (QDQBert model)"),_cr=l(),hM=a("p"),bcr=o("The model is set in evaluation mode by default using "),YTe=a("code"),vcr=o("model.eval()"),Fcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KTe=a("code"),Tcr=o("model.train()"),Mcr=l(),F(uM.$$.fragment),TZe=l(),Gd=a("h2"),pM=a("a"),ZTe=a("span"),F(e$.$$.fragment),Ecr=l(),eMe=a("span"),Ccr=o("AutoModelForTokenClassification"),MZe=l(),Oo=a("div"),F(o$.$$.fragment),wcr=l(),Od=a("p"),Acr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=a("a"),Lcr=o("from_pretrained()"),ycr=o(" class method or the "),VH=a("a"),xcr=o("from_config()"),$cr=o(` class
method.`),kcr=l(),r$=a("p"),Scr=o("This class cannot be instantiated directly using "),oMe=a("code"),Rcr=o("__init__()"),Pcr=o(" (throws an error)."),Bcr=l(),wt=a("div"),F(t$.$$.fragment),Icr=l(),rMe=a("p"),Ncr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qcr=l(),Vd=a("p"),jcr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),Dcr=o("not"),Gcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Ocr=o("from_pretrained()"),Vcr=o(" to load the model weights."),Xcr=l(),F(_M.$$.fragment),zcr=l(),lo=a("div"),F(a$.$$.fragment),Qcr=l(),aMe=a("p"),Wcr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ucr=l(),an=a("p"),Hcr=o("The model class to instantiate is selected based on the "),nMe=a("code"),Jcr=o("model_type"),Ycr=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),Kcr=o("pretrained_model_name_or_path"),Zcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(":"),rmr=l(),J=a("ul"),bM=a("li"),iMe=a("strong"),tmr=o("albert"),amr=o(" \u2014 "),zH=a("a"),nmr=o("AlbertForTokenClassification"),smr=o(" (ALBERT model)"),lmr=l(),vM=a("li"),dMe=a("strong"),imr=o("bert"),dmr=o(" \u2014 "),QH=a("a"),cmr=o("BertForTokenClassification"),mmr=o(" (BERT model)"),fmr=l(),FM=a("li"),cMe=a("strong"),gmr=o("big_bird"),hmr=o(" \u2014 "),WH=a("a"),umr=o("BigBirdForTokenClassification"),pmr=o(" (BigBird model)"),_mr=l(),TM=a("li"),mMe=a("strong"),bmr=o("bloom"),vmr=o(" \u2014 "),UH=a("a"),Fmr=o("BloomForTokenClassification"),Tmr=o(" (BLOOM model)"),Mmr=l(),MM=a("li"),fMe=a("strong"),Emr=o("camembert"),Cmr=o(" \u2014 "),HH=a("a"),wmr=o("CamembertForTokenClassification"),Amr=o(" (CamemBERT model)"),Lmr=l(),EM=a("li"),gMe=a("strong"),ymr=o("canine"),xmr=o(" \u2014 "),JH=a("a"),$mr=o("CanineForTokenClassification"),kmr=o(" (CANINE model)"),Smr=l(),CM=a("li"),hMe=a("strong"),Rmr=o("convbert"),Pmr=o(" \u2014 "),YH=a("a"),Bmr=o("ConvBertForTokenClassification"),Imr=o(" (ConvBERT model)"),Nmr=l(),wM=a("li"),uMe=a("strong"),qmr=o("data2vec-text"),jmr=o(" \u2014 "),KH=a("a"),Dmr=o("Data2VecTextForTokenClassification"),Gmr=o(" (Data2VecText model)"),Omr=l(),AM=a("li"),pMe=a("strong"),Vmr=o("deberta"),Xmr=o(" \u2014 "),ZH=a("a"),zmr=o("DebertaForTokenClassification"),Qmr=o(" (DeBERTa model)"),Wmr=l(),LM=a("li"),_Me=a("strong"),Umr=o("deberta-v2"),Hmr=o(" \u2014 "),eJ=a("a"),Jmr=o("DebertaV2ForTokenClassification"),Ymr=o(" (DeBERTa-v2 model)"),Kmr=l(),yM=a("li"),bMe=a("strong"),Zmr=o("distilbert"),efr=o(" \u2014 "),oJ=a("a"),ofr=o("DistilBertForTokenClassification"),rfr=o(" (DistilBERT model)"),tfr=l(),xM=a("li"),vMe=a("strong"),afr=o("electra"),nfr=o(" \u2014 "),rJ=a("a"),sfr=o("ElectraForTokenClassification"),lfr=o(" (ELECTRA model)"),ifr=l(),$M=a("li"),FMe=a("strong"),dfr=o("ernie"),cfr=o(" \u2014 "),tJ=a("a"),mfr=o("ErnieForTokenClassification"),ffr=o(" (ERNIE model)"),gfr=l(),kM=a("li"),TMe=a("strong"),hfr=o("flaubert"),ufr=o(" \u2014 "),aJ=a("a"),pfr=o("FlaubertForTokenClassification"),_fr=o(" (FlauBERT model)"),bfr=l(),SM=a("li"),MMe=a("strong"),vfr=o("fnet"),Ffr=o(" \u2014 "),nJ=a("a"),Tfr=o("FNetForTokenClassification"),Mfr=o(" (FNet model)"),Efr=l(),RM=a("li"),EMe=a("strong"),Cfr=o("funnel"),wfr=o(" \u2014 "),sJ=a("a"),Afr=o("FunnelForTokenClassification"),Lfr=o(" (Funnel Transformer model)"),yfr=l(),PM=a("li"),CMe=a("strong"),xfr=o("gpt2"),$fr=o(" \u2014 "),lJ=a("a"),kfr=o("GPT2ForTokenClassification"),Sfr=o(" (OpenAI GPT-2 model)"),Rfr=l(),BM=a("li"),wMe=a("strong"),Pfr=o("ibert"),Bfr=o(" \u2014 "),iJ=a("a"),Ifr=o("IBertForTokenClassification"),Nfr=o(" (I-BERT model)"),qfr=l(),IM=a("li"),AMe=a("strong"),jfr=o("layoutlm"),Dfr=o(" \u2014 "),dJ=a("a"),Gfr=o("LayoutLMForTokenClassification"),Ofr=o(" (LayoutLM model)"),Vfr=l(),NM=a("li"),LMe=a("strong"),Xfr=o("layoutlmv2"),zfr=o(" \u2014 "),cJ=a("a"),Qfr=o("LayoutLMv2ForTokenClassification"),Wfr=o(" (LayoutLMv2 model)"),Ufr=l(),qM=a("li"),yMe=a("strong"),Hfr=o("layoutlmv3"),Jfr=o(" \u2014 "),mJ=a("a"),Yfr=o("LayoutLMv3ForTokenClassification"),Kfr=o(" (LayoutLMv3 model)"),Zfr=l(),jM=a("li"),xMe=a("strong"),egr=o("longformer"),ogr=o(" \u2014 "),fJ=a("a"),rgr=o("LongformerForTokenClassification"),tgr=o(" (Longformer model)"),agr=l(),DM=a("li"),$Me=a("strong"),ngr=o("luke"),sgr=o(" \u2014 "),gJ=a("a"),lgr=o("LukeForTokenClassification"),igr=o(" (LUKE model)"),dgr=l(),GM=a("li"),kMe=a("strong"),cgr=o("megatron-bert"),mgr=o(" \u2014 "),hJ=a("a"),fgr=o("MegatronBertForTokenClassification"),ggr=o(" (Megatron-BERT model)"),hgr=l(),OM=a("li"),SMe=a("strong"),ugr=o("mobilebert"),pgr=o(" \u2014 "),uJ=a("a"),_gr=o("MobileBertForTokenClassification"),bgr=o(" (MobileBERT model)"),vgr=l(),VM=a("li"),RMe=a("strong"),Fgr=o("mpnet"),Tgr=o(" \u2014 "),pJ=a("a"),Mgr=o("MPNetForTokenClassification"),Egr=o(" (MPNet model)"),Cgr=l(),XM=a("li"),PMe=a("strong"),wgr=o("nezha"),Agr=o(" \u2014 "),_J=a("a"),Lgr=o("NezhaForTokenClassification"),ygr=o(" (Nezha model)"),xgr=l(),zM=a("li"),BMe=a("strong"),$gr=o("nystromformer"),kgr=o(" \u2014 "),bJ=a("a"),Sgr=o("NystromformerForTokenClassification"),Rgr=o(" (Nystr\xF6mformer model)"),Pgr=l(),QM=a("li"),IMe=a("strong"),Bgr=o("qdqbert"),Igr=o(" \u2014 "),vJ=a("a"),Ngr=o("QDQBertForTokenClassification"),qgr=o(" (QDQBert model)"),jgr=l(),WM=a("li"),NMe=a("strong"),Dgr=o("rembert"),Ggr=o(" \u2014 "),FJ=a("a"),Ogr=o("RemBertForTokenClassification"),Vgr=o(" (RemBERT model)"),Xgr=l(),UM=a("li"),qMe=a("strong"),zgr=o("roberta"),Qgr=o(" \u2014 "),TJ=a("a"),Wgr=o("RobertaForTokenClassification"),Ugr=o(" (RoBERTa model)"),Hgr=l(),HM=a("li"),jMe=a("strong"),Jgr=o("roformer"),Ygr=o(" \u2014 "),MJ=a("a"),Kgr=o("RoFormerForTokenClassification"),Zgr=o(" (RoFormer model)"),ehr=l(),JM=a("li"),DMe=a("strong"),ohr=o("squeezebert"),rhr=o(" \u2014 "),EJ=a("a"),thr=o("SqueezeBertForTokenClassification"),ahr=o(" (SqueezeBERT model)"),nhr=l(),YM=a("li"),GMe=a("strong"),shr=o("xlm"),lhr=o(" \u2014 "),CJ=a("a"),ihr=o("XLMForTokenClassification"),dhr=o(" (XLM model)"),chr=l(),KM=a("li"),OMe=a("strong"),mhr=o("xlm-roberta"),fhr=o(" \u2014 "),wJ=a("a"),ghr=o("XLMRobertaForTokenClassification"),hhr=o(" (XLM-RoBERTa model)"),uhr=l(),ZM=a("li"),VMe=a("strong"),phr=o("xlm-roberta-xl"),_hr=o(" \u2014 "),AJ=a("a"),bhr=o("XLMRobertaXLForTokenClassification"),vhr=o(" (XLM-RoBERTa-XL model)"),Fhr=l(),eE=a("li"),XMe=a("strong"),Thr=o("xlnet"),Mhr=o(" \u2014 "),LJ=a("a"),Ehr=o("XLNetForTokenClassification"),Chr=o(" (XLNet model)"),whr=l(),oE=a("li"),zMe=a("strong"),Ahr=o("yoso"),Lhr=o(" \u2014 "),yJ=a("a"),yhr=o("YosoForTokenClassification"),xhr=o(" (YOSO model)"),$hr=l(),rE=a("p"),khr=o("The model is set in evaluation mode by default using "),QMe=a("code"),Shr=o("model.eval()"),Rhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WMe=a("code"),Phr=o("model.train()"),Bhr=l(),F(tE.$$.fragment),EZe=l(),Xd=a("h2"),aE=a("a"),UMe=a("span"),F(n$.$$.fragment),Ihr=l(),HMe=a("span"),Nhr=o("AutoModelForQuestionAnswering"),CZe=l(),Vo=a("div"),F(s$.$$.fragment),qhr=l(),zd=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xJ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),$J=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),l$=a("p"),zhr=o("This class cannot be instantiated directly using "),JMe=a("code"),Qhr=o("__init__()"),Whr=o(" (throws an error)."),Uhr=l(),At=a("div"),F(i$.$$.fragment),Hhr=l(),YMe=a("p"),Jhr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Yhr=l(),Qd=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),KMe=a("strong"),Zhr=o("not"),eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),our=o("from_pretrained()"),rur=o(" to load the model weights."),tur=l(),F(nE.$$.fragment),aur=l(),io=a("div"),F(d$.$$.fragment),nur=l(),ZMe=a("p"),sur=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lur=l(),nn=a("p"),iur=o("The model class to instantiate is selected based on the "),eEe=a("code"),dur=o("model_type"),cur=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),mur=o("pretrained_model_name_or_path"),fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(":"),uur=l(),V=a("ul"),sE=a("li"),tEe=a("strong"),pur=o("albert"),_ur=o(" \u2014 "),SJ=a("a"),bur=o("AlbertForQuestionAnswering"),vur=o(" (ALBERT model)"),Fur=l(),lE=a("li"),aEe=a("strong"),Tur=o("bart"),Mur=o(" \u2014 "),RJ=a("a"),Eur=o("BartForQuestionAnswering"),Cur=o(" (BART model)"),wur=l(),iE=a("li"),nEe=a("strong"),Aur=o("bert"),Lur=o(" \u2014 "),PJ=a("a"),yur=o("BertForQuestionAnswering"),xur=o(" (BERT model)"),$ur=l(),dE=a("li"),sEe=a("strong"),kur=o("big_bird"),Sur=o(" \u2014 "),BJ=a("a"),Rur=o("BigBirdForQuestionAnswering"),Pur=o(" (BigBird model)"),Bur=l(),cE=a("li"),lEe=a("strong"),Iur=o("bigbird_pegasus"),Nur=o(" \u2014 "),IJ=a("a"),qur=o("BigBirdPegasusForQuestionAnswering"),jur=o(" (BigBird-Pegasus model)"),Dur=l(),mE=a("li"),iEe=a("strong"),Gur=o("camembert"),Our=o(" \u2014 "),NJ=a("a"),Vur=o("CamembertForQuestionAnswering"),Xur=o(" (CamemBERT model)"),zur=l(),fE=a("li"),dEe=a("strong"),Qur=o("canine"),Wur=o(" \u2014 "),qJ=a("a"),Uur=o("CanineForQuestionAnswering"),Hur=o(" (CANINE model)"),Jur=l(),gE=a("li"),cEe=a("strong"),Yur=o("convbert"),Kur=o(" \u2014 "),jJ=a("a"),Zur=o("ConvBertForQuestionAnswering"),epr=o(" (ConvBERT model)"),opr=l(),hE=a("li"),mEe=a("strong"),rpr=o("data2vec-text"),tpr=o(" \u2014 "),DJ=a("a"),apr=o("Data2VecTextForQuestionAnswering"),npr=o(" (Data2VecText model)"),spr=l(),uE=a("li"),fEe=a("strong"),lpr=o("deberta"),ipr=o(" \u2014 "),GJ=a("a"),dpr=o("DebertaForQuestionAnswering"),cpr=o(" (DeBERTa model)"),mpr=l(),pE=a("li"),gEe=a("strong"),fpr=o("deberta-v2"),gpr=o(" \u2014 "),OJ=a("a"),hpr=o("DebertaV2ForQuestionAnswering"),upr=o(" (DeBERTa-v2 model)"),ppr=l(),_E=a("li"),hEe=a("strong"),_pr=o("distilbert"),bpr=o(" \u2014 "),VJ=a("a"),vpr=o("DistilBertForQuestionAnswering"),Fpr=o(" (DistilBERT model)"),Tpr=l(),bE=a("li"),uEe=a("strong"),Mpr=o("electra"),Epr=o(" \u2014 "),XJ=a("a"),Cpr=o("ElectraForQuestionAnswering"),wpr=o(" (ELECTRA model)"),Apr=l(),vE=a("li"),pEe=a("strong"),Lpr=o("ernie"),ypr=o(" \u2014 "),zJ=a("a"),xpr=o("ErnieForQuestionAnswering"),$pr=o(" (ERNIE model)"),kpr=l(),FE=a("li"),_Ee=a("strong"),Spr=o("flaubert"),Rpr=o(" \u2014 "),QJ=a("a"),Ppr=o("FlaubertForQuestionAnsweringSimple"),Bpr=o(" (FlauBERT model)"),Ipr=l(),TE=a("li"),bEe=a("strong"),Npr=o("fnet"),qpr=o(" \u2014 "),WJ=a("a"),jpr=o("FNetForQuestionAnswering"),Dpr=o(" (FNet model)"),Gpr=l(),ME=a("li"),vEe=a("strong"),Opr=o("funnel"),Vpr=o(" \u2014 "),UJ=a("a"),Xpr=o("FunnelForQuestionAnswering"),zpr=o(" (Funnel Transformer model)"),Qpr=l(),EE=a("li"),FEe=a("strong"),Wpr=o("gptj"),Upr=o(" \u2014 "),HJ=a("a"),Hpr=o("GPTJForQuestionAnswering"),Jpr=o(" (GPT-J model)"),Ypr=l(),CE=a("li"),TEe=a("strong"),Kpr=o("ibert"),Zpr=o(" \u2014 "),JJ=a("a"),e_r=o("IBertForQuestionAnswering"),o_r=o(" (I-BERT model)"),r_r=l(),wE=a("li"),MEe=a("strong"),t_r=o("layoutlmv2"),a_r=o(" \u2014 "),YJ=a("a"),n_r=o("LayoutLMv2ForQuestionAnswering"),s_r=o(" (LayoutLMv2 model)"),l_r=l(),AE=a("li"),EEe=a("strong"),i_r=o("layoutlmv3"),d_r=o(" \u2014 "),KJ=a("a"),c_r=o("LayoutLMv3ForQuestionAnswering"),m_r=o(" (LayoutLMv3 model)"),f_r=l(),LE=a("li"),CEe=a("strong"),g_r=o("led"),h_r=o(" \u2014 "),ZJ=a("a"),u_r=o("LEDForQuestionAnswering"),p_r=o(" (LED model)"),__r=l(),yE=a("li"),wEe=a("strong"),b_r=o("longformer"),v_r=o(" \u2014 "),eY=a("a"),F_r=o("LongformerForQuestionAnswering"),T_r=o(" (Longformer model)"),M_r=l(),xE=a("li"),AEe=a("strong"),E_r=o("luke"),C_r=o(" \u2014 "),oY=a("a"),w_r=o("LukeForQuestionAnswering"),A_r=o(" (LUKE model)"),L_r=l(),$E=a("li"),LEe=a("strong"),y_r=o("lxmert"),x_r=o(" \u2014 "),rY=a("a"),$_r=o("LxmertForQuestionAnswering"),k_r=o(" (LXMERT model)"),S_r=l(),kE=a("li"),yEe=a("strong"),R_r=o("mbart"),P_r=o(" \u2014 "),tY=a("a"),B_r=o("MBartForQuestionAnswering"),I_r=o(" (mBART model)"),N_r=l(),SE=a("li"),xEe=a("strong"),q_r=o("megatron-bert"),j_r=o(" \u2014 "),aY=a("a"),D_r=o("MegatronBertForQuestionAnswering"),G_r=o(" (Megatron-BERT model)"),O_r=l(),RE=a("li"),$Ee=a("strong"),V_r=o("mobilebert"),X_r=o(" \u2014 "),nY=a("a"),z_r=o("MobileBertForQuestionAnswering"),Q_r=o(" (MobileBERT model)"),W_r=l(),PE=a("li"),kEe=a("strong"),U_r=o("mpnet"),H_r=o(" \u2014 "),sY=a("a"),J_r=o("MPNetForQuestionAnswering"),Y_r=o(" (MPNet model)"),K_r=l(),BE=a("li"),SEe=a("strong"),Z_r=o("mvp"),ebr=o(" \u2014 "),lY=a("a"),obr=o("MvpForQuestionAnswering"),rbr=o(" (MVP model)"),tbr=l(),IE=a("li"),REe=a("strong"),abr=o("nezha"),nbr=o(" \u2014 "),iY=a("a"),sbr=o("NezhaForQuestionAnswering"),lbr=o(" (Nezha model)"),ibr=l(),NE=a("li"),PEe=a("strong"),dbr=o("nystromformer"),cbr=o(" \u2014 "),dY=a("a"),mbr=o("NystromformerForQuestionAnswering"),fbr=o(" (Nystr\xF6mformer model)"),gbr=l(),qE=a("li"),BEe=a("strong"),hbr=o("qdqbert"),ubr=o(" \u2014 "),cY=a("a"),pbr=o("QDQBertForQuestionAnswering"),_br=o(" (QDQBert model)"),bbr=l(),jE=a("li"),IEe=a("strong"),vbr=o("reformer"),Fbr=o(" \u2014 "),mY=a("a"),Tbr=o("ReformerForQuestionAnswering"),Mbr=o(" (Reformer model)"),Ebr=l(),DE=a("li"),NEe=a("strong"),Cbr=o("rembert"),wbr=o(" \u2014 "),fY=a("a"),Abr=o("RemBertForQuestionAnswering"),Lbr=o(" (RemBERT model)"),ybr=l(),GE=a("li"),qEe=a("strong"),xbr=o("roberta"),$br=o(" \u2014 "),gY=a("a"),kbr=o("RobertaForQuestionAnswering"),Sbr=o(" (RoBERTa model)"),Rbr=l(),OE=a("li"),jEe=a("strong"),Pbr=o("roformer"),Bbr=o(" \u2014 "),hY=a("a"),Ibr=o("RoFormerForQuestionAnswering"),Nbr=o(" (RoFormer model)"),qbr=l(),VE=a("li"),DEe=a("strong"),jbr=o("splinter"),Dbr=o(" \u2014 "),uY=a("a"),Gbr=o("SplinterForQuestionAnswering"),Obr=o(" (Splinter model)"),Vbr=l(),XE=a("li"),GEe=a("strong"),Xbr=o("squeezebert"),zbr=o(" \u2014 "),pY=a("a"),Qbr=o("SqueezeBertForQuestionAnswering"),Wbr=o(" (SqueezeBERT model)"),Ubr=l(),zE=a("li"),OEe=a("strong"),Hbr=o("xlm"),Jbr=o(" \u2014 "),_Y=a("a"),Ybr=o("XLMForQuestionAnsweringSimple"),Kbr=o(" (XLM model)"),Zbr=l(),QE=a("li"),VEe=a("strong"),e2r=o("xlm-roberta"),o2r=o(" \u2014 "),bY=a("a"),r2r=o("XLMRobertaForQuestionAnswering"),t2r=o(" (XLM-RoBERTa model)"),a2r=l(),WE=a("li"),XEe=a("strong"),n2r=o("xlm-roberta-xl"),s2r=o(" \u2014 "),vY=a("a"),l2r=o("XLMRobertaXLForQuestionAnswering"),i2r=o(" (XLM-RoBERTa-XL model)"),d2r=l(),UE=a("li"),zEe=a("strong"),c2r=o("xlnet"),m2r=o(" \u2014 "),FY=a("a"),f2r=o("XLNetForQuestionAnsweringSimple"),g2r=o(" (XLNet model)"),h2r=l(),HE=a("li"),QEe=a("strong"),u2r=o("yoso"),p2r=o(" \u2014 "),TY=a("a"),_2r=o("YosoForQuestionAnswering"),b2r=o(" (YOSO model)"),v2r=l(),JE=a("p"),F2r=o("The model is set in evaluation mode by default using "),WEe=a("code"),T2r=o("model.eval()"),M2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UEe=a("code"),E2r=o("model.train()"),C2r=l(),F(YE.$$.fragment),wZe=l(),Wd=a("h2"),KE=a("a"),HEe=a("span"),F(c$.$$.fragment),w2r=l(),JEe=a("span"),A2r=o("AutoModelForTableQuestionAnswering"),AZe=l(),Xo=a("div"),F(m$.$$.fragment),L2r=l(),Ud=a("p"),y2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MY=a("a"),x2r=o("from_pretrained()"),$2r=o(" class method or the "),EY=a("a"),k2r=o("from_config()"),S2r=o(` class
method.`),R2r=l(),f$=a("p"),P2r=o("This class cannot be instantiated directly using "),YEe=a("code"),B2r=o("__init__()"),I2r=o(" (throws an error)."),N2r=l(),Lt=a("div"),F(g$.$$.fragment),q2r=l(),KEe=a("p"),j2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D2r=l(),Hd=a("p"),G2r=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),O2r=o("not"),V2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),X2r=o("from_pretrained()"),z2r=o(" to load the model weights."),Q2r=l(),F(ZE.$$.fragment),W2r=l(),co=a("div"),F(h$.$$.fragment),U2r=l(),e4e=a("p"),H2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),J2r=l(),sn=a("p"),Y2r=o("The model class to instantiate is selected based on the "),o4e=a("code"),K2r=o("model_type"),Z2r=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),e1r=o("pretrained_model_name_or_path"),o1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),r1r=o("pretrained_model_name_or_path"),t1r=o(":"),a1r=l(),a4e=a("ul"),e4=a("li"),n4e=a("strong"),n1r=o("tapas"),s1r=o(" \u2014 "),wY=a("a"),l1r=o("TapasForQuestionAnswering"),i1r=o(" (TAPAS model)"),d1r=l(),o4=a("p"),c1r=o("The model is set in evaluation mode by default using "),s4e=a("code"),m1r=o("model.eval()"),f1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l4e=a("code"),g1r=o("model.train()"),h1r=l(),F(r4.$$.fragment),LZe=l(),Jd=a("h2"),t4=a("a"),i4e=a("span"),F(u$.$$.fragment),u1r=l(),d4e=a("span"),p1r=o("AutoModelForDocumentQuestionAnswering"),yZe=l(),zo=a("div"),F(p$.$$.fragment),_1r=l(),Yd=a("p"),b1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),AY=a("a"),v1r=o("from_pretrained()"),F1r=o(" class method or the "),LY=a("a"),T1r=o("from_config()"),M1r=o(` class
method.`),E1r=l(),_$=a("p"),C1r=o("This class cannot be instantiated directly using "),c4e=a("code"),w1r=o("__init__()"),A1r=o(" (throws an error)."),L1r=l(),yt=a("div"),F(b$.$$.fragment),y1r=l(),m4e=a("p"),x1r=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),$1r=l(),Kd=a("p"),k1r=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),S1r=o("not"),R1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),P1r=o("from_pretrained()"),B1r=o(" to load the model weights."),I1r=l(),F(a4.$$.fragment),N1r=l(),mo=a("div"),F(v$.$$.fragment),q1r=l(),g4e=a("p"),j1r=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),D1r=l(),ln=a("p"),G1r=o("The model class to instantiate is selected based on the "),h4e=a("code"),O1r=o("model_type"),V1r=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),X1r=o("pretrained_model_name_or_path"),z1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),Q1r=o("pretrained_model_name_or_path"),W1r=o(":"),U1r=l(),Zd=a("ul"),n4=a("li"),_4e=a("strong"),H1r=o("layoutlm"),J1r=o(" \u2014 "),xY=a("a"),Y1r=o("LayoutLMForQuestionAnswering"),K1r=o(" (LayoutLM model)"),Z1r=l(),s4=a("li"),b4e=a("strong"),evr=o("layoutlmv2"),ovr=o(" \u2014 "),$Y=a("a"),rvr=o("LayoutLMv2ForQuestionAnswering"),tvr=o(" (LayoutLMv2 model)"),avr=l(),l4=a("li"),v4e=a("strong"),nvr=o("layoutlmv3"),svr=o(" \u2014 "),kY=a("a"),lvr=o("LayoutLMv3ForQuestionAnswering"),ivr=o(" (LayoutLMv3 model)"),dvr=l(),i4=a("p"),cvr=o("The model is set in evaluation mode by default using "),F4e=a("code"),mvr=o("model.eval()"),fvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T4e=a("code"),gvr=o("model.train()"),hvr=l(),F(d4.$$.fragment),xZe=l(),ec=a("h2"),c4=a("a"),M4e=a("span"),F(F$.$$.fragment),uvr=l(),E4e=a("span"),pvr=o("AutoModelForImageClassification"),$Ze=l(),Qo=a("div"),F(T$.$$.fragment),_vr=l(),oc=a("p"),bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SY=a("a"),vvr=o("from_pretrained()"),Fvr=o(" class method or the "),RY=a("a"),Tvr=o("from_config()"),Mvr=o(` class
method.`),Evr=l(),M$=a("p"),Cvr=o("This class cannot be instantiated directly using "),C4e=a("code"),wvr=o("__init__()"),Avr=o(" (throws an error)."),Lvr=l(),xt=a("div"),F(E$.$$.fragment),yvr=l(),w4e=a("p"),xvr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$vr=l(),rc=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),Pvr=o("from_pretrained()"),Bvr=o(" to load the model weights."),Ivr=l(),F(m4.$$.fragment),Nvr=l(),fo=a("div"),F(C$.$$.fragment),qvr=l(),L4e=a("p"),jvr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dvr=l(),dn=a("p"),Gvr=o("The model class to instantiate is selected based on the "),y4e=a("code"),Ovr=o("model_type"),Vvr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),Qvr=o("pretrained_model_name_or_path"),Wvr=o(":"),Uvr=l(),be=a("ul"),f4=a("li"),k4e=a("strong"),Hvr=o("beit"),Jvr=o(" \u2014 "),BY=a("a"),Yvr=o("BeitForImageClassification"),Kvr=o(" (BEiT model)"),Zvr=l(),g4=a("li"),S4e=a("strong"),eFr=o("convnext"),oFr=o(" \u2014 "),IY=a("a"),rFr=o("ConvNextForImageClassification"),tFr=o(" (ConvNeXT model)"),aFr=l(),h4=a("li"),R4e=a("strong"),nFr=o("cvt"),sFr=o(" \u2014 "),NY=a("a"),lFr=o("CvtForImageClassification"),iFr=o(" (CvT model)"),dFr=l(),u4=a("li"),P4e=a("strong"),cFr=o("data2vec-vision"),mFr=o(" \u2014 "),qY=a("a"),fFr=o("Data2VecVisionForImageClassification"),gFr=o(" (Data2VecVision model)"),hFr=l(),bl=a("li"),B4e=a("strong"),uFr=o("deit"),pFr=o(" \u2014 "),jY=a("a"),_Fr=o("DeiTForImageClassification"),bFr=o(" or "),DY=a("a"),vFr=o("DeiTForImageClassificationWithTeacher"),FFr=o(" (DeiT model)"),TFr=l(),p4=a("li"),I4e=a("strong"),MFr=o("imagegpt"),EFr=o(" \u2014 "),GY=a("a"),CFr=o("ImageGPTForImageClassification"),wFr=o(" (ImageGPT model)"),AFr=l(),vl=a("li"),N4e=a("strong"),LFr=o("levit"),yFr=o(" \u2014 "),OY=a("a"),xFr=o("LevitForImageClassification"),$Fr=o(" or "),VY=a("a"),kFr=o("LevitForImageClassificationWithTeacher"),SFr=o(" (LeViT model)"),RFr=l(),_4=a("li"),q4e=a("strong"),PFr=o("mobilevit"),BFr=o(" \u2014 "),XY=a("a"),IFr=o("MobileViTForImageClassification"),NFr=o(" (MobileViT model)"),qFr=l(),$t=a("li"),j4e=a("strong"),jFr=o("perceiver"),DFr=o(" \u2014 "),zY=a("a"),GFr=o("PerceiverForImageClassificationLearned"),OFr=o(" or "),QY=a("a"),VFr=o("PerceiverForImageClassificationFourier"),XFr=o(" or "),WY=a("a"),zFr=o("PerceiverForImageClassificationConvProcessing"),QFr=o(" (Perceiver model)"),WFr=l(),b4=a("li"),D4e=a("strong"),UFr=o("poolformer"),HFr=o(" \u2014 "),UY=a("a"),JFr=o("PoolFormerForImageClassification"),YFr=o(" (PoolFormer model)"),KFr=l(),v4=a("li"),G4e=a("strong"),ZFr=o("regnet"),eTr=o(" \u2014 "),HY=a("a"),oTr=o("RegNetForImageClassification"),rTr=o(" (RegNet model)"),tTr=l(),F4=a("li"),O4e=a("strong"),aTr=o("resnet"),nTr=o(" \u2014 "),JY=a("a"),sTr=o("ResNetForImageClassification"),lTr=o(" (ResNet model)"),iTr=l(),T4=a("li"),V4e=a("strong"),dTr=o("segformer"),cTr=o(" \u2014 "),YY=a("a"),mTr=o("SegformerForImageClassification"),fTr=o(" (SegFormer model)"),gTr=l(),M4=a("li"),X4e=a("strong"),hTr=o("swin"),uTr=o(" \u2014 "),KY=a("a"),pTr=o("SwinForImageClassification"),_Tr=o(" (Swin Transformer model)"),bTr=l(),E4=a("li"),z4e=a("strong"),vTr=o("swinv2"),FTr=o(" \u2014 "),ZY=a("a"),TTr=o("Swinv2ForImageClassification"),MTr=o(" (Swin Transformer V2 model)"),ETr=l(),C4=a("li"),Q4e=a("strong"),CTr=o("van"),wTr=o(" \u2014 "),eK=a("a"),ATr=o("VanForImageClassification"),LTr=o(" (VAN model)"),yTr=l(),w4=a("li"),W4e=a("strong"),xTr=o("vit"),$Tr=o(" \u2014 "),oK=a("a"),kTr=o("ViTForImageClassification"),STr=o(" (ViT model)"),RTr=l(),A4=a("li"),U4e=a("strong"),PTr=o("vit_msn"),BTr=o(" \u2014 "),rK=a("a"),ITr=o("ViTMSNForImageClassification"),NTr=o(" (ViTMSN model)"),qTr=l(),L4=a("p"),jTr=o("The model is set in evaluation mode by default using "),H4e=a("code"),DTr=o("model.eval()"),GTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J4e=a("code"),OTr=o("model.train()"),VTr=l(),F(y4.$$.fragment),kZe=l(),tc=a("h2"),x4=a("a"),Y4e=a("span"),F(w$.$$.fragment),XTr=l(),K4e=a("span"),zTr=o("AutoModelForVideoClassification"),SZe=l(),Wo=a("div"),F(A$.$$.fragment),QTr=l(),ac=a("p"),WTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),tK=a("a"),UTr=o("from_pretrained()"),HTr=o(" class method or the "),aK=a("a"),JTr=o("from_config()"),YTr=o(` class
method.`),KTr=l(),L$=a("p"),ZTr=o("This class cannot be instantiated directly using "),Z4e=a("code"),eMr=o("__init__()"),oMr=o(" (throws an error)."),rMr=l(),kt=a("div"),F(y$.$$.fragment),tMr=l(),eCe=a("p"),aMr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),nMr=l(),nc=a("p"),sMr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),lMr=o("not"),iMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),dMr=o("from_pretrained()"),cMr=o(" to load the model weights."),mMr=l(),F($4.$$.fragment),fMr=l(),go=a("div"),F(x$.$$.fragment),gMr=l(),rCe=a("p"),hMr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),uMr=l(),cn=a("p"),pMr=o("The model class to instantiate is selected based on the "),tCe=a("code"),_Mr=o("model_type"),bMr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),TMr=o("pretrained_model_name_or_path"),MMr=o(":"),EMr=l(),sCe=a("ul"),k4=a("li"),lCe=a("strong"),CMr=o("videomae"),wMr=o(" \u2014 "),sK=a("a"),AMr=o("VideoMAEForVideoClassification"),LMr=o(" (VideoMAE model)"),yMr=l(),S4=a("p"),xMr=o("The model is set in evaluation mode by default using "),iCe=a("code"),$Mr=o("model.eval()"),kMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dCe=a("code"),SMr=o("model.train()"),RMr=l(),F(R4.$$.fragment),RZe=l(),sc=a("h2"),P4=a("a"),cCe=a("span"),F($$.$$.fragment),PMr=l(),mCe=a("span"),BMr=o("AutoModelForVision2Seq"),PZe=l(),Uo=a("div"),F(k$.$$.fragment),IMr=l(),lc=a("p"),NMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lK=a("a"),qMr=o("from_pretrained()"),jMr=o(" class method or the "),iK=a("a"),DMr=o("from_config()"),GMr=o(` class
method.`),OMr=l(),S$=a("p"),VMr=o("This class cannot be instantiated directly using "),fCe=a("code"),XMr=o("__init__()"),zMr=o(" (throws an error)."),QMr=l(),St=a("div"),F(R$.$$.fragment),WMr=l(),gCe=a("p"),UMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HMr=l(),ic=a("p"),JMr=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),YMr=o("not"),KMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),ZMr=o("from_pretrained()"),eEr=o(" to load the model weights."),oEr=l(),F(B4.$$.fragment),rEr=l(),ho=a("div"),F(P$.$$.fragment),tEr=l(),uCe=a("p"),aEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nEr=l(),mn=a("p"),sEr=o("The model class to instantiate is selected based on the "),pCe=a("code"),lEr=o("model_type"),iEr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),dEr=o("pretrained_model_name_or_path"),cEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),mEr=o("pretrained_model_name_or_path"),fEr=o(":"),gEr=l(),vCe=a("ul"),I4=a("li"),FCe=a("strong"),hEr=o("vision-encoder-decoder"),uEr=o(" \u2014 "),cK=a("a"),pEr=o("VisionEncoderDecoderModel"),_Er=o(" (Vision Encoder decoder model)"),bEr=l(),N4=a("p"),vEr=o("The model is set in evaluation mode by default using "),TCe=a("code"),FEr=o("model.eval()"),TEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MCe=a("code"),MEr=o("model.train()"),EEr=l(),F(q4.$$.fragment),BZe=l(),dc=a("h2"),j4=a("a"),ECe=a("span"),F(B$.$$.fragment),CEr=l(),CCe=a("span"),wEr=o("AutoModelForVisualQuestionAnswering"),IZe=l(),Ho=a("div"),F(I$.$$.fragment),AEr=l(),cc=a("p"),LEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mK=a("a"),yEr=o("from_pretrained()"),xEr=o(" class method or the "),fK=a("a"),$Er=o("from_config()"),kEr=o(` class
method.`),SEr=l(),N$=a("p"),REr=o("This class cannot be instantiated directly using "),wCe=a("code"),PEr=o("__init__()"),BEr=o(" (throws an error)."),IEr=l(),Rt=a("div"),F(q$.$$.fragment),NEr=l(),ACe=a("p"),qEr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),jEr=l(),mc=a("p"),DEr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),GEr=o("not"),OEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),VEr=o("from_pretrained()"),XEr=o(" to load the model weights."),zEr=l(),F(D4.$$.fragment),QEr=l(),uo=a("div"),F(j$.$$.fragment),WEr=l(),yCe=a("p"),UEr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),HEr=l(),fn=a("p"),JEr=o("The model class to instantiate is selected based on the "),xCe=a("code"),YEr=o("model_type"),KEr=o(` property of the config object (either
passed as an argument or loaded from `),$Ce=a("code"),ZEr=o("pretrained_model_name_or_path"),e4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=a("code"),o4r=o("pretrained_model_name_or_path"),r4r=o(":"),t4r=l(),SCe=a("ul"),G4=a("li"),RCe=a("strong"),a4r=o("vilt"),n4r=o(" \u2014 "),hK=a("a"),s4r=o("ViltForQuestionAnswering"),l4r=o(" (ViLT model)"),i4r=l(),O4=a("p"),d4r=o("The model is set in evaluation mode by default using "),PCe=a("code"),c4r=o("model.eval()"),m4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BCe=a("code"),f4r=o("model.train()"),g4r=l(),F(V4.$$.fragment),NZe=l(),fc=a("h2"),X4=a("a"),ICe=a("span"),F(D$.$$.fragment),h4r=l(),NCe=a("span"),u4r=o("AutoModelForAudioClassification"),qZe=l(),Jo=a("div"),F(G$.$$.fragment),p4r=l(),gc=a("p"),_4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uK=a("a"),b4r=o("from_pretrained()"),v4r=o(" class method or the "),pK=a("a"),F4r=o("from_config()"),T4r=o(` class
method.`),M4r=l(),O$=a("p"),E4r=o("This class cannot be instantiated directly using "),qCe=a("code"),C4r=o("__init__()"),w4r=o(" (throws an error)."),A4r=l(),Pt=a("div"),F(V$.$$.fragment),L4r=l(),jCe=a("p"),y4r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),x4r=l(),hc=a("p"),$4r=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),k4r=o("not"),S4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),R4r=o("from_pretrained()"),P4r=o(" to load the model weights."),B4r=l(),F(z4.$$.fragment),I4r=l(),po=a("div"),F(X$.$$.fragment),N4r=l(),GCe=a("p"),q4r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),j4r=l(),gn=a("p"),D4r=o("The model class to instantiate is selected based on the "),OCe=a("code"),G4r=o("model_type"),O4r=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),V4r=o("pretrained_model_name_or_path"),X4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(":"),W4r=l(),Pe=a("ul"),Q4=a("li"),zCe=a("strong"),U4r=o("data2vec-audio"),H4r=o(" \u2014 "),bK=a("a"),J4r=o("Data2VecAudioForSequenceClassification"),Y4r=o(" (Data2VecAudio model)"),K4r=l(),W4=a("li"),QCe=a("strong"),Z4r=o("hubert"),eCr=o(" \u2014 "),vK=a("a"),oCr=o("HubertForSequenceClassification"),rCr=o(" (Hubert model)"),tCr=l(),U4=a("li"),WCe=a("strong"),aCr=o("sew"),nCr=o(" \u2014 "),FK=a("a"),sCr=o("SEWForSequenceClassification"),lCr=o(" (SEW model)"),iCr=l(),H4=a("li"),UCe=a("strong"),dCr=o("sew-d"),cCr=o(" \u2014 "),TK=a("a"),mCr=o("SEWDForSequenceClassification"),fCr=o(" (SEW-D model)"),gCr=l(),J4=a("li"),HCe=a("strong"),hCr=o("unispeech"),uCr=o(" \u2014 "),MK=a("a"),pCr=o("UniSpeechForSequenceClassification"),_Cr=o(" (UniSpeech model)"),bCr=l(),Y4=a("li"),JCe=a("strong"),vCr=o("unispeech-sat"),FCr=o(" \u2014 "),EK=a("a"),TCr=o("UniSpeechSatForSequenceClassification"),MCr=o(" (UniSpeechSat model)"),ECr=l(),K4=a("li"),YCe=a("strong"),CCr=o("wav2vec2"),wCr=o(" \u2014 "),CK=a("a"),ACr=o("Wav2Vec2ForSequenceClassification"),LCr=o(" (Wav2Vec2 model)"),yCr=l(),Z4=a("li"),KCe=a("strong"),xCr=o("wav2vec2-conformer"),$Cr=o(" \u2014 "),wK=a("a"),kCr=o("Wav2Vec2ConformerForSequenceClassification"),SCr=o(" (Wav2Vec2-Conformer model)"),RCr=l(),eC=a("li"),ZCe=a("strong"),PCr=o("wavlm"),BCr=o(" \u2014 "),AK=a("a"),ICr=o("WavLMForSequenceClassification"),NCr=o(" (WavLM model)"),qCr=l(),oC=a("p"),jCr=o("The model is set in evaluation mode by default using "),e3e=a("code"),DCr=o("model.eval()"),GCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=a("code"),OCr=o("model.train()"),VCr=l(),F(rC.$$.fragment),jZe=l(),uc=a("h2"),tC=a("a"),r3e=a("span"),F(z$.$$.fragment),XCr=l(),t3e=a("span"),zCr=o("AutoModelForAudioFrameClassification"),DZe=l(),Yo=a("div"),F(Q$.$$.fragment),QCr=l(),pc=a("p"),WCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LK=a("a"),UCr=o("from_pretrained()"),HCr=o(" class method or the "),yK=a("a"),JCr=o("from_config()"),YCr=o(` class
method.`),KCr=l(),W$=a("p"),ZCr=o("This class cannot be instantiated directly using "),a3e=a("code"),e3r=o("__init__()"),o3r=o(" (throws an error)."),r3r=l(),Bt=a("div"),F(U$.$$.fragment),t3r=l(),n3e=a("p"),a3r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),n3r=l(),_c=a("p"),s3r=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),l3r=o("not"),i3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),d3r=o("from_pretrained()"),c3r=o(" to load the model weights."),m3r=l(),F(aC.$$.fragment),f3r=l(),_o=a("div"),F(H$.$$.fragment),g3r=l(),l3e=a("p"),h3r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),u3r=l(),hn=a("p"),p3r=o("The model class to instantiate is selected based on the "),i3e=a("code"),_3r=o("model_type"),b3r=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),v3r=o("pretrained_model_name_or_path"),F3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),T3r=o("pretrained_model_name_or_path"),M3r=o(":"),E3r=l(),mt=a("ul"),nC=a("li"),m3e=a("strong"),C3r=o("data2vec-audio"),w3r=o(" \u2014 "),$K=a("a"),A3r=o("Data2VecAudioForAudioFrameClassification"),L3r=o(" (Data2VecAudio model)"),y3r=l(),sC=a("li"),f3e=a("strong"),x3r=o("unispeech-sat"),$3r=o(" \u2014 "),kK=a("a"),k3r=o("UniSpeechSatForAudioFrameClassification"),S3r=o(" (UniSpeechSat model)"),R3r=l(),lC=a("li"),g3e=a("strong"),P3r=o("wav2vec2"),B3r=o(" \u2014 "),SK=a("a"),I3r=o("Wav2Vec2ForAudioFrameClassification"),N3r=o(" (Wav2Vec2 model)"),q3r=l(),iC=a("li"),h3e=a("strong"),j3r=o("wav2vec2-conformer"),D3r=o(" \u2014 "),RK=a("a"),G3r=o("Wav2Vec2ConformerForAudioFrameClassification"),O3r=o(" (Wav2Vec2-Conformer model)"),V3r=l(),dC=a("li"),u3e=a("strong"),X3r=o("wavlm"),z3r=o(" \u2014 "),PK=a("a"),Q3r=o("WavLMForAudioFrameClassification"),W3r=o(" (WavLM model)"),U3r=l(),cC=a("p"),H3r=o("The model is set in evaluation mode by default using "),p3e=a("code"),J3r=o("model.eval()"),Y3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_3e=a("code"),K3r=o("model.train()"),Z3r=l(),F(mC.$$.fragment),GZe=l(),bc=a("h2"),fC=a("a"),b3e=a("span"),F(J$.$$.fragment),e5r=l(),v3e=a("span"),o5r=o("AutoModelForCTC"),OZe=l(),Ko=a("div"),F(Y$.$$.fragment),r5r=l(),vc=a("p"),t5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BK=a("a"),a5r=o("from_pretrained()"),n5r=o(" class method or the "),IK=a("a"),s5r=o("from_config()"),l5r=o(` class
method.`),i5r=l(),K$=a("p"),d5r=o("This class cannot be instantiated directly using "),F3e=a("code"),c5r=o("__init__()"),m5r=o(" (throws an error)."),f5r=l(),It=a("div"),F(Z$.$$.fragment),g5r=l(),T3e=a("p"),h5r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),u5r=l(),Fc=a("p"),p5r=o(`Note:
Loading a model from its configuration file does `),M3e=a("strong"),_5r=o("not"),b5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),v5r=o("from_pretrained()"),F5r=o(" to load the model weights."),T5r=l(),F(gC.$$.fragment),M5r=l(),bo=a("div"),F(ek.$$.fragment),E5r=l(),E3e=a("p"),C5r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),w5r=l(),un=a("p"),A5r=o("The model class to instantiate is selected based on the "),C3e=a("code"),L5r=o("model_type"),y5r=o(` property of the config object (either
passed as an argument or loaded from `),w3e=a("code"),x5r=o("pretrained_model_name_or_path"),$5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(":"),R5r=l(),Le=a("ul"),hC=a("li"),L3e=a("strong"),P5r=o("data2vec-audio"),B5r=o(" \u2014 "),qK=a("a"),I5r=o("Data2VecAudioForCTC"),N5r=o(" (Data2VecAudio model)"),q5r=l(),uC=a("li"),y3e=a("strong"),j5r=o("hubert"),D5r=o(" \u2014 "),jK=a("a"),G5r=o("HubertForCTC"),O5r=o(" (Hubert model)"),V5r=l(),pC=a("li"),x3e=a("strong"),X5r=o("mctct"),z5r=o(" \u2014 "),DK=a("a"),Q5r=o("MCTCTForCTC"),W5r=o(" (M-CTC-T model)"),U5r=l(),_C=a("li"),$3e=a("strong"),H5r=o("sew"),J5r=o(" \u2014 "),GK=a("a"),Y5r=o("SEWForCTC"),K5r=o(" (SEW model)"),Z5r=l(),bC=a("li"),k3e=a("strong"),e0r=o("sew-d"),o0r=o(" \u2014 "),OK=a("a"),r0r=o("SEWDForCTC"),t0r=o(" (SEW-D model)"),a0r=l(),vC=a("li"),S3e=a("strong"),n0r=o("unispeech"),s0r=o(" \u2014 "),VK=a("a"),l0r=o("UniSpeechForCTC"),i0r=o(" (UniSpeech model)"),d0r=l(),FC=a("li"),R3e=a("strong"),c0r=o("unispeech-sat"),m0r=o(" \u2014 "),XK=a("a"),f0r=o("UniSpeechSatForCTC"),g0r=o(" (UniSpeechSat model)"),h0r=l(),TC=a("li"),P3e=a("strong"),u0r=o("wav2vec2"),p0r=o(" \u2014 "),zK=a("a"),_0r=o("Wav2Vec2ForCTC"),b0r=o(" (Wav2Vec2 model)"),v0r=l(),MC=a("li"),B3e=a("strong"),F0r=o("wav2vec2-conformer"),T0r=o(" \u2014 "),QK=a("a"),M0r=o("Wav2Vec2ConformerForCTC"),E0r=o(" (Wav2Vec2-Conformer model)"),C0r=l(),EC=a("li"),I3e=a("strong"),w0r=o("wavlm"),A0r=o(" \u2014 "),WK=a("a"),L0r=o("WavLMForCTC"),y0r=o(" (WavLM model)"),x0r=l(),CC=a("p"),$0r=o("The model is set in evaluation mode by default using "),N3e=a("code"),k0r=o("model.eval()"),S0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q3e=a("code"),R0r=o("model.train()"),P0r=l(),F(wC.$$.fragment),VZe=l(),Tc=a("h2"),AC=a("a"),j3e=a("span"),F(ok.$$.fragment),B0r=l(),D3e=a("span"),I0r=o("AutoModelForSpeechSeq2Seq"),XZe=l(),Zo=a("div"),F(rk.$$.fragment),N0r=l(),Mc=a("p"),q0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UK=a("a"),j0r=o("from_pretrained()"),D0r=o(" class method or the "),HK=a("a"),G0r=o("from_config()"),O0r=o(` class
method.`),V0r=l(),tk=a("p"),X0r=o("This class cannot be instantiated directly using "),G3e=a("code"),z0r=o("__init__()"),Q0r=o(" (throws an error)."),W0r=l(),Nt=a("div"),F(ak.$$.fragment),U0r=l(),O3e=a("p"),H0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),J0r=l(),Ec=a("p"),Y0r=o(`Note:
Loading a model from its configuration file does `),V3e=a("strong"),K0r=o("not"),Z0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),ewr=o("from_pretrained()"),owr=o(" to load the model weights."),rwr=l(),F(LC.$$.fragment),twr=l(),vo=a("div"),F(nk.$$.fragment),awr=l(),X3e=a("p"),nwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),swr=l(),pn=a("p"),lwr=o("The model class to instantiate is selected based on the "),z3e=a("code"),iwr=o("model_type"),dwr=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),cwr=o("pretrained_model_name_or_path"),mwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),fwr=o("pretrained_model_name_or_path"),gwr=o(":"),hwr=l(),sk=a("ul"),yC=a("li"),U3e=a("strong"),uwr=o("speech-encoder-decoder"),pwr=o(" \u2014 "),YK=a("a"),_wr=o("SpeechEncoderDecoderModel"),bwr=o(" (Speech Encoder decoder model)"),vwr=l(),xC=a("li"),H3e=a("strong"),Fwr=o("speech_to_text"),Twr=o(" \u2014 "),KK=a("a"),Mwr=o("Speech2TextForConditionalGeneration"),Ewr=o(" (Speech2Text model)"),Cwr=l(),$C=a("p"),wwr=o("The model is set in evaluation mode by default using "),J3e=a("code"),Awr=o("model.eval()"),Lwr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y3e=a("code"),ywr=o("model.train()"),xwr=l(),F(kC.$$.fragment),zZe=l(),Cc=a("h2"),SC=a("a"),K3e=a("span"),F(lk.$$.fragment),$wr=l(),Z3e=a("span"),kwr=o("AutoModelForAudioXVector"),QZe=l(),er=a("div"),F(ik.$$.fragment),Swr=l(),wc=a("p"),Rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZK=a("a"),Pwr=o("from_pretrained()"),Bwr=o(" class method or the "),eZ=a("a"),Iwr=o("from_config()"),Nwr=o(` class
method.`),qwr=l(),dk=a("p"),jwr=o("This class cannot be instantiated directly using "),e5e=a("code"),Dwr=o("__init__()"),Gwr=o(" (throws an error)."),Owr=l(),qt=a("div"),F(ck.$$.fragment),Vwr=l(),o5e=a("p"),Xwr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zwr=l(),Ac=a("p"),Qwr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),Wwr=o("not"),Uwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=a("a"),Hwr=o("from_pretrained()"),Jwr=o(" to load the model weights."),Ywr=l(),F(RC.$$.fragment),Kwr=l(),Fo=a("div"),F(mk.$$.fragment),Zwr=l(),t5e=a("p"),eAr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),oAr=l(),_n=a("p"),rAr=o("The model class to instantiate is selected based on the "),a5e=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),ft=a("ul"),PC=a("li"),l5e=a("strong"),cAr=o("data2vec-audio"),mAr=o(" \u2014 "),rZ=a("a"),fAr=o("Data2VecAudioForXVector"),gAr=o(" (Data2VecAudio model)"),hAr=l(),BC=a("li"),i5e=a("strong"),uAr=o("unispeech-sat"),pAr=o(" \u2014 "),tZ=a("a"),_Ar=o("UniSpeechSatForXVector"),bAr=o(" (UniSpeechSat model)"),vAr=l(),IC=a("li"),d5e=a("strong"),FAr=o("wav2vec2"),TAr=o(" \u2014 "),aZ=a("a"),MAr=o("Wav2Vec2ForXVector"),EAr=o(" (Wav2Vec2 model)"),CAr=l(),NC=a("li"),c5e=a("strong"),wAr=o("wav2vec2-conformer"),AAr=o(" \u2014 "),nZ=a("a"),LAr=o("Wav2Vec2ConformerForXVector"),yAr=o(" (Wav2Vec2-Conformer model)"),xAr=l(),qC=a("li"),m5e=a("strong"),$Ar=o("wavlm"),kAr=o(" \u2014 "),sZ=a("a"),SAr=o("WavLMForXVector"),RAr=o(" (WavLM model)"),PAr=l(),jC=a("p"),BAr=o("The model is set in evaluation mode by default using "),f5e=a("code"),IAr=o("model.eval()"),NAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g5e=a("code"),qAr=o("model.train()"),jAr=l(),F(DC.$$.fragment),WZe=l(),Lc=a("h2"),GC=a("a"),h5e=a("span"),F(fk.$$.fragment),DAr=l(),u5e=a("span"),GAr=o("AutoModelForMaskedImageModeling"),UZe=l(),or=a("div"),F(gk.$$.fragment),OAr=l(),yc=a("p"),VAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lZ=a("a"),XAr=o("from_pretrained()"),zAr=o(" class method or the "),iZ=a("a"),QAr=o("from_config()"),WAr=o(` class
method.`),UAr=l(),hk=a("p"),HAr=o("This class cannot be instantiated directly using "),p5e=a("code"),JAr=o("__init__()"),YAr=o(" (throws an error)."),KAr=l(),jt=a("div"),F(uk.$$.fragment),ZAr=l(),_5e=a("p"),e6r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),o6r=l(),xc=a("p"),r6r=o(`Note:
Loading a model from its configuration file does `),b5e=a("strong"),t6r=o("not"),a6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),n6r=o("from_pretrained()"),s6r=o(" to load the model weights."),l6r=l(),F(OC.$$.fragment),i6r=l(),To=a("div"),F(pk.$$.fragment),d6r=l(),v5e=a("p"),c6r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),m6r=l(),bn=a("p"),f6r=o("The model class to instantiate is selected based on the "),F5e=a("code"),g6r=o("model_type"),h6r=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),u6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=a("code"),_6r=o("pretrained_model_name_or_path"),b6r=o(":"),v6r=l(),vn=a("ul"),VC=a("li"),E5e=a("strong"),F6r=o("deit"),T6r=o(" \u2014 "),cZ=a("a"),M6r=o("DeiTForMaskedImageModeling"),E6r=o(" (DeiT model)"),C6r=l(),XC=a("li"),C5e=a("strong"),w6r=o("swin"),A6r=o(" \u2014 "),mZ=a("a"),L6r=o("SwinForMaskedImageModeling"),y6r=o(" (Swin Transformer model)"),x6r=l(),zC=a("li"),w5e=a("strong"),$6r=o("swinv2"),k6r=o(" \u2014 "),fZ=a("a"),S6r=o("Swinv2ForMaskedImageModeling"),R6r=o(" (Swin Transformer V2 model)"),P6r=l(),QC=a("li"),A5e=a("strong"),B6r=o("vit"),I6r=o(" \u2014 "),gZ=a("a"),N6r=o("ViTForMaskedImageModeling"),q6r=o(" (ViT model)"),j6r=l(),WC=a("p"),D6r=o("The model is set in evaluation mode by default using "),L5e=a("code"),G6r=o("model.eval()"),O6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y5e=a("code"),V6r=o("model.train()"),X6r=l(),F(UC.$$.fragment),HZe=l(),$c=a("h2"),HC=a("a"),x5e=a("span"),F(_k.$$.fragment),z6r=l(),$5e=a("span"),Q6r=o("AutoModelForObjectDetection"),JZe=l(),rr=a("div"),F(bk.$$.fragment),W6r=l(),kc=a("p"),U6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),hZ=a("a"),H6r=o("from_pretrained()"),J6r=o(" class method or the "),uZ=a("a"),Y6r=o("from_config()"),K6r=o(` class
method.`),Z6r=l(),vk=a("p"),e7r=o("This class cannot be instantiated directly using "),k5e=a("code"),o7r=o("__init__()"),r7r=o(" (throws an error)."),t7r=l(),Dt=a("div"),F(Fk.$$.fragment),a7r=l(),S5e=a("p"),n7r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),s7r=l(),Sc=a("p"),l7r=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),i7r=o("not"),d7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),c7r=o("from_pretrained()"),m7r=o(" to load the model weights."),f7r=l(),F(JC.$$.fragment),g7r=l(),Mo=a("div"),F(Tk.$$.fragment),h7r=l(),P5e=a("p"),u7r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),p7r=l(),Fn=a("p"),_7r=o("The model class to instantiate is selected based on the "),B5e=a("code"),b7r=o("model_type"),v7r=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),F7r=o("pretrained_model_name_or_path"),T7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),M7r=o("pretrained_model_name_or_path"),E7r=o(":"),C7r=l(),Tn=a("ul"),YC=a("li"),q5e=a("strong"),w7r=o("conditional_detr"),A7r=o(" \u2014 "),_Z=a("a"),L7r=o("ConditionalDetrForObjectDetection"),y7r=o(" (Conditional DETR model)"),x7r=l(),KC=a("li"),j5e=a("strong"),$7r=o("deformable_detr"),k7r=o(" \u2014 "),bZ=a("a"),S7r=o("DeformableDetrForObjectDetection"),R7r=o(" (Deformable DETR model)"),P7r=l(),ZC=a("li"),D5e=a("strong"),B7r=o("detr"),I7r=o(" \u2014 "),vZ=a("a"),N7r=o("DetrForObjectDetection"),q7r=o(" (DETR model)"),j7r=l(),e3=a("li"),G5e=a("strong"),D7r=o("yolos"),G7r=o(" \u2014 "),FZ=a("a"),O7r=o("YolosForObjectDetection"),V7r=o(" (YOLOS model)"),X7r=l(),o3=a("p"),z7r=o("The model is set in evaluation mode by default using "),O5e=a("code"),Q7r=o("model.eval()"),W7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V5e=a("code"),U7r=o("model.train()"),H7r=l(),F(r3.$$.fragment),YZe=l(),Rc=a("h2"),t3=a("a"),X5e=a("span"),F(Mk.$$.fragment),J7r=l(),z5e=a("span"),Y7r=o("AutoModelForImageSegmentation"),KZe=l(),tr=a("div"),F(Ek.$$.fragment),K7r=l(),Pc=a("p"),Z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),TZ=a("a"),eLr=o("from_pretrained()"),oLr=o(" class method or the "),MZ=a("a"),rLr=o("from_config()"),tLr=o(` class
method.`),aLr=l(),Ck=a("p"),nLr=o("This class cannot be instantiated directly using "),Q5e=a("code"),sLr=o("__init__()"),lLr=o(" (throws an error)."),iLr=l(),Gt=a("div"),F(wk.$$.fragment),dLr=l(),W5e=a("p"),cLr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mLr=l(),Bc=a("p"),fLr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),gLr=o("not"),hLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),uLr=o("from_pretrained()"),pLr=o(" to load the model weights."),_Lr=l(),F(a3.$$.fragment),bLr=l(),Eo=a("div"),F(Ak.$$.fragment),vLr=l(),H5e=a("p"),FLr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),TLr=l(),Mn=a("p"),MLr=o("The model class to instantiate is selected based on the "),J5e=a("code"),ELr=o("model_type"),CLr=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),LLr=o("pretrained_model_name_or_path"),yLr=o(":"),xLr=l(),Z5e=a("ul"),n3=a("li"),e0e=a("strong"),$Lr=o("detr"),kLr=o(" \u2014 "),CZ=a("a"),SLr=o("DetrForSegmentation"),RLr=o(" (DETR model)"),PLr=l(),s3=a("p"),BLr=o("The model is set in evaluation mode by default using "),o0e=a("code"),ILr=o("model.eval()"),NLr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r0e=a("code"),qLr=o("model.train()"),jLr=l(),F(l3.$$.fragment),ZZe=l(),Ic=a("h2"),i3=a("a"),t0e=a("span"),F(Lk.$$.fragment),DLr=l(),a0e=a("span"),GLr=o("AutoModelForSemanticSegmentation"),eeo=l(),ar=a("div"),F(yk.$$.fragment),OLr=l(),Nc=a("p"),VLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),wZ=a("a"),XLr=o("from_pretrained()"),zLr=o(" class method or the "),AZ=a("a"),QLr=o("from_config()"),WLr=o(` class
method.`),ULr=l(),xk=a("p"),HLr=o("This class cannot be instantiated directly using "),n0e=a("code"),JLr=o("__init__()"),YLr=o(" (throws an error)."),KLr=l(),Ot=a("div"),F($k.$$.fragment),ZLr=l(),s0e=a("p"),eyr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),oyr=l(),qc=a("p"),ryr=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),tyr=o("not"),ayr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),nyr=o("from_pretrained()"),syr=o(" to load the model weights."),lyr=l(),F(d3.$$.fragment),iyr=l(),Co=a("div"),F(kk.$$.fragment),dyr=l(),i0e=a("p"),cyr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),myr=l(),En=a("p"),fyr=o("The model class to instantiate is selected based on the "),d0e=a("code"),gyr=o("model_type"),hyr=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),uyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),_yr=o("pretrained_model_name_or_path"),byr=o(":"),vyr=l(),gt=a("ul"),c3=a("li"),f0e=a("strong"),Fyr=o("beit"),Tyr=o(" \u2014 "),yZ=a("a"),Myr=o("BeitForSemanticSegmentation"),Eyr=o(" (BEiT model)"),Cyr=l(),m3=a("li"),g0e=a("strong"),wyr=o("data2vec-vision"),Ayr=o(" \u2014 "),xZ=a("a"),Lyr=o("Data2VecVisionForSemanticSegmentation"),yyr=o(" (Data2VecVision model)"),xyr=l(),f3=a("li"),h0e=a("strong"),$yr=o("dpt"),kyr=o(" \u2014 "),$Z=a("a"),Syr=o("DPTForSemanticSegmentation"),Ryr=o(" (DPT model)"),Pyr=l(),g3=a("li"),u0e=a("strong"),Byr=o("mobilevit"),Iyr=o(" \u2014 "),kZ=a("a"),Nyr=o("MobileViTForSemanticSegmentation"),qyr=o(" (MobileViT model)"),jyr=l(),h3=a("li"),p0e=a("strong"),Dyr=o("segformer"),Gyr=o(" \u2014 "),SZ=a("a"),Oyr=o("SegformerForSemanticSegmentation"),Vyr=o(" (SegFormer model)"),Xyr=l(),u3=a("p"),zyr=o("The model is set in evaluation mode by default using "),_0e=a("code"),Qyr=o("model.eval()"),Wyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b0e=a("code"),Uyr=o("model.train()"),Hyr=l(),F(p3.$$.fragment),oeo=l(),jc=a("h2"),_3=a("a"),v0e=a("span"),F(Sk.$$.fragment),Jyr=l(),F0e=a("span"),Yyr=o("AutoModelForInstanceSegmentation"),reo=l(),nr=a("div"),F(Rk.$$.fragment),Kyr=l(),Dc=a("p"),Zyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RZ=a("a"),e8r=o("from_pretrained()"),o8r=o(" class method or the "),PZ=a("a"),r8r=o("from_config()"),t8r=o(` class
method.`),a8r=l(),Pk=a("p"),n8r=o("This class cannot be instantiated directly using "),T0e=a("code"),s8r=o("__init__()"),l8r=o(" (throws an error)."),i8r=l(),Vt=a("div"),F(Bk.$$.fragment),d8r=l(),M0e=a("p"),c8r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),m8r=l(),Gc=a("p"),f8r=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),g8r=o("not"),h8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("a"),u8r=o("from_pretrained()"),p8r=o(" to load the model weights."),_8r=l(),F(b3.$$.fragment),b8r=l(),wo=a("div"),F(Ik.$$.fragment),v8r=l(),C0e=a("p"),F8r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),T8r=l(),Cn=a("p"),M8r=o("The model class to instantiate is selected based on the "),w0e=a("code"),E8r=o("model_type"),C8r=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),L8r=o("pretrained_model_name_or_path"),y8r=o(":"),x8r=l(),y0e=a("ul"),v3=a("li"),x0e=a("strong"),$8r=o("maskformer"),k8r=o(" \u2014 "),IZ=a("a"),S8r=o("MaskFormerForInstanceSegmentation"),R8r=o(" (MaskFormer model)"),P8r=l(),F3=a("p"),B8r=o("The model is set in evaluation mode by default using "),$0e=a("code"),I8r=o("model.eval()"),N8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k0e=a("code"),q8r=o("model.train()"),j8r=l(),F(T3.$$.fragment),teo=l(),Oc=a("h2"),M3=a("a"),S0e=a("span"),F(Nk.$$.fragment),D8r=l(),R0e=a("span"),G8r=o("TFAutoModel"),aeo=l(),sr=a("div"),F(qk.$$.fragment),O8r=l(),Vc=a("p"),V8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NZ=a("a"),X8r=o("from_pretrained()"),z8r=o(" class method or the "),qZ=a("a"),Q8r=o("from_config()"),W8r=o(` class
method.`),U8r=l(),jk=a("p"),H8r=o("This class cannot be instantiated directly using "),P0e=a("code"),J8r=o("__init__()"),Y8r=o(" (throws an error)."),K8r=l(),Xt=a("div"),F(Dk.$$.fragment),Z8r=l(),B0e=a("p"),e9r=o("Instantiates one of the base model classes of the library from a configuration."),o9r=l(),Xc=a("p"),r9r=o(`Note:
Loading a model from its configuration file does `),I0e=a("strong"),t9r=o("not"),a9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),n9r=o("from_pretrained()"),s9r=o(" to load the model weights."),l9r=l(),F(E3.$$.fragment),i9r=l(),Ir=a("div"),F(Gk.$$.fragment),d9r=l(),N0e=a("p"),c9r=o("Instantiate one of the base model classes of the library from a pretrained model."),m9r=l(),wn=a("p"),f9r=o("The model class to instantiate is selected based on the "),q0e=a("code"),g9r=o("model_type"),h9r=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),u9r=o("pretrained_model_name_or_path"),p9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),_9r=o("pretrained_model_name_or_path"),b9r=o(":"),v9r=l(),B=a("ul"),C3=a("li"),G0e=a("strong"),F9r=o("albert"),T9r=o(" \u2014 "),DZ=a("a"),M9r=o("TFAlbertModel"),E9r=o(" (ALBERT model)"),C9r=l(),w3=a("li"),O0e=a("strong"),w9r=o("bart"),A9r=o(" \u2014 "),GZ=a("a"),L9r=o("TFBartModel"),y9r=o(" (BART model)"),x9r=l(),A3=a("li"),V0e=a("strong"),$9r=o("bert"),k9r=o(" \u2014 "),OZ=a("a"),S9r=o("TFBertModel"),R9r=o(" (BERT model)"),P9r=l(),L3=a("li"),X0e=a("strong"),B9r=o("blenderbot"),I9r=o(" \u2014 "),VZ=a("a"),N9r=o("TFBlenderbotModel"),q9r=o(" (Blenderbot model)"),j9r=l(),y3=a("li"),z0e=a("strong"),D9r=o("blenderbot-small"),G9r=o(" \u2014 "),XZ=a("a"),O9r=o("TFBlenderbotSmallModel"),V9r=o(" (BlenderbotSmall model)"),X9r=l(),x3=a("li"),Q0e=a("strong"),z9r=o("camembert"),Q9r=o(" \u2014 "),zZ=a("a"),W9r=o("TFCamembertModel"),U9r=o(" (CamemBERT model)"),H9r=l(),$3=a("li"),W0e=a("strong"),J9r=o("clip"),Y9r=o(" \u2014 "),QZ=a("a"),K9r=o("TFCLIPModel"),Z9r=o(" (CLIP model)"),exr=l(),k3=a("li"),U0e=a("strong"),oxr=o("convbert"),rxr=o(" \u2014 "),WZ=a("a"),txr=o("TFConvBertModel"),axr=o(" (ConvBERT model)"),nxr=l(),S3=a("li"),H0e=a("strong"),sxr=o("convnext"),lxr=o(" \u2014 "),UZ=a("a"),ixr=o("TFConvNextModel"),dxr=o(" (ConvNeXT model)"),cxr=l(),R3=a("li"),J0e=a("strong"),mxr=o("ctrl"),fxr=o(" \u2014 "),HZ=a("a"),gxr=o("TFCTRLModel"),hxr=o(" (CTRL model)"),uxr=l(),P3=a("li"),Y0e=a("strong"),pxr=o("data2vec-vision"),_xr=o(" \u2014 "),JZ=a("a"),bxr=o("TFData2VecVisionModel"),vxr=o(" (Data2VecVision model)"),Fxr=l(),B3=a("li"),K0e=a("strong"),Txr=o("deberta"),Mxr=o(" \u2014 "),YZ=a("a"),Exr=o("TFDebertaModel"),Cxr=o(" (DeBERTa model)"),wxr=l(),I3=a("li"),Z0e=a("strong"),Axr=o("deberta-v2"),Lxr=o(" \u2014 "),KZ=a("a"),yxr=o("TFDebertaV2Model"),xxr=o(" (DeBERTa-v2 model)"),$xr=l(),N3=a("li"),ewe=a("strong"),kxr=o("deit"),Sxr=o(" \u2014 "),ZZ=a("a"),Rxr=o("TFDeiTModel"),Pxr=o(" (DeiT model)"),Bxr=l(),q3=a("li"),owe=a("strong"),Ixr=o("distilbert"),Nxr=o(" \u2014 "),eee=a("a"),qxr=o("TFDistilBertModel"),jxr=o(" (DistilBERT model)"),Dxr=l(),j3=a("li"),rwe=a("strong"),Gxr=o("dpr"),Oxr=o(" \u2014 "),oee=a("a"),Vxr=o("TFDPRQuestionEncoder"),Xxr=o(" (DPR model)"),zxr=l(),D3=a("li"),twe=a("strong"),Qxr=o("electra"),Wxr=o(" \u2014 "),ree=a("a"),Uxr=o("TFElectraModel"),Hxr=o(" (ELECTRA model)"),Jxr=l(),G3=a("li"),awe=a("strong"),Yxr=o("flaubert"),Kxr=o(" \u2014 "),tee=a("a"),Zxr=o("TFFlaubertModel"),e$r=o(" (FlauBERT model)"),o$r=l(),Fl=a("li"),nwe=a("strong"),r$r=o("funnel"),t$r=o(" \u2014 "),aee=a("a"),a$r=o("TFFunnelModel"),n$r=o(" or "),nee=a("a"),s$r=o("TFFunnelBaseModel"),l$r=o(" (Funnel Transformer model)"),i$r=l(),O3=a("li"),swe=a("strong"),d$r=o("gpt2"),c$r=o(" \u2014 "),see=a("a"),m$r=o("TFGPT2Model"),f$r=o(" (OpenAI GPT-2 model)"),g$r=l(),V3=a("li"),lwe=a("strong"),h$r=o("gptj"),u$r=o(" \u2014 "),lee=a("a"),p$r=o("TFGPTJModel"),_$r=o(" (GPT-J model)"),b$r=l(),X3=a("li"),iwe=a("strong"),v$r=o("groupvit"),F$r=o(" \u2014 "),iee=a("a"),T$r=o("TFGroupViTModel"),M$r=o(" (GroupViT model)"),E$r=l(),z3=a("li"),dwe=a("strong"),C$r=o("hubert"),w$r=o(" \u2014 "),dee=a("a"),A$r=o("TFHubertModel"),L$r=o(" (Hubert model)"),y$r=l(),Q3=a("li"),cwe=a("strong"),x$r=o("layoutlm"),$$r=o(" \u2014 "),cee=a("a"),k$r=o("TFLayoutLMModel"),S$r=o(" (LayoutLM model)"),R$r=l(),W3=a("li"),mwe=a("strong"),P$r=o("layoutlmv3"),B$r=o(" \u2014 "),mee=a("a"),I$r=o("TFLayoutLMv3Model"),N$r=o(" (LayoutLMv3 model)"),q$r=l(),U3=a("li"),fwe=a("strong"),j$r=o("led"),D$r=o(" \u2014 "),fee=a("a"),G$r=o("TFLEDModel"),O$r=o(" (LED model)"),V$r=l(),H3=a("li"),gwe=a("strong"),X$r=o("longformer"),z$r=o(" \u2014 "),gee=a("a"),Q$r=o("TFLongformerModel"),W$r=o(" (Longformer model)"),U$r=l(),J3=a("li"),hwe=a("strong"),H$r=o("lxmert"),J$r=o(" \u2014 "),hee=a("a"),Y$r=o("TFLxmertModel"),K$r=o(" (LXMERT model)"),Z$r=l(),Y3=a("li"),uwe=a("strong"),ekr=o("marian"),okr=o(" \u2014 "),uee=a("a"),rkr=o("TFMarianModel"),tkr=o(" (Marian model)"),akr=l(),K3=a("li"),pwe=a("strong"),nkr=o("mbart"),skr=o(" \u2014 "),pee=a("a"),lkr=o("TFMBartModel"),ikr=o(" (mBART model)"),dkr=l(),Z3=a("li"),_we=a("strong"),ckr=o("mobilebert"),mkr=o(" \u2014 "),_ee=a("a"),fkr=o("TFMobileBertModel"),gkr=o(" (MobileBERT model)"),hkr=l(),e5=a("li"),bwe=a("strong"),ukr=o("mobilevit"),pkr=o(" \u2014 "),bee=a("a"),_kr=o("TFMobileViTModel"),bkr=o(" (MobileViT model)"),vkr=l(),o5=a("li"),vwe=a("strong"),Fkr=o("mpnet"),Tkr=o(" \u2014 "),vee=a("a"),Mkr=o("TFMPNetModel"),Ekr=o(" (MPNet model)"),Ckr=l(),r5=a("li"),Fwe=a("strong"),wkr=o("mt5"),Akr=o(" \u2014 "),Fee=a("a"),Lkr=o("TFMT5Model"),ykr=o(" (MT5 model)"),xkr=l(),t5=a("li"),Twe=a("strong"),$kr=o("openai-gpt"),kkr=o(" \u2014 "),Tee=a("a"),Skr=o("TFOpenAIGPTModel"),Rkr=o(" (OpenAI GPT model)"),Pkr=l(),a5=a("li"),Mwe=a("strong"),Bkr=o("opt"),Ikr=o(" \u2014 "),Mee=a("a"),Nkr=o("TFOPTModel"),qkr=o(" (OPT model)"),jkr=l(),n5=a("li"),Ewe=a("strong"),Dkr=o("pegasus"),Gkr=o(" \u2014 "),Eee=a("a"),Okr=o("TFPegasusModel"),Vkr=o(" (Pegasus model)"),Xkr=l(),s5=a("li"),Cwe=a("strong"),zkr=o("regnet"),Qkr=o(" \u2014 "),Cee=a("a"),Wkr=o("TFRegNetModel"),Ukr=o(" (RegNet model)"),Hkr=l(),l5=a("li"),wwe=a("strong"),Jkr=o("rembert"),Ykr=o(" \u2014 "),wee=a("a"),Kkr=o("TFRemBertModel"),Zkr=o(" (RemBERT model)"),eSr=l(),i5=a("li"),Awe=a("strong"),oSr=o("resnet"),rSr=o(" \u2014 "),Aee=a("a"),tSr=o("TFResNetModel"),aSr=o(" (ResNet model)"),nSr=l(),d5=a("li"),Lwe=a("strong"),sSr=o("roberta"),lSr=o(" \u2014 "),Lee=a("a"),iSr=o("TFRobertaModel"),dSr=o(" (RoBERTa model)"),cSr=l(),c5=a("li"),ywe=a("strong"),mSr=o("roformer"),fSr=o(" \u2014 "),yee=a("a"),gSr=o("TFRoFormerModel"),hSr=o(" (RoFormer model)"),uSr=l(),m5=a("li"),xwe=a("strong"),pSr=o("segformer"),_Sr=o(" \u2014 "),xee=a("a"),bSr=o("TFSegformerModel"),vSr=o(" (SegFormer model)"),FSr=l(),f5=a("li"),$we=a("strong"),TSr=o("speech_to_text"),MSr=o(" \u2014 "),$ee=a("a"),ESr=o("TFSpeech2TextModel"),CSr=o(" (Speech2Text model)"),wSr=l(),g5=a("li"),kwe=a("strong"),ASr=o("swin"),LSr=o(" \u2014 "),kee=a("a"),ySr=o("TFSwinModel"),xSr=o(" (Swin Transformer model)"),$Sr=l(),h5=a("li"),Swe=a("strong"),kSr=o("t5"),SSr=o(" \u2014 "),See=a("a"),RSr=o("TFT5Model"),PSr=o(" (T5 model)"),BSr=l(),u5=a("li"),Rwe=a("strong"),ISr=o("tapas"),NSr=o(" \u2014 "),Ree=a("a"),qSr=o("TFTapasModel"),jSr=o(" (TAPAS model)"),DSr=l(),p5=a("li"),Pwe=a("strong"),GSr=o("transfo-xl"),OSr=o(" \u2014 "),Pee=a("a"),VSr=o("TFTransfoXLModel"),XSr=o(" (Transformer-XL model)"),zSr=l(),_5=a("li"),Bwe=a("strong"),QSr=o("vit"),WSr=o(" \u2014 "),Bee=a("a"),USr=o("TFViTModel"),HSr=o(" (ViT model)"),JSr=l(),b5=a("li"),Iwe=a("strong"),YSr=o("vit_mae"),KSr=o(" \u2014 "),Iee=a("a"),ZSr=o("TFViTMAEModel"),eRr=o(" (ViTMAE model)"),oRr=l(),v5=a("li"),Nwe=a("strong"),rRr=o("wav2vec2"),tRr=o(" \u2014 "),Nee=a("a"),aRr=o("TFWav2Vec2Model"),nRr=o(" (Wav2Vec2 model)"),sRr=l(),F5=a("li"),qwe=a("strong"),lRr=o("xglm"),iRr=o(" \u2014 "),qee=a("a"),dRr=o("TFXGLMModel"),cRr=o(" (XGLM model)"),mRr=l(),T5=a("li"),jwe=a("strong"),fRr=o("xlm"),gRr=o(" \u2014 "),jee=a("a"),hRr=o("TFXLMModel"),uRr=o(" (XLM model)"),pRr=l(),M5=a("li"),Dwe=a("strong"),_Rr=o("xlm-roberta"),bRr=o(" \u2014 "),Dee=a("a"),vRr=o("TFXLMRobertaModel"),FRr=o(" (XLM-RoBERTa model)"),TRr=l(),E5=a("li"),Gwe=a("strong"),MRr=o("xlnet"),ERr=o(" \u2014 "),Gee=a("a"),CRr=o("TFXLNetModel"),wRr=o(" (XLNet model)"),ARr=l(),F(C5.$$.fragment),neo=l(),zc=a("h2"),w5=a("a"),Owe=a("span"),F(Ok.$$.fragment),LRr=l(),Vwe=a("span"),yRr=o("TFAutoModelForPreTraining"),seo=l(),lr=a("div"),F(Vk.$$.fragment),xRr=l(),Qc=a("p"),$Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oee=a("a"),kRr=o("from_pretrained()"),SRr=o(" class method or the "),Vee=a("a"),RRr=o("from_config()"),PRr=o(` class
method.`),BRr=l(),Xk=a("p"),IRr=o("This class cannot be instantiated directly using "),Xwe=a("code"),NRr=o("__init__()"),qRr=o(" (throws an error)."),jRr=l(),zt=a("div"),F(zk.$$.fragment),DRr=l(),zwe=a("p"),GRr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ORr=l(),Wc=a("p"),VRr=o(`Note:
Loading a model from its configuration file does `),Qwe=a("strong"),XRr=o("not"),zRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("a"),QRr=o("from_pretrained()"),WRr=o(" to load the model weights."),URr=l(),F(A5.$$.fragment),HRr=l(),Nr=a("div"),F(Qk.$$.fragment),JRr=l(),Wwe=a("p"),YRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KRr=l(),An=a("p"),ZRr=o("The model class to instantiate is selected based on the "),Uwe=a("code"),ePr=o("model_type"),oPr=o(` property of the config object (either
passed as an argument or loaded from `),Hwe=a("code"),rPr=o("pretrained_model_name_or_path"),tPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=a("code"),aPr=o("pretrained_model_name_or_path"),nPr=o(":"),sPr=l(),se=a("ul"),L5=a("li"),Ywe=a("strong"),lPr=o("albert"),iPr=o(" \u2014 "),zee=a("a"),dPr=o("TFAlbertForPreTraining"),cPr=o(" (ALBERT model)"),mPr=l(),y5=a("li"),Kwe=a("strong"),fPr=o("bart"),gPr=o(" \u2014 "),Qee=a("a"),hPr=o("TFBartForConditionalGeneration"),uPr=o(" (BART model)"),pPr=l(),x5=a("li"),Zwe=a("strong"),_Pr=o("bert"),bPr=o(" \u2014 "),Wee=a("a"),vPr=o("TFBertForPreTraining"),FPr=o(" (BERT model)"),TPr=l(),$5=a("li"),eAe=a("strong"),MPr=o("camembert"),EPr=o(" \u2014 "),Uee=a("a"),CPr=o("TFCamembertForMaskedLM"),wPr=o(" (CamemBERT model)"),APr=l(),k5=a("li"),oAe=a("strong"),LPr=o("ctrl"),yPr=o(" \u2014 "),Hee=a("a"),xPr=o("TFCTRLLMHeadModel"),$Pr=o(" (CTRL model)"),kPr=l(),S5=a("li"),rAe=a("strong"),SPr=o("distilbert"),RPr=o(" \u2014 "),Jee=a("a"),PPr=o("TFDistilBertForMaskedLM"),BPr=o(" (DistilBERT model)"),IPr=l(),R5=a("li"),tAe=a("strong"),NPr=o("electra"),qPr=o(" \u2014 "),Yee=a("a"),jPr=o("TFElectraForPreTraining"),DPr=o(" (ELECTRA model)"),GPr=l(),P5=a("li"),aAe=a("strong"),OPr=o("flaubert"),VPr=o(" \u2014 "),Kee=a("a"),XPr=o("TFFlaubertWithLMHeadModel"),zPr=o(" (FlauBERT model)"),QPr=l(),B5=a("li"),nAe=a("strong"),WPr=o("funnel"),UPr=o(" \u2014 "),Zee=a("a"),HPr=o("TFFunnelForPreTraining"),JPr=o(" (Funnel Transformer model)"),YPr=l(),I5=a("li"),sAe=a("strong"),KPr=o("gpt2"),ZPr=o(" \u2014 "),eoe=a("a"),eBr=o("TFGPT2LMHeadModel"),oBr=o(" (OpenAI GPT-2 model)"),rBr=l(),N5=a("li"),lAe=a("strong"),tBr=o("layoutlm"),aBr=o(" \u2014 "),ooe=a("a"),nBr=o("TFLayoutLMForMaskedLM"),sBr=o(" (LayoutLM model)"),lBr=l(),q5=a("li"),iAe=a("strong"),iBr=o("lxmert"),dBr=o(" \u2014 "),roe=a("a"),cBr=o("TFLxmertForPreTraining"),mBr=o(" (LXMERT model)"),fBr=l(),j5=a("li"),dAe=a("strong"),gBr=o("mobilebert"),hBr=o(" \u2014 "),toe=a("a"),uBr=o("TFMobileBertForPreTraining"),pBr=o(" (MobileBERT model)"),_Br=l(),D5=a("li"),cAe=a("strong"),bBr=o("mpnet"),vBr=o(" \u2014 "),aoe=a("a"),FBr=o("TFMPNetForMaskedLM"),TBr=o(" (MPNet model)"),MBr=l(),G5=a("li"),mAe=a("strong"),EBr=o("openai-gpt"),CBr=o(" \u2014 "),noe=a("a"),wBr=o("TFOpenAIGPTLMHeadModel"),ABr=o(" (OpenAI GPT model)"),LBr=l(),O5=a("li"),fAe=a("strong"),yBr=o("roberta"),xBr=o(" \u2014 "),soe=a("a"),$Br=o("TFRobertaForMaskedLM"),kBr=o(" (RoBERTa model)"),SBr=l(),V5=a("li"),gAe=a("strong"),RBr=o("t5"),PBr=o(" \u2014 "),loe=a("a"),BBr=o("TFT5ForConditionalGeneration"),IBr=o(" (T5 model)"),NBr=l(),X5=a("li"),hAe=a("strong"),qBr=o("tapas"),jBr=o(" \u2014 "),ioe=a("a"),DBr=o("TFTapasForMaskedLM"),GBr=o(" (TAPAS model)"),OBr=l(),z5=a("li"),uAe=a("strong"),VBr=o("transfo-xl"),XBr=o(" \u2014 "),doe=a("a"),zBr=o("TFTransfoXLLMHeadModel"),QBr=o(" (Transformer-XL model)"),WBr=l(),Q5=a("li"),pAe=a("strong"),UBr=o("vit_mae"),HBr=o(" \u2014 "),coe=a("a"),JBr=o("TFViTMAEForPreTraining"),YBr=o(" (ViTMAE model)"),KBr=l(),W5=a("li"),_Ae=a("strong"),ZBr=o("xlm"),eIr=o(" \u2014 "),moe=a("a"),oIr=o("TFXLMWithLMHeadModel"),rIr=o(" (XLM model)"),tIr=l(),U5=a("li"),bAe=a("strong"),aIr=o("xlm-roberta"),nIr=o(" \u2014 "),foe=a("a"),sIr=o("TFXLMRobertaForMaskedLM"),lIr=o(" (XLM-RoBERTa model)"),iIr=l(),H5=a("li"),vAe=a("strong"),dIr=o("xlnet"),cIr=o(" \u2014 "),goe=a("a"),mIr=o("TFXLNetLMHeadModel"),fIr=o(" (XLNet model)"),gIr=l(),F(J5.$$.fragment),leo=l(),Uc=a("h2"),Y5=a("a"),FAe=a("span"),F(Wk.$$.fragment),hIr=l(),TAe=a("span"),uIr=o("TFAutoModelForCausalLM"),ieo=l(),ir=a("div"),F(Uk.$$.fragment),pIr=l(),Hc=a("p"),_Ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hoe=a("a"),bIr=o("from_pretrained()"),vIr=o(" class method or the "),uoe=a("a"),FIr=o("from_config()"),TIr=o(` class
method.`),MIr=l(),Hk=a("p"),EIr=o("This class cannot be instantiated directly using "),MAe=a("code"),CIr=o("__init__()"),wIr=o(" (throws an error)."),AIr=l(),Qt=a("div"),F(Jk.$$.fragment),LIr=l(),EAe=a("p"),yIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xIr=l(),Jc=a("p"),$Ir=o(`Note:
Loading a model from its configuration file does `),CAe=a("strong"),kIr=o("not"),SIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=a("a"),RIr=o("from_pretrained()"),PIr=o(" to load the model weights."),BIr=l(),F(K5.$$.fragment),IIr=l(),qr=a("div"),F(Yk.$$.fragment),NIr=l(),wAe=a("p"),qIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jIr=l(),Ln=a("p"),DIr=o("The model class to instantiate is selected based on the "),AAe=a("code"),GIr=o("model_type"),OIr=o(` property of the config object (either
passed as an argument or loaded from `),LAe=a("code"),VIr=o("pretrained_model_name_or_path"),XIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yAe=a("code"),zIr=o("pretrained_model_name_or_path"),QIr=o(":"),WIr=l(),Me=a("ul"),Z5=a("li"),xAe=a("strong"),UIr=o("bert"),HIr=o(" \u2014 "),_oe=a("a"),JIr=o("TFBertLMHeadModel"),YIr=o(" (BERT model)"),KIr=l(),e0=a("li"),$Ae=a("strong"),ZIr=o("camembert"),eNr=o(" \u2014 "),boe=a("a"),oNr=o("TFCamembertForCausalLM"),rNr=o(" (CamemBERT model)"),tNr=l(),o0=a("li"),kAe=a("strong"),aNr=o("ctrl"),nNr=o(" \u2014 "),voe=a("a"),sNr=o("TFCTRLLMHeadModel"),lNr=o(" (CTRL model)"),iNr=l(),r0=a("li"),SAe=a("strong"),dNr=o("gpt2"),cNr=o(" \u2014 "),Foe=a("a"),mNr=o("TFGPT2LMHeadModel"),fNr=o(" (OpenAI GPT-2 model)"),gNr=l(),t0=a("li"),RAe=a("strong"),hNr=o("gptj"),uNr=o(" \u2014 "),Toe=a("a"),pNr=o("TFGPTJForCausalLM"),_Nr=o(" (GPT-J model)"),bNr=l(),a0=a("li"),PAe=a("strong"),vNr=o("openai-gpt"),FNr=o(" \u2014 "),Moe=a("a"),TNr=o("TFOpenAIGPTLMHeadModel"),MNr=o(" (OpenAI GPT model)"),ENr=l(),n0=a("li"),BAe=a("strong"),CNr=o("opt"),wNr=o(" \u2014 "),Eoe=a("a"),ANr=o("TFOPTForCausalLM"),LNr=o(" (OPT model)"),yNr=l(),s0=a("li"),IAe=a("strong"),xNr=o("rembert"),$Nr=o(" \u2014 "),Coe=a("a"),kNr=o("TFRemBertForCausalLM"),SNr=o(" (RemBERT model)"),RNr=l(),l0=a("li"),NAe=a("strong"),PNr=o("roberta"),BNr=o(" \u2014 "),woe=a("a"),INr=o("TFRobertaForCausalLM"),NNr=o(" (RoBERTa model)"),qNr=l(),i0=a("li"),qAe=a("strong"),jNr=o("roformer"),DNr=o(" \u2014 "),Aoe=a("a"),GNr=o("TFRoFormerForCausalLM"),ONr=o(" (RoFormer model)"),VNr=l(),d0=a("li"),jAe=a("strong"),XNr=o("transfo-xl"),zNr=o(" \u2014 "),Loe=a("a"),QNr=o("TFTransfoXLLMHeadModel"),WNr=o(" (Transformer-XL model)"),UNr=l(),c0=a("li"),DAe=a("strong"),HNr=o("xglm"),JNr=o(" \u2014 "),yoe=a("a"),YNr=o("TFXGLMForCausalLM"),KNr=o(" (XGLM model)"),ZNr=l(),m0=a("li"),GAe=a("strong"),eqr=o("xlm"),oqr=o(" \u2014 "),xoe=a("a"),rqr=o("TFXLMWithLMHeadModel"),tqr=o(" (XLM model)"),aqr=l(),f0=a("li"),OAe=a("strong"),nqr=o("xlnet"),sqr=o(" \u2014 "),$oe=a("a"),lqr=o("TFXLNetLMHeadModel"),iqr=o(" (XLNet model)"),dqr=l(),F(g0.$$.fragment),deo=l(),Yc=a("h2"),h0=a("a"),VAe=a("span"),F(Kk.$$.fragment),cqr=l(),XAe=a("span"),mqr=o("TFAutoModelForImageClassification"),ceo=l(),dr=a("div"),F(Zk.$$.fragment),fqr=l(),Kc=a("p"),gqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),koe=a("a"),hqr=o("from_pretrained()"),uqr=o(" class method or the "),Soe=a("a"),pqr=o("from_config()"),_qr=o(` class
method.`),bqr=l(),eS=a("p"),vqr=o("This class cannot be instantiated directly using "),zAe=a("code"),Fqr=o("__init__()"),Tqr=o(" (throws an error)."),Mqr=l(),Wt=a("div"),F(oS.$$.fragment),Eqr=l(),QAe=a("p"),Cqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wqr=l(),Zc=a("p"),Aqr=o(`Note:
Loading a model from its configuration file does `),WAe=a("strong"),Lqr=o("not"),yqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),xqr=o("from_pretrained()"),$qr=o(" to load the model weights."),kqr=l(),F(u0.$$.fragment),Sqr=l(),jr=a("div"),F(rS.$$.fragment),Rqr=l(),UAe=a("p"),Pqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bqr=l(),yn=a("p"),Iqr=o("The model class to instantiate is selected based on the "),HAe=a("code"),Nqr=o("model_type"),qqr=o(` property of the config object (either
passed as an argument or loaded from `),JAe=a("code"),jqr=o("pretrained_model_name_or_path"),Dqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YAe=a("code"),Gqr=o("pretrained_model_name_or_path"),Oqr=o(":"),Vqr=l(),Be=a("ul"),p0=a("li"),KAe=a("strong"),Xqr=o("convnext"),zqr=o(" \u2014 "),Poe=a("a"),Qqr=o("TFConvNextForImageClassification"),Wqr=o(" (ConvNeXT model)"),Uqr=l(),_0=a("li"),ZAe=a("strong"),Hqr=o("data2vec-vision"),Jqr=o(" \u2014 "),Boe=a("a"),Yqr=o("TFData2VecVisionForImageClassification"),Kqr=o(" (Data2VecVision model)"),Zqr=l(),Tl=a("li"),e6e=a("strong"),ejr=o("deit"),ojr=o(" \u2014 "),Ioe=a("a"),rjr=o("TFDeiTForImageClassification"),tjr=o(" or "),Noe=a("a"),ajr=o("TFDeiTForImageClassificationWithTeacher"),njr=o(" (DeiT model)"),sjr=l(),b0=a("li"),o6e=a("strong"),ljr=o("mobilevit"),ijr=o(" \u2014 "),qoe=a("a"),djr=o("TFMobileViTForImageClassification"),cjr=o(" (MobileViT model)"),mjr=l(),v0=a("li"),r6e=a("strong"),fjr=o("regnet"),gjr=o(" \u2014 "),joe=a("a"),hjr=o("TFRegNetForImageClassification"),ujr=o(" (RegNet model)"),pjr=l(),F0=a("li"),t6e=a("strong"),_jr=o("resnet"),bjr=o(" \u2014 "),Doe=a("a"),vjr=o("TFResNetForImageClassification"),Fjr=o(" (ResNet model)"),Tjr=l(),T0=a("li"),a6e=a("strong"),Mjr=o("segformer"),Ejr=o(" \u2014 "),Goe=a("a"),Cjr=o("TFSegformerForImageClassification"),wjr=o(" (SegFormer model)"),Ajr=l(),M0=a("li"),n6e=a("strong"),Ljr=o("swin"),yjr=o(" \u2014 "),Ooe=a("a"),xjr=o("TFSwinForImageClassification"),$jr=o(" (Swin Transformer model)"),kjr=l(),E0=a("li"),s6e=a("strong"),Sjr=o("vit"),Rjr=o(" \u2014 "),Voe=a("a"),Pjr=o("TFViTForImageClassification"),Bjr=o(" (ViT model)"),Ijr=l(),F(C0.$$.fragment),meo=l(),em=a("h2"),w0=a("a"),l6e=a("span"),F(tS.$$.fragment),Njr=l(),i6e=a("span"),qjr=o("TFAutoModelForSemanticSegmentation"),feo=l(),cr=a("div"),F(aS.$$.fragment),jjr=l(),om=a("p"),Djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Xoe=a("a"),Gjr=o("from_pretrained()"),Ojr=o(" class method or the "),zoe=a("a"),Vjr=o("from_config()"),Xjr=o(` class
method.`),zjr=l(),nS=a("p"),Qjr=o("This class cannot be instantiated directly using "),d6e=a("code"),Wjr=o("__init__()"),Ujr=o(" (throws an error)."),Hjr=l(),Ut=a("div"),F(sS.$$.fragment),Jjr=l(),c6e=a("p"),Yjr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Kjr=l(),rm=a("p"),Zjr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),eDr=o("not"),oDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=a("a"),rDr=o("from_pretrained()"),tDr=o(" to load the model weights."),aDr=l(),F(A0.$$.fragment),nDr=l(),Dr=a("div"),F(lS.$$.fragment),sDr=l(),f6e=a("p"),lDr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),iDr=l(),xn=a("p"),dDr=o("The model class to instantiate is selected based on the "),g6e=a("code"),cDr=o("model_type"),mDr=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),fDr=o("pretrained_model_name_or_path"),gDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),hDr=o("pretrained_model_name_or_path"),uDr=o(":"),pDr=l(),tm=a("ul"),L0=a("li"),p6e=a("strong"),_Dr=o("data2vec-vision"),bDr=o(" \u2014 "),Woe=a("a"),vDr=o("TFData2VecVisionForSemanticSegmentation"),FDr=o(" (Data2VecVision model)"),TDr=l(),y0=a("li"),_6e=a("strong"),MDr=o("mobilevit"),EDr=o(" \u2014 "),Uoe=a("a"),CDr=o("TFMobileViTForSemanticSegmentation"),wDr=o(" (MobileViT model)"),ADr=l(),x0=a("li"),b6e=a("strong"),LDr=o("segformer"),yDr=o(" \u2014 "),Hoe=a("a"),xDr=o("TFSegformerForSemanticSegmentation"),$Dr=o(" (SegFormer model)"),kDr=l(),F($0.$$.fragment),geo=l(),am=a("h2"),k0=a("a"),v6e=a("span"),F(iS.$$.fragment),SDr=l(),F6e=a("span"),RDr=o("TFAutoModelForMaskedLM"),heo=l(),mr=a("div"),F(dS.$$.fragment),PDr=l(),nm=a("p"),BDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Joe=a("a"),IDr=o("from_pretrained()"),NDr=o(" class method or the "),Yoe=a("a"),qDr=o("from_config()"),jDr=o(` class
method.`),DDr=l(),cS=a("p"),GDr=o("This class cannot be instantiated directly using "),T6e=a("code"),ODr=o("__init__()"),VDr=o(" (throws an error)."),XDr=l(),Ht=a("div"),F(mS.$$.fragment),zDr=l(),M6e=a("p"),QDr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WDr=l(),sm=a("p"),UDr=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),HDr=o("not"),JDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=a("a"),YDr=o("from_pretrained()"),KDr=o(" to load the model weights."),ZDr=l(),F(S0.$$.fragment),eGr=l(),Gr=a("div"),F(fS.$$.fragment),oGr=l(),C6e=a("p"),rGr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tGr=l(),$n=a("p"),aGr=o("The model class to instantiate is selected based on the "),w6e=a("code"),nGr=o("model_type"),sGr=o(` property of the config object (either
passed as an argument or loaded from `),A6e=a("code"),lGr=o("pretrained_model_name_or_path"),iGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),dGr=o("pretrained_model_name_or_path"),cGr=o(":"),mGr=l(),fe=a("ul"),R0=a("li"),y6e=a("strong"),fGr=o("albert"),gGr=o(" \u2014 "),Zoe=a("a"),hGr=o("TFAlbertForMaskedLM"),uGr=o(" (ALBERT model)"),pGr=l(),P0=a("li"),x6e=a("strong"),_Gr=o("bert"),bGr=o(" \u2014 "),ere=a("a"),vGr=o("TFBertForMaskedLM"),FGr=o(" (BERT model)"),TGr=l(),B0=a("li"),$6e=a("strong"),MGr=o("camembert"),EGr=o(" \u2014 "),ore=a("a"),CGr=o("TFCamembertForMaskedLM"),wGr=o(" (CamemBERT model)"),AGr=l(),I0=a("li"),k6e=a("strong"),LGr=o("convbert"),yGr=o(" \u2014 "),rre=a("a"),xGr=o("TFConvBertForMaskedLM"),$Gr=o(" (ConvBERT model)"),kGr=l(),N0=a("li"),S6e=a("strong"),SGr=o("deberta"),RGr=o(" \u2014 "),tre=a("a"),PGr=o("TFDebertaForMaskedLM"),BGr=o(" (DeBERTa model)"),IGr=l(),q0=a("li"),R6e=a("strong"),NGr=o("deberta-v2"),qGr=o(" \u2014 "),are=a("a"),jGr=o("TFDebertaV2ForMaskedLM"),DGr=o(" (DeBERTa-v2 model)"),GGr=l(),j0=a("li"),P6e=a("strong"),OGr=o("distilbert"),VGr=o(" \u2014 "),nre=a("a"),XGr=o("TFDistilBertForMaskedLM"),zGr=o(" (DistilBERT model)"),QGr=l(),D0=a("li"),B6e=a("strong"),WGr=o("electra"),UGr=o(" \u2014 "),sre=a("a"),HGr=o("TFElectraForMaskedLM"),JGr=o(" (ELECTRA model)"),YGr=l(),G0=a("li"),I6e=a("strong"),KGr=o("flaubert"),ZGr=o(" \u2014 "),lre=a("a"),eOr=o("TFFlaubertWithLMHeadModel"),oOr=o(" (FlauBERT model)"),rOr=l(),O0=a("li"),N6e=a("strong"),tOr=o("funnel"),aOr=o(" \u2014 "),ire=a("a"),nOr=o("TFFunnelForMaskedLM"),sOr=o(" (Funnel Transformer model)"),lOr=l(),V0=a("li"),q6e=a("strong"),iOr=o("layoutlm"),dOr=o(" \u2014 "),dre=a("a"),cOr=o("TFLayoutLMForMaskedLM"),mOr=o(" (LayoutLM model)"),fOr=l(),X0=a("li"),j6e=a("strong"),gOr=o("longformer"),hOr=o(" \u2014 "),cre=a("a"),uOr=o("TFLongformerForMaskedLM"),pOr=o(" (Longformer model)"),_Or=l(),z0=a("li"),D6e=a("strong"),bOr=o("mobilebert"),vOr=o(" \u2014 "),mre=a("a"),FOr=o("TFMobileBertForMaskedLM"),TOr=o(" (MobileBERT model)"),MOr=l(),Q0=a("li"),G6e=a("strong"),EOr=o("mpnet"),COr=o(" \u2014 "),fre=a("a"),wOr=o("TFMPNetForMaskedLM"),AOr=o(" (MPNet model)"),LOr=l(),W0=a("li"),O6e=a("strong"),yOr=o("rembert"),xOr=o(" \u2014 "),gre=a("a"),$Or=o("TFRemBertForMaskedLM"),kOr=o(" (RemBERT model)"),SOr=l(),U0=a("li"),V6e=a("strong"),ROr=o("roberta"),POr=o(" \u2014 "),hre=a("a"),BOr=o("TFRobertaForMaskedLM"),IOr=o(" (RoBERTa model)"),NOr=l(),H0=a("li"),X6e=a("strong"),qOr=o("roformer"),jOr=o(" \u2014 "),ure=a("a"),DOr=o("TFRoFormerForMaskedLM"),GOr=o(" (RoFormer model)"),OOr=l(),J0=a("li"),z6e=a("strong"),VOr=o("tapas"),XOr=o(" \u2014 "),pre=a("a"),zOr=o("TFTapasForMaskedLM"),QOr=o(" (TAPAS model)"),WOr=l(),Y0=a("li"),Q6e=a("strong"),UOr=o("xlm"),HOr=o(" \u2014 "),_re=a("a"),JOr=o("TFXLMWithLMHeadModel"),YOr=o(" (XLM model)"),KOr=l(),K0=a("li"),W6e=a("strong"),ZOr=o("xlm-roberta"),eVr=o(" \u2014 "),bre=a("a"),oVr=o("TFXLMRobertaForMaskedLM"),rVr=o(" (XLM-RoBERTa model)"),tVr=l(),F(Z0.$$.fragment),ueo=l(),lm=a("h2"),ew=a("a"),U6e=a("span"),F(gS.$$.fragment),aVr=l(),H6e=a("span"),nVr=o("TFAutoModelForSeq2SeqLM"),peo=l(),fr=a("div"),F(hS.$$.fragment),sVr=l(),im=a("p"),lVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vre=a("a"),iVr=o("from_pretrained()"),dVr=o(" class method or the "),Fre=a("a"),cVr=o("from_config()"),mVr=o(` class
method.`),fVr=l(),uS=a("p"),gVr=o("This class cannot be instantiated directly using "),J6e=a("code"),hVr=o("__init__()"),uVr=o(" (throws an error)."),pVr=l(),Jt=a("div"),F(pS.$$.fragment),_Vr=l(),Y6e=a("p"),bVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vVr=l(),dm=a("p"),FVr=o(`Note:
Loading a model from its configuration file does `),K6e=a("strong"),TVr=o("not"),MVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("a"),EVr=o("from_pretrained()"),CVr=o(" to load the model weights."),wVr=l(),F(ow.$$.fragment),AVr=l(),Or=a("div"),F(_S.$$.fragment),LVr=l(),Z6e=a("p"),yVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xVr=l(),kn=a("p"),$Vr=o("The model class to instantiate is selected based on the "),e7e=a("code"),kVr=o("model_type"),SVr=o(` property of the config object (either
passed as an argument or loaded from `),o7e=a("code"),RVr=o("pretrained_model_name_or_path"),PVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=a("code"),BVr=o("pretrained_model_name_or_path"),IVr=o(":"),NVr=l(),ye=a("ul"),rw=a("li"),t7e=a("strong"),qVr=o("bart"),jVr=o(" \u2014 "),Mre=a("a"),DVr=o("TFBartForConditionalGeneration"),GVr=o(" (BART model)"),OVr=l(),tw=a("li"),a7e=a("strong"),VVr=o("blenderbot"),XVr=o(" \u2014 "),Ere=a("a"),zVr=o("TFBlenderbotForConditionalGeneration"),QVr=o(" (Blenderbot model)"),WVr=l(),aw=a("li"),n7e=a("strong"),UVr=o("blenderbot-small"),HVr=o(" \u2014 "),Cre=a("a"),JVr=o("TFBlenderbotSmallForConditionalGeneration"),YVr=o(" (BlenderbotSmall model)"),KVr=l(),nw=a("li"),s7e=a("strong"),ZVr=o("encoder-decoder"),eXr=o(" \u2014 "),wre=a("a"),oXr=o("TFEncoderDecoderModel"),rXr=o(" (Encoder decoder model)"),tXr=l(),sw=a("li"),l7e=a("strong"),aXr=o("led"),nXr=o(" \u2014 "),Are=a("a"),sXr=o("TFLEDForConditionalGeneration"),lXr=o(" (LED model)"),iXr=l(),lw=a("li"),i7e=a("strong"),dXr=o("marian"),cXr=o(" \u2014 "),Lre=a("a"),mXr=o("TFMarianMTModel"),fXr=o(" (Marian model)"),gXr=l(),iw=a("li"),d7e=a("strong"),hXr=o("mbart"),uXr=o(" \u2014 "),yre=a("a"),pXr=o("TFMBartForConditionalGeneration"),_Xr=o(" (mBART model)"),bXr=l(),dw=a("li"),c7e=a("strong"),vXr=o("mt5"),FXr=o(" \u2014 "),xre=a("a"),TXr=o("TFMT5ForConditionalGeneration"),MXr=o(" (MT5 model)"),EXr=l(),cw=a("li"),m7e=a("strong"),CXr=o("pegasus"),wXr=o(" \u2014 "),$re=a("a"),AXr=o("TFPegasusForConditionalGeneration"),LXr=o(" (Pegasus model)"),yXr=l(),mw=a("li"),f7e=a("strong"),xXr=o("t5"),$Xr=o(" \u2014 "),kre=a("a"),kXr=o("TFT5ForConditionalGeneration"),SXr=o(" (T5 model)"),RXr=l(),F(fw.$$.fragment),_eo=l(),cm=a("h2"),gw=a("a"),g7e=a("span"),F(bS.$$.fragment),PXr=l(),h7e=a("span"),BXr=o("TFAutoModelForSequenceClassification"),beo=l(),gr=a("div"),F(vS.$$.fragment),IXr=l(),mm=a("p"),NXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Sre=a("a"),qXr=o("from_pretrained()"),jXr=o(" class method or the "),Rre=a("a"),DXr=o("from_config()"),GXr=o(` class
method.`),OXr=l(),FS=a("p"),VXr=o("This class cannot be instantiated directly using "),u7e=a("code"),XXr=o("__init__()"),zXr=o(" (throws an error)."),QXr=l(),Yt=a("div"),F(TS.$$.fragment),WXr=l(),p7e=a("p"),UXr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HXr=l(),fm=a("p"),JXr=o(`Note:
Loading a model from its configuration file does `),_7e=a("strong"),YXr=o("not"),KXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=a("a"),ZXr=o("from_pretrained()"),ezr=o(" to load the model weights."),ozr=l(),F(hw.$$.fragment),rzr=l(),Vr=a("div"),F(MS.$$.fragment),tzr=l(),b7e=a("p"),azr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nzr=l(),Sn=a("p"),szr=o("The model class to instantiate is selected based on the "),v7e=a("code"),lzr=o("model_type"),izr=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),dzr=o("pretrained_model_name_or_path"),czr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=a("code"),mzr=o("pretrained_model_name_or_path"),fzr=o(":"),gzr=l(),re=a("ul"),uw=a("li"),M7e=a("strong"),hzr=o("albert"),uzr=o(" \u2014 "),Bre=a("a"),pzr=o("TFAlbertForSequenceClassification"),_zr=o(" (ALBERT model)"),bzr=l(),pw=a("li"),E7e=a("strong"),vzr=o("bert"),Fzr=o(" \u2014 "),Ire=a("a"),Tzr=o("TFBertForSequenceClassification"),Mzr=o(" (BERT model)"),Ezr=l(),_w=a("li"),C7e=a("strong"),Czr=o("camembert"),wzr=o(" \u2014 "),Nre=a("a"),Azr=o("TFCamembertForSequenceClassification"),Lzr=o(" (CamemBERT model)"),yzr=l(),bw=a("li"),w7e=a("strong"),xzr=o("convbert"),$zr=o(" \u2014 "),qre=a("a"),kzr=o("TFConvBertForSequenceClassification"),Szr=o(" (ConvBERT model)"),Rzr=l(),vw=a("li"),A7e=a("strong"),Pzr=o("ctrl"),Bzr=o(" \u2014 "),jre=a("a"),Izr=o("TFCTRLForSequenceClassification"),Nzr=o(" (CTRL model)"),qzr=l(),Fw=a("li"),L7e=a("strong"),jzr=o("deberta"),Dzr=o(" \u2014 "),Dre=a("a"),Gzr=o("TFDebertaForSequenceClassification"),Ozr=o(" (DeBERTa model)"),Vzr=l(),Tw=a("li"),y7e=a("strong"),Xzr=o("deberta-v2"),zzr=o(" \u2014 "),Gre=a("a"),Qzr=o("TFDebertaV2ForSequenceClassification"),Wzr=o(" (DeBERTa-v2 model)"),Uzr=l(),Mw=a("li"),x7e=a("strong"),Hzr=o("distilbert"),Jzr=o(" \u2014 "),Ore=a("a"),Yzr=o("TFDistilBertForSequenceClassification"),Kzr=o(" (DistilBERT model)"),Zzr=l(),Ew=a("li"),$7e=a("strong"),eQr=o("electra"),oQr=o(" \u2014 "),Vre=a("a"),rQr=o("TFElectraForSequenceClassification"),tQr=o(" (ELECTRA model)"),aQr=l(),Cw=a("li"),k7e=a("strong"),nQr=o("flaubert"),sQr=o(" \u2014 "),Xre=a("a"),lQr=o("TFFlaubertForSequenceClassification"),iQr=o(" (FlauBERT model)"),dQr=l(),ww=a("li"),S7e=a("strong"),cQr=o("funnel"),mQr=o(" \u2014 "),zre=a("a"),fQr=o("TFFunnelForSequenceClassification"),gQr=o(" (Funnel Transformer model)"),hQr=l(),Aw=a("li"),R7e=a("strong"),uQr=o("gpt2"),pQr=o(" \u2014 "),Qre=a("a"),_Qr=o("TFGPT2ForSequenceClassification"),bQr=o(" (OpenAI GPT-2 model)"),vQr=l(),Lw=a("li"),P7e=a("strong"),FQr=o("gptj"),TQr=o(" \u2014 "),Wre=a("a"),MQr=o("TFGPTJForSequenceClassification"),EQr=o(" (GPT-J model)"),CQr=l(),yw=a("li"),B7e=a("strong"),wQr=o("layoutlm"),AQr=o(" \u2014 "),Ure=a("a"),LQr=o("TFLayoutLMForSequenceClassification"),yQr=o(" (LayoutLM model)"),xQr=l(),xw=a("li"),I7e=a("strong"),$Qr=o("layoutlmv3"),kQr=o(" \u2014 "),Hre=a("a"),SQr=o("TFLayoutLMv3ForSequenceClassification"),RQr=o(" (LayoutLMv3 model)"),PQr=l(),$w=a("li"),N7e=a("strong"),BQr=o("longformer"),IQr=o(" \u2014 "),Jre=a("a"),NQr=o("TFLongformerForSequenceClassification"),qQr=o(" (Longformer model)"),jQr=l(),kw=a("li"),q7e=a("strong"),DQr=o("mobilebert"),GQr=o(" \u2014 "),Yre=a("a"),OQr=o("TFMobileBertForSequenceClassification"),VQr=o(" (MobileBERT model)"),XQr=l(),Sw=a("li"),j7e=a("strong"),zQr=o("mpnet"),QQr=o(" \u2014 "),Kre=a("a"),WQr=o("TFMPNetForSequenceClassification"),UQr=o(" (MPNet model)"),HQr=l(),Rw=a("li"),D7e=a("strong"),JQr=o("openai-gpt"),YQr=o(" \u2014 "),Zre=a("a"),KQr=o("TFOpenAIGPTForSequenceClassification"),ZQr=o(" (OpenAI GPT model)"),eWr=l(),Pw=a("li"),G7e=a("strong"),oWr=o("rembert"),rWr=o(" \u2014 "),ete=a("a"),tWr=o("TFRemBertForSequenceClassification"),aWr=o(" (RemBERT model)"),nWr=l(),Bw=a("li"),O7e=a("strong"),sWr=o("roberta"),lWr=o(" \u2014 "),ote=a("a"),iWr=o("TFRobertaForSequenceClassification"),dWr=o(" (RoBERTa model)"),cWr=l(),Iw=a("li"),V7e=a("strong"),mWr=o("roformer"),fWr=o(" \u2014 "),rte=a("a"),gWr=o("TFRoFormerForSequenceClassification"),hWr=o(" (RoFormer model)"),uWr=l(),Nw=a("li"),X7e=a("strong"),pWr=o("tapas"),_Wr=o(" \u2014 "),tte=a("a"),bWr=o("TFTapasForSequenceClassification"),vWr=o(" (TAPAS model)"),FWr=l(),qw=a("li"),z7e=a("strong"),TWr=o("transfo-xl"),MWr=o(" \u2014 "),ate=a("a"),EWr=o("TFTransfoXLForSequenceClassification"),CWr=o(" (Transformer-XL model)"),wWr=l(),jw=a("li"),Q7e=a("strong"),AWr=o("xlm"),LWr=o(" \u2014 "),nte=a("a"),yWr=o("TFXLMForSequenceClassification"),xWr=o(" (XLM model)"),$Wr=l(),Dw=a("li"),W7e=a("strong"),kWr=o("xlm-roberta"),SWr=o(" \u2014 "),ste=a("a"),RWr=o("TFXLMRobertaForSequenceClassification"),PWr=o(" (XLM-RoBERTa model)"),BWr=l(),Gw=a("li"),U7e=a("strong"),IWr=o("xlnet"),NWr=o(" \u2014 "),lte=a("a"),qWr=o("TFXLNetForSequenceClassification"),jWr=o(" (XLNet model)"),DWr=l(),F(Ow.$$.fragment),veo=l(),gm=a("h2"),Vw=a("a"),H7e=a("span"),F(ES.$$.fragment),GWr=l(),J7e=a("span"),OWr=o("TFAutoModelForMultipleChoice"),Feo=l(),hr=a("div"),F(CS.$$.fragment),VWr=l(),hm=a("p"),XWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ite=a("a"),zWr=o("from_pretrained()"),QWr=o(" class method or the "),dte=a("a"),WWr=o("from_config()"),UWr=o(` class
method.`),HWr=l(),wS=a("p"),JWr=o("This class cannot be instantiated directly using "),Y7e=a("code"),YWr=o("__init__()"),KWr=o(" (throws an error)."),ZWr=l(),Kt=a("div"),F(AS.$$.fragment),eUr=l(),K7e=a("p"),oUr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rUr=l(),um=a("p"),tUr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),aUr=o("not"),nUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cte=a("a"),sUr=o("from_pretrained()"),lUr=o(" to load the model weights."),iUr=l(),F(Xw.$$.fragment),dUr=l(),Xr=a("div"),F(LS.$$.fragment),cUr=l(),eLe=a("p"),mUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fUr=l(),Rn=a("p"),gUr=o("The model class to instantiate is selected based on the "),oLe=a("code"),hUr=o("model_type"),uUr=o(` property of the config object (either
passed as an argument or loaded from `),rLe=a("code"),pUr=o("pretrained_model_name_or_path"),_Ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tLe=a("code"),bUr=o("pretrained_model_name_or_path"),vUr=o(":"),FUr=l(),ve=a("ul"),zw=a("li"),aLe=a("strong"),TUr=o("albert"),MUr=o(" \u2014 "),mte=a("a"),EUr=o("TFAlbertForMultipleChoice"),CUr=o(" (ALBERT model)"),wUr=l(),Qw=a("li"),nLe=a("strong"),AUr=o("bert"),LUr=o(" \u2014 "),fte=a("a"),yUr=o("TFBertForMultipleChoice"),xUr=o(" (BERT model)"),$Ur=l(),Ww=a("li"),sLe=a("strong"),kUr=o("camembert"),SUr=o(" \u2014 "),gte=a("a"),RUr=o("TFCamembertForMultipleChoice"),PUr=o(" (CamemBERT model)"),BUr=l(),Uw=a("li"),lLe=a("strong"),IUr=o("convbert"),NUr=o(" \u2014 "),hte=a("a"),qUr=o("TFConvBertForMultipleChoice"),jUr=o(" (ConvBERT model)"),DUr=l(),Hw=a("li"),iLe=a("strong"),GUr=o("distilbert"),OUr=o(" \u2014 "),ute=a("a"),VUr=o("TFDistilBertForMultipleChoice"),XUr=o(" (DistilBERT model)"),zUr=l(),Jw=a("li"),dLe=a("strong"),QUr=o("electra"),WUr=o(" \u2014 "),pte=a("a"),UUr=o("TFElectraForMultipleChoice"),HUr=o(" (ELECTRA model)"),JUr=l(),Yw=a("li"),cLe=a("strong"),YUr=o("flaubert"),KUr=o(" \u2014 "),_te=a("a"),ZUr=o("TFFlaubertForMultipleChoice"),eHr=o(" (FlauBERT model)"),oHr=l(),Kw=a("li"),mLe=a("strong"),rHr=o("funnel"),tHr=o(" \u2014 "),bte=a("a"),aHr=o("TFFunnelForMultipleChoice"),nHr=o(" (Funnel Transformer model)"),sHr=l(),Zw=a("li"),fLe=a("strong"),lHr=o("longformer"),iHr=o(" \u2014 "),vte=a("a"),dHr=o("TFLongformerForMultipleChoice"),cHr=o(" (Longformer model)"),mHr=l(),eA=a("li"),gLe=a("strong"),fHr=o("mobilebert"),gHr=o(" \u2014 "),Fte=a("a"),hHr=o("TFMobileBertForMultipleChoice"),uHr=o(" (MobileBERT model)"),pHr=l(),oA=a("li"),hLe=a("strong"),_Hr=o("mpnet"),bHr=o(" \u2014 "),Tte=a("a"),vHr=o("TFMPNetForMultipleChoice"),FHr=o(" (MPNet model)"),THr=l(),rA=a("li"),uLe=a("strong"),MHr=o("rembert"),EHr=o(" \u2014 "),Mte=a("a"),CHr=o("TFRemBertForMultipleChoice"),wHr=o(" (RemBERT model)"),AHr=l(),tA=a("li"),pLe=a("strong"),LHr=o("roberta"),yHr=o(" \u2014 "),Ete=a("a"),xHr=o("TFRobertaForMultipleChoice"),$Hr=o(" (RoBERTa model)"),kHr=l(),aA=a("li"),_Le=a("strong"),SHr=o("roformer"),RHr=o(" \u2014 "),Cte=a("a"),PHr=o("TFRoFormerForMultipleChoice"),BHr=o(" (RoFormer model)"),IHr=l(),nA=a("li"),bLe=a("strong"),NHr=o("xlm"),qHr=o(" \u2014 "),wte=a("a"),jHr=o("TFXLMForMultipleChoice"),DHr=o(" (XLM model)"),GHr=l(),sA=a("li"),vLe=a("strong"),OHr=o("xlm-roberta"),VHr=o(" \u2014 "),Ate=a("a"),XHr=o("TFXLMRobertaForMultipleChoice"),zHr=o(" (XLM-RoBERTa model)"),QHr=l(),lA=a("li"),FLe=a("strong"),WHr=o("xlnet"),UHr=o(" \u2014 "),Lte=a("a"),HHr=o("TFXLNetForMultipleChoice"),JHr=o(" (XLNet model)"),YHr=l(),F(iA.$$.fragment),Teo=l(),pm=a("h2"),dA=a("a"),TLe=a("span"),F(yS.$$.fragment),KHr=l(),MLe=a("span"),ZHr=o("TFAutoModelForNextSentencePrediction"),Meo=l(),ur=a("div"),F(xS.$$.fragment),eJr=l(),_m=a("p"),oJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yte=a("a"),rJr=o("from_pretrained()"),tJr=o(" class method or the "),xte=a("a"),aJr=o("from_config()"),nJr=o(` class
method.`),sJr=l(),$S=a("p"),lJr=o("This class cannot be instantiated directly using "),ELe=a("code"),iJr=o("__init__()"),dJr=o(" (throws an error)."),cJr=l(),Zt=a("div"),F(kS.$$.fragment),mJr=l(),CLe=a("p"),fJr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gJr=l(),bm=a("p"),hJr=o(`Note:
Loading a model from its configuration file does `),wLe=a("strong"),uJr=o("not"),pJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=a("a"),_Jr=o("from_pretrained()"),bJr=o(" to load the model weights."),vJr=l(),F(cA.$$.fragment),FJr=l(),zr=a("div"),F(SS.$$.fragment),TJr=l(),ALe=a("p"),MJr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EJr=l(),Pn=a("p"),CJr=o("The model class to instantiate is selected based on the "),LLe=a("code"),wJr=o("model_type"),AJr=o(` property of the config object (either
passed as an argument or loaded from `),yLe=a("code"),LJr=o("pretrained_model_name_or_path"),yJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xLe=a("code"),xJr=o("pretrained_model_name_or_path"),$Jr=o(":"),kJr=l(),RS=a("ul"),mA=a("li"),$Le=a("strong"),SJr=o("bert"),RJr=o(" \u2014 "),kte=a("a"),PJr=o("TFBertForNextSentencePrediction"),BJr=o(" (BERT model)"),IJr=l(),fA=a("li"),kLe=a("strong"),NJr=o("mobilebert"),qJr=o(" \u2014 "),Ste=a("a"),jJr=o("TFMobileBertForNextSentencePrediction"),DJr=o(" (MobileBERT model)"),GJr=l(),F(gA.$$.fragment),Eeo=l(),vm=a("h2"),hA=a("a"),SLe=a("span"),F(PS.$$.fragment),OJr=l(),RLe=a("span"),VJr=o("TFAutoModelForTableQuestionAnswering"),Ceo=l(),pr=a("div"),F(BS.$$.fragment),XJr=l(),Fm=a("p"),zJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rte=a("a"),QJr=o("from_pretrained()"),WJr=o(" class method or the "),Pte=a("a"),UJr=o("from_config()"),HJr=o(` class
method.`),JJr=l(),IS=a("p"),YJr=o("This class cannot be instantiated directly using "),PLe=a("code"),KJr=o("__init__()"),ZJr=o(" (throws an error)."),eYr=l(),ea=a("div"),F(NS.$$.fragment),oYr=l(),BLe=a("p"),rYr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tYr=l(),Tm=a("p"),aYr=o(`Note:
Loading a model from its configuration file does `),ILe=a("strong"),nYr=o("not"),sYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=a("a"),lYr=o("from_pretrained()"),iYr=o(" to load the model weights."),dYr=l(),F(uA.$$.fragment),cYr=l(),Qr=a("div"),F(qS.$$.fragment),mYr=l(),NLe=a("p"),fYr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gYr=l(),Bn=a("p"),hYr=o("The model class to instantiate is selected based on the "),qLe=a("code"),uYr=o("model_type"),pYr=o(` property of the config object (either
passed as an argument or loaded from `),jLe=a("code"),_Yr=o("pretrained_model_name_or_path"),bYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DLe=a("code"),vYr=o("pretrained_model_name_or_path"),FYr=o(":"),TYr=l(),GLe=a("ul"),pA=a("li"),OLe=a("strong"),MYr=o("tapas"),EYr=o(" \u2014 "),Ite=a("a"),CYr=o("TFTapasForQuestionAnswering"),wYr=o(" (TAPAS model)"),AYr=l(),F(_A.$$.fragment),weo=l(),Mm=a("h2"),bA=a("a"),VLe=a("span"),F(jS.$$.fragment),LYr=l(),XLe=a("span"),yYr=o("TFAutoModelForDocumentQuestionAnswering"),Aeo=l(),_r=a("div"),F(DS.$$.fragment),xYr=l(),Em=a("p"),$Yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Nte=a("a"),kYr=o("from_pretrained()"),SYr=o(" class method or the "),qte=a("a"),RYr=o("from_config()"),PYr=o(` class
method.`),BYr=l(),GS=a("p"),IYr=o("This class cannot be instantiated directly using "),zLe=a("code"),NYr=o("__init__()"),qYr=o(" (throws an error)."),jYr=l(),oa=a("div"),F(OS.$$.fragment),DYr=l(),QLe=a("p"),GYr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),OYr=l(),Cm=a("p"),VYr=o(`Note:
Loading a model from its configuration file does `),WLe=a("strong"),XYr=o("not"),zYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=a("a"),QYr=o("from_pretrained()"),WYr=o(" to load the model weights."),UYr=l(),F(vA.$$.fragment),HYr=l(),Wr=a("div"),F(VS.$$.fragment),JYr=l(),ULe=a("p"),YYr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),KYr=l(),In=a("p"),ZYr=o("The model class to instantiate is selected based on the "),HLe=a("code"),eKr=o("model_type"),oKr=o(` property of the config object (either
passed as an argument or loaded from `),JLe=a("code"),rKr=o("pretrained_model_name_or_path"),tKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YLe=a("code"),aKr=o("pretrained_model_name_or_path"),nKr=o(":"),sKr=l(),KLe=a("ul"),FA=a("li"),ZLe=a("strong"),lKr=o("layoutlm"),iKr=o(" \u2014 "),Dte=a("a"),dKr=o("TFLayoutLMForQuestionAnswering"),cKr=o(" (LayoutLM model)"),mKr=l(),F(TA.$$.fragment),Leo=l(),wm=a("h2"),MA=a("a"),eye=a("span"),F(XS.$$.fragment),fKr=l(),oye=a("span"),gKr=o("TFAutoModelForTokenClassification"),yeo=l(),br=a("div"),F(zS.$$.fragment),hKr=l(),Am=a("p"),uKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gte=a("a"),pKr=o("from_pretrained()"),_Kr=o(" class method or the "),Ote=a("a"),bKr=o("from_config()"),vKr=o(` class
method.`),FKr=l(),QS=a("p"),TKr=o("This class cannot be instantiated directly using "),rye=a("code"),MKr=o("__init__()"),EKr=o(" (throws an error)."),CKr=l(),ra=a("div"),F(WS.$$.fragment),wKr=l(),tye=a("p"),AKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LKr=l(),Lm=a("p"),yKr=o(`Note:
Loading a model from its configuration file does `),aye=a("strong"),xKr=o("not"),$Kr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vte=a("a"),kKr=o("from_pretrained()"),SKr=o(" to load the model weights."),RKr=l(),F(EA.$$.fragment),PKr=l(),Ur=a("div"),F(US.$$.fragment),BKr=l(),nye=a("p"),IKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NKr=l(),Nn=a("p"),qKr=o("The model class to instantiate is selected based on the "),sye=a("code"),jKr=o("model_type"),DKr=o(` property of the config object (either
passed as an argument or loaded from `),lye=a("code"),GKr=o("pretrained_model_name_or_path"),OKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iye=a("code"),VKr=o("pretrained_model_name_or_path"),XKr=o(":"),zKr=l(),de=a("ul"),CA=a("li"),dye=a("strong"),QKr=o("albert"),WKr=o(" \u2014 "),Xte=a("a"),UKr=o("TFAlbertForTokenClassification"),HKr=o(" (ALBERT model)"),JKr=l(),wA=a("li"),cye=a("strong"),YKr=o("bert"),KKr=o(" \u2014 "),zte=a("a"),ZKr=o("TFBertForTokenClassification"),eZr=o(" (BERT model)"),oZr=l(),AA=a("li"),mye=a("strong"),rZr=o("camembert"),tZr=o(" \u2014 "),Qte=a("a"),aZr=o("TFCamembertForTokenClassification"),nZr=o(" (CamemBERT model)"),sZr=l(),LA=a("li"),fye=a("strong"),lZr=o("convbert"),iZr=o(" \u2014 "),Wte=a("a"),dZr=o("TFConvBertForTokenClassification"),cZr=o(" (ConvBERT model)"),mZr=l(),yA=a("li"),gye=a("strong"),fZr=o("deberta"),gZr=o(" \u2014 "),Ute=a("a"),hZr=o("TFDebertaForTokenClassification"),uZr=o(" (DeBERTa model)"),pZr=l(),xA=a("li"),hye=a("strong"),_Zr=o("deberta-v2"),bZr=o(" \u2014 "),Hte=a("a"),vZr=o("TFDebertaV2ForTokenClassification"),FZr=o(" (DeBERTa-v2 model)"),TZr=l(),$A=a("li"),uye=a("strong"),MZr=o("distilbert"),EZr=o(" \u2014 "),Jte=a("a"),CZr=o("TFDistilBertForTokenClassification"),wZr=o(" (DistilBERT model)"),AZr=l(),kA=a("li"),pye=a("strong"),LZr=o("electra"),yZr=o(" \u2014 "),Yte=a("a"),xZr=o("TFElectraForTokenClassification"),$Zr=o(" (ELECTRA model)"),kZr=l(),SA=a("li"),_ye=a("strong"),SZr=o("flaubert"),RZr=o(" \u2014 "),Kte=a("a"),PZr=o("TFFlaubertForTokenClassification"),BZr=o(" (FlauBERT model)"),IZr=l(),RA=a("li"),bye=a("strong"),NZr=o("funnel"),qZr=o(" \u2014 "),Zte=a("a"),jZr=o("TFFunnelForTokenClassification"),DZr=o(" (Funnel Transformer model)"),GZr=l(),PA=a("li"),vye=a("strong"),OZr=o("layoutlm"),VZr=o(" \u2014 "),eae=a("a"),XZr=o("TFLayoutLMForTokenClassification"),zZr=o(" (LayoutLM model)"),QZr=l(),BA=a("li"),Fye=a("strong"),WZr=o("layoutlmv3"),UZr=o(" \u2014 "),oae=a("a"),HZr=o("TFLayoutLMv3ForTokenClassification"),JZr=o(" (LayoutLMv3 model)"),YZr=l(),IA=a("li"),Tye=a("strong"),KZr=o("longformer"),ZZr=o(" \u2014 "),rae=a("a"),eet=o("TFLongformerForTokenClassification"),oet=o(" (Longformer model)"),ret=l(),NA=a("li"),Mye=a("strong"),tet=o("mobilebert"),aet=o(" \u2014 "),tae=a("a"),net=o("TFMobileBertForTokenClassification"),set=o(" (MobileBERT model)"),iet=l(),qA=a("li"),Eye=a("strong"),det=o("mpnet"),cet=o(" \u2014 "),aae=a("a"),met=o("TFMPNetForTokenClassification"),fet=o(" (MPNet model)"),get=l(),jA=a("li"),Cye=a("strong"),het=o("rembert"),uet=o(" \u2014 "),nae=a("a"),pet=o("TFRemBertForTokenClassification"),_et=o(" (RemBERT model)"),bet=l(),DA=a("li"),wye=a("strong"),vet=o("roberta"),Fet=o(" \u2014 "),sae=a("a"),Tet=o("TFRobertaForTokenClassification"),Met=o(" (RoBERTa model)"),Eet=l(),GA=a("li"),Aye=a("strong"),Cet=o("roformer"),wet=o(" \u2014 "),lae=a("a"),Aet=o("TFRoFormerForTokenClassification"),Let=o(" (RoFormer model)"),yet=l(),OA=a("li"),Lye=a("strong"),xet=o("xlm"),$et=o(" \u2014 "),iae=a("a"),ket=o("TFXLMForTokenClassification"),Set=o(" (XLM model)"),Ret=l(),VA=a("li"),yye=a("strong"),Pet=o("xlm-roberta"),Bet=o(" \u2014 "),dae=a("a"),Iet=o("TFXLMRobertaForTokenClassification"),Net=o(" (XLM-RoBERTa model)"),qet=l(),XA=a("li"),xye=a("strong"),jet=o("xlnet"),Det=o(" \u2014 "),cae=a("a"),Get=o("TFXLNetForTokenClassification"),Oet=o(" (XLNet model)"),Vet=l(),F(zA.$$.fragment),xeo=l(),ym=a("h2"),QA=a("a"),$ye=a("span"),F(HS.$$.fragment),Xet=l(),kye=a("span"),zet=o("TFAutoModelForQuestionAnswering"),$eo=l(),vr=a("div"),F(JS.$$.fragment),Qet=l(),xm=a("p"),Wet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mae=a("a"),Uet=o("from_pretrained()"),Het=o(" class method or the "),fae=a("a"),Jet=o("from_config()"),Yet=o(` class
method.`),Ket=l(),YS=a("p"),Zet=o("This class cannot be instantiated directly using "),Sye=a("code"),eot=o("__init__()"),oot=o(" (throws an error)."),rot=l(),ta=a("div"),F(KS.$$.fragment),tot=l(),Rye=a("p"),aot=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),not=l(),$m=a("p"),sot=o(`Note:
Loading a model from its configuration file does `),Pye=a("strong"),lot=o("not"),iot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gae=a("a"),dot=o("from_pretrained()"),cot=o(" to load the model weights."),mot=l(),F(WA.$$.fragment),fot=l(),Hr=a("div"),F(ZS.$$.fragment),got=l(),Bye=a("p"),hot=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uot=l(),qn=a("p"),pot=o("The model class to instantiate is selected based on the "),Iye=a("code"),_ot=o("model_type"),bot=o(` property of the config object (either
passed as an argument or loaded from `),Nye=a("code"),vot=o("pretrained_model_name_or_path"),Fot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qye=a("code"),Tot=o("pretrained_model_name_or_path"),Mot=o(":"),Eot=l(),ce=a("ul"),UA=a("li"),jye=a("strong"),Cot=o("albert"),wot=o(" \u2014 "),hae=a("a"),Aot=o("TFAlbertForQuestionAnswering"),Lot=o(" (ALBERT model)"),yot=l(),HA=a("li"),Dye=a("strong"),xot=o("bert"),$ot=o(" \u2014 "),uae=a("a"),kot=o("TFBertForQuestionAnswering"),Sot=o(" (BERT model)"),Rot=l(),JA=a("li"),Gye=a("strong"),Pot=o("camembert"),Bot=o(" \u2014 "),pae=a("a"),Iot=o("TFCamembertForQuestionAnswering"),Not=o(" (CamemBERT model)"),qot=l(),YA=a("li"),Oye=a("strong"),jot=o("convbert"),Dot=o(" \u2014 "),_ae=a("a"),Got=o("TFConvBertForQuestionAnswering"),Oot=o(" (ConvBERT model)"),Vot=l(),KA=a("li"),Vye=a("strong"),Xot=o("deberta"),zot=o(" \u2014 "),bae=a("a"),Qot=o("TFDebertaForQuestionAnswering"),Wot=o(" (DeBERTa model)"),Uot=l(),ZA=a("li"),Xye=a("strong"),Hot=o("deberta-v2"),Jot=o(" \u2014 "),vae=a("a"),Yot=o("TFDebertaV2ForQuestionAnswering"),Kot=o(" (DeBERTa-v2 model)"),Zot=l(),e6=a("li"),zye=a("strong"),ert=o("distilbert"),ort=o(" \u2014 "),Fae=a("a"),rrt=o("TFDistilBertForQuestionAnswering"),trt=o(" (DistilBERT model)"),art=l(),o6=a("li"),Qye=a("strong"),nrt=o("electra"),srt=o(" \u2014 "),Tae=a("a"),lrt=o("TFElectraForQuestionAnswering"),irt=o(" (ELECTRA model)"),drt=l(),r6=a("li"),Wye=a("strong"),crt=o("flaubert"),mrt=o(" \u2014 "),Mae=a("a"),frt=o("TFFlaubertForQuestionAnsweringSimple"),grt=o(" (FlauBERT model)"),hrt=l(),t6=a("li"),Uye=a("strong"),urt=o("funnel"),prt=o(" \u2014 "),Eae=a("a"),_rt=o("TFFunnelForQuestionAnswering"),brt=o(" (Funnel Transformer model)"),vrt=l(),a6=a("li"),Hye=a("strong"),Frt=o("gptj"),Trt=o(" \u2014 "),Cae=a("a"),Mrt=o("TFGPTJForQuestionAnswering"),Ert=o(" (GPT-J model)"),Crt=l(),n6=a("li"),Jye=a("strong"),wrt=o("layoutlmv3"),Art=o(" \u2014 "),wae=a("a"),Lrt=o("TFLayoutLMv3ForQuestionAnswering"),yrt=o(" (LayoutLMv3 model)"),xrt=l(),s6=a("li"),Yye=a("strong"),$rt=o("longformer"),krt=o(" \u2014 "),Aae=a("a"),Srt=o("TFLongformerForQuestionAnswering"),Rrt=o(" (Longformer model)"),Prt=l(),l6=a("li"),Kye=a("strong"),Brt=o("mobilebert"),Irt=o(" \u2014 "),Lae=a("a"),Nrt=o("TFMobileBertForQuestionAnswering"),qrt=o(" (MobileBERT model)"),jrt=l(),i6=a("li"),Zye=a("strong"),Drt=o("mpnet"),Grt=o(" \u2014 "),yae=a("a"),Ort=o("TFMPNetForQuestionAnswering"),Vrt=o(" (MPNet model)"),Xrt=l(),d6=a("li"),e8e=a("strong"),zrt=o("rembert"),Qrt=o(" \u2014 "),xae=a("a"),Wrt=o("TFRemBertForQuestionAnswering"),Urt=o(" (RemBERT model)"),Hrt=l(),c6=a("li"),o8e=a("strong"),Jrt=o("roberta"),Yrt=o(" \u2014 "),$ae=a("a"),Krt=o("TFRobertaForQuestionAnswering"),Zrt=o(" (RoBERTa model)"),ett=l(),m6=a("li"),r8e=a("strong"),ott=o("roformer"),rtt=o(" \u2014 "),kae=a("a"),ttt=o("TFRoFormerForQuestionAnswering"),att=o(" (RoFormer model)"),ntt=l(),f6=a("li"),t8e=a("strong"),stt=o("xlm"),ltt=o(" \u2014 "),Sae=a("a"),itt=o("TFXLMForQuestionAnsweringSimple"),dtt=o(" (XLM model)"),ctt=l(),g6=a("li"),a8e=a("strong"),mtt=o("xlm-roberta"),ftt=o(" \u2014 "),Rae=a("a"),gtt=o("TFXLMRobertaForQuestionAnswering"),htt=o(" (XLM-RoBERTa model)"),utt=l(),h6=a("li"),n8e=a("strong"),ptt=o("xlnet"),_tt=o(" \u2014 "),Pae=a("a"),btt=o("TFXLNetForQuestionAnsweringSimple"),vtt=o(" (XLNet model)"),Ftt=l(),F(u6.$$.fragment),keo=l(),km=a("h2"),p6=a("a"),s8e=a("span"),F(eR.$$.fragment),Ttt=l(),l8e=a("span"),Mtt=o("TFAutoModelForVision2Seq"),Seo=l(),Fr=a("div"),F(oR.$$.fragment),Ett=l(),Sm=a("p"),Ctt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bae=a("a"),wtt=o("from_pretrained()"),Att=o(" class method or the "),Iae=a("a"),Ltt=o("from_config()"),ytt=o(` class
method.`),xtt=l(),rR=a("p"),$tt=o("This class cannot be instantiated directly using "),i8e=a("code"),ktt=o("__init__()"),Stt=o(" (throws an error)."),Rtt=l(),aa=a("div"),F(tR.$$.fragment),Ptt=l(),d8e=a("p"),Btt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Itt=l(),Rm=a("p"),Ntt=o(`Note:
Loading a model from its configuration file does `),c8e=a("strong"),qtt=o("not"),jtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=a("a"),Dtt=o("from_pretrained()"),Gtt=o(" to load the model weights."),Ott=l(),F(_6.$$.fragment),Vtt=l(),Jr=a("div"),F(aR.$$.fragment),Xtt=l(),m8e=a("p"),ztt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qtt=l(),jn=a("p"),Wtt=o("The model class to instantiate is selected based on the "),f8e=a("code"),Utt=o("model_type"),Htt=o(` property of the config object (either
passed as an argument or loaded from `),g8e=a("code"),Jtt=o("pretrained_model_name_or_path"),Ytt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=a("code"),Ktt=o("pretrained_model_name_or_path"),Ztt=o(":"),eat=l(),u8e=a("ul"),b6=a("li"),p8e=a("strong"),oat=o("vision-encoder-decoder"),rat=o(" \u2014 "),qae=a("a"),tat=o("TFVisionEncoderDecoderModel"),aat=o(" (Vision Encoder decoder model)"),nat=l(),F(v6.$$.fragment),Reo=l(),Pm=a("h2"),F6=a("a"),_8e=a("span"),F(nR.$$.fragment),sat=l(),b8e=a("span"),lat=o("TFAutoModelForSpeechSeq2Seq"),Peo=l(),Tr=a("div"),F(sR.$$.fragment),iat=l(),Bm=a("p"),dat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jae=a("a"),cat=o("from_pretrained()"),mat=o(" class method or the "),Dae=a("a"),fat=o("from_config()"),gat=o(` class
method.`),hat=l(),lR=a("p"),uat=o("This class cannot be instantiated directly using "),v8e=a("code"),pat=o("__init__()"),_at=o(" (throws an error)."),bat=l(),na=a("div"),F(iR.$$.fragment),vat=l(),F8e=a("p"),Fat=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tat=l(),Im=a("p"),Mat=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),Eat=o("not"),Cat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=a("a"),wat=o("from_pretrained()"),Aat=o(" to load the model weights."),Lat=l(),F(T6.$$.fragment),yat=l(),Yr=a("div"),F(dR.$$.fragment),xat=l(),M8e=a("p"),$at=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kat=l(),Dn=a("p"),Sat=o("The model class to instantiate is selected based on the "),E8e=a("code"),Rat=o("model_type"),Pat=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),Bat=o("pretrained_model_name_or_path"),Iat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),Nat=o("pretrained_model_name_or_path"),qat=o(":"),jat=l(),A8e=a("ul"),M6=a("li"),L8e=a("strong"),Dat=o("speech_to_text"),Gat=o(" \u2014 "),Oae=a("a"),Oat=o("TFSpeech2TextForConditionalGeneration"),Vat=o(" (Speech2Text model)"),Xat=l(),F(E6.$$.fragment),Beo=l(),Nm=a("h2"),C6=a("a"),y8e=a("span"),F(cR.$$.fragment),zat=l(),x8e=a("span"),Qat=o("FlaxAutoModel"),Ieo=l(),Mr=a("div"),F(mR.$$.fragment),Wat=l(),qm=a("p"),Uat=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Vae=a("a"),Hat=o("from_pretrained()"),Jat=o(" class method or the "),Xae=a("a"),Yat=o("from_config()"),Kat=o(` class
method.`),Zat=l(),fR=a("p"),ent=o("This class cannot be instantiated directly using "),$8e=a("code"),ont=o("__init__()"),rnt=o(" (throws an error)."),tnt=l(),sa=a("div"),F(gR.$$.fragment),ant=l(),k8e=a("p"),nnt=o("Instantiates one of the base model classes of the library from a configuration."),snt=l(),jm=a("p"),lnt=o(`Note:
Loading a model from its configuration file does `),S8e=a("strong"),int=o("not"),dnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zae=a("a"),cnt=o("from_pretrained()"),mnt=o(" to load the model weights."),fnt=l(),F(w6.$$.fragment),gnt=l(),Kr=a("div"),F(hR.$$.fragment),hnt=l(),R8e=a("p"),unt=o("Instantiate one of the base model classes of the library from a pretrained model."),pnt=l(),Gn=a("p"),_nt=o("The model class to instantiate is selected based on the "),P8e=a("code"),bnt=o("model_type"),vnt=o(` property of the config object (either
passed as an argument or loaded from `),B8e=a("code"),Fnt=o("pretrained_model_name_or_path"),Tnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=a("code"),Mnt=o("pretrained_model_name_or_path"),Ent=o(":"),Cnt=l(),te=a("ul"),A6=a("li"),N8e=a("strong"),wnt=o("albert"),Ant=o(" \u2014 "),Qae=a("a"),Lnt=o("FlaxAlbertModel"),ynt=o(" (ALBERT model)"),xnt=l(),L6=a("li"),q8e=a("strong"),$nt=o("bart"),knt=o(" \u2014 "),Wae=a("a"),Snt=o("FlaxBartModel"),Rnt=o(" (BART model)"),Pnt=l(),y6=a("li"),j8e=a("strong"),Bnt=o("beit"),Int=o(" \u2014 "),Uae=a("a"),Nnt=o("FlaxBeitModel"),qnt=o(" (BEiT model)"),jnt=l(),x6=a("li"),D8e=a("strong"),Dnt=o("bert"),Gnt=o(" \u2014 "),Hae=a("a"),Ont=o("FlaxBertModel"),Vnt=o(" (BERT model)"),Xnt=l(),$6=a("li"),G8e=a("strong"),znt=o("big_bird"),Qnt=o(" \u2014 "),Jae=a("a"),Wnt=o("FlaxBigBirdModel"),Unt=o(" (BigBird model)"),Hnt=l(),k6=a("li"),O8e=a("strong"),Jnt=o("blenderbot"),Ynt=o(" \u2014 "),Yae=a("a"),Knt=o("FlaxBlenderbotModel"),Znt=o(" (Blenderbot model)"),est=l(),S6=a("li"),V8e=a("strong"),ost=o("blenderbot-small"),rst=o(" \u2014 "),Kae=a("a"),tst=o("FlaxBlenderbotSmallModel"),ast=o(" (BlenderbotSmall model)"),nst=l(),R6=a("li"),X8e=a("strong"),sst=o("clip"),lst=o(" \u2014 "),Zae=a("a"),ist=o("FlaxCLIPModel"),dst=o(" (CLIP model)"),cst=l(),P6=a("li"),z8e=a("strong"),mst=o("distilbert"),fst=o(" \u2014 "),ene=a("a"),gst=o("FlaxDistilBertModel"),hst=o(" (DistilBERT model)"),ust=l(),B6=a("li"),Q8e=a("strong"),pst=o("electra"),_st=o(" \u2014 "),one=a("a"),bst=o("FlaxElectraModel"),vst=o(" (ELECTRA model)"),Fst=l(),I6=a("li"),W8e=a("strong"),Tst=o("gpt2"),Mst=o(" \u2014 "),rne=a("a"),Est=o("FlaxGPT2Model"),Cst=o(" (OpenAI GPT-2 model)"),wst=l(),N6=a("li"),U8e=a("strong"),Ast=o("gpt_neo"),Lst=o(" \u2014 "),tne=a("a"),yst=o("FlaxGPTNeoModel"),xst=o(" (GPT Neo model)"),$st=l(),q6=a("li"),H8e=a("strong"),kst=o("gptj"),Sst=o(" \u2014 "),ane=a("a"),Rst=o("FlaxGPTJModel"),Pst=o(" (GPT-J model)"),Bst=l(),j6=a("li"),J8e=a("strong"),Ist=o("longt5"),Nst=o(" \u2014 "),nne=a("a"),qst=o("FlaxLongT5Model"),jst=o(" (LongT5 model)"),Dst=l(),D6=a("li"),Y8e=a("strong"),Gst=o("marian"),Ost=o(" \u2014 "),sne=a("a"),Vst=o("FlaxMarianModel"),Xst=o(" (Marian model)"),zst=l(),G6=a("li"),K8e=a("strong"),Qst=o("mbart"),Wst=o(" \u2014 "),lne=a("a"),Ust=o("FlaxMBartModel"),Hst=o(" (mBART model)"),Jst=l(),O6=a("li"),Z8e=a("strong"),Yst=o("mt5"),Kst=o(" \u2014 "),ine=a("a"),Zst=o("FlaxMT5Model"),elt=o(" (MT5 model)"),olt=l(),V6=a("li"),e9e=a("strong"),rlt=o("opt"),tlt=o(" \u2014 "),dne=a("a"),alt=o("FlaxOPTModel"),nlt=o(" (OPT model)"),slt=l(),X6=a("li"),o9e=a("strong"),llt=o("pegasus"),ilt=o(" \u2014 "),cne=a("a"),dlt=o("FlaxPegasusModel"),clt=o(" (Pegasus model)"),mlt=l(),z6=a("li"),r9e=a("strong"),flt=o("roberta"),glt=o(" \u2014 "),mne=a("a"),hlt=o("FlaxRobertaModel"),ult=o(" (RoBERTa model)"),plt=l(),Q6=a("li"),t9e=a("strong"),_lt=o("roformer"),blt=o(" \u2014 "),fne=a("a"),vlt=o("FlaxRoFormerModel"),Flt=o(" (RoFormer model)"),Tlt=l(),W6=a("li"),a9e=a("strong"),Mlt=o("t5"),Elt=o(" \u2014 "),gne=a("a"),Clt=o("FlaxT5Model"),wlt=o(" (T5 model)"),Alt=l(),U6=a("li"),n9e=a("strong"),Llt=o("vision-text-dual-encoder"),ylt=o(" \u2014 "),hne=a("a"),xlt=o("FlaxVisionTextDualEncoderModel"),$lt=o(" (VisionTextDualEncoder model)"),klt=l(),H6=a("li"),s9e=a("strong"),Slt=o("vit"),Rlt=o(" \u2014 "),une=a("a"),Plt=o("FlaxViTModel"),Blt=o(" (ViT model)"),Ilt=l(),J6=a("li"),l9e=a("strong"),Nlt=o("wav2vec2"),qlt=o(" \u2014 "),pne=a("a"),jlt=o("FlaxWav2Vec2Model"),Dlt=o(" (Wav2Vec2 model)"),Glt=l(),Y6=a("li"),i9e=a("strong"),Olt=o("xglm"),Vlt=o(" \u2014 "),_ne=a("a"),Xlt=o("FlaxXGLMModel"),zlt=o(" (XGLM model)"),Qlt=l(),K6=a("li"),d9e=a("strong"),Wlt=o("xlm-roberta"),Ult=o(" \u2014 "),bne=a("a"),Hlt=o("FlaxXLMRobertaModel"),Jlt=o(" (XLM-RoBERTa model)"),Ylt=l(),F(Z6.$$.fragment),Neo=l(),Dm=a("h2"),e7=a("a"),c9e=a("span"),F(uR.$$.fragment),Klt=l(),m9e=a("span"),Zlt=o("FlaxAutoModelForCausalLM"),qeo=l(),Er=a("div"),F(pR.$$.fragment),eit=l(),Gm=a("p"),oit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vne=a("a"),rit=o("from_pretrained()"),tit=o(" class method or the "),Fne=a("a"),ait=o("from_config()"),nit=o(` class
method.`),sit=l(),_R=a("p"),lit=o("This class cannot be instantiated directly using "),f9e=a("code"),iit=o("__init__()"),dit=o(" (throws an error)."),cit=l(),la=a("div"),F(bR.$$.fragment),mit=l(),g9e=a("p"),fit=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),git=l(),Om=a("p"),hit=o(`Note:
Loading a model from its configuration file does `),h9e=a("strong"),uit=o("not"),pit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tne=a("a"),_it=o("from_pretrained()"),bit=o(" to load the model weights."),vit=l(),F(o7.$$.fragment),Fit=l(),Zr=a("div"),F(vR.$$.fragment),Tit=l(),u9e=a("p"),Mit=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Eit=l(),On=a("p"),Cit=o("The model class to instantiate is selected based on the "),p9e=a("code"),wit=o("model_type"),Ait=o(` property of the config object (either
passed as an argument or loaded from `),_9e=a("code"),Lit=o("pretrained_model_name_or_path"),yit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b9e=a("code"),xit=o("pretrained_model_name_or_path"),$it=o(":"),kit=l(),xe=a("ul"),r7=a("li"),v9e=a("strong"),Sit=o("bart"),Rit=o(" \u2014 "),Mne=a("a"),Pit=o("FlaxBartForCausalLM"),Bit=o(" (BART model)"),Iit=l(),t7=a("li"),F9e=a("strong"),Nit=o("bert"),qit=o(" \u2014 "),Ene=a("a"),jit=o("FlaxBertForCausalLM"),Dit=o(" (BERT model)"),Git=l(),a7=a("li"),T9e=a("strong"),Oit=o("big_bird"),Vit=o(" \u2014 "),Cne=a("a"),Xit=o("FlaxBigBirdForCausalLM"),zit=o(" (BigBird model)"),Qit=l(),n7=a("li"),M9e=a("strong"),Wit=o("electra"),Uit=o(" \u2014 "),wne=a("a"),Hit=o("FlaxElectraForCausalLM"),Jit=o(" (ELECTRA model)"),Yit=l(),s7=a("li"),E9e=a("strong"),Kit=o("gpt2"),Zit=o(" \u2014 "),Ane=a("a"),edt=o("FlaxGPT2LMHeadModel"),odt=o(" (OpenAI GPT-2 model)"),rdt=l(),l7=a("li"),C9e=a("strong"),tdt=o("gpt_neo"),adt=o(" \u2014 "),Lne=a("a"),ndt=o("FlaxGPTNeoForCausalLM"),sdt=o(" (GPT Neo model)"),ldt=l(),i7=a("li"),w9e=a("strong"),idt=o("gptj"),ddt=o(" \u2014 "),yne=a("a"),cdt=o("FlaxGPTJForCausalLM"),mdt=o(" (GPT-J model)"),fdt=l(),d7=a("li"),A9e=a("strong"),gdt=o("opt"),hdt=o(" \u2014 "),xne=a("a"),udt=o("FlaxOPTForCausalLM"),pdt=o(" (OPT model)"),_dt=l(),c7=a("li"),L9e=a("strong"),bdt=o("roberta"),vdt=o(" \u2014 "),$ne=a("a"),Fdt=o("FlaxRobertaForCausalLM"),Tdt=o(" (RoBERTa model)"),Mdt=l(),m7=a("li"),y9e=a("strong"),Edt=o("xglm"),Cdt=o(" \u2014 "),kne=a("a"),wdt=o("FlaxXGLMForCausalLM"),Adt=o(" (XGLM model)"),Ldt=l(),F(f7.$$.fragment),jeo=l(),Vm=a("h2"),g7=a("a"),x9e=a("span"),F(FR.$$.fragment),ydt=l(),$9e=a("span"),xdt=o("FlaxAutoModelForPreTraining"),Deo=l(),Cr=a("div"),F(TR.$$.fragment),$dt=l(),Xm=a("p"),kdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sne=a("a"),Sdt=o("from_pretrained()"),Rdt=o(" class method or the "),Rne=a("a"),Pdt=o("from_config()"),Bdt=o(` class
method.`),Idt=l(),MR=a("p"),Ndt=o("This class cannot be instantiated directly using "),k9e=a("code"),qdt=o("__init__()"),jdt=o(" (throws an error)."),Ddt=l(),ia=a("div"),F(ER.$$.fragment),Gdt=l(),S9e=a("p"),Odt=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vdt=l(),zm=a("p"),Xdt=o(`Note:
Loading a model from its configuration file does `),R9e=a("strong"),zdt=o("not"),Qdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pne=a("a"),Wdt=o("from_pretrained()"),Udt=o(" to load the model weights."),Hdt=l(),F(h7.$$.fragment),Jdt=l(),et=a("div"),F(CR.$$.fragment),Ydt=l(),P9e=a("p"),Kdt=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zdt=l(),Vn=a("p"),ect=o("The model class to instantiate is selected based on the "),B9e=a("code"),oct=o("model_type"),rct=o(` property of the config object (either
passed as an argument or loaded from `),I9e=a("code"),tct=o("pretrained_model_name_or_path"),act=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N9e=a("code"),nct=o("pretrained_model_name_or_path"),sct=o(":"),lct=l(),Ee=a("ul"),u7=a("li"),q9e=a("strong"),ict=o("albert"),dct=o(" \u2014 "),Bne=a("a"),cct=o("FlaxAlbertForPreTraining"),mct=o(" (ALBERT model)"),fct=l(),p7=a("li"),j9e=a("strong"),gct=o("bart"),hct=o(" \u2014 "),Ine=a("a"),uct=o("FlaxBartForConditionalGeneration"),pct=o(" (BART model)"),_ct=l(),_7=a("li"),D9e=a("strong"),bct=o("bert"),vct=o(" \u2014 "),Nne=a("a"),Fct=o("FlaxBertForPreTraining"),Tct=o(" (BERT model)"),Mct=l(),b7=a("li"),G9e=a("strong"),Ect=o("big_bird"),Cct=o(" \u2014 "),qne=a("a"),wct=o("FlaxBigBirdForPreTraining"),Act=o(" (BigBird model)"),Lct=l(),v7=a("li"),O9e=a("strong"),yct=o("electra"),xct=o(" \u2014 "),jne=a("a"),$ct=o("FlaxElectraForPreTraining"),kct=o(" (ELECTRA model)"),Sct=l(),F7=a("li"),V9e=a("strong"),Rct=o("longt5"),Pct=o(" \u2014 "),Dne=a("a"),Bct=o("FlaxLongT5ForConditionalGeneration"),Ict=o(" (LongT5 model)"),Nct=l(),T7=a("li"),X9e=a("strong"),qct=o("mbart"),jct=o(" \u2014 "),Gne=a("a"),Dct=o("FlaxMBartForConditionalGeneration"),Gct=o(" (mBART model)"),Oct=l(),M7=a("li"),z9e=a("strong"),Vct=o("mt5"),Xct=o(" \u2014 "),One=a("a"),zct=o("FlaxMT5ForConditionalGeneration"),Qct=o(" (MT5 model)"),Wct=l(),E7=a("li"),Q9e=a("strong"),Uct=o("roberta"),Hct=o(" \u2014 "),Vne=a("a"),Jct=o("FlaxRobertaForMaskedLM"),Yct=o(" (RoBERTa model)"),Kct=l(),C7=a("li"),W9e=a("strong"),Zct=o("roformer"),emt=o(" \u2014 "),Xne=a("a"),omt=o("FlaxRoFormerForMaskedLM"),rmt=o(" (RoFormer model)"),tmt=l(),w7=a("li"),U9e=a("strong"),amt=o("t5"),nmt=o(" \u2014 "),zne=a("a"),smt=o("FlaxT5ForConditionalGeneration"),lmt=o(" (T5 model)"),imt=l(),A7=a("li"),H9e=a("strong"),dmt=o("wav2vec2"),cmt=o(" \u2014 "),Qne=a("a"),mmt=o("FlaxWav2Vec2ForPreTraining"),fmt=o(" (Wav2Vec2 model)"),gmt=l(),L7=a("li"),J9e=a("strong"),hmt=o("xlm-roberta"),umt=o(" \u2014 "),Wne=a("a"),pmt=o("FlaxXLMRobertaForMaskedLM"),_mt=o(" (XLM-RoBERTa model)"),bmt=l(),F(y7.$$.fragment),Geo=l(),Qm=a("h2"),x7=a("a"),Y9e=a("span"),F(wR.$$.fragment),vmt=l(),K9e=a("span"),Fmt=o("FlaxAutoModelForMaskedLM"),Oeo=l(),wr=a("div"),F(AR.$$.fragment),Tmt=l(),Wm=a("p"),Mmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Une=a("a"),Emt=o("from_pretrained()"),Cmt=o(" class method or the "),Hne=a("a"),wmt=o("from_config()"),Amt=o(` class
method.`),Lmt=l(),LR=a("p"),ymt=o("This class cannot be instantiated directly using "),Z9e=a("code"),xmt=o("__init__()"),$mt=o(" (throws an error)."),kmt=l(),da=a("div"),F(yR.$$.fragment),Smt=l(),exe=a("p"),Rmt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pmt=l(),Um=a("p"),Bmt=o(`Note:
Loading a model from its configuration file does `),oxe=a("strong"),Imt=o("not"),Nmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jne=a("a"),qmt=o("from_pretrained()"),jmt=o(" to load the model weights."),Dmt=l(),F($7.$$.fragment),Gmt=l(),ot=a("div"),F(xR.$$.fragment),Omt=l(),rxe=a("p"),Vmt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xmt=l(),Xn=a("p"),zmt=o("The model class to instantiate is selected based on the "),txe=a("code"),Qmt=o("model_type"),Wmt=o(` property of the config object (either
passed as an argument or loaded from `),axe=a("code"),Umt=o("pretrained_model_name_or_path"),Hmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nxe=a("code"),Jmt=o("pretrained_model_name_or_path"),Ymt=o(":"),Kmt=l(),$e=a("ul"),k7=a("li"),sxe=a("strong"),Zmt=o("albert"),eft=o(" \u2014 "),Yne=a("a"),oft=o("FlaxAlbertForMaskedLM"),rft=o(" (ALBERT model)"),tft=l(),S7=a("li"),lxe=a("strong"),aft=o("bart"),nft=o(" \u2014 "),Kne=a("a"),sft=o("FlaxBartForConditionalGeneration"),lft=o(" (BART model)"),ift=l(),R7=a("li"),ixe=a("strong"),dft=o("bert"),cft=o(" \u2014 "),Zne=a("a"),mft=o("FlaxBertForMaskedLM"),fft=o(" (BERT model)"),gft=l(),P7=a("li"),dxe=a("strong"),hft=o("big_bird"),uft=o(" \u2014 "),ese=a("a"),pft=o("FlaxBigBirdForMaskedLM"),_ft=o(" (BigBird model)"),bft=l(),B7=a("li"),cxe=a("strong"),vft=o("distilbert"),Fft=o(" \u2014 "),ose=a("a"),Tft=o("FlaxDistilBertForMaskedLM"),Mft=o(" (DistilBERT model)"),Eft=l(),I7=a("li"),mxe=a("strong"),Cft=o("electra"),wft=o(" \u2014 "),rse=a("a"),Aft=o("FlaxElectraForMaskedLM"),Lft=o(" (ELECTRA model)"),yft=l(),N7=a("li"),fxe=a("strong"),xft=o("mbart"),$ft=o(" \u2014 "),tse=a("a"),kft=o("FlaxMBartForConditionalGeneration"),Sft=o(" (mBART model)"),Rft=l(),q7=a("li"),gxe=a("strong"),Pft=o("roberta"),Bft=o(" \u2014 "),ase=a("a"),Ift=o("FlaxRobertaForMaskedLM"),Nft=o(" (RoBERTa model)"),qft=l(),j7=a("li"),hxe=a("strong"),jft=o("roformer"),Dft=o(" \u2014 "),nse=a("a"),Gft=o("FlaxRoFormerForMaskedLM"),Oft=o(" (RoFormer model)"),Vft=l(),D7=a("li"),uxe=a("strong"),Xft=o("xlm-roberta"),zft=o(" \u2014 "),sse=a("a"),Qft=o("FlaxXLMRobertaForMaskedLM"),Wft=o(" (XLM-RoBERTa model)"),Uft=l(),F(G7.$$.fragment),Veo=l(),Hm=a("h2"),O7=a("a"),pxe=a("span"),F($R.$$.fragment),Hft=l(),_xe=a("span"),Jft=o("FlaxAutoModelForSeq2SeqLM"),Xeo=l(),Ar=a("div"),F(kR.$$.fragment),Yft=l(),Jm=a("p"),Kft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lse=a("a"),Zft=o("from_pretrained()"),egt=o(" class method or the "),ise=a("a"),ogt=o("from_config()"),rgt=o(` class
method.`),tgt=l(),SR=a("p"),agt=o("This class cannot be instantiated directly using "),bxe=a("code"),ngt=o("__init__()"),sgt=o(" (throws an error)."),lgt=l(),ca=a("div"),F(RR.$$.fragment),igt=l(),vxe=a("p"),dgt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cgt=l(),Ym=a("p"),mgt=o(`Note:
Loading a model from its configuration file does `),Fxe=a("strong"),fgt=o("not"),ggt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dse=a("a"),hgt=o("from_pretrained()"),ugt=o(" to load the model weights."),pgt=l(),F(V7.$$.fragment),_gt=l(),rt=a("div"),F(PR.$$.fragment),bgt=l(),Txe=a("p"),vgt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Fgt=l(),zn=a("p"),Tgt=o("The model class to instantiate is selected based on the "),Mxe=a("code"),Mgt=o("model_type"),Egt=o(` property of the config object (either
passed as an argument or loaded from `),Exe=a("code"),Cgt=o("pretrained_model_name_or_path"),wgt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cxe=a("code"),Agt=o("pretrained_model_name_or_path"),Lgt=o(":"),ygt=l(),ke=a("ul"),X7=a("li"),wxe=a("strong"),xgt=o("bart"),$gt=o(" \u2014 "),cse=a("a"),kgt=o("FlaxBartForConditionalGeneration"),Sgt=o(" (BART model)"),Rgt=l(),z7=a("li"),Axe=a("strong"),Pgt=o("blenderbot"),Bgt=o(" \u2014 "),mse=a("a"),Igt=o("FlaxBlenderbotForConditionalGeneration"),Ngt=o(" (Blenderbot model)"),qgt=l(),Q7=a("li"),Lxe=a("strong"),jgt=o("blenderbot-small"),Dgt=o(" \u2014 "),fse=a("a"),Ggt=o("FlaxBlenderbotSmallForConditionalGeneration"),Ogt=o(" (BlenderbotSmall model)"),Vgt=l(),W7=a("li"),yxe=a("strong"),Xgt=o("encoder-decoder"),zgt=o(" \u2014 "),gse=a("a"),Qgt=o("FlaxEncoderDecoderModel"),Wgt=o(" (Encoder decoder model)"),Ugt=l(),U7=a("li"),xxe=a("strong"),Hgt=o("longt5"),Jgt=o(" \u2014 "),hse=a("a"),Ygt=o("FlaxLongT5ForConditionalGeneration"),Kgt=o(" (LongT5 model)"),Zgt=l(),H7=a("li"),$xe=a("strong"),eht=o("marian"),oht=o(" \u2014 "),use=a("a"),rht=o("FlaxMarianMTModel"),tht=o(" (Marian model)"),aht=l(),J7=a("li"),kxe=a("strong"),nht=o("mbart"),sht=o(" \u2014 "),pse=a("a"),lht=o("FlaxMBartForConditionalGeneration"),iht=o(" (mBART model)"),dht=l(),Y7=a("li"),Sxe=a("strong"),cht=o("mt5"),mht=o(" \u2014 "),_se=a("a"),fht=o("FlaxMT5ForConditionalGeneration"),ght=o(" (MT5 model)"),hht=l(),K7=a("li"),Rxe=a("strong"),uht=o("pegasus"),pht=o(" \u2014 "),bse=a("a"),_ht=o("FlaxPegasusForConditionalGeneration"),bht=o(" (Pegasus model)"),vht=l(),Z7=a("li"),Pxe=a("strong"),Fht=o("t5"),Tht=o(" \u2014 "),vse=a("a"),Mht=o("FlaxT5ForConditionalGeneration"),Eht=o(" (T5 model)"),Cht=l(),F(eL.$$.fragment),zeo=l(),Km=a("h2"),oL=a("a"),Bxe=a("span"),F(BR.$$.fragment),wht=l(),Ixe=a("span"),Aht=o("FlaxAutoModelForSequenceClassification"),Qeo=l(),Lr=a("div"),F(IR.$$.fragment),Lht=l(),Zm=a("p"),yht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Fse=a("a"),xht=o("from_pretrained()"),$ht=o(" class method or the "),Tse=a("a"),kht=o("from_config()"),Sht=o(` class
method.`),Rht=l(),NR=a("p"),Pht=o("This class cannot be instantiated directly using "),Nxe=a("code"),Bht=o("__init__()"),Iht=o(" (throws an error)."),Nht=l(),ma=a("div"),F(qR.$$.fragment),qht=l(),qxe=a("p"),jht=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dht=l(),ef=a("p"),Ght=o(`Note:
Loading a model from its configuration file does `),jxe=a("strong"),Oht=o("not"),Vht=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=a("a"),Xht=o("from_pretrained()"),zht=o(" to load the model weights."),Qht=l(),F(rL.$$.fragment),Wht=l(),tt=a("div"),F(jR.$$.fragment),Uht=l(),Dxe=a("p"),Hht=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jht=l(),Qn=a("p"),Yht=o("The model class to instantiate is selected based on the "),Gxe=a("code"),Kht=o("model_type"),Zht=o(` property of the config object (either
passed as an argument or loaded from `),Oxe=a("code"),eut=o("pretrained_model_name_or_path"),out=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vxe=a("code"),rut=o("pretrained_model_name_or_path"),tut=o(":"),aut=l(),Se=a("ul"),tL=a("li"),Xxe=a("strong"),nut=o("albert"),sut=o(" \u2014 "),Ese=a("a"),lut=o("FlaxAlbertForSequenceClassification"),iut=o(" (ALBERT model)"),dut=l(),aL=a("li"),zxe=a("strong"),cut=o("bart"),mut=o(" \u2014 "),Cse=a("a"),fut=o("FlaxBartForSequenceClassification"),gut=o(" (BART model)"),hut=l(),nL=a("li"),Qxe=a("strong"),uut=o("bert"),put=o(" \u2014 "),wse=a("a"),_ut=o("FlaxBertForSequenceClassification"),but=o(" (BERT model)"),vut=l(),sL=a("li"),Wxe=a("strong"),Fut=o("big_bird"),Tut=o(" \u2014 "),Ase=a("a"),Mut=o("FlaxBigBirdForSequenceClassification"),Eut=o(" (BigBird model)"),Cut=l(),lL=a("li"),Uxe=a("strong"),wut=o("distilbert"),Aut=o(" \u2014 "),Lse=a("a"),Lut=o("FlaxDistilBertForSequenceClassification"),yut=o(" (DistilBERT model)"),xut=l(),iL=a("li"),Hxe=a("strong"),$ut=o("electra"),kut=o(" \u2014 "),yse=a("a"),Sut=o("FlaxElectraForSequenceClassification"),Rut=o(" (ELECTRA model)"),Put=l(),dL=a("li"),Jxe=a("strong"),But=o("mbart"),Iut=o(" \u2014 "),xse=a("a"),Nut=o("FlaxMBartForSequenceClassification"),qut=o(" (mBART model)"),jut=l(),cL=a("li"),Yxe=a("strong"),Dut=o("roberta"),Gut=o(" \u2014 "),$se=a("a"),Out=o("FlaxRobertaForSequenceClassification"),Vut=o(" (RoBERTa model)"),Xut=l(),mL=a("li"),Kxe=a("strong"),zut=o("roformer"),Qut=o(" \u2014 "),kse=a("a"),Wut=o("FlaxRoFormerForSequenceClassification"),Uut=o(" (RoFormer model)"),Hut=l(),fL=a("li"),Zxe=a("strong"),Jut=o("xlm-roberta"),Yut=o(" \u2014 "),Sse=a("a"),Kut=o("FlaxXLMRobertaForSequenceClassification"),Zut=o(" (XLM-RoBERTa model)"),ept=l(),F(gL.$$.fragment),Weo=l(),of=a("h2"),hL=a("a"),e$e=a("span"),F(DR.$$.fragment),opt=l(),o$e=a("span"),rpt=o("FlaxAutoModelForQuestionAnswering"),Ueo=l(),yr=a("div"),F(GR.$$.fragment),tpt=l(),rf=a("p"),apt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Rse=a("a"),npt=o("from_pretrained()"),spt=o(" class method or the "),Pse=a("a"),lpt=o("from_config()"),ipt=o(` class
method.`),dpt=l(),OR=a("p"),cpt=o("This class cannot be instantiated directly using "),r$e=a("code"),mpt=o("__init__()"),fpt=o(" (throws an error)."),gpt=l(),fa=a("div"),F(VR.$$.fragment),hpt=l(),t$e=a("p"),upt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ppt=l(),tf=a("p"),_pt=o(`Note:
Loading a model from its configuration file does `),a$e=a("strong"),bpt=o("not"),vpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bse=a("a"),Fpt=o("from_pretrained()"),Tpt=o(" to load the model weights."),Mpt=l(),F(uL.$$.fragment),Ept=l(),at=a("div"),F(XR.$$.fragment),Cpt=l(),n$e=a("p"),wpt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Apt=l(),Wn=a("p"),Lpt=o("The model class to instantiate is selected based on the "),s$e=a("code"),ypt=o("model_type"),xpt=o(` property of the config object (either
passed as an argument or loaded from `),l$e=a("code"),$pt=o("pretrained_model_name_or_path"),kpt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i$e=a("code"),Spt=o("pretrained_model_name_or_path"),Rpt=o(":"),Ppt=l(),Re=a("ul"),pL=a("li"),d$e=a("strong"),Bpt=o("albert"),Ipt=o(" \u2014 "),Ise=a("a"),Npt=o("FlaxAlbertForQuestionAnswering"),qpt=o(" (ALBERT model)"),jpt=l(),_L=a("li"),c$e=a("strong"),Dpt=o("bart"),Gpt=o(" \u2014 "),Nse=a("a"),Opt=o("FlaxBartForQuestionAnswering"),Vpt=o(" (BART model)"),Xpt=l(),bL=a("li"),m$e=a("strong"),zpt=o("bert"),Qpt=o(" \u2014 "),qse=a("a"),Wpt=o("FlaxBertForQuestionAnswering"),Upt=o(" (BERT model)"),Hpt=l(),vL=a("li"),f$e=a("strong"),Jpt=o("big_bird"),Ypt=o(" \u2014 "),jse=a("a"),Kpt=o("FlaxBigBirdForQuestionAnswering"),Zpt=o(" (BigBird model)"),e_t=l(),FL=a("li"),g$e=a("strong"),o_t=o("distilbert"),r_t=o(" \u2014 "),Dse=a("a"),t_t=o("FlaxDistilBertForQuestionAnswering"),a_t=o(" (DistilBERT model)"),n_t=l(),TL=a("li"),h$e=a("strong"),s_t=o("electra"),l_t=o(" \u2014 "),Gse=a("a"),i_t=o("FlaxElectraForQuestionAnswering"),d_t=o(" (ELECTRA model)"),c_t=l(),ML=a("li"),u$e=a("strong"),m_t=o("mbart"),f_t=o(" \u2014 "),Ose=a("a"),g_t=o("FlaxMBartForQuestionAnswering"),h_t=o(" (mBART model)"),u_t=l(),EL=a("li"),p$e=a("strong"),p_t=o("roberta"),__t=o(" \u2014 "),Vse=a("a"),b_t=o("FlaxRobertaForQuestionAnswering"),v_t=o(" (RoBERTa model)"),F_t=l(),CL=a("li"),_$e=a("strong"),T_t=o("roformer"),M_t=o(" \u2014 "),Xse=a("a"),E_t=o("FlaxRoFormerForQuestionAnswering"),C_t=o(" (RoFormer model)"),w_t=l(),wL=a("li"),b$e=a("strong"),A_t=o("xlm-roberta"),L_t=o(" \u2014 "),zse=a("a"),y_t=o("FlaxXLMRobertaForQuestionAnswering"),x_t=o(" (XLM-RoBERTa model)"),$_t=l(),F(AL.$$.fragment),Heo=l(),af=a("h2"),LL=a("a"),v$e=a("span"),F(zR.$$.fragment),k_t=l(),F$e=a("span"),S_t=o("FlaxAutoModelForTokenClassification"),Jeo=l(),xr=a("div"),F(QR.$$.fragment),R_t=l(),nf=a("p"),P_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qse=a("a"),B_t=o("from_pretrained()"),I_t=o(" class method or the "),Wse=a("a"),N_t=o("from_config()"),q_t=o(` class
method.`),j_t=l(),WR=a("p"),D_t=o("This class cannot be instantiated directly using "),T$e=a("code"),G_t=o("__init__()"),O_t=o(" (throws an error)."),V_t=l(),ga=a("div"),F(UR.$$.fragment),X_t=l(),M$e=a("p"),z_t=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Q_t=l(),sf=a("p"),W_t=o(`Note:
Loading a model from its configuration file does `),E$e=a("strong"),U_t=o("not"),H_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=a("a"),J_t=o("from_pretrained()"),Y_t=o(" to load the model weights."),K_t=l(),F(yL.$$.fragment),Z_t=l(),nt=a("div"),F(HR.$$.fragment),ebt=l(),C$e=a("p"),obt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rbt=l(),Un=a("p"),tbt=o("The model class to instantiate is selected based on the "),w$e=a("code"),abt=o("model_type"),nbt=o(` property of the config object (either
passed as an argument or loaded from `),A$e=a("code"),sbt=o("pretrained_model_name_or_path"),lbt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L$e=a("code"),ibt=o("pretrained_model_name_or_path"),dbt=o(":"),cbt=l(),Xe=a("ul"),xL=a("li"),y$e=a("strong"),mbt=o("albert"),fbt=o(" \u2014 "),Hse=a("a"),gbt=o("FlaxAlbertForTokenClassification"),hbt=o(" (ALBERT model)"),ubt=l(),$L=a("li"),x$e=a("strong"),pbt=o("bert"),_bt=o(" \u2014 "),Jse=a("a"),bbt=o("FlaxBertForTokenClassification"),vbt=o(" (BERT model)"),Fbt=l(),kL=a("li"),$$e=a("strong"),Tbt=o("big_bird"),Mbt=o(" \u2014 "),Yse=a("a"),Ebt=o("FlaxBigBirdForTokenClassification"),Cbt=o(" (BigBird model)"),wbt=l(),SL=a("li"),k$e=a("strong"),Abt=o("distilbert"),Lbt=o(" \u2014 "),Kse=a("a"),ybt=o("FlaxDistilBertForTokenClassification"),xbt=o(" (DistilBERT model)"),$bt=l(),RL=a("li"),S$e=a("strong"),kbt=o("electra"),Sbt=o(" \u2014 "),Zse=a("a"),Rbt=o("FlaxElectraForTokenClassification"),Pbt=o(" (ELECTRA model)"),Bbt=l(),PL=a("li"),R$e=a("strong"),Ibt=o("roberta"),Nbt=o(" \u2014 "),ele=a("a"),qbt=o("FlaxRobertaForTokenClassification"),jbt=o(" (RoBERTa model)"),Dbt=l(),BL=a("li"),P$e=a("strong"),Gbt=o("roformer"),Obt=o(" \u2014 "),ole=a("a"),Vbt=o("FlaxRoFormerForTokenClassification"),Xbt=o(" (RoFormer model)"),zbt=l(),IL=a("li"),B$e=a("strong"),Qbt=o("xlm-roberta"),Wbt=o(" \u2014 "),rle=a("a"),Ubt=o("FlaxXLMRobertaForTokenClassification"),Hbt=o(" (XLM-RoBERTa model)"),Jbt=l(),F(NL.$$.fragment),Yeo=l(),lf=a("h2"),qL=a("a"),I$e=a("span"),F(JR.$$.fragment),Ybt=l(),N$e=a("span"),Kbt=o("FlaxAutoModelForMultipleChoice"),Keo=l(),$r=a("div"),F(YR.$$.fragment),Zbt=l(),df=a("p"),e2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tle=a("a"),o2t=o("from_pretrained()"),r2t=o(" class method or the "),ale=a("a"),t2t=o("from_config()"),a2t=o(` class
method.`),n2t=l(),KR=a("p"),s2t=o("This class cannot be instantiated directly using "),q$e=a("code"),l2t=o("__init__()"),i2t=o(" (throws an error)."),d2t=l(),ha=a("div"),F(ZR.$$.fragment),c2t=l(),j$e=a("p"),m2t=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f2t=l(),cf=a("p"),g2t=o(`Note:
Loading a model from its configuration file does `),D$e=a("strong"),h2t=o("not"),u2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nle=a("a"),p2t=o("from_pretrained()"),_2t=o(" to load the model weights."),b2t=l(),F(jL.$$.fragment),v2t=l(),st=a("div"),F(eP.$$.fragment),F2t=l(),G$e=a("p"),T2t=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M2t=l(),Hn=a("p"),E2t=o("The model class to instantiate is selected based on the "),O$e=a("code"),C2t=o("model_type"),w2t=o(` property of the config object (either
passed as an argument or loaded from `),V$e=a("code"),A2t=o("pretrained_model_name_or_path"),L2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X$e=a("code"),y2t=o("pretrained_model_name_or_path"),x2t=o(":"),$2t=l(),ze=a("ul"),DL=a("li"),z$e=a("strong"),k2t=o("albert"),S2t=o(" \u2014 "),sle=a("a"),R2t=o("FlaxAlbertForMultipleChoice"),P2t=o(" (ALBERT model)"),B2t=l(),GL=a("li"),Q$e=a("strong"),I2t=o("bert"),N2t=o(" \u2014 "),lle=a("a"),q2t=o("FlaxBertForMultipleChoice"),j2t=o(" (BERT model)"),D2t=l(),OL=a("li"),W$e=a("strong"),G2t=o("big_bird"),O2t=o(" \u2014 "),ile=a("a"),V2t=o("FlaxBigBirdForMultipleChoice"),X2t=o(" (BigBird model)"),z2t=l(),VL=a("li"),U$e=a("strong"),Q2t=o("distilbert"),W2t=o(" \u2014 "),dle=a("a"),U2t=o("FlaxDistilBertForMultipleChoice"),H2t=o(" (DistilBERT model)"),J2t=l(),XL=a("li"),H$e=a("strong"),Y2t=o("electra"),K2t=o(" \u2014 "),cle=a("a"),Z2t=o("FlaxElectraForMultipleChoice"),e1t=o(" (ELECTRA model)"),o1t=l(),zL=a("li"),J$e=a("strong"),r1t=o("roberta"),t1t=o(" \u2014 "),mle=a("a"),a1t=o("FlaxRobertaForMultipleChoice"),n1t=o(" (RoBERTa model)"),s1t=l(),QL=a("li"),Y$e=a("strong"),l1t=o("roformer"),i1t=o(" \u2014 "),fle=a("a"),d1t=o("FlaxRoFormerForMultipleChoice"),c1t=o(" (RoFormer model)"),m1t=l(),WL=a("li"),K$e=a("strong"),f1t=o("xlm-roberta"),g1t=o(" \u2014 "),gle=a("a"),h1t=o("FlaxXLMRobertaForMultipleChoice"),u1t=o(" (XLM-RoBERTa model)"),p1t=l(),F(UL.$$.fragment),Zeo=l(),mf=a("h2"),HL=a("a"),Z$e=a("span"),F(oP.$$.fragment),_1t=l(),eke=a("span"),b1t=o("FlaxAutoModelForNextSentencePrediction"),eoo=l(),kr=a("div"),F(rP.$$.fragment),v1t=l(),ff=a("p"),F1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hle=a("a"),T1t=o("from_pretrained()"),M1t=o(" class method or the "),ule=a("a"),E1t=o("from_config()"),C1t=o(` class
method.`),w1t=l(),tP=a("p"),A1t=o("This class cannot be instantiated directly using "),oke=a("code"),L1t=o("__init__()"),y1t=o(" (throws an error)."),x1t=l(),ua=a("div"),F(aP.$$.fragment),$1t=l(),rke=a("p"),k1t=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S1t=l(),gf=a("p"),R1t=o(`Note:
Loading a model from its configuration file does `),tke=a("strong"),P1t=o("not"),B1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ple=a("a"),I1t=o("from_pretrained()"),N1t=o(" to load the model weights."),q1t=l(),F(JL.$$.fragment),j1t=l(),lt=a("div"),F(nP.$$.fragment),D1t=l(),ake=a("p"),G1t=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),O1t=l(),Jn=a("p"),V1t=o("The model class to instantiate is selected based on the "),nke=a("code"),X1t=o("model_type"),z1t=o(` property of the config object (either
passed as an argument or loaded from `),ske=a("code"),Q1t=o("pretrained_model_name_or_path"),W1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lke=a("code"),U1t=o("pretrained_model_name_or_path"),H1t=o(":"),J1t=l(),ike=a("ul"),YL=a("li"),dke=a("strong"),Y1t=o("bert"),K1t=o(" \u2014 "),_le=a("a"),Z1t=o("FlaxBertForNextSentencePrediction"),evt=o(" (BERT model)"),ovt=l(),F(KL.$$.fragment),ooo=l(),hf=a("h2"),ZL=a("a"),cke=a("span"),F(sP.$$.fragment),rvt=l(),mke=a("span"),tvt=o("FlaxAutoModelForImageClassification"),roo=l(),Sr=a("div"),F(lP.$$.fragment),avt=l(),uf=a("p"),nvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ble=a("a"),svt=o("from_pretrained()"),lvt=o(" class method or the "),vle=a("a"),ivt=o("from_config()"),dvt=o(` class
method.`),cvt=l(),iP=a("p"),mvt=o("This class cannot be instantiated directly using "),fke=a("code"),fvt=o("__init__()"),gvt=o(" (throws an error)."),hvt=l(),pa=a("div"),F(dP.$$.fragment),uvt=l(),gke=a("p"),pvt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_vt=l(),pf=a("p"),bvt=o(`Note:
Loading a model from its configuration file does `),hke=a("strong"),vvt=o("not"),Fvt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fle=a("a"),Tvt=o("from_pretrained()"),Mvt=o(" to load the model weights."),Evt=l(),F(ey.$$.fragment),Cvt=l(),it=a("div"),F(cP.$$.fragment),wvt=l(),uke=a("p"),Avt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lvt=l(),Yn=a("p"),yvt=o("The model class to instantiate is selected based on the "),pke=a("code"),xvt=o("model_type"),$vt=o(` property of the config object (either
passed as an argument or loaded from `),_ke=a("code"),kvt=o("pretrained_model_name_or_path"),Svt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bke=a("code"),Rvt=o("pretrained_model_name_or_path"),Pvt=o(":"),Bvt=l(),mP=a("ul"),oy=a("li"),vke=a("strong"),Ivt=o("beit"),Nvt=o(" \u2014 "),Tle=a("a"),qvt=o("FlaxBeitForImageClassification"),jvt=o(" (BEiT model)"),Dvt=l(),ry=a("li"),Fke=a("strong"),Gvt=o("vit"),Ovt=o(" \u2014 "),Mle=a("a"),Vvt=o("FlaxViTForImageClassification"),Xvt=o(" (ViT model)"),zvt=l(),F(ty.$$.fragment),too=l(),_f=a("h2"),ay=a("a"),Tke=a("span"),F(fP.$$.fragment),Qvt=l(),Mke=a("span"),Wvt=o("FlaxAutoModelForVision2Seq"),aoo=l(),Rr=a("div"),F(gP.$$.fragment),Uvt=l(),bf=a("p"),Hvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ele=a("a"),Jvt=o("from_pretrained()"),Yvt=o(" class method or the "),Cle=a("a"),Kvt=o("from_config()"),Zvt=o(` class
method.`),eFt=l(),hP=a("p"),oFt=o("This class cannot be instantiated directly using "),Eke=a("code"),rFt=o("__init__()"),tFt=o(" (throws an error)."),aFt=l(),_a=a("div"),F(uP.$$.fragment),nFt=l(),Cke=a("p"),sFt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lFt=l(),vf=a("p"),iFt=o(`Note:
Loading a model from its configuration file does `),wke=a("strong"),dFt=o("not"),cFt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wle=a("a"),mFt=o("from_pretrained()"),fFt=o(" to load the model weights."),gFt=l(),F(ny.$$.fragment),hFt=l(),dt=a("div"),F(pP.$$.fragment),uFt=l(),Ake=a("p"),pFt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Ft=l(),Kn=a("p"),bFt=o("The model class to instantiate is selected based on the "),Lke=a("code"),vFt=o("model_type"),FFt=o(` property of the config object (either
passed as an argument or loaded from `),yke=a("code"),TFt=o("pretrained_model_name_or_path"),MFt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xke=a("code"),EFt=o("pretrained_model_name_or_path"),CFt=o(":"),wFt=l(),$ke=a("ul"),sy=a("li"),kke=a("strong"),AFt=o("vision-encoder-decoder"),LFt=o(" \u2014 "),Ale=a("a"),yFt=o("FlaxVisionEncoderDecoderModel"),xFt=o(" (Vision Encoder decoder model)"),$Ft=l(),F(ly.$$.fragment),this.h()},l(m){const _=cpa('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var _P=s(u);f=n(_P,"A",{id:!0,class:!0,href:!0});var Ske=s(f);p=n(Ske,"SPAN",{});var Rke=s(p);T(d.$$.fragment,Rke),Rke.forEach(t),Ske.forEach(t),h=i(_P),yo=n(_P,"SPAN",{});var Pke=s(yo);td=r(Pke,"Auto Classes"),Pke.forEach(t),_P.forEach(t),Ef=i(m),pt=n(m,"P",{});var bP=s(pt);ad=r(bP,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=n(bP,"CODE",{});var Bke=s(nd);q9=r(Bke,"from_pretrained()"),Bke.forEach(t),Cf=r(bP,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bP.forEach(t),Ve=i(m),He=n(m,"P",{});var Zn=s(He);sd=r(Zn,"Instantiating one of "),es=n(Zn,"A",{href:!0});var Ike=s(es);j9=r(Ike,"AutoConfig"),Ike.forEach(t),os=r(Zn,", "),rs=n(Zn,"A",{href:!0});var Nke=s(rs);D9=r(Nke,"AutoModel"),Nke.forEach(t),ld=r(Zn,`, and
`),ts=n(Zn,"A",{href:!0});var qke=s(ts);G9=r(qke,"AutoTokenizer"),qke.forEach(t),id=r(Zn," will directly create a class of the relevant architecture. For instance"),Zn.forEach(t),wf=i(m),T(Qa.$$.fragment,m),Je=i(m),Ae=n(m,"P",{});var vP=s(Ae);OB=r(vP,"will create a model that is an instance of "),dd=n(vP,"A",{href:!0});var jke=s(dd);VB=r(jke,"BertModel"),jke.forEach(t),XB=r(vP,"."),vP.forEach(t),xo=i(m),Wa=n(m,"P",{});var FP=s(Wa);zB=r(FP,"There is one class of "),Af=n(FP,"CODE",{});var Dke=s(Af);QB=r(Dke,"AutoModel"),Dke.forEach(t),Mto=r(FP," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),FP.forEach(t),QKe=i(m),cd=n(m,"H2",{class:!0});var TP=s(cd);Lf=n(TP,"A",{id:!0,class:!0,href:!0});var Gke=s(Lf);$de=n(Gke,"SPAN",{});var Oke=s($de);T(O9.$$.fragment,Oke),Oke.forEach(t),Gke.forEach(t),Eto=i(TP),kde=n(TP,"SPAN",{});var Vke=s(kde);Cto=r(Vke,"Extending the Auto Classes"),Vke.forEach(t),TP.forEach(t),WKe=i(m),as=n(m,"P",{});var Ff=s(as);wto=r(Ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Sde=n(Ff,"CODE",{});var Xke=s(Sde);Ato=r(Xke,"NewModel"),Xke.forEach(t),Lto=r(Ff,", make sure you have a "),Rde=n(Ff,"CODE",{});var zke=s(Rde);yto=r(zke,"NewModelConfig"),zke.forEach(t),xto=r(Ff,` then you can add those to the auto
classes like this:`),Ff.forEach(t),UKe=i(m),T(V9.$$.fragment,m),HKe=i(m),WB=n(m,"P",{});var Qke=s(WB);$to=r(Qke,"You will then be able to use the auto classes like you would usually do!"),Qke.forEach(t),JKe=i(m),T(yf.$$.fragment,m),YKe=i(m),md=n(m,"H2",{class:!0});var MP=s(md);xf=n(MP,"A",{id:!0,class:!0,href:!0});var Wke=s(xf);Pde=n(Wke,"SPAN",{});var Uke=s(Pde);T(X9.$$.fragment,Uke),Uke.forEach(t),Wke.forEach(t),kto=i(MP),Bde=n(MP,"SPAN",{});var Hke=s(Bde);Sto=r(Hke,"AutoConfig"),Hke.forEach(t),MP.forEach(t),KKe=i(m),$o=n(m,"DIV",{class:!0});var ht=s($o);T(z9.$$.fragment,ht),Rto=i(ht),Q9=n(ht,"P",{});var EP=s(Q9);Pto=r(EP,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),UB=n(EP,"A",{href:!0});var Jke=s(UB);Bto=r(Jke,"from_pretrained()"),Jke.forEach(t),Ito=r(EP," class method."),EP.forEach(t),Nto=i(ht),W9=n(ht,"P",{});var CP=s(W9);qto=r(CP,"This class cannot be instantiated directly using "),Ide=n(CP,"CODE",{});var Yke=s(Ide);jto=r(Yke,"__init__()"),Yke.forEach(t),Dto=r(CP," (throws an error)."),CP.forEach(t),Gto=i(ht),Pr=n(ht,"DIV",{class:!0});var ut=s(Pr);T(U9.$$.fragment,ut),Oto=i(ut),Nde=n(ut,"P",{});var Kke=s(Nde);Vto=r(Kke,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Kke.forEach(t),Xto=i(ut),fd=n(ut,"P",{});var Tf=s(fd);zto=r(Tf,"The configuration class to instantiate is selected based on the "),qde=n(Tf,"CODE",{});var Zke=s(qde);Qto=r(Zke,"model_type"),Zke.forEach(t),Wto=r(Tf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),jde=n(Tf,"CODE",{});var eSe=s(jde);Uto=r(eSe,"pretrained_model_name_or_path"),eSe.forEach(t),Hto=r(Tf,":"),Tf.forEach(t),Jto=i(ut),A=n(ut,"UL",{});var L=s(A);$f=n(L,"LI",{});var iy=s($f);Dde=n(iy,"STRONG",{});var oSe=s(Dde);Yto=r(oSe,"albert"),oSe.forEach(t),Kto=r(iy," \u2014 "),HB=n(iy,"A",{href:!0});var rSe=s(HB);Zto=r(rSe,"AlbertConfig"),rSe.forEach(t),eao=r(iy," (ALBERT model)"),iy.forEach(t),oao=i(L),kf=n(L,"LI",{});var dy=s(kf);Gde=n(dy,"STRONG",{});var tSe=s(Gde);rao=r(tSe,"bart"),tSe.forEach(t),tao=r(dy," \u2014 "),JB=n(dy,"A",{href:!0});var aSe=s(JB);aao=r(aSe,"BartConfig"),aSe.forEach(t),nao=r(dy," (BART model)"),dy.forEach(t),sao=i(L),Sf=n(L,"LI",{});var cy=s(Sf);Ode=n(cy,"STRONG",{});var nSe=s(Ode);lao=r(nSe,"beit"),nSe.forEach(t),iao=r(cy," \u2014 "),YB=n(cy,"A",{href:!0});var sSe=s(YB);dao=r(sSe,"BeitConfig"),sSe.forEach(t),cao=r(cy," (BEiT model)"),cy.forEach(t),mao=i(L),Rf=n(L,"LI",{});var my=s(Rf);Vde=n(my,"STRONG",{});var lSe=s(Vde);fao=r(lSe,"bert"),lSe.forEach(t),gao=r(my," \u2014 "),KB=n(my,"A",{href:!0});var iSe=s(KB);hao=r(iSe,"BertConfig"),iSe.forEach(t),uao=r(my," (BERT model)"),my.forEach(t),pao=i(L),Pf=n(L,"LI",{});var fy=s(Pf);Xde=n(fy,"STRONG",{});var dSe=s(Xde);_ao=r(dSe,"bert-generation"),dSe.forEach(t),bao=r(fy," \u2014 "),ZB=n(fy,"A",{href:!0});var cSe=s(ZB);vao=r(cSe,"BertGenerationConfig"),cSe.forEach(t),Fao=r(fy," (Bert Generation model)"),fy.forEach(t),Tao=i(L),Bf=n(L,"LI",{});var gy=s(Bf);zde=n(gy,"STRONG",{});var mSe=s(zde);Mao=r(mSe,"big_bird"),mSe.forEach(t),Eao=r(gy," \u2014 "),eI=n(gy,"A",{href:!0});var fSe=s(eI);Cao=r(fSe,"BigBirdConfig"),fSe.forEach(t),wao=r(gy," (BigBird model)"),gy.forEach(t),Aao=i(L),If=n(L,"LI",{});var hy=s(If);Qde=n(hy,"STRONG",{});var gSe=s(Qde);Lao=r(gSe,"bigbird_pegasus"),gSe.forEach(t),yao=r(hy," \u2014 "),oI=n(hy,"A",{href:!0});var hSe=s(oI);xao=r(hSe,"BigBirdPegasusConfig"),hSe.forEach(t),$ao=r(hy," (BigBird-Pegasus model)"),hy.forEach(t),kao=i(L),Nf=n(L,"LI",{});var uy=s(Nf);Wde=n(uy,"STRONG",{});var uSe=s(Wde);Sao=r(uSe,"blenderbot"),uSe.forEach(t),Rao=r(uy," \u2014 "),rI=n(uy,"A",{href:!0});var pSe=s(rI);Pao=r(pSe,"BlenderbotConfig"),pSe.forEach(t),Bao=r(uy," (Blenderbot model)"),uy.forEach(t),Iao=i(L),qf=n(L,"LI",{});var py=s(qf);Ude=n(py,"STRONG",{});var _Se=s(Ude);Nao=r(_Se,"blenderbot-small"),_Se.forEach(t),qao=r(py," \u2014 "),tI=n(py,"A",{href:!0});var bSe=s(tI);jao=r(bSe,"BlenderbotSmallConfig"),bSe.forEach(t),Dao=r(py," (BlenderbotSmall model)"),py.forEach(t),Gao=i(L),jf=n(L,"LI",{});var _y=s(jf);Hde=n(_y,"STRONG",{});var vSe=s(Hde);Oao=r(vSe,"bloom"),vSe.forEach(t),Vao=r(_y," \u2014 "),aI=n(_y,"A",{href:!0});var FSe=s(aI);Xao=r(FSe,"BloomConfig"),FSe.forEach(t),zao=r(_y," (BLOOM model)"),_y.forEach(t),Qao=i(L),Df=n(L,"LI",{});var by=s(Df);Jde=n(by,"STRONG",{});var TSe=s(Jde);Wao=r(TSe,"camembert"),TSe.forEach(t),Uao=r(by," \u2014 "),nI=n(by,"A",{href:!0});var MSe=s(nI);Hao=r(MSe,"CamembertConfig"),MSe.forEach(t),Jao=r(by," (CamemBERT model)"),by.forEach(t),Yao=i(L),Gf=n(L,"LI",{});var vy=s(Gf);Yde=n(vy,"STRONG",{});var ESe=s(Yde);Kao=r(ESe,"canine"),ESe.forEach(t),Zao=r(vy," \u2014 "),sI=n(vy,"A",{href:!0});var CSe=s(sI);eno=r(CSe,"CanineConfig"),CSe.forEach(t),ono=r(vy," (CANINE model)"),vy.forEach(t),rno=i(L),Of=n(L,"LI",{});var Fy=s(Of);Kde=n(Fy,"STRONG",{});var wSe=s(Kde);tno=r(wSe,"clip"),wSe.forEach(t),ano=r(Fy," \u2014 "),lI=n(Fy,"A",{href:!0});var ASe=s(lI);nno=r(ASe,"CLIPConfig"),ASe.forEach(t),sno=r(Fy," (CLIP model)"),Fy.forEach(t),lno=i(L),Vf=n(L,"LI",{});var Ty=s(Vf);Zde=n(Ty,"STRONG",{});var LSe=s(Zde);ino=r(LSe,"codegen"),LSe.forEach(t),dno=r(Ty," \u2014 "),iI=n(Ty,"A",{href:!0});var ySe=s(iI);cno=r(ySe,"CodeGenConfig"),ySe.forEach(t),mno=r(Ty," (CodeGen model)"),Ty.forEach(t),fno=i(L),Xf=n(L,"LI",{});var My=s(Xf);ece=n(My,"STRONG",{});var xSe=s(ece);gno=r(xSe,"conditional_detr"),xSe.forEach(t),hno=r(My," \u2014 "),dI=n(My,"A",{href:!0});var $Se=s(dI);uno=r($Se,"ConditionalDetrConfig"),$Se.forEach(t),pno=r(My," (Conditional DETR model)"),My.forEach(t),_no=i(L),zf=n(L,"LI",{});var Ey=s(zf);oce=n(Ey,"STRONG",{});var kSe=s(oce);bno=r(kSe,"convbert"),kSe.forEach(t),vno=r(Ey," \u2014 "),cI=n(Ey,"A",{href:!0});var SSe=s(cI);Fno=r(SSe,"ConvBertConfig"),SSe.forEach(t),Tno=r(Ey," (ConvBERT model)"),Ey.forEach(t),Mno=i(L),Qf=n(L,"LI",{});var Cy=s(Qf);rce=n(Cy,"STRONG",{});var RSe=s(rce);Eno=r(RSe,"convnext"),RSe.forEach(t),Cno=r(Cy," \u2014 "),mI=n(Cy,"A",{href:!0});var PSe=s(mI);wno=r(PSe,"ConvNextConfig"),PSe.forEach(t),Ano=r(Cy," (ConvNeXT model)"),Cy.forEach(t),Lno=i(L),Wf=n(L,"LI",{});var wy=s(Wf);tce=n(wy,"STRONG",{});var BSe=s(tce);yno=r(BSe,"ctrl"),BSe.forEach(t),xno=r(wy," \u2014 "),fI=n(wy,"A",{href:!0});var ISe=s(fI);$no=r(ISe,"CTRLConfig"),ISe.forEach(t),kno=r(wy," (CTRL model)"),wy.forEach(t),Sno=i(L),Uf=n(L,"LI",{});var Ay=s(Uf);ace=n(Ay,"STRONG",{});var NSe=s(ace);Rno=r(NSe,"cvt"),NSe.forEach(t),Pno=r(Ay," \u2014 "),gI=n(Ay,"A",{href:!0});var qSe=s(gI);Bno=r(qSe,"CvtConfig"),qSe.forEach(t),Ino=r(Ay," (CvT model)"),Ay.forEach(t),Nno=i(L),Hf=n(L,"LI",{});var Ly=s(Hf);nce=n(Ly,"STRONG",{});var jSe=s(nce);qno=r(jSe,"data2vec-audio"),jSe.forEach(t),jno=r(Ly," \u2014 "),hI=n(Ly,"A",{href:!0});var DSe=s(hI);Dno=r(DSe,"Data2VecAudioConfig"),DSe.forEach(t),Gno=r(Ly," (Data2VecAudio model)"),Ly.forEach(t),Ono=i(L),Jf=n(L,"LI",{});var yy=s(Jf);sce=n(yy,"STRONG",{});var GSe=s(sce);Vno=r(GSe,"data2vec-text"),GSe.forEach(t),Xno=r(yy," \u2014 "),uI=n(yy,"A",{href:!0});var OSe=s(uI);zno=r(OSe,"Data2VecTextConfig"),OSe.forEach(t),Qno=r(yy," (Data2VecText model)"),yy.forEach(t),Wno=i(L),Yf=n(L,"LI",{});var xy=s(Yf);lce=n(xy,"STRONG",{});var VSe=s(lce);Uno=r(VSe,"data2vec-vision"),VSe.forEach(t),Hno=r(xy," \u2014 "),pI=n(xy,"A",{href:!0});var XSe=s(pI);Jno=r(XSe,"Data2VecVisionConfig"),XSe.forEach(t),Yno=r(xy," (Data2VecVision model)"),xy.forEach(t),Kno=i(L),Kf=n(L,"LI",{});var $y=s(Kf);ice=n($y,"STRONG",{});var zSe=s(ice);Zno=r(zSe,"deberta"),zSe.forEach(t),eso=r($y," \u2014 "),_I=n($y,"A",{href:!0});var QSe=s(_I);oso=r(QSe,"DebertaConfig"),QSe.forEach(t),rso=r($y," (DeBERTa model)"),$y.forEach(t),tso=i(L),Zf=n(L,"LI",{});var ky=s(Zf);dce=n(ky,"STRONG",{});var WSe=s(dce);aso=r(WSe,"deberta-v2"),WSe.forEach(t),nso=r(ky," \u2014 "),bI=n(ky,"A",{href:!0});var USe=s(bI);sso=r(USe,"DebertaV2Config"),USe.forEach(t),lso=r(ky," (DeBERTa-v2 model)"),ky.forEach(t),iso=i(L),eg=n(L,"LI",{});var Sy=s(eg);cce=n(Sy,"STRONG",{});var HSe=s(cce);dso=r(HSe,"decision_transformer"),HSe.forEach(t),cso=r(Sy," \u2014 "),vI=n(Sy,"A",{href:!0});var JSe=s(vI);mso=r(JSe,"DecisionTransformerConfig"),JSe.forEach(t),fso=r(Sy," (Decision Transformer model)"),Sy.forEach(t),gso=i(L),og=n(L,"LI",{});var Ry=s(og);mce=n(Ry,"STRONG",{});var YSe=s(mce);hso=r(YSe,"deformable_detr"),YSe.forEach(t),uso=r(Ry," \u2014 "),FI=n(Ry,"A",{href:!0});var KSe=s(FI);pso=r(KSe,"DeformableDetrConfig"),KSe.forEach(t),_so=r(Ry," (Deformable DETR model)"),Ry.forEach(t),bso=i(L),rg=n(L,"LI",{});var ZSe=s(rg);fce=n(ZSe,"STRONG",{});var SFt=s(fce);vso=r(SFt,"deit"),SFt.forEach(t),Fso=r(ZSe," \u2014 "),TI=n(ZSe,"A",{href:!0});var RFt=s(TI);Tso=r(RFt,"DeiTConfig"),RFt.forEach(t),Mso=r(ZSe," (DeiT model)"),ZSe.forEach(t),Eso=i(L),tg=n(L,"LI",{});var eRe=s(tg);gce=n(eRe,"STRONG",{});var PFt=s(gce);Cso=r(PFt,"detr"),PFt.forEach(t),wso=r(eRe," \u2014 "),MI=n(eRe,"A",{href:!0});var BFt=s(MI);Aso=r(BFt,"DetrConfig"),BFt.forEach(t),Lso=r(eRe," (DETR model)"),eRe.forEach(t),yso=i(L),ag=n(L,"LI",{});var oRe=s(ag);hce=n(oRe,"STRONG",{});var IFt=s(hce);xso=r(IFt,"distilbert"),IFt.forEach(t),$so=r(oRe," \u2014 "),EI=n(oRe,"A",{href:!0});var NFt=s(EI);kso=r(NFt,"DistilBertConfig"),NFt.forEach(t),Sso=r(oRe," (DistilBERT model)"),oRe.forEach(t),Rso=i(L),ng=n(L,"LI",{});var rRe=s(ng);uce=n(rRe,"STRONG",{});var qFt=s(uce);Pso=r(qFt,"donut-swin"),qFt.forEach(t),Bso=r(rRe," \u2014 "),CI=n(rRe,"A",{href:!0});var jFt=s(CI);Iso=r(jFt,"DonutSwinConfig"),jFt.forEach(t),Nso=r(rRe," (DonutSwin model)"),rRe.forEach(t),qso=i(L),sg=n(L,"LI",{});var tRe=s(sg);pce=n(tRe,"STRONG",{});var DFt=s(pce);jso=r(DFt,"dpr"),DFt.forEach(t),Dso=r(tRe," \u2014 "),wI=n(tRe,"A",{href:!0});var GFt=s(wI);Gso=r(GFt,"DPRConfig"),GFt.forEach(t),Oso=r(tRe," (DPR model)"),tRe.forEach(t),Vso=i(L),lg=n(L,"LI",{});var aRe=s(lg);_ce=n(aRe,"STRONG",{});var OFt=s(_ce);Xso=r(OFt,"dpt"),OFt.forEach(t),zso=r(aRe," \u2014 "),AI=n(aRe,"A",{href:!0});var VFt=s(AI);Qso=r(VFt,"DPTConfig"),VFt.forEach(t),Wso=r(aRe," (DPT model)"),aRe.forEach(t),Uso=i(L),ig=n(L,"LI",{});var nRe=s(ig);bce=n(nRe,"STRONG",{});var XFt=s(bce);Hso=r(XFt,"electra"),XFt.forEach(t),Jso=r(nRe," \u2014 "),LI=n(nRe,"A",{href:!0});var zFt=s(LI);Yso=r(zFt,"ElectraConfig"),zFt.forEach(t),Kso=r(nRe," (ELECTRA model)"),nRe.forEach(t),Zso=i(L),dg=n(L,"LI",{});var sRe=s(dg);vce=n(sRe,"STRONG",{});var QFt=s(vce);elo=r(QFt,"encoder-decoder"),QFt.forEach(t),olo=r(sRe," \u2014 "),yI=n(sRe,"A",{href:!0});var WFt=s(yI);rlo=r(WFt,"EncoderDecoderConfig"),WFt.forEach(t),tlo=r(sRe," (Encoder decoder model)"),sRe.forEach(t),alo=i(L),cg=n(L,"LI",{});var lRe=s(cg);Fce=n(lRe,"STRONG",{});var UFt=s(Fce);nlo=r(UFt,"ernie"),UFt.forEach(t),slo=r(lRe," \u2014 "),xI=n(lRe,"A",{href:!0});var HFt=s(xI);llo=r(HFt,"ErnieConfig"),HFt.forEach(t),ilo=r(lRe," (ERNIE model)"),lRe.forEach(t),dlo=i(L),mg=n(L,"LI",{});var iRe=s(mg);Tce=n(iRe,"STRONG",{});var JFt=s(Tce);clo=r(JFt,"flaubert"),JFt.forEach(t),mlo=r(iRe," \u2014 "),$I=n(iRe,"A",{href:!0});var YFt=s($I);flo=r(YFt,"FlaubertConfig"),YFt.forEach(t),glo=r(iRe," (FlauBERT model)"),iRe.forEach(t),hlo=i(L),fg=n(L,"LI",{});var dRe=s(fg);Mce=n(dRe,"STRONG",{});var KFt=s(Mce);ulo=r(KFt,"flava"),KFt.forEach(t),plo=r(dRe," \u2014 "),kI=n(dRe,"A",{href:!0});var ZFt=s(kI);_lo=r(ZFt,"FlavaConfig"),ZFt.forEach(t),blo=r(dRe," (FLAVA model)"),dRe.forEach(t),vlo=i(L),gg=n(L,"LI",{});var cRe=s(gg);Ece=n(cRe,"STRONG",{});var eTt=s(Ece);Flo=r(eTt,"fnet"),eTt.forEach(t),Tlo=r(cRe," \u2014 "),SI=n(cRe,"A",{href:!0});var oTt=s(SI);Mlo=r(oTt,"FNetConfig"),oTt.forEach(t),Elo=r(cRe," (FNet model)"),cRe.forEach(t),Clo=i(L),hg=n(L,"LI",{});var mRe=s(hg);Cce=n(mRe,"STRONG",{});var rTt=s(Cce);wlo=r(rTt,"fsmt"),rTt.forEach(t),Alo=r(mRe," \u2014 "),RI=n(mRe,"A",{href:!0});var tTt=s(RI);Llo=r(tTt,"FSMTConfig"),tTt.forEach(t),ylo=r(mRe," (FairSeq Machine-Translation model)"),mRe.forEach(t),xlo=i(L),ug=n(L,"LI",{});var fRe=s(ug);wce=n(fRe,"STRONG",{});var aTt=s(wce);$lo=r(aTt,"funnel"),aTt.forEach(t),klo=r(fRe," \u2014 "),PI=n(fRe,"A",{href:!0});var nTt=s(PI);Slo=r(nTt,"FunnelConfig"),nTt.forEach(t),Rlo=r(fRe," (Funnel Transformer model)"),fRe.forEach(t),Plo=i(L),pg=n(L,"LI",{});var gRe=s(pg);Ace=n(gRe,"STRONG",{});var sTt=s(Ace);Blo=r(sTt,"glpn"),sTt.forEach(t),Ilo=r(gRe," \u2014 "),BI=n(gRe,"A",{href:!0});var lTt=s(BI);Nlo=r(lTt,"GLPNConfig"),lTt.forEach(t),qlo=r(gRe," (GLPN model)"),gRe.forEach(t),jlo=i(L),_g=n(L,"LI",{});var hRe=s(_g);Lce=n(hRe,"STRONG",{});var iTt=s(Lce);Dlo=r(iTt,"gpt2"),iTt.forEach(t),Glo=r(hRe," \u2014 "),II=n(hRe,"A",{href:!0});var dTt=s(II);Olo=r(dTt,"GPT2Config"),dTt.forEach(t),Vlo=r(hRe," (OpenAI GPT-2 model)"),hRe.forEach(t),Xlo=i(L),bg=n(L,"LI",{});var uRe=s(bg);yce=n(uRe,"STRONG",{});var cTt=s(yce);zlo=r(cTt,"gpt_neo"),cTt.forEach(t),Qlo=r(uRe," \u2014 "),NI=n(uRe,"A",{href:!0});var mTt=s(NI);Wlo=r(mTt,"GPTNeoConfig"),mTt.forEach(t),Ulo=r(uRe," (GPT Neo model)"),uRe.forEach(t),Hlo=i(L),vg=n(L,"LI",{});var pRe=s(vg);xce=n(pRe,"STRONG",{});var fTt=s(xce);Jlo=r(fTt,"gpt_neox"),fTt.forEach(t),Ylo=r(pRe," \u2014 "),qI=n(pRe,"A",{href:!0});var gTt=s(qI);Klo=r(gTt,"GPTNeoXConfig"),gTt.forEach(t),Zlo=r(pRe," (GPT NeoX model)"),pRe.forEach(t),eio=i(L),Fg=n(L,"LI",{});var _Re=s(Fg);$ce=n(_Re,"STRONG",{});var hTt=s($ce);oio=r(hTt,"gpt_neox_japanese"),hTt.forEach(t),rio=r(_Re," \u2014 "),jI=n(_Re,"A",{href:!0});var uTt=s(jI);tio=r(uTt,"GPTNeoXJapaneseConfig"),uTt.forEach(t),aio=r(_Re," (GPT NeoX Japanese model)"),_Re.forEach(t),nio=i(L),Tg=n(L,"LI",{});var bRe=s(Tg);kce=n(bRe,"STRONG",{});var pTt=s(kce);sio=r(pTt,"gptj"),pTt.forEach(t),lio=r(bRe," \u2014 "),DI=n(bRe,"A",{href:!0});var _Tt=s(DI);iio=r(_Tt,"GPTJConfig"),_Tt.forEach(t),dio=r(bRe," (GPT-J model)"),bRe.forEach(t),cio=i(L),Mg=n(L,"LI",{});var vRe=s(Mg);Sce=n(vRe,"STRONG",{});var bTt=s(Sce);mio=r(bTt,"groupvit"),bTt.forEach(t),fio=r(vRe," \u2014 "),GI=n(vRe,"A",{href:!0});var vTt=s(GI);gio=r(vTt,"GroupViTConfig"),vTt.forEach(t),hio=r(vRe," (GroupViT model)"),vRe.forEach(t),uio=i(L),Eg=n(L,"LI",{});var FRe=s(Eg);Rce=n(FRe,"STRONG",{});var FTt=s(Rce);pio=r(FTt,"hubert"),FTt.forEach(t),_io=r(FRe," \u2014 "),OI=n(FRe,"A",{href:!0});var TTt=s(OI);bio=r(TTt,"HubertConfig"),TTt.forEach(t),vio=r(FRe," (Hubert model)"),FRe.forEach(t),Fio=i(L),Cg=n(L,"LI",{});var TRe=s(Cg);Pce=n(TRe,"STRONG",{});var MTt=s(Pce);Tio=r(MTt,"ibert"),MTt.forEach(t),Mio=r(TRe," \u2014 "),VI=n(TRe,"A",{href:!0});var ETt=s(VI);Eio=r(ETt,"IBertConfig"),ETt.forEach(t),Cio=r(TRe," (I-BERT model)"),TRe.forEach(t),wio=i(L),wg=n(L,"LI",{});var MRe=s(wg);Bce=n(MRe,"STRONG",{});var CTt=s(Bce);Aio=r(CTt,"imagegpt"),CTt.forEach(t),Lio=r(MRe," \u2014 "),XI=n(MRe,"A",{href:!0});var wTt=s(XI);yio=r(wTt,"ImageGPTConfig"),wTt.forEach(t),xio=r(MRe," (ImageGPT model)"),MRe.forEach(t),$io=i(L),Ag=n(L,"LI",{});var ERe=s(Ag);Ice=n(ERe,"STRONG",{});var ATt=s(Ice);kio=r(ATt,"layoutlm"),ATt.forEach(t),Sio=r(ERe," \u2014 "),zI=n(ERe,"A",{href:!0});var LTt=s(zI);Rio=r(LTt,"LayoutLMConfig"),LTt.forEach(t),Pio=r(ERe," (LayoutLM model)"),ERe.forEach(t),Bio=i(L),Lg=n(L,"LI",{});var CRe=s(Lg);Nce=n(CRe,"STRONG",{});var yTt=s(Nce);Iio=r(yTt,"layoutlmv2"),yTt.forEach(t),Nio=r(CRe," \u2014 "),QI=n(CRe,"A",{href:!0});var xTt=s(QI);qio=r(xTt,"LayoutLMv2Config"),xTt.forEach(t),jio=r(CRe," (LayoutLMv2 model)"),CRe.forEach(t),Dio=i(L),yg=n(L,"LI",{});var wRe=s(yg);qce=n(wRe,"STRONG",{});var $Tt=s(qce);Gio=r($Tt,"layoutlmv3"),$Tt.forEach(t),Oio=r(wRe," \u2014 "),WI=n(wRe,"A",{href:!0});var kTt=s(WI);Vio=r(kTt,"LayoutLMv3Config"),kTt.forEach(t),Xio=r(wRe," (LayoutLMv3 model)"),wRe.forEach(t),zio=i(L),xg=n(L,"LI",{});var ARe=s(xg);jce=n(ARe,"STRONG",{});var STt=s(jce);Qio=r(STt,"led"),STt.forEach(t),Wio=r(ARe," \u2014 "),UI=n(ARe,"A",{href:!0});var RTt=s(UI);Uio=r(RTt,"LEDConfig"),RTt.forEach(t),Hio=r(ARe," (LED model)"),ARe.forEach(t),Jio=i(L),$g=n(L,"LI",{});var LRe=s($g);Dce=n(LRe,"STRONG",{});var PTt=s(Dce);Yio=r(PTt,"levit"),PTt.forEach(t),Kio=r(LRe," \u2014 "),HI=n(LRe,"A",{href:!0});var BTt=s(HI);Zio=r(BTt,"LevitConfig"),BTt.forEach(t),edo=r(LRe," (LeViT model)"),LRe.forEach(t),odo=i(L),kg=n(L,"LI",{});var yRe=s(kg);Gce=n(yRe,"STRONG",{});var ITt=s(Gce);rdo=r(ITt,"longformer"),ITt.forEach(t),tdo=r(yRe," \u2014 "),JI=n(yRe,"A",{href:!0});var NTt=s(JI);ado=r(NTt,"LongformerConfig"),NTt.forEach(t),ndo=r(yRe," (Longformer model)"),yRe.forEach(t),sdo=i(L),Sg=n(L,"LI",{});var xRe=s(Sg);Oce=n(xRe,"STRONG",{});var qTt=s(Oce);ldo=r(qTt,"longt5"),qTt.forEach(t),ido=r(xRe," \u2014 "),YI=n(xRe,"A",{href:!0});var jTt=s(YI);ddo=r(jTt,"LongT5Config"),jTt.forEach(t),cdo=r(xRe," (LongT5 model)"),xRe.forEach(t),mdo=i(L),Rg=n(L,"LI",{});var $Re=s(Rg);Vce=n($Re,"STRONG",{});var DTt=s(Vce);fdo=r(DTt,"luke"),DTt.forEach(t),gdo=r($Re," \u2014 "),KI=n($Re,"A",{href:!0});var GTt=s(KI);hdo=r(GTt,"LukeConfig"),GTt.forEach(t),udo=r($Re," (LUKE model)"),$Re.forEach(t),pdo=i(L),Pg=n(L,"LI",{});var kRe=s(Pg);Xce=n(kRe,"STRONG",{});var OTt=s(Xce);_do=r(OTt,"lxmert"),OTt.forEach(t),bdo=r(kRe," \u2014 "),ZI=n(kRe,"A",{href:!0});var VTt=s(ZI);vdo=r(VTt,"LxmertConfig"),VTt.forEach(t),Fdo=r(kRe," (LXMERT model)"),kRe.forEach(t),Tdo=i(L),Bg=n(L,"LI",{});var SRe=s(Bg);zce=n(SRe,"STRONG",{});var XTt=s(zce);Mdo=r(XTt,"m2m_100"),XTt.forEach(t),Edo=r(SRe," \u2014 "),eN=n(SRe,"A",{href:!0});var zTt=s(eN);Cdo=r(zTt,"M2M100Config"),zTt.forEach(t),wdo=r(SRe," (M2M100 model)"),SRe.forEach(t),Ado=i(L),Ig=n(L,"LI",{});var RRe=s(Ig);Qce=n(RRe,"STRONG",{});var QTt=s(Qce);Ldo=r(QTt,"marian"),QTt.forEach(t),ydo=r(RRe," \u2014 "),oN=n(RRe,"A",{href:!0});var WTt=s(oN);xdo=r(WTt,"MarianConfig"),WTt.forEach(t),$do=r(RRe," (Marian model)"),RRe.forEach(t),kdo=i(L),Ng=n(L,"LI",{});var PRe=s(Ng);Wce=n(PRe,"STRONG",{});var UTt=s(Wce);Sdo=r(UTt,"maskformer"),UTt.forEach(t),Rdo=r(PRe," \u2014 "),rN=n(PRe,"A",{href:!0});var HTt=s(rN);Pdo=r(HTt,"MaskFormerConfig"),HTt.forEach(t),Bdo=r(PRe," (MaskFormer model)"),PRe.forEach(t),Ido=i(L),qg=n(L,"LI",{});var BRe=s(qg);Uce=n(BRe,"STRONG",{});var JTt=s(Uce);Ndo=r(JTt,"mbart"),JTt.forEach(t),qdo=r(BRe," \u2014 "),tN=n(BRe,"A",{href:!0});var YTt=s(tN);jdo=r(YTt,"MBartConfig"),YTt.forEach(t),Ddo=r(BRe," (mBART model)"),BRe.forEach(t),Gdo=i(L),jg=n(L,"LI",{});var IRe=s(jg);Hce=n(IRe,"STRONG",{});var KTt=s(Hce);Odo=r(KTt,"mctct"),KTt.forEach(t),Vdo=r(IRe," \u2014 "),aN=n(IRe,"A",{href:!0});var ZTt=s(aN);Xdo=r(ZTt,"MCTCTConfig"),ZTt.forEach(t),zdo=r(IRe," (M-CTC-T model)"),IRe.forEach(t),Qdo=i(L),Dg=n(L,"LI",{});var NRe=s(Dg);Jce=n(NRe,"STRONG",{});var eMt=s(Jce);Wdo=r(eMt,"megatron-bert"),eMt.forEach(t),Udo=r(NRe," \u2014 "),nN=n(NRe,"A",{href:!0});var oMt=s(nN);Hdo=r(oMt,"MegatronBertConfig"),oMt.forEach(t),Jdo=r(NRe," (Megatron-BERT model)"),NRe.forEach(t),Ydo=i(L),Gg=n(L,"LI",{});var qRe=s(Gg);Yce=n(qRe,"STRONG",{});var rMt=s(Yce);Kdo=r(rMt,"mobilebert"),rMt.forEach(t),Zdo=r(qRe," \u2014 "),sN=n(qRe,"A",{href:!0});var tMt=s(sN);eco=r(tMt,"MobileBertConfig"),tMt.forEach(t),oco=r(qRe," (MobileBERT model)"),qRe.forEach(t),rco=i(L),Og=n(L,"LI",{});var jRe=s(Og);Kce=n(jRe,"STRONG",{});var aMt=s(Kce);tco=r(aMt,"mobilevit"),aMt.forEach(t),aco=r(jRe," \u2014 "),lN=n(jRe,"A",{href:!0});var nMt=s(lN);nco=r(nMt,"MobileViTConfig"),nMt.forEach(t),sco=r(jRe," (MobileViT model)"),jRe.forEach(t),lco=i(L),Vg=n(L,"LI",{});var DRe=s(Vg);Zce=n(DRe,"STRONG",{});var sMt=s(Zce);ico=r(sMt,"mpnet"),sMt.forEach(t),dco=r(DRe," \u2014 "),iN=n(DRe,"A",{href:!0});var lMt=s(iN);cco=r(lMt,"MPNetConfig"),lMt.forEach(t),mco=r(DRe," (MPNet model)"),DRe.forEach(t),fco=i(L),Xg=n(L,"LI",{});var GRe=s(Xg);eme=n(GRe,"STRONG",{});var iMt=s(eme);gco=r(iMt,"mt5"),iMt.forEach(t),hco=r(GRe," \u2014 "),dN=n(GRe,"A",{href:!0});var dMt=s(dN);uco=r(dMt,"MT5Config"),dMt.forEach(t),pco=r(GRe," (MT5 model)"),GRe.forEach(t),_co=i(L),zg=n(L,"LI",{});var ORe=s(zg);ome=n(ORe,"STRONG",{});var cMt=s(ome);bco=r(cMt,"mvp"),cMt.forEach(t),vco=r(ORe," \u2014 "),cN=n(ORe,"A",{href:!0});var mMt=s(cN);Fco=r(mMt,"MvpConfig"),mMt.forEach(t),Tco=r(ORe," (MVP model)"),ORe.forEach(t),Mco=i(L),Qg=n(L,"LI",{});var VRe=s(Qg);rme=n(VRe,"STRONG",{});var fMt=s(rme);Eco=r(fMt,"nezha"),fMt.forEach(t),Cco=r(VRe," \u2014 "),mN=n(VRe,"A",{href:!0});var gMt=s(mN);wco=r(gMt,"NezhaConfig"),gMt.forEach(t),Aco=r(VRe," (Nezha model)"),VRe.forEach(t),Lco=i(L),Wg=n(L,"LI",{});var XRe=s(Wg);tme=n(XRe,"STRONG",{});var hMt=s(tme);yco=r(hMt,"nystromformer"),hMt.forEach(t),xco=r(XRe," \u2014 "),fN=n(XRe,"A",{href:!0});var uMt=s(fN);$co=r(uMt,"NystromformerConfig"),uMt.forEach(t),kco=r(XRe," (Nystr\xF6mformer model)"),XRe.forEach(t),Sco=i(L),Ug=n(L,"LI",{});var zRe=s(Ug);ame=n(zRe,"STRONG",{});var pMt=s(ame);Rco=r(pMt,"openai-gpt"),pMt.forEach(t),Pco=r(zRe," \u2014 "),gN=n(zRe,"A",{href:!0});var _Mt=s(gN);Bco=r(_Mt,"OpenAIGPTConfig"),_Mt.forEach(t),Ico=r(zRe," (OpenAI GPT model)"),zRe.forEach(t),Nco=i(L),Hg=n(L,"LI",{});var QRe=s(Hg);nme=n(QRe,"STRONG",{});var bMt=s(nme);qco=r(bMt,"opt"),bMt.forEach(t),jco=r(QRe," \u2014 "),hN=n(QRe,"A",{href:!0});var vMt=s(hN);Dco=r(vMt,"OPTConfig"),vMt.forEach(t),Gco=r(QRe," (OPT model)"),QRe.forEach(t),Oco=i(L),Jg=n(L,"LI",{});var WRe=s(Jg);sme=n(WRe,"STRONG",{});var FMt=s(sme);Vco=r(FMt,"owlvit"),FMt.forEach(t),Xco=r(WRe," \u2014 "),uN=n(WRe,"A",{href:!0});var TMt=s(uN);zco=r(TMt,"OwlViTConfig"),TMt.forEach(t),Qco=r(WRe," (OWL-ViT model)"),WRe.forEach(t),Wco=i(L),Yg=n(L,"LI",{});var URe=s(Yg);lme=n(URe,"STRONG",{});var MMt=s(lme);Uco=r(MMt,"pegasus"),MMt.forEach(t),Hco=r(URe," \u2014 "),pN=n(URe,"A",{href:!0});var EMt=s(pN);Jco=r(EMt,"PegasusConfig"),EMt.forEach(t),Yco=r(URe," (Pegasus model)"),URe.forEach(t),Kco=i(L),Kg=n(L,"LI",{});var HRe=s(Kg);ime=n(HRe,"STRONG",{});var CMt=s(ime);Zco=r(CMt,"pegasus_x"),CMt.forEach(t),emo=r(HRe," \u2014 "),_N=n(HRe,"A",{href:!0});var wMt=s(_N);omo=r(wMt,"PegasusXConfig"),wMt.forEach(t),rmo=r(HRe," (PEGASUS-X model)"),HRe.forEach(t),tmo=i(L),Zg=n(L,"LI",{});var JRe=s(Zg);dme=n(JRe,"STRONG",{});var AMt=s(dme);amo=r(AMt,"perceiver"),AMt.forEach(t),nmo=r(JRe," \u2014 "),bN=n(JRe,"A",{href:!0});var LMt=s(bN);smo=r(LMt,"PerceiverConfig"),LMt.forEach(t),lmo=r(JRe," (Perceiver model)"),JRe.forEach(t),imo=i(L),eh=n(L,"LI",{});var YRe=s(eh);cme=n(YRe,"STRONG",{});var yMt=s(cme);dmo=r(yMt,"plbart"),yMt.forEach(t),cmo=r(YRe," \u2014 "),vN=n(YRe,"A",{href:!0});var xMt=s(vN);mmo=r(xMt,"PLBartConfig"),xMt.forEach(t),fmo=r(YRe," (PLBart model)"),YRe.forEach(t),gmo=i(L),oh=n(L,"LI",{});var KRe=s(oh);mme=n(KRe,"STRONG",{});var $Mt=s(mme);hmo=r($Mt,"poolformer"),$Mt.forEach(t),umo=r(KRe," \u2014 "),FN=n(KRe,"A",{href:!0});var kMt=s(FN);pmo=r(kMt,"PoolFormerConfig"),kMt.forEach(t),_mo=r(KRe," (PoolFormer model)"),KRe.forEach(t),bmo=i(L),rh=n(L,"LI",{});var ZRe=s(rh);fme=n(ZRe,"STRONG",{});var SMt=s(fme);vmo=r(SMt,"prophetnet"),SMt.forEach(t),Fmo=r(ZRe," \u2014 "),TN=n(ZRe,"A",{href:!0});var RMt=s(TN);Tmo=r(RMt,"ProphetNetConfig"),RMt.forEach(t),Mmo=r(ZRe," (ProphetNet model)"),ZRe.forEach(t),Emo=i(L),th=n(L,"LI",{});var ePe=s(th);gme=n(ePe,"STRONG",{});var PMt=s(gme);Cmo=r(PMt,"qdqbert"),PMt.forEach(t),wmo=r(ePe," \u2014 "),MN=n(ePe,"A",{href:!0});var BMt=s(MN);Amo=r(BMt,"QDQBertConfig"),BMt.forEach(t),Lmo=r(ePe," (QDQBert model)"),ePe.forEach(t),ymo=i(L),ah=n(L,"LI",{});var oPe=s(ah);hme=n(oPe,"STRONG",{});var IMt=s(hme);xmo=r(IMt,"rag"),IMt.forEach(t),$mo=r(oPe," \u2014 "),EN=n(oPe,"A",{href:!0});var NMt=s(EN);kmo=r(NMt,"RagConfig"),NMt.forEach(t),Smo=r(oPe," (RAG model)"),oPe.forEach(t),Rmo=i(L),nh=n(L,"LI",{});var rPe=s(nh);ume=n(rPe,"STRONG",{});var qMt=s(ume);Pmo=r(qMt,"realm"),qMt.forEach(t),Bmo=r(rPe," \u2014 "),CN=n(rPe,"A",{href:!0});var jMt=s(CN);Imo=r(jMt,"RealmConfig"),jMt.forEach(t),Nmo=r(rPe," (REALM model)"),rPe.forEach(t),qmo=i(L),sh=n(L,"LI",{});var tPe=s(sh);pme=n(tPe,"STRONG",{});var DMt=s(pme);jmo=r(DMt,"reformer"),DMt.forEach(t),Dmo=r(tPe," \u2014 "),wN=n(tPe,"A",{href:!0});var GMt=s(wN);Gmo=r(GMt,"ReformerConfig"),GMt.forEach(t),Omo=r(tPe," (Reformer model)"),tPe.forEach(t),Vmo=i(L),lh=n(L,"LI",{});var aPe=s(lh);_me=n(aPe,"STRONG",{});var OMt=s(_me);Xmo=r(OMt,"regnet"),OMt.forEach(t),zmo=r(aPe," \u2014 "),AN=n(aPe,"A",{href:!0});var VMt=s(AN);Qmo=r(VMt,"RegNetConfig"),VMt.forEach(t),Wmo=r(aPe," (RegNet model)"),aPe.forEach(t),Umo=i(L),ih=n(L,"LI",{});var nPe=s(ih);bme=n(nPe,"STRONG",{});var XMt=s(bme);Hmo=r(XMt,"rembert"),XMt.forEach(t),Jmo=r(nPe," \u2014 "),LN=n(nPe,"A",{href:!0});var zMt=s(LN);Ymo=r(zMt,"RemBertConfig"),zMt.forEach(t),Kmo=r(nPe," (RemBERT model)"),nPe.forEach(t),Zmo=i(L),dh=n(L,"LI",{});var sPe=s(dh);vme=n(sPe,"STRONG",{});var QMt=s(vme);efo=r(QMt,"resnet"),QMt.forEach(t),ofo=r(sPe," \u2014 "),yN=n(sPe,"A",{href:!0});var WMt=s(yN);rfo=r(WMt,"ResNetConfig"),WMt.forEach(t),tfo=r(sPe," (ResNet model)"),sPe.forEach(t),afo=i(L),ch=n(L,"LI",{});var lPe=s(ch);Fme=n(lPe,"STRONG",{});var UMt=s(Fme);nfo=r(UMt,"retribert"),UMt.forEach(t),sfo=r(lPe," \u2014 "),xN=n(lPe,"A",{href:!0});var HMt=s(xN);lfo=r(HMt,"RetriBertConfig"),HMt.forEach(t),ifo=r(lPe," (RetriBERT model)"),lPe.forEach(t),dfo=i(L),mh=n(L,"LI",{});var iPe=s(mh);Tme=n(iPe,"STRONG",{});var JMt=s(Tme);cfo=r(JMt,"roberta"),JMt.forEach(t),mfo=r(iPe," \u2014 "),$N=n(iPe,"A",{href:!0});var YMt=s($N);ffo=r(YMt,"RobertaConfig"),YMt.forEach(t),gfo=r(iPe," (RoBERTa model)"),iPe.forEach(t),hfo=i(L),fh=n(L,"LI",{});var dPe=s(fh);Mme=n(dPe,"STRONG",{});var KMt=s(Mme);ufo=r(KMt,"roformer"),KMt.forEach(t),pfo=r(dPe," \u2014 "),kN=n(dPe,"A",{href:!0});var ZMt=s(kN);_fo=r(ZMt,"RoFormerConfig"),ZMt.forEach(t),bfo=r(dPe," (RoFormer model)"),dPe.forEach(t),vfo=i(L),gh=n(L,"LI",{});var cPe=s(gh);Eme=n(cPe,"STRONG",{});var eEt=s(Eme);Ffo=r(eEt,"segformer"),eEt.forEach(t),Tfo=r(cPe," \u2014 "),SN=n(cPe,"A",{href:!0});var oEt=s(SN);Mfo=r(oEt,"SegformerConfig"),oEt.forEach(t),Efo=r(cPe," (SegFormer model)"),cPe.forEach(t),Cfo=i(L),hh=n(L,"LI",{});var mPe=s(hh);Cme=n(mPe,"STRONG",{});var rEt=s(Cme);wfo=r(rEt,"sew"),rEt.forEach(t),Afo=r(mPe," \u2014 "),RN=n(mPe,"A",{href:!0});var tEt=s(RN);Lfo=r(tEt,"SEWConfig"),tEt.forEach(t),yfo=r(mPe," (SEW model)"),mPe.forEach(t),xfo=i(L),uh=n(L,"LI",{});var fPe=s(uh);wme=n(fPe,"STRONG",{});var aEt=s(wme);$fo=r(aEt,"sew-d"),aEt.forEach(t),kfo=r(fPe," \u2014 "),PN=n(fPe,"A",{href:!0});var nEt=s(PN);Sfo=r(nEt,"SEWDConfig"),nEt.forEach(t),Rfo=r(fPe," (SEW-D model)"),fPe.forEach(t),Pfo=i(L),ph=n(L,"LI",{});var gPe=s(ph);Ame=n(gPe,"STRONG",{});var sEt=s(Ame);Bfo=r(sEt,"speech-encoder-decoder"),sEt.forEach(t),Ifo=r(gPe," \u2014 "),BN=n(gPe,"A",{href:!0});var lEt=s(BN);Nfo=r(lEt,"SpeechEncoderDecoderConfig"),lEt.forEach(t),qfo=r(gPe," (Speech Encoder decoder model)"),gPe.forEach(t),jfo=i(L),_h=n(L,"LI",{});var hPe=s(_h);Lme=n(hPe,"STRONG",{});var iEt=s(Lme);Dfo=r(iEt,"speech_to_text"),iEt.forEach(t),Gfo=r(hPe," \u2014 "),IN=n(hPe,"A",{href:!0});var dEt=s(IN);Ofo=r(dEt,"Speech2TextConfig"),dEt.forEach(t),Vfo=r(hPe," (Speech2Text model)"),hPe.forEach(t),Xfo=i(L),bh=n(L,"LI",{});var uPe=s(bh);yme=n(uPe,"STRONG",{});var cEt=s(yme);zfo=r(cEt,"speech_to_text_2"),cEt.forEach(t),Qfo=r(uPe," \u2014 "),NN=n(uPe,"A",{href:!0});var mEt=s(NN);Wfo=r(mEt,"Speech2Text2Config"),mEt.forEach(t),Ufo=r(uPe," (Speech2Text2 model)"),uPe.forEach(t),Hfo=i(L),vh=n(L,"LI",{});var pPe=s(vh);xme=n(pPe,"STRONG",{});var fEt=s(xme);Jfo=r(fEt,"splinter"),fEt.forEach(t),Yfo=r(pPe," \u2014 "),qN=n(pPe,"A",{href:!0});var gEt=s(qN);Kfo=r(gEt,"SplinterConfig"),gEt.forEach(t),Zfo=r(pPe," (Splinter model)"),pPe.forEach(t),ego=i(L),Fh=n(L,"LI",{});var _Pe=s(Fh);$me=n(_Pe,"STRONG",{});var hEt=s($me);ogo=r(hEt,"squeezebert"),hEt.forEach(t),rgo=r(_Pe," \u2014 "),jN=n(_Pe,"A",{href:!0});var uEt=s(jN);tgo=r(uEt,"SqueezeBertConfig"),uEt.forEach(t),ago=r(_Pe," (SqueezeBERT model)"),_Pe.forEach(t),ngo=i(L),Th=n(L,"LI",{});var bPe=s(Th);kme=n(bPe,"STRONG",{});var pEt=s(kme);sgo=r(pEt,"swin"),pEt.forEach(t),lgo=r(bPe," \u2014 "),DN=n(bPe,"A",{href:!0});var _Et=s(DN);igo=r(_Et,"SwinConfig"),_Et.forEach(t),dgo=r(bPe," (Swin Transformer model)"),bPe.forEach(t),cgo=i(L),Mh=n(L,"LI",{});var vPe=s(Mh);Sme=n(vPe,"STRONG",{});var bEt=s(Sme);mgo=r(bEt,"swinv2"),bEt.forEach(t),fgo=r(vPe," \u2014 "),GN=n(vPe,"A",{href:!0});var vEt=s(GN);ggo=r(vEt,"Swinv2Config"),vEt.forEach(t),hgo=r(vPe," (Swin Transformer V2 model)"),vPe.forEach(t),ugo=i(L),Eh=n(L,"LI",{});var FPe=s(Eh);Rme=n(FPe,"STRONG",{});var FEt=s(Rme);pgo=r(FEt,"t5"),FEt.forEach(t),_go=r(FPe," \u2014 "),ON=n(FPe,"A",{href:!0});var TEt=s(ON);bgo=r(TEt,"T5Config"),TEt.forEach(t),vgo=r(FPe," (T5 model)"),FPe.forEach(t),Fgo=i(L),Ch=n(L,"LI",{});var TPe=s(Ch);Pme=n(TPe,"STRONG",{});var MEt=s(Pme);Tgo=r(MEt,"tapas"),MEt.forEach(t),Mgo=r(TPe," \u2014 "),VN=n(TPe,"A",{href:!0});var EEt=s(VN);Ego=r(EEt,"TapasConfig"),EEt.forEach(t),Cgo=r(TPe," (TAPAS model)"),TPe.forEach(t),wgo=i(L),wh=n(L,"LI",{});var MPe=s(wh);Bme=n(MPe,"STRONG",{});var CEt=s(Bme);Ago=r(CEt,"trajectory_transformer"),CEt.forEach(t),Lgo=r(MPe," \u2014 "),XN=n(MPe,"A",{href:!0});var wEt=s(XN);ygo=r(wEt,"TrajectoryTransformerConfig"),wEt.forEach(t),xgo=r(MPe," (Trajectory Transformer model)"),MPe.forEach(t),$go=i(L),Ah=n(L,"LI",{});var EPe=s(Ah);Ime=n(EPe,"STRONG",{});var AEt=s(Ime);kgo=r(AEt,"transfo-xl"),AEt.forEach(t),Sgo=r(EPe," \u2014 "),zN=n(EPe,"A",{href:!0});var LEt=s(zN);Rgo=r(LEt,"TransfoXLConfig"),LEt.forEach(t),Pgo=r(EPe," (Transformer-XL model)"),EPe.forEach(t),Bgo=i(L),Lh=n(L,"LI",{});var CPe=s(Lh);Nme=n(CPe,"STRONG",{});var yEt=s(Nme);Igo=r(yEt,"trocr"),yEt.forEach(t),Ngo=r(CPe," \u2014 "),QN=n(CPe,"A",{href:!0});var xEt=s(QN);qgo=r(xEt,"TrOCRConfig"),xEt.forEach(t),jgo=r(CPe," (TrOCR model)"),CPe.forEach(t),Dgo=i(L),yh=n(L,"LI",{});var wPe=s(yh);qme=n(wPe,"STRONG",{});var $Et=s(qme);Ggo=r($Et,"unispeech"),$Et.forEach(t),Ogo=r(wPe," \u2014 "),WN=n(wPe,"A",{href:!0});var kEt=s(WN);Vgo=r(kEt,"UniSpeechConfig"),kEt.forEach(t),Xgo=r(wPe," (UniSpeech model)"),wPe.forEach(t),zgo=i(L),xh=n(L,"LI",{});var APe=s(xh);jme=n(APe,"STRONG",{});var SEt=s(jme);Qgo=r(SEt,"unispeech-sat"),SEt.forEach(t),Wgo=r(APe," \u2014 "),UN=n(APe,"A",{href:!0});var REt=s(UN);Ugo=r(REt,"UniSpeechSatConfig"),REt.forEach(t),Hgo=r(APe," (UniSpeechSat model)"),APe.forEach(t),Jgo=i(L),$h=n(L,"LI",{});var LPe=s($h);Dme=n(LPe,"STRONG",{});var PEt=s(Dme);Ygo=r(PEt,"van"),PEt.forEach(t),Kgo=r(LPe," \u2014 "),HN=n(LPe,"A",{href:!0});var BEt=s(HN);Zgo=r(BEt,"VanConfig"),BEt.forEach(t),eho=r(LPe," (VAN model)"),LPe.forEach(t),oho=i(L),kh=n(L,"LI",{});var yPe=s(kh);Gme=n(yPe,"STRONG",{});var IEt=s(Gme);rho=r(IEt,"videomae"),IEt.forEach(t),tho=r(yPe," \u2014 "),JN=n(yPe,"A",{href:!0});var NEt=s(JN);aho=r(NEt,"VideoMAEConfig"),NEt.forEach(t),nho=r(yPe," (VideoMAE model)"),yPe.forEach(t),sho=i(L),Sh=n(L,"LI",{});var xPe=s(Sh);Ome=n(xPe,"STRONG",{});var qEt=s(Ome);lho=r(qEt,"vilt"),qEt.forEach(t),iho=r(xPe," \u2014 "),YN=n(xPe,"A",{href:!0});var jEt=s(YN);dho=r(jEt,"ViltConfig"),jEt.forEach(t),cho=r(xPe," (ViLT model)"),xPe.forEach(t),mho=i(L),Rh=n(L,"LI",{});var $Pe=s(Rh);Vme=n($Pe,"STRONG",{});var DEt=s(Vme);fho=r(DEt,"vision-encoder-decoder"),DEt.forEach(t),gho=r($Pe," \u2014 "),KN=n($Pe,"A",{href:!0});var GEt=s(KN);hho=r(GEt,"VisionEncoderDecoderConfig"),GEt.forEach(t),uho=r($Pe," (Vision Encoder decoder model)"),$Pe.forEach(t),pho=i(L),Ph=n(L,"LI",{});var kPe=s(Ph);Xme=n(kPe,"STRONG",{});var OEt=s(Xme);_ho=r(OEt,"vision-text-dual-encoder"),OEt.forEach(t),bho=r(kPe," \u2014 "),ZN=n(kPe,"A",{href:!0});var VEt=s(ZN);vho=r(VEt,"VisionTextDualEncoderConfig"),VEt.forEach(t),Fho=r(kPe," (VisionTextDualEncoder model)"),kPe.forEach(t),Tho=i(L),Bh=n(L,"LI",{});var SPe=s(Bh);zme=n(SPe,"STRONG",{});var XEt=s(zme);Mho=r(XEt,"visual_bert"),XEt.forEach(t),Eho=r(SPe," \u2014 "),eq=n(SPe,"A",{href:!0});var zEt=s(eq);Cho=r(zEt,"VisualBertConfig"),zEt.forEach(t),who=r(SPe," (VisualBERT model)"),SPe.forEach(t),Aho=i(L),Ih=n(L,"LI",{});var RPe=s(Ih);Qme=n(RPe,"STRONG",{});var QEt=s(Qme);Lho=r(QEt,"vit"),QEt.forEach(t),yho=r(RPe," \u2014 "),oq=n(RPe,"A",{href:!0});var WEt=s(oq);xho=r(WEt,"ViTConfig"),WEt.forEach(t),$ho=r(RPe," (ViT model)"),RPe.forEach(t),kho=i(L),Nh=n(L,"LI",{});var PPe=s(Nh);Wme=n(PPe,"STRONG",{});var UEt=s(Wme);Sho=r(UEt,"vit_mae"),UEt.forEach(t),Rho=r(PPe," \u2014 "),rq=n(PPe,"A",{href:!0});var HEt=s(rq);Pho=r(HEt,"ViTMAEConfig"),HEt.forEach(t),Bho=r(PPe," (ViTMAE model)"),PPe.forEach(t),Iho=i(L),qh=n(L,"LI",{});var BPe=s(qh);Ume=n(BPe,"STRONG",{});var JEt=s(Ume);Nho=r(JEt,"vit_msn"),JEt.forEach(t),qho=r(BPe," \u2014 "),tq=n(BPe,"A",{href:!0});var YEt=s(tq);jho=r(YEt,"ViTMSNConfig"),YEt.forEach(t),Dho=r(BPe," (ViTMSN model)"),BPe.forEach(t),Gho=i(L),jh=n(L,"LI",{});var IPe=s(jh);Hme=n(IPe,"STRONG",{});var KEt=s(Hme);Oho=r(KEt,"wav2vec2"),KEt.forEach(t),Vho=r(IPe," \u2014 "),aq=n(IPe,"A",{href:!0});var ZEt=s(aq);Xho=r(ZEt,"Wav2Vec2Config"),ZEt.forEach(t),zho=r(IPe," (Wav2Vec2 model)"),IPe.forEach(t),Qho=i(L),Dh=n(L,"LI",{});var NPe=s(Dh);Jme=n(NPe,"STRONG",{});var e4t=s(Jme);Who=r(e4t,"wav2vec2-conformer"),e4t.forEach(t),Uho=r(NPe," \u2014 "),nq=n(NPe,"A",{href:!0});var o4t=s(nq);Hho=r(o4t,"Wav2Vec2ConformerConfig"),o4t.forEach(t),Jho=r(NPe," (Wav2Vec2-Conformer model)"),NPe.forEach(t),Yho=i(L),Gh=n(L,"LI",{});var qPe=s(Gh);Yme=n(qPe,"STRONG",{});var r4t=s(Yme);Kho=r(r4t,"wavlm"),r4t.forEach(t),Zho=r(qPe," \u2014 "),sq=n(qPe,"A",{href:!0});var t4t=s(sq);euo=r(t4t,"WavLMConfig"),t4t.forEach(t),ouo=r(qPe," (WavLM model)"),qPe.forEach(t),ruo=i(L),Oh=n(L,"LI",{});var jPe=s(Oh);Kme=n(jPe,"STRONG",{});var a4t=s(Kme);tuo=r(a4t,"xclip"),a4t.forEach(t),auo=r(jPe," \u2014 "),lq=n(jPe,"A",{href:!0});var n4t=s(lq);nuo=r(n4t,"XCLIPConfig"),n4t.forEach(t),suo=r(jPe," (X-CLIP model)"),jPe.forEach(t),luo=i(L),Vh=n(L,"LI",{});var DPe=s(Vh);Zme=n(DPe,"STRONG",{});var s4t=s(Zme);iuo=r(s4t,"xglm"),s4t.forEach(t),duo=r(DPe," \u2014 "),iq=n(DPe,"A",{href:!0});var l4t=s(iq);cuo=r(l4t,"XGLMConfig"),l4t.forEach(t),muo=r(DPe," (XGLM model)"),DPe.forEach(t),fuo=i(L),Xh=n(L,"LI",{});var GPe=s(Xh);efe=n(GPe,"STRONG",{});var i4t=s(efe);guo=r(i4t,"xlm"),i4t.forEach(t),huo=r(GPe," \u2014 "),dq=n(GPe,"A",{href:!0});var d4t=s(dq);uuo=r(d4t,"XLMConfig"),d4t.forEach(t),puo=r(GPe," (XLM model)"),GPe.forEach(t),_uo=i(L),zh=n(L,"LI",{});var OPe=s(zh);ofe=n(OPe,"STRONG",{});var c4t=s(ofe);buo=r(c4t,"xlm-prophetnet"),c4t.forEach(t),vuo=r(OPe," \u2014 "),cq=n(OPe,"A",{href:!0});var m4t=s(cq);Fuo=r(m4t,"XLMProphetNetConfig"),m4t.forEach(t),Tuo=r(OPe," (XLM-ProphetNet model)"),OPe.forEach(t),Muo=i(L),Qh=n(L,"LI",{});var VPe=s(Qh);rfe=n(VPe,"STRONG",{});var f4t=s(rfe);Euo=r(f4t,"xlm-roberta"),f4t.forEach(t),Cuo=r(VPe," \u2014 "),mq=n(VPe,"A",{href:!0});var g4t=s(mq);wuo=r(g4t,"XLMRobertaConfig"),g4t.forEach(t),Auo=r(VPe," (XLM-RoBERTa model)"),VPe.forEach(t),Luo=i(L),Wh=n(L,"LI",{});var XPe=s(Wh);tfe=n(XPe,"STRONG",{});var h4t=s(tfe);yuo=r(h4t,"xlm-roberta-xl"),h4t.forEach(t),xuo=r(XPe," \u2014 "),fq=n(XPe,"A",{href:!0});var u4t=s(fq);$uo=r(u4t,"XLMRobertaXLConfig"),u4t.forEach(t),kuo=r(XPe," (XLM-RoBERTa-XL model)"),XPe.forEach(t),Suo=i(L),Uh=n(L,"LI",{});var zPe=s(Uh);afe=n(zPe,"STRONG",{});var p4t=s(afe);Ruo=r(p4t,"xlnet"),p4t.forEach(t),Puo=r(zPe," \u2014 "),gq=n(zPe,"A",{href:!0});var _4t=s(gq);Buo=r(_4t,"XLNetConfig"),_4t.forEach(t),Iuo=r(zPe," (XLNet model)"),zPe.forEach(t),Nuo=i(L),Hh=n(L,"LI",{});var QPe=s(Hh);nfe=n(QPe,"STRONG",{});var b4t=s(nfe);quo=r(b4t,"yolos"),b4t.forEach(t),juo=r(QPe," \u2014 "),hq=n(QPe,"A",{href:!0});var v4t=s(hq);Duo=r(v4t,"YolosConfig"),v4t.forEach(t),Guo=r(QPe," (YOLOS model)"),QPe.forEach(t),Ouo=i(L),Jh=n(L,"LI",{});var WPe=s(Jh);sfe=n(WPe,"STRONG",{});var F4t=s(sfe);Vuo=r(F4t,"yoso"),F4t.forEach(t),Xuo=r(WPe," \u2014 "),uq=n(WPe,"A",{href:!0});var T4t=s(uq);zuo=r(T4t,"YosoConfig"),T4t.forEach(t),Quo=r(WPe," (YOSO model)"),WPe.forEach(t),L.forEach(t),Wuo=i(ut),T(Yh.$$.fragment,ut),ut.forEach(t),Uuo=i(ht),Kh=n(ht,"DIV",{class:!0});var soo=s(Kh);T(H9.$$.fragment,soo),Huo=i(soo),lfe=n(soo,"P",{});var M4t=s(lfe);Juo=r(M4t,"Register a new configuration for this class."),M4t.forEach(t),soo.forEach(t),ht.forEach(t),ZKe=i(m),gd=n(m,"H2",{class:!0});var loo=s(gd);Zh=n(loo,"A",{id:!0,class:!0,href:!0});var E4t=s(Zh);ife=n(E4t,"SPAN",{});var C4t=s(ife);T(J9.$$.fragment,C4t),C4t.forEach(t),E4t.forEach(t),Yuo=i(loo),dfe=n(loo,"SPAN",{});var w4t=s(dfe);Kuo=r(w4t,"AutoTokenizer"),w4t.forEach(t),loo.forEach(t),eZe=i(m),ko=n(m,"DIV",{class:!0});var Ml=s(ko);T(Y9.$$.fragment,Ml),Zuo=i(Ml),K9=n(Ml,"P",{});var ioo=s(K9);epo=r(ioo,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pq=n(ioo,"A",{href:!0});var A4t=s(pq);opo=r(A4t,"AutoTokenizer.from_pretrained()"),A4t.forEach(t),rpo=r(ioo," class method."),ioo.forEach(t),tpo=i(Ml),Z9=n(Ml,"P",{});var doo=s(Z9);apo=r(doo,"This class cannot be instantiated directly using "),cfe=n(doo,"CODE",{});var L4t=s(cfe);npo=r(L4t,"__init__()"),L4t.forEach(t),spo=r(doo," (throws an error)."),doo.forEach(t),lpo=i(Ml),Br=n(Ml,"DIV",{class:!0});var El=s(Br);T(ex.$$.fragment,El),ipo=i(El),mfe=n(El,"P",{});var y4t=s(mfe);dpo=r(y4t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),y4t.forEach(t),cpo=i(El),Ua=n(El,"P",{});var Py=s(Ua);mpo=r(Py,"The tokenizer class to instantiate is selected based on the "),ffe=n(Py,"CODE",{});var x4t=s(ffe);fpo=r(x4t,"model_type"),x4t.forEach(t),gpo=r(Py,` property of the config object (either
passed as an argument or loaded from `),gfe=n(Py,"CODE",{});var $4t=s(gfe);hpo=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),upo=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=n(Py,"CODE",{});var k4t=s(hfe);ppo=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),_po=r(Py,":"),Py.forEach(t),bpo=i(El),k=n(El,"UL",{});var S=s(k);ns=n(S,"LI",{});var wP=s(ns);ufe=n(wP,"STRONG",{});var S4t=s(ufe);vpo=r(S4t,"albert"),S4t.forEach(t),Fpo=r(wP," \u2014 "),_q=n(wP,"A",{href:!0});var R4t=s(_q);Tpo=r(R4t,"AlbertTokenizer"),R4t.forEach(t),Mpo=r(wP," or "),bq=n(wP,"A",{href:!0});var P4t=s(bq);Epo=r(P4t,"AlbertTokenizerFast"),P4t.forEach(t),Cpo=r(wP," (ALBERT model)"),wP.forEach(t),wpo=i(S),ss=n(S,"LI",{});var AP=s(ss);pfe=n(AP,"STRONG",{});var B4t=s(pfe);Apo=r(B4t,"bart"),B4t.forEach(t),Lpo=r(AP," \u2014 "),vq=n(AP,"A",{href:!0});var I4t=s(vq);ypo=r(I4t,"BartTokenizer"),I4t.forEach(t),xpo=r(AP," or "),Fq=n(AP,"A",{href:!0});var N4t=s(Fq);$po=r(N4t,"BartTokenizerFast"),N4t.forEach(t),kpo=r(AP," (BART model)"),AP.forEach(t),Spo=i(S),ls=n(S,"LI",{});var LP=s(ls);_fe=n(LP,"STRONG",{});var q4t=s(_fe);Rpo=r(q4t,"barthez"),q4t.forEach(t),Ppo=r(LP," \u2014 "),Tq=n(LP,"A",{href:!0});var j4t=s(Tq);Bpo=r(j4t,"BarthezTokenizer"),j4t.forEach(t),Ipo=r(LP," or "),Mq=n(LP,"A",{href:!0});var D4t=s(Mq);Npo=r(D4t,"BarthezTokenizerFast"),D4t.forEach(t),qpo=r(LP," (BARThez model)"),LP.forEach(t),jpo=i(S),eu=n(S,"LI",{});var UPe=s(eu);bfe=n(UPe,"STRONG",{});var G4t=s(bfe);Dpo=r(G4t,"bartpho"),G4t.forEach(t),Gpo=r(UPe," \u2014 "),Eq=n(UPe,"A",{href:!0});var O4t=s(Eq);Opo=r(O4t,"BartphoTokenizer"),O4t.forEach(t),Vpo=r(UPe," (BARTpho model)"),UPe.forEach(t),Xpo=i(S),is=n(S,"LI",{});var yP=s(is);vfe=n(yP,"STRONG",{});var V4t=s(vfe);zpo=r(V4t,"bert"),V4t.forEach(t),Qpo=r(yP," \u2014 "),Cq=n(yP,"A",{href:!0});var X4t=s(Cq);Wpo=r(X4t,"BertTokenizer"),X4t.forEach(t),Upo=r(yP," or "),wq=n(yP,"A",{href:!0});var z4t=s(wq);Hpo=r(z4t,"BertTokenizerFast"),z4t.forEach(t),Jpo=r(yP," (BERT model)"),yP.forEach(t),Ypo=i(S),ou=n(S,"LI",{});var HPe=s(ou);Ffe=n(HPe,"STRONG",{});var Q4t=s(Ffe);Kpo=r(Q4t,"bert-generation"),Q4t.forEach(t),Zpo=r(HPe," \u2014 "),Aq=n(HPe,"A",{href:!0});var W4t=s(Aq);e_o=r(W4t,"BertGenerationTokenizer"),W4t.forEach(t),o_o=r(HPe," (Bert Generation model)"),HPe.forEach(t),r_o=i(S),ru=n(S,"LI",{});var JPe=s(ru);Tfe=n(JPe,"STRONG",{});var U4t=s(Tfe);t_o=r(U4t,"bert-japanese"),U4t.forEach(t),a_o=r(JPe," \u2014 "),Lq=n(JPe,"A",{href:!0});var H4t=s(Lq);n_o=r(H4t,"BertJapaneseTokenizer"),H4t.forEach(t),s_o=r(JPe," (BertJapanese model)"),JPe.forEach(t),l_o=i(S),tu=n(S,"LI",{});var YPe=s(tu);Mfe=n(YPe,"STRONG",{});var J4t=s(Mfe);i_o=r(J4t,"bertweet"),J4t.forEach(t),d_o=r(YPe," \u2014 "),yq=n(YPe,"A",{href:!0});var Y4t=s(yq);c_o=r(Y4t,"BertweetTokenizer"),Y4t.forEach(t),m_o=r(YPe," (BERTweet model)"),YPe.forEach(t),f_o=i(S),ds=n(S,"LI",{});var xP=s(ds);Efe=n(xP,"STRONG",{});var K4t=s(Efe);g_o=r(K4t,"big_bird"),K4t.forEach(t),h_o=r(xP," \u2014 "),xq=n(xP,"A",{href:!0});var Z4t=s(xq);u_o=r(Z4t,"BigBirdTokenizer"),Z4t.forEach(t),p_o=r(xP," or "),$q=n(xP,"A",{href:!0});var eCt=s($q);__o=r(eCt,"BigBirdTokenizerFast"),eCt.forEach(t),b_o=r(xP," (BigBird model)"),xP.forEach(t),v_o=i(S),cs=n(S,"LI",{});var $P=s(cs);Cfe=n($P,"STRONG",{});var oCt=s(Cfe);F_o=r(oCt,"bigbird_pegasus"),oCt.forEach(t),T_o=r($P," \u2014 "),kq=n($P,"A",{href:!0});var rCt=s(kq);M_o=r(rCt,"PegasusTokenizer"),rCt.forEach(t),E_o=r($P," or "),Sq=n($P,"A",{href:!0});var tCt=s(Sq);C_o=r(tCt,"PegasusTokenizerFast"),tCt.forEach(t),w_o=r($P," (BigBird-Pegasus model)"),$P.forEach(t),A_o=i(S),ms=n(S,"LI",{});var kP=s(ms);wfe=n(kP,"STRONG",{});var aCt=s(wfe);L_o=r(aCt,"blenderbot"),aCt.forEach(t),y_o=r(kP," \u2014 "),Rq=n(kP,"A",{href:!0});var nCt=s(Rq);x_o=r(nCt,"BlenderbotTokenizer"),nCt.forEach(t),$_o=r(kP," or "),Pq=n(kP,"A",{href:!0});var sCt=s(Pq);k_o=r(sCt,"BlenderbotTokenizerFast"),sCt.forEach(t),S_o=r(kP," (Blenderbot model)"),kP.forEach(t),R_o=i(S),au=n(S,"LI",{});var KPe=s(au);Afe=n(KPe,"STRONG",{});var lCt=s(Afe);P_o=r(lCt,"blenderbot-small"),lCt.forEach(t),B_o=r(KPe," \u2014 "),Bq=n(KPe,"A",{href:!0});var iCt=s(Bq);I_o=r(iCt,"BlenderbotSmallTokenizer"),iCt.forEach(t),N_o=r(KPe," (BlenderbotSmall model)"),KPe.forEach(t),q_o=i(S),nu=n(S,"LI",{});var ZPe=s(nu);Lfe=n(ZPe,"STRONG",{});var dCt=s(Lfe);j_o=r(dCt,"bloom"),dCt.forEach(t),D_o=r(ZPe," \u2014 "),Iq=n(ZPe,"A",{href:!0});var cCt=s(Iq);G_o=r(cCt,"BloomTokenizerFast"),cCt.forEach(t),O_o=r(ZPe," (BLOOM model)"),ZPe.forEach(t),V_o=i(S),su=n(S,"LI",{});var eBe=s(su);yfe=n(eBe,"STRONG",{});var mCt=s(yfe);X_o=r(mCt,"byt5"),mCt.forEach(t),z_o=r(eBe," \u2014 "),Nq=n(eBe,"A",{href:!0});var fCt=s(Nq);Q_o=r(fCt,"ByT5Tokenizer"),fCt.forEach(t),W_o=r(eBe," (ByT5 model)"),eBe.forEach(t),U_o=i(S),fs=n(S,"LI",{});var SP=s(fs);xfe=n(SP,"STRONG",{});var gCt=s(xfe);H_o=r(gCt,"camembert"),gCt.forEach(t),J_o=r(SP," \u2014 "),qq=n(SP,"A",{href:!0});var hCt=s(qq);Y_o=r(hCt,"CamembertTokenizer"),hCt.forEach(t),K_o=r(SP," or "),jq=n(SP,"A",{href:!0});var uCt=s(jq);Z_o=r(uCt,"CamembertTokenizerFast"),uCt.forEach(t),ebo=r(SP," (CamemBERT model)"),SP.forEach(t),obo=i(S),lu=n(S,"LI",{});var oBe=s(lu);$fe=n(oBe,"STRONG",{});var pCt=s($fe);rbo=r(pCt,"canine"),pCt.forEach(t),tbo=r(oBe," \u2014 "),Dq=n(oBe,"A",{href:!0});var _Ct=s(Dq);abo=r(_Ct,"CanineTokenizer"),_Ct.forEach(t),nbo=r(oBe," (CANINE model)"),oBe.forEach(t),sbo=i(S),gs=n(S,"LI",{});var RP=s(gs);kfe=n(RP,"STRONG",{});var bCt=s(kfe);lbo=r(bCt,"clip"),bCt.forEach(t),ibo=r(RP," \u2014 "),Gq=n(RP,"A",{href:!0});var vCt=s(Gq);dbo=r(vCt,"CLIPTokenizer"),vCt.forEach(t),cbo=r(RP," or "),Oq=n(RP,"A",{href:!0});var FCt=s(Oq);mbo=r(FCt,"CLIPTokenizerFast"),FCt.forEach(t),fbo=r(RP," (CLIP model)"),RP.forEach(t),gbo=i(S),hs=n(S,"LI",{});var PP=s(hs);Sfe=n(PP,"STRONG",{});var TCt=s(Sfe);hbo=r(TCt,"codegen"),TCt.forEach(t),ubo=r(PP," \u2014 "),Vq=n(PP,"A",{href:!0});var MCt=s(Vq);pbo=r(MCt,"CodeGenTokenizer"),MCt.forEach(t),_bo=r(PP," or "),Xq=n(PP,"A",{href:!0});var ECt=s(Xq);bbo=r(ECt,"CodeGenTokenizerFast"),ECt.forEach(t),vbo=r(PP," (CodeGen model)"),PP.forEach(t),Fbo=i(S),us=n(S,"LI",{});var BP=s(us);Rfe=n(BP,"STRONG",{});var CCt=s(Rfe);Tbo=r(CCt,"convbert"),CCt.forEach(t),Mbo=r(BP," \u2014 "),zq=n(BP,"A",{href:!0});var wCt=s(zq);Ebo=r(wCt,"ConvBertTokenizer"),wCt.forEach(t),Cbo=r(BP," or "),Qq=n(BP,"A",{href:!0});var ACt=s(Qq);wbo=r(ACt,"ConvBertTokenizerFast"),ACt.forEach(t),Abo=r(BP," (ConvBERT model)"),BP.forEach(t),Lbo=i(S),ps=n(S,"LI",{});var IP=s(ps);Pfe=n(IP,"STRONG",{});var LCt=s(Pfe);ybo=r(LCt,"cpm"),LCt.forEach(t),xbo=r(IP," \u2014 "),Wq=n(IP,"A",{href:!0});var yCt=s(Wq);$bo=r(yCt,"CpmTokenizer"),yCt.forEach(t),kbo=r(IP," or "),Uq=n(IP,"A",{href:!0});var xCt=s(Uq);Sbo=r(xCt,"CpmTokenizerFast"),xCt.forEach(t),Rbo=r(IP," (CPM model)"),IP.forEach(t),Pbo=i(S),iu=n(S,"LI",{});var rBe=s(iu);Bfe=n(rBe,"STRONG",{});var $Ct=s(Bfe);Bbo=r($Ct,"ctrl"),$Ct.forEach(t),Ibo=r(rBe," \u2014 "),Hq=n(rBe,"A",{href:!0});var kCt=s(Hq);Nbo=r(kCt,"CTRLTokenizer"),kCt.forEach(t),qbo=r(rBe," (CTRL model)"),rBe.forEach(t),jbo=i(S),_s=n(S,"LI",{});var NP=s(_s);Ife=n(NP,"STRONG",{});var SCt=s(Ife);Dbo=r(SCt,"data2vec-text"),SCt.forEach(t),Gbo=r(NP," \u2014 "),Jq=n(NP,"A",{href:!0});var RCt=s(Jq);Obo=r(RCt,"RobertaTokenizer"),RCt.forEach(t),Vbo=r(NP," or "),Yq=n(NP,"A",{href:!0});var PCt=s(Yq);Xbo=r(PCt,"RobertaTokenizerFast"),PCt.forEach(t),zbo=r(NP," (Data2VecText model)"),NP.forEach(t),Qbo=i(S),bs=n(S,"LI",{});var qP=s(bs);Nfe=n(qP,"STRONG",{});var BCt=s(Nfe);Wbo=r(BCt,"deberta"),BCt.forEach(t),Ubo=r(qP," \u2014 "),Kq=n(qP,"A",{href:!0});var ICt=s(Kq);Hbo=r(ICt,"DebertaTokenizer"),ICt.forEach(t),Jbo=r(qP," or "),Zq=n(qP,"A",{href:!0});var NCt=s(Zq);Ybo=r(NCt,"DebertaTokenizerFast"),NCt.forEach(t),Kbo=r(qP," (DeBERTa model)"),qP.forEach(t),Zbo=i(S),vs=n(S,"LI",{});var jP=s(vs);qfe=n(jP,"STRONG",{});var qCt=s(qfe);e2o=r(qCt,"deberta-v2"),qCt.forEach(t),o2o=r(jP," \u2014 "),ej=n(jP,"A",{href:!0});var jCt=s(ej);r2o=r(jCt,"DebertaV2Tokenizer"),jCt.forEach(t),t2o=r(jP," or "),oj=n(jP,"A",{href:!0});var DCt=s(oj);a2o=r(DCt,"DebertaV2TokenizerFast"),DCt.forEach(t),n2o=r(jP," (DeBERTa-v2 model)"),jP.forEach(t),s2o=i(S),Fs=n(S,"LI",{});var DP=s(Fs);jfe=n(DP,"STRONG",{});var GCt=s(jfe);l2o=r(GCt,"distilbert"),GCt.forEach(t),i2o=r(DP," \u2014 "),rj=n(DP,"A",{href:!0});var OCt=s(rj);d2o=r(OCt,"DistilBertTokenizer"),OCt.forEach(t),c2o=r(DP," or "),tj=n(DP,"A",{href:!0});var VCt=s(tj);m2o=r(VCt,"DistilBertTokenizerFast"),VCt.forEach(t),f2o=r(DP," (DistilBERT model)"),DP.forEach(t),g2o=i(S),Ts=n(S,"LI",{});var GP=s(Ts);Dfe=n(GP,"STRONG",{});var XCt=s(Dfe);h2o=r(XCt,"dpr"),XCt.forEach(t),u2o=r(GP," \u2014 "),aj=n(GP,"A",{href:!0});var zCt=s(aj);p2o=r(zCt,"DPRQuestionEncoderTokenizer"),zCt.forEach(t),_2o=r(GP," or "),nj=n(GP,"A",{href:!0});var QCt=s(nj);b2o=r(QCt,"DPRQuestionEncoderTokenizerFast"),QCt.forEach(t),v2o=r(GP," (DPR model)"),GP.forEach(t),F2o=i(S),Ms=n(S,"LI",{});var OP=s(Ms);Gfe=n(OP,"STRONG",{});var WCt=s(Gfe);T2o=r(WCt,"electra"),WCt.forEach(t),M2o=r(OP," \u2014 "),sj=n(OP,"A",{href:!0});var UCt=s(sj);E2o=r(UCt,"ElectraTokenizer"),UCt.forEach(t),C2o=r(OP," or "),lj=n(OP,"A",{href:!0});var HCt=s(lj);w2o=r(HCt,"ElectraTokenizerFast"),HCt.forEach(t),A2o=r(OP," (ELECTRA model)"),OP.forEach(t),L2o=i(S),Es=n(S,"LI",{});var VP=s(Es);Ofe=n(VP,"STRONG",{});var JCt=s(Ofe);y2o=r(JCt,"ernie"),JCt.forEach(t),x2o=r(VP," \u2014 "),ij=n(VP,"A",{href:!0});var YCt=s(ij);$2o=r(YCt,"BertTokenizer"),YCt.forEach(t),k2o=r(VP," or "),dj=n(VP,"A",{href:!0});var KCt=s(dj);S2o=r(KCt,"BertTokenizerFast"),KCt.forEach(t),R2o=r(VP," (ERNIE model)"),VP.forEach(t),P2o=i(S),du=n(S,"LI",{});var tBe=s(du);Vfe=n(tBe,"STRONG",{});var ZCt=s(Vfe);B2o=r(ZCt,"flaubert"),ZCt.forEach(t),I2o=r(tBe," \u2014 "),cj=n(tBe,"A",{href:!0});var e3t=s(cj);N2o=r(e3t,"FlaubertTokenizer"),e3t.forEach(t),q2o=r(tBe," (FlauBERT model)"),tBe.forEach(t),j2o=i(S),Cs=n(S,"LI",{});var XP=s(Cs);Xfe=n(XP,"STRONG",{});var o3t=s(Xfe);D2o=r(o3t,"fnet"),o3t.forEach(t),G2o=r(XP," \u2014 "),mj=n(XP,"A",{href:!0});var r3t=s(mj);O2o=r(r3t,"FNetTokenizer"),r3t.forEach(t),V2o=r(XP," or "),fj=n(XP,"A",{href:!0});var t3t=s(fj);X2o=r(t3t,"FNetTokenizerFast"),t3t.forEach(t),z2o=r(XP," (FNet model)"),XP.forEach(t),Q2o=i(S),cu=n(S,"LI",{});var aBe=s(cu);zfe=n(aBe,"STRONG",{});var a3t=s(zfe);W2o=r(a3t,"fsmt"),a3t.forEach(t),U2o=r(aBe," \u2014 "),gj=n(aBe,"A",{href:!0});var n3t=s(gj);H2o=r(n3t,"FSMTTokenizer"),n3t.forEach(t),J2o=r(aBe," (FairSeq Machine-Translation model)"),aBe.forEach(t),Y2o=i(S),ws=n(S,"LI",{});var zP=s(ws);Qfe=n(zP,"STRONG",{});var s3t=s(Qfe);K2o=r(s3t,"funnel"),s3t.forEach(t),Z2o=r(zP," \u2014 "),hj=n(zP,"A",{href:!0});var l3t=s(hj);e1o=r(l3t,"FunnelTokenizer"),l3t.forEach(t),o1o=r(zP," or "),uj=n(zP,"A",{href:!0});var i3t=s(uj);r1o=r(i3t,"FunnelTokenizerFast"),i3t.forEach(t),t1o=r(zP," (Funnel Transformer model)"),zP.forEach(t),a1o=i(S),As=n(S,"LI",{});var QP=s(As);Wfe=n(QP,"STRONG",{});var d3t=s(Wfe);n1o=r(d3t,"gpt2"),d3t.forEach(t),s1o=r(QP," \u2014 "),pj=n(QP,"A",{href:!0});var c3t=s(pj);l1o=r(c3t,"GPT2Tokenizer"),c3t.forEach(t),i1o=r(QP," or "),_j=n(QP,"A",{href:!0});var m3t=s(_j);d1o=r(m3t,"GPT2TokenizerFast"),m3t.forEach(t),c1o=r(QP," (OpenAI GPT-2 model)"),QP.forEach(t),m1o=i(S),Ls=n(S,"LI",{});var WP=s(Ls);Ufe=n(WP,"STRONG",{});var f3t=s(Ufe);f1o=r(f3t,"gpt_neo"),f3t.forEach(t),g1o=r(WP," \u2014 "),bj=n(WP,"A",{href:!0});var g3t=s(bj);h1o=r(g3t,"GPT2Tokenizer"),g3t.forEach(t),u1o=r(WP," or "),vj=n(WP,"A",{href:!0});var h3t=s(vj);p1o=r(h3t,"GPT2TokenizerFast"),h3t.forEach(t),_1o=r(WP," (GPT Neo model)"),WP.forEach(t),b1o=i(S),mu=n(S,"LI",{});var nBe=s(mu);Hfe=n(nBe,"STRONG",{});var u3t=s(Hfe);v1o=r(u3t,"gpt_neox"),u3t.forEach(t),F1o=r(nBe," \u2014 "),Fj=n(nBe,"A",{href:!0});var p3t=s(Fj);T1o=r(p3t,"GPTNeoXTokenizerFast"),p3t.forEach(t),M1o=r(nBe," (GPT NeoX model)"),nBe.forEach(t),E1o=i(S),fu=n(S,"LI",{});var sBe=s(fu);Jfe=n(sBe,"STRONG",{});var _3t=s(Jfe);C1o=r(_3t,"gpt_neox_japanese"),_3t.forEach(t),w1o=r(sBe," \u2014 "),Tj=n(sBe,"A",{href:!0});var b3t=s(Tj);A1o=r(b3t,"GPTNeoXJapaneseTokenizer"),b3t.forEach(t),L1o=r(sBe," (GPT NeoX Japanese model)"),sBe.forEach(t),y1o=i(S),ys=n(S,"LI",{});var UP=s(ys);Yfe=n(UP,"STRONG",{});var v3t=s(Yfe);x1o=r(v3t,"gptj"),v3t.forEach(t),$1o=r(UP," \u2014 "),Mj=n(UP,"A",{href:!0});var F3t=s(Mj);k1o=r(F3t,"GPT2Tokenizer"),F3t.forEach(t),S1o=r(UP," or "),Ej=n(UP,"A",{href:!0});var T3t=s(Ej);R1o=r(T3t,"GPT2TokenizerFast"),T3t.forEach(t),P1o=r(UP," (GPT-J model)"),UP.forEach(t),B1o=i(S),xs=n(S,"LI",{});var HP=s(xs);Kfe=n(HP,"STRONG",{});var M3t=s(Kfe);I1o=r(M3t,"groupvit"),M3t.forEach(t),N1o=r(HP," \u2014 "),Cj=n(HP,"A",{href:!0});var E3t=s(Cj);q1o=r(E3t,"CLIPTokenizer"),E3t.forEach(t),j1o=r(HP," or "),wj=n(HP,"A",{href:!0});var C3t=s(wj);D1o=r(C3t,"CLIPTokenizerFast"),C3t.forEach(t),G1o=r(HP," (GroupViT model)"),HP.forEach(t),O1o=i(S),$s=n(S,"LI",{});var JP=s($s);Zfe=n(JP,"STRONG",{});var w3t=s(Zfe);V1o=r(w3t,"herbert"),w3t.forEach(t),X1o=r(JP," \u2014 "),Aj=n(JP,"A",{href:!0});var A3t=s(Aj);z1o=r(A3t,"HerbertTokenizer"),A3t.forEach(t),Q1o=r(JP," or "),Lj=n(JP,"A",{href:!0});var L3t=s(Lj);W1o=r(L3t,"HerbertTokenizerFast"),L3t.forEach(t),U1o=r(JP," (HerBERT model)"),JP.forEach(t),H1o=i(S),gu=n(S,"LI",{});var lBe=s(gu);ege=n(lBe,"STRONG",{});var y3t=s(ege);J1o=r(y3t,"hubert"),y3t.forEach(t),Y1o=r(lBe," \u2014 "),yj=n(lBe,"A",{href:!0});var x3t=s(yj);K1o=r(x3t,"Wav2Vec2CTCTokenizer"),x3t.forEach(t),Z1o=r(lBe," (Hubert model)"),lBe.forEach(t),evo=i(S),ks=n(S,"LI",{});var YP=s(ks);oge=n(YP,"STRONG",{});var $3t=s(oge);ovo=r($3t,"ibert"),$3t.forEach(t),rvo=r(YP," \u2014 "),xj=n(YP,"A",{href:!0});var k3t=s(xj);tvo=r(k3t,"RobertaTokenizer"),k3t.forEach(t),avo=r(YP," or "),$j=n(YP,"A",{href:!0});var S3t=s($j);nvo=r(S3t,"RobertaTokenizerFast"),S3t.forEach(t),svo=r(YP," (I-BERT model)"),YP.forEach(t),lvo=i(S),Ss=n(S,"LI",{});var KP=s(Ss);rge=n(KP,"STRONG",{});var R3t=s(rge);ivo=r(R3t,"layoutlm"),R3t.forEach(t),dvo=r(KP," \u2014 "),kj=n(KP,"A",{href:!0});var P3t=s(kj);cvo=r(P3t,"LayoutLMTokenizer"),P3t.forEach(t),mvo=r(KP," or "),Sj=n(KP,"A",{href:!0});var B3t=s(Sj);fvo=r(B3t,"LayoutLMTokenizerFast"),B3t.forEach(t),gvo=r(KP," (LayoutLM model)"),KP.forEach(t),hvo=i(S),Rs=n(S,"LI",{});var ZP=s(Rs);tge=n(ZP,"STRONG",{});var I3t=s(tge);uvo=r(I3t,"layoutlmv2"),I3t.forEach(t),pvo=r(ZP," \u2014 "),Rj=n(ZP,"A",{href:!0});var N3t=s(Rj);_vo=r(N3t,"LayoutLMv2Tokenizer"),N3t.forEach(t),bvo=r(ZP," or "),Pj=n(ZP,"A",{href:!0});var q3t=s(Pj);vvo=r(q3t,"LayoutLMv2TokenizerFast"),q3t.forEach(t),Fvo=r(ZP," (LayoutLMv2 model)"),ZP.forEach(t),Tvo=i(S),Ps=n(S,"LI",{});var eB=s(Ps);age=n(eB,"STRONG",{});var j3t=s(age);Mvo=r(j3t,"layoutlmv3"),j3t.forEach(t),Evo=r(eB," \u2014 "),Bj=n(eB,"A",{href:!0});var D3t=s(Bj);Cvo=r(D3t,"LayoutLMv3Tokenizer"),D3t.forEach(t),wvo=r(eB," or "),Ij=n(eB,"A",{href:!0});var G3t=s(Ij);Avo=r(G3t,"LayoutLMv3TokenizerFast"),G3t.forEach(t),Lvo=r(eB," (LayoutLMv3 model)"),eB.forEach(t),yvo=i(S),Bs=n(S,"LI",{});var oB=s(Bs);nge=n(oB,"STRONG",{});var O3t=s(nge);xvo=r(O3t,"layoutxlm"),O3t.forEach(t),$vo=r(oB," \u2014 "),Nj=n(oB,"A",{href:!0});var V3t=s(Nj);kvo=r(V3t,"LayoutXLMTokenizer"),V3t.forEach(t),Svo=r(oB," or "),qj=n(oB,"A",{href:!0});var X3t=s(qj);Rvo=r(X3t,"LayoutXLMTokenizerFast"),X3t.forEach(t),Pvo=r(oB," (LayoutXLM model)"),oB.forEach(t),Bvo=i(S),Is=n(S,"LI",{});var rB=s(Is);sge=n(rB,"STRONG",{});var z3t=s(sge);Ivo=r(z3t,"led"),z3t.forEach(t),Nvo=r(rB," \u2014 "),jj=n(rB,"A",{href:!0});var Q3t=s(jj);qvo=r(Q3t,"LEDTokenizer"),Q3t.forEach(t),jvo=r(rB," or "),Dj=n(rB,"A",{href:!0});var W3t=s(Dj);Dvo=r(W3t,"LEDTokenizerFast"),W3t.forEach(t),Gvo=r(rB," (LED model)"),rB.forEach(t),Ovo=i(S),Ns=n(S,"LI",{});var tB=s(Ns);lge=n(tB,"STRONG",{});var U3t=s(lge);Vvo=r(U3t,"longformer"),U3t.forEach(t),Xvo=r(tB," \u2014 "),Gj=n(tB,"A",{href:!0});var H3t=s(Gj);zvo=r(H3t,"LongformerTokenizer"),H3t.forEach(t),Qvo=r(tB," or "),Oj=n(tB,"A",{href:!0});var J3t=s(Oj);Wvo=r(J3t,"LongformerTokenizerFast"),J3t.forEach(t),Uvo=r(tB," (Longformer model)"),tB.forEach(t),Hvo=i(S),qs=n(S,"LI",{});var aB=s(qs);ige=n(aB,"STRONG",{});var Y3t=s(ige);Jvo=r(Y3t,"longt5"),Y3t.forEach(t),Yvo=r(aB," \u2014 "),Vj=n(aB,"A",{href:!0});var K3t=s(Vj);Kvo=r(K3t,"T5Tokenizer"),K3t.forEach(t),Zvo=r(aB," or "),Xj=n(aB,"A",{href:!0});var Z3t=s(Xj);eFo=r(Z3t,"T5TokenizerFast"),Z3t.forEach(t),oFo=r(aB," (LongT5 model)"),aB.forEach(t),rFo=i(S),hu=n(S,"LI",{});var iBe=s(hu);dge=n(iBe,"STRONG",{});var e5t=s(dge);tFo=r(e5t,"luke"),e5t.forEach(t),aFo=r(iBe," \u2014 "),zj=n(iBe,"A",{href:!0});var o5t=s(zj);nFo=r(o5t,"LukeTokenizer"),o5t.forEach(t),sFo=r(iBe," (LUKE model)"),iBe.forEach(t),lFo=i(S),js=n(S,"LI",{});var nB=s(js);cge=n(nB,"STRONG",{});var r5t=s(cge);iFo=r(r5t,"lxmert"),r5t.forEach(t),dFo=r(nB," \u2014 "),Qj=n(nB,"A",{href:!0});var t5t=s(Qj);cFo=r(t5t,"LxmertTokenizer"),t5t.forEach(t),mFo=r(nB," or "),Wj=n(nB,"A",{href:!0});var a5t=s(Wj);fFo=r(a5t,"LxmertTokenizerFast"),a5t.forEach(t),gFo=r(nB," (LXMERT model)"),nB.forEach(t),hFo=i(S),uu=n(S,"LI",{});var dBe=s(uu);mge=n(dBe,"STRONG",{});var n5t=s(mge);uFo=r(n5t,"m2m_100"),n5t.forEach(t),pFo=r(dBe," \u2014 "),Uj=n(dBe,"A",{href:!0});var s5t=s(Uj);_Fo=r(s5t,"M2M100Tokenizer"),s5t.forEach(t),bFo=r(dBe," (M2M100 model)"),dBe.forEach(t),vFo=i(S),pu=n(S,"LI",{});var cBe=s(pu);fge=n(cBe,"STRONG",{});var l5t=s(fge);FFo=r(l5t,"marian"),l5t.forEach(t),TFo=r(cBe," \u2014 "),Hj=n(cBe,"A",{href:!0});var i5t=s(Hj);MFo=r(i5t,"MarianTokenizer"),i5t.forEach(t),EFo=r(cBe," (Marian model)"),cBe.forEach(t),CFo=i(S),Ds=n(S,"LI",{});var sB=s(Ds);gge=n(sB,"STRONG",{});var d5t=s(gge);wFo=r(d5t,"mbart"),d5t.forEach(t),AFo=r(sB," \u2014 "),Jj=n(sB,"A",{href:!0});var c5t=s(Jj);LFo=r(c5t,"MBartTokenizer"),c5t.forEach(t),yFo=r(sB," or "),Yj=n(sB,"A",{href:!0});var m5t=s(Yj);xFo=r(m5t,"MBartTokenizerFast"),m5t.forEach(t),$Fo=r(sB," (mBART model)"),sB.forEach(t),kFo=i(S),Gs=n(S,"LI",{});var lB=s(Gs);hge=n(lB,"STRONG",{});var f5t=s(hge);SFo=r(f5t,"mbart50"),f5t.forEach(t),RFo=r(lB," \u2014 "),Kj=n(lB,"A",{href:!0});var g5t=s(Kj);PFo=r(g5t,"MBart50Tokenizer"),g5t.forEach(t),BFo=r(lB," or "),Zj=n(lB,"A",{href:!0});var h5t=s(Zj);IFo=r(h5t,"MBart50TokenizerFast"),h5t.forEach(t),NFo=r(lB," (mBART-50 model)"),lB.forEach(t),qFo=i(S),Os=n(S,"LI",{});var iB=s(Os);uge=n(iB,"STRONG",{});var u5t=s(uge);jFo=r(u5t,"megatron-bert"),u5t.forEach(t),DFo=r(iB," \u2014 "),eD=n(iB,"A",{href:!0});var p5t=s(eD);GFo=r(p5t,"BertTokenizer"),p5t.forEach(t),OFo=r(iB," or "),oD=n(iB,"A",{href:!0});var _5t=s(oD);VFo=r(_5t,"BertTokenizerFast"),_5t.forEach(t),XFo=r(iB," (Megatron-BERT model)"),iB.forEach(t),zFo=i(S),_u=n(S,"LI",{});var mBe=s(_u);pge=n(mBe,"STRONG",{});var b5t=s(pge);QFo=r(b5t,"mluke"),b5t.forEach(t),WFo=r(mBe," \u2014 "),rD=n(mBe,"A",{href:!0});var v5t=s(rD);UFo=r(v5t,"MLukeTokenizer"),v5t.forEach(t),HFo=r(mBe," (mLUKE model)"),mBe.forEach(t),JFo=i(S),Vs=n(S,"LI",{});var dB=s(Vs);_ge=n(dB,"STRONG",{});var F5t=s(_ge);YFo=r(F5t,"mobilebert"),F5t.forEach(t),KFo=r(dB," \u2014 "),tD=n(dB,"A",{href:!0});var T5t=s(tD);ZFo=r(T5t,"MobileBertTokenizer"),T5t.forEach(t),eTo=r(dB," or "),aD=n(dB,"A",{href:!0});var M5t=s(aD);oTo=r(M5t,"MobileBertTokenizerFast"),M5t.forEach(t),rTo=r(dB," (MobileBERT model)"),dB.forEach(t),tTo=i(S),Xs=n(S,"LI",{});var cB=s(Xs);bge=n(cB,"STRONG",{});var E5t=s(bge);aTo=r(E5t,"mpnet"),E5t.forEach(t),nTo=r(cB," \u2014 "),nD=n(cB,"A",{href:!0});var C5t=s(nD);sTo=r(C5t,"MPNetTokenizer"),C5t.forEach(t),lTo=r(cB," or "),sD=n(cB,"A",{href:!0});var w5t=s(sD);iTo=r(w5t,"MPNetTokenizerFast"),w5t.forEach(t),dTo=r(cB," (MPNet model)"),cB.forEach(t),cTo=i(S),zs=n(S,"LI",{});var mB=s(zs);vge=n(mB,"STRONG",{});var A5t=s(vge);mTo=r(A5t,"mt5"),A5t.forEach(t),fTo=r(mB," \u2014 "),lD=n(mB,"A",{href:!0});var L5t=s(lD);gTo=r(L5t,"MT5Tokenizer"),L5t.forEach(t),hTo=r(mB," or "),iD=n(mB,"A",{href:!0});var y5t=s(iD);uTo=r(y5t,"MT5TokenizerFast"),y5t.forEach(t),pTo=r(mB," (MT5 model)"),mB.forEach(t),_To=i(S),Qs=n(S,"LI",{});var fB=s(Qs);Fge=n(fB,"STRONG",{});var x5t=s(Fge);bTo=r(x5t,"mvp"),x5t.forEach(t),vTo=r(fB," \u2014 "),dD=n(fB,"A",{href:!0});var $5t=s(dD);FTo=r($5t,"MvpTokenizer"),$5t.forEach(t),TTo=r(fB," or "),cD=n(fB,"A",{href:!0});var k5t=s(cD);MTo=r(k5t,"MvpTokenizerFast"),k5t.forEach(t),ETo=r(fB," (MVP model)"),fB.forEach(t),CTo=i(S),Ws=n(S,"LI",{});var gB=s(Ws);Tge=n(gB,"STRONG",{});var S5t=s(Tge);wTo=r(S5t,"nezha"),S5t.forEach(t),ATo=r(gB," \u2014 "),mD=n(gB,"A",{href:!0});var R5t=s(mD);LTo=r(R5t,"BertTokenizer"),R5t.forEach(t),yTo=r(gB," or "),fD=n(gB,"A",{href:!0});var P5t=s(fD);xTo=r(P5t,"BertTokenizerFast"),P5t.forEach(t),$To=r(gB," (Nezha model)"),gB.forEach(t),kTo=i(S),Us=n(S,"LI",{});var hB=s(Us);Mge=n(hB,"STRONG",{});var B5t=s(Mge);STo=r(B5t,"nllb"),B5t.forEach(t),RTo=r(hB," \u2014 "),gD=n(hB,"A",{href:!0});var I5t=s(gD);PTo=r(I5t,"NllbTokenizer"),I5t.forEach(t),BTo=r(hB," or "),hD=n(hB,"A",{href:!0});var N5t=s(hD);ITo=r(N5t,"NllbTokenizerFast"),N5t.forEach(t),NTo=r(hB," (NLLB model)"),hB.forEach(t),qTo=i(S),Hs=n(S,"LI",{});var uB=s(Hs);Ege=n(uB,"STRONG",{});var q5t=s(Ege);jTo=r(q5t,"nystromformer"),q5t.forEach(t),DTo=r(uB," \u2014 "),uD=n(uB,"A",{href:!0});var j5t=s(uD);GTo=r(j5t,"AlbertTokenizer"),j5t.forEach(t),OTo=r(uB," or "),pD=n(uB,"A",{href:!0});var D5t=s(pD);VTo=r(D5t,"AlbertTokenizerFast"),D5t.forEach(t),XTo=r(uB," (Nystr\xF6mformer model)"),uB.forEach(t),zTo=i(S),Js=n(S,"LI",{});var pB=s(Js);Cge=n(pB,"STRONG",{});var G5t=s(Cge);QTo=r(G5t,"openai-gpt"),G5t.forEach(t),WTo=r(pB," \u2014 "),_D=n(pB,"A",{href:!0});var O5t=s(_D);UTo=r(O5t,"OpenAIGPTTokenizer"),O5t.forEach(t),HTo=r(pB," or "),bD=n(pB,"A",{href:!0});var V5t=s(bD);JTo=r(V5t,"OpenAIGPTTokenizerFast"),V5t.forEach(t),YTo=r(pB," (OpenAI GPT model)"),pB.forEach(t),KTo=i(S),bu=n(S,"LI",{});var fBe=s(bu);wge=n(fBe,"STRONG",{});var X5t=s(wge);ZTo=r(X5t,"opt"),X5t.forEach(t),eMo=r(fBe," \u2014 "),vD=n(fBe,"A",{href:!0});var z5t=s(vD);oMo=r(z5t,"GPT2Tokenizer"),z5t.forEach(t),rMo=r(fBe," (OPT model)"),fBe.forEach(t),tMo=i(S),Ys=n(S,"LI",{});var _B=s(Ys);Age=n(_B,"STRONG",{});var Q5t=s(Age);aMo=r(Q5t,"owlvit"),Q5t.forEach(t),nMo=r(_B," \u2014 "),FD=n(_B,"A",{href:!0});var W5t=s(FD);sMo=r(W5t,"CLIPTokenizer"),W5t.forEach(t),lMo=r(_B," or "),TD=n(_B,"A",{href:!0});var U5t=s(TD);iMo=r(U5t,"CLIPTokenizerFast"),U5t.forEach(t),dMo=r(_B," (OWL-ViT model)"),_B.forEach(t),cMo=i(S),Ks=n(S,"LI",{});var bB=s(Ks);Lge=n(bB,"STRONG",{});var H5t=s(Lge);mMo=r(H5t,"pegasus"),H5t.forEach(t),fMo=r(bB," \u2014 "),MD=n(bB,"A",{href:!0});var J5t=s(MD);gMo=r(J5t,"PegasusTokenizer"),J5t.forEach(t),hMo=r(bB," or "),ED=n(bB,"A",{href:!0});var Y5t=s(ED);uMo=r(Y5t,"PegasusTokenizerFast"),Y5t.forEach(t),pMo=r(bB," (Pegasus model)"),bB.forEach(t),_Mo=i(S),vu=n(S,"LI",{});var gBe=s(vu);yge=n(gBe,"STRONG",{});var K5t=s(yge);bMo=r(K5t,"perceiver"),K5t.forEach(t),vMo=r(gBe," \u2014 "),CD=n(gBe,"A",{href:!0});var Z5t=s(CD);FMo=r(Z5t,"PerceiverTokenizer"),Z5t.forEach(t),TMo=r(gBe," (Perceiver model)"),gBe.forEach(t),MMo=i(S),Fu=n(S,"LI",{});var hBe=s(Fu);xge=n(hBe,"STRONG",{});var e0t=s(xge);EMo=r(e0t,"phobert"),e0t.forEach(t),CMo=r(hBe," \u2014 "),wD=n(hBe,"A",{href:!0});var o0t=s(wD);wMo=r(o0t,"PhobertTokenizer"),o0t.forEach(t),AMo=r(hBe," (PhoBERT model)"),hBe.forEach(t),LMo=i(S),Tu=n(S,"LI",{});var uBe=s(Tu);$ge=n(uBe,"STRONG",{});var r0t=s($ge);yMo=r(r0t,"plbart"),r0t.forEach(t),xMo=r(uBe," \u2014 "),AD=n(uBe,"A",{href:!0});var t0t=s(AD);$Mo=r(t0t,"PLBartTokenizer"),t0t.forEach(t),kMo=r(uBe," (PLBart model)"),uBe.forEach(t),SMo=i(S),Mu=n(S,"LI",{});var pBe=s(Mu);kge=n(pBe,"STRONG",{});var a0t=s(kge);RMo=r(a0t,"prophetnet"),a0t.forEach(t),PMo=r(pBe," \u2014 "),LD=n(pBe,"A",{href:!0});var n0t=s(LD);BMo=r(n0t,"ProphetNetTokenizer"),n0t.forEach(t),IMo=r(pBe," (ProphetNet model)"),pBe.forEach(t),NMo=i(S),Zs=n(S,"LI",{});var vB=s(Zs);Sge=n(vB,"STRONG",{});var s0t=s(Sge);qMo=r(s0t,"qdqbert"),s0t.forEach(t),jMo=r(vB," \u2014 "),yD=n(vB,"A",{href:!0});var l0t=s(yD);DMo=r(l0t,"BertTokenizer"),l0t.forEach(t),GMo=r(vB," or "),xD=n(vB,"A",{href:!0});var i0t=s(xD);OMo=r(i0t,"BertTokenizerFast"),i0t.forEach(t),VMo=r(vB," (QDQBert model)"),vB.forEach(t),XMo=i(S),Eu=n(S,"LI",{});var _Be=s(Eu);Rge=n(_Be,"STRONG",{});var d0t=s(Rge);zMo=r(d0t,"rag"),d0t.forEach(t),QMo=r(_Be," \u2014 "),$D=n(_Be,"A",{href:!0});var c0t=s($D);WMo=r(c0t,"RagTokenizer"),c0t.forEach(t),UMo=r(_Be," (RAG model)"),_Be.forEach(t),HMo=i(S),el=n(S,"LI",{});var FB=s(el);Pge=n(FB,"STRONG",{});var m0t=s(Pge);JMo=r(m0t,"realm"),m0t.forEach(t),YMo=r(FB," \u2014 "),kD=n(FB,"A",{href:!0});var f0t=s(kD);KMo=r(f0t,"RealmTokenizer"),f0t.forEach(t),ZMo=r(FB," or "),SD=n(FB,"A",{href:!0});var g0t=s(SD);eEo=r(g0t,"RealmTokenizerFast"),g0t.forEach(t),oEo=r(FB," (REALM model)"),FB.forEach(t),rEo=i(S),ol=n(S,"LI",{});var TB=s(ol);Bge=n(TB,"STRONG",{});var h0t=s(Bge);tEo=r(h0t,"reformer"),h0t.forEach(t),aEo=r(TB," \u2014 "),RD=n(TB,"A",{href:!0});var u0t=s(RD);nEo=r(u0t,"ReformerTokenizer"),u0t.forEach(t),sEo=r(TB," or "),PD=n(TB,"A",{href:!0});var p0t=s(PD);lEo=r(p0t,"ReformerTokenizerFast"),p0t.forEach(t),iEo=r(TB," (Reformer model)"),TB.forEach(t),dEo=i(S),rl=n(S,"LI",{});var MB=s(rl);Ige=n(MB,"STRONG",{});var _0t=s(Ige);cEo=r(_0t,"rembert"),_0t.forEach(t),mEo=r(MB," \u2014 "),BD=n(MB,"A",{href:!0});var b0t=s(BD);fEo=r(b0t,"RemBertTokenizer"),b0t.forEach(t),gEo=r(MB," or "),ID=n(MB,"A",{href:!0});var v0t=s(ID);hEo=r(v0t,"RemBertTokenizerFast"),v0t.forEach(t),uEo=r(MB," (RemBERT model)"),MB.forEach(t),pEo=i(S),tl=n(S,"LI",{});var EB=s(tl);Nge=n(EB,"STRONG",{});var F0t=s(Nge);_Eo=r(F0t,"retribert"),F0t.forEach(t),bEo=r(EB," \u2014 "),ND=n(EB,"A",{href:!0});var T0t=s(ND);vEo=r(T0t,"RetriBertTokenizer"),T0t.forEach(t),FEo=r(EB," or "),qD=n(EB,"A",{href:!0});var M0t=s(qD);TEo=r(M0t,"RetriBertTokenizerFast"),M0t.forEach(t),MEo=r(EB," (RetriBERT model)"),EB.forEach(t),EEo=i(S),al=n(S,"LI",{});var CB=s(al);qge=n(CB,"STRONG",{});var E0t=s(qge);CEo=r(E0t,"roberta"),E0t.forEach(t),wEo=r(CB," \u2014 "),jD=n(CB,"A",{href:!0});var C0t=s(jD);AEo=r(C0t,"RobertaTokenizer"),C0t.forEach(t),LEo=r(CB," or "),DD=n(CB,"A",{href:!0});var w0t=s(DD);yEo=r(w0t,"RobertaTokenizerFast"),w0t.forEach(t),xEo=r(CB," (RoBERTa model)"),CB.forEach(t),$Eo=i(S),nl=n(S,"LI",{});var wB=s(nl);jge=n(wB,"STRONG",{});var A0t=s(jge);kEo=r(A0t,"roformer"),A0t.forEach(t),SEo=r(wB," \u2014 "),GD=n(wB,"A",{href:!0});var L0t=s(GD);REo=r(L0t,"RoFormerTokenizer"),L0t.forEach(t),PEo=r(wB," or "),OD=n(wB,"A",{href:!0});var y0t=s(OD);BEo=r(y0t,"RoFormerTokenizerFast"),y0t.forEach(t),IEo=r(wB," (RoFormer model)"),wB.forEach(t),NEo=i(S),Cu=n(S,"LI",{});var bBe=s(Cu);Dge=n(bBe,"STRONG",{});var x0t=s(Dge);qEo=r(x0t,"speech_to_text"),x0t.forEach(t),jEo=r(bBe," \u2014 "),VD=n(bBe,"A",{href:!0});var $0t=s(VD);DEo=r($0t,"Speech2TextTokenizer"),$0t.forEach(t),GEo=r(bBe," (Speech2Text model)"),bBe.forEach(t),OEo=i(S),wu=n(S,"LI",{});var vBe=s(wu);Gge=n(vBe,"STRONG",{});var k0t=s(Gge);VEo=r(k0t,"speech_to_text_2"),k0t.forEach(t),XEo=r(vBe," \u2014 "),XD=n(vBe,"A",{href:!0});var S0t=s(XD);zEo=r(S0t,"Speech2Text2Tokenizer"),S0t.forEach(t),QEo=r(vBe," (Speech2Text2 model)"),vBe.forEach(t),WEo=i(S),sl=n(S,"LI",{});var AB=s(sl);Oge=n(AB,"STRONG",{});var R0t=s(Oge);UEo=r(R0t,"splinter"),R0t.forEach(t),HEo=r(AB," \u2014 "),zD=n(AB,"A",{href:!0});var P0t=s(zD);JEo=r(P0t,"SplinterTokenizer"),P0t.forEach(t),YEo=r(AB," or "),QD=n(AB,"A",{href:!0});var B0t=s(QD);KEo=r(B0t,"SplinterTokenizerFast"),B0t.forEach(t),ZEo=r(AB," (Splinter model)"),AB.forEach(t),e4o=i(S),ll=n(S,"LI",{});var LB=s(ll);Vge=n(LB,"STRONG",{});var I0t=s(Vge);o4o=r(I0t,"squeezebert"),I0t.forEach(t),r4o=r(LB," \u2014 "),WD=n(LB,"A",{href:!0});var N0t=s(WD);t4o=r(N0t,"SqueezeBertTokenizer"),N0t.forEach(t),a4o=r(LB," or "),UD=n(LB,"A",{href:!0});var q0t=s(UD);n4o=r(q0t,"SqueezeBertTokenizerFast"),q0t.forEach(t),s4o=r(LB," (SqueezeBERT model)"),LB.forEach(t),l4o=i(S),il=n(S,"LI",{});var yB=s(il);Xge=n(yB,"STRONG",{});var j0t=s(Xge);i4o=r(j0t,"t5"),j0t.forEach(t),d4o=r(yB," \u2014 "),HD=n(yB,"A",{href:!0});var D0t=s(HD);c4o=r(D0t,"T5Tokenizer"),D0t.forEach(t),m4o=r(yB," or "),JD=n(yB,"A",{href:!0});var G0t=s(JD);f4o=r(G0t,"T5TokenizerFast"),G0t.forEach(t),g4o=r(yB," (T5 model)"),yB.forEach(t),h4o=i(S),Au=n(S,"LI",{});var FBe=s(Au);zge=n(FBe,"STRONG",{});var O0t=s(zge);u4o=r(O0t,"tapas"),O0t.forEach(t),p4o=r(FBe," \u2014 "),YD=n(FBe,"A",{href:!0});var V0t=s(YD);_4o=r(V0t,"TapasTokenizer"),V0t.forEach(t),b4o=r(FBe," (TAPAS model)"),FBe.forEach(t),v4o=i(S),Lu=n(S,"LI",{});var TBe=s(Lu);Qge=n(TBe,"STRONG",{});var X0t=s(Qge);F4o=r(X0t,"tapex"),X0t.forEach(t),T4o=r(TBe," \u2014 "),KD=n(TBe,"A",{href:!0});var z0t=s(KD);M4o=r(z0t,"TapexTokenizer"),z0t.forEach(t),E4o=r(TBe," (TAPEX model)"),TBe.forEach(t),C4o=i(S),yu=n(S,"LI",{});var MBe=s(yu);Wge=n(MBe,"STRONG",{});var Q0t=s(Wge);w4o=r(Q0t,"transfo-xl"),Q0t.forEach(t),A4o=r(MBe," \u2014 "),ZD=n(MBe,"A",{href:!0});var W0t=s(ZD);L4o=r(W0t,"TransfoXLTokenizer"),W0t.forEach(t),y4o=r(MBe," (Transformer-XL model)"),MBe.forEach(t),x4o=i(S),dl=n(S,"LI",{});var xB=s(dl);Uge=n(xB,"STRONG",{});var U0t=s(Uge);$4o=r(U0t,"vilt"),U0t.forEach(t),k4o=r(xB," \u2014 "),eG=n(xB,"A",{href:!0});var H0t=s(eG);S4o=r(H0t,"BertTokenizer"),H0t.forEach(t),R4o=r(xB," or "),oG=n(xB,"A",{href:!0});var J0t=s(oG);P4o=r(J0t,"BertTokenizerFast"),J0t.forEach(t),B4o=r(xB," (ViLT model)"),xB.forEach(t),I4o=i(S),cl=n(S,"LI",{});var $B=s(cl);Hge=n($B,"STRONG",{});var Y0t=s(Hge);N4o=r(Y0t,"visual_bert"),Y0t.forEach(t),q4o=r($B," \u2014 "),rG=n($B,"A",{href:!0});var K0t=s(rG);j4o=r(K0t,"BertTokenizer"),K0t.forEach(t),D4o=r($B," or "),tG=n($B,"A",{href:!0});var Z0t=s(tG);G4o=r(Z0t,"BertTokenizerFast"),Z0t.forEach(t),O4o=r($B," (VisualBERT model)"),$B.forEach(t),V4o=i(S),xu=n(S,"LI",{});var EBe=s(xu);Jge=n(EBe,"STRONG",{});var ewt=s(Jge);X4o=r(ewt,"wav2vec2"),ewt.forEach(t),z4o=r(EBe," \u2014 "),aG=n(EBe,"A",{href:!0});var owt=s(aG);Q4o=r(owt,"Wav2Vec2CTCTokenizer"),owt.forEach(t),W4o=r(EBe," (Wav2Vec2 model)"),EBe.forEach(t),U4o=i(S),$u=n(S,"LI",{});var CBe=s($u);Yge=n(CBe,"STRONG",{});var rwt=s(Yge);H4o=r(rwt,"wav2vec2-conformer"),rwt.forEach(t),J4o=r(CBe," \u2014 "),nG=n(CBe,"A",{href:!0});var twt=s(nG);Y4o=r(twt,"Wav2Vec2CTCTokenizer"),twt.forEach(t),K4o=r(CBe," (Wav2Vec2-Conformer model)"),CBe.forEach(t),Z4o=i(S),ku=n(S,"LI",{});var wBe=s(ku);Kge=n(wBe,"STRONG",{});var awt=s(Kge);eCo=r(awt,"wav2vec2_phoneme"),awt.forEach(t),oCo=r(wBe," \u2014 "),sG=n(wBe,"A",{href:!0});var nwt=s(sG);rCo=r(nwt,"Wav2Vec2PhonemeCTCTokenizer"),nwt.forEach(t),tCo=r(wBe," (Wav2Vec2Phoneme model)"),wBe.forEach(t),aCo=i(S),ml=n(S,"LI",{});var kB=s(ml);Zge=n(kB,"STRONG",{});var swt=s(Zge);nCo=r(swt,"xclip"),swt.forEach(t),sCo=r(kB," \u2014 "),lG=n(kB,"A",{href:!0});var lwt=s(lG);lCo=r(lwt,"CLIPTokenizer"),lwt.forEach(t),iCo=r(kB," or "),iG=n(kB,"A",{href:!0});var iwt=s(iG);dCo=r(iwt,"CLIPTokenizerFast"),iwt.forEach(t),cCo=r(kB," (X-CLIP model)"),kB.forEach(t),mCo=i(S),fl=n(S,"LI",{});var SB=s(fl);ehe=n(SB,"STRONG",{});var dwt=s(ehe);fCo=r(dwt,"xglm"),dwt.forEach(t),gCo=r(SB," \u2014 "),dG=n(SB,"A",{href:!0});var cwt=s(dG);hCo=r(cwt,"XGLMTokenizer"),cwt.forEach(t),uCo=r(SB," or "),cG=n(SB,"A",{href:!0});var mwt=s(cG);pCo=r(mwt,"XGLMTokenizerFast"),mwt.forEach(t),_Co=r(SB," (XGLM model)"),SB.forEach(t),bCo=i(S),Su=n(S,"LI",{});var ABe=s(Su);ohe=n(ABe,"STRONG",{});var fwt=s(ohe);vCo=r(fwt,"xlm"),fwt.forEach(t),FCo=r(ABe," \u2014 "),mG=n(ABe,"A",{href:!0});var gwt=s(mG);TCo=r(gwt,"XLMTokenizer"),gwt.forEach(t),MCo=r(ABe," (XLM model)"),ABe.forEach(t),ECo=i(S),Ru=n(S,"LI",{});var LBe=s(Ru);rhe=n(LBe,"STRONG",{});var hwt=s(rhe);CCo=r(hwt,"xlm-prophetnet"),hwt.forEach(t),wCo=r(LBe," \u2014 "),fG=n(LBe,"A",{href:!0});var uwt=s(fG);ACo=r(uwt,"XLMProphetNetTokenizer"),uwt.forEach(t),LCo=r(LBe," (XLM-ProphetNet model)"),LBe.forEach(t),yCo=i(S),gl=n(S,"LI",{});var RB=s(gl);the=n(RB,"STRONG",{});var pwt=s(the);xCo=r(pwt,"xlm-roberta"),pwt.forEach(t),$Co=r(RB," \u2014 "),gG=n(RB,"A",{href:!0});var _wt=s(gG);kCo=r(_wt,"XLMRobertaTokenizer"),_wt.forEach(t),SCo=r(RB," or "),hG=n(RB,"A",{href:!0});var bwt=s(hG);RCo=r(bwt,"XLMRobertaTokenizerFast"),bwt.forEach(t),PCo=r(RB," (XLM-RoBERTa model)"),RB.forEach(t),BCo=i(S),hl=n(S,"LI",{});var PB=s(hl);ahe=n(PB,"STRONG",{});var vwt=s(ahe);ICo=r(vwt,"xlm-roberta-xl"),vwt.forEach(t),NCo=r(PB," \u2014 "),uG=n(PB,"A",{href:!0});var Fwt=s(uG);qCo=r(Fwt,"XLMRobertaTokenizer"),Fwt.forEach(t),jCo=r(PB," or "),pG=n(PB,"A",{href:!0});var Twt=s(pG);DCo=r(Twt,"XLMRobertaTokenizerFast"),Twt.forEach(t),GCo=r(PB," (XLM-RoBERTa-XL model)"),PB.forEach(t),OCo=i(S),ul=n(S,"LI",{});var BB=s(ul);nhe=n(BB,"STRONG",{});var Mwt=s(nhe);VCo=r(Mwt,"xlnet"),Mwt.forEach(t),XCo=r(BB," \u2014 "),_G=n(BB,"A",{href:!0});var Ewt=s(_G);zCo=r(Ewt,"XLNetTokenizer"),Ewt.forEach(t),QCo=r(BB," or "),bG=n(BB,"A",{href:!0});var Cwt=s(bG);WCo=r(Cwt,"XLNetTokenizerFast"),Cwt.forEach(t),UCo=r(BB," (XLNet model)"),BB.forEach(t),HCo=i(S),pl=n(S,"LI",{});var IB=s(pl);she=n(IB,"STRONG",{});var wwt=s(she);JCo=r(wwt,"yoso"),wwt.forEach(t),YCo=r(IB," \u2014 "),vG=n(IB,"A",{href:!0});var Awt=s(vG);KCo=r(Awt,"AlbertTokenizer"),Awt.forEach(t),ZCo=r(IB," or "),FG=n(IB,"A",{href:!0});var Lwt=s(FG);e3o=r(Lwt,"AlbertTokenizerFast"),Lwt.forEach(t),o3o=r(IB," (YOSO model)"),IB.forEach(t),S.forEach(t),r3o=i(El),T(Pu.$$.fragment,El),El.forEach(t),t3o=i(Ml),Bu=n(Ml,"DIV",{class:!0});var coo=s(Bu);T(ox.$$.fragment,coo),a3o=i(coo),lhe=n(coo,"P",{});var ywt=s(lhe);n3o=r(ywt,"Register a new tokenizer in this mapping."),ywt.forEach(t),coo.forEach(t),Ml.forEach(t),oZe=i(m),hd=n(m,"H2",{class:!0});var moo=s(hd);Iu=n(moo,"A",{id:!0,class:!0,href:!0});var xwt=s(Iu);ihe=n(xwt,"SPAN",{});var $wt=s(ihe);T(rx.$$.fragment,$wt),$wt.forEach(t),xwt.forEach(t),s3o=i(moo),dhe=n(moo,"SPAN",{});var kwt=s(dhe);l3o=r(kwt,"AutoFeatureExtractor"),kwt.forEach(t),moo.forEach(t),rZe=i(m),So=n(m,"DIV",{class:!0});var Cl=s(So);T(tx.$$.fragment,Cl),i3o=i(Cl),ax=n(Cl,"P",{});var foo=s(ax);d3o=r(foo,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TG=n(foo,"A",{href:!0});var Swt=s(TG);c3o=r(Swt,"AutoFeatureExtractor.from_pretrained()"),Swt.forEach(t),m3o=r(foo," class method."),foo.forEach(t),f3o=i(Cl),nx=n(Cl,"P",{});var goo=s(nx);g3o=r(goo,"This class cannot be instantiated directly using "),che=n(goo,"CODE",{});var Rwt=s(che);h3o=r(Rwt,"__init__()"),Rwt.forEach(t),u3o=r(goo," (throws an error)."),goo.forEach(t),p3o=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ba=s(Ye);T(sx.$$.fragment,ba),_3o=i(ba),mhe=n(ba,"P",{});var Pwt=s(mhe);b3o=r(Pwt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Pwt.forEach(t),v3o=i(ba),Ha=n(ba,"P",{});var By=s(Ha);F3o=r(By,"The feature extractor class to instantiate is selected based on the "),fhe=n(By,"CODE",{});var Bwt=s(fhe);T3o=r(Bwt,"model_type"),Bwt.forEach(t),M3o=r(By,` property of the config object
(either passed as an argument or loaded from `),ghe=n(By,"CODE",{});var Iwt=s(ghe);E3o=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),C3o=r(By,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hhe=n(By,"CODE",{});var Nwt=s(hhe);w3o=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),A3o=r(By,":"),By.forEach(t),L3o=i(ba),z=n(ba,"UL",{});var W=s(z);Nu=n(W,"LI",{});var yBe=s(Nu);uhe=n(yBe,"STRONG",{});var qwt=s(uhe);y3o=r(qwt,"beit"),qwt.forEach(t),x3o=r(yBe," \u2014 "),MG=n(yBe,"A",{href:!0});var jwt=s(MG);$3o=r(jwt,"BeitFeatureExtractor"),jwt.forEach(t),k3o=r(yBe," (BEiT model)"),yBe.forEach(t),S3o=i(W),qu=n(W,"LI",{});var xBe=s(qu);phe=n(xBe,"STRONG",{});var Dwt=s(phe);R3o=r(Dwt,"clip"),Dwt.forEach(t),P3o=r(xBe," \u2014 "),EG=n(xBe,"A",{href:!0});var Gwt=s(EG);B3o=r(Gwt,"CLIPFeatureExtractor"),Gwt.forEach(t),I3o=r(xBe," (CLIP model)"),xBe.forEach(t),N3o=i(W),ju=n(W,"LI",{});var $Be=s(ju);_he=n($Be,"STRONG",{});var Owt=s(_he);q3o=r(Owt,"conditional_detr"),Owt.forEach(t),j3o=r($Be," \u2014 "),CG=n($Be,"A",{href:!0});var Vwt=s(CG);D3o=r(Vwt,"ConditionalDetrFeatureExtractor"),Vwt.forEach(t),G3o=r($Be," (Conditional DETR model)"),$Be.forEach(t),O3o=i(W),Du=n(W,"LI",{});var kBe=s(Du);bhe=n(kBe,"STRONG",{});var Xwt=s(bhe);V3o=r(Xwt,"convnext"),Xwt.forEach(t),X3o=r(kBe," \u2014 "),wG=n(kBe,"A",{href:!0});var zwt=s(wG);z3o=r(zwt,"ConvNextFeatureExtractor"),zwt.forEach(t),Q3o=r(kBe," (ConvNeXT model)"),kBe.forEach(t),W3o=i(W),Gu=n(W,"LI",{});var SBe=s(Gu);vhe=n(SBe,"STRONG",{});var Qwt=s(vhe);U3o=r(Qwt,"cvt"),Qwt.forEach(t),H3o=r(SBe," \u2014 "),AG=n(SBe,"A",{href:!0});var Wwt=s(AG);J3o=r(Wwt,"ConvNextFeatureExtractor"),Wwt.forEach(t),Y3o=r(SBe," (CvT model)"),SBe.forEach(t),K3o=i(W),Ou=n(W,"LI",{});var RBe=s(Ou);Fhe=n(RBe,"STRONG",{});var Uwt=s(Fhe);Z3o=r(Uwt,"data2vec-audio"),Uwt.forEach(t),e5o=r(RBe," \u2014 "),LG=n(RBe,"A",{href:!0});var Hwt=s(LG);o5o=r(Hwt,"Wav2Vec2FeatureExtractor"),Hwt.forEach(t),r5o=r(RBe," (Data2VecAudio model)"),RBe.forEach(t),t5o=i(W),Vu=n(W,"LI",{});var PBe=s(Vu);The=n(PBe,"STRONG",{});var Jwt=s(The);a5o=r(Jwt,"data2vec-vision"),Jwt.forEach(t),n5o=r(PBe," \u2014 "),yG=n(PBe,"A",{href:!0});var Ywt=s(yG);s5o=r(Ywt,"BeitFeatureExtractor"),Ywt.forEach(t),l5o=r(PBe," (Data2VecVision model)"),PBe.forEach(t),i5o=i(W),Xu=n(W,"LI",{});var BBe=s(Xu);Mhe=n(BBe,"STRONG",{});var Kwt=s(Mhe);d5o=r(Kwt,"deformable_detr"),Kwt.forEach(t),c5o=r(BBe," \u2014 "),xG=n(BBe,"A",{href:!0});var Zwt=s(xG);m5o=r(Zwt,"DeformableDetrFeatureExtractor"),Zwt.forEach(t),f5o=r(BBe," (Deformable DETR model)"),BBe.forEach(t),g5o=i(W),zu=n(W,"LI",{});var IBe=s(zu);Ehe=n(IBe,"STRONG",{});var eAt=s(Ehe);h5o=r(eAt,"deit"),eAt.forEach(t),u5o=r(IBe," \u2014 "),$G=n(IBe,"A",{href:!0});var oAt=s($G);p5o=r(oAt,"DeiTFeatureExtractor"),oAt.forEach(t),_5o=r(IBe," (DeiT model)"),IBe.forEach(t),b5o=i(W),Qu=n(W,"LI",{});var NBe=s(Qu);Che=n(NBe,"STRONG",{});var rAt=s(Che);v5o=r(rAt,"detr"),rAt.forEach(t),F5o=r(NBe," \u2014 "),kG=n(NBe,"A",{href:!0});var tAt=s(kG);T5o=r(tAt,"DetrFeatureExtractor"),tAt.forEach(t),M5o=r(NBe," (DETR model)"),NBe.forEach(t),E5o=i(W),Wu=n(W,"LI",{});var qBe=s(Wu);whe=n(qBe,"STRONG",{});var aAt=s(whe);C5o=r(aAt,"donut"),aAt.forEach(t),w5o=r(qBe," \u2014 "),SG=n(qBe,"A",{href:!0});var nAt=s(SG);A5o=r(nAt,"DonutFeatureExtractor"),nAt.forEach(t),L5o=r(qBe," (Donut model)"),qBe.forEach(t),y5o=i(W),Uu=n(W,"LI",{});var jBe=s(Uu);Ahe=n(jBe,"STRONG",{});var sAt=s(Ahe);x5o=r(sAt,"dpt"),sAt.forEach(t),$5o=r(jBe," \u2014 "),RG=n(jBe,"A",{href:!0});var lAt=s(RG);k5o=r(lAt,"DPTFeatureExtractor"),lAt.forEach(t),S5o=r(jBe," (DPT model)"),jBe.forEach(t),R5o=i(W),Hu=n(W,"LI",{});var DBe=s(Hu);Lhe=n(DBe,"STRONG",{});var iAt=s(Lhe);P5o=r(iAt,"flava"),iAt.forEach(t),B5o=r(DBe," \u2014 "),PG=n(DBe,"A",{href:!0});var dAt=s(PG);I5o=r(dAt,"FlavaFeatureExtractor"),dAt.forEach(t),N5o=r(DBe," (FLAVA model)"),DBe.forEach(t),q5o=i(W),Ju=n(W,"LI",{});var GBe=s(Ju);yhe=n(GBe,"STRONG",{});var cAt=s(yhe);j5o=r(cAt,"glpn"),cAt.forEach(t),D5o=r(GBe," \u2014 "),BG=n(GBe,"A",{href:!0});var mAt=s(BG);G5o=r(mAt,"GLPNFeatureExtractor"),mAt.forEach(t),O5o=r(GBe," (GLPN model)"),GBe.forEach(t),V5o=i(W),Yu=n(W,"LI",{});var OBe=s(Yu);xhe=n(OBe,"STRONG",{});var fAt=s(xhe);X5o=r(fAt,"groupvit"),fAt.forEach(t),z5o=r(OBe," \u2014 "),IG=n(OBe,"A",{href:!0});var gAt=s(IG);Q5o=r(gAt,"CLIPFeatureExtractor"),gAt.forEach(t),W5o=r(OBe," (GroupViT model)"),OBe.forEach(t),U5o=i(W),Ku=n(W,"LI",{});var VBe=s(Ku);$he=n(VBe,"STRONG",{});var hAt=s($he);H5o=r(hAt,"hubert"),hAt.forEach(t),J5o=r(VBe," \u2014 "),NG=n(VBe,"A",{href:!0});var uAt=s(NG);Y5o=r(uAt,"Wav2Vec2FeatureExtractor"),uAt.forEach(t),K5o=r(VBe," (Hubert model)"),VBe.forEach(t),Z5o=i(W),Zu=n(W,"LI",{});var XBe=s(Zu);khe=n(XBe,"STRONG",{});var pAt=s(khe);e0o=r(pAt,"imagegpt"),pAt.forEach(t),o0o=r(XBe," \u2014 "),qG=n(XBe,"A",{href:!0});var _At=s(qG);r0o=r(_At,"ImageGPTFeatureExtractor"),_At.forEach(t),t0o=r(XBe," (ImageGPT model)"),XBe.forEach(t),a0o=i(W),ep=n(W,"LI",{});var zBe=s(ep);She=n(zBe,"STRONG",{});var bAt=s(She);n0o=r(bAt,"layoutlmv2"),bAt.forEach(t),s0o=r(zBe," \u2014 "),jG=n(zBe,"A",{href:!0});var vAt=s(jG);l0o=r(vAt,"LayoutLMv2FeatureExtractor"),vAt.forEach(t),i0o=r(zBe," (LayoutLMv2 model)"),zBe.forEach(t),d0o=i(W),op=n(W,"LI",{});var QBe=s(op);Rhe=n(QBe,"STRONG",{});var FAt=s(Rhe);c0o=r(FAt,"layoutlmv3"),FAt.forEach(t),m0o=r(QBe," \u2014 "),DG=n(QBe,"A",{href:!0});var TAt=s(DG);f0o=r(TAt,"LayoutLMv3FeatureExtractor"),TAt.forEach(t),g0o=r(QBe," (LayoutLMv3 model)"),QBe.forEach(t),h0o=i(W),rp=n(W,"LI",{});var WBe=s(rp);Phe=n(WBe,"STRONG",{});var MAt=s(Phe);u0o=r(MAt,"levit"),MAt.forEach(t),p0o=r(WBe," \u2014 "),GG=n(WBe,"A",{href:!0});var EAt=s(GG);_0o=r(EAt,"LevitFeatureExtractor"),EAt.forEach(t),b0o=r(WBe," (LeViT model)"),WBe.forEach(t),v0o=i(W),tp=n(W,"LI",{});var UBe=s(tp);Bhe=n(UBe,"STRONG",{});var CAt=s(Bhe);F0o=r(CAt,"maskformer"),CAt.forEach(t),T0o=r(UBe," \u2014 "),OG=n(UBe,"A",{href:!0});var wAt=s(OG);M0o=r(wAt,"MaskFormerFeatureExtractor"),wAt.forEach(t),E0o=r(UBe," (MaskFormer model)"),UBe.forEach(t),C0o=i(W),ap=n(W,"LI",{});var HBe=s(ap);Ihe=n(HBe,"STRONG",{});var AAt=s(Ihe);w0o=r(AAt,"mctct"),AAt.forEach(t),A0o=r(HBe," \u2014 "),VG=n(HBe,"A",{href:!0});var LAt=s(VG);L0o=r(LAt,"MCTCTFeatureExtractor"),LAt.forEach(t),y0o=r(HBe," (M-CTC-T model)"),HBe.forEach(t),x0o=i(W),np=n(W,"LI",{});var JBe=s(np);Nhe=n(JBe,"STRONG",{});var yAt=s(Nhe);$0o=r(yAt,"mobilevit"),yAt.forEach(t),k0o=r(JBe," \u2014 "),XG=n(JBe,"A",{href:!0});var xAt=s(XG);S0o=r(xAt,"MobileViTFeatureExtractor"),xAt.forEach(t),R0o=r(JBe," (MobileViT model)"),JBe.forEach(t),P0o=i(W),sp=n(W,"LI",{});var YBe=s(sp);qhe=n(YBe,"STRONG",{});var $At=s(qhe);B0o=r($At,"owlvit"),$At.forEach(t),I0o=r(YBe," \u2014 "),zG=n(YBe,"A",{href:!0});var kAt=s(zG);N0o=r(kAt,"OwlViTFeatureExtractor"),kAt.forEach(t),q0o=r(YBe," (OWL-ViT model)"),YBe.forEach(t),j0o=i(W),lp=n(W,"LI",{});var KBe=s(lp);jhe=n(KBe,"STRONG",{});var SAt=s(jhe);D0o=r(SAt,"perceiver"),SAt.forEach(t),G0o=r(KBe," \u2014 "),QG=n(KBe,"A",{href:!0});var RAt=s(QG);O0o=r(RAt,"PerceiverFeatureExtractor"),RAt.forEach(t),V0o=r(KBe," (Perceiver model)"),KBe.forEach(t),X0o=i(W),ip=n(W,"LI",{});var ZBe=s(ip);Dhe=n(ZBe,"STRONG",{});var PAt=s(Dhe);z0o=r(PAt,"poolformer"),PAt.forEach(t),Q0o=r(ZBe," \u2014 "),WG=n(ZBe,"A",{href:!0});var BAt=s(WG);W0o=r(BAt,"PoolFormerFeatureExtractor"),BAt.forEach(t),U0o=r(ZBe," (PoolFormer model)"),ZBe.forEach(t),H0o=i(W),dp=n(W,"LI",{});var eIe=s(dp);Ghe=n(eIe,"STRONG",{});var IAt=s(Ghe);J0o=r(IAt,"regnet"),IAt.forEach(t),Y0o=r(eIe," \u2014 "),UG=n(eIe,"A",{href:!0});var NAt=s(UG);K0o=r(NAt,"ConvNextFeatureExtractor"),NAt.forEach(t),Z0o=r(eIe," (RegNet model)"),eIe.forEach(t),ewo=i(W),cp=n(W,"LI",{});var oIe=s(cp);Ohe=n(oIe,"STRONG",{});var qAt=s(Ohe);owo=r(qAt,"resnet"),qAt.forEach(t),rwo=r(oIe," \u2014 "),HG=n(oIe,"A",{href:!0});var jAt=s(HG);two=r(jAt,"ConvNextFeatureExtractor"),jAt.forEach(t),awo=r(oIe," (ResNet model)"),oIe.forEach(t),nwo=i(W),mp=n(W,"LI",{});var rIe=s(mp);Vhe=n(rIe,"STRONG",{});var DAt=s(Vhe);swo=r(DAt,"segformer"),DAt.forEach(t),lwo=r(rIe," \u2014 "),JG=n(rIe,"A",{href:!0});var GAt=s(JG);iwo=r(GAt,"SegformerFeatureExtractor"),GAt.forEach(t),dwo=r(rIe," (SegFormer model)"),rIe.forEach(t),cwo=i(W),fp=n(W,"LI",{});var tIe=s(fp);Xhe=n(tIe,"STRONG",{});var OAt=s(Xhe);mwo=r(OAt,"speech_to_text"),OAt.forEach(t),fwo=r(tIe," \u2014 "),YG=n(tIe,"A",{href:!0});var VAt=s(YG);gwo=r(VAt,"Speech2TextFeatureExtractor"),VAt.forEach(t),hwo=r(tIe," (Speech2Text model)"),tIe.forEach(t),uwo=i(W),gp=n(W,"LI",{});var aIe=s(gp);zhe=n(aIe,"STRONG",{});var XAt=s(zhe);pwo=r(XAt,"swin"),XAt.forEach(t),_wo=r(aIe," \u2014 "),KG=n(aIe,"A",{href:!0});var zAt=s(KG);bwo=r(zAt,"ViTFeatureExtractor"),zAt.forEach(t),vwo=r(aIe," (Swin Transformer model)"),aIe.forEach(t),Fwo=i(W),hp=n(W,"LI",{});var nIe=s(hp);Qhe=n(nIe,"STRONG",{});var QAt=s(Qhe);Two=r(QAt,"swinv2"),QAt.forEach(t),Mwo=r(nIe," \u2014 "),ZG=n(nIe,"A",{href:!0});var WAt=s(ZG);Ewo=r(WAt,"ViTFeatureExtractor"),WAt.forEach(t),Cwo=r(nIe," (Swin Transformer V2 model)"),nIe.forEach(t),wwo=i(W),up=n(W,"LI",{});var sIe=s(up);Whe=n(sIe,"STRONG",{});var UAt=s(Whe);Awo=r(UAt,"van"),UAt.forEach(t),Lwo=r(sIe," \u2014 "),eO=n(sIe,"A",{href:!0});var HAt=s(eO);ywo=r(HAt,"ConvNextFeatureExtractor"),HAt.forEach(t),xwo=r(sIe," (VAN model)"),sIe.forEach(t),$wo=i(W),pp=n(W,"LI",{});var lIe=s(pp);Uhe=n(lIe,"STRONG",{});var JAt=s(Uhe);kwo=r(JAt,"videomae"),JAt.forEach(t),Swo=r(lIe," \u2014 "),oO=n(lIe,"A",{href:!0});var YAt=s(oO);Rwo=r(YAt,"VideoMAEFeatureExtractor"),YAt.forEach(t),Pwo=r(lIe," (VideoMAE model)"),lIe.forEach(t),Bwo=i(W),_p=n(W,"LI",{});var iIe=s(_p);Hhe=n(iIe,"STRONG",{});var KAt=s(Hhe);Iwo=r(KAt,"vilt"),KAt.forEach(t),Nwo=r(iIe," \u2014 "),rO=n(iIe,"A",{href:!0});var ZAt=s(rO);qwo=r(ZAt,"ViltFeatureExtractor"),ZAt.forEach(t),jwo=r(iIe," (ViLT model)"),iIe.forEach(t),Dwo=i(W),bp=n(W,"LI",{});var dIe=s(bp);Jhe=n(dIe,"STRONG",{});var e6t=s(Jhe);Gwo=r(e6t,"vit"),e6t.forEach(t),Owo=r(dIe," \u2014 "),tO=n(dIe,"A",{href:!0});var o6t=s(tO);Vwo=r(o6t,"ViTFeatureExtractor"),o6t.forEach(t),Xwo=r(dIe," (ViT model)"),dIe.forEach(t),zwo=i(W),vp=n(W,"LI",{});var cIe=s(vp);Yhe=n(cIe,"STRONG",{});var r6t=s(Yhe);Qwo=r(r6t,"vit_mae"),r6t.forEach(t),Wwo=r(cIe," \u2014 "),aO=n(cIe,"A",{href:!0});var t6t=s(aO);Uwo=r(t6t,"ViTFeatureExtractor"),t6t.forEach(t),Hwo=r(cIe," (ViTMAE model)"),cIe.forEach(t),Jwo=i(W),Fp=n(W,"LI",{});var mIe=s(Fp);Khe=n(mIe,"STRONG",{});var a6t=s(Khe);Ywo=r(a6t,"vit_msn"),a6t.forEach(t),Kwo=r(mIe," \u2014 "),nO=n(mIe,"A",{href:!0});var n6t=s(nO);Zwo=r(n6t,"ViTFeatureExtractor"),n6t.forEach(t),eAo=r(mIe," (ViTMSN model)"),mIe.forEach(t),oAo=i(W),Tp=n(W,"LI",{});var fIe=s(Tp);Zhe=n(fIe,"STRONG",{});var s6t=s(Zhe);rAo=r(s6t,"wav2vec2"),s6t.forEach(t),tAo=r(fIe," \u2014 "),sO=n(fIe,"A",{href:!0});var l6t=s(sO);aAo=r(l6t,"Wav2Vec2FeatureExtractor"),l6t.forEach(t),nAo=r(fIe," (Wav2Vec2 model)"),fIe.forEach(t),sAo=i(W),Mp=n(W,"LI",{});var gIe=s(Mp);eue=n(gIe,"STRONG",{});var i6t=s(eue);lAo=r(i6t,"wav2vec2-conformer"),i6t.forEach(t),iAo=r(gIe," \u2014 "),lO=n(gIe,"A",{href:!0});var d6t=s(lO);dAo=r(d6t,"Wav2Vec2FeatureExtractor"),d6t.forEach(t),cAo=r(gIe," (Wav2Vec2-Conformer model)"),gIe.forEach(t),mAo=i(W),Ep=n(W,"LI",{});var hIe=s(Ep);oue=n(hIe,"STRONG",{});var c6t=s(oue);fAo=r(c6t,"xclip"),c6t.forEach(t),gAo=r(hIe," \u2014 "),iO=n(hIe,"A",{href:!0});var m6t=s(iO);hAo=r(m6t,"CLIPFeatureExtractor"),m6t.forEach(t),uAo=r(hIe," (X-CLIP model)"),hIe.forEach(t),pAo=i(W),Cp=n(W,"LI",{});var uIe=s(Cp);rue=n(uIe,"STRONG",{});var f6t=s(rue);_Ao=r(f6t,"yolos"),f6t.forEach(t),bAo=r(uIe," \u2014 "),dO=n(uIe,"A",{href:!0});var g6t=s(dO);vAo=r(g6t,"YolosFeatureExtractor"),g6t.forEach(t),FAo=r(uIe," (YOLOS model)"),uIe.forEach(t),W.forEach(t),TAo=i(ba),T(wp.$$.fragment,ba),MAo=i(ba),T(Ap.$$.fragment,ba),ba.forEach(t),EAo=i(Cl),Lp=n(Cl,"DIV",{class:!0});var hoo=s(Lp);T(lx.$$.fragment,hoo),CAo=i(hoo),tue=n(hoo,"P",{});var h6t=s(tue);wAo=r(h6t,"Register a new feature extractor for this class."),h6t.forEach(t),hoo.forEach(t),Cl.forEach(t),tZe=i(m),ud=n(m,"H2",{class:!0});var uoo=s(ud);yp=n(uoo,"A",{id:!0,class:!0,href:!0});var u6t=s(yp);aue=n(u6t,"SPAN",{});var p6t=s(aue);T(ix.$$.fragment,p6t),p6t.forEach(t),u6t.forEach(t),AAo=i(uoo),nue=n(uoo,"SPAN",{});var _6t=s(nue);LAo=r(_6t,"AutoProcessor"),_6t.forEach(t),uoo.forEach(t),aZe=i(m),Ro=n(m,"DIV",{class:!0});var wl=s(Ro);T(dx.$$.fragment,wl),yAo=i(wl),cx=n(wl,"P",{});var poo=s(cx);xAo=r(poo,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cO=n(poo,"A",{href:!0});var b6t=s(cO);$Ao=r(b6t,"AutoProcessor.from_pretrained()"),b6t.forEach(t),kAo=r(poo," class method."),poo.forEach(t),SAo=i(wl),mx=n(wl,"P",{});var _oo=s(mx);RAo=r(_oo,"This class cannot be instantiated directly using "),sue=n(_oo,"CODE",{});var v6t=s(sue);PAo=r(v6t,"__init__()"),v6t.forEach(t),BAo=r(_oo," (throws an error)."),_oo.forEach(t),IAo=i(wl),Ke=n(wl,"DIV",{class:!0});var va=s(Ke);T(fx.$$.fragment,va),NAo=i(va),lue=n(va,"P",{});var F6t=s(lue);qAo=r(F6t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),F6t.forEach(t),jAo=i(va),pd=n(va,"P",{});var Lle=s(pd);DAo=r(Lle,"The processor class to instantiate is selected based on the "),iue=n(Lle,"CODE",{});var T6t=s(iue);GAo=r(T6t,"model_type"),T6t.forEach(t),OAo=r(Lle,` property of the config object (either
passed as an argument or loaded from `),due=n(Lle,"CODE",{});var M6t=s(due);VAo=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),XAo=r(Lle," if possible):"),Lle.forEach(t),zAo=i(va),ie=n(va,"UL",{});var ge=s(ie);xp=n(ge,"LI",{});var pIe=s(xp);cue=n(pIe,"STRONG",{});var E6t=s(cue);QAo=r(E6t,"clip"),E6t.forEach(t),WAo=r(pIe," \u2014 "),mO=n(pIe,"A",{href:!0});var C6t=s(mO);UAo=r(C6t,"CLIPProcessor"),C6t.forEach(t),HAo=r(pIe," (CLIP model)"),pIe.forEach(t),JAo=i(ge),$p=n(ge,"LI",{});var _Ie=s($p);mue=n(_Ie,"STRONG",{});var w6t=s(mue);YAo=r(w6t,"donut"),w6t.forEach(t),KAo=r(_Ie," \u2014 "),fO=n(_Ie,"A",{href:!0});var A6t=s(fO);ZAo=r(A6t,"DonutProcessor"),A6t.forEach(t),e6o=r(_Ie," (Donut model)"),_Ie.forEach(t),o6o=i(ge),kp=n(ge,"LI",{});var bIe=s(kp);fue=n(bIe,"STRONG",{});var L6t=s(fue);r6o=r(L6t,"flava"),L6t.forEach(t),t6o=r(bIe," \u2014 "),gO=n(bIe,"A",{href:!0});var y6t=s(gO);a6o=r(y6t,"FlavaProcessor"),y6t.forEach(t),n6o=r(bIe," (FLAVA model)"),bIe.forEach(t),s6o=i(ge),Sp=n(ge,"LI",{});var vIe=s(Sp);gue=n(vIe,"STRONG",{});var x6t=s(gue);l6o=r(x6t,"groupvit"),x6t.forEach(t),i6o=r(vIe," \u2014 "),hO=n(vIe,"A",{href:!0});var $6t=s(hO);d6o=r($6t,"CLIPProcessor"),$6t.forEach(t),c6o=r(vIe," (GroupViT model)"),vIe.forEach(t),m6o=i(ge),Rp=n(ge,"LI",{});var FIe=s(Rp);hue=n(FIe,"STRONG",{});var k6t=s(hue);f6o=r(k6t,"layoutlmv2"),k6t.forEach(t),g6o=r(FIe," \u2014 "),uO=n(FIe,"A",{href:!0});var S6t=s(uO);h6o=r(S6t,"LayoutLMv2Processor"),S6t.forEach(t),u6o=r(FIe," (LayoutLMv2 model)"),FIe.forEach(t),p6o=i(ge),Pp=n(ge,"LI",{});var TIe=s(Pp);uue=n(TIe,"STRONG",{});var R6t=s(uue);_6o=r(R6t,"layoutlmv3"),R6t.forEach(t),b6o=r(TIe," \u2014 "),pO=n(TIe,"A",{href:!0});var P6t=s(pO);v6o=r(P6t,"LayoutLMv3Processor"),P6t.forEach(t),F6o=r(TIe," (LayoutLMv3 model)"),TIe.forEach(t),T6o=i(ge),Bp=n(ge,"LI",{});var MIe=s(Bp);pue=n(MIe,"STRONG",{});var B6t=s(pue);M6o=r(B6t,"layoutxlm"),B6t.forEach(t),E6o=r(MIe," \u2014 "),_O=n(MIe,"A",{href:!0});var I6t=s(_O);C6o=r(I6t,"LayoutXLMProcessor"),I6t.forEach(t),w6o=r(MIe," (LayoutXLM model)"),MIe.forEach(t),A6o=i(ge),Ip=n(ge,"LI",{});var EIe=s(Ip);_ue=n(EIe,"STRONG",{});var N6t=s(_ue);L6o=r(N6t,"owlvit"),N6t.forEach(t),y6o=r(EIe," \u2014 "),bO=n(EIe,"A",{href:!0});var q6t=s(bO);x6o=r(q6t,"OwlViTProcessor"),q6t.forEach(t),$6o=r(EIe," (OWL-ViT model)"),EIe.forEach(t),k6o=i(ge),Np=n(ge,"LI",{});var CIe=s(Np);bue=n(CIe,"STRONG",{});var j6t=s(bue);S6o=r(j6t,"sew"),j6t.forEach(t),R6o=r(CIe," \u2014 "),vO=n(CIe,"A",{href:!0});var D6t=s(vO);P6o=r(D6t,"Wav2Vec2Processor"),D6t.forEach(t),B6o=r(CIe," (SEW model)"),CIe.forEach(t),I6o=i(ge),qp=n(ge,"LI",{});var wIe=s(qp);vue=n(wIe,"STRONG",{});var G6t=s(vue);N6o=r(G6t,"sew-d"),G6t.forEach(t),q6o=r(wIe," \u2014 "),FO=n(wIe,"A",{href:!0});var O6t=s(FO);j6o=r(O6t,"Wav2Vec2Processor"),O6t.forEach(t),D6o=r(wIe," (SEW-D model)"),wIe.forEach(t),G6o=i(ge),jp=n(ge,"LI",{});var AIe=s(jp);Fue=n(AIe,"STRONG",{});var V6t=s(Fue);O6o=r(V6t,"speech_to_text"),V6t.forEach(t),V6o=r(AIe," \u2014 "),TO=n(AIe,"A",{href:!0});var X6t=s(TO);X6o=r(X6t,"Speech2TextProcessor"),X6t.forEach(t),z6o=r(AIe," (Speech2Text model)"),AIe.forEach(t),Q6o=i(ge),Dp=n(ge,"LI",{});var LIe=s(Dp);Tue=n(LIe,"STRONG",{});var z6t=s(Tue);W6o=r(z6t,"speech_to_text_2"),z6t.forEach(t),U6o=r(LIe," \u2014 "),MO=n(LIe,"A",{href:!0});var Q6t=s(MO);H6o=r(Q6t,"Speech2Text2Processor"),Q6t.forEach(t),J6o=r(LIe," (Speech2Text2 model)"),LIe.forEach(t),Y6o=i(ge),Gp=n(ge,"LI",{});var yIe=s(Gp);Mue=n(yIe,"STRONG",{});var W6t=s(Mue);K6o=r(W6t,"trocr"),W6t.forEach(t),Z6o=r(yIe," \u2014 "),EO=n(yIe,"A",{href:!0});var U6t=s(EO);e7o=r(U6t,"TrOCRProcessor"),U6t.forEach(t),o7o=r(yIe," (TrOCR model)"),yIe.forEach(t),r7o=i(ge),Op=n(ge,"LI",{});var xIe=s(Op);Eue=n(xIe,"STRONG",{});var H6t=s(Eue);t7o=r(H6t,"unispeech"),H6t.forEach(t),a7o=r(xIe," \u2014 "),CO=n(xIe,"A",{href:!0});var J6t=s(CO);n7o=r(J6t,"Wav2Vec2Processor"),J6t.forEach(t),s7o=r(xIe," (UniSpeech model)"),xIe.forEach(t),l7o=i(ge),Vp=n(ge,"LI",{});var $Ie=s(Vp);Cue=n($Ie,"STRONG",{});var Y6t=s(Cue);i7o=r(Y6t,"unispeech-sat"),Y6t.forEach(t),d7o=r($Ie," \u2014 "),wO=n($Ie,"A",{href:!0});var K6t=s(wO);c7o=r(K6t,"Wav2Vec2Processor"),K6t.forEach(t),m7o=r($Ie," (UniSpeechSat model)"),$Ie.forEach(t),f7o=i(ge),Xp=n(ge,"LI",{});var kIe=s(Xp);wue=n(kIe,"STRONG",{});var Z6t=s(wue);g7o=r(Z6t,"vilt"),Z6t.forEach(t),h7o=r(kIe," \u2014 "),AO=n(kIe,"A",{href:!0});var e7t=s(AO);u7o=r(e7t,"ViltProcessor"),e7t.forEach(t),p7o=r(kIe," (ViLT model)"),kIe.forEach(t),_7o=i(ge),zp=n(ge,"LI",{});var SIe=s(zp);Aue=n(SIe,"STRONG",{});var o7t=s(Aue);b7o=r(o7t,"vision-text-dual-encoder"),o7t.forEach(t),v7o=r(SIe," \u2014 "),LO=n(SIe,"A",{href:!0});var r7t=s(LO);F7o=r(r7t,"VisionTextDualEncoderProcessor"),r7t.forEach(t),T7o=r(SIe," (VisionTextDualEncoder model)"),SIe.forEach(t),M7o=i(ge),Qp=n(ge,"LI",{});var RIe=s(Qp);Lue=n(RIe,"STRONG",{});var t7t=s(Lue);E7o=r(t7t,"wav2vec2"),t7t.forEach(t),C7o=r(RIe," \u2014 "),yO=n(RIe,"A",{href:!0});var a7t=s(yO);w7o=r(a7t,"Wav2Vec2Processor"),a7t.forEach(t),A7o=r(RIe," (Wav2Vec2 model)"),RIe.forEach(t),L7o=i(ge),Wp=n(ge,"LI",{});var PIe=s(Wp);yue=n(PIe,"STRONG",{});var n7t=s(yue);y7o=r(n7t,"wav2vec2-conformer"),n7t.forEach(t),x7o=r(PIe," \u2014 "),xO=n(PIe,"A",{href:!0});var s7t=s(xO);$7o=r(s7t,"Wav2Vec2Processor"),s7t.forEach(t),k7o=r(PIe," (Wav2Vec2-Conformer model)"),PIe.forEach(t),S7o=i(ge),Up=n(ge,"LI",{});var BIe=s(Up);xue=n(BIe,"STRONG",{});var l7t=s(xue);R7o=r(l7t,"wavlm"),l7t.forEach(t),P7o=r(BIe," \u2014 "),$O=n(BIe,"A",{href:!0});var i7t=s($O);B7o=r(i7t,"Wav2Vec2Processor"),i7t.forEach(t),I7o=r(BIe," (WavLM model)"),BIe.forEach(t),N7o=i(ge),Hp=n(ge,"LI",{});var IIe=s(Hp);$ue=n(IIe,"STRONG",{});var d7t=s($ue);q7o=r(d7t,"xclip"),d7t.forEach(t),j7o=r(IIe," \u2014 "),kO=n(IIe,"A",{href:!0});var c7t=s(kO);D7o=r(c7t,"CLIPProcessor"),c7t.forEach(t),G7o=r(IIe," (X-CLIP model)"),IIe.forEach(t),ge.forEach(t),O7o=i(va),T(Jp.$$.fragment,va),V7o=i(va),T(Yp.$$.fragment,va),va.forEach(t),X7o=i(wl),Kp=n(wl,"DIV",{class:!0});var boo=s(Kp);T(gx.$$.fragment,boo),z7o=i(boo),kue=n(boo,"P",{});var m7t=s(kue);Q7o=r(m7t,"Register a new processor for this class."),m7t.forEach(t),boo.forEach(t),wl.forEach(t),nZe=i(m),_d=n(m,"H2",{class:!0});var voo=s(_d);Zp=n(voo,"A",{id:!0,class:!0,href:!0});var f7t=s(Zp);Sue=n(f7t,"SPAN",{});var g7t=s(Sue);T(hx.$$.fragment,g7t),g7t.forEach(t),f7t.forEach(t),W7o=i(voo),Rue=n(voo,"SPAN",{});var h7t=s(Rue);U7o=r(h7t,"AutoModel"),h7t.forEach(t),voo.forEach(t),sZe=i(m),Po=n(m,"DIV",{class:!0});var Al=s(Po);T(ux.$$.fragment,Al),H7o=i(Al),bd=n(Al,"P",{});var yle=s(bd);J7o=r(yle,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SO=n(yle,"A",{href:!0});var u7t=s(SO);Y7o=r(u7t,"from_pretrained()"),u7t.forEach(t),K7o=r(yle," class method or the "),RO=n(yle,"A",{href:!0});var p7t=s(RO);Z7o=r(p7t,"from_config()"),p7t.forEach(t),eLo=r(yle,` class
method.`),yle.forEach(t),oLo=i(Al),px=n(Al,"P",{});var Foo=s(px);rLo=r(Foo,"This class cannot be instantiated directly using "),Pue=n(Foo,"CODE",{});var _7t=s(Pue);tLo=r(_7t,"__init__()"),_7t.forEach(t),aLo=r(Foo," (throws an error)."),Foo.forEach(t),nLo=i(Al),_t=n(Al,"DIV",{class:!0});var Iy=s(_t);T(_x.$$.fragment,Iy),sLo=i(Iy),Bue=n(Iy,"P",{});var b7t=s(Bue);lLo=r(b7t,"Instantiates one of the base model classes of the library from a configuration."),b7t.forEach(t),iLo=i(Iy),vd=n(Iy,"P",{});var xle=s(vd);dLo=r(xle,`Note:
Loading a model from its configuration file does `),Iue=n(xle,"STRONG",{});var v7t=s(Iue);cLo=r(v7t,"not"),v7t.forEach(t),mLo=r(xle,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(xle,"A",{href:!0});var F7t=s(PO);fLo=r(F7t,"from_pretrained()"),F7t.forEach(t),gLo=r(xle," to load the model weights."),xle.forEach(t),hLo=i(Iy),T(e_.$$.fragment,Iy),Iy.forEach(t),uLo=i(Al),Ze=n(Al,"DIV",{class:!0});var Fa=s(Ze);T(bx.$$.fragment,Fa),pLo=i(Fa),Nue=n(Fa,"P",{});var T7t=s(Nue);_Lo=r(T7t,"Instantiate one of the base model classes of the library from a pretrained model."),T7t.forEach(t),bLo=i(Fa),Ja=n(Fa,"P",{});var Ny=s(Ja);vLo=r(Ny,"The model class to instantiate is selected based on the "),que=n(Ny,"CODE",{});var M7t=s(que);FLo=r(M7t,"model_type"),M7t.forEach(t),TLo=r(Ny,` property of the config object (either
passed as an argument or loaded from `),jue=n(Ny,"CODE",{});var E7t=s(jue);MLo=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),ELo=r(Ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(Ny,"CODE",{});var C7t=s(Due);CLo=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),wLo=r(Ny,":"),Ny.forEach(t),ALo=i(Fa),y=n(Fa,"UL",{});var x=s(y);o_=n(x,"LI",{});var NIe=s(o_);Gue=n(NIe,"STRONG",{});var w7t=s(Gue);LLo=r(w7t,"albert"),w7t.forEach(t),yLo=r(NIe," \u2014 "),BO=n(NIe,"A",{href:!0});var A7t=s(BO);xLo=r(A7t,"AlbertModel"),A7t.forEach(t),$Lo=r(NIe," (ALBERT model)"),NIe.forEach(t),kLo=i(x),r_=n(x,"LI",{});var qIe=s(r_);Oue=n(qIe,"STRONG",{});var L7t=s(Oue);SLo=r(L7t,"bart"),L7t.forEach(t),RLo=r(qIe," \u2014 "),IO=n(qIe,"A",{href:!0});var y7t=s(IO);PLo=r(y7t,"BartModel"),y7t.forEach(t),BLo=r(qIe," (BART model)"),qIe.forEach(t),ILo=i(x),t_=n(x,"LI",{});var jIe=s(t_);Vue=n(jIe,"STRONG",{});var x7t=s(Vue);NLo=r(x7t,"beit"),x7t.forEach(t),qLo=r(jIe," \u2014 "),NO=n(jIe,"A",{href:!0});var $7t=s(NO);jLo=r($7t,"BeitModel"),$7t.forEach(t),DLo=r(jIe," (BEiT model)"),jIe.forEach(t),GLo=i(x),a_=n(x,"LI",{});var DIe=s(a_);Xue=n(DIe,"STRONG",{});var k7t=s(Xue);OLo=r(k7t,"bert"),k7t.forEach(t),VLo=r(DIe," \u2014 "),qO=n(DIe,"A",{href:!0});var S7t=s(qO);XLo=r(S7t,"BertModel"),S7t.forEach(t),zLo=r(DIe," (BERT model)"),DIe.forEach(t),QLo=i(x),n_=n(x,"LI",{});var GIe=s(n_);zue=n(GIe,"STRONG",{});var R7t=s(zue);WLo=r(R7t,"bert-generation"),R7t.forEach(t),ULo=r(GIe," \u2014 "),jO=n(GIe,"A",{href:!0});var P7t=s(jO);HLo=r(P7t,"BertGenerationEncoder"),P7t.forEach(t),JLo=r(GIe," (Bert Generation model)"),GIe.forEach(t),YLo=i(x),s_=n(x,"LI",{});var OIe=s(s_);Que=n(OIe,"STRONG",{});var B7t=s(Que);KLo=r(B7t,"big_bird"),B7t.forEach(t),ZLo=r(OIe," \u2014 "),DO=n(OIe,"A",{href:!0});var I7t=s(DO);eyo=r(I7t,"BigBirdModel"),I7t.forEach(t),oyo=r(OIe," (BigBird model)"),OIe.forEach(t),ryo=i(x),l_=n(x,"LI",{});var VIe=s(l_);Wue=n(VIe,"STRONG",{});var N7t=s(Wue);tyo=r(N7t,"bigbird_pegasus"),N7t.forEach(t),ayo=r(VIe," \u2014 "),GO=n(VIe,"A",{href:!0});var q7t=s(GO);nyo=r(q7t,"BigBirdPegasusModel"),q7t.forEach(t),syo=r(VIe," (BigBird-Pegasus model)"),VIe.forEach(t),lyo=i(x),i_=n(x,"LI",{});var XIe=s(i_);Uue=n(XIe,"STRONG",{});var j7t=s(Uue);iyo=r(j7t,"blenderbot"),j7t.forEach(t),dyo=r(XIe," \u2014 "),OO=n(XIe,"A",{href:!0});var D7t=s(OO);cyo=r(D7t,"BlenderbotModel"),D7t.forEach(t),myo=r(XIe," (Blenderbot model)"),XIe.forEach(t),fyo=i(x),d_=n(x,"LI",{});var zIe=s(d_);Hue=n(zIe,"STRONG",{});var G7t=s(Hue);gyo=r(G7t,"blenderbot-small"),G7t.forEach(t),hyo=r(zIe," \u2014 "),VO=n(zIe,"A",{href:!0});var O7t=s(VO);uyo=r(O7t,"BlenderbotSmallModel"),O7t.forEach(t),pyo=r(zIe," (BlenderbotSmall model)"),zIe.forEach(t),_yo=i(x),c_=n(x,"LI",{});var QIe=s(c_);Jue=n(QIe,"STRONG",{});var V7t=s(Jue);byo=r(V7t,"bloom"),V7t.forEach(t),vyo=r(QIe," \u2014 "),XO=n(QIe,"A",{href:!0});var X7t=s(XO);Fyo=r(X7t,"BloomModel"),X7t.forEach(t),Tyo=r(QIe," (BLOOM model)"),QIe.forEach(t),Myo=i(x),m_=n(x,"LI",{});var WIe=s(m_);Yue=n(WIe,"STRONG",{});var z7t=s(Yue);Eyo=r(z7t,"camembert"),z7t.forEach(t),Cyo=r(WIe," \u2014 "),zO=n(WIe,"A",{href:!0});var Q7t=s(zO);wyo=r(Q7t,"CamembertModel"),Q7t.forEach(t),Ayo=r(WIe," (CamemBERT model)"),WIe.forEach(t),Lyo=i(x),f_=n(x,"LI",{});var UIe=s(f_);Kue=n(UIe,"STRONG",{});var W7t=s(Kue);yyo=r(W7t,"canine"),W7t.forEach(t),xyo=r(UIe," \u2014 "),QO=n(UIe,"A",{href:!0});var U7t=s(QO);$yo=r(U7t,"CanineModel"),U7t.forEach(t),kyo=r(UIe," (CANINE model)"),UIe.forEach(t),Syo=i(x),g_=n(x,"LI",{});var HIe=s(g_);Zue=n(HIe,"STRONG",{});var H7t=s(Zue);Ryo=r(H7t,"clip"),H7t.forEach(t),Pyo=r(HIe," \u2014 "),WO=n(HIe,"A",{href:!0});var J7t=s(WO);Byo=r(J7t,"CLIPModel"),J7t.forEach(t),Iyo=r(HIe," (CLIP model)"),HIe.forEach(t),Nyo=i(x),h_=n(x,"LI",{});var JIe=s(h_);epe=n(JIe,"STRONG",{});var Y7t=s(epe);qyo=r(Y7t,"codegen"),Y7t.forEach(t),jyo=r(JIe," \u2014 "),UO=n(JIe,"A",{href:!0});var K7t=s(UO);Dyo=r(K7t,"CodeGenModel"),K7t.forEach(t),Gyo=r(JIe," (CodeGen model)"),JIe.forEach(t),Oyo=i(x),u_=n(x,"LI",{});var YIe=s(u_);ope=n(YIe,"STRONG",{});var Z7t=s(ope);Vyo=r(Z7t,"conditional_detr"),Z7t.forEach(t),Xyo=r(YIe," \u2014 "),HO=n(YIe,"A",{href:!0});var eLt=s(HO);zyo=r(eLt,"ConditionalDetrModel"),eLt.forEach(t),Qyo=r(YIe," (Conditional DETR model)"),YIe.forEach(t),Wyo=i(x),p_=n(x,"LI",{});var KIe=s(p_);rpe=n(KIe,"STRONG",{});var oLt=s(rpe);Uyo=r(oLt,"convbert"),oLt.forEach(t),Hyo=r(KIe," \u2014 "),JO=n(KIe,"A",{href:!0});var rLt=s(JO);Jyo=r(rLt,"ConvBertModel"),rLt.forEach(t),Yyo=r(KIe," (ConvBERT model)"),KIe.forEach(t),Kyo=i(x),__=n(x,"LI",{});var ZIe=s(__);tpe=n(ZIe,"STRONG",{});var tLt=s(tpe);Zyo=r(tLt,"convnext"),tLt.forEach(t),e8o=r(ZIe," \u2014 "),YO=n(ZIe,"A",{href:!0});var aLt=s(YO);o8o=r(aLt,"ConvNextModel"),aLt.forEach(t),r8o=r(ZIe," (ConvNeXT model)"),ZIe.forEach(t),t8o=i(x),b_=n(x,"LI",{});var eNe=s(b_);ape=n(eNe,"STRONG",{});var nLt=s(ape);a8o=r(nLt,"ctrl"),nLt.forEach(t),n8o=r(eNe," \u2014 "),KO=n(eNe,"A",{href:!0});var sLt=s(KO);s8o=r(sLt,"CTRLModel"),sLt.forEach(t),l8o=r(eNe," (CTRL model)"),eNe.forEach(t),i8o=i(x),v_=n(x,"LI",{});var oNe=s(v_);npe=n(oNe,"STRONG",{});var lLt=s(npe);d8o=r(lLt,"cvt"),lLt.forEach(t),c8o=r(oNe," \u2014 "),ZO=n(oNe,"A",{href:!0});var iLt=s(ZO);m8o=r(iLt,"CvtModel"),iLt.forEach(t),f8o=r(oNe," (CvT model)"),oNe.forEach(t),g8o=i(x),F_=n(x,"LI",{});var rNe=s(F_);spe=n(rNe,"STRONG",{});var dLt=s(spe);h8o=r(dLt,"data2vec-audio"),dLt.forEach(t),u8o=r(rNe," \u2014 "),eV=n(rNe,"A",{href:!0});var cLt=s(eV);p8o=r(cLt,"Data2VecAudioModel"),cLt.forEach(t),_8o=r(rNe," (Data2VecAudio model)"),rNe.forEach(t),b8o=i(x),T_=n(x,"LI",{});var tNe=s(T_);lpe=n(tNe,"STRONG",{});var mLt=s(lpe);v8o=r(mLt,"data2vec-text"),mLt.forEach(t),F8o=r(tNe," \u2014 "),oV=n(tNe,"A",{href:!0});var fLt=s(oV);T8o=r(fLt,"Data2VecTextModel"),fLt.forEach(t),M8o=r(tNe," (Data2VecText model)"),tNe.forEach(t),E8o=i(x),M_=n(x,"LI",{});var aNe=s(M_);ipe=n(aNe,"STRONG",{});var gLt=s(ipe);C8o=r(gLt,"data2vec-vision"),gLt.forEach(t),w8o=r(aNe," \u2014 "),rV=n(aNe,"A",{href:!0});var hLt=s(rV);A8o=r(hLt,"Data2VecVisionModel"),hLt.forEach(t),L8o=r(aNe," (Data2VecVision model)"),aNe.forEach(t),y8o=i(x),E_=n(x,"LI",{});var nNe=s(E_);dpe=n(nNe,"STRONG",{});var uLt=s(dpe);x8o=r(uLt,"deberta"),uLt.forEach(t),$8o=r(nNe," \u2014 "),tV=n(nNe,"A",{href:!0});var pLt=s(tV);k8o=r(pLt,"DebertaModel"),pLt.forEach(t),S8o=r(nNe," (DeBERTa model)"),nNe.forEach(t),R8o=i(x),C_=n(x,"LI",{});var sNe=s(C_);cpe=n(sNe,"STRONG",{});var _Lt=s(cpe);P8o=r(_Lt,"deberta-v2"),_Lt.forEach(t),B8o=r(sNe," \u2014 "),aV=n(sNe,"A",{href:!0});var bLt=s(aV);I8o=r(bLt,"DebertaV2Model"),bLt.forEach(t),N8o=r(sNe," (DeBERTa-v2 model)"),sNe.forEach(t),q8o=i(x),w_=n(x,"LI",{});var lNe=s(w_);mpe=n(lNe,"STRONG",{});var vLt=s(mpe);j8o=r(vLt,"decision_transformer"),vLt.forEach(t),D8o=r(lNe," \u2014 "),nV=n(lNe,"A",{href:!0});var FLt=s(nV);G8o=r(FLt,"DecisionTransformerModel"),FLt.forEach(t),O8o=r(lNe," (Decision Transformer model)"),lNe.forEach(t),V8o=i(x),A_=n(x,"LI",{});var iNe=s(A_);fpe=n(iNe,"STRONG",{});var TLt=s(fpe);X8o=r(TLt,"deformable_detr"),TLt.forEach(t),z8o=r(iNe," \u2014 "),sV=n(iNe,"A",{href:!0});var MLt=s(sV);Q8o=r(MLt,"DeformableDetrModel"),MLt.forEach(t),W8o=r(iNe," (Deformable DETR model)"),iNe.forEach(t),U8o=i(x),L_=n(x,"LI",{});var dNe=s(L_);gpe=n(dNe,"STRONG",{});var ELt=s(gpe);H8o=r(ELt,"deit"),ELt.forEach(t),J8o=r(dNe," \u2014 "),lV=n(dNe,"A",{href:!0});var CLt=s(lV);Y8o=r(CLt,"DeiTModel"),CLt.forEach(t),K8o=r(dNe," (DeiT model)"),dNe.forEach(t),Z8o=i(x),y_=n(x,"LI",{});var cNe=s(y_);hpe=n(cNe,"STRONG",{});var wLt=s(hpe);e9o=r(wLt,"detr"),wLt.forEach(t),o9o=r(cNe," \u2014 "),iV=n(cNe,"A",{href:!0});var ALt=s(iV);r9o=r(ALt,"DetrModel"),ALt.forEach(t),t9o=r(cNe," (DETR model)"),cNe.forEach(t),a9o=i(x),x_=n(x,"LI",{});var mNe=s(x_);upe=n(mNe,"STRONG",{});var LLt=s(upe);n9o=r(LLt,"distilbert"),LLt.forEach(t),s9o=r(mNe," \u2014 "),dV=n(mNe,"A",{href:!0});var yLt=s(dV);l9o=r(yLt,"DistilBertModel"),yLt.forEach(t),i9o=r(mNe," (DistilBERT model)"),mNe.forEach(t),d9o=i(x),$_=n(x,"LI",{});var fNe=s($_);ppe=n(fNe,"STRONG",{});var xLt=s(ppe);c9o=r(xLt,"donut-swin"),xLt.forEach(t),m9o=r(fNe," \u2014 "),cV=n(fNe,"A",{href:!0});var $Lt=s(cV);f9o=r($Lt,"DonutSwinModel"),$Lt.forEach(t),g9o=r(fNe," (DonutSwin model)"),fNe.forEach(t),h9o=i(x),k_=n(x,"LI",{});var gNe=s(k_);_pe=n(gNe,"STRONG",{});var kLt=s(_pe);u9o=r(kLt,"dpr"),kLt.forEach(t),p9o=r(gNe," \u2014 "),mV=n(gNe,"A",{href:!0});var SLt=s(mV);_9o=r(SLt,"DPRQuestionEncoder"),SLt.forEach(t),b9o=r(gNe," (DPR model)"),gNe.forEach(t),v9o=i(x),S_=n(x,"LI",{});var hNe=s(S_);bpe=n(hNe,"STRONG",{});var RLt=s(bpe);F9o=r(RLt,"dpt"),RLt.forEach(t),T9o=r(hNe," \u2014 "),fV=n(hNe,"A",{href:!0});var PLt=s(fV);M9o=r(PLt,"DPTModel"),PLt.forEach(t),E9o=r(hNe," (DPT model)"),hNe.forEach(t),C9o=i(x),R_=n(x,"LI",{});var uNe=s(R_);vpe=n(uNe,"STRONG",{});var BLt=s(vpe);w9o=r(BLt,"electra"),BLt.forEach(t),A9o=r(uNe," \u2014 "),gV=n(uNe,"A",{href:!0});var ILt=s(gV);L9o=r(ILt,"ElectraModel"),ILt.forEach(t),y9o=r(uNe," (ELECTRA model)"),uNe.forEach(t),x9o=i(x),P_=n(x,"LI",{});var pNe=s(P_);Fpe=n(pNe,"STRONG",{});var NLt=s(Fpe);$9o=r(NLt,"ernie"),NLt.forEach(t),k9o=r(pNe," \u2014 "),hV=n(pNe,"A",{href:!0});var qLt=s(hV);S9o=r(qLt,"ErnieModel"),qLt.forEach(t),R9o=r(pNe," (ERNIE model)"),pNe.forEach(t),P9o=i(x),B_=n(x,"LI",{});var _Ne=s(B_);Tpe=n(_Ne,"STRONG",{});var jLt=s(Tpe);B9o=r(jLt,"flaubert"),jLt.forEach(t),I9o=r(_Ne," \u2014 "),uV=n(_Ne,"A",{href:!0});var DLt=s(uV);N9o=r(DLt,"FlaubertModel"),DLt.forEach(t),q9o=r(_Ne," (FlauBERT model)"),_Ne.forEach(t),j9o=i(x),I_=n(x,"LI",{});var bNe=s(I_);Mpe=n(bNe,"STRONG",{});var GLt=s(Mpe);D9o=r(GLt,"flava"),GLt.forEach(t),G9o=r(bNe," \u2014 "),pV=n(bNe,"A",{href:!0});var OLt=s(pV);O9o=r(OLt,"FlavaModel"),OLt.forEach(t),V9o=r(bNe," (FLAVA model)"),bNe.forEach(t),X9o=i(x),N_=n(x,"LI",{});var vNe=s(N_);Epe=n(vNe,"STRONG",{});var VLt=s(Epe);z9o=r(VLt,"fnet"),VLt.forEach(t),Q9o=r(vNe," \u2014 "),_V=n(vNe,"A",{href:!0});var XLt=s(_V);W9o=r(XLt,"FNetModel"),XLt.forEach(t),U9o=r(vNe," (FNet model)"),vNe.forEach(t),H9o=i(x),q_=n(x,"LI",{});var FNe=s(q_);Cpe=n(FNe,"STRONG",{});var zLt=s(Cpe);J9o=r(zLt,"fsmt"),zLt.forEach(t),Y9o=r(FNe," \u2014 "),bV=n(FNe,"A",{href:!0});var QLt=s(bV);K9o=r(QLt,"FSMTModel"),QLt.forEach(t),Z9o=r(FNe," (FairSeq Machine-Translation model)"),FNe.forEach(t),exo=i(x),_l=n(x,"LI",{});var NB=s(_l);wpe=n(NB,"STRONG",{});var WLt=s(wpe);oxo=r(WLt,"funnel"),WLt.forEach(t),rxo=r(NB," \u2014 "),vV=n(NB,"A",{href:!0});var ULt=s(vV);txo=r(ULt,"FunnelModel"),ULt.forEach(t),axo=r(NB," or "),FV=n(NB,"A",{href:!0});var HLt=s(FV);nxo=r(HLt,"FunnelBaseModel"),HLt.forEach(t),sxo=r(NB," (Funnel Transformer model)"),NB.forEach(t),lxo=i(x),j_=n(x,"LI",{});var TNe=s(j_);Ape=n(TNe,"STRONG",{});var JLt=s(Ape);ixo=r(JLt,"glpn"),JLt.forEach(t),dxo=r(TNe," \u2014 "),TV=n(TNe,"A",{href:!0});var YLt=s(TV);cxo=r(YLt,"GLPNModel"),YLt.forEach(t),mxo=r(TNe," (GLPN model)"),TNe.forEach(t),fxo=i(x),D_=n(x,"LI",{});var MNe=s(D_);Lpe=n(MNe,"STRONG",{});var KLt=s(Lpe);gxo=r(KLt,"gpt2"),KLt.forEach(t),hxo=r(MNe," \u2014 "),MV=n(MNe,"A",{href:!0});var ZLt=s(MV);uxo=r(ZLt,"GPT2Model"),ZLt.forEach(t),pxo=r(MNe," (OpenAI GPT-2 model)"),MNe.forEach(t),_xo=i(x),G_=n(x,"LI",{});var ENe=s(G_);ype=n(ENe,"STRONG",{});var eyt=s(ype);bxo=r(eyt,"gpt_neo"),eyt.forEach(t),vxo=r(ENe," \u2014 "),EV=n(ENe,"A",{href:!0});var oyt=s(EV);Fxo=r(oyt,"GPTNeoModel"),oyt.forEach(t),Txo=r(ENe," (GPT Neo model)"),ENe.forEach(t),Mxo=i(x),O_=n(x,"LI",{});var CNe=s(O_);xpe=n(CNe,"STRONG",{});var ryt=s(xpe);Exo=r(ryt,"gpt_neox"),ryt.forEach(t),Cxo=r(CNe," \u2014 "),CV=n(CNe,"A",{href:!0});var tyt=s(CV);wxo=r(tyt,"GPTNeoXModel"),tyt.forEach(t),Axo=r(CNe," (GPT NeoX model)"),CNe.forEach(t),Lxo=i(x),V_=n(x,"LI",{});var wNe=s(V_);$pe=n(wNe,"STRONG",{});var ayt=s($pe);yxo=r(ayt,"gpt_neox_japanese"),ayt.forEach(t),xxo=r(wNe," \u2014 "),wV=n(wNe,"A",{href:!0});var nyt=s(wV);$xo=r(nyt,"GPTNeoXJapaneseModel"),nyt.forEach(t),kxo=r(wNe," (GPT NeoX Japanese model)"),wNe.forEach(t),Sxo=i(x),X_=n(x,"LI",{});var ANe=s(X_);kpe=n(ANe,"STRONG",{});var syt=s(kpe);Rxo=r(syt,"gptj"),syt.forEach(t),Pxo=r(ANe," \u2014 "),AV=n(ANe,"A",{href:!0});var lyt=s(AV);Bxo=r(lyt,"GPTJModel"),lyt.forEach(t),Ixo=r(ANe," (GPT-J model)"),ANe.forEach(t),Nxo=i(x),z_=n(x,"LI",{});var LNe=s(z_);Spe=n(LNe,"STRONG",{});var iyt=s(Spe);qxo=r(iyt,"groupvit"),iyt.forEach(t),jxo=r(LNe," \u2014 "),LV=n(LNe,"A",{href:!0});var dyt=s(LV);Dxo=r(dyt,"GroupViTModel"),dyt.forEach(t),Gxo=r(LNe," (GroupViT model)"),LNe.forEach(t),Oxo=i(x),Q_=n(x,"LI",{});var yNe=s(Q_);Rpe=n(yNe,"STRONG",{});var cyt=s(Rpe);Vxo=r(cyt,"hubert"),cyt.forEach(t),Xxo=r(yNe," \u2014 "),yV=n(yNe,"A",{href:!0});var myt=s(yV);zxo=r(myt,"HubertModel"),myt.forEach(t),Qxo=r(yNe," (Hubert model)"),yNe.forEach(t),Wxo=i(x),W_=n(x,"LI",{});var xNe=s(W_);Ppe=n(xNe,"STRONG",{});var fyt=s(Ppe);Uxo=r(fyt,"ibert"),fyt.forEach(t),Hxo=r(xNe," \u2014 "),xV=n(xNe,"A",{href:!0});var gyt=s(xV);Jxo=r(gyt,"IBertModel"),gyt.forEach(t),Yxo=r(xNe," (I-BERT model)"),xNe.forEach(t),Kxo=i(x),U_=n(x,"LI",{});var $Ne=s(U_);Bpe=n($Ne,"STRONG",{});var hyt=s(Bpe);Zxo=r(hyt,"imagegpt"),hyt.forEach(t),e$o=r($Ne," \u2014 "),$V=n($Ne,"A",{href:!0});var uyt=s($V);o$o=r(uyt,"ImageGPTModel"),uyt.forEach(t),r$o=r($Ne," (ImageGPT model)"),$Ne.forEach(t),t$o=i(x),H_=n(x,"LI",{});var kNe=s(H_);Ipe=n(kNe,"STRONG",{});var pyt=s(Ipe);a$o=r(pyt,"layoutlm"),pyt.forEach(t),n$o=r(kNe," \u2014 "),kV=n(kNe,"A",{href:!0});var _yt=s(kV);s$o=r(_yt,"LayoutLMModel"),_yt.forEach(t),l$o=r(kNe," (LayoutLM model)"),kNe.forEach(t),i$o=i(x),J_=n(x,"LI",{});var SNe=s(J_);Npe=n(SNe,"STRONG",{});var byt=s(Npe);d$o=r(byt,"layoutlmv2"),byt.forEach(t),c$o=r(SNe," \u2014 "),SV=n(SNe,"A",{href:!0});var vyt=s(SV);m$o=r(vyt,"LayoutLMv2Model"),vyt.forEach(t),f$o=r(SNe," (LayoutLMv2 model)"),SNe.forEach(t),g$o=i(x),Y_=n(x,"LI",{});var RNe=s(Y_);qpe=n(RNe,"STRONG",{});var Fyt=s(qpe);h$o=r(Fyt,"layoutlmv3"),Fyt.forEach(t),u$o=r(RNe," \u2014 "),RV=n(RNe,"A",{href:!0});var Tyt=s(RV);p$o=r(Tyt,"LayoutLMv3Model"),Tyt.forEach(t),_$o=r(RNe," (LayoutLMv3 model)"),RNe.forEach(t),b$o=i(x),K_=n(x,"LI",{});var PNe=s(K_);jpe=n(PNe,"STRONG",{});var Myt=s(jpe);v$o=r(Myt,"led"),Myt.forEach(t),F$o=r(PNe," \u2014 "),PV=n(PNe,"A",{href:!0});var Eyt=s(PV);T$o=r(Eyt,"LEDModel"),Eyt.forEach(t),M$o=r(PNe," (LED model)"),PNe.forEach(t),E$o=i(x),Z_=n(x,"LI",{});var BNe=s(Z_);Dpe=n(BNe,"STRONG",{});var Cyt=s(Dpe);C$o=r(Cyt,"levit"),Cyt.forEach(t),w$o=r(BNe," \u2014 "),BV=n(BNe,"A",{href:!0});var wyt=s(BV);A$o=r(wyt,"LevitModel"),wyt.forEach(t),L$o=r(BNe," (LeViT model)"),BNe.forEach(t),y$o=i(x),eb=n(x,"LI",{});var INe=s(eb);Gpe=n(INe,"STRONG",{});var Ayt=s(Gpe);x$o=r(Ayt,"longformer"),Ayt.forEach(t),$$o=r(INe," \u2014 "),IV=n(INe,"A",{href:!0});var Lyt=s(IV);k$o=r(Lyt,"LongformerModel"),Lyt.forEach(t),S$o=r(INe," (Longformer model)"),INe.forEach(t),R$o=i(x),ob=n(x,"LI",{});var NNe=s(ob);Ope=n(NNe,"STRONG",{});var yyt=s(Ope);P$o=r(yyt,"longt5"),yyt.forEach(t),B$o=r(NNe," \u2014 "),NV=n(NNe,"A",{href:!0});var xyt=s(NV);I$o=r(xyt,"LongT5Model"),xyt.forEach(t),N$o=r(NNe," (LongT5 model)"),NNe.forEach(t),q$o=i(x),rb=n(x,"LI",{});var qNe=s(rb);Vpe=n(qNe,"STRONG",{});var $yt=s(Vpe);j$o=r($yt,"luke"),$yt.forEach(t),D$o=r(qNe," \u2014 "),qV=n(qNe,"A",{href:!0});var kyt=s(qV);G$o=r(kyt,"LukeModel"),kyt.forEach(t),O$o=r(qNe," (LUKE model)"),qNe.forEach(t),V$o=i(x),tb=n(x,"LI",{});var jNe=s(tb);Xpe=n(jNe,"STRONG",{});var Syt=s(Xpe);X$o=r(Syt,"lxmert"),Syt.forEach(t),z$o=r(jNe," \u2014 "),jV=n(jNe,"A",{href:!0});var Ryt=s(jV);Q$o=r(Ryt,"LxmertModel"),Ryt.forEach(t),W$o=r(jNe," (LXMERT model)"),jNe.forEach(t),U$o=i(x),ab=n(x,"LI",{});var DNe=s(ab);zpe=n(DNe,"STRONG",{});var Pyt=s(zpe);H$o=r(Pyt,"m2m_100"),Pyt.forEach(t),J$o=r(DNe," \u2014 "),DV=n(DNe,"A",{href:!0});var Byt=s(DV);Y$o=r(Byt,"M2M100Model"),Byt.forEach(t),K$o=r(DNe," (M2M100 model)"),DNe.forEach(t),Z$o=i(x),nb=n(x,"LI",{});var GNe=s(nb);Qpe=n(GNe,"STRONG",{});var Iyt=s(Qpe);eko=r(Iyt,"marian"),Iyt.forEach(t),oko=r(GNe," \u2014 "),GV=n(GNe,"A",{href:!0});var Nyt=s(GV);rko=r(Nyt,"MarianModel"),Nyt.forEach(t),tko=r(GNe," (Marian model)"),GNe.forEach(t),ako=i(x),sb=n(x,"LI",{});var ONe=s(sb);Wpe=n(ONe,"STRONG",{});var qyt=s(Wpe);nko=r(qyt,"maskformer"),qyt.forEach(t),sko=r(ONe," \u2014 "),OV=n(ONe,"A",{href:!0});var jyt=s(OV);lko=r(jyt,"MaskFormerModel"),jyt.forEach(t),iko=r(ONe," (MaskFormer model)"),ONe.forEach(t),dko=i(x),lb=n(x,"LI",{});var VNe=s(lb);Upe=n(VNe,"STRONG",{});var Dyt=s(Upe);cko=r(Dyt,"mbart"),Dyt.forEach(t),mko=r(VNe," \u2014 "),VV=n(VNe,"A",{href:!0});var Gyt=s(VV);fko=r(Gyt,"MBartModel"),Gyt.forEach(t),gko=r(VNe," (mBART model)"),VNe.forEach(t),hko=i(x),ib=n(x,"LI",{});var XNe=s(ib);Hpe=n(XNe,"STRONG",{});var Oyt=s(Hpe);uko=r(Oyt,"mctct"),Oyt.forEach(t),pko=r(XNe," \u2014 "),XV=n(XNe,"A",{href:!0});var Vyt=s(XV);_ko=r(Vyt,"MCTCTModel"),Vyt.forEach(t),bko=r(XNe," (M-CTC-T model)"),XNe.forEach(t),vko=i(x),db=n(x,"LI",{});var zNe=s(db);Jpe=n(zNe,"STRONG",{});var Xyt=s(Jpe);Fko=r(Xyt,"megatron-bert"),Xyt.forEach(t),Tko=r(zNe," \u2014 "),zV=n(zNe,"A",{href:!0});var zyt=s(zV);Mko=r(zyt,"MegatronBertModel"),zyt.forEach(t),Eko=r(zNe," (Megatron-BERT model)"),zNe.forEach(t),Cko=i(x),cb=n(x,"LI",{});var QNe=s(cb);Ype=n(QNe,"STRONG",{});var Qyt=s(Ype);wko=r(Qyt,"mobilebert"),Qyt.forEach(t),Ako=r(QNe," \u2014 "),QV=n(QNe,"A",{href:!0});var Wyt=s(QV);Lko=r(Wyt,"MobileBertModel"),Wyt.forEach(t),yko=r(QNe," (MobileBERT model)"),QNe.forEach(t),xko=i(x),mb=n(x,"LI",{});var WNe=s(mb);Kpe=n(WNe,"STRONG",{});var Uyt=s(Kpe);$ko=r(Uyt,"mobilevit"),Uyt.forEach(t),kko=r(WNe," \u2014 "),WV=n(WNe,"A",{href:!0});var Hyt=s(WV);Sko=r(Hyt,"MobileViTModel"),Hyt.forEach(t),Rko=r(WNe," (MobileViT model)"),WNe.forEach(t),Pko=i(x),fb=n(x,"LI",{});var UNe=s(fb);Zpe=n(UNe,"STRONG",{});var Jyt=s(Zpe);Bko=r(Jyt,"mpnet"),Jyt.forEach(t),Iko=r(UNe," \u2014 "),UV=n(UNe,"A",{href:!0});var Yyt=s(UV);Nko=r(Yyt,"MPNetModel"),Yyt.forEach(t),qko=r(UNe," (MPNet model)"),UNe.forEach(t),jko=i(x),gb=n(x,"LI",{});var HNe=s(gb);e_e=n(HNe,"STRONG",{});var Kyt=s(e_e);Dko=r(Kyt,"mt5"),Kyt.forEach(t),Gko=r(HNe," \u2014 "),HV=n(HNe,"A",{href:!0});var Zyt=s(HV);Oko=r(Zyt,"MT5Model"),Zyt.forEach(t),Vko=r(HNe," (MT5 model)"),HNe.forEach(t),Xko=i(x),hb=n(x,"LI",{});var JNe=s(hb);o_e=n(JNe,"STRONG",{});var e8t=s(o_e);zko=r(e8t,"mvp"),e8t.forEach(t),Qko=r(JNe," \u2014 "),JV=n(JNe,"A",{href:!0});var o8t=s(JV);Wko=r(o8t,"MvpModel"),o8t.forEach(t),Uko=r(JNe," (MVP model)"),JNe.forEach(t),Hko=i(x),ub=n(x,"LI",{});var YNe=s(ub);r_e=n(YNe,"STRONG",{});var r8t=s(r_e);Jko=r(r8t,"nezha"),r8t.forEach(t),Yko=r(YNe," \u2014 "),YV=n(YNe,"A",{href:!0});var t8t=s(YV);Kko=r(t8t,"NezhaModel"),t8t.forEach(t),Zko=r(YNe," (Nezha model)"),YNe.forEach(t),eSo=i(x),pb=n(x,"LI",{});var KNe=s(pb);t_e=n(KNe,"STRONG",{});var a8t=s(t_e);oSo=r(a8t,"nllb"),a8t.forEach(t),rSo=r(KNe," \u2014 "),KV=n(KNe,"A",{href:!0});var n8t=s(KV);tSo=r(n8t,"M2M100Model"),n8t.forEach(t),aSo=r(KNe," (NLLB model)"),KNe.forEach(t),nSo=i(x),_b=n(x,"LI",{});var ZNe=s(_b);a_e=n(ZNe,"STRONG",{});var s8t=s(a_e);sSo=r(s8t,"nystromformer"),s8t.forEach(t),lSo=r(ZNe," \u2014 "),ZV=n(ZNe,"A",{href:!0});var l8t=s(ZV);iSo=r(l8t,"NystromformerModel"),l8t.forEach(t),dSo=r(ZNe," (Nystr\xF6mformer model)"),ZNe.forEach(t),cSo=i(x),bb=n(x,"LI",{});var eqe=s(bb);n_e=n(eqe,"STRONG",{});var i8t=s(n_e);mSo=r(i8t,"openai-gpt"),i8t.forEach(t),fSo=r(eqe," \u2014 "),eX=n(eqe,"A",{href:!0});var d8t=s(eX);gSo=r(d8t,"OpenAIGPTModel"),d8t.forEach(t),hSo=r(eqe," (OpenAI GPT model)"),eqe.forEach(t),uSo=i(x),vb=n(x,"LI",{});var oqe=s(vb);s_e=n(oqe,"STRONG",{});var c8t=s(s_e);pSo=r(c8t,"opt"),c8t.forEach(t),_So=r(oqe," \u2014 "),oX=n(oqe,"A",{href:!0});var m8t=s(oX);bSo=r(m8t,"OPTModel"),m8t.forEach(t),vSo=r(oqe," (OPT model)"),oqe.forEach(t),FSo=i(x),Fb=n(x,"LI",{});var rqe=s(Fb);l_e=n(rqe,"STRONG",{});var f8t=s(l_e);TSo=r(f8t,"owlvit"),f8t.forEach(t),MSo=r(rqe," \u2014 "),rX=n(rqe,"A",{href:!0});var g8t=s(rX);ESo=r(g8t,"OwlViTModel"),g8t.forEach(t),CSo=r(rqe," (OWL-ViT model)"),rqe.forEach(t),wSo=i(x),Tb=n(x,"LI",{});var tqe=s(Tb);i_e=n(tqe,"STRONG",{});var h8t=s(i_e);ASo=r(h8t,"pegasus"),h8t.forEach(t),LSo=r(tqe," \u2014 "),tX=n(tqe,"A",{href:!0});var u8t=s(tX);ySo=r(u8t,"PegasusModel"),u8t.forEach(t),xSo=r(tqe," (Pegasus model)"),tqe.forEach(t),$So=i(x),Mb=n(x,"LI",{});var aqe=s(Mb);d_e=n(aqe,"STRONG",{});var p8t=s(d_e);kSo=r(p8t,"pegasus_x"),p8t.forEach(t),SSo=r(aqe," \u2014 "),aX=n(aqe,"A",{href:!0});var _8t=s(aX);RSo=r(_8t,"PegasusXModel"),_8t.forEach(t),PSo=r(aqe," (PEGASUS-X model)"),aqe.forEach(t),BSo=i(x),Eb=n(x,"LI",{});var nqe=s(Eb);c_e=n(nqe,"STRONG",{});var b8t=s(c_e);ISo=r(b8t,"perceiver"),b8t.forEach(t),NSo=r(nqe," \u2014 "),nX=n(nqe,"A",{href:!0});var v8t=s(nX);qSo=r(v8t,"PerceiverModel"),v8t.forEach(t),jSo=r(nqe," (Perceiver model)"),nqe.forEach(t),DSo=i(x),Cb=n(x,"LI",{});var sqe=s(Cb);m_e=n(sqe,"STRONG",{});var F8t=s(m_e);GSo=r(F8t,"plbart"),F8t.forEach(t),OSo=r(sqe," \u2014 "),sX=n(sqe,"A",{href:!0});var T8t=s(sX);VSo=r(T8t,"PLBartModel"),T8t.forEach(t),XSo=r(sqe," (PLBart model)"),sqe.forEach(t),zSo=i(x),wb=n(x,"LI",{});var lqe=s(wb);f_e=n(lqe,"STRONG",{});var M8t=s(f_e);QSo=r(M8t,"poolformer"),M8t.forEach(t),WSo=r(lqe," \u2014 "),lX=n(lqe,"A",{href:!0});var E8t=s(lX);USo=r(E8t,"PoolFormerModel"),E8t.forEach(t),HSo=r(lqe," (PoolFormer model)"),lqe.forEach(t),JSo=i(x),Ab=n(x,"LI",{});var iqe=s(Ab);g_e=n(iqe,"STRONG",{});var C8t=s(g_e);YSo=r(C8t,"prophetnet"),C8t.forEach(t),KSo=r(iqe," \u2014 "),iX=n(iqe,"A",{href:!0});var w8t=s(iX);ZSo=r(w8t,"ProphetNetModel"),w8t.forEach(t),eRo=r(iqe," (ProphetNet model)"),iqe.forEach(t),oRo=i(x),Lb=n(x,"LI",{});var dqe=s(Lb);h_e=n(dqe,"STRONG",{});var A8t=s(h_e);rRo=r(A8t,"qdqbert"),A8t.forEach(t),tRo=r(dqe," \u2014 "),dX=n(dqe,"A",{href:!0});var L8t=s(dX);aRo=r(L8t,"QDQBertModel"),L8t.forEach(t),nRo=r(dqe," (QDQBert model)"),dqe.forEach(t),sRo=i(x),yb=n(x,"LI",{});var cqe=s(yb);u_e=n(cqe,"STRONG",{});var y8t=s(u_e);lRo=r(y8t,"reformer"),y8t.forEach(t),iRo=r(cqe," \u2014 "),cX=n(cqe,"A",{href:!0});var x8t=s(cX);dRo=r(x8t,"ReformerModel"),x8t.forEach(t),cRo=r(cqe," (Reformer model)"),cqe.forEach(t),mRo=i(x),xb=n(x,"LI",{});var mqe=s(xb);p_e=n(mqe,"STRONG",{});var $8t=s(p_e);fRo=r($8t,"regnet"),$8t.forEach(t),gRo=r(mqe," \u2014 "),mX=n(mqe,"A",{href:!0});var k8t=s(mX);hRo=r(k8t,"RegNetModel"),k8t.forEach(t),uRo=r(mqe," (RegNet model)"),mqe.forEach(t),pRo=i(x),$b=n(x,"LI",{});var fqe=s($b);__e=n(fqe,"STRONG",{});var S8t=s(__e);_Ro=r(S8t,"rembert"),S8t.forEach(t),bRo=r(fqe," \u2014 "),fX=n(fqe,"A",{href:!0});var R8t=s(fX);vRo=r(R8t,"RemBertModel"),R8t.forEach(t),FRo=r(fqe," (RemBERT model)"),fqe.forEach(t),TRo=i(x),kb=n(x,"LI",{});var gqe=s(kb);b_e=n(gqe,"STRONG",{});var P8t=s(b_e);MRo=r(P8t,"resnet"),P8t.forEach(t),ERo=r(gqe," \u2014 "),gX=n(gqe,"A",{href:!0});var B8t=s(gX);CRo=r(B8t,"ResNetModel"),B8t.forEach(t),wRo=r(gqe," (ResNet model)"),gqe.forEach(t),ARo=i(x),Sb=n(x,"LI",{});var hqe=s(Sb);v_e=n(hqe,"STRONG",{});var I8t=s(v_e);LRo=r(I8t,"retribert"),I8t.forEach(t),yRo=r(hqe," \u2014 "),hX=n(hqe,"A",{href:!0});var N8t=s(hX);xRo=r(N8t,"RetriBertModel"),N8t.forEach(t),$Ro=r(hqe," (RetriBERT model)"),hqe.forEach(t),kRo=i(x),Rb=n(x,"LI",{});var uqe=s(Rb);F_e=n(uqe,"STRONG",{});var q8t=s(F_e);SRo=r(q8t,"roberta"),q8t.forEach(t),RRo=r(uqe," \u2014 "),uX=n(uqe,"A",{href:!0});var j8t=s(uX);PRo=r(j8t,"RobertaModel"),j8t.forEach(t),BRo=r(uqe," (RoBERTa model)"),uqe.forEach(t),IRo=i(x),Pb=n(x,"LI",{});var pqe=s(Pb);T_e=n(pqe,"STRONG",{});var D8t=s(T_e);NRo=r(D8t,"roformer"),D8t.forEach(t),qRo=r(pqe," \u2014 "),pX=n(pqe,"A",{href:!0});var G8t=s(pX);jRo=r(G8t,"RoFormerModel"),G8t.forEach(t),DRo=r(pqe," (RoFormer model)"),pqe.forEach(t),GRo=i(x),Bb=n(x,"LI",{});var _qe=s(Bb);M_e=n(_qe,"STRONG",{});var O8t=s(M_e);ORo=r(O8t,"segformer"),O8t.forEach(t),VRo=r(_qe," \u2014 "),_X=n(_qe,"A",{href:!0});var V8t=s(_X);XRo=r(V8t,"SegformerModel"),V8t.forEach(t),zRo=r(_qe," (SegFormer model)"),_qe.forEach(t),QRo=i(x),Ib=n(x,"LI",{});var bqe=s(Ib);E_e=n(bqe,"STRONG",{});var X8t=s(E_e);WRo=r(X8t,"sew"),X8t.forEach(t),URo=r(bqe," \u2014 "),bX=n(bqe,"A",{href:!0});var z8t=s(bX);HRo=r(z8t,"SEWModel"),z8t.forEach(t),JRo=r(bqe," (SEW model)"),bqe.forEach(t),YRo=i(x),Nb=n(x,"LI",{});var vqe=s(Nb);C_e=n(vqe,"STRONG",{});var Q8t=s(C_e);KRo=r(Q8t,"sew-d"),Q8t.forEach(t),ZRo=r(vqe," \u2014 "),vX=n(vqe,"A",{href:!0});var W8t=s(vX);ePo=r(W8t,"SEWDModel"),W8t.forEach(t),oPo=r(vqe," (SEW-D model)"),vqe.forEach(t),rPo=i(x),qb=n(x,"LI",{});var Fqe=s(qb);w_e=n(Fqe,"STRONG",{});var U8t=s(w_e);tPo=r(U8t,"speech_to_text"),U8t.forEach(t),aPo=r(Fqe," \u2014 "),FX=n(Fqe,"A",{href:!0});var H8t=s(FX);nPo=r(H8t,"Speech2TextModel"),H8t.forEach(t),sPo=r(Fqe," (Speech2Text model)"),Fqe.forEach(t),lPo=i(x),jb=n(x,"LI",{});var Tqe=s(jb);A_e=n(Tqe,"STRONG",{});var J8t=s(A_e);iPo=r(J8t,"splinter"),J8t.forEach(t),dPo=r(Tqe," \u2014 "),TX=n(Tqe,"A",{href:!0});var Y8t=s(TX);cPo=r(Y8t,"SplinterModel"),Y8t.forEach(t),mPo=r(Tqe," (Splinter model)"),Tqe.forEach(t),fPo=i(x),Db=n(x,"LI",{});var Mqe=s(Db);L_e=n(Mqe,"STRONG",{});var K8t=s(L_e);gPo=r(K8t,"squeezebert"),K8t.forEach(t),hPo=r(Mqe," \u2014 "),MX=n(Mqe,"A",{href:!0});var Z8t=s(MX);uPo=r(Z8t,"SqueezeBertModel"),Z8t.forEach(t),pPo=r(Mqe," (SqueezeBERT model)"),Mqe.forEach(t),_Po=i(x),Gb=n(x,"LI",{});var Eqe=s(Gb);y_e=n(Eqe,"STRONG",{});var e9t=s(y_e);bPo=r(e9t,"swin"),e9t.forEach(t),vPo=r(Eqe," \u2014 "),EX=n(Eqe,"A",{href:!0});var o9t=s(EX);FPo=r(o9t,"SwinModel"),o9t.forEach(t),TPo=r(Eqe," (Swin Transformer model)"),Eqe.forEach(t),MPo=i(x),Ob=n(x,"LI",{});var Cqe=s(Ob);x_e=n(Cqe,"STRONG",{});var r9t=s(x_e);EPo=r(r9t,"swinv2"),r9t.forEach(t),CPo=r(Cqe," \u2014 "),CX=n(Cqe,"A",{href:!0});var t9t=s(CX);wPo=r(t9t,"Swinv2Model"),t9t.forEach(t),APo=r(Cqe," (Swin Transformer V2 model)"),Cqe.forEach(t),LPo=i(x),Vb=n(x,"LI",{});var wqe=s(Vb);$_e=n(wqe,"STRONG",{});var a9t=s($_e);yPo=r(a9t,"t5"),a9t.forEach(t),xPo=r(wqe," \u2014 "),wX=n(wqe,"A",{href:!0});var n9t=s(wX);$Po=r(n9t,"T5Model"),n9t.forEach(t),kPo=r(wqe," (T5 model)"),wqe.forEach(t),SPo=i(x),Xb=n(x,"LI",{});var Aqe=s(Xb);k_e=n(Aqe,"STRONG",{});var s9t=s(k_e);RPo=r(s9t,"tapas"),s9t.forEach(t),PPo=r(Aqe," \u2014 "),AX=n(Aqe,"A",{href:!0});var l9t=s(AX);BPo=r(l9t,"TapasModel"),l9t.forEach(t),IPo=r(Aqe," (TAPAS model)"),Aqe.forEach(t),NPo=i(x),zb=n(x,"LI",{});var Lqe=s(zb);S_e=n(Lqe,"STRONG",{});var i9t=s(S_e);qPo=r(i9t,"trajectory_transformer"),i9t.forEach(t),jPo=r(Lqe," \u2014 "),LX=n(Lqe,"A",{href:!0});var d9t=s(LX);DPo=r(d9t,"TrajectoryTransformerModel"),d9t.forEach(t),GPo=r(Lqe," (Trajectory Transformer model)"),Lqe.forEach(t),OPo=i(x),Qb=n(x,"LI",{});var yqe=s(Qb);R_e=n(yqe,"STRONG",{});var c9t=s(R_e);VPo=r(c9t,"transfo-xl"),c9t.forEach(t),XPo=r(yqe," \u2014 "),yX=n(yqe,"A",{href:!0});var m9t=s(yX);zPo=r(m9t,"TransfoXLModel"),m9t.forEach(t),QPo=r(yqe," (Transformer-XL model)"),yqe.forEach(t),WPo=i(x),Wb=n(x,"LI",{});var xqe=s(Wb);P_e=n(xqe,"STRONG",{});var f9t=s(P_e);UPo=r(f9t,"unispeech"),f9t.forEach(t),HPo=r(xqe," \u2014 "),xX=n(xqe,"A",{href:!0});var g9t=s(xX);JPo=r(g9t,"UniSpeechModel"),g9t.forEach(t),YPo=r(xqe," (UniSpeech model)"),xqe.forEach(t),KPo=i(x),Ub=n(x,"LI",{});var $qe=s(Ub);B_e=n($qe,"STRONG",{});var h9t=s(B_e);ZPo=r(h9t,"unispeech-sat"),h9t.forEach(t),eBo=r($qe," \u2014 "),$X=n($qe,"A",{href:!0});var u9t=s($X);oBo=r(u9t,"UniSpeechSatModel"),u9t.forEach(t),rBo=r($qe," (UniSpeechSat model)"),$qe.forEach(t),tBo=i(x),Hb=n(x,"LI",{});var kqe=s(Hb);I_e=n(kqe,"STRONG",{});var p9t=s(I_e);aBo=r(p9t,"van"),p9t.forEach(t),nBo=r(kqe," \u2014 "),kX=n(kqe,"A",{href:!0});var _9t=s(kX);sBo=r(_9t,"VanModel"),_9t.forEach(t),lBo=r(kqe," (VAN model)"),kqe.forEach(t),iBo=i(x),Jb=n(x,"LI",{});var Sqe=s(Jb);N_e=n(Sqe,"STRONG",{});var b9t=s(N_e);dBo=r(b9t,"videomae"),b9t.forEach(t),cBo=r(Sqe," \u2014 "),SX=n(Sqe,"A",{href:!0});var v9t=s(SX);mBo=r(v9t,"VideoMAEModel"),v9t.forEach(t),fBo=r(Sqe," (VideoMAE model)"),Sqe.forEach(t),gBo=i(x),Yb=n(x,"LI",{});var Rqe=s(Yb);q_e=n(Rqe,"STRONG",{});var F9t=s(q_e);hBo=r(F9t,"vilt"),F9t.forEach(t),uBo=r(Rqe," \u2014 "),RX=n(Rqe,"A",{href:!0});var T9t=s(RX);pBo=r(T9t,"ViltModel"),T9t.forEach(t),_Bo=r(Rqe," (ViLT model)"),Rqe.forEach(t),bBo=i(x),Kb=n(x,"LI",{});var Pqe=s(Kb);j_e=n(Pqe,"STRONG",{});var M9t=s(j_e);vBo=r(M9t,"vision-text-dual-encoder"),M9t.forEach(t),FBo=r(Pqe," \u2014 "),PX=n(Pqe,"A",{href:!0});var E9t=s(PX);TBo=r(E9t,"VisionTextDualEncoderModel"),E9t.forEach(t),MBo=r(Pqe," (VisionTextDualEncoder model)"),Pqe.forEach(t),EBo=i(x),Zb=n(x,"LI",{});var Bqe=s(Zb);D_e=n(Bqe,"STRONG",{});var C9t=s(D_e);CBo=r(C9t,"visual_bert"),C9t.forEach(t),wBo=r(Bqe," \u2014 "),BX=n(Bqe,"A",{href:!0});var w9t=s(BX);ABo=r(w9t,"VisualBertModel"),w9t.forEach(t),LBo=r(Bqe," (VisualBERT model)"),Bqe.forEach(t),yBo=i(x),e2=n(x,"LI",{});var Iqe=s(e2);G_e=n(Iqe,"STRONG",{});var A9t=s(G_e);xBo=r(A9t,"vit"),A9t.forEach(t),$Bo=r(Iqe," \u2014 "),IX=n(Iqe,"A",{href:!0});var L9t=s(IX);kBo=r(L9t,"ViTModel"),L9t.forEach(t),SBo=r(Iqe," (ViT model)"),Iqe.forEach(t),RBo=i(x),o2=n(x,"LI",{});var Nqe=s(o2);O_e=n(Nqe,"STRONG",{});var y9t=s(O_e);PBo=r(y9t,"vit_mae"),y9t.forEach(t),BBo=r(Nqe," \u2014 "),NX=n(Nqe,"A",{href:!0});var x9t=s(NX);IBo=r(x9t,"ViTMAEModel"),x9t.forEach(t),NBo=r(Nqe," (ViTMAE model)"),Nqe.forEach(t),qBo=i(x),r2=n(x,"LI",{});var qqe=s(r2);V_e=n(qqe,"STRONG",{});var $9t=s(V_e);jBo=r($9t,"vit_msn"),$9t.forEach(t),DBo=r(qqe," \u2014 "),qX=n(qqe,"A",{href:!0});var k9t=s(qX);GBo=r(k9t,"ViTMSNModel"),k9t.forEach(t),OBo=r(qqe," (ViTMSN model)"),qqe.forEach(t),VBo=i(x),t2=n(x,"LI",{});var jqe=s(t2);X_e=n(jqe,"STRONG",{});var S9t=s(X_e);XBo=r(S9t,"wav2vec2"),S9t.forEach(t),zBo=r(jqe," \u2014 "),jX=n(jqe,"A",{href:!0});var R9t=s(jX);QBo=r(R9t,"Wav2Vec2Model"),R9t.forEach(t),WBo=r(jqe," (Wav2Vec2 model)"),jqe.forEach(t),UBo=i(x),a2=n(x,"LI",{});var Dqe=s(a2);z_e=n(Dqe,"STRONG",{});var P9t=s(z_e);HBo=r(P9t,"wav2vec2-conformer"),P9t.forEach(t),JBo=r(Dqe," \u2014 "),DX=n(Dqe,"A",{href:!0});var B9t=s(DX);YBo=r(B9t,"Wav2Vec2ConformerModel"),B9t.forEach(t),KBo=r(Dqe," (Wav2Vec2-Conformer model)"),Dqe.forEach(t),ZBo=i(x),n2=n(x,"LI",{});var Gqe=s(n2);Q_e=n(Gqe,"STRONG",{});var I9t=s(Q_e);eIo=r(I9t,"wavlm"),I9t.forEach(t),oIo=r(Gqe," \u2014 "),GX=n(Gqe,"A",{href:!0});var N9t=s(GX);rIo=r(N9t,"WavLMModel"),N9t.forEach(t),tIo=r(Gqe," (WavLM model)"),Gqe.forEach(t),aIo=i(x),s2=n(x,"LI",{});var Oqe=s(s2);W_e=n(Oqe,"STRONG",{});var q9t=s(W_e);nIo=r(q9t,"xclip"),q9t.forEach(t),sIo=r(Oqe," \u2014 "),OX=n(Oqe,"A",{href:!0});var j9t=s(OX);lIo=r(j9t,"XCLIPModel"),j9t.forEach(t),iIo=r(Oqe," (X-CLIP model)"),Oqe.forEach(t),dIo=i(x),l2=n(x,"LI",{});var Vqe=s(l2);U_e=n(Vqe,"STRONG",{});var D9t=s(U_e);cIo=r(D9t,"xglm"),D9t.forEach(t),mIo=r(Vqe," \u2014 "),VX=n(Vqe,"A",{href:!0});var G9t=s(VX);fIo=r(G9t,"XGLMModel"),G9t.forEach(t),gIo=r(Vqe," (XGLM model)"),Vqe.forEach(t),hIo=i(x),i2=n(x,"LI",{});var Xqe=s(i2);H_e=n(Xqe,"STRONG",{});var O9t=s(H_e);uIo=r(O9t,"xlm"),O9t.forEach(t),pIo=r(Xqe," \u2014 "),XX=n(Xqe,"A",{href:!0});var V9t=s(XX);_Io=r(V9t,"XLMModel"),V9t.forEach(t),bIo=r(Xqe," (XLM model)"),Xqe.forEach(t),vIo=i(x),d2=n(x,"LI",{});var zqe=s(d2);J_e=n(zqe,"STRONG",{});var X9t=s(J_e);FIo=r(X9t,"xlm-prophetnet"),X9t.forEach(t),TIo=r(zqe," \u2014 "),zX=n(zqe,"A",{href:!0});var z9t=s(zX);MIo=r(z9t,"XLMProphetNetModel"),z9t.forEach(t),EIo=r(zqe," (XLM-ProphetNet model)"),zqe.forEach(t),CIo=i(x),c2=n(x,"LI",{});var Qqe=s(c2);Y_e=n(Qqe,"STRONG",{});var Q9t=s(Y_e);wIo=r(Q9t,"xlm-roberta"),Q9t.forEach(t),AIo=r(Qqe," \u2014 "),QX=n(Qqe,"A",{href:!0});var W9t=s(QX);LIo=r(W9t,"XLMRobertaModel"),W9t.forEach(t),yIo=r(Qqe," (XLM-RoBERTa model)"),Qqe.forEach(t),xIo=i(x),m2=n(x,"LI",{});var Wqe=s(m2);K_e=n(Wqe,"STRONG",{});var U9t=s(K_e);$Io=r(U9t,"xlm-roberta-xl"),U9t.forEach(t),kIo=r(Wqe," \u2014 "),WX=n(Wqe,"A",{href:!0});var H9t=s(WX);SIo=r(H9t,"XLMRobertaXLModel"),H9t.forEach(t),RIo=r(Wqe," (XLM-RoBERTa-XL model)"),Wqe.forEach(t),PIo=i(x),f2=n(x,"LI",{});var Uqe=s(f2);Z_e=n(Uqe,"STRONG",{});var J9t=s(Z_e);BIo=r(J9t,"xlnet"),J9t.forEach(t),IIo=r(Uqe," \u2014 "),UX=n(Uqe,"A",{href:!0});var Y9t=s(UX);NIo=r(Y9t,"XLNetModel"),Y9t.forEach(t),qIo=r(Uqe," (XLNet model)"),Uqe.forEach(t),jIo=i(x),g2=n(x,"LI",{});var Hqe=s(g2);ebe=n(Hqe,"STRONG",{});var K9t=s(ebe);DIo=r(K9t,"yolos"),K9t.forEach(t),GIo=r(Hqe," \u2014 "),HX=n(Hqe,"A",{href:!0});var Z9t=s(HX);OIo=r(Z9t,"YolosModel"),Z9t.forEach(t),VIo=r(Hqe," (YOLOS model)"),Hqe.forEach(t),XIo=i(x),h2=n(x,"LI",{});var Jqe=s(h2);obe=n(Jqe,"STRONG",{});var ext=s(obe);zIo=r(ext,"yoso"),ext.forEach(t),QIo=r(Jqe," \u2014 "),JX=n(Jqe,"A",{href:!0});var oxt=s(JX);WIo=r(oxt,"YosoModel"),oxt.forEach(t),UIo=r(Jqe," (YOSO model)"),Jqe.forEach(t),x.forEach(t),HIo=i(Fa),u2=n(Fa,"P",{});var Yqe=s(u2);JIo=r(Yqe,"The model is set in evaluation mode by default using "),rbe=n(Yqe,"CODE",{});var rxt=s(rbe);YIo=r(rxt,"model.eval()"),rxt.forEach(t),KIo=r(Yqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(Yqe,"CODE",{});var txt=s(tbe);ZIo=r(txt,"model.train()"),txt.forEach(t),Yqe.forEach(t),eNo=i(Fa),T(p2.$$.fragment,Fa),Fa.forEach(t),Al.forEach(t),lZe=i(m),Fd=n(m,"H2",{class:!0});var Too=s(Fd);_2=n(Too,"A",{id:!0,class:!0,href:!0});var axt=s(_2);abe=n(axt,"SPAN",{});var nxt=s(abe);T(vx.$$.fragment,nxt),nxt.forEach(t),axt.forEach(t),oNo=i(Too),nbe=n(Too,"SPAN",{});var sxt=s(nbe);rNo=r(sxt,"AutoModelForPreTraining"),sxt.forEach(t),Too.forEach(t),iZe=i(m),Bo=n(m,"DIV",{class:!0});var Ll=s(Bo);T(Fx.$$.fragment,Ll),tNo=i(Ll),Td=n(Ll,"P",{});var $le=s(Td);aNo=r($le,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YX=n($le,"A",{href:!0});var lxt=s(YX);nNo=r(lxt,"from_pretrained()"),lxt.forEach(t),sNo=r($le," class method or the "),KX=n($le,"A",{href:!0});var ixt=s(KX);lNo=r(ixt,"from_config()"),ixt.forEach(t),iNo=r($le,` class
method.`),$le.forEach(t),dNo=i(Ll),Tx=n(Ll,"P",{});var Moo=s(Tx);cNo=r(Moo,"This class cannot be instantiated directly using "),sbe=n(Moo,"CODE",{});var dxt=s(sbe);mNo=r(dxt,"__init__()"),dxt.forEach(t),fNo=r(Moo," (throws an error)."),Moo.forEach(t),gNo=i(Ll),bt=n(Ll,"DIV",{class:!0});var qy=s(bt);T(Mx.$$.fragment,qy),hNo=i(qy),lbe=n(qy,"P",{});var cxt=s(lbe);uNo=r(cxt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cxt.forEach(t),pNo=i(qy),Md=n(qy,"P",{});var kle=s(Md);_No=r(kle,`Note:
Loading a model from its configuration file does `),ibe=n(kle,"STRONG",{});var mxt=s(ibe);bNo=r(mxt,"not"),mxt.forEach(t),vNo=r(kle,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(kle,"A",{href:!0});var fxt=s(ZX);FNo=r(fxt,"from_pretrained()"),fxt.forEach(t),TNo=r(kle," to load the model weights."),kle.forEach(t),MNo=i(qy),T(b2.$$.fragment,qy),qy.forEach(t),ENo=i(Ll),eo=n(Ll,"DIV",{class:!0});var Ta=s(eo);T(Ex.$$.fragment,Ta),CNo=i(Ta),dbe=n(Ta,"P",{});var gxt=s(dbe);wNo=r(gxt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gxt.forEach(t),ANo=i(Ta),Ya=n(Ta,"P",{});var jy=s(Ya);LNo=r(jy,"The model class to instantiate is selected based on the "),cbe=n(jy,"CODE",{});var hxt=s(cbe);yNo=r(hxt,"model_type"),hxt.forEach(t),xNo=r(jy,` property of the config object (either
passed as an argument or loaded from `),mbe=n(jy,"CODE",{});var uxt=s(mbe);$No=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),kNo=r(jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(jy,"CODE",{});var pxt=s(fbe);SNo=r(pxt,"pretrained_model_name_or_path"),pxt.forEach(t),RNo=r(jy,":"),jy.forEach(t),PNo=i(Ta),G=n(Ta,"UL",{});var O=s(G);v2=n(O,"LI",{});var Kqe=s(v2);gbe=n(Kqe,"STRONG",{});var _xt=s(gbe);BNo=r(_xt,"albert"),_xt.forEach(t),INo=r(Kqe," \u2014 "),ez=n(Kqe,"A",{href:!0});var bxt=s(ez);NNo=r(bxt,"AlbertForPreTraining"),bxt.forEach(t),qNo=r(Kqe," (ALBERT model)"),Kqe.forEach(t),jNo=i(O),F2=n(O,"LI",{});var Zqe=s(F2);hbe=n(Zqe,"STRONG",{});var vxt=s(hbe);DNo=r(vxt,"bart"),vxt.forEach(t),GNo=r(Zqe," \u2014 "),oz=n(Zqe,"A",{href:!0});var Fxt=s(oz);ONo=r(Fxt,"BartForConditionalGeneration"),Fxt.forEach(t),VNo=r(Zqe," (BART model)"),Zqe.forEach(t),XNo=i(O),T2=n(O,"LI",{});var eje=s(T2);ube=n(eje,"STRONG",{});var Txt=s(ube);zNo=r(Txt,"bert"),Txt.forEach(t),QNo=r(eje," \u2014 "),rz=n(eje,"A",{href:!0});var Mxt=s(rz);WNo=r(Mxt,"BertForPreTraining"),Mxt.forEach(t),UNo=r(eje," (BERT model)"),eje.forEach(t),HNo=i(O),M2=n(O,"LI",{});var oje=s(M2);pbe=n(oje,"STRONG",{});var Ext=s(pbe);JNo=r(Ext,"big_bird"),Ext.forEach(t),YNo=r(oje," \u2014 "),tz=n(oje,"A",{href:!0});var Cxt=s(tz);KNo=r(Cxt,"BigBirdForPreTraining"),Cxt.forEach(t),ZNo=r(oje," (BigBird model)"),oje.forEach(t),eqo=i(O),E2=n(O,"LI",{});var rje=s(E2);_be=n(rje,"STRONG",{});var wxt=s(_be);oqo=r(wxt,"bloom"),wxt.forEach(t),rqo=r(rje," \u2014 "),az=n(rje,"A",{href:!0});var Axt=s(az);tqo=r(Axt,"BloomForCausalLM"),Axt.forEach(t),aqo=r(rje," (BLOOM model)"),rje.forEach(t),nqo=i(O),C2=n(O,"LI",{});var tje=s(C2);bbe=n(tje,"STRONG",{});var Lxt=s(bbe);sqo=r(Lxt,"camembert"),Lxt.forEach(t),lqo=r(tje," \u2014 "),nz=n(tje,"A",{href:!0});var yxt=s(nz);iqo=r(yxt,"CamembertForMaskedLM"),yxt.forEach(t),dqo=r(tje," (CamemBERT model)"),tje.forEach(t),cqo=i(O),w2=n(O,"LI",{});var aje=s(w2);vbe=n(aje,"STRONG",{});var xxt=s(vbe);mqo=r(xxt,"ctrl"),xxt.forEach(t),fqo=r(aje," \u2014 "),sz=n(aje,"A",{href:!0});var $xt=s(sz);gqo=r($xt,"CTRLLMHeadModel"),$xt.forEach(t),hqo=r(aje," (CTRL model)"),aje.forEach(t),uqo=i(O),A2=n(O,"LI",{});var nje=s(A2);Fbe=n(nje,"STRONG",{});var kxt=s(Fbe);pqo=r(kxt,"data2vec-text"),kxt.forEach(t),_qo=r(nje," \u2014 "),lz=n(nje,"A",{href:!0});var Sxt=s(lz);bqo=r(Sxt,"Data2VecTextForMaskedLM"),Sxt.forEach(t),vqo=r(nje," (Data2VecText model)"),nje.forEach(t),Fqo=i(O),L2=n(O,"LI",{});var sje=s(L2);Tbe=n(sje,"STRONG",{});var Rxt=s(Tbe);Tqo=r(Rxt,"deberta"),Rxt.forEach(t),Mqo=r(sje," \u2014 "),iz=n(sje,"A",{href:!0});var Pxt=s(iz);Eqo=r(Pxt,"DebertaForMaskedLM"),Pxt.forEach(t),Cqo=r(sje," (DeBERTa model)"),sje.forEach(t),wqo=i(O),y2=n(O,"LI",{});var lje=s(y2);Mbe=n(lje,"STRONG",{});var Bxt=s(Mbe);Aqo=r(Bxt,"deberta-v2"),Bxt.forEach(t),Lqo=r(lje," \u2014 "),dz=n(lje,"A",{href:!0});var Ixt=s(dz);yqo=r(Ixt,"DebertaV2ForMaskedLM"),Ixt.forEach(t),xqo=r(lje," (DeBERTa-v2 model)"),lje.forEach(t),$qo=i(O),x2=n(O,"LI",{});var ije=s(x2);Ebe=n(ije,"STRONG",{});var Nxt=s(Ebe);kqo=r(Nxt,"distilbert"),Nxt.forEach(t),Sqo=r(ije," \u2014 "),cz=n(ije,"A",{href:!0});var qxt=s(cz);Rqo=r(qxt,"DistilBertForMaskedLM"),qxt.forEach(t),Pqo=r(ije," (DistilBERT model)"),ije.forEach(t),Bqo=i(O),$2=n(O,"LI",{});var dje=s($2);Cbe=n(dje,"STRONG",{});var jxt=s(Cbe);Iqo=r(jxt,"electra"),jxt.forEach(t),Nqo=r(dje," \u2014 "),mz=n(dje,"A",{href:!0});var Dxt=s(mz);qqo=r(Dxt,"ElectraForPreTraining"),Dxt.forEach(t),jqo=r(dje," (ELECTRA model)"),dje.forEach(t),Dqo=i(O),k2=n(O,"LI",{});var cje=s(k2);wbe=n(cje,"STRONG",{});var Gxt=s(wbe);Gqo=r(Gxt,"ernie"),Gxt.forEach(t),Oqo=r(cje," \u2014 "),fz=n(cje,"A",{href:!0});var Oxt=s(fz);Vqo=r(Oxt,"ErnieForPreTraining"),Oxt.forEach(t),Xqo=r(cje," (ERNIE model)"),cje.forEach(t),zqo=i(O),S2=n(O,"LI",{});var mje=s(S2);Abe=n(mje,"STRONG",{});var Vxt=s(Abe);Qqo=r(Vxt,"flaubert"),Vxt.forEach(t),Wqo=r(mje," \u2014 "),gz=n(mje,"A",{href:!0});var Xxt=s(gz);Uqo=r(Xxt,"FlaubertWithLMHeadModel"),Xxt.forEach(t),Hqo=r(mje," (FlauBERT model)"),mje.forEach(t),Jqo=i(O),R2=n(O,"LI",{});var fje=s(R2);Lbe=n(fje,"STRONG",{});var zxt=s(Lbe);Yqo=r(zxt,"flava"),zxt.forEach(t),Kqo=r(fje," \u2014 "),hz=n(fje,"A",{href:!0});var Qxt=s(hz);Zqo=r(Qxt,"FlavaForPreTraining"),Qxt.forEach(t),ejo=r(fje," (FLAVA model)"),fje.forEach(t),ojo=i(O),P2=n(O,"LI",{});var gje=s(P2);ybe=n(gje,"STRONG",{});var Wxt=s(ybe);rjo=r(Wxt,"fnet"),Wxt.forEach(t),tjo=r(gje," \u2014 "),uz=n(gje,"A",{href:!0});var Uxt=s(uz);ajo=r(Uxt,"FNetForPreTraining"),Uxt.forEach(t),njo=r(gje," (FNet model)"),gje.forEach(t),sjo=i(O),B2=n(O,"LI",{});var hje=s(B2);xbe=n(hje,"STRONG",{});var Hxt=s(xbe);ljo=r(Hxt,"fsmt"),Hxt.forEach(t),ijo=r(hje," \u2014 "),pz=n(hje,"A",{href:!0});var Jxt=s(pz);djo=r(Jxt,"FSMTForConditionalGeneration"),Jxt.forEach(t),cjo=r(hje," (FairSeq Machine-Translation model)"),hje.forEach(t),mjo=i(O),I2=n(O,"LI",{});var uje=s(I2);$be=n(uje,"STRONG",{});var Yxt=s($be);fjo=r(Yxt,"funnel"),Yxt.forEach(t),gjo=r(uje," \u2014 "),_z=n(uje,"A",{href:!0});var Kxt=s(_z);hjo=r(Kxt,"FunnelForPreTraining"),Kxt.forEach(t),ujo=r(uje," (Funnel Transformer model)"),uje.forEach(t),pjo=i(O),N2=n(O,"LI",{});var pje=s(N2);kbe=n(pje,"STRONG",{});var Zxt=s(kbe);_jo=r(Zxt,"gpt2"),Zxt.forEach(t),bjo=r(pje," \u2014 "),bz=n(pje,"A",{href:!0});var e$t=s(bz);vjo=r(e$t,"GPT2LMHeadModel"),e$t.forEach(t),Fjo=r(pje," (OpenAI GPT-2 model)"),pje.forEach(t),Tjo=i(O),q2=n(O,"LI",{});var _je=s(q2);Sbe=n(_je,"STRONG",{});var o$t=s(Sbe);Mjo=r(o$t,"ibert"),o$t.forEach(t),Ejo=r(_je," \u2014 "),vz=n(_je,"A",{href:!0});var r$t=s(vz);Cjo=r(r$t,"IBertForMaskedLM"),r$t.forEach(t),wjo=r(_je," (I-BERT model)"),_je.forEach(t),Ajo=i(O),j2=n(O,"LI",{});var bje=s(j2);Rbe=n(bje,"STRONG",{});var t$t=s(Rbe);Ljo=r(t$t,"layoutlm"),t$t.forEach(t),yjo=r(bje," \u2014 "),Fz=n(bje,"A",{href:!0});var a$t=s(Fz);xjo=r(a$t,"LayoutLMForMaskedLM"),a$t.forEach(t),$jo=r(bje," (LayoutLM model)"),bje.forEach(t),kjo=i(O),D2=n(O,"LI",{});var vje=s(D2);Pbe=n(vje,"STRONG",{});var n$t=s(Pbe);Sjo=r(n$t,"longformer"),n$t.forEach(t),Rjo=r(vje," \u2014 "),Tz=n(vje,"A",{href:!0});var s$t=s(Tz);Pjo=r(s$t,"LongformerForMaskedLM"),s$t.forEach(t),Bjo=r(vje," (Longformer model)"),vje.forEach(t),Ijo=i(O),G2=n(O,"LI",{});var Fje=s(G2);Bbe=n(Fje,"STRONG",{});var l$t=s(Bbe);Njo=r(l$t,"luke"),l$t.forEach(t),qjo=r(Fje," \u2014 "),Mz=n(Fje,"A",{href:!0});var i$t=s(Mz);jjo=r(i$t,"LukeForMaskedLM"),i$t.forEach(t),Djo=r(Fje," (LUKE model)"),Fje.forEach(t),Gjo=i(O),O2=n(O,"LI",{});var Tje=s(O2);Ibe=n(Tje,"STRONG",{});var d$t=s(Ibe);Ojo=r(d$t,"lxmert"),d$t.forEach(t),Vjo=r(Tje," \u2014 "),Ez=n(Tje,"A",{href:!0});var c$t=s(Ez);Xjo=r(c$t,"LxmertForPreTraining"),c$t.forEach(t),zjo=r(Tje," (LXMERT model)"),Tje.forEach(t),Qjo=i(O),V2=n(O,"LI",{});var Mje=s(V2);Nbe=n(Mje,"STRONG",{});var m$t=s(Nbe);Wjo=r(m$t,"megatron-bert"),m$t.forEach(t),Ujo=r(Mje," \u2014 "),Cz=n(Mje,"A",{href:!0});var f$t=s(Cz);Hjo=r(f$t,"MegatronBertForPreTraining"),f$t.forEach(t),Jjo=r(Mje," (Megatron-BERT model)"),Mje.forEach(t),Yjo=i(O),X2=n(O,"LI",{});var Eje=s(X2);qbe=n(Eje,"STRONG",{});var g$t=s(qbe);Kjo=r(g$t,"mobilebert"),g$t.forEach(t),Zjo=r(Eje," \u2014 "),wz=n(Eje,"A",{href:!0});var h$t=s(wz);eDo=r(h$t,"MobileBertForPreTraining"),h$t.forEach(t),oDo=r(Eje," (MobileBERT model)"),Eje.forEach(t),rDo=i(O),z2=n(O,"LI",{});var Cje=s(z2);jbe=n(Cje,"STRONG",{});var u$t=s(jbe);tDo=r(u$t,"mpnet"),u$t.forEach(t),aDo=r(Cje," \u2014 "),Az=n(Cje,"A",{href:!0});var p$t=s(Az);nDo=r(p$t,"MPNetForMaskedLM"),p$t.forEach(t),sDo=r(Cje," (MPNet model)"),Cje.forEach(t),lDo=i(O),Q2=n(O,"LI",{});var wje=s(Q2);Dbe=n(wje,"STRONG",{});var _$t=s(Dbe);iDo=r(_$t,"mvp"),_$t.forEach(t),dDo=r(wje," \u2014 "),Lz=n(wje,"A",{href:!0});var b$t=s(Lz);cDo=r(b$t,"MvpForConditionalGeneration"),b$t.forEach(t),mDo=r(wje," (MVP model)"),wje.forEach(t),fDo=i(O),W2=n(O,"LI",{});var Aje=s(W2);Gbe=n(Aje,"STRONG",{});var v$t=s(Gbe);gDo=r(v$t,"nezha"),v$t.forEach(t),hDo=r(Aje," \u2014 "),yz=n(Aje,"A",{href:!0});var F$t=s(yz);uDo=r(F$t,"NezhaForPreTraining"),F$t.forEach(t),pDo=r(Aje," (Nezha model)"),Aje.forEach(t),_Do=i(O),U2=n(O,"LI",{});var Lje=s(U2);Obe=n(Lje,"STRONG",{});var T$t=s(Obe);bDo=r(T$t,"openai-gpt"),T$t.forEach(t),vDo=r(Lje," \u2014 "),xz=n(Lje,"A",{href:!0});var M$t=s(xz);FDo=r(M$t,"OpenAIGPTLMHeadModel"),M$t.forEach(t),TDo=r(Lje," (OpenAI GPT model)"),Lje.forEach(t),MDo=i(O),H2=n(O,"LI",{});var yje=s(H2);Vbe=n(yje,"STRONG",{});var E$t=s(Vbe);EDo=r(E$t,"retribert"),E$t.forEach(t),CDo=r(yje," \u2014 "),$z=n(yje,"A",{href:!0});var C$t=s($z);wDo=r(C$t,"RetriBertModel"),C$t.forEach(t),ADo=r(yje," (RetriBERT model)"),yje.forEach(t),LDo=i(O),J2=n(O,"LI",{});var xje=s(J2);Xbe=n(xje,"STRONG",{});var w$t=s(Xbe);yDo=r(w$t,"roberta"),w$t.forEach(t),xDo=r(xje," \u2014 "),kz=n(xje,"A",{href:!0});var A$t=s(kz);$Do=r(A$t,"RobertaForMaskedLM"),A$t.forEach(t),kDo=r(xje," (RoBERTa model)"),xje.forEach(t),SDo=i(O),Y2=n(O,"LI",{});var $je=s(Y2);zbe=n($je,"STRONG",{});var L$t=s(zbe);RDo=r(L$t,"splinter"),L$t.forEach(t),PDo=r($je," \u2014 "),Sz=n($je,"A",{href:!0});var y$t=s(Sz);BDo=r(y$t,"SplinterForPreTraining"),y$t.forEach(t),IDo=r($je," (Splinter model)"),$je.forEach(t),NDo=i(O),K2=n(O,"LI",{});var kje=s(K2);Qbe=n(kje,"STRONG",{});var x$t=s(Qbe);qDo=r(x$t,"squeezebert"),x$t.forEach(t),jDo=r(kje," \u2014 "),Rz=n(kje,"A",{href:!0});var $$t=s(Rz);DDo=r($$t,"SqueezeBertForMaskedLM"),$$t.forEach(t),GDo=r(kje," (SqueezeBERT model)"),kje.forEach(t),ODo=i(O),Z2=n(O,"LI",{});var Sje=s(Z2);Wbe=n(Sje,"STRONG",{});var k$t=s(Wbe);VDo=r(k$t,"t5"),k$t.forEach(t),XDo=r(Sje," \u2014 "),Pz=n(Sje,"A",{href:!0});var S$t=s(Pz);zDo=r(S$t,"T5ForConditionalGeneration"),S$t.forEach(t),QDo=r(Sje," (T5 model)"),Sje.forEach(t),WDo=i(O),e1=n(O,"LI",{});var Rje=s(e1);Ube=n(Rje,"STRONG",{});var R$t=s(Ube);UDo=r(R$t,"tapas"),R$t.forEach(t),HDo=r(Rje," \u2014 "),Bz=n(Rje,"A",{href:!0});var P$t=s(Bz);JDo=r(P$t,"TapasForMaskedLM"),P$t.forEach(t),YDo=r(Rje," (TAPAS model)"),Rje.forEach(t),KDo=i(O),o1=n(O,"LI",{});var Pje=s(o1);Hbe=n(Pje,"STRONG",{});var B$t=s(Hbe);ZDo=r(B$t,"transfo-xl"),B$t.forEach(t),eGo=r(Pje," \u2014 "),Iz=n(Pje,"A",{href:!0});var I$t=s(Iz);oGo=r(I$t,"TransfoXLLMHeadModel"),I$t.forEach(t),rGo=r(Pje," (Transformer-XL model)"),Pje.forEach(t),tGo=i(O),r1=n(O,"LI",{});var Bje=s(r1);Jbe=n(Bje,"STRONG",{});var N$t=s(Jbe);aGo=r(N$t,"unispeech"),N$t.forEach(t),nGo=r(Bje," \u2014 "),Nz=n(Bje,"A",{href:!0});var q$t=s(Nz);sGo=r(q$t,"UniSpeechForPreTraining"),q$t.forEach(t),lGo=r(Bje," (UniSpeech model)"),Bje.forEach(t),iGo=i(O),t1=n(O,"LI",{});var Ije=s(t1);Ybe=n(Ije,"STRONG",{});var j$t=s(Ybe);dGo=r(j$t,"unispeech-sat"),j$t.forEach(t),cGo=r(Ije," \u2014 "),qz=n(Ije,"A",{href:!0});var D$t=s(qz);mGo=r(D$t,"UniSpeechSatForPreTraining"),D$t.forEach(t),fGo=r(Ije," (UniSpeechSat model)"),Ije.forEach(t),gGo=i(O),a1=n(O,"LI",{});var Nje=s(a1);Kbe=n(Nje,"STRONG",{});var G$t=s(Kbe);hGo=r(G$t,"videomae"),G$t.forEach(t),uGo=r(Nje," \u2014 "),jz=n(Nje,"A",{href:!0});var O$t=s(jz);pGo=r(O$t,"VideoMAEForPreTraining"),O$t.forEach(t),_Go=r(Nje," (VideoMAE model)"),Nje.forEach(t),bGo=i(O),n1=n(O,"LI",{});var qje=s(n1);Zbe=n(qje,"STRONG",{});var V$t=s(Zbe);vGo=r(V$t,"visual_bert"),V$t.forEach(t),FGo=r(qje," \u2014 "),Dz=n(qje,"A",{href:!0});var X$t=s(Dz);TGo=r(X$t,"VisualBertForPreTraining"),X$t.forEach(t),MGo=r(qje," (VisualBERT model)"),qje.forEach(t),EGo=i(O),s1=n(O,"LI",{});var jje=s(s1);e2e=n(jje,"STRONG",{});var z$t=s(e2e);CGo=r(z$t,"vit_mae"),z$t.forEach(t),wGo=r(jje," \u2014 "),Gz=n(jje,"A",{href:!0});var Q$t=s(Gz);AGo=r(Q$t,"ViTMAEForPreTraining"),Q$t.forEach(t),LGo=r(jje," (ViTMAE model)"),jje.forEach(t),yGo=i(O),l1=n(O,"LI",{});var Dje=s(l1);o2e=n(Dje,"STRONG",{});var W$t=s(o2e);xGo=r(W$t,"wav2vec2"),W$t.forEach(t),$Go=r(Dje," \u2014 "),Oz=n(Dje,"A",{href:!0});var U$t=s(Oz);kGo=r(U$t,"Wav2Vec2ForPreTraining"),U$t.forEach(t),SGo=r(Dje," (Wav2Vec2 model)"),Dje.forEach(t),RGo=i(O),i1=n(O,"LI",{});var Gje=s(i1);r2e=n(Gje,"STRONG",{});var H$t=s(r2e);PGo=r(H$t,"wav2vec2-conformer"),H$t.forEach(t),BGo=r(Gje," \u2014 "),Vz=n(Gje,"A",{href:!0});var J$t=s(Vz);IGo=r(J$t,"Wav2Vec2ConformerForPreTraining"),J$t.forEach(t),NGo=r(Gje," (Wav2Vec2-Conformer model)"),Gje.forEach(t),qGo=i(O),d1=n(O,"LI",{});var Oje=s(d1);t2e=n(Oje,"STRONG",{});var Y$t=s(t2e);jGo=r(Y$t,"xlm"),Y$t.forEach(t),DGo=r(Oje," \u2014 "),Xz=n(Oje,"A",{href:!0});var K$t=s(Xz);GGo=r(K$t,"XLMWithLMHeadModel"),K$t.forEach(t),OGo=r(Oje," (XLM model)"),Oje.forEach(t),VGo=i(O),c1=n(O,"LI",{});var Vje=s(c1);a2e=n(Vje,"STRONG",{});var Z$t=s(a2e);XGo=r(Z$t,"xlm-roberta"),Z$t.forEach(t),zGo=r(Vje," \u2014 "),zz=n(Vje,"A",{href:!0});var ekt=s(zz);QGo=r(ekt,"XLMRobertaForMaskedLM"),ekt.forEach(t),WGo=r(Vje," (XLM-RoBERTa model)"),Vje.forEach(t),UGo=i(O),m1=n(O,"LI",{});var Xje=s(m1);n2e=n(Xje,"STRONG",{});var okt=s(n2e);HGo=r(okt,"xlm-roberta-xl"),okt.forEach(t),JGo=r(Xje," \u2014 "),Qz=n(Xje,"A",{href:!0});var rkt=s(Qz);YGo=r(rkt,"XLMRobertaXLForMaskedLM"),rkt.forEach(t),KGo=r(Xje," (XLM-RoBERTa-XL model)"),Xje.forEach(t),ZGo=i(O),f1=n(O,"LI",{});var zje=s(f1);s2e=n(zje,"STRONG",{});var tkt=s(s2e);eOo=r(tkt,"xlnet"),tkt.forEach(t),oOo=r(zje," \u2014 "),Wz=n(zje,"A",{href:!0});var akt=s(Wz);rOo=r(akt,"XLNetLMHeadModel"),akt.forEach(t),tOo=r(zje," (XLNet model)"),zje.forEach(t),O.forEach(t),aOo=i(Ta),g1=n(Ta,"P",{});var Qje=s(g1);nOo=r(Qje,"The model is set in evaluation mode by default using "),l2e=n(Qje,"CODE",{});var nkt=s(l2e);sOo=r(nkt,"model.eval()"),nkt.forEach(t),lOo=r(Qje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=n(Qje,"CODE",{});var skt=s(i2e);iOo=r(skt,"model.train()"),skt.forEach(t),Qje.forEach(t),dOo=i(Ta),T(h1.$$.fragment,Ta),Ta.forEach(t),Ll.forEach(t),dZe=i(m),Ed=n(m,"H2",{class:!0});var Eoo=s(Ed);u1=n(Eoo,"A",{id:!0,class:!0,href:!0});var lkt=s(u1);d2e=n(lkt,"SPAN",{});var ikt=s(d2e);T(Cx.$$.fragment,ikt),ikt.forEach(t),lkt.forEach(t),cOo=i(Eoo),c2e=n(Eoo,"SPAN",{});var dkt=s(c2e);mOo=r(dkt,"AutoModelForCausalLM"),dkt.forEach(t),Eoo.forEach(t),cZe=i(m),Io=n(m,"DIV",{class:!0});var yl=s(Io);T(wx.$$.fragment,yl),fOo=i(yl),Cd=n(yl,"P",{});var Sle=s(Cd);gOo=r(Sle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uz=n(Sle,"A",{href:!0});var ckt=s(Uz);hOo=r(ckt,"from_pretrained()"),ckt.forEach(t),uOo=r(Sle," class method or the "),Hz=n(Sle,"A",{href:!0});var mkt=s(Hz);pOo=r(mkt,"from_config()"),mkt.forEach(t),_Oo=r(Sle,` class
method.`),Sle.forEach(t),bOo=i(yl),Ax=n(yl,"P",{});var Coo=s(Ax);vOo=r(Coo,"This class cannot be instantiated directly using "),m2e=n(Coo,"CODE",{});var fkt=s(m2e);FOo=r(fkt,"__init__()"),fkt.forEach(t),TOo=r(Coo," (throws an error)."),Coo.forEach(t),MOo=i(yl),vt=n(yl,"DIV",{class:!0});var Dy=s(vt);T(Lx.$$.fragment,Dy),EOo=i(Dy),f2e=n(Dy,"P",{});var gkt=s(f2e);COo=r(gkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gkt.forEach(t),wOo=i(Dy),wd=n(Dy,"P",{});var Rle=s(wd);AOo=r(Rle,`Note:
Loading a model from its configuration file does `),g2e=n(Rle,"STRONG",{});var hkt=s(g2e);LOo=r(hkt,"not"),hkt.forEach(t),yOo=r(Rle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(Rle,"A",{href:!0});var ukt=s(Jz);xOo=r(ukt,"from_pretrained()"),ukt.forEach(t),$Oo=r(Rle," to load the model weights."),Rle.forEach(t),kOo=i(Dy),T(p1.$$.fragment,Dy),Dy.forEach(t),SOo=i(yl),oo=n(yl,"DIV",{class:!0});var Ma=s(oo);T(yx.$$.fragment,Ma),ROo=i(Ma),h2e=n(Ma,"P",{});var pkt=s(h2e);POo=r(pkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pkt.forEach(t),BOo=i(Ma),Ka=n(Ma,"P",{});var Gy=s(Ka);IOo=r(Gy,"The model class to instantiate is selected based on the "),u2e=n(Gy,"CODE",{});var _kt=s(u2e);NOo=r(_kt,"model_type"),_kt.forEach(t),qOo=r(Gy,` property of the config object (either
passed as an argument or loaded from `),p2e=n(Gy,"CODE",{});var bkt=s(p2e);jOo=r(bkt,"pretrained_model_name_or_path"),bkt.forEach(t),DOo=r(Gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(Gy,"CODE",{});var vkt=s(_2e);GOo=r(vkt,"pretrained_model_name_or_path"),vkt.forEach(t),OOo=r(Gy,":"),Gy.forEach(t),VOo=i(Ma),Q=n(Ma,"UL",{});var U=s(Q);_1=n(U,"LI",{});var Wje=s(_1);b2e=n(Wje,"STRONG",{});var Fkt=s(b2e);XOo=r(Fkt,"bart"),Fkt.forEach(t),zOo=r(Wje," \u2014 "),Yz=n(Wje,"A",{href:!0});var Tkt=s(Yz);QOo=r(Tkt,"BartForCausalLM"),Tkt.forEach(t),WOo=r(Wje," (BART model)"),Wje.forEach(t),UOo=i(U),b1=n(U,"LI",{});var Uje=s(b1);v2e=n(Uje,"STRONG",{});var Mkt=s(v2e);HOo=r(Mkt,"bert"),Mkt.forEach(t),JOo=r(Uje," \u2014 "),Kz=n(Uje,"A",{href:!0});var Ekt=s(Kz);YOo=r(Ekt,"BertLMHeadModel"),Ekt.forEach(t),KOo=r(Uje," (BERT model)"),Uje.forEach(t),ZOo=i(U),v1=n(U,"LI",{});var Hje=s(v1);F2e=n(Hje,"STRONG",{});var Ckt=s(F2e);eVo=r(Ckt,"bert-generation"),Ckt.forEach(t),oVo=r(Hje," \u2014 "),Zz=n(Hje,"A",{href:!0});var wkt=s(Zz);rVo=r(wkt,"BertGenerationDecoder"),wkt.forEach(t),tVo=r(Hje," (Bert Generation model)"),Hje.forEach(t),aVo=i(U),F1=n(U,"LI",{});var Jje=s(F1);T2e=n(Jje,"STRONG",{});var Akt=s(T2e);nVo=r(Akt,"big_bird"),Akt.forEach(t),sVo=r(Jje," \u2014 "),eQ=n(Jje,"A",{href:!0});var Lkt=s(eQ);lVo=r(Lkt,"BigBirdForCausalLM"),Lkt.forEach(t),iVo=r(Jje," (BigBird model)"),Jje.forEach(t),dVo=i(U),T1=n(U,"LI",{});var Yje=s(T1);M2e=n(Yje,"STRONG",{});var ykt=s(M2e);cVo=r(ykt,"bigbird_pegasus"),ykt.forEach(t),mVo=r(Yje," \u2014 "),oQ=n(Yje,"A",{href:!0});var xkt=s(oQ);fVo=r(xkt,"BigBirdPegasusForCausalLM"),xkt.forEach(t),gVo=r(Yje," (BigBird-Pegasus model)"),Yje.forEach(t),hVo=i(U),M1=n(U,"LI",{});var Kje=s(M1);E2e=n(Kje,"STRONG",{});var $kt=s(E2e);uVo=r($kt,"blenderbot"),$kt.forEach(t),pVo=r(Kje," \u2014 "),rQ=n(Kje,"A",{href:!0});var kkt=s(rQ);_Vo=r(kkt,"BlenderbotForCausalLM"),kkt.forEach(t),bVo=r(Kje," (Blenderbot model)"),Kje.forEach(t),vVo=i(U),E1=n(U,"LI",{});var Zje=s(E1);C2e=n(Zje,"STRONG",{});var Skt=s(C2e);FVo=r(Skt,"blenderbot-small"),Skt.forEach(t),TVo=r(Zje," \u2014 "),tQ=n(Zje,"A",{href:!0});var Rkt=s(tQ);MVo=r(Rkt,"BlenderbotSmallForCausalLM"),Rkt.forEach(t),EVo=r(Zje," (BlenderbotSmall model)"),Zje.forEach(t),CVo=i(U),C1=n(U,"LI",{});var eDe=s(C1);w2e=n(eDe,"STRONG",{});var Pkt=s(w2e);wVo=r(Pkt,"bloom"),Pkt.forEach(t),AVo=r(eDe," \u2014 "),aQ=n(eDe,"A",{href:!0});var Bkt=s(aQ);LVo=r(Bkt,"BloomForCausalLM"),Bkt.forEach(t),yVo=r(eDe," (BLOOM model)"),eDe.forEach(t),xVo=i(U),w1=n(U,"LI",{});var oDe=s(w1);A2e=n(oDe,"STRONG",{});var Ikt=s(A2e);$Vo=r(Ikt,"camembert"),Ikt.forEach(t),kVo=r(oDe," \u2014 "),nQ=n(oDe,"A",{href:!0});var Nkt=s(nQ);SVo=r(Nkt,"CamembertForCausalLM"),Nkt.forEach(t),RVo=r(oDe," (CamemBERT model)"),oDe.forEach(t),PVo=i(U),A1=n(U,"LI",{});var rDe=s(A1);L2e=n(rDe,"STRONG",{});var qkt=s(L2e);BVo=r(qkt,"codegen"),qkt.forEach(t),IVo=r(rDe," \u2014 "),sQ=n(rDe,"A",{href:!0});var jkt=s(sQ);NVo=r(jkt,"CodeGenForCausalLM"),jkt.forEach(t),qVo=r(rDe," (CodeGen model)"),rDe.forEach(t),jVo=i(U),L1=n(U,"LI",{});var tDe=s(L1);y2e=n(tDe,"STRONG",{});var Dkt=s(y2e);DVo=r(Dkt,"ctrl"),Dkt.forEach(t),GVo=r(tDe," \u2014 "),lQ=n(tDe,"A",{href:!0});var Gkt=s(lQ);OVo=r(Gkt,"CTRLLMHeadModel"),Gkt.forEach(t),VVo=r(tDe," (CTRL model)"),tDe.forEach(t),XVo=i(U),y1=n(U,"LI",{});var aDe=s(y1);x2e=n(aDe,"STRONG",{});var Okt=s(x2e);zVo=r(Okt,"data2vec-text"),Okt.forEach(t),QVo=r(aDe," \u2014 "),iQ=n(aDe,"A",{href:!0});var Vkt=s(iQ);WVo=r(Vkt,"Data2VecTextForCausalLM"),Vkt.forEach(t),UVo=r(aDe," (Data2VecText model)"),aDe.forEach(t),HVo=i(U),x1=n(U,"LI",{});var nDe=s(x1);$2e=n(nDe,"STRONG",{});var Xkt=s($2e);JVo=r(Xkt,"electra"),Xkt.forEach(t),YVo=r(nDe," \u2014 "),dQ=n(nDe,"A",{href:!0});var zkt=s(dQ);KVo=r(zkt,"ElectraForCausalLM"),zkt.forEach(t),ZVo=r(nDe," (ELECTRA model)"),nDe.forEach(t),eXo=i(U),$1=n(U,"LI",{});var sDe=s($1);k2e=n(sDe,"STRONG",{});var Qkt=s(k2e);oXo=r(Qkt,"ernie"),Qkt.forEach(t),rXo=r(sDe," \u2014 "),cQ=n(sDe,"A",{href:!0});var Wkt=s(cQ);tXo=r(Wkt,"ErnieForCausalLM"),Wkt.forEach(t),aXo=r(sDe," (ERNIE model)"),sDe.forEach(t),nXo=i(U),k1=n(U,"LI",{});var lDe=s(k1);S2e=n(lDe,"STRONG",{});var Ukt=s(S2e);sXo=r(Ukt,"gpt2"),Ukt.forEach(t),lXo=r(lDe," \u2014 "),mQ=n(lDe,"A",{href:!0});var Hkt=s(mQ);iXo=r(Hkt,"GPT2LMHeadModel"),Hkt.forEach(t),dXo=r(lDe," (OpenAI GPT-2 model)"),lDe.forEach(t),cXo=i(U),S1=n(U,"LI",{});var iDe=s(S1);R2e=n(iDe,"STRONG",{});var Jkt=s(R2e);mXo=r(Jkt,"gpt_neo"),Jkt.forEach(t),fXo=r(iDe," \u2014 "),fQ=n(iDe,"A",{href:!0});var Ykt=s(fQ);gXo=r(Ykt,"GPTNeoForCausalLM"),Ykt.forEach(t),hXo=r(iDe," (GPT Neo model)"),iDe.forEach(t),uXo=i(U),R1=n(U,"LI",{});var dDe=s(R1);P2e=n(dDe,"STRONG",{});var Kkt=s(P2e);pXo=r(Kkt,"gpt_neox"),Kkt.forEach(t),_Xo=r(dDe," \u2014 "),gQ=n(dDe,"A",{href:!0});var Zkt=s(gQ);bXo=r(Zkt,"GPTNeoXForCausalLM"),Zkt.forEach(t),vXo=r(dDe," (GPT NeoX model)"),dDe.forEach(t),FXo=i(U),P1=n(U,"LI",{});var cDe=s(P1);B2e=n(cDe,"STRONG",{});var eSt=s(B2e);TXo=r(eSt,"gpt_neox_japanese"),eSt.forEach(t),MXo=r(cDe," \u2014 "),hQ=n(cDe,"A",{href:!0});var oSt=s(hQ);EXo=r(oSt,"GPTNeoXJapaneseForCausalLM"),oSt.forEach(t),CXo=r(cDe," (GPT NeoX Japanese model)"),cDe.forEach(t),wXo=i(U),B1=n(U,"LI",{});var mDe=s(B1);I2e=n(mDe,"STRONG",{});var rSt=s(I2e);AXo=r(rSt,"gptj"),rSt.forEach(t),LXo=r(mDe," \u2014 "),uQ=n(mDe,"A",{href:!0});var tSt=s(uQ);yXo=r(tSt,"GPTJForCausalLM"),tSt.forEach(t),xXo=r(mDe," (GPT-J model)"),mDe.forEach(t),$Xo=i(U),I1=n(U,"LI",{});var fDe=s(I1);N2e=n(fDe,"STRONG",{});var aSt=s(N2e);kXo=r(aSt,"marian"),aSt.forEach(t),SXo=r(fDe," \u2014 "),pQ=n(fDe,"A",{href:!0});var nSt=s(pQ);RXo=r(nSt,"MarianForCausalLM"),nSt.forEach(t),PXo=r(fDe," (Marian model)"),fDe.forEach(t),BXo=i(U),N1=n(U,"LI",{});var gDe=s(N1);q2e=n(gDe,"STRONG",{});var sSt=s(q2e);IXo=r(sSt,"mbart"),sSt.forEach(t),NXo=r(gDe," \u2014 "),_Q=n(gDe,"A",{href:!0});var lSt=s(_Q);qXo=r(lSt,"MBartForCausalLM"),lSt.forEach(t),jXo=r(gDe," (mBART model)"),gDe.forEach(t),DXo=i(U),q1=n(U,"LI",{});var hDe=s(q1);j2e=n(hDe,"STRONG",{});var iSt=s(j2e);GXo=r(iSt,"megatron-bert"),iSt.forEach(t),OXo=r(hDe," \u2014 "),bQ=n(hDe,"A",{href:!0});var dSt=s(bQ);VXo=r(dSt,"MegatronBertForCausalLM"),dSt.forEach(t),XXo=r(hDe," (Megatron-BERT model)"),hDe.forEach(t),zXo=i(U),j1=n(U,"LI",{});var uDe=s(j1);D2e=n(uDe,"STRONG",{});var cSt=s(D2e);QXo=r(cSt,"mvp"),cSt.forEach(t),WXo=r(uDe," \u2014 "),vQ=n(uDe,"A",{href:!0});var mSt=s(vQ);UXo=r(mSt,"MvpForCausalLM"),mSt.forEach(t),HXo=r(uDe," (MVP model)"),uDe.forEach(t),JXo=i(U),D1=n(U,"LI",{});var pDe=s(D1);G2e=n(pDe,"STRONG",{});var fSt=s(G2e);YXo=r(fSt,"openai-gpt"),fSt.forEach(t),KXo=r(pDe," \u2014 "),FQ=n(pDe,"A",{href:!0});var gSt=s(FQ);ZXo=r(gSt,"OpenAIGPTLMHeadModel"),gSt.forEach(t),ezo=r(pDe," (OpenAI GPT model)"),pDe.forEach(t),ozo=i(U),G1=n(U,"LI",{});var _De=s(G1);O2e=n(_De,"STRONG",{});var hSt=s(O2e);rzo=r(hSt,"opt"),hSt.forEach(t),tzo=r(_De," \u2014 "),TQ=n(_De,"A",{href:!0});var uSt=s(TQ);azo=r(uSt,"OPTForCausalLM"),uSt.forEach(t),nzo=r(_De," (OPT model)"),_De.forEach(t),szo=i(U),O1=n(U,"LI",{});var bDe=s(O1);V2e=n(bDe,"STRONG",{});var pSt=s(V2e);lzo=r(pSt,"pegasus"),pSt.forEach(t),izo=r(bDe," \u2014 "),MQ=n(bDe,"A",{href:!0});var _St=s(MQ);dzo=r(_St,"PegasusForCausalLM"),_St.forEach(t),czo=r(bDe," (Pegasus model)"),bDe.forEach(t),mzo=i(U),V1=n(U,"LI",{});var vDe=s(V1);X2e=n(vDe,"STRONG",{});var bSt=s(X2e);fzo=r(bSt,"plbart"),bSt.forEach(t),gzo=r(vDe," \u2014 "),EQ=n(vDe,"A",{href:!0});var vSt=s(EQ);hzo=r(vSt,"PLBartForCausalLM"),vSt.forEach(t),uzo=r(vDe," (PLBart model)"),vDe.forEach(t),pzo=i(U),X1=n(U,"LI",{});var FDe=s(X1);z2e=n(FDe,"STRONG",{});var FSt=s(z2e);_zo=r(FSt,"prophetnet"),FSt.forEach(t),bzo=r(FDe," \u2014 "),CQ=n(FDe,"A",{href:!0});var TSt=s(CQ);vzo=r(TSt,"ProphetNetForCausalLM"),TSt.forEach(t),Fzo=r(FDe," (ProphetNet model)"),FDe.forEach(t),Tzo=i(U),z1=n(U,"LI",{});var TDe=s(z1);Q2e=n(TDe,"STRONG",{});var MSt=s(Q2e);Mzo=r(MSt,"qdqbert"),MSt.forEach(t),Ezo=r(TDe," \u2014 "),wQ=n(TDe,"A",{href:!0});var ESt=s(wQ);Czo=r(ESt,"QDQBertLMHeadModel"),ESt.forEach(t),wzo=r(TDe," (QDQBert model)"),TDe.forEach(t),Azo=i(U),Q1=n(U,"LI",{});var MDe=s(Q1);W2e=n(MDe,"STRONG",{});var CSt=s(W2e);Lzo=r(CSt,"reformer"),CSt.forEach(t),yzo=r(MDe," \u2014 "),AQ=n(MDe,"A",{href:!0});var wSt=s(AQ);xzo=r(wSt,"ReformerModelWithLMHead"),wSt.forEach(t),$zo=r(MDe," (Reformer model)"),MDe.forEach(t),kzo=i(U),W1=n(U,"LI",{});var EDe=s(W1);U2e=n(EDe,"STRONG",{});var ASt=s(U2e);Szo=r(ASt,"rembert"),ASt.forEach(t),Rzo=r(EDe," \u2014 "),LQ=n(EDe,"A",{href:!0});var LSt=s(LQ);Pzo=r(LSt,"RemBertForCausalLM"),LSt.forEach(t),Bzo=r(EDe," (RemBERT model)"),EDe.forEach(t),Izo=i(U),U1=n(U,"LI",{});var CDe=s(U1);H2e=n(CDe,"STRONG",{});var ySt=s(H2e);Nzo=r(ySt,"roberta"),ySt.forEach(t),qzo=r(CDe," \u2014 "),yQ=n(CDe,"A",{href:!0});var xSt=s(yQ);jzo=r(xSt,"RobertaForCausalLM"),xSt.forEach(t),Dzo=r(CDe," (RoBERTa model)"),CDe.forEach(t),Gzo=i(U),H1=n(U,"LI",{});var wDe=s(H1);J2e=n(wDe,"STRONG",{});var $St=s(J2e);Ozo=r($St,"roformer"),$St.forEach(t),Vzo=r(wDe," \u2014 "),xQ=n(wDe,"A",{href:!0});var kSt=s(xQ);Xzo=r(kSt,"RoFormerForCausalLM"),kSt.forEach(t),zzo=r(wDe," (RoFormer model)"),wDe.forEach(t),Qzo=i(U),J1=n(U,"LI",{});var ADe=s(J1);Y2e=n(ADe,"STRONG",{});var SSt=s(Y2e);Wzo=r(SSt,"speech_to_text_2"),SSt.forEach(t),Uzo=r(ADe," \u2014 "),$Q=n(ADe,"A",{href:!0});var RSt=s($Q);Hzo=r(RSt,"Speech2Text2ForCausalLM"),RSt.forEach(t),Jzo=r(ADe," (Speech2Text2 model)"),ADe.forEach(t),Yzo=i(U),Y1=n(U,"LI",{});var LDe=s(Y1);K2e=n(LDe,"STRONG",{});var PSt=s(K2e);Kzo=r(PSt,"transfo-xl"),PSt.forEach(t),Zzo=r(LDe," \u2014 "),kQ=n(LDe,"A",{href:!0});var BSt=s(kQ);eQo=r(BSt,"TransfoXLLMHeadModel"),BSt.forEach(t),oQo=r(LDe," (Transformer-XL model)"),LDe.forEach(t),rQo=i(U),K1=n(U,"LI",{});var yDe=s(K1);Z2e=n(yDe,"STRONG",{});var ISt=s(Z2e);tQo=r(ISt,"trocr"),ISt.forEach(t),aQo=r(yDe," \u2014 "),SQ=n(yDe,"A",{href:!0});var NSt=s(SQ);nQo=r(NSt,"TrOCRForCausalLM"),NSt.forEach(t),sQo=r(yDe," (TrOCR model)"),yDe.forEach(t),lQo=i(U),Z1=n(U,"LI",{});var xDe=s(Z1);e1e=n(xDe,"STRONG",{});var qSt=s(e1e);iQo=r(qSt,"xglm"),qSt.forEach(t),dQo=r(xDe," \u2014 "),RQ=n(xDe,"A",{href:!0});var jSt=s(RQ);cQo=r(jSt,"XGLMForCausalLM"),jSt.forEach(t),mQo=r(xDe," (XGLM model)"),xDe.forEach(t),fQo=i(U),ev=n(U,"LI",{});var $De=s(ev);o1e=n($De,"STRONG",{});var DSt=s(o1e);gQo=r(DSt,"xlm"),DSt.forEach(t),hQo=r($De," \u2014 "),PQ=n($De,"A",{href:!0});var GSt=s(PQ);uQo=r(GSt,"XLMWithLMHeadModel"),GSt.forEach(t),pQo=r($De," (XLM model)"),$De.forEach(t),_Qo=i(U),ov=n(U,"LI",{});var kDe=s(ov);r1e=n(kDe,"STRONG",{});var OSt=s(r1e);bQo=r(OSt,"xlm-prophetnet"),OSt.forEach(t),vQo=r(kDe," \u2014 "),BQ=n(kDe,"A",{href:!0});var VSt=s(BQ);FQo=r(VSt,"XLMProphetNetForCausalLM"),VSt.forEach(t),TQo=r(kDe," (XLM-ProphetNet model)"),kDe.forEach(t),MQo=i(U),rv=n(U,"LI",{});var SDe=s(rv);t1e=n(SDe,"STRONG",{});var XSt=s(t1e);EQo=r(XSt,"xlm-roberta"),XSt.forEach(t),CQo=r(SDe," \u2014 "),IQ=n(SDe,"A",{href:!0});var zSt=s(IQ);wQo=r(zSt,"XLMRobertaForCausalLM"),zSt.forEach(t),AQo=r(SDe," (XLM-RoBERTa model)"),SDe.forEach(t),LQo=i(U),tv=n(U,"LI",{});var RDe=s(tv);a1e=n(RDe,"STRONG",{});var QSt=s(a1e);yQo=r(QSt,"xlm-roberta-xl"),QSt.forEach(t),xQo=r(RDe," \u2014 "),NQ=n(RDe,"A",{href:!0});var WSt=s(NQ);$Qo=r(WSt,"XLMRobertaXLForCausalLM"),WSt.forEach(t),kQo=r(RDe," (XLM-RoBERTa-XL model)"),RDe.forEach(t),SQo=i(U),av=n(U,"LI",{});var PDe=s(av);n1e=n(PDe,"STRONG",{});var USt=s(n1e);RQo=r(USt,"xlnet"),USt.forEach(t),PQo=r(PDe," \u2014 "),qQ=n(PDe,"A",{href:!0});var HSt=s(qQ);BQo=r(HSt,"XLNetLMHeadModel"),HSt.forEach(t),IQo=r(PDe," (XLNet model)"),PDe.forEach(t),U.forEach(t),NQo=i(Ma),nv=n(Ma,"P",{});var BDe=s(nv);qQo=r(BDe,"The model is set in evaluation mode by default using "),s1e=n(BDe,"CODE",{});var JSt=s(s1e);jQo=r(JSt,"model.eval()"),JSt.forEach(t),DQo=r(BDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=n(BDe,"CODE",{});var YSt=s(l1e);GQo=r(YSt,"model.train()"),YSt.forEach(t),BDe.forEach(t),OQo=i(Ma),T(sv.$$.fragment,Ma),Ma.forEach(t),yl.forEach(t),mZe=i(m),Ad=n(m,"H2",{class:!0});var woo=s(Ad);lv=n(woo,"A",{id:!0,class:!0,href:!0});var KSt=s(lv);i1e=n(KSt,"SPAN",{});var ZSt=s(i1e);T(xx.$$.fragment,ZSt),ZSt.forEach(t),KSt.forEach(t),VQo=i(woo),d1e=n(woo,"SPAN",{});var eRt=s(d1e);XQo=r(eRt,"AutoModelForMaskedLM"),eRt.forEach(t),woo.forEach(t),fZe=i(m),No=n(m,"DIV",{class:!0});var xl=s(No);T($x.$$.fragment,xl),zQo=i(xl),Ld=n(xl,"P",{});var Ple=s(Ld);QQo=r(Ple,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=n(Ple,"A",{href:!0});var oRt=s(jQ);WQo=r(oRt,"from_pretrained()"),oRt.forEach(t),UQo=r(Ple," class method or the "),DQ=n(Ple,"A",{href:!0});var rRt=s(DQ);HQo=r(rRt,"from_config()"),rRt.forEach(t),JQo=r(Ple,` class
method.`),Ple.forEach(t),YQo=i(xl),kx=n(xl,"P",{});var Aoo=s(kx);KQo=r(Aoo,"This class cannot be instantiated directly using "),c1e=n(Aoo,"CODE",{});var tRt=s(c1e);ZQo=r(tRt,"__init__()"),tRt.forEach(t),eWo=r(Aoo," (throws an error)."),Aoo.forEach(t),oWo=i(xl),Ft=n(xl,"DIV",{class:!0});var Oy=s(Ft);T(Sx.$$.fragment,Oy),rWo=i(Oy),m1e=n(Oy,"P",{});var aRt=s(m1e);tWo=r(aRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aRt.forEach(t),aWo=i(Oy),yd=n(Oy,"P",{});var Ble=s(yd);nWo=r(Ble,`Note:
Loading a model from its configuration file does `),f1e=n(Ble,"STRONG",{});var nRt=s(f1e);sWo=r(nRt,"not"),nRt.forEach(t),lWo=r(Ble,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(Ble,"A",{href:!0});var sRt=s(GQ);iWo=r(sRt,"from_pretrained()"),sRt.forEach(t),dWo=r(Ble," to load the model weights."),Ble.forEach(t),cWo=i(Oy),T(iv.$$.fragment,Oy),Oy.forEach(t),mWo=i(xl),ro=n(xl,"DIV",{class:!0});var Ea=s(ro);T(Rx.$$.fragment,Ea),fWo=i(Ea),g1e=n(Ea,"P",{});var lRt=s(g1e);gWo=r(lRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lRt.forEach(t),hWo=i(Ea),Za=n(Ea,"P",{});var Vy=s(Za);uWo=r(Vy,"The model class to instantiate is selected based on the "),h1e=n(Vy,"CODE",{});var iRt=s(h1e);pWo=r(iRt,"model_type"),iRt.forEach(t),_Wo=r(Vy,` property of the config object (either
passed as an argument or loaded from `),u1e=n(Vy,"CODE",{});var dRt=s(u1e);bWo=r(dRt,"pretrained_model_name_or_path"),dRt.forEach(t),vWo=r(Vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(Vy,"CODE",{});var cRt=s(p1e);FWo=r(cRt,"pretrained_model_name_or_path"),cRt.forEach(t),TWo=r(Vy,":"),Vy.forEach(t),MWo=i(Ea),H=n(Ea,"UL",{});var Y=s(H);dv=n(Y,"LI",{});var IDe=s(dv);_1e=n(IDe,"STRONG",{});var mRt=s(_1e);EWo=r(mRt,"albert"),mRt.forEach(t),CWo=r(IDe," \u2014 "),OQ=n(IDe,"A",{href:!0});var fRt=s(OQ);wWo=r(fRt,"AlbertForMaskedLM"),fRt.forEach(t),AWo=r(IDe," (ALBERT model)"),IDe.forEach(t),LWo=i(Y),cv=n(Y,"LI",{});var NDe=s(cv);b1e=n(NDe,"STRONG",{});var gRt=s(b1e);yWo=r(gRt,"bart"),gRt.forEach(t),xWo=r(NDe," \u2014 "),VQ=n(NDe,"A",{href:!0});var hRt=s(VQ);$Wo=r(hRt,"BartForConditionalGeneration"),hRt.forEach(t),kWo=r(NDe," (BART model)"),NDe.forEach(t),SWo=i(Y),mv=n(Y,"LI",{});var qDe=s(mv);v1e=n(qDe,"STRONG",{});var uRt=s(v1e);RWo=r(uRt,"bert"),uRt.forEach(t),PWo=r(qDe," \u2014 "),XQ=n(qDe,"A",{href:!0});var pRt=s(XQ);BWo=r(pRt,"BertForMaskedLM"),pRt.forEach(t),IWo=r(qDe," (BERT model)"),qDe.forEach(t),NWo=i(Y),fv=n(Y,"LI",{});var jDe=s(fv);F1e=n(jDe,"STRONG",{});var _Rt=s(F1e);qWo=r(_Rt,"big_bird"),_Rt.forEach(t),jWo=r(jDe," \u2014 "),zQ=n(jDe,"A",{href:!0});var bRt=s(zQ);DWo=r(bRt,"BigBirdForMaskedLM"),bRt.forEach(t),GWo=r(jDe," (BigBird model)"),jDe.forEach(t),OWo=i(Y),gv=n(Y,"LI",{});var DDe=s(gv);T1e=n(DDe,"STRONG",{});var vRt=s(T1e);VWo=r(vRt,"camembert"),vRt.forEach(t),XWo=r(DDe," \u2014 "),QQ=n(DDe,"A",{href:!0});var FRt=s(QQ);zWo=r(FRt,"CamembertForMaskedLM"),FRt.forEach(t),QWo=r(DDe," (CamemBERT model)"),DDe.forEach(t),WWo=i(Y),hv=n(Y,"LI",{});var GDe=s(hv);M1e=n(GDe,"STRONG",{});var TRt=s(M1e);UWo=r(TRt,"convbert"),TRt.forEach(t),HWo=r(GDe," \u2014 "),WQ=n(GDe,"A",{href:!0});var MRt=s(WQ);JWo=r(MRt,"ConvBertForMaskedLM"),MRt.forEach(t),YWo=r(GDe," (ConvBERT model)"),GDe.forEach(t),KWo=i(Y),uv=n(Y,"LI",{});var ODe=s(uv);E1e=n(ODe,"STRONG",{});var ERt=s(E1e);ZWo=r(ERt,"data2vec-text"),ERt.forEach(t),eUo=r(ODe," \u2014 "),UQ=n(ODe,"A",{href:!0});var CRt=s(UQ);oUo=r(CRt,"Data2VecTextForMaskedLM"),CRt.forEach(t),rUo=r(ODe," (Data2VecText model)"),ODe.forEach(t),tUo=i(Y),pv=n(Y,"LI",{});var VDe=s(pv);C1e=n(VDe,"STRONG",{});var wRt=s(C1e);aUo=r(wRt,"deberta"),wRt.forEach(t),nUo=r(VDe," \u2014 "),HQ=n(VDe,"A",{href:!0});var ARt=s(HQ);sUo=r(ARt,"DebertaForMaskedLM"),ARt.forEach(t),lUo=r(VDe," (DeBERTa model)"),VDe.forEach(t),iUo=i(Y),_v=n(Y,"LI",{});var XDe=s(_v);w1e=n(XDe,"STRONG",{});var LRt=s(w1e);dUo=r(LRt,"deberta-v2"),LRt.forEach(t),cUo=r(XDe," \u2014 "),JQ=n(XDe,"A",{href:!0});var yRt=s(JQ);mUo=r(yRt,"DebertaV2ForMaskedLM"),yRt.forEach(t),fUo=r(XDe," (DeBERTa-v2 model)"),XDe.forEach(t),gUo=i(Y),bv=n(Y,"LI",{});var zDe=s(bv);A1e=n(zDe,"STRONG",{});var xRt=s(A1e);hUo=r(xRt,"distilbert"),xRt.forEach(t),uUo=r(zDe," \u2014 "),YQ=n(zDe,"A",{href:!0});var $Rt=s(YQ);pUo=r($Rt,"DistilBertForMaskedLM"),$Rt.forEach(t),_Uo=r(zDe," (DistilBERT model)"),zDe.forEach(t),bUo=i(Y),vv=n(Y,"LI",{});var QDe=s(vv);L1e=n(QDe,"STRONG",{});var kRt=s(L1e);vUo=r(kRt,"electra"),kRt.forEach(t),FUo=r(QDe," \u2014 "),KQ=n(QDe,"A",{href:!0});var SRt=s(KQ);TUo=r(SRt,"ElectraForMaskedLM"),SRt.forEach(t),MUo=r(QDe," (ELECTRA model)"),QDe.forEach(t),EUo=i(Y),Fv=n(Y,"LI",{});var WDe=s(Fv);y1e=n(WDe,"STRONG",{});var RRt=s(y1e);CUo=r(RRt,"ernie"),RRt.forEach(t),wUo=r(WDe," \u2014 "),ZQ=n(WDe,"A",{href:!0});var PRt=s(ZQ);AUo=r(PRt,"ErnieForMaskedLM"),PRt.forEach(t),LUo=r(WDe," (ERNIE model)"),WDe.forEach(t),yUo=i(Y),Tv=n(Y,"LI",{});var UDe=s(Tv);x1e=n(UDe,"STRONG",{});var BRt=s(x1e);xUo=r(BRt,"flaubert"),BRt.forEach(t),$Uo=r(UDe," \u2014 "),eW=n(UDe,"A",{href:!0});var IRt=s(eW);kUo=r(IRt,"FlaubertWithLMHeadModel"),IRt.forEach(t),SUo=r(UDe," (FlauBERT model)"),UDe.forEach(t),RUo=i(Y),Mv=n(Y,"LI",{});var HDe=s(Mv);$1e=n(HDe,"STRONG",{});var NRt=s($1e);PUo=r(NRt,"fnet"),NRt.forEach(t),BUo=r(HDe," \u2014 "),oW=n(HDe,"A",{href:!0});var qRt=s(oW);IUo=r(qRt,"FNetForMaskedLM"),qRt.forEach(t),NUo=r(HDe," (FNet model)"),HDe.forEach(t),qUo=i(Y),Ev=n(Y,"LI",{});var JDe=s(Ev);k1e=n(JDe,"STRONG",{});var jRt=s(k1e);jUo=r(jRt,"funnel"),jRt.forEach(t),DUo=r(JDe," \u2014 "),rW=n(JDe,"A",{href:!0});var DRt=s(rW);GUo=r(DRt,"FunnelForMaskedLM"),DRt.forEach(t),OUo=r(JDe," (Funnel Transformer model)"),JDe.forEach(t),VUo=i(Y),Cv=n(Y,"LI",{});var YDe=s(Cv);S1e=n(YDe,"STRONG",{});var GRt=s(S1e);XUo=r(GRt,"ibert"),GRt.forEach(t),zUo=r(YDe," \u2014 "),tW=n(YDe,"A",{href:!0});var ORt=s(tW);QUo=r(ORt,"IBertForMaskedLM"),ORt.forEach(t),WUo=r(YDe," (I-BERT model)"),YDe.forEach(t),UUo=i(Y),wv=n(Y,"LI",{});var KDe=s(wv);R1e=n(KDe,"STRONG",{});var VRt=s(R1e);HUo=r(VRt,"layoutlm"),VRt.forEach(t),JUo=r(KDe," \u2014 "),aW=n(KDe,"A",{href:!0});var XRt=s(aW);YUo=r(XRt,"LayoutLMForMaskedLM"),XRt.forEach(t),KUo=r(KDe," (LayoutLM model)"),KDe.forEach(t),ZUo=i(Y),Av=n(Y,"LI",{});var ZDe=s(Av);P1e=n(ZDe,"STRONG",{});var zRt=s(P1e);eHo=r(zRt,"longformer"),zRt.forEach(t),oHo=r(ZDe," \u2014 "),nW=n(ZDe,"A",{href:!0});var QRt=s(nW);rHo=r(QRt,"LongformerForMaskedLM"),QRt.forEach(t),tHo=r(ZDe," (Longformer model)"),ZDe.forEach(t),aHo=i(Y),Lv=n(Y,"LI",{});var eGe=s(Lv);B1e=n(eGe,"STRONG",{});var WRt=s(B1e);nHo=r(WRt,"luke"),WRt.forEach(t),sHo=r(eGe," \u2014 "),sW=n(eGe,"A",{href:!0});var URt=s(sW);lHo=r(URt,"LukeForMaskedLM"),URt.forEach(t),iHo=r(eGe," (LUKE model)"),eGe.forEach(t),dHo=i(Y),yv=n(Y,"LI",{});var oGe=s(yv);I1e=n(oGe,"STRONG",{});var HRt=s(I1e);cHo=r(HRt,"mbart"),HRt.forEach(t),mHo=r(oGe," \u2014 "),lW=n(oGe,"A",{href:!0});var JRt=s(lW);fHo=r(JRt,"MBartForConditionalGeneration"),JRt.forEach(t),gHo=r(oGe," (mBART model)"),oGe.forEach(t),hHo=i(Y),xv=n(Y,"LI",{});var rGe=s(xv);N1e=n(rGe,"STRONG",{});var YRt=s(N1e);uHo=r(YRt,"megatron-bert"),YRt.forEach(t),pHo=r(rGe," \u2014 "),iW=n(rGe,"A",{href:!0});var KRt=s(iW);_Ho=r(KRt,"MegatronBertForMaskedLM"),KRt.forEach(t),bHo=r(rGe," (Megatron-BERT model)"),rGe.forEach(t),vHo=i(Y),$v=n(Y,"LI",{});var tGe=s($v);q1e=n(tGe,"STRONG",{});var ZRt=s(q1e);FHo=r(ZRt,"mobilebert"),ZRt.forEach(t),THo=r(tGe," \u2014 "),dW=n(tGe,"A",{href:!0});var ePt=s(dW);MHo=r(ePt,"MobileBertForMaskedLM"),ePt.forEach(t),EHo=r(tGe," (MobileBERT model)"),tGe.forEach(t),CHo=i(Y),kv=n(Y,"LI",{});var aGe=s(kv);j1e=n(aGe,"STRONG",{});var oPt=s(j1e);wHo=r(oPt,"mpnet"),oPt.forEach(t),AHo=r(aGe," \u2014 "),cW=n(aGe,"A",{href:!0});var rPt=s(cW);LHo=r(rPt,"MPNetForMaskedLM"),rPt.forEach(t),yHo=r(aGe," (MPNet model)"),aGe.forEach(t),xHo=i(Y),Sv=n(Y,"LI",{});var nGe=s(Sv);D1e=n(nGe,"STRONG",{});var tPt=s(D1e);$Ho=r(tPt,"mvp"),tPt.forEach(t),kHo=r(nGe," \u2014 "),mW=n(nGe,"A",{href:!0});var aPt=s(mW);SHo=r(aPt,"MvpForConditionalGeneration"),aPt.forEach(t),RHo=r(nGe," (MVP model)"),nGe.forEach(t),PHo=i(Y),Rv=n(Y,"LI",{});var sGe=s(Rv);G1e=n(sGe,"STRONG",{});var nPt=s(G1e);BHo=r(nPt,"nezha"),nPt.forEach(t),IHo=r(sGe," \u2014 "),fW=n(sGe,"A",{href:!0});var sPt=s(fW);NHo=r(sPt,"NezhaForMaskedLM"),sPt.forEach(t),qHo=r(sGe," (Nezha model)"),sGe.forEach(t),jHo=i(Y),Pv=n(Y,"LI",{});var lGe=s(Pv);O1e=n(lGe,"STRONG",{});var lPt=s(O1e);DHo=r(lPt,"nystromformer"),lPt.forEach(t),GHo=r(lGe," \u2014 "),gW=n(lGe,"A",{href:!0});var iPt=s(gW);OHo=r(iPt,"NystromformerForMaskedLM"),iPt.forEach(t),VHo=r(lGe," (Nystr\xF6mformer model)"),lGe.forEach(t),XHo=i(Y),Bv=n(Y,"LI",{});var iGe=s(Bv);V1e=n(iGe,"STRONG",{});var dPt=s(V1e);zHo=r(dPt,"perceiver"),dPt.forEach(t),QHo=r(iGe," \u2014 "),hW=n(iGe,"A",{href:!0});var cPt=s(hW);WHo=r(cPt,"PerceiverForMaskedLM"),cPt.forEach(t),UHo=r(iGe," (Perceiver model)"),iGe.forEach(t),HHo=i(Y),Iv=n(Y,"LI",{});var dGe=s(Iv);X1e=n(dGe,"STRONG",{});var mPt=s(X1e);JHo=r(mPt,"qdqbert"),mPt.forEach(t),YHo=r(dGe," \u2014 "),uW=n(dGe,"A",{href:!0});var fPt=s(uW);KHo=r(fPt,"QDQBertForMaskedLM"),fPt.forEach(t),ZHo=r(dGe," (QDQBert model)"),dGe.forEach(t),eJo=i(Y),Nv=n(Y,"LI",{});var cGe=s(Nv);z1e=n(cGe,"STRONG",{});var gPt=s(z1e);oJo=r(gPt,"reformer"),gPt.forEach(t),rJo=r(cGe," \u2014 "),pW=n(cGe,"A",{href:!0});var hPt=s(pW);tJo=r(hPt,"ReformerForMaskedLM"),hPt.forEach(t),aJo=r(cGe," (Reformer model)"),cGe.forEach(t),nJo=i(Y),qv=n(Y,"LI",{});var mGe=s(qv);Q1e=n(mGe,"STRONG",{});var uPt=s(Q1e);sJo=r(uPt,"rembert"),uPt.forEach(t),lJo=r(mGe," \u2014 "),_W=n(mGe,"A",{href:!0});var pPt=s(_W);iJo=r(pPt,"RemBertForMaskedLM"),pPt.forEach(t),dJo=r(mGe," (RemBERT model)"),mGe.forEach(t),cJo=i(Y),jv=n(Y,"LI",{});var fGe=s(jv);W1e=n(fGe,"STRONG",{});var _Pt=s(W1e);mJo=r(_Pt,"roberta"),_Pt.forEach(t),fJo=r(fGe," \u2014 "),bW=n(fGe,"A",{href:!0});var bPt=s(bW);gJo=r(bPt,"RobertaForMaskedLM"),bPt.forEach(t),hJo=r(fGe," (RoBERTa model)"),fGe.forEach(t),uJo=i(Y),Dv=n(Y,"LI",{});var gGe=s(Dv);U1e=n(gGe,"STRONG",{});var vPt=s(U1e);pJo=r(vPt,"roformer"),vPt.forEach(t),_Jo=r(gGe," \u2014 "),vW=n(gGe,"A",{href:!0});var FPt=s(vW);bJo=r(FPt,"RoFormerForMaskedLM"),FPt.forEach(t),vJo=r(gGe," (RoFormer model)"),gGe.forEach(t),FJo=i(Y),Gv=n(Y,"LI",{});var hGe=s(Gv);H1e=n(hGe,"STRONG",{});var TPt=s(H1e);TJo=r(TPt,"squeezebert"),TPt.forEach(t),MJo=r(hGe," \u2014 "),FW=n(hGe,"A",{href:!0});var MPt=s(FW);EJo=r(MPt,"SqueezeBertForMaskedLM"),MPt.forEach(t),CJo=r(hGe," (SqueezeBERT model)"),hGe.forEach(t),wJo=i(Y),Ov=n(Y,"LI",{});var uGe=s(Ov);J1e=n(uGe,"STRONG",{});var EPt=s(J1e);AJo=r(EPt,"tapas"),EPt.forEach(t),LJo=r(uGe," \u2014 "),TW=n(uGe,"A",{href:!0});var CPt=s(TW);yJo=r(CPt,"TapasForMaskedLM"),CPt.forEach(t),xJo=r(uGe," (TAPAS model)"),uGe.forEach(t),$Jo=i(Y),Vv=n(Y,"LI",{});var pGe=s(Vv);Y1e=n(pGe,"STRONG",{});var wPt=s(Y1e);kJo=r(wPt,"wav2vec2"),wPt.forEach(t),SJo=r(pGe," \u2014 "),K1e=n(pGe,"CODE",{});var APt=s(K1e);RJo=r(APt,"Wav2Vec2ForMaskedLM"),APt.forEach(t),PJo=r(pGe," (Wav2Vec2 model)"),pGe.forEach(t),BJo=i(Y),Xv=n(Y,"LI",{});var _Ge=s(Xv);Z1e=n(_Ge,"STRONG",{});var LPt=s(Z1e);IJo=r(LPt,"xlm"),LPt.forEach(t),NJo=r(_Ge," \u2014 "),MW=n(_Ge,"A",{href:!0});var yPt=s(MW);qJo=r(yPt,"XLMWithLMHeadModel"),yPt.forEach(t),jJo=r(_Ge," (XLM model)"),_Ge.forEach(t),DJo=i(Y),zv=n(Y,"LI",{});var bGe=s(zv);eve=n(bGe,"STRONG",{});var xPt=s(eve);GJo=r(xPt,"xlm-roberta"),xPt.forEach(t),OJo=r(bGe," \u2014 "),EW=n(bGe,"A",{href:!0});var $Pt=s(EW);VJo=r($Pt,"XLMRobertaForMaskedLM"),$Pt.forEach(t),XJo=r(bGe," (XLM-RoBERTa model)"),bGe.forEach(t),zJo=i(Y),Qv=n(Y,"LI",{});var vGe=s(Qv);ove=n(vGe,"STRONG",{});var kPt=s(ove);QJo=r(kPt,"xlm-roberta-xl"),kPt.forEach(t),WJo=r(vGe," \u2014 "),CW=n(vGe,"A",{href:!0});var SPt=s(CW);UJo=r(SPt,"XLMRobertaXLForMaskedLM"),SPt.forEach(t),HJo=r(vGe," (XLM-RoBERTa-XL model)"),vGe.forEach(t),JJo=i(Y),Wv=n(Y,"LI",{});var FGe=s(Wv);rve=n(FGe,"STRONG",{});var RPt=s(rve);YJo=r(RPt,"yoso"),RPt.forEach(t),KJo=r(FGe," \u2014 "),wW=n(FGe,"A",{href:!0});var PPt=s(wW);ZJo=r(PPt,"YosoForMaskedLM"),PPt.forEach(t),eYo=r(FGe," (YOSO model)"),FGe.forEach(t),Y.forEach(t),oYo=i(Ea),Uv=n(Ea,"P",{});var TGe=s(Uv);rYo=r(TGe,"The model is set in evaluation mode by default using "),tve=n(TGe,"CODE",{});var BPt=s(tve);tYo=r(BPt,"model.eval()"),BPt.forEach(t),aYo=r(TGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=n(TGe,"CODE",{});var IPt=s(ave);nYo=r(IPt,"model.train()"),IPt.forEach(t),TGe.forEach(t),sYo=i(Ea),T(Hv.$$.fragment,Ea),Ea.forEach(t),xl.forEach(t),gZe=i(m),xd=n(m,"H2",{class:!0});var Loo=s(xd);Jv=n(Loo,"A",{id:!0,class:!0,href:!0});var NPt=s(Jv);nve=n(NPt,"SPAN",{});var qPt=s(nve);T(Px.$$.fragment,qPt),qPt.forEach(t),NPt.forEach(t),lYo=i(Loo),sve=n(Loo,"SPAN",{});var jPt=s(sve);iYo=r(jPt,"AutoModelForSeq2SeqLM"),jPt.forEach(t),Loo.forEach(t),hZe=i(m),qo=n(m,"DIV",{class:!0});var $l=s(qo);T(Bx.$$.fragment,$l),dYo=i($l),$d=n($l,"P",{});var Ile=s($d);cYo=r(Ile,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AW=n(Ile,"A",{href:!0});var DPt=s(AW);mYo=r(DPt,"from_pretrained()"),DPt.forEach(t),fYo=r(Ile," class method or the "),LW=n(Ile,"A",{href:!0});var GPt=s(LW);gYo=r(GPt,"from_config()"),GPt.forEach(t),hYo=r(Ile,` class
method.`),Ile.forEach(t),uYo=i($l),Ix=n($l,"P",{});var yoo=s(Ix);pYo=r(yoo,"This class cannot be instantiated directly using "),lve=n(yoo,"CODE",{});var OPt=s(lve);_Yo=r(OPt,"__init__()"),OPt.forEach(t),bYo=r(yoo," (throws an error)."),yoo.forEach(t),vYo=i($l),Tt=n($l,"DIV",{class:!0});var Xy=s(Tt);T(Nx.$$.fragment,Xy),FYo=i(Xy),ive=n(Xy,"P",{});var VPt=s(ive);TYo=r(VPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VPt.forEach(t),MYo=i(Xy),kd=n(Xy,"P",{});var Nle=s(kd);EYo=r(Nle,`Note:
Loading a model from its configuration file does `),dve=n(Nle,"STRONG",{});var XPt=s(dve);CYo=r(XPt,"not"),XPt.forEach(t),wYo=r(Nle,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(Nle,"A",{href:!0});var zPt=s(yW);AYo=r(zPt,"from_pretrained()"),zPt.forEach(t),LYo=r(Nle," to load the model weights."),Nle.forEach(t),yYo=i(Xy),T(Yv.$$.fragment,Xy),Xy.forEach(t),xYo=i($l),to=n($l,"DIV",{class:!0});var Ca=s(to);T(qx.$$.fragment,Ca),$Yo=i(Ca),cve=n(Ca,"P",{});var QPt=s(cve);kYo=r(QPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QPt.forEach(t),SYo=i(Ca),en=n(Ca,"P",{});var zy=s(en);RYo=r(zy,"The model class to instantiate is selected based on the "),mve=n(zy,"CODE",{});var WPt=s(mve);PYo=r(WPt,"model_type"),WPt.forEach(t),BYo=r(zy,` property of the config object (either
passed as an argument or loaded from `),fve=n(zy,"CODE",{});var UPt=s(fve);IYo=r(UPt,"pretrained_model_name_or_path"),UPt.forEach(t),NYo=r(zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(zy,"CODE",{});var HPt=s(gve);qYo=r(HPt,"pretrained_model_name_or_path"),HPt.forEach(t),jYo=r(zy,":"),zy.forEach(t),DYo=i(Ca),me=n(Ca,"UL",{});var pe=s(me);Kv=n(pe,"LI",{});var MGe=s(Kv);hve=n(MGe,"STRONG",{});var JPt=s(hve);GYo=r(JPt,"bart"),JPt.forEach(t),OYo=r(MGe," \u2014 "),xW=n(MGe,"A",{href:!0});var YPt=s(xW);VYo=r(YPt,"BartForConditionalGeneration"),YPt.forEach(t),XYo=r(MGe," (BART model)"),MGe.forEach(t),zYo=i(pe),Zv=n(pe,"LI",{});var EGe=s(Zv);uve=n(EGe,"STRONG",{});var KPt=s(uve);QYo=r(KPt,"bigbird_pegasus"),KPt.forEach(t),WYo=r(EGe," \u2014 "),$W=n(EGe,"A",{href:!0});var ZPt=s($W);UYo=r(ZPt,"BigBirdPegasusForConditionalGeneration"),ZPt.forEach(t),HYo=r(EGe," (BigBird-Pegasus model)"),EGe.forEach(t),JYo=i(pe),eF=n(pe,"LI",{});var CGe=s(eF);pve=n(CGe,"STRONG",{});var eBt=s(pve);YYo=r(eBt,"blenderbot"),eBt.forEach(t),KYo=r(CGe," \u2014 "),kW=n(CGe,"A",{href:!0});var oBt=s(kW);ZYo=r(oBt,"BlenderbotForConditionalGeneration"),oBt.forEach(t),eKo=r(CGe," (Blenderbot model)"),CGe.forEach(t),oKo=i(pe),oF=n(pe,"LI",{});var wGe=s(oF);_ve=n(wGe,"STRONG",{});var rBt=s(_ve);rKo=r(rBt,"blenderbot-small"),rBt.forEach(t),tKo=r(wGe," \u2014 "),SW=n(wGe,"A",{href:!0});var tBt=s(SW);aKo=r(tBt,"BlenderbotSmallForConditionalGeneration"),tBt.forEach(t),nKo=r(wGe," (BlenderbotSmall model)"),wGe.forEach(t),sKo=i(pe),rF=n(pe,"LI",{});var AGe=s(rF);bve=n(AGe,"STRONG",{});var aBt=s(bve);lKo=r(aBt,"encoder-decoder"),aBt.forEach(t),iKo=r(AGe," \u2014 "),RW=n(AGe,"A",{href:!0});var nBt=s(RW);dKo=r(nBt,"EncoderDecoderModel"),nBt.forEach(t),cKo=r(AGe," (Encoder decoder model)"),AGe.forEach(t),mKo=i(pe),tF=n(pe,"LI",{});var LGe=s(tF);vve=n(LGe,"STRONG",{});var sBt=s(vve);fKo=r(sBt,"fsmt"),sBt.forEach(t),gKo=r(LGe," \u2014 "),PW=n(LGe,"A",{href:!0});var lBt=s(PW);hKo=r(lBt,"FSMTForConditionalGeneration"),lBt.forEach(t),uKo=r(LGe," (FairSeq Machine-Translation model)"),LGe.forEach(t),pKo=i(pe),aF=n(pe,"LI",{});var yGe=s(aF);Fve=n(yGe,"STRONG",{});var iBt=s(Fve);_Ko=r(iBt,"led"),iBt.forEach(t),bKo=r(yGe," \u2014 "),BW=n(yGe,"A",{href:!0});var dBt=s(BW);vKo=r(dBt,"LEDForConditionalGeneration"),dBt.forEach(t),FKo=r(yGe," (LED model)"),yGe.forEach(t),TKo=i(pe),nF=n(pe,"LI",{});var xGe=s(nF);Tve=n(xGe,"STRONG",{});var cBt=s(Tve);MKo=r(cBt,"longt5"),cBt.forEach(t),EKo=r(xGe," \u2014 "),IW=n(xGe,"A",{href:!0});var mBt=s(IW);CKo=r(mBt,"LongT5ForConditionalGeneration"),mBt.forEach(t),wKo=r(xGe," (LongT5 model)"),xGe.forEach(t),AKo=i(pe),sF=n(pe,"LI",{});var $Ge=s(sF);Mve=n($Ge,"STRONG",{});var fBt=s(Mve);LKo=r(fBt,"m2m_100"),fBt.forEach(t),yKo=r($Ge," \u2014 "),NW=n($Ge,"A",{href:!0});var gBt=s(NW);xKo=r(gBt,"M2M100ForConditionalGeneration"),gBt.forEach(t),$Ko=r($Ge," (M2M100 model)"),$Ge.forEach(t),kKo=i(pe),lF=n(pe,"LI",{});var kGe=s(lF);Eve=n(kGe,"STRONG",{});var hBt=s(Eve);SKo=r(hBt,"marian"),hBt.forEach(t),RKo=r(kGe," \u2014 "),qW=n(kGe,"A",{href:!0});var uBt=s(qW);PKo=r(uBt,"MarianMTModel"),uBt.forEach(t),BKo=r(kGe," (Marian model)"),kGe.forEach(t),IKo=i(pe),iF=n(pe,"LI",{});var SGe=s(iF);Cve=n(SGe,"STRONG",{});var pBt=s(Cve);NKo=r(pBt,"mbart"),pBt.forEach(t),qKo=r(SGe," \u2014 "),jW=n(SGe,"A",{href:!0});var _Bt=s(jW);jKo=r(_Bt,"MBartForConditionalGeneration"),_Bt.forEach(t),DKo=r(SGe," (mBART model)"),SGe.forEach(t),GKo=i(pe),dF=n(pe,"LI",{});var RGe=s(dF);wve=n(RGe,"STRONG",{});var bBt=s(wve);OKo=r(bBt,"mt5"),bBt.forEach(t),VKo=r(RGe," \u2014 "),DW=n(RGe,"A",{href:!0});var vBt=s(DW);XKo=r(vBt,"MT5ForConditionalGeneration"),vBt.forEach(t),zKo=r(RGe," (MT5 model)"),RGe.forEach(t),QKo=i(pe),cF=n(pe,"LI",{});var PGe=s(cF);Ave=n(PGe,"STRONG",{});var FBt=s(Ave);WKo=r(FBt,"mvp"),FBt.forEach(t),UKo=r(PGe," \u2014 "),GW=n(PGe,"A",{href:!0});var TBt=s(GW);HKo=r(TBt,"MvpForConditionalGeneration"),TBt.forEach(t),JKo=r(PGe," (MVP model)"),PGe.forEach(t),YKo=i(pe),mF=n(pe,"LI",{});var BGe=s(mF);Lve=n(BGe,"STRONG",{});var MBt=s(Lve);KKo=r(MBt,"nllb"),MBt.forEach(t),ZKo=r(BGe," \u2014 "),OW=n(BGe,"A",{href:!0});var EBt=s(OW);eZo=r(EBt,"M2M100ForConditionalGeneration"),EBt.forEach(t),oZo=r(BGe," (NLLB model)"),BGe.forEach(t),rZo=i(pe),fF=n(pe,"LI",{});var IGe=s(fF);yve=n(IGe,"STRONG",{});var CBt=s(yve);tZo=r(CBt,"pegasus"),CBt.forEach(t),aZo=r(IGe," \u2014 "),VW=n(IGe,"A",{href:!0});var wBt=s(VW);nZo=r(wBt,"PegasusForConditionalGeneration"),wBt.forEach(t),sZo=r(IGe," (Pegasus model)"),IGe.forEach(t),lZo=i(pe),gF=n(pe,"LI",{});var NGe=s(gF);xve=n(NGe,"STRONG",{});var ABt=s(xve);iZo=r(ABt,"pegasus_x"),ABt.forEach(t),dZo=r(NGe," \u2014 "),XW=n(NGe,"A",{href:!0});var LBt=s(XW);cZo=r(LBt,"PegasusXForConditionalGeneration"),LBt.forEach(t),mZo=r(NGe," (PEGASUS-X model)"),NGe.forEach(t),fZo=i(pe),hF=n(pe,"LI",{});var qGe=s(hF);$ve=n(qGe,"STRONG",{});var yBt=s($ve);gZo=r(yBt,"plbart"),yBt.forEach(t),hZo=r(qGe," \u2014 "),zW=n(qGe,"A",{href:!0});var xBt=s(zW);uZo=r(xBt,"PLBartForConditionalGeneration"),xBt.forEach(t),pZo=r(qGe," (PLBart model)"),qGe.forEach(t),_Zo=i(pe),uF=n(pe,"LI",{});var jGe=s(uF);kve=n(jGe,"STRONG",{});var $Bt=s(kve);bZo=r($Bt,"prophetnet"),$Bt.forEach(t),vZo=r(jGe," \u2014 "),QW=n(jGe,"A",{href:!0});var kBt=s(QW);FZo=r(kBt,"ProphetNetForConditionalGeneration"),kBt.forEach(t),TZo=r(jGe," (ProphetNet model)"),jGe.forEach(t),MZo=i(pe),pF=n(pe,"LI",{});var DGe=s(pF);Sve=n(DGe,"STRONG",{});var SBt=s(Sve);EZo=r(SBt,"t5"),SBt.forEach(t),CZo=r(DGe," \u2014 "),WW=n(DGe,"A",{href:!0});var RBt=s(WW);wZo=r(RBt,"T5ForConditionalGeneration"),RBt.forEach(t),AZo=r(DGe," (T5 model)"),DGe.forEach(t),LZo=i(pe),_F=n(pe,"LI",{});var GGe=s(_F);Rve=n(GGe,"STRONG",{});var PBt=s(Rve);yZo=r(PBt,"xlm-prophetnet"),PBt.forEach(t),xZo=r(GGe," \u2014 "),UW=n(GGe,"A",{href:!0});var BBt=s(UW);$Zo=r(BBt,"XLMProphetNetForConditionalGeneration"),BBt.forEach(t),kZo=r(GGe," (XLM-ProphetNet model)"),GGe.forEach(t),pe.forEach(t),SZo=i(Ca),bF=n(Ca,"P",{});var OGe=s(bF);RZo=r(OGe,"The model is set in evaluation mode by default using "),Pve=n(OGe,"CODE",{});var IBt=s(Pve);PZo=r(IBt,"model.eval()"),IBt.forEach(t),BZo=r(OGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=n(OGe,"CODE",{});var NBt=s(Bve);IZo=r(NBt,"model.train()"),NBt.forEach(t),OGe.forEach(t),NZo=i(Ca),T(vF.$$.fragment,Ca),Ca.forEach(t),$l.forEach(t),uZe=i(m),Sd=n(m,"H2",{class:!0});var xoo=s(Sd);FF=n(xoo,"A",{id:!0,class:!0,href:!0});var qBt=s(FF);Ive=n(qBt,"SPAN",{});var jBt=s(Ive);T(jx.$$.fragment,jBt),jBt.forEach(t),qBt.forEach(t),qZo=i(xoo),Nve=n(xoo,"SPAN",{});var DBt=s(Nve);jZo=r(DBt,"AutoModelForSequenceClassification"),DBt.forEach(t),xoo.forEach(t),pZe=i(m),jo=n(m,"DIV",{class:!0});var kl=s(jo);T(Dx.$$.fragment,kl),DZo=i(kl),Rd=n(kl,"P",{});var qle=s(Rd);GZo=r(qle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HW=n(qle,"A",{href:!0});var GBt=s(HW);OZo=r(GBt,"from_pretrained()"),GBt.forEach(t),VZo=r(qle," class method or the "),JW=n(qle,"A",{href:!0});var OBt=s(JW);XZo=r(OBt,"from_config()"),OBt.forEach(t),zZo=r(qle,` class
method.`),qle.forEach(t),QZo=i(kl),Gx=n(kl,"P",{});var $oo=s(Gx);WZo=r($oo,"This class cannot be instantiated directly using "),qve=n($oo,"CODE",{});var VBt=s(qve);UZo=r(VBt,"__init__()"),VBt.forEach(t),HZo=r($oo," (throws an error)."),$oo.forEach(t),JZo=i(kl),Mt=n(kl,"DIV",{class:!0});var Qy=s(Mt);T(Ox.$$.fragment,Qy),YZo=i(Qy),jve=n(Qy,"P",{});var XBt=s(jve);KZo=r(XBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XBt.forEach(t),ZZo=i(Qy),Pd=n(Qy,"P",{});var jle=s(Pd);eer=r(jle,`Note:
Loading a model from its configuration file does `),Dve=n(jle,"STRONG",{});var zBt=s(Dve);oer=r(zBt,"not"),zBt.forEach(t),rer=r(jle,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(jle,"A",{href:!0});var QBt=s(YW);ter=r(QBt,"from_pretrained()"),QBt.forEach(t),aer=r(jle," to load the model weights."),jle.forEach(t),ner=i(Qy),T(TF.$$.fragment,Qy),Qy.forEach(t),ser=i(kl),ao=n(kl,"DIV",{class:!0});var wa=s(ao);T(Vx.$$.fragment,wa),ler=i(wa),Gve=n(wa,"P",{});var WBt=s(Gve);ier=r(WBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WBt.forEach(t),der=i(wa),on=n(wa,"P",{});var Wy=s(on);cer=r(Wy,"The model class to instantiate is selected based on the "),Ove=n(Wy,"CODE",{});var UBt=s(Ove);mer=r(UBt,"model_type"),UBt.forEach(t),fer=r(Wy,` property of the config object (either
passed as an argument or loaded from `),Vve=n(Wy,"CODE",{});var HBt=s(Vve);ger=r(HBt,"pretrained_model_name_or_path"),HBt.forEach(t),her=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(Wy,"CODE",{});var JBt=s(Xve);uer=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),per=r(Wy,":"),Wy.forEach(t),_er=i(wa),j=n(wa,"UL",{});var D=s(j);MF=n(D,"LI",{});var VGe=s(MF);zve=n(VGe,"STRONG",{});var YBt=s(zve);ber=r(YBt,"albert"),YBt.forEach(t),ver=r(VGe," \u2014 "),KW=n(VGe,"A",{href:!0});var KBt=s(KW);Fer=r(KBt,"AlbertForSequenceClassification"),KBt.forEach(t),Ter=r(VGe," (ALBERT model)"),VGe.forEach(t),Mer=i(D),EF=n(D,"LI",{});var XGe=s(EF);Qve=n(XGe,"STRONG",{});var ZBt=s(Qve);Eer=r(ZBt,"bart"),ZBt.forEach(t),Cer=r(XGe," \u2014 "),ZW=n(XGe,"A",{href:!0});var eIt=s(ZW);wer=r(eIt,"BartForSequenceClassification"),eIt.forEach(t),Aer=r(XGe," (BART model)"),XGe.forEach(t),Ler=i(D),CF=n(D,"LI",{});var zGe=s(CF);Wve=n(zGe,"STRONG",{});var oIt=s(Wve);yer=r(oIt,"bert"),oIt.forEach(t),xer=r(zGe," \u2014 "),eU=n(zGe,"A",{href:!0});var rIt=s(eU);$er=r(rIt,"BertForSequenceClassification"),rIt.forEach(t),ker=r(zGe," (BERT model)"),zGe.forEach(t),Ser=i(D),wF=n(D,"LI",{});var QGe=s(wF);Uve=n(QGe,"STRONG",{});var tIt=s(Uve);Rer=r(tIt,"big_bird"),tIt.forEach(t),Per=r(QGe," \u2014 "),oU=n(QGe,"A",{href:!0});var aIt=s(oU);Ber=r(aIt,"BigBirdForSequenceClassification"),aIt.forEach(t),Ier=r(QGe," (BigBird model)"),QGe.forEach(t),Ner=i(D),AF=n(D,"LI",{});var WGe=s(AF);Hve=n(WGe,"STRONG",{});var nIt=s(Hve);qer=r(nIt,"bigbird_pegasus"),nIt.forEach(t),jer=r(WGe," \u2014 "),rU=n(WGe,"A",{href:!0});var sIt=s(rU);Der=r(sIt,"BigBirdPegasusForSequenceClassification"),sIt.forEach(t),Ger=r(WGe," (BigBird-Pegasus model)"),WGe.forEach(t),Oer=i(D),LF=n(D,"LI",{});var UGe=s(LF);Jve=n(UGe,"STRONG",{});var lIt=s(Jve);Ver=r(lIt,"bloom"),lIt.forEach(t),Xer=r(UGe," \u2014 "),tU=n(UGe,"A",{href:!0});var iIt=s(tU);zer=r(iIt,"BloomForSequenceClassification"),iIt.forEach(t),Qer=r(UGe," (BLOOM model)"),UGe.forEach(t),Wer=i(D),yF=n(D,"LI",{});var HGe=s(yF);Yve=n(HGe,"STRONG",{});var dIt=s(Yve);Uer=r(dIt,"camembert"),dIt.forEach(t),Her=r(HGe," \u2014 "),aU=n(HGe,"A",{href:!0});var cIt=s(aU);Jer=r(cIt,"CamembertForSequenceClassification"),cIt.forEach(t),Yer=r(HGe," (CamemBERT model)"),HGe.forEach(t),Ker=i(D),xF=n(D,"LI",{});var JGe=s(xF);Kve=n(JGe,"STRONG",{});var mIt=s(Kve);Zer=r(mIt,"canine"),mIt.forEach(t),eor=r(JGe," \u2014 "),nU=n(JGe,"A",{href:!0});var fIt=s(nU);oor=r(fIt,"CanineForSequenceClassification"),fIt.forEach(t),ror=r(JGe," (CANINE model)"),JGe.forEach(t),tor=i(D),$F=n(D,"LI",{});var YGe=s($F);Zve=n(YGe,"STRONG",{});var gIt=s(Zve);aor=r(gIt,"convbert"),gIt.forEach(t),nor=r(YGe," \u2014 "),sU=n(YGe,"A",{href:!0});var hIt=s(sU);sor=r(hIt,"ConvBertForSequenceClassification"),hIt.forEach(t),lor=r(YGe," (ConvBERT model)"),YGe.forEach(t),ior=i(D),kF=n(D,"LI",{});var KGe=s(kF);eFe=n(KGe,"STRONG",{});var uIt=s(eFe);dor=r(uIt,"ctrl"),uIt.forEach(t),cor=r(KGe," \u2014 "),lU=n(KGe,"A",{href:!0});var pIt=s(lU);mor=r(pIt,"CTRLForSequenceClassification"),pIt.forEach(t),gor=r(KGe," (CTRL model)"),KGe.forEach(t),hor=i(D),SF=n(D,"LI",{});var ZGe=s(SF);oFe=n(ZGe,"STRONG",{});var _It=s(oFe);uor=r(_It,"data2vec-text"),_It.forEach(t),por=r(ZGe," \u2014 "),iU=n(ZGe,"A",{href:!0});var bIt=s(iU);_or=r(bIt,"Data2VecTextForSequenceClassification"),bIt.forEach(t),bor=r(ZGe," (Data2VecText model)"),ZGe.forEach(t),vor=i(D),RF=n(D,"LI",{});var eOe=s(RF);rFe=n(eOe,"STRONG",{});var vIt=s(rFe);For=r(vIt,"deberta"),vIt.forEach(t),Tor=r(eOe," \u2014 "),dU=n(eOe,"A",{href:!0});var FIt=s(dU);Mor=r(FIt,"DebertaForSequenceClassification"),FIt.forEach(t),Eor=r(eOe," (DeBERTa model)"),eOe.forEach(t),Cor=i(D),PF=n(D,"LI",{});var oOe=s(PF);tFe=n(oOe,"STRONG",{});var TIt=s(tFe);wor=r(TIt,"deberta-v2"),TIt.forEach(t),Aor=r(oOe," \u2014 "),cU=n(oOe,"A",{href:!0});var MIt=s(cU);Lor=r(MIt,"DebertaV2ForSequenceClassification"),MIt.forEach(t),yor=r(oOe," (DeBERTa-v2 model)"),oOe.forEach(t),xor=i(D),BF=n(D,"LI",{});var rOe=s(BF);aFe=n(rOe,"STRONG",{});var EIt=s(aFe);$or=r(EIt,"distilbert"),EIt.forEach(t),kor=r(rOe," \u2014 "),mU=n(rOe,"A",{href:!0});var CIt=s(mU);Sor=r(CIt,"DistilBertForSequenceClassification"),CIt.forEach(t),Ror=r(rOe," (DistilBERT model)"),rOe.forEach(t),Por=i(D),IF=n(D,"LI",{});var tOe=s(IF);nFe=n(tOe,"STRONG",{});var wIt=s(nFe);Bor=r(wIt,"electra"),wIt.forEach(t),Ior=r(tOe," \u2014 "),fU=n(tOe,"A",{href:!0});var AIt=s(fU);Nor=r(AIt,"ElectraForSequenceClassification"),AIt.forEach(t),qor=r(tOe," (ELECTRA model)"),tOe.forEach(t),jor=i(D),NF=n(D,"LI",{});var aOe=s(NF);sFe=n(aOe,"STRONG",{});var LIt=s(sFe);Dor=r(LIt,"ernie"),LIt.forEach(t),Gor=r(aOe," \u2014 "),gU=n(aOe,"A",{href:!0});var yIt=s(gU);Oor=r(yIt,"ErnieForSequenceClassification"),yIt.forEach(t),Vor=r(aOe," (ERNIE model)"),aOe.forEach(t),Xor=i(D),qF=n(D,"LI",{});var nOe=s(qF);lFe=n(nOe,"STRONG",{});var xIt=s(lFe);zor=r(xIt,"flaubert"),xIt.forEach(t),Qor=r(nOe," \u2014 "),hU=n(nOe,"A",{href:!0});var $It=s(hU);Wor=r($It,"FlaubertForSequenceClassification"),$It.forEach(t),Uor=r(nOe," (FlauBERT model)"),nOe.forEach(t),Hor=i(D),jF=n(D,"LI",{});var sOe=s(jF);iFe=n(sOe,"STRONG",{});var kIt=s(iFe);Jor=r(kIt,"fnet"),kIt.forEach(t),Yor=r(sOe," \u2014 "),uU=n(sOe,"A",{href:!0});var SIt=s(uU);Kor=r(SIt,"FNetForSequenceClassification"),SIt.forEach(t),Zor=r(sOe," (FNet model)"),sOe.forEach(t),err=i(D),DF=n(D,"LI",{});var lOe=s(DF);dFe=n(lOe,"STRONG",{});var RIt=s(dFe);orr=r(RIt,"funnel"),RIt.forEach(t),rrr=r(lOe," \u2014 "),pU=n(lOe,"A",{href:!0});var PIt=s(pU);trr=r(PIt,"FunnelForSequenceClassification"),PIt.forEach(t),arr=r(lOe," (Funnel Transformer model)"),lOe.forEach(t),nrr=i(D),GF=n(D,"LI",{});var iOe=s(GF);cFe=n(iOe,"STRONG",{});var BIt=s(cFe);srr=r(BIt,"gpt2"),BIt.forEach(t),lrr=r(iOe," \u2014 "),_U=n(iOe,"A",{href:!0});var IIt=s(_U);irr=r(IIt,"GPT2ForSequenceClassification"),IIt.forEach(t),drr=r(iOe," (OpenAI GPT-2 model)"),iOe.forEach(t),crr=i(D),OF=n(D,"LI",{});var dOe=s(OF);mFe=n(dOe,"STRONG",{});var NIt=s(mFe);mrr=r(NIt,"gpt_neo"),NIt.forEach(t),frr=r(dOe," \u2014 "),bU=n(dOe,"A",{href:!0});var qIt=s(bU);grr=r(qIt,"GPTNeoForSequenceClassification"),qIt.forEach(t),hrr=r(dOe," (GPT Neo model)"),dOe.forEach(t),urr=i(D),VF=n(D,"LI",{});var cOe=s(VF);fFe=n(cOe,"STRONG",{});var jIt=s(fFe);prr=r(jIt,"gptj"),jIt.forEach(t),_rr=r(cOe," \u2014 "),vU=n(cOe,"A",{href:!0});var DIt=s(vU);brr=r(DIt,"GPTJForSequenceClassification"),DIt.forEach(t),vrr=r(cOe," (GPT-J model)"),cOe.forEach(t),Frr=i(D),XF=n(D,"LI",{});var mOe=s(XF);gFe=n(mOe,"STRONG",{});var GIt=s(gFe);Trr=r(GIt,"ibert"),GIt.forEach(t),Mrr=r(mOe," \u2014 "),FU=n(mOe,"A",{href:!0});var OIt=s(FU);Err=r(OIt,"IBertForSequenceClassification"),OIt.forEach(t),Crr=r(mOe," (I-BERT model)"),mOe.forEach(t),wrr=i(D),zF=n(D,"LI",{});var fOe=s(zF);hFe=n(fOe,"STRONG",{});var VIt=s(hFe);Arr=r(VIt,"layoutlm"),VIt.forEach(t),Lrr=r(fOe," \u2014 "),TU=n(fOe,"A",{href:!0});var XIt=s(TU);yrr=r(XIt,"LayoutLMForSequenceClassification"),XIt.forEach(t),xrr=r(fOe," (LayoutLM model)"),fOe.forEach(t),$rr=i(D),QF=n(D,"LI",{});var gOe=s(QF);uFe=n(gOe,"STRONG",{});var zIt=s(uFe);krr=r(zIt,"layoutlmv2"),zIt.forEach(t),Srr=r(gOe," \u2014 "),MU=n(gOe,"A",{href:!0});var QIt=s(MU);Rrr=r(QIt,"LayoutLMv2ForSequenceClassification"),QIt.forEach(t),Prr=r(gOe," (LayoutLMv2 model)"),gOe.forEach(t),Brr=i(D),WF=n(D,"LI",{});var hOe=s(WF);pFe=n(hOe,"STRONG",{});var WIt=s(pFe);Irr=r(WIt,"layoutlmv3"),WIt.forEach(t),Nrr=r(hOe," \u2014 "),EU=n(hOe,"A",{href:!0});var UIt=s(EU);qrr=r(UIt,"LayoutLMv3ForSequenceClassification"),UIt.forEach(t),jrr=r(hOe," (LayoutLMv3 model)"),hOe.forEach(t),Drr=i(D),UF=n(D,"LI",{});var uOe=s(UF);_Fe=n(uOe,"STRONG",{});var HIt=s(_Fe);Grr=r(HIt,"led"),HIt.forEach(t),Orr=r(uOe," \u2014 "),CU=n(uOe,"A",{href:!0});var JIt=s(CU);Vrr=r(JIt,"LEDForSequenceClassification"),JIt.forEach(t),Xrr=r(uOe," (LED model)"),uOe.forEach(t),zrr=i(D),HF=n(D,"LI",{});var pOe=s(HF);bFe=n(pOe,"STRONG",{});var YIt=s(bFe);Qrr=r(YIt,"longformer"),YIt.forEach(t),Wrr=r(pOe," \u2014 "),wU=n(pOe,"A",{href:!0});var KIt=s(wU);Urr=r(KIt,"LongformerForSequenceClassification"),KIt.forEach(t),Hrr=r(pOe," (Longformer model)"),pOe.forEach(t),Jrr=i(D),JF=n(D,"LI",{});var _Oe=s(JF);vFe=n(_Oe,"STRONG",{});var ZIt=s(vFe);Yrr=r(ZIt,"luke"),ZIt.forEach(t),Krr=r(_Oe," \u2014 "),AU=n(_Oe,"A",{href:!0});var eNt=s(AU);Zrr=r(eNt,"LukeForSequenceClassification"),eNt.forEach(t),etr=r(_Oe," (LUKE model)"),_Oe.forEach(t),otr=i(D),YF=n(D,"LI",{});var bOe=s(YF);FFe=n(bOe,"STRONG",{});var oNt=s(FFe);rtr=r(oNt,"mbart"),oNt.forEach(t),ttr=r(bOe," \u2014 "),LU=n(bOe,"A",{href:!0});var rNt=s(LU);atr=r(rNt,"MBartForSequenceClassification"),rNt.forEach(t),ntr=r(bOe," (mBART model)"),bOe.forEach(t),str=i(D),KF=n(D,"LI",{});var vOe=s(KF);TFe=n(vOe,"STRONG",{});var tNt=s(TFe);ltr=r(tNt,"megatron-bert"),tNt.forEach(t),itr=r(vOe," \u2014 "),yU=n(vOe,"A",{href:!0});var aNt=s(yU);dtr=r(aNt,"MegatronBertForSequenceClassification"),aNt.forEach(t),ctr=r(vOe," (Megatron-BERT model)"),vOe.forEach(t),mtr=i(D),ZF=n(D,"LI",{});var FOe=s(ZF);MFe=n(FOe,"STRONG",{});var nNt=s(MFe);ftr=r(nNt,"mobilebert"),nNt.forEach(t),gtr=r(FOe," \u2014 "),xU=n(FOe,"A",{href:!0});var sNt=s(xU);htr=r(sNt,"MobileBertForSequenceClassification"),sNt.forEach(t),utr=r(FOe," (MobileBERT model)"),FOe.forEach(t),ptr=i(D),eT=n(D,"LI",{});var TOe=s(eT);EFe=n(TOe,"STRONG",{});var lNt=s(EFe);_tr=r(lNt,"mpnet"),lNt.forEach(t),btr=r(TOe," \u2014 "),$U=n(TOe,"A",{href:!0});var iNt=s($U);vtr=r(iNt,"MPNetForSequenceClassification"),iNt.forEach(t),Ftr=r(TOe," (MPNet model)"),TOe.forEach(t),Ttr=i(D),oT=n(D,"LI",{});var MOe=s(oT);CFe=n(MOe,"STRONG",{});var dNt=s(CFe);Mtr=r(dNt,"mvp"),dNt.forEach(t),Etr=r(MOe," \u2014 "),kU=n(MOe,"A",{href:!0});var cNt=s(kU);Ctr=r(cNt,"MvpForSequenceClassification"),cNt.forEach(t),wtr=r(MOe," (MVP model)"),MOe.forEach(t),Atr=i(D),rT=n(D,"LI",{});var EOe=s(rT);wFe=n(EOe,"STRONG",{});var mNt=s(wFe);Ltr=r(mNt,"nezha"),mNt.forEach(t),ytr=r(EOe," \u2014 "),SU=n(EOe,"A",{href:!0});var fNt=s(SU);xtr=r(fNt,"NezhaForSequenceClassification"),fNt.forEach(t),$tr=r(EOe," (Nezha model)"),EOe.forEach(t),ktr=i(D),tT=n(D,"LI",{});var COe=s(tT);AFe=n(COe,"STRONG",{});var gNt=s(AFe);Str=r(gNt,"nystromformer"),gNt.forEach(t),Rtr=r(COe," \u2014 "),RU=n(COe,"A",{href:!0});var hNt=s(RU);Ptr=r(hNt,"NystromformerForSequenceClassification"),hNt.forEach(t),Btr=r(COe," (Nystr\xF6mformer model)"),COe.forEach(t),Itr=i(D),aT=n(D,"LI",{});var wOe=s(aT);LFe=n(wOe,"STRONG",{});var uNt=s(LFe);Ntr=r(uNt,"openai-gpt"),uNt.forEach(t),qtr=r(wOe," \u2014 "),PU=n(wOe,"A",{href:!0});var pNt=s(PU);jtr=r(pNt,"OpenAIGPTForSequenceClassification"),pNt.forEach(t),Dtr=r(wOe," (OpenAI GPT model)"),wOe.forEach(t),Gtr=i(D),nT=n(D,"LI",{});var AOe=s(nT);yFe=n(AOe,"STRONG",{});var _Nt=s(yFe);Otr=r(_Nt,"opt"),_Nt.forEach(t),Vtr=r(AOe," \u2014 "),BU=n(AOe,"A",{href:!0});var bNt=s(BU);Xtr=r(bNt,"OPTForSequenceClassification"),bNt.forEach(t),ztr=r(AOe," (OPT model)"),AOe.forEach(t),Qtr=i(D),sT=n(D,"LI",{});var LOe=s(sT);xFe=n(LOe,"STRONG",{});var vNt=s(xFe);Wtr=r(vNt,"perceiver"),vNt.forEach(t),Utr=r(LOe," \u2014 "),IU=n(LOe,"A",{href:!0});var FNt=s(IU);Htr=r(FNt,"PerceiverForSequenceClassification"),FNt.forEach(t),Jtr=r(LOe," (Perceiver model)"),LOe.forEach(t),Ytr=i(D),lT=n(D,"LI",{});var yOe=s(lT);$Fe=n(yOe,"STRONG",{});var TNt=s($Fe);Ktr=r(TNt,"plbart"),TNt.forEach(t),Ztr=r(yOe," \u2014 "),NU=n(yOe,"A",{href:!0});var MNt=s(NU);ear=r(MNt,"PLBartForSequenceClassification"),MNt.forEach(t),oar=r(yOe," (PLBart model)"),yOe.forEach(t),rar=i(D),iT=n(D,"LI",{});var xOe=s(iT);kFe=n(xOe,"STRONG",{});var ENt=s(kFe);tar=r(ENt,"qdqbert"),ENt.forEach(t),aar=r(xOe," \u2014 "),qU=n(xOe,"A",{href:!0});var CNt=s(qU);nar=r(CNt,"QDQBertForSequenceClassification"),CNt.forEach(t),sar=r(xOe," (QDQBert model)"),xOe.forEach(t),lar=i(D),dT=n(D,"LI",{});var $Oe=s(dT);SFe=n($Oe,"STRONG",{});var wNt=s(SFe);iar=r(wNt,"reformer"),wNt.forEach(t),dar=r($Oe," \u2014 "),jU=n($Oe,"A",{href:!0});var ANt=s(jU);car=r(ANt,"ReformerForSequenceClassification"),ANt.forEach(t),mar=r($Oe," (Reformer model)"),$Oe.forEach(t),far=i(D),cT=n(D,"LI",{});var kOe=s(cT);RFe=n(kOe,"STRONG",{});var LNt=s(RFe);gar=r(LNt,"rembert"),LNt.forEach(t),har=r(kOe," \u2014 "),DU=n(kOe,"A",{href:!0});var yNt=s(DU);uar=r(yNt,"RemBertForSequenceClassification"),yNt.forEach(t),par=r(kOe," (RemBERT model)"),kOe.forEach(t),_ar=i(D),mT=n(D,"LI",{});var SOe=s(mT);PFe=n(SOe,"STRONG",{});var xNt=s(PFe);bar=r(xNt,"roberta"),xNt.forEach(t),Far=r(SOe," \u2014 "),GU=n(SOe,"A",{href:!0});var $Nt=s(GU);Tar=r($Nt,"RobertaForSequenceClassification"),$Nt.forEach(t),Mar=r(SOe," (RoBERTa model)"),SOe.forEach(t),Ear=i(D),fT=n(D,"LI",{});var ROe=s(fT);BFe=n(ROe,"STRONG",{});var kNt=s(BFe);Car=r(kNt,"roformer"),kNt.forEach(t),war=r(ROe," \u2014 "),OU=n(ROe,"A",{href:!0});var SNt=s(OU);Aar=r(SNt,"RoFormerForSequenceClassification"),SNt.forEach(t),Lar=r(ROe," (RoFormer model)"),ROe.forEach(t),yar=i(D),gT=n(D,"LI",{});var POe=s(gT);IFe=n(POe,"STRONG",{});var RNt=s(IFe);xar=r(RNt,"squeezebert"),RNt.forEach(t),$ar=r(POe," \u2014 "),VU=n(POe,"A",{href:!0});var PNt=s(VU);kar=r(PNt,"SqueezeBertForSequenceClassification"),PNt.forEach(t),Sar=r(POe," (SqueezeBERT model)"),POe.forEach(t),Rar=i(D),hT=n(D,"LI",{});var BOe=s(hT);NFe=n(BOe,"STRONG",{});var BNt=s(NFe);Par=r(BNt,"tapas"),BNt.forEach(t),Bar=r(BOe," \u2014 "),XU=n(BOe,"A",{href:!0});var INt=s(XU);Iar=r(INt,"TapasForSequenceClassification"),INt.forEach(t),Nar=r(BOe," (TAPAS model)"),BOe.forEach(t),qar=i(D),uT=n(D,"LI",{});var IOe=s(uT);qFe=n(IOe,"STRONG",{});var NNt=s(qFe);jar=r(NNt,"transfo-xl"),NNt.forEach(t),Dar=r(IOe," \u2014 "),zU=n(IOe,"A",{href:!0});var qNt=s(zU);Gar=r(qNt,"TransfoXLForSequenceClassification"),qNt.forEach(t),Oar=r(IOe," (Transformer-XL model)"),IOe.forEach(t),Var=i(D),pT=n(D,"LI",{});var NOe=s(pT);jFe=n(NOe,"STRONG",{});var jNt=s(jFe);Xar=r(jNt,"xlm"),jNt.forEach(t),zar=r(NOe," \u2014 "),QU=n(NOe,"A",{href:!0});var DNt=s(QU);Qar=r(DNt,"XLMForSequenceClassification"),DNt.forEach(t),War=r(NOe," (XLM model)"),NOe.forEach(t),Uar=i(D),_T=n(D,"LI",{});var qOe=s(_T);DFe=n(qOe,"STRONG",{});var GNt=s(DFe);Har=r(GNt,"xlm-roberta"),GNt.forEach(t),Jar=r(qOe," \u2014 "),WU=n(qOe,"A",{href:!0});var ONt=s(WU);Yar=r(ONt,"XLMRobertaForSequenceClassification"),ONt.forEach(t),Kar=r(qOe," (XLM-RoBERTa model)"),qOe.forEach(t),Zar=i(D),bT=n(D,"LI",{});var jOe=s(bT);GFe=n(jOe,"STRONG",{});var VNt=s(GFe);enr=r(VNt,"xlm-roberta-xl"),VNt.forEach(t),onr=r(jOe," \u2014 "),UU=n(jOe,"A",{href:!0});var XNt=s(UU);rnr=r(XNt,"XLMRobertaXLForSequenceClassification"),XNt.forEach(t),tnr=r(jOe," (XLM-RoBERTa-XL model)"),jOe.forEach(t),anr=i(D),vT=n(D,"LI",{});var DOe=s(vT);OFe=n(DOe,"STRONG",{});var zNt=s(OFe);nnr=r(zNt,"xlnet"),zNt.forEach(t),snr=r(DOe," \u2014 "),HU=n(DOe,"A",{href:!0});var QNt=s(HU);lnr=r(QNt,"XLNetForSequenceClassification"),QNt.forEach(t),inr=r(DOe," (XLNet model)"),DOe.forEach(t),dnr=i(D),FT=n(D,"LI",{});var GOe=s(FT);VFe=n(GOe,"STRONG",{});var WNt=s(VFe);cnr=r(WNt,"yoso"),WNt.forEach(t),mnr=r(GOe," \u2014 "),JU=n(GOe,"A",{href:!0});var UNt=s(JU);fnr=r(UNt,"YosoForSequenceClassification"),UNt.forEach(t),gnr=r(GOe," (YOSO model)"),GOe.forEach(t),D.forEach(t),hnr=i(wa),TT=n(wa,"P",{});var OOe=s(TT);unr=r(OOe,"The model is set in evaluation mode by default using "),XFe=n(OOe,"CODE",{});var HNt=s(XFe);pnr=r(HNt,"model.eval()"),HNt.forEach(t),_nr=r(OOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=n(OOe,"CODE",{});var JNt=s(zFe);bnr=r(JNt,"model.train()"),JNt.forEach(t),OOe.forEach(t),vnr=i(wa),T(MT.$$.fragment,wa),wa.forEach(t),kl.forEach(t),_Ze=i(m),Bd=n(m,"H2",{class:!0});var koo=s(Bd);ET=n(koo,"A",{id:!0,class:!0,href:!0});var YNt=s(ET);QFe=n(YNt,"SPAN",{});var KNt=s(QFe);T(Xx.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),Fnr=i(koo),WFe=n(koo,"SPAN",{});var ZNt=s(WFe);Tnr=r(ZNt,"AutoModelForMultipleChoice"),ZNt.forEach(t),koo.forEach(t),bZe=i(m),Do=n(m,"DIV",{class:!0});var Sl=s(Do);T(zx.$$.fragment,Sl),Mnr=i(Sl),Id=n(Sl,"P",{});var Dle=s(Id);Enr=r(Dle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YU=n(Dle,"A",{href:!0});var eqt=s(YU);Cnr=r(eqt,"from_pretrained()"),eqt.forEach(t),wnr=r(Dle," class method or the "),KU=n(Dle,"A",{href:!0});var oqt=s(KU);Anr=r(oqt,"from_config()"),oqt.forEach(t),Lnr=r(Dle,` class
method.`),Dle.forEach(t),ynr=i(Sl),Qx=n(Sl,"P",{});var Soo=s(Qx);xnr=r(Soo,"This class cannot be instantiated directly using "),UFe=n(Soo,"CODE",{});var rqt=s(UFe);$nr=r(rqt,"__init__()"),rqt.forEach(t),knr=r(Soo," (throws an error)."),Soo.forEach(t),Snr=i(Sl),Et=n(Sl,"DIV",{class:!0});var Uy=s(Et);T(Wx.$$.fragment,Uy),Rnr=i(Uy),HFe=n(Uy,"P",{});var tqt=s(HFe);Pnr=r(tqt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tqt.forEach(t),Bnr=i(Uy),Nd=n(Uy,"P",{});var Gle=s(Nd);Inr=r(Gle,`Note:
Loading a model from its configuration file does `),JFe=n(Gle,"STRONG",{});var aqt=s(JFe);Nnr=r(aqt,"not"),aqt.forEach(t),qnr=r(Gle,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(Gle,"A",{href:!0});var nqt=s(ZU);jnr=r(nqt,"from_pretrained()"),nqt.forEach(t),Dnr=r(Gle," to load the model weights."),Gle.forEach(t),Gnr=i(Uy),T(CT.$$.fragment,Uy),Uy.forEach(t),Onr=i(Sl),no=n(Sl,"DIV",{class:!0});var Aa=s(no);T(Ux.$$.fragment,Aa),Vnr=i(Aa),YFe=n(Aa,"P",{});var sqt=s(YFe);Xnr=r(sqt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sqt.forEach(t),znr=i(Aa),rn=n(Aa,"P",{});var Hy=s(rn);Qnr=r(Hy,"The model class to instantiate is selected based on the "),KFe=n(Hy,"CODE",{});var lqt=s(KFe);Wnr=r(lqt,"model_type"),lqt.forEach(t),Unr=r(Hy,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(Hy,"CODE",{});var iqt=s(ZFe);Hnr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),Jnr=r(Hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(Hy,"CODE",{});var dqt=s(eTe);Ynr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),Knr=r(Hy,":"),Hy.forEach(t),Znr=i(Aa),Z=n(Aa,"UL",{});var ee=s(Z);wT=n(ee,"LI",{});var VOe=s(wT);oTe=n(VOe,"STRONG",{});var cqt=s(oTe);esr=r(cqt,"albert"),cqt.forEach(t),osr=r(VOe," \u2014 "),eH=n(VOe,"A",{href:!0});var mqt=s(eH);rsr=r(mqt,"AlbertForMultipleChoice"),mqt.forEach(t),tsr=r(VOe," (ALBERT model)"),VOe.forEach(t),asr=i(ee),AT=n(ee,"LI",{});var XOe=s(AT);rTe=n(XOe,"STRONG",{});var fqt=s(rTe);nsr=r(fqt,"bert"),fqt.forEach(t),ssr=r(XOe," \u2014 "),oH=n(XOe,"A",{href:!0});var gqt=s(oH);lsr=r(gqt,"BertForMultipleChoice"),gqt.forEach(t),isr=r(XOe," (BERT model)"),XOe.forEach(t),dsr=i(ee),LT=n(ee,"LI",{});var zOe=s(LT);tTe=n(zOe,"STRONG",{});var hqt=s(tTe);csr=r(hqt,"big_bird"),hqt.forEach(t),msr=r(zOe," \u2014 "),rH=n(zOe,"A",{href:!0});var uqt=s(rH);fsr=r(uqt,"BigBirdForMultipleChoice"),uqt.forEach(t),gsr=r(zOe," (BigBird model)"),zOe.forEach(t),hsr=i(ee),yT=n(ee,"LI",{});var QOe=s(yT);aTe=n(QOe,"STRONG",{});var pqt=s(aTe);usr=r(pqt,"camembert"),pqt.forEach(t),psr=r(QOe," \u2014 "),tH=n(QOe,"A",{href:!0});var _qt=s(tH);_sr=r(_qt,"CamembertForMultipleChoice"),_qt.forEach(t),bsr=r(QOe," (CamemBERT model)"),QOe.forEach(t),vsr=i(ee),xT=n(ee,"LI",{});var WOe=s(xT);nTe=n(WOe,"STRONG",{});var bqt=s(nTe);Fsr=r(bqt,"canine"),bqt.forEach(t),Tsr=r(WOe," \u2014 "),aH=n(WOe,"A",{href:!0});var vqt=s(aH);Msr=r(vqt,"CanineForMultipleChoice"),vqt.forEach(t),Esr=r(WOe," (CANINE model)"),WOe.forEach(t),Csr=i(ee),$T=n(ee,"LI",{});var UOe=s($T);sTe=n(UOe,"STRONG",{});var Fqt=s(sTe);wsr=r(Fqt,"convbert"),Fqt.forEach(t),Asr=r(UOe," \u2014 "),nH=n(UOe,"A",{href:!0});var Tqt=s(nH);Lsr=r(Tqt,"ConvBertForMultipleChoice"),Tqt.forEach(t),ysr=r(UOe," (ConvBERT model)"),UOe.forEach(t),xsr=i(ee),kT=n(ee,"LI",{});var HOe=s(kT);lTe=n(HOe,"STRONG",{});var Mqt=s(lTe);$sr=r(Mqt,"data2vec-text"),Mqt.forEach(t),ksr=r(HOe," \u2014 "),sH=n(HOe,"A",{href:!0});var Eqt=s(sH);Ssr=r(Eqt,"Data2VecTextForMultipleChoice"),Eqt.forEach(t),Rsr=r(HOe," (Data2VecText model)"),HOe.forEach(t),Psr=i(ee),ST=n(ee,"LI",{});var JOe=s(ST);iTe=n(JOe,"STRONG",{});var Cqt=s(iTe);Bsr=r(Cqt,"deberta-v2"),Cqt.forEach(t),Isr=r(JOe," \u2014 "),lH=n(JOe,"A",{href:!0});var wqt=s(lH);Nsr=r(wqt,"DebertaV2ForMultipleChoice"),wqt.forEach(t),qsr=r(JOe," (DeBERTa-v2 model)"),JOe.forEach(t),jsr=i(ee),RT=n(ee,"LI",{});var YOe=s(RT);dTe=n(YOe,"STRONG",{});var Aqt=s(dTe);Dsr=r(Aqt,"distilbert"),Aqt.forEach(t),Gsr=r(YOe," \u2014 "),iH=n(YOe,"A",{href:!0});var Lqt=s(iH);Osr=r(Lqt,"DistilBertForMultipleChoice"),Lqt.forEach(t),Vsr=r(YOe," (DistilBERT model)"),YOe.forEach(t),Xsr=i(ee),PT=n(ee,"LI",{});var KOe=s(PT);cTe=n(KOe,"STRONG",{});var yqt=s(cTe);zsr=r(yqt,"electra"),yqt.forEach(t),Qsr=r(KOe," \u2014 "),dH=n(KOe,"A",{href:!0});var xqt=s(dH);Wsr=r(xqt,"ElectraForMultipleChoice"),xqt.forEach(t),Usr=r(KOe," (ELECTRA model)"),KOe.forEach(t),Hsr=i(ee),BT=n(ee,"LI",{});var ZOe=s(BT);mTe=n(ZOe,"STRONG",{});var $qt=s(mTe);Jsr=r($qt,"ernie"),$qt.forEach(t),Ysr=r(ZOe," \u2014 "),cH=n(ZOe,"A",{href:!0});var kqt=s(cH);Ksr=r(kqt,"ErnieForMultipleChoice"),kqt.forEach(t),Zsr=r(ZOe," (ERNIE model)"),ZOe.forEach(t),elr=i(ee),IT=n(ee,"LI",{});var eVe=s(IT);fTe=n(eVe,"STRONG",{});var Sqt=s(fTe);olr=r(Sqt,"flaubert"),Sqt.forEach(t),rlr=r(eVe," \u2014 "),mH=n(eVe,"A",{href:!0});var Rqt=s(mH);tlr=r(Rqt,"FlaubertForMultipleChoice"),Rqt.forEach(t),alr=r(eVe," (FlauBERT model)"),eVe.forEach(t),nlr=i(ee),NT=n(ee,"LI",{});var oVe=s(NT);gTe=n(oVe,"STRONG",{});var Pqt=s(gTe);slr=r(Pqt,"fnet"),Pqt.forEach(t),llr=r(oVe," \u2014 "),fH=n(oVe,"A",{href:!0});var Bqt=s(fH);ilr=r(Bqt,"FNetForMultipleChoice"),Bqt.forEach(t),dlr=r(oVe," (FNet model)"),oVe.forEach(t),clr=i(ee),qT=n(ee,"LI",{});var rVe=s(qT);hTe=n(rVe,"STRONG",{});var Iqt=s(hTe);mlr=r(Iqt,"funnel"),Iqt.forEach(t),flr=r(rVe," \u2014 "),gH=n(rVe,"A",{href:!0});var Nqt=s(gH);glr=r(Nqt,"FunnelForMultipleChoice"),Nqt.forEach(t),hlr=r(rVe," (Funnel Transformer model)"),rVe.forEach(t),ulr=i(ee),jT=n(ee,"LI",{});var tVe=s(jT);uTe=n(tVe,"STRONG",{});var qqt=s(uTe);plr=r(qqt,"ibert"),qqt.forEach(t),_lr=r(tVe," \u2014 "),hH=n(tVe,"A",{href:!0});var jqt=s(hH);blr=r(jqt,"IBertForMultipleChoice"),jqt.forEach(t),vlr=r(tVe," (I-BERT model)"),tVe.forEach(t),Flr=i(ee),DT=n(ee,"LI",{});var aVe=s(DT);pTe=n(aVe,"STRONG",{});var Dqt=s(pTe);Tlr=r(Dqt,"longformer"),Dqt.forEach(t),Mlr=r(aVe," \u2014 "),uH=n(aVe,"A",{href:!0});var Gqt=s(uH);Elr=r(Gqt,"LongformerForMultipleChoice"),Gqt.forEach(t),Clr=r(aVe," (Longformer model)"),aVe.forEach(t),wlr=i(ee),GT=n(ee,"LI",{});var nVe=s(GT);_Te=n(nVe,"STRONG",{});var Oqt=s(_Te);Alr=r(Oqt,"luke"),Oqt.forEach(t),Llr=r(nVe," \u2014 "),pH=n(nVe,"A",{href:!0});var Vqt=s(pH);ylr=r(Vqt,"LukeForMultipleChoice"),Vqt.forEach(t),xlr=r(nVe," (LUKE model)"),nVe.forEach(t),$lr=i(ee),OT=n(ee,"LI",{});var sVe=s(OT);bTe=n(sVe,"STRONG",{});var Xqt=s(bTe);klr=r(Xqt,"megatron-bert"),Xqt.forEach(t),Slr=r(sVe," \u2014 "),_H=n(sVe,"A",{href:!0});var zqt=s(_H);Rlr=r(zqt,"MegatronBertForMultipleChoice"),zqt.forEach(t),Plr=r(sVe," (Megatron-BERT model)"),sVe.forEach(t),Blr=i(ee),VT=n(ee,"LI",{});var lVe=s(VT);vTe=n(lVe,"STRONG",{});var Qqt=s(vTe);Ilr=r(Qqt,"mobilebert"),Qqt.forEach(t),Nlr=r(lVe," \u2014 "),bH=n(lVe,"A",{href:!0});var Wqt=s(bH);qlr=r(Wqt,"MobileBertForMultipleChoice"),Wqt.forEach(t),jlr=r(lVe," (MobileBERT model)"),lVe.forEach(t),Dlr=i(ee),XT=n(ee,"LI",{});var iVe=s(XT);FTe=n(iVe,"STRONG",{});var Uqt=s(FTe);Glr=r(Uqt,"mpnet"),Uqt.forEach(t),Olr=r(iVe," \u2014 "),vH=n(iVe,"A",{href:!0});var Hqt=s(vH);Vlr=r(Hqt,"MPNetForMultipleChoice"),Hqt.forEach(t),Xlr=r(iVe," (MPNet model)"),iVe.forEach(t),zlr=i(ee),zT=n(ee,"LI",{});var dVe=s(zT);TTe=n(dVe,"STRONG",{});var Jqt=s(TTe);Qlr=r(Jqt,"nezha"),Jqt.forEach(t),Wlr=r(dVe," \u2014 "),FH=n(dVe,"A",{href:!0});var Yqt=s(FH);Ulr=r(Yqt,"NezhaForMultipleChoice"),Yqt.forEach(t),Hlr=r(dVe," (Nezha model)"),dVe.forEach(t),Jlr=i(ee),QT=n(ee,"LI",{});var cVe=s(QT);MTe=n(cVe,"STRONG",{});var Kqt=s(MTe);Ylr=r(Kqt,"nystromformer"),Kqt.forEach(t),Klr=r(cVe," \u2014 "),TH=n(cVe,"A",{href:!0});var Zqt=s(TH);Zlr=r(Zqt,"NystromformerForMultipleChoice"),Zqt.forEach(t),eir=r(cVe," (Nystr\xF6mformer model)"),cVe.forEach(t),oir=i(ee),WT=n(ee,"LI",{});var mVe=s(WT);ETe=n(mVe,"STRONG",{});var ejt=s(ETe);rir=r(ejt,"qdqbert"),ejt.forEach(t),tir=r(mVe," \u2014 "),MH=n(mVe,"A",{href:!0});var ojt=s(MH);air=r(ojt,"QDQBertForMultipleChoice"),ojt.forEach(t),nir=r(mVe," (QDQBert model)"),mVe.forEach(t),sir=i(ee),UT=n(ee,"LI",{});var fVe=s(UT);CTe=n(fVe,"STRONG",{});var rjt=s(CTe);lir=r(rjt,"rembert"),rjt.forEach(t),iir=r(fVe," \u2014 "),EH=n(fVe,"A",{href:!0});var tjt=s(EH);dir=r(tjt,"RemBertForMultipleChoice"),tjt.forEach(t),cir=r(fVe," (RemBERT model)"),fVe.forEach(t),mir=i(ee),HT=n(ee,"LI",{});var gVe=s(HT);wTe=n(gVe,"STRONG",{});var ajt=s(wTe);fir=r(ajt,"roberta"),ajt.forEach(t),gir=r(gVe," \u2014 "),CH=n(gVe,"A",{href:!0});var njt=s(CH);hir=r(njt,"RobertaForMultipleChoice"),njt.forEach(t),uir=r(gVe," (RoBERTa model)"),gVe.forEach(t),pir=i(ee),JT=n(ee,"LI",{});var hVe=s(JT);ATe=n(hVe,"STRONG",{});var sjt=s(ATe);_ir=r(sjt,"roformer"),sjt.forEach(t),bir=r(hVe," \u2014 "),wH=n(hVe,"A",{href:!0});var ljt=s(wH);vir=r(ljt,"RoFormerForMultipleChoice"),ljt.forEach(t),Fir=r(hVe," (RoFormer model)"),hVe.forEach(t),Tir=i(ee),YT=n(ee,"LI",{});var uVe=s(YT);LTe=n(uVe,"STRONG",{});var ijt=s(LTe);Mir=r(ijt,"squeezebert"),ijt.forEach(t),Eir=r(uVe," \u2014 "),AH=n(uVe,"A",{href:!0});var djt=s(AH);Cir=r(djt,"SqueezeBertForMultipleChoice"),djt.forEach(t),wir=r(uVe," (SqueezeBERT model)"),uVe.forEach(t),Air=i(ee),KT=n(ee,"LI",{});var pVe=s(KT);yTe=n(pVe,"STRONG",{});var cjt=s(yTe);Lir=r(cjt,"xlm"),cjt.forEach(t),yir=r(pVe," \u2014 "),LH=n(pVe,"A",{href:!0});var mjt=s(LH);xir=r(mjt,"XLMForMultipleChoice"),mjt.forEach(t),$ir=r(pVe," (XLM model)"),pVe.forEach(t),kir=i(ee),ZT=n(ee,"LI",{});var _Ve=s(ZT);xTe=n(_Ve,"STRONG",{});var fjt=s(xTe);Sir=r(fjt,"xlm-roberta"),fjt.forEach(t),Rir=r(_Ve," \u2014 "),yH=n(_Ve,"A",{href:!0});var gjt=s(yH);Pir=r(gjt,"XLMRobertaForMultipleChoice"),gjt.forEach(t),Bir=r(_Ve," (XLM-RoBERTa model)"),_Ve.forEach(t),Iir=i(ee),eM=n(ee,"LI",{});var bVe=s(eM);$Te=n(bVe,"STRONG",{});var hjt=s($Te);Nir=r(hjt,"xlm-roberta-xl"),hjt.forEach(t),qir=r(bVe," \u2014 "),xH=n(bVe,"A",{href:!0});var ujt=s(xH);jir=r(ujt,"XLMRobertaXLForMultipleChoice"),ujt.forEach(t),Dir=r(bVe," (XLM-RoBERTa-XL model)"),bVe.forEach(t),Gir=i(ee),oM=n(ee,"LI",{});var vVe=s(oM);kTe=n(vVe,"STRONG",{});var pjt=s(kTe);Oir=r(pjt,"xlnet"),pjt.forEach(t),Vir=r(vVe," \u2014 "),$H=n(vVe,"A",{href:!0});var _jt=s($H);Xir=r(_jt,"XLNetForMultipleChoice"),_jt.forEach(t),zir=r(vVe," (XLNet model)"),vVe.forEach(t),Qir=i(ee),rM=n(ee,"LI",{});var FVe=s(rM);STe=n(FVe,"STRONG",{});var bjt=s(STe);Wir=r(bjt,"yoso"),bjt.forEach(t),Uir=r(FVe," \u2014 "),kH=n(FVe,"A",{href:!0});var vjt=s(kH);Hir=r(vjt,"YosoForMultipleChoice"),vjt.forEach(t),Jir=r(FVe," (YOSO model)"),FVe.forEach(t),ee.forEach(t),Yir=i(Aa),tM=n(Aa,"P",{});var TVe=s(tM);Kir=r(TVe,"The model is set in evaluation mode by default using "),RTe=n(TVe,"CODE",{});var Fjt=s(RTe);Zir=r(Fjt,"model.eval()"),Fjt.forEach(t),edr=r(TVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=n(TVe,"CODE",{});var Tjt=s(PTe);odr=r(Tjt,"model.train()"),Tjt.forEach(t),TVe.forEach(t),rdr=i(Aa),T(aM.$$.fragment,Aa),Aa.forEach(t),Sl.forEach(t),vZe=i(m),qd=n(m,"H2",{class:!0});var Roo=s(qd);nM=n(Roo,"A",{id:!0,class:!0,href:!0});var Mjt=s(nM);BTe=n(Mjt,"SPAN",{});var Ejt=s(BTe);T(Hx.$$.fragment,Ejt),Ejt.forEach(t),Mjt.forEach(t),tdr=i(Roo),ITe=n(Roo,"SPAN",{});var Cjt=s(ITe);adr=r(Cjt,"AutoModelForNextSentencePrediction"),Cjt.forEach(t),Roo.forEach(t),FZe=i(m),Go=n(m,"DIV",{class:!0});var Rl=s(Go);T(Jx.$$.fragment,Rl),ndr=i(Rl),jd=n(Rl,"P",{});var Ole=s(jd);sdr=r(Ole,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SH=n(Ole,"A",{href:!0});var wjt=s(SH);ldr=r(wjt,"from_pretrained()"),wjt.forEach(t),idr=r(Ole," class method or the "),RH=n(Ole,"A",{href:!0});var Ajt=s(RH);ddr=r(Ajt,"from_config()"),Ajt.forEach(t),cdr=r(Ole,` class
method.`),Ole.forEach(t),mdr=i(Rl),Yx=n(Rl,"P",{});var Poo=s(Yx);fdr=r(Poo,"This class cannot be instantiated directly using "),NTe=n(Poo,"CODE",{});var Ljt=s(NTe);gdr=r(Ljt,"__init__()"),Ljt.forEach(t),hdr=r(Poo," (throws an error)."),Poo.forEach(t),udr=i(Rl),Ct=n(Rl,"DIV",{class:!0});var Jy=s(Ct);T(Kx.$$.fragment,Jy),pdr=i(Jy),qTe=n(Jy,"P",{});var yjt=s(qTe);_dr=r(yjt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yjt.forEach(t),bdr=i(Jy),Dd=n(Jy,"P",{});var Vle=s(Dd);vdr=r(Vle,`Note:
Loading a model from its configuration file does `),jTe=n(Vle,"STRONG",{});var xjt=s(jTe);Fdr=r(xjt,"not"),xjt.forEach(t),Tdr=r(Vle,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(Vle,"A",{href:!0});var $jt=s(PH);Mdr=r($jt,"from_pretrained()"),$jt.forEach(t),Edr=r(Vle," to load the model weights."),Vle.forEach(t),Cdr=i(Jy),T(sM.$$.fragment,Jy),Jy.forEach(t),wdr=i(Rl),so=n(Rl,"DIV",{class:!0});var La=s(so);T(Zx.$$.fragment,La),Adr=i(La),DTe=n(La,"P",{});var kjt=s(DTe);Ldr=r(kjt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kjt.forEach(t),ydr=i(La),tn=n(La,"P",{});var Yy=s(tn);xdr=r(Yy,"The model class to instantiate is selected based on the "),GTe=n(Yy,"CODE",{});var Sjt=s(GTe);$dr=r(Sjt,"model_type"),Sjt.forEach(t),kdr=r(Yy,` property of the config object (either
passed as an argument or loaded from `),OTe=n(Yy,"CODE",{});var Rjt=s(OTe);Sdr=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),Rdr=r(Yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(Yy,"CODE",{});var Pjt=s(VTe);Pdr=r(Pjt,"pretrained_model_name_or_path"),Pjt.forEach(t),Bdr=r(Yy,":"),Yy.forEach(t),Idr=i(La),Ue=n(La,"UL",{});var ct=s(Ue);lM=n(ct,"LI",{});var MVe=s(lM);XTe=n(MVe,"STRONG",{});var Bjt=s(XTe);Ndr=r(Bjt,"bert"),Bjt.forEach(t),qdr=r(MVe," \u2014 "),BH=n(MVe,"A",{href:!0});var Ijt=s(BH);jdr=r(Ijt,"BertForNextSentencePrediction"),Ijt.forEach(t),Ddr=r(MVe," (BERT model)"),MVe.forEach(t),Gdr=i(ct),iM=n(ct,"LI",{});var EVe=s(iM);zTe=n(EVe,"STRONG",{});var Njt=s(zTe);Odr=r(Njt,"ernie"),Njt.forEach(t),Vdr=r(EVe," \u2014 "),IH=n(EVe,"A",{href:!0});var qjt=s(IH);Xdr=r(qjt,"ErnieForNextSentencePrediction"),qjt.forEach(t),zdr=r(EVe," (ERNIE model)"),EVe.forEach(t),Qdr=i(ct),dM=n(ct,"LI",{});var CVe=s(dM);QTe=n(CVe,"STRONG",{});var jjt=s(QTe);Wdr=r(jjt,"fnet"),jjt.forEach(t),Udr=r(CVe," \u2014 "),NH=n(CVe,"A",{href:!0});var Djt=s(NH);Hdr=r(Djt,"FNetForNextSentencePrediction"),Djt.forEach(t),Jdr=r(CVe," (FNet model)"),CVe.forEach(t),Ydr=i(ct),cM=n(ct,"LI",{});var wVe=s(cM);WTe=n(wVe,"STRONG",{});var Gjt=s(WTe);Kdr=r(Gjt,"megatron-bert"),Gjt.forEach(t),Zdr=r(wVe," \u2014 "),qH=n(wVe,"A",{href:!0});var Ojt=s(qH);ecr=r(Ojt,"MegatronBertForNextSentencePrediction"),Ojt.forEach(t),ocr=r(wVe," (Megatron-BERT model)"),wVe.forEach(t),rcr=i(ct),mM=n(ct,"LI",{});var AVe=s(mM);UTe=n(AVe,"STRONG",{});var Vjt=s(UTe);tcr=r(Vjt,"mobilebert"),Vjt.forEach(t),acr=r(AVe," \u2014 "),jH=n(AVe,"A",{href:!0});var Xjt=s(jH);ncr=r(Xjt,"MobileBertForNextSentencePrediction"),Xjt.forEach(t),scr=r(AVe," (MobileBERT model)"),AVe.forEach(t),lcr=i(ct),fM=n(ct,"LI",{});var LVe=s(fM);HTe=n(LVe,"STRONG",{});var zjt=s(HTe);icr=r(zjt,"nezha"),zjt.forEach(t),dcr=r(LVe," \u2014 "),DH=n(LVe,"A",{href:!0});var Qjt=s(DH);ccr=r(Qjt,"NezhaForNextSentencePrediction"),Qjt.forEach(t),mcr=r(LVe," (Nezha model)"),LVe.forEach(t),fcr=i(ct),gM=n(ct,"LI",{});var yVe=s(gM);JTe=n(yVe,"STRONG",{});var Wjt=s(JTe);gcr=r(Wjt,"qdqbert"),Wjt.forEach(t),hcr=r(yVe," \u2014 "),GH=n(yVe,"A",{href:!0});var Ujt=s(GH);ucr=r(Ujt,"QDQBertForNextSentencePrediction"),Ujt.forEach(t),pcr=r(yVe," (QDQBert model)"),yVe.forEach(t),ct.forEach(t),_cr=i(La),hM=n(La,"P",{});var xVe=s(hM);bcr=r(xVe,"The model is set in evaluation mode by default using "),YTe=n(xVe,"CODE",{});var Hjt=s(YTe);vcr=r(Hjt,"model.eval()"),Hjt.forEach(t),Fcr=r(xVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KTe=n(xVe,"CODE",{});var Jjt=s(KTe);Tcr=r(Jjt,"model.train()"),Jjt.forEach(t),xVe.forEach(t),Mcr=i(La),T(uM.$$.fragment,La),La.forEach(t),Rl.forEach(t),TZe=i(m),Gd=n(m,"H2",{class:!0});var Boo=s(Gd);pM=n(Boo,"A",{id:!0,class:!0,href:!0});var Yjt=s(pM);ZTe=n(Yjt,"SPAN",{});var Kjt=s(ZTe);T(e$.$$.fragment,Kjt),Kjt.forEach(t),Yjt.forEach(t),Ecr=i(Boo),eMe=n(Boo,"SPAN",{});var Zjt=s(eMe);Ccr=r(Zjt,"AutoModelForTokenClassification"),Zjt.forEach(t),Boo.forEach(t),MZe=i(m),Oo=n(m,"DIV",{class:!0});var Pl=s(Oo);T(o$.$$.fragment,Pl),wcr=i(Pl),Od=n(Pl,"P",{});var Xle=s(Od);Acr=r(Xle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=n(Xle,"A",{href:!0});var eDt=s(OH);Lcr=r(eDt,"from_pretrained()"),eDt.forEach(t),ycr=r(Xle," class method or the "),VH=n(Xle,"A",{href:!0});var oDt=s(VH);xcr=r(oDt,"from_config()"),oDt.forEach(t),$cr=r(Xle,` class
method.`),Xle.forEach(t),kcr=i(Pl),r$=n(Pl,"P",{});var Ioo=s(r$);Scr=r(Ioo,"This class cannot be instantiated directly using "),oMe=n(Ioo,"CODE",{});var rDt=s(oMe);Rcr=r(rDt,"__init__()"),rDt.forEach(t),Pcr=r(Ioo," (throws an error)."),Ioo.forEach(t),Bcr=i(Pl),wt=n(Pl,"DIV",{class:!0});var Ky=s(wt);T(t$.$$.fragment,Ky),Icr=i(Ky),rMe=n(Ky,"P",{});var tDt=s(rMe);Ncr=r(tDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tDt.forEach(t),qcr=i(Ky),Vd=n(Ky,"P",{});var zle=s(Vd);jcr=r(zle,`Note:
Loading a model from its configuration file does `),tMe=n(zle,"STRONG",{});var aDt=s(tMe);Dcr=r(aDt,"not"),aDt.forEach(t),Gcr=r(zle,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(zle,"A",{href:!0});var nDt=s(XH);Ocr=r(nDt,"from_pretrained()"),nDt.forEach(t),Vcr=r(zle," to load the model weights."),zle.forEach(t),Xcr=i(Ky),T(_M.$$.fragment,Ky),Ky.forEach(t),zcr=i(Pl),lo=n(Pl,"DIV",{class:!0});var ya=s(lo);T(a$.$$.fragment,ya),Qcr=i(ya),aMe=n(ya,"P",{});var sDt=s(aMe);Wcr=r(sDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sDt.forEach(t),Ucr=i(ya),an=n(ya,"P",{});var Zy=s(an);Hcr=r(Zy,"The model class to instantiate is selected based on the "),nMe=n(Zy,"CODE",{});var lDt=s(nMe);Jcr=r(lDt,"model_type"),lDt.forEach(t),Ycr=r(Zy,` property of the config object (either
passed as an argument or loaded from `),sMe=n(Zy,"CODE",{});var iDt=s(sMe);Kcr=r(iDt,"pretrained_model_name_or_path"),iDt.forEach(t),Zcr=r(Zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(Zy,"CODE",{});var dDt=s(lMe);emr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),omr=r(Zy,":"),Zy.forEach(t),rmr=i(ya),J=n(ya,"UL",{});var K=s(J);bM=n(K,"LI",{});var $Ve=s(bM);iMe=n($Ve,"STRONG",{});var cDt=s(iMe);tmr=r(cDt,"albert"),cDt.forEach(t),amr=r($Ve," \u2014 "),zH=n($Ve,"A",{href:!0});var mDt=s(zH);nmr=r(mDt,"AlbertForTokenClassification"),mDt.forEach(t),smr=r($Ve," (ALBERT model)"),$Ve.forEach(t),lmr=i(K),vM=n(K,"LI",{});var kVe=s(vM);dMe=n(kVe,"STRONG",{});var fDt=s(dMe);imr=r(fDt,"bert"),fDt.forEach(t),dmr=r(kVe," \u2014 "),QH=n(kVe,"A",{href:!0});var gDt=s(QH);cmr=r(gDt,"BertForTokenClassification"),gDt.forEach(t),mmr=r(kVe," (BERT model)"),kVe.forEach(t),fmr=i(K),FM=n(K,"LI",{});var SVe=s(FM);cMe=n(SVe,"STRONG",{});var hDt=s(cMe);gmr=r(hDt,"big_bird"),hDt.forEach(t),hmr=r(SVe," \u2014 "),WH=n(SVe,"A",{href:!0});var uDt=s(WH);umr=r(uDt,"BigBirdForTokenClassification"),uDt.forEach(t),pmr=r(SVe," (BigBird model)"),SVe.forEach(t),_mr=i(K),TM=n(K,"LI",{});var RVe=s(TM);mMe=n(RVe,"STRONG",{});var pDt=s(mMe);bmr=r(pDt,"bloom"),pDt.forEach(t),vmr=r(RVe," \u2014 "),UH=n(RVe,"A",{href:!0});var _Dt=s(UH);Fmr=r(_Dt,"BloomForTokenClassification"),_Dt.forEach(t),Tmr=r(RVe," (BLOOM model)"),RVe.forEach(t),Mmr=i(K),MM=n(K,"LI",{});var PVe=s(MM);fMe=n(PVe,"STRONG",{});var bDt=s(fMe);Emr=r(bDt,"camembert"),bDt.forEach(t),Cmr=r(PVe," \u2014 "),HH=n(PVe,"A",{href:!0});var vDt=s(HH);wmr=r(vDt,"CamembertForTokenClassification"),vDt.forEach(t),Amr=r(PVe," (CamemBERT model)"),PVe.forEach(t),Lmr=i(K),EM=n(K,"LI",{});var BVe=s(EM);gMe=n(BVe,"STRONG",{});var FDt=s(gMe);ymr=r(FDt,"canine"),FDt.forEach(t),xmr=r(BVe," \u2014 "),JH=n(BVe,"A",{href:!0});var TDt=s(JH);$mr=r(TDt,"CanineForTokenClassification"),TDt.forEach(t),kmr=r(BVe," (CANINE model)"),BVe.forEach(t),Smr=i(K),CM=n(K,"LI",{});var IVe=s(CM);hMe=n(IVe,"STRONG",{});var MDt=s(hMe);Rmr=r(MDt,"convbert"),MDt.forEach(t),Pmr=r(IVe," \u2014 "),YH=n(IVe,"A",{href:!0});var EDt=s(YH);Bmr=r(EDt,"ConvBertForTokenClassification"),EDt.forEach(t),Imr=r(IVe," (ConvBERT model)"),IVe.forEach(t),Nmr=i(K),wM=n(K,"LI",{});var NVe=s(wM);uMe=n(NVe,"STRONG",{});var CDt=s(uMe);qmr=r(CDt,"data2vec-text"),CDt.forEach(t),jmr=r(NVe," \u2014 "),KH=n(NVe,"A",{href:!0});var wDt=s(KH);Dmr=r(wDt,"Data2VecTextForTokenClassification"),wDt.forEach(t),Gmr=r(NVe," (Data2VecText model)"),NVe.forEach(t),Omr=i(K),AM=n(K,"LI",{});var qVe=s(AM);pMe=n(qVe,"STRONG",{});var ADt=s(pMe);Vmr=r(ADt,"deberta"),ADt.forEach(t),Xmr=r(qVe," \u2014 "),ZH=n(qVe,"A",{href:!0});var LDt=s(ZH);zmr=r(LDt,"DebertaForTokenClassification"),LDt.forEach(t),Qmr=r(qVe," (DeBERTa model)"),qVe.forEach(t),Wmr=i(K),LM=n(K,"LI",{});var jVe=s(LM);_Me=n(jVe,"STRONG",{});var yDt=s(_Me);Umr=r(yDt,"deberta-v2"),yDt.forEach(t),Hmr=r(jVe," \u2014 "),eJ=n(jVe,"A",{href:!0});var xDt=s(eJ);Jmr=r(xDt,"DebertaV2ForTokenClassification"),xDt.forEach(t),Ymr=r(jVe," (DeBERTa-v2 model)"),jVe.forEach(t),Kmr=i(K),yM=n(K,"LI",{});var DVe=s(yM);bMe=n(DVe,"STRONG",{});var $Dt=s(bMe);Zmr=r($Dt,"distilbert"),$Dt.forEach(t),efr=r(DVe," \u2014 "),oJ=n(DVe,"A",{href:!0});var kDt=s(oJ);ofr=r(kDt,"DistilBertForTokenClassification"),kDt.forEach(t),rfr=r(DVe," (DistilBERT model)"),DVe.forEach(t),tfr=i(K),xM=n(K,"LI",{});var GVe=s(xM);vMe=n(GVe,"STRONG",{});var SDt=s(vMe);afr=r(SDt,"electra"),SDt.forEach(t),nfr=r(GVe," \u2014 "),rJ=n(GVe,"A",{href:!0});var RDt=s(rJ);sfr=r(RDt,"ElectraForTokenClassification"),RDt.forEach(t),lfr=r(GVe," (ELECTRA model)"),GVe.forEach(t),ifr=i(K),$M=n(K,"LI",{});var OVe=s($M);FMe=n(OVe,"STRONG",{});var PDt=s(FMe);dfr=r(PDt,"ernie"),PDt.forEach(t),cfr=r(OVe," \u2014 "),tJ=n(OVe,"A",{href:!0});var BDt=s(tJ);mfr=r(BDt,"ErnieForTokenClassification"),BDt.forEach(t),ffr=r(OVe," (ERNIE model)"),OVe.forEach(t),gfr=i(K),kM=n(K,"LI",{});var VVe=s(kM);TMe=n(VVe,"STRONG",{});var IDt=s(TMe);hfr=r(IDt,"flaubert"),IDt.forEach(t),ufr=r(VVe," \u2014 "),aJ=n(VVe,"A",{href:!0});var NDt=s(aJ);pfr=r(NDt,"FlaubertForTokenClassification"),NDt.forEach(t),_fr=r(VVe," (FlauBERT model)"),VVe.forEach(t),bfr=i(K),SM=n(K,"LI",{});var XVe=s(SM);MMe=n(XVe,"STRONG",{});var qDt=s(MMe);vfr=r(qDt,"fnet"),qDt.forEach(t),Ffr=r(XVe," \u2014 "),nJ=n(XVe,"A",{href:!0});var jDt=s(nJ);Tfr=r(jDt,"FNetForTokenClassification"),jDt.forEach(t),Mfr=r(XVe," (FNet model)"),XVe.forEach(t),Efr=i(K),RM=n(K,"LI",{});var zVe=s(RM);EMe=n(zVe,"STRONG",{});var DDt=s(EMe);Cfr=r(DDt,"funnel"),DDt.forEach(t),wfr=r(zVe," \u2014 "),sJ=n(zVe,"A",{href:!0});var GDt=s(sJ);Afr=r(GDt,"FunnelForTokenClassification"),GDt.forEach(t),Lfr=r(zVe," (Funnel Transformer model)"),zVe.forEach(t),yfr=i(K),PM=n(K,"LI",{});var QVe=s(PM);CMe=n(QVe,"STRONG",{});var ODt=s(CMe);xfr=r(ODt,"gpt2"),ODt.forEach(t),$fr=r(QVe," \u2014 "),lJ=n(QVe,"A",{href:!0});var VDt=s(lJ);kfr=r(VDt,"GPT2ForTokenClassification"),VDt.forEach(t),Sfr=r(QVe," (OpenAI GPT-2 model)"),QVe.forEach(t),Rfr=i(K),BM=n(K,"LI",{});var WVe=s(BM);wMe=n(WVe,"STRONG",{});var XDt=s(wMe);Pfr=r(XDt,"ibert"),XDt.forEach(t),Bfr=r(WVe," \u2014 "),iJ=n(WVe,"A",{href:!0});var zDt=s(iJ);Ifr=r(zDt,"IBertForTokenClassification"),zDt.forEach(t),Nfr=r(WVe," (I-BERT model)"),WVe.forEach(t),qfr=i(K),IM=n(K,"LI",{});var UVe=s(IM);AMe=n(UVe,"STRONG",{});var QDt=s(AMe);jfr=r(QDt,"layoutlm"),QDt.forEach(t),Dfr=r(UVe," \u2014 "),dJ=n(UVe,"A",{href:!0});var WDt=s(dJ);Gfr=r(WDt,"LayoutLMForTokenClassification"),WDt.forEach(t),Ofr=r(UVe," (LayoutLM model)"),UVe.forEach(t),Vfr=i(K),NM=n(K,"LI",{});var HVe=s(NM);LMe=n(HVe,"STRONG",{});var UDt=s(LMe);Xfr=r(UDt,"layoutlmv2"),UDt.forEach(t),zfr=r(HVe," \u2014 "),cJ=n(HVe,"A",{href:!0});var HDt=s(cJ);Qfr=r(HDt,"LayoutLMv2ForTokenClassification"),HDt.forEach(t),Wfr=r(HVe," (LayoutLMv2 model)"),HVe.forEach(t),Ufr=i(K),qM=n(K,"LI",{});var JVe=s(qM);yMe=n(JVe,"STRONG",{});var JDt=s(yMe);Hfr=r(JDt,"layoutlmv3"),JDt.forEach(t),Jfr=r(JVe," \u2014 "),mJ=n(JVe,"A",{href:!0});var YDt=s(mJ);Yfr=r(YDt,"LayoutLMv3ForTokenClassification"),YDt.forEach(t),Kfr=r(JVe," (LayoutLMv3 model)"),JVe.forEach(t),Zfr=i(K),jM=n(K,"LI",{});var YVe=s(jM);xMe=n(YVe,"STRONG",{});var KDt=s(xMe);egr=r(KDt,"longformer"),KDt.forEach(t),ogr=r(YVe," \u2014 "),fJ=n(YVe,"A",{href:!0});var ZDt=s(fJ);rgr=r(ZDt,"LongformerForTokenClassification"),ZDt.forEach(t),tgr=r(YVe," (Longformer model)"),YVe.forEach(t),agr=i(K),DM=n(K,"LI",{});var KVe=s(DM);$Me=n(KVe,"STRONG",{});var eGt=s($Me);ngr=r(eGt,"luke"),eGt.forEach(t),sgr=r(KVe," \u2014 "),gJ=n(KVe,"A",{href:!0});var oGt=s(gJ);lgr=r(oGt,"LukeForTokenClassification"),oGt.forEach(t),igr=r(KVe," (LUKE model)"),KVe.forEach(t),dgr=i(K),GM=n(K,"LI",{});var ZVe=s(GM);kMe=n(ZVe,"STRONG",{});var rGt=s(kMe);cgr=r(rGt,"megatron-bert"),rGt.forEach(t),mgr=r(ZVe," \u2014 "),hJ=n(ZVe,"A",{href:!0});var tGt=s(hJ);fgr=r(tGt,"MegatronBertForTokenClassification"),tGt.forEach(t),ggr=r(ZVe," (Megatron-BERT model)"),ZVe.forEach(t),hgr=i(K),OM=n(K,"LI",{});var eXe=s(OM);SMe=n(eXe,"STRONG",{});var aGt=s(SMe);ugr=r(aGt,"mobilebert"),aGt.forEach(t),pgr=r(eXe," \u2014 "),uJ=n(eXe,"A",{href:!0});var nGt=s(uJ);_gr=r(nGt,"MobileBertForTokenClassification"),nGt.forEach(t),bgr=r(eXe," (MobileBERT model)"),eXe.forEach(t),vgr=i(K),VM=n(K,"LI",{});var oXe=s(VM);RMe=n(oXe,"STRONG",{});var sGt=s(RMe);Fgr=r(sGt,"mpnet"),sGt.forEach(t),Tgr=r(oXe," \u2014 "),pJ=n(oXe,"A",{href:!0});var lGt=s(pJ);Mgr=r(lGt,"MPNetForTokenClassification"),lGt.forEach(t),Egr=r(oXe," (MPNet model)"),oXe.forEach(t),Cgr=i(K),XM=n(K,"LI",{});var rXe=s(XM);PMe=n(rXe,"STRONG",{});var iGt=s(PMe);wgr=r(iGt,"nezha"),iGt.forEach(t),Agr=r(rXe," \u2014 "),_J=n(rXe,"A",{href:!0});var dGt=s(_J);Lgr=r(dGt,"NezhaForTokenClassification"),dGt.forEach(t),ygr=r(rXe," (Nezha model)"),rXe.forEach(t),xgr=i(K),zM=n(K,"LI",{});var tXe=s(zM);BMe=n(tXe,"STRONG",{});var cGt=s(BMe);$gr=r(cGt,"nystromformer"),cGt.forEach(t),kgr=r(tXe," \u2014 "),bJ=n(tXe,"A",{href:!0});var mGt=s(bJ);Sgr=r(mGt,"NystromformerForTokenClassification"),mGt.forEach(t),Rgr=r(tXe," (Nystr\xF6mformer model)"),tXe.forEach(t),Pgr=i(K),QM=n(K,"LI",{});var aXe=s(QM);IMe=n(aXe,"STRONG",{});var fGt=s(IMe);Bgr=r(fGt,"qdqbert"),fGt.forEach(t),Igr=r(aXe," \u2014 "),vJ=n(aXe,"A",{href:!0});var gGt=s(vJ);Ngr=r(gGt,"QDQBertForTokenClassification"),gGt.forEach(t),qgr=r(aXe," (QDQBert model)"),aXe.forEach(t),jgr=i(K),WM=n(K,"LI",{});var nXe=s(WM);NMe=n(nXe,"STRONG",{});var hGt=s(NMe);Dgr=r(hGt,"rembert"),hGt.forEach(t),Ggr=r(nXe," \u2014 "),FJ=n(nXe,"A",{href:!0});var uGt=s(FJ);Ogr=r(uGt,"RemBertForTokenClassification"),uGt.forEach(t),Vgr=r(nXe," (RemBERT model)"),nXe.forEach(t),Xgr=i(K),UM=n(K,"LI",{});var sXe=s(UM);qMe=n(sXe,"STRONG",{});var pGt=s(qMe);zgr=r(pGt,"roberta"),pGt.forEach(t),Qgr=r(sXe," \u2014 "),TJ=n(sXe,"A",{href:!0});var _Gt=s(TJ);Wgr=r(_Gt,"RobertaForTokenClassification"),_Gt.forEach(t),Ugr=r(sXe," (RoBERTa model)"),sXe.forEach(t),Hgr=i(K),HM=n(K,"LI",{});var lXe=s(HM);jMe=n(lXe,"STRONG",{});var bGt=s(jMe);Jgr=r(bGt,"roformer"),bGt.forEach(t),Ygr=r(lXe," \u2014 "),MJ=n(lXe,"A",{href:!0});var vGt=s(MJ);Kgr=r(vGt,"RoFormerForTokenClassification"),vGt.forEach(t),Zgr=r(lXe," (RoFormer model)"),lXe.forEach(t),ehr=i(K),JM=n(K,"LI",{});var iXe=s(JM);DMe=n(iXe,"STRONG",{});var FGt=s(DMe);ohr=r(FGt,"squeezebert"),FGt.forEach(t),rhr=r(iXe," \u2014 "),EJ=n(iXe,"A",{href:!0});var TGt=s(EJ);thr=r(TGt,"SqueezeBertForTokenClassification"),TGt.forEach(t),ahr=r(iXe," (SqueezeBERT model)"),iXe.forEach(t),nhr=i(K),YM=n(K,"LI",{});var dXe=s(YM);GMe=n(dXe,"STRONG",{});var MGt=s(GMe);shr=r(MGt,"xlm"),MGt.forEach(t),lhr=r(dXe," \u2014 "),CJ=n(dXe,"A",{href:!0});var EGt=s(CJ);ihr=r(EGt,"XLMForTokenClassification"),EGt.forEach(t),dhr=r(dXe," (XLM model)"),dXe.forEach(t),chr=i(K),KM=n(K,"LI",{});var cXe=s(KM);OMe=n(cXe,"STRONG",{});var CGt=s(OMe);mhr=r(CGt,"xlm-roberta"),CGt.forEach(t),fhr=r(cXe," \u2014 "),wJ=n(cXe,"A",{href:!0});var wGt=s(wJ);ghr=r(wGt,"XLMRobertaForTokenClassification"),wGt.forEach(t),hhr=r(cXe," (XLM-RoBERTa model)"),cXe.forEach(t),uhr=i(K),ZM=n(K,"LI",{});var mXe=s(ZM);VMe=n(mXe,"STRONG",{});var AGt=s(VMe);phr=r(AGt,"xlm-roberta-xl"),AGt.forEach(t),_hr=r(mXe," \u2014 "),AJ=n(mXe,"A",{href:!0});var LGt=s(AJ);bhr=r(LGt,"XLMRobertaXLForTokenClassification"),LGt.forEach(t),vhr=r(mXe," (XLM-RoBERTa-XL model)"),mXe.forEach(t),Fhr=i(K),eE=n(K,"LI",{});var fXe=s(eE);XMe=n(fXe,"STRONG",{});var yGt=s(XMe);Thr=r(yGt,"xlnet"),yGt.forEach(t),Mhr=r(fXe," \u2014 "),LJ=n(fXe,"A",{href:!0});var xGt=s(LJ);Ehr=r(xGt,"XLNetForTokenClassification"),xGt.forEach(t),Chr=r(fXe," (XLNet model)"),fXe.forEach(t),whr=i(K),oE=n(K,"LI",{});var gXe=s(oE);zMe=n(gXe,"STRONG",{});var $Gt=s(zMe);Ahr=r($Gt,"yoso"),$Gt.forEach(t),Lhr=r(gXe," \u2014 "),yJ=n(gXe,"A",{href:!0});var kGt=s(yJ);yhr=r(kGt,"YosoForTokenClassification"),kGt.forEach(t),xhr=r(gXe," (YOSO model)"),gXe.forEach(t),K.forEach(t),$hr=i(ya),rE=n(ya,"P",{});var hXe=s(rE);khr=r(hXe,"The model is set in evaluation mode by default using "),QMe=n(hXe,"CODE",{});var SGt=s(QMe);Shr=r(SGt,"model.eval()"),SGt.forEach(t),Rhr=r(hXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WMe=n(hXe,"CODE",{});var RGt=s(WMe);Phr=r(RGt,"model.train()"),RGt.forEach(t),hXe.forEach(t),Bhr=i(ya),T(tE.$$.fragment,ya),ya.forEach(t),Pl.forEach(t),EZe=i(m),Xd=n(m,"H2",{class:!0});var Noo=s(Xd);aE=n(Noo,"A",{id:!0,class:!0,href:!0});var PGt=s(aE);UMe=n(PGt,"SPAN",{});var BGt=s(UMe);T(n$.$$.fragment,BGt),BGt.forEach(t),PGt.forEach(t),Ihr=i(Noo),HMe=n(Noo,"SPAN",{});var IGt=s(HMe);Nhr=r(IGt,"AutoModelForQuestionAnswering"),IGt.forEach(t),Noo.forEach(t),CZe=i(m),Vo=n(m,"DIV",{class:!0});var Bl=s(Vo);T(s$.$$.fragment,Bl),qhr=i(Bl),zd=n(Bl,"P",{});var Qle=s(zd);jhr=r(Qle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xJ=n(Qle,"A",{href:!0});var NGt=s(xJ);Dhr=r(NGt,"from_pretrained()"),NGt.forEach(t),Ghr=r(Qle," class method or the "),$J=n(Qle,"A",{href:!0});var qGt=s($J);Ohr=r(qGt,"from_config()"),qGt.forEach(t),Vhr=r(Qle,` class
method.`),Qle.forEach(t),Xhr=i(Bl),l$=n(Bl,"P",{});var qoo=s(l$);zhr=r(qoo,"This class cannot be instantiated directly using "),JMe=n(qoo,"CODE",{});var jGt=s(JMe);Qhr=r(jGt,"__init__()"),jGt.forEach(t),Whr=r(qoo," (throws an error)."),qoo.forEach(t),Uhr=i(Bl),At=n(Bl,"DIV",{class:!0});var e8=s(At);T(i$.$$.fragment,e8),Hhr=i(e8),YMe=n(e8,"P",{});var DGt=s(YMe);Jhr=r(DGt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DGt.forEach(t),Yhr=i(e8),Qd=n(e8,"P",{});var Wle=s(Qd);Khr=r(Wle,`Note:
Loading a model from its configuration file does `),KMe=n(Wle,"STRONG",{});var GGt=s(KMe);Zhr=r(GGt,"not"),GGt.forEach(t),eur=r(Wle,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(Wle,"A",{href:!0});var OGt=s(kJ);our=r(OGt,"from_pretrained()"),OGt.forEach(t),rur=r(Wle," to load the model weights."),Wle.forEach(t),tur=i(e8),T(nE.$$.fragment,e8),e8.forEach(t),aur=i(Bl),io=n(Bl,"DIV",{class:!0});var xa=s(io);T(d$.$$.fragment,xa),nur=i(xa),ZMe=n(xa,"P",{});var VGt=s(ZMe);sur=r(VGt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VGt.forEach(t),lur=i(xa),nn=n(xa,"P",{});var o8=s(nn);iur=r(o8,"The model class to instantiate is selected based on the "),eEe=n(o8,"CODE",{});var XGt=s(eEe);dur=r(XGt,"model_type"),XGt.forEach(t),cur=r(o8,` property of the config object (either
passed as an argument or loaded from `),oEe=n(o8,"CODE",{});var zGt=s(oEe);mur=r(zGt,"pretrained_model_name_or_path"),zGt.forEach(t),fur=r(o8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(o8,"CODE",{});var QGt=s(rEe);gur=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),hur=r(o8,":"),o8.forEach(t),uur=i(xa),V=n(xa,"UL",{});var X=s(V);sE=n(X,"LI",{});var uXe=s(sE);tEe=n(uXe,"STRONG",{});var WGt=s(tEe);pur=r(WGt,"albert"),WGt.forEach(t),_ur=r(uXe," \u2014 "),SJ=n(uXe,"A",{href:!0});var UGt=s(SJ);bur=r(UGt,"AlbertForQuestionAnswering"),UGt.forEach(t),vur=r(uXe," (ALBERT model)"),uXe.forEach(t),Fur=i(X),lE=n(X,"LI",{});var pXe=s(lE);aEe=n(pXe,"STRONG",{});var HGt=s(aEe);Tur=r(HGt,"bart"),HGt.forEach(t),Mur=r(pXe," \u2014 "),RJ=n(pXe,"A",{href:!0});var JGt=s(RJ);Eur=r(JGt,"BartForQuestionAnswering"),JGt.forEach(t),Cur=r(pXe," (BART model)"),pXe.forEach(t),wur=i(X),iE=n(X,"LI",{});var _Xe=s(iE);nEe=n(_Xe,"STRONG",{});var YGt=s(nEe);Aur=r(YGt,"bert"),YGt.forEach(t),Lur=r(_Xe," \u2014 "),PJ=n(_Xe,"A",{href:!0});var KGt=s(PJ);yur=r(KGt,"BertForQuestionAnswering"),KGt.forEach(t),xur=r(_Xe," (BERT model)"),_Xe.forEach(t),$ur=i(X),dE=n(X,"LI",{});var bXe=s(dE);sEe=n(bXe,"STRONG",{});var ZGt=s(sEe);kur=r(ZGt,"big_bird"),ZGt.forEach(t),Sur=r(bXe," \u2014 "),BJ=n(bXe,"A",{href:!0});var eOt=s(BJ);Rur=r(eOt,"BigBirdForQuestionAnswering"),eOt.forEach(t),Pur=r(bXe," (BigBird model)"),bXe.forEach(t),Bur=i(X),cE=n(X,"LI",{});var vXe=s(cE);lEe=n(vXe,"STRONG",{});var oOt=s(lEe);Iur=r(oOt,"bigbird_pegasus"),oOt.forEach(t),Nur=r(vXe," \u2014 "),IJ=n(vXe,"A",{href:!0});var rOt=s(IJ);qur=r(rOt,"BigBirdPegasusForQuestionAnswering"),rOt.forEach(t),jur=r(vXe," (BigBird-Pegasus model)"),vXe.forEach(t),Dur=i(X),mE=n(X,"LI",{});var FXe=s(mE);iEe=n(FXe,"STRONG",{});var tOt=s(iEe);Gur=r(tOt,"camembert"),tOt.forEach(t),Our=r(FXe," \u2014 "),NJ=n(FXe,"A",{href:!0});var aOt=s(NJ);Vur=r(aOt,"CamembertForQuestionAnswering"),aOt.forEach(t),Xur=r(FXe," (CamemBERT model)"),FXe.forEach(t),zur=i(X),fE=n(X,"LI",{});var TXe=s(fE);dEe=n(TXe,"STRONG",{});var nOt=s(dEe);Qur=r(nOt,"canine"),nOt.forEach(t),Wur=r(TXe," \u2014 "),qJ=n(TXe,"A",{href:!0});var sOt=s(qJ);Uur=r(sOt,"CanineForQuestionAnswering"),sOt.forEach(t),Hur=r(TXe," (CANINE model)"),TXe.forEach(t),Jur=i(X),gE=n(X,"LI",{});var MXe=s(gE);cEe=n(MXe,"STRONG",{});var lOt=s(cEe);Yur=r(lOt,"convbert"),lOt.forEach(t),Kur=r(MXe," \u2014 "),jJ=n(MXe,"A",{href:!0});var iOt=s(jJ);Zur=r(iOt,"ConvBertForQuestionAnswering"),iOt.forEach(t),epr=r(MXe," (ConvBERT model)"),MXe.forEach(t),opr=i(X),hE=n(X,"LI",{});var EXe=s(hE);mEe=n(EXe,"STRONG",{});var dOt=s(mEe);rpr=r(dOt,"data2vec-text"),dOt.forEach(t),tpr=r(EXe," \u2014 "),DJ=n(EXe,"A",{href:!0});var cOt=s(DJ);apr=r(cOt,"Data2VecTextForQuestionAnswering"),cOt.forEach(t),npr=r(EXe," (Data2VecText model)"),EXe.forEach(t),spr=i(X),uE=n(X,"LI",{});var CXe=s(uE);fEe=n(CXe,"STRONG",{});var mOt=s(fEe);lpr=r(mOt,"deberta"),mOt.forEach(t),ipr=r(CXe," \u2014 "),GJ=n(CXe,"A",{href:!0});var fOt=s(GJ);dpr=r(fOt,"DebertaForQuestionAnswering"),fOt.forEach(t),cpr=r(CXe," (DeBERTa model)"),CXe.forEach(t),mpr=i(X),pE=n(X,"LI",{});var wXe=s(pE);gEe=n(wXe,"STRONG",{});var gOt=s(gEe);fpr=r(gOt,"deberta-v2"),gOt.forEach(t),gpr=r(wXe," \u2014 "),OJ=n(wXe,"A",{href:!0});var hOt=s(OJ);hpr=r(hOt,"DebertaV2ForQuestionAnswering"),hOt.forEach(t),upr=r(wXe," (DeBERTa-v2 model)"),wXe.forEach(t),ppr=i(X),_E=n(X,"LI",{});var AXe=s(_E);hEe=n(AXe,"STRONG",{});var uOt=s(hEe);_pr=r(uOt,"distilbert"),uOt.forEach(t),bpr=r(AXe," \u2014 "),VJ=n(AXe,"A",{href:!0});var pOt=s(VJ);vpr=r(pOt,"DistilBertForQuestionAnswering"),pOt.forEach(t),Fpr=r(AXe," (DistilBERT model)"),AXe.forEach(t),Tpr=i(X),bE=n(X,"LI",{});var LXe=s(bE);uEe=n(LXe,"STRONG",{});var _Ot=s(uEe);Mpr=r(_Ot,"electra"),_Ot.forEach(t),Epr=r(LXe," \u2014 "),XJ=n(LXe,"A",{href:!0});var bOt=s(XJ);Cpr=r(bOt,"ElectraForQuestionAnswering"),bOt.forEach(t),wpr=r(LXe," (ELECTRA model)"),LXe.forEach(t),Apr=i(X),vE=n(X,"LI",{});var yXe=s(vE);pEe=n(yXe,"STRONG",{});var vOt=s(pEe);Lpr=r(vOt,"ernie"),vOt.forEach(t),ypr=r(yXe," \u2014 "),zJ=n(yXe,"A",{href:!0});var FOt=s(zJ);xpr=r(FOt,"ErnieForQuestionAnswering"),FOt.forEach(t),$pr=r(yXe," (ERNIE model)"),yXe.forEach(t),kpr=i(X),FE=n(X,"LI",{});var xXe=s(FE);_Ee=n(xXe,"STRONG",{});var TOt=s(_Ee);Spr=r(TOt,"flaubert"),TOt.forEach(t),Rpr=r(xXe," \u2014 "),QJ=n(xXe,"A",{href:!0});var MOt=s(QJ);Ppr=r(MOt,"FlaubertForQuestionAnsweringSimple"),MOt.forEach(t),Bpr=r(xXe," (FlauBERT model)"),xXe.forEach(t),Ipr=i(X),TE=n(X,"LI",{});var $Xe=s(TE);bEe=n($Xe,"STRONG",{});var EOt=s(bEe);Npr=r(EOt,"fnet"),EOt.forEach(t),qpr=r($Xe," \u2014 "),WJ=n($Xe,"A",{href:!0});var COt=s(WJ);jpr=r(COt,"FNetForQuestionAnswering"),COt.forEach(t),Dpr=r($Xe," (FNet model)"),$Xe.forEach(t),Gpr=i(X),ME=n(X,"LI",{});var kXe=s(ME);vEe=n(kXe,"STRONG",{});var wOt=s(vEe);Opr=r(wOt,"funnel"),wOt.forEach(t),Vpr=r(kXe," \u2014 "),UJ=n(kXe,"A",{href:!0});var AOt=s(UJ);Xpr=r(AOt,"FunnelForQuestionAnswering"),AOt.forEach(t),zpr=r(kXe," (Funnel Transformer model)"),kXe.forEach(t),Qpr=i(X),EE=n(X,"LI",{});var SXe=s(EE);FEe=n(SXe,"STRONG",{});var LOt=s(FEe);Wpr=r(LOt,"gptj"),LOt.forEach(t),Upr=r(SXe," \u2014 "),HJ=n(SXe,"A",{href:!0});var yOt=s(HJ);Hpr=r(yOt,"GPTJForQuestionAnswering"),yOt.forEach(t),Jpr=r(SXe," (GPT-J model)"),SXe.forEach(t),Ypr=i(X),CE=n(X,"LI",{});var RXe=s(CE);TEe=n(RXe,"STRONG",{});var xOt=s(TEe);Kpr=r(xOt,"ibert"),xOt.forEach(t),Zpr=r(RXe," \u2014 "),JJ=n(RXe,"A",{href:!0});var $Ot=s(JJ);e_r=r($Ot,"IBertForQuestionAnswering"),$Ot.forEach(t),o_r=r(RXe," (I-BERT model)"),RXe.forEach(t),r_r=i(X),wE=n(X,"LI",{});var PXe=s(wE);MEe=n(PXe,"STRONG",{});var kOt=s(MEe);t_r=r(kOt,"layoutlmv2"),kOt.forEach(t),a_r=r(PXe," \u2014 "),YJ=n(PXe,"A",{href:!0});var SOt=s(YJ);n_r=r(SOt,"LayoutLMv2ForQuestionAnswering"),SOt.forEach(t),s_r=r(PXe," (LayoutLMv2 model)"),PXe.forEach(t),l_r=i(X),AE=n(X,"LI",{});var BXe=s(AE);EEe=n(BXe,"STRONG",{});var ROt=s(EEe);i_r=r(ROt,"layoutlmv3"),ROt.forEach(t),d_r=r(BXe," \u2014 "),KJ=n(BXe,"A",{href:!0});var POt=s(KJ);c_r=r(POt,"LayoutLMv3ForQuestionAnswering"),POt.forEach(t),m_r=r(BXe," (LayoutLMv3 model)"),BXe.forEach(t),f_r=i(X),LE=n(X,"LI",{});var IXe=s(LE);CEe=n(IXe,"STRONG",{});var BOt=s(CEe);g_r=r(BOt,"led"),BOt.forEach(t),h_r=r(IXe," \u2014 "),ZJ=n(IXe,"A",{href:!0});var IOt=s(ZJ);u_r=r(IOt,"LEDForQuestionAnswering"),IOt.forEach(t),p_r=r(IXe," (LED model)"),IXe.forEach(t),__r=i(X),yE=n(X,"LI",{});var NXe=s(yE);wEe=n(NXe,"STRONG",{});var NOt=s(wEe);b_r=r(NOt,"longformer"),NOt.forEach(t),v_r=r(NXe," \u2014 "),eY=n(NXe,"A",{href:!0});var qOt=s(eY);F_r=r(qOt,"LongformerForQuestionAnswering"),qOt.forEach(t),T_r=r(NXe," (Longformer model)"),NXe.forEach(t),M_r=i(X),xE=n(X,"LI",{});var qXe=s(xE);AEe=n(qXe,"STRONG",{});var jOt=s(AEe);E_r=r(jOt,"luke"),jOt.forEach(t),C_r=r(qXe," \u2014 "),oY=n(qXe,"A",{href:!0});var DOt=s(oY);w_r=r(DOt,"LukeForQuestionAnswering"),DOt.forEach(t),A_r=r(qXe," (LUKE model)"),qXe.forEach(t),L_r=i(X),$E=n(X,"LI",{});var jXe=s($E);LEe=n(jXe,"STRONG",{});var GOt=s(LEe);y_r=r(GOt,"lxmert"),GOt.forEach(t),x_r=r(jXe," \u2014 "),rY=n(jXe,"A",{href:!0});var OOt=s(rY);$_r=r(OOt,"LxmertForQuestionAnswering"),OOt.forEach(t),k_r=r(jXe," (LXMERT model)"),jXe.forEach(t),S_r=i(X),kE=n(X,"LI",{});var DXe=s(kE);yEe=n(DXe,"STRONG",{});var VOt=s(yEe);R_r=r(VOt,"mbart"),VOt.forEach(t),P_r=r(DXe," \u2014 "),tY=n(DXe,"A",{href:!0});var XOt=s(tY);B_r=r(XOt,"MBartForQuestionAnswering"),XOt.forEach(t),I_r=r(DXe," (mBART model)"),DXe.forEach(t),N_r=i(X),SE=n(X,"LI",{});var GXe=s(SE);xEe=n(GXe,"STRONG",{});var zOt=s(xEe);q_r=r(zOt,"megatron-bert"),zOt.forEach(t),j_r=r(GXe," \u2014 "),aY=n(GXe,"A",{href:!0});var QOt=s(aY);D_r=r(QOt,"MegatronBertForQuestionAnswering"),QOt.forEach(t),G_r=r(GXe," (Megatron-BERT model)"),GXe.forEach(t),O_r=i(X),RE=n(X,"LI",{});var OXe=s(RE);$Ee=n(OXe,"STRONG",{});var WOt=s($Ee);V_r=r(WOt,"mobilebert"),WOt.forEach(t),X_r=r(OXe," \u2014 "),nY=n(OXe,"A",{href:!0});var UOt=s(nY);z_r=r(UOt,"MobileBertForQuestionAnswering"),UOt.forEach(t),Q_r=r(OXe," (MobileBERT model)"),OXe.forEach(t),W_r=i(X),PE=n(X,"LI",{});var VXe=s(PE);kEe=n(VXe,"STRONG",{});var HOt=s(kEe);U_r=r(HOt,"mpnet"),HOt.forEach(t),H_r=r(VXe," \u2014 "),sY=n(VXe,"A",{href:!0});var JOt=s(sY);J_r=r(JOt,"MPNetForQuestionAnswering"),JOt.forEach(t),Y_r=r(VXe," (MPNet model)"),VXe.forEach(t),K_r=i(X),BE=n(X,"LI",{});var XXe=s(BE);SEe=n(XXe,"STRONG",{});var YOt=s(SEe);Z_r=r(YOt,"mvp"),YOt.forEach(t),ebr=r(XXe," \u2014 "),lY=n(XXe,"A",{href:!0});var KOt=s(lY);obr=r(KOt,"MvpForQuestionAnswering"),KOt.forEach(t),rbr=r(XXe," (MVP model)"),XXe.forEach(t),tbr=i(X),IE=n(X,"LI",{});var zXe=s(IE);REe=n(zXe,"STRONG",{});var ZOt=s(REe);abr=r(ZOt,"nezha"),ZOt.forEach(t),nbr=r(zXe," \u2014 "),iY=n(zXe,"A",{href:!0});var eVt=s(iY);sbr=r(eVt,"NezhaForQuestionAnswering"),eVt.forEach(t),lbr=r(zXe," (Nezha model)"),zXe.forEach(t),ibr=i(X),NE=n(X,"LI",{});var QXe=s(NE);PEe=n(QXe,"STRONG",{});var oVt=s(PEe);dbr=r(oVt,"nystromformer"),oVt.forEach(t),cbr=r(QXe," \u2014 "),dY=n(QXe,"A",{href:!0});var rVt=s(dY);mbr=r(rVt,"NystromformerForQuestionAnswering"),rVt.forEach(t),fbr=r(QXe," (Nystr\xF6mformer model)"),QXe.forEach(t),gbr=i(X),qE=n(X,"LI",{});var WXe=s(qE);BEe=n(WXe,"STRONG",{});var tVt=s(BEe);hbr=r(tVt,"qdqbert"),tVt.forEach(t),ubr=r(WXe," \u2014 "),cY=n(WXe,"A",{href:!0});var aVt=s(cY);pbr=r(aVt,"QDQBertForQuestionAnswering"),aVt.forEach(t),_br=r(WXe," (QDQBert model)"),WXe.forEach(t),bbr=i(X),jE=n(X,"LI",{});var UXe=s(jE);IEe=n(UXe,"STRONG",{});var nVt=s(IEe);vbr=r(nVt,"reformer"),nVt.forEach(t),Fbr=r(UXe," \u2014 "),mY=n(UXe,"A",{href:!0});var sVt=s(mY);Tbr=r(sVt,"ReformerForQuestionAnswering"),sVt.forEach(t),Mbr=r(UXe," (Reformer model)"),UXe.forEach(t),Ebr=i(X),DE=n(X,"LI",{});var HXe=s(DE);NEe=n(HXe,"STRONG",{});var lVt=s(NEe);Cbr=r(lVt,"rembert"),lVt.forEach(t),wbr=r(HXe," \u2014 "),fY=n(HXe,"A",{href:!0});var iVt=s(fY);Abr=r(iVt,"RemBertForQuestionAnswering"),iVt.forEach(t),Lbr=r(HXe," (RemBERT model)"),HXe.forEach(t),ybr=i(X),GE=n(X,"LI",{});var JXe=s(GE);qEe=n(JXe,"STRONG",{});var dVt=s(qEe);xbr=r(dVt,"roberta"),dVt.forEach(t),$br=r(JXe," \u2014 "),gY=n(JXe,"A",{href:!0});var cVt=s(gY);kbr=r(cVt,"RobertaForQuestionAnswering"),cVt.forEach(t),Sbr=r(JXe," (RoBERTa model)"),JXe.forEach(t),Rbr=i(X),OE=n(X,"LI",{});var YXe=s(OE);jEe=n(YXe,"STRONG",{});var mVt=s(jEe);Pbr=r(mVt,"roformer"),mVt.forEach(t),Bbr=r(YXe," \u2014 "),hY=n(YXe,"A",{href:!0});var fVt=s(hY);Ibr=r(fVt,"RoFormerForQuestionAnswering"),fVt.forEach(t),Nbr=r(YXe," (RoFormer model)"),YXe.forEach(t),qbr=i(X),VE=n(X,"LI",{});var KXe=s(VE);DEe=n(KXe,"STRONG",{});var gVt=s(DEe);jbr=r(gVt,"splinter"),gVt.forEach(t),Dbr=r(KXe," \u2014 "),uY=n(KXe,"A",{href:!0});var hVt=s(uY);Gbr=r(hVt,"SplinterForQuestionAnswering"),hVt.forEach(t),Obr=r(KXe," (Splinter model)"),KXe.forEach(t),Vbr=i(X),XE=n(X,"LI",{});var ZXe=s(XE);GEe=n(ZXe,"STRONG",{});var uVt=s(GEe);Xbr=r(uVt,"squeezebert"),uVt.forEach(t),zbr=r(ZXe," \u2014 "),pY=n(ZXe,"A",{href:!0});var pVt=s(pY);Qbr=r(pVt,"SqueezeBertForQuestionAnswering"),pVt.forEach(t),Wbr=r(ZXe," (SqueezeBERT model)"),ZXe.forEach(t),Ubr=i(X),zE=n(X,"LI",{});var eze=s(zE);OEe=n(eze,"STRONG",{});var _Vt=s(OEe);Hbr=r(_Vt,"xlm"),_Vt.forEach(t),Jbr=r(eze," \u2014 "),_Y=n(eze,"A",{href:!0});var bVt=s(_Y);Ybr=r(bVt,"XLMForQuestionAnsweringSimple"),bVt.forEach(t),Kbr=r(eze," (XLM model)"),eze.forEach(t),Zbr=i(X),QE=n(X,"LI",{});var oze=s(QE);VEe=n(oze,"STRONG",{});var vVt=s(VEe);e2r=r(vVt,"xlm-roberta"),vVt.forEach(t),o2r=r(oze," \u2014 "),bY=n(oze,"A",{href:!0});var FVt=s(bY);r2r=r(FVt,"XLMRobertaForQuestionAnswering"),FVt.forEach(t),t2r=r(oze," (XLM-RoBERTa model)"),oze.forEach(t),a2r=i(X),WE=n(X,"LI",{});var rze=s(WE);XEe=n(rze,"STRONG",{});var TVt=s(XEe);n2r=r(TVt,"xlm-roberta-xl"),TVt.forEach(t),s2r=r(rze," \u2014 "),vY=n(rze,"A",{href:!0});var MVt=s(vY);l2r=r(MVt,"XLMRobertaXLForQuestionAnswering"),MVt.forEach(t),i2r=r(rze," (XLM-RoBERTa-XL model)"),rze.forEach(t),d2r=i(X),UE=n(X,"LI",{});var tze=s(UE);zEe=n(tze,"STRONG",{});var EVt=s(zEe);c2r=r(EVt,"xlnet"),EVt.forEach(t),m2r=r(tze," \u2014 "),FY=n(tze,"A",{href:!0});var CVt=s(FY);f2r=r(CVt,"XLNetForQuestionAnsweringSimple"),CVt.forEach(t),g2r=r(tze," (XLNet model)"),tze.forEach(t),h2r=i(X),HE=n(X,"LI",{});var aze=s(HE);QEe=n(aze,"STRONG",{});var wVt=s(QEe);u2r=r(wVt,"yoso"),wVt.forEach(t),p2r=r(aze," \u2014 "),TY=n(aze,"A",{href:!0});var AVt=s(TY);_2r=r(AVt,"YosoForQuestionAnswering"),AVt.forEach(t),b2r=r(aze," (YOSO model)"),aze.forEach(t),X.forEach(t),v2r=i(xa),JE=n(xa,"P",{});var nze=s(JE);F2r=r(nze,"The model is set in evaluation mode by default using "),WEe=n(nze,"CODE",{});var LVt=s(WEe);T2r=r(LVt,"model.eval()"),LVt.forEach(t),M2r=r(nze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UEe=n(nze,"CODE",{});var yVt=s(UEe);E2r=r(yVt,"model.train()"),yVt.forEach(t),nze.forEach(t),C2r=i(xa),T(YE.$$.fragment,xa),xa.forEach(t),Bl.forEach(t),wZe=i(m),Wd=n(m,"H2",{class:!0});var joo=s(Wd);KE=n(joo,"A",{id:!0,class:!0,href:!0});var xVt=s(KE);HEe=n(xVt,"SPAN",{});var $Vt=s(HEe);T(c$.$$.fragment,$Vt),$Vt.forEach(t),xVt.forEach(t),w2r=i(joo),JEe=n(joo,"SPAN",{});var kVt=s(JEe);A2r=r(kVt,"AutoModelForTableQuestionAnswering"),kVt.forEach(t),joo.forEach(t),AZe=i(m),Xo=n(m,"DIV",{class:!0});var Il=s(Xo);T(m$.$$.fragment,Il),L2r=i(Il),Ud=n(Il,"P",{});var Ule=s(Ud);y2r=r(Ule,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MY=n(Ule,"A",{href:!0});var SVt=s(MY);x2r=r(SVt,"from_pretrained()"),SVt.forEach(t),$2r=r(Ule," class method or the "),EY=n(Ule,"A",{href:!0});var RVt=s(EY);k2r=r(RVt,"from_config()"),RVt.forEach(t),S2r=r(Ule,` class
method.`),Ule.forEach(t),R2r=i(Il),f$=n(Il,"P",{});var Doo=s(f$);P2r=r(Doo,"This class cannot be instantiated directly using "),YEe=n(Doo,"CODE",{});var PVt=s(YEe);B2r=r(PVt,"__init__()"),PVt.forEach(t),I2r=r(Doo," (throws an error)."),Doo.forEach(t),N2r=i(Il),Lt=n(Il,"DIV",{class:!0});var r8=s(Lt);T(g$.$$.fragment,r8),q2r=i(r8),KEe=n(r8,"P",{});var BVt=s(KEe);j2r=r(BVt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BVt.forEach(t),D2r=i(r8),Hd=n(r8,"P",{});var Hle=s(Hd);G2r=r(Hle,`Note:
Loading a model from its configuration file does `),ZEe=n(Hle,"STRONG",{});var IVt=s(ZEe);O2r=r(IVt,"not"),IVt.forEach(t),V2r=r(Hle,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(Hle,"A",{href:!0});var NVt=s(CY);X2r=r(NVt,"from_pretrained()"),NVt.forEach(t),z2r=r(Hle," to load the model weights."),Hle.forEach(t),Q2r=i(r8),T(ZE.$$.fragment,r8),r8.forEach(t),W2r=i(Il),co=n(Il,"DIV",{class:!0});var $a=s(co);T(h$.$$.fragment,$a),U2r=i($a),e4e=n($a,"P",{});var qVt=s(e4e);H2r=r(qVt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qVt.forEach(t),J2r=i($a),sn=n($a,"P",{});var t8=s(sn);Y2r=r(t8,"The model class to instantiate is selected based on the "),o4e=n(t8,"CODE",{});var jVt=s(o4e);K2r=r(jVt,"model_type"),jVt.forEach(t),Z2r=r(t8,` property of the config object (either
passed as an argument or loaded from `),r4e=n(t8,"CODE",{});var DVt=s(r4e);e1r=r(DVt,"pretrained_model_name_or_path"),DVt.forEach(t),o1r=r(t8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(t8,"CODE",{});var GVt=s(t4e);r1r=r(GVt,"pretrained_model_name_or_path"),GVt.forEach(t),t1r=r(t8,":"),t8.forEach(t),a1r=i($a),a4e=n($a,"UL",{});var OVt=s(a4e);e4=n(OVt,"LI",{});var sze=s(e4);n4e=n(sze,"STRONG",{});var VVt=s(n4e);n1r=r(VVt,"tapas"),VVt.forEach(t),s1r=r(sze," \u2014 "),wY=n(sze,"A",{href:!0});var XVt=s(wY);l1r=r(XVt,"TapasForQuestionAnswering"),XVt.forEach(t),i1r=r(sze," (TAPAS model)"),sze.forEach(t),OVt.forEach(t),d1r=i($a),o4=n($a,"P",{});var lze=s(o4);c1r=r(lze,"The model is set in evaluation mode by default using "),s4e=n(lze,"CODE",{});var zVt=s(s4e);m1r=r(zVt,"model.eval()"),zVt.forEach(t),f1r=r(lze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l4e=n(lze,"CODE",{});var QVt=s(l4e);g1r=r(QVt,"model.train()"),QVt.forEach(t),lze.forEach(t),h1r=i($a),T(r4.$$.fragment,$a),$a.forEach(t),Il.forEach(t),LZe=i(m),Jd=n(m,"H2",{class:!0});var Goo=s(Jd);t4=n(Goo,"A",{id:!0,class:!0,href:!0});var WVt=s(t4);i4e=n(WVt,"SPAN",{});var UVt=s(i4e);T(u$.$$.fragment,UVt),UVt.forEach(t),WVt.forEach(t),u1r=i(Goo),d4e=n(Goo,"SPAN",{});var HVt=s(d4e);p1r=r(HVt,"AutoModelForDocumentQuestionAnswering"),HVt.forEach(t),Goo.forEach(t),yZe=i(m),zo=n(m,"DIV",{class:!0});var Nl=s(zo);T(p$.$$.fragment,Nl),_1r=i(Nl),Yd=n(Nl,"P",{});var Jle=s(Yd);b1r=r(Jle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),AY=n(Jle,"A",{href:!0});var JVt=s(AY);v1r=r(JVt,"from_pretrained()"),JVt.forEach(t),F1r=r(Jle," class method or the "),LY=n(Jle,"A",{href:!0});var YVt=s(LY);T1r=r(YVt,"from_config()"),YVt.forEach(t),M1r=r(Jle,` class
method.`),Jle.forEach(t),E1r=i(Nl),_$=n(Nl,"P",{});var Ooo=s(_$);C1r=r(Ooo,"This class cannot be instantiated directly using "),c4e=n(Ooo,"CODE",{});var KVt=s(c4e);w1r=r(KVt,"__init__()"),KVt.forEach(t),A1r=r(Ooo," (throws an error)."),Ooo.forEach(t),L1r=i(Nl),yt=n(Nl,"DIV",{class:!0});var a8=s(yt);T(b$.$$.fragment,a8),y1r=i(a8),m4e=n(a8,"P",{});var ZVt=s(m4e);x1r=r(ZVt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),ZVt.forEach(t),$1r=i(a8),Kd=n(a8,"P",{});var Yle=s(Kd);k1r=r(Yle,`Note:
Loading a model from its configuration file does `),f4e=n(Yle,"STRONG",{});var eXt=s(f4e);S1r=r(eXt,"not"),eXt.forEach(t),R1r=r(Yle,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(Yle,"A",{href:!0});var oXt=s(yY);P1r=r(oXt,"from_pretrained()"),oXt.forEach(t),B1r=r(Yle," to load the model weights."),Yle.forEach(t),I1r=i(a8),T(a4.$$.fragment,a8),a8.forEach(t),N1r=i(Nl),mo=n(Nl,"DIV",{class:!0});var ka=s(mo);T(v$.$$.fragment,ka),q1r=i(ka),g4e=n(ka,"P",{});var rXt=s(g4e);j1r=r(rXt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),rXt.forEach(t),D1r=i(ka),ln=n(ka,"P",{});var n8=s(ln);G1r=r(n8,"The model class to instantiate is selected based on the "),h4e=n(n8,"CODE",{});var tXt=s(h4e);O1r=r(tXt,"model_type"),tXt.forEach(t),V1r=r(n8,` property of the config object (either
passed as an argument or loaded from `),u4e=n(n8,"CODE",{});var aXt=s(u4e);X1r=r(aXt,"pretrained_model_name_or_path"),aXt.forEach(t),z1r=r(n8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(n8,"CODE",{});var nXt=s(p4e);Q1r=r(nXt,"pretrained_model_name_or_path"),nXt.forEach(t),W1r=r(n8,":"),n8.forEach(t),U1r=i(ka),Zd=n(ka,"UL",{});var Kle=s(Zd);n4=n(Kle,"LI",{});var ize=s(n4);_4e=n(ize,"STRONG",{});var sXt=s(_4e);H1r=r(sXt,"layoutlm"),sXt.forEach(t),J1r=r(ize," \u2014 "),xY=n(ize,"A",{href:!0});var lXt=s(xY);Y1r=r(lXt,"LayoutLMForQuestionAnswering"),lXt.forEach(t),K1r=r(ize," (LayoutLM model)"),ize.forEach(t),Z1r=i(Kle),s4=n(Kle,"LI",{});var dze=s(s4);b4e=n(dze,"STRONG",{});var iXt=s(b4e);evr=r(iXt,"layoutlmv2"),iXt.forEach(t),ovr=r(dze," \u2014 "),$Y=n(dze,"A",{href:!0});var dXt=s($Y);rvr=r(dXt,"LayoutLMv2ForQuestionAnswering"),dXt.forEach(t),tvr=r(dze," (LayoutLMv2 model)"),dze.forEach(t),avr=i(Kle),l4=n(Kle,"LI",{});var cze=s(l4);v4e=n(cze,"STRONG",{});var cXt=s(v4e);nvr=r(cXt,"layoutlmv3"),cXt.forEach(t),svr=r(cze," \u2014 "),kY=n(cze,"A",{href:!0});var mXt=s(kY);lvr=r(mXt,"LayoutLMv3ForQuestionAnswering"),mXt.forEach(t),ivr=r(cze," (LayoutLMv3 model)"),cze.forEach(t),Kle.forEach(t),dvr=i(ka),i4=n(ka,"P",{});var mze=s(i4);cvr=r(mze,"The model is set in evaluation mode by default using "),F4e=n(mze,"CODE",{});var fXt=s(F4e);mvr=r(fXt,"model.eval()"),fXt.forEach(t),fvr=r(mze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T4e=n(mze,"CODE",{});var gXt=s(T4e);gvr=r(gXt,"model.train()"),gXt.forEach(t),mze.forEach(t),hvr=i(ka),T(d4.$$.fragment,ka),ka.forEach(t),Nl.forEach(t),xZe=i(m),ec=n(m,"H2",{class:!0});var Voo=s(ec);c4=n(Voo,"A",{id:!0,class:!0,href:!0});var hXt=s(c4);M4e=n(hXt,"SPAN",{});var uXt=s(M4e);T(F$.$$.fragment,uXt),uXt.forEach(t),hXt.forEach(t),uvr=i(Voo),E4e=n(Voo,"SPAN",{});var pXt=s(E4e);pvr=r(pXt,"AutoModelForImageClassification"),pXt.forEach(t),Voo.forEach(t),$Ze=i(m),Qo=n(m,"DIV",{class:!0});var ql=s(Qo);T(T$.$$.fragment,ql),_vr=i(ql),oc=n(ql,"P",{});var Zle=s(oc);bvr=r(Zle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SY=n(Zle,"A",{href:!0});var _Xt=s(SY);vvr=r(_Xt,"from_pretrained()"),_Xt.forEach(t),Fvr=r(Zle," class method or the "),RY=n(Zle,"A",{href:!0});var bXt=s(RY);Tvr=r(bXt,"from_config()"),bXt.forEach(t),Mvr=r(Zle,` class
method.`),Zle.forEach(t),Evr=i(ql),M$=n(ql,"P",{});var Xoo=s(M$);Cvr=r(Xoo,"This class cannot be instantiated directly using "),C4e=n(Xoo,"CODE",{});var vXt=s(C4e);wvr=r(vXt,"__init__()"),vXt.forEach(t),Avr=r(Xoo," (throws an error)."),Xoo.forEach(t),Lvr=i(ql),xt=n(ql,"DIV",{class:!0});var s8=s(xt);T(E$.$$.fragment,s8),yvr=i(s8),w4e=n(s8,"P",{});var FXt=s(w4e);xvr=r(FXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FXt.forEach(t),$vr=i(s8),rc=n(s8,"P",{});var eie=s(rc);kvr=r(eie,`Note:
Loading a model from its configuration file does `),A4e=n(eie,"STRONG",{});var TXt=s(A4e);Svr=r(TXt,"not"),TXt.forEach(t),Rvr=r(eie,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(eie,"A",{href:!0});var MXt=s(PY);Pvr=r(MXt,"from_pretrained()"),MXt.forEach(t),Bvr=r(eie," to load the model weights."),eie.forEach(t),Ivr=i(s8),T(m4.$$.fragment,s8),s8.forEach(t),Nvr=i(ql),fo=n(ql,"DIV",{class:!0});var Sa=s(fo);T(C$.$$.fragment,Sa),qvr=i(Sa),L4e=n(Sa,"P",{});var EXt=s(L4e);jvr=r(EXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EXt.forEach(t),Dvr=i(Sa),dn=n(Sa,"P",{});var l8=s(dn);Gvr=r(l8,"The model class to instantiate is selected based on the "),y4e=n(l8,"CODE",{});var CXt=s(y4e);Ovr=r(CXt,"model_type"),CXt.forEach(t),Vvr=r(l8,` property of the config object (either
passed as an argument or loaded from `),x4e=n(l8,"CODE",{});var wXt=s(x4e);Xvr=r(wXt,"pretrained_model_name_or_path"),wXt.forEach(t),zvr=r(l8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(l8,"CODE",{});var AXt=s($4e);Qvr=r(AXt,"pretrained_model_name_or_path"),AXt.forEach(t),Wvr=r(l8,":"),l8.forEach(t),Uvr=i(Sa),be=n(Sa,"UL",{});var Fe=s(be);f4=n(Fe,"LI",{});var fze=s(f4);k4e=n(fze,"STRONG",{});var LXt=s(k4e);Hvr=r(LXt,"beit"),LXt.forEach(t),Jvr=r(fze," \u2014 "),BY=n(fze,"A",{href:!0});var yXt=s(BY);Yvr=r(yXt,"BeitForImageClassification"),yXt.forEach(t),Kvr=r(fze," (BEiT model)"),fze.forEach(t),Zvr=i(Fe),g4=n(Fe,"LI",{});var gze=s(g4);S4e=n(gze,"STRONG",{});var xXt=s(S4e);eFr=r(xXt,"convnext"),xXt.forEach(t),oFr=r(gze," \u2014 "),IY=n(gze,"A",{href:!0});var $Xt=s(IY);rFr=r($Xt,"ConvNextForImageClassification"),$Xt.forEach(t),tFr=r(gze," (ConvNeXT model)"),gze.forEach(t),aFr=i(Fe),h4=n(Fe,"LI",{});var hze=s(h4);R4e=n(hze,"STRONG",{});var kXt=s(R4e);nFr=r(kXt,"cvt"),kXt.forEach(t),sFr=r(hze," \u2014 "),NY=n(hze,"A",{href:!0});var SXt=s(NY);lFr=r(SXt,"CvtForImageClassification"),SXt.forEach(t),iFr=r(hze," (CvT model)"),hze.forEach(t),dFr=i(Fe),u4=n(Fe,"LI",{});var uze=s(u4);P4e=n(uze,"STRONG",{});var RXt=s(P4e);cFr=r(RXt,"data2vec-vision"),RXt.forEach(t),mFr=r(uze," \u2014 "),qY=n(uze,"A",{href:!0});var PXt=s(qY);fFr=r(PXt,"Data2VecVisionForImageClassification"),PXt.forEach(t),gFr=r(uze," (Data2VecVision model)"),uze.forEach(t),hFr=i(Fe),bl=n(Fe,"LI",{});var qB=s(bl);B4e=n(qB,"STRONG",{});var BXt=s(B4e);uFr=r(BXt,"deit"),BXt.forEach(t),pFr=r(qB," \u2014 "),jY=n(qB,"A",{href:!0});var IXt=s(jY);_Fr=r(IXt,"DeiTForImageClassification"),IXt.forEach(t),bFr=r(qB," or "),DY=n(qB,"A",{href:!0});var NXt=s(DY);vFr=r(NXt,"DeiTForImageClassificationWithTeacher"),NXt.forEach(t),FFr=r(qB," (DeiT model)"),qB.forEach(t),TFr=i(Fe),p4=n(Fe,"LI",{});var pze=s(p4);I4e=n(pze,"STRONG",{});var qXt=s(I4e);MFr=r(qXt,"imagegpt"),qXt.forEach(t),EFr=r(pze," \u2014 "),GY=n(pze,"A",{href:!0});var jXt=s(GY);CFr=r(jXt,"ImageGPTForImageClassification"),jXt.forEach(t),wFr=r(pze," (ImageGPT model)"),pze.forEach(t),AFr=i(Fe),vl=n(Fe,"LI",{});var jB=s(vl);N4e=n(jB,"STRONG",{});var DXt=s(N4e);LFr=r(DXt,"levit"),DXt.forEach(t),yFr=r(jB," \u2014 "),OY=n(jB,"A",{href:!0});var GXt=s(OY);xFr=r(GXt,"LevitForImageClassification"),GXt.forEach(t),$Fr=r(jB," or "),VY=n(jB,"A",{href:!0});var OXt=s(VY);kFr=r(OXt,"LevitForImageClassificationWithTeacher"),OXt.forEach(t),SFr=r(jB," (LeViT model)"),jB.forEach(t),RFr=i(Fe),_4=n(Fe,"LI",{});var _ze=s(_4);q4e=n(_ze,"STRONG",{});var VXt=s(q4e);PFr=r(VXt,"mobilevit"),VXt.forEach(t),BFr=r(_ze," \u2014 "),XY=n(_ze,"A",{href:!0});var XXt=s(XY);IFr=r(XXt,"MobileViTForImageClassification"),XXt.forEach(t),NFr=r(_ze," (MobileViT model)"),_ze.forEach(t),qFr=i(Fe),$t=n(Fe,"LI",{});var Mf=s($t);j4e=n(Mf,"STRONG",{});var zXt=s(j4e);jFr=r(zXt,"perceiver"),zXt.forEach(t),DFr=r(Mf," \u2014 "),zY=n(Mf,"A",{href:!0});var QXt=s(zY);GFr=r(QXt,"PerceiverForImageClassificationLearned"),QXt.forEach(t),OFr=r(Mf," or "),QY=n(Mf,"A",{href:!0});var WXt=s(QY);VFr=r(WXt,"PerceiverForImageClassificationFourier"),WXt.forEach(t),XFr=r(Mf," or "),WY=n(Mf,"A",{href:!0});var UXt=s(WY);zFr=r(UXt,"PerceiverForImageClassificationConvProcessing"),UXt.forEach(t),QFr=r(Mf," (Perceiver model)"),Mf.forEach(t),WFr=i(Fe),b4=n(Fe,"LI",{});var bze=s(b4);D4e=n(bze,"STRONG",{});var HXt=s(D4e);UFr=r(HXt,"poolformer"),HXt.forEach(t),HFr=r(bze," \u2014 "),UY=n(bze,"A",{href:!0});var JXt=s(UY);JFr=r(JXt,"PoolFormerForImageClassification"),JXt.forEach(t),YFr=r(bze," (PoolFormer model)"),bze.forEach(t),KFr=i(Fe),v4=n(Fe,"LI",{});var vze=s(v4);G4e=n(vze,"STRONG",{});var YXt=s(G4e);ZFr=r(YXt,"regnet"),YXt.forEach(t),eTr=r(vze," \u2014 "),HY=n(vze,"A",{href:!0});var KXt=s(HY);oTr=r(KXt,"RegNetForImageClassification"),KXt.forEach(t),rTr=r(vze," (RegNet model)"),vze.forEach(t),tTr=i(Fe),F4=n(Fe,"LI",{});var Fze=s(F4);O4e=n(Fze,"STRONG",{});var ZXt=s(O4e);aTr=r(ZXt,"resnet"),ZXt.forEach(t),nTr=r(Fze," \u2014 "),JY=n(Fze,"A",{href:!0});var ezt=s(JY);sTr=r(ezt,"ResNetForImageClassification"),ezt.forEach(t),lTr=r(Fze," (ResNet model)"),Fze.forEach(t),iTr=i(Fe),T4=n(Fe,"LI",{});var Tze=s(T4);V4e=n(Tze,"STRONG",{});var ozt=s(V4e);dTr=r(ozt,"segformer"),ozt.forEach(t),cTr=r(Tze," \u2014 "),YY=n(Tze,"A",{href:!0});var rzt=s(YY);mTr=r(rzt,"SegformerForImageClassification"),rzt.forEach(t),fTr=r(Tze," (SegFormer model)"),Tze.forEach(t),gTr=i(Fe),M4=n(Fe,"LI",{});var Mze=s(M4);X4e=n(Mze,"STRONG",{});var tzt=s(X4e);hTr=r(tzt,"swin"),tzt.forEach(t),uTr=r(Mze," \u2014 "),KY=n(Mze,"A",{href:!0});var azt=s(KY);pTr=r(azt,"SwinForImageClassification"),azt.forEach(t),_Tr=r(Mze," (Swin Transformer model)"),Mze.forEach(t),bTr=i(Fe),E4=n(Fe,"LI",{});var Eze=s(E4);z4e=n(Eze,"STRONG",{});var nzt=s(z4e);vTr=r(nzt,"swinv2"),nzt.forEach(t),FTr=r(Eze," \u2014 "),ZY=n(Eze,"A",{href:!0});var szt=s(ZY);TTr=r(szt,"Swinv2ForImageClassification"),szt.forEach(t),MTr=r(Eze," (Swin Transformer V2 model)"),Eze.forEach(t),ETr=i(Fe),C4=n(Fe,"LI",{});var Cze=s(C4);Q4e=n(Cze,"STRONG",{});var lzt=s(Q4e);CTr=r(lzt,"van"),lzt.forEach(t),wTr=r(Cze," \u2014 "),eK=n(Cze,"A",{href:!0});var izt=s(eK);ATr=r(izt,"VanForImageClassification"),izt.forEach(t),LTr=r(Cze," (VAN model)"),Cze.forEach(t),yTr=i(Fe),w4=n(Fe,"LI",{});var wze=s(w4);W4e=n(wze,"STRONG",{});var dzt=s(W4e);xTr=r(dzt,"vit"),dzt.forEach(t),$Tr=r(wze," \u2014 "),oK=n(wze,"A",{href:!0});var czt=s(oK);kTr=r(czt,"ViTForImageClassification"),czt.forEach(t),STr=r(wze," (ViT model)"),wze.forEach(t),RTr=i(Fe),A4=n(Fe,"LI",{});var Aze=s(A4);U4e=n(Aze,"STRONG",{});var mzt=s(U4e);PTr=r(mzt,"vit_msn"),mzt.forEach(t),BTr=r(Aze," \u2014 "),rK=n(Aze,"A",{href:!0});var fzt=s(rK);ITr=r(fzt,"ViTMSNForImageClassification"),fzt.forEach(t),NTr=r(Aze," (ViTMSN model)"),Aze.forEach(t),Fe.forEach(t),qTr=i(Sa),L4=n(Sa,"P",{});var Lze=s(L4);jTr=r(Lze,"The model is set in evaluation mode by default using "),H4e=n(Lze,"CODE",{});var gzt=s(H4e);DTr=r(gzt,"model.eval()"),gzt.forEach(t),GTr=r(Lze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J4e=n(Lze,"CODE",{});var hzt=s(J4e);OTr=r(hzt,"model.train()"),hzt.forEach(t),Lze.forEach(t),VTr=i(Sa),T(y4.$$.fragment,Sa),Sa.forEach(t),ql.forEach(t),kZe=i(m),tc=n(m,"H2",{class:!0});var zoo=s(tc);x4=n(zoo,"A",{id:!0,class:!0,href:!0});var uzt=s(x4);Y4e=n(uzt,"SPAN",{});var pzt=s(Y4e);T(w$.$$.fragment,pzt),pzt.forEach(t),uzt.forEach(t),XTr=i(zoo),K4e=n(zoo,"SPAN",{});var _zt=s(K4e);zTr=r(_zt,"AutoModelForVideoClassification"),_zt.forEach(t),zoo.forEach(t),SZe=i(m),Wo=n(m,"DIV",{class:!0});var jl=s(Wo);T(A$.$$.fragment,jl),QTr=i(jl),ac=n(jl,"P",{});var oie=s(ac);WTr=r(oie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),tK=n(oie,"A",{href:!0});var bzt=s(tK);UTr=r(bzt,"from_pretrained()"),bzt.forEach(t),HTr=r(oie," class method or the "),aK=n(oie,"A",{href:!0});var vzt=s(aK);JTr=r(vzt,"from_config()"),vzt.forEach(t),YTr=r(oie,` class
method.`),oie.forEach(t),KTr=i(jl),L$=n(jl,"P",{});var Qoo=s(L$);ZTr=r(Qoo,"This class cannot be instantiated directly using "),Z4e=n(Qoo,"CODE",{});var Fzt=s(Z4e);eMr=r(Fzt,"__init__()"),Fzt.forEach(t),oMr=r(Qoo," (throws an error)."),Qoo.forEach(t),rMr=i(jl),kt=n(jl,"DIV",{class:!0});var i8=s(kt);T(y$.$$.fragment,i8),tMr=i(i8),eCe=n(i8,"P",{});var Tzt=s(eCe);aMr=r(Tzt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Tzt.forEach(t),nMr=i(i8),nc=n(i8,"P",{});var rie=s(nc);sMr=r(rie,`Note:
Loading a model from its configuration file does `),oCe=n(rie,"STRONG",{});var Mzt=s(oCe);lMr=r(Mzt,"not"),Mzt.forEach(t),iMr=r(rie,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(rie,"A",{href:!0});var Ezt=s(nK);dMr=r(Ezt,"from_pretrained()"),Ezt.forEach(t),cMr=r(rie," to load the model weights."),rie.forEach(t),mMr=i(i8),T($4.$$.fragment,i8),i8.forEach(t),fMr=i(jl),go=n(jl,"DIV",{class:!0});var Ra=s(go);T(x$.$$.fragment,Ra),gMr=i(Ra),rCe=n(Ra,"P",{});var Czt=s(rCe);hMr=r(Czt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Czt.forEach(t),uMr=i(Ra),cn=n(Ra,"P",{});var d8=s(cn);pMr=r(d8,"The model class to instantiate is selected based on the "),tCe=n(d8,"CODE",{});var wzt=s(tCe);_Mr=r(wzt,"model_type"),wzt.forEach(t),bMr=r(d8,` property of the config object (either
passed as an argument or loaded from `),aCe=n(d8,"CODE",{});var Azt=s(aCe);vMr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),FMr=r(d8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(d8,"CODE",{});var Lzt=s(nCe);TMr=r(Lzt,"pretrained_model_name_or_path"),Lzt.forEach(t),MMr=r(d8,":"),d8.forEach(t),EMr=i(Ra),sCe=n(Ra,"UL",{});var yzt=s(sCe);k4=n(yzt,"LI",{});var yze=s(k4);lCe=n(yze,"STRONG",{});var xzt=s(lCe);CMr=r(xzt,"videomae"),xzt.forEach(t),wMr=r(yze," \u2014 "),sK=n(yze,"A",{href:!0});var $zt=s(sK);AMr=r($zt,"VideoMAEForVideoClassification"),$zt.forEach(t),LMr=r(yze," (VideoMAE model)"),yze.forEach(t),yzt.forEach(t),yMr=i(Ra),S4=n(Ra,"P",{});var xze=s(S4);xMr=r(xze,"The model is set in evaluation mode by default using "),iCe=n(xze,"CODE",{});var kzt=s(iCe);$Mr=r(kzt,"model.eval()"),kzt.forEach(t),kMr=r(xze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dCe=n(xze,"CODE",{});var Szt=s(dCe);SMr=r(Szt,"model.train()"),Szt.forEach(t),xze.forEach(t),RMr=i(Ra),T(R4.$$.fragment,Ra),Ra.forEach(t),jl.forEach(t),RZe=i(m),sc=n(m,"H2",{class:!0});var Woo=s(sc);P4=n(Woo,"A",{id:!0,class:!0,href:!0});var Rzt=s(P4);cCe=n(Rzt,"SPAN",{});var Pzt=s(cCe);T($$.$$.fragment,Pzt),Pzt.forEach(t),Rzt.forEach(t),PMr=i(Woo),mCe=n(Woo,"SPAN",{});var Bzt=s(mCe);BMr=r(Bzt,"AutoModelForVision2Seq"),Bzt.forEach(t),Woo.forEach(t),PZe=i(m),Uo=n(m,"DIV",{class:!0});var Dl=s(Uo);T(k$.$$.fragment,Dl),IMr=i(Dl),lc=n(Dl,"P",{});var tie=s(lc);NMr=r(tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lK=n(tie,"A",{href:!0});var Izt=s(lK);qMr=r(Izt,"from_pretrained()"),Izt.forEach(t),jMr=r(tie," class method or the "),iK=n(tie,"A",{href:!0});var Nzt=s(iK);DMr=r(Nzt,"from_config()"),Nzt.forEach(t),GMr=r(tie,` class
method.`),tie.forEach(t),OMr=i(Dl),S$=n(Dl,"P",{});var Uoo=s(S$);VMr=r(Uoo,"This class cannot be instantiated directly using "),fCe=n(Uoo,"CODE",{});var qzt=s(fCe);XMr=r(qzt,"__init__()"),qzt.forEach(t),zMr=r(Uoo," (throws an error)."),Uoo.forEach(t),QMr=i(Dl),St=n(Dl,"DIV",{class:!0});var c8=s(St);T(R$.$$.fragment,c8),WMr=i(c8),gCe=n(c8,"P",{});var jzt=s(gCe);UMr=r(jzt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jzt.forEach(t),HMr=i(c8),ic=n(c8,"P",{});var aie=s(ic);JMr=r(aie,`Note:
Loading a model from its configuration file does `),hCe=n(aie,"STRONG",{});var Dzt=s(hCe);YMr=r(Dzt,"not"),Dzt.forEach(t),KMr=r(aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(aie,"A",{href:!0});var Gzt=s(dK);ZMr=r(Gzt,"from_pretrained()"),Gzt.forEach(t),eEr=r(aie," to load the model weights."),aie.forEach(t),oEr=i(c8),T(B4.$$.fragment,c8),c8.forEach(t),rEr=i(Dl),ho=n(Dl,"DIV",{class:!0});var Pa=s(ho);T(P$.$$.fragment,Pa),tEr=i(Pa),uCe=n(Pa,"P",{});var Ozt=s(uCe);aEr=r(Ozt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ozt.forEach(t),nEr=i(Pa),mn=n(Pa,"P",{});var m8=s(mn);sEr=r(m8,"The model class to instantiate is selected based on the "),pCe=n(m8,"CODE",{});var Vzt=s(pCe);lEr=r(Vzt,"model_type"),Vzt.forEach(t),iEr=r(m8,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(m8,"CODE",{});var Xzt=s(_Ce);dEr=r(Xzt,"pretrained_model_name_or_path"),Xzt.forEach(t),cEr=r(m8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(m8,"CODE",{});var zzt=s(bCe);mEr=r(zzt,"pretrained_model_name_or_path"),zzt.forEach(t),fEr=r(m8,":"),m8.forEach(t),gEr=i(Pa),vCe=n(Pa,"UL",{});var Qzt=s(vCe);I4=n(Qzt,"LI",{});var $ze=s(I4);FCe=n($ze,"STRONG",{});var Wzt=s(FCe);hEr=r(Wzt,"vision-encoder-decoder"),Wzt.forEach(t),uEr=r($ze," \u2014 "),cK=n($ze,"A",{href:!0});var Uzt=s(cK);pEr=r(Uzt,"VisionEncoderDecoderModel"),Uzt.forEach(t),_Er=r($ze," (Vision Encoder decoder model)"),$ze.forEach(t),Qzt.forEach(t),bEr=i(Pa),N4=n(Pa,"P",{});var kze=s(N4);vEr=r(kze,"The model is set in evaluation mode by default using "),TCe=n(kze,"CODE",{});var Hzt=s(TCe);FEr=r(Hzt,"model.eval()"),Hzt.forEach(t),TEr=r(kze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MCe=n(kze,"CODE",{});var Jzt=s(MCe);MEr=r(Jzt,"model.train()"),Jzt.forEach(t),kze.forEach(t),EEr=i(Pa),T(q4.$$.fragment,Pa),Pa.forEach(t),Dl.forEach(t),BZe=i(m),dc=n(m,"H2",{class:!0});var Hoo=s(dc);j4=n(Hoo,"A",{id:!0,class:!0,href:!0});var Yzt=s(j4);ECe=n(Yzt,"SPAN",{});var Kzt=s(ECe);T(B$.$$.fragment,Kzt),Kzt.forEach(t),Yzt.forEach(t),CEr=i(Hoo),CCe=n(Hoo,"SPAN",{});var Zzt=s(CCe);wEr=r(Zzt,"AutoModelForVisualQuestionAnswering"),Zzt.forEach(t),Hoo.forEach(t),IZe=i(m),Ho=n(m,"DIV",{class:!0});var Gl=s(Ho);T(I$.$$.fragment,Gl),AEr=i(Gl),cc=n(Gl,"P",{});var nie=s(cc);LEr=r(nie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mK=n(nie,"A",{href:!0});var eQt=s(mK);yEr=r(eQt,"from_pretrained()"),eQt.forEach(t),xEr=r(nie," class method or the "),fK=n(nie,"A",{href:!0});var oQt=s(fK);$Er=r(oQt,"from_config()"),oQt.forEach(t),kEr=r(nie,` class
method.`),nie.forEach(t),SEr=i(Gl),N$=n(Gl,"P",{});var Joo=s(N$);REr=r(Joo,"This class cannot be instantiated directly using "),wCe=n(Joo,"CODE",{});var rQt=s(wCe);PEr=r(rQt,"__init__()"),rQt.forEach(t),BEr=r(Joo," (throws an error)."),Joo.forEach(t),IEr=i(Gl),Rt=n(Gl,"DIV",{class:!0});var f8=s(Rt);T(q$.$$.fragment,f8),NEr=i(f8),ACe=n(f8,"P",{});var tQt=s(ACe);qEr=r(tQt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),tQt.forEach(t),jEr=i(f8),mc=n(f8,"P",{});var sie=s(mc);DEr=r(sie,`Note:
Loading a model from its configuration file does `),LCe=n(sie,"STRONG",{});var aQt=s(LCe);GEr=r(aQt,"not"),aQt.forEach(t),OEr=r(sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(sie,"A",{href:!0});var nQt=s(gK);VEr=r(nQt,"from_pretrained()"),nQt.forEach(t),XEr=r(sie," to load the model weights."),sie.forEach(t),zEr=i(f8),T(D4.$$.fragment,f8),f8.forEach(t),QEr=i(Gl),uo=n(Gl,"DIV",{class:!0});var Ba=s(uo);T(j$.$$.fragment,Ba),WEr=i(Ba),yCe=n(Ba,"P",{});var sQt=s(yCe);UEr=r(sQt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),sQt.forEach(t),HEr=i(Ba),fn=n(Ba,"P",{});var g8=s(fn);JEr=r(g8,"The model class to instantiate is selected based on the "),xCe=n(g8,"CODE",{});var lQt=s(xCe);YEr=r(lQt,"model_type"),lQt.forEach(t),KEr=r(g8,` property of the config object (either
passed as an argument or loaded from `),$Ce=n(g8,"CODE",{});var iQt=s($Ce);ZEr=r(iQt,"pretrained_model_name_or_path"),iQt.forEach(t),e4r=r(g8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=n(g8,"CODE",{});var dQt=s(kCe);o4r=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),r4r=r(g8,":"),g8.forEach(t),t4r=i(Ba),SCe=n(Ba,"UL",{});var cQt=s(SCe);G4=n(cQt,"LI",{});var Sze=s(G4);RCe=n(Sze,"STRONG",{});var mQt=s(RCe);a4r=r(mQt,"vilt"),mQt.forEach(t),n4r=r(Sze," \u2014 "),hK=n(Sze,"A",{href:!0});var fQt=s(hK);s4r=r(fQt,"ViltForQuestionAnswering"),fQt.forEach(t),l4r=r(Sze," (ViLT model)"),Sze.forEach(t),cQt.forEach(t),i4r=i(Ba),O4=n(Ba,"P",{});var Rze=s(O4);d4r=r(Rze,"The model is set in evaluation mode by default using "),PCe=n(Rze,"CODE",{});var gQt=s(PCe);c4r=r(gQt,"model.eval()"),gQt.forEach(t),m4r=r(Rze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BCe=n(Rze,"CODE",{});var hQt=s(BCe);f4r=r(hQt,"model.train()"),hQt.forEach(t),Rze.forEach(t),g4r=i(Ba),T(V4.$$.fragment,Ba),Ba.forEach(t),Gl.forEach(t),NZe=i(m),fc=n(m,"H2",{class:!0});var Yoo=s(fc);X4=n(Yoo,"A",{id:!0,class:!0,href:!0});var uQt=s(X4);ICe=n(uQt,"SPAN",{});var pQt=s(ICe);T(D$.$$.fragment,pQt),pQt.forEach(t),uQt.forEach(t),h4r=i(Yoo),NCe=n(Yoo,"SPAN",{});var _Qt=s(NCe);u4r=r(_Qt,"AutoModelForAudioClassification"),_Qt.forEach(t),Yoo.forEach(t),qZe=i(m),Jo=n(m,"DIV",{class:!0});var Ol=s(Jo);T(G$.$$.fragment,Ol),p4r=i(Ol),gc=n(Ol,"P",{});var lie=s(gc);_4r=r(lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uK=n(lie,"A",{href:!0});var bQt=s(uK);b4r=r(bQt,"from_pretrained()"),bQt.forEach(t),v4r=r(lie," class method or the "),pK=n(lie,"A",{href:!0});var vQt=s(pK);F4r=r(vQt,"from_config()"),vQt.forEach(t),T4r=r(lie,` class
method.`),lie.forEach(t),M4r=i(Ol),O$=n(Ol,"P",{});var Koo=s(O$);E4r=r(Koo,"This class cannot be instantiated directly using "),qCe=n(Koo,"CODE",{});var FQt=s(qCe);C4r=r(FQt,"__init__()"),FQt.forEach(t),w4r=r(Koo," (throws an error)."),Koo.forEach(t),A4r=i(Ol),Pt=n(Ol,"DIV",{class:!0});var h8=s(Pt);T(V$.$$.fragment,h8),L4r=i(h8),jCe=n(h8,"P",{});var TQt=s(jCe);y4r=r(TQt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),TQt.forEach(t),x4r=i(h8),hc=n(h8,"P",{});var iie=s(hc);$4r=r(iie,`Note:
Loading a model from its configuration file does `),DCe=n(iie,"STRONG",{});var MQt=s(DCe);k4r=r(MQt,"not"),MQt.forEach(t),S4r=r(iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(iie,"A",{href:!0});var EQt=s(_K);R4r=r(EQt,"from_pretrained()"),EQt.forEach(t),P4r=r(iie," to load the model weights."),iie.forEach(t),B4r=i(h8),T(z4.$$.fragment,h8),h8.forEach(t),I4r=i(Ol),po=n(Ol,"DIV",{class:!0});var Ia=s(po);T(X$.$$.fragment,Ia),N4r=i(Ia),GCe=n(Ia,"P",{});var CQt=s(GCe);q4r=r(CQt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),CQt.forEach(t),j4r=i(Ia),gn=n(Ia,"P",{});var u8=s(gn);D4r=r(u8,"The model class to instantiate is selected based on the "),OCe=n(u8,"CODE",{});var wQt=s(OCe);G4r=r(wQt,"model_type"),wQt.forEach(t),O4r=r(u8,` property of the config object (either
passed as an argument or loaded from `),VCe=n(u8,"CODE",{});var AQt=s(VCe);V4r=r(AQt,"pretrained_model_name_or_path"),AQt.forEach(t),X4r=r(u8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(u8,"CODE",{});var LQt=s(XCe);z4r=r(LQt,"pretrained_model_name_or_path"),LQt.forEach(t),Q4r=r(u8,":"),u8.forEach(t),W4r=i(Ia),Pe=n(Ia,"UL",{});var Qe=s(Pe);Q4=n(Qe,"LI",{});var Pze=s(Q4);zCe=n(Pze,"STRONG",{});var yQt=s(zCe);U4r=r(yQt,"data2vec-audio"),yQt.forEach(t),H4r=r(Pze," \u2014 "),bK=n(Pze,"A",{href:!0});var xQt=s(bK);J4r=r(xQt,"Data2VecAudioForSequenceClassification"),xQt.forEach(t),Y4r=r(Pze," (Data2VecAudio model)"),Pze.forEach(t),K4r=i(Qe),W4=n(Qe,"LI",{});var Bze=s(W4);QCe=n(Bze,"STRONG",{});var $Qt=s(QCe);Z4r=r($Qt,"hubert"),$Qt.forEach(t),eCr=r(Bze," \u2014 "),vK=n(Bze,"A",{href:!0});var kQt=s(vK);oCr=r(kQt,"HubertForSequenceClassification"),kQt.forEach(t),rCr=r(Bze," (Hubert model)"),Bze.forEach(t),tCr=i(Qe),U4=n(Qe,"LI",{});var Ize=s(U4);WCe=n(Ize,"STRONG",{});var SQt=s(WCe);aCr=r(SQt,"sew"),SQt.forEach(t),nCr=r(Ize," \u2014 "),FK=n(Ize,"A",{href:!0});var RQt=s(FK);sCr=r(RQt,"SEWForSequenceClassification"),RQt.forEach(t),lCr=r(Ize," (SEW model)"),Ize.forEach(t),iCr=i(Qe),H4=n(Qe,"LI",{});var Nze=s(H4);UCe=n(Nze,"STRONG",{});var PQt=s(UCe);dCr=r(PQt,"sew-d"),PQt.forEach(t),cCr=r(Nze," \u2014 "),TK=n(Nze,"A",{href:!0});var BQt=s(TK);mCr=r(BQt,"SEWDForSequenceClassification"),BQt.forEach(t),fCr=r(Nze," (SEW-D model)"),Nze.forEach(t),gCr=i(Qe),J4=n(Qe,"LI",{});var qze=s(J4);HCe=n(qze,"STRONG",{});var IQt=s(HCe);hCr=r(IQt,"unispeech"),IQt.forEach(t),uCr=r(qze," \u2014 "),MK=n(qze,"A",{href:!0});var NQt=s(MK);pCr=r(NQt,"UniSpeechForSequenceClassification"),NQt.forEach(t),_Cr=r(qze," (UniSpeech model)"),qze.forEach(t),bCr=i(Qe),Y4=n(Qe,"LI",{});var jze=s(Y4);JCe=n(jze,"STRONG",{});var qQt=s(JCe);vCr=r(qQt,"unispeech-sat"),qQt.forEach(t),FCr=r(jze," \u2014 "),EK=n(jze,"A",{href:!0});var jQt=s(EK);TCr=r(jQt,"UniSpeechSatForSequenceClassification"),jQt.forEach(t),MCr=r(jze," (UniSpeechSat model)"),jze.forEach(t),ECr=i(Qe),K4=n(Qe,"LI",{});var Dze=s(K4);YCe=n(Dze,"STRONG",{});var DQt=s(YCe);CCr=r(DQt,"wav2vec2"),DQt.forEach(t),wCr=r(Dze," \u2014 "),CK=n(Dze,"A",{href:!0});var GQt=s(CK);ACr=r(GQt,"Wav2Vec2ForSequenceClassification"),GQt.forEach(t),LCr=r(Dze," (Wav2Vec2 model)"),Dze.forEach(t),yCr=i(Qe),Z4=n(Qe,"LI",{});var Gze=s(Z4);KCe=n(Gze,"STRONG",{});var OQt=s(KCe);xCr=r(OQt,"wav2vec2-conformer"),OQt.forEach(t),$Cr=r(Gze," \u2014 "),wK=n(Gze,"A",{href:!0});var VQt=s(wK);kCr=r(VQt,"Wav2Vec2ConformerForSequenceClassification"),VQt.forEach(t),SCr=r(Gze," (Wav2Vec2-Conformer model)"),Gze.forEach(t),RCr=i(Qe),eC=n(Qe,"LI",{});var Oze=s(eC);ZCe=n(Oze,"STRONG",{});var XQt=s(ZCe);PCr=r(XQt,"wavlm"),XQt.forEach(t),BCr=r(Oze," \u2014 "),AK=n(Oze,"A",{href:!0});var zQt=s(AK);ICr=r(zQt,"WavLMForSequenceClassification"),zQt.forEach(t),NCr=r(Oze," (WavLM model)"),Oze.forEach(t),Qe.forEach(t),qCr=i(Ia),oC=n(Ia,"P",{});var Vze=s(oC);jCr=r(Vze,"The model is set in evaluation mode by default using "),e3e=n(Vze,"CODE",{});var QQt=s(e3e);DCr=r(QQt,"model.eval()"),QQt.forEach(t),GCr=r(Vze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=n(Vze,"CODE",{});var WQt=s(o3e);OCr=r(WQt,"model.train()"),WQt.forEach(t),Vze.forEach(t),VCr=i(Ia),T(rC.$$.fragment,Ia),Ia.forEach(t),Ol.forEach(t),jZe=i(m),uc=n(m,"H2",{class:!0});var Zoo=s(uc);tC=n(Zoo,"A",{id:!0,class:!0,href:!0});var UQt=s(tC);r3e=n(UQt,"SPAN",{});var HQt=s(r3e);T(z$.$$.fragment,HQt),HQt.forEach(t),UQt.forEach(t),XCr=i(Zoo),t3e=n(Zoo,"SPAN",{});var JQt=s(t3e);zCr=r(JQt,"AutoModelForAudioFrameClassification"),JQt.forEach(t),Zoo.forEach(t),DZe=i(m),Yo=n(m,"DIV",{class:!0});var Vl=s(Yo);T(Q$.$$.fragment,Vl),QCr=i(Vl),pc=n(Vl,"P",{});var die=s(pc);WCr=r(die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LK=n(die,"A",{href:!0});var YQt=s(LK);UCr=r(YQt,"from_pretrained()"),YQt.forEach(t),HCr=r(die," class method or the "),yK=n(die,"A",{href:!0});var KQt=s(yK);JCr=r(KQt,"from_config()"),KQt.forEach(t),YCr=r(die,` class
method.`),die.forEach(t),KCr=i(Vl),W$=n(Vl,"P",{});var ero=s(W$);ZCr=r(ero,"This class cannot be instantiated directly using "),a3e=n(ero,"CODE",{});var ZQt=s(a3e);e3r=r(ZQt,"__init__()"),ZQt.forEach(t),o3r=r(ero," (throws an error)."),ero.forEach(t),r3r=i(Vl),Bt=n(Vl,"DIV",{class:!0});var p8=s(Bt);T(U$.$$.fragment,p8),t3r=i(p8),n3e=n(p8,"P",{});var eWt=s(n3e);a3r=r(eWt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eWt.forEach(t),n3r=i(p8),_c=n(p8,"P",{});var cie=s(_c);s3r=r(cie,`Note:
Loading a model from its configuration file does `),s3e=n(cie,"STRONG",{});var oWt=s(s3e);l3r=r(oWt,"not"),oWt.forEach(t),i3r=r(cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(cie,"A",{href:!0});var rWt=s(xK);d3r=r(rWt,"from_pretrained()"),rWt.forEach(t),c3r=r(cie," to load the model weights."),cie.forEach(t),m3r=i(p8),T(aC.$$.fragment,p8),p8.forEach(t),f3r=i(Vl),_o=n(Vl,"DIV",{class:!0});var Na=s(_o);T(H$.$$.fragment,Na),g3r=i(Na),l3e=n(Na,"P",{});var tWt=s(l3e);h3r=r(tWt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tWt.forEach(t),u3r=i(Na),hn=n(Na,"P",{});var _8=s(hn);p3r=r(_8,"The model class to instantiate is selected based on the "),i3e=n(_8,"CODE",{});var aWt=s(i3e);_3r=r(aWt,"model_type"),aWt.forEach(t),b3r=r(_8,` property of the config object (either
passed as an argument or loaded from `),d3e=n(_8,"CODE",{});var nWt=s(d3e);v3r=r(nWt,"pretrained_model_name_or_path"),nWt.forEach(t),F3r=r(_8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(_8,"CODE",{});var sWt=s(c3e);T3r=r(sWt,"pretrained_model_name_or_path"),sWt.forEach(t),M3r=r(_8,":"),_8.forEach(t),E3r=i(Na),mt=n(Na,"UL",{});var Xl=s(mt);nC=n(Xl,"LI",{});var Xze=s(nC);m3e=n(Xze,"STRONG",{});var lWt=s(m3e);C3r=r(lWt,"data2vec-audio"),lWt.forEach(t),w3r=r(Xze," \u2014 "),$K=n(Xze,"A",{href:!0});var iWt=s($K);A3r=r(iWt,"Data2VecAudioForAudioFrameClassification"),iWt.forEach(t),L3r=r(Xze," (Data2VecAudio model)"),Xze.forEach(t),y3r=i(Xl),sC=n(Xl,"LI",{});var zze=s(sC);f3e=n(zze,"STRONG",{});var dWt=s(f3e);x3r=r(dWt,"unispeech-sat"),dWt.forEach(t),$3r=r(zze," \u2014 "),kK=n(zze,"A",{href:!0});var cWt=s(kK);k3r=r(cWt,"UniSpeechSatForAudioFrameClassification"),cWt.forEach(t),S3r=r(zze," (UniSpeechSat model)"),zze.forEach(t),R3r=i(Xl),lC=n(Xl,"LI",{});var Qze=s(lC);g3e=n(Qze,"STRONG",{});var mWt=s(g3e);P3r=r(mWt,"wav2vec2"),mWt.forEach(t),B3r=r(Qze," \u2014 "),SK=n(Qze,"A",{href:!0});var fWt=s(SK);I3r=r(fWt,"Wav2Vec2ForAudioFrameClassification"),fWt.forEach(t),N3r=r(Qze," (Wav2Vec2 model)"),Qze.forEach(t),q3r=i(Xl),iC=n(Xl,"LI",{});var Wze=s(iC);h3e=n(Wze,"STRONG",{});var gWt=s(h3e);j3r=r(gWt,"wav2vec2-conformer"),gWt.forEach(t),D3r=r(Wze," \u2014 "),RK=n(Wze,"A",{href:!0});var hWt=s(RK);G3r=r(hWt,"Wav2Vec2ConformerForAudioFrameClassification"),hWt.forEach(t),O3r=r(Wze," (Wav2Vec2-Conformer model)"),Wze.forEach(t),V3r=i(Xl),dC=n(Xl,"LI",{});var Uze=s(dC);u3e=n(Uze,"STRONG",{});var uWt=s(u3e);X3r=r(uWt,"wavlm"),uWt.forEach(t),z3r=r(Uze," \u2014 "),PK=n(Uze,"A",{href:!0});var pWt=s(PK);Q3r=r(pWt,"WavLMForAudioFrameClassification"),pWt.forEach(t),W3r=r(Uze," (WavLM model)"),Uze.forEach(t),Xl.forEach(t),U3r=i(Na),cC=n(Na,"P",{});var Hze=s(cC);H3r=r(Hze,"The model is set in evaluation mode by default using "),p3e=n(Hze,"CODE",{});var _Wt=s(p3e);J3r=r(_Wt,"model.eval()"),_Wt.forEach(t),Y3r=r(Hze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_3e=n(Hze,"CODE",{});var bWt=s(_3e);K3r=r(bWt,"model.train()"),bWt.forEach(t),Hze.forEach(t),Z3r=i(Na),T(mC.$$.fragment,Na),Na.forEach(t),Vl.forEach(t),GZe=i(m),bc=n(m,"H2",{class:!0});var oro=s(bc);fC=n(oro,"A",{id:!0,class:!0,href:!0});var vWt=s(fC);b3e=n(vWt,"SPAN",{});var FWt=s(b3e);T(J$.$$.fragment,FWt),FWt.forEach(t),vWt.forEach(t),e5r=i(oro),v3e=n(oro,"SPAN",{});var TWt=s(v3e);o5r=r(TWt,"AutoModelForCTC"),TWt.forEach(t),oro.forEach(t),OZe=i(m),Ko=n(m,"DIV",{class:!0});var zl=s(Ko);T(Y$.$$.fragment,zl),r5r=i(zl),vc=n(zl,"P",{});var mie=s(vc);t5r=r(mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BK=n(mie,"A",{href:!0});var MWt=s(BK);a5r=r(MWt,"from_pretrained()"),MWt.forEach(t),n5r=r(mie," class method or the "),IK=n(mie,"A",{href:!0});var EWt=s(IK);s5r=r(EWt,"from_config()"),EWt.forEach(t),l5r=r(mie,` class
method.`),mie.forEach(t),i5r=i(zl),K$=n(zl,"P",{});var rro=s(K$);d5r=r(rro,"This class cannot be instantiated directly using "),F3e=n(rro,"CODE",{});var CWt=s(F3e);c5r=r(CWt,"__init__()"),CWt.forEach(t),m5r=r(rro," (throws an error)."),rro.forEach(t),f5r=i(zl),It=n(zl,"DIV",{class:!0});var b8=s(It);T(Z$.$$.fragment,b8),g5r=i(b8),T3e=n(b8,"P",{});var wWt=s(T3e);h5r=r(wWt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),wWt.forEach(t),u5r=i(b8),Fc=n(b8,"P",{});var fie=s(Fc);p5r=r(fie,`Note:
Loading a model from its configuration file does `),M3e=n(fie,"STRONG",{});var AWt=s(M3e);_5r=r(AWt,"not"),AWt.forEach(t),b5r=r(fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(fie,"A",{href:!0});var LWt=s(NK);v5r=r(LWt,"from_pretrained()"),LWt.forEach(t),F5r=r(fie," to load the model weights."),fie.forEach(t),T5r=i(b8),T(gC.$$.fragment,b8),b8.forEach(t),M5r=i(zl),bo=n(zl,"DIV",{class:!0});var qa=s(bo);T(ek.$$.fragment,qa),E5r=i(qa),E3e=n(qa,"P",{});var yWt=s(E3e);C5r=r(yWt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),yWt.forEach(t),w5r=i(qa),un=n(qa,"P",{});var v8=s(un);A5r=r(v8,"The model class to instantiate is selected based on the "),C3e=n(v8,"CODE",{});var xWt=s(C3e);L5r=r(xWt,"model_type"),xWt.forEach(t),y5r=r(v8,` property of the config object (either
passed as an argument or loaded from `),w3e=n(v8,"CODE",{});var $Wt=s(w3e);x5r=r($Wt,"pretrained_model_name_or_path"),$Wt.forEach(t),$5r=r(v8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=n(v8,"CODE",{});var kWt=s(A3e);k5r=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),S5r=r(v8,":"),v8.forEach(t),R5r=i(qa),Le=n(qa,"UL",{});var Ie=s(Le);hC=n(Ie,"LI",{});var Jze=s(hC);L3e=n(Jze,"STRONG",{});var SWt=s(L3e);P5r=r(SWt,"data2vec-audio"),SWt.forEach(t),B5r=r(Jze," \u2014 "),qK=n(Jze,"A",{href:!0});var RWt=s(qK);I5r=r(RWt,"Data2VecAudioForCTC"),RWt.forEach(t),N5r=r(Jze," (Data2VecAudio model)"),Jze.forEach(t),q5r=i(Ie),uC=n(Ie,"LI",{});var Yze=s(uC);y3e=n(Yze,"STRONG",{});var PWt=s(y3e);j5r=r(PWt,"hubert"),PWt.forEach(t),D5r=r(Yze," \u2014 "),jK=n(Yze,"A",{href:!0});var BWt=s(jK);G5r=r(BWt,"HubertForCTC"),BWt.forEach(t),O5r=r(Yze," (Hubert model)"),Yze.forEach(t),V5r=i(Ie),pC=n(Ie,"LI",{});var Kze=s(pC);x3e=n(Kze,"STRONG",{});var IWt=s(x3e);X5r=r(IWt,"mctct"),IWt.forEach(t),z5r=r(Kze," \u2014 "),DK=n(Kze,"A",{href:!0});var NWt=s(DK);Q5r=r(NWt,"MCTCTForCTC"),NWt.forEach(t),W5r=r(Kze," (M-CTC-T model)"),Kze.forEach(t),U5r=i(Ie),_C=n(Ie,"LI",{});var Zze=s(_C);$3e=n(Zze,"STRONG",{});var qWt=s($3e);H5r=r(qWt,"sew"),qWt.forEach(t),J5r=r(Zze," \u2014 "),GK=n(Zze,"A",{href:!0});var jWt=s(GK);Y5r=r(jWt,"SEWForCTC"),jWt.forEach(t),K5r=r(Zze," (SEW model)"),Zze.forEach(t),Z5r=i(Ie),bC=n(Ie,"LI",{});var eQe=s(bC);k3e=n(eQe,"STRONG",{});var DWt=s(k3e);e0r=r(DWt,"sew-d"),DWt.forEach(t),o0r=r(eQe," \u2014 "),OK=n(eQe,"A",{href:!0});var GWt=s(OK);r0r=r(GWt,"SEWDForCTC"),GWt.forEach(t),t0r=r(eQe," (SEW-D model)"),eQe.forEach(t),a0r=i(Ie),vC=n(Ie,"LI",{});var oQe=s(vC);S3e=n(oQe,"STRONG",{});var OWt=s(S3e);n0r=r(OWt,"unispeech"),OWt.forEach(t),s0r=r(oQe," \u2014 "),VK=n(oQe,"A",{href:!0});var VWt=s(VK);l0r=r(VWt,"UniSpeechForCTC"),VWt.forEach(t),i0r=r(oQe," (UniSpeech model)"),oQe.forEach(t),d0r=i(Ie),FC=n(Ie,"LI",{});var rQe=s(FC);R3e=n(rQe,"STRONG",{});var XWt=s(R3e);c0r=r(XWt,"unispeech-sat"),XWt.forEach(t),m0r=r(rQe," \u2014 "),XK=n(rQe,"A",{href:!0});var zWt=s(XK);f0r=r(zWt,"UniSpeechSatForCTC"),zWt.forEach(t),g0r=r(rQe," (UniSpeechSat model)"),rQe.forEach(t),h0r=i(Ie),TC=n(Ie,"LI",{});var tQe=s(TC);P3e=n(tQe,"STRONG",{});var QWt=s(P3e);u0r=r(QWt,"wav2vec2"),QWt.forEach(t),p0r=r(tQe," \u2014 "),zK=n(tQe,"A",{href:!0});var WWt=s(zK);_0r=r(WWt,"Wav2Vec2ForCTC"),WWt.forEach(t),b0r=r(tQe," (Wav2Vec2 model)"),tQe.forEach(t),v0r=i(Ie),MC=n(Ie,"LI",{});var aQe=s(MC);B3e=n(aQe,"STRONG",{});var UWt=s(B3e);F0r=r(UWt,"wav2vec2-conformer"),UWt.forEach(t),T0r=r(aQe," \u2014 "),QK=n(aQe,"A",{href:!0});var HWt=s(QK);M0r=r(HWt,"Wav2Vec2ConformerForCTC"),HWt.forEach(t),E0r=r(aQe," (Wav2Vec2-Conformer model)"),aQe.forEach(t),C0r=i(Ie),EC=n(Ie,"LI",{});var nQe=s(EC);I3e=n(nQe,"STRONG",{});var JWt=s(I3e);w0r=r(JWt,"wavlm"),JWt.forEach(t),A0r=r(nQe," \u2014 "),WK=n(nQe,"A",{href:!0});var YWt=s(WK);L0r=r(YWt,"WavLMForCTC"),YWt.forEach(t),y0r=r(nQe," (WavLM model)"),nQe.forEach(t),Ie.forEach(t),x0r=i(qa),CC=n(qa,"P",{});var sQe=s(CC);$0r=r(sQe,"The model is set in evaluation mode by default using "),N3e=n(sQe,"CODE",{});var KWt=s(N3e);k0r=r(KWt,"model.eval()"),KWt.forEach(t),S0r=r(sQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q3e=n(sQe,"CODE",{});var ZWt=s(q3e);R0r=r(ZWt,"model.train()"),ZWt.forEach(t),sQe.forEach(t),P0r=i(qa),T(wC.$$.fragment,qa),qa.forEach(t),zl.forEach(t),VZe=i(m),Tc=n(m,"H2",{class:!0});var tro=s(Tc);AC=n(tro,"A",{id:!0,class:!0,href:!0});var eUt=s(AC);j3e=n(eUt,"SPAN",{});var oUt=s(j3e);T(ok.$$.fragment,oUt),oUt.forEach(t),eUt.forEach(t),B0r=i(tro),D3e=n(tro,"SPAN",{});var rUt=s(D3e);I0r=r(rUt,"AutoModelForSpeechSeq2Seq"),rUt.forEach(t),tro.forEach(t),XZe=i(m),Zo=n(m,"DIV",{class:!0});var Ql=s(Zo);T(rk.$$.fragment,Ql),N0r=i(Ql),Mc=n(Ql,"P",{});var gie=s(Mc);q0r=r(gie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UK=n(gie,"A",{href:!0});var tUt=s(UK);j0r=r(tUt,"from_pretrained()"),tUt.forEach(t),D0r=r(gie," class method or the "),HK=n(gie,"A",{href:!0});var aUt=s(HK);G0r=r(aUt,"from_config()"),aUt.forEach(t),O0r=r(gie,` class
method.`),gie.forEach(t),V0r=i(Ql),tk=n(Ql,"P",{});var aro=s(tk);X0r=r(aro,"This class cannot be instantiated directly using "),G3e=n(aro,"CODE",{});var nUt=s(G3e);z0r=r(nUt,"__init__()"),nUt.forEach(t),Q0r=r(aro," (throws an error)."),aro.forEach(t),W0r=i(Ql),Nt=n(Ql,"DIV",{class:!0});var F8=s(Nt);T(ak.$$.fragment,F8),U0r=i(F8),O3e=n(F8,"P",{});var sUt=s(O3e);H0r=r(sUt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sUt.forEach(t),J0r=i(F8),Ec=n(F8,"P",{});var hie=s(Ec);Y0r=r(hie,`Note:
Loading a model from its configuration file does `),V3e=n(hie,"STRONG",{});var lUt=s(V3e);K0r=r(lUt,"not"),lUt.forEach(t),Z0r=r(hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(hie,"A",{href:!0});var iUt=s(JK);ewr=r(iUt,"from_pretrained()"),iUt.forEach(t),owr=r(hie," to load the model weights."),hie.forEach(t),rwr=i(F8),T(LC.$$.fragment,F8),F8.forEach(t),twr=i(Ql),vo=n(Ql,"DIV",{class:!0});var ja=s(vo);T(nk.$$.fragment,ja),awr=i(ja),X3e=n(ja,"P",{});var dUt=s(X3e);nwr=r(dUt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dUt.forEach(t),swr=i(ja),pn=n(ja,"P",{});var T8=s(pn);lwr=r(T8,"The model class to instantiate is selected based on the "),z3e=n(T8,"CODE",{});var cUt=s(z3e);iwr=r(cUt,"model_type"),cUt.forEach(t),dwr=r(T8,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(T8,"CODE",{});var mUt=s(Q3e);cwr=r(mUt,"pretrained_model_name_or_path"),mUt.forEach(t),mwr=r(T8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(T8,"CODE",{});var fUt=s(W3e);fwr=r(fUt,"pretrained_model_name_or_path"),fUt.forEach(t),gwr=r(T8,":"),T8.forEach(t),hwr=i(ja),sk=n(ja,"UL",{});var nro=s(sk);yC=n(nro,"LI",{});var lQe=s(yC);U3e=n(lQe,"STRONG",{});var gUt=s(U3e);uwr=r(gUt,"speech-encoder-decoder"),gUt.forEach(t),pwr=r(lQe," \u2014 "),YK=n(lQe,"A",{href:!0});var hUt=s(YK);_wr=r(hUt,"SpeechEncoderDecoderModel"),hUt.forEach(t),bwr=r(lQe," (Speech Encoder decoder model)"),lQe.forEach(t),vwr=i(nro),xC=n(nro,"LI",{});var iQe=s(xC);H3e=n(iQe,"STRONG",{});var uUt=s(H3e);Fwr=r(uUt,"speech_to_text"),uUt.forEach(t),Twr=r(iQe," \u2014 "),KK=n(iQe,"A",{href:!0});var pUt=s(KK);Mwr=r(pUt,"Speech2TextForConditionalGeneration"),pUt.forEach(t),Ewr=r(iQe," (Speech2Text model)"),iQe.forEach(t),nro.forEach(t),Cwr=i(ja),$C=n(ja,"P",{});var dQe=s($C);wwr=r(dQe,"The model is set in evaluation mode by default using "),J3e=n(dQe,"CODE",{});var _Ut=s(J3e);Awr=r(_Ut,"model.eval()"),_Ut.forEach(t),Lwr=r(dQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y3e=n(dQe,"CODE",{});var bUt=s(Y3e);ywr=r(bUt,"model.train()"),bUt.forEach(t),dQe.forEach(t),xwr=i(ja),T(kC.$$.fragment,ja),ja.forEach(t),Ql.forEach(t),zZe=i(m),Cc=n(m,"H2",{class:!0});var sro=s(Cc);SC=n(sro,"A",{id:!0,class:!0,href:!0});var vUt=s(SC);K3e=n(vUt,"SPAN",{});var FUt=s(K3e);T(lk.$$.fragment,FUt),FUt.forEach(t),vUt.forEach(t),$wr=i(sro),Z3e=n(sro,"SPAN",{});var TUt=s(Z3e);kwr=r(TUt,"AutoModelForAudioXVector"),TUt.forEach(t),sro.forEach(t),QZe=i(m),er=n(m,"DIV",{class:!0});var Wl=s(er);T(ik.$$.fragment,Wl),Swr=i(Wl),wc=n(Wl,"P",{});var uie=s(wc);Rwr=r(uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZK=n(uie,"A",{href:!0});var MUt=s(ZK);Pwr=r(MUt,"from_pretrained()"),MUt.forEach(t),Bwr=r(uie," class method or the "),eZ=n(uie,"A",{href:!0});var EUt=s(eZ);Iwr=r(EUt,"from_config()"),EUt.forEach(t),Nwr=r(uie,` class
method.`),uie.forEach(t),qwr=i(Wl),dk=n(Wl,"P",{});var lro=s(dk);jwr=r(lro,"This class cannot be instantiated directly using "),e5e=n(lro,"CODE",{});var CUt=s(e5e);Dwr=r(CUt,"__init__()"),CUt.forEach(t),Gwr=r(lro," (throws an error)."),lro.forEach(t),Owr=i(Wl),qt=n(Wl,"DIV",{class:!0});var M8=s(qt);T(ck.$$.fragment,M8),Vwr=i(M8),o5e=n(M8,"P",{});var wUt=s(o5e);Xwr=r(wUt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),wUt.forEach(t),zwr=i(M8),Ac=n(M8,"P",{});var pie=s(Ac);Qwr=r(pie,`Note:
Loading a model from its configuration file does `),r5e=n(pie,"STRONG",{});var AUt=s(r5e);Wwr=r(AUt,"not"),AUt.forEach(t),Uwr=r(pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=n(pie,"A",{href:!0});var LUt=s(oZ);Hwr=r(LUt,"from_pretrained()"),LUt.forEach(t),Jwr=r(pie," to load the model weights."),pie.forEach(t),Ywr=i(M8),T(RC.$$.fragment,M8),M8.forEach(t),Kwr=i(Wl),Fo=n(Wl,"DIV",{class:!0});var Da=s(Fo);T(mk.$$.fragment,Da),Zwr=i(Da),t5e=n(Da,"P",{});var yUt=s(t5e);eAr=r(yUt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),yUt.forEach(t),oAr=i(Da),_n=n(Da,"P",{});var E8=s(_n);rAr=r(E8,"The model class to instantiate is selected based on the "),a5e=n(E8,"CODE",{});var xUt=s(a5e);tAr=r(xUt,"model_type"),xUt.forEach(t),aAr=r(E8,` property of the config object (either
passed as an argument or loaded from `),n5e=n(E8,"CODE",{});var $Ut=s(n5e);nAr=r($Ut,"pretrained_model_name_or_path"),$Ut.forEach(t),sAr=r(E8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(E8,"CODE",{});var kUt=s(s5e);lAr=r(kUt,"pretrained_model_name_or_path"),kUt.forEach(t),iAr=r(E8,":"),E8.forEach(t),dAr=i(Da),ft=n(Da,"UL",{});var Ul=s(ft);PC=n(Ul,"LI",{});var cQe=s(PC);l5e=n(cQe,"STRONG",{});var SUt=s(l5e);cAr=r(SUt,"data2vec-audio"),SUt.forEach(t),mAr=r(cQe," \u2014 "),rZ=n(cQe,"A",{href:!0});var RUt=s(rZ);fAr=r(RUt,"Data2VecAudioForXVector"),RUt.forEach(t),gAr=r(cQe," (Data2VecAudio model)"),cQe.forEach(t),hAr=i(Ul),BC=n(Ul,"LI",{});var mQe=s(BC);i5e=n(mQe,"STRONG",{});var PUt=s(i5e);uAr=r(PUt,"unispeech-sat"),PUt.forEach(t),pAr=r(mQe," \u2014 "),tZ=n(mQe,"A",{href:!0});var BUt=s(tZ);_Ar=r(BUt,"UniSpeechSatForXVector"),BUt.forEach(t),bAr=r(mQe," (UniSpeechSat model)"),mQe.forEach(t),vAr=i(Ul),IC=n(Ul,"LI",{});var fQe=s(IC);d5e=n(fQe,"STRONG",{});var IUt=s(d5e);FAr=r(IUt,"wav2vec2"),IUt.forEach(t),TAr=r(fQe," \u2014 "),aZ=n(fQe,"A",{href:!0});var NUt=s(aZ);MAr=r(NUt,"Wav2Vec2ForXVector"),NUt.forEach(t),EAr=r(fQe," (Wav2Vec2 model)"),fQe.forEach(t),CAr=i(Ul),NC=n(Ul,"LI",{});var gQe=s(NC);c5e=n(gQe,"STRONG",{});var qUt=s(c5e);wAr=r(qUt,"wav2vec2-conformer"),qUt.forEach(t),AAr=r(gQe," \u2014 "),nZ=n(gQe,"A",{href:!0});var jUt=s(nZ);LAr=r(jUt,"Wav2Vec2ConformerForXVector"),jUt.forEach(t),yAr=r(gQe," (Wav2Vec2-Conformer model)"),gQe.forEach(t),xAr=i(Ul),qC=n(Ul,"LI",{});var hQe=s(qC);m5e=n(hQe,"STRONG",{});var DUt=s(m5e);$Ar=r(DUt,"wavlm"),DUt.forEach(t),kAr=r(hQe," \u2014 "),sZ=n(hQe,"A",{href:!0});var GUt=s(sZ);SAr=r(GUt,"WavLMForXVector"),GUt.forEach(t),RAr=r(hQe," (WavLM model)"),hQe.forEach(t),Ul.forEach(t),PAr=i(Da),jC=n(Da,"P",{});var uQe=s(jC);BAr=r(uQe,"The model is set in evaluation mode by default using "),f5e=n(uQe,"CODE",{});var OUt=s(f5e);IAr=r(OUt,"model.eval()"),OUt.forEach(t),NAr=r(uQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g5e=n(uQe,"CODE",{});var VUt=s(g5e);qAr=r(VUt,"model.train()"),VUt.forEach(t),uQe.forEach(t),jAr=i(Da),T(DC.$$.fragment,Da),Da.forEach(t),Wl.forEach(t),WZe=i(m),Lc=n(m,"H2",{class:!0});var iro=s(Lc);GC=n(iro,"A",{id:!0,class:!0,href:!0});var XUt=s(GC);h5e=n(XUt,"SPAN",{});var zUt=s(h5e);T(fk.$$.fragment,zUt),zUt.forEach(t),XUt.forEach(t),DAr=i(iro),u5e=n(iro,"SPAN",{});var QUt=s(u5e);GAr=r(QUt,"AutoModelForMaskedImageModeling"),QUt.forEach(t),iro.forEach(t),UZe=i(m),or=n(m,"DIV",{class:!0});var Hl=s(or);T(gk.$$.fragment,Hl),OAr=i(Hl),yc=n(Hl,"P",{});var _ie=s(yc);VAr=r(_ie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lZ=n(_ie,"A",{href:!0});var WUt=s(lZ);XAr=r(WUt,"from_pretrained()"),WUt.forEach(t),zAr=r(_ie," class method or the "),iZ=n(_ie,"A",{href:!0});var UUt=s(iZ);QAr=r(UUt,"from_config()"),UUt.forEach(t),WAr=r(_ie,` class
method.`),_ie.forEach(t),UAr=i(Hl),hk=n(Hl,"P",{});var dro=s(hk);HAr=r(dro,"This class cannot be instantiated directly using "),p5e=n(dro,"CODE",{});var HUt=s(p5e);JAr=r(HUt,"__init__()"),HUt.forEach(t),YAr=r(dro," (throws an error)."),dro.forEach(t),KAr=i(Hl),jt=n(Hl,"DIV",{class:!0});var C8=s(jt);T(uk.$$.fragment,C8),ZAr=i(C8),_5e=n(C8,"P",{});var JUt=s(_5e);e6r=r(JUt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),JUt.forEach(t),o6r=i(C8),xc=n(C8,"P",{});var bie=s(xc);r6r=r(bie,`Note:
Loading a model from its configuration file does `),b5e=n(bie,"STRONG",{});var YUt=s(b5e);t6r=r(YUt,"not"),YUt.forEach(t),a6r=r(bie,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(bie,"A",{href:!0});var KUt=s(dZ);n6r=r(KUt,"from_pretrained()"),KUt.forEach(t),s6r=r(bie," to load the model weights."),bie.forEach(t),l6r=i(C8),T(OC.$$.fragment,C8),C8.forEach(t),i6r=i(Hl),To=n(Hl,"DIV",{class:!0});var Ga=s(To);T(pk.$$.fragment,Ga),d6r=i(Ga),v5e=n(Ga,"P",{});var ZUt=s(v5e);c6r=r(ZUt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ZUt.forEach(t),m6r=i(Ga),bn=n(Ga,"P",{});var w8=s(bn);f6r=r(w8,"The model class to instantiate is selected based on the "),F5e=n(w8,"CODE",{});var eHt=s(F5e);g6r=r(eHt,"model_type"),eHt.forEach(t),h6r=r(w8,` property of the config object (either
passed as an argument or loaded from `),T5e=n(w8,"CODE",{});var oHt=s(T5e);u6r=r(oHt,"pretrained_model_name_or_path"),oHt.forEach(t),p6r=r(w8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=n(w8,"CODE",{});var rHt=s(M5e);_6r=r(rHt,"pretrained_model_name_or_path"),rHt.forEach(t),b6r=r(w8,":"),w8.forEach(t),v6r=i(Ga),vn=n(Ga,"UL",{});var A8=s(vn);VC=n(A8,"LI",{});var pQe=s(VC);E5e=n(pQe,"STRONG",{});var tHt=s(E5e);F6r=r(tHt,"deit"),tHt.forEach(t),T6r=r(pQe," \u2014 "),cZ=n(pQe,"A",{href:!0});var aHt=s(cZ);M6r=r(aHt,"DeiTForMaskedImageModeling"),aHt.forEach(t),E6r=r(pQe," (DeiT model)"),pQe.forEach(t),C6r=i(A8),XC=n(A8,"LI",{});var _Qe=s(XC);C5e=n(_Qe,"STRONG",{});var nHt=s(C5e);w6r=r(nHt,"swin"),nHt.forEach(t),A6r=r(_Qe," \u2014 "),mZ=n(_Qe,"A",{href:!0});var sHt=s(mZ);L6r=r(sHt,"SwinForMaskedImageModeling"),sHt.forEach(t),y6r=r(_Qe," (Swin Transformer model)"),_Qe.forEach(t),x6r=i(A8),zC=n(A8,"LI",{});var bQe=s(zC);w5e=n(bQe,"STRONG",{});var lHt=s(w5e);$6r=r(lHt,"swinv2"),lHt.forEach(t),k6r=r(bQe," \u2014 "),fZ=n(bQe,"A",{href:!0});var iHt=s(fZ);S6r=r(iHt,"Swinv2ForMaskedImageModeling"),iHt.forEach(t),R6r=r(bQe," (Swin Transformer V2 model)"),bQe.forEach(t),P6r=i(A8),QC=n(A8,"LI",{});var vQe=s(QC);A5e=n(vQe,"STRONG",{});var dHt=s(A5e);B6r=r(dHt,"vit"),dHt.forEach(t),I6r=r(vQe," \u2014 "),gZ=n(vQe,"A",{href:!0});var cHt=s(gZ);N6r=r(cHt,"ViTForMaskedImageModeling"),cHt.forEach(t),q6r=r(vQe," (ViT model)"),vQe.forEach(t),A8.forEach(t),j6r=i(Ga),WC=n(Ga,"P",{});var FQe=s(WC);D6r=r(FQe,"The model is set in evaluation mode by default using "),L5e=n(FQe,"CODE",{});var mHt=s(L5e);G6r=r(mHt,"model.eval()"),mHt.forEach(t),O6r=r(FQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y5e=n(FQe,"CODE",{});var fHt=s(y5e);V6r=r(fHt,"model.train()"),fHt.forEach(t),FQe.forEach(t),X6r=i(Ga),T(UC.$$.fragment,Ga),Ga.forEach(t),Hl.forEach(t),HZe=i(m),$c=n(m,"H2",{class:!0});var cro=s($c);HC=n(cro,"A",{id:!0,class:!0,href:!0});var gHt=s(HC);x5e=n(gHt,"SPAN",{});var hHt=s(x5e);T(_k.$$.fragment,hHt),hHt.forEach(t),gHt.forEach(t),z6r=i(cro),$5e=n(cro,"SPAN",{});var uHt=s($5e);Q6r=r(uHt,"AutoModelForObjectDetection"),uHt.forEach(t),cro.forEach(t),JZe=i(m),rr=n(m,"DIV",{class:!0});var Jl=s(rr);T(bk.$$.fragment,Jl),W6r=i(Jl),kc=n(Jl,"P",{});var vie=s(kc);U6r=r(vie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),hZ=n(vie,"A",{href:!0});var pHt=s(hZ);H6r=r(pHt,"from_pretrained()"),pHt.forEach(t),J6r=r(vie," class method or the "),uZ=n(vie,"A",{href:!0});var _Ht=s(uZ);Y6r=r(_Ht,"from_config()"),_Ht.forEach(t),K6r=r(vie,` class
method.`),vie.forEach(t),Z6r=i(Jl),vk=n(Jl,"P",{});var mro=s(vk);e7r=r(mro,"This class cannot be instantiated directly using "),k5e=n(mro,"CODE",{});var bHt=s(k5e);o7r=r(bHt,"__init__()"),bHt.forEach(t),r7r=r(mro," (throws an error)."),mro.forEach(t),t7r=i(Jl),Dt=n(Jl,"DIV",{class:!0});var L8=s(Dt);T(Fk.$$.fragment,L8),a7r=i(L8),S5e=n(L8,"P",{});var vHt=s(S5e);n7r=r(vHt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),vHt.forEach(t),s7r=i(L8),Sc=n(L8,"P",{});var Fie=s(Sc);l7r=r(Fie,`Note:
Loading a model from its configuration file does `),R5e=n(Fie,"STRONG",{});var FHt=s(R5e);i7r=r(FHt,"not"),FHt.forEach(t),d7r=r(Fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(Fie,"A",{href:!0});var THt=s(pZ);c7r=r(THt,"from_pretrained()"),THt.forEach(t),m7r=r(Fie," to load the model weights."),Fie.forEach(t),f7r=i(L8),T(JC.$$.fragment,L8),L8.forEach(t),g7r=i(Jl),Mo=n(Jl,"DIV",{class:!0});var Oa=s(Mo);T(Tk.$$.fragment,Oa),h7r=i(Oa),P5e=n(Oa,"P",{});var MHt=s(P5e);u7r=r(MHt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),MHt.forEach(t),p7r=i(Oa),Fn=n(Oa,"P",{});var y8=s(Fn);_7r=r(y8,"The model class to instantiate is selected based on the "),B5e=n(y8,"CODE",{});var EHt=s(B5e);b7r=r(EHt,"model_type"),EHt.forEach(t),v7r=r(y8,` property of the config object (either
passed as an argument or loaded from `),I5e=n(y8,"CODE",{});var CHt=s(I5e);F7r=r(CHt,"pretrained_model_name_or_path"),CHt.forEach(t),T7r=r(y8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(y8,"CODE",{});var wHt=s(N5e);M7r=r(wHt,"pretrained_model_name_or_path"),wHt.forEach(t),E7r=r(y8,":"),y8.forEach(t),C7r=i(Oa),Tn=n(Oa,"UL",{});var x8=s(Tn);YC=n(x8,"LI",{});var TQe=s(YC);q5e=n(TQe,"STRONG",{});var AHt=s(q5e);w7r=r(AHt,"conditional_detr"),AHt.forEach(t),A7r=r(TQe," \u2014 "),_Z=n(TQe,"A",{href:!0});var LHt=s(_Z);L7r=r(LHt,"ConditionalDetrForObjectDetection"),LHt.forEach(t),y7r=r(TQe," (Conditional DETR model)"),TQe.forEach(t),x7r=i(x8),KC=n(x8,"LI",{});var MQe=s(KC);j5e=n(MQe,"STRONG",{});var yHt=s(j5e);$7r=r(yHt,"deformable_detr"),yHt.forEach(t),k7r=r(MQe," \u2014 "),bZ=n(MQe,"A",{href:!0});var xHt=s(bZ);S7r=r(xHt,"DeformableDetrForObjectDetection"),xHt.forEach(t),R7r=r(MQe," (Deformable DETR model)"),MQe.forEach(t),P7r=i(x8),ZC=n(x8,"LI",{});var EQe=s(ZC);D5e=n(EQe,"STRONG",{});var $Ht=s(D5e);B7r=r($Ht,"detr"),$Ht.forEach(t),I7r=r(EQe," \u2014 "),vZ=n(EQe,"A",{href:!0});var kHt=s(vZ);N7r=r(kHt,"DetrForObjectDetection"),kHt.forEach(t),q7r=r(EQe," (DETR model)"),EQe.forEach(t),j7r=i(x8),e3=n(x8,"LI",{});var CQe=s(e3);G5e=n(CQe,"STRONG",{});var SHt=s(G5e);D7r=r(SHt,"yolos"),SHt.forEach(t),G7r=r(CQe," \u2014 "),FZ=n(CQe,"A",{href:!0});var RHt=s(FZ);O7r=r(RHt,"YolosForObjectDetection"),RHt.forEach(t),V7r=r(CQe," (YOLOS model)"),CQe.forEach(t),x8.forEach(t),X7r=i(Oa),o3=n(Oa,"P",{});var wQe=s(o3);z7r=r(wQe,"The model is set in evaluation mode by default using "),O5e=n(wQe,"CODE",{});var PHt=s(O5e);Q7r=r(PHt,"model.eval()"),PHt.forEach(t),W7r=r(wQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V5e=n(wQe,"CODE",{});var BHt=s(V5e);U7r=r(BHt,"model.train()"),BHt.forEach(t),wQe.forEach(t),H7r=i(Oa),T(r3.$$.fragment,Oa),Oa.forEach(t),Jl.forEach(t),YZe=i(m),Rc=n(m,"H2",{class:!0});var fro=s(Rc);t3=n(fro,"A",{id:!0,class:!0,href:!0});var IHt=s(t3);X5e=n(IHt,"SPAN",{});var NHt=s(X5e);T(Mk.$$.fragment,NHt),NHt.forEach(t),IHt.forEach(t),J7r=i(fro),z5e=n(fro,"SPAN",{});var qHt=s(z5e);Y7r=r(qHt,"AutoModelForImageSegmentation"),qHt.forEach(t),fro.forEach(t),KZe=i(m),tr=n(m,"DIV",{class:!0});var Yl=s(tr);T(Ek.$$.fragment,Yl),K7r=i(Yl),Pc=n(Yl,"P",{});var Tie=s(Pc);Z7r=r(Tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),TZ=n(Tie,"A",{href:!0});var jHt=s(TZ);eLr=r(jHt,"from_pretrained()"),jHt.forEach(t),oLr=r(Tie," class method or the "),MZ=n(Tie,"A",{href:!0});var DHt=s(MZ);rLr=r(DHt,"from_config()"),DHt.forEach(t),tLr=r(Tie,` class
method.`),Tie.forEach(t),aLr=i(Yl),Ck=n(Yl,"P",{});var gro=s(Ck);nLr=r(gro,"This class cannot be instantiated directly using "),Q5e=n(gro,"CODE",{});var GHt=s(Q5e);sLr=r(GHt,"__init__()"),GHt.forEach(t),lLr=r(gro," (throws an error)."),gro.forEach(t),iLr=i(Yl),Gt=n(Yl,"DIV",{class:!0});var $8=s(Gt);T(wk.$$.fragment,$8),dLr=i($8),W5e=n($8,"P",{});var OHt=s(W5e);cLr=r(OHt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),OHt.forEach(t),mLr=i($8),Bc=n($8,"P",{});var Mie=s(Bc);fLr=r(Mie,`Note:
Loading a model from its configuration file does `),U5e=n(Mie,"STRONG",{});var VHt=s(U5e);gLr=r(VHt,"not"),VHt.forEach(t),hLr=r(Mie,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(Mie,"A",{href:!0});var XHt=s(EZ);uLr=r(XHt,"from_pretrained()"),XHt.forEach(t),pLr=r(Mie," to load the model weights."),Mie.forEach(t),_Lr=i($8),T(a3.$$.fragment,$8),$8.forEach(t),bLr=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Va=s(Eo);T(Ak.$$.fragment,Va),vLr=i(Va),H5e=n(Va,"P",{});var zHt=s(H5e);FLr=r(zHt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),zHt.forEach(t),TLr=i(Va),Mn=n(Va,"P",{});var k8=s(Mn);MLr=r(k8,"The model class to instantiate is selected based on the "),J5e=n(k8,"CODE",{});var QHt=s(J5e);ELr=r(QHt,"model_type"),QHt.forEach(t),CLr=r(k8,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(k8,"CODE",{});var WHt=s(Y5e);wLr=r(WHt,"pretrained_model_name_or_path"),WHt.forEach(t),ALr=r(k8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(k8,"CODE",{});var UHt=s(K5e);LLr=r(UHt,"pretrained_model_name_or_path"),UHt.forEach(t),yLr=r(k8,":"),k8.forEach(t),xLr=i(Va),Z5e=n(Va,"UL",{});var HHt=s(Z5e);n3=n(HHt,"LI",{});var AQe=s(n3);e0e=n(AQe,"STRONG",{});var JHt=s(e0e);$Lr=r(JHt,"detr"),JHt.forEach(t),kLr=r(AQe," \u2014 "),CZ=n(AQe,"A",{href:!0});var YHt=s(CZ);SLr=r(YHt,"DetrForSegmentation"),YHt.forEach(t),RLr=r(AQe," (DETR model)"),AQe.forEach(t),HHt.forEach(t),PLr=i(Va),s3=n(Va,"P",{});var LQe=s(s3);BLr=r(LQe,"The model is set in evaluation mode by default using "),o0e=n(LQe,"CODE",{});var KHt=s(o0e);ILr=r(KHt,"model.eval()"),KHt.forEach(t),NLr=r(LQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r0e=n(LQe,"CODE",{});var ZHt=s(r0e);qLr=r(ZHt,"model.train()"),ZHt.forEach(t),LQe.forEach(t),jLr=i(Va),T(l3.$$.fragment,Va),Va.forEach(t),Yl.forEach(t),ZZe=i(m),Ic=n(m,"H2",{class:!0});var hro=s(Ic);i3=n(hro,"A",{id:!0,class:!0,href:!0});var eJt=s(i3);t0e=n(eJt,"SPAN",{});var oJt=s(t0e);T(Lk.$$.fragment,oJt),oJt.forEach(t),eJt.forEach(t),DLr=i(hro),a0e=n(hro,"SPAN",{});var rJt=s(a0e);GLr=r(rJt,"AutoModelForSemanticSegmentation"),rJt.forEach(t),hro.forEach(t),eeo=i(m),ar=n(m,"DIV",{class:!0});var Kl=s(ar);T(yk.$$.fragment,Kl),OLr=i(Kl),Nc=n(Kl,"P",{});var Eie=s(Nc);VLr=r(Eie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),wZ=n(Eie,"A",{href:!0});var tJt=s(wZ);XLr=r(tJt,"from_pretrained()"),tJt.forEach(t),zLr=r(Eie," class method or the "),AZ=n(Eie,"A",{href:!0});var aJt=s(AZ);QLr=r(aJt,"from_config()"),aJt.forEach(t),WLr=r(Eie,` class
method.`),Eie.forEach(t),ULr=i(Kl),xk=n(Kl,"P",{});var uro=s(xk);HLr=r(uro,"This class cannot be instantiated directly using "),n0e=n(uro,"CODE",{});var nJt=s(n0e);JLr=r(nJt,"__init__()"),nJt.forEach(t),YLr=r(uro," (throws an error)."),uro.forEach(t),KLr=i(Kl),Ot=n(Kl,"DIV",{class:!0});var S8=s(Ot);T($k.$$.fragment,S8),ZLr=i(S8),s0e=n(S8,"P",{});var sJt=s(s0e);eyr=r(sJt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),sJt.forEach(t),oyr=i(S8),qc=n(S8,"P",{});var Cie=s(qc);ryr=r(Cie,`Note:
Loading a model from its configuration file does `),l0e=n(Cie,"STRONG",{});var lJt=s(l0e);tyr=r(lJt,"not"),lJt.forEach(t),ayr=r(Cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(Cie,"A",{href:!0});var iJt=s(LZ);nyr=r(iJt,"from_pretrained()"),iJt.forEach(t),syr=r(Cie," to load the model weights."),Cie.forEach(t),lyr=i(S8),T(d3.$$.fragment,S8),S8.forEach(t),iyr=i(Kl),Co=n(Kl,"DIV",{class:!0});var Xa=s(Co);T(kk.$$.fragment,Xa),dyr=i(Xa),i0e=n(Xa,"P",{});var dJt=s(i0e);cyr=r(dJt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),dJt.forEach(t),myr=i(Xa),En=n(Xa,"P",{});var R8=s(En);fyr=r(R8,"The model class to instantiate is selected based on the "),d0e=n(R8,"CODE",{});var cJt=s(d0e);gyr=r(cJt,"model_type"),cJt.forEach(t),hyr=r(R8,` property of the config object (either
passed as an argument or loaded from `),c0e=n(R8,"CODE",{});var mJt=s(c0e);uyr=r(mJt,"pretrained_model_name_or_path"),mJt.forEach(t),pyr=r(R8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(R8,"CODE",{});var fJt=s(m0e);_yr=r(fJt,"pretrained_model_name_or_path"),fJt.forEach(t),byr=r(R8,":"),R8.forEach(t),vyr=i(Xa),gt=n(Xa,"UL",{});var Zl=s(gt);c3=n(Zl,"LI",{});var yQe=s(c3);f0e=n(yQe,"STRONG",{});var gJt=s(f0e);Fyr=r(gJt,"beit"),gJt.forEach(t),Tyr=r(yQe," \u2014 "),yZ=n(yQe,"A",{href:!0});var hJt=s(yZ);Myr=r(hJt,"BeitForSemanticSegmentation"),hJt.forEach(t),Eyr=r(yQe," (BEiT model)"),yQe.forEach(t),Cyr=i(Zl),m3=n(Zl,"LI",{});var xQe=s(m3);g0e=n(xQe,"STRONG",{});var uJt=s(g0e);wyr=r(uJt,"data2vec-vision"),uJt.forEach(t),Ayr=r(xQe," \u2014 "),xZ=n(xQe,"A",{href:!0});var pJt=s(xZ);Lyr=r(pJt,"Data2VecVisionForSemanticSegmentation"),pJt.forEach(t),yyr=r(xQe," (Data2VecVision model)"),xQe.forEach(t),xyr=i(Zl),f3=n(Zl,"LI",{});var $Qe=s(f3);h0e=n($Qe,"STRONG",{});var _Jt=s(h0e);$yr=r(_Jt,"dpt"),_Jt.forEach(t),kyr=r($Qe," \u2014 "),$Z=n($Qe,"A",{href:!0});var bJt=s($Z);Syr=r(bJt,"DPTForSemanticSegmentation"),bJt.forEach(t),Ryr=r($Qe," (DPT model)"),$Qe.forEach(t),Pyr=i(Zl),g3=n(Zl,"LI",{});var kQe=s(g3);u0e=n(kQe,"STRONG",{});var vJt=s(u0e);Byr=r(vJt,"mobilevit"),vJt.forEach(t),Iyr=r(kQe," \u2014 "),kZ=n(kQe,"A",{href:!0});var FJt=s(kZ);Nyr=r(FJt,"MobileViTForSemanticSegmentation"),FJt.forEach(t),qyr=r(kQe," (MobileViT model)"),kQe.forEach(t),jyr=i(Zl),h3=n(Zl,"LI",{});var SQe=s(h3);p0e=n(SQe,"STRONG",{});var TJt=s(p0e);Dyr=r(TJt,"segformer"),TJt.forEach(t),Gyr=r(SQe," \u2014 "),SZ=n(SQe,"A",{href:!0});var MJt=s(SZ);Oyr=r(MJt,"SegformerForSemanticSegmentation"),MJt.forEach(t),Vyr=r(SQe," (SegFormer model)"),SQe.forEach(t),Zl.forEach(t),Xyr=i(Xa),u3=n(Xa,"P",{});var RQe=s(u3);zyr=r(RQe,"The model is set in evaluation mode by default using "),_0e=n(RQe,"CODE",{});var EJt=s(_0e);Qyr=r(EJt,"model.eval()"),EJt.forEach(t),Wyr=r(RQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b0e=n(RQe,"CODE",{});var CJt=s(b0e);Uyr=r(CJt,"model.train()"),CJt.forEach(t),RQe.forEach(t),Hyr=i(Xa),T(p3.$$.fragment,Xa),Xa.forEach(t),Kl.forEach(t),oeo=i(m),jc=n(m,"H2",{class:!0});var pro=s(jc);_3=n(pro,"A",{id:!0,class:!0,href:!0});var wJt=s(_3);v0e=n(wJt,"SPAN",{});var AJt=s(v0e);T(Sk.$$.fragment,AJt),AJt.forEach(t),wJt.forEach(t),Jyr=i(pro),F0e=n(pro,"SPAN",{});var LJt=s(F0e);Yyr=r(LJt,"AutoModelForInstanceSegmentation"),LJt.forEach(t),pro.forEach(t),reo=i(m),nr=n(m,"DIV",{class:!0});var ei=s(nr);T(Rk.$$.fragment,ei),Kyr=i(ei),Dc=n(ei,"P",{});var wie=s(Dc);Zyr=r(wie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RZ=n(wie,"A",{href:!0});var yJt=s(RZ);e8r=r(yJt,"from_pretrained()"),yJt.forEach(t),o8r=r(wie," class method or the "),PZ=n(wie,"A",{href:!0});var xJt=s(PZ);r8r=r(xJt,"from_config()"),xJt.forEach(t),t8r=r(wie,` class
method.`),wie.forEach(t),a8r=i(ei),Pk=n(ei,"P",{});var _ro=s(Pk);n8r=r(_ro,"This class cannot be instantiated directly using "),T0e=n(_ro,"CODE",{});var $Jt=s(T0e);s8r=r($Jt,"__init__()"),$Jt.forEach(t),l8r=r(_ro," (throws an error)."),_ro.forEach(t),i8r=i(ei),Vt=n(ei,"DIV",{class:!0});var P8=s(Vt);T(Bk.$$.fragment,P8),d8r=i(P8),M0e=n(P8,"P",{});var kJt=s(M0e);c8r=r(kJt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kJt.forEach(t),m8r=i(P8),Gc=n(P8,"P",{});var Aie=s(Gc);f8r=r(Aie,`Note:
Loading a model from its configuration file does `),E0e=n(Aie,"STRONG",{});var SJt=s(E0e);g8r=r(SJt,"not"),SJt.forEach(t),h8r=r(Aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=n(Aie,"A",{href:!0});var RJt=s(BZ);u8r=r(RJt,"from_pretrained()"),RJt.forEach(t),p8r=r(Aie," to load the model weights."),Aie.forEach(t),_8r=i(P8),T(b3.$$.fragment,P8),P8.forEach(t),b8r=i(ei),wo=n(ei,"DIV",{class:!0});var za=s(wo);T(Ik.$$.fragment,za),v8r=i(za),C0e=n(za,"P",{});var PJt=s(C0e);F8r=r(PJt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),PJt.forEach(t),T8r=i(za),Cn=n(za,"P",{});var B8=s(Cn);M8r=r(B8,"The model class to instantiate is selected based on the "),w0e=n(B8,"CODE",{});var BJt=s(w0e);E8r=r(BJt,"model_type"),BJt.forEach(t),C8r=r(B8,` property of the config object (either
passed as an argument or loaded from `),A0e=n(B8,"CODE",{});var IJt=s(A0e);w8r=r(IJt,"pretrained_model_name_or_path"),IJt.forEach(t),A8r=r(B8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(B8,"CODE",{});var NJt=s(L0e);L8r=r(NJt,"pretrained_model_name_or_path"),NJt.forEach(t),y8r=r(B8,":"),B8.forEach(t),x8r=i(za),y0e=n(za,"UL",{});var qJt=s(y0e);v3=n(qJt,"LI",{});var PQe=s(v3);x0e=n(PQe,"STRONG",{});var jJt=s(x0e);$8r=r(jJt,"maskformer"),jJt.forEach(t),k8r=r(PQe," \u2014 "),IZ=n(PQe,"A",{href:!0});var DJt=s(IZ);S8r=r(DJt,"MaskFormerForInstanceSegmentation"),DJt.forEach(t),R8r=r(PQe," (MaskFormer model)"),PQe.forEach(t),qJt.forEach(t),P8r=i(za),F3=n(za,"P",{});var BQe=s(F3);B8r=r(BQe,"The model is set in evaluation mode by default using "),$0e=n(BQe,"CODE",{});var GJt=s($0e);I8r=r(GJt,"model.eval()"),GJt.forEach(t),N8r=r(BQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k0e=n(BQe,"CODE",{});var OJt=s(k0e);q8r=r(OJt,"model.train()"),OJt.forEach(t),BQe.forEach(t),j8r=i(za),T(T3.$$.fragment,za),za.forEach(t),ei.forEach(t),teo=i(m),Oc=n(m,"H2",{class:!0});var bro=s(Oc);M3=n(bro,"A",{id:!0,class:!0,href:!0});var VJt=s(M3);S0e=n(VJt,"SPAN",{});var XJt=s(S0e);T(Nk.$$.fragment,XJt),XJt.forEach(t),VJt.forEach(t),D8r=i(bro),R0e=n(bro,"SPAN",{});var zJt=s(R0e);G8r=r(zJt,"TFAutoModel"),zJt.forEach(t),bro.forEach(t),aeo=i(m),sr=n(m,"DIV",{class:!0});var oi=s(sr);T(qk.$$.fragment,oi),O8r=i(oi),Vc=n(oi,"P",{});var Lie=s(Vc);V8r=r(Lie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NZ=n(Lie,"A",{href:!0});var QJt=s(NZ);X8r=r(QJt,"from_pretrained()"),QJt.forEach(t),z8r=r(Lie," class method or the "),qZ=n(Lie,"A",{href:!0});var WJt=s(qZ);Q8r=r(WJt,"from_config()"),WJt.forEach(t),W8r=r(Lie,` class
method.`),Lie.forEach(t),U8r=i(oi),jk=n(oi,"P",{});var vro=s(jk);H8r=r(vro,"This class cannot be instantiated directly using "),P0e=n(vro,"CODE",{});var UJt=s(P0e);J8r=r(UJt,"__init__()"),UJt.forEach(t),Y8r=r(vro," (throws an error)."),vro.forEach(t),K8r=i(oi),Xt=n(oi,"DIV",{class:!0});var I8=s(Xt);T(Dk.$$.fragment,I8),Z8r=i(I8),B0e=n(I8,"P",{});var HJt=s(B0e);e9r=r(HJt,"Instantiates one of the base model classes of the library from a configuration."),HJt.forEach(t),o9r=i(I8),Xc=n(I8,"P",{});var yie=s(Xc);r9r=r(yie,`Note:
Loading a model from its configuration file does `),I0e=n(yie,"STRONG",{});var JJt=s(I0e);t9r=r(JJt,"not"),JJt.forEach(t),a9r=r(yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(yie,"A",{href:!0});var YJt=s(jZ);n9r=r(YJt,"from_pretrained()"),YJt.forEach(t),s9r=r(yie," to load the model weights."),yie.forEach(t),l9r=i(I8),T(E3.$$.fragment,I8),I8.forEach(t),i9r=i(oi),Ir=n(oi,"DIV",{class:!0});var ri=s(Ir);T(Gk.$$.fragment,ri),d9r=i(ri),N0e=n(ri,"P",{});var KJt=s(N0e);c9r=r(KJt,"Instantiate one of the base model classes of the library from a pretrained model."),KJt.forEach(t),m9r=i(ri),wn=n(ri,"P",{});var N8=s(wn);f9r=r(N8,"The model class to instantiate is selected based on the "),q0e=n(N8,"CODE",{});var ZJt=s(q0e);g9r=r(ZJt,"model_type"),ZJt.forEach(t),h9r=r(N8,` property of the config object (either
passed as an argument or loaded from `),j0e=n(N8,"CODE",{});var eYt=s(j0e);u9r=r(eYt,"pretrained_model_name_or_path"),eYt.forEach(t),p9r=r(N8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n(N8,"CODE",{});var oYt=s(D0e);_9r=r(oYt,"pretrained_model_name_or_path"),oYt.forEach(t),b9r=r(N8,":"),N8.forEach(t),v9r=i(ri),B=n(ri,"UL",{});var q=s(B);C3=n(q,"LI",{});var IQe=s(C3);G0e=n(IQe,"STRONG",{});var rYt=s(G0e);F9r=r(rYt,"albert"),rYt.forEach(t),T9r=r(IQe," \u2014 "),DZ=n(IQe,"A",{href:!0});var tYt=s(DZ);M9r=r(tYt,"TFAlbertModel"),tYt.forEach(t),E9r=r(IQe," (ALBERT model)"),IQe.forEach(t),C9r=i(q),w3=n(q,"LI",{});var NQe=s(w3);O0e=n(NQe,"STRONG",{});var aYt=s(O0e);w9r=r(aYt,"bart"),aYt.forEach(t),A9r=r(NQe," \u2014 "),GZ=n(NQe,"A",{href:!0});var nYt=s(GZ);L9r=r(nYt,"TFBartModel"),nYt.forEach(t),y9r=r(NQe," (BART model)"),NQe.forEach(t),x9r=i(q),A3=n(q,"LI",{});var qQe=s(A3);V0e=n(qQe,"STRONG",{});var sYt=s(V0e);$9r=r(sYt,"bert"),sYt.forEach(t),k9r=r(qQe," \u2014 "),OZ=n(qQe,"A",{href:!0});var lYt=s(OZ);S9r=r(lYt,"TFBertModel"),lYt.forEach(t),R9r=r(qQe," (BERT model)"),qQe.forEach(t),P9r=i(q),L3=n(q,"LI",{});var jQe=s(L3);X0e=n(jQe,"STRONG",{});var iYt=s(X0e);B9r=r(iYt,"blenderbot"),iYt.forEach(t),I9r=r(jQe," \u2014 "),VZ=n(jQe,"A",{href:!0});var dYt=s(VZ);N9r=r(dYt,"TFBlenderbotModel"),dYt.forEach(t),q9r=r(jQe," (Blenderbot model)"),jQe.forEach(t),j9r=i(q),y3=n(q,"LI",{});var DQe=s(y3);z0e=n(DQe,"STRONG",{});var cYt=s(z0e);D9r=r(cYt,"blenderbot-small"),cYt.forEach(t),G9r=r(DQe," \u2014 "),XZ=n(DQe,"A",{href:!0});var mYt=s(XZ);O9r=r(mYt,"TFBlenderbotSmallModel"),mYt.forEach(t),V9r=r(DQe," (BlenderbotSmall model)"),DQe.forEach(t),X9r=i(q),x3=n(q,"LI",{});var GQe=s(x3);Q0e=n(GQe,"STRONG",{});var fYt=s(Q0e);z9r=r(fYt,"camembert"),fYt.forEach(t),Q9r=r(GQe," \u2014 "),zZ=n(GQe,"A",{href:!0});var gYt=s(zZ);W9r=r(gYt,"TFCamembertModel"),gYt.forEach(t),U9r=r(GQe," (CamemBERT model)"),GQe.forEach(t),H9r=i(q),$3=n(q,"LI",{});var OQe=s($3);W0e=n(OQe,"STRONG",{});var hYt=s(W0e);J9r=r(hYt,"clip"),hYt.forEach(t),Y9r=r(OQe," \u2014 "),QZ=n(OQe,"A",{href:!0});var uYt=s(QZ);K9r=r(uYt,"TFCLIPModel"),uYt.forEach(t),Z9r=r(OQe," (CLIP model)"),OQe.forEach(t),exr=i(q),k3=n(q,"LI",{});var VQe=s(k3);U0e=n(VQe,"STRONG",{});var pYt=s(U0e);oxr=r(pYt,"convbert"),pYt.forEach(t),rxr=r(VQe," \u2014 "),WZ=n(VQe,"A",{href:!0});var _Yt=s(WZ);txr=r(_Yt,"TFConvBertModel"),_Yt.forEach(t),axr=r(VQe," (ConvBERT model)"),VQe.forEach(t),nxr=i(q),S3=n(q,"LI",{});var XQe=s(S3);H0e=n(XQe,"STRONG",{});var bYt=s(H0e);sxr=r(bYt,"convnext"),bYt.forEach(t),lxr=r(XQe," \u2014 "),UZ=n(XQe,"A",{href:!0});var vYt=s(UZ);ixr=r(vYt,"TFConvNextModel"),vYt.forEach(t),dxr=r(XQe," (ConvNeXT model)"),XQe.forEach(t),cxr=i(q),R3=n(q,"LI",{});var zQe=s(R3);J0e=n(zQe,"STRONG",{});var FYt=s(J0e);mxr=r(FYt,"ctrl"),FYt.forEach(t),fxr=r(zQe," \u2014 "),HZ=n(zQe,"A",{href:!0});var TYt=s(HZ);gxr=r(TYt,"TFCTRLModel"),TYt.forEach(t),hxr=r(zQe," (CTRL model)"),zQe.forEach(t),uxr=i(q),P3=n(q,"LI",{});var QQe=s(P3);Y0e=n(QQe,"STRONG",{});var MYt=s(Y0e);pxr=r(MYt,"data2vec-vision"),MYt.forEach(t),_xr=r(QQe," \u2014 "),JZ=n(QQe,"A",{href:!0});var EYt=s(JZ);bxr=r(EYt,"TFData2VecVisionModel"),EYt.forEach(t),vxr=r(QQe," (Data2VecVision model)"),QQe.forEach(t),Fxr=i(q),B3=n(q,"LI",{});var WQe=s(B3);K0e=n(WQe,"STRONG",{});var CYt=s(K0e);Txr=r(CYt,"deberta"),CYt.forEach(t),Mxr=r(WQe," \u2014 "),YZ=n(WQe,"A",{href:!0});var wYt=s(YZ);Exr=r(wYt,"TFDebertaModel"),wYt.forEach(t),Cxr=r(WQe," (DeBERTa model)"),WQe.forEach(t),wxr=i(q),I3=n(q,"LI",{});var UQe=s(I3);Z0e=n(UQe,"STRONG",{});var AYt=s(Z0e);Axr=r(AYt,"deberta-v2"),AYt.forEach(t),Lxr=r(UQe," \u2014 "),KZ=n(UQe,"A",{href:!0});var LYt=s(KZ);yxr=r(LYt,"TFDebertaV2Model"),LYt.forEach(t),xxr=r(UQe," (DeBERTa-v2 model)"),UQe.forEach(t),$xr=i(q),N3=n(q,"LI",{});var HQe=s(N3);ewe=n(HQe,"STRONG",{});var yYt=s(ewe);kxr=r(yYt,"deit"),yYt.forEach(t),Sxr=r(HQe," \u2014 "),ZZ=n(HQe,"A",{href:!0});var xYt=s(ZZ);Rxr=r(xYt,"TFDeiTModel"),xYt.forEach(t),Pxr=r(HQe," (DeiT model)"),HQe.forEach(t),Bxr=i(q),q3=n(q,"LI",{});var JQe=s(q3);owe=n(JQe,"STRONG",{});var $Yt=s(owe);Ixr=r($Yt,"distilbert"),$Yt.forEach(t),Nxr=r(JQe," \u2014 "),eee=n(JQe,"A",{href:!0});var kYt=s(eee);qxr=r(kYt,"TFDistilBertModel"),kYt.forEach(t),jxr=r(JQe," (DistilBERT model)"),JQe.forEach(t),Dxr=i(q),j3=n(q,"LI",{});var YQe=s(j3);rwe=n(YQe,"STRONG",{});var SYt=s(rwe);Gxr=r(SYt,"dpr"),SYt.forEach(t),Oxr=r(YQe," \u2014 "),oee=n(YQe,"A",{href:!0});var RYt=s(oee);Vxr=r(RYt,"TFDPRQuestionEncoder"),RYt.forEach(t),Xxr=r(YQe," (DPR model)"),YQe.forEach(t),zxr=i(q),D3=n(q,"LI",{});var KQe=s(D3);twe=n(KQe,"STRONG",{});var PYt=s(twe);Qxr=r(PYt,"electra"),PYt.forEach(t),Wxr=r(KQe," \u2014 "),ree=n(KQe,"A",{href:!0});var BYt=s(ree);Uxr=r(BYt,"TFElectraModel"),BYt.forEach(t),Hxr=r(KQe," (ELECTRA model)"),KQe.forEach(t),Jxr=i(q),G3=n(q,"LI",{});var ZQe=s(G3);awe=n(ZQe,"STRONG",{});var IYt=s(awe);Yxr=r(IYt,"flaubert"),IYt.forEach(t),Kxr=r(ZQe," \u2014 "),tee=n(ZQe,"A",{href:!0});var NYt=s(tee);Zxr=r(NYt,"TFFlaubertModel"),NYt.forEach(t),e$r=r(ZQe," (FlauBERT model)"),ZQe.forEach(t),o$r=i(q),Fl=n(q,"LI",{});var DB=s(Fl);nwe=n(DB,"STRONG",{});var qYt=s(nwe);r$r=r(qYt,"funnel"),qYt.forEach(t),t$r=r(DB," \u2014 "),aee=n(DB,"A",{href:!0});var jYt=s(aee);a$r=r(jYt,"TFFunnelModel"),jYt.forEach(t),n$r=r(DB," or "),nee=n(DB,"A",{href:!0});var DYt=s(nee);s$r=r(DYt,"TFFunnelBaseModel"),DYt.forEach(t),l$r=r(DB," (Funnel Transformer model)"),DB.forEach(t),i$r=i(q),O3=n(q,"LI",{});var eWe=s(O3);swe=n(eWe,"STRONG",{});var GYt=s(swe);d$r=r(GYt,"gpt2"),GYt.forEach(t),c$r=r(eWe," \u2014 "),see=n(eWe,"A",{href:!0});var OYt=s(see);m$r=r(OYt,"TFGPT2Model"),OYt.forEach(t),f$r=r(eWe," (OpenAI GPT-2 model)"),eWe.forEach(t),g$r=i(q),V3=n(q,"LI",{});var oWe=s(V3);lwe=n(oWe,"STRONG",{});var VYt=s(lwe);h$r=r(VYt,"gptj"),VYt.forEach(t),u$r=r(oWe," \u2014 "),lee=n(oWe,"A",{href:!0});var XYt=s(lee);p$r=r(XYt,"TFGPTJModel"),XYt.forEach(t),_$r=r(oWe," (GPT-J model)"),oWe.forEach(t),b$r=i(q),X3=n(q,"LI",{});var rWe=s(X3);iwe=n(rWe,"STRONG",{});var zYt=s(iwe);v$r=r(zYt,"groupvit"),zYt.forEach(t),F$r=r(rWe," \u2014 "),iee=n(rWe,"A",{href:!0});var QYt=s(iee);T$r=r(QYt,"TFGroupViTModel"),QYt.forEach(t),M$r=r(rWe," (GroupViT model)"),rWe.forEach(t),E$r=i(q),z3=n(q,"LI",{});var tWe=s(z3);dwe=n(tWe,"STRONG",{});var WYt=s(dwe);C$r=r(WYt,"hubert"),WYt.forEach(t),w$r=r(tWe," \u2014 "),dee=n(tWe,"A",{href:!0});var UYt=s(dee);A$r=r(UYt,"TFHubertModel"),UYt.forEach(t),L$r=r(tWe," (Hubert model)"),tWe.forEach(t),y$r=i(q),Q3=n(q,"LI",{});var aWe=s(Q3);cwe=n(aWe,"STRONG",{});var HYt=s(cwe);x$r=r(HYt,"layoutlm"),HYt.forEach(t),$$r=r(aWe," \u2014 "),cee=n(aWe,"A",{href:!0});var JYt=s(cee);k$r=r(JYt,"TFLayoutLMModel"),JYt.forEach(t),S$r=r(aWe," (LayoutLM model)"),aWe.forEach(t),R$r=i(q),W3=n(q,"LI",{});var nWe=s(W3);mwe=n(nWe,"STRONG",{});var YYt=s(mwe);P$r=r(YYt,"layoutlmv3"),YYt.forEach(t),B$r=r(nWe," \u2014 "),mee=n(nWe,"A",{href:!0});var KYt=s(mee);I$r=r(KYt,"TFLayoutLMv3Model"),KYt.forEach(t),N$r=r(nWe," (LayoutLMv3 model)"),nWe.forEach(t),q$r=i(q),U3=n(q,"LI",{});var sWe=s(U3);fwe=n(sWe,"STRONG",{});var ZYt=s(fwe);j$r=r(ZYt,"led"),ZYt.forEach(t),D$r=r(sWe," \u2014 "),fee=n(sWe,"A",{href:!0});var eKt=s(fee);G$r=r(eKt,"TFLEDModel"),eKt.forEach(t),O$r=r(sWe," (LED model)"),sWe.forEach(t),V$r=i(q),H3=n(q,"LI",{});var lWe=s(H3);gwe=n(lWe,"STRONG",{});var oKt=s(gwe);X$r=r(oKt,"longformer"),oKt.forEach(t),z$r=r(lWe," \u2014 "),gee=n(lWe,"A",{href:!0});var rKt=s(gee);Q$r=r(rKt,"TFLongformerModel"),rKt.forEach(t),W$r=r(lWe," (Longformer model)"),lWe.forEach(t),U$r=i(q),J3=n(q,"LI",{});var iWe=s(J3);hwe=n(iWe,"STRONG",{});var tKt=s(hwe);H$r=r(tKt,"lxmert"),tKt.forEach(t),J$r=r(iWe," \u2014 "),hee=n(iWe,"A",{href:!0});var aKt=s(hee);Y$r=r(aKt,"TFLxmertModel"),aKt.forEach(t),K$r=r(iWe," (LXMERT model)"),iWe.forEach(t),Z$r=i(q),Y3=n(q,"LI",{});var dWe=s(Y3);uwe=n(dWe,"STRONG",{});var nKt=s(uwe);ekr=r(nKt,"marian"),nKt.forEach(t),okr=r(dWe," \u2014 "),uee=n(dWe,"A",{href:!0});var sKt=s(uee);rkr=r(sKt,"TFMarianModel"),sKt.forEach(t),tkr=r(dWe," (Marian model)"),dWe.forEach(t),akr=i(q),K3=n(q,"LI",{});var cWe=s(K3);pwe=n(cWe,"STRONG",{});var lKt=s(pwe);nkr=r(lKt,"mbart"),lKt.forEach(t),skr=r(cWe," \u2014 "),pee=n(cWe,"A",{href:!0});var iKt=s(pee);lkr=r(iKt,"TFMBartModel"),iKt.forEach(t),ikr=r(cWe," (mBART model)"),cWe.forEach(t),dkr=i(q),Z3=n(q,"LI",{});var mWe=s(Z3);_we=n(mWe,"STRONG",{});var dKt=s(_we);ckr=r(dKt,"mobilebert"),dKt.forEach(t),mkr=r(mWe," \u2014 "),_ee=n(mWe,"A",{href:!0});var cKt=s(_ee);fkr=r(cKt,"TFMobileBertModel"),cKt.forEach(t),gkr=r(mWe," (MobileBERT model)"),mWe.forEach(t),hkr=i(q),e5=n(q,"LI",{});var fWe=s(e5);bwe=n(fWe,"STRONG",{});var mKt=s(bwe);ukr=r(mKt,"mobilevit"),mKt.forEach(t),pkr=r(fWe," \u2014 "),bee=n(fWe,"A",{href:!0});var fKt=s(bee);_kr=r(fKt,"TFMobileViTModel"),fKt.forEach(t),bkr=r(fWe," (MobileViT model)"),fWe.forEach(t),vkr=i(q),o5=n(q,"LI",{});var gWe=s(o5);vwe=n(gWe,"STRONG",{});var gKt=s(vwe);Fkr=r(gKt,"mpnet"),gKt.forEach(t),Tkr=r(gWe," \u2014 "),vee=n(gWe,"A",{href:!0});var hKt=s(vee);Mkr=r(hKt,"TFMPNetModel"),hKt.forEach(t),Ekr=r(gWe," (MPNet model)"),gWe.forEach(t),Ckr=i(q),r5=n(q,"LI",{});var hWe=s(r5);Fwe=n(hWe,"STRONG",{});var uKt=s(Fwe);wkr=r(uKt,"mt5"),uKt.forEach(t),Akr=r(hWe," \u2014 "),Fee=n(hWe,"A",{href:!0});var pKt=s(Fee);Lkr=r(pKt,"TFMT5Model"),pKt.forEach(t),ykr=r(hWe," (MT5 model)"),hWe.forEach(t),xkr=i(q),t5=n(q,"LI",{});var uWe=s(t5);Twe=n(uWe,"STRONG",{});var _Kt=s(Twe);$kr=r(_Kt,"openai-gpt"),_Kt.forEach(t),kkr=r(uWe," \u2014 "),Tee=n(uWe,"A",{href:!0});var bKt=s(Tee);Skr=r(bKt,"TFOpenAIGPTModel"),bKt.forEach(t),Rkr=r(uWe," (OpenAI GPT model)"),uWe.forEach(t),Pkr=i(q),a5=n(q,"LI",{});var pWe=s(a5);Mwe=n(pWe,"STRONG",{});var vKt=s(Mwe);Bkr=r(vKt,"opt"),vKt.forEach(t),Ikr=r(pWe," \u2014 "),Mee=n(pWe,"A",{href:!0});var FKt=s(Mee);Nkr=r(FKt,"TFOPTModel"),FKt.forEach(t),qkr=r(pWe," (OPT model)"),pWe.forEach(t),jkr=i(q),n5=n(q,"LI",{});var _We=s(n5);Ewe=n(_We,"STRONG",{});var TKt=s(Ewe);Dkr=r(TKt,"pegasus"),TKt.forEach(t),Gkr=r(_We," \u2014 "),Eee=n(_We,"A",{href:!0});var MKt=s(Eee);Okr=r(MKt,"TFPegasusModel"),MKt.forEach(t),Vkr=r(_We," (Pegasus model)"),_We.forEach(t),Xkr=i(q),s5=n(q,"LI",{});var bWe=s(s5);Cwe=n(bWe,"STRONG",{});var EKt=s(Cwe);zkr=r(EKt,"regnet"),EKt.forEach(t),Qkr=r(bWe," \u2014 "),Cee=n(bWe,"A",{href:!0});var CKt=s(Cee);Wkr=r(CKt,"TFRegNetModel"),CKt.forEach(t),Ukr=r(bWe," (RegNet model)"),bWe.forEach(t),Hkr=i(q),l5=n(q,"LI",{});var vWe=s(l5);wwe=n(vWe,"STRONG",{});var wKt=s(wwe);Jkr=r(wKt,"rembert"),wKt.forEach(t),Ykr=r(vWe," \u2014 "),wee=n(vWe,"A",{href:!0});var AKt=s(wee);Kkr=r(AKt,"TFRemBertModel"),AKt.forEach(t),Zkr=r(vWe," (RemBERT model)"),vWe.forEach(t),eSr=i(q),i5=n(q,"LI",{});var FWe=s(i5);Awe=n(FWe,"STRONG",{});var LKt=s(Awe);oSr=r(LKt,"resnet"),LKt.forEach(t),rSr=r(FWe," \u2014 "),Aee=n(FWe,"A",{href:!0});var yKt=s(Aee);tSr=r(yKt,"TFResNetModel"),yKt.forEach(t),aSr=r(FWe," (ResNet model)"),FWe.forEach(t),nSr=i(q),d5=n(q,"LI",{});var TWe=s(d5);Lwe=n(TWe,"STRONG",{});var xKt=s(Lwe);sSr=r(xKt,"roberta"),xKt.forEach(t),lSr=r(TWe," \u2014 "),Lee=n(TWe,"A",{href:!0});var $Kt=s(Lee);iSr=r($Kt,"TFRobertaModel"),$Kt.forEach(t),dSr=r(TWe," (RoBERTa model)"),TWe.forEach(t),cSr=i(q),c5=n(q,"LI",{});var MWe=s(c5);ywe=n(MWe,"STRONG",{});var kKt=s(ywe);mSr=r(kKt,"roformer"),kKt.forEach(t),fSr=r(MWe," \u2014 "),yee=n(MWe,"A",{href:!0});var SKt=s(yee);gSr=r(SKt,"TFRoFormerModel"),SKt.forEach(t),hSr=r(MWe," (RoFormer model)"),MWe.forEach(t),uSr=i(q),m5=n(q,"LI",{});var EWe=s(m5);xwe=n(EWe,"STRONG",{});var RKt=s(xwe);pSr=r(RKt,"segformer"),RKt.forEach(t),_Sr=r(EWe," \u2014 "),xee=n(EWe,"A",{href:!0});var PKt=s(xee);bSr=r(PKt,"TFSegformerModel"),PKt.forEach(t),vSr=r(EWe," (SegFormer model)"),EWe.forEach(t),FSr=i(q),f5=n(q,"LI",{});var CWe=s(f5);$we=n(CWe,"STRONG",{});var BKt=s($we);TSr=r(BKt,"speech_to_text"),BKt.forEach(t),MSr=r(CWe," \u2014 "),$ee=n(CWe,"A",{href:!0});var IKt=s($ee);ESr=r(IKt,"TFSpeech2TextModel"),IKt.forEach(t),CSr=r(CWe," (Speech2Text model)"),CWe.forEach(t),wSr=i(q),g5=n(q,"LI",{});var wWe=s(g5);kwe=n(wWe,"STRONG",{});var NKt=s(kwe);ASr=r(NKt,"swin"),NKt.forEach(t),LSr=r(wWe," \u2014 "),kee=n(wWe,"A",{href:!0});var qKt=s(kee);ySr=r(qKt,"TFSwinModel"),qKt.forEach(t),xSr=r(wWe," (Swin Transformer model)"),wWe.forEach(t),$Sr=i(q),h5=n(q,"LI",{});var AWe=s(h5);Swe=n(AWe,"STRONG",{});var jKt=s(Swe);kSr=r(jKt,"t5"),jKt.forEach(t),SSr=r(AWe," \u2014 "),See=n(AWe,"A",{href:!0});var DKt=s(See);RSr=r(DKt,"TFT5Model"),DKt.forEach(t),PSr=r(AWe," (T5 model)"),AWe.forEach(t),BSr=i(q),u5=n(q,"LI",{});var LWe=s(u5);Rwe=n(LWe,"STRONG",{});var GKt=s(Rwe);ISr=r(GKt,"tapas"),GKt.forEach(t),NSr=r(LWe," \u2014 "),Ree=n(LWe,"A",{href:!0});var OKt=s(Ree);qSr=r(OKt,"TFTapasModel"),OKt.forEach(t),jSr=r(LWe," (TAPAS model)"),LWe.forEach(t),DSr=i(q),p5=n(q,"LI",{});var yWe=s(p5);Pwe=n(yWe,"STRONG",{});var VKt=s(Pwe);GSr=r(VKt,"transfo-xl"),VKt.forEach(t),OSr=r(yWe," \u2014 "),Pee=n(yWe,"A",{href:!0});var XKt=s(Pee);VSr=r(XKt,"TFTransfoXLModel"),XKt.forEach(t),XSr=r(yWe," (Transformer-XL model)"),yWe.forEach(t),zSr=i(q),_5=n(q,"LI",{});var xWe=s(_5);Bwe=n(xWe,"STRONG",{});var zKt=s(Bwe);QSr=r(zKt,"vit"),zKt.forEach(t),WSr=r(xWe," \u2014 "),Bee=n(xWe,"A",{href:!0});var QKt=s(Bee);USr=r(QKt,"TFViTModel"),QKt.forEach(t),HSr=r(xWe," (ViT model)"),xWe.forEach(t),JSr=i(q),b5=n(q,"LI",{});var $We=s(b5);Iwe=n($We,"STRONG",{});var WKt=s(Iwe);YSr=r(WKt,"vit_mae"),WKt.forEach(t),KSr=r($We," \u2014 "),Iee=n($We,"A",{href:!0});var UKt=s(Iee);ZSr=r(UKt,"TFViTMAEModel"),UKt.forEach(t),eRr=r($We," (ViTMAE model)"),$We.forEach(t),oRr=i(q),v5=n(q,"LI",{});var kWe=s(v5);Nwe=n(kWe,"STRONG",{});var HKt=s(Nwe);rRr=r(HKt,"wav2vec2"),HKt.forEach(t),tRr=r(kWe," \u2014 "),Nee=n(kWe,"A",{href:!0});var JKt=s(Nee);aRr=r(JKt,"TFWav2Vec2Model"),JKt.forEach(t),nRr=r(kWe," (Wav2Vec2 model)"),kWe.forEach(t),sRr=i(q),F5=n(q,"LI",{});var SWe=s(F5);qwe=n(SWe,"STRONG",{});var YKt=s(qwe);lRr=r(YKt,"xglm"),YKt.forEach(t),iRr=r(SWe," \u2014 "),qee=n(SWe,"A",{href:!0});var KKt=s(qee);dRr=r(KKt,"TFXGLMModel"),KKt.forEach(t),cRr=r(SWe," (XGLM model)"),SWe.forEach(t),mRr=i(q),T5=n(q,"LI",{});var RWe=s(T5);jwe=n(RWe,"STRONG",{});var ZKt=s(jwe);fRr=r(ZKt,"xlm"),ZKt.forEach(t),gRr=r(RWe," \u2014 "),jee=n(RWe,"A",{href:!0});var eZt=s(jee);hRr=r(eZt,"TFXLMModel"),eZt.forEach(t),uRr=r(RWe," (XLM model)"),RWe.forEach(t),pRr=i(q),M5=n(q,"LI",{});var PWe=s(M5);Dwe=n(PWe,"STRONG",{});var oZt=s(Dwe);_Rr=r(oZt,"xlm-roberta"),oZt.forEach(t),bRr=r(PWe," \u2014 "),Dee=n(PWe,"A",{href:!0});var rZt=s(Dee);vRr=r(rZt,"TFXLMRobertaModel"),rZt.forEach(t),FRr=r(PWe," (XLM-RoBERTa model)"),PWe.forEach(t),TRr=i(q),E5=n(q,"LI",{});var BWe=s(E5);Gwe=n(BWe,"STRONG",{});var tZt=s(Gwe);MRr=r(tZt,"xlnet"),tZt.forEach(t),ERr=r(BWe," \u2014 "),Gee=n(BWe,"A",{href:!0});var aZt=s(Gee);CRr=r(aZt,"TFXLNetModel"),aZt.forEach(t),wRr=r(BWe," (XLNet model)"),BWe.forEach(t),q.forEach(t),ARr=i(ri),T(C5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),neo=i(m),zc=n(m,"H2",{class:!0});var Fro=s(zc);w5=n(Fro,"A",{id:!0,class:!0,href:!0});var nZt=s(w5);Owe=n(nZt,"SPAN",{});var sZt=s(Owe);T(Ok.$$.fragment,sZt),sZt.forEach(t),nZt.forEach(t),LRr=i(Fro),Vwe=n(Fro,"SPAN",{});var lZt=s(Vwe);yRr=r(lZt,"TFAutoModelForPreTraining"),lZt.forEach(t),Fro.forEach(t),seo=i(m),lr=n(m,"DIV",{class:!0});var ti=s(lr);T(Vk.$$.fragment,ti),xRr=i(ti),Qc=n(ti,"P",{});var xie=s(Qc);$Rr=r(xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oee=n(xie,"A",{href:!0});var iZt=s(Oee);kRr=r(iZt,"from_pretrained()"),iZt.forEach(t),SRr=r(xie," class method or the "),Vee=n(xie,"A",{href:!0});var dZt=s(Vee);RRr=r(dZt,"from_config()"),dZt.forEach(t),PRr=r(xie,` class
method.`),xie.forEach(t),BRr=i(ti),Xk=n(ti,"P",{});var Tro=s(Xk);IRr=r(Tro,"This class cannot be instantiated directly using "),Xwe=n(Tro,"CODE",{});var cZt=s(Xwe);NRr=r(cZt,"__init__()"),cZt.forEach(t),qRr=r(Tro," (throws an error)."),Tro.forEach(t),jRr=i(ti),zt=n(ti,"DIV",{class:!0});var q8=s(zt);T(zk.$$.fragment,q8),DRr=i(q8),zwe=n(q8,"P",{});var mZt=s(zwe);GRr=r(mZt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mZt.forEach(t),ORr=i(q8),Wc=n(q8,"P",{});var $ie=s(Wc);VRr=r($ie,`Note:
Loading a model from its configuration file does `),Qwe=n($ie,"STRONG",{});var fZt=s(Qwe);XRr=r(fZt,"not"),fZt.forEach(t),zRr=r($ie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n($ie,"A",{href:!0});var gZt=s(Xee);QRr=r(gZt,"from_pretrained()"),gZt.forEach(t),WRr=r($ie," to load the model weights."),$ie.forEach(t),URr=i(q8),T(A5.$$.fragment,q8),q8.forEach(t),HRr=i(ti),Nr=n(ti,"DIV",{class:!0});var ai=s(Nr);T(Qk.$$.fragment,ai),JRr=i(ai),Wwe=n(ai,"P",{});var hZt=s(Wwe);YRr=r(hZt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hZt.forEach(t),KRr=i(ai),An=n(ai,"P",{});var j8=s(An);ZRr=r(j8,"The model class to instantiate is selected based on the "),Uwe=n(j8,"CODE",{});var uZt=s(Uwe);ePr=r(uZt,"model_type"),uZt.forEach(t),oPr=r(j8,` property of the config object (either
passed as an argument or loaded from `),Hwe=n(j8,"CODE",{});var pZt=s(Hwe);rPr=r(pZt,"pretrained_model_name_or_path"),pZt.forEach(t),tPr=r(j8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=n(j8,"CODE",{});var _Zt=s(Jwe);aPr=r(_Zt,"pretrained_model_name_or_path"),_Zt.forEach(t),nPr=r(j8,":"),j8.forEach(t),sPr=i(ai),se=n(ai,"UL",{});var le=s(se);L5=n(le,"LI",{});var IWe=s(L5);Ywe=n(IWe,"STRONG",{});var bZt=s(Ywe);lPr=r(bZt,"albert"),bZt.forEach(t),iPr=r(IWe," \u2014 "),zee=n(IWe,"A",{href:!0});var vZt=s(zee);dPr=r(vZt,"TFAlbertForPreTraining"),vZt.forEach(t),cPr=r(IWe," (ALBERT model)"),IWe.forEach(t),mPr=i(le),y5=n(le,"LI",{});var NWe=s(y5);Kwe=n(NWe,"STRONG",{});var FZt=s(Kwe);fPr=r(FZt,"bart"),FZt.forEach(t),gPr=r(NWe," \u2014 "),Qee=n(NWe,"A",{href:!0});var TZt=s(Qee);hPr=r(TZt,"TFBartForConditionalGeneration"),TZt.forEach(t),uPr=r(NWe," (BART model)"),NWe.forEach(t),pPr=i(le),x5=n(le,"LI",{});var qWe=s(x5);Zwe=n(qWe,"STRONG",{});var MZt=s(Zwe);_Pr=r(MZt,"bert"),MZt.forEach(t),bPr=r(qWe," \u2014 "),Wee=n(qWe,"A",{href:!0});var EZt=s(Wee);vPr=r(EZt,"TFBertForPreTraining"),EZt.forEach(t),FPr=r(qWe," (BERT model)"),qWe.forEach(t),TPr=i(le),$5=n(le,"LI",{});var jWe=s($5);eAe=n(jWe,"STRONG",{});var CZt=s(eAe);MPr=r(CZt,"camembert"),CZt.forEach(t),EPr=r(jWe," \u2014 "),Uee=n(jWe,"A",{href:!0});var wZt=s(Uee);CPr=r(wZt,"TFCamembertForMaskedLM"),wZt.forEach(t),wPr=r(jWe," (CamemBERT model)"),jWe.forEach(t),APr=i(le),k5=n(le,"LI",{});var DWe=s(k5);oAe=n(DWe,"STRONG",{});var AZt=s(oAe);LPr=r(AZt,"ctrl"),AZt.forEach(t),yPr=r(DWe," \u2014 "),Hee=n(DWe,"A",{href:!0});var LZt=s(Hee);xPr=r(LZt,"TFCTRLLMHeadModel"),LZt.forEach(t),$Pr=r(DWe," (CTRL model)"),DWe.forEach(t),kPr=i(le),S5=n(le,"LI",{});var GWe=s(S5);rAe=n(GWe,"STRONG",{});var yZt=s(rAe);SPr=r(yZt,"distilbert"),yZt.forEach(t),RPr=r(GWe," \u2014 "),Jee=n(GWe,"A",{href:!0});var xZt=s(Jee);PPr=r(xZt,"TFDistilBertForMaskedLM"),xZt.forEach(t),BPr=r(GWe," (DistilBERT model)"),GWe.forEach(t),IPr=i(le),R5=n(le,"LI",{});var OWe=s(R5);tAe=n(OWe,"STRONG",{});var $Zt=s(tAe);NPr=r($Zt,"electra"),$Zt.forEach(t),qPr=r(OWe," \u2014 "),Yee=n(OWe,"A",{href:!0});var kZt=s(Yee);jPr=r(kZt,"TFElectraForPreTraining"),kZt.forEach(t),DPr=r(OWe," (ELECTRA model)"),OWe.forEach(t),GPr=i(le),P5=n(le,"LI",{});var VWe=s(P5);aAe=n(VWe,"STRONG",{});var SZt=s(aAe);OPr=r(SZt,"flaubert"),SZt.forEach(t),VPr=r(VWe," \u2014 "),Kee=n(VWe,"A",{href:!0});var RZt=s(Kee);XPr=r(RZt,"TFFlaubertWithLMHeadModel"),RZt.forEach(t),zPr=r(VWe," (FlauBERT model)"),VWe.forEach(t),QPr=i(le),B5=n(le,"LI",{});var XWe=s(B5);nAe=n(XWe,"STRONG",{});var PZt=s(nAe);WPr=r(PZt,"funnel"),PZt.forEach(t),UPr=r(XWe," \u2014 "),Zee=n(XWe,"A",{href:!0});var BZt=s(Zee);HPr=r(BZt,"TFFunnelForPreTraining"),BZt.forEach(t),JPr=r(XWe," (Funnel Transformer model)"),XWe.forEach(t),YPr=i(le),I5=n(le,"LI",{});var zWe=s(I5);sAe=n(zWe,"STRONG",{});var IZt=s(sAe);KPr=r(IZt,"gpt2"),IZt.forEach(t),ZPr=r(zWe," \u2014 "),eoe=n(zWe,"A",{href:!0});var NZt=s(eoe);eBr=r(NZt,"TFGPT2LMHeadModel"),NZt.forEach(t),oBr=r(zWe," (OpenAI GPT-2 model)"),zWe.forEach(t),rBr=i(le),N5=n(le,"LI",{});var QWe=s(N5);lAe=n(QWe,"STRONG",{});var qZt=s(lAe);tBr=r(qZt,"layoutlm"),qZt.forEach(t),aBr=r(QWe," \u2014 "),ooe=n(QWe,"A",{href:!0});var jZt=s(ooe);nBr=r(jZt,"TFLayoutLMForMaskedLM"),jZt.forEach(t),sBr=r(QWe," (LayoutLM model)"),QWe.forEach(t),lBr=i(le),q5=n(le,"LI",{});var WWe=s(q5);iAe=n(WWe,"STRONG",{});var DZt=s(iAe);iBr=r(DZt,"lxmert"),DZt.forEach(t),dBr=r(WWe," \u2014 "),roe=n(WWe,"A",{href:!0});var GZt=s(roe);cBr=r(GZt,"TFLxmertForPreTraining"),GZt.forEach(t),mBr=r(WWe," (LXMERT model)"),WWe.forEach(t),fBr=i(le),j5=n(le,"LI",{});var UWe=s(j5);dAe=n(UWe,"STRONG",{});var OZt=s(dAe);gBr=r(OZt,"mobilebert"),OZt.forEach(t),hBr=r(UWe," \u2014 "),toe=n(UWe,"A",{href:!0});var VZt=s(toe);uBr=r(VZt,"TFMobileBertForPreTraining"),VZt.forEach(t),pBr=r(UWe," (MobileBERT model)"),UWe.forEach(t),_Br=i(le),D5=n(le,"LI",{});var HWe=s(D5);cAe=n(HWe,"STRONG",{});var XZt=s(cAe);bBr=r(XZt,"mpnet"),XZt.forEach(t),vBr=r(HWe," \u2014 "),aoe=n(HWe,"A",{href:!0});var zZt=s(aoe);FBr=r(zZt,"TFMPNetForMaskedLM"),zZt.forEach(t),TBr=r(HWe," (MPNet model)"),HWe.forEach(t),MBr=i(le),G5=n(le,"LI",{});var JWe=s(G5);mAe=n(JWe,"STRONG",{});var QZt=s(mAe);EBr=r(QZt,"openai-gpt"),QZt.forEach(t),CBr=r(JWe," \u2014 "),noe=n(JWe,"A",{href:!0});var WZt=s(noe);wBr=r(WZt,"TFOpenAIGPTLMHeadModel"),WZt.forEach(t),ABr=r(JWe," (OpenAI GPT model)"),JWe.forEach(t),LBr=i(le),O5=n(le,"LI",{});var YWe=s(O5);fAe=n(YWe,"STRONG",{});var UZt=s(fAe);yBr=r(UZt,"roberta"),UZt.forEach(t),xBr=r(YWe," \u2014 "),soe=n(YWe,"A",{href:!0});var HZt=s(soe);$Br=r(HZt,"TFRobertaForMaskedLM"),HZt.forEach(t),kBr=r(YWe," (RoBERTa model)"),YWe.forEach(t),SBr=i(le),V5=n(le,"LI",{});var KWe=s(V5);gAe=n(KWe,"STRONG",{});var JZt=s(gAe);RBr=r(JZt,"t5"),JZt.forEach(t),PBr=r(KWe," \u2014 "),loe=n(KWe,"A",{href:!0});var YZt=s(loe);BBr=r(YZt,"TFT5ForConditionalGeneration"),YZt.forEach(t),IBr=r(KWe," (T5 model)"),KWe.forEach(t),NBr=i(le),X5=n(le,"LI",{});var ZWe=s(X5);hAe=n(ZWe,"STRONG",{});var KZt=s(hAe);qBr=r(KZt,"tapas"),KZt.forEach(t),jBr=r(ZWe," \u2014 "),ioe=n(ZWe,"A",{href:!0});var ZZt=s(ioe);DBr=r(ZZt,"TFTapasForMaskedLM"),ZZt.forEach(t),GBr=r(ZWe," (TAPAS model)"),ZWe.forEach(t),OBr=i(le),z5=n(le,"LI",{});var eUe=s(z5);uAe=n(eUe,"STRONG",{});var eea=s(uAe);VBr=r(eea,"transfo-xl"),eea.forEach(t),XBr=r(eUe," \u2014 "),doe=n(eUe,"A",{href:!0});var oea=s(doe);zBr=r(oea,"TFTransfoXLLMHeadModel"),oea.forEach(t),QBr=r(eUe," (Transformer-XL model)"),eUe.forEach(t),WBr=i(le),Q5=n(le,"LI",{});var oUe=s(Q5);pAe=n(oUe,"STRONG",{});var rea=s(pAe);UBr=r(rea,"vit_mae"),rea.forEach(t),HBr=r(oUe," \u2014 "),coe=n(oUe,"A",{href:!0});var tea=s(coe);JBr=r(tea,"TFViTMAEForPreTraining"),tea.forEach(t),YBr=r(oUe," (ViTMAE model)"),oUe.forEach(t),KBr=i(le),W5=n(le,"LI",{});var rUe=s(W5);_Ae=n(rUe,"STRONG",{});var aea=s(_Ae);ZBr=r(aea,"xlm"),aea.forEach(t),eIr=r(rUe," \u2014 "),moe=n(rUe,"A",{href:!0});var nea=s(moe);oIr=r(nea,"TFXLMWithLMHeadModel"),nea.forEach(t),rIr=r(rUe," (XLM model)"),rUe.forEach(t),tIr=i(le),U5=n(le,"LI",{});var tUe=s(U5);bAe=n(tUe,"STRONG",{});var sea=s(bAe);aIr=r(sea,"xlm-roberta"),sea.forEach(t),nIr=r(tUe," \u2014 "),foe=n(tUe,"A",{href:!0});var lea=s(foe);sIr=r(lea,"TFXLMRobertaForMaskedLM"),lea.forEach(t),lIr=r(tUe," (XLM-RoBERTa model)"),tUe.forEach(t),iIr=i(le),H5=n(le,"LI",{});var aUe=s(H5);vAe=n(aUe,"STRONG",{});var iea=s(vAe);dIr=r(iea,"xlnet"),iea.forEach(t),cIr=r(aUe," \u2014 "),goe=n(aUe,"A",{href:!0});var dea=s(goe);mIr=r(dea,"TFXLNetLMHeadModel"),dea.forEach(t),fIr=r(aUe," (XLNet model)"),aUe.forEach(t),le.forEach(t),gIr=i(ai),T(J5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),leo=i(m),Uc=n(m,"H2",{class:!0});var Mro=s(Uc);Y5=n(Mro,"A",{id:!0,class:!0,href:!0});var cea=s(Y5);FAe=n(cea,"SPAN",{});var mea=s(FAe);T(Wk.$$.fragment,mea),mea.forEach(t),cea.forEach(t),hIr=i(Mro),TAe=n(Mro,"SPAN",{});var fea=s(TAe);uIr=r(fea,"TFAutoModelForCausalLM"),fea.forEach(t),Mro.forEach(t),ieo=i(m),ir=n(m,"DIV",{class:!0});var ni=s(ir);T(Uk.$$.fragment,ni),pIr=i(ni),Hc=n(ni,"P",{});var kie=s(Hc);_Ir=r(kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hoe=n(kie,"A",{href:!0});var gea=s(hoe);bIr=r(gea,"from_pretrained()"),gea.forEach(t),vIr=r(kie," class method or the "),uoe=n(kie,"A",{href:!0});var hea=s(uoe);FIr=r(hea,"from_config()"),hea.forEach(t),TIr=r(kie,` class
method.`),kie.forEach(t),MIr=i(ni),Hk=n(ni,"P",{});var Ero=s(Hk);EIr=r(Ero,"This class cannot be instantiated directly using "),MAe=n(Ero,"CODE",{});var uea=s(MAe);CIr=r(uea,"__init__()"),uea.forEach(t),wIr=r(Ero," (throws an error)."),Ero.forEach(t),AIr=i(ni),Qt=n(ni,"DIV",{class:!0});var D8=s(Qt);T(Jk.$$.fragment,D8),LIr=i(D8),EAe=n(D8,"P",{});var pea=s(EAe);yIr=r(pea,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pea.forEach(t),xIr=i(D8),Jc=n(D8,"P",{});var Sie=s(Jc);$Ir=r(Sie,`Note:
Loading a model from its configuration file does `),CAe=n(Sie,"STRONG",{});var _ea=s(CAe);kIr=r(_ea,"not"),_ea.forEach(t),SIr=r(Sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=n(Sie,"A",{href:!0});var bea=s(poe);RIr=r(bea,"from_pretrained()"),bea.forEach(t),PIr=r(Sie," to load the model weights."),Sie.forEach(t),BIr=i(D8),T(K5.$$.fragment,D8),D8.forEach(t),IIr=i(ni),qr=n(ni,"DIV",{class:!0});var si=s(qr);T(Yk.$$.fragment,si),NIr=i(si),wAe=n(si,"P",{});var vea=s(wAe);qIr=r(vea,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vea.forEach(t),jIr=i(si),Ln=n(si,"P",{});var G8=s(Ln);DIr=r(G8,"The model class to instantiate is selected based on the "),AAe=n(G8,"CODE",{});var Fea=s(AAe);GIr=r(Fea,"model_type"),Fea.forEach(t),OIr=r(G8,` property of the config object (either
passed as an argument or loaded from `),LAe=n(G8,"CODE",{});var Tea=s(LAe);VIr=r(Tea,"pretrained_model_name_or_path"),Tea.forEach(t),XIr=r(G8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yAe=n(G8,"CODE",{});var Mea=s(yAe);zIr=r(Mea,"pretrained_model_name_or_path"),Mea.forEach(t),QIr=r(G8,":"),G8.forEach(t),WIr=i(si),Me=n(si,"UL",{});var Ce=s(Me);Z5=n(Ce,"LI",{});var nUe=s(Z5);xAe=n(nUe,"STRONG",{});var Eea=s(xAe);UIr=r(Eea,"bert"),Eea.forEach(t),HIr=r(nUe," \u2014 "),_oe=n(nUe,"A",{href:!0});var Cea=s(_oe);JIr=r(Cea,"TFBertLMHeadModel"),Cea.forEach(t),YIr=r(nUe," (BERT model)"),nUe.forEach(t),KIr=i(Ce),e0=n(Ce,"LI",{});var sUe=s(e0);$Ae=n(sUe,"STRONG",{});var wea=s($Ae);ZIr=r(wea,"camembert"),wea.forEach(t),eNr=r(sUe," \u2014 "),boe=n(sUe,"A",{href:!0});var Aea=s(boe);oNr=r(Aea,"TFCamembertForCausalLM"),Aea.forEach(t),rNr=r(sUe," (CamemBERT model)"),sUe.forEach(t),tNr=i(Ce),o0=n(Ce,"LI",{});var lUe=s(o0);kAe=n(lUe,"STRONG",{});var Lea=s(kAe);aNr=r(Lea,"ctrl"),Lea.forEach(t),nNr=r(lUe," \u2014 "),voe=n(lUe,"A",{href:!0});var yea=s(voe);sNr=r(yea,"TFCTRLLMHeadModel"),yea.forEach(t),lNr=r(lUe," (CTRL model)"),lUe.forEach(t),iNr=i(Ce),r0=n(Ce,"LI",{});var iUe=s(r0);SAe=n(iUe,"STRONG",{});var xea=s(SAe);dNr=r(xea,"gpt2"),xea.forEach(t),cNr=r(iUe," \u2014 "),Foe=n(iUe,"A",{href:!0});var $ea=s(Foe);mNr=r($ea,"TFGPT2LMHeadModel"),$ea.forEach(t),fNr=r(iUe," (OpenAI GPT-2 model)"),iUe.forEach(t),gNr=i(Ce),t0=n(Ce,"LI",{});var dUe=s(t0);RAe=n(dUe,"STRONG",{});var kea=s(RAe);hNr=r(kea,"gptj"),kea.forEach(t),uNr=r(dUe," \u2014 "),Toe=n(dUe,"A",{href:!0});var Sea=s(Toe);pNr=r(Sea,"TFGPTJForCausalLM"),Sea.forEach(t),_Nr=r(dUe," (GPT-J model)"),dUe.forEach(t),bNr=i(Ce),a0=n(Ce,"LI",{});var cUe=s(a0);PAe=n(cUe,"STRONG",{});var Rea=s(PAe);vNr=r(Rea,"openai-gpt"),Rea.forEach(t),FNr=r(cUe," \u2014 "),Moe=n(cUe,"A",{href:!0});var Pea=s(Moe);TNr=r(Pea,"TFOpenAIGPTLMHeadModel"),Pea.forEach(t),MNr=r(cUe," (OpenAI GPT model)"),cUe.forEach(t),ENr=i(Ce),n0=n(Ce,"LI",{});var mUe=s(n0);BAe=n(mUe,"STRONG",{});var Bea=s(BAe);CNr=r(Bea,"opt"),Bea.forEach(t),wNr=r(mUe," \u2014 "),Eoe=n(mUe,"A",{href:!0});var Iea=s(Eoe);ANr=r(Iea,"TFOPTForCausalLM"),Iea.forEach(t),LNr=r(mUe," (OPT model)"),mUe.forEach(t),yNr=i(Ce),s0=n(Ce,"LI",{});var fUe=s(s0);IAe=n(fUe,"STRONG",{});var Nea=s(IAe);xNr=r(Nea,"rembert"),Nea.forEach(t),$Nr=r(fUe," \u2014 "),Coe=n(fUe,"A",{href:!0});var qea=s(Coe);kNr=r(qea,"TFRemBertForCausalLM"),qea.forEach(t),SNr=r(fUe," (RemBERT model)"),fUe.forEach(t),RNr=i(Ce),l0=n(Ce,"LI",{});var gUe=s(l0);NAe=n(gUe,"STRONG",{});var jea=s(NAe);PNr=r(jea,"roberta"),jea.forEach(t),BNr=r(gUe," \u2014 "),woe=n(gUe,"A",{href:!0});var Dea=s(woe);INr=r(Dea,"TFRobertaForCausalLM"),Dea.forEach(t),NNr=r(gUe," (RoBERTa model)"),gUe.forEach(t),qNr=i(Ce),i0=n(Ce,"LI",{});var hUe=s(i0);qAe=n(hUe,"STRONG",{});var Gea=s(qAe);jNr=r(Gea,"roformer"),Gea.forEach(t),DNr=r(hUe," \u2014 "),Aoe=n(hUe,"A",{href:!0});var Oea=s(Aoe);GNr=r(Oea,"TFRoFormerForCausalLM"),Oea.forEach(t),ONr=r(hUe," (RoFormer model)"),hUe.forEach(t),VNr=i(Ce),d0=n(Ce,"LI",{});var uUe=s(d0);jAe=n(uUe,"STRONG",{});var Vea=s(jAe);XNr=r(Vea,"transfo-xl"),Vea.forEach(t),zNr=r(uUe," \u2014 "),Loe=n(uUe,"A",{href:!0});var Xea=s(Loe);QNr=r(Xea,"TFTransfoXLLMHeadModel"),Xea.forEach(t),WNr=r(uUe," (Transformer-XL model)"),uUe.forEach(t),UNr=i(Ce),c0=n(Ce,"LI",{});var pUe=s(c0);DAe=n(pUe,"STRONG",{});var zea=s(DAe);HNr=r(zea,"xglm"),zea.forEach(t),JNr=r(pUe," \u2014 "),yoe=n(pUe,"A",{href:!0});var Qea=s(yoe);YNr=r(Qea,"TFXGLMForCausalLM"),Qea.forEach(t),KNr=r(pUe," (XGLM model)"),pUe.forEach(t),ZNr=i(Ce),m0=n(Ce,"LI",{});var _Ue=s(m0);GAe=n(_Ue,"STRONG",{});var Wea=s(GAe);eqr=r(Wea,"xlm"),Wea.forEach(t),oqr=r(_Ue," \u2014 "),xoe=n(_Ue,"A",{href:!0});var Uea=s(xoe);rqr=r(Uea,"TFXLMWithLMHeadModel"),Uea.forEach(t),tqr=r(_Ue," (XLM model)"),_Ue.forEach(t),aqr=i(Ce),f0=n(Ce,"LI",{});var bUe=s(f0);OAe=n(bUe,"STRONG",{});var Hea=s(OAe);nqr=r(Hea,"xlnet"),Hea.forEach(t),sqr=r(bUe," \u2014 "),$oe=n(bUe,"A",{href:!0});var Jea=s($oe);lqr=r(Jea,"TFXLNetLMHeadModel"),Jea.forEach(t),iqr=r(bUe," (XLNet model)"),bUe.forEach(t),Ce.forEach(t),dqr=i(si),T(g0.$$.fragment,si),si.forEach(t),ni.forEach(t),deo=i(m),Yc=n(m,"H2",{class:!0});var Cro=s(Yc);h0=n(Cro,"A",{id:!0,class:!0,href:!0});var Yea=s(h0);VAe=n(Yea,"SPAN",{});var Kea=s(VAe);T(Kk.$$.fragment,Kea),Kea.forEach(t),Yea.forEach(t),cqr=i(Cro),XAe=n(Cro,"SPAN",{});var Zea=s(XAe);mqr=r(Zea,"TFAutoModelForImageClassification"),Zea.forEach(t),Cro.forEach(t),ceo=i(m),dr=n(m,"DIV",{class:!0});var li=s(dr);T(Zk.$$.fragment,li),fqr=i(li),Kc=n(li,"P",{});var Rie=s(Kc);gqr=r(Rie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),koe=n(Rie,"A",{href:!0});var eoa=s(koe);hqr=r(eoa,"from_pretrained()"),eoa.forEach(t),uqr=r(Rie," class method or the "),Soe=n(Rie,"A",{href:!0});var ooa=s(Soe);pqr=r(ooa,"from_config()"),ooa.forEach(t),_qr=r(Rie,` class
method.`),Rie.forEach(t),bqr=i(li),eS=n(li,"P",{});var wro=s(eS);vqr=r(wro,"This class cannot be instantiated directly using "),zAe=n(wro,"CODE",{});var roa=s(zAe);Fqr=r(roa,"__init__()"),roa.forEach(t),Tqr=r(wro," (throws an error)."),wro.forEach(t),Mqr=i(li),Wt=n(li,"DIV",{class:!0});var O8=s(Wt);T(oS.$$.fragment,O8),Eqr=i(O8),QAe=n(O8,"P",{});var toa=s(QAe);Cqr=r(toa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),toa.forEach(t),wqr=i(O8),Zc=n(O8,"P",{});var Pie=s(Zc);Aqr=r(Pie,`Note:
Loading a model from its configuration file does `),WAe=n(Pie,"STRONG",{});var aoa=s(WAe);Lqr=r(aoa,"not"),aoa.forEach(t),yqr=r(Pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(Pie,"A",{href:!0});var noa=s(Roe);xqr=r(noa,"from_pretrained()"),noa.forEach(t),$qr=r(Pie," to load the model weights."),Pie.forEach(t),kqr=i(O8),T(u0.$$.fragment,O8),O8.forEach(t),Sqr=i(li),jr=n(li,"DIV",{class:!0});var ii=s(jr);T(rS.$$.fragment,ii),Rqr=i(ii),UAe=n(ii,"P",{});var soa=s(UAe);Pqr=r(soa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),soa.forEach(t),Bqr=i(ii),yn=n(ii,"P",{});var V8=s(yn);Iqr=r(V8,"The model class to instantiate is selected based on the "),HAe=n(V8,"CODE",{});var loa=s(HAe);Nqr=r(loa,"model_type"),loa.forEach(t),qqr=r(V8,` property of the config object (either
passed as an argument or loaded from `),JAe=n(V8,"CODE",{});var ioa=s(JAe);jqr=r(ioa,"pretrained_model_name_or_path"),ioa.forEach(t),Dqr=r(V8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YAe=n(V8,"CODE",{});var doa=s(YAe);Gqr=r(doa,"pretrained_model_name_or_path"),doa.forEach(t),Oqr=r(V8,":"),V8.forEach(t),Vqr=i(ii),Be=n(ii,"UL",{});var We=s(Be);p0=n(We,"LI",{});var vUe=s(p0);KAe=n(vUe,"STRONG",{});var coa=s(KAe);Xqr=r(coa,"convnext"),coa.forEach(t),zqr=r(vUe," \u2014 "),Poe=n(vUe,"A",{href:!0});var moa=s(Poe);Qqr=r(moa,"TFConvNextForImageClassification"),moa.forEach(t),Wqr=r(vUe," (ConvNeXT model)"),vUe.forEach(t),Uqr=i(We),_0=n(We,"LI",{});var FUe=s(_0);ZAe=n(FUe,"STRONG",{});var foa=s(ZAe);Hqr=r(foa,"data2vec-vision"),foa.forEach(t),Jqr=r(FUe," \u2014 "),Boe=n(FUe,"A",{href:!0});var goa=s(Boe);Yqr=r(goa,"TFData2VecVisionForImageClassification"),goa.forEach(t),Kqr=r(FUe," (Data2VecVision model)"),FUe.forEach(t),Zqr=i(We),Tl=n(We,"LI",{});var GB=s(Tl);e6e=n(GB,"STRONG",{});var hoa=s(e6e);ejr=r(hoa,"deit"),hoa.forEach(t),ojr=r(GB," \u2014 "),Ioe=n(GB,"A",{href:!0});var uoa=s(Ioe);rjr=r(uoa,"TFDeiTForImageClassification"),uoa.forEach(t),tjr=r(GB," or "),Noe=n(GB,"A",{href:!0});var poa=s(Noe);ajr=r(poa,"TFDeiTForImageClassificationWithTeacher"),poa.forEach(t),njr=r(GB," (DeiT model)"),GB.forEach(t),sjr=i(We),b0=n(We,"LI",{});var TUe=s(b0);o6e=n(TUe,"STRONG",{});var _oa=s(o6e);ljr=r(_oa,"mobilevit"),_oa.forEach(t),ijr=r(TUe," \u2014 "),qoe=n(TUe,"A",{href:!0});var boa=s(qoe);djr=r(boa,"TFMobileViTForImageClassification"),boa.forEach(t),cjr=r(TUe," (MobileViT model)"),TUe.forEach(t),mjr=i(We),v0=n(We,"LI",{});var MUe=s(v0);r6e=n(MUe,"STRONG",{});var voa=s(r6e);fjr=r(voa,"regnet"),voa.forEach(t),gjr=r(MUe," \u2014 "),joe=n(MUe,"A",{href:!0});var Foa=s(joe);hjr=r(Foa,"TFRegNetForImageClassification"),Foa.forEach(t),ujr=r(MUe," (RegNet model)"),MUe.forEach(t),pjr=i(We),F0=n(We,"LI",{});var EUe=s(F0);t6e=n(EUe,"STRONG",{});var Toa=s(t6e);_jr=r(Toa,"resnet"),Toa.forEach(t),bjr=r(EUe," \u2014 "),Doe=n(EUe,"A",{href:!0});var Moa=s(Doe);vjr=r(Moa,"TFResNetForImageClassification"),Moa.forEach(t),Fjr=r(EUe," (ResNet model)"),EUe.forEach(t),Tjr=i(We),T0=n(We,"LI",{});var CUe=s(T0);a6e=n(CUe,"STRONG",{});var Eoa=s(a6e);Mjr=r(Eoa,"segformer"),Eoa.forEach(t),Ejr=r(CUe," \u2014 "),Goe=n(CUe,"A",{href:!0});var Coa=s(Goe);Cjr=r(Coa,"TFSegformerForImageClassification"),Coa.forEach(t),wjr=r(CUe," (SegFormer model)"),CUe.forEach(t),Ajr=i(We),M0=n(We,"LI",{});var wUe=s(M0);n6e=n(wUe,"STRONG",{});var woa=s(n6e);Ljr=r(woa,"swin"),woa.forEach(t),yjr=r(wUe," \u2014 "),Ooe=n(wUe,"A",{href:!0});var Aoa=s(Ooe);xjr=r(Aoa,"TFSwinForImageClassification"),Aoa.forEach(t),$jr=r(wUe," (Swin Transformer model)"),wUe.forEach(t),kjr=i(We),E0=n(We,"LI",{});var AUe=s(E0);s6e=n(AUe,"STRONG",{});var Loa=s(s6e);Sjr=r(Loa,"vit"),Loa.forEach(t),Rjr=r(AUe," \u2014 "),Voe=n(AUe,"A",{href:!0});var yoa=s(Voe);Pjr=r(yoa,"TFViTForImageClassification"),yoa.forEach(t),Bjr=r(AUe," (ViT model)"),AUe.forEach(t),We.forEach(t),Ijr=i(ii),T(C0.$$.fragment,ii),ii.forEach(t),li.forEach(t),meo=i(m),em=n(m,"H2",{class:!0});var Aro=s(em);w0=n(Aro,"A",{id:!0,class:!0,href:!0});var xoa=s(w0);l6e=n(xoa,"SPAN",{});var $oa=s(l6e);T(tS.$$.fragment,$oa),$oa.forEach(t),xoa.forEach(t),Njr=i(Aro),i6e=n(Aro,"SPAN",{});var koa=s(i6e);qjr=r(koa,"TFAutoModelForSemanticSegmentation"),koa.forEach(t),Aro.forEach(t),feo=i(m),cr=n(m,"DIV",{class:!0});var di=s(cr);T(aS.$$.fragment,di),jjr=i(di),om=n(di,"P",{});var Bie=s(om);Djr=r(Bie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Xoe=n(Bie,"A",{href:!0});var Soa=s(Xoe);Gjr=r(Soa,"from_pretrained()"),Soa.forEach(t),Ojr=r(Bie," class method or the "),zoe=n(Bie,"A",{href:!0});var Roa=s(zoe);Vjr=r(Roa,"from_config()"),Roa.forEach(t),Xjr=r(Bie,` class
method.`),Bie.forEach(t),zjr=i(di),nS=n(di,"P",{});var Lro=s(nS);Qjr=r(Lro,"This class cannot be instantiated directly using "),d6e=n(Lro,"CODE",{});var Poa=s(d6e);Wjr=r(Poa,"__init__()"),Poa.forEach(t),Ujr=r(Lro," (throws an error)."),Lro.forEach(t),Hjr=i(di),Ut=n(di,"DIV",{class:!0});var X8=s(Ut);T(sS.$$.fragment,X8),Jjr=i(X8),c6e=n(X8,"P",{});var Boa=s(c6e);Yjr=r(Boa,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Boa.forEach(t),Kjr=i(X8),rm=n(X8,"P",{});var Iie=s(rm);Zjr=r(Iie,`Note:
Loading a model from its configuration file does `),m6e=n(Iie,"STRONG",{});var Ioa=s(m6e);eDr=r(Ioa,"not"),Ioa.forEach(t),oDr=r(Iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=n(Iie,"A",{href:!0});var Noa=s(Qoe);rDr=r(Noa,"from_pretrained()"),Noa.forEach(t),tDr=r(Iie," to load the model weights."),Iie.forEach(t),aDr=i(X8),T(A0.$$.fragment,X8),X8.forEach(t),nDr=i(di),Dr=n(di,"DIV",{class:!0});var ci=s(Dr);T(lS.$$.fragment,ci),sDr=i(ci),f6e=n(ci,"P",{});var qoa=s(f6e);lDr=r(qoa,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qoa.forEach(t),iDr=i(ci),xn=n(ci,"P",{});var z8=s(xn);dDr=r(z8,"The model class to instantiate is selected based on the "),g6e=n(z8,"CODE",{});var joa=s(g6e);cDr=r(joa,"model_type"),joa.forEach(t),mDr=r(z8,` property of the config object (either
passed as an argument or loaded from `),h6e=n(z8,"CODE",{});var Doa=s(h6e);fDr=r(Doa,"pretrained_model_name_or_path"),Doa.forEach(t),gDr=r(z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(z8,"CODE",{});var Goa=s(u6e);hDr=r(Goa,"pretrained_model_name_or_path"),Goa.forEach(t),uDr=r(z8,":"),z8.forEach(t),pDr=i(ci),tm=n(ci,"UL",{});var Nie=s(tm);L0=n(Nie,"LI",{});var LUe=s(L0);p6e=n(LUe,"STRONG",{});var Ooa=s(p6e);_Dr=r(Ooa,"data2vec-vision"),Ooa.forEach(t),bDr=r(LUe," \u2014 "),Woe=n(LUe,"A",{href:!0});var Voa=s(Woe);vDr=r(Voa,"TFData2VecVisionForSemanticSegmentation"),Voa.forEach(t),FDr=r(LUe," (Data2VecVision model)"),LUe.forEach(t),TDr=i(Nie),y0=n(Nie,"LI",{});var yUe=s(y0);_6e=n(yUe,"STRONG",{});var Xoa=s(_6e);MDr=r(Xoa,"mobilevit"),Xoa.forEach(t),EDr=r(yUe," \u2014 "),Uoe=n(yUe,"A",{href:!0});var zoa=s(Uoe);CDr=r(zoa,"TFMobileViTForSemanticSegmentation"),zoa.forEach(t),wDr=r(yUe," (MobileViT model)"),yUe.forEach(t),ADr=i(Nie),x0=n(Nie,"LI",{});var xUe=s(x0);b6e=n(xUe,"STRONG",{});var Qoa=s(b6e);LDr=r(Qoa,"segformer"),Qoa.forEach(t),yDr=r(xUe," \u2014 "),Hoe=n(xUe,"A",{href:!0});var Woa=s(Hoe);xDr=r(Woa,"TFSegformerForSemanticSegmentation"),Woa.forEach(t),$Dr=r(xUe," (SegFormer model)"),xUe.forEach(t),Nie.forEach(t),kDr=i(ci),T($0.$$.fragment,ci),ci.forEach(t),di.forEach(t),geo=i(m),am=n(m,"H2",{class:!0});var yro=s(am);k0=n(yro,"A",{id:!0,class:!0,href:!0});var Uoa=s(k0);v6e=n(Uoa,"SPAN",{});var Hoa=s(v6e);T(iS.$$.fragment,Hoa),Hoa.forEach(t),Uoa.forEach(t),SDr=i(yro),F6e=n(yro,"SPAN",{});var Joa=s(F6e);RDr=r(Joa,"TFAutoModelForMaskedLM"),Joa.forEach(t),yro.forEach(t),heo=i(m),mr=n(m,"DIV",{class:!0});var mi=s(mr);T(dS.$$.fragment,mi),PDr=i(mi),nm=n(mi,"P",{});var qie=s(nm);BDr=r(qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Joe=n(qie,"A",{href:!0});var Yoa=s(Joe);IDr=r(Yoa,"from_pretrained()"),Yoa.forEach(t),NDr=r(qie," class method or the "),Yoe=n(qie,"A",{href:!0});var Koa=s(Yoe);qDr=r(Koa,"from_config()"),Koa.forEach(t),jDr=r(qie,` class
method.`),qie.forEach(t),DDr=i(mi),cS=n(mi,"P",{});var xro=s(cS);GDr=r(xro,"This class cannot be instantiated directly using "),T6e=n(xro,"CODE",{});var Zoa=s(T6e);ODr=r(Zoa,"__init__()"),Zoa.forEach(t),VDr=r(xro," (throws an error)."),xro.forEach(t),XDr=i(mi),Ht=n(mi,"DIV",{class:!0});var Q8=s(Ht);T(mS.$$.fragment,Q8),zDr=i(Q8),M6e=n(Q8,"P",{});var era=s(M6e);QDr=r(era,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),era.forEach(t),WDr=i(Q8),sm=n(Q8,"P",{});var jie=s(sm);UDr=r(jie,`Note:
Loading a model from its configuration file does `),E6e=n(jie,"STRONG",{});var ora=s(E6e);HDr=r(ora,"not"),ora.forEach(t),JDr=r(jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=n(jie,"A",{href:!0});var rra=s(Koe);YDr=r(rra,"from_pretrained()"),rra.forEach(t),KDr=r(jie," to load the model weights."),jie.forEach(t),ZDr=i(Q8),T(S0.$$.fragment,Q8),Q8.forEach(t),eGr=i(mi),Gr=n(mi,"DIV",{class:!0});var fi=s(Gr);T(fS.$$.fragment,fi),oGr=i(fi),C6e=n(fi,"P",{});var tra=s(C6e);rGr=r(tra,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tra.forEach(t),tGr=i(fi),$n=n(fi,"P",{});var W8=s($n);aGr=r(W8,"The model class to instantiate is selected based on the "),w6e=n(W8,"CODE",{});var ara=s(w6e);nGr=r(ara,"model_type"),ara.forEach(t),sGr=r(W8,` property of the config object (either
passed as an argument or loaded from `),A6e=n(W8,"CODE",{});var nra=s(A6e);lGr=r(nra,"pretrained_model_name_or_path"),nra.forEach(t),iGr=r(W8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(W8,"CODE",{});var sra=s(L6e);dGr=r(sra,"pretrained_model_name_or_path"),sra.forEach(t),cGr=r(W8,":"),W8.forEach(t),mGr=i(fi),fe=n(fi,"UL",{});var _e=s(fe);R0=n(_e,"LI",{});var $Ue=s(R0);y6e=n($Ue,"STRONG",{});var lra=s(y6e);fGr=r(lra,"albert"),lra.forEach(t),gGr=r($Ue," \u2014 "),Zoe=n($Ue,"A",{href:!0});var ira=s(Zoe);hGr=r(ira,"TFAlbertForMaskedLM"),ira.forEach(t),uGr=r($Ue," (ALBERT model)"),$Ue.forEach(t),pGr=i(_e),P0=n(_e,"LI",{});var kUe=s(P0);x6e=n(kUe,"STRONG",{});var dra=s(x6e);_Gr=r(dra,"bert"),dra.forEach(t),bGr=r(kUe," \u2014 "),ere=n(kUe,"A",{href:!0});var cra=s(ere);vGr=r(cra,"TFBertForMaskedLM"),cra.forEach(t),FGr=r(kUe," (BERT model)"),kUe.forEach(t),TGr=i(_e),B0=n(_e,"LI",{});var SUe=s(B0);$6e=n(SUe,"STRONG",{});var mra=s($6e);MGr=r(mra,"camembert"),mra.forEach(t),EGr=r(SUe," \u2014 "),ore=n(SUe,"A",{href:!0});var fra=s(ore);CGr=r(fra,"TFCamembertForMaskedLM"),fra.forEach(t),wGr=r(SUe," (CamemBERT model)"),SUe.forEach(t),AGr=i(_e),I0=n(_e,"LI",{});var RUe=s(I0);k6e=n(RUe,"STRONG",{});var gra=s(k6e);LGr=r(gra,"convbert"),gra.forEach(t),yGr=r(RUe," \u2014 "),rre=n(RUe,"A",{href:!0});var hra=s(rre);xGr=r(hra,"TFConvBertForMaskedLM"),hra.forEach(t),$Gr=r(RUe," (ConvBERT model)"),RUe.forEach(t),kGr=i(_e),N0=n(_e,"LI",{});var PUe=s(N0);S6e=n(PUe,"STRONG",{});var ura=s(S6e);SGr=r(ura,"deberta"),ura.forEach(t),RGr=r(PUe," \u2014 "),tre=n(PUe,"A",{href:!0});var pra=s(tre);PGr=r(pra,"TFDebertaForMaskedLM"),pra.forEach(t),BGr=r(PUe," (DeBERTa model)"),PUe.forEach(t),IGr=i(_e),q0=n(_e,"LI",{});var BUe=s(q0);R6e=n(BUe,"STRONG",{});var _ra=s(R6e);NGr=r(_ra,"deberta-v2"),_ra.forEach(t),qGr=r(BUe," \u2014 "),are=n(BUe,"A",{href:!0});var bra=s(are);jGr=r(bra,"TFDebertaV2ForMaskedLM"),bra.forEach(t),DGr=r(BUe," (DeBERTa-v2 model)"),BUe.forEach(t),GGr=i(_e),j0=n(_e,"LI",{});var IUe=s(j0);P6e=n(IUe,"STRONG",{});var vra=s(P6e);OGr=r(vra,"distilbert"),vra.forEach(t),VGr=r(IUe," \u2014 "),nre=n(IUe,"A",{href:!0});var Fra=s(nre);XGr=r(Fra,"TFDistilBertForMaskedLM"),Fra.forEach(t),zGr=r(IUe," (DistilBERT model)"),IUe.forEach(t),QGr=i(_e),D0=n(_e,"LI",{});var NUe=s(D0);B6e=n(NUe,"STRONG",{});var Tra=s(B6e);WGr=r(Tra,"electra"),Tra.forEach(t),UGr=r(NUe," \u2014 "),sre=n(NUe,"A",{href:!0});var Mra=s(sre);HGr=r(Mra,"TFElectraForMaskedLM"),Mra.forEach(t),JGr=r(NUe," (ELECTRA model)"),NUe.forEach(t),YGr=i(_e),G0=n(_e,"LI",{});var qUe=s(G0);I6e=n(qUe,"STRONG",{});var Era=s(I6e);KGr=r(Era,"flaubert"),Era.forEach(t),ZGr=r(qUe," \u2014 "),lre=n(qUe,"A",{href:!0});var Cra=s(lre);eOr=r(Cra,"TFFlaubertWithLMHeadModel"),Cra.forEach(t),oOr=r(qUe," (FlauBERT model)"),qUe.forEach(t),rOr=i(_e),O0=n(_e,"LI",{});var jUe=s(O0);N6e=n(jUe,"STRONG",{});var wra=s(N6e);tOr=r(wra,"funnel"),wra.forEach(t),aOr=r(jUe," \u2014 "),ire=n(jUe,"A",{href:!0});var Ara=s(ire);nOr=r(Ara,"TFFunnelForMaskedLM"),Ara.forEach(t),sOr=r(jUe," (Funnel Transformer model)"),jUe.forEach(t),lOr=i(_e),V0=n(_e,"LI",{});var DUe=s(V0);q6e=n(DUe,"STRONG",{});var Lra=s(q6e);iOr=r(Lra,"layoutlm"),Lra.forEach(t),dOr=r(DUe," \u2014 "),dre=n(DUe,"A",{href:!0});var yra=s(dre);cOr=r(yra,"TFLayoutLMForMaskedLM"),yra.forEach(t),mOr=r(DUe," (LayoutLM model)"),DUe.forEach(t),fOr=i(_e),X0=n(_e,"LI",{});var GUe=s(X0);j6e=n(GUe,"STRONG",{});var xra=s(j6e);gOr=r(xra,"longformer"),xra.forEach(t),hOr=r(GUe," \u2014 "),cre=n(GUe,"A",{href:!0});var $ra=s(cre);uOr=r($ra,"TFLongformerForMaskedLM"),$ra.forEach(t),pOr=r(GUe," (Longformer model)"),GUe.forEach(t),_Or=i(_e),z0=n(_e,"LI",{});var OUe=s(z0);D6e=n(OUe,"STRONG",{});var kra=s(D6e);bOr=r(kra,"mobilebert"),kra.forEach(t),vOr=r(OUe," \u2014 "),mre=n(OUe,"A",{href:!0});var Sra=s(mre);FOr=r(Sra,"TFMobileBertForMaskedLM"),Sra.forEach(t),TOr=r(OUe," (MobileBERT model)"),OUe.forEach(t),MOr=i(_e),Q0=n(_e,"LI",{});var VUe=s(Q0);G6e=n(VUe,"STRONG",{});var Rra=s(G6e);EOr=r(Rra,"mpnet"),Rra.forEach(t),COr=r(VUe," \u2014 "),fre=n(VUe,"A",{href:!0});var Pra=s(fre);wOr=r(Pra,"TFMPNetForMaskedLM"),Pra.forEach(t),AOr=r(VUe," (MPNet model)"),VUe.forEach(t),LOr=i(_e),W0=n(_e,"LI",{});var XUe=s(W0);O6e=n(XUe,"STRONG",{});var Bra=s(O6e);yOr=r(Bra,"rembert"),Bra.forEach(t),xOr=r(XUe," \u2014 "),gre=n(XUe,"A",{href:!0});var Ira=s(gre);$Or=r(Ira,"TFRemBertForMaskedLM"),Ira.forEach(t),kOr=r(XUe," (RemBERT model)"),XUe.forEach(t),SOr=i(_e),U0=n(_e,"LI",{});var zUe=s(U0);V6e=n(zUe,"STRONG",{});var Nra=s(V6e);ROr=r(Nra,"roberta"),Nra.forEach(t),POr=r(zUe," \u2014 "),hre=n(zUe,"A",{href:!0});var qra=s(hre);BOr=r(qra,"TFRobertaForMaskedLM"),qra.forEach(t),IOr=r(zUe," (RoBERTa model)"),zUe.forEach(t),NOr=i(_e),H0=n(_e,"LI",{});var QUe=s(H0);X6e=n(QUe,"STRONG",{});var jra=s(X6e);qOr=r(jra,"roformer"),jra.forEach(t),jOr=r(QUe," \u2014 "),ure=n(QUe,"A",{href:!0});var Dra=s(ure);DOr=r(Dra,"TFRoFormerForMaskedLM"),Dra.forEach(t),GOr=r(QUe," (RoFormer model)"),QUe.forEach(t),OOr=i(_e),J0=n(_e,"LI",{});var WUe=s(J0);z6e=n(WUe,"STRONG",{});var Gra=s(z6e);VOr=r(Gra,"tapas"),Gra.forEach(t),XOr=r(WUe," \u2014 "),pre=n(WUe,"A",{href:!0});var Ora=s(pre);zOr=r(Ora,"TFTapasForMaskedLM"),Ora.forEach(t),QOr=r(WUe," (TAPAS model)"),WUe.forEach(t),WOr=i(_e),Y0=n(_e,"LI",{});var UUe=s(Y0);Q6e=n(UUe,"STRONG",{});var Vra=s(Q6e);UOr=r(Vra,"xlm"),Vra.forEach(t),HOr=r(UUe," \u2014 "),_re=n(UUe,"A",{href:!0});var Xra=s(_re);JOr=r(Xra,"TFXLMWithLMHeadModel"),Xra.forEach(t),YOr=r(UUe," (XLM model)"),UUe.forEach(t),KOr=i(_e),K0=n(_e,"LI",{});var HUe=s(K0);W6e=n(HUe,"STRONG",{});var zra=s(W6e);ZOr=r(zra,"xlm-roberta"),zra.forEach(t),eVr=r(HUe," \u2014 "),bre=n(HUe,"A",{href:!0});var Qra=s(bre);oVr=r(Qra,"TFXLMRobertaForMaskedLM"),Qra.forEach(t),rVr=r(HUe," (XLM-RoBERTa model)"),HUe.forEach(t),_e.forEach(t),tVr=i(fi),T(Z0.$$.fragment,fi),fi.forEach(t),mi.forEach(t),ueo=i(m),lm=n(m,"H2",{class:!0});var $ro=s(lm);ew=n($ro,"A",{id:!0,class:!0,href:!0});var Wra=s(ew);U6e=n(Wra,"SPAN",{});var Ura=s(U6e);T(gS.$$.fragment,Ura),Ura.forEach(t),Wra.forEach(t),aVr=i($ro),H6e=n($ro,"SPAN",{});var Hra=s(H6e);nVr=r(Hra,"TFAutoModelForSeq2SeqLM"),Hra.forEach(t),$ro.forEach(t),peo=i(m),fr=n(m,"DIV",{class:!0});var gi=s(fr);T(hS.$$.fragment,gi),sVr=i(gi),im=n(gi,"P",{});var Die=s(im);lVr=r(Die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vre=n(Die,"A",{href:!0});var Jra=s(vre);iVr=r(Jra,"from_pretrained()"),Jra.forEach(t),dVr=r(Die," class method or the "),Fre=n(Die,"A",{href:!0});var Yra=s(Fre);cVr=r(Yra,"from_config()"),Yra.forEach(t),mVr=r(Die,` class
method.`),Die.forEach(t),fVr=i(gi),uS=n(gi,"P",{});var kro=s(uS);gVr=r(kro,"This class cannot be instantiated directly using "),J6e=n(kro,"CODE",{});var Kra=s(J6e);hVr=r(Kra,"__init__()"),Kra.forEach(t),uVr=r(kro," (throws an error)."),kro.forEach(t),pVr=i(gi),Jt=n(gi,"DIV",{class:!0});var U8=s(Jt);T(pS.$$.fragment,U8),_Vr=i(U8),Y6e=n(U8,"P",{});var Zra=s(Y6e);bVr=r(Zra,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zra.forEach(t),vVr=i(U8),dm=n(U8,"P",{});var Gie=s(dm);FVr=r(Gie,`Note:
Loading a model from its configuration file does `),K6e=n(Gie,"STRONG",{});var eta=s(K6e);TVr=r(eta,"not"),eta.forEach(t),MVr=r(Gie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=n(Gie,"A",{href:!0});var ota=s(Tre);EVr=r(ota,"from_pretrained()"),ota.forEach(t),CVr=r(Gie," to load the model weights."),Gie.forEach(t),wVr=i(U8),T(ow.$$.fragment,U8),U8.forEach(t),AVr=i(gi),Or=n(gi,"DIV",{class:!0});var hi=s(Or);T(_S.$$.fragment,hi),LVr=i(hi),Z6e=n(hi,"P",{});var rta=s(Z6e);yVr=r(rta,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rta.forEach(t),xVr=i(hi),kn=n(hi,"P",{});var H8=s(kn);$Vr=r(H8,"The model class to instantiate is selected based on the "),e7e=n(H8,"CODE",{});var tta=s(e7e);kVr=r(tta,"model_type"),tta.forEach(t),SVr=r(H8,` property of the config object (either
passed as an argument or loaded from `),o7e=n(H8,"CODE",{});var ata=s(o7e);RVr=r(ata,"pretrained_model_name_or_path"),ata.forEach(t),PVr=r(H8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=n(H8,"CODE",{});var nta=s(r7e);BVr=r(nta,"pretrained_model_name_or_path"),nta.forEach(t),IVr=r(H8,":"),H8.forEach(t),NVr=i(hi),ye=n(hi,"UL",{});var Ne=s(ye);rw=n(Ne,"LI",{});var JUe=s(rw);t7e=n(JUe,"STRONG",{});var sta=s(t7e);qVr=r(sta,"bart"),sta.forEach(t),jVr=r(JUe," \u2014 "),Mre=n(JUe,"A",{href:!0});var lta=s(Mre);DVr=r(lta,"TFBartForConditionalGeneration"),lta.forEach(t),GVr=r(JUe," (BART model)"),JUe.forEach(t),OVr=i(Ne),tw=n(Ne,"LI",{});var YUe=s(tw);a7e=n(YUe,"STRONG",{});var ita=s(a7e);VVr=r(ita,"blenderbot"),ita.forEach(t),XVr=r(YUe," \u2014 "),Ere=n(YUe,"A",{href:!0});var dta=s(Ere);zVr=r(dta,"TFBlenderbotForConditionalGeneration"),dta.forEach(t),QVr=r(YUe," (Blenderbot model)"),YUe.forEach(t),WVr=i(Ne),aw=n(Ne,"LI",{});var KUe=s(aw);n7e=n(KUe,"STRONG",{});var cta=s(n7e);UVr=r(cta,"blenderbot-small"),cta.forEach(t),HVr=r(KUe," \u2014 "),Cre=n(KUe,"A",{href:!0});var mta=s(Cre);JVr=r(mta,"TFBlenderbotSmallForConditionalGeneration"),mta.forEach(t),YVr=r(KUe," (BlenderbotSmall model)"),KUe.forEach(t),KVr=i(Ne),nw=n(Ne,"LI",{});var ZUe=s(nw);s7e=n(ZUe,"STRONG",{});var fta=s(s7e);ZVr=r(fta,"encoder-decoder"),fta.forEach(t),eXr=r(ZUe," \u2014 "),wre=n(ZUe,"A",{href:!0});var gta=s(wre);oXr=r(gta,"TFEncoderDecoderModel"),gta.forEach(t),rXr=r(ZUe," (Encoder decoder model)"),ZUe.forEach(t),tXr=i(Ne),sw=n(Ne,"LI",{});var eHe=s(sw);l7e=n(eHe,"STRONG",{});var hta=s(l7e);aXr=r(hta,"led"),hta.forEach(t),nXr=r(eHe," \u2014 "),Are=n(eHe,"A",{href:!0});var uta=s(Are);sXr=r(uta,"TFLEDForConditionalGeneration"),uta.forEach(t),lXr=r(eHe," (LED model)"),eHe.forEach(t),iXr=i(Ne),lw=n(Ne,"LI",{});var oHe=s(lw);i7e=n(oHe,"STRONG",{});var pta=s(i7e);dXr=r(pta,"marian"),pta.forEach(t),cXr=r(oHe," \u2014 "),Lre=n(oHe,"A",{href:!0});var _ta=s(Lre);mXr=r(_ta,"TFMarianMTModel"),_ta.forEach(t),fXr=r(oHe," (Marian model)"),oHe.forEach(t),gXr=i(Ne),iw=n(Ne,"LI",{});var rHe=s(iw);d7e=n(rHe,"STRONG",{});var bta=s(d7e);hXr=r(bta,"mbart"),bta.forEach(t),uXr=r(rHe," \u2014 "),yre=n(rHe,"A",{href:!0});var vta=s(yre);pXr=r(vta,"TFMBartForConditionalGeneration"),vta.forEach(t),_Xr=r(rHe," (mBART model)"),rHe.forEach(t),bXr=i(Ne),dw=n(Ne,"LI",{});var tHe=s(dw);c7e=n(tHe,"STRONG",{});var Fta=s(c7e);vXr=r(Fta,"mt5"),Fta.forEach(t),FXr=r(tHe," \u2014 "),xre=n(tHe,"A",{href:!0});var Tta=s(xre);TXr=r(Tta,"TFMT5ForConditionalGeneration"),Tta.forEach(t),MXr=r(tHe," (MT5 model)"),tHe.forEach(t),EXr=i(Ne),cw=n(Ne,"LI",{});var aHe=s(cw);m7e=n(aHe,"STRONG",{});var Mta=s(m7e);CXr=r(Mta,"pegasus"),Mta.forEach(t),wXr=r(aHe," \u2014 "),$re=n(aHe,"A",{href:!0});var Eta=s($re);AXr=r(Eta,"TFPegasusForConditionalGeneration"),Eta.forEach(t),LXr=r(aHe," (Pegasus model)"),aHe.forEach(t),yXr=i(Ne),mw=n(Ne,"LI",{});var nHe=s(mw);f7e=n(nHe,"STRONG",{});var Cta=s(f7e);xXr=r(Cta,"t5"),Cta.forEach(t),$Xr=r(nHe," \u2014 "),kre=n(nHe,"A",{href:!0});var wta=s(kre);kXr=r(wta,"TFT5ForConditionalGeneration"),wta.forEach(t),SXr=r(nHe," (T5 model)"),nHe.forEach(t),Ne.forEach(t),RXr=i(hi),T(fw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),_eo=i(m),cm=n(m,"H2",{class:!0});var Sro=s(cm);gw=n(Sro,"A",{id:!0,class:!0,href:!0});var Ata=s(gw);g7e=n(Ata,"SPAN",{});var Lta=s(g7e);T(bS.$$.fragment,Lta),Lta.forEach(t),Ata.forEach(t),PXr=i(Sro),h7e=n(Sro,"SPAN",{});var yta=s(h7e);BXr=r(yta,"TFAutoModelForSequenceClassification"),yta.forEach(t),Sro.forEach(t),beo=i(m),gr=n(m,"DIV",{class:!0});var ui=s(gr);T(vS.$$.fragment,ui),IXr=i(ui),mm=n(ui,"P",{});var Oie=s(mm);NXr=r(Oie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Sre=n(Oie,"A",{href:!0});var xta=s(Sre);qXr=r(xta,"from_pretrained()"),xta.forEach(t),jXr=r(Oie," class method or the "),Rre=n(Oie,"A",{href:!0});var $ta=s(Rre);DXr=r($ta,"from_config()"),$ta.forEach(t),GXr=r(Oie,` class
method.`),Oie.forEach(t),OXr=i(ui),FS=n(ui,"P",{});var Rro=s(FS);VXr=r(Rro,"This class cannot be instantiated directly using "),u7e=n(Rro,"CODE",{});var kta=s(u7e);XXr=r(kta,"__init__()"),kta.forEach(t),zXr=r(Rro," (throws an error)."),Rro.forEach(t),QXr=i(ui),Yt=n(ui,"DIV",{class:!0});var J8=s(Yt);T(TS.$$.fragment,J8),WXr=i(J8),p7e=n(J8,"P",{});var Sta=s(p7e);UXr=r(Sta,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sta.forEach(t),HXr=i(J8),fm=n(J8,"P",{});var Vie=s(fm);JXr=r(Vie,`Note:
Loading a model from its configuration file does `),_7e=n(Vie,"STRONG",{});var Rta=s(_7e);YXr=r(Rta,"not"),Rta.forEach(t),KXr=r(Vie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=n(Vie,"A",{href:!0});var Pta=s(Pre);ZXr=r(Pta,"from_pretrained()"),Pta.forEach(t),ezr=r(Vie," to load the model weights."),Vie.forEach(t),ozr=i(J8),T(hw.$$.fragment,J8),J8.forEach(t),rzr=i(ui),Vr=n(ui,"DIV",{class:!0});var pi=s(Vr);T(MS.$$.fragment,pi),tzr=i(pi),b7e=n(pi,"P",{});var Bta=s(b7e);azr=r(Bta,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bta.forEach(t),nzr=i(pi),Sn=n(pi,"P",{});var Y8=s(Sn);szr=r(Y8,"The model class to instantiate is selected based on the "),v7e=n(Y8,"CODE",{});var Ita=s(v7e);lzr=r(Ita,"model_type"),Ita.forEach(t),izr=r(Y8,` property of the config object (either
passed as an argument or loaded from `),F7e=n(Y8,"CODE",{});var Nta=s(F7e);dzr=r(Nta,"pretrained_model_name_or_path"),Nta.forEach(t),czr=r(Y8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=n(Y8,"CODE",{});var qta=s(T7e);mzr=r(qta,"pretrained_model_name_or_path"),qta.forEach(t),fzr=r(Y8,":"),Y8.forEach(t),gzr=i(pi),re=n(pi,"UL",{});var ae=s(re);uw=n(ae,"LI",{});var sHe=s(uw);M7e=n(sHe,"STRONG",{});var jta=s(M7e);hzr=r(jta,"albert"),jta.forEach(t),uzr=r(sHe," \u2014 "),Bre=n(sHe,"A",{href:!0});var Dta=s(Bre);pzr=r(Dta,"TFAlbertForSequenceClassification"),Dta.forEach(t),_zr=r(sHe," (ALBERT model)"),sHe.forEach(t),bzr=i(ae),pw=n(ae,"LI",{});var lHe=s(pw);E7e=n(lHe,"STRONG",{});var Gta=s(E7e);vzr=r(Gta,"bert"),Gta.forEach(t),Fzr=r(lHe," \u2014 "),Ire=n(lHe,"A",{href:!0});var Ota=s(Ire);Tzr=r(Ota,"TFBertForSequenceClassification"),Ota.forEach(t),Mzr=r(lHe," (BERT model)"),lHe.forEach(t),Ezr=i(ae),_w=n(ae,"LI",{});var iHe=s(_w);C7e=n(iHe,"STRONG",{});var Vta=s(C7e);Czr=r(Vta,"camembert"),Vta.forEach(t),wzr=r(iHe," \u2014 "),Nre=n(iHe,"A",{href:!0});var Xta=s(Nre);Azr=r(Xta,"TFCamembertForSequenceClassification"),Xta.forEach(t),Lzr=r(iHe," (CamemBERT model)"),iHe.forEach(t),yzr=i(ae),bw=n(ae,"LI",{});var dHe=s(bw);w7e=n(dHe,"STRONG",{});var zta=s(w7e);xzr=r(zta,"convbert"),zta.forEach(t),$zr=r(dHe," \u2014 "),qre=n(dHe,"A",{href:!0});var Qta=s(qre);kzr=r(Qta,"TFConvBertForSequenceClassification"),Qta.forEach(t),Szr=r(dHe," (ConvBERT model)"),dHe.forEach(t),Rzr=i(ae),vw=n(ae,"LI",{});var cHe=s(vw);A7e=n(cHe,"STRONG",{});var Wta=s(A7e);Pzr=r(Wta,"ctrl"),Wta.forEach(t),Bzr=r(cHe," \u2014 "),jre=n(cHe,"A",{href:!0});var Uta=s(jre);Izr=r(Uta,"TFCTRLForSequenceClassification"),Uta.forEach(t),Nzr=r(cHe," (CTRL model)"),cHe.forEach(t),qzr=i(ae),Fw=n(ae,"LI",{});var mHe=s(Fw);L7e=n(mHe,"STRONG",{});var Hta=s(L7e);jzr=r(Hta,"deberta"),Hta.forEach(t),Dzr=r(mHe," \u2014 "),Dre=n(mHe,"A",{href:!0});var Jta=s(Dre);Gzr=r(Jta,"TFDebertaForSequenceClassification"),Jta.forEach(t),Ozr=r(mHe," (DeBERTa model)"),mHe.forEach(t),Vzr=i(ae),Tw=n(ae,"LI",{});var fHe=s(Tw);y7e=n(fHe,"STRONG",{});var Yta=s(y7e);Xzr=r(Yta,"deberta-v2"),Yta.forEach(t),zzr=r(fHe," \u2014 "),Gre=n(fHe,"A",{href:!0});var Kta=s(Gre);Qzr=r(Kta,"TFDebertaV2ForSequenceClassification"),Kta.forEach(t),Wzr=r(fHe," (DeBERTa-v2 model)"),fHe.forEach(t),Uzr=i(ae),Mw=n(ae,"LI",{});var gHe=s(Mw);x7e=n(gHe,"STRONG",{});var Zta=s(x7e);Hzr=r(Zta,"distilbert"),Zta.forEach(t),Jzr=r(gHe," \u2014 "),Ore=n(gHe,"A",{href:!0});var eaa=s(Ore);Yzr=r(eaa,"TFDistilBertForSequenceClassification"),eaa.forEach(t),Kzr=r(gHe," (DistilBERT model)"),gHe.forEach(t),Zzr=i(ae),Ew=n(ae,"LI",{});var hHe=s(Ew);$7e=n(hHe,"STRONG",{});var oaa=s($7e);eQr=r(oaa,"electra"),oaa.forEach(t),oQr=r(hHe," \u2014 "),Vre=n(hHe,"A",{href:!0});var raa=s(Vre);rQr=r(raa,"TFElectraForSequenceClassification"),raa.forEach(t),tQr=r(hHe," (ELECTRA model)"),hHe.forEach(t),aQr=i(ae),Cw=n(ae,"LI",{});var uHe=s(Cw);k7e=n(uHe,"STRONG",{});var taa=s(k7e);nQr=r(taa,"flaubert"),taa.forEach(t),sQr=r(uHe," \u2014 "),Xre=n(uHe,"A",{href:!0});var aaa=s(Xre);lQr=r(aaa,"TFFlaubertForSequenceClassification"),aaa.forEach(t),iQr=r(uHe," (FlauBERT model)"),uHe.forEach(t),dQr=i(ae),ww=n(ae,"LI",{});var pHe=s(ww);S7e=n(pHe,"STRONG",{});var naa=s(S7e);cQr=r(naa,"funnel"),naa.forEach(t),mQr=r(pHe," \u2014 "),zre=n(pHe,"A",{href:!0});var saa=s(zre);fQr=r(saa,"TFFunnelForSequenceClassification"),saa.forEach(t),gQr=r(pHe," (Funnel Transformer model)"),pHe.forEach(t),hQr=i(ae),Aw=n(ae,"LI",{});var _He=s(Aw);R7e=n(_He,"STRONG",{});var laa=s(R7e);uQr=r(laa,"gpt2"),laa.forEach(t),pQr=r(_He," \u2014 "),Qre=n(_He,"A",{href:!0});var iaa=s(Qre);_Qr=r(iaa,"TFGPT2ForSequenceClassification"),iaa.forEach(t),bQr=r(_He," (OpenAI GPT-2 model)"),_He.forEach(t),vQr=i(ae),Lw=n(ae,"LI",{});var bHe=s(Lw);P7e=n(bHe,"STRONG",{});var daa=s(P7e);FQr=r(daa,"gptj"),daa.forEach(t),TQr=r(bHe," \u2014 "),Wre=n(bHe,"A",{href:!0});var caa=s(Wre);MQr=r(caa,"TFGPTJForSequenceClassification"),caa.forEach(t),EQr=r(bHe," (GPT-J model)"),bHe.forEach(t),CQr=i(ae),yw=n(ae,"LI",{});var vHe=s(yw);B7e=n(vHe,"STRONG",{});var maa=s(B7e);wQr=r(maa,"layoutlm"),maa.forEach(t),AQr=r(vHe," \u2014 "),Ure=n(vHe,"A",{href:!0});var faa=s(Ure);LQr=r(faa,"TFLayoutLMForSequenceClassification"),faa.forEach(t),yQr=r(vHe," (LayoutLM model)"),vHe.forEach(t),xQr=i(ae),xw=n(ae,"LI",{});var FHe=s(xw);I7e=n(FHe,"STRONG",{});var gaa=s(I7e);$Qr=r(gaa,"layoutlmv3"),gaa.forEach(t),kQr=r(FHe," \u2014 "),Hre=n(FHe,"A",{href:!0});var haa=s(Hre);SQr=r(haa,"TFLayoutLMv3ForSequenceClassification"),haa.forEach(t),RQr=r(FHe," (LayoutLMv3 model)"),FHe.forEach(t),PQr=i(ae),$w=n(ae,"LI",{});var THe=s($w);N7e=n(THe,"STRONG",{});var uaa=s(N7e);BQr=r(uaa,"longformer"),uaa.forEach(t),IQr=r(THe," \u2014 "),Jre=n(THe,"A",{href:!0});var paa=s(Jre);NQr=r(paa,"TFLongformerForSequenceClassification"),paa.forEach(t),qQr=r(THe," (Longformer model)"),THe.forEach(t),jQr=i(ae),kw=n(ae,"LI",{});var MHe=s(kw);q7e=n(MHe,"STRONG",{});var _aa=s(q7e);DQr=r(_aa,"mobilebert"),_aa.forEach(t),GQr=r(MHe," \u2014 "),Yre=n(MHe,"A",{href:!0});var baa=s(Yre);OQr=r(baa,"TFMobileBertForSequenceClassification"),baa.forEach(t),VQr=r(MHe," (MobileBERT model)"),MHe.forEach(t),XQr=i(ae),Sw=n(ae,"LI",{});var EHe=s(Sw);j7e=n(EHe,"STRONG",{});var vaa=s(j7e);zQr=r(vaa,"mpnet"),vaa.forEach(t),QQr=r(EHe," \u2014 "),Kre=n(EHe,"A",{href:!0});var Faa=s(Kre);WQr=r(Faa,"TFMPNetForSequenceClassification"),Faa.forEach(t),UQr=r(EHe," (MPNet model)"),EHe.forEach(t),HQr=i(ae),Rw=n(ae,"LI",{});var CHe=s(Rw);D7e=n(CHe,"STRONG",{});var Taa=s(D7e);JQr=r(Taa,"openai-gpt"),Taa.forEach(t),YQr=r(CHe," \u2014 "),Zre=n(CHe,"A",{href:!0});var Maa=s(Zre);KQr=r(Maa,"TFOpenAIGPTForSequenceClassification"),Maa.forEach(t),ZQr=r(CHe," (OpenAI GPT model)"),CHe.forEach(t),eWr=i(ae),Pw=n(ae,"LI",{});var wHe=s(Pw);G7e=n(wHe,"STRONG",{});var Eaa=s(G7e);oWr=r(Eaa,"rembert"),Eaa.forEach(t),rWr=r(wHe," \u2014 "),ete=n(wHe,"A",{href:!0});var Caa=s(ete);tWr=r(Caa,"TFRemBertForSequenceClassification"),Caa.forEach(t),aWr=r(wHe," (RemBERT model)"),wHe.forEach(t),nWr=i(ae),Bw=n(ae,"LI",{});var AHe=s(Bw);O7e=n(AHe,"STRONG",{});var waa=s(O7e);sWr=r(waa,"roberta"),waa.forEach(t),lWr=r(AHe," \u2014 "),ote=n(AHe,"A",{href:!0});var Aaa=s(ote);iWr=r(Aaa,"TFRobertaForSequenceClassification"),Aaa.forEach(t),dWr=r(AHe," (RoBERTa model)"),AHe.forEach(t),cWr=i(ae),Iw=n(ae,"LI",{});var LHe=s(Iw);V7e=n(LHe,"STRONG",{});var Laa=s(V7e);mWr=r(Laa,"roformer"),Laa.forEach(t),fWr=r(LHe," \u2014 "),rte=n(LHe,"A",{href:!0});var yaa=s(rte);gWr=r(yaa,"TFRoFormerForSequenceClassification"),yaa.forEach(t),hWr=r(LHe," (RoFormer model)"),LHe.forEach(t),uWr=i(ae),Nw=n(ae,"LI",{});var yHe=s(Nw);X7e=n(yHe,"STRONG",{});var xaa=s(X7e);pWr=r(xaa,"tapas"),xaa.forEach(t),_Wr=r(yHe," \u2014 "),tte=n(yHe,"A",{href:!0});var $aa=s(tte);bWr=r($aa,"TFTapasForSequenceClassification"),$aa.forEach(t),vWr=r(yHe," (TAPAS model)"),yHe.forEach(t),FWr=i(ae),qw=n(ae,"LI",{});var xHe=s(qw);z7e=n(xHe,"STRONG",{});var kaa=s(z7e);TWr=r(kaa,"transfo-xl"),kaa.forEach(t),MWr=r(xHe," \u2014 "),ate=n(xHe,"A",{href:!0});var Saa=s(ate);EWr=r(Saa,"TFTransfoXLForSequenceClassification"),Saa.forEach(t),CWr=r(xHe," (Transformer-XL model)"),xHe.forEach(t),wWr=i(ae),jw=n(ae,"LI",{});var $He=s(jw);Q7e=n($He,"STRONG",{});var Raa=s(Q7e);AWr=r(Raa,"xlm"),Raa.forEach(t),LWr=r($He," \u2014 "),nte=n($He,"A",{href:!0});var Paa=s(nte);yWr=r(Paa,"TFXLMForSequenceClassification"),Paa.forEach(t),xWr=r($He," (XLM model)"),$He.forEach(t),$Wr=i(ae),Dw=n(ae,"LI",{});var kHe=s(Dw);W7e=n(kHe,"STRONG",{});var Baa=s(W7e);kWr=r(Baa,"xlm-roberta"),Baa.forEach(t),SWr=r(kHe," \u2014 "),ste=n(kHe,"A",{href:!0});var Iaa=s(ste);RWr=r(Iaa,"TFXLMRobertaForSequenceClassification"),Iaa.forEach(t),PWr=r(kHe," (XLM-RoBERTa model)"),kHe.forEach(t),BWr=i(ae),Gw=n(ae,"LI",{});var SHe=s(Gw);U7e=n(SHe,"STRONG",{});var Naa=s(U7e);IWr=r(Naa,"xlnet"),Naa.forEach(t),NWr=r(SHe," \u2014 "),lte=n(SHe,"A",{href:!0});var qaa=s(lte);qWr=r(qaa,"TFXLNetForSequenceClassification"),qaa.forEach(t),jWr=r(SHe," (XLNet model)"),SHe.forEach(t),ae.forEach(t),DWr=i(pi),T(Ow.$$.fragment,pi),pi.forEach(t),ui.forEach(t),veo=i(m),gm=n(m,"H2",{class:!0});var Pro=s(gm);Vw=n(Pro,"A",{id:!0,class:!0,href:!0});var jaa=s(Vw);H7e=n(jaa,"SPAN",{});var Daa=s(H7e);T(ES.$$.fragment,Daa),Daa.forEach(t),jaa.forEach(t),GWr=i(Pro),J7e=n(Pro,"SPAN",{});var Gaa=s(J7e);OWr=r(Gaa,"TFAutoModelForMultipleChoice"),Gaa.forEach(t),Pro.forEach(t),Feo=i(m),hr=n(m,"DIV",{class:!0});var _i=s(hr);T(CS.$$.fragment,_i),VWr=i(_i),hm=n(_i,"P",{});var Xie=s(hm);XWr=r(Xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ite=n(Xie,"A",{href:!0});var Oaa=s(ite);zWr=r(Oaa,"from_pretrained()"),Oaa.forEach(t),QWr=r(Xie," class method or the "),dte=n(Xie,"A",{href:!0});var Vaa=s(dte);WWr=r(Vaa,"from_config()"),Vaa.forEach(t),UWr=r(Xie,` class
method.`),Xie.forEach(t),HWr=i(_i),wS=n(_i,"P",{});var Bro=s(wS);JWr=r(Bro,"This class cannot be instantiated directly using "),Y7e=n(Bro,"CODE",{});var Xaa=s(Y7e);YWr=r(Xaa,"__init__()"),Xaa.forEach(t),KWr=r(Bro," (throws an error)."),Bro.forEach(t),ZWr=i(_i),Kt=n(_i,"DIV",{class:!0});var K8=s(Kt);T(AS.$$.fragment,K8),eUr=i(K8),K7e=n(K8,"P",{});var zaa=s(K7e);oUr=r(zaa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zaa.forEach(t),rUr=i(K8),um=n(K8,"P",{});var zie=s(um);tUr=r(zie,`Note:
Loading a model from its configuration file does `),Z7e=n(zie,"STRONG",{});var Qaa=s(Z7e);aUr=r(Qaa,"not"),Qaa.forEach(t),nUr=r(zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),cte=n(zie,"A",{href:!0});var Waa=s(cte);sUr=r(Waa,"from_pretrained()"),Waa.forEach(t),lUr=r(zie," to load the model weights."),zie.forEach(t),iUr=i(K8),T(Xw.$$.fragment,K8),K8.forEach(t),dUr=i(_i),Xr=n(_i,"DIV",{class:!0});var bi=s(Xr);T(LS.$$.fragment,bi),cUr=i(bi),eLe=n(bi,"P",{});var Uaa=s(eLe);mUr=r(Uaa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Uaa.forEach(t),fUr=i(bi),Rn=n(bi,"P",{});var Z8=s(Rn);gUr=r(Z8,"The model class to instantiate is selected based on the "),oLe=n(Z8,"CODE",{});var Haa=s(oLe);hUr=r(Haa,"model_type"),Haa.forEach(t),uUr=r(Z8,` property of the config object (either
passed as an argument or loaded from `),rLe=n(Z8,"CODE",{});var Jaa=s(rLe);pUr=r(Jaa,"pretrained_model_name_or_path"),Jaa.forEach(t),_Ur=r(Z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tLe=n(Z8,"CODE",{});var Yaa=s(tLe);bUr=r(Yaa,"pretrained_model_name_or_path"),Yaa.forEach(t),vUr=r(Z8,":"),Z8.forEach(t),FUr=i(bi),ve=n(bi,"UL",{});var Te=s(ve);zw=n(Te,"LI",{});var RHe=s(zw);aLe=n(RHe,"STRONG",{});var Kaa=s(aLe);TUr=r(Kaa,"albert"),Kaa.forEach(t),MUr=r(RHe," \u2014 "),mte=n(RHe,"A",{href:!0});var Zaa=s(mte);EUr=r(Zaa,"TFAlbertForMultipleChoice"),Zaa.forEach(t),CUr=r(RHe," (ALBERT model)"),RHe.forEach(t),wUr=i(Te),Qw=n(Te,"LI",{});var PHe=s(Qw);nLe=n(PHe,"STRONG",{});var ena=s(nLe);AUr=r(ena,"bert"),ena.forEach(t),LUr=r(PHe," \u2014 "),fte=n(PHe,"A",{href:!0});var ona=s(fte);yUr=r(ona,"TFBertForMultipleChoice"),ona.forEach(t),xUr=r(PHe," (BERT model)"),PHe.forEach(t),$Ur=i(Te),Ww=n(Te,"LI",{});var BHe=s(Ww);sLe=n(BHe,"STRONG",{});var rna=s(sLe);kUr=r(rna,"camembert"),rna.forEach(t),SUr=r(BHe," \u2014 "),gte=n(BHe,"A",{href:!0});var tna=s(gte);RUr=r(tna,"TFCamembertForMultipleChoice"),tna.forEach(t),PUr=r(BHe," (CamemBERT model)"),BHe.forEach(t),BUr=i(Te),Uw=n(Te,"LI",{});var IHe=s(Uw);lLe=n(IHe,"STRONG",{});var ana=s(lLe);IUr=r(ana,"convbert"),ana.forEach(t),NUr=r(IHe," \u2014 "),hte=n(IHe,"A",{href:!0});var nna=s(hte);qUr=r(nna,"TFConvBertForMultipleChoice"),nna.forEach(t),jUr=r(IHe," (ConvBERT model)"),IHe.forEach(t),DUr=i(Te),Hw=n(Te,"LI",{});var NHe=s(Hw);iLe=n(NHe,"STRONG",{});var sna=s(iLe);GUr=r(sna,"distilbert"),sna.forEach(t),OUr=r(NHe," \u2014 "),ute=n(NHe,"A",{href:!0});var lna=s(ute);VUr=r(lna,"TFDistilBertForMultipleChoice"),lna.forEach(t),XUr=r(NHe," (DistilBERT model)"),NHe.forEach(t),zUr=i(Te),Jw=n(Te,"LI",{});var qHe=s(Jw);dLe=n(qHe,"STRONG",{});var ina=s(dLe);QUr=r(ina,"electra"),ina.forEach(t),WUr=r(qHe," \u2014 "),pte=n(qHe,"A",{href:!0});var dna=s(pte);UUr=r(dna,"TFElectraForMultipleChoice"),dna.forEach(t),HUr=r(qHe," (ELECTRA model)"),qHe.forEach(t),JUr=i(Te),Yw=n(Te,"LI",{});var jHe=s(Yw);cLe=n(jHe,"STRONG",{});var cna=s(cLe);YUr=r(cna,"flaubert"),cna.forEach(t),KUr=r(jHe," \u2014 "),_te=n(jHe,"A",{href:!0});var mna=s(_te);ZUr=r(mna,"TFFlaubertForMultipleChoice"),mna.forEach(t),eHr=r(jHe," (FlauBERT model)"),jHe.forEach(t),oHr=i(Te),Kw=n(Te,"LI",{});var DHe=s(Kw);mLe=n(DHe,"STRONG",{});var fna=s(mLe);rHr=r(fna,"funnel"),fna.forEach(t),tHr=r(DHe," \u2014 "),bte=n(DHe,"A",{href:!0});var gna=s(bte);aHr=r(gna,"TFFunnelForMultipleChoice"),gna.forEach(t),nHr=r(DHe," (Funnel Transformer model)"),DHe.forEach(t),sHr=i(Te),Zw=n(Te,"LI",{});var GHe=s(Zw);fLe=n(GHe,"STRONG",{});var hna=s(fLe);lHr=r(hna,"longformer"),hna.forEach(t),iHr=r(GHe," \u2014 "),vte=n(GHe,"A",{href:!0});var una=s(vte);dHr=r(una,"TFLongformerForMultipleChoice"),una.forEach(t),cHr=r(GHe," (Longformer model)"),GHe.forEach(t),mHr=i(Te),eA=n(Te,"LI",{});var OHe=s(eA);gLe=n(OHe,"STRONG",{});var pna=s(gLe);fHr=r(pna,"mobilebert"),pna.forEach(t),gHr=r(OHe," \u2014 "),Fte=n(OHe,"A",{href:!0});var _na=s(Fte);hHr=r(_na,"TFMobileBertForMultipleChoice"),_na.forEach(t),uHr=r(OHe," (MobileBERT model)"),OHe.forEach(t),pHr=i(Te),oA=n(Te,"LI",{});var VHe=s(oA);hLe=n(VHe,"STRONG",{});var bna=s(hLe);_Hr=r(bna,"mpnet"),bna.forEach(t),bHr=r(VHe," \u2014 "),Tte=n(VHe,"A",{href:!0});var vna=s(Tte);vHr=r(vna,"TFMPNetForMultipleChoice"),vna.forEach(t),FHr=r(VHe," (MPNet model)"),VHe.forEach(t),THr=i(Te),rA=n(Te,"LI",{});var XHe=s(rA);uLe=n(XHe,"STRONG",{});var Fna=s(uLe);MHr=r(Fna,"rembert"),Fna.forEach(t),EHr=r(XHe," \u2014 "),Mte=n(XHe,"A",{href:!0});var Tna=s(Mte);CHr=r(Tna,"TFRemBertForMultipleChoice"),Tna.forEach(t),wHr=r(XHe," (RemBERT model)"),XHe.forEach(t),AHr=i(Te),tA=n(Te,"LI",{});var zHe=s(tA);pLe=n(zHe,"STRONG",{});var Mna=s(pLe);LHr=r(Mna,"roberta"),Mna.forEach(t),yHr=r(zHe," \u2014 "),Ete=n(zHe,"A",{href:!0});var Ena=s(Ete);xHr=r(Ena,"TFRobertaForMultipleChoice"),Ena.forEach(t),$Hr=r(zHe," (RoBERTa model)"),zHe.forEach(t),kHr=i(Te),aA=n(Te,"LI",{});var QHe=s(aA);_Le=n(QHe,"STRONG",{});var Cna=s(_Le);SHr=r(Cna,"roformer"),Cna.forEach(t),RHr=r(QHe," \u2014 "),Cte=n(QHe,"A",{href:!0});var wna=s(Cte);PHr=r(wna,"TFRoFormerForMultipleChoice"),wna.forEach(t),BHr=r(QHe," (RoFormer model)"),QHe.forEach(t),IHr=i(Te),nA=n(Te,"LI",{});var WHe=s(nA);bLe=n(WHe,"STRONG",{});var Ana=s(bLe);NHr=r(Ana,"xlm"),Ana.forEach(t),qHr=r(WHe," \u2014 "),wte=n(WHe,"A",{href:!0});var Lna=s(wte);jHr=r(Lna,"TFXLMForMultipleChoice"),Lna.forEach(t),DHr=r(WHe," (XLM model)"),WHe.forEach(t),GHr=i(Te),sA=n(Te,"LI",{});var UHe=s(sA);vLe=n(UHe,"STRONG",{});var yna=s(vLe);OHr=r(yna,"xlm-roberta"),yna.forEach(t),VHr=r(UHe," \u2014 "),Ate=n(UHe,"A",{href:!0});var xna=s(Ate);XHr=r(xna,"TFXLMRobertaForMultipleChoice"),xna.forEach(t),zHr=r(UHe," (XLM-RoBERTa model)"),UHe.forEach(t),QHr=i(Te),lA=n(Te,"LI",{});var HHe=s(lA);FLe=n(HHe,"STRONG",{});var $na=s(FLe);WHr=r($na,"xlnet"),$na.forEach(t),UHr=r(HHe," \u2014 "),Lte=n(HHe,"A",{href:!0});var kna=s(Lte);HHr=r(kna,"TFXLNetForMultipleChoice"),kna.forEach(t),JHr=r(HHe," (XLNet model)"),HHe.forEach(t),Te.forEach(t),YHr=i(bi),T(iA.$$.fragment,bi),bi.forEach(t),_i.forEach(t),Teo=i(m),pm=n(m,"H2",{class:!0});var Iro=s(pm);dA=n(Iro,"A",{id:!0,class:!0,href:!0});var Sna=s(dA);TLe=n(Sna,"SPAN",{});var Rna=s(TLe);T(yS.$$.fragment,Rna),Rna.forEach(t),Sna.forEach(t),KHr=i(Iro),MLe=n(Iro,"SPAN",{});var Pna=s(MLe);ZHr=r(Pna,"TFAutoModelForNextSentencePrediction"),Pna.forEach(t),Iro.forEach(t),Meo=i(m),ur=n(m,"DIV",{class:!0});var vi=s(ur);T(xS.$$.fragment,vi),eJr=i(vi),_m=n(vi,"P",{});var Qie=s(_m);oJr=r(Qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yte=n(Qie,"A",{href:!0});var Bna=s(yte);rJr=r(Bna,"from_pretrained()"),Bna.forEach(t),tJr=r(Qie," class method or the "),xte=n(Qie,"A",{href:!0});var Ina=s(xte);aJr=r(Ina,"from_config()"),Ina.forEach(t),nJr=r(Qie,` class
method.`),Qie.forEach(t),sJr=i(vi),$S=n(vi,"P",{});var Nro=s($S);lJr=r(Nro,"This class cannot be instantiated directly using "),ELe=n(Nro,"CODE",{});var Nna=s(ELe);iJr=r(Nna,"__init__()"),Nna.forEach(t),dJr=r(Nro," (throws an error)."),Nro.forEach(t),cJr=i(vi),Zt=n(vi,"DIV",{class:!0});var e9=s(Zt);T(kS.$$.fragment,e9),mJr=i(e9),CLe=n(e9,"P",{});var qna=s(CLe);fJr=r(qna,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qna.forEach(t),gJr=i(e9),bm=n(e9,"P",{});var Wie=s(bm);hJr=r(Wie,`Note:
Loading a model from its configuration file does `),wLe=n(Wie,"STRONG",{});var jna=s(wLe);uJr=r(jna,"not"),jna.forEach(t),pJr=r(Wie,` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=n(Wie,"A",{href:!0});var Dna=s($te);_Jr=r(Dna,"from_pretrained()"),Dna.forEach(t),bJr=r(Wie," to load the model weights."),Wie.forEach(t),vJr=i(e9),T(cA.$$.fragment,e9),e9.forEach(t),FJr=i(vi),zr=n(vi,"DIV",{class:!0});var Fi=s(zr);T(SS.$$.fragment,Fi),TJr=i(Fi),ALe=n(Fi,"P",{});var Gna=s(ALe);MJr=r(Gna,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Gna.forEach(t),EJr=i(Fi),Pn=n(Fi,"P",{});var o9=s(Pn);CJr=r(o9,"The model class to instantiate is selected based on the "),LLe=n(o9,"CODE",{});var Ona=s(LLe);wJr=r(Ona,"model_type"),Ona.forEach(t),AJr=r(o9,` property of the config object (either
passed as an argument or loaded from `),yLe=n(o9,"CODE",{});var Vna=s(yLe);LJr=r(Vna,"pretrained_model_name_or_path"),Vna.forEach(t),yJr=r(o9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xLe=n(o9,"CODE",{});var Xna=s(xLe);xJr=r(Xna,"pretrained_model_name_or_path"),Xna.forEach(t),$Jr=r(o9,":"),o9.forEach(t),kJr=i(Fi),RS=n(Fi,"UL",{});var qro=s(RS);mA=n(qro,"LI",{});var JHe=s(mA);$Le=n(JHe,"STRONG",{});var zna=s($Le);SJr=r(zna,"bert"),zna.forEach(t),RJr=r(JHe," \u2014 "),kte=n(JHe,"A",{href:!0});var Qna=s(kte);PJr=r(Qna,"TFBertForNextSentencePrediction"),Qna.forEach(t),BJr=r(JHe," (BERT model)"),JHe.forEach(t),IJr=i(qro),fA=n(qro,"LI",{});var YHe=s(fA);kLe=n(YHe,"STRONG",{});var Wna=s(kLe);NJr=r(Wna,"mobilebert"),Wna.forEach(t),qJr=r(YHe," \u2014 "),Ste=n(YHe,"A",{href:!0});var Una=s(Ste);jJr=r(Una,"TFMobileBertForNextSentencePrediction"),Una.forEach(t),DJr=r(YHe," (MobileBERT model)"),YHe.forEach(t),qro.forEach(t),GJr=i(Fi),T(gA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),Eeo=i(m),vm=n(m,"H2",{class:!0});var jro=s(vm);hA=n(jro,"A",{id:!0,class:!0,href:!0});var Hna=s(hA);SLe=n(Hna,"SPAN",{});var Jna=s(SLe);T(PS.$$.fragment,Jna),Jna.forEach(t),Hna.forEach(t),OJr=i(jro),RLe=n(jro,"SPAN",{});var Yna=s(RLe);VJr=r(Yna,"TFAutoModelForTableQuestionAnswering"),Yna.forEach(t),jro.forEach(t),Ceo=i(m),pr=n(m,"DIV",{class:!0});var Ti=s(pr);T(BS.$$.fragment,Ti),XJr=i(Ti),Fm=n(Ti,"P",{});var Uie=s(Fm);zJr=r(Uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rte=n(Uie,"A",{href:!0});var Kna=s(Rte);QJr=r(Kna,"from_pretrained()"),Kna.forEach(t),WJr=r(Uie," class method or the "),Pte=n(Uie,"A",{href:!0});var Zna=s(Pte);UJr=r(Zna,"from_config()"),Zna.forEach(t),HJr=r(Uie,` class
method.`),Uie.forEach(t),JJr=i(Ti),IS=n(Ti,"P",{});var Dro=s(IS);YJr=r(Dro,"This class cannot be instantiated directly using "),PLe=n(Dro,"CODE",{});var esa=s(PLe);KJr=r(esa,"__init__()"),esa.forEach(t),ZJr=r(Dro," (throws an error)."),Dro.forEach(t),eYr=i(Ti),ea=n(Ti,"DIV",{class:!0});var r9=s(ea);T(NS.$$.fragment,r9),oYr=i(r9),BLe=n(r9,"P",{});var osa=s(BLe);rYr=r(osa,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),osa.forEach(t),tYr=i(r9),Tm=n(r9,"P",{});var Hie=s(Tm);aYr=r(Hie,`Note:
Loading a model from its configuration file does `),ILe=n(Hie,"STRONG",{});var rsa=s(ILe);nYr=r(rsa,"not"),rsa.forEach(t),sYr=r(Hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=n(Hie,"A",{href:!0});var tsa=s(Bte);lYr=r(tsa,"from_pretrained()"),tsa.forEach(t),iYr=r(Hie," to load the model weights."),Hie.forEach(t),dYr=i(r9),T(uA.$$.fragment,r9),r9.forEach(t),cYr=i(Ti),Qr=n(Ti,"DIV",{class:!0});var Mi=s(Qr);T(qS.$$.fragment,Mi),mYr=i(Mi),NLe=n(Mi,"P",{});var asa=s(NLe);fYr=r(asa,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),asa.forEach(t),gYr=i(Mi),Bn=n(Mi,"P",{});var t9=s(Bn);hYr=r(t9,"The model class to instantiate is selected based on the "),qLe=n(t9,"CODE",{});var nsa=s(qLe);uYr=r(nsa,"model_type"),nsa.forEach(t),pYr=r(t9,` property of the config object (either
passed as an argument or loaded from `),jLe=n(t9,"CODE",{});var ssa=s(jLe);_Yr=r(ssa,"pretrained_model_name_or_path"),ssa.forEach(t),bYr=r(t9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DLe=n(t9,"CODE",{});var lsa=s(DLe);vYr=r(lsa,"pretrained_model_name_or_path"),lsa.forEach(t),FYr=r(t9,":"),t9.forEach(t),TYr=i(Mi),GLe=n(Mi,"UL",{});var isa=s(GLe);pA=n(isa,"LI",{});var KHe=s(pA);OLe=n(KHe,"STRONG",{});var dsa=s(OLe);MYr=r(dsa,"tapas"),dsa.forEach(t),EYr=r(KHe," \u2014 "),Ite=n(KHe,"A",{href:!0});var csa=s(Ite);CYr=r(csa,"TFTapasForQuestionAnswering"),csa.forEach(t),wYr=r(KHe," (TAPAS model)"),KHe.forEach(t),isa.forEach(t),AYr=i(Mi),T(_A.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),weo=i(m),Mm=n(m,"H2",{class:!0});var Gro=s(Mm);bA=n(Gro,"A",{id:!0,class:!0,href:!0});var msa=s(bA);VLe=n(msa,"SPAN",{});var fsa=s(VLe);T(jS.$$.fragment,fsa),fsa.forEach(t),msa.forEach(t),LYr=i(Gro),XLe=n(Gro,"SPAN",{});var gsa=s(XLe);yYr=r(gsa,"TFAutoModelForDocumentQuestionAnswering"),gsa.forEach(t),Gro.forEach(t),Aeo=i(m),_r=n(m,"DIV",{class:!0});var Ei=s(_r);T(DS.$$.fragment,Ei),xYr=i(Ei),Em=n(Ei,"P",{});var Jie=s(Em);$Yr=r(Jie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Nte=n(Jie,"A",{href:!0});var hsa=s(Nte);kYr=r(hsa,"from_pretrained()"),hsa.forEach(t),SYr=r(Jie," class method or the "),qte=n(Jie,"A",{href:!0});var usa=s(qte);RYr=r(usa,"from_config()"),usa.forEach(t),PYr=r(Jie,` class
method.`),Jie.forEach(t),BYr=i(Ei),GS=n(Ei,"P",{});var Oro=s(GS);IYr=r(Oro,"This class cannot be instantiated directly using "),zLe=n(Oro,"CODE",{});var psa=s(zLe);NYr=r(psa,"__init__()"),psa.forEach(t),qYr=r(Oro," (throws an error)."),Oro.forEach(t),jYr=i(Ei),oa=n(Ei,"DIV",{class:!0});var a9=s(oa);T(OS.$$.fragment,a9),DYr=i(a9),QLe=n(a9,"P",{});var _sa=s(QLe);GYr=r(_sa,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),_sa.forEach(t),OYr=i(a9),Cm=n(a9,"P",{});var Yie=s(Cm);VYr=r(Yie,`Note:
Loading a model from its configuration file does `),WLe=n(Yie,"STRONG",{});var bsa=s(WLe);XYr=r(bsa,"not"),bsa.forEach(t),zYr=r(Yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=n(Yie,"A",{href:!0});var vsa=s(jte);QYr=r(vsa,"from_pretrained()"),vsa.forEach(t),WYr=r(Yie," to load the model weights."),Yie.forEach(t),UYr=i(a9),T(vA.$$.fragment,a9),a9.forEach(t),HYr=i(Ei),Wr=n(Ei,"DIV",{class:!0});var Ci=s(Wr);T(VS.$$.fragment,Ci),JYr=i(Ci),ULe=n(Ci,"P",{});var Fsa=s(ULe);YYr=r(Fsa,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Fsa.forEach(t),KYr=i(Ci),In=n(Ci,"P",{});var n9=s(In);ZYr=r(n9,"The model class to instantiate is selected based on the "),HLe=n(n9,"CODE",{});var Tsa=s(HLe);eKr=r(Tsa,"model_type"),Tsa.forEach(t),oKr=r(n9,` property of the config object (either
passed as an argument or loaded from `),JLe=n(n9,"CODE",{});var Msa=s(JLe);rKr=r(Msa,"pretrained_model_name_or_path"),Msa.forEach(t),tKr=r(n9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YLe=n(n9,"CODE",{});var Esa=s(YLe);aKr=r(Esa,"pretrained_model_name_or_path"),Esa.forEach(t),nKr=r(n9,":"),n9.forEach(t),sKr=i(Ci),KLe=n(Ci,"UL",{});var Csa=s(KLe);FA=n(Csa,"LI",{});var ZHe=s(FA);ZLe=n(ZHe,"STRONG",{});var wsa=s(ZLe);lKr=r(wsa,"layoutlm"),wsa.forEach(t),iKr=r(ZHe," \u2014 "),Dte=n(ZHe,"A",{href:!0});var Asa=s(Dte);dKr=r(Asa,"TFLayoutLMForQuestionAnswering"),Asa.forEach(t),cKr=r(ZHe," (LayoutLM model)"),ZHe.forEach(t),Csa.forEach(t),mKr=i(Ci),T(TA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),Leo=i(m),wm=n(m,"H2",{class:!0});var Vro=s(wm);MA=n(Vro,"A",{id:!0,class:!0,href:!0});var Lsa=s(MA);eye=n(Lsa,"SPAN",{});var ysa=s(eye);T(XS.$$.fragment,ysa),ysa.forEach(t),Lsa.forEach(t),fKr=i(Vro),oye=n(Vro,"SPAN",{});var xsa=s(oye);gKr=r(xsa,"TFAutoModelForTokenClassification"),xsa.forEach(t),Vro.forEach(t),yeo=i(m),br=n(m,"DIV",{class:!0});var wi=s(br);T(zS.$$.fragment,wi),hKr=i(wi),Am=n(wi,"P",{});var Kie=s(Am);uKr=r(Kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gte=n(Kie,"A",{href:!0});var $sa=s(Gte);pKr=r($sa,"from_pretrained()"),$sa.forEach(t),_Kr=r(Kie," class method or the "),Ote=n(Kie,"A",{href:!0});var ksa=s(Ote);bKr=r(ksa,"from_config()"),ksa.forEach(t),vKr=r(Kie,` class
method.`),Kie.forEach(t),FKr=i(wi),QS=n(wi,"P",{});var Xro=s(QS);TKr=r(Xro,"This class cannot be instantiated directly using "),rye=n(Xro,"CODE",{});var Ssa=s(rye);MKr=r(Ssa,"__init__()"),Ssa.forEach(t),EKr=r(Xro," (throws an error)."),Xro.forEach(t),CKr=i(wi),ra=n(wi,"DIV",{class:!0});var s9=s(ra);T(WS.$$.fragment,s9),wKr=i(s9),tye=n(s9,"P",{});var Rsa=s(tye);AKr=r(Rsa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rsa.forEach(t),LKr=i(s9),Lm=n(s9,"P",{});var Zie=s(Lm);yKr=r(Zie,`Note:
Loading a model from its configuration file does `),aye=n(Zie,"STRONG",{});var Psa=s(aye);xKr=r(Psa,"not"),Psa.forEach(t),$Kr=r(Zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vte=n(Zie,"A",{href:!0});var Bsa=s(Vte);kKr=r(Bsa,"from_pretrained()"),Bsa.forEach(t),SKr=r(Zie," to load the model weights."),Zie.forEach(t),RKr=i(s9),T(EA.$$.fragment,s9),s9.forEach(t),PKr=i(wi),Ur=n(wi,"DIV",{class:!0});var Ai=s(Ur);T(US.$$.fragment,Ai),BKr=i(Ai),nye=n(Ai,"P",{});var Isa=s(nye);IKr=r(Isa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Isa.forEach(t),NKr=i(Ai),Nn=n(Ai,"P",{});var l9=s(Nn);qKr=r(l9,"The model class to instantiate is selected based on the "),sye=n(l9,"CODE",{});var Nsa=s(sye);jKr=r(Nsa,"model_type"),Nsa.forEach(t),DKr=r(l9,` property of the config object (either
passed as an argument or loaded from `),lye=n(l9,"CODE",{});var qsa=s(lye);GKr=r(qsa,"pretrained_model_name_or_path"),qsa.forEach(t),OKr=r(l9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iye=n(l9,"CODE",{});var jsa=s(iye);VKr=r(jsa,"pretrained_model_name_or_path"),jsa.forEach(t),XKr=r(l9,":"),l9.forEach(t),zKr=i(Ai),de=n(Ai,"UL",{});var he=s(de);CA=n(he,"LI",{});var eJe=s(CA);dye=n(eJe,"STRONG",{});var Dsa=s(dye);QKr=r(Dsa,"albert"),Dsa.forEach(t),WKr=r(eJe," \u2014 "),Xte=n(eJe,"A",{href:!0});var Gsa=s(Xte);UKr=r(Gsa,"TFAlbertForTokenClassification"),Gsa.forEach(t),HKr=r(eJe," (ALBERT model)"),eJe.forEach(t),JKr=i(he),wA=n(he,"LI",{});var oJe=s(wA);cye=n(oJe,"STRONG",{});var Osa=s(cye);YKr=r(Osa,"bert"),Osa.forEach(t),KKr=r(oJe," \u2014 "),zte=n(oJe,"A",{href:!0});var Vsa=s(zte);ZKr=r(Vsa,"TFBertForTokenClassification"),Vsa.forEach(t),eZr=r(oJe," (BERT model)"),oJe.forEach(t),oZr=i(he),AA=n(he,"LI",{});var rJe=s(AA);mye=n(rJe,"STRONG",{});var Xsa=s(mye);rZr=r(Xsa,"camembert"),Xsa.forEach(t),tZr=r(rJe," \u2014 "),Qte=n(rJe,"A",{href:!0});var zsa=s(Qte);aZr=r(zsa,"TFCamembertForTokenClassification"),zsa.forEach(t),nZr=r(rJe," (CamemBERT model)"),rJe.forEach(t),sZr=i(he),LA=n(he,"LI",{});var tJe=s(LA);fye=n(tJe,"STRONG",{});var Qsa=s(fye);lZr=r(Qsa,"convbert"),Qsa.forEach(t),iZr=r(tJe," \u2014 "),Wte=n(tJe,"A",{href:!0});var Wsa=s(Wte);dZr=r(Wsa,"TFConvBertForTokenClassification"),Wsa.forEach(t),cZr=r(tJe," (ConvBERT model)"),tJe.forEach(t),mZr=i(he),yA=n(he,"LI",{});var aJe=s(yA);gye=n(aJe,"STRONG",{});var Usa=s(gye);fZr=r(Usa,"deberta"),Usa.forEach(t),gZr=r(aJe," \u2014 "),Ute=n(aJe,"A",{href:!0});var Hsa=s(Ute);hZr=r(Hsa,"TFDebertaForTokenClassification"),Hsa.forEach(t),uZr=r(aJe," (DeBERTa model)"),aJe.forEach(t),pZr=i(he),xA=n(he,"LI",{});var nJe=s(xA);hye=n(nJe,"STRONG",{});var Jsa=s(hye);_Zr=r(Jsa,"deberta-v2"),Jsa.forEach(t),bZr=r(nJe," \u2014 "),Hte=n(nJe,"A",{href:!0});var Ysa=s(Hte);vZr=r(Ysa,"TFDebertaV2ForTokenClassification"),Ysa.forEach(t),FZr=r(nJe," (DeBERTa-v2 model)"),nJe.forEach(t),TZr=i(he),$A=n(he,"LI",{});var sJe=s($A);uye=n(sJe,"STRONG",{});var Ksa=s(uye);MZr=r(Ksa,"distilbert"),Ksa.forEach(t),EZr=r(sJe," \u2014 "),Jte=n(sJe,"A",{href:!0});var Zsa=s(Jte);CZr=r(Zsa,"TFDistilBertForTokenClassification"),Zsa.forEach(t),wZr=r(sJe," (DistilBERT model)"),sJe.forEach(t),AZr=i(he),kA=n(he,"LI",{});var lJe=s(kA);pye=n(lJe,"STRONG",{});var ela=s(pye);LZr=r(ela,"electra"),ela.forEach(t),yZr=r(lJe," \u2014 "),Yte=n(lJe,"A",{href:!0});var ola=s(Yte);xZr=r(ola,"TFElectraForTokenClassification"),ola.forEach(t),$Zr=r(lJe," (ELECTRA model)"),lJe.forEach(t),kZr=i(he),SA=n(he,"LI",{});var iJe=s(SA);_ye=n(iJe,"STRONG",{});var rla=s(_ye);SZr=r(rla,"flaubert"),rla.forEach(t),RZr=r(iJe," \u2014 "),Kte=n(iJe,"A",{href:!0});var tla=s(Kte);PZr=r(tla,"TFFlaubertForTokenClassification"),tla.forEach(t),BZr=r(iJe," (FlauBERT model)"),iJe.forEach(t),IZr=i(he),RA=n(he,"LI",{});var dJe=s(RA);bye=n(dJe,"STRONG",{});var ala=s(bye);NZr=r(ala,"funnel"),ala.forEach(t),qZr=r(dJe," \u2014 "),Zte=n(dJe,"A",{href:!0});var nla=s(Zte);jZr=r(nla,"TFFunnelForTokenClassification"),nla.forEach(t),DZr=r(dJe," (Funnel Transformer model)"),dJe.forEach(t),GZr=i(he),PA=n(he,"LI",{});var cJe=s(PA);vye=n(cJe,"STRONG",{});var sla=s(vye);OZr=r(sla,"layoutlm"),sla.forEach(t),VZr=r(cJe," \u2014 "),eae=n(cJe,"A",{href:!0});var lla=s(eae);XZr=r(lla,"TFLayoutLMForTokenClassification"),lla.forEach(t),zZr=r(cJe," (LayoutLM model)"),cJe.forEach(t),QZr=i(he),BA=n(he,"LI",{});var mJe=s(BA);Fye=n(mJe,"STRONG",{});var ila=s(Fye);WZr=r(ila,"layoutlmv3"),ila.forEach(t),UZr=r(mJe," \u2014 "),oae=n(mJe,"A",{href:!0});var dla=s(oae);HZr=r(dla,"TFLayoutLMv3ForTokenClassification"),dla.forEach(t),JZr=r(mJe," (LayoutLMv3 model)"),mJe.forEach(t),YZr=i(he),IA=n(he,"LI",{});var fJe=s(IA);Tye=n(fJe,"STRONG",{});var cla=s(Tye);KZr=r(cla,"longformer"),cla.forEach(t),ZZr=r(fJe," \u2014 "),rae=n(fJe,"A",{href:!0});var mla=s(rae);eet=r(mla,"TFLongformerForTokenClassification"),mla.forEach(t),oet=r(fJe," (Longformer model)"),fJe.forEach(t),ret=i(he),NA=n(he,"LI",{});var gJe=s(NA);Mye=n(gJe,"STRONG",{});var fla=s(Mye);tet=r(fla,"mobilebert"),fla.forEach(t),aet=r(gJe," \u2014 "),tae=n(gJe,"A",{href:!0});var gla=s(tae);net=r(gla,"TFMobileBertForTokenClassification"),gla.forEach(t),set=r(gJe," (MobileBERT model)"),gJe.forEach(t),iet=i(he),qA=n(he,"LI",{});var hJe=s(qA);Eye=n(hJe,"STRONG",{});var hla=s(Eye);det=r(hla,"mpnet"),hla.forEach(t),cet=r(hJe," \u2014 "),aae=n(hJe,"A",{href:!0});var ula=s(aae);met=r(ula,"TFMPNetForTokenClassification"),ula.forEach(t),fet=r(hJe," (MPNet model)"),hJe.forEach(t),get=i(he),jA=n(he,"LI",{});var uJe=s(jA);Cye=n(uJe,"STRONG",{});var pla=s(Cye);het=r(pla,"rembert"),pla.forEach(t),uet=r(uJe," \u2014 "),nae=n(uJe,"A",{href:!0});var _la=s(nae);pet=r(_la,"TFRemBertForTokenClassification"),_la.forEach(t),_et=r(uJe," (RemBERT model)"),uJe.forEach(t),bet=i(he),DA=n(he,"LI",{});var pJe=s(DA);wye=n(pJe,"STRONG",{});var bla=s(wye);vet=r(bla,"roberta"),bla.forEach(t),Fet=r(pJe," \u2014 "),sae=n(pJe,"A",{href:!0});var vla=s(sae);Tet=r(vla,"TFRobertaForTokenClassification"),vla.forEach(t),Met=r(pJe," (RoBERTa model)"),pJe.forEach(t),Eet=i(he),GA=n(he,"LI",{});var _Je=s(GA);Aye=n(_Je,"STRONG",{});var Fla=s(Aye);Cet=r(Fla,"roformer"),Fla.forEach(t),wet=r(_Je," \u2014 "),lae=n(_Je,"A",{href:!0});var Tla=s(lae);Aet=r(Tla,"TFRoFormerForTokenClassification"),Tla.forEach(t),Let=r(_Je," (RoFormer model)"),_Je.forEach(t),yet=i(he),OA=n(he,"LI",{});var bJe=s(OA);Lye=n(bJe,"STRONG",{});var Mla=s(Lye);xet=r(Mla,"xlm"),Mla.forEach(t),$et=r(bJe," \u2014 "),iae=n(bJe,"A",{href:!0});var Ela=s(iae);ket=r(Ela,"TFXLMForTokenClassification"),Ela.forEach(t),Set=r(bJe," (XLM model)"),bJe.forEach(t),Ret=i(he),VA=n(he,"LI",{});var vJe=s(VA);yye=n(vJe,"STRONG",{});var Cla=s(yye);Pet=r(Cla,"xlm-roberta"),Cla.forEach(t),Bet=r(vJe," \u2014 "),dae=n(vJe,"A",{href:!0});var wla=s(dae);Iet=r(wla,"TFXLMRobertaForTokenClassification"),wla.forEach(t),Net=r(vJe," (XLM-RoBERTa model)"),vJe.forEach(t),qet=i(he),XA=n(he,"LI",{});var FJe=s(XA);xye=n(FJe,"STRONG",{});var Ala=s(xye);jet=r(Ala,"xlnet"),Ala.forEach(t),Det=r(FJe," \u2014 "),cae=n(FJe,"A",{href:!0});var Lla=s(cae);Get=r(Lla,"TFXLNetForTokenClassification"),Lla.forEach(t),Oet=r(FJe," (XLNet model)"),FJe.forEach(t),he.forEach(t),Vet=i(Ai),T(zA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),xeo=i(m),ym=n(m,"H2",{class:!0});var zro=s(ym);QA=n(zro,"A",{id:!0,class:!0,href:!0});var yla=s(QA);$ye=n(yla,"SPAN",{});var xla=s($ye);T(HS.$$.fragment,xla),xla.forEach(t),yla.forEach(t),Xet=i(zro),kye=n(zro,"SPAN",{});var $la=s(kye);zet=r($la,"TFAutoModelForQuestionAnswering"),$la.forEach(t),zro.forEach(t),$eo=i(m),vr=n(m,"DIV",{class:!0});var Li=s(vr);T(JS.$$.fragment,Li),Qet=i(Li),xm=n(Li,"P",{});var ede=s(xm);Wet=r(ede,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mae=n(ede,"A",{href:!0});var kla=s(mae);Uet=r(kla,"from_pretrained()"),kla.forEach(t),Het=r(ede," class method or the "),fae=n(ede,"A",{href:!0});var Sla=s(fae);Jet=r(Sla,"from_config()"),Sla.forEach(t),Yet=r(ede,` class
method.`),ede.forEach(t),Ket=i(Li),YS=n(Li,"P",{});var Qro=s(YS);Zet=r(Qro,"This class cannot be instantiated directly using "),Sye=n(Qro,"CODE",{});var Rla=s(Sye);eot=r(Rla,"__init__()"),Rla.forEach(t),oot=r(Qro," (throws an error)."),Qro.forEach(t),rot=i(Li),ta=n(Li,"DIV",{class:!0});var i9=s(ta);T(KS.$$.fragment,i9),tot=i(i9),Rye=n(i9,"P",{});var Pla=s(Rye);aot=r(Pla,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Pla.forEach(t),not=i(i9),$m=n(i9,"P",{});var ode=s($m);sot=r(ode,`Note:
Loading a model from its configuration file does `),Pye=n(ode,"STRONG",{});var Bla=s(Pye);lot=r(Bla,"not"),Bla.forEach(t),iot=r(ode,` load the model weights. It only affects the
model\u2019s configuration. Use `),gae=n(ode,"A",{href:!0});var Ila=s(gae);dot=r(Ila,"from_pretrained()"),Ila.forEach(t),cot=r(ode," to load the model weights."),ode.forEach(t),mot=i(i9),T(WA.$$.fragment,i9),i9.forEach(t),fot=i(Li),Hr=n(Li,"DIV",{class:!0});var yi=s(Hr);T(ZS.$$.fragment,yi),got=i(yi),Bye=n(yi,"P",{});var Nla=s(Bye);hot=r(Nla,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nla.forEach(t),uot=i(yi),qn=n(yi,"P",{});var d9=s(qn);pot=r(d9,"The model class to instantiate is selected based on the "),Iye=n(d9,"CODE",{});var qla=s(Iye);_ot=r(qla,"model_type"),qla.forEach(t),bot=r(d9,` property of the config object (either
passed as an argument or loaded from `),Nye=n(d9,"CODE",{});var jla=s(Nye);vot=r(jla,"pretrained_model_name_or_path"),jla.forEach(t),Fot=r(d9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qye=n(d9,"CODE",{});var Dla=s(qye);Tot=r(Dla,"pretrained_model_name_or_path"),Dla.forEach(t),Mot=r(d9,":"),d9.forEach(t),Eot=i(yi),ce=n(yi,"UL",{});var ue=s(ce);UA=n(ue,"LI",{});var TJe=s(UA);jye=n(TJe,"STRONG",{});var Gla=s(jye);Cot=r(Gla,"albert"),Gla.forEach(t),wot=r(TJe," \u2014 "),hae=n(TJe,"A",{href:!0});var Ola=s(hae);Aot=r(Ola,"TFAlbertForQuestionAnswering"),Ola.forEach(t),Lot=r(TJe," (ALBERT model)"),TJe.forEach(t),yot=i(ue),HA=n(ue,"LI",{});var MJe=s(HA);Dye=n(MJe,"STRONG",{});var Vla=s(Dye);xot=r(Vla,"bert"),Vla.forEach(t),$ot=r(MJe," \u2014 "),uae=n(MJe,"A",{href:!0});var Xla=s(uae);kot=r(Xla,"TFBertForQuestionAnswering"),Xla.forEach(t),Sot=r(MJe," (BERT model)"),MJe.forEach(t),Rot=i(ue),JA=n(ue,"LI",{});var EJe=s(JA);Gye=n(EJe,"STRONG",{});var zla=s(Gye);Pot=r(zla,"camembert"),zla.forEach(t),Bot=r(EJe," \u2014 "),pae=n(EJe,"A",{href:!0});var Qla=s(pae);Iot=r(Qla,"TFCamembertForQuestionAnswering"),Qla.forEach(t),Not=r(EJe," (CamemBERT model)"),EJe.forEach(t),qot=i(ue),YA=n(ue,"LI",{});var CJe=s(YA);Oye=n(CJe,"STRONG",{});var Wla=s(Oye);jot=r(Wla,"convbert"),Wla.forEach(t),Dot=r(CJe," \u2014 "),_ae=n(CJe,"A",{href:!0});var Ula=s(_ae);Got=r(Ula,"TFConvBertForQuestionAnswering"),Ula.forEach(t),Oot=r(CJe," (ConvBERT model)"),CJe.forEach(t),Vot=i(ue),KA=n(ue,"LI",{});var wJe=s(KA);Vye=n(wJe,"STRONG",{});var Hla=s(Vye);Xot=r(Hla,"deberta"),Hla.forEach(t),zot=r(wJe," \u2014 "),bae=n(wJe,"A",{href:!0});var Jla=s(bae);Qot=r(Jla,"TFDebertaForQuestionAnswering"),Jla.forEach(t),Wot=r(wJe," (DeBERTa model)"),wJe.forEach(t),Uot=i(ue),ZA=n(ue,"LI",{});var AJe=s(ZA);Xye=n(AJe,"STRONG",{});var Yla=s(Xye);Hot=r(Yla,"deberta-v2"),Yla.forEach(t),Jot=r(AJe," \u2014 "),vae=n(AJe,"A",{href:!0});var Kla=s(vae);Yot=r(Kla,"TFDebertaV2ForQuestionAnswering"),Kla.forEach(t),Kot=r(AJe," (DeBERTa-v2 model)"),AJe.forEach(t),Zot=i(ue),e6=n(ue,"LI",{});var LJe=s(e6);zye=n(LJe,"STRONG",{});var Zla=s(zye);ert=r(Zla,"distilbert"),Zla.forEach(t),ort=r(LJe," \u2014 "),Fae=n(LJe,"A",{href:!0});var eia=s(Fae);rrt=r(eia,"TFDistilBertForQuestionAnswering"),eia.forEach(t),trt=r(LJe," (DistilBERT model)"),LJe.forEach(t),art=i(ue),o6=n(ue,"LI",{});var yJe=s(o6);Qye=n(yJe,"STRONG",{});var oia=s(Qye);nrt=r(oia,"electra"),oia.forEach(t),srt=r(yJe," \u2014 "),Tae=n(yJe,"A",{href:!0});var ria=s(Tae);lrt=r(ria,"TFElectraForQuestionAnswering"),ria.forEach(t),irt=r(yJe," (ELECTRA model)"),yJe.forEach(t),drt=i(ue),r6=n(ue,"LI",{});var xJe=s(r6);Wye=n(xJe,"STRONG",{});var tia=s(Wye);crt=r(tia,"flaubert"),tia.forEach(t),mrt=r(xJe," \u2014 "),Mae=n(xJe,"A",{href:!0});var aia=s(Mae);frt=r(aia,"TFFlaubertForQuestionAnsweringSimple"),aia.forEach(t),grt=r(xJe," (FlauBERT model)"),xJe.forEach(t),hrt=i(ue),t6=n(ue,"LI",{});var $Je=s(t6);Uye=n($Je,"STRONG",{});var nia=s(Uye);urt=r(nia,"funnel"),nia.forEach(t),prt=r($Je," \u2014 "),Eae=n($Je,"A",{href:!0});var sia=s(Eae);_rt=r(sia,"TFFunnelForQuestionAnswering"),sia.forEach(t),brt=r($Je," (Funnel Transformer model)"),$Je.forEach(t),vrt=i(ue),a6=n(ue,"LI",{});var kJe=s(a6);Hye=n(kJe,"STRONG",{});var lia=s(Hye);Frt=r(lia,"gptj"),lia.forEach(t),Trt=r(kJe," \u2014 "),Cae=n(kJe,"A",{href:!0});var iia=s(Cae);Mrt=r(iia,"TFGPTJForQuestionAnswering"),iia.forEach(t),Ert=r(kJe," (GPT-J model)"),kJe.forEach(t),Crt=i(ue),n6=n(ue,"LI",{});var SJe=s(n6);Jye=n(SJe,"STRONG",{});var dia=s(Jye);wrt=r(dia,"layoutlmv3"),dia.forEach(t),Art=r(SJe," \u2014 "),wae=n(SJe,"A",{href:!0});var cia=s(wae);Lrt=r(cia,"TFLayoutLMv3ForQuestionAnswering"),cia.forEach(t),yrt=r(SJe," (LayoutLMv3 model)"),SJe.forEach(t),xrt=i(ue),s6=n(ue,"LI",{});var RJe=s(s6);Yye=n(RJe,"STRONG",{});var mia=s(Yye);$rt=r(mia,"longformer"),mia.forEach(t),krt=r(RJe," \u2014 "),Aae=n(RJe,"A",{href:!0});var fia=s(Aae);Srt=r(fia,"TFLongformerForQuestionAnswering"),fia.forEach(t),Rrt=r(RJe," (Longformer model)"),RJe.forEach(t),Prt=i(ue),l6=n(ue,"LI",{});var PJe=s(l6);Kye=n(PJe,"STRONG",{});var gia=s(Kye);Brt=r(gia,"mobilebert"),gia.forEach(t),Irt=r(PJe," \u2014 "),Lae=n(PJe,"A",{href:!0});var hia=s(Lae);Nrt=r(hia,"TFMobileBertForQuestionAnswering"),hia.forEach(t),qrt=r(PJe," (MobileBERT model)"),PJe.forEach(t),jrt=i(ue),i6=n(ue,"LI",{});var BJe=s(i6);Zye=n(BJe,"STRONG",{});var uia=s(Zye);Drt=r(uia,"mpnet"),uia.forEach(t),Grt=r(BJe," \u2014 "),yae=n(BJe,"A",{href:!0});var pia=s(yae);Ort=r(pia,"TFMPNetForQuestionAnswering"),pia.forEach(t),Vrt=r(BJe," (MPNet model)"),BJe.forEach(t),Xrt=i(ue),d6=n(ue,"LI",{});var IJe=s(d6);e8e=n(IJe,"STRONG",{});var _ia=s(e8e);zrt=r(_ia,"rembert"),_ia.forEach(t),Qrt=r(IJe," \u2014 "),xae=n(IJe,"A",{href:!0});var bia=s(xae);Wrt=r(bia,"TFRemBertForQuestionAnswering"),bia.forEach(t),Urt=r(IJe," (RemBERT model)"),IJe.forEach(t),Hrt=i(ue),c6=n(ue,"LI",{});var NJe=s(c6);o8e=n(NJe,"STRONG",{});var via=s(o8e);Jrt=r(via,"roberta"),via.forEach(t),Yrt=r(NJe," \u2014 "),$ae=n(NJe,"A",{href:!0});var Fia=s($ae);Krt=r(Fia,"TFRobertaForQuestionAnswering"),Fia.forEach(t),Zrt=r(NJe," (RoBERTa model)"),NJe.forEach(t),ett=i(ue),m6=n(ue,"LI",{});var qJe=s(m6);r8e=n(qJe,"STRONG",{});var Tia=s(r8e);ott=r(Tia,"roformer"),Tia.forEach(t),rtt=r(qJe," \u2014 "),kae=n(qJe,"A",{href:!0});var Mia=s(kae);ttt=r(Mia,"TFRoFormerForQuestionAnswering"),Mia.forEach(t),att=r(qJe," (RoFormer model)"),qJe.forEach(t),ntt=i(ue),f6=n(ue,"LI",{});var jJe=s(f6);t8e=n(jJe,"STRONG",{});var Eia=s(t8e);stt=r(Eia,"xlm"),Eia.forEach(t),ltt=r(jJe," \u2014 "),Sae=n(jJe,"A",{href:!0});var Cia=s(Sae);itt=r(Cia,"TFXLMForQuestionAnsweringSimple"),Cia.forEach(t),dtt=r(jJe," (XLM model)"),jJe.forEach(t),ctt=i(ue),g6=n(ue,"LI",{});var DJe=s(g6);a8e=n(DJe,"STRONG",{});var wia=s(a8e);mtt=r(wia,"xlm-roberta"),wia.forEach(t),ftt=r(DJe," \u2014 "),Rae=n(DJe,"A",{href:!0});var Aia=s(Rae);gtt=r(Aia,"TFXLMRobertaForQuestionAnswering"),Aia.forEach(t),htt=r(DJe," (XLM-RoBERTa model)"),DJe.forEach(t),utt=i(ue),h6=n(ue,"LI",{});var GJe=s(h6);n8e=n(GJe,"STRONG",{});var Lia=s(n8e);ptt=r(Lia,"xlnet"),Lia.forEach(t),_tt=r(GJe," \u2014 "),Pae=n(GJe,"A",{href:!0});var yia=s(Pae);btt=r(yia,"TFXLNetForQuestionAnsweringSimple"),yia.forEach(t),vtt=r(GJe," (XLNet model)"),GJe.forEach(t),ue.forEach(t),Ftt=i(yi),T(u6.$$.fragment,yi),yi.forEach(t),Li.forEach(t),keo=i(m),km=n(m,"H2",{class:!0});var Wro=s(km);p6=n(Wro,"A",{id:!0,class:!0,href:!0});var xia=s(p6);s8e=n(xia,"SPAN",{});var $ia=s(s8e);T(eR.$$.fragment,$ia),$ia.forEach(t),xia.forEach(t),Ttt=i(Wro),l8e=n(Wro,"SPAN",{});var kia=s(l8e);Mtt=r(kia,"TFAutoModelForVision2Seq"),kia.forEach(t),Wro.forEach(t),Seo=i(m),Fr=n(m,"DIV",{class:!0});var xi=s(Fr);T(oR.$$.fragment,xi),Ett=i(xi),Sm=n(xi,"P",{});var rde=s(Sm);Ctt=r(rde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bae=n(rde,"A",{href:!0});var Sia=s(Bae);wtt=r(Sia,"from_pretrained()"),Sia.forEach(t),Att=r(rde," class method or the "),Iae=n(rde,"A",{href:!0});var Ria=s(Iae);Ltt=r(Ria,"from_config()"),Ria.forEach(t),ytt=r(rde,` class
method.`),rde.forEach(t),xtt=i(xi),rR=n(xi,"P",{});var Uro=s(rR);$tt=r(Uro,"This class cannot be instantiated directly using "),i8e=n(Uro,"CODE",{});var Pia=s(i8e);ktt=r(Pia,"__init__()"),Pia.forEach(t),Stt=r(Uro," (throws an error)."),Uro.forEach(t),Rtt=i(xi),aa=n(xi,"DIV",{class:!0});var c9=s(aa);T(tR.$$.fragment,c9),Ptt=i(c9),d8e=n(c9,"P",{});var Bia=s(d8e);Btt=r(Bia,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bia.forEach(t),Itt=i(c9),Rm=n(c9,"P",{});var tde=s(Rm);Ntt=r(tde,`Note:
Loading a model from its configuration file does `),c8e=n(tde,"STRONG",{});var Iia=s(c8e);qtt=r(Iia,"not"),Iia.forEach(t),jtt=r(tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=n(tde,"A",{href:!0});var Nia=s(Nae);Dtt=r(Nia,"from_pretrained()"),Nia.forEach(t),Gtt=r(tde," to load the model weights."),tde.forEach(t),Ott=i(c9),T(_6.$$.fragment,c9),c9.forEach(t),Vtt=i(xi),Jr=n(xi,"DIV",{class:!0});var $i=s(Jr);T(aR.$$.fragment,$i),Xtt=i($i),m8e=n($i,"P",{});var qia=s(m8e);ztt=r(qia,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qia.forEach(t),Qtt=i($i),jn=n($i,"P",{});var m9=s(jn);Wtt=r(m9,"The model class to instantiate is selected based on the "),f8e=n(m9,"CODE",{});var jia=s(f8e);Utt=r(jia,"model_type"),jia.forEach(t),Htt=r(m9,` property of the config object (either
passed as an argument or loaded from `),g8e=n(m9,"CODE",{});var Dia=s(g8e);Jtt=r(Dia,"pretrained_model_name_or_path"),Dia.forEach(t),Ytt=r(m9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=n(m9,"CODE",{});var Gia=s(h8e);Ktt=r(Gia,"pretrained_model_name_or_path"),Gia.forEach(t),Ztt=r(m9,":"),m9.forEach(t),eat=i($i),u8e=n($i,"UL",{});var Oia=s(u8e);b6=n(Oia,"LI",{});var OJe=s(b6);p8e=n(OJe,"STRONG",{});var Via=s(p8e);oat=r(Via,"vision-encoder-decoder"),Via.forEach(t),rat=r(OJe," \u2014 "),qae=n(OJe,"A",{href:!0});var Xia=s(qae);tat=r(Xia,"TFVisionEncoderDecoderModel"),Xia.forEach(t),aat=r(OJe," (Vision Encoder decoder model)"),OJe.forEach(t),Oia.forEach(t),nat=i($i),T(v6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),Reo=i(m),Pm=n(m,"H2",{class:!0});var Hro=s(Pm);F6=n(Hro,"A",{id:!0,class:!0,href:!0});var zia=s(F6);_8e=n(zia,"SPAN",{});var Qia=s(_8e);T(nR.$$.fragment,Qia),Qia.forEach(t),zia.forEach(t),sat=i(Hro),b8e=n(Hro,"SPAN",{});var Wia=s(b8e);lat=r(Wia,"TFAutoModelForSpeechSeq2Seq"),Wia.forEach(t),Hro.forEach(t),Peo=i(m),Tr=n(m,"DIV",{class:!0});var ki=s(Tr);T(sR.$$.fragment,ki),iat=i(ki),Bm=n(ki,"P",{});var ade=s(Bm);dat=r(ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jae=n(ade,"A",{href:!0});var Uia=s(jae);cat=r(Uia,"from_pretrained()"),Uia.forEach(t),mat=r(ade," class method or the "),Dae=n(ade,"A",{href:!0});var Hia=s(Dae);fat=r(Hia,"from_config()"),Hia.forEach(t),gat=r(ade,` class
method.`),ade.forEach(t),hat=i(ki),lR=n(ki,"P",{});var Jro=s(lR);uat=r(Jro,"This class cannot be instantiated directly using "),v8e=n(Jro,"CODE",{});var Jia=s(v8e);pat=r(Jia,"__init__()"),Jia.forEach(t),_at=r(Jro," (throws an error)."),Jro.forEach(t),bat=i(ki),na=n(ki,"DIV",{class:!0});var f9=s(na);T(iR.$$.fragment,f9),vat=i(f9),F8e=n(f9,"P",{});var Yia=s(F8e);Fat=r(Yia,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yia.forEach(t),Tat=i(f9),Im=n(f9,"P",{});var nde=s(Im);Mat=r(nde,`Note:
Loading a model from its configuration file does `),T8e=n(nde,"STRONG",{});var Kia=s(T8e);Eat=r(Kia,"not"),Kia.forEach(t),Cat=r(nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=n(nde,"A",{href:!0});var Zia=s(Gae);wat=r(Zia,"from_pretrained()"),Zia.forEach(t),Aat=r(nde," to load the model weights."),nde.forEach(t),Lat=i(f9),T(T6.$$.fragment,f9),f9.forEach(t),yat=i(ki),Yr=n(ki,"DIV",{class:!0});var Si=s(Yr);T(dR.$$.fragment,Si),xat=i(Si),M8e=n(Si,"P",{});var eda=s(M8e);$at=r(eda,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eda.forEach(t),kat=i(Si),Dn=n(Si,"P",{});var g9=s(Dn);Sat=r(g9,"The model class to instantiate is selected based on the "),E8e=n(g9,"CODE",{});var oda=s(E8e);Rat=r(oda,"model_type"),oda.forEach(t),Pat=r(g9,` property of the config object (either
passed as an argument or loaded from `),C8e=n(g9,"CODE",{});var rda=s(C8e);Bat=r(rda,"pretrained_model_name_or_path"),rda.forEach(t),Iat=r(g9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(g9,"CODE",{});var tda=s(w8e);Nat=r(tda,"pretrained_model_name_or_path"),tda.forEach(t),qat=r(g9,":"),g9.forEach(t),jat=i(Si),A8e=n(Si,"UL",{});var ada=s(A8e);M6=n(ada,"LI",{});var VJe=s(M6);L8e=n(VJe,"STRONG",{});var nda=s(L8e);Dat=r(nda,"speech_to_text"),nda.forEach(t),Gat=r(VJe," \u2014 "),Oae=n(VJe,"A",{href:!0});var sda=s(Oae);Oat=r(sda,"TFSpeech2TextForConditionalGeneration"),sda.forEach(t),Vat=r(VJe," (Speech2Text model)"),VJe.forEach(t),ada.forEach(t),Xat=i(Si),T(E6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),Beo=i(m),Nm=n(m,"H2",{class:!0});var Yro=s(Nm);C6=n(Yro,"A",{id:!0,class:!0,href:!0});var lda=s(C6);y8e=n(lda,"SPAN",{});var ida=s(y8e);T(cR.$$.fragment,ida),ida.forEach(t),lda.forEach(t),zat=i(Yro),x8e=n(Yro,"SPAN",{});var dda=s(x8e);Qat=r(dda,"FlaxAutoModel"),dda.forEach(t),Yro.forEach(t),Ieo=i(m),Mr=n(m,"DIV",{class:!0});var Ri=s(Mr);T(mR.$$.fragment,Ri),Wat=i(Ri),qm=n(Ri,"P",{});var sde=s(qm);Uat=r(sde,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Vae=n(sde,"A",{href:!0});var cda=s(Vae);Hat=r(cda,"from_pretrained()"),cda.forEach(t),Jat=r(sde," class method or the "),Xae=n(sde,"A",{href:!0});var mda=s(Xae);Yat=r(mda,"from_config()"),mda.forEach(t),Kat=r(sde,` class
method.`),sde.forEach(t),Zat=i(Ri),fR=n(Ri,"P",{});var Kro=s(fR);ent=r(Kro,"This class cannot be instantiated directly using "),$8e=n(Kro,"CODE",{});var fda=s($8e);ont=r(fda,"__init__()"),fda.forEach(t),rnt=r(Kro," (throws an error)."),Kro.forEach(t),tnt=i(Ri),sa=n(Ri,"DIV",{class:!0});var h9=s(sa);T(gR.$$.fragment,h9),ant=i(h9),k8e=n(h9,"P",{});var gda=s(k8e);nnt=r(gda,"Instantiates one of the base model classes of the library from a configuration."),gda.forEach(t),snt=i(h9),jm=n(h9,"P",{});var lde=s(jm);lnt=r(lde,`Note:
Loading a model from its configuration file does `),S8e=n(lde,"STRONG",{});var hda=s(S8e);int=r(hda,"not"),hda.forEach(t),dnt=r(lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),zae=n(lde,"A",{href:!0});var uda=s(zae);cnt=r(uda,"from_pretrained()"),uda.forEach(t),mnt=r(lde," to load the model weights."),lde.forEach(t),fnt=i(h9),T(w6.$$.fragment,h9),h9.forEach(t),gnt=i(Ri),Kr=n(Ri,"DIV",{class:!0});var Pi=s(Kr);T(hR.$$.fragment,Pi),hnt=i(Pi),R8e=n(Pi,"P",{});var pda=s(R8e);unt=r(pda,"Instantiate one of the base model classes of the library from a pretrained model."),pda.forEach(t),pnt=i(Pi),Gn=n(Pi,"P",{});var u9=s(Gn);_nt=r(u9,"The model class to instantiate is selected based on the "),P8e=n(u9,"CODE",{});var _da=s(P8e);bnt=r(_da,"model_type"),_da.forEach(t),vnt=r(u9,` property of the config object (either
passed as an argument or loaded from `),B8e=n(u9,"CODE",{});var bda=s(B8e);Fnt=r(bda,"pretrained_model_name_or_path"),bda.forEach(t),Tnt=r(u9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=n(u9,"CODE",{});var vda=s(I8e);Mnt=r(vda,"pretrained_model_name_or_path"),vda.forEach(t),Ent=r(u9,":"),u9.forEach(t),Cnt=i(Pi),te=n(Pi,"UL",{});var ne=s(te);A6=n(ne,"LI",{});var XJe=s(A6);N8e=n(XJe,"STRONG",{});var Fda=s(N8e);wnt=r(Fda,"albert"),Fda.forEach(t),Ant=r(XJe," \u2014 "),Qae=n(XJe,"A",{href:!0});var Tda=s(Qae);Lnt=r(Tda,"FlaxAlbertModel"),Tda.forEach(t),ynt=r(XJe," (ALBERT model)"),XJe.forEach(t),xnt=i(ne),L6=n(ne,"LI",{});var zJe=s(L6);q8e=n(zJe,"STRONG",{});var Mda=s(q8e);$nt=r(Mda,"bart"),Mda.forEach(t),knt=r(zJe," \u2014 "),Wae=n(zJe,"A",{href:!0});var Eda=s(Wae);Snt=r(Eda,"FlaxBartModel"),Eda.forEach(t),Rnt=r(zJe," (BART model)"),zJe.forEach(t),Pnt=i(ne),y6=n(ne,"LI",{});var QJe=s(y6);j8e=n(QJe,"STRONG",{});var Cda=s(j8e);Bnt=r(Cda,"beit"),Cda.forEach(t),Int=r(QJe," \u2014 "),Uae=n(QJe,"A",{href:!0});var wda=s(Uae);Nnt=r(wda,"FlaxBeitModel"),wda.forEach(t),qnt=r(QJe," (BEiT model)"),QJe.forEach(t),jnt=i(ne),x6=n(ne,"LI",{});var WJe=s(x6);D8e=n(WJe,"STRONG",{});var Ada=s(D8e);Dnt=r(Ada,"bert"),Ada.forEach(t),Gnt=r(WJe," \u2014 "),Hae=n(WJe,"A",{href:!0});var Lda=s(Hae);Ont=r(Lda,"FlaxBertModel"),Lda.forEach(t),Vnt=r(WJe," (BERT model)"),WJe.forEach(t),Xnt=i(ne),$6=n(ne,"LI",{});var UJe=s($6);G8e=n(UJe,"STRONG",{});var yda=s(G8e);znt=r(yda,"big_bird"),yda.forEach(t),Qnt=r(UJe," \u2014 "),Jae=n(UJe,"A",{href:!0});var xda=s(Jae);Wnt=r(xda,"FlaxBigBirdModel"),xda.forEach(t),Unt=r(UJe," (BigBird model)"),UJe.forEach(t),Hnt=i(ne),k6=n(ne,"LI",{});var HJe=s(k6);O8e=n(HJe,"STRONG",{});var $da=s(O8e);Jnt=r($da,"blenderbot"),$da.forEach(t),Ynt=r(HJe," \u2014 "),Yae=n(HJe,"A",{href:!0});var kda=s(Yae);Knt=r(kda,"FlaxBlenderbotModel"),kda.forEach(t),Znt=r(HJe," (Blenderbot model)"),HJe.forEach(t),est=i(ne),S6=n(ne,"LI",{});var JJe=s(S6);V8e=n(JJe,"STRONG",{});var Sda=s(V8e);ost=r(Sda,"blenderbot-small"),Sda.forEach(t),rst=r(JJe," \u2014 "),Kae=n(JJe,"A",{href:!0});var Rda=s(Kae);tst=r(Rda,"FlaxBlenderbotSmallModel"),Rda.forEach(t),ast=r(JJe," (BlenderbotSmall model)"),JJe.forEach(t),nst=i(ne),R6=n(ne,"LI",{});var YJe=s(R6);X8e=n(YJe,"STRONG",{});var Pda=s(X8e);sst=r(Pda,"clip"),Pda.forEach(t),lst=r(YJe," \u2014 "),Zae=n(YJe,"A",{href:!0});var Bda=s(Zae);ist=r(Bda,"FlaxCLIPModel"),Bda.forEach(t),dst=r(YJe," (CLIP model)"),YJe.forEach(t),cst=i(ne),P6=n(ne,"LI",{});var KJe=s(P6);z8e=n(KJe,"STRONG",{});var Ida=s(z8e);mst=r(Ida,"distilbert"),Ida.forEach(t),fst=r(KJe," \u2014 "),ene=n(KJe,"A",{href:!0});var Nda=s(ene);gst=r(Nda,"FlaxDistilBertModel"),Nda.forEach(t),hst=r(KJe," (DistilBERT model)"),KJe.forEach(t),ust=i(ne),B6=n(ne,"LI",{});var ZJe=s(B6);Q8e=n(ZJe,"STRONG",{});var qda=s(Q8e);pst=r(qda,"electra"),qda.forEach(t),_st=r(ZJe," \u2014 "),one=n(ZJe,"A",{href:!0});var jda=s(one);bst=r(jda,"FlaxElectraModel"),jda.forEach(t),vst=r(ZJe," (ELECTRA model)"),ZJe.forEach(t),Fst=i(ne),I6=n(ne,"LI",{});var eYe=s(I6);W8e=n(eYe,"STRONG",{});var Dda=s(W8e);Tst=r(Dda,"gpt2"),Dda.forEach(t),Mst=r(eYe," \u2014 "),rne=n(eYe,"A",{href:!0});var Gda=s(rne);Est=r(Gda,"FlaxGPT2Model"),Gda.forEach(t),Cst=r(eYe," (OpenAI GPT-2 model)"),eYe.forEach(t),wst=i(ne),N6=n(ne,"LI",{});var oYe=s(N6);U8e=n(oYe,"STRONG",{});var Oda=s(U8e);Ast=r(Oda,"gpt_neo"),Oda.forEach(t),Lst=r(oYe," \u2014 "),tne=n(oYe,"A",{href:!0});var Vda=s(tne);yst=r(Vda,"FlaxGPTNeoModel"),Vda.forEach(t),xst=r(oYe," (GPT Neo model)"),oYe.forEach(t),$st=i(ne),q6=n(ne,"LI",{});var rYe=s(q6);H8e=n(rYe,"STRONG",{});var Xda=s(H8e);kst=r(Xda,"gptj"),Xda.forEach(t),Sst=r(rYe," \u2014 "),ane=n(rYe,"A",{href:!0});var zda=s(ane);Rst=r(zda,"FlaxGPTJModel"),zda.forEach(t),Pst=r(rYe," (GPT-J model)"),rYe.forEach(t),Bst=i(ne),j6=n(ne,"LI",{});var tYe=s(j6);J8e=n(tYe,"STRONG",{});var Qda=s(J8e);Ist=r(Qda,"longt5"),Qda.forEach(t),Nst=r(tYe," \u2014 "),nne=n(tYe,"A",{href:!0});var Wda=s(nne);qst=r(Wda,"FlaxLongT5Model"),Wda.forEach(t),jst=r(tYe," (LongT5 model)"),tYe.forEach(t),Dst=i(ne),D6=n(ne,"LI",{});var aYe=s(D6);Y8e=n(aYe,"STRONG",{});var Uda=s(Y8e);Gst=r(Uda,"marian"),Uda.forEach(t),Ost=r(aYe," \u2014 "),sne=n(aYe,"A",{href:!0});var Hda=s(sne);Vst=r(Hda,"FlaxMarianModel"),Hda.forEach(t),Xst=r(aYe," (Marian model)"),aYe.forEach(t),zst=i(ne),G6=n(ne,"LI",{});var nYe=s(G6);K8e=n(nYe,"STRONG",{});var Jda=s(K8e);Qst=r(Jda,"mbart"),Jda.forEach(t),Wst=r(nYe," \u2014 "),lne=n(nYe,"A",{href:!0});var Yda=s(lne);Ust=r(Yda,"FlaxMBartModel"),Yda.forEach(t),Hst=r(nYe," (mBART model)"),nYe.forEach(t),Jst=i(ne),O6=n(ne,"LI",{});var sYe=s(O6);Z8e=n(sYe,"STRONG",{});var Kda=s(Z8e);Yst=r(Kda,"mt5"),Kda.forEach(t),Kst=r(sYe," \u2014 "),ine=n(sYe,"A",{href:!0});var Zda=s(ine);Zst=r(Zda,"FlaxMT5Model"),Zda.forEach(t),elt=r(sYe," (MT5 model)"),sYe.forEach(t),olt=i(ne),V6=n(ne,"LI",{});var lYe=s(V6);e9e=n(lYe,"STRONG",{});var eca=s(e9e);rlt=r(eca,"opt"),eca.forEach(t),tlt=r(lYe," \u2014 "),dne=n(lYe,"A",{href:!0});var oca=s(dne);alt=r(oca,"FlaxOPTModel"),oca.forEach(t),nlt=r(lYe," (OPT model)"),lYe.forEach(t),slt=i(ne),X6=n(ne,"LI",{});var iYe=s(X6);o9e=n(iYe,"STRONG",{});var rca=s(o9e);llt=r(rca,"pegasus"),rca.forEach(t),ilt=r(iYe," \u2014 "),cne=n(iYe,"A",{href:!0});var tca=s(cne);dlt=r(tca,"FlaxPegasusModel"),tca.forEach(t),clt=r(iYe," (Pegasus model)"),iYe.forEach(t),mlt=i(ne),z6=n(ne,"LI",{});var dYe=s(z6);r9e=n(dYe,"STRONG",{});var aca=s(r9e);flt=r(aca,"roberta"),aca.forEach(t),glt=r(dYe," \u2014 "),mne=n(dYe,"A",{href:!0});var nca=s(mne);hlt=r(nca,"FlaxRobertaModel"),nca.forEach(t),ult=r(dYe," (RoBERTa model)"),dYe.forEach(t),plt=i(ne),Q6=n(ne,"LI",{});var cYe=s(Q6);t9e=n(cYe,"STRONG",{});var sca=s(t9e);_lt=r(sca,"roformer"),sca.forEach(t),blt=r(cYe," \u2014 "),fne=n(cYe,"A",{href:!0});var lca=s(fne);vlt=r(lca,"FlaxRoFormerModel"),lca.forEach(t),Flt=r(cYe," (RoFormer model)"),cYe.forEach(t),Tlt=i(ne),W6=n(ne,"LI",{});var mYe=s(W6);a9e=n(mYe,"STRONG",{});var ica=s(a9e);Mlt=r(ica,"t5"),ica.forEach(t),Elt=r(mYe," \u2014 "),gne=n(mYe,"A",{href:!0});var dca=s(gne);Clt=r(dca,"FlaxT5Model"),dca.forEach(t),wlt=r(mYe," (T5 model)"),mYe.forEach(t),Alt=i(ne),U6=n(ne,"LI",{});var fYe=s(U6);n9e=n(fYe,"STRONG",{});var cca=s(n9e);Llt=r(cca,"vision-text-dual-encoder"),cca.forEach(t),ylt=r(fYe," \u2014 "),hne=n(fYe,"A",{href:!0});var mca=s(hne);xlt=r(mca,"FlaxVisionTextDualEncoderModel"),mca.forEach(t),$lt=r(fYe," (VisionTextDualEncoder model)"),fYe.forEach(t),klt=i(ne),H6=n(ne,"LI",{});var gYe=s(H6);s9e=n(gYe,"STRONG",{});var fca=s(s9e);Slt=r(fca,"vit"),fca.forEach(t),Rlt=r(gYe," \u2014 "),une=n(gYe,"A",{href:!0});var gca=s(une);Plt=r(gca,"FlaxViTModel"),gca.forEach(t),Blt=r(gYe," (ViT model)"),gYe.forEach(t),Ilt=i(ne),J6=n(ne,"LI",{});var hYe=s(J6);l9e=n(hYe,"STRONG",{});var hca=s(l9e);Nlt=r(hca,"wav2vec2"),hca.forEach(t),qlt=r(hYe," \u2014 "),pne=n(hYe,"A",{href:!0});var uca=s(pne);jlt=r(uca,"FlaxWav2Vec2Model"),uca.forEach(t),Dlt=r(hYe," (Wav2Vec2 model)"),hYe.forEach(t),Glt=i(ne),Y6=n(ne,"LI",{});var uYe=s(Y6);i9e=n(uYe,"STRONG",{});var pca=s(i9e);Olt=r(pca,"xglm"),pca.forEach(t),Vlt=r(uYe," \u2014 "),_ne=n(uYe,"A",{href:!0});var _ca=s(_ne);Xlt=r(_ca,"FlaxXGLMModel"),_ca.forEach(t),zlt=r(uYe," (XGLM model)"),uYe.forEach(t),Qlt=i(ne),K6=n(ne,"LI",{});var pYe=s(K6);d9e=n(pYe,"STRONG",{});var bca=s(d9e);Wlt=r(bca,"xlm-roberta"),bca.forEach(t),Ult=r(pYe," \u2014 "),bne=n(pYe,"A",{href:!0});var vca=s(bne);Hlt=r(vca,"FlaxXLMRobertaModel"),vca.forEach(t),Jlt=r(pYe," (XLM-RoBERTa model)"),pYe.forEach(t),ne.forEach(t),Ylt=i(Pi),T(Z6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),Neo=i(m),Dm=n(m,"H2",{class:!0});var Zro=s(Dm);e7=n(Zro,"A",{id:!0,class:!0,href:!0});var Fca=s(e7);c9e=n(Fca,"SPAN",{});var Tca=s(c9e);T(uR.$$.fragment,Tca),Tca.forEach(t),Fca.forEach(t),Klt=i(Zro),m9e=n(Zro,"SPAN",{});var Mca=s(m9e);Zlt=r(Mca,"FlaxAutoModelForCausalLM"),Mca.forEach(t),Zro.forEach(t),qeo=i(m),Er=n(m,"DIV",{class:!0});var Bi=s(Er);T(pR.$$.fragment,Bi),eit=i(Bi),Gm=n(Bi,"P",{});var ide=s(Gm);oit=r(ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vne=n(ide,"A",{href:!0});var Eca=s(vne);rit=r(Eca,"from_pretrained()"),Eca.forEach(t),tit=r(ide," class method or the "),Fne=n(ide,"A",{href:!0});var Cca=s(Fne);ait=r(Cca,"from_config()"),Cca.forEach(t),nit=r(ide,` class
method.`),ide.forEach(t),sit=i(Bi),_R=n(Bi,"P",{});var eto=s(_R);lit=r(eto,"This class cannot be instantiated directly using "),f9e=n(eto,"CODE",{});var wca=s(f9e);iit=r(wca,"__init__()"),wca.forEach(t),dit=r(eto," (throws an error)."),eto.forEach(t),cit=i(Bi),la=n(Bi,"DIV",{class:!0});var p9=s(la);T(bR.$$.fragment,p9),mit=i(p9),g9e=n(p9,"P",{});var Aca=s(g9e);fit=r(Aca,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Aca.forEach(t),git=i(p9),Om=n(p9,"P",{});var dde=s(Om);hit=r(dde,`Note:
Loading a model from its configuration file does `),h9e=n(dde,"STRONG",{});var Lca=s(h9e);uit=r(Lca,"not"),Lca.forEach(t),pit=r(dde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tne=n(dde,"A",{href:!0});var yca=s(Tne);_it=r(yca,"from_pretrained()"),yca.forEach(t),bit=r(dde," to load the model weights."),dde.forEach(t),vit=i(p9),T(o7.$$.fragment,p9),p9.forEach(t),Fit=i(Bi),Zr=n(Bi,"DIV",{class:!0});var Ii=s(Zr);T(vR.$$.fragment,Ii),Tit=i(Ii),u9e=n(Ii,"P",{});var xca=s(u9e);Mit=r(xca,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xca.forEach(t),Eit=i(Ii),On=n(Ii,"P",{});var _9=s(On);Cit=r(_9,"The model class to instantiate is selected based on the "),p9e=n(_9,"CODE",{});var $ca=s(p9e);wit=r($ca,"model_type"),$ca.forEach(t),Ait=r(_9,` property of the config object (either
passed as an argument or loaded from `),_9e=n(_9,"CODE",{});var kca=s(_9e);Lit=r(kca,"pretrained_model_name_or_path"),kca.forEach(t),yit=r(_9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b9e=n(_9,"CODE",{});var Sca=s(b9e);xit=r(Sca,"pretrained_model_name_or_path"),Sca.forEach(t),$it=r(_9,":"),_9.forEach(t),kit=i(Ii),xe=n(Ii,"UL",{});var qe=s(xe);r7=n(qe,"LI",{});var _Ye=s(r7);v9e=n(_Ye,"STRONG",{});var Rca=s(v9e);Sit=r(Rca,"bart"),Rca.forEach(t),Rit=r(_Ye," \u2014 "),Mne=n(_Ye,"A",{href:!0});var Pca=s(Mne);Pit=r(Pca,"FlaxBartForCausalLM"),Pca.forEach(t),Bit=r(_Ye," (BART model)"),_Ye.forEach(t),Iit=i(qe),t7=n(qe,"LI",{});var bYe=s(t7);F9e=n(bYe,"STRONG",{});var Bca=s(F9e);Nit=r(Bca,"bert"),Bca.forEach(t),qit=r(bYe," \u2014 "),Ene=n(bYe,"A",{href:!0});var Ica=s(Ene);jit=r(Ica,"FlaxBertForCausalLM"),Ica.forEach(t),Dit=r(bYe," (BERT model)"),bYe.forEach(t),Git=i(qe),a7=n(qe,"LI",{});var vYe=s(a7);T9e=n(vYe,"STRONG",{});var Nca=s(T9e);Oit=r(Nca,"big_bird"),Nca.forEach(t),Vit=r(vYe," \u2014 "),Cne=n(vYe,"A",{href:!0});var qca=s(Cne);Xit=r(qca,"FlaxBigBirdForCausalLM"),qca.forEach(t),zit=r(vYe," (BigBird model)"),vYe.forEach(t),Qit=i(qe),n7=n(qe,"LI",{});var FYe=s(n7);M9e=n(FYe,"STRONG",{});var jca=s(M9e);Wit=r(jca,"electra"),jca.forEach(t),Uit=r(FYe," \u2014 "),wne=n(FYe,"A",{href:!0});var Dca=s(wne);Hit=r(Dca,"FlaxElectraForCausalLM"),Dca.forEach(t),Jit=r(FYe," (ELECTRA model)"),FYe.forEach(t),Yit=i(qe),s7=n(qe,"LI",{});var TYe=s(s7);E9e=n(TYe,"STRONG",{});var Gca=s(E9e);Kit=r(Gca,"gpt2"),Gca.forEach(t),Zit=r(TYe," \u2014 "),Ane=n(TYe,"A",{href:!0});var Oca=s(Ane);edt=r(Oca,"FlaxGPT2LMHeadModel"),Oca.forEach(t),odt=r(TYe," (OpenAI GPT-2 model)"),TYe.forEach(t),rdt=i(qe),l7=n(qe,"LI",{});var MYe=s(l7);C9e=n(MYe,"STRONG",{});var Vca=s(C9e);tdt=r(Vca,"gpt_neo"),Vca.forEach(t),adt=r(MYe," \u2014 "),Lne=n(MYe,"A",{href:!0});var Xca=s(Lne);ndt=r(Xca,"FlaxGPTNeoForCausalLM"),Xca.forEach(t),sdt=r(MYe," (GPT Neo model)"),MYe.forEach(t),ldt=i(qe),i7=n(qe,"LI",{});var EYe=s(i7);w9e=n(EYe,"STRONG",{});var zca=s(w9e);idt=r(zca,"gptj"),zca.forEach(t),ddt=r(EYe," \u2014 "),yne=n(EYe,"A",{href:!0});var Qca=s(yne);cdt=r(Qca,"FlaxGPTJForCausalLM"),Qca.forEach(t),mdt=r(EYe," (GPT-J model)"),EYe.forEach(t),fdt=i(qe),d7=n(qe,"LI",{});var CYe=s(d7);A9e=n(CYe,"STRONG",{});var Wca=s(A9e);gdt=r(Wca,"opt"),Wca.forEach(t),hdt=r(CYe," \u2014 "),xne=n(CYe,"A",{href:!0});var Uca=s(xne);udt=r(Uca,"FlaxOPTForCausalLM"),Uca.forEach(t),pdt=r(CYe," (OPT model)"),CYe.forEach(t),_dt=i(qe),c7=n(qe,"LI",{});var wYe=s(c7);L9e=n(wYe,"STRONG",{});var Hca=s(L9e);bdt=r(Hca,"roberta"),Hca.forEach(t),vdt=r(wYe," \u2014 "),$ne=n(wYe,"A",{href:!0});var Jca=s($ne);Fdt=r(Jca,"FlaxRobertaForCausalLM"),Jca.forEach(t),Tdt=r(wYe," (RoBERTa model)"),wYe.forEach(t),Mdt=i(qe),m7=n(qe,"LI",{});var AYe=s(m7);y9e=n(AYe,"STRONG",{});var Yca=s(y9e);Edt=r(Yca,"xglm"),Yca.forEach(t),Cdt=r(AYe," \u2014 "),kne=n(AYe,"A",{href:!0});var Kca=s(kne);wdt=r(Kca,"FlaxXGLMForCausalLM"),Kca.forEach(t),Adt=r(AYe," (XGLM model)"),AYe.forEach(t),qe.forEach(t),Ldt=i(Ii),T(f7.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),jeo=i(m),Vm=n(m,"H2",{class:!0});var oto=s(Vm);g7=n(oto,"A",{id:!0,class:!0,href:!0});var Zca=s(g7);x9e=n(Zca,"SPAN",{});var ema=s(x9e);T(FR.$$.fragment,ema),ema.forEach(t),Zca.forEach(t),ydt=i(oto),$9e=n(oto,"SPAN",{});var oma=s($9e);xdt=r(oma,"FlaxAutoModelForPreTraining"),oma.forEach(t),oto.forEach(t),Deo=i(m),Cr=n(m,"DIV",{class:!0});var Ni=s(Cr);T(TR.$$.fragment,Ni),$dt=i(Ni),Xm=n(Ni,"P",{});var cde=s(Xm);kdt=r(cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sne=n(cde,"A",{href:!0});var rma=s(Sne);Sdt=r(rma,"from_pretrained()"),rma.forEach(t),Rdt=r(cde," class method or the "),Rne=n(cde,"A",{href:!0});var tma=s(Rne);Pdt=r(tma,"from_config()"),tma.forEach(t),Bdt=r(cde,` class
method.`),cde.forEach(t),Idt=i(Ni),MR=n(Ni,"P",{});var rto=s(MR);Ndt=r(rto,"This class cannot be instantiated directly using "),k9e=n(rto,"CODE",{});var ama=s(k9e);qdt=r(ama,"__init__()"),ama.forEach(t),jdt=r(rto," (throws an error)."),rto.forEach(t),Ddt=i(Ni),ia=n(Ni,"DIV",{class:!0});var b9=s(ia);T(ER.$$.fragment,b9),Gdt=i(b9),S9e=n(b9,"P",{});var nma=s(S9e);Odt=r(nma,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nma.forEach(t),Vdt=i(b9),zm=n(b9,"P",{});var mde=s(zm);Xdt=r(mde,`Note:
Loading a model from its configuration file does `),R9e=n(mde,"STRONG",{});var sma=s(R9e);zdt=r(sma,"not"),sma.forEach(t),Qdt=r(mde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pne=n(mde,"A",{href:!0});var lma=s(Pne);Wdt=r(lma,"from_pretrained()"),lma.forEach(t),Udt=r(mde," to load the model weights."),mde.forEach(t),Hdt=i(b9),T(h7.$$.fragment,b9),b9.forEach(t),Jdt=i(Ni),et=n(Ni,"DIV",{class:!0});var qi=s(et);T(CR.$$.fragment,qi),Ydt=i(qi),P9e=n(qi,"P",{});var ima=s(P9e);Kdt=r(ima,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ima.forEach(t),Zdt=i(qi),Vn=n(qi,"P",{});var v9=s(Vn);ect=r(v9,"The model class to instantiate is selected based on the "),B9e=n(v9,"CODE",{});var dma=s(B9e);oct=r(dma,"model_type"),dma.forEach(t),rct=r(v9,` property of the config object (either
passed as an argument or loaded from `),I9e=n(v9,"CODE",{});var cma=s(I9e);tct=r(cma,"pretrained_model_name_or_path"),cma.forEach(t),act=r(v9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N9e=n(v9,"CODE",{});var mma=s(N9e);nct=r(mma,"pretrained_model_name_or_path"),mma.forEach(t),sct=r(v9,":"),v9.forEach(t),lct=i(qi),Ee=n(qi,"UL",{});var we=s(Ee);u7=n(we,"LI",{});var LYe=s(u7);q9e=n(LYe,"STRONG",{});var fma=s(q9e);ict=r(fma,"albert"),fma.forEach(t),dct=r(LYe," \u2014 "),Bne=n(LYe,"A",{href:!0});var gma=s(Bne);cct=r(gma,"FlaxAlbertForPreTraining"),gma.forEach(t),mct=r(LYe," (ALBERT model)"),LYe.forEach(t),fct=i(we),p7=n(we,"LI",{});var yYe=s(p7);j9e=n(yYe,"STRONG",{});var hma=s(j9e);gct=r(hma,"bart"),hma.forEach(t),hct=r(yYe," \u2014 "),Ine=n(yYe,"A",{href:!0});var uma=s(Ine);uct=r(uma,"FlaxBartForConditionalGeneration"),uma.forEach(t),pct=r(yYe," (BART model)"),yYe.forEach(t),_ct=i(we),_7=n(we,"LI",{});var xYe=s(_7);D9e=n(xYe,"STRONG",{});var pma=s(D9e);bct=r(pma,"bert"),pma.forEach(t),vct=r(xYe," \u2014 "),Nne=n(xYe,"A",{href:!0});var _ma=s(Nne);Fct=r(_ma,"FlaxBertForPreTraining"),_ma.forEach(t),Tct=r(xYe," (BERT model)"),xYe.forEach(t),Mct=i(we),b7=n(we,"LI",{});var $Ye=s(b7);G9e=n($Ye,"STRONG",{});var bma=s(G9e);Ect=r(bma,"big_bird"),bma.forEach(t),Cct=r($Ye," \u2014 "),qne=n($Ye,"A",{href:!0});var vma=s(qne);wct=r(vma,"FlaxBigBirdForPreTraining"),vma.forEach(t),Act=r($Ye," (BigBird model)"),$Ye.forEach(t),Lct=i(we),v7=n(we,"LI",{});var kYe=s(v7);O9e=n(kYe,"STRONG",{});var Fma=s(O9e);yct=r(Fma,"electra"),Fma.forEach(t),xct=r(kYe," \u2014 "),jne=n(kYe,"A",{href:!0});var Tma=s(jne);$ct=r(Tma,"FlaxElectraForPreTraining"),Tma.forEach(t),kct=r(kYe," (ELECTRA model)"),kYe.forEach(t),Sct=i(we),F7=n(we,"LI",{});var SYe=s(F7);V9e=n(SYe,"STRONG",{});var Mma=s(V9e);Rct=r(Mma,"longt5"),Mma.forEach(t),Pct=r(SYe," \u2014 "),Dne=n(SYe,"A",{href:!0});var Ema=s(Dne);Bct=r(Ema,"FlaxLongT5ForConditionalGeneration"),Ema.forEach(t),Ict=r(SYe," (LongT5 model)"),SYe.forEach(t),Nct=i(we),T7=n(we,"LI",{});var RYe=s(T7);X9e=n(RYe,"STRONG",{});var Cma=s(X9e);qct=r(Cma,"mbart"),Cma.forEach(t),jct=r(RYe," \u2014 "),Gne=n(RYe,"A",{href:!0});var wma=s(Gne);Dct=r(wma,"FlaxMBartForConditionalGeneration"),wma.forEach(t),Gct=r(RYe," (mBART model)"),RYe.forEach(t),Oct=i(we),M7=n(we,"LI",{});var PYe=s(M7);z9e=n(PYe,"STRONG",{});var Ama=s(z9e);Vct=r(Ama,"mt5"),Ama.forEach(t),Xct=r(PYe," \u2014 "),One=n(PYe,"A",{href:!0});var Lma=s(One);zct=r(Lma,"FlaxMT5ForConditionalGeneration"),Lma.forEach(t),Qct=r(PYe," (MT5 model)"),PYe.forEach(t),Wct=i(we),E7=n(we,"LI",{});var BYe=s(E7);Q9e=n(BYe,"STRONG",{});var yma=s(Q9e);Uct=r(yma,"roberta"),yma.forEach(t),Hct=r(BYe," \u2014 "),Vne=n(BYe,"A",{href:!0});var xma=s(Vne);Jct=r(xma,"FlaxRobertaForMaskedLM"),xma.forEach(t),Yct=r(BYe," (RoBERTa model)"),BYe.forEach(t),Kct=i(we),C7=n(we,"LI",{});var IYe=s(C7);W9e=n(IYe,"STRONG",{});var $ma=s(W9e);Zct=r($ma,"roformer"),$ma.forEach(t),emt=r(IYe," \u2014 "),Xne=n(IYe,"A",{href:!0});var kma=s(Xne);omt=r(kma,"FlaxRoFormerForMaskedLM"),kma.forEach(t),rmt=r(IYe," (RoFormer model)"),IYe.forEach(t),tmt=i(we),w7=n(we,"LI",{});var NYe=s(w7);U9e=n(NYe,"STRONG",{});var Sma=s(U9e);amt=r(Sma,"t5"),Sma.forEach(t),nmt=r(NYe," \u2014 "),zne=n(NYe,"A",{href:!0});var Rma=s(zne);smt=r(Rma,"FlaxT5ForConditionalGeneration"),Rma.forEach(t),lmt=r(NYe," (T5 model)"),NYe.forEach(t),imt=i(we),A7=n(we,"LI",{});var qYe=s(A7);H9e=n(qYe,"STRONG",{});var Pma=s(H9e);dmt=r(Pma,"wav2vec2"),Pma.forEach(t),cmt=r(qYe," \u2014 "),Qne=n(qYe,"A",{href:!0});var Bma=s(Qne);mmt=r(Bma,"FlaxWav2Vec2ForPreTraining"),Bma.forEach(t),fmt=r(qYe," (Wav2Vec2 model)"),qYe.forEach(t),gmt=i(we),L7=n(we,"LI",{});var jYe=s(L7);J9e=n(jYe,"STRONG",{});var Ima=s(J9e);hmt=r(Ima,"xlm-roberta"),Ima.forEach(t),umt=r(jYe," \u2014 "),Wne=n(jYe,"A",{href:!0});var Nma=s(Wne);pmt=r(Nma,"FlaxXLMRobertaForMaskedLM"),Nma.forEach(t),_mt=r(jYe," (XLM-RoBERTa model)"),jYe.forEach(t),we.forEach(t),bmt=i(qi),T(y7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),Geo=i(m),Qm=n(m,"H2",{class:!0});var tto=s(Qm);x7=n(tto,"A",{id:!0,class:!0,href:!0});var qma=s(x7);Y9e=n(qma,"SPAN",{});var jma=s(Y9e);T(wR.$$.fragment,jma),jma.forEach(t),qma.forEach(t),vmt=i(tto),K9e=n(tto,"SPAN",{});var Dma=s(K9e);Fmt=r(Dma,"FlaxAutoModelForMaskedLM"),Dma.forEach(t),tto.forEach(t),Oeo=i(m),wr=n(m,"DIV",{class:!0});var ji=s(wr);T(AR.$$.fragment,ji),Tmt=i(ji),Wm=n(ji,"P",{});var fde=s(Wm);Mmt=r(fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Une=n(fde,"A",{href:!0});var Gma=s(Une);Emt=r(Gma,"from_pretrained()"),Gma.forEach(t),Cmt=r(fde," class method or the "),Hne=n(fde,"A",{href:!0});var Oma=s(Hne);wmt=r(Oma,"from_config()"),Oma.forEach(t),Amt=r(fde,` class
method.`),fde.forEach(t),Lmt=i(ji),LR=n(ji,"P",{});var ato=s(LR);ymt=r(ato,"This class cannot be instantiated directly using "),Z9e=n(ato,"CODE",{});var Vma=s(Z9e);xmt=r(Vma,"__init__()"),Vma.forEach(t),$mt=r(ato," (throws an error)."),ato.forEach(t),kmt=i(ji),da=n(ji,"DIV",{class:!0});var F9=s(da);T(yR.$$.fragment,F9),Smt=i(F9),exe=n(F9,"P",{});var Xma=s(exe);Rmt=r(Xma,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xma.forEach(t),Pmt=i(F9),Um=n(F9,"P",{});var gde=s(Um);Bmt=r(gde,`Note:
Loading a model from its configuration file does `),oxe=n(gde,"STRONG",{});var zma=s(oxe);Imt=r(zma,"not"),zma.forEach(t),Nmt=r(gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jne=n(gde,"A",{href:!0});var Qma=s(Jne);qmt=r(Qma,"from_pretrained()"),Qma.forEach(t),jmt=r(gde," to load the model weights."),gde.forEach(t),Dmt=i(F9),T($7.$$.fragment,F9),F9.forEach(t),Gmt=i(ji),ot=n(ji,"DIV",{class:!0});var Di=s(ot);T(xR.$$.fragment,Di),Omt=i(Di),rxe=n(Di,"P",{});var Wma=s(rxe);Vmt=r(Wma,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wma.forEach(t),Xmt=i(Di),Xn=n(Di,"P",{});var T9=s(Xn);zmt=r(T9,"The model class to instantiate is selected based on the "),txe=n(T9,"CODE",{});var Uma=s(txe);Qmt=r(Uma,"model_type"),Uma.forEach(t),Wmt=r(T9,` property of the config object (either
passed as an argument or loaded from `),axe=n(T9,"CODE",{});var Hma=s(axe);Umt=r(Hma,"pretrained_model_name_or_path"),Hma.forEach(t),Hmt=r(T9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nxe=n(T9,"CODE",{});var Jma=s(nxe);Jmt=r(Jma,"pretrained_model_name_or_path"),Jma.forEach(t),Ymt=r(T9,":"),T9.forEach(t),Kmt=i(Di),$e=n(Di,"UL",{});var je=s($e);k7=n(je,"LI",{});var DYe=s(k7);sxe=n(DYe,"STRONG",{});var Yma=s(sxe);Zmt=r(Yma,"albert"),Yma.forEach(t),eft=r(DYe," \u2014 "),Yne=n(DYe,"A",{href:!0});var Kma=s(Yne);oft=r(Kma,"FlaxAlbertForMaskedLM"),Kma.forEach(t),rft=r(DYe," (ALBERT model)"),DYe.forEach(t),tft=i(je),S7=n(je,"LI",{});var GYe=s(S7);lxe=n(GYe,"STRONG",{});var Zma=s(lxe);aft=r(Zma,"bart"),Zma.forEach(t),nft=r(GYe," \u2014 "),Kne=n(GYe,"A",{href:!0});var efa=s(Kne);sft=r(efa,"FlaxBartForConditionalGeneration"),efa.forEach(t),lft=r(GYe," (BART model)"),GYe.forEach(t),ift=i(je),R7=n(je,"LI",{});var OYe=s(R7);ixe=n(OYe,"STRONG",{});var ofa=s(ixe);dft=r(ofa,"bert"),ofa.forEach(t),cft=r(OYe," \u2014 "),Zne=n(OYe,"A",{href:!0});var rfa=s(Zne);mft=r(rfa,"FlaxBertForMaskedLM"),rfa.forEach(t),fft=r(OYe," (BERT model)"),OYe.forEach(t),gft=i(je),P7=n(je,"LI",{});var VYe=s(P7);dxe=n(VYe,"STRONG",{});var tfa=s(dxe);hft=r(tfa,"big_bird"),tfa.forEach(t),uft=r(VYe," \u2014 "),ese=n(VYe,"A",{href:!0});var afa=s(ese);pft=r(afa,"FlaxBigBirdForMaskedLM"),afa.forEach(t),_ft=r(VYe," (BigBird model)"),VYe.forEach(t),bft=i(je),B7=n(je,"LI",{});var XYe=s(B7);cxe=n(XYe,"STRONG",{});var nfa=s(cxe);vft=r(nfa,"distilbert"),nfa.forEach(t),Fft=r(XYe," \u2014 "),ose=n(XYe,"A",{href:!0});var sfa=s(ose);Tft=r(sfa,"FlaxDistilBertForMaskedLM"),sfa.forEach(t),Mft=r(XYe," (DistilBERT model)"),XYe.forEach(t),Eft=i(je),I7=n(je,"LI",{});var zYe=s(I7);mxe=n(zYe,"STRONG",{});var lfa=s(mxe);Cft=r(lfa,"electra"),lfa.forEach(t),wft=r(zYe," \u2014 "),rse=n(zYe,"A",{href:!0});var ifa=s(rse);Aft=r(ifa,"FlaxElectraForMaskedLM"),ifa.forEach(t),Lft=r(zYe," (ELECTRA model)"),zYe.forEach(t),yft=i(je),N7=n(je,"LI",{});var QYe=s(N7);fxe=n(QYe,"STRONG",{});var dfa=s(fxe);xft=r(dfa,"mbart"),dfa.forEach(t),$ft=r(QYe," \u2014 "),tse=n(QYe,"A",{href:!0});var cfa=s(tse);kft=r(cfa,"FlaxMBartForConditionalGeneration"),cfa.forEach(t),Sft=r(QYe," (mBART model)"),QYe.forEach(t),Rft=i(je),q7=n(je,"LI",{});var WYe=s(q7);gxe=n(WYe,"STRONG",{});var mfa=s(gxe);Pft=r(mfa,"roberta"),mfa.forEach(t),Bft=r(WYe," \u2014 "),ase=n(WYe,"A",{href:!0});var ffa=s(ase);Ift=r(ffa,"FlaxRobertaForMaskedLM"),ffa.forEach(t),Nft=r(WYe," (RoBERTa model)"),WYe.forEach(t),qft=i(je),j7=n(je,"LI",{});var UYe=s(j7);hxe=n(UYe,"STRONG",{});var gfa=s(hxe);jft=r(gfa,"roformer"),gfa.forEach(t),Dft=r(UYe," \u2014 "),nse=n(UYe,"A",{href:!0});var hfa=s(nse);Gft=r(hfa,"FlaxRoFormerForMaskedLM"),hfa.forEach(t),Oft=r(UYe," (RoFormer model)"),UYe.forEach(t),Vft=i(je),D7=n(je,"LI",{});var HYe=s(D7);uxe=n(HYe,"STRONG",{});var ufa=s(uxe);Xft=r(ufa,"xlm-roberta"),ufa.forEach(t),zft=r(HYe," \u2014 "),sse=n(HYe,"A",{href:!0});var pfa=s(sse);Qft=r(pfa,"FlaxXLMRobertaForMaskedLM"),pfa.forEach(t),Wft=r(HYe," (XLM-RoBERTa model)"),HYe.forEach(t),je.forEach(t),Uft=i(Di),T(G7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),Veo=i(m),Hm=n(m,"H2",{class:!0});var nto=s(Hm);O7=n(nto,"A",{id:!0,class:!0,href:!0});var _fa=s(O7);pxe=n(_fa,"SPAN",{});var bfa=s(pxe);T($R.$$.fragment,bfa),bfa.forEach(t),_fa.forEach(t),Hft=i(nto),_xe=n(nto,"SPAN",{});var vfa=s(_xe);Jft=r(vfa,"FlaxAutoModelForSeq2SeqLM"),vfa.forEach(t),nto.forEach(t),Xeo=i(m),Ar=n(m,"DIV",{class:!0});var Gi=s(Ar);T(kR.$$.fragment,Gi),Yft=i(Gi),Jm=n(Gi,"P",{});var hde=s(Jm);Kft=r(hde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lse=n(hde,"A",{href:!0});var Ffa=s(lse);Zft=r(Ffa,"from_pretrained()"),Ffa.forEach(t),egt=r(hde," class method or the "),ise=n(hde,"A",{href:!0});var Tfa=s(ise);ogt=r(Tfa,"from_config()"),Tfa.forEach(t),rgt=r(hde,` class
method.`),hde.forEach(t),tgt=i(Gi),SR=n(Gi,"P",{});var sto=s(SR);agt=r(sto,"This class cannot be instantiated directly using "),bxe=n(sto,"CODE",{});var Mfa=s(bxe);ngt=r(Mfa,"__init__()"),Mfa.forEach(t),sgt=r(sto," (throws an error)."),sto.forEach(t),lgt=i(Gi),ca=n(Gi,"DIV",{class:!0});var M9=s(ca);T(RR.$$.fragment,M9),igt=i(M9),vxe=n(M9,"P",{});var Efa=s(vxe);dgt=r(Efa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Efa.forEach(t),cgt=i(M9),Ym=n(M9,"P",{});var ude=s(Ym);mgt=r(ude,`Note:
Loading a model from its configuration file does `),Fxe=n(ude,"STRONG",{});var Cfa=s(Fxe);fgt=r(Cfa,"not"),Cfa.forEach(t),ggt=r(ude,` load the model weights. It only affects the
model\u2019s configuration. Use `),dse=n(ude,"A",{href:!0});var wfa=s(dse);hgt=r(wfa,"from_pretrained()"),wfa.forEach(t),ugt=r(ude," to load the model weights."),ude.forEach(t),pgt=i(M9),T(V7.$$.fragment,M9),M9.forEach(t),_gt=i(Gi),rt=n(Gi,"DIV",{class:!0});var Oi=s(rt);T(PR.$$.fragment,Oi),bgt=i(Oi),Txe=n(Oi,"P",{});var Afa=s(Txe);vgt=r(Afa,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Afa.forEach(t),Fgt=i(Oi),zn=n(Oi,"P",{});var E9=s(zn);Tgt=r(E9,"The model class to instantiate is selected based on the "),Mxe=n(E9,"CODE",{});var Lfa=s(Mxe);Mgt=r(Lfa,"model_type"),Lfa.forEach(t),Egt=r(E9,` property of the config object (either
passed as an argument or loaded from `),Exe=n(E9,"CODE",{});var yfa=s(Exe);Cgt=r(yfa,"pretrained_model_name_or_path"),yfa.forEach(t),wgt=r(E9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cxe=n(E9,"CODE",{});var xfa=s(Cxe);Agt=r(xfa,"pretrained_model_name_or_path"),xfa.forEach(t),Lgt=r(E9,":"),E9.forEach(t),ygt=i(Oi),ke=n(Oi,"UL",{});var De=s(ke);X7=n(De,"LI",{});var JYe=s(X7);wxe=n(JYe,"STRONG",{});var $fa=s(wxe);xgt=r($fa,"bart"),$fa.forEach(t),$gt=r(JYe," \u2014 "),cse=n(JYe,"A",{href:!0});var kfa=s(cse);kgt=r(kfa,"FlaxBartForConditionalGeneration"),kfa.forEach(t),Sgt=r(JYe," (BART model)"),JYe.forEach(t),Rgt=i(De),z7=n(De,"LI",{});var YYe=s(z7);Axe=n(YYe,"STRONG",{});var Sfa=s(Axe);Pgt=r(Sfa,"blenderbot"),Sfa.forEach(t),Bgt=r(YYe," \u2014 "),mse=n(YYe,"A",{href:!0});var Rfa=s(mse);Igt=r(Rfa,"FlaxBlenderbotForConditionalGeneration"),Rfa.forEach(t),Ngt=r(YYe," (Blenderbot model)"),YYe.forEach(t),qgt=i(De),Q7=n(De,"LI",{});var KYe=s(Q7);Lxe=n(KYe,"STRONG",{});var Pfa=s(Lxe);jgt=r(Pfa,"blenderbot-small"),Pfa.forEach(t),Dgt=r(KYe," \u2014 "),fse=n(KYe,"A",{href:!0});var Bfa=s(fse);Ggt=r(Bfa,"FlaxBlenderbotSmallForConditionalGeneration"),Bfa.forEach(t),Ogt=r(KYe," (BlenderbotSmall model)"),KYe.forEach(t),Vgt=i(De),W7=n(De,"LI",{});var ZYe=s(W7);yxe=n(ZYe,"STRONG",{});var Ifa=s(yxe);Xgt=r(Ifa,"encoder-decoder"),Ifa.forEach(t),zgt=r(ZYe," \u2014 "),gse=n(ZYe,"A",{href:!0});var Nfa=s(gse);Qgt=r(Nfa,"FlaxEncoderDecoderModel"),Nfa.forEach(t),Wgt=r(ZYe," (Encoder decoder model)"),ZYe.forEach(t),Ugt=i(De),U7=n(De,"LI",{});var eKe=s(U7);xxe=n(eKe,"STRONG",{});var qfa=s(xxe);Hgt=r(qfa,"longt5"),qfa.forEach(t),Jgt=r(eKe," \u2014 "),hse=n(eKe,"A",{href:!0});var jfa=s(hse);Ygt=r(jfa,"FlaxLongT5ForConditionalGeneration"),jfa.forEach(t),Kgt=r(eKe," (LongT5 model)"),eKe.forEach(t),Zgt=i(De),H7=n(De,"LI",{});var oKe=s(H7);$xe=n(oKe,"STRONG",{});var Dfa=s($xe);eht=r(Dfa,"marian"),Dfa.forEach(t),oht=r(oKe," \u2014 "),use=n(oKe,"A",{href:!0});var Gfa=s(use);rht=r(Gfa,"FlaxMarianMTModel"),Gfa.forEach(t),tht=r(oKe," (Marian model)"),oKe.forEach(t),aht=i(De),J7=n(De,"LI",{});var rKe=s(J7);kxe=n(rKe,"STRONG",{});var Ofa=s(kxe);nht=r(Ofa,"mbart"),Ofa.forEach(t),sht=r(rKe," \u2014 "),pse=n(rKe,"A",{href:!0});var Vfa=s(pse);lht=r(Vfa,"FlaxMBartForConditionalGeneration"),Vfa.forEach(t),iht=r(rKe," (mBART model)"),rKe.forEach(t),dht=i(De),Y7=n(De,"LI",{});var tKe=s(Y7);Sxe=n(tKe,"STRONG",{});var Xfa=s(Sxe);cht=r(Xfa,"mt5"),Xfa.forEach(t),mht=r(tKe," \u2014 "),_se=n(tKe,"A",{href:!0});var zfa=s(_se);fht=r(zfa,"FlaxMT5ForConditionalGeneration"),zfa.forEach(t),ght=r(tKe," (MT5 model)"),tKe.forEach(t),hht=i(De),K7=n(De,"LI",{});var aKe=s(K7);Rxe=n(aKe,"STRONG",{});var Qfa=s(Rxe);uht=r(Qfa,"pegasus"),Qfa.forEach(t),pht=r(aKe," \u2014 "),bse=n(aKe,"A",{href:!0});var Wfa=s(bse);_ht=r(Wfa,"FlaxPegasusForConditionalGeneration"),Wfa.forEach(t),bht=r(aKe," (Pegasus model)"),aKe.forEach(t),vht=i(De),Z7=n(De,"LI",{});var nKe=s(Z7);Pxe=n(nKe,"STRONG",{});var Ufa=s(Pxe);Fht=r(Ufa,"t5"),Ufa.forEach(t),Tht=r(nKe," \u2014 "),vse=n(nKe,"A",{href:!0});var Hfa=s(vse);Mht=r(Hfa,"FlaxT5ForConditionalGeneration"),Hfa.forEach(t),Eht=r(nKe," (T5 model)"),nKe.forEach(t),De.forEach(t),Cht=i(Oi),T(eL.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),zeo=i(m),Km=n(m,"H2",{class:!0});var lto=s(Km);oL=n(lto,"A",{id:!0,class:!0,href:!0});var Jfa=s(oL);Bxe=n(Jfa,"SPAN",{});var Yfa=s(Bxe);T(BR.$$.fragment,Yfa),Yfa.forEach(t),Jfa.forEach(t),wht=i(lto),Ixe=n(lto,"SPAN",{});var Kfa=s(Ixe);Aht=r(Kfa,"FlaxAutoModelForSequenceClassification"),Kfa.forEach(t),lto.forEach(t),Qeo=i(m),Lr=n(m,"DIV",{class:!0});var Vi=s(Lr);T(IR.$$.fragment,Vi),Lht=i(Vi),Zm=n(Vi,"P",{});var pde=s(Zm);yht=r(pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Fse=n(pde,"A",{href:!0});var Zfa=s(Fse);xht=r(Zfa,"from_pretrained()"),Zfa.forEach(t),$ht=r(pde," class method or the "),Tse=n(pde,"A",{href:!0});var ega=s(Tse);kht=r(ega,"from_config()"),ega.forEach(t),Sht=r(pde,` class
method.`),pde.forEach(t),Rht=i(Vi),NR=n(Vi,"P",{});var ito=s(NR);Pht=r(ito,"This class cannot be instantiated directly using "),Nxe=n(ito,"CODE",{});var oga=s(Nxe);Bht=r(oga,"__init__()"),oga.forEach(t),Iht=r(ito," (throws an error)."),ito.forEach(t),Nht=i(Vi),ma=n(Vi,"DIV",{class:!0});var C9=s(ma);T(qR.$$.fragment,C9),qht=i(C9),qxe=n(C9,"P",{});var rga=s(qxe);jht=r(rga,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rga.forEach(t),Dht=i(C9),ef=n(C9,"P",{});var _de=s(ef);Ght=r(_de,`Note:
Loading a model from its configuration file does `),jxe=n(_de,"STRONG",{});var tga=s(jxe);Oht=r(tga,"not"),tga.forEach(t),Vht=r(_de,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=n(_de,"A",{href:!0});var aga=s(Mse);Xht=r(aga,"from_pretrained()"),aga.forEach(t),zht=r(_de," to load the model weights."),_de.forEach(t),Qht=i(C9),T(rL.$$.fragment,C9),C9.forEach(t),Wht=i(Vi),tt=n(Vi,"DIV",{class:!0});var Xi=s(tt);T(jR.$$.fragment,Xi),Uht=i(Xi),Dxe=n(Xi,"P",{});var nga=s(Dxe);Hht=r(nga,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nga.forEach(t),Jht=i(Xi),Qn=n(Xi,"P",{});var w9=s(Qn);Yht=r(w9,"The model class to instantiate is selected based on the "),Gxe=n(w9,"CODE",{});var sga=s(Gxe);Kht=r(sga,"model_type"),sga.forEach(t),Zht=r(w9,` property of the config object (either
passed as an argument or loaded from `),Oxe=n(w9,"CODE",{});var lga=s(Oxe);eut=r(lga,"pretrained_model_name_or_path"),lga.forEach(t),out=r(w9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vxe=n(w9,"CODE",{});var iga=s(Vxe);rut=r(iga,"pretrained_model_name_or_path"),iga.forEach(t),tut=r(w9,":"),w9.forEach(t),aut=i(Xi),Se=n(Xi,"UL",{});var Ge=s(Se);tL=n(Ge,"LI",{});var sKe=s(tL);Xxe=n(sKe,"STRONG",{});var dga=s(Xxe);nut=r(dga,"albert"),dga.forEach(t),sut=r(sKe," \u2014 "),Ese=n(sKe,"A",{href:!0});var cga=s(Ese);lut=r(cga,"FlaxAlbertForSequenceClassification"),cga.forEach(t),iut=r(sKe," (ALBERT model)"),sKe.forEach(t),dut=i(Ge),aL=n(Ge,"LI",{});var lKe=s(aL);zxe=n(lKe,"STRONG",{});var mga=s(zxe);cut=r(mga,"bart"),mga.forEach(t),mut=r(lKe," \u2014 "),Cse=n(lKe,"A",{href:!0});var fga=s(Cse);fut=r(fga,"FlaxBartForSequenceClassification"),fga.forEach(t),gut=r(lKe," (BART model)"),lKe.forEach(t),hut=i(Ge),nL=n(Ge,"LI",{});var iKe=s(nL);Qxe=n(iKe,"STRONG",{});var gga=s(Qxe);uut=r(gga,"bert"),gga.forEach(t),put=r(iKe," \u2014 "),wse=n(iKe,"A",{href:!0});var hga=s(wse);_ut=r(hga,"FlaxBertForSequenceClassification"),hga.forEach(t),but=r(iKe," (BERT model)"),iKe.forEach(t),vut=i(Ge),sL=n(Ge,"LI",{});var dKe=s(sL);Wxe=n(dKe,"STRONG",{});var uga=s(Wxe);Fut=r(uga,"big_bird"),uga.forEach(t),Tut=r(dKe," \u2014 "),Ase=n(dKe,"A",{href:!0});var pga=s(Ase);Mut=r(pga,"FlaxBigBirdForSequenceClassification"),pga.forEach(t),Eut=r(dKe," (BigBird model)"),dKe.forEach(t),Cut=i(Ge),lL=n(Ge,"LI",{});var cKe=s(lL);Uxe=n(cKe,"STRONG",{});var _ga=s(Uxe);wut=r(_ga,"distilbert"),_ga.forEach(t),Aut=r(cKe," \u2014 "),Lse=n(cKe,"A",{href:!0});var bga=s(Lse);Lut=r(bga,"FlaxDistilBertForSequenceClassification"),bga.forEach(t),yut=r(cKe," (DistilBERT model)"),cKe.forEach(t),xut=i(Ge),iL=n(Ge,"LI",{});var mKe=s(iL);Hxe=n(mKe,"STRONG",{});var vga=s(Hxe);$ut=r(vga,"electra"),vga.forEach(t),kut=r(mKe," \u2014 "),yse=n(mKe,"A",{href:!0});var Fga=s(yse);Sut=r(Fga,"FlaxElectraForSequenceClassification"),Fga.forEach(t),Rut=r(mKe," (ELECTRA model)"),mKe.forEach(t),Put=i(Ge),dL=n(Ge,"LI",{});var fKe=s(dL);Jxe=n(fKe,"STRONG",{});var Tga=s(Jxe);But=r(Tga,"mbart"),Tga.forEach(t),Iut=r(fKe," \u2014 "),xse=n(fKe,"A",{href:!0});var Mga=s(xse);Nut=r(Mga,"FlaxMBartForSequenceClassification"),Mga.forEach(t),qut=r(fKe," (mBART model)"),fKe.forEach(t),jut=i(Ge),cL=n(Ge,"LI",{});var gKe=s(cL);Yxe=n(gKe,"STRONG",{});var Ega=s(Yxe);Dut=r(Ega,"roberta"),Ega.forEach(t),Gut=r(gKe," \u2014 "),$se=n(gKe,"A",{href:!0});var Cga=s($se);Out=r(Cga,"FlaxRobertaForSequenceClassification"),Cga.forEach(t),Vut=r(gKe," (RoBERTa model)"),gKe.forEach(t),Xut=i(Ge),mL=n(Ge,"LI",{});var hKe=s(mL);Kxe=n(hKe,"STRONG",{});var wga=s(Kxe);zut=r(wga,"roformer"),wga.forEach(t),Qut=r(hKe," \u2014 "),kse=n(hKe,"A",{href:!0});var Aga=s(kse);Wut=r(Aga,"FlaxRoFormerForSequenceClassification"),Aga.forEach(t),Uut=r(hKe," (RoFormer model)"),hKe.forEach(t),Hut=i(Ge),fL=n(Ge,"LI",{});var uKe=s(fL);Zxe=n(uKe,"STRONG",{});var Lga=s(Zxe);Jut=r(Lga,"xlm-roberta"),Lga.forEach(t),Yut=r(uKe," \u2014 "),Sse=n(uKe,"A",{href:!0});var yga=s(Sse);Kut=r(yga,"FlaxXLMRobertaForSequenceClassification"),yga.forEach(t),Zut=r(uKe," (XLM-RoBERTa model)"),uKe.forEach(t),Ge.forEach(t),ept=i(Xi),T(gL.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),Weo=i(m),of=n(m,"H2",{class:!0});var dto=s(of);hL=n(dto,"A",{id:!0,class:!0,href:!0});var xga=s(hL);e$e=n(xga,"SPAN",{});var $ga=s(e$e);T(DR.$$.fragment,$ga),$ga.forEach(t),xga.forEach(t),opt=i(dto),o$e=n(dto,"SPAN",{});var kga=s(o$e);rpt=r(kga,"FlaxAutoModelForQuestionAnswering"),kga.forEach(t),dto.forEach(t),Ueo=i(m),yr=n(m,"DIV",{class:!0});var zi=s(yr);T(GR.$$.fragment,zi),tpt=i(zi),rf=n(zi,"P",{});var bde=s(rf);apt=r(bde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Rse=n(bde,"A",{href:!0});var Sga=s(Rse);npt=r(Sga,"from_pretrained()"),Sga.forEach(t),spt=r(bde," class method or the "),Pse=n(bde,"A",{href:!0});var Rga=s(Pse);lpt=r(Rga,"from_config()"),Rga.forEach(t),ipt=r(bde,` class
method.`),bde.forEach(t),dpt=i(zi),OR=n(zi,"P",{});var cto=s(OR);cpt=r(cto,"This class cannot be instantiated directly using "),r$e=n(cto,"CODE",{});var Pga=s(r$e);mpt=r(Pga,"__init__()"),Pga.forEach(t),fpt=r(cto," (throws an error)."),cto.forEach(t),gpt=i(zi),fa=n(zi,"DIV",{class:!0});var A9=s(fa);T(VR.$$.fragment,A9),hpt=i(A9),t$e=n(A9,"P",{});var Bga=s(t$e);upt=r(Bga,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Bga.forEach(t),ppt=i(A9),tf=n(A9,"P",{});var vde=s(tf);_pt=r(vde,`Note:
Loading a model from its configuration file does `),a$e=n(vde,"STRONG",{});var Iga=s(a$e);bpt=r(Iga,"not"),Iga.forEach(t),vpt=r(vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bse=n(vde,"A",{href:!0});var Nga=s(Bse);Fpt=r(Nga,"from_pretrained()"),Nga.forEach(t),Tpt=r(vde," to load the model weights."),vde.forEach(t),Mpt=i(A9),T(uL.$$.fragment,A9),A9.forEach(t),Ept=i(zi),at=n(zi,"DIV",{class:!0});var Qi=s(at);T(XR.$$.fragment,Qi),Cpt=i(Qi),n$e=n(Qi,"P",{});var qga=s(n$e);wpt=r(qga,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qga.forEach(t),Apt=i(Qi),Wn=n(Qi,"P",{});var L9=s(Wn);Lpt=r(L9,"The model class to instantiate is selected based on the "),s$e=n(L9,"CODE",{});var jga=s(s$e);ypt=r(jga,"model_type"),jga.forEach(t),xpt=r(L9,` property of the config object (either
passed as an argument or loaded from `),l$e=n(L9,"CODE",{});var Dga=s(l$e);$pt=r(Dga,"pretrained_model_name_or_path"),Dga.forEach(t),kpt=r(L9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i$e=n(L9,"CODE",{});var Gga=s(i$e);Spt=r(Gga,"pretrained_model_name_or_path"),Gga.forEach(t),Rpt=r(L9,":"),L9.forEach(t),Ppt=i(Qi),Re=n(Qi,"UL",{});var Oe=s(Re);pL=n(Oe,"LI",{});var pKe=s(pL);d$e=n(pKe,"STRONG",{});var Oga=s(d$e);Bpt=r(Oga,"albert"),Oga.forEach(t),Ipt=r(pKe," \u2014 "),Ise=n(pKe,"A",{href:!0});var Vga=s(Ise);Npt=r(Vga,"FlaxAlbertForQuestionAnswering"),Vga.forEach(t),qpt=r(pKe," (ALBERT model)"),pKe.forEach(t),jpt=i(Oe),_L=n(Oe,"LI",{});var _Ke=s(_L);c$e=n(_Ke,"STRONG",{});var Xga=s(c$e);Dpt=r(Xga,"bart"),Xga.forEach(t),Gpt=r(_Ke," \u2014 "),Nse=n(_Ke,"A",{href:!0});var zga=s(Nse);Opt=r(zga,"FlaxBartForQuestionAnswering"),zga.forEach(t),Vpt=r(_Ke," (BART model)"),_Ke.forEach(t),Xpt=i(Oe),bL=n(Oe,"LI",{});var bKe=s(bL);m$e=n(bKe,"STRONG",{});var Qga=s(m$e);zpt=r(Qga,"bert"),Qga.forEach(t),Qpt=r(bKe," \u2014 "),qse=n(bKe,"A",{href:!0});var Wga=s(qse);Wpt=r(Wga,"FlaxBertForQuestionAnswering"),Wga.forEach(t),Upt=r(bKe," (BERT model)"),bKe.forEach(t),Hpt=i(Oe),vL=n(Oe,"LI",{});var vKe=s(vL);f$e=n(vKe,"STRONG",{});var Uga=s(f$e);Jpt=r(Uga,"big_bird"),Uga.forEach(t),Ypt=r(vKe," \u2014 "),jse=n(vKe,"A",{href:!0});var Hga=s(jse);Kpt=r(Hga,"FlaxBigBirdForQuestionAnswering"),Hga.forEach(t),Zpt=r(vKe," (BigBird model)"),vKe.forEach(t),e_t=i(Oe),FL=n(Oe,"LI",{});var FKe=s(FL);g$e=n(FKe,"STRONG",{});var Jga=s(g$e);o_t=r(Jga,"distilbert"),Jga.forEach(t),r_t=r(FKe," \u2014 "),Dse=n(FKe,"A",{href:!0});var Yga=s(Dse);t_t=r(Yga,"FlaxDistilBertForQuestionAnswering"),Yga.forEach(t),a_t=r(FKe," (DistilBERT model)"),FKe.forEach(t),n_t=i(Oe),TL=n(Oe,"LI",{});var TKe=s(TL);h$e=n(TKe,"STRONG",{});var Kga=s(h$e);s_t=r(Kga,"electra"),Kga.forEach(t),l_t=r(TKe," \u2014 "),Gse=n(TKe,"A",{href:!0});var Zga=s(Gse);i_t=r(Zga,"FlaxElectraForQuestionAnswering"),Zga.forEach(t),d_t=r(TKe," (ELECTRA model)"),TKe.forEach(t),c_t=i(Oe),ML=n(Oe,"LI",{});var MKe=s(ML);u$e=n(MKe,"STRONG",{});var eha=s(u$e);m_t=r(eha,"mbart"),eha.forEach(t),f_t=r(MKe," \u2014 "),Ose=n(MKe,"A",{href:!0});var oha=s(Ose);g_t=r(oha,"FlaxMBartForQuestionAnswering"),oha.forEach(t),h_t=r(MKe," (mBART model)"),MKe.forEach(t),u_t=i(Oe),EL=n(Oe,"LI",{});var EKe=s(EL);p$e=n(EKe,"STRONG",{});var rha=s(p$e);p_t=r(rha,"roberta"),rha.forEach(t),__t=r(EKe," \u2014 "),Vse=n(EKe,"A",{href:!0});var tha=s(Vse);b_t=r(tha,"FlaxRobertaForQuestionAnswering"),tha.forEach(t),v_t=r(EKe," (RoBERTa model)"),EKe.forEach(t),F_t=i(Oe),CL=n(Oe,"LI",{});var CKe=s(CL);_$e=n(CKe,"STRONG",{});var aha=s(_$e);T_t=r(aha,"roformer"),aha.forEach(t),M_t=r(CKe," \u2014 "),Xse=n(CKe,"A",{href:!0});var nha=s(Xse);E_t=r(nha,"FlaxRoFormerForQuestionAnswering"),nha.forEach(t),C_t=r(CKe," (RoFormer model)"),CKe.forEach(t),w_t=i(Oe),wL=n(Oe,"LI",{});var wKe=s(wL);b$e=n(wKe,"STRONG",{});var sha=s(b$e);A_t=r(sha,"xlm-roberta"),sha.forEach(t),L_t=r(wKe," \u2014 "),zse=n(wKe,"A",{href:!0});var lha=s(zse);y_t=r(lha,"FlaxXLMRobertaForQuestionAnswering"),lha.forEach(t),x_t=r(wKe," (XLM-RoBERTa model)"),wKe.forEach(t),Oe.forEach(t),$_t=i(Qi),T(AL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),Heo=i(m),af=n(m,"H2",{class:!0});var mto=s(af);LL=n(mto,"A",{id:!0,class:!0,href:!0});var iha=s(LL);v$e=n(iha,"SPAN",{});var dha=s(v$e);T(zR.$$.fragment,dha),dha.forEach(t),iha.forEach(t),k_t=i(mto),F$e=n(mto,"SPAN",{});var cha=s(F$e);S_t=r(cha,"FlaxAutoModelForTokenClassification"),cha.forEach(t),mto.forEach(t),Jeo=i(m),xr=n(m,"DIV",{class:!0});var Wi=s(xr);T(QR.$$.fragment,Wi),R_t=i(Wi),nf=n(Wi,"P",{});var Fde=s(nf);P_t=r(Fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qse=n(Fde,"A",{href:!0});var mha=s(Qse);B_t=r(mha,"from_pretrained()"),mha.forEach(t),I_t=r(Fde," class method or the "),Wse=n(Fde,"A",{href:!0});var fha=s(Wse);N_t=r(fha,"from_config()"),fha.forEach(t),q_t=r(Fde,` class
method.`),Fde.forEach(t),j_t=i(Wi),WR=n(Wi,"P",{});var fto=s(WR);D_t=r(fto,"This class cannot be instantiated directly using "),T$e=n(fto,"CODE",{});var gha=s(T$e);G_t=r(gha,"__init__()"),gha.forEach(t),O_t=r(fto," (throws an error)."),fto.forEach(t),V_t=i(Wi),ga=n(Wi,"DIV",{class:!0});var y9=s(ga);T(UR.$$.fragment,y9),X_t=i(y9),M$e=n(y9,"P",{});var hha=s(M$e);z_t=r(hha,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hha.forEach(t),Q_t=i(y9),sf=n(y9,"P",{});var Tde=s(sf);W_t=r(Tde,`Note:
Loading a model from its configuration file does `),E$e=n(Tde,"STRONG",{});var uha=s(E$e);U_t=r(uha,"not"),uha.forEach(t),H_t=r(Tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=n(Tde,"A",{href:!0});var pha=s(Use);J_t=r(pha,"from_pretrained()"),pha.forEach(t),Y_t=r(Tde," to load the model weights."),Tde.forEach(t),K_t=i(y9),T(yL.$$.fragment,y9),y9.forEach(t),Z_t=i(Wi),nt=n(Wi,"DIV",{class:!0});var Ui=s(nt);T(HR.$$.fragment,Ui),ebt=i(Ui),C$e=n(Ui,"P",{});var _ha=s(C$e);obt=r(_ha,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_ha.forEach(t),rbt=i(Ui),Un=n(Ui,"P",{});var x9=s(Un);tbt=r(x9,"The model class to instantiate is selected based on the "),w$e=n(x9,"CODE",{});var bha=s(w$e);abt=r(bha,"model_type"),bha.forEach(t),nbt=r(x9,` property of the config object (either
passed as an argument or loaded from `),A$e=n(x9,"CODE",{});var vha=s(A$e);sbt=r(vha,"pretrained_model_name_or_path"),vha.forEach(t),lbt=r(x9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L$e=n(x9,"CODE",{});var Fha=s(L$e);ibt=r(Fha,"pretrained_model_name_or_path"),Fha.forEach(t),dbt=r(x9,":"),x9.forEach(t),cbt=i(Ui),Xe=n(Ui,"UL",{});var Ao=s(Xe);xL=n(Ao,"LI",{});var AKe=s(xL);y$e=n(AKe,"STRONG",{});var Tha=s(y$e);mbt=r(Tha,"albert"),Tha.forEach(t),fbt=r(AKe," \u2014 "),Hse=n(AKe,"A",{href:!0});var Mha=s(Hse);gbt=r(Mha,"FlaxAlbertForTokenClassification"),Mha.forEach(t),hbt=r(AKe," (ALBERT model)"),AKe.forEach(t),ubt=i(Ao),$L=n(Ao,"LI",{});var LKe=s($L);x$e=n(LKe,"STRONG",{});var Eha=s(x$e);pbt=r(Eha,"bert"),Eha.forEach(t),_bt=r(LKe," \u2014 "),Jse=n(LKe,"A",{href:!0});var Cha=s(Jse);bbt=r(Cha,"FlaxBertForTokenClassification"),Cha.forEach(t),vbt=r(LKe," (BERT model)"),LKe.forEach(t),Fbt=i(Ao),kL=n(Ao,"LI",{});var yKe=s(kL);$$e=n(yKe,"STRONG",{});var wha=s($$e);Tbt=r(wha,"big_bird"),wha.forEach(t),Mbt=r(yKe," \u2014 "),Yse=n(yKe,"A",{href:!0});var Aha=s(Yse);Ebt=r(Aha,"FlaxBigBirdForTokenClassification"),Aha.forEach(t),Cbt=r(yKe," (BigBird model)"),yKe.forEach(t),wbt=i(Ao),SL=n(Ao,"LI",{});var xKe=s(SL);k$e=n(xKe,"STRONG",{});var Lha=s(k$e);Abt=r(Lha,"distilbert"),Lha.forEach(t),Lbt=r(xKe," \u2014 "),Kse=n(xKe,"A",{href:!0});var yha=s(Kse);ybt=r(yha,"FlaxDistilBertForTokenClassification"),yha.forEach(t),xbt=r(xKe," (DistilBERT model)"),xKe.forEach(t),$bt=i(Ao),RL=n(Ao,"LI",{});var $Ke=s(RL);S$e=n($Ke,"STRONG",{});var xha=s(S$e);kbt=r(xha,"electra"),xha.forEach(t),Sbt=r($Ke," \u2014 "),Zse=n($Ke,"A",{href:!0});var $ha=s(Zse);Rbt=r($ha,"FlaxElectraForTokenClassification"),$ha.forEach(t),Pbt=r($Ke," (ELECTRA model)"),$Ke.forEach(t),Bbt=i(Ao),PL=n(Ao,"LI",{});var kKe=s(PL);R$e=n(kKe,"STRONG",{});var kha=s(R$e);Ibt=r(kha,"roberta"),kha.forEach(t),Nbt=r(kKe," \u2014 "),ele=n(kKe,"A",{href:!0});var Sha=s(ele);qbt=r(Sha,"FlaxRobertaForTokenClassification"),Sha.forEach(t),jbt=r(kKe," (RoBERTa model)"),kKe.forEach(t),Dbt=i(Ao),BL=n(Ao,"LI",{});var SKe=s(BL);P$e=n(SKe,"STRONG",{});var Rha=s(P$e);Gbt=r(Rha,"roformer"),Rha.forEach(t),Obt=r(SKe," \u2014 "),ole=n(SKe,"A",{href:!0});var Pha=s(ole);Vbt=r(Pha,"FlaxRoFormerForTokenClassification"),Pha.forEach(t),Xbt=r(SKe," (RoFormer model)"),SKe.forEach(t),zbt=i(Ao),IL=n(Ao,"LI",{});var RKe=s(IL);B$e=n(RKe,"STRONG",{});var Bha=s(B$e);Qbt=r(Bha,"xlm-roberta"),Bha.forEach(t),Wbt=r(RKe," \u2014 "),rle=n(RKe,"A",{href:!0});var Iha=s(rle);Ubt=r(Iha,"FlaxXLMRobertaForTokenClassification"),Iha.forEach(t),Hbt=r(RKe," (XLM-RoBERTa model)"),RKe.forEach(t),Ao.forEach(t),Jbt=i(Ui),T(NL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),Yeo=i(m),lf=n(m,"H2",{class:!0});var gto=s(lf);qL=n(gto,"A",{id:!0,class:!0,href:!0});var Nha=s(qL);I$e=n(Nha,"SPAN",{});var qha=s(I$e);T(JR.$$.fragment,qha),qha.forEach(t),Nha.forEach(t),Ybt=i(gto),N$e=n(gto,"SPAN",{});var jha=s(N$e);Kbt=r(jha,"FlaxAutoModelForMultipleChoice"),jha.forEach(t),gto.forEach(t),Keo=i(m),$r=n(m,"DIV",{class:!0});var Hi=s($r);T(YR.$$.fragment,Hi),Zbt=i(Hi),df=n(Hi,"P",{});var Mde=s(df);e2t=r(Mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tle=n(Mde,"A",{href:!0});var Dha=s(tle);o2t=r(Dha,"from_pretrained()"),Dha.forEach(t),r2t=r(Mde," class method or the "),ale=n(Mde,"A",{href:!0});var Gha=s(ale);t2t=r(Gha,"from_config()"),Gha.forEach(t),a2t=r(Mde,` class
method.`),Mde.forEach(t),n2t=i(Hi),KR=n(Hi,"P",{});var hto=s(KR);s2t=r(hto,"This class cannot be instantiated directly using "),q$e=n(hto,"CODE",{});var Oha=s(q$e);l2t=r(Oha,"__init__()"),Oha.forEach(t),i2t=r(hto," (throws an error)."),hto.forEach(t),d2t=i(Hi),ha=n(Hi,"DIV",{class:!0});var $9=s(ha);T(ZR.$$.fragment,$9),c2t=i($9),j$e=n($9,"P",{});var Vha=s(j$e);m2t=r(Vha,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vha.forEach(t),f2t=i($9),cf=n($9,"P",{});var Ede=s(cf);g2t=r(Ede,`Note:
Loading a model from its configuration file does `),D$e=n(Ede,"STRONG",{});var Xha=s(D$e);h2t=r(Xha,"not"),Xha.forEach(t),u2t=r(Ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),nle=n(Ede,"A",{href:!0});var zha=s(nle);p2t=r(zha,"from_pretrained()"),zha.forEach(t),_2t=r(Ede," to load the model weights."),Ede.forEach(t),b2t=i($9),T(jL.$$.fragment,$9),$9.forEach(t),v2t=i(Hi),st=n(Hi,"DIV",{class:!0});var Ji=s(st);T(eP.$$.fragment,Ji),F2t=i(Ji),G$e=n(Ji,"P",{});var Qha=s(G$e);T2t=r(Qha,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qha.forEach(t),M2t=i(Ji),Hn=n(Ji,"P",{});var k9=s(Hn);E2t=r(k9,"The model class to instantiate is selected based on the "),O$e=n(k9,"CODE",{});var Wha=s(O$e);C2t=r(Wha,"model_type"),Wha.forEach(t),w2t=r(k9,` property of the config object (either
passed as an argument or loaded from `),V$e=n(k9,"CODE",{});var Uha=s(V$e);A2t=r(Uha,"pretrained_model_name_or_path"),Uha.forEach(t),L2t=r(k9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X$e=n(k9,"CODE",{});var Hha=s(X$e);y2t=r(Hha,"pretrained_model_name_or_path"),Hha.forEach(t),x2t=r(k9,":"),k9.forEach(t),$2t=i(Ji),ze=n(Ji,"UL",{});var Lo=s(ze);DL=n(Lo,"LI",{});var PKe=s(DL);z$e=n(PKe,"STRONG",{});var Jha=s(z$e);k2t=r(Jha,"albert"),Jha.forEach(t),S2t=r(PKe," \u2014 "),sle=n(PKe,"A",{href:!0});var Yha=s(sle);R2t=r(Yha,"FlaxAlbertForMultipleChoice"),Yha.forEach(t),P2t=r(PKe," (ALBERT model)"),PKe.forEach(t),B2t=i(Lo),GL=n(Lo,"LI",{});var BKe=s(GL);Q$e=n(BKe,"STRONG",{});var Kha=s(Q$e);I2t=r(Kha,"bert"),Kha.forEach(t),N2t=r(BKe," \u2014 "),lle=n(BKe,"A",{href:!0});var Zha=s(lle);q2t=r(Zha,"FlaxBertForMultipleChoice"),Zha.forEach(t),j2t=r(BKe," (BERT model)"),BKe.forEach(t),D2t=i(Lo),OL=n(Lo,"LI",{});var IKe=s(OL);W$e=n(IKe,"STRONG",{});var eua=s(W$e);G2t=r(eua,"big_bird"),eua.forEach(t),O2t=r(IKe," \u2014 "),ile=n(IKe,"A",{href:!0});var oua=s(ile);V2t=r(oua,"FlaxBigBirdForMultipleChoice"),oua.forEach(t),X2t=r(IKe," (BigBird model)"),IKe.forEach(t),z2t=i(Lo),VL=n(Lo,"LI",{});var NKe=s(VL);U$e=n(NKe,"STRONG",{});var rua=s(U$e);Q2t=r(rua,"distilbert"),rua.forEach(t),W2t=r(NKe," \u2014 "),dle=n(NKe,"A",{href:!0});var tua=s(dle);U2t=r(tua,"FlaxDistilBertForMultipleChoice"),tua.forEach(t),H2t=r(NKe," (DistilBERT model)"),NKe.forEach(t),J2t=i(Lo),XL=n(Lo,"LI",{});var qKe=s(XL);H$e=n(qKe,"STRONG",{});var aua=s(H$e);Y2t=r(aua,"electra"),aua.forEach(t),K2t=r(qKe," \u2014 "),cle=n(qKe,"A",{href:!0});var nua=s(cle);Z2t=r(nua,"FlaxElectraForMultipleChoice"),nua.forEach(t),e1t=r(qKe," (ELECTRA model)"),qKe.forEach(t),o1t=i(Lo),zL=n(Lo,"LI",{});var jKe=s(zL);J$e=n(jKe,"STRONG",{});var sua=s(J$e);r1t=r(sua,"roberta"),sua.forEach(t),t1t=r(jKe," \u2014 "),mle=n(jKe,"A",{href:!0});var lua=s(mle);a1t=r(lua,"FlaxRobertaForMultipleChoice"),lua.forEach(t),n1t=r(jKe," (RoBERTa model)"),jKe.forEach(t),s1t=i(Lo),QL=n(Lo,"LI",{});var DKe=s(QL);Y$e=n(DKe,"STRONG",{});var iua=s(Y$e);l1t=r(iua,"roformer"),iua.forEach(t),i1t=r(DKe," \u2014 "),fle=n(DKe,"A",{href:!0});var dua=s(fle);d1t=r(dua,"FlaxRoFormerForMultipleChoice"),dua.forEach(t),c1t=r(DKe," (RoFormer model)"),DKe.forEach(t),m1t=i(Lo),WL=n(Lo,"LI",{});var GKe=s(WL);K$e=n(GKe,"STRONG",{});var cua=s(K$e);f1t=r(cua,"xlm-roberta"),cua.forEach(t),g1t=r(GKe," \u2014 "),gle=n(GKe,"A",{href:!0});var mua=s(gle);h1t=r(mua,"FlaxXLMRobertaForMultipleChoice"),mua.forEach(t),u1t=r(GKe," (XLM-RoBERTa model)"),GKe.forEach(t),Lo.forEach(t),p1t=i(Ji),T(UL.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),Zeo=i(m),mf=n(m,"H2",{class:!0});var uto=s(mf);HL=n(uto,"A",{id:!0,class:!0,href:!0});var fua=s(HL);Z$e=n(fua,"SPAN",{});var gua=s(Z$e);T(oP.$$.fragment,gua),gua.forEach(t),fua.forEach(t),_1t=i(uto),eke=n(uto,"SPAN",{});var hua=s(eke);b1t=r(hua,"FlaxAutoModelForNextSentencePrediction"),hua.forEach(t),uto.forEach(t),eoo=i(m),kr=n(m,"DIV",{class:!0});var Yi=s(kr);T(rP.$$.fragment,Yi),v1t=i(Yi),ff=n(Yi,"P",{});var Cde=s(ff);F1t=r(Cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hle=n(Cde,"A",{href:!0});var uua=s(hle);T1t=r(uua,"from_pretrained()"),uua.forEach(t),M1t=r(Cde," class method or the "),ule=n(Cde,"A",{href:!0});var pua=s(ule);E1t=r(pua,"from_config()"),pua.forEach(t),C1t=r(Cde,` class
method.`),Cde.forEach(t),w1t=i(Yi),tP=n(Yi,"P",{});var pto=s(tP);A1t=r(pto,"This class cannot be instantiated directly using "),oke=n(pto,"CODE",{});var _ua=s(oke);L1t=r(_ua,"__init__()"),_ua.forEach(t),y1t=r(pto," (throws an error)."),pto.forEach(t),x1t=i(Yi),ua=n(Yi,"DIV",{class:!0});var S9=s(ua);T(aP.$$.fragment,S9),$1t=i(S9),rke=n(S9,"P",{});var bua=s(rke);k1t=r(bua,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bua.forEach(t),S1t=i(S9),gf=n(S9,"P",{});var wde=s(gf);R1t=r(wde,`Note:
Loading a model from its configuration file does `),tke=n(wde,"STRONG",{});var vua=s(tke);P1t=r(vua,"not"),vua.forEach(t),B1t=r(wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ple=n(wde,"A",{href:!0});var Fua=s(ple);I1t=r(Fua,"from_pretrained()"),Fua.forEach(t),N1t=r(wde," to load the model weights."),wde.forEach(t),q1t=i(S9),T(JL.$$.fragment,S9),S9.forEach(t),j1t=i(Yi),lt=n(Yi,"DIV",{class:!0});var Ki=s(lt);T(nP.$$.fragment,Ki),D1t=i(Ki),ake=n(Ki,"P",{});var Tua=s(ake);G1t=r(Tua,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Tua.forEach(t),O1t=i(Ki),Jn=n(Ki,"P",{});var R9=s(Jn);V1t=r(R9,"The model class to instantiate is selected based on the "),nke=n(R9,"CODE",{});var Mua=s(nke);X1t=r(Mua,"model_type"),Mua.forEach(t),z1t=r(R9,` property of the config object (either
passed as an argument or loaded from `),ske=n(R9,"CODE",{});var Eua=s(ske);Q1t=r(Eua,"pretrained_model_name_or_path"),Eua.forEach(t),W1t=r(R9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lke=n(R9,"CODE",{});var Cua=s(lke);U1t=r(Cua,"pretrained_model_name_or_path"),Cua.forEach(t),H1t=r(R9,":"),R9.forEach(t),J1t=i(Ki),ike=n(Ki,"UL",{});var wua=s(ike);YL=n(wua,"LI",{});var OKe=s(YL);dke=n(OKe,"STRONG",{});var Aua=s(dke);Y1t=r(Aua,"bert"),Aua.forEach(t),K1t=r(OKe," \u2014 "),_le=n(OKe,"A",{href:!0});var Lua=s(_le);Z1t=r(Lua,"FlaxBertForNextSentencePrediction"),Lua.forEach(t),evt=r(OKe," (BERT model)"),OKe.forEach(t),wua.forEach(t),ovt=i(Ki),T(KL.$$.fragment,Ki),Ki.forEach(t),Yi.forEach(t),ooo=i(m),hf=n(m,"H2",{class:!0});var _to=s(hf);ZL=n(_to,"A",{id:!0,class:!0,href:!0});var yua=s(ZL);cke=n(yua,"SPAN",{});var xua=s(cke);T(sP.$$.fragment,xua),xua.forEach(t),yua.forEach(t),rvt=i(_to),mke=n(_to,"SPAN",{});var $ua=s(mke);tvt=r($ua,"FlaxAutoModelForImageClassification"),$ua.forEach(t),_to.forEach(t),roo=i(m),Sr=n(m,"DIV",{class:!0});var Zi=s(Sr);T(lP.$$.fragment,Zi),avt=i(Zi),uf=n(Zi,"P",{});var Ade=s(uf);nvt=r(Ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ble=n(Ade,"A",{href:!0});var kua=s(ble);svt=r(kua,"from_pretrained()"),kua.forEach(t),lvt=r(Ade," class method or the "),vle=n(Ade,"A",{href:!0});var Sua=s(vle);ivt=r(Sua,"from_config()"),Sua.forEach(t),dvt=r(Ade,` class
method.`),Ade.forEach(t),cvt=i(Zi),iP=n(Zi,"P",{});var bto=s(iP);mvt=r(bto,"This class cannot be instantiated directly using "),fke=n(bto,"CODE",{});var Rua=s(fke);fvt=r(Rua,"__init__()"),Rua.forEach(t),gvt=r(bto," (throws an error)."),bto.forEach(t),hvt=i(Zi),pa=n(Zi,"DIV",{class:!0});var P9=s(pa);T(dP.$$.fragment,P9),uvt=i(P9),gke=n(P9,"P",{});var Pua=s(gke);pvt=r(Pua,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pua.forEach(t),_vt=i(P9),pf=n(P9,"P",{});var Lde=s(pf);bvt=r(Lde,`Note:
Loading a model from its configuration file does `),hke=n(Lde,"STRONG",{});var Bua=s(hke);vvt=r(Bua,"not"),Bua.forEach(t),Fvt=r(Lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fle=n(Lde,"A",{href:!0});var Iua=s(Fle);Tvt=r(Iua,"from_pretrained()"),Iua.forEach(t),Mvt=r(Lde," to load the model weights."),Lde.forEach(t),Evt=i(P9),T(ey.$$.fragment,P9),P9.forEach(t),Cvt=i(Zi),it=n(Zi,"DIV",{class:!0});var ed=s(it);T(cP.$$.fragment,ed),wvt=i(ed),uke=n(ed,"P",{});var Nua=s(uke);Avt=r(Nua,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nua.forEach(t),Lvt=i(ed),Yn=n(ed,"P",{});var B9=s(Yn);yvt=r(B9,"The model class to instantiate is selected based on the "),pke=n(B9,"CODE",{});var qua=s(pke);xvt=r(qua,"model_type"),qua.forEach(t),$vt=r(B9,` property of the config object (either
passed as an argument or loaded from `),_ke=n(B9,"CODE",{});var jua=s(_ke);kvt=r(jua,"pretrained_model_name_or_path"),jua.forEach(t),Svt=r(B9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bke=n(B9,"CODE",{});var Dua=s(bke);Rvt=r(Dua,"pretrained_model_name_or_path"),Dua.forEach(t),Pvt=r(B9,":"),B9.forEach(t),Bvt=i(ed),mP=n(ed,"UL",{});var vto=s(mP);oy=n(vto,"LI",{});var VKe=s(oy);vke=n(VKe,"STRONG",{});var Gua=s(vke);Ivt=r(Gua,"beit"),Gua.forEach(t),Nvt=r(VKe," \u2014 "),Tle=n(VKe,"A",{href:!0});var Oua=s(Tle);qvt=r(Oua,"FlaxBeitForImageClassification"),Oua.forEach(t),jvt=r(VKe," (BEiT model)"),VKe.forEach(t),Dvt=i(vto),ry=n(vto,"LI",{});var XKe=s(ry);Fke=n(XKe,"STRONG",{});var Vua=s(Fke);Gvt=r(Vua,"vit"),Vua.forEach(t),Ovt=r(XKe," \u2014 "),Mle=n(XKe,"A",{href:!0});var Xua=s(Mle);Vvt=r(Xua,"FlaxViTForImageClassification"),Xua.forEach(t),Xvt=r(XKe," (ViT model)"),XKe.forEach(t),vto.forEach(t),zvt=i(ed),T(ty.$$.fragment,ed),ed.forEach(t),Zi.forEach(t),too=i(m),_f=n(m,"H2",{class:!0});var Fto=s(_f);ay=n(Fto,"A",{id:!0,class:!0,href:!0});var zua=s(ay);Tke=n(zua,"SPAN",{});var Qua=s(Tke);T(fP.$$.fragment,Qua),Qua.forEach(t),zua.forEach(t),Qvt=i(Fto),Mke=n(Fto,"SPAN",{});var Wua=s(Mke);Wvt=r(Wua,"FlaxAutoModelForVision2Seq"),Wua.forEach(t),Fto.forEach(t),aoo=i(m),Rr=n(m,"DIV",{class:!0});var od=s(Rr);T(gP.$$.fragment,od),Uvt=i(od),bf=n(od,"P",{});var yde=s(bf);Hvt=r(yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ele=n(yde,"A",{href:!0});var Uua=s(Ele);Jvt=r(Uua,"from_pretrained()"),Uua.forEach(t),Yvt=r(yde," class method or the "),Cle=n(yde,"A",{href:!0});var Hua=s(Cle);Kvt=r(Hua,"from_config()"),Hua.forEach(t),Zvt=r(yde,` class
method.`),yde.forEach(t),eFt=i(od),hP=n(od,"P",{});var Tto=s(hP);oFt=r(Tto,"This class cannot be instantiated directly using "),Eke=n(Tto,"CODE",{});var Jua=s(Eke);rFt=r(Jua,"__init__()"),Jua.forEach(t),tFt=r(Tto," (throws an error)."),Tto.forEach(t),aFt=i(od),_a=n(od,"DIV",{class:!0});var I9=s(_a);T(uP.$$.fragment,I9),nFt=i(I9),Cke=n(I9,"P",{});var Yua=s(Cke);sFt=r(Yua,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yua.forEach(t),lFt=i(I9),vf=n(I9,"P",{});var xde=s(vf);iFt=r(xde,`Note:
Loading a model from its configuration file does `),wke=n(xde,"STRONG",{});var Kua=s(wke);dFt=r(Kua,"not"),Kua.forEach(t),cFt=r(xde,` load the model weights. It only affects the
model\u2019s configuration. Use `),wle=n(xde,"A",{href:!0});var Zua=s(wle);mFt=r(Zua,"from_pretrained()"),Zua.forEach(t),fFt=r(xde," to load the model weights."),xde.forEach(t),gFt=i(I9),T(ny.$$.fragment,I9),I9.forEach(t),hFt=i(od),dt=n(od,"DIV",{class:!0});var rd=s(dt);T(pP.$$.fragment,rd),uFt=i(rd),Ake=n(rd,"P",{});var epa=s(Ake);pFt=r(epa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),epa.forEach(t),_Ft=i(rd),Kn=n(rd,"P",{});var N9=s(Kn);bFt=r(N9,"The model class to instantiate is selected based on the "),Lke=n(N9,"CODE",{});var opa=s(Lke);vFt=r(opa,"model_type"),opa.forEach(t),FFt=r(N9,` property of the config object (either
passed as an argument or loaded from `),yke=n(N9,"CODE",{});var rpa=s(yke);TFt=r(rpa,"pretrained_model_name_or_path"),rpa.forEach(t),MFt=r(N9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xke=n(N9,"CODE",{});var tpa=s(xke);EFt=r(tpa,"pretrained_model_name_or_path"),tpa.forEach(t),CFt=r(N9,":"),N9.forEach(t),wFt=i(rd),$ke=n(rd,"UL",{});var apa=s($ke);sy=n(apa,"LI",{});var zKe=s(sy);kke=n(zKe,"STRONG",{});var npa=s(kke);AFt=r(npa,"vision-encoder-decoder"),npa.forEach(t),LFt=r(zKe," \u2014 "),Ale=n(zKe,"A",{href:!0});var spa=s(Ale);yFt=r(spa,"FlaxVisionEncoderDecoderModel"),spa.forEach(t),xFt=r(zKe," (Vision Encoder decoder model)"),zKe.forEach(t),apa.forEach(t),$Ft=i(rd),T(ly.$$.fragment,rd),rd.forEach(t),od.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Fba)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(es,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(rs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(ts,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(dd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(cd,"class","relative group"),c(xf,"id","transformers.AutoConfig"),c(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xf,"href","#transformers.AutoConfig"),c(md,"class","relative group"),c(UB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(HB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(aI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(lI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(iI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(vI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),c($I,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(SI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(RI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(PI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(BI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(II,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(NI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(qI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(jI,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(DI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(GI,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(OI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(VI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(XI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(QI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(WI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(UI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(KI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(oN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(aN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(nN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(dN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(cN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(LN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(xN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c($N,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(kN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(SN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(RN,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(BN,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(IN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(NN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(qN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(jN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(DN,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(GN,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(ON,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(VN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(XN,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(zN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(QN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(WN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(UN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(HN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(JN,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(YN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(KN,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ZN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(eq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(oq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(rq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(tq,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),c(aq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(nq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(sq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(lq,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(iq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(dq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(cq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(mq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(fq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(gq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(hq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(uq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"id","transformers.AutoTokenizer"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoTokenizer"),c(gd,"class","relative group"),c(pq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(_q,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(bq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(Fq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(Tq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Mq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Eq,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Cq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(wq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Aq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Lq,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(yq,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(xq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c($q,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(kq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(Nq,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Dq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Oq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Vq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(Xq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(zq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Qq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Wq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(Uq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(Hq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(Jq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Yq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Kq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Zq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ej,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(oj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(rj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(tj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(aj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(nj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(sj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(lj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ij,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(dj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(cj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(fj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(gj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(hj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(uj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(pj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Fj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(Tj,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(Mj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Cj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(wj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Aj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Lj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Rj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Bj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(Ij,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(Nj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(Dj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(Gj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Oj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Vj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(Xj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(zj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(Qj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Wj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Uj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Hj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(Jj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(Yj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Kj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Zj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rD,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(iD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(cD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(mD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(fD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(gD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(hD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(uD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(pD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_D,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(TD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(MD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ED,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(wD,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(AD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(LD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(yD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(xD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c($D,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(kD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(SD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(RD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(PD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(BD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(ID,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(ND,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(qD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(jD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(OD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(VD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(XD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(zD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(QD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(WD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(UD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(HD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(JD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(YD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(KD,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(ZD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(eG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(tG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(aG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sG,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(lG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(iG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(dG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(cG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(mG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(fG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(gG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(hG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(uG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(pG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(_G,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(bG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(vG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(FG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoFeatureExtractor"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoFeatureExtractor"),c(hd,"class","relative group"),c(TG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(MG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(EG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(CG,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),c(wG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(xG,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),c($G,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(kG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(SG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(RG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(PG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(BG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(IG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(NG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(jG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(DG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(GG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(OG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(VG,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(XG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(zG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(QG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(WG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(UG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(YG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(KG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ZG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(rO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(tO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(dO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoProcessor"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoProcessor"),c(ud,"class","relative group"),c(cO,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(mO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(fO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(gO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(hO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(uO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(pO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(_O,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(bO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(vO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(MO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(EO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(CO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(LO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(yO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($O,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zp,"id","transformers.AutoModel"),c(Zp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zp,"href","#transformers.AutoModel"),c(_d,"class","relative group"),c(SO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(IO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(NO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(qO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(jO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(DO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(GO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(OO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(VO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(XO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(zO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(QO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(WO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(UO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(HO,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),c(JO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(YO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(KO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(ZO,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(eV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(oV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(rV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(tV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(aV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(nV,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(sV,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(lV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(iV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(dV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(cV,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(mV,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fV,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(gV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(hV,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),c(uV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(pV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(_V,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(bV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(vV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(FV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(TV,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(MV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(EV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(CV,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(wV,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(AV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(LV,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(yV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(xV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c($V,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(PV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(BV,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(IV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(NV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(qV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(jV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(DV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(GV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(OV,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(VV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(XV,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(zV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(QV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(WV,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(UV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(HV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(JV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(YV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(KV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(ZV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(eX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(oX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(rX,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(tX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(aX,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(nX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(sX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(lX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(iX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(dX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(cX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(mX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(fX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(gX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(hX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(uX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(pX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(_X,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(bX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(vX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(FX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(TX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(MX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(EX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(CX,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(wX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(AX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(LX,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(yX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(xX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c($X,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(kX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(SX,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(RX,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(PX,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(BX,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(IX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(NX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(qX,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),c(jX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(DX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(GX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(OX,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(VX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(XX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(zX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(QX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(WX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(UX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(HX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(JX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForPreTraining"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForPreTraining"),c(Fd,"class","relative group"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(tz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(az,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(mz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(fz,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(gz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(hz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(uz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pz,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_z,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(bz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Fz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Mz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(Ez,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Cz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(wz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Az,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Lz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(yz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(xz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($z,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(kz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Sz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Rz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Pz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Bz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Iz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(qz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(jz,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(Dz,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Gz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Oz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Vz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Xz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Qz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Wz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u1,"id","transformers.AutoModelForCausalLM"),c(u1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u1,"href","#transformers.AutoModelForCausalLM"),c(Ed,"class","relative group"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Kz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(Zz,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(eQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(aQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fQ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(TQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(LQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c($Q,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SQ,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(PQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(BQ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(IQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(qQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lv,"id","transformers.AutoModelForMaskedLM"),c(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lv,"href","#transformers.AutoModelForMaskedLM"),c(Ad,"class","relative group"),c(jQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(XQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(eW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(rW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(tW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(aW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(nW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(sW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(lW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(dW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(cW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(fW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(gW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(hW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(uW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(pW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(_W,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(bW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(vW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(FW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(TW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(MW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(EW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(CW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(wW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForSeq2SeqLM"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForSeq2SeqLM"),c(xd,"class","relative group"),c(AW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($W,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(kW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(SW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(RW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(PW,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(BW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(IW,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(NW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(qW,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(jW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(DW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(GW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(OW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(VW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(XW,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(zW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(QW,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(WW,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UW,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForSequenceClassification"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForSequenceClassification"),c(Sd,"class","relative group"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(ZW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(CU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(wU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(AU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(LU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(yU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c($U,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(SU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(RU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(PU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(BU,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(IU,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(NU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(OU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(VU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(XU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(zU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForMultipleChoice"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForMultipleChoice"),c(Bd,"class","relative group"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(aH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c(mH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(fH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(gH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(hH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(uH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(pH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(_H,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(bH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(vH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(FH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(TH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(MH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(EH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(CH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(wH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(AH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(LH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(yH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(xH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c($H,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(kH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.AutoModelForNextSentencePrediction"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.AutoModelForNextSentencePrediction"),c(qd,"class","relative group"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(IH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(NH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(qH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(jH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(DH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(GH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForTokenClassification"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForTokenClassification"),c(Gd,"class","relative group"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_J,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(bJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(vJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(FJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(TJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(MJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(EJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(CJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(wJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(AJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(LJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(yJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.AutoModelForQuestionAnswering"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.AutoModelForQuestionAnswering"),c(Xd,"class","relative group"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(BJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IJ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(qJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(DJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(GJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(OJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(VJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(zJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c(QJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(WJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(UJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(HJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(JJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(YJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(KJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(ZJ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(eY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(oY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(rY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(tY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(aY,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(nY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(sY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(lY,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(iY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(dY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(cY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(mY,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(fY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(gY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(hY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(uY,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(pY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(_Y,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(bY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(vY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(FY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(TY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.AutoModelForTableQuestionAnswering"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Wd,"class","relative group"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Jd,"class","relative group"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c($Y,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(kY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.AutoModelForImageClassification"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.AutoModelForImageClassification"),c(ec,"class","relative group"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(IY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NY,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GY,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OY,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(VY,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(XY,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(zY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(QY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(WY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(UY,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(HY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(JY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(YY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(KY,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(ZY,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.AutoModelForVideoClassification"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.AutoModelForVideoClassification"),c(tc,"class","relative group"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForVision2Seq"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForVision2Seq"),c(sc,"class","relative group"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.AutoModelForVisualQuestionAnswering"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(dc,"class","relative group"),c(mK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.AutoModelForAudioClassification"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.AutoModelForAudioClassification"),c(fc,"class","relative group"),c(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.AutoModelForAudioFrameClassification"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.AutoModelForAudioFrameClassification"),c(uc,"class","relative group"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(kK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(SK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(RK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(PK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.AutoModelForCTC"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.AutoModelForCTC"),c(bc,"class","relative group"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(jK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(DK,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(GK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(OK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(VK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(XK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(zK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(QK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(WK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.AutoModelForSpeechSeq2Seq"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Tc,"class","relative group"),c(UK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(KK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.AutoModelForAudioXVector"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.AutoModelForAudioXVector"),c(Cc,"class","relative group"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(tZ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(aZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(nZ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(sZ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.AutoModelForMaskedImageModeling"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.AutoModelForMaskedImageModeling"),c(Lc,"class","relative group"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(mZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(fZ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(gZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.AutoModelForObjectDetection"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.AutoModelForObjectDetection"),c($c,"class","relative group"),c(hZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Z,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),c(bZ,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(vZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(FZ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.AutoModelForImageSegmentation"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.AutoModelForImageSegmentation"),c(Rc,"class","relative group"),c(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.AutoModelForSemanticSegmentation"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ic,"class","relative group"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(xZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c($Z,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(kZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(SZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.AutoModelForInstanceSegmentation"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.AutoModelForInstanceSegmentation"),c(jc,"class","relative group"),c(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IZ,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.TFAutoModel"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.TFAutoModel"),c(Oc,"class","relative group"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(GZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(OZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(VZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(XZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(zZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(QZ,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(WZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(UZ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(HZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(JZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(YZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(KZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(ZZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(eee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(oee,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(ree,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(tee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(aee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(nee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(see,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(lee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(iee,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel"),c(dee,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(cee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(mee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(fee,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(gee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(hee,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(uee,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(pee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(_ee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(bee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(vee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Fee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(Tee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Mee,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(Eee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Cee,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(wee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(Aee,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(Lee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(yee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(xee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c($ee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(kee,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(See,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Ree,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(Pee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Bee,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(Iee,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Nee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(qee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(jee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(Dee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Gee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.TFAutoModelForPreTraining"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.TFAutoModelForPreTraining"),c(zc,"class","relative group"),c(Oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Qee,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Wee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Uee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Hee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Jee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Yee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Kee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Zee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(eoe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(ooe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(roe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(toe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(aoe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(noe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(soe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(loe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(ioe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(doe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(coe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(moe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(foe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(goe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.TFAutoModelForCausalLM"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.TFAutoModelForCausalLM"),c(Uc,"class","relative group"),c(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_oe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(boe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(voe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Foe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Toe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Moe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Eoe,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(Coe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(woe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Aoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Loe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(xoe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($oe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.TFAutoModelForImageClassification"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.TFAutoModelForImageClassification"),c(Yc,"class","relative group"),c(koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(Ioe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(Noe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(qoe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(Doe,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(Goe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(Ooe,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(Voe,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.TFAutoModelForSemanticSegmentation"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(em,"class","relative group"),c(Xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Woe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(Uoe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(Hoe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.TFAutoModelForMaskedLM"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.TFAutoModelForMaskedLM"),c(am,"class","relative group"),c(Joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(ere,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(ore,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rre,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(tre,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(are,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(nre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(sre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(lre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ire,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(dre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(mre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(fre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(hre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(ure,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(pre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_re,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.TFAutoModelForSeq2SeqLM"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(lm,"class","relative group"),c(vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mre,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Ere,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Cre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wre,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Are,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Lre,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(yre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c($re,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(kre,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.TFAutoModelForSequenceClassification"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.TFAutoModelForSequenceClassification"),c(cm,"class","relative group"),c(Sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Ire,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Nre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(qre,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Dre,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Gre,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Ore,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Vre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Xre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(zre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Qre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Wre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(Ure,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Hre,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(Jre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Yre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Kre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Zre,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(ete,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(ote,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(rte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(tte,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(ate,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(nte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(ste,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(lte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.TFAutoModelForMultipleChoice"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.TFAutoModelForMultipleChoice"),c(gm,"class","relative group"),c(ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(fte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(gte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(hte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(ute,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(pte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(_te,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(bte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(vte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Fte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Tte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Mte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Ete,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Cte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(wte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Ate,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Lte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(dA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(pm,"class","relative group"),c(yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Ste,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hA,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(hA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(vm,"class","relative group"),c(Rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ite,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bA,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(bA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bA,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Mm,"class","relative group"),c(Nte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MA,"id","transformers.TFAutoModelForTokenClassification"),c(MA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MA,"href","#transformers.TFAutoModelForTokenClassification"),c(wm,"class","relative group"),c(Gte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(zte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Qte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Wte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(Ute,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Hte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Jte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Yte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Kte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Zte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(eae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(oae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(rae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(tae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(aae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(nae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(sae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(lae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(iae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(dae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(cae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QA,"id","transformers.TFAutoModelForQuestionAnswering"),c(QA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QA,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ym,"class","relative group"),c(mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(uae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(pae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(_ae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(bae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(vae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Fae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Tae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Mae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Eae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Cae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(wae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(Aae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Lae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(yae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(xae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c($ae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(kae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Sae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Rae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Pae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p6,"id","transformers.TFAutoModelForVision2Seq"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.TFAutoModelForVision2Seq"),c(km,"class","relative group"),c(Bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qae,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Pm,"class","relative group"),c(jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oae,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.FlaxAutoModel"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.FlaxAutoModel"),c(Nm,"class","relative group"),c(Vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Wae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(Uae,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(Hae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(Jae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Yae,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Kae,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Zae,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(ene,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(one,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(rne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(tne,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(ane,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(nne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(sne,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(lne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(ine,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(dne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(cne,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(mne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(fne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(gne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(hne,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(une,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(pne,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(_ne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(bne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.FlaxAutoModelForCausalLM"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.FlaxAutoModelForCausalLM"),c(Dm,"class","relative group"),c(vne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Ene,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Cne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(wne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Ane,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Lne,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(yne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(xne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c($ne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(kne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g7,"id","transformers.FlaxAutoModelForPreTraining"),c(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g7,"href","#transformers.FlaxAutoModelForPreTraining"),c(Vm,"class","relative group"),c(Sne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ine,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Nne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(qne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(jne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Dne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Gne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(One,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Vne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Xne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(zne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qne,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Wne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.FlaxAutoModelForMaskedLM"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Qm,"class","relative group"),c(Une,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Kne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Zne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ese,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ose,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(rse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(tse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ase,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(nse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(sse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Hm,"class","relative group"),c(lse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ise,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mse,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(fse,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(gse,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(hse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(use,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(pse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_se,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(bse,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(vse,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oL,"id","transformers.FlaxAutoModelForSequenceClassification"),c(oL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oL,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Km,"class","relative group"),c(Fse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ese,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Cse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(wse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Ase,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Lse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(yse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(xse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c($se,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(kse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Sse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hL,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(hL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(of,"class","relative group"),c(Rse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ise,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Nse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(qse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(jse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Dse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Gse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Ose,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Vse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Xse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(zse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LL,"id","transformers.FlaxAutoModelForTokenClassification"),c(LL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LL,"href","#transformers.FlaxAutoModelForTokenClassification"),c(af,"class","relative group"),c(Qse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Use,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Jse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Yse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Kse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Zse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ele,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(ole,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(rle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qL,"id","transformers.FlaxAutoModelForMultipleChoice"),c(qL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qL,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(lf,"class","relative group"),c(tle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ale,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(lle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(ile,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(dle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(cle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(fle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(gle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HL,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(HL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HL,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(mf,"class","relative group"),c(hle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ule,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ple,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_le,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZL,"id","transformers.FlaxAutoModelForImageClassification"),c(ZL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZL,"href","#transformers.FlaxAutoModelForImageClassification"),c(hf,"class","relative group"),c(ble,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tle,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Mle,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ay,"id","transformers.FlaxAutoModelForVision2Seq"),c(ay,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ay,"href","#transformers.FlaxAutoModelForVision2Seq"),c(_f,"class","relative group"),c(Ele,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ale,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,yo),e(yo,td),b(m,Ef,_),b(m,pt,_),e(pt,ad),e(pt,nd),e(nd,q9),e(pt,Cf),b(m,Ve,_),b(m,He,_),e(He,sd),e(He,es),e(es,j9),e(He,os),e(He,rs),e(rs,D9),e(He,ld),e(He,ts),e(ts,G9),e(He,id),b(m,wf,_),M(Qa,m,_),b(m,Je,_),b(m,Ae,_),e(Ae,OB),e(Ae,dd),e(dd,VB),e(Ae,XB),b(m,xo,_),b(m,Wa,_),e(Wa,zB),e(Wa,Af),e(Af,QB),e(Wa,Mto),b(m,QKe,_),b(m,cd,_),e(cd,Lf),e(Lf,$de),M(O9,$de,null),e(cd,Eto),e(cd,kde),e(kde,Cto),b(m,WKe,_),b(m,as,_),e(as,wto),e(as,Sde),e(Sde,Ato),e(as,Lto),e(as,Rde),e(Rde,yto),e(as,xto),b(m,UKe,_),M(V9,m,_),b(m,HKe,_),b(m,WB,_),e(WB,$to),b(m,JKe,_),M(yf,m,_),b(m,YKe,_),b(m,md,_),e(md,xf),e(xf,Pde),M(X9,Pde,null),e(md,kto),e(md,Bde),e(Bde,Sto),b(m,KKe,_),b(m,$o,_),M(z9,$o,null),e($o,Rto),e($o,Q9),e(Q9,Pto),e(Q9,UB),e(UB,Bto),e(Q9,Ito),e($o,Nto),e($o,W9),e(W9,qto),e(W9,Ide),e(Ide,jto),e(W9,Dto),e($o,Gto),e($o,Pr),M(U9,Pr,null),e(Pr,Oto),e(Pr,Nde),e(Nde,Vto),e(Pr,Xto),e(Pr,fd),e(fd,zto),e(fd,qde),e(qde,Qto),e(fd,Wto),e(fd,jde),e(jde,Uto),e(fd,Hto),e(Pr,Jto),e(Pr,A),e(A,$f),e($f,Dde),e(Dde,Yto),e($f,Kto),e($f,HB),e(HB,Zto),e($f,eao),e(A,oao),e(A,kf),e(kf,Gde),e(Gde,rao),e(kf,tao),e(kf,JB),e(JB,aao),e(kf,nao),e(A,sao),e(A,Sf),e(Sf,Ode),e(Ode,lao),e(Sf,iao),e(Sf,YB),e(YB,dao),e(Sf,cao),e(A,mao),e(A,Rf),e(Rf,Vde),e(Vde,fao),e(Rf,gao),e(Rf,KB),e(KB,hao),e(Rf,uao),e(A,pao),e(A,Pf),e(Pf,Xde),e(Xde,_ao),e(Pf,bao),e(Pf,ZB),e(ZB,vao),e(Pf,Fao),e(A,Tao),e(A,Bf),e(Bf,zde),e(zde,Mao),e(Bf,Eao),e(Bf,eI),e(eI,Cao),e(Bf,wao),e(A,Aao),e(A,If),e(If,Qde),e(Qde,Lao),e(If,yao),e(If,oI),e(oI,xao),e(If,$ao),e(A,kao),e(A,Nf),e(Nf,Wde),e(Wde,Sao),e(Nf,Rao),e(Nf,rI),e(rI,Pao),e(Nf,Bao),e(A,Iao),e(A,qf),e(qf,Ude),e(Ude,Nao),e(qf,qao),e(qf,tI),e(tI,jao),e(qf,Dao),e(A,Gao),e(A,jf),e(jf,Hde),e(Hde,Oao),e(jf,Vao),e(jf,aI),e(aI,Xao),e(jf,zao),e(A,Qao),e(A,Df),e(Df,Jde),e(Jde,Wao),e(Df,Uao),e(Df,nI),e(nI,Hao),e(Df,Jao),e(A,Yao),e(A,Gf),e(Gf,Yde),e(Yde,Kao),e(Gf,Zao),e(Gf,sI),e(sI,eno),e(Gf,ono),e(A,rno),e(A,Of),e(Of,Kde),e(Kde,tno),e(Of,ano),e(Of,lI),e(lI,nno),e(Of,sno),e(A,lno),e(A,Vf),e(Vf,Zde),e(Zde,ino),e(Vf,dno),e(Vf,iI),e(iI,cno),e(Vf,mno),e(A,fno),e(A,Xf),e(Xf,ece),e(ece,gno),e(Xf,hno),e(Xf,dI),e(dI,uno),e(Xf,pno),e(A,_no),e(A,zf),e(zf,oce),e(oce,bno),e(zf,vno),e(zf,cI),e(cI,Fno),e(zf,Tno),e(A,Mno),e(A,Qf),e(Qf,rce),e(rce,Eno),e(Qf,Cno),e(Qf,mI),e(mI,wno),e(Qf,Ano),e(A,Lno),e(A,Wf),e(Wf,tce),e(tce,yno),e(Wf,xno),e(Wf,fI),e(fI,$no),e(Wf,kno),e(A,Sno),e(A,Uf),e(Uf,ace),e(ace,Rno),e(Uf,Pno),e(Uf,gI),e(gI,Bno),e(Uf,Ino),e(A,Nno),e(A,Hf),e(Hf,nce),e(nce,qno),e(Hf,jno),e(Hf,hI),e(hI,Dno),e(Hf,Gno),e(A,Ono),e(A,Jf),e(Jf,sce),e(sce,Vno),e(Jf,Xno),e(Jf,uI),e(uI,zno),e(Jf,Qno),e(A,Wno),e(A,Yf),e(Yf,lce),e(lce,Uno),e(Yf,Hno),e(Yf,pI),e(pI,Jno),e(Yf,Yno),e(A,Kno),e(A,Kf),e(Kf,ice),e(ice,Zno),e(Kf,eso),e(Kf,_I),e(_I,oso),e(Kf,rso),e(A,tso),e(A,Zf),e(Zf,dce),e(dce,aso),e(Zf,nso),e(Zf,bI),e(bI,sso),e(Zf,lso),e(A,iso),e(A,eg),e(eg,cce),e(cce,dso),e(eg,cso),e(eg,vI),e(vI,mso),e(eg,fso),e(A,gso),e(A,og),e(og,mce),e(mce,hso),e(og,uso),e(og,FI),e(FI,pso),e(og,_so),e(A,bso),e(A,rg),e(rg,fce),e(fce,vso),e(rg,Fso),e(rg,TI),e(TI,Tso),e(rg,Mso),e(A,Eso),e(A,tg),e(tg,gce),e(gce,Cso),e(tg,wso),e(tg,MI),e(MI,Aso),e(tg,Lso),e(A,yso),e(A,ag),e(ag,hce),e(hce,xso),e(ag,$so),e(ag,EI),e(EI,kso),e(ag,Sso),e(A,Rso),e(A,ng),e(ng,uce),e(uce,Pso),e(ng,Bso),e(ng,CI),e(CI,Iso),e(ng,Nso),e(A,qso),e(A,sg),e(sg,pce),e(pce,jso),e(sg,Dso),e(sg,wI),e(wI,Gso),e(sg,Oso),e(A,Vso),e(A,lg),e(lg,_ce),e(_ce,Xso),e(lg,zso),e(lg,AI),e(AI,Qso),e(lg,Wso),e(A,Uso),e(A,ig),e(ig,bce),e(bce,Hso),e(ig,Jso),e(ig,LI),e(LI,Yso),e(ig,Kso),e(A,Zso),e(A,dg),e(dg,vce),e(vce,elo),e(dg,olo),e(dg,yI),e(yI,rlo),e(dg,tlo),e(A,alo),e(A,cg),e(cg,Fce),e(Fce,nlo),e(cg,slo),e(cg,xI),e(xI,llo),e(cg,ilo),e(A,dlo),e(A,mg),e(mg,Tce),e(Tce,clo),e(mg,mlo),e(mg,$I),e($I,flo),e(mg,glo),e(A,hlo),e(A,fg),e(fg,Mce),e(Mce,ulo),e(fg,plo),e(fg,kI),e(kI,_lo),e(fg,blo),e(A,vlo),e(A,gg),e(gg,Ece),e(Ece,Flo),e(gg,Tlo),e(gg,SI),e(SI,Mlo),e(gg,Elo),e(A,Clo),e(A,hg),e(hg,Cce),e(Cce,wlo),e(hg,Alo),e(hg,RI),e(RI,Llo),e(hg,ylo),e(A,xlo),e(A,ug),e(ug,wce),e(wce,$lo),e(ug,klo),e(ug,PI),e(PI,Slo),e(ug,Rlo),e(A,Plo),e(A,pg),e(pg,Ace),e(Ace,Blo),e(pg,Ilo),e(pg,BI),e(BI,Nlo),e(pg,qlo),e(A,jlo),e(A,_g),e(_g,Lce),e(Lce,Dlo),e(_g,Glo),e(_g,II),e(II,Olo),e(_g,Vlo),e(A,Xlo),e(A,bg),e(bg,yce),e(yce,zlo),e(bg,Qlo),e(bg,NI),e(NI,Wlo),e(bg,Ulo),e(A,Hlo),e(A,vg),e(vg,xce),e(xce,Jlo),e(vg,Ylo),e(vg,qI),e(qI,Klo),e(vg,Zlo),e(A,eio),e(A,Fg),e(Fg,$ce),e($ce,oio),e(Fg,rio),e(Fg,jI),e(jI,tio),e(Fg,aio),e(A,nio),e(A,Tg),e(Tg,kce),e(kce,sio),e(Tg,lio),e(Tg,DI),e(DI,iio),e(Tg,dio),e(A,cio),e(A,Mg),e(Mg,Sce),e(Sce,mio),e(Mg,fio),e(Mg,GI),e(GI,gio),e(Mg,hio),e(A,uio),e(A,Eg),e(Eg,Rce),e(Rce,pio),e(Eg,_io),e(Eg,OI),e(OI,bio),e(Eg,vio),e(A,Fio),e(A,Cg),e(Cg,Pce),e(Pce,Tio),e(Cg,Mio),e(Cg,VI),e(VI,Eio),e(Cg,Cio),e(A,wio),e(A,wg),e(wg,Bce),e(Bce,Aio),e(wg,Lio),e(wg,XI),e(XI,yio),e(wg,xio),e(A,$io),e(A,Ag),e(Ag,Ice),e(Ice,kio),e(Ag,Sio),e(Ag,zI),e(zI,Rio),e(Ag,Pio),e(A,Bio),e(A,Lg),e(Lg,Nce),e(Nce,Iio),e(Lg,Nio),e(Lg,QI),e(QI,qio),e(Lg,jio),e(A,Dio),e(A,yg),e(yg,qce),e(qce,Gio),e(yg,Oio),e(yg,WI),e(WI,Vio),e(yg,Xio),e(A,zio),e(A,xg),e(xg,jce),e(jce,Qio),e(xg,Wio),e(xg,UI),e(UI,Uio),e(xg,Hio),e(A,Jio),e(A,$g),e($g,Dce),e(Dce,Yio),e($g,Kio),e($g,HI),e(HI,Zio),e($g,edo),e(A,odo),e(A,kg),e(kg,Gce),e(Gce,rdo),e(kg,tdo),e(kg,JI),e(JI,ado),e(kg,ndo),e(A,sdo),e(A,Sg),e(Sg,Oce),e(Oce,ldo),e(Sg,ido),e(Sg,YI),e(YI,ddo),e(Sg,cdo),e(A,mdo),e(A,Rg),e(Rg,Vce),e(Vce,fdo),e(Rg,gdo),e(Rg,KI),e(KI,hdo),e(Rg,udo),e(A,pdo),e(A,Pg),e(Pg,Xce),e(Xce,_do),e(Pg,bdo),e(Pg,ZI),e(ZI,vdo),e(Pg,Fdo),e(A,Tdo),e(A,Bg),e(Bg,zce),e(zce,Mdo),e(Bg,Edo),e(Bg,eN),e(eN,Cdo),e(Bg,wdo),e(A,Ado),e(A,Ig),e(Ig,Qce),e(Qce,Ldo),e(Ig,ydo),e(Ig,oN),e(oN,xdo),e(Ig,$do),e(A,kdo),e(A,Ng),e(Ng,Wce),e(Wce,Sdo),e(Ng,Rdo),e(Ng,rN),e(rN,Pdo),e(Ng,Bdo),e(A,Ido),e(A,qg),e(qg,Uce),e(Uce,Ndo),e(qg,qdo),e(qg,tN),e(tN,jdo),e(qg,Ddo),e(A,Gdo),e(A,jg),e(jg,Hce),e(Hce,Odo),e(jg,Vdo),e(jg,aN),e(aN,Xdo),e(jg,zdo),e(A,Qdo),e(A,Dg),e(Dg,Jce),e(Jce,Wdo),e(Dg,Udo),e(Dg,nN),e(nN,Hdo),e(Dg,Jdo),e(A,Ydo),e(A,Gg),e(Gg,Yce),e(Yce,Kdo),e(Gg,Zdo),e(Gg,sN),e(sN,eco),e(Gg,oco),e(A,rco),e(A,Og),e(Og,Kce),e(Kce,tco),e(Og,aco),e(Og,lN),e(lN,nco),e(Og,sco),e(A,lco),e(A,Vg),e(Vg,Zce),e(Zce,ico),e(Vg,dco),e(Vg,iN),e(iN,cco),e(Vg,mco),e(A,fco),e(A,Xg),e(Xg,eme),e(eme,gco),e(Xg,hco),e(Xg,dN),e(dN,uco),e(Xg,pco),e(A,_co),e(A,zg),e(zg,ome),e(ome,bco),e(zg,vco),e(zg,cN),e(cN,Fco),e(zg,Tco),e(A,Mco),e(A,Qg),e(Qg,rme),e(rme,Eco),e(Qg,Cco),e(Qg,mN),e(mN,wco),e(Qg,Aco),e(A,Lco),e(A,Wg),e(Wg,tme),e(tme,yco),e(Wg,xco),e(Wg,fN),e(fN,$co),e(Wg,kco),e(A,Sco),e(A,Ug),e(Ug,ame),e(ame,Rco),e(Ug,Pco),e(Ug,gN),e(gN,Bco),e(Ug,Ico),e(A,Nco),e(A,Hg),e(Hg,nme),e(nme,qco),e(Hg,jco),e(Hg,hN),e(hN,Dco),e(Hg,Gco),e(A,Oco),e(A,Jg),e(Jg,sme),e(sme,Vco),e(Jg,Xco),e(Jg,uN),e(uN,zco),e(Jg,Qco),e(A,Wco),e(A,Yg),e(Yg,lme),e(lme,Uco),e(Yg,Hco),e(Yg,pN),e(pN,Jco),e(Yg,Yco),e(A,Kco),e(A,Kg),e(Kg,ime),e(ime,Zco),e(Kg,emo),e(Kg,_N),e(_N,omo),e(Kg,rmo),e(A,tmo),e(A,Zg),e(Zg,dme),e(dme,amo),e(Zg,nmo),e(Zg,bN),e(bN,smo),e(Zg,lmo),e(A,imo),e(A,eh),e(eh,cme),e(cme,dmo),e(eh,cmo),e(eh,vN),e(vN,mmo),e(eh,fmo),e(A,gmo),e(A,oh),e(oh,mme),e(mme,hmo),e(oh,umo),e(oh,FN),e(FN,pmo),e(oh,_mo),e(A,bmo),e(A,rh),e(rh,fme),e(fme,vmo),e(rh,Fmo),e(rh,TN),e(TN,Tmo),e(rh,Mmo),e(A,Emo),e(A,th),e(th,gme),e(gme,Cmo),e(th,wmo),e(th,MN),e(MN,Amo),e(th,Lmo),e(A,ymo),e(A,ah),e(ah,hme),e(hme,xmo),e(ah,$mo),e(ah,EN),e(EN,kmo),e(ah,Smo),e(A,Rmo),e(A,nh),e(nh,ume),e(ume,Pmo),e(nh,Bmo),e(nh,CN),e(CN,Imo),e(nh,Nmo),e(A,qmo),e(A,sh),e(sh,pme),e(pme,jmo),e(sh,Dmo),e(sh,wN),e(wN,Gmo),e(sh,Omo),e(A,Vmo),e(A,lh),e(lh,_me),e(_me,Xmo),e(lh,zmo),e(lh,AN),e(AN,Qmo),e(lh,Wmo),e(A,Umo),e(A,ih),e(ih,bme),e(bme,Hmo),e(ih,Jmo),e(ih,LN),e(LN,Ymo),e(ih,Kmo),e(A,Zmo),e(A,dh),e(dh,vme),e(vme,efo),e(dh,ofo),e(dh,yN),e(yN,rfo),e(dh,tfo),e(A,afo),e(A,ch),e(ch,Fme),e(Fme,nfo),e(ch,sfo),e(ch,xN),e(xN,lfo),e(ch,ifo),e(A,dfo),e(A,mh),e(mh,Tme),e(Tme,cfo),e(mh,mfo),e(mh,$N),e($N,ffo),e(mh,gfo),e(A,hfo),e(A,fh),e(fh,Mme),e(Mme,ufo),e(fh,pfo),e(fh,kN),e(kN,_fo),e(fh,bfo),e(A,vfo),e(A,gh),e(gh,Eme),e(Eme,Ffo),e(gh,Tfo),e(gh,SN),e(SN,Mfo),e(gh,Efo),e(A,Cfo),e(A,hh),e(hh,Cme),e(Cme,wfo),e(hh,Afo),e(hh,RN),e(RN,Lfo),e(hh,yfo),e(A,xfo),e(A,uh),e(uh,wme),e(wme,$fo),e(uh,kfo),e(uh,PN),e(PN,Sfo),e(uh,Rfo),e(A,Pfo),e(A,ph),e(ph,Ame),e(Ame,Bfo),e(ph,Ifo),e(ph,BN),e(BN,Nfo),e(ph,qfo),e(A,jfo),e(A,_h),e(_h,Lme),e(Lme,Dfo),e(_h,Gfo),e(_h,IN),e(IN,Ofo),e(_h,Vfo),e(A,Xfo),e(A,bh),e(bh,yme),e(yme,zfo),e(bh,Qfo),e(bh,NN),e(NN,Wfo),e(bh,Ufo),e(A,Hfo),e(A,vh),e(vh,xme),e(xme,Jfo),e(vh,Yfo),e(vh,qN),e(qN,Kfo),e(vh,Zfo),e(A,ego),e(A,Fh),e(Fh,$me),e($me,ogo),e(Fh,rgo),e(Fh,jN),e(jN,tgo),e(Fh,ago),e(A,ngo),e(A,Th),e(Th,kme),e(kme,sgo),e(Th,lgo),e(Th,DN),e(DN,igo),e(Th,dgo),e(A,cgo),e(A,Mh),e(Mh,Sme),e(Sme,mgo),e(Mh,fgo),e(Mh,GN),e(GN,ggo),e(Mh,hgo),e(A,ugo),e(A,Eh),e(Eh,Rme),e(Rme,pgo),e(Eh,_go),e(Eh,ON),e(ON,bgo),e(Eh,vgo),e(A,Fgo),e(A,Ch),e(Ch,Pme),e(Pme,Tgo),e(Ch,Mgo),e(Ch,VN),e(VN,Ego),e(Ch,Cgo),e(A,wgo),e(A,wh),e(wh,Bme),e(Bme,Ago),e(wh,Lgo),e(wh,XN),e(XN,ygo),e(wh,xgo),e(A,$go),e(A,Ah),e(Ah,Ime),e(Ime,kgo),e(Ah,Sgo),e(Ah,zN),e(zN,Rgo),e(Ah,Pgo),e(A,Bgo),e(A,Lh),e(Lh,Nme),e(Nme,Igo),e(Lh,Ngo),e(Lh,QN),e(QN,qgo),e(Lh,jgo),e(A,Dgo),e(A,yh),e(yh,qme),e(qme,Ggo),e(yh,Ogo),e(yh,WN),e(WN,Vgo),e(yh,Xgo),e(A,zgo),e(A,xh),e(xh,jme),e(jme,Qgo),e(xh,Wgo),e(xh,UN),e(UN,Ugo),e(xh,Hgo),e(A,Jgo),e(A,$h),e($h,Dme),e(Dme,Ygo),e($h,Kgo),e($h,HN),e(HN,Zgo),e($h,eho),e(A,oho),e(A,kh),e(kh,Gme),e(Gme,rho),e(kh,tho),e(kh,JN),e(JN,aho),e(kh,nho),e(A,sho),e(A,Sh),e(Sh,Ome),e(Ome,lho),e(Sh,iho),e(Sh,YN),e(YN,dho),e(Sh,cho),e(A,mho),e(A,Rh),e(Rh,Vme),e(Vme,fho),e(Rh,gho),e(Rh,KN),e(KN,hho),e(Rh,uho),e(A,pho),e(A,Ph),e(Ph,Xme),e(Xme,_ho),e(Ph,bho),e(Ph,ZN),e(ZN,vho),e(Ph,Fho),e(A,Tho),e(A,Bh),e(Bh,zme),e(zme,Mho),e(Bh,Eho),e(Bh,eq),e(eq,Cho),e(Bh,who),e(A,Aho),e(A,Ih),e(Ih,Qme),e(Qme,Lho),e(Ih,yho),e(Ih,oq),e(oq,xho),e(Ih,$ho),e(A,kho),e(A,Nh),e(Nh,Wme),e(Wme,Sho),e(Nh,Rho),e(Nh,rq),e(rq,Pho),e(Nh,Bho),e(A,Iho),e(A,qh),e(qh,Ume),e(Ume,Nho),e(qh,qho),e(qh,tq),e(tq,jho),e(qh,Dho),e(A,Gho),e(A,jh),e(jh,Hme),e(Hme,Oho),e(jh,Vho),e(jh,aq),e(aq,Xho),e(jh,zho),e(A,Qho),e(A,Dh),e(Dh,Jme),e(Jme,Who),e(Dh,Uho),e(Dh,nq),e(nq,Hho),e(Dh,Jho),e(A,Yho),e(A,Gh),e(Gh,Yme),e(Yme,Kho),e(Gh,Zho),e(Gh,sq),e(sq,euo),e(Gh,ouo),e(A,ruo),e(A,Oh),e(Oh,Kme),e(Kme,tuo),e(Oh,auo),e(Oh,lq),e(lq,nuo),e(Oh,suo),e(A,luo),e(A,Vh),e(Vh,Zme),e(Zme,iuo),e(Vh,duo),e(Vh,iq),e(iq,cuo),e(Vh,muo),e(A,fuo),e(A,Xh),e(Xh,efe),e(efe,guo),e(Xh,huo),e(Xh,dq),e(dq,uuo),e(Xh,puo),e(A,_uo),e(A,zh),e(zh,ofe),e(ofe,buo),e(zh,vuo),e(zh,cq),e(cq,Fuo),e(zh,Tuo),e(A,Muo),e(A,Qh),e(Qh,rfe),e(rfe,Euo),e(Qh,Cuo),e(Qh,mq),e(mq,wuo),e(Qh,Auo),e(A,Luo),e(A,Wh),e(Wh,tfe),e(tfe,yuo),e(Wh,xuo),e(Wh,fq),e(fq,$uo),e(Wh,kuo),e(A,Suo),e(A,Uh),e(Uh,afe),e(afe,Ruo),e(Uh,Puo),e(Uh,gq),e(gq,Buo),e(Uh,Iuo),e(A,Nuo),e(A,Hh),e(Hh,nfe),e(nfe,quo),e(Hh,juo),e(Hh,hq),e(hq,Duo),e(Hh,Guo),e(A,Ouo),e(A,Jh),e(Jh,sfe),e(sfe,Vuo),e(Jh,Xuo),e(Jh,uq),e(uq,zuo),e(Jh,Quo),e(Pr,Wuo),M(Yh,Pr,null),e($o,Uuo),e($o,Kh),M(H9,Kh,null),e(Kh,Huo),e(Kh,lfe),e(lfe,Juo),b(m,ZKe,_),b(m,gd,_),e(gd,Zh),e(Zh,ife),M(J9,ife,null),e(gd,Yuo),e(gd,dfe),e(dfe,Kuo),b(m,eZe,_),b(m,ko,_),M(Y9,ko,null),e(ko,Zuo),e(ko,K9),e(K9,epo),e(K9,pq),e(pq,opo),e(K9,rpo),e(ko,tpo),e(ko,Z9),e(Z9,apo),e(Z9,cfe),e(cfe,npo),e(Z9,spo),e(ko,lpo),e(ko,Br),M(ex,Br,null),e(Br,ipo),e(Br,mfe),e(mfe,dpo),e(Br,cpo),e(Br,Ua),e(Ua,mpo),e(Ua,ffe),e(ffe,fpo),e(Ua,gpo),e(Ua,gfe),e(gfe,hpo),e(Ua,upo),e(Ua,hfe),e(hfe,ppo),e(Ua,_po),e(Br,bpo),e(Br,k),e(k,ns),e(ns,ufe),e(ufe,vpo),e(ns,Fpo),e(ns,_q),e(_q,Tpo),e(ns,Mpo),e(ns,bq),e(bq,Epo),e(ns,Cpo),e(k,wpo),e(k,ss),e(ss,pfe),e(pfe,Apo),e(ss,Lpo),e(ss,vq),e(vq,ypo),e(ss,xpo),e(ss,Fq),e(Fq,$po),e(ss,kpo),e(k,Spo),e(k,ls),e(ls,_fe),e(_fe,Rpo),e(ls,Ppo),e(ls,Tq),e(Tq,Bpo),e(ls,Ipo),e(ls,Mq),e(Mq,Npo),e(ls,qpo),e(k,jpo),e(k,eu),e(eu,bfe),e(bfe,Dpo),e(eu,Gpo),e(eu,Eq),e(Eq,Opo),e(eu,Vpo),e(k,Xpo),e(k,is),e(is,vfe),e(vfe,zpo),e(is,Qpo),e(is,Cq),e(Cq,Wpo),e(is,Upo),e(is,wq),e(wq,Hpo),e(is,Jpo),e(k,Ypo),e(k,ou),e(ou,Ffe),e(Ffe,Kpo),e(ou,Zpo),e(ou,Aq),e(Aq,e_o),e(ou,o_o),e(k,r_o),e(k,ru),e(ru,Tfe),e(Tfe,t_o),e(ru,a_o),e(ru,Lq),e(Lq,n_o),e(ru,s_o),e(k,l_o),e(k,tu),e(tu,Mfe),e(Mfe,i_o),e(tu,d_o),e(tu,yq),e(yq,c_o),e(tu,m_o),e(k,f_o),e(k,ds),e(ds,Efe),e(Efe,g_o),e(ds,h_o),e(ds,xq),e(xq,u_o),e(ds,p_o),e(ds,$q),e($q,__o),e(ds,b_o),e(k,v_o),e(k,cs),e(cs,Cfe),e(Cfe,F_o),e(cs,T_o),e(cs,kq),e(kq,M_o),e(cs,E_o),e(cs,Sq),e(Sq,C_o),e(cs,w_o),e(k,A_o),e(k,ms),e(ms,wfe),e(wfe,L_o),e(ms,y_o),e(ms,Rq),e(Rq,x_o),e(ms,$_o),e(ms,Pq),e(Pq,k_o),e(ms,S_o),e(k,R_o),e(k,au),e(au,Afe),e(Afe,P_o),e(au,B_o),e(au,Bq),e(Bq,I_o),e(au,N_o),e(k,q_o),e(k,nu),e(nu,Lfe),e(Lfe,j_o),e(nu,D_o),e(nu,Iq),e(Iq,G_o),e(nu,O_o),e(k,V_o),e(k,su),e(su,yfe),e(yfe,X_o),e(su,z_o),e(su,Nq),e(Nq,Q_o),e(su,W_o),e(k,U_o),e(k,fs),e(fs,xfe),e(xfe,H_o),e(fs,J_o),e(fs,qq),e(qq,Y_o),e(fs,K_o),e(fs,jq),e(jq,Z_o),e(fs,ebo),e(k,obo),e(k,lu),e(lu,$fe),e($fe,rbo),e(lu,tbo),e(lu,Dq),e(Dq,abo),e(lu,nbo),e(k,sbo),e(k,gs),e(gs,kfe),e(kfe,lbo),e(gs,ibo),e(gs,Gq),e(Gq,dbo),e(gs,cbo),e(gs,Oq),e(Oq,mbo),e(gs,fbo),e(k,gbo),e(k,hs),e(hs,Sfe),e(Sfe,hbo),e(hs,ubo),e(hs,Vq),e(Vq,pbo),e(hs,_bo),e(hs,Xq),e(Xq,bbo),e(hs,vbo),e(k,Fbo),e(k,us),e(us,Rfe),e(Rfe,Tbo),e(us,Mbo),e(us,zq),e(zq,Ebo),e(us,Cbo),e(us,Qq),e(Qq,wbo),e(us,Abo),e(k,Lbo),e(k,ps),e(ps,Pfe),e(Pfe,ybo),e(ps,xbo),e(ps,Wq),e(Wq,$bo),e(ps,kbo),e(ps,Uq),e(Uq,Sbo),e(ps,Rbo),e(k,Pbo),e(k,iu),e(iu,Bfe),e(Bfe,Bbo),e(iu,Ibo),e(iu,Hq),e(Hq,Nbo),e(iu,qbo),e(k,jbo),e(k,_s),e(_s,Ife),e(Ife,Dbo),e(_s,Gbo),e(_s,Jq),e(Jq,Obo),e(_s,Vbo),e(_s,Yq),e(Yq,Xbo),e(_s,zbo),e(k,Qbo),e(k,bs),e(bs,Nfe),e(Nfe,Wbo),e(bs,Ubo),e(bs,Kq),e(Kq,Hbo),e(bs,Jbo),e(bs,Zq),e(Zq,Ybo),e(bs,Kbo),e(k,Zbo),e(k,vs),e(vs,qfe),e(qfe,e2o),e(vs,o2o),e(vs,ej),e(ej,r2o),e(vs,t2o),e(vs,oj),e(oj,a2o),e(vs,n2o),e(k,s2o),e(k,Fs),e(Fs,jfe),e(jfe,l2o),e(Fs,i2o),e(Fs,rj),e(rj,d2o),e(Fs,c2o),e(Fs,tj),e(tj,m2o),e(Fs,f2o),e(k,g2o),e(k,Ts),e(Ts,Dfe),e(Dfe,h2o),e(Ts,u2o),e(Ts,aj),e(aj,p2o),e(Ts,_2o),e(Ts,nj),e(nj,b2o),e(Ts,v2o),e(k,F2o),e(k,Ms),e(Ms,Gfe),e(Gfe,T2o),e(Ms,M2o),e(Ms,sj),e(sj,E2o),e(Ms,C2o),e(Ms,lj),e(lj,w2o),e(Ms,A2o),e(k,L2o),e(k,Es),e(Es,Ofe),e(Ofe,y2o),e(Es,x2o),e(Es,ij),e(ij,$2o),e(Es,k2o),e(Es,dj),e(dj,S2o),e(Es,R2o),e(k,P2o),e(k,du),e(du,Vfe),e(Vfe,B2o),e(du,I2o),e(du,cj),e(cj,N2o),e(du,q2o),e(k,j2o),e(k,Cs),e(Cs,Xfe),e(Xfe,D2o),e(Cs,G2o),e(Cs,mj),e(mj,O2o),e(Cs,V2o),e(Cs,fj),e(fj,X2o),e(Cs,z2o),e(k,Q2o),e(k,cu),e(cu,zfe),e(zfe,W2o),e(cu,U2o),e(cu,gj),e(gj,H2o),e(cu,J2o),e(k,Y2o),e(k,ws),e(ws,Qfe),e(Qfe,K2o),e(ws,Z2o),e(ws,hj),e(hj,e1o),e(ws,o1o),e(ws,uj),e(uj,r1o),e(ws,t1o),e(k,a1o),e(k,As),e(As,Wfe),e(Wfe,n1o),e(As,s1o),e(As,pj),e(pj,l1o),e(As,i1o),e(As,_j),e(_j,d1o),e(As,c1o),e(k,m1o),e(k,Ls),e(Ls,Ufe),e(Ufe,f1o),e(Ls,g1o),e(Ls,bj),e(bj,h1o),e(Ls,u1o),e(Ls,vj),e(vj,p1o),e(Ls,_1o),e(k,b1o),e(k,mu),e(mu,Hfe),e(Hfe,v1o),e(mu,F1o),e(mu,Fj),e(Fj,T1o),e(mu,M1o),e(k,E1o),e(k,fu),e(fu,Jfe),e(Jfe,C1o),e(fu,w1o),e(fu,Tj),e(Tj,A1o),e(fu,L1o),e(k,y1o),e(k,ys),e(ys,Yfe),e(Yfe,x1o),e(ys,$1o),e(ys,Mj),e(Mj,k1o),e(ys,S1o),e(ys,Ej),e(Ej,R1o),e(ys,P1o),e(k,B1o),e(k,xs),e(xs,Kfe),e(Kfe,I1o),e(xs,N1o),e(xs,Cj),e(Cj,q1o),e(xs,j1o),e(xs,wj),e(wj,D1o),e(xs,G1o),e(k,O1o),e(k,$s),e($s,Zfe),e(Zfe,V1o),e($s,X1o),e($s,Aj),e(Aj,z1o),e($s,Q1o),e($s,Lj),e(Lj,W1o),e($s,U1o),e(k,H1o),e(k,gu),e(gu,ege),e(ege,J1o),e(gu,Y1o),e(gu,yj),e(yj,K1o),e(gu,Z1o),e(k,evo),e(k,ks),e(ks,oge),e(oge,ovo),e(ks,rvo),e(ks,xj),e(xj,tvo),e(ks,avo),e(ks,$j),e($j,nvo),e(ks,svo),e(k,lvo),e(k,Ss),e(Ss,rge),e(rge,ivo),e(Ss,dvo),e(Ss,kj),e(kj,cvo),e(Ss,mvo),e(Ss,Sj),e(Sj,fvo),e(Ss,gvo),e(k,hvo),e(k,Rs),e(Rs,tge),e(tge,uvo),e(Rs,pvo),e(Rs,Rj),e(Rj,_vo),e(Rs,bvo),e(Rs,Pj),e(Pj,vvo),e(Rs,Fvo),e(k,Tvo),e(k,Ps),e(Ps,age),e(age,Mvo),e(Ps,Evo),e(Ps,Bj),e(Bj,Cvo),e(Ps,wvo),e(Ps,Ij),e(Ij,Avo),e(Ps,Lvo),e(k,yvo),e(k,Bs),e(Bs,nge),e(nge,xvo),e(Bs,$vo),e(Bs,Nj),e(Nj,kvo),e(Bs,Svo),e(Bs,qj),e(qj,Rvo),e(Bs,Pvo),e(k,Bvo),e(k,Is),e(Is,sge),e(sge,Ivo),e(Is,Nvo),e(Is,jj),e(jj,qvo),e(Is,jvo),e(Is,Dj),e(Dj,Dvo),e(Is,Gvo),e(k,Ovo),e(k,Ns),e(Ns,lge),e(lge,Vvo),e(Ns,Xvo),e(Ns,Gj),e(Gj,zvo),e(Ns,Qvo),e(Ns,Oj),e(Oj,Wvo),e(Ns,Uvo),e(k,Hvo),e(k,qs),e(qs,ige),e(ige,Jvo),e(qs,Yvo),e(qs,Vj),e(Vj,Kvo),e(qs,Zvo),e(qs,Xj),e(Xj,eFo),e(qs,oFo),e(k,rFo),e(k,hu),e(hu,dge),e(dge,tFo),e(hu,aFo),e(hu,zj),e(zj,nFo),e(hu,sFo),e(k,lFo),e(k,js),e(js,cge),e(cge,iFo),e(js,dFo),e(js,Qj),e(Qj,cFo),e(js,mFo),e(js,Wj),e(Wj,fFo),e(js,gFo),e(k,hFo),e(k,uu),e(uu,mge),e(mge,uFo),e(uu,pFo),e(uu,Uj),e(Uj,_Fo),e(uu,bFo),e(k,vFo),e(k,pu),e(pu,fge),e(fge,FFo),e(pu,TFo),e(pu,Hj),e(Hj,MFo),e(pu,EFo),e(k,CFo),e(k,Ds),e(Ds,gge),e(gge,wFo),e(Ds,AFo),e(Ds,Jj),e(Jj,LFo),e(Ds,yFo),e(Ds,Yj),e(Yj,xFo),e(Ds,$Fo),e(k,kFo),e(k,Gs),e(Gs,hge),e(hge,SFo),e(Gs,RFo),e(Gs,Kj),e(Kj,PFo),e(Gs,BFo),e(Gs,Zj),e(Zj,IFo),e(Gs,NFo),e(k,qFo),e(k,Os),e(Os,uge),e(uge,jFo),e(Os,DFo),e(Os,eD),e(eD,GFo),e(Os,OFo),e(Os,oD),e(oD,VFo),e(Os,XFo),e(k,zFo),e(k,_u),e(_u,pge),e(pge,QFo),e(_u,WFo),e(_u,rD),e(rD,UFo),e(_u,HFo),e(k,JFo),e(k,Vs),e(Vs,_ge),e(_ge,YFo),e(Vs,KFo),e(Vs,tD),e(tD,ZFo),e(Vs,eTo),e(Vs,aD),e(aD,oTo),e(Vs,rTo),e(k,tTo),e(k,Xs),e(Xs,bge),e(bge,aTo),e(Xs,nTo),e(Xs,nD),e(nD,sTo),e(Xs,lTo),e(Xs,sD),e(sD,iTo),e(Xs,dTo),e(k,cTo),e(k,zs),e(zs,vge),e(vge,mTo),e(zs,fTo),e(zs,lD),e(lD,gTo),e(zs,hTo),e(zs,iD),e(iD,uTo),e(zs,pTo),e(k,_To),e(k,Qs),e(Qs,Fge),e(Fge,bTo),e(Qs,vTo),e(Qs,dD),e(dD,FTo),e(Qs,TTo),e(Qs,cD),e(cD,MTo),e(Qs,ETo),e(k,CTo),e(k,Ws),e(Ws,Tge),e(Tge,wTo),e(Ws,ATo),e(Ws,mD),e(mD,LTo),e(Ws,yTo),e(Ws,fD),e(fD,xTo),e(Ws,$To),e(k,kTo),e(k,Us),e(Us,Mge),e(Mge,STo),e(Us,RTo),e(Us,gD),e(gD,PTo),e(Us,BTo),e(Us,hD),e(hD,ITo),e(Us,NTo),e(k,qTo),e(k,Hs),e(Hs,Ege),e(Ege,jTo),e(Hs,DTo),e(Hs,uD),e(uD,GTo),e(Hs,OTo),e(Hs,pD),e(pD,VTo),e(Hs,XTo),e(k,zTo),e(k,Js),e(Js,Cge),e(Cge,QTo),e(Js,WTo),e(Js,_D),e(_D,UTo),e(Js,HTo),e(Js,bD),e(bD,JTo),e(Js,YTo),e(k,KTo),e(k,bu),e(bu,wge),e(wge,ZTo),e(bu,eMo),e(bu,vD),e(vD,oMo),e(bu,rMo),e(k,tMo),e(k,Ys),e(Ys,Age),e(Age,aMo),e(Ys,nMo),e(Ys,FD),e(FD,sMo),e(Ys,lMo),e(Ys,TD),e(TD,iMo),e(Ys,dMo),e(k,cMo),e(k,Ks),e(Ks,Lge),e(Lge,mMo),e(Ks,fMo),e(Ks,MD),e(MD,gMo),e(Ks,hMo),e(Ks,ED),e(ED,uMo),e(Ks,pMo),e(k,_Mo),e(k,vu),e(vu,yge),e(yge,bMo),e(vu,vMo),e(vu,CD),e(CD,FMo),e(vu,TMo),e(k,MMo),e(k,Fu),e(Fu,xge),e(xge,EMo),e(Fu,CMo),e(Fu,wD),e(wD,wMo),e(Fu,AMo),e(k,LMo),e(k,Tu),e(Tu,$ge),e($ge,yMo),e(Tu,xMo),e(Tu,AD),e(AD,$Mo),e(Tu,kMo),e(k,SMo),e(k,Mu),e(Mu,kge),e(kge,RMo),e(Mu,PMo),e(Mu,LD),e(LD,BMo),e(Mu,IMo),e(k,NMo),e(k,Zs),e(Zs,Sge),e(Sge,qMo),e(Zs,jMo),e(Zs,yD),e(yD,DMo),e(Zs,GMo),e(Zs,xD),e(xD,OMo),e(Zs,VMo),e(k,XMo),e(k,Eu),e(Eu,Rge),e(Rge,zMo),e(Eu,QMo),e(Eu,$D),e($D,WMo),e(Eu,UMo),e(k,HMo),e(k,el),e(el,Pge),e(Pge,JMo),e(el,YMo),e(el,kD),e(kD,KMo),e(el,ZMo),e(el,SD),e(SD,eEo),e(el,oEo),e(k,rEo),e(k,ol),e(ol,Bge),e(Bge,tEo),e(ol,aEo),e(ol,RD),e(RD,nEo),e(ol,sEo),e(ol,PD),e(PD,lEo),e(ol,iEo),e(k,dEo),e(k,rl),e(rl,Ige),e(Ige,cEo),e(rl,mEo),e(rl,BD),e(BD,fEo),e(rl,gEo),e(rl,ID),e(ID,hEo),e(rl,uEo),e(k,pEo),e(k,tl),e(tl,Nge),e(Nge,_Eo),e(tl,bEo),e(tl,ND),e(ND,vEo),e(tl,FEo),e(tl,qD),e(qD,TEo),e(tl,MEo),e(k,EEo),e(k,al),e(al,qge),e(qge,CEo),e(al,wEo),e(al,jD),e(jD,AEo),e(al,LEo),e(al,DD),e(DD,yEo),e(al,xEo),e(k,$Eo),e(k,nl),e(nl,jge),e(jge,kEo),e(nl,SEo),e(nl,GD),e(GD,REo),e(nl,PEo),e(nl,OD),e(OD,BEo),e(nl,IEo),e(k,NEo),e(k,Cu),e(Cu,Dge),e(Dge,qEo),e(Cu,jEo),e(Cu,VD),e(VD,DEo),e(Cu,GEo),e(k,OEo),e(k,wu),e(wu,Gge),e(Gge,VEo),e(wu,XEo),e(wu,XD),e(XD,zEo),e(wu,QEo),e(k,WEo),e(k,sl),e(sl,Oge),e(Oge,UEo),e(sl,HEo),e(sl,zD),e(zD,JEo),e(sl,YEo),e(sl,QD),e(QD,KEo),e(sl,ZEo),e(k,e4o),e(k,ll),e(ll,Vge),e(Vge,o4o),e(ll,r4o),e(ll,WD),e(WD,t4o),e(ll,a4o),e(ll,UD),e(UD,n4o),e(ll,s4o),e(k,l4o),e(k,il),e(il,Xge),e(Xge,i4o),e(il,d4o),e(il,HD),e(HD,c4o),e(il,m4o),e(il,JD),e(JD,f4o),e(il,g4o),e(k,h4o),e(k,Au),e(Au,zge),e(zge,u4o),e(Au,p4o),e(Au,YD),e(YD,_4o),e(Au,b4o),e(k,v4o),e(k,Lu),e(Lu,Qge),e(Qge,F4o),e(Lu,T4o),e(Lu,KD),e(KD,M4o),e(Lu,E4o),e(k,C4o),e(k,yu),e(yu,Wge),e(Wge,w4o),e(yu,A4o),e(yu,ZD),e(ZD,L4o),e(yu,y4o),e(k,x4o),e(k,dl),e(dl,Uge),e(Uge,$4o),e(dl,k4o),e(dl,eG),e(eG,S4o),e(dl,R4o),e(dl,oG),e(oG,P4o),e(dl,B4o),e(k,I4o),e(k,cl),e(cl,Hge),e(Hge,N4o),e(cl,q4o),e(cl,rG),e(rG,j4o),e(cl,D4o),e(cl,tG),e(tG,G4o),e(cl,O4o),e(k,V4o),e(k,xu),e(xu,Jge),e(Jge,X4o),e(xu,z4o),e(xu,aG),e(aG,Q4o),e(xu,W4o),e(k,U4o),e(k,$u),e($u,Yge),e(Yge,H4o),e($u,J4o),e($u,nG),e(nG,Y4o),e($u,K4o),e(k,Z4o),e(k,ku),e(ku,Kge),e(Kge,eCo),e(ku,oCo),e(ku,sG),e(sG,rCo),e(ku,tCo),e(k,aCo),e(k,ml),e(ml,Zge),e(Zge,nCo),e(ml,sCo),e(ml,lG),e(lG,lCo),e(ml,iCo),e(ml,iG),e(iG,dCo),e(ml,cCo),e(k,mCo),e(k,fl),e(fl,ehe),e(ehe,fCo),e(fl,gCo),e(fl,dG),e(dG,hCo),e(fl,uCo),e(fl,cG),e(cG,pCo),e(fl,_Co),e(k,bCo),e(k,Su),e(Su,ohe),e(ohe,vCo),e(Su,FCo),e(Su,mG),e(mG,TCo),e(Su,MCo),e(k,ECo),e(k,Ru),e(Ru,rhe),e(rhe,CCo),e(Ru,wCo),e(Ru,fG),e(fG,ACo),e(Ru,LCo),e(k,yCo),e(k,gl),e(gl,the),e(the,xCo),e(gl,$Co),e(gl,gG),e(gG,kCo),e(gl,SCo),e(gl,hG),e(hG,RCo),e(gl,PCo),e(k,BCo),e(k,hl),e(hl,ahe),e(ahe,ICo),e(hl,NCo),e(hl,uG),e(uG,qCo),e(hl,jCo),e(hl,pG),e(pG,DCo),e(hl,GCo),e(k,OCo),e(k,ul),e(ul,nhe),e(nhe,VCo),e(ul,XCo),e(ul,_G),e(_G,zCo),e(ul,QCo),e(ul,bG),e(bG,WCo),e(ul,UCo),e(k,HCo),e(k,pl),e(pl,she),e(she,JCo),e(pl,YCo),e(pl,vG),e(vG,KCo),e(pl,ZCo),e(pl,FG),e(FG,e3o),e(pl,o3o),e(Br,r3o),M(Pu,Br,null),e(ko,t3o),e(ko,Bu),M(ox,Bu,null),e(Bu,a3o),e(Bu,lhe),e(lhe,n3o),b(m,oZe,_),b(m,hd,_),e(hd,Iu),e(Iu,ihe),M(rx,ihe,null),e(hd,s3o),e(hd,dhe),e(dhe,l3o),b(m,rZe,_),b(m,So,_),M(tx,So,null),e(So,i3o),e(So,ax),e(ax,d3o),e(ax,TG),e(TG,c3o),e(ax,m3o),e(So,f3o),e(So,nx),e(nx,g3o),e(nx,che),e(che,h3o),e(nx,u3o),e(So,p3o),e(So,Ye),M(sx,Ye,null),e(Ye,_3o),e(Ye,mhe),e(mhe,b3o),e(Ye,v3o),e(Ye,Ha),e(Ha,F3o),e(Ha,fhe),e(fhe,T3o),e(Ha,M3o),e(Ha,ghe),e(ghe,E3o),e(Ha,C3o),e(Ha,hhe),e(hhe,w3o),e(Ha,A3o),e(Ye,L3o),e(Ye,z),e(z,Nu),e(Nu,uhe),e(uhe,y3o),e(Nu,x3o),e(Nu,MG),e(MG,$3o),e(Nu,k3o),e(z,S3o),e(z,qu),e(qu,phe),e(phe,R3o),e(qu,P3o),e(qu,EG),e(EG,B3o),e(qu,I3o),e(z,N3o),e(z,ju),e(ju,_he),e(_he,q3o),e(ju,j3o),e(ju,CG),e(CG,D3o),e(ju,G3o),e(z,O3o),e(z,Du),e(Du,bhe),e(bhe,V3o),e(Du,X3o),e(Du,wG),e(wG,z3o),e(Du,Q3o),e(z,W3o),e(z,Gu),e(Gu,vhe),e(vhe,U3o),e(Gu,H3o),e(Gu,AG),e(AG,J3o),e(Gu,Y3o),e(z,K3o),e(z,Ou),e(Ou,Fhe),e(Fhe,Z3o),e(Ou,e5o),e(Ou,LG),e(LG,o5o),e(Ou,r5o),e(z,t5o),e(z,Vu),e(Vu,The),e(The,a5o),e(Vu,n5o),e(Vu,yG),e(yG,s5o),e(Vu,l5o),e(z,i5o),e(z,Xu),e(Xu,Mhe),e(Mhe,d5o),e(Xu,c5o),e(Xu,xG),e(xG,m5o),e(Xu,f5o),e(z,g5o),e(z,zu),e(zu,Ehe),e(Ehe,h5o),e(zu,u5o),e(zu,$G),e($G,p5o),e(zu,_5o),e(z,b5o),e(z,Qu),e(Qu,Che),e(Che,v5o),e(Qu,F5o),e(Qu,kG),e(kG,T5o),e(Qu,M5o),e(z,E5o),e(z,Wu),e(Wu,whe),e(whe,C5o),e(Wu,w5o),e(Wu,SG),e(SG,A5o),e(Wu,L5o),e(z,y5o),e(z,Uu),e(Uu,Ahe),e(Ahe,x5o),e(Uu,$5o),e(Uu,RG),e(RG,k5o),e(Uu,S5o),e(z,R5o),e(z,Hu),e(Hu,Lhe),e(Lhe,P5o),e(Hu,B5o),e(Hu,PG),e(PG,I5o),e(Hu,N5o),e(z,q5o),e(z,Ju),e(Ju,yhe),e(yhe,j5o),e(Ju,D5o),e(Ju,BG),e(BG,G5o),e(Ju,O5o),e(z,V5o),e(z,Yu),e(Yu,xhe),e(xhe,X5o),e(Yu,z5o),e(Yu,IG),e(IG,Q5o),e(Yu,W5o),e(z,U5o),e(z,Ku),e(Ku,$he),e($he,H5o),e(Ku,J5o),e(Ku,NG),e(NG,Y5o),e(Ku,K5o),e(z,Z5o),e(z,Zu),e(Zu,khe),e(khe,e0o),e(Zu,o0o),e(Zu,qG),e(qG,r0o),e(Zu,t0o),e(z,a0o),e(z,ep),e(ep,She),e(She,n0o),e(ep,s0o),e(ep,jG),e(jG,l0o),e(ep,i0o),e(z,d0o),e(z,op),e(op,Rhe),e(Rhe,c0o),e(op,m0o),e(op,DG),e(DG,f0o),e(op,g0o),e(z,h0o),e(z,rp),e(rp,Phe),e(Phe,u0o),e(rp,p0o),e(rp,GG),e(GG,_0o),e(rp,b0o),e(z,v0o),e(z,tp),e(tp,Bhe),e(Bhe,F0o),e(tp,T0o),e(tp,OG),e(OG,M0o),e(tp,E0o),e(z,C0o),e(z,ap),e(ap,Ihe),e(Ihe,w0o),e(ap,A0o),e(ap,VG),e(VG,L0o),e(ap,y0o),e(z,x0o),e(z,np),e(np,Nhe),e(Nhe,$0o),e(np,k0o),e(np,XG),e(XG,S0o),e(np,R0o),e(z,P0o),e(z,sp),e(sp,qhe),e(qhe,B0o),e(sp,I0o),e(sp,zG),e(zG,N0o),e(sp,q0o),e(z,j0o),e(z,lp),e(lp,jhe),e(jhe,D0o),e(lp,G0o),e(lp,QG),e(QG,O0o),e(lp,V0o),e(z,X0o),e(z,ip),e(ip,Dhe),e(Dhe,z0o),e(ip,Q0o),e(ip,WG),e(WG,W0o),e(ip,U0o),e(z,H0o),e(z,dp),e(dp,Ghe),e(Ghe,J0o),e(dp,Y0o),e(dp,UG),e(UG,K0o),e(dp,Z0o),e(z,ewo),e(z,cp),e(cp,Ohe),e(Ohe,owo),e(cp,rwo),e(cp,HG),e(HG,two),e(cp,awo),e(z,nwo),e(z,mp),e(mp,Vhe),e(Vhe,swo),e(mp,lwo),e(mp,JG),e(JG,iwo),e(mp,dwo),e(z,cwo),e(z,fp),e(fp,Xhe),e(Xhe,mwo),e(fp,fwo),e(fp,YG),e(YG,gwo),e(fp,hwo),e(z,uwo),e(z,gp),e(gp,zhe),e(zhe,pwo),e(gp,_wo),e(gp,KG),e(KG,bwo),e(gp,vwo),e(z,Fwo),e(z,hp),e(hp,Qhe),e(Qhe,Two),e(hp,Mwo),e(hp,ZG),e(ZG,Ewo),e(hp,Cwo),e(z,wwo),e(z,up),e(up,Whe),e(Whe,Awo),e(up,Lwo),e(up,eO),e(eO,ywo),e(up,xwo),e(z,$wo),e(z,pp),e(pp,Uhe),e(Uhe,kwo),e(pp,Swo),e(pp,oO),e(oO,Rwo),e(pp,Pwo),e(z,Bwo),e(z,_p),e(_p,Hhe),e(Hhe,Iwo),e(_p,Nwo),e(_p,rO),e(rO,qwo),e(_p,jwo),e(z,Dwo),e(z,bp),e(bp,Jhe),e(Jhe,Gwo),e(bp,Owo),e(bp,tO),e(tO,Vwo),e(bp,Xwo),e(z,zwo),e(z,vp),e(vp,Yhe),e(Yhe,Qwo),e(vp,Wwo),e(vp,aO),e(aO,Uwo),e(vp,Hwo),e(z,Jwo),e(z,Fp),e(Fp,Khe),e(Khe,Ywo),e(Fp,Kwo),e(Fp,nO),e(nO,Zwo),e(Fp,eAo),e(z,oAo),e(z,Tp),e(Tp,Zhe),e(Zhe,rAo),e(Tp,tAo),e(Tp,sO),e(sO,aAo),e(Tp,nAo),e(z,sAo),e(z,Mp),e(Mp,eue),e(eue,lAo),e(Mp,iAo),e(Mp,lO),e(lO,dAo),e(Mp,cAo),e(z,mAo),e(z,Ep),e(Ep,oue),e(oue,fAo),e(Ep,gAo),e(Ep,iO),e(iO,hAo),e(Ep,uAo),e(z,pAo),e(z,Cp),e(Cp,rue),e(rue,_Ao),e(Cp,bAo),e(Cp,dO),e(dO,vAo),e(Cp,FAo),e(Ye,TAo),M(wp,Ye,null),e(Ye,MAo),M(Ap,Ye,null),e(So,EAo),e(So,Lp),M(lx,Lp,null),e(Lp,CAo),e(Lp,tue),e(tue,wAo),b(m,tZe,_),b(m,ud,_),e(ud,yp),e(yp,aue),M(ix,aue,null),e(ud,AAo),e(ud,nue),e(nue,LAo),b(m,aZe,_),b(m,Ro,_),M(dx,Ro,null),e(Ro,yAo),e(Ro,cx),e(cx,xAo),e(cx,cO),e(cO,$Ao),e(cx,kAo),e(Ro,SAo),e(Ro,mx),e(mx,RAo),e(mx,sue),e(sue,PAo),e(mx,BAo),e(Ro,IAo),e(Ro,Ke),M(fx,Ke,null),e(Ke,NAo),e(Ke,lue),e(lue,qAo),e(Ke,jAo),e(Ke,pd),e(pd,DAo),e(pd,iue),e(iue,GAo),e(pd,OAo),e(pd,due),e(due,VAo),e(pd,XAo),e(Ke,zAo),e(Ke,ie),e(ie,xp),e(xp,cue),e(cue,QAo),e(xp,WAo),e(xp,mO),e(mO,UAo),e(xp,HAo),e(ie,JAo),e(ie,$p),e($p,mue),e(mue,YAo),e($p,KAo),e($p,fO),e(fO,ZAo),e($p,e6o),e(ie,o6o),e(ie,kp),e(kp,fue),e(fue,r6o),e(kp,t6o),e(kp,gO),e(gO,a6o),e(kp,n6o),e(ie,s6o),e(ie,Sp),e(Sp,gue),e(gue,l6o),e(Sp,i6o),e(Sp,hO),e(hO,d6o),e(Sp,c6o),e(ie,m6o),e(ie,Rp),e(Rp,hue),e(hue,f6o),e(Rp,g6o),e(Rp,uO),e(uO,h6o),e(Rp,u6o),e(ie,p6o),e(ie,Pp),e(Pp,uue),e(uue,_6o),e(Pp,b6o),e(Pp,pO),e(pO,v6o),e(Pp,F6o),e(ie,T6o),e(ie,Bp),e(Bp,pue),e(pue,M6o),e(Bp,E6o),e(Bp,_O),e(_O,C6o),e(Bp,w6o),e(ie,A6o),e(ie,Ip),e(Ip,_ue),e(_ue,L6o),e(Ip,y6o),e(Ip,bO),e(bO,x6o),e(Ip,$6o),e(ie,k6o),e(ie,Np),e(Np,bue),e(bue,S6o),e(Np,R6o),e(Np,vO),e(vO,P6o),e(Np,B6o),e(ie,I6o),e(ie,qp),e(qp,vue),e(vue,N6o),e(qp,q6o),e(qp,FO),e(FO,j6o),e(qp,D6o),e(ie,G6o),e(ie,jp),e(jp,Fue),e(Fue,O6o),e(jp,V6o),e(jp,TO),e(TO,X6o),e(jp,z6o),e(ie,Q6o),e(ie,Dp),e(Dp,Tue),e(Tue,W6o),e(Dp,U6o),e(Dp,MO),e(MO,H6o),e(Dp,J6o),e(ie,Y6o),e(ie,Gp),e(Gp,Mue),e(Mue,K6o),e(Gp,Z6o),e(Gp,EO),e(EO,e7o),e(Gp,o7o),e(ie,r7o),e(ie,Op),e(Op,Eue),e(Eue,t7o),e(Op,a7o),e(Op,CO),e(CO,n7o),e(Op,s7o),e(ie,l7o),e(ie,Vp),e(Vp,Cue),e(Cue,i7o),e(Vp,d7o),e(Vp,wO),e(wO,c7o),e(Vp,m7o),e(ie,f7o),e(ie,Xp),e(Xp,wue),e(wue,g7o),e(Xp,h7o),e(Xp,AO),e(AO,u7o),e(Xp,p7o),e(ie,_7o),e(ie,zp),e(zp,Aue),e(Aue,b7o),e(zp,v7o),e(zp,LO),e(LO,F7o),e(zp,T7o),e(ie,M7o),e(ie,Qp),e(Qp,Lue),e(Lue,E7o),e(Qp,C7o),e(Qp,yO),e(yO,w7o),e(Qp,A7o),e(ie,L7o),e(ie,Wp),e(Wp,yue),e(yue,y7o),e(Wp,x7o),e(Wp,xO),e(xO,$7o),e(Wp,k7o),e(ie,S7o),e(ie,Up),e(Up,xue),e(xue,R7o),e(Up,P7o),e(Up,$O),e($O,B7o),e(Up,I7o),e(ie,N7o),e(ie,Hp),e(Hp,$ue),e($ue,q7o),e(Hp,j7o),e(Hp,kO),e(kO,D7o),e(Hp,G7o),e(Ke,O7o),M(Jp,Ke,null),e(Ke,V7o),M(Yp,Ke,null),e(Ro,X7o),e(Ro,Kp),M(gx,Kp,null),e(Kp,z7o),e(Kp,kue),e(kue,Q7o),b(m,nZe,_),b(m,_d,_),e(_d,Zp),e(Zp,Sue),M(hx,Sue,null),e(_d,W7o),e(_d,Rue),e(Rue,U7o),b(m,sZe,_),b(m,Po,_),M(ux,Po,null),e(Po,H7o),e(Po,bd),e(bd,J7o),e(bd,SO),e(SO,Y7o),e(bd,K7o),e(bd,RO),e(RO,Z7o),e(bd,eLo),e(Po,oLo),e(Po,px),e(px,rLo),e(px,Pue),e(Pue,tLo),e(px,aLo),e(Po,nLo),e(Po,_t),M(_x,_t,null),e(_t,sLo),e(_t,Bue),e(Bue,lLo),e(_t,iLo),e(_t,vd),e(vd,dLo),e(vd,Iue),e(Iue,cLo),e(vd,mLo),e(vd,PO),e(PO,fLo),e(vd,gLo),e(_t,hLo),M(e_,_t,null),e(Po,uLo),e(Po,Ze),M(bx,Ze,null),e(Ze,pLo),e(Ze,Nue),e(Nue,_Lo),e(Ze,bLo),e(Ze,Ja),e(Ja,vLo),e(Ja,que),e(que,FLo),e(Ja,TLo),e(Ja,jue),e(jue,MLo),e(Ja,ELo),e(Ja,Due),e(Due,CLo),e(Ja,wLo),e(Ze,ALo),e(Ze,y),e(y,o_),e(o_,Gue),e(Gue,LLo),e(o_,yLo),e(o_,BO),e(BO,xLo),e(o_,$Lo),e(y,kLo),e(y,r_),e(r_,Oue),e(Oue,SLo),e(r_,RLo),e(r_,IO),e(IO,PLo),e(r_,BLo),e(y,ILo),e(y,t_),e(t_,Vue),e(Vue,NLo),e(t_,qLo),e(t_,NO),e(NO,jLo),e(t_,DLo),e(y,GLo),e(y,a_),e(a_,Xue),e(Xue,OLo),e(a_,VLo),e(a_,qO),e(qO,XLo),e(a_,zLo),e(y,QLo),e(y,n_),e(n_,zue),e(zue,WLo),e(n_,ULo),e(n_,jO),e(jO,HLo),e(n_,JLo),e(y,YLo),e(y,s_),e(s_,Que),e(Que,KLo),e(s_,ZLo),e(s_,DO),e(DO,eyo),e(s_,oyo),e(y,ryo),e(y,l_),e(l_,Wue),e(Wue,tyo),e(l_,ayo),e(l_,GO),e(GO,nyo),e(l_,syo),e(y,lyo),e(y,i_),e(i_,Uue),e(Uue,iyo),e(i_,dyo),e(i_,OO),e(OO,cyo),e(i_,myo),e(y,fyo),e(y,d_),e(d_,Hue),e(Hue,gyo),e(d_,hyo),e(d_,VO),e(VO,uyo),e(d_,pyo),e(y,_yo),e(y,c_),e(c_,Jue),e(Jue,byo),e(c_,vyo),e(c_,XO),e(XO,Fyo),e(c_,Tyo),e(y,Myo),e(y,m_),e(m_,Yue),e(Yue,Eyo),e(m_,Cyo),e(m_,zO),e(zO,wyo),e(m_,Ayo),e(y,Lyo),e(y,f_),e(f_,Kue),e(Kue,yyo),e(f_,xyo),e(f_,QO),e(QO,$yo),e(f_,kyo),e(y,Syo),e(y,g_),e(g_,Zue),e(Zue,Ryo),e(g_,Pyo),e(g_,WO),e(WO,Byo),e(g_,Iyo),e(y,Nyo),e(y,h_),e(h_,epe),e(epe,qyo),e(h_,jyo),e(h_,UO),e(UO,Dyo),e(h_,Gyo),e(y,Oyo),e(y,u_),e(u_,ope),e(ope,Vyo),e(u_,Xyo),e(u_,HO),e(HO,zyo),e(u_,Qyo),e(y,Wyo),e(y,p_),e(p_,rpe),e(rpe,Uyo),e(p_,Hyo),e(p_,JO),e(JO,Jyo),e(p_,Yyo),e(y,Kyo),e(y,__),e(__,tpe),e(tpe,Zyo),e(__,e8o),e(__,YO),e(YO,o8o),e(__,r8o),e(y,t8o),e(y,b_),e(b_,ape),e(ape,a8o),e(b_,n8o),e(b_,KO),e(KO,s8o),e(b_,l8o),e(y,i8o),e(y,v_),e(v_,npe),e(npe,d8o),e(v_,c8o),e(v_,ZO),e(ZO,m8o),e(v_,f8o),e(y,g8o),e(y,F_),e(F_,spe),e(spe,h8o),e(F_,u8o),e(F_,eV),e(eV,p8o),e(F_,_8o),e(y,b8o),e(y,T_),e(T_,lpe),e(lpe,v8o),e(T_,F8o),e(T_,oV),e(oV,T8o),e(T_,M8o),e(y,E8o),e(y,M_),e(M_,ipe),e(ipe,C8o),e(M_,w8o),e(M_,rV),e(rV,A8o),e(M_,L8o),e(y,y8o),e(y,E_),e(E_,dpe),e(dpe,x8o),e(E_,$8o),e(E_,tV),e(tV,k8o),e(E_,S8o),e(y,R8o),e(y,C_),e(C_,cpe),e(cpe,P8o),e(C_,B8o),e(C_,aV),e(aV,I8o),e(C_,N8o),e(y,q8o),e(y,w_),e(w_,mpe),e(mpe,j8o),e(w_,D8o),e(w_,nV),e(nV,G8o),e(w_,O8o),e(y,V8o),e(y,A_),e(A_,fpe),e(fpe,X8o),e(A_,z8o),e(A_,sV),e(sV,Q8o),e(A_,W8o),e(y,U8o),e(y,L_),e(L_,gpe),e(gpe,H8o),e(L_,J8o),e(L_,lV),e(lV,Y8o),e(L_,K8o),e(y,Z8o),e(y,y_),e(y_,hpe),e(hpe,e9o),e(y_,o9o),e(y_,iV),e(iV,r9o),e(y_,t9o),e(y,a9o),e(y,x_),e(x_,upe),e(upe,n9o),e(x_,s9o),e(x_,dV),e(dV,l9o),e(x_,i9o),e(y,d9o),e(y,$_),e($_,ppe),e(ppe,c9o),e($_,m9o),e($_,cV),e(cV,f9o),e($_,g9o),e(y,h9o),e(y,k_),e(k_,_pe),e(_pe,u9o),e(k_,p9o),e(k_,mV),e(mV,_9o),e(k_,b9o),e(y,v9o),e(y,S_),e(S_,bpe),e(bpe,F9o),e(S_,T9o),e(S_,fV),e(fV,M9o),e(S_,E9o),e(y,C9o),e(y,R_),e(R_,vpe),e(vpe,w9o),e(R_,A9o),e(R_,gV),e(gV,L9o),e(R_,y9o),e(y,x9o),e(y,P_),e(P_,Fpe),e(Fpe,$9o),e(P_,k9o),e(P_,hV),e(hV,S9o),e(P_,R9o),e(y,P9o),e(y,B_),e(B_,Tpe),e(Tpe,B9o),e(B_,I9o),e(B_,uV),e(uV,N9o),e(B_,q9o),e(y,j9o),e(y,I_),e(I_,Mpe),e(Mpe,D9o),e(I_,G9o),e(I_,pV),e(pV,O9o),e(I_,V9o),e(y,X9o),e(y,N_),e(N_,Epe),e(Epe,z9o),e(N_,Q9o),e(N_,_V),e(_V,W9o),e(N_,U9o),e(y,H9o),e(y,q_),e(q_,Cpe),e(Cpe,J9o),e(q_,Y9o),e(q_,bV),e(bV,K9o),e(q_,Z9o),e(y,exo),e(y,_l),e(_l,wpe),e(wpe,oxo),e(_l,rxo),e(_l,vV),e(vV,txo),e(_l,axo),e(_l,FV),e(FV,nxo),e(_l,sxo),e(y,lxo),e(y,j_),e(j_,Ape),e(Ape,ixo),e(j_,dxo),e(j_,TV),e(TV,cxo),e(j_,mxo),e(y,fxo),e(y,D_),e(D_,Lpe),e(Lpe,gxo),e(D_,hxo),e(D_,MV),e(MV,uxo),e(D_,pxo),e(y,_xo),e(y,G_),e(G_,ype),e(ype,bxo),e(G_,vxo),e(G_,EV),e(EV,Fxo),e(G_,Txo),e(y,Mxo),e(y,O_),e(O_,xpe),e(xpe,Exo),e(O_,Cxo),e(O_,CV),e(CV,wxo),e(O_,Axo),e(y,Lxo),e(y,V_),e(V_,$pe),e($pe,yxo),e(V_,xxo),e(V_,wV),e(wV,$xo),e(V_,kxo),e(y,Sxo),e(y,X_),e(X_,kpe),e(kpe,Rxo),e(X_,Pxo),e(X_,AV),e(AV,Bxo),e(X_,Ixo),e(y,Nxo),e(y,z_),e(z_,Spe),e(Spe,qxo),e(z_,jxo),e(z_,LV),e(LV,Dxo),e(z_,Gxo),e(y,Oxo),e(y,Q_),e(Q_,Rpe),e(Rpe,Vxo),e(Q_,Xxo),e(Q_,yV),e(yV,zxo),e(Q_,Qxo),e(y,Wxo),e(y,W_),e(W_,Ppe),e(Ppe,Uxo),e(W_,Hxo),e(W_,xV),e(xV,Jxo),e(W_,Yxo),e(y,Kxo),e(y,U_),e(U_,Bpe),e(Bpe,Zxo),e(U_,e$o),e(U_,$V),e($V,o$o),e(U_,r$o),e(y,t$o),e(y,H_),e(H_,Ipe),e(Ipe,a$o),e(H_,n$o),e(H_,kV),e(kV,s$o),e(H_,l$o),e(y,i$o),e(y,J_),e(J_,Npe),e(Npe,d$o),e(J_,c$o),e(J_,SV),e(SV,m$o),e(J_,f$o),e(y,g$o),e(y,Y_),e(Y_,qpe),e(qpe,h$o),e(Y_,u$o),e(Y_,RV),e(RV,p$o),e(Y_,_$o),e(y,b$o),e(y,K_),e(K_,jpe),e(jpe,v$o),e(K_,F$o),e(K_,PV),e(PV,T$o),e(K_,M$o),e(y,E$o),e(y,Z_),e(Z_,Dpe),e(Dpe,C$o),e(Z_,w$o),e(Z_,BV),e(BV,A$o),e(Z_,L$o),e(y,y$o),e(y,eb),e(eb,Gpe),e(Gpe,x$o),e(eb,$$o),e(eb,IV),e(IV,k$o),e(eb,S$o),e(y,R$o),e(y,ob),e(ob,Ope),e(Ope,P$o),e(ob,B$o),e(ob,NV),e(NV,I$o),e(ob,N$o),e(y,q$o),e(y,rb),e(rb,Vpe),e(Vpe,j$o),e(rb,D$o),e(rb,qV),e(qV,G$o),e(rb,O$o),e(y,V$o),e(y,tb),e(tb,Xpe),e(Xpe,X$o),e(tb,z$o),e(tb,jV),e(jV,Q$o),e(tb,W$o),e(y,U$o),e(y,ab),e(ab,zpe),e(zpe,H$o),e(ab,J$o),e(ab,DV),e(DV,Y$o),e(ab,K$o),e(y,Z$o),e(y,nb),e(nb,Qpe),e(Qpe,eko),e(nb,oko),e(nb,GV),e(GV,rko),e(nb,tko),e(y,ako),e(y,sb),e(sb,Wpe),e(Wpe,nko),e(sb,sko),e(sb,OV),e(OV,lko),e(sb,iko),e(y,dko),e(y,lb),e(lb,Upe),e(Upe,cko),e(lb,mko),e(lb,VV),e(VV,fko),e(lb,gko),e(y,hko),e(y,ib),e(ib,Hpe),e(Hpe,uko),e(ib,pko),e(ib,XV),e(XV,_ko),e(ib,bko),e(y,vko),e(y,db),e(db,Jpe),e(Jpe,Fko),e(db,Tko),e(db,zV),e(zV,Mko),e(db,Eko),e(y,Cko),e(y,cb),e(cb,Ype),e(Ype,wko),e(cb,Ako),e(cb,QV),e(QV,Lko),e(cb,yko),e(y,xko),e(y,mb),e(mb,Kpe),e(Kpe,$ko),e(mb,kko),e(mb,WV),e(WV,Sko),e(mb,Rko),e(y,Pko),e(y,fb),e(fb,Zpe),e(Zpe,Bko),e(fb,Iko),e(fb,UV),e(UV,Nko),e(fb,qko),e(y,jko),e(y,gb),e(gb,e_e),e(e_e,Dko),e(gb,Gko),e(gb,HV),e(HV,Oko),e(gb,Vko),e(y,Xko),e(y,hb),e(hb,o_e),e(o_e,zko),e(hb,Qko),e(hb,JV),e(JV,Wko),e(hb,Uko),e(y,Hko),e(y,ub),e(ub,r_e),e(r_e,Jko),e(ub,Yko),e(ub,YV),e(YV,Kko),e(ub,Zko),e(y,eSo),e(y,pb),e(pb,t_e),e(t_e,oSo),e(pb,rSo),e(pb,KV),e(KV,tSo),e(pb,aSo),e(y,nSo),e(y,_b),e(_b,a_e),e(a_e,sSo),e(_b,lSo),e(_b,ZV),e(ZV,iSo),e(_b,dSo),e(y,cSo),e(y,bb),e(bb,n_e),e(n_e,mSo),e(bb,fSo),e(bb,eX),e(eX,gSo),e(bb,hSo),e(y,uSo),e(y,vb),e(vb,s_e),e(s_e,pSo),e(vb,_So),e(vb,oX),e(oX,bSo),e(vb,vSo),e(y,FSo),e(y,Fb),e(Fb,l_e),e(l_e,TSo),e(Fb,MSo),e(Fb,rX),e(rX,ESo),e(Fb,CSo),e(y,wSo),e(y,Tb),e(Tb,i_e),e(i_e,ASo),e(Tb,LSo),e(Tb,tX),e(tX,ySo),e(Tb,xSo),e(y,$So),e(y,Mb),e(Mb,d_e),e(d_e,kSo),e(Mb,SSo),e(Mb,aX),e(aX,RSo),e(Mb,PSo),e(y,BSo),e(y,Eb),e(Eb,c_e),e(c_e,ISo),e(Eb,NSo),e(Eb,nX),e(nX,qSo),e(Eb,jSo),e(y,DSo),e(y,Cb),e(Cb,m_e),e(m_e,GSo),e(Cb,OSo),e(Cb,sX),e(sX,VSo),e(Cb,XSo),e(y,zSo),e(y,wb),e(wb,f_e),e(f_e,QSo),e(wb,WSo),e(wb,lX),e(lX,USo),e(wb,HSo),e(y,JSo),e(y,Ab),e(Ab,g_e),e(g_e,YSo),e(Ab,KSo),e(Ab,iX),e(iX,ZSo),e(Ab,eRo),e(y,oRo),e(y,Lb),e(Lb,h_e),e(h_e,rRo),e(Lb,tRo),e(Lb,dX),e(dX,aRo),e(Lb,nRo),e(y,sRo),e(y,yb),e(yb,u_e),e(u_e,lRo),e(yb,iRo),e(yb,cX),e(cX,dRo),e(yb,cRo),e(y,mRo),e(y,xb),e(xb,p_e),e(p_e,fRo),e(xb,gRo),e(xb,mX),e(mX,hRo),e(xb,uRo),e(y,pRo),e(y,$b),e($b,__e),e(__e,_Ro),e($b,bRo),e($b,fX),e(fX,vRo),e($b,FRo),e(y,TRo),e(y,kb),e(kb,b_e),e(b_e,MRo),e(kb,ERo),e(kb,gX),e(gX,CRo),e(kb,wRo),e(y,ARo),e(y,Sb),e(Sb,v_e),e(v_e,LRo),e(Sb,yRo),e(Sb,hX),e(hX,xRo),e(Sb,$Ro),e(y,kRo),e(y,Rb),e(Rb,F_e),e(F_e,SRo),e(Rb,RRo),e(Rb,uX),e(uX,PRo),e(Rb,BRo),e(y,IRo),e(y,Pb),e(Pb,T_e),e(T_e,NRo),e(Pb,qRo),e(Pb,pX),e(pX,jRo),e(Pb,DRo),e(y,GRo),e(y,Bb),e(Bb,M_e),e(M_e,ORo),e(Bb,VRo),e(Bb,_X),e(_X,XRo),e(Bb,zRo),e(y,QRo),e(y,Ib),e(Ib,E_e),e(E_e,WRo),e(Ib,URo),e(Ib,bX),e(bX,HRo),e(Ib,JRo),e(y,YRo),e(y,Nb),e(Nb,C_e),e(C_e,KRo),e(Nb,ZRo),e(Nb,vX),e(vX,ePo),e(Nb,oPo),e(y,rPo),e(y,qb),e(qb,w_e),e(w_e,tPo),e(qb,aPo),e(qb,FX),e(FX,nPo),e(qb,sPo),e(y,lPo),e(y,jb),e(jb,A_e),e(A_e,iPo),e(jb,dPo),e(jb,TX),e(TX,cPo),e(jb,mPo),e(y,fPo),e(y,Db),e(Db,L_e),e(L_e,gPo),e(Db,hPo),e(Db,MX),e(MX,uPo),e(Db,pPo),e(y,_Po),e(y,Gb),e(Gb,y_e),e(y_e,bPo),e(Gb,vPo),e(Gb,EX),e(EX,FPo),e(Gb,TPo),e(y,MPo),e(y,Ob),e(Ob,x_e),e(x_e,EPo),e(Ob,CPo),e(Ob,CX),e(CX,wPo),e(Ob,APo),e(y,LPo),e(y,Vb),e(Vb,$_e),e($_e,yPo),e(Vb,xPo),e(Vb,wX),e(wX,$Po),e(Vb,kPo),e(y,SPo),e(y,Xb),e(Xb,k_e),e(k_e,RPo),e(Xb,PPo),e(Xb,AX),e(AX,BPo),e(Xb,IPo),e(y,NPo),e(y,zb),e(zb,S_e),e(S_e,qPo),e(zb,jPo),e(zb,LX),e(LX,DPo),e(zb,GPo),e(y,OPo),e(y,Qb),e(Qb,R_e),e(R_e,VPo),e(Qb,XPo),e(Qb,yX),e(yX,zPo),e(Qb,QPo),e(y,WPo),e(y,Wb),e(Wb,P_e),e(P_e,UPo),e(Wb,HPo),e(Wb,xX),e(xX,JPo),e(Wb,YPo),e(y,KPo),e(y,Ub),e(Ub,B_e),e(B_e,ZPo),e(Ub,eBo),e(Ub,$X),e($X,oBo),e(Ub,rBo),e(y,tBo),e(y,Hb),e(Hb,I_e),e(I_e,aBo),e(Hb,nBo),e(Hb,kX),e(kX,sBo),e(Hb,lBo),e(y,iBo),e(y,Jb),e(Jb,N_e),e(N_e,dBo),e(Jb,cBo),e(Jb,SX),e(SX,mBo),e(Jb,fBo),e(y,gBo),e(y,Yb),e(Yb,q_e),e(q_e,hBo),e(Yb,uBo),e(Yb,RX),e(RX,pBo),e(Yb,_Bo),e(y,bBo),e(y,Kb),e(Kb,j_e),e(j_e,vBo),e(Kb,FBo),e(Kb,PX),e(PX,TBo),e(Kb,MBo),e(y,EBo),e(y,Zb),e(Zb,D_e),e(D_e,CBo),e(Zb,wBo),e(Zb,BX),e(BX,ABo),e(Zb,LBo),e(y,yBo),e(y,e2),e(e2,G_e),e(G_e,xBo),e(e2,$Bo),e(e2,IX),e(IX,kBo),e(e2,SBo),e(y,RBo),e(y,o2),e(o2,O_e),e(O_e,PBo),e(o2,BBo),e(o2,NX),e(NX,IBo),e(o2,NBo),e(y,qBo),e(y,r2),e(r2,V_e),e(V_e,jBo),e(r2,DBo),e(r2,qX),e(qX,GBo),e(r2,OBo),e(y,VBo),e(y,t2),e(t2,X_e),e(X_e,XBo),e(t2,zBo),e(t2,jX),e(jX,QBo),e(t2,WBo),e(y,UBo),e(y,a2),e(a2,z_e),e(z_e,HBo),e(a2,JBo),e(a2,DX),e(DX,YBo),e(a2,KBo),e(y,ZBo),e(y,n2),e(n2,Q_e),e(Q_e,eIo),e(n2,oIo),e(n2,GX),e(GX,rIo),e(n2,tIo),e(y,aIo),e(y,s2),e(s2,W_e),e(W_e,nIo),e(s2,sIo),e(s2,OX),e(OX,lIo),e(s2,iIo),e(y,dIo),e(y,l2),e(l2,U_e),e(U_e,cIo),e(l2,mIo),e(l2,VX),e(VX,fIo),e(l2,gIo),e(y,hIo),e(y,i2),e(i2,H_e),e(H_e,uIo),e(i2,pIo),e(i2,XX),e(XX,_Io),e(i2,bIo),e(y,vIo),e(y,d2),e(d2,J_e),e(J_e,FIo),e(d2,TIo),e(d2,zX),e(zX,MIo),e(d2,EIo),e(y,CIo),e(y,c2),e(c2,Y_e),e(Y_e,wIo),e(c2,AIo),e(c2,QX),e(QX,LIo),e(c2,yIo),e(y,xIo),e(y,m2),e(m2,K_e),e(K_e,$Io),e(m2,kIo),e(m2,WX),e(WX,SIo),e(m2,RIo),e(y,PIo),e(y,f2),e(f2,Z_e),e(Z_e,BIo),e(f2,IIo),e(f2,UX),e(UX,NIo),e(f2,qIo),e(y,jIo),e(y,g2),e(g2,ebe),e(ebe,DIo),e(g2,GIo),e(g2,HX),e(HX,OIo),e(g2,VIo),e(y,XIo),e(y,h2),e(h2,obe),e(obe,zIo),e(h2,QIo),e(h2,JX),e(JX,WIo),e(h2,UIo),e(Ze,HIo),e(Ze,u2),e(u2,JIo),e(u2,rbe),e(rbe,YIo),e(u2,KIo),e(u2,tbe),e(tbe,ZIo),e(Ze,eNo),M(p2,Ze,null),b(m,lZe,_),b(m,Fd,_),e(Fd,_2),e(_2,abe),M(vx,abe,null),e(Fd,oNo),e(Fd,nbe),e(nbe,rNo),b(m,iZe,_),b(m,Bo,_),M(Fx,Bo,null),e(Bo,tNo),e(Bo,Td),e(Td,aNo),e(Td,YX),e(YX,nNo),e(Td,sNo),e(Td,KX),e(KX,lNo),e(Td,iNo),e(Bo,dNo),e(Bo,Tx),e(Tx,cNo),e(Tx,sbe),e(sbe,mNo),e(Tx,fNo),e(Bo,gNo),e(Bo,bt),M(Mx,bt,null),e(bt,hNo),e(bt,lbe),e(lbe,uNo),e(bt,pNo),e(bt,Md),e(Md,_No),e(Md,ibe),e(ibe,bNo),e(Md,vNo),e(Md,ZX),e(ZX,FNo),e(Md,TNo),e(bt,MNo),M(b2,bt,null),e(Bo,ENo),e(Bo,eo),M(Ex,eo,null),e(eo,CNo),e(eo,dbe),e(dbe,wNo),e(eo,ANo),e(eo,Ya),e(Ya,LNo),e(Ya,cbe),e(cbe,yNo),e(Ya,xNo),e(Ya,mbe),e(mbe,$No),e(Ya,kNo),e(Ya,fbe),e(fbe,SNo),e(Ya,RNo),e(eo,PNo),e(eo,G),e(G,v2),e(v2,gbe),e(gbe,BNo),e(v2,INo),e(v2,ez),e(ez,NNo),e(v2,qNo),e(G,jNo),e(G,F2),e(F2,hbe),e(hbe,DNo),e(F2,GNo),e(F2,oz),e(oz,ONo),e(F2,VNo),e(G,XNo),e(G,T2),e(T2,ube),e(ube,zNo),e(T2,QNo),e(T2,rz),e(rz,WNo),e(T2,UNo),e(G,HNo),e(G,M2),e(M2,pbe),e(pbe,JNo),e(M2,YNo),e(M2,tz),e(tz,KNo),e(M2,ZNo),e(G,eqo),e(G,E2),e(E2,_be),e(_be,oqo),e(E2,rqo),e(E2,az),e(az,tqo),e(E2,aqo),e(G,nqo),e(G,C2),e(C2,bbe),e(bbe,sqo),e(C2,lqo),e(C2,nz),e(nz,iqo),e(C2,dqo),e(G,cqo),e(G,w2),e(w2,vbe),e(vbe,mqo),e(w2,fqo),e(w2,sz),e(sz,gqo),e(w2,hqo),e(G,uqo),e(G,A2),e(A2,Fbe),e(Fbe,pqo),e(A2,_qo),e(A2,lz),e(lz,bqo),e(A2,vqo),e(G,Fqo),e(G,L2),e(L2,Tbe),e(Tbe,Tqo),e(L2,Mqo),e(L2,iz),e(iz,Eqo),e(L2,Cqo),e(G,wqo),e(G,y2),e(y2,Mbe),e(Mbe,Aqo),e(y2,Lqo),e(y2,dz),e(dz,yqo),e(y2,xqo),e(G,$qo),e(G,x2),e(x2,Ebe),e(Ebe,kqo),e(x2,Sqo),e(x2,cz),e(cz,Rqo),e(x2,Pqo),e(G,Bqo),e(G,$2),e($2,Cbe),e(Cbe,Iqo),e($2,Nqo),e($2,mz),e(mz,qqo),e($2,jqo),e(G,Dqo),e(G,k2),e(k2,wbe),e(wbe,Gqo),e(k2,Oqo),e(k2,fz),e(fz,Vqo),e(k2,Xqo),e(G,zqo),e(G,S2),e(S2,Abe),e(Abe,Qqo),e(S2,Wqo),e(S2,gz),e(gz,Uqo),e(S2,Hqo),e(G,Jqo),e(G,R2),e(R2,Lbe),e(Lbe,Yqo),e(R2,Kqo),e(R2,hz),e(hz,Zqo),e(R2,ejo),e(G,ojo),e(G,P2),e(P2,ybe),e(ybe,rjo),e(P2,tjo),e(P2,uz),e(uz,ajo),e(P2,njo),e(G,sjo),e(G,B2),e(B2,xbe),e(xbe,ljo),e(B2,ijo),e(B2,pz),e(pz,djo),e(B2,cjo),e(G,mjo),e(G,I2),e(I2,$be),e($be,fjo),e(I2,gjo),e(I2,_z),e(_z,hjo),e(I2,ujo),e(G,pjo),e(G,N2),e(N2,kbe),e(kbe,_jo),e(N2,bjo),e(N2,bz),e(bz,vjo),e(N2,Fjo),e(G,Tjo),e(G,q2),e(q2,Sbe),e(Sbe,Mjo),e(q2,Ejo),e(q2,vz),e(vz,Cjo),e(q2,wjo),e(G,Ajo),e(G,j2),e(j2,Rbe),e(Rbe,Ljo),e(j2,yjo),e(j2,Fz),e(Fz,xjo),e(j2,$jo),e(G,kjo),e(G,D2),e(D2,Pbe),e(Pbe,Sjo),e(D2,Rjo),e(D2,Tz),e(Tz,Pjo),e(D2,Bjo),e(G,Ijo),e(G,G2),e(G2,Bbe),e(Bbe,Njo),e(G2,qjo),e(G2,Mz),e(Mz,jjo),e(G2,Djo),e(G,Gjo),e(G,O2),e(O2,Ibe),e(Ibe,Ojo),e(O2,Vjo),e(O2,Ez),e(Ez,Xjo),e(O2,zjo),e(G,Qjo),e(G,V2),e(V2,Nbe),e(Nbe,Wjo),e(V2,Ujo),e(V2,Cz),e(Cz,Hjo),e(V2,Jjo),e(G,Yjo),e(G,X2),e(X2,qbe),e(qbe,Kjo),e(X2,Zjo),e(X2,wz),e(wz,eDo),e(X2,oDo),e(G,rDo),e(G,z2),e(z2,jbe),e(jbe,tDo),e(z2,aDo),e(z2,Az),e(Az,nDo),e(z2,sDo),e(G,lDo),e(G,Q2),e(Q2,Dbe),e(Dbe,iDo),e(Q2,dDo),e(Q2,Lz),e(Lz,cDo),e(Q2,mDo),e(G,fDo),e(G,W2),e(W2,Gbe),e(Gbe,gDo),e(W2,hDo),e(W2,yz),e(yz,uDo),e(W2,pDo),e(G,_Do),e(G,U2),e(U2,Obe),e(Obe,bDo),e(U2,vDo),e(U2,xz),e(xz,FDo),e(U2,TDo),e(G,MDo),e(G,H2),e(H2,Vbe),e(Vbe,EDo),e(H2,CDo),e(H2,$z),e($z,wDo),e(H2,ADo),e(G,LDo),e(G,J2),e(J2,Xbe),e(Xbe,yDo),e(J2,xDo),e(J2,kz),e(kz,$Do),e(J2,kDo),e(G,SDo),e(G,Y2),e(Y2,zbe),e(zbe,RDo),e(Y2,PDo),e(Y2,Sz),e(Sz,BDo),e(Y2,IDo),e(G,NDo),e(G,K2),e(K2,Qbe),e(Qbe,qDo),e(K2,jDo),e(K2,Rz),e(Rz,DDo),e(K2,GDo),e(G,ODo),e(G,Z2),e(Z2,Wbe),e(Wbe,VDo),e(Z2,XDo),e(Z2,Pz),e(Pz,zDo),e(Z2,QDo),e(G,WDo),e(G,e1),e(e1,Ube),e(Ube,UDo),e(e1,HDo),e(e1,Bz),e(Bz,JDo),e(e1,YDo),e(G,KDo),e(G,o1),e(o1,Hbe),e(Hbe,ZDo),e(o1,eGo),e(o1,Iz),e(Iz,oGo),e(o1,rGo),e(G,tGo),e(G,r1),e(r1,Jbe),e(Jbe,aGo),e(r1,nGo),e(r1,Nz),e(Nz,sGo),e(r1,lGo),e(G,iGo),e(G,t1),e(t1,Ybe),e(Ybe,dGo),e(t1,cGo),e(t1,qz),e(qz,mGo),e(t1,fGo),e(G,gGo),e(G,a1),e(a1,Kbe),e(Kbe,hGo),e(a1,uGo),e(a1,jz),e(jz,pGo),e(a1,_Go),e(G,bGo),e(G,n1),e(n1,Zbe),e(Zbe,vGo),e(n1,FGo),e(n1,Dz),e(Dz,TGo),e(n1,MGo),e(G,EGo),e(G,s1),e(s1,e2e),e(e2e,CGo),e(s1,wGo),e(s1,Gz),e(Gz,AGo),e(s1,LGo),e(G,yGo),e(G,l1),e(l1,o2e),e(o2e,xGo),e(l1,$Go),e(l1,Oz),e(Oz,kGo),e(l1,SGo),e(G,RGo),e(G,i1),e(i1,r2e),e(r2e,PGo),e(i1,BGo),e(i1,Vz),e(Vz,IGo),e(i1,NGo),e(G,qGo),e(G,d1),e(d1,t2e),e(t2e,jGo),e(d1,DGo),e(d1,Xz),e(Xz,GGo),e(d1,OGo),e(G,VGo),e(G,c1),e(c1,a2e),e(a2e,XGo),e(c1,zGo),e(c1,zz),e(zz,QGo),e(c1,WGo),e(G,UGo),e(G,m1),e(m1,n2e),e(n2e,HGo),e(m1,JGo),e(m1,Qz),e(Qz,YGo),e(m1,KGo),e(G,ZGo),e(G,f1),e(f1,s2e),e(s2e,eOo),e(f1,oOo),e(f1,Wz),e(Wz,rOo),e(f1,tOo),e(eo,aOo),e(eo,g1),e(g1,nOo),e(g1,l2e),e(l2e,sOo),e(g1,lOo),e(g1,i2e),e(i2e,iOo),e(eo,dOo),M(h1,eo,null),b(m,dZe,_),b(m,Ed,_),e(Ed,u1),e(u1,d2e),M(Cx,d2e,null),e(Ed,cOo),e(Ed,c2e),e(c2e,mOo),b(m,cZe,_),b(m,Io,_),M(wx,Io,null),e(Io,fOo),e(Io,Cd),e(Cd,gOo),e(Cd,Uz),e(Uz,hOo),e(Cd,uOo),e(Cd,Hz),e(Hz,pOo),e(Cd,_Oo),e(Io,bOo),e(Io,Ax),e(Ax,vOo),e(Ax,m2e),e(m2e,FOo),e(Ax,TOo),e(Io,MOo),e(Io,vt),M(Lx,vt,null),e(vt,EOo),e(vt,f2e),e(f2e,COo),e(vt,wOo),e(vt,wd),e(wd,AOo),e(wd,g2e),e(g2e,LOo),e(wd,yOo),e(wd,Jz),e(Jz,xOo),e(wd,$Oo),e(vt,kOo),M(p1,vt,null),e(Io,SOo),e(Io,oo),M(yx,oo,null),e(oo,ROo),e(oo,h2e),e(h2e,POo),e(oo,BOo),e(oo,Ka),e(Ka,IOo),e(Ka,u2e),e(u2e,NOo),e(Ka,qOo),e(Ka,p2e),e(p2e,jOo),e(Ka,DOo),e(Ka,_2e),e(_2e,GOo),e(Ka,OOo),e(oo,VOo),e(oo,Q),e(Q,_1),e(_1,b2e),e(b2e,XOo),e(_1,zOo),e(_1,Yz),e(Yz,QOo),e(_1,WOo),e(Q,UOo),e(Q,b1),e(b1,v2e),e(v2e,HOo),e(b1,JOo),e(b1,Kz),e(Kz,YOo),e(b1,KOo),e(Q,ZOo),e(Q,v1),e(v1,F2e),e(F2e,eVo),e(v1,oVo),e(v1,Zz),e(Zz,rVo),e(v1,tVo),e(Q,aVo),e(Q,F1),e(F1,T2e),e(T2e,nVo),e(F1,sVo),e(F1,eQ),e(eQ,lVo),e(F1,iVo),e(Q,dVo),e(Q,T1),e(T1,M2e),e(M2e,cVo),e(T1,mVo),e(T1,oQ),e(oQ,fVo),e(T1,gVo),e(Q,hVo),e(Q,M1),e(M1,E2e),e(E2e,uVo),e(M1,pVo),e(M1,rQ),e(rQ,_Vo),e(M1,bVo),e(Q,vVo),e(Q,E1),e(E1,C2e),e(C2e,FVo),e(E1,TVo),e(E1,tQ),e(tQ,MVo),e(E1,EVo),e(Q,CVo),e(Q,C1),e(C1,w2e),e(w2e,wVo),e(C1,AVo),e(C1,aQ),e(aQ,LVo),e(C1,yVo),e(Q,xVo),e(Q,w1),e(w1,A2e),e(A2e,$Vo),e(w1,kVo),e(w1,nQ),e(nQ,SVo),e(w1,RVo),e(Q,PVo),e(Q,A1),e(A1,L2e),e(L2e,BVo),e(A1,IVo),e(A1,sQ),e(sQ,NVo),e(A1,qVo),e(Q,jVo),e(Q,L1),e(L1,y2e),e(y2e,DVo),e(L1,GVo),e(L1,lQ),e(lQ,OVo),e(L1,VVo),e(Q,XVo),e(Q,y1),e(y1,x2e),e(x2e,zVo),e(y1,QVo),e(y1,iQ),e(iQ,WVo),e(y1,UVo),e(Q,HVo),e(Q,x1),e(x1,$2e),e($2e,JVo),e(x1,YVo),e(x1,dQ),e(dQ,KVo),e(x1,ZVo),e(Q,eXo),e(Q,$1),e($1,k2e),e(k2e,oXo),e($1,rXo),e($1,cQ),e(cQ,tXo),e($1,aXo),e(Q,nXo),e(Q,k1),e(k1,S2e),e(S2e,sXo),e(k1,lXo),e(k1,mQ),e(mQ,iXo),e(k1,dXo),e(Q,cXo),e(Q,S1),e(S1,R2e),e(R2e,mXo),e(S1,fXo),e(S1,fQ),e(fQ,gXo),e(S1,hXo),e(Q,uXo),e(Q,R1),e(R1,P2e),e(P2e,pXo),e(R1,_Xo),e(R1,gQ),e(gQ,bXo),e(R1,vXo),e(Q,FXo),e(Q,P1),e(P1,B2e),e(B2e,TXo),e(P1,MXo),e(P1,hQ),e(hQ,EXo),e(P1,CXo),e(Q,wXo),e(Q,B1),e(B1,I2e),e(I2e,AXo),e(B1,LXo),e(B1,uQ),e(uQ,yXo),e(B1,xXo),e(Q,$Xo),e(Q,I1),e(I1,N2e),e(N2e,kXo),e(I1,SXo),e(I1,pQ),e(pQ,RXo),e(I1,PXo),e(Q,BXo),e(Q,N1),e(N1,q2e),e(q2e,IXo),e(N1,NXo),e(N1,_Q),e(_Q,qXo),e(N1,jXo),e(Q,DXo),e(Q,q1),e(q1,j2e),e(j2e,GXo),e(q1,OXo),e(q1,bQ),e(bQ,VXo),e(q1,XXo),e(Q,zXo),e(Q,j1),e(j1,D2e),e(D2e,QXo),e(j1,WXo),e(j1,vQ),e(vQ,UXo),e(j1,HXo),e(Q,JXo),e(Q,D1),e(D1,G2e),e(G2e,YXo),e(D1,KXo),e(D1,FQ),e(FQ,ZXo),e(D1,ezo),e(Q,ozo),e(Q,G1),e(G1,O2e),e(O2e,rzo),e(G1,tzo),e(G1,TQ),e(TQ,azo),e(G1,nzo),e(Q,szo),e(Q,O1),e(O1,V2e),e(V2e,lzo),e(O1,izo),e(O1,MQ),e(MQ,dzo),e(O1,czo),e(Q,mzo),e(Q,V1),e(V1,X2e),e(X2e,fzo),e(V1,gzo),e(V1,EQ),e(EQ,hzo),e(V1,uzo),e(Q,pzo),e(Q,X1),e(X1,z2e),e(z2e,_zo),e(X1,bzo),e(X1,CQ),e(CQ,vzo),e(X1,Fzo),e(Q,Tzo),e(Q,z1),e(z1,Q2e),e(Q2e,Mzo),e(z1,Ezo),e(z1,wQ),e(wQ,Czo),e(z1,wzo),e(Q,Azo),e(Q,Q1),e(Q1,W2e),e(W2e,Lzo),e(Q1,yzo),e(Q1,AQ),e(AQ,xzo),e(Q1,$zo),e(Q,kzo),e(Q,W1),e(W1,U2e),e(U2e,Szo),e(W1,Rzo),e(W1,LQ),e(LQ,Pzo),e(W1,Bzo),e(Q,Izo),e(Q,U1),e(U1,H2e),e(H2e,Nzo),e(U1,qzo),e(U1,yQ),e(yQ,jzo),e(U1,Dzo),e(Q,Gzo),e(Q,H1),e(H1,J2e),e(J2e,Ozo),e(H1,Vzo),e(H1,xQ),e(xQ,Xzo),e(H1,zzo),e(Q,Qzo),e(Q,J1),e(J1,Y2e),e(Y2e,Wzo),e(J1,Uzo),e(J1,$Q),e($Q,Hzo),e(J1,Jzo),e(Q,Yzo),e(Q,Y1),e(Y1,K2e),e(K2e,Kzo),e(Y1,Zzo),e(Y1,kQ),e(kQ,eQo),e(Y1,oQo),e(Q,rQo),e(Q,K1),e(K1,Z2e),e(Z2e,tQo),e(K1,aQo),e(K1,SQ),e(SQ,nQo),e(K1,sQo),e(Q,lQo),e(Q,Z1),e(Z1,e1e),e(e1e,iQo),e(Z1,dQo),e(Z1,RQ),e(RQ,cQo),e(Z1,mQo),e(Q,fQo),e(Q,ev),e(ev,o1e),e(o1e,gQo),e(ev,hQo),e(ev,PQ),e(PQ,uQo),e(ev,pQo),e(Q,_Qo),e(Q,ov),e(ov,r1e),e(r1e,bQo),e(ov,vQo),e(ov,BQ),e(BQ,FQo),e(ov,TQo),e(Q,MQo),e(Q,rv),e(rv,t1e),e(t1e,EQo),e(rv,CQo),e(rv,IQ),e(IQ,wQo),e(rv,AQo),e(Q,LQo),e(Q,tv),e(tv,a1e),e(a1e,yQo),e(tv,xQo),e(tv,NQ),e(NQ,$Qo),e(tv,kQo),e(Q,SQo),e(Q,av),e(av,n1e),e(n1e,RQo),e(av,PQo),e(av,qQ),e(qQ,BQo),e(av,IQo),e(oo,NQo),e(oo,nv),e(nv,qQo),e(nv,s1e),e(s1e,jQo),e(nv,DQo),e(nv,l1e),e(l1e,GQo),e(oo,OQo),M(sv,oo,null),b(m,mZe,_),b(m,Ad,_),e(Ad,lv),e(lv,i1e),M(xx,i1e,null),e(Ad,VQo),e(Ad,d1e),e(d1e,XQo),b(m,fZe,_),b(m,No,_),M($x,No,null),e(No,zQo),e(No,Ld),e(Ld,QQo),e(Ld,jQ),e(jQ,WQo),e(Ld,UQo),e(Ld,DQ),e(DQ,HQo),e(Ld,JQo),e(No,YQo),e(No,kx),e(kx,KQo),e(kx,c1e),e(c1e,ZQo),e(kx,eWo),e(No,oWo),e(No,Ft),M(Sx,Ft,null),e(Ft,rWo),e(Ft,m1e),e(m1e,tWo),e(Ft,aWo),e(Ft,yd),e(yd,nWo),e(yd,f1e),e(f1e,sWo),e(yd,lWo),e(yd,GQ),e(GQ,iWo),e(yd,dWo),e(Ft,cWo),M(iv,Ft,null),e(No,mWo),e(No,ro),M(Rx,ro,null),e(ro,fWo),e(ro,g1e),e(g1e,gWo),e(ro,hWo),e(ro,Za),e(Za,uWo),e(Za,h1e),e(h1e,pWo),e(Za,_Wo),e(Za,u1e),e(u1e,bWo),e(Za,vWo),e(Za,p1e),e(p1e,FWo),e(Za,TWo),e(ro,MWo),e(ro,H),e(H,dv),e(dv,_1e),e(_1e,EWo),e(dv,CWo),e(dv,OQ),e(OQ,wWo),e(dv,AWo),e(H,LWo),e(H,cv),e(cv,b1e),e(b1e,yWo),e(cv,xWo),e(cv,VQ),e(VQ,$Wo),e(cv,kWo),e(H,SWo),e(H,mv),e(mv,v1e),e(v1e,RWo),e(mv,PWo),e(mv,XQ),e(XQ,BWo),e(mv,IWo),e(H,NWo),e(H,fv),e(fv,F1e),e(F1e,qWo),e(fv,jWo),e(fv,zQ),e(zQ,DWo),e(fv,GWo),e(H,OWo),e(H,gv),e(gv,T1e),e(T1e,VWo),e(gv,XWo),e(gv,QQ),e(QQ,zWo),e(gv,QWo),e(H,WWo),e(H,hv),e(hv,M1e),e(M1e,UWo),e(hv,HWo),e(hv,WQ),e(WQ,JWo),e(hv,YWo),e(H,KWo),e(H,uv),e(uv,E1e),e(E1e,ZWo),e(uv,eUo),e(uv,UQ),e(UQ,oUo),e(uv,rUo),e(H,tUo),e(H,pv),e(pv,C1e),e(C1e,aUo),e(pv,nUo),e(pv,HQ),e(HQ,sUo),e(pv,lUo),e(H,iUo),e(H,_v),e(_v,w1e),e(w1e,dUo),e(_v,cUo),e(_v,JQ),e(JQ,mUo),e(_v,fUo),e(H,gUo),e(H,bv),e(bv,A1e),e(A1e,hUo),e(bv,uUo),e(bv,YQ),e(YQ,pUo),e(bv,_Uo),e(H,bUo),e(H,vv),e(vv,L1e),e(L1e,vUo),e(vv,FUo),e(vv,KQ),e(KQ,TUo),e(vv,MUo),e(H,EUo),e(H,Fv),e(Fv,y1e),e(y1e,CUo),e(Fv,wUo),e(Fv,ZQ),e(ZQ,AUo),e(Fv,LUo),e(H,yUo),e(H,Tv),e(Tv,x1e),e(x1e,xUo),e(Tv,$Uo),e(Tv,eW),e(eW,kUo),e(Tv,SUo),e(H,RUo),e(H,Mv),e(Mv,$1e),e($1e,PUo),e(Mv,BUo),e(Mv,oW),e(oW,IUo),e(Mv,NUo),e(H,qUo),e(H,Ev),e(Ev,k1e),e(k1e,jUo),e(Ev,DUo),e(Ev,rW),e(rW,GUo),e(Ev,OUo),e(H,VUo),e(H,Cv),e(Cv,S1e),e(S1e,XUo),e(Cv,zUo),e(Cv,tW),e(tW,QUo),e(Cv,WUo),e(H,UUo),e(H,wv),e(wv,R1e),e(R1e,HUo),e(wv,JUo),e(wv,aW),e(aW,YUo),e(wv,KUo),e(H,ZUo),e(H,Av),e(Av,P1e),e(P1e,eHo),e(Av,oHo),e(Av,nW),e(nW,rHo),e(Av,tHo),e(H,aHo),e(H,Lv),e(Lv,B1e),e(B1e,nHo),e(Lv,sHo),e(Lv,sW),e(sW,lHo),e(Lv,iHo),e(H,dHo),e(H,yv),e(yv,I1e),e(I1e,cHo),e(yv,mHo),e(yv,lW),e(lW,fHo),e(yv,gHo),e(H,hHo),e(H,xv),e(xv,N1e),e(N1e,uHo),e(xv,pHo),e(xv,iW),e(iW,_Ho),e(xv,bHo),e(H,vHo),e(H,$v),e($v,q1e),e(q1e,FHo),e($v,THo),e($v,dW),e(dW,MHo),e($v,EHo),e(H,CHo),e(H,kv),e(kv,j1e),e(j1e,wHo),e(kv,AHo),e(kv,cW),e(cW,LHo),e(kv,yHo),e(H,xHo),e(H,Sv),e(Sv,D1e),e(D1e,$Ho),e(Sv,kHo),e(Sv,mW),e(mW,SHo),e(Sv,RHo),e(H,PHo),e(H,Rv),e(Rv,G1e),e(G1e,BHo),e(Rv,IHo),e(Rv,fW),e(fW,NHo),e(Rv,qHo),e(H,jHo),e(H,Pv),e(Pv,O1e),e(O1e,DHo),e(Pv,GHo),e(Pv,gW),e(gW,OHo),e(Pv,VHo),e(H,XHo),e(H,Bv),e(Bv,V1e),e(V1e,zHo),e(Bv,QHo),e(Bv,hW),e(hW,WHo),e(Bv,UHo),e(H,HHo),e(H,Iv),e(Iv,X1e),e(X1e,JHo),e(Iv,YHo),e(Iv,uW),e(uW,KHo),e(Iv,ZHo),e(H,eJo),e(H,Nv),e(Nv,z1e),e(z1e,oJo),e(Nv,rJo),e(Nv,pW),e(pW,tJo),e(Nv,aJo),e(H,nJo),e(H,qv),e(qv,Q1e),e(Q1e,sJo),e(qv,lJo),e(qv,_W),e(_W,iJo),e(qv,dJo),e(H,cJo),e(H,jv),e(jv,W1e),e(W1e,mJo),e(jv,fJo),e(jv,bW),e(bW,gJo),e(jv,hJo),e(H,uJo),e(H,Dv),e(Dv,U1e),e(U1e,pJo),e(Dv,_Jo),e(Dv,vW),e(vW,bJo),e(Dv,vJo),e(H,FJo),e(H,Gv),e(Gv,H1e),e(H1e,TJo),e(Gv,MJo),e(Gv,FW),e(FW,EJo),e(Gv,CJo),e(H,wJo),e(H,Ov),e(Ov,J1e),e(J1e,AJo),e(Ov,LJo),e(Ov,TW),e(TW,yJo),e(Ov,xJo),e(H,$Jo),e(H,Vv),e(Vv,Y1e),e(Y1e,kJo),e(Vv,SJo),e(Vv,K1e),e(K1e,RJo),e(Vv,PJo),e(H,BJo),e(H,Xv),e(Xv,Z1e),e(Z1e,IJo),e(Xv,NJo),e(Xv,MW),e(MW,qJo),e(Xv,jJo),e(H,DJo),e(H,zv),e(zv,eve),e(eve,GJo),e(zv,OJo),e(zv,EW),e(EW,VJo),e(zv,XJo),e(H,zJo),e(H,Qv),e(Qv,ove),e(ove,QJo),e(Qv,WJo),e(Qv,CW),e(CW,UJo),e(Qv,HJo),e(H,JJo),e(H,Wv),e(Wv,rve),e(rve,YJo),e(Wv,KJo),e(Wv,wW),e(wW,ZJo),e(Wv,eYo),e(ro,oYo),e(ro,Uv),e(Uv,rYo),e(Uv,tve),e(tve,tYo),e(Uv,aYo),e(Uv,ave),e(ave,nYo),e(ro,sYo),M(Hv,ro,null),b(m,gZe,_),b(m,xd,_),e(xd,Jv),e(Jv,nve),M(Px,nve,null),e(xd,lYo),e(xd,sve),e(sve,iYo),b(m,hZe,_),b(m,qo,_),M(Bx,qo,null),e(qo,dYo),e(qo,$d),e($d,cYo),e($d,AW),e(AW,mYo),e($d,fYo),e($d,LW),e(LW,gYo),e($d,hYo),e(qo,uYo),e(qo,Ix),e(Ix,pYo),e(Ix,lve),e(lve,_Yo),e(Ix,bYo),e(qo,vYo),e(qo,Tt),M(Nx,Tt,null),e(Tt,FYo),e(Tt,ive),e(ive,TYo),e(Tt,MYo),e(Tt,kd),e(kd,EYo),e(kd,dve),e(dve,CYo),e(kd,wYo),e(kd,yW),e(yW,AYo),e(kd,LYo),e(Tt,yYo),M(Yv,Tt,null),e(qo,xYo),e(qo,to),M(qx,to,null),e(to,$Yo),e(to,cve),e(cve,kYo),e(to,SYo),e(to,en),e(en,RYo),e(en,mve),e(mve,PYo),e(en,BYo),e(en,fve),e(fve,IYo),e(en,NYo),e(en,gve),e(gve,qYo),e(en,jYo),e(to,DYo),e(to,me),e(me,Kv),e(Kv,hve),e(hve,GYo),e(Kv,OYo),e(Kv,xW),e(xW,VYo),e(Kv,XYo),e(me,zYo),e(me,Zv),e(Zv,uve),e(uve,QYo),e(Zv,WYo),e(Zv,$W),e($W,UYo),e(Zv,HYo),e(me,JYo),e(me,eF),e(eF,pve),e(pve,YYo),e(eF,KYo),e(eF,kW),e(kW,ZYo),e(eF,eKo),e(me,oKo),e(me,oF),e(oF,_ve),e(_ve,rKo),e(oF,tKo),e(oF,SW),e(SW,aKo),e(oF,nKo),e(me,sKo),e(me,rF),e(rF,bve),e(bve,lKo),e(rF,iKo),e(rF,RW),e(RW,dKo),e(rF,cKo),e(me,mKo),e(me,tF),e(tF,vve),e(vve,fKo),e(tF,gKo),e(tF,PW),e(PW,hKo),e(tF,uKo),e(me,pKo),e(me,aF),e(aF,Fve),e(Fve,_Ko),e(aF,bKo),e(aF,BW),e(BW,vKo),e(aF,FKo),e(me,TKo),e(me,nF),e(nF,Tve),e(Tve,MKo),e(nF,EKo),e(nF,IW),e(IW,CKo),e(nF,wKo),e(me,AKo),e(me,sF),e(sF,Mve),e(Mve,LKo),e(sF,yKo),e(sF,NW),e(NW,xKo),e(sF,$Ko),e(me,kKo),e(me,lF),e(lF,Eve),e(Eve,SKo),e(lF,RKo),e(lF,qW),e(qW,PKo),e(lF,BKo),e(me,IKo),e(me,iF),e(iF,Cve),e(Cve,NKo),e(iF,qKo),e(iF,jW),e(jW,jKo),e(iF,DKo),e(me,GKo),e(me,dF),e(dF,wve),e(wve,OKo),e(dF,VKo),e(dF,DW),e(DW,XKo),e(dF,zKo),e(me,QKo),e(me,cF),e(cF,Ave),e(Ave,WKo),e(cF,UKo),e(cF,GW),e(GW,HKo),e(cF,JKo),e(me,YKo),e(me,mF),e(mF,Lve),e(Lve,KKo),e(mF,ZKo),e(mF,OW),e(OW,eZo),e(mF,oZo),e(me,rZo),e(me,fF),e(fF,yve),e(yve,tZo),e(fF,aZo),e(fF,VW),e(VW,nZo),e(fF,sZo),e(me,lZo),e(me,gF),e(gF,xve),e(xve,iZo),e(gF,dZo),e(gF,XW),e(XW,cZo),e(gF,mZo),e(me,fZo),e(me,hF),e(hF,$ve),e($ve,gZo),e(hF,hZo),e(hF,zW),e(zW,uZo),e(hF,pZo),e(me,_Zo),e(me,uF),e(uF,kve),e(kve,bZo),e(uF,vZo),e(uF,QW),e(QW,FZo),e(uF,TZo),e(me,MZo),e(me,pF),e(pF,Sve),e(Sve,EZo),e(pF,CZo),e(pF,WW),e(WW,wZo),e(pF,AZo),e(me,LZo),e(me,_F),e(_F,Rve),e(Rve,yZo),e(_F,xZo),e(_F,UW),e(UW,$Zo),e(_F,kZo),e(to,SZo),e(to,bF),e(bF,RZo),e(bF,Pve),e(Pve,PZo),e(bF,BZo),e(bF,Bve),e(Bve,IZo),e(to,NZo),M(vF,to,null),b(m,uZe,_),b(m,Sd,_),e(Sd,FF),e(FF,Ive),M(jx,Ive,null),e(Sd,qZo),e(Sd,Nve),e(Nve,jZo),b(m,pZe,_),b(m,jo,_),M(Dx,jo,null),e(jo,DZo),e(jo,Rd),e(Rd,GZo),e(Rd,HW),e(HW,OZo),e(Rd,VZo),e(Rd,JW),e(JW,XZo),e(Rd,zZo),e(jo,QZo),e(jo,Gx),e(Gx,WZo),e(Gx,qve),e(qve,UZo),e(Gx,HZo),e(jo,JZo),e(jo,Mt),M(Ox,Mt,null),e(Mt,YZo),e(Mt,jve),e(jve,KZo),e(Mt,ZZo),e(Mt,Pd),e(Pd,eer),e(Pd,Dve),e(Dve,oer),e(Pd,rer),e(Pd,YW),e(YW,ter),e(Pd,aer),e(Mt,ner),M(TF,Mt,null),e(jo,ser),e(jo,ao),M(Vx,ao,null),e(ao,ler),e(ao,Gve),e(Gve,ier),e(ao,der),e(ao,on),e(on,cer),e(on,Ove),e(Ove,mer),e(on,fer),e(on,Vve),e(Vve,ger),e(on,her),e(on,Xve),e(Xve,uer),e(on,per),e(ao,_er),e(ao,j),e(j,MF),e(MF,zve),e(zve,ber),e(MF,ver),e(MF,KW),e(KW,Fer),e(MF,Ter),e(j,Mer),e(j,EF),e(EF,Qve),e(Qve,Eer),e(EF,Cer),e(EF,ZW),e(ZW,wer),e(EF,Aer),e(j,Ler),e(j,CF),e(CF,Wve),e(Wve,yer),e(CF,xer),e(CF,eU),e(eU,$er),e(CF,ker),e(j,Ser),e(j,wF),e(wF,Uve),e(Uve,Rer),e(wF,Per),e(wF,oU),e(oU,Ber),e(wF,Ier),e(j,Ner),e(j,AF),e(AF,Hve),e(Hve,qer),e(AF,jer),e(AF,rU),e(rU,Der),e(AF,Ger),e(j,Oer),e(j,LF),e(LF,Jve),e(Jve,Ver),e(LF,Xer),e(LF,tU),e(tU,zer),e(LF,Qer),e(j,Wer),e(j,yF),e(yF,Yve),e(Yve,Uer),e(yF,Her),e(yF,aU),e(aU,Jer),e(yF,Yer),e(j,Ker),e(j,xF),e(xF,Kve),e(Kve,Zer),e(xF,eor),e(xF,nU),e(nU,oor),e(xF,ror),e(j,tor),e(j,$F),e($F,Zve),e(Zve,aor),e($F,nor),e($F,sU),e(sU,sor),e($F,lor),e(j,ior),e(j,kF),e(kF,eFe),e(eFe,dor),e(kF,cor),e(kF,lU),e(lU,mor),e(kF,gor),e(j,hor),e(j,SF),e(SF,oFe),e(oFe,uor),e(SF,por),e(SF,iU),e(iU,_or),e(SF,bor),e(j,vor),e(j,RF),e(RF,rFe),e(rFe,For),e(RF,Tor),e(RF,dU),e(dU,Mor),e(RF,Eor),e(j,Cor),e(j,PF),e(PF,tFe),e(tFe,wor),e(PF,Aor),e(PF,cU),e(cU,Lor),e(PF,yor),e(j,xor),e(j,BF),e(BF,aFe),e(aFe,$or),e(BF,kor),e(BF,mU),e(mU,Sor),e(BF,Ror),e(j,Por),e(j,IF),e(IF,nFe),e(nFe,Bor),e(IF,Ior),e(IF,fU),e(fU,Nor),e(IF,qor),e(j,jor),e(j,NF),e(NF,sFe),e(sFe,Dor),e(NF,Gor),e(NF,gU),e(gU,Oor),e(NF,Vor),e(j,Xor),e(j,qF),e(qF,lFe),e(lFe,zor),e(qF,Qor),e(qF,hU),e(hU,Wor),e(qF,Uor),e(j,Hor),e(j,jF),e(jF,iFe),e(iFe,Jor),e(jF,Yor),e(jF,uU),e(uU,Kor),e(jF,Zor),e(j,err),e(j,DF),e(DF,dFe),e(dFe,orr),e(DF,rrr),e(DF,pU),e(pU,trr),e(DF,arr),e(j,nrr),e(j,GF),e(GF,cFe),e(cFe,srr),e(GF,lrr),e(GF,_U),e(_U,irr),e(GF,drr),e(j,crr),e(j,OF),e(OF,mFe),e(mFe,mrr),e(OF,frr),e(OF,bU),e(bU,grr),e(OF,hrr),e(j,urr),e(j,VF),e(VF,fFe),e(fFe,prr),e(VF,_rr),e(VF,vU),e(vU,brr),e(VF,vrr),e(j,Frr),e(j,XF),e(XF,gFe),e(gFe,Trr),e(XF,Mrr),e(XF,FU),e(FU,Err),e(XF,Crr),e(j,wrr),e(j,zF),e(zF,hFe),e(hFe,Arr),e(zF,Lrr),e(zF,TU),e(TU,yrr),e(zF,xrr),e(j,$rr),e(j,QF),e(QF,uFe),e(uFe,krr),e(QF,Srr),e(QF,MU),e(MU,Rrr),e(QF,Prr),e(j,Brr),e(j,WF),e(WF,pFe),e(pFe,Irr),e(WF,Nrr),e(WF,EU),e(EU,qrr),e(WF,jrr),e(j,Drr),e(j,UF),e(UF,_Fe),e(_Fe,Grr),e(UF,Orr),e(UF,CU),e(CU,Vrr),e(UF,Xrr),e(j,zrr),e(j,HF),e(HF,bFe),e(bFe,Qrr),e(HF,Wrr),e(HF,wU),e(wU,Urr),e(HF,Hrr),e(j,Jrr),e(j,JF),e(JF,vFe),e(vFe,Yrr),e(JF,Krr),e(JF,AU),e(AU,Zrr),e(JF,etr),e(j,otr),e(j,YF),e(YF,FFe),e(FFe,rtr),e(YF,ttr),e(YF,LU),e(LU,atr),e(YF,ntr),e(j,str),e(j,KF),e(KF,TFe),e(TFe,ltr),e(KF,itr),e(KF,yU),e(yU,dtr),e(KF,ctr),e(j,mtr),e(j,ZF),e(ZF,MFe),e(MFe,ftr),e(ZF,gtr),e(ZF,xU),e(xU,htr),e(ZF,utr),e(j,ptr),e(j,eT),e(eT,EFe),e(EFe,_tr),e(eT,btr),e(eT,$U),e($U,vtr),e(eT,Ftr),e(j,Ttr),e(j,oT),e(oT,CFe),e(CFe,Mtr),e(oT,Etr),e(oT,kU),e(kU,Ctr),e(oT,wtr),e(j,Atr),e(j,rT),e(rT,wFe),e(wFe,Ltr),e(rT,ytr),e(rT,SU),e(SU,xtr),e(rT,$tr),e(j,ktr),e(j,tT),e(tT,AFe),e(AFe,Str),e(tT,Rtr),e(tT,RU),e(RU,Ptr),e(tT,Btr),e(j,Itr),e(j,aT),e(aT,LFe),e(LFe,Ntr),e(aT,qtr),e(aT,PU),e(PU,jtr),e(aT,Dtr),e(j,Gtr),e(j,nT),e(nT,yFe),e(yFe,Otr),e(nT,Vtr),e(nT,BU),e(BU,Xtr),e(nT,ztr),e(j,Qtr),e(j,sT),e(sT,xFe),e(xFe,Wtr),e(sT,Utr),e(sT,IU),e(IU,Htr),e(sT,Jtr),e(j,Ytr),e(j,lT),e(lT,$Fe),e($Fe,Ktr),e(lT,Ztr),e(lT,NU),e(NU,ear),e(lT,oar),e(j,rar),e(j,iT),e(iT,kFe),e(kFe,tar),e(iT,aar),e(iT,qU),e(qU,nar),e(iT,sar),e(j,lar),e(j,dT),e(dT,SFe),e(SFe,iar),e(dT,dar),e(dT,jU),e(jU,car),e(dT,mar),e(j,far),e(j,cT),e(cT,RFe),e(RFe,gar),e(cT,har),e(cT,DU),e(DU,uar),e(cT,par),e(j,_ar),e(j,mT),e(mT,PFe),e(PFe,bar),e(mT,Far),e(mT,GU),e(GU,Tar),e(mT,Mar),e(j,Ear),e(j,fT),e(fT,BFe),e(BFe,Car),e(fT,war),e(fT,OU),e(OU,Aar),e(fT,Lar),e(j,yar),e(j,gT),e(gT,IFe),e(IFe,xar),e(gT,$ar),e(gT,VU),e(VU,kar),e(gT,Sar),e(j,Rar),e(j,hT),e(hT,NFe),e(NFe,Par),e(hT,Bar),e(hT,XU),e(XU,Iar),e(hT,Nar),e(j,qar),e(j,uT),e(uT,qFe),e(qFe,jar),e(uT,Dar),e(uT,zU),e(zU,Gar),e(uT,Oar),e(j,Var),e(j,pT),e(pT,jFe),e(jFe,Xar),e(pT,zar),e(pT,QU),e(QU,Qar),e(pT,War),e(j,Uar),e(j,_T),e(_T,DFe),e(DFe,Har),e(_T,Jar),e(_T,WU),e(WU,Yar),e(_T,Kar),e(j,Zar),e(j,bT),e(bT,GFe),e(GFe,enr),e(bT,onr),e(bT,UU),e(UU,rnr),e(bT,tnr),e(j,anr),e(j,vT),e(vT,OFe),e(OFe,nnr),e(vT,snr),e(vT,HU),e(HU,lnr),e(vT,inr),e(j,dnr),e(j,FT),e(FT,VFe),e(VFe,cnr),e(FT,mnr),e(FT,JU),e(JU,fnr),e(FT,gnr),e(ao,hnr),e(ao,TT),e(TT,unr),e(TT,XFe),e(XFe,pnr),e(TT,_nr),e(TT,zFe),e(zFe,bnr),e(ao,vnr),M(MT,ao,null),b(m,_Ze,_),b(m,Bd,_),e(Bd,ET),e(ET,QFe),M(Xx,QFe,null),e(Bd,Fnr),e(Bd,WFe),e(WFe,Tnr),b(m,bZe,_),b(m,Do,_),M(zx,Do,null),e(Do,Mnr),e(Do,Id),e(Id,Enr),e(Id,YU),e(YU,Cnr),e(Id,wnr),e(Id,KU),e(KU,Anr),e(Id,Lnr),e(Do,ynr),e(Do,Qx),e(Qx,xnr),e(Qx,UFe),e(UFe,$nr),e(Qx,knr),e(Do,Snr),e(Do,Et),M(Wx,Et,null),e(Et,Rnr),e(Et,HFe),e(HFe,Pnr),e(Et,Bnr),e(Et,Nd),e(Nd,Inr),e(Nd,JFe),e(JFe,Nnr),e(Nd,qnr),e(Nd,ZU),e(ZU,jnr),e(Nd,Dnr),e(Et,Gnr),M(CT,Et,null),e(Do,Onr),e(Do,no),M(Ux,no,null),e(no,Vnr),e(no,YFe),e(YFe,Xnr),e(no,znr),e(no,rn),e(rn,Qnr),e(rn,KFe),e(KFe,Wnr),e(rn,Unr),e(rn,ZFe),e(ZFe,Hnr),e(rn,Jnr),e(rn,eTe),e(eTe,Ynr),e(rn,Knr),e(no,Znr),e(no,Z),e(Z,wT),e(wT,oTe),e(oTe,esr),e(wT,osr),e(wT,eH),e(eH,rsr),e(wT,tsr),e(Z,asr),e(Z,AT),e(AT,rTe),e(rTe,nsr),e(AT,ssr),e(AT,oH),e(oH,lsr),e(AT,isr),e(Z,dsr),e(Z,LT),e(LT,tTe),e(tTe,csr),e(LT,msr),e(LT,rH),e(rH,fsr),e(LT,gsr),e(Z,hsr),e(Z,yT),e(yT,aTe),e(aTe,usr),e(yT,psr),e(yT,tH),e(tH,_sr),e(yT,bsr),e(Z,vsr),e(Z,xT),e(xT,nTe),e(nTe,Fsr),e(xT,Tsr),e(xT,aH),e(aH,Msr),e(xT,Esr),e(Z,Csr),e(Z,$T),e($T,sTe),e(sTe,wsr),e($T,Asr),e($T,nH),e(nH,Lsr),e($T,ysr),e(Z,xsr),e(Z,kT),e(kT,lTe),e(lTe,$sr),e(kT,ksr),e(kT,sH),e(sH,Ssr),e(kT,Rsr),e(Z,Psr),e(Z,ST),e(ST,iTe),e(iTe,Bsr),e(ST,Isr),e(ST,lH),e(lH,Nsr),e(ST,qsr),e(Z,jsr),e(Z,RT),e(RT,dTe),e(dTe,Dsr),e(RT,Gsr),e(RT,iH),e(iH,Osr),e(RT,Vsr),e(Z,Xsr),e(Z,PT),e(PT,cTe),e(cTe,zsr),e(PT,Qsr),e(PT,dH),e(dH,Wsr),e(PT,Usr),e(Z,Hsr),e(Z,BT),e(BT,mTe),e(mTe,Jsr),e(BT,Ysr),e(BT,cH),e(cH,Ksr),e(BT,Zsr),e(Z,elr),e(Z,IT),e(IT,fTe),e(fTe,olr),e(IT,rlr),e(IT,mH),e(mH,tlr),e(IT,alr),e(Z,nlr),e(Z,NT),e(NT,gTe),e(gTe,slr),e(NT,llr),e(NT,fH),e(fH,ilr),e(NT,dlr),e(Z,clr),e(Z,qT),e(qT,hTe),e(hTe,mlr),e(qT,flr),e(qT,gH),e(gH,glr),e(qT,hlr),e(Z,ulr),e(Z,jT),e(jT,uTe),e(uTe,plr),e(jT,_lr),e(jT,hH),e(hH,blr),e(jT,vlr),e(Z,Flr),e(Z,DT),e(DT,pTe),e(pTe,Tlr),e(DT,Mlr),e(DT,uH),e(uH,Elr),e(DT,Clr),e(Z,wlr),e(Z,GT),e(GT,_Te),e(_Te,Alr),e(GT,Llr),e(GT,pH),e(pH,ylr),e(GT,xlr),e(Z,$lr),e(Z,OT),e(OT,bTe),e(bTe,klr),e(OT,Slr),e(OT,_H),e(_H,Rlr),e(OT,Plr),e(Z,Blr),e(Z,VT),e(VT,vTe),e(vTe,Ilr),e(VT,Nlr),e(VT,bH),e(bH,qlr),e(VT,jlr),e(Z,Dlr),e(Z,XT),e(XT,FTe),e(FTe,Glr),e(XT,Olr),e(XT,vH),e(vH,Vlr),e(XT,Xlr),e(Z,zlr),e(Z,zT),e(zT,TTe),e(TTe,Qlr),e(zT,Wlr),e(zT,FH),e(FH,Ulr),e(zT,Hlr),e(Z,Jlr),e(Z,QT),e(QT,MTe),e(MTe,Ylr),e(QT,Klr),e(QT,TH),e(TH,Zlr),e(QT,eir),e(Z,oir),e(Z,WT),e(WT,ETe),e(ETe,rir),e(WT,tir),e(WT,MH),e(MH,air),e(WT,nir),e(Z,sir),e(Z,UT),e(UT,CTe),e(CTe,lir),e(UT,iir),e(UT,EH),e(EH,dir),e(UT,cir),e(Z,mir),e(Z,HT),e(HT,wTe),e(wTe,fir),e(HT,gir),e(HT,CH),e(CH,hir),e(HT,uir),e(Z,pir),e(Z,JT),e(JT,ATe),e(ATe,_ir),e(JT,bir),e(JT,wH),e(wH,vir),e(JT,Fir),e(Z,Tir),e(Z,YT),e(YT,LTe),e(LTe,Mir),e(YT,Eir),e(YT,AH),e(AH,Cir),e(YT,wir),e(Z,Air),e(Z,KT),e(KT,yTe),e(yTe,Lir),e(KT,yir),e(KT,LH),e(LH,xir),e(KT,$ir),e(Z,kir),e(Z,ZT),e(ZT,xTe),e(xTe,Sir),e(ZT,Rir),e(ZT,yH),e(yH,Pir),e(ZT,Bir),e(Z,Iir),e(Z,eM),e(eM,$Te),e($Te,Nir),e(eM,qir),e(eM,xH),e(xH,jir),e(eM,Dir),e(Z,Gir),e(Z,oM),e(oM,kTe),e(kTe,Oir),e(oM,Vir),e(oM,$H),e($H,Xir),e(oM,zir),e(Z,Qir),e(Z,rM),e(rM,STe),e(STe,Wir),e(rM,Uir),e(rM,kH),e(kH,Hir),e(rM,Jir),e(no,Yir),e(no,tM),e(tM,Kir),e(tM,RTe),e(RTe,Zir),e(tM,edr),e(tM,PTe),e(PTe,odr),e(no,rdr),M(aM,no,null),b(m,vZe,_),b(m,qd,_),e(qd,nM),e(nM,BTe),M(Hx,BTe,null),e(qd,tdr),e(qd,ITe),e(ITe,adr),b(m,FZe,_),b(m,Go,_),M(Jx,Go,null),e(Go,ndr),e(Go,jd),e(jd,sdr),e(jd,SH),e(SH,ldr),e(jd,idr),e(jd,RH),e(RH,ddr),e(jd,cdr),e(Go,mdr),e(Go,Yx),e(Yx,fdr),e(Yx,NTe),e(NTe,gdr),e(Yx,hdr),e(Go,udr),e(Go,Ct),M(Kx,Ct,null),e(Ct,pdr),e(Ct,qTe),e(qTe,_dr),e(Ct,bdr),e(Ct,Dd),e(Dd,vdr),e(Dd,jTe),e(jTe,Fdr),e(Dd,Tdr),e(Dd,PH),e(PH,Mdr),e(Dd,Edr),e(Ct,Cdr),M(sM,Ct,null),e(Go,wdr),e(Go,so),M(Zx,so,null),e(so,Adr),e(so,DTe),e(DTe,Ldr),e(so,ydr),e(so,tn),e(tn,xdr),e(tn,GTe),e(GTe,$dr),e(tn,kdr),e(tn,OTe),e(OTe,Sdr),e(tn,Rdr),e(tn,VTe),e(VTe,Pdr),e(tn,Bdr),e(so,Idr),e(so,Ue),e(Ue,lM),e(lM,XTe),e(XTe,Ndr),e(lM,qdr),e(lM,BH),e(BH,jdr),e(lM,Ddr),e(Ue,Gdr),e(Ue,iM),e(iM,zTe),e(zTe,Odr),e(iM,Vdr),e(iM,IH),e(IH,Xdr),e(iM,zdr),e(Ue,Qdr),e(Ue,dM),e(dM,QTe),e(QTe,Wdr),e(dM,Udr),e(dM,NH),e(NH,Hdr),e(dM,Jdr),e(Ue,Ydr),e(Ue,cM),e(cM,WTe),e(WTe,Kdr),e(cM,Zdr),e(cM,qH),e(qH,ecr),e(cM,ocr),e(Ue,rcr),e(Ue,mM),e(mM,UTe),e(UTe,tcr),e(mM,acr),e(mM,jH),e(jH,ncr),e(mM,scr),e(Ue,lcr),e(Ue,fM),e(fM,HTe),e(HTe,icr),e(fM,dcr),e(fM,DH),e(DH,ccr),e(fM,mcr),e(Ue,fcr),e(Ue,gM),e(gM,JTe),e(JTe,gcr),e(gM,hcr),e(gM,GH),e(GH,ucr),e(gM,pcr),e(so,_cr),e(so,hM),e(hM,bcr),e(hM,YTe),e(YTe,vcr),e(hM,Fcr),e(hM,KTe),e(KTe,Tcr),e(so,Mcr),M(uM,so,null),b(m,TZe,_),b(m,Gd,_),e(Gd,pM),e(pM,ZTe),M(e$,ZTe,null),e(Gd,Ecr),e(Gd,eMe),e(eMe,Ccr),b(m,MZe,_),b(m,Oo,_),M(o$,Oo,null),e(Oo,wcr),e(Oo,Od),e(Od,Acr),e(Od,OH),e(OH,Lcr),e(Od,ycr),e(Od,VH),e(VH,xcr),e(Od,$cr),e(Oo,kcr),e(Oo,r$),e(r$,Scr),e(r$,oMe),e(oMe,Rcr),e(r$,Pcr),e(Oo,Bcr),e(Oo,wt),M(t$,wt,null),e(wt,Icr),e(wt,rMe),e(rMe,Ncr),e(wt,qcr),e(wt,Vd),e(Vd,jcr),e(Vd,tMe),e(tMe,Dcr),e(Vd,Gcr),e(Vd,XH),e(XH,Ocr),e(Vd,Vcr),e(wt,Xcr),M(_M,wt,null),e(Oo,zcr),e(Oo,lo),M(a$,lo,null),e(lo,Qcr),e(lo,aMe),e(aMe,Wcr),e(lo,Ucr),e(lo,an),e(an,Hcr),e(an,nMe),e(nMe,Jcr),e(an,Ycr),e(an,sMe),e(sMe,Kcr),e(an,Zcr),e(an,lMe),e(lMe,emr),e(an,omr),e(lo,rmr),e(lo,J),e(J,bM),e(bM,iMe),e(iMe,tmr),e(bM,amr),e(bM,zH),e(zH,nmr),e(bM,smr),e(J,lmr),e(J,vM),e(vM,dMe),e(dMe,imr),e(vM,dmr),e(vM,QH),e(QH,cmr),e(vM,mmr),e(J,fmr),e(J,FM),e(FM,cMe),e(cMe,gmr),e(FM,hmr),e(FM,WH),e(WH,umr),e(FM,pmr),e(J,_mr),e(J,TM),e(TM,mMe),e(mMe,bmr),e(TM,vmr),e(TM,UH),e(UH,Fmr),e(TM,Tmr),e(J,Mmr),e(J,MM),e(MM,fMe),e(fMe,Emr),e(MM,Cmr),e(MM,HH),e(HH,wmr),e(MM,Amr),e(J,Lmr),e(J,EM),e(EM,gMe),e(gMe,ymr),e(EM,xmr),e(EM,JH),e(JH,$mr),e(EM,kmr),e(J,Smr),e(J,CM),e(CM,hMe),e(hMe,Rmr),e(CM,Pmr),e(CM,YH),e(YH,Bmr),e(CM,Imr),e(J,Nmr),e(J,wM),e(wM,uMe),e(uMe,qmr),e(wM,jmr),e(wM,KH),e(KH,Dmr),e(wM,Gmr),e(J,Omr),e(J,AM),e(AM,pMe),e(pMe,Vmr),e(AM,Xmr),e(AM,ZH),e(ZH,zmr),e(AM,Qmr),e(J,Wmr),e(J,LM),e(LM,_Me),e(_Me,Umr),e(LM,Hmr),e(LM,eJ),e(eJ,Jmr),e(LM,Ymr),e(J,Kmr),e(J,yM),e(yM,bMe),e(bMe,Zmr),e(yM,efr),e(yM,oJ),e(oJ,ofr),e(yM,rfr),e(J,tfr),e(J,xM),e(xM,vMe),e(vMe,afr),e(xM,nfr),e(xM,rJ),e(rJ,sfr),e(xM,lfr),e(J,ifr),e(J,$M),e($M,FMe),e(FMe,dfr),e($M,cfr),e($M,tJ),e(tJ,mfr),e($M,ffr),e(J,gfr),e(J,kM),e(kM,TMe),e(TMe,hfr),e(kM,ufr),e(kM,aJ),e(aJ,pfr),e(kM,_fr),e(J,bfr),e(J,SM),e(SM,MMe),e(MMe,vfr),e(SM,Ffr),e(SM,nJ),e(nJ,Tfr),e(SM,Mfr),e(J,Efr),e(J,RM),e(RM,EMe),e(EMe,Cfr),e(RM,wfr),e(RM,sJ),e(sJ,Afr),e(RM,Lfr),e(J,yfr),e(J,PM),e(PM,CMe),e(CMe,xfr),e(PM,$fr),e(PM,lJ),e(lJ,kfr),e(PM,Sfr),e(J,Rfr),e(J,BM),e(BM,wMe),e(wMe,Pfr),e(BM,Bfr),e(BM,iJ),e(iJ,Ifr),e(BM,Nfr),e(J,qfr),e(J,IM),e(IM,AMe),e(AMe,jfr),e(IM,Dfr),e(IM,dJ),e(dJ,Gfr),e(IM,Ofr),e(J,Vfr),e(J,NM),e(NM,LMe),e(LMe,Xfr),e(NM,zfr),e(NM,cJ),e(cJ,Qfr),e(NM,Wfr),e(J,Ufr),e(J,qM),e(qM,yMe),e(yMe,Hfr),e(qM,Jfr),e(qM,mJ),e(mJ,Yfr),e(qM,Kfr),e(J,Zfr),e(J,jM),e(jM,xMe),e(xMe,egr),e(jM,ogr),e(jM,fJ),e(fJ,rgr),e(jM,tgr),e(J,agr),e(J,DM),e(DM,$Me),e($Me,ngr),e(DM,sgr),e(DM,gJ),e(gJ,lgr),e(DM,igr),e(J,dgr),e(J,GM),e(GM,kMe),e(kMe,cgr),e(GM,mgr),e(GM,hJ),e(hJ,fgr),e(GM,ggr),e(J,hgr),e(J,OM),e(OM,SMe),e(SMe,ugr),e(OM,pgr),e(OM,uJ),e(uJ,_gr),e(OM,bgr),e(J,vgr),e(J,VM),e(VM,RMe),e(RMe,Fgr),e(VM,Tgr),e(VM,pJ),e(pJ,Mgr),e(VM,Egr),e(J,Cgr),e(J,XM),e(XM,PMe),e(PMe,wgr),e(XM,Agr),e(XM,_J),e(_J,Lgr),e(XM,ygr),e(J,xgr),e(J,zM),e(zM,BMe),e(BMe,$gr),e(zM,kgr),e(zM,bJ),e(bJ,Sgr),e(zM,Rgr),e(J,Pgr),e(J,QM),e(QM,IMe),e(IMe,Bgr),e(QM,Igr),e(QM,vJ),e(vJ,Ngr),e(QM,qgr),e(J,jgr),e(J,WM),e(WM,NMe),e(NMe,Dgr),e(WM,Ggr),e(WM,FJ),e(FJ,Ogr),e(WM,Vgr),e(J,Xgr),e(J,UM),e(UM,qMe),e(qMe,zgr),e(UM,Qgr),e(UM,TJ),e(TJ,Wgr),e(UM,Ugr),e(J,Hgr),e(J,HM),e(HM,jMe),e(jMe,Jgr),e(HM,Ygr),e(HM,MJ),e(MJ,Kgr),e(HM,Zgr),e(J,ehr),e(J,JM),e(JM,DMe),e(DMe,ohr),e(JM,rhr),e(JM,EJ),e(EJ,thr),e(JM,ahr),e(J,nhr),e(J,YM),e(YM,GMe),e(GMe,shr),e(YM,lhr),e(YM,CJ),e(CJ,ihr),e(YM,dhr),e(J,chr),e(J,KM),e(KM,OMe),e(OMe,mhr),e(KM,fhr),e(KM,wJ),e(wJ,ghr),e(KM,hhr),e(J,uhr),e(J,ZM),e(ZM,VMe),e(VMe,phr),e(ZM,_hr),e(ZM,AJ),e(AJ,bhr),e(ZM,vhr),e(J,Fhr),e(J,eE),e(eE,XMe),e(XMe,Thr),e(eE,Mhr),e(eE,LJ),e(LJ,Ehr),e(eE,Chr),e(J,whr),e(J,oE),e(oE,zMe),e(zMe,Ahr),e(oE,Lhr),e(oE,yJ),e(yJ,yhr),e(oE,xhr),e(lo,$hr),e(lo,rE),e(rE,khr),e(rE,QMe),e(QMe,Shr),e(rE,Rhr),e(rE,WMe),e(WMe,Phr),e(lo,Bhr),M(tE,lo,null),b(m,EZe,_),b(m,Xd,_),e(Xd,aE),e(aE,UMe),M(n$,UMe,null),e(Xd,Ihr),e(Xd,HMe),e(HMe,Nhr),b(m,CZe,_),b(m,Vo,_),M(s$,Vo,null),e(Vo,qhr),e(Vo,zd),e(zd,jhr),e(zd,xJ),e(xJ,Dhr),e(zd,Ghr),e(zd,$J),e($J,Ohr),e(zd,Vhr),e(Vo,Xhr),e(Vo,l$),e(l$,zhr),e(l$,JMe),e(JMe,Qhr),e(l$,Whr),e(Vo,Uhr),e(Vo,At),M(i$,At,null),e(At,Hhr),e(At,YMe),e(YMe,Jhr),e(At,Yhr),e(At,Qd),e(Qd,Khr),e(Qd,KMe),e(KMe,Zhr),e(Qd,eur),e(Qd,kJ),e(kJ,our),e(Qd,rur),e(At,tur),M(nE,At,null),e(Vo,aur),e(Vo,io),M(d$,io,null),e(io,nur),e(io,ZMe),e(ZMe,sur),e(io,lur),e(io,nn),e(nn,iur),e(nn,eEe),e(eEe,dur),e(nn,cur),e(nn,oEe),e(oEe,mur),e(nn,fur),e(nn,rEe),e(rEe,gur),e(nn,hur),e(io,uur),e(io,V),e(V,sE),e(sE,tEe),e(tEe,pur),e(sE,_ur),e(sE,SJ),e(SJ,bur),e(sE,vur),e(V,Fur),e(V,lE),e(lE,aEe),e(aEe,Tur),e(lE,Mur),e(lE,RJ),e(RJ,Eur),e(lE,Cur),e(V,wur),e(V,iE),e(iE,nEe),e(nEe,Aur),e(iE,Lur),e(iE,PJ),e(PJ,yur),e(iE,xur),e(V,$ur),e(V,dE),e(dE,sEe),e(sEe,kur),e(dE,Sur),e(dE,BJ),e(BJ,Rur),e(dE,Pur),e(V,Bur),e(V,cE),e(cE,lEe),e(lEe,Iur),e(cE,Nur),e(cE,IJ),e(IJ,qur),e(cE,jur),e(V,Dur),e(V,mE),e(mE,iEe),e(iEe,Gur),e(mE,Our),e(mE,NJ),e(NJ,Vur),e(mE,Xur),e(V,zur),e(V,fE),e(fE,dEe),e(dEe,Qur),e(fE,Wur),e(fE,qJ),e(qJ,Uur),e(fE,Hur),e(V,Jur),e(V,gE),e(gE,cEe),e(cEe,Yur),e(gE,Kur),e(gE,jJ),e(jJ,Zur),e(gE,epr),e(V,opr),e(V,hE),e(hE,mEe),e(mEe,rpr),e(hE,tpr),e(hE,DJ),e(DJ,apr),e(hE,npr),e(V,spr),e(V,uE),e(uE,fEe),e(fEe,lpr),e(uE,ipr),e(uE,GJ),e(GJ,dpr),e(uE,cpr),e(V,mpr),e(V,pE),e(pE,gEe),e(gEe,fpr),e(pE,gpr),e(pE,OJ),e(OJ,hpr),e(pE,upr),e(V,ppr),e(V,_E),e(_E,hEe),e(hEe,_pr),e(_E,bpr),e(_E,VJ),e(VJ,vpr),e(_E,Fpr),e(V,Tpr),e(V,bE),e(bE,uEe),e(uEe,Mpr),e(bE,Epr),e(bE,XJ),e(XJ,Cpr),e(bE,wpr),e(V,Apr),e(V,vE),e(vE,pEe),e(pEe,Lpr),e(vE,ypr),e(vE,zJ),e(zJ,xpr),e(vE,$pr),e(V,kpr),e(V,FE),e(FE,_Ee),e(_Ee,Spr),e(FE,Rpr),e(FE,QJ),e(QJ,Ppr),e(FE,Bpr),e(V,Ipr),e(V,TE),e(TE,bEe),e(bEe,Npr),e(TE,qpr),e(TE,WJ),e(WJ,jpr),e(TE,Dpr),e(V,Gpr),e(V,ME),e(ME,vEe),e(vEe,Opr),e(ME,Vpr),e(ME,UJ),e(UJ,Xpr),e(ME,zpr),e(V,Qpr),e(V,EE),e(EE,FEe),e(FEe,Wpr),e(EE,Upr),e(EE,HJ),e(HJ,Hpr),e(EE,Jpr),e(V,Ypr),e(V,CE),e(CE,TEe),e(TEe,Kpr),e(CE,Zpr),e(CE,JJ),e(JJ,e_r),e(CE,o_r),e(V,r_r),e(V,wE),e(wE,MEe),e(MEe,t_r),e(wE,a_r),e(wE,YJ),e(YJ,n_r),e(wE,s_r),e(V,l_r),e(V,AE),e(AE,EEe),e(EEe,i_r),e(AE,d_r),e(AE,KJ),e(KJ,c_r),e(AE,m_r),e(V,f_r),e(V,LE),e(LE,CEe),e(CEe,g_r),e(LE,h_r),e(LE,ZJ),e(ZJ,u_r),e(LE,p_r),e(V,__r),e(V,yE),e(yE,wEe),e(wEe,b_r),e(yE,v_r),e(yE,eY),e(eY,F_r),e(yE,T_r),e(V,M_r),e(V,xE),e(xE,AEe),e(AEe,E_r),e(xE,C_r),e(xE,oY),e(oY,w_r),e(xE,A_r),e(V,L_r),e(V,$E),e($E,LEe),e(LEe,y_r),e($E,x_r),e($E,rY),e(rY,$_r),e($E,k_r),e(V,S_r),e(V,kE),e(kE,yEe),e(yEe,R_r),e(kE,P_r),e(kE,tY),e(tY,B_r),e(kE,I_r),e(V,N_r),e(V,SE),e(SE,xEe),e(xEe,q_r),e(SE,j_r),e(SE,aY),e(aY,D_r),e(SE,G_r),e(V,O_r),e(V,RE),e(RE,$Ee),e($Ee,V_r),e(RE,X_r),e(RE,nY),e(nY,z_r),e(RE,Q_r),e(V,W_r),e(V,PE),e(PE,kEe),e(kEe,U_r),e(PE,H_r),e(PE,sY),e(sY,J_r),e(PE,Y_r),e(V,K_r),e(V,BE),e(BE,SEe),e(SEe,Z_r),e(BE,ebr),e(BE,lY),e(lY,obr),e(BE,rbr),e(V,tbr),e(V,IE),e(IE,REe),e(REe,abr),e(IE,nbr),e(IE,iY),e(iY,sbr),e(IE,lbr),e(V,ibr),e(V,NE),e(NE,PEe),e(PEe,dbr),e(NE,cbr),e(NE,dY),e(dY,mbr),e(NE,fbr),e(V,gbr),e(V,qE),e(qE,BEe),e(BEe,hbr),e(qE,ubr),e(qE,cY),e(cY,pbr),e(qE,_br),e(V,bbr),e(V,jE),e(jE,IEe),e(IEe,vbr),e(jE,Fbr),e(jE,mY),e(mY,Tbr),e(jE,Mbr),e(V,Ebr),e(V,DE),e(DE,NEe),e(NEe,Cbr),e(DE,wbr),e(DE,fY),e(fY,Abr),e(DE,Lbr),e(V,ybr),e(V,GE),e(GE,qEe),e(qEe,xbr),e(GE,$br),e(GE,gY),e(gY,kbr),e(GE,Sbr),e(V,Rbr),e(V,OE),e(OE,jEe),e(jEe,Pbr),e(OE,Bbr),e(OE,hY),e(hY,Ibr),e(OE,Nbr),e(V,qbr),e(V,VE),e(VE,DEe),e(DEe,jbr),e(VE,Dbr),e(VE,uY),e(uY,Gbr),e(VE,Obr),e(V,Vbr),e(V,XE),e(XE,GEe),e(GEe,Xbr),e(XE,zbr),e(XE,pY),e(pY,Qbr),e(XE,Wbr),e(V,Ubr),e(V,zE),e(zE,OEe),e(OEe,Hbr),e(zE,Jbr),e(zE,_Y),e(_Y,Ybr),e(zE,Kbr),e(V,Zbr),e(V,QE),e(QE,VEe),e(VEe,e2r),e(QE,o2r),e(QE,bY),e(bY,r2r),e(QE,t2r),e(V,a2r),e(V,WE),e(WE,XEe),e(XEe,n2r),e(WE,s2r),e(WE,vY),e(vY,l2r),e(WE,i2r),e(V,d2r),e(V,UE),e(UE,zEe),e(zEe,c2r),e(UE,m2r),e(UE,FY),e(FY,f2r),e(UE,g2r),e(V,h2r),e(V,HE),e(HE,QEe),e(QEe,u2r),e(HE,p2r),e(HE,TY),e(TY,_2r),e(HE,b2r),e(io,v2r),e(io,JE),e(JE,F2r),e(JE,WEe),e(WEe,T2r),e(JE,M2r),e(JE,UEe),e(UEe,E2r),e(io,C2r),M(YE,io,null),b(m,wZe,_),b(m,Wd,_),e(Wd,KE),e(KE,HEe),M(c$,HEe,null),e(Wd,w2r),e(Wd,JEe),e(JEe,A2r),b(m,AZe,_),b(m,Xo,_),M(m$,Xo,null),e(Xo,L2r),e(Xo,Ud),e(Ud,y2r),e(Ud,MY),e(MY,x2r),e(Ud,$2r),e(Ud,EY),e(EY,k2r),e(Ud,S2r),e(Xo,R2r),e(Xo,f$),e(f$,P2r),e(f$,YEe),e(YEe,B2r),e(f$,I2r),e(Xo,N2r),e(Xo,Lt),M(g$,Lt,null),e(Lt,q2r),e(Lt,KEe),e(KEe,j2r),e(Lt,D2r),e(Lt,Hd),e(Hd,G2r),e(Hd,ZEe),e(ZEe,O2r),e(Hd,V2r),e(Hd,CY),e(CY,X2r),e(Hd,z2r),e(Lt,Q2r),M(ZE,Lt,null),e(Xo,W2r),e(Xo,co),M(h$,co,null),e(co,U2r),e(co,e4e),e(e4e,H2r),e(co,J2r),e(co,sn),e(sn,Y2r),e(sn,o4e),e(o4e,K2r),e(sn,Z2r),e(sn,r4e),e(r4e,e1r),e(sn,o1r),e(sn,t4e),e(t4e,r1r),e(sn,t1r),e(co,a1r),e(co,a4e),e(a4e,e4),e(e4,n4e),e(n4e,n1r),e(e4,s1r),e(e4,wY),e(wY,l1r),e(e4,i1r),e(co,d1r),e(co,o4),e(o4,c1r),e(o4,s4e),e(s4e,m1r),e(o4,f1r),e(o4,l4e),e(l4e,g1r),e(co,h1r),M(r4,co,null),b(m,LZe,_),b(m,Jd,_),e(Jd,t4),e(t4,i4e),M(u$,i4e,null),e(Jd,u1r),e(Jd,d4e),e(d4e,p1r),b(m,yZe,_),b(m,zo,_),M(p$,zo,null),e(zo,_1r),e(zo,Yd),e(Yd,b1r),e(Yd,AY),e(AY,v1r),e(Yd,F1r),e(Yd,LY),e(LY,T1r),e(Yd,M1r),e(zo,E1r),e(zo,_$),e(_$,C1r),e(_$,c4e),e(c4e,w1r),e(_$,A1r),e(zo,L1r),e(zo,yt),M(b$,yt,null),e(yt,y1r),e(yt,m4e),e(m4e,x1r),e(yt,$1r),e(yt,Kd),e(Kd,k1r),e(Kd,f4e),e(f4e,S1r),e(Kd,R1r),e(Kd,yY),e(yY,P1r),e(Kd,B1r),e(yt,I1r),M(a4,yt,null),e(zo,N1r),e(zo,mo),M(v$,mo,null),e(mo,q1r),e(mo,g4e),e(g4e,j1r),e(mo,D1r),e(mo,ln),e(ln,G1r),e(ln,h4e),e(h4e,O1r),e(ln,V1r),e(ln,u4e),e(u4e,X1r),e(ln,z1r),e(ln,p4e),e(p4e,Q1r),e(ln,W1r),e(mo,U1r),e(mo,Zd),e(Zd,n4),e(n4,_4e),e(_4e,H1r),e(n4,J1r),e(n4,xY),e(xY,Y1r),e(n4,K1r),e(Zd,Z1r),e(Zd,s4),e(s4,b4e),e(b4e,evr),e(s4,ovr),e(s4,$Y),e($Y,rvr),e(s4,tvr),e(Zd,avr),e(Zd,l4),e(l4,v4e),e(v4e,nvr),e(l4,svr),e(l4,kY),e(kY,lvr),e(l4,ivr),e(mo,dvr),e(mo,i4),e(i4,cvr),e(i4,F4e),e(F4e,mvr),e(i4,fvr),e(i4,T4e),e(T4e,gvr),e(mo,hvr),M(d4,mo,null),b(m,xZe,_),b(m,ec,_),e(ec,c4),e(c4,M4e),M(F$,M4e,null),e(ec,uvr),e(ec,E4e),e(E4e,pvr),b(m,$Ze,_),b(m,Qo,_),M(T$,Qo,null),e(Qo,_vr),e(Qo,oc),e(oc,bvr),e(oc,SY),e(SY,vvr),e(oc,Fvr),e(oc,RY),e(RY,Tvr),e(oc,Mvr),e(Qo,Evr),e(Qo,M$),e(M$,Cvr),e(M$,C4e),e(C4e,wvr),e(M$,Avr),e(Qo,Lvr),e(Qo,xt),M(E$,xt,null),e(xt,yvr),e(xt,w4e),e(w4e,xvr),e(xt,$vr),e(xt,rc),e(rc,kvr),e(rc,A4e),e(A4e,Svr),e(rc,Rvr),e(rc,PY),e(PY,Pvr),e(rc,Bvr),e(xt,Ivr),M(m4,xt,null),e(Qo,Nvr),e(Qo,fo),M(C$,fo,null),e(fo,qvr),e(fo,L4e),e(L4e,jvr),e(fo,Dvr),e(fo,dn),e(dn,Gvr),e(dn,y4e),e(y4e,Ovr),e(dn,Vvr),e(dn,x4e),e(x4e,Xvr),e(dn,zvr),e(dn,$4e),e($4e,Qvr),e(dn,Wvr),e(fo,Uvr),e(fo,be),e(be,f4),e(f4,k4e),e(k4e,Hvr),e(f4,Jvr),e(f4,BY),e(BY,Yvr),e(f4,Kvr),e(be,Zvr),e(be,g4),e(g4,S4e),e(S4e,eFr),e(g4,oFr),e(g4,IY),e(IY,rFr),e(g4,tFr),e(be,aFr),e(be,h4),e(h4,R4e),e(R4e,nFr),e(h4,sFr),e(h4,NY),e(NY,lFr),e(h4,iFr),e(be,dFr),e(be,u4),e(u4,P4e),e(P4e,cFr),e(u4,mFr),e(u4,qY),e(qY,fFr),e(u4,gFr),e(be,hFr),e(be,bl),e(bl,B4e),e(B4e,uFr),e(bl,pFr),e(bl,jY),e(jY,_Fr),e(bl,bFr),e(bl,DY),e(DY,vFr),e(bl,FFr),e(be,TFr),e(be,p4),e(p4,I4e),e(I4e,MFr),e(p4,EFr),e(p4,GY),e(GY,CFr),e(p4,wFr),e(be,AFr),e(be,vl),e(vl,N4e),e(N4e,LFr),e(vl,yFr),e(vl,OY),e(OY,xFr),e(vl,$Fr),e(vl,VY),e(VY,kFr),e(vl,SFr),e(be,RFr),e(be,_4),e(_4,q4e),e(q4e,PFr),e(_4,BFr),e(_4,XY),e(XY,IFr),e(_4,NFr),e(be,qFr),e(be,$t),e($t,j4e),e(j4e,jFr),e($t,DFr),e($t,zY),e(zY,GFr),e($t,OFr),e($t,QY),e(QY,VFr),e($t,XFr),e($t,WY),e(WY,zFr),e($t,QFr),e(be,WFr),e(be,b4),e(b4,D4e),e(D4e,UFr),e(b4,HFr),e(b4,UY),e(UY,JFr),e(b4,YFr),e(be,KFr),e(be,v4),e(v4,G4e),e(G4e,ZFr),e(v4,eTr),e(v4,HY),e(HY,oTr),e(v4,rTr),e(be,tTr),e(be,F4),e(F4,O4e),e(O4e,aTr),e(F4,nTr),e(F4,JY),e(JY,sTr),e(F4,lTr),e(be,iTr),e(be,T4),e(T4,V4e),e(V4e,dTr),e(T4,cTr),e(T4,YY),e(YY,mTr),e(T4,fTr),e(be,gTr),e(be,M4),e(M4,X4e),e(X4e,hTr),e(M4,uTr),e(M4,KY),e(KY,pTr),e(M4,_Tr),e(be,bTr),e(be,E4),e(E4,z4e),e(z4e,vTr),e(E4,FTr),e(E4,ZY),e(ZY,TTr),e(E4,MTr),e(be,ETr),e(be,C4),e(C4,Q4e),e(Q4e,CTr),e(C4,wTr),e(C4,eK),e(eK,ATr),e(C4,LTr),e(be,yTr),e(be,w4),e(w4,W4e),e(W4e,xTr),e(w4,$Tr),e(w4,oK),e(oK,kTr),e(w4,STr),e(be,RTr),e(be,A4),e(A4,U4e),e(U4e,PTr),e(A4,BTr),e(A4,rK),e(rK,ITr),e(A4,NTr),e(fo,qTr),e(fo,L4),e(L4,jTr),e(L4,H4e),e(H4e,DTr),e(L4,GTr),e(L4,J4e),e(J4e,OTr),e(fo,VTr),M(y4,fo,null),b(m,kZe,_),b(m,tc,_),e(tc,x4),e(x4,Y4e),M(w$,Y4e,null),e(tc,XTr),e(tc,K4e),e(K4e,zTr),b(m,SZe,_),b(m,Wo,_),M(A$,Wo,null),e(Wo,QTr),e(Wo,ac),e(ac,WTr),e(ac,tK),e(tK,UTr),e(ac,HTr),e(ac,aK),e(aK,JTr),e(ac,YTr),e(Wo,KTr),e(Wo,L$),e(L$,ZTr),e(L$,Z4e),e(Z4e,eMr),e(L$,oMr),e(Wo,rMr),e(Wo,kt),M(y$,kt,null),e(kt,tMr),e(kt,eCe),e(eCe,aMr),e(kt,nMr),e(kt,nc),e(nc,sMr),e(nc,oCe),e(oCe,lMr),e(nc,iMr),e(nc,nK),e(nK,dMr),e(nc,cMr),e(kt,mMr),M($4,kt,null),e(Wo,fMr),e(Wo,go),M(x$,go,null),e(go,gMr),e(go,rCe),e(rCe,hMr),e(go,uMr),e(go,cn),e(cn,pMr),e(cn,tCe),e(tCe,_Mr),e(cn,bMr),e(cn,aCe),e(aCe,vMr),e(cn,FMr),e(cn,nCe),e(nCe,TMr),e(cn,MMr),e(go,EMr),e(go,sCe),e(sCe,k4),e(k4,lCe),e(lCe,CMr),e(k4,wMr),e(k4,sK),e(sK,AMr),e(k4,LMr),e(go,yMr),e(go,S4),e(S4,xMr),e(S4,iCe),e(iCe,$Mr),e(S4,kMr),e(S4,dCe),e(dCe,SMr),e(go,RMr),M(R4,go,null),b(m,RZe,_),b(m,sc,_),e(sc,P4),e(P4,cCe),M($$,cCe,null),e(sc,PMr),e(sc,mCe),e(mCe,BMr),b(m,PZe,_),b(m,Uo,_),M(k$,Uo,null),e(Uo,IMr),e(Uo,lc),e(lc,NMr),e(lc,lK),e(lK,qMr),e(lc,jMr),e(lc,iK),e(iK,DMr),e(lc,GMr),e(Uo,OMr),e(Uo,S$),e(S$,VMr),e(S$,fCe),e(fCe,XMr),e(S$,zMr),e(Uo,QMr),e(Uo,St),M(R$,St,null),e(St,WMr),e(St,gCe),e(gCe,UMr),e(St,HMr),e(St,ic),e(ic,JMr),e(ic,hCe),e(hCe,YMr),e(ic,KMr),e(ic,dK),e(dK,ZMr),e(ic,eEr),e(St,oEr),M(B4,St,null),e(Uo,rEr),e(Uo,ho),M(P$,ho,null),e(ho,tEr),e(ho,uCe),e(uCe,aEr),e(ho,nEr),e(ho,mn),e(mn,sEr),e(mn,pCe),e(pCe,lEr),e(mn,iEr),e(mn,_Ce),e(_Ce,dEr),e(mn,cEr),e(mn,bCe),e(bCe,mEr),e(mn,fEr),e(ho,gEr),e(ho,vCe),e(vCe,I4),e(I4,FCe),e(FCe,hEr),e(I4,uEr),e(I4,cK),e(cK,pEr),e(I4,_Er),e(ho,bEr),e(ho,N4),e(N4,vEr),e(N4,TCe),e(TCe,FEr),e(N4,TEr),e(N4,MCe),e(MCe,MEr),e(ho,EEr),M(q4,ho,null),b(m,BZe,_),b(m,dc,_),e(dc,j4),e(j4,ECe),M(B$,ECe,null),e(dc,CEr),e(dc,CCe),e(CCe,wEr),b(m,IZe,_),b(m,Ho,_),M(I$,Ho,null),e(Ho,AEr),e(Ho,cc),e(cc,LEr),e(cc,mK),e(mK,yEr),e(cc,xEr),e(cc,fK),e(fK,$Er),e(cc,kEr),e(Ho,SEr),e(Ho,N$),e(N$,REr),e(N$,wCe),e(wCe,PEr),e(N$,BEr),e(Ho,IEr),e(Ho,Rt),M(q$,Rt,null),e(Rt,NEr),e(Rt,ACe),e(ACe,qEr),e(Rt,jEr),e(Rt,mc),e(mc,DEr),e(mc,LCe),e(LCe,GEr),e(mc,OEr),e(mc,gK),e(gK,VEr),e(mc,XEr),e(Rt,zEr),M(D4,Rt,null),e(Ho,QEr),e(Ho,uo),M(j$,uo,null),e(uo,WEr),e(uo,yCe),e(yCe,UEr),e(uo,HEr),e(uo,fn),e(fn,JEr),e(fn,xCe),e(xCe,YEr),e(fn,KEr),e(fn,$Ce),e($Ce,ZEr),e(fn,e4r),e(fn,kCe),e(kCe,o4r),e(fn,r4r),e(uo,t4r),e(uo,SCe),e(SCe,G4),e(G4,RCe),e(RCe,a4r),e(G4,n4r),e(G4,hK),e(hK,s4r),e(G4,l4r),e(uo,i4r),e(uo,O4),e(O4,d4r),e(O4,PCe),e(PCe,c4r),e(O4,m4r),e(O4,BCe),e(BCe,f4r),e(uo,g4r),M(V4,uo,null),b(m,NZe,_),b(m,fc,_),e(fc,X4),e(X4,ICe),M(D$,ICe,null),e(fc,h4r),e(fc,NCe),e(NCe,u4r),b(m,qZe,_),b(m,Jo,_),M(G$,Jo,null),e(Jo,p4r),e(Jo,gc),e(gc,_4r),e(gc,uK),e(uK,b4r),e(gc,v4r),e(gc,pK),e(pK,F4r),e(gc,T4r),e(Jo,M4r),e(Jo,O$),e(O$,E4r),e(O$,qCe),e(qCe,C4r),e(O$,w4r),e(Jo,A4r),e(Jo,Pt),M(V$,Pt,null),e(Pt,L4r),e(Pt,jCe),e(jCe,y4r),e(Pt,x4r),e(Pt,hc),e(hc,$4r),e(hc,DCe),e(DCe,k4r),e(hc,S4r),e(hc,_K),e(_K,R4r),e(hc,P4r),e(Pt,B4r),M(z4,Pt,null),e(Jo,I4r),e(Jo,po),M(X$,po,null),e(po,N4r),e(po,GCe),e(GCe,q4r),e(po,j4r),e(po,gn),e(gn,D4r),e(gn,OCe),e(OCe,G4r),e(gn,O4r),e(gn,VCe),e(VCe,V4r),e(gn,X4r),e(gn,XCe),e(XCe,z4r),e(gn,Q4r),e(po,W4r),e(po,Pe),e(Pe,Q4),e(Q4,zCe),e(zCe,U4r),e(Q4,H4r),e(Q4,bK),e(bK,J4r),e(Q4,Y4r),e(Pe,K4r),e(Pe,W4),e(W4,QCe),e(QCe,Z4r),e(W4,eCr),e(W4,vK),e(vK,oCr),e(W4,rCr),e(Pe,tCr),e(Pe,U4),e(U4,WCe),e(WCe,aCr),e(U4,nCr),e(U4,FK),e(FK,sCr),e(U4,lCr),e(Pe,iCr),e(Pe,H4),e(H4,UCe),e(UCe,dCr),e(H4,cCr),e(H4,TK),e(TK,mCr),e(H4,fCr),e(Pe,gCr),e(Pe,J4),e(J4,HCe),e(HCe,hCr),e(J4,uCr),e(J4,MK),e(MK,pCr),e(J4,_Cr),e(Pe,bCr),e(Pe,Y4),e(Y4,JCe),e(JCe,vCr),e(Y4,FCr),e(Y4,EK),e(EK,TCr),e(Y4,MCr),e(Pe,ECr),e(Pe,K4),e(K4,YCe),e(YCe,CCr),e(K4,wCr),e(K4,CK),e(CK,ACr),e(K4,LCr),e(Pe,yCr),e(Pe,Z4),e(Z4,KCe),e(KCe,xCr),e(Z4,$Cr),e(Z4,wK),e(wK,kCr),e(Z4,SCr),e(Pe,RCr),e(Pe,eC),e(eC,ZCe),e(ZCe,PCr),e(eC,BCr),e(eC,AK),e(AK,ICr),e(eC,NCr),e(po,qCr),e(po,oC),e(oC,jCr),e(oC,e3e),e(e3e,DCr),e(oC,GCr),e(oC,o3e),e(o3e,OCr),e(po,VCr),M(rC,po,null),b(m,jZe,_),b(m,uc,_),e(uc,tC),e(tC,r3e),M(z$,r3e,null),e(uc,XCr),e(uc,t3e),e(t3e,zCr),b(m,DZe,_),b(m,Yo,_),M(Q$,Yo,null),e(Yo,QCr),e(Yo,pc),e(pc,WCr),e(pc,LK),e(LK,UCr),e(pc,HCr),e(pc,yK),e(yK,JCr),e(pc,YCr),e(Yo,KCr),e(Yo,W$),e(W$,ZCr),e(W$,a3e),e(a3e,e3r),e(W$,o3r),e(Yo,r3r),e(Yo,Bt),M(U$,Bt,null),e(Bt,t3r),e(Bt,n3e),e(n3e,a3r),e(Bt,n3r),e(Bt,_c),e(_c,s3r),e(_c,s3e),e(s3e,l3r),e(_c,i3r),e(_c,xK),e(xK,d3r),e(_c,c3r),e(Bt,m3r),M(aC,Bt,null),e(Yo,f3r),e(Yo,_o),M(H$,_o,null),e(_o,g3r),e(_o,l3e),e(l3e,h3r),e(_o,u3r),e(_o,hn),e(hn,p3r),e(hn,i3e),e(i3e,_3r),e(hn,b3r),e(hn,d3e),e(d3e,v3r),e(hn,F3r),e(hn,c3e),e(c3e,T3r),e(hn,M3r),e(_o,E3r),e(_o,mt),e(mt,nC),e(nC,m3e),e(m3e,C3r),e(nC,w3r),e(nC,$K),e($K,A3r),e(nC,L3r),e(mt,y3r),e(mt,sC),e(sC,f3e),e(f3e,x3r),e(sC,$3r),e(sC,kK),e(kK,k3r),e(sC,S3r),e(mt,R3r),e(mt,lC),e(lC,g3e),e(g3e,P3r),e(lC,B3r),e(lC,SK),e(SK,I3r),e(lC,N3r),e(mt,q3r),e(mt,iC),e(iC,h3e),e(h3e,j3r),e(iC,D3r),e(iC,RK),e(RK,G3r),e(iC,O3r),e(mt,V3r),e(mt,dC),e(dC,u3e),e(u3e,X3r),e(dC,z3r),e(dC,PK),e(PK,Q3r),e(dC,W3r),e(_o,U3r),e(_o,cC),e(cC,H3r),e(cC,p3e),e(p3e,J3r),e(cC,Y3r),e(cC,_3e),e(_3e,K3r),e(_o,Z3r),M(mC,_o,null),b(m,GZe,_),b(m,bc,_),e(bc,fC),e(fC,b3e),M(J$,b3e,null),e(bc,e5r),e(bc,v3e),e(v3e,o5r),b(m,OZe,_),b(m,Ko,_),M(Y$,Ko,null),e(Ko,r5r),e(Ko,vc),e(vc,t5r),e(vc,BK),e(BK,a5r),e(vc,n5r),e(vc,IK),e(IK,s5r),e(vc,l5r),e(Ko,i5r),e(Ko,K$),e(K$,d5r),e(K$,F3e),e(F3e,c5r),e(K$,m5r),e(Ko,f5r),e(Ko,It),M(Z$,It,null),e(It,g5r),e(It,T3e),e(T3e,h5r),e(It,u5r),e(It,Fc),e(Fc,p5r),e(Fc,M3e),e(M3e,_5r),e(Fc,b5r),e(Fc,NK),e(NK,v5r),e(Fc,F5r),e(It,T5r),M(gC,It,null),e(Ko,M5r),e(Ko,bo),M(ek,bo,null),e(bo,E5r),e(bo,E3e),e(E3e,C5r),e(bo,w5r),e(bo,un),e(un,A5r),e(un,C3e),e(C3e,L5r),e(un,y5r),e(un,w3e),e(w3e,x5r),e(un,$5r),e(un,A3e),e(A3e,k5r),e(un,S5r),e(bo,R5r),e(bo,Le),e(Le,hC),e(hC,L3e),e(L3e,P5r),e(hC,B5r),e(hC,qK),e(qK,I5r),e(hC,N5r),e(Le,q5r),e(Le,uC),e(uC,y3e),e(y3e,j5r),e(uC,D5r),e(uC,jK),e(jK,G5r),e(uC,O5r),e(Le,V5r),e(Le,pC),e(pC,x3e),e(x3e,X5r),e(pC,z5r),e(pC,DK),e(DK,Q5r),e(pC,W5r),e(Le,U5r),e(Le,_C),e(_C,$3e),e($3e,H5r),e(_C,J5r),e(_C,GK),e(GK,Y5r),e(_C,K5r),e(Le,Z5r),e(Le,bC),e(bC,k3e),e(k3e,e0r),e(bC,o0r),e(bC,OK),e(OK,r0r),e(bC,t0r),e(Le,a0r),e(Le,vC),e(vC,S3e),e(S3e,n0r),e(vC,s0r),e(vC,VK),e(VK,l0r),e(vC,i0r),e(Le,d0r),e(Le,FC),e(FC,R3e),e(R3e,c0r),e(FC,m0r),e(FC,XK),e(XK,f0r),e(FC,g0r),e(Le,h0r),e(Le,TC),e(TC,P3e),e(P3e,u0r),e(TC,p0r),e(TC,zK),e(zK,_0r),e(TC,b0r),e(Le,v0r),e(Le,MC),e(MC,B3e),e(B3e,F0r),e(MC,T0r),e(MC,QK),e(QK,M0r),e(MC,E0r),e(Le,C0r),e(Le,EC),e(EC,I3e),e(I3e,w0r),e(EC,A0r),e(EC,WK),e(WK,L0r),e(EC,y0r),e(bo,x0r),e(bo,CC),e(CC,$0r),e(CC,N3e),e(N3e,k0r),e(CC,S0r),e(CC,q3e),e(q3e,R0r),e(bo,P0r),M(wC,bo,null),b(m,VZe,_),b(m,Tc,_),e(Tc,AC),e(AC,j3e),M(ok,j3e,null),e(Tc,B0r),e(Tc,D3e),e(D3e,I0r),b(m,XZe,_),b(m,Zo,_),M(rk,Zo,null),e(Zo,N0r),e(Zo,Mc),e(Mc,q0r),e(Mc,UK),e(UK,j0r),e(Mc,D0r),e(Mc,HK),e(HK,G0r),e(Mc,O0r),e(Zo,V0r),e(Zo,tk),e(tk,X0r),e(tk,G3e),e(G3e,z0r),e(tk,Q0r),e(Zo,W0r),e(Zo,Nt),M(ak,Nt,null),e(Nt,U0r),e(Nt,O3e),e(O3e,H0r),e(Nt,J0r),e(Nt,Ec),e(Ec,Y0r),e(Ec,V3e),e(V3e,K0r),e(Ec,Z0r),e(Ec,JK),e(JK,ewr),e(Ec,owr),e(Nt,rwr),M(LC,Nt,null),e(Zo,twr),e(Zo,vo),M(nk,vo,null),e(vo,awr),e(vo,X3e),e(X3e,nwr),e(vo,swr),e(vo,pn),e(pn,lwr),e(pn,z3e),e(z3e,iwr),e(pn,dwr),e(pn,Q3e),e(Q3e,cwr),e(pn,mwr),e(pn,W3e),e(W3e,fwr),e(pn,gwr),e(vo,hwr),e(vo,sk),e(sk,yC),e(yC,U3e),e(U3e,uwr),e(yC,pwr),e(yC,YK),e(YK,_wr),e(yC,bwr),e(sk,vwr),e(sk,xC),e(xC,H3e),e(H3e,Fwr),e(xC,Twr),e(xC,KK),e(KK,Mwr),e(xC,Ewr),e(vo,Cwr),e(vo,$C),e($C,wwr),e($C,J3e),e(J3e,Awr),e($C,Lwr),e($C,Y3e),e(Y3e,ywr),e(vo,xwr),M(kC,vo,null),b(m,zZe,_),b(m,Cc,_),e(Cc,SC),e(SC,K3e),M(lk,K3e,null),e(Cc,$wr),e(Cc,Z3e),e(Z3e,kwr),b(m,QZe,_),b(m,er,_),M(ik,er,null),e(er,Swr),e(er,wc),e(wc,Rwr),e(wc,ZK),e(ZK,Pwr),e(wc,Bwr),e(wc,eZ),e(eZ,Iwr),e(wc,Nwr),e(er,qwr),e(er,dk),e(dk,jwr),e(dk,e5e),e(e5e,Dwr),e(dk,Gwr),e(er,Owr),e(er,qt),M(ck,qt,null),e(qt,Vwr),e(qt,o5e),e(o5e,Xwr),e(qt,zwr),e(qt,Ac),e(Ac,Qwr),e(Ac,r5e),e(r5e,Wwr),e(Ac,Uwr),e(Ac,oZ),e(oZ,Hwr),e(Ac,Jwr),e(qt,Ywr),M(RC,qt,null),e(er,Kwr),e(er,Fo),M(mk,Fo,null),e(Fo,Zwr),e(Fo,t5e),e(t5e,eAr),e(Fo,oAr),e(Fo,_n),e(_n,rAr),e(_n,a5e),e(a5e,tAr),e(_n,aAr),e(_n,n5e),e(n5e,nAr),e(_n,sAr),e(_n,s5e),e(s5e,lAr),e(_n,iAr),e(Fo,dAr),e(Fo,ft),e(ft,PC),e(PC,l5e),e(l5e,cAr),e(PC,mAr),e(PC,rZ),e(rZ,fAr),e(PC,gAr),e(ft,hAr),e(ft,BC),e(BC,i5e),e(i5e,uAr),e(BC,pAr),e(BC,tZ),e(tZ,_Ar),e(BC,bAr),e(ft,vAr),e(ft,IC),e(IC,d5e),e(d5e,FAr),e(IC,TAr),e(IC,aZ),e(aZ,MAr),e(IC,EAr),e(ft,CAr),e(ft,NC),e(NC,c5e),e(c5e,wAr),e(NC,AAr),e(NC,nZ),e(nZ,LAr),e(NC,yAr),e(ft,xAr),e(ft,qC),e(qC,m5e),e(m5e,$Ar),e(qC,kAr),e(qC,sZ),e(sZ,SAr),e(qC,RAr),e(Fo,PAr),e(Fo,jC),e(jC,BAr),e(jC,f5e),e(f5e,IAr),e(jC,NAr),e(jC,g5e),e(g5e,qAr),e(Fo,jAr),M(DC,Fo,null),b(m,WZe,_),b(m,Lc,_),e(Lc,GC),e(GC,h5e),M(fk,h5e,null),e(Lc,DAr),e(Lc,u5e),e(u5e,GAr),b(m,UZe,_),b(m,or,_),M(gk,or,null),e(or,OAr),e(or,yc),e(yc,VAr),e(yc,lZ),e(lZ,XAr),e(yc,zAr),e(yc,iZ),e(iZ,QAr),e(yc,WAr),e(or,UAr),e(or,hk),e(hk,HAr),e(hk,p5e),e(p5e,JAr),e(hk,YAr),e(or,KAr),e(or,jt),M(uk,jt,null),e(jt,ZAr),e(jt,_5e),e(_5e,e6r),e(jt,o6r),e(jt,xc),e(xc,r6r),e(xc,b5e),e(b5e,t6r),e(xc,a6r),e(xc,dZ),e(dZ,n6r),e(xc,s6r),e(jt,l6r),M(OC,jt,null),e(or,i6r),e(or,To),M(pk,To,null),e(To,d6r),e(To,v5e),e(v5e,c6r),e(To,m6r),e(To,bn),e(bn,f6r),e(bn,F5e),e(F5e,g6r),e(bn,h6r),e(bn,T5e),e(T5e,u6r),e(bn,p6r),e(bn,M5e),e(M5e,_6r),e(bn,b6r),e(To,v6r),e(To,vn),e(vn,VC),e(VC,E5e),e(E5e,F6r),e(VC,T6r),e(VC,cZ),e(cZ,M6r),e(VC,E6r),e(vn,C6r),e(vn,XC),e(XC,C5e),e(C5e,w6r),e(XC,A6r),e(XC,mZ),e(mZ,L6r),e(XC,y6r),e(vn,x6r),e(vn,zC),e(zC,w5e),e(w5e,$6r),e(zC,k6r),e(zC,fZ),e(fZ,S6r),e(zC,R6r),e(vn,P6r),e(vn,QC),e(QC,A5e),e(A5e,B6r),e(QC,I6r),e(QC,gZ),e(gZ,N6r),e(QC,q6r),e(To,j6r),e(To,WC),e(WC,D6r),e(WC,L5e),e(L5e,G6r),e(WC,O6r),e(WC,y5e),e(y5e,V6r),e(To,X6r),M(UC,To,null),b(m,HZe,_),b(m,$c,_),e($c,HC),e(HC,x5e),M(_k,x5e,null),e($c,z6r),e($c,$5e),e($5e,Q6r),b(m,JZe,_),b(m,rr,_),M(bk,rr,null),e(rr,W6r),e(rr,kc),e(kc,U6r),e(kc,hZ),e(hZ,H6r),e(kc,J6r),e(kc,uZ),e(uZ,Y6r),e(kc,K6r),e(rr,Z6r),e(rr,vk),e(vk,e7r),e(vk,k5e),e(k5e,o7r),e(vk,r7r),e(rr,t7r),e(rr,Dt),M(Fk,Dt,null),e(Dt,a7r),e(Dt,S5e),e(S5e,n7r),e(Dt,s7r),e(Dt,Sc),e(Sc,l7r),e(Sc,R5e),e(R5e,i7r),e(Sc,d7r),e(Sc,pZ),e(pZ,c7r),e(Sc,m7r),e(Dt,f7r),M(JC,Dt,null),e(rr,g7r),e(rr,Mo),M(Tk,Mo,null),e(Mo,h7r),e(Mo,P5e),e(P5e,u7r),e(Mo,p7r),e(Mo,Fn),e(Fn,_7r),e(Fn,B5e),e(B5e,b7r),e(Fn,v7r),e(Fn,I5e),e(I5e,F7r),e(Fn,T7r),e(Fn,N5e),e(N5e,M7r),e(Fn,E7r),e(Mo,C7r),e(Mo,Tn),e(Tn,YC),e(YC,q5e),e(q5e,w7r),e(YC,A7r),e(YC,_Z),e(_Z,L7r),e(YC,y7r),e(Tn,x7r),e(Tn,KC),e(KC,j5e),e(j5e,$7r),e(KC,k7r),e(KC,bZ),e(bZ,S7r),e(KC,R7r),e(Tn,P7r),e(Tn,ZC),e(ZC,D5e),e(D5e,B7r),e(ZC,I7r),e(ZC,vZ),e(vZ,N7r),e(ZC,q7r),e(Tn,j7r),e(Tn,e3),e(e3,G5e),e(G5e,D7r),e(e3,G7r),e(e3,FZ),e(FZ,O7r),e(e3,V7r),e(Mo,X7r),e(Mo,o3),e(o3,z7r),e(o3,O5e),e(O5e,Q7r),e(o3,W7r),e(o3,V5e),e(V5e,U7r),e(Mo,H7r),M(r3,Mo,null),b(m,YZe,_),b(m,Rc,_),e(Rc,t3),e(t3,X5e),M(Mk,X5e,null),e(Rc,J7r),e(Rc,z5e),e(z5e,Y7r),b(m,KZe,_),b(m,tr,_),M(Ek,tr,null),e(tr,K7r),e(tr,Pc),e(Pc,Z7r),e(Pc,TZ),e(TZ,eLr),e(Pc,oLr),e(Pc,MZ),e(MZ,rLr),e(Pc,tLr),e(tr,aLr),e(tr,Ck),e(Ck,nLr),e(Ck,Q5e),e(Q5e,sLr),e(Ck,lLr),e(tr,iLr),e(tr,Gt),M(wk,Gt,null),e(Gt,dLr),e(Gt,W5e),e(W5e,cLr),e(Gt,mLr),e(Gt,Bc),e(Bc,fLr),e(Bc,U5e),e(U5e,gLr),e(Bc,hLr),e(Bc,EZ),e(EZ,uLr),e(Bc,pLr),e(Gt,_Lr),M(a3,Gt,null),e(tr,bLr),e(tr,Eo),M(Ak,Eo,null),e(Eo,vLr),e(Eo,H5e),e(H5e,FLr),e(Eo,TLr),e(Eo,Mn),e(Mn,MLr),e(Mn,J5e),e(J5e,ELr),e(Mn,CLr),e(Mn,Y5e),e(Y5e,wLr),e(Mn,ALr),e(Mn,K5e),e(K5e,LLr),e(Mn,yLr),e(Eo,xLr),e(Eo,Z5e),e(Z5e,n3),e(n3,e0e),e(e0e,$Lr),e(n3,kLr),e(n3,CZ),e(CZ,SLr),e(n3,RLr),e(Eo,PLr),e(Eo,s3),e(s3,BLr),e(s3,o0e),e(o0e,ILr),e(s3,NLr),e(s3,r0e),e(r0e,qLr),e(Eo,jLr),M(l3,Eo,null),b(m,ZZe,_),b(m,Ic,_),e(Ic,i3),e(i3,t0e),M(Lk,t0e,null),e(Ic,DLr),e(Ic,a0e),e(a0e,GLr),b(m,eeo,_),b(m,ar,_),M(yk,ar,null),e(ar,OLr),e(ar,Nc),e(Nc,VLr),e(Nc,wZ),e(wZ,XLr),e(Nc,zLr),e(Nc,AZ),e(AZ,QLr),e(Nc,WLr),e(ar,ULr),e(ar,xk),e(xk,HLr),e(xk,n0e),e(n0e,JLr),e(xk,YLr),e(ar,KLr),e(ar,Ot),M($k,Ot,null),e(Ot,ZLr),e(Ot,s0e),e(s0e,eyr),e(Ot,oyr),e(Ot,qc),e(qc,ryr),e(qc,l0e),e(l0e,tyr),e(qc,ayr),e(qc,LZ),e(LZ,nyr),e(qc,syr),e(Ot,lyr),M(d3,Ot,null),e(ar,iyr),e(ar,Co),M(kk,Co,null),e(Co,dyr),e(Co,i0e),e(i0e,cyr),e(Co,myr),e(Co,En),e(En,fyr),e(En,d0e),e(d0e,gyr),e(En,hyr),e(En,c0e),e(c0e,uyr),e(En,pyr),e(En,m0e),e(m0e,_yr),e(En,byr),e(Co,vyr),e(Co,gt),e(gt,c3),e(c3,f0e),e(f0e,Fyr),e(c3,Tyr),e(c3,yZ),e(yZ,Myr),e(c3,Eyr),e(gt,Cyr),e(gt,m3),e(m3,g0e),e(g0e,wyr),e(m3,Ayr),e(m3,xZ),e(xZ,Lyr),e(m3,yyr),e(gt,xyr),e(gt,f3),e(f3,h0e),e(h0e,$yr),e(f3,kyr),e(f3,$Z),e($Z,Syr),e(f3,Ryr),e(gt,Pyr),e(gt,g3),e(g3,u0e),e(u0e,Byr),e(g3,Iyr),e(g3,kZ),e(kZ,Nyr),e(g3,qyr),e(gt,jyr),e(gt,h3),e(h3,p0e),e(p0e,Dyr),e(h3,Gyr),e(h3,SZ),e(SZ,Oyr),e(h3,Vyr),e(Co,Xyr),e(Co,u3),e(u3,zyr),e(u3,_0e),e(_0e,Qyr),e(u3,Wyr),e(u3,b0e),e(b0e,Uyr),e(Co,Hyr),M(p3,Co,null),b(m,oeo,_),b(m,jc,_),e(jc,_3),e(_3,v0e),M(Sk,v0e,null),e(jc,Jyr),e(jc,F0e),e(F0e,Yyr),b(m,reo,_),b(m,nr,_),M(Rk,nr,null),e(nr,Kyr),e(nr,Dc),e(Dc,Zyr),e(Dc,RZ),e(RZ,e8r),e(Dc,o8r),e(Dc,PZ),e(PZ,r8r),e(Dc,t8r),e(nr,a8r),e(nr,Pk),e(Pk,n8r),e(Pk,T0e),e(T0e,s8r),e(Pk,l8r),e(nr,i8r),e(nr,Vt),M(Bk,Vt,null),e(Vt,d8r),e(Vt,M0e),e(M0e,c8r),e(Vt,m8r),e(Vt,Gc),e(Gc,f8r),e(Gc,E0e),e(E0e,g8r),e(Gc,h8r),e(Gc,BZ),e(BZ,u8r),e(Gc,p8r),e(Vt,_8r),M(b3,Vt,null),e(nr,b8r),e(nr,wo),M(Ik,wo,null),e(wo,v8r),e(wo,C0e),e(C0e,F8r),e(wo,T8r),e(wo,Cn),e(Cn,M8r),e(Cn,w0e),e(w0e,E8r),e(Cn,C8r),e(Cn,A0e),e(A0e,w8r),e(Cn,A8r),e(Cn,L0e),e(L0e,L8r),e(Cn,y8r),e(wo,x8r),e(wo,y0e),e(y0e,v3),e(v3,x0e),e(x0e,$8r),e(v3,k8r),e(v3,IZ),e(IZ,S8r),e(v3,R8r),e(wo,P8r),e(wo,F3),e(F3,B8r),e(F3,$0e),e($0e,I8r),e(F3,N8r),e(F3,k0e),e(k0e,q8r),e(wo,j8r),M(T3,wo,null),b(m,teo,_),b(m,Oc,_),e(Oc,M3),e(M3,S0e),M(Nk,S0e,null),e(Oc,D8r),e(Oc,R0e),e(R0e,G8r),b(m,aeo,_),b(m,sr,_),M(qk,sr,null),e(sr,O8r),e(sr,Vc),e(Vc,V8r),e(Vc,NZ),e(NZ,X8r),e(Vc,z8r),e(Vc,qZ),e(qZ,Q8r),e(Vc,W8r),e(sr,U8r),e(sr,jk),e(jk,H8r),e(jk,P0e),e(P0e,J8r),e(jk,Y8r),e(sr,K8r),e(sr,Xt),M(Dk,Xt,null),e(Xt,Z8r),e(Xt,B0e),e(B0e,e9r),e(Xt,o9r),e(Xt,Xc),e(Xc,r9r),e(Xc,I0e),e(I0e,t9r),e(Xc,a9r),e(Xc,jZ),e(jZ,n9r),e(Xc,s9r),e(Xt,l9r),M(E3,Xt,null),e(sr,i9r),e(sr,Ir),M(Gk,Ir,null),e(Ir,d9r),e(Ir,N0e),e(N0e,c9r),e(Ir,m9r),e(Ir,wn),e(wn,f9r),e(wn,q0e),e(q0e,g9r),e(wn,h9r),e(wn,j0e),e(j0e,u9r),e(wn,p9r),e(wn,D0e),e(D0e,_9r),e(wn,b9r),e(Ir,v9r),e(Ir,B),e(B,C3),e(C3,G0e),e(G0e,F9r),e(C3,T9r),e(C3,DZ),e(DZ,M9r),e(C3,E9r),e(B,C9r),e(B,w3),e(w3,O0e),e(O0e,w9r),e(w3,A9r),e(w3,GZ),e(GZ,L9r),e(w3,y9r),e(B,x9r),e(B,A3),e(A3,V0e),e(V0e,$9r),e(A3,k9r),e(A3,OZ),e(OZ,S9r),e(A3,R9r),e(B,P9r),e(B,L3),e(L3,X0e),e(X0e,B9r),e(L3,I9r),e(L3,VZ),e(VZ,N9r),e(L3,q9r),e(B,j9r),e(B,y3),e(y3,z0e),e(z0e,D9r),e(y3,G9r),e(y3,XZ),e(XZ,O9r),e(y3,V9r),e(B,X9r),e(B,x3),e(x3,Q0e),e(Q0e,z9r),e(x3,Q9r),e(x3,zZ),e(zZ,W9r),e(x3,U9r),e(B,H9r),e(B,$3),e($3,W0e),e(W0e,J9r),e($3,Y9r),e($3,QZ),e(QZ,K9r),e($3,Z9r),e(B,exr),e(B,k3),e(k3,U0e),e(U0e,oxr),e(k3,rxr),e(k3,WZ),e(WZ,txr),e(k3,axr),e(B,nxr),e(B,S3),e(S3,H0e),e(H0e,sxr),e(S3,lxr),e(S3,UZ),e(UZ,ixr),e(S3,dxr),e(B,cxr),e(B,R3),e(R3,J0e),e(J0e,mxr),e(R3,fxr),e(R3,HZ),e(HZ,gxr),e(R3,hxr),e(B,uxr),e(B,P3),e(P3,Y0e),e(Y0e,pxr),e(P3,_xr),e(P3,JZ),e(JZ,bxr),e(P3,vxr),e(B,Fxr),e(B,B3),e(B3,K0e),e(K0e,Txr),e(B3,Mxr),e(B3,YZ),e(YZ,Exr),e(B3,Cxr),e(B,wxr),e(B,I3),e(I3,Z0e),e(Z0e,Axr),e(I3,Lxr),e(I3,KZ),e(KZ,yxr),e(I3,xxr),e(B,$xr),e(B,N3),e(N3,ewe),e(ewe,kxr),e(N3,Sxr),e(N3,ZZ),e(ZZ,Rxr),e(N3,Pxr),e(B,Bxr),e(B,q3),e(q3,owe),e(owe,Ixr),e(q3,Nxr),e(q3,eee),e(eee,qxr),e(q3,jxr),e(B,Dxr),e(B,j3),e(j3,rwe),e(rwe,Gxr),e(j3,Oxr),e(j3,oee),e(oee,Vxr),e(j3,Xxr),e(B,zxr),e(B,D3),e(D3,twe),e(twe,Qxr),e(D3,Wxr),e(D3,ree),e(ree,Uxr),e(D3,Hxr),e(B,Jxr),e(B,G3),e(G3,awe),e(awe,Yxr),e(G3,Kxr),e(G3,tee),e(tee,Zxr),e(G3,e$r),e(B,o$r),e(B,Fl),e(Fl,nwe),e(nwe,r$r),e(Fl,t$r),e(Fl,aee),e(aee,a$r),e(Fl,n$r),e(Fl,nee),e(nee,s$r),e(Fl,l$r),e(B,i$r),e(B,O3),e(O3,swe),e(swe,d$r),e(O3,c$r),e(O3,see),e(see,m$r),e(O3,f$r),e(B,g$r),e(B,V3),e(V3,lwe),e(lwe,h$r),e(V3,u$r),e(V3,lee),e(lee,p$r),e(V3,_$r),e(B,b$r),e(B,X3),e(X3,iwe),e(iwe,v$r),e(X3,F$r),e(X3,iee),e(iee,T$r),e(X3,M$r),e(B,E$r),e(B,z3),e(z3,dwe),e(dwe,C$r),e(z3,w$r),e(z3,dee),e(dee,A$r),e(z3,L$r),e(B,y$r),e(B,Q3),e(Q3,cwe),e(cwe,x$r),e(Q3,$$r),e(Q3,cee),e(cee,k$r),e(Q3,S$r),e(B,R$r),e(B,W3),e(W3,mwe),e(mwe,P$r),e(W3,B$r),e(W3,mee),e(mee,I$r),e(W3,N$r),e(B,q$r),e(B,U3),e(U3,fwe),e(fwe,j$r),e(U3,D$r),e(U3,fee),e(fee,G$r),e(U3,O$r),e(B,V$r),e(B,H3),e(H3,gwe),e(gwe,X$r),e(H3,z$r),e(H3,gee),e(gee,Q$r),e(H3,W$r),e(B,U$r),e(B,J3),e(J3,hwe),e(hwe,H$r),e(J3,J$r),e(J3,hee),e(hee,Y$r),e(J3,K$r),e(B,Z$r),e(B,Y3),e(Y3,uwe),e(uwe,ekr),e(Y3,okr),e(Y3,uee),e(uee,rkr),e(Y3,tkr),e(B,akr),e(B,K3),e(K3,pwe),e(pwe,nkr),e(K3,skr),e(K3,pee),e(pee,lkr),e(K3,ikr),e(B,dkr),e(B,Z3),e(Z3,_we),e(_we,ckr),e(Z3,mkr),e(Z3,_ee),e(_ee,fkr),e(Z3,gkr),e(B,hkr),e(B,e5),e(e5,bwe),e(bwe,ukr),e(e5,pkr),e(e5,bee),e(bee,_kr),e(e5,bkr),e(B,vkr),e(B,o5),e(o5,vwe),e(vwe,Fkr),e(o5,Tkr),e(o5,vee),e(vee,Mkr),e(o5,Ekr),e(B,Ckr),e(B,r5),e(r5,Fwe),e(Fwe,wkr),e(r5,Akr),e(r5,Fee),e(Fee,Lkr),e(r5,ykr),e(B,xkr),e(B,t5),e(t5,Twe),e(Twe,$kr),e(t5,kkr),e(t5,Tee),e(Tee,Skr),e(t5,Rkr),e(B,Pkr),e(B,a5),e(a5,Mwe),e(Mwe,Bkr),e(a5,Ikr),e(a5,Mee),e(Mee,Nkr),e(a5,qkr),e(B,jkr),e(B,n5),e(n5,Ewe),e(Ewe,Dkr),e(n5,Gkr),e(n5,Eee),e(Eee,Okr),e(n5,Vkr),e(B,Xkr),e(B,s5),e(s5,Cwe),e(Cwe,zkr),e(s5,Qkr),e(s5,Cee),e(Cee,Wkr),e(s5,Ukr),e(B,Hkr),e(B,l5),e(l5,wwe),e(wwe,Jkr),e(l5,Ykr),e(l5,wee),e(wee,Kkr),e(l5,Zkr),e(B,eSr),e(B,i5),e(i5,Awe),e(Awe,oSr),e(i5,rSr),e(i5,Aee),e(Aee,tSr),e(i5,aSr),e(B,nSr),e(B,d5),e(d5,Lwe),e(Lwe,sSr),e(d5,lSr),e(d5,Lee),e(Lee,iSr),e(d5,dSr),e(B,cSr),e(B,c5),e(c5,ywe),e(ywe,mSr),e(c5,fSr),e(c5,yee),e(yee,gSr),e(c5,hSr),e(B,uSr),e(B,m5),e(m5,xwe),e(xwe,pSr),e(m5,_Sr),e(m5,xee),e(xee,bSr),e(m5,vSr),e(B,FSr),e(B,f5),e(f5,$we),e($we,TSr),e(f5,MSr),e(f5,$ee),e($ee,ESr),e(f5,CSr),e(B,wSr),e(B,g5),e(g5,kwe),e(kwe,ASr),e(g5,LSr),e(g5,kee),e(kee,ySr),e(g5,xSr),e(B,$Sr),e(B,h5),e(h5,Swe),e(Swe,kSr),e(h5,SSr),e(h5,See),e(See,RSr),e(h5,PSr),e(B,BSr),e(B,u5),e(u5,Rwe),e(Rwe,ISr),e(u5,NSr),e(u5,Ree),e(Ree,qSr),e(u5,jSr),e(B,DSr),e(B,p5),e(p5,Pwe),e(Pwe,GSr),e(p5,OSr),e(p5,Pee),e(Pee,VSr),e(p5,XSr),e(B,zSr),e(B,_5),e(_5,Bwe),e(Bwe,QSr),e(_5,WSr),e(_5,Bee),e(Bee,USr),e(_5,HSr),e(B,JSr),e(B,b5),e(b5,Iwe),e(Iwe,YSr),e(b5,KSr),e(b5,Iee),e(Iee,ZSr),e(b5,eRr),e(B,oRr),e(B,v5),e(v5,Nwe),e(Nwe,rRr),e(v5,tRr),e(v5,Nee),e(Nee,aRr),e(v5,nRr),e(B,sRr),e(B,F5),e(F5,qwe),e(qwe,lRr),e(F5,iRr),e(F5,qee),e(qee,dRr),e(F5,cRr),e(B,mRr),e(B,T5),e(T5,jwe),e(jwe,fRr),e(T5,gRr),e(T5,jee),e(jee,hRr),e(T5,uRr),e(B,pRr),e(B,M5),e(M5,Dwe),e(Dwe,_Rr),e(M5,bRr),e(M5,Dee),e(Dee,vRr),e(M5,FRr),e(B,TRr),e(B,E5),e(E5,Gwe),e(Gwe,MRr),e(E5,ERr),e(E5,Gee),e(Gee,CRr),e(E5,wRr),e(Ir,ARr),M(C5,Ir,null),b(m,neo,_),b(m,zc,_),e(zc,w5),e(w5,Owe),M(Ok,Owe,null),e(zc,LRr),e(zc,Vwe),e(Vwe,yRr),b(m,seo,_),b(m,lr,_),M(Vk,lr,null),e(lr,xRr),e(lr,Qc),e(Qc,$Rr),e(Qc,Oee),e(Oee,kRr),e(Qc,SRr),e(Qc,Vee),e(Vee,RRr),e(Qc,PRr),e(lr,BRr),e(lr,Xk),e(Xk,IRr),e(Xk,Xwe),e(Xwe,NRr),e(Xk,qRr),e(lr,jRr),e(lr,zt),M(zk,zt,null),e(zt,DRr),e(zt,zwe),e(zwe,GRr),e(zt,ORr),e(zt,Wc),e(Wc,VRr),e(Wc,Qwe),e(Qwe,XRr),e(Wc,zRr),e(Wc,Xee),e(Xee,QRr),e(Wc,WRr),e(zt,URr),M(A5,zt,null),e(lr,HRr),e(lr,Nr),M(Qk,Nr,null),e(Nr,JRr),e(Nr,Wwe),e(Wwe,YRr),e(Nr,KRr),e(Nr,An),e(An,ZRr),e(An,Uwe),e(Uwe,ePr),e(An,oPr),e(An,Hwe),e(Hwe,rPr),e(An,tPr),e(An,Jwe),e(Jwe,aPr),e(An,nPr),e(Nr,sPr),e(Nr,se),e(se,L5),e(L5,Ywe),e(Ywe,lPr),e(L5,iPr),e(L5,zee),e(zee,dPr),e(L5,cPr),e(se,mPr),e(se,y5),e(y5,Kwe),e(Kwe,fPr),e(y5,gPr),e(y5,Qee),e(Qee,hPr),e(y5,uPr),e(se,pPr),e(se,x5),e(x5,Zwe),e(Zwe,_Pr),e(x5,bPr),e(x5,Wee),e(Wee,vPr),e(x5,FPr),e(se,TPr),e(se,$5),e($5,eAe),e(eAe,MPr),e($5,EPr),e($5,Uee),e(Uee,CPr),e($5,wPr),e(se,APr),e(se,k5),e(k5,oAe),e(oAe,LPr),e(k5,yPr),e(k5,Hee),e(Hee,xPr),e(k5,$Pr),e(se,kPr),e(se,S5),e(S5,rAe),e(rAe,SPr),e(S5,RPr),e(S5,Jee),e(Jee,PPr),e(S5,BPr),e(se,IPr),e(se,R5),e(R5,tAe),e(tAe,NPr),e(R5,qPr),e(R5,Yee),e(Yee,jPr),e(R5,DPr),e(se,GPr),e(se,P5),e(P5,aAe),e(aAe,OPr),e(P5,VPr),e(P5,Kee),e(Kee,XPr),e(P5,zPr),e(se,QPr),e(se,B5),e(B5,nAe),e(nAe,WPr),e(B5,UPr),e(B5,Zee),e(Zee,HPr),e(B5,JPr),e(se,YPr),e(se,I5),e(I5,sAe),e(sAe,KPr),e(I5,ZPr),e(I5,eoe),e(eoe,eBr),e(I5,oBr),e(se,rBr),e(se,N5),e(N5,lAe),e(lAe,tBr),e(N5,aBr),e(N5,ooe),e(ooe,nBr),e(N5,sBr),e(se,lBr),e(se,q5),e(q5,iAe),e(iAe,iBr),e(q5,dBr),e(q5,roe),e(roe,cBr),e(q5,mBr),e(se,fBr),e(se,j5),e(j5,dAe),e(dAe,gBr),e(j5,hBr),e(j5,toe),e(toe,uBr),e(j5,pBr),e(se,_Br),e(se,D5),e(D5,cAe),e(cAe,bBr),e(D5,vBr),e(D5,aoe),e(aoe,FBr),e(D5,TBr),e(se,MBr),e(se,G5),e(G5,mAe),e(mAe,EBr),e(G5,CBr),e(G5,noe),e(noe,wBr),e(G5,ABr),e(se,LBr),e(se,O5),e(O5,fAe),e(fAe,yBr),e(O5,xBr),e(O5,soe),e(soe,$Br),e(O5,kBr),e(se,SBr),e(se,V5),e(V5,gAe),e(gAe,RBr),e(V5,PBr),e(V5,loe),e(loe,BBr),e(V5,IBr),e(se,NBr),e(se,X5),e(X5,hAe),e(hAe,qBr),e(X5,jBr),e(X5,ioe),e(ioe,DBr),e(X5,GBr),e(se,OBr),e(se,z5),e(z5,uAe),e(uAe,VBr),e(z5,XBr),e(z5,doe),e(doe,zBr),e(z5,QBr),e(se,WBr),e(se,Q5),e(Q5,pAe),e(pAe,UBr),e(Q5,HBr),e(Q5,coe),e(coe,JBr),e(Q5,YBr),e(se,KBr),e(se,W5),e(W5,_Ae),e(_Ae,ZBr),e(W5,eIr),e(W5,moe),e(moe,oIr),e(W5,rIr),e(se,tIr),e(se,U5),e(U5,bAe),e(bAe,aIr),e(U5,nIr),e(U5,foe),e(foe,sIr),e(U5,lIr),e(se,iIr),e(se,H5),e(H5,vAe),e(vAe,dIr),e(H5,cIr),e(H5,goe),e(goe,mIr),e(H5,fIr),e(Nr,gIr),M(J5,Nr,null),b(m,leo,_),b(m,Uc,_),e(Uc,Y5),e(Y5,FAe),M(Wk,FAe,null),e(Uc,hIr),e(Uc,TAe),e(TAe,uIr),b(m,ieo,_),b(m,ir,_),M(Uk,ir,null),e(ir,pIr),e(ir,Hc),e(Hc,_Ir),e(Hc,hoe),e(hoe,bIr),e(Hc,vIr),e(Hc,uoe),e(uoe,FIr),e(Hc,TIr),e(ir,MIr),e(ir,Hk),e(Hk,EIr),e(Hk,MAe),e(MAe,CIr),e(Hk,wIr),e(ir,AIr),e(ir,Qt),M(Jk,Qt,null),e(Qt,LIr),e(Qt,EAe),e(EAe,yIr),e(Qt,xIr),e(Qt,Jc),e(Jc,$Ir),e(Jc,CAe),e(CAe,kIr),e(Jc,SIr),e(Jc,poe),e(poe,RIr),e(Jc,PIr),e(Qt,BIr),M(K5,Qt,null),e(ir,IIr),e(ir,qr),M(Yk,qr,null),e(qr,NIr),e(qr,wAe),e(wAe,qIr),e(qr,jIr),e(qr,Ln),e(Ln,DIr),e(Ln,AAe),e(AAe,GIr),e(Ln,OIr),e(Ln,LAe),e(LAe,VIr),e(Ln,XIr),e(Ln,yAe),e(yAe,zIr),e(Ln,QIr),e(qr,WIr),e(qr,Me),e(Me,Z5),e(Z5,xAe),e(xAe,UIr),e(Z5,HIr),e(Z5,_oe),e(_oe,JIr),e(Z5,YIr),e(Me,KIr),e(Me,e0),e(e0,$Ae),e($Ae,ZIr),e(e0,eNr),e(e0,boe),e(boe,oNr),e(e0,rNr),e(Me,tNr),e(Me,o0),e(o0,kAe),e(kAe,aNr),e(o0,nNr),e(o0,voe),e(voe,sNr),e(o0,lNr),e(Me,iNr),e(Me,r0),e(r0,SAe),e(SAe,dNr),e(r0,cNr),e(r0,Foe),e(Foe,mNr),e(r0,fNr),e(Me,gNr),e(Me,t0),e(t0,RAe),e(RAe,hNr),e(t0,uNr),e(t0,Toe),e(Toe,pNr),e(t0,_Nr),e(Me,bNr),e(Me,a0),e(a0,PAe),e(PAe,vNr),e(a0,FNr),e(a0,Moe),e(Moe,TNr),e(a0,MNr),e(Me,ENr),e(Me,n0),e(n0,BAe),e(BAe,CNr),e(n0,wNr),e(n0,Eoe),e(Eoe,ANr),e(n0,LNr),e(Me,yNr),e(Me,s0),e(s0,IAe),e(IAe,xNr),e(s0,$Nr),e(s0,Coe),e(Coe,kNr),e(s0,SNr),e(Me,RNr),e(Me,l0),e(l0,NAe),e(NAe,PNr),e(l0,BNr),e(l0,woe),e(woe,INr),e(l0,NNr),e(Me,qNr),e(Me,i0),e(i0,qAe),e(qAe,jNr),e(i0,DNr),e(i0,Aoe),e(Aoe,GNr),e(i0,ONr),e(Me,VNr),e(Me,d0),e(d0,jAe),e(jAe,XNr),e(d0,zNr),e(d0,Loe),e(Loe,QNr),e(d0,WNr),e(Me,UNr),e(Me,c0),e(c0,DAe),e(DAe,HNr),e(c0,JNr),e(c0,yoe),e(yoe,YNr),e(c0,KNr),e(Me,ZNr),e(Me,m0),e(m0,GAe),e(GAe,eqr),e(m0,oqr),e(m0,xoe),e(xoe,rqr),e(m0,tqr),e(Me,aqr),e(Me,f0),e(f0,OAe),e(OAe,nqr),e(f0,sqr),e(f0,$oe),e($oe,lqr),e(f0,iqr),e(qr,dqr),M(g0,qr,null),b(m,deo,_),b(m,Yc,_),e(Yc,h0),e(h0,VAe),M(Kk,VAe,null),e(Yc,cqr),e(Yc,XAe),e(XAe,mqr),b(m,ceo,_),b(m,dr,_),M(Zk,dr,null),e(dr,fqr),e(dr,Kc),e(Kc,gqr),e(Kc,koe),e(koe,hqr),e(Kc,uqr),e(Kc,Soe),e(Soe,pqr),e(Kc,_qr),e(dr,bqr),e(dr,eS),e(eS,vqr),e(eS,zAe),e(zAe,Fqr),e(eS,Tqr),e(dr,Mqr),e(dr,Wt),M(oS,Wt,null),e(Wt,Eqr),e(Wt,QAe),e(QAe,Cqr),e(Wt,wqr),e(Wt,Zc),e(Zc,Aqr),e(Zc,WAe),e(WAe,Lqr),e(Zc,yqr),e(Zc,Roe),e(Roe,xqr),e(Zc,$qr),e(Wt,kqr),M(u0,Wt,null),e(dr,Sqr),e(dr,jr),M(rS,jr,null),e(jr,Rqr),e(jr,UAe),e(UAe,Pqr),e(jr,Bqr),e(jr,yn),e(yn,Iqr),e(yn,HAe),e(HAe,Nqr),e(yn,qqr),e(yn,JAe),e(JAe,jqr),e(yn,Dqr),e(yn,YAe),e(YAe,Gqr),e(yn,Oqr),e(jr,Vqr),e(jr,Be),e(Be,p0),e(p0,KAe),e(KAe,Xqr),e(p0,zqr),e(p0,Poe),e(Poe,Qqr),e(p0,Wqr),e(Be,Uqr),e(Be,_0),e(_0,ZAe),e(ZAe,Hqr),e(_0,Jqr),e(_0,Boe),e(Boe,Yqr),e(_0,Kqr),e(Be,Zqr),e(Be,Tl),e(Tl,e6e),e(e6e,ejr),e(Tl,ojr),e(Tl,Ioe),e(Ioe,rjr),e(Tl,tjr),e(Tl,Noe),e(Noe,ajr),e(Tl,njr),e(Be,sjr),e(Be,b0),e(b0,o6e),e(o6e,ljr),e(b0,ijr),e(b0,qoe),e(qoe,djr),e(b0,cjr),e(Be,mjr),e(Be,v0),e(v0,r6e),e(r6e,fjr),e(v0,gjr),e(v0,joe),e(joe,hjr),e(v0,ujr),e(Be,pjr),e(Be,F0),e(F0,t6e),e(t6e,_jr),e(F0,bjr),e(F0,Doe),e(Doe,vjr),e(F0,Fjr),e(Be,Tjr),e(Be,T0),e(T0,a6e),e(a6e,Mjr),e(T0,Ejr),e(T0,Goe),e(Goe,Cjr),e(T0,wjr),e(Be,Ajr),e(Be,M0),e(M0,n6e),e(n6e,Ljr),e(M0,yjr),e(M0,Ooe),e(Ooe,xjr),e(M0,$jr),e(Be,kjr),e(Be,E0),e(E0,s6e),e(s6e,Sjr),e(E0,Rjr),e(E0,Voe),e(Voe,Pjr),e(E0,Bjr),e(jr,Ijr),M(C0,jr,null),b(m,meo,_),b(m,em,_),e(em,w0),e(w0,l6e),M(tS,l6e,null),e(em,Njr),e(em,i6e),e(i6e,qjr),b(m,feo,_),b(m,cr,_),M(aS,cr,null),e(cr,jjr),e(cr,om),e(om,Djr),e(om,Xoe),e(Xoe,Gjr),e(om,Ojr),e(om,zoe),e(zoe,Vjr),e(om,Xjr),e(cr,zjr),e(cr,nS),e(nS,Qjr),e(nS,d6e),e(d6e,Wjr),e(nS,Ujr),e(cr,Hjr),e(cr,Ut),M(sS,Ut,null),e(Ut,Jjr),e(Ut,c6e),e(c6e,Yjr),e(Ut,Kjr),e(Ut,rm),e(rm,Zjr),e(rm,m6e),e(m6e,eDr),e(rm,oDr),e(rm,Qoe),e(Qoe,rDr),e(rm,tDr),e(Ut,aDr),M(A0,Ut,null),e(cr,nDr),e(cr,Dr),M(lS,Dr,null),e(Dr,sDr),e(Dr,f6e),e(f6e,lDr),e(Dr,iDr),e(Dr,xn),e(xn,dDr),e(xn,g6e),e(g6e,cDr),e(xn,mDr),e(xn,h6e),e(h6e,fDr),e(xn,gDr),e(xn,u6e),e(u6e,hDr),e(xn,uDr),e(Dr,pDr),e(Dr,tm),e(tm,L0),e(L0,p6e),e(p6e,_Dr),e(L0,bDr),e(L0,Woe),e(Woe,vDr),e(L0,FDr),e(tm,TDr),e(tm,y0),e(y0,_6e),e(_6e,MDr),e(y0,EDr),e(y0,Uoe),e(Uoe,CDr),e(y0,wDr),e(tm,ADr),e(tm,x0),e(x0,b6e),e(b6e,LDr),e(x0,yDr),e(x0,Hoe),e(Hoe,xDr),e(x0,$Dr),e(Dr,kDr),M($0,Dr,null),b(m,geo,_),b(m,am,_),e(am,k0),e(k0,v6e),M(iS,v6e,null),e(am,SDr),e(am,F6e),e(F6e,RDr),b(m,heo,_),b(m,mr,_),M(dS,mr,null),e(mr,PDr),e(mr,nm),e(nm,BDr),e(nm,Joe),e(Joe,IDr),e(nm,NDr),e(nm,Yoe),e(Yoe,qDr),e(nm,jDr),e(mr,DDr),e(mr,cS),e(cS,GDr),e(cS,T6e),e(T6e,ODr),e(cS,VDr),e(mr,XDr),e(mr,Ht),M(mS,Ht,null),e(Ht,zDr),e(Ht,M6e),e(M6e,QDr),e(Ht,WDr),e(Ht,sm),e(sm,UDr),e(sm,E6e),e(E6e,HDr),e(sm,JDr),e(sm,Koe),e(Koe,YDr),e(sm,KDr),e(Ht,ZDr),M(S0,Ht,null),e(mr,eGr),e(mr,Gr),M(fS,Gr,null),e(Gr,oGr),e(Gr,C6e),e(C6e,rGr),e(Gr,tGr),e(Gr,$n),e($n,aGr),e($n,w6e),e(w6e,nGr),e($n,sGr),e($n,A6e),e(A6e,lGr),e($n,iGr),e($n,L6e),e(L6e,dGr),e($n,cGr),e(Gr,mGr),e(Gr,fe),e(fe,R0),e(R0,y6e),e(y6e,fGr),e(R0,gGr),e(R0,Zoe),e(Zoe,hGr),e(R0,uGr),e(fe,pGr),e(fe,P0),e(P0,x6e),e(x6e,_Gr),e(P0,bGr),e(P0,ere),e(ere,vGr),e(P0,FGr),e(fe,TGr),e(fe,B0),e(B0,$6e),e($6e,MGr),e(B0,EGr),e(B0,ore),e(ore,CGr),e(B0,wGr),e(fe,AGr),e(fe,I0),e(I0,k6e),e(k6e,LGr),e(I0,yGr),e(I0,rre),e(rre,xGr),e(I0,$Gr),e(fe,kGr),e(fe,N0),e(N0,S6e),e(S6e,SGr),e(N0,RGr),e(N0,tre),e(tre,PGr),e(N0,BGr),e(fe,IGr),e(fe,q0),e(q0,R6e),e(R6e,NGr),e(q0,qGr),e(q0,are),e(are,jGr),e(q0,DGr),e(fe,GGr),e(fe,j0),e(j0,P6e),e(P6e,OGr),e(j0,VGr),e(j0,nre),e(nre,XGr),e(j0,zGr),e(fe,QGr),e(fe,D0),e(D0,B6e),e(B6e,WGr),e(D0,UGr),e(D0,sre),e(sre,HGr),e(D0,JGr),e(fe,YGr),e(fe,G0),e(G0,I6e),e(I6e,KGr),e(G0,ZGr),e(G0,lre),e(lre,eOr),e(G0,oOr),e(fe,rOr),e(fe,O0),e(O0,N6e),e(N6e,tOr),e(O0,aOr),e(O0,ire),e(ire,nOr),e(O0,sOr),e(fe,lOr),e(fe,V0),e(V0,q6e),e(q6e,iOr),e(V0,dOr),e(V0,dre),e(dre,cOr),e(V0,mOr),e(fe,fOr),e(fe,X0),e(X0,j6e),e(j6e,gOr),e(X0,hOr),e(X0,cre),e(cre,uOr),e(X0,pOr),e(fe,_Or),e(fe,z0),e(z0,D6e),e(D6e,bOr),e(z0,vOr),e(z0,mre),e(mre,FOr),e(z0,TOr),e(fe,MOr),e(fe,Q0),e(Q0,G6e),e(G6e,EOr),e(Q0,COr),e(Q0,fre),e(fre,wOr),e(Q0,AOr),e(fe,LOr),e(fe,W0),e(W0,O6e),e(O6e,yOr),e(W0,xOr),e(W0,gre),e(gre,$Or),e(W0,kOr),e(fe,SOr),e(fe,U0),e(U0,V6e),e(V6e,ROr),e(U0,POr),e(U0,hre),e(hre,BOr),e(U0,IOr),e(fe,NOr),e(fe,H0),e(H0,X6e),e(X6e,qOr),e(H0,jOr),e(H0,ure),e(ure,DOr),e(H0,GOr),e(fe,OOr),e(fe,J0),e(J0,z6e),e(z6e,VOr),e(J0,XOr),e(J0,pre),e(pre,zOr),e(J0,QOr),e(fe,WOr),e(fe,Y0),e(Y0,Q6e),e(Q6e,UOr),e(Y0,HOr),e(Y0,_re),e(_re,JOr),e(Y0,YOr),e(fe,KOr),e(fe,K0),e(K0,W6e),e(W6e,ZOr),e(K0,eVr),e(K0,bre),e(bre,oVr),e(K0,rVr),e(Gr,tVr),M(Z0,Gr,null),b(m,ueo,_),b(m,lm,_),e(lm,ew),e(ew,U6e),M(gS,U6e,null),e(lm,aVr),e(lm,H6e),e(H6e,nVr),b(m,peo,_),b(m,fr,_),M(hS,fr,null),e(fr,sVr),e(fr,im),e(im,lVr),e(im,vre),e(vre,iVr),e(im,dVr),e(im,Fre),e(Fre,cVr),e(im,mVr),e(fr,fVr),e(fr,uS),e(uS,gVr),e(uS,J6e),e(J6e,hVr),e(uS,uVr),e(fr,pVr),e(fr,Jt),M(pS,Jt,null),e(Jt,_Vr),e(Jt,Y6e),e(Y6e,bVr),e(Jt,vVr),e(Jt,dm),e(dm,FVr),e(dm,K6e),e(K6e,TVr),e(dm,MVr),e(dm,Tre),e(Tre,EVr),e(dm,CVr),e(Jt,wVr),M(ow,Jt,null),e(fr,AVr),e(fr,Or),M(_S,Or,null),e(Or,LVr),e(Or,Z6e),e(Z6e,yVr),e(Or,xVr),e(Or,kn),e(kn,$Vr),e(kn,e7e),e(e7e,kVr),e(kn,SVr),e(kn,o7e),e(o7e,RVr),e(kn,PVr),e(kn,r7e),e(r7e,BVr),e(kn,IVr),e(Or,NVr),e(Or,ye),e(ye,rw),e(rw,t7e),e(t7e,qVr),e(rw,jVr),e(rw,Mre),e(Mre,DVr),e(rw,GVr),e(ye,OVr),e(ye,tw),e(tw,a7e),e(a7e,VVr),e(tw,XVr),e(tw,Ere),e(Ere,zVr),e(tw,QVr),e(ye,WVr),e(ye,aw),e(aw,n7e),e(n7e,UVr),e(aw,HVr),e(aw,Cre),e(Cre,JVr),e(aw,YVr),e(ye,KVr),e(ye,nw),e(nw,s7e),e(s7e,ZVr),e(nw,eXr),e(nw,wre),e(wre,oXr),e(nw,rXr),e(ye,tXr),e(ye,sw),e(sw,l7e),e(l7e,aXr),e(sw,nXr),e(sw,Are),e(Are,sXr),e(sw,lXr),e(ye,iXr),e(ye,lw),e(lw,i7e),e(i7e,dXr),e(lw,cXr),e(lw,Lre),e(Lre,mXr),e(lw,fXr),e(ye,gXr),e(ye,iw),e(iw,d7e),e(d7e,hXr),e(iw,uXr),e(iw,yre),e(yre,pXr),e(iw,_Xr),e(ye,bXr),e(ye,dw),e(dw,c7e),e(c7e,vXr),e(dw,FXr),e(dw,xre),e(xre,TXr),e(dw,MXr),e(ye,EXr),e(ye,cw),e(cw,m7e),e(m7e,CXr),e(cw,wXr),e(cw,$re),e($re,AXr),e(cw,LXr),e(ye,yXr),e(ye,mw),e(mw,f7e),e(f7e,xXr),e(mw,$Xr),e(mw,kre),e(kre,kXr),e(mw,SXr),e(Or,RXr),M(fw,Or,null),b(m,_eo,_),b(m,cm,_),e(cm,gw),e(gw,g7e),M(bS,g7e,null),e(cm,PXr),e(cm,h7e),e(h7e,BXr),b(m,beo,_),b(m,gr,_),M(vS,gr,null),e(gr,IXr),e(gr,mm),e(mm,NXr),e(mm,Sre),e(Sre,qXr),e(mm,jXr),e(mm,Rre),e(Rre,DXr),e(mm,GXr),e(gr,OXr),e(gr,FS),e(FS,VXr),e(FS,u7e),e(u7e,XXr),e(FS,zXr),e(gr,QXr),e(gr,Yt),M(TS,Yt,null),e(Yt,WXr),e(Yt,p7e),e(p7e,UXr),e(Yt,HXr),e(Yt,fm),e(fm,JXr),e(fm,_7e),e(_7e,YXr),e(fm,KXr),e(fm,Pre),e(Pre,ZXr),e(fm,ezr),e(Yt,ozr),M(hw,Yt,null),e(gr,rzr),e(gr,Vr),M(MS,Vr,null),e(Vr,tzr),e(Vr,b7e),e(b7e,azr),e(Vr,nzr),e(Vr,Sn),e(Sn,szr),e(Sn,v7e),e(v7e,lzr),e(Sn,izr),e(Sn,F7e),e(F7e,dzr),e(Sn,czr),e(Sn,T7e),e(T7e,mzr),e(Sn,fzr),e(Vr,gzr),e(Vr,re),e(re,uw),e(uw,M7e),e(M7e,hzr),e(uw,uzr),e(uw,Bre),e(Bre,pzr),e(uw,_zr),e(re,bzr),e(re,pw),e(pw,E7e),e(E7e,vzr),e(pw,Fzr),e(pw,Ire),e(Ire,Tzr),e(pw,Mzr),e(re,Ezr),e(re,_w),e(_w,C7e),e(C7e,Czr),e(_w,wzr),e(_w,Nre),e(Nre,Azr),e(_w,Lzr),e(re,yzr),e(re,bw),e(bw,w7e),e(w7e,xzr),e(bw,$zr),e(bw,qre),e(qre,kzr),e(bw,Szr),e(re,Rzr),e(re,vw),e(vw,A7e),e(A7e,Pzr),e(vw,Bzr),e(vw,jre),e(jre,Izr),e(vw,Nzr),e(re,qzr),e(re,Fw),e(Fw,L7e),e(L7e,jzr),e(Fw,Dzr),e(Fw,Dre),e(Dre,Gzr),e(Fw,Ozr),e(re,Vzr),e(re,Tw),e(Tw,y7e),e(y7e,Xzr),e(Tw,zzr),e(Tw,Gre),e(Gre,Qzr),e(Tw,Wzr),e(re,Uzr),e(re,Mw),e(Mw,x7e),e(x7e,Hzr),e(Mw,Jzr),e(Mw,Ore),e(Ore,Yzr),e(Mw,Kzr),e(re,Zzr),e(re,Ew),e(Ew,$7e),e($7e,eQr),e(Ew,oQr),e(Ew,Vre),e(Vre,rQr),e(Ew,tQr),e(re,aQr),e(re,Cw),e(Cw,k7e),e(k7e,nQr),e(Cw,sQr),e(Cw,Xre),e(Xre,lQr),e(Cw,iQr),e(re,dQr),e(re,ww),e(ww,S7e),e(S7e,cQr),e(ww,mQr),e(ww,zre),e(zre,fQr),e(ww,gQr),e(re,hQr),e(re,Aw),e(Aw,R7e),e(R7e,uQr),e(Aw,pQr),e(Aw,Qre),e(Qre,_Qr),e(Aw,bQr),e(re,vQr),e(re,Lw),e(Lw,P7e),e(P7e,FQr),e(Lw,TQr),e(Lw,Wre),e(Wre,MQr),e(Lw,EQr),e(re,CQr),e(re,yw),e(yw,B7e),e(B7e,wQr),e(yw,AQr),e(yw,Ure),e(Ure,LQr),e(yw,yQr),e(re,xQr),e(re,xw),e(xw,I7e),e(I7e,$Qr),e(xw,kQr),e(xw,Hre),e(Hre,SQr),e(xw,RQr),e(re,PQr),e(re,$w),e($w,N7e),e(N7e,BQr),e($w,IQr),e($w,Jre),e(Jre,NQr),e($w,qQr),e(re,jQr),e(re,kw),e(kw,q7e),e(q7e,DQr),e(kw,GQr),e(kw,Yre),e(Yre,OQr),e(kw,VQr),e(re,XQr),e(re,Sw),e(Sw,j7e),e(j7e,zQr),e(Sw,QQr),e(Sw,Kre),e(Kre,WQr),e(Sw,UQr),e(re,HQr),e(re,Rw),e(Rw,D7e),e(D7e,JQr),e(Rw,YQr),e(Rw,Zre),e(Zre,KQr),e(Rw,ZQr),e(re,eWr),e(re,Pw),e(Pw,G7e),e(G7e,oWr),e(Pw,rWr),e(Pw,ete),e(ete,tWr),e(Pw,aWr),e(re,nWr),e(re,Bw),e(Bw,O7e),e(O7e,sWr),e(Bw,lWr),e(Bw,ote),e(ote,iWr),e(Bw,dWr),e(re,cWr),e(re,Iw),e(Iw,V7e),e(V7e,mWr),e(Iw,fWr),e(Iw,rte),e(rte,gWr),e(Iw,hWr),e(re,uWr),e(re,Nw),e(Nw,X7e),e(X7e,pWr),e(Nw,_Wr),e(Nw,tte),e(tte,bWr),e(Nw,vWr),e(re,FWr),e(re,qw),e(qw,z7e),e(z7e,TWr),e(qw,MWr),e(qw,ate),e(ate,EWr),e(qw,CWr),e(re,wWr),e(re,jw),e(jw,Q7e),e(Q7e,AWr),e(jw,LWr),e(jw,nte),e(nte,yWr),e(jw,xWr),e(re,$Wr),e(re,Dw),e(Dw,W7e),e(W7e,kWr),e(Dw,SWr),e(Dw,ste),e(ste,RWr),e(Dw,PWr),e(re,BWr),e(re,Gw),e(Gw,U7e),e(U7e,IWr),e(Gw,NWr),e(Gw,lte),e(lte,qWr),e(Gw,jWr),e(Vr,DWr),M(Ow,Vr,null),b(m,veo,_),b(m,gm,_),e(gm,Vw),e(Vw,H7e),M(ES,H7e,null),e(gm,GWr),e(gm,J7e),e(J7e,OWr),b(m,Feo,_),b(m,hr,_),M(CS,hr,null),e(hr,VWr),e(hr,hm),e(hm,XWr),e(hm,ite),e(ite,zWr),e(hm,QWr),e(hm,dte),e(dte,WWr),e(hm,UWr),e(hr,HWr),e(hr,wS),e(wS,JWr),e(wS,Y7e),e(Y7e,YWr),e(wS,KWr),e(hr,ZWr),e(hr,Kt),M(AS,Kt,null),e(Kt,eUr),e(Kt,K7e),e(K7e,oUr),e(Kt,rUr),e(Kt,um),e(um,tUr),e(um,Z7e),e(Z7e,aUr),e(um,nUr),e(um,cte),e(cte,sUr),e(um,lUr),e(Kt,iUr),M(Xw,Kt,null),e(hr,dUr),e(hr,Xr),M(LS,Xr,null),e(Xr,cUr),e(Xr,eLe),e(eLe,mUr),e(Xr,fUr),e(Xr,Rn),e(Rn,gUr),e(Rn,oLe),e(oLe,hUr),e(Rn,uUr),e(Rn,rLe),e(rLe,pUr),e(Rn,_Ur),e(Rn,tLe),e(tLe,bUr),e(Rn,vUr),e(Xr,FUr),e(Xr,ve),e(ve,zw),e(zw,aLe),e(aLe,TUr),e(zw,MUr),e(zw,mte),e(mte,EUr),e(zw,CUr),e(ve,wUr),e(ve,Qw),e(Qw,nLe),e(nLe,AUr),e(Qw,LUr),e(Qw,fte),e(fte,yUr),e(Qw,xUr),e(ve,$Ur),e(ve,Ww),e(Ww,sLe),e(sLe,kUr),e(Ww,SUr),e(Ww,gte),e(gte,RUr),e(Ww,PUr),e(ve,BUr),e(ve,Uw),e(Uw,lLe),e(lLe,IUr),e(Uw,NUr),e(Uw,hte),e(hte,qUr),e(Uw,jUr),e(ve,DUr),e(ve,Hw),e(Hw,iLe),e(iLe,GUr),e(Hw,OUr),e(Hw,ute),e(ute,VUr),e(Hw,XUr),e(ve,zUr),e(ve,Jw),e(Jw,dLe),e(dLe,QUr),e(Jw,WUr),e(Jw,pte),e(pte,UUr),e(Jw,HUr),e(ve,JUr),e(ve,Yw),e(Yw,cLe),e(cLe,YUr),e(Yw,KUr),e(Yw,_te),e(_te,ZUr),e(Yw,eHr),e(ve,oHr),e(ve,Kw),e(Kw,mLe),e(mLe,rHr),e(Kw,tHr),e(Kw,bte),e(bte,aHr),e(Kw,nHr),e(ve,sHr),e(ve,Zw),e(Zw,fLe),e(fLe,lHr),e(Zw,iHr),e(Zw,vte),e(vte,dHr),e(Zw,cHr),e(ve,mHr),e(ve,eA),e(eA,gLe),e(gLe,fHr),e(eA,gHr),e(eA,Fte),e(Fte,hHr),e(eA,uHr),e(ve,pHr),e(ve,oA),e(oA,hLe),e(hLe,_Hr),e(oA,bHr),e(oA,Tte),e(Tte,vHr),e(oA,FHr),e(ve,THr),e(ve,rA),e(rA,uLe),e(uLe,MHr),e(rA,EHr),e(rA,Mte),e(Mte,CHr),e(rA,wHr),e(ve,AHr),e(ve,tA),e(tA,pLe),e(pLe,LHr),e(tA,yHr),e(tA,Ete),e(Ete,xHr),e(tA,$Hr),e(ve,kHr),e(ve,aA),e(aA,_Le),e(_Le,SHr),e(aA,RHr),e(aA,Cte),e(Cte,PHr),e(aA,BHr),e(ve,IHr),e(ve,nA),e(nA,bLe),e(bLe,NHr),e(nA,qHr),e(nA,wte),e(wte,jHr),e(nA,DHr),e(ve,GHr),e(ve,sA),e(sA,vLe),e(vLe,OHr),e(sA,VHr),e(sA,Ate),e(Ate,XHr),e(sA,zHr),e(ve,QHr),e(ve,lA),e(lA,FLe),e(FLe,WHr),e(lA,UHr),e(lA,Lte),e(Lte,HHr),e(lA,JHr),e(Xr,YHr),M(iA,Xr,null),b(m,Teo,_),b(m,pm,_),e(pm,dA),e(dA,TLe),M(yS,TLe,null),e(pm,KHr),e(pm,MLe),e(MLe,ZHr),b(m,Meo,_),b(m,ur,_),M(xS,ur,null),e(ur,eJr),e(ur,_m),e(_m,oJr),e(_m,yte),e(yte,rJr),e(_m,tJr),e(_m,xte),e(xte,aJr),e(_m,nJr),e(ur,sJr),e(ur,$S),e($S,lJr),e($S,ELe),e(ELe,iJr),e($S,dJr),e(ur,cJr),e(ur,Zt),M(kS,Zt,null),e(Zt,mJr),e(Zt,CLe),e(CLe,fJr),e(Zt,gJr),e(Zt,bm),e(bm,hJr),e(bm,wLe),e(wLe,uJr),e(bm,pJr),e(bm,$te),e($te,_Jr),e(bm,bJr),e(Zt,vJr),M(cA,Zt,null),e(ur,FJr),e(ur,zr),M(SS,zr,null),e(zr,TJr),e(zr,ALe),e(ALe,MJr),e(zr,EJr),e(zr,Pn),e(Pn,CJr),e(Pn,LLe),e(LLe,wJr),e(Pn,AJr),e(Pn,yLe),e(yLe,LJr),e(Pn,yJr),e(Pn,xLe),e(xLe,xJr),e(Pn,$Jr),e(zr,kJr),e(zr,RS),e(RS,mA),e(mA,$Le),e($Le,SJr),e(mA,RJr),e(mA,kte),e(kte,PJr),e(mA,BJr),e(RS,IJr),e(RS,fA),e(fA,kLe),e(kLe,NJr),e(fA,qJr),e(fA,Ste),e(Ste,jJr),e(fA,DJr),e(zr,GJr),M(gA,zr,null),b(m,Eeo,_),b(m,vm,_),e(vm,hA),e(hA,SLe),M(PS,SLe,null),e(vm,OJr),e(vm,RLe),e(RLe,VJr),b(m,Ceo,_),b(m,pr,_),M(BS,pr,null),e(pr,XJr),e(pr,Fm),e(Fm,zJr),e(Fm,Rte),e(Rte,QJr),e(Fm,WJr),e(Fm,Pte),e(Pte,UJr),e(Fm,HJr),e(pr,JJr),e(pr,IS),e(IS,YJr),e(IS,PLe),e(PLe,KJr),e(IS,ZJr),e(pr,eYr),e(pr,ea),M(NS,ea,null),e(ea,oYr),e(ea,BLe),e(BLe,rYr),e(ea,tYr),e(ea,Tm),e(Tm,aYr),e(Tm,ILe),e(ILe,nYr),e(Tm,sYr),e(Tm,Bte),e(Bte,lYr),e(Tm,iYr),e(ea,dYr),M(uA,ea,null),e(pr,cYr),e(pr,Qr),M(qS,Qr,null),e(Qr,mYr),e(Qr,NLe),e(NLe,fYr),e(Qr,gYr),e(Qr,Bn),e(Bn,hYr),e(Bn,qLe),e(qLe,uYr),e(Bn,pYr),e(Bn,jLe),e(jLe,_Yr),e(Bn,bYr),e(Bn,DLe),e(DLe,vYr),e(Bn,FYr),e(Qr,TYr),e(Qr,GLe),e(GLe,pA),e(pA,OLe),e(OLe,MYr),e(pA,EYr),e(pA,Ite),e(Ite,CYr),e(pA,wYr),e(Qr,AYr),M(_A,Qr,null),b(m,weo,_),b(m,Mm,_),e(Mm,bA),e(bA,VLe),M(jS,VLe,null),e(Mm,LYr),e(Mm,XLe),e(XLe,yYr),b(m,Aeo,_),b(m,_r,_),M(DS,_r,null),e(_r,xYr),e(_r,Em),e(Em,$Yr),e(Em,Nte),e(Nte,kYr),e(Em,SYr),e(Em,qte),e(qte,RYr),e(Em,PYr),e(_r,BYr),e(_r,GS),e(GS,IYr),e(GS,zLe),e(zLe,NYr),e(GS,qYr),e(_r,jYr),e(_r,oa),M(OS,oa,null),e(oa,DYr),e(oa,QLe),e(QLe,GYr),e(oa,OYr),e(oa,Cm),e(Cm,VYr),e(Cm,WLe),e(WLe,XYr),e(Cm,zYr),e(Cm,jte),e(jte,QYr),e(Cm,WYr),e(oa,UYr),M(vA,oa,null),e(_r,HYr),e(_r,Wr),M(VS,Wr,null),e(Wr,JYr),e(Wr,ULe),e(ULe,YYr),e(Wr,KYr),e(Wr,In),e(In,ZYr),e(In,HLe),e(HLe,eKr),e(In,oKr),e(In,JLe),e(JLe,rKr),e(In,tKr),e(In,YLe),e(YLe,aKr),e(In,nKr),e(Wr,sKr),e(Wr,KLe),e(KLe,FA),e(FA,ZLe),e(ZLe,lKr),e(FA,iKr),e(FA,Dte),e(Dte,dKr),e(FA,cKr),e(Wr,mKr),M(TA,Wr,null),b(m,Leo,_),b(m,wm,_),e(wm,MA),e(MA,eye),M(XS,eye,null),e(wm,fKr),e(wm,oye),e(oye,gKr),b(m,yeo,_),b(m,br,_),M(zS,br,null),e(br,hKr),e(br,Am),e(Am,uKr),e(Am,Gte),e(Gte,pKr),e(Am,_Kr),e(Am,Ote),e(Ote,bKr),e(Am,vKr),e(br,FKr),e(br,QS),e(QS,TKr),e(QS,rye),e(rye,MKr),e(QS,EKr),e(br,CKr),e(br,ra),M(WS,ra,null),e(ra,wKr),e(ra,tye),e(tye,AKr),e(ra,LKr),e(ra,Lm),e(Lm,yKr),e(Lm,aye),e(aye,xKr),e(Lm,$Kr),e(Lm,Vte),e(Vte,kKr),e(Lm,SKr),e(ra,RKr),M(EA,ra,null),e(br,PKr),e(br,Ur),M(US,Ur,null),e(Ur,BKr),e(Ur,nye),e(nye,IKr),e(Ur,NKr),e(Ur,Nn),e(Nn,qKr),e(Nn,sye),e(sye,jKr),e(Nn,DKr),e(Nn,lye),e(lye,GKr),e(Nn,OKr),e(Nn,iye),e(iye,VKr),e(Nn,XKr),e(Ur,zKr),e(Ur,de),e(de,CA),e(CA,dye),e(dye,QKr),e(CA,WKr),e(CA,Xte),e(Xte,UKr),e(CA,HKr),e(de,JKr),e(de,wA),e(wA,cye),e(cye,YKr),e(wA,KKr),e(wA,zte),e(zte,ZKr),e(wA,eZr),e(de,oZr),e(de,AA),e(AA,mye),e(mye,rZr),e(AA,tZr),e(AA,Qte),e(Qte,aZr),e(AA,nZr),e(de,sZr),e(de,LA),e(LA,fye),e(fye,lZr),e(LA,iZr),e(LA,Wte),e(Wte,dZr),e(LA,cZr),e(de,mZr),e(de,yA),e(yA,gye),e(gye,fZr),e(yA,gZr),e(yA,Ute),e(Ute,hZr),e(yA,uZr),e(de,pZr),e(de,xA),e(xA,hye),e(hye,_Zr),e(xA,bZr),e(xA,Hte),e(Hte,vZr),e(xA,FZr),e(de,TZr),e(de,$A),e($A,uye),e(uye,MZr),e($A,EZr),e($A,Jte),e(Jte,CZr),e($A,wZr),e(de,AZr),e(de,kA),e(kA,pye),e(pye,LZr),e(kA,yZr),e(kA,Yte),e(Yte,xZr),e(kA,$Zr),e(de,kZr),e(de,SA),e(SA,_ye),e(_ye,SZr),e(SA,RZr),e(SA,Kte),e(Kte,PZr),e(SA,BZr),e(de,IZr),e(de,RA),e(RA,bye),e(bye,NZr),e(RA,qZr),e(RA,Zte),e(Zte,jZr),e(RA,DZr),e(de,GZr),e(de,PA),e(PA,vye),e(vye,OZr),e(PA,VZr),e(PA,eae),e(eae,XZr),e(PA,zZr),e(de,QZr),e(de,BA),e(BA,Fye),e(Fye,WZr),e(BA,UZr),e(BA,oae),e(oae,HZr),e(BA,JZr),e(de,YZr),e(de,IA),e(IA,Tye),e(Tye,KZr),e(IA,ZZr),e(IA,rae),e(rae,eet),e(IA,oet),e(de,ret),e(de,NA),e(NA,Mye),e(Mye,tet),e(NA,aet),e(NA,tae),e(tae,net),e(NA,set),e(de,iet),e(de,qA),e(qA,Eye),e(Eye,det),e(qA,cet),e(qA,aae),e(aae,met),e(qA,fet),e(de,get),e(de,jA),e(jA,Cye),e(Cye,het),e(jA,uet),e(jA,nae),e(nae,pet),e(jA,_et),e(de,bet),e(de,DA),e(DA,wye),e(wye,vet),e(DA,Fet),e(DA,sae),e(sae,Tet),e(DA,Met),e(de,Eet),e(de,GA),e(GA,Aye),e(Aye,Cet),e(GA,wet),e(GA,lae),e(lae,Aet),e(GA,Let),e(de,yet),e(de,OA),e(OA,Lye),e(Lye,xet),e(OA,$et),e(OA,iae),e(iae,ket),e(OA,Set),e(de,Ret),e(de,VA),e(VA,yye),e(yye,Pet),e(VA,Bet),e(VA,dae),e(dae,Iet),e(VA,Net),e(de,qet),e(de,XA),e(XA,xye),e(xye,jet),e(XA,Det),e(XA,cae),e(cae,Get),e(XA,Oet),e(Ur,Vet),M(zA,Ur,null),b(m,xeo,_),b(m,ym,_),e(ym,QA),e(QA,$ye),M(HS,$ye,null),e(ym,Xet),e(ym,kye),e(kye,zet),b(m,$eo,_),b(m,vr,_),M(JS,vr,null),e(vr,Qet),e(vr,xm),e(xm,Wet),e(xm,mae),e(mae,Uet),e(xm,Het),e(xm,fae),e(fae,Jet),e(xm,Yet),e(vr,Ket),e(vr,YS),e(YS,Zet),e(YS,Sye),e(Sye,eot),e(YS,oot),e(vr,rot),e(vr,ta),M(KS,ta,null),e(ta,tot),e(ta,Rye),e(Rye,aot),e(ta,not),e(ta,$m),e($m,sot),e($m,Pye),e(Pye,lot),e($m,iot),e($m,gae),e(gae,dot),e($m,cot),e(ta,mot),M(WA,ta,null),e(vr,fot),e(vr,Hr),M(ZS,Hr,null),e(Hr,got),e(Hr,Bye),e(Bye,hot),e(Hr,uot),e(Hr,qn),e(qn,pot),e(qn,Iye),e(Iye,_ot),e(qn,bot),e(qn,Nye),e(Nye,vot),e(qn,Fot),e(qn,qye),e(qye,Tot),e(qn,Mot),e(Hr,Eot),e(Hr,ce),e(ce,UA),e(UA,jye),e(jye,Cot),e(UA,wot),e(UA,hae),e(hae,Aot),e(UA,Lot),e(ce,yot),e(ce,HA),e(HA,Dye),e(Dye,xot),e(HA,$ot),e(HA,uae),e(uae,kot),e(HA,Sot),e(ce,Rot),e(ce,JA),e(JA,Gye),e(Gye,Pot),e(JA,Bot),e(JA,pae),e(pae,Iot),e(JA,Not),e(ce,qot),e(ce,YA),e(YA,Oye),e(Oye,jot),e(YA,Dot),e(YA,_ae),e(_ae,Got),e(YA,Oot),e(ce,Vot),e(ce,KA),e(KA,Vye),e(Vye,Xot),e(KA,zot),e(KA,bae),e(bae,Qot),e(KA,Wot),e(ce,Uot),e(ce,ZA),e(ZA,Xye),e(Xye,Hot),e(ZA,Jot),e(ZA,vae),e(vae,Yot),e(ZA,Kot),e(ce,Zot),e(ce,e6),e(e6,zye),e(zye,ert),e(e6,ort),e(e6,Fae),e(Fae,rrt),e(e6,trt),e(ce,art),e(ce,o6),e(o6,Qye),e(Qye,nrt),e(o6,srt),e(o6,Tae),e(Tae,lrt),e(o6,irt),e(ce,drt),e(ce,r6),e(r6,Wye),e(Wye,crt),e(r6,mrt),e(r6,Mae),e(Mae,frt),e(r6,grt),e(ce,hrt),e(ce,t6),e(t6,Uye),e(Uye,urt),e(t6,prt),e(t6,Eae),e(Eae,_rt),e(t6,brt),e(ce,vrt),e(ce,a6),e(a6,Hye),e(Hye,Frt),e(a6,Trt),e(a6,Cae),e(Cae,Mrt),e(a6,Ert),e(ce,Crt),e(ce,n6),e(n6,Jye),e(Jye,wrt),e(n6,Art),e(n6,wae),e(wae,Lrt),e(n6,yrt),e(ce,xrt),e(ce,s6),e(s6,Yye),e(Yye,$rt),e(s6,krt),e(s6,Aae),e(Aae,Srt),e(s6,Rrt),e(ce,Prt),e(ce,l6),e(l6,Kye),e(Kye,Brt),e(l6,Irt),e(l6,Lae),e(Lae,Nrt),e(l6,qrt),e(ce,jrt),e(ce,i6),e(i6,Zye),e(Zye,Drt),e(i6,Grt),e(i6,yae),e(yae,Ort),e(i6,Vrt),e(ce,Xrt),e(ce,d6),e(d6,e8e),e(e8e,zrt),e(d6,Qrt),e(d6,xae),e(xae,Wrt),e(d6,Urt),e(ce,Hrt),e(ce,c6),e(c6,o8e),e(o8e,Jrt),e(c6,Yrt),e(c6,$ae),e($ae,Krt),e(c6,Zrt),e(ce,ett),e(ce,m6),e(m6,r8e),e(r8e,ott),e(m6,rtt),e(m6,kae),e(kae,ttt),e(m6,att),e(ce,ntt),e(ce,f6),e(f6,t8e),e(t8e,stt),e(f6,ltt),e(f6,Sae),e(Sae,itt),e(f6,dtt),e(ce,ctt),e(ce,g6),e(g6,a8e),e(a8e,mtt),e(g6,ftt),e(g6,Rae),e(Rae,gtt),e(g6,htt),e(ce,utt),e(ce,h6),e(h6,n8e),e(n8e,ptt),e(h6,_tt),e(h6,Pae),e(Pae,btt),e(h6,vtt),e(Hr,Ftt),M(u6,Hr,null),b(m,keo,_),b(m,km,_),e(km,p6),e(p6,s8e),M(eR,s8e,null),e(km,Ttt),e(km,l8e),e(l8e,Mtt),b(m,Seo,_),b(m,Fr,_),M(oR,Fr,null),e(Fr,Ett),e(Fr,Sm),e(Sm,Ctt),e(Sm,Bae),e(Bae,wtt),e(Sm,Att),e(Sm,Iae),e(Iae,Ltt),e(Sm,ytt),e(Fr,xtt),e(Fr,rR),e(rR,$tt),e(rR,i8e),e(i8e,ktt),e(rR,Stt),e(Fr,Rtt),e(Fr,aa),M(tR,aa,null),e(aa,Ptt),e(aa,d8e),e(d8e,Btt),e(aa,Itt),e(aa,Rm),e(Rm,Ntt),e(Rm,c8e),e(c8e,qtt),e(Rm,jtt),e(Rm,Nae),e(Nae,Dtt),e(Rm,Gtt),e(aa,Ott),M(_6,aa,null),e(Fr,Vtt),e(Fr,Jr),M(aR,Jr,null),e(Jr,Xtt),e(Jr,m8e),e(m8e,ztt),e(Jr,Qtt),e(Jr,jn),e(jn,Wtt),e(jn,f8e),e(f8e,Utt),e(jn,Htt),e(jn,g8e),e(g8e,Jtt),e(jn,Ytt),e(jn,h8e),e(h8e,Ktt),e(jn,Ztt),e(Jr,eat),e(Jr,u8e),e(u8e,b6),e(b6,p8e),e(p8e,oat),e(b6,rat),e(b6,qae),e(qae,tat),e(b6,aat),e(Jr,nat),M(v6,Jr,null),b(m,Reo,_),b(m,Pm,_),e(Pm,F6),e(F6,_8e),M(nR,_8e,null),e(Pm,sat),e(Pm,b8e),e(b8e,lat),b(m,Peo,_),b(m,Tr,_),M(sR,Tr,null),e(Tr,iat),e(Tr,Bm),e(Bm,dat),e(Bm,jae),e(jae,cat),e(Bm,mat),e(Bm,Dae),e(Dae,fat),e(Bm,gat),e(Tr,hat),e(Tr,lR),e(lR,uat),e(lR,v8e),e(v8e,pat),e(lR,_at),e(Tr,bat),e(Tr,na),M(iR,na,null),e(na,vat),e(na,F8e),e(F8e,Fat),e(na,Tat),e(na,Im),e(Im,Mat),e(Im,T8e),e(T8e,Eat),e(Im,Cat),e(Im,Gae),e(Gae,wat),e(Im,Aat),e(na,Lat),M(T6,na,null),e(Tr,yat),e(Tr,Yr),M(dR,Yr,null),e(Yr,xat),e(Yr,M8e),e(M8e,$at),e(Yr,kat),e(Yr,Dn),e(Dn,Sat),e(Dn,E8e),e(E8e,Rat),e(Dn,Pat),e(Dn,C8e),e(C8e,Bat),e(Dn,Iat),e(Dn,w8e),e(w8e,Nat),e(Dn,qat),e(Yr,jat),e(Yr,A8e),e(A8e,M6),e(M6,L8e),e(L8e,Dat),e(M6,Gat),e(M6,Oae),e(Oae,Oat),e(M6,Vat),e(Yr,Xat),M(E6,Yr,null),b(m,Beo,_),b(m,Nm,_),e(Nm,C6),e(C6,y8e),M(cR,y8e,null),e(Nm,zat),e(Nm,x8e),e(x8e,Qat),b(m,Ieo,_),b(m,Mr,_),M(mR,Mr,null),e(Mr,Wat),e(Mr,qm),e(qm,Uat),e(qm,Vae),e(Vae,Hat),e(qm,Jat),e(qm,Xae),e(Xae,Yat),e(qm,Kat),e(Mr,Zat),e(Mr,fR),e(fR,ent),e(fR,$8e),e($8e,ont),e(fR,rnt),e(Mr,tnt),e(Mr,sa),M(gR,sa,null),e(sa,ant),e(sa,k8e),e(k8e,nnt),e(sa,snt),e(sa,jm),e(jm,lnt),e(jm,S8e),e(S8e,int),e(jm,dnt),e(jm,zae),e(zae,cnt),e(jm,mnt),e(sa,fnt),M(w6,sa,null),e(Mr,gnt),e(Mr,Kr),M(hR,Kr,null),e(Kr,hnt),e(Kr,R8e),e(R8e,unt),e(Kr,pnt),e(Kr,Gn),e(Gn,_nt),e(Gn,P8e),e(P8e,bnt),e(Gn,vnt),e(Gn,B8e),e(B8e,Fnt),e(Gn,Tnt),e(Gn,I8e),e(I8e,Mnt),e(Gn,Ent),e(Kr,Cnt),e(Kr,te),e(te,A6),e(A6,N8e),e(N8e,wnt),e(A6,Ant),e(A6,Qae),e(Qae,Lnt),e(A6,ynt),e(te,xnt),e(te,L6),e(L6,q8e),e(q8e,$nt),e(L6,knt),e(L6,Wae),e(Wae,Snt),e(L6,Rnt),e(te,Pnt),e(te,y6),e(y6,j8e),e(j8e,Bnt),e(y6,Int),e(y6,Uae),e(Uae,Nnt),e(y6,qnt),e(te,jnt),e(te,x6),e(x6,D8e),e(D8e,Dnt),e(x6,Gnt),e(x6,Hae),e(Hae,Ont),e(x6,Vnt),e(te,Xnt),e(te,$6),e($6,G8e),e(G8e,znt),e($6,Qnt),e($6,Jae),e(Jae,Wnt),e($6,Unt),e(te,Hnt),e(te,k6),e(k6,O8e),e(O8e,Jnt),e(k6,Ynt),e(k6,Yae),e(Yae,Knt),e(k6,Znt),e(te,est),e(te,S6),e(S6,V8e),e(V8e,ost),e(S6,rst),e(S6,Kae),e(Kae,tst),e(S6,ast),e(te,nst),e(te,R6),e(R6,X8e),e(X8e,sst),e(R6,lst),e(R6,Zae),e(Zae,ist),e(R6,dst),e(te,cst),e(te,P6),e(P6,z8e),e(z8e,mst),e(P6,fst),e(P6,ene),e(ene,gst),e(P6,hst),e(te,ust),e(te,B6),e(B6,Q8e),e(Q8e,pst),e(B6,_st),e(B6,one),e(one,bst),e(B6,vst),e(te,Fst),e(te,I6),e(I6,W8e),e(W8e,Tst),e(I6,Mst),e(I6,rne),e(rne,Est),e(I6,Cst),e(te,wst),e(te,N6),e(N6,U8e),e(U8e,Ast),e(N6,Lst),e(N6,tne),e(tne,yst),e(N6,xst),e(te,$st),e(te,q6),e(q6,H8e),e(H8e,kst),e(q6,Sst),e(q6,ane),e(ane,Rst),e(q6,Pst),e(te,Bst),e(te,j6),e(j6,J8e),e(J8e,Ist),e(j6,Nst),e(j6,nne),e(nne,qst),e(j6,jst),e(te,Dst),e(te,D6),e(D6,Y8e),e(Y8e,Gst),e(D6,Ost),e(D6,sne),e(sne,Vst),e(D6,Xst),e(te,zst),e(te,G6),e(G6,K8e),e(K8e,Qst),e(G6,Wst),e(G6,lne),e(lne,Ust),e(G6,Hst),e(te,Jst),e(te,O6),e(O6,Z8e),e(Z8e,Yst),e(O6,Kst),e(O6,ine),e(ine,Zst),e(O6,elt),e(te,olt),e(te,V6),e(V6,e9e),e(e9e,rlt),e(V6,tlt),e(V6,dne),e(dne,alt),e(V6,nlt),e(te,slt),e(te,X6),e(X6,o9e),e(o9e,llt),e(X6,ilt),e(X6,cne),e(cne,dlt),e(X6,clt),e(te,mlt),e(te,z6),e(z6,r9e),e(r9e,flt),e(z6,glt),e(z6,mne),e(mne,hlt),e(z6,ult),e(te,plt),e(te,Q6),e(Q6,t9e),e(t9e,_lt),e(Q6,blt),e(Q6,fne),e(fne,vlt),e(Q6,Flt),e(te,Tlt),e(te,W6),e(W6,a9e),e(a9e,Mlt),e(W6,Elt),e(W6,gne),e(gne,Clt),e(W6,wlt),e(te,Alt),e(te,U6),e(U6,n9e),e(n9e,Llt),e(U6,ylt),e(U6,hne),e(hne,xlt),e(U6,$lt),e(te,klt),e(te,H6),e(H6,s9e),e(s9e,Slt),e(H6,Rlt),e(H6,une),e(une,Plt),e(H6,Blt),e(te,Ilt),e(te,J6),e(J6,l9e),e(l9e,Nlt),e(J6,qlt),e(J6,pne),e(pne,jlt),e(J6,Dlt),e(te,Glt),e(te,Y6),e(Y6,i9e),e(i9e,Olt),e(Y6,Vlt),e(Y6,_ne),e(_ne,Xlt),e(Y6,zlt),e(te,Qlt),e(te,K6),e(K6,d9e),e(d9e,Wlt),e(K6,Ult),e(K6,bne),e(bne,Hlt),e(K6,Jlt),e(Kr,Ylt),M(Z6,Kr,null),b(m,Neo,_),b(m,Dm,_),e(Dm,e7),e(e7,c9e),M(uR,c9e,null),e(Dm,Klt),e(Dm,m9e),e(m9e,Zlt),b(m,qeo,_),b(m,Er,_),M(pR,Er,null),e(Er,eit),e(Er,Gm),e(Gm,oit),e(Gm,vne),e(vne,rit),e(Gm,tit),e(Gm,Fne),e(Fne,ait),e(Gm,nit),e(Er,sit),e(Er,_R),e(_R,lit),e(_R,f9e),e(f9e,iit),e(_R,dit),e(Er,cit),e(Er,la),M(bR,la,null),e(la,mit),e(la,g9e),e(g9e,fit),e(la,git),e(la,Om),e(Om,hit),e(Om,h9e),e(h9e,uit),e(Om,pit),e(Om,Tne),e(Tne,_it),e(Om,bit),e(la,vit),M(o7,la,null),e(Er,Fit),e(Er,Zr),M(vR,Zr,null),e(Zr,Tit),e(Zr,u9e),e(u9e,Mit),e(Zr,Eit),e(Zr,On),e(On,Cit),e(On,p9e),e(p9e,wit),e(On,Ait),e(On,_9e),e(_9e,Lit),e(On,yit),e(On,b9e),e(b9e,xit),e(On,$it),e(Zr,kit),e(Zr,xe),e(xe,r7),e(r7,v9e),e(v9e,Sit),e(r7,Rit),e(r7,Mne),e(Mne,Pit),e(r7,Bit),e(xe,Iit),e(xe,t7),e(t7,F9e),e(F9e,Nit),e(t7,qit),e(t7,Ene),e(Ene,jit),e(t7,Dit),e(xe,Git),e(xe,a7),e(a7,T9e),e(T9e,Oit),e(a7,Vit),e(a7,Cne),e(Cne,Xit),e(a7,zit),e(xe,Qit),e(xe,n7),e(n7,M9e),e(M9e,Wit),e(n7,Uit),e(n7,wne),e(wne,Hit),e(n7,Jit),e(xe,Yit),e(xe,s7),e(s7,E9e),e(E9e,Kit),e(s7,Zit),e(s7,Ane),e(Ane,edt),e(s7,odt),e(xe,rdt),e(xe,l7),e(l7,C9e),e(C9e,tdt),e(l7,adt),e(l7,Lne),e(Lne,ndt),e(l7,sdt),e(xe,ldt),e(xe,i7),e(i7,w9e),e(w9e,idt),e(i7,ddt),e(i7,yne),e(yne,cdt),e(i7,mdt),e(xe,fdt),e(xe,d7),e(d7,A9e),e(A9e,gdt),e(d7,hdt),e(d7,xne),e(xne,udt),e(d7,pdt),e(xe,_dt),e(xe,c7),e(c7,L9e),e(L9e,bdt),e(c7,vdt),e(c7,$ne),e($ne,Fdt),e(c7,Tdt),e(xe,Mdt),e(xe,m7),e(m7,y9e),e(y9e,Edt),e(m7,Cdt),e(m7,kne),e(kne,wdt),e(m7,Adt),e(Zr,Ldt),M(f7,Zr,null),b(m,jeo,_),b(m,Vm,_),e(Vm,g7),e(g7,x9e),M(FR,x9e,null),e(Vm,ydt),e(Vm,$9e),e($9e,xdt),b(m,Deo,_),b(m,Cr,_),M(TR,Cr,null),e(Cr,$dt),e(Cr,Xm),e(Xm,kdt),e(Xm,Sne),e(Sne,Sdt),e(Xm,Rdt),e(Xm,Rne),e(Rne,Pdt),e(Xm,Bdt),e(Cr,Idt),e(Cr,MR),e(MR,Ndt),e(MR,k9e),e(k9e,qdt),e(MR,jdt),e(Cr,Ddt),e(Cr,ia),M(ER,ia,null),e(ia,Gdt),e(ia,S9e),e(S9e,Odt),e(ia,Vdt),e(ia,zm),e(zm,Xdt),e(zm,R9e),e(R9e,zdt),e(zm,Qdt),e(zm,Pne),e(Pne,Wdt),e(zm,Udt),e(ia,Hdt),M(h7,ia,null),e(Cr,Jdt),e(Cr,et),M(CR,et,null),e(et,Ydt),e(et,P9e),e(P9e,Kdt),e(et,Zdt),e(et,Vn),e(Vn,ect),e(Vn,B9e),e(B9e,oct),e(Vn,rct),e(Vn,I9e),e(I9e,tct),e(Vn,act),e(Vn,N9e),e(N9e,nct),e(Vn,sct),e(et,lct),e(et,Ee),e(Ee,u7),e(u7,q9e),e(q9e,ict),e(u7,dct),e(u7,Bne),e(Bne,cct),e(u7,mct),e(Ee,fct),e(Ee,p7),e(p7,j9e),e(j9e,gct),e(p7,hct),e(p7,Ine),e(Ine,uct),e(p7,pct),e(Ee,_ct),e(Ee,_7),e(_7,D9e),e(D9e,bct),e(_7,vct),e(_7,Nne),e(Nne,Fct),e(_7,Tct),e(Ee,Mct),e(Ee,b7),e(b7,G9e),e(G9e,Ect),e(b7,Cct),e(b7,qne),e(qne,wct),e(b7,Act),e(Ee,Lct),e(Ee,v7),e(v7,O9e),e(O9e,yct),e(v7,xct),e(v7,jne),e(jne,$ct),e(v7,kct),e(Ee,Sct),e(Ee,F7),e(F7,V9e),e(V9e,Rct),e(F7,Pct),e(F7,Dne),e(Dne,Bct),e(F7,Ict),e(Ee,Nct),e(Ee,T7),e(T7,X9e),e(X9e,qct),e(T7,jct),e(T7,Gne),e(Gne,Dct),e(T7,Gct),e(Ee,Oct),e(Ee,M7),e(M7,z9e),e(z9e,Vct),e(M7,Xct),e(M7,One),e(One,zct),e(M7,Qct),e(Ee,Wct),e(Ee,E7),e(E7,Q9e),e(Q9e,Uct),e(E7,Hct),e(E7,Vne),e(Vne,Jct),e(E7,Yct),e(Ee,Kct),e(Ee,C7),e(C7,W9e),e(W9e,Zct),e(C7,emt),e(C7,Xne),e(Xne,omt),e(C7,rmt),e(Ee,tmt),e(Ee,w7),e(w7,U9e),e(U9e,amt),e(w7,nmt),e(w7,zne),e(zne,smt),e(w7,lmt),e(Ee,imt),e(Ee,A7),e(A7,H9e),e(H9e,dmt),e(A7,cmt),e(A7,Qne),e(Qne,mmt),e(A7,fmt),e(Ee,gmt),e(Ee,L7),e(L7,J9e),e(J9e,hmt),e(L7,umt),e(L7,Wne),e(Wne,pmt),e(L7,_mt),e(et,bmt),M(y7,et,null),b(m,Geo,_),b(m,Qm,_),e(Qm,x7),e(x7,Y9e),M(wR,Y9e,null),e(Qm,vmt),e(Qm,K9e),e(K9e,Fmt),b(m,Oeo,_),b(m,wr,_),M(AR,wr,null),e(wr,Tmt),e(wr,Wm),e(Wm,Mmt),e(Wm,Une),e(Une,Emt),e(Wm,Cmt),e(Wm,Hne),e(Hne,wmt),e(Wm,Amt),e(wr,Lmt),e(wr,LR),e(LR,ymt),e(LR,Z9e),e(Z9e,xmt),e(LR,$mt),e(wr,kmt),e(wr,da),M(yR,da,null),e(da,Smt),e(da,exe),e(exe,Rmt),e(da,Pmt),e(da,Um),e(Um,Bmt),e(Um,oxe),e(oxe,Imt),e(Um,Nmt),e(Um,Jne),e(Jne,qmt),e(Um,jmt),e(da,Dmt),M($7,da,null),e(wr,Gmt),e(wr,ot),M(xR,ot,null),e(ot,Omt),e(ot,rxe),e(rxe,Vmt),e(ot,Xmt),e(ot,Xn),e(Xn,zmt),e(Xn,txe),e(txe,Qmt),e(Xn,Wmt),e(Xn,axe),e(axe,Umt),e(Xn,Hmt),e(Xn,nxe),e(nxe,Jmt),e(Xn,Ymt),e(ot,Kmt),e(ot,$e),e($e,k7),e(k7,sxe),e(sxe,Zmt),e(k7,eft),e(k7,Yne),e(Yne,oft),e(k7,rft),e($e,tft),e($e,S7),e(S7,lxe),e(lxe,aft),e(S7,nft),e(S7,Kne),e(Kne,sft),e(S7,lft),e($e,ift),e($e,R7),e(R7,ixe),e(ixe,dft),e(R7,cft),e(R7,Zne),e(Zne,mft),e(R7,fft),e($e,gft),e($e,P7),e(P7,dxe),e(dxe,hft),e(P7,uft),e(P7,ese),e(ese,pft),e(P7,_ft),e($e,bft),e($e,B7),e(B7,cxe),e(cxe,vft),e(B7,Fft),e(B7,ose),e(ose,Tft),e(B7,Mft),e($e,Eft),e($e,I7),e(I7,mxe),e(mxe,Cft),e(I7,wft),e(I7,rse),e(rse,Aft),e(I7,Lft),e($e,yft),e($e,N7),e(N7,fxe),e(fxe,xft),e(N7,$ft),e(N7,tse),e(tse,kft),e(N7,Sft),e($e,Rft),e($e,q7),e(q7,gxe),e(gxe,Pft),e(q7,Bft),e(q7,ase),e(ase,Ift),e(q7,Nft),e($e,qft),e($e,j7),e(j7,hxe),e(hxe,jft),e(j7,Dft),e(j7,nse),e(nse,Gft),e(j7,Oft),e($e,Vft),e($e,D7),e(D7,uxe),e(uxe,Xft),e(D7,zft),e(D7,sse),e(sse,Qft),e(D7,Wft),e(ot,Uft),M(G7,ot,null),b(m,Veo,_),b(m,Hm,_),e(Hm,O7),e(O7,pxe),M($R,pxe,null),e(Hm,Hft),e(Hm,_xe),e(_xe,Jft),b(m,Xeo,_),b(m,Ar,_),M(kR,Ar,null),e(Ar,Yft),e(Ar,Jm),e(Jm,Kft),e(Jm,lse),e(lse,Zft),e(Jm,egt),e(Jm,ise),e(ise,ogt),e(Jm,rgt),e(Ar,tgt),e(Ar,SR),e(SR,agt),e(SR,bxe),e(bxe,ngt),e(SR,sgt),e(Ar,lgt),e(Ar,ca),M(RR,ca,null),e(ca,igt),e(ca,vxe),e(vxe,dgt),e(ca,cgt),e(ca,Ym),e(Ym,mgt),e(Ym,Fxe),e(Fxe,fgt),e(Ym,ggt),e(Ym,dse),e(dse,hgt),e(Ym,ugt),e(ca,pgt),M(V7,ca,null),e(Ar,_gt),e(Ar,rt),M(PR,rt,null),e(rt,bgt),e(rt,Txe),e(Txe,vgt),e(rt,Fgt),e(rt,zn),e(zn,Tgt),e(zn,Mxe),e(Mxe,Mgt),e(zn,Egt),e(zn,Exe),e(Exe,Cgt),e(zn,wgt),e(zn,Cxe),e(Cxe,Agt),e(zn,Lgt),e(rt,ygt),e(rt,ke),e(ke,X7),e(X7,wxe),e(wxe,xgt),e(X7,$gt),e(X7,cse),e(cse,kgt),e(X7,Sgt),e(ke,Rgt),e(ke,z7),e(z7,Axe),e(Axe,Pgt),e(z7,Bgt),e(z7,mse),e(mse,Igt),e(z7,Ngt),e(ke,qgt),e(ke,Q7),e(Q7,Lxe),e(Lxe,jgt),e(Q7,Dgt),e(Q7,fse),e(fse,Ggt),e(Q7,Ogt),e(ke,Vgt),e(ke,W7),e(W7,yxe),e(yxe,Xgt),e(W7,zgt),e(W7,gse),e(gse,Qgt),e(W7,Wgt),e(ke,Ugt),e(ke,U7),e(U7,xxe),e(xxe,Hgt),e(U7,Jgt),e(U7,hse),e(hse,Ygt),e(U7,Kgt),e(ke,Zgt),e(ke,H7),e(H7,$xe),e($xe,eht),e(H7,oht),e(H7,use),e(use,rht),e(H7,tht),e(ke,aht),e(ke,J7),e(J7,kxe),e(kxe,nht),e(J7,sht),e(J7,pse),e(pse,lht),e(J7,iht),e(ke,dht),e(ke,Y7),e(Y7,Sxe),e(Sxe,cht),e(Y7,mht),e(Y7,_se),e(_se,fht),e(Y7,ght),e(ke,hht),e(ke,K7),e(K7,Rxe),e(Rxe,uht),e(K7,pht),e(K7,bse),e(bse,_ht),e(K7,bht),e(ke,vht),e(ke,Z7),e(Z7,Pxe),e(Pxe,Fht),e(Z7,Tht),e(Z7,vse),e(vse,Mht),e(Z7,Eht),e(rt,Cht),M(eL,rt,null),b(m,zeo,_),b(m,Km,_),e(Km,oL),e(oL,Bxe),M(BR,Bxe,null),e(Km,wht),e(Km,Ixe),e(Ixe,Aht),b(m,Qeo,_),b(m,Lr,_),M(IR,Lr,null),e(Lr,Lht),e(Lr,Zm),e(Zm,yht),e(Zm,Fse),e(Fse,xht),e(Zm,$ht),e(Zm,Tse),e(Tse,kht),e(Zm,Sht),e(Lr,Rht),e(Lr,NR),e(NR,Pht),e(NR,Nxe),e(Nxe,Bht),e(NR,Iht),e(Lr,Nht),e(Lr,ma),M(qR,ma,null),e(ma,qht),e(ma,qxe),e(qxe,jht),e(ma,Dht),e(ma,ef),e(ef,Ght),e(ef,jxe),e(jxe,Oht),e(ef,Vht),e(ef,Mse),e(Mse,Xht),e(ef,zht),e(ma,Qht),M(rL,ma,null),e(Lr,Wht),e(Lr,tt),M(jR,tt,null),e(tt,Uht),e(tt,Dxe),e(Dxe,Hht),e(tt,Jht),e(tt,Qn),e(Qn,Yht),e(Qn,Gxe),e(Gxe,Kht),e(Qn,Zht),e(Qn,Oxe),e(Oxe,eut),e(Qn,out),e(Qn,Vxe),e(Vxe,rut),e(Qn,tut),e(tt,aut),e(tt,Se),e(Se,tL),e(tL,Xxe),e(Xxe,nut),e(tL,sut),e(tL,Ese),e(Ese,lut),e(tL,iut),e(Se,dut),e(Se,aL),e(aL,zxe),e(zxe,cut),e(aL,mut),e(aL,Cse),e(Cse,fut),e(aL,gut),e(Se,hut),e(Se,nL),e(nL,Qxe),e(Qxe,uut),e(nL,put),e(nL,wse),e(wse,_ut),e(nL,but),e(Se,vut),e(Se,sL),e(sL,Wxe),e(Wxe,Fut),e(sL,Tut),e(sL,Ase),e(Ase,Mut),e(sL,Eut),e(Se,Cut),e(Se,lL),e(lL,Uxe),e(Uxe,wut),e(lL,Aut),e(lL,Lse),e(Lse,Lut),e(lL,yut),e(Se,xut),e(Se,iL),e(iL,Hxe),e(Hxe,$ut),e(iL,kut),e(iL,yse),e(yse,Sut),e(iL,Rut),e(Se,Put),e(Se,dL),e(dL,Jxe),e(Jxe,But),e(dL,Iut),e(dL,xse),e(xse,Nut),e(dL,qut),e(Se,jut),e(Se,cL),e(cL,Yxe),e(Yxe,Dut),e(cL,Gut),e(cL,$se),e($se,Out),e(cL,Vut),e(Se,Xut),e(Se,mL),e(mL,Kxe),e(Kxe,zut),e(mL,Qut),e(mL,kse),e(kse,Wut),e(mL,Uut),e(Se,Hut),e(Se,fL),e(fL,Zxe),e(Zxe,Jut),e(fL,Yut),e(fL,Sse),e(Sse,Kut),e(fL,Zut),e(tt,ept),M(gL,tt,null),b(m,Weo,_),b(m,of,_),e(of,hL),e(hL,e$e),M(DR,e$e,null),e(of,opt),e(of,o$e),e(o$e,rpt),b(m,Ueo,_),b(m,yr,_),M(GR,yr,null),e(yr,tpt),e(yr,rf),e(rf,apt),e(rf,Rse),e(Rse,npt),e(rf,spt),e(rf,Pse),e(Pse,lpt),e(rf,ipt),e(yr,dpt),e(yr,OR),e(OR,cpt),e(OR,r$e),e(r$e,mpt),e(OR,fpt),e(yr,gpt),e(yr,fa),M(VR,fa,null),e(fa,hpt),e(fa,t$e),e(t$e,upt),e(fa,ppt),e(fa,tf),e(tf,_pt),e(tf,a$e),e(a$e,bpt),e(tf,vpt),e(tf,Bse),e(Bse,Fpt),e(tf,Tpt),e(fa,Mpt),M(uL,fa,null),e(yr,Ept),e(yr,at),M(XR,at,null),e(at,Cpt),e(at,n$e),e(n$e,wpt),e(at,Apt),e(at,Wn),e(Wn,Lpt),e(Wn,s$e),e(s$e,ypt),e(Wn,xpt),e(Wn,l$e),e(l$e,$pt),e(Wn,kpt),e(Wn,i$e),e(i$e,Spt),e(Wn,Rpt),e(at,Ppt),e(at,Re),e(Re,pL),e(pL,d$e),e(d$e,Bpt),e(pL,Ipt),e(pL,Ise),e(Ise,Npt),e(pL,qpt),e(Re,jpt),e(Re,_L),e(_L,c$e),e(c$e,Dpt),e(_L,Gpt),e(_L,Nse),e(Nse,Opt),e(_L,Vpt),e(Re,Xpt),e(Re,bL),e(bL,m$e),e(m$e,zpt),e(bL,Qpt),e(bL,qse),e(qse,Wpt),e(bL,Upt),e(Re,Hpt),e(Re,vL),e(vL,f$e),e(f$e,Jpt),e(vL,Ypt),e(vL,jse),e(jse,Kpt),e(vL,Zpt),e(Re,e_t),e(Re,FL),e(FL,g$e),e(g$e,o_t),e(FL,r_t),e(FL,Dse),e(Dse,t_t),e(FL,a_t),e(Re,n_t),e(Re,TL),e(TL,h$e),e(h$e,s_t),e(TL,l_t),e(TL,Gse),e(Gse,i_t),e(TL,d_t),e(Re,c_t),e(Re,ML),e(ML,u$e),e(u$e,m_t),e(ML,f_t),e(ML,Ose),e(Ose,g_t),e(ML,h_t),e(Re,u_t),e(Re,EL),e(EL,p$e),e(p$e,p_t),e(EL,__t),e(EL,Vse),e(Vse,b_t),e(EL,v_t),e(Re,F_t),e(Re,CL),e(CL,_$e),e(_$e,T_t),e(CL,M_t),e(CL,Xse),e(Xse,E_t),e(CL,C_t),e(Re,w_t),e(Re,wL),e(wL,b$e),e(b$e,A_t),e(wL,L_t),e(wL,zse),e(zse,y_t),e(wL,x_t),e(at,$_t),M(AL,at,null),b(m,Heo,_),b(m,af,_),e(af,LL),e(LL,v$e),M(zR,v$e,null),e(af,k_t),e(af,F$e),e(F$e,S_t),b(m,Jeo,_),b(m,xr,_),M(QR,xr,null),e(xr,R_t),e(xr,nf),e(nf,P_t),e(nf,Qse),e(Qse,B_t),e(nf,I_t),e(nf,Wse),e(Wse,N_t),e(nf,q_t),e(xr,j_t),e(xr,WR),e(WR,D_t),e(WR,T$e),e(T$e,G_t),e(WR,O_t),e(xr,V_t),e(xr,ga),M(UR,ga,null),e(ga,X_t),e(ga,M$e),e(M$e,z_t),e(ga,Q_t),e(ga,sf),e(sf,W_t),e(sf,E$e),e(E$e,U_t),e(sf,H_t),e(sf,Use),e(Use,J_t),e(sf,Y_t),e(ga,K_t),M(yL,ga,null),e(xr,Z_t),e(xr,nt),M(HR,nt,null),e(nt,ebt),e(nt,C$e),e(C$e,obt),e(nt,rbt),e(nt,Un),e(Un,tbt),e(Un,w$e),e(w$e,abt),e(Un,nbt),e(Un,A$e),e(A$e,sbt),e(Un,lbt),e(Un,L$e),e(L$e,ibt),e(Un,dbt),e(nt,cbt),e(nt,Xe),e(Xe,xL),e(xL,y$e),e(y$e,mbt),e(xL,fbt),e(xL,Hse),e(Hse,gbt),e(xL,hbt),e(Xe,ubt),e(Xe,$L),e($L,x$e),e(x$e,pbt),e($L,_bt),e($L,Jse),e(Jse,bbt),e($L,vbt),e(Xe,Fbt),e(Xe,kL),e(kL,$$e),e($$e,Tbt),e(kL,Mbt),e(kL,Yse),e(Yse,Ebt),e(kL,Cbt),e(Xe,wbt),e(Xe,SL),e(SL,k$e),e(k$e,Abt),e(SL,Lbt),e(SL,Kse),e(Kse,ybt),e(SL,xbt),e(Xe,$bt),e(Xe,RL),e(RL,S$e),e(S$e,kbt),e(RL,Sbt),e(RL,Zse),e(Zse,Rbt),e(RL,Pbt),e(Xe,Bbt),e(Xe,PL),e(PL,R$e),e(R$e,Ibt),e(PL,Nbt),e(PL,ele),e(ele,qbt),e(PL,jbt),e(Xe,Dbt),e(Xe,BL),e(BL,P$e),e(P$e,Gbt),e(BL,Obt),e(BL,ole),e(ole,Vbt),e(BL,Xbt),e(Xe,zbt),e(Xe,IL),e(IL,B$e),e(B$e,Qbt),e(IL,Wbt),e(IL,rle),e(rle,Ubt),e(IL,Hbt),e(nt,Jbt),M(NL,nt,null),b(m,Yeo,_),b(m,lf,_),e(lf,qL),e(qL,I$e),M(JR,I$e,null),e(lf,Ybt),e(lf,N$e),e(N$e,Kbt),b(m,Keo,_),b(m,$r,_),M(YR,$r,null),e($r,Zbt),e($r,df),e(df,e2t),e(df,tle),e(tle,o2t),e(df,r2t),e(df,ale),e(ale,t2t),e(df,a2t),e($r,n2t),e($r,KR),e(KR,s2t),e(KR,q$e),e(q$e,l2t),e(KR,i2t),e($r,d2t),e($r,ha),M(ZR,ha,null),e(ha,c2t),e(ha,j$e),e(j$e,m2t),e(ha,f2t),e(ha,cf),e(cf,g2t),e(cf,D$e),e(D$e,h2t),e(cf,u2t),e(cf,nle),e(nle,p2t),e(cf,_2t),e(ha,b2t),M(jL,ha,null),e($r,v2t),e($r,st),M(eP,st,null),e(st,F2t),e(st,G$e),e(G$e,T2t),e(st,M2t),e(st,Hn),e(Hn,E2t),e(Hn,O$e),e(O$e,C2t),e(Hn,w2t),e(Hn,V$e),e(V$e,A2t),e(Hn,L2t),e(Hn,X$e),e(X$e,y2t),e(Hn,x2t),e(st,$2t),e(st,ze),e(ze,DL),e(DL,z$e),e(z$e,k2t),e(DL,S2t),e(DL,sle),e(sle,R2t),e(DL,P2t),e(ze,B2t),e(ze,GL),e(GL,Q$e),e(Q$e,I2t),e(GL,N2t),e(GL,lle),e(lle,q2t),e(GL,j2t),e(ze,D2t),e(ze,OL),e(OL,W$e),e(W$e,G2t),e(OL,O2t),e(OL,ile),e(ile,V2t),e(OL,X2t),e(ze,z2t),e(ze,VL),e(VL,U$e),e(U$e,Q2t),e(VL,W2t),e(VL,dle),e(dle,U2t),e(VL,H2t),e(ze,J2t),e(ze,XL),e(XL,H$e),e(H$e,Y2t),e(XL,K2t),e(XL,cle),e(cle,Z2t),e(XL,e1t),e(ze,o1t),e(ze,zL),e(zL,J$e),e(J$e,r1t),e(zL,t1t),e(zL,mle),e(mle,a1t),e(zL,n1t),e(ze,s1t),e(ze,QL),e(QL,Y$e),e(Y$e,l1t),e(QL,i1t),e(QL,fle),e(fle,d1t),e(QL,c1t),e(ze,m1t),e(ze,WL),e(WL,K$e),e(K$e,f1t),e(WL,g1t),e(WL,gle),e(gle,h1t),e(WL,u1t),e(st,p1t),M(UL,st,null),b(m,Zeo,_),b(m,mf,_),e(mf,HL),e(HL,Z$e),M(oP,Z$e,null),e(mf,_1t),e(mf,eke),e(eke,b1t),b(m,eoo,_),b(m,kr,_),M(rP,kr,null),e(kr,v1t),e(kr,ff),e(ff,F1t),e(ff,hle),e(hle,T1t),e(ff,M1t),e(ff,ule),e(ule,E1t),e(ff,C1t),e(kr,w1t),e(kr,tP),e(tP,A1t),e(tP,oke),e(oke,L1t),e(tP,y1t),e(kr,x1t),e(kr,ua),M(aP,ua,null),e(ua,$1t),e(ua,rke),e(rke,k1t),e(ua,S1t),e(ua,gf),e(gf,R1t),e(gf,tke),e(tke,P1t),e(gf,B1t),e(gf,ple),e(ple,I1t),e(gf,N1t),e(ua,q1t),M(JL,ua,null),e(kr,j1t),e(kr,lt),M(nP,lt,null),e(lt,D1t),e(lt,ake),e(ake,G1t),e(lt,O1t),e(lt,Jn),e(Jn,V1t),e(Jn,nke),e(nke,X1t),e(Jn,z1t),e(Jn,ske),e(ske,Q1t),e(Jn,W1t),e(Jn,lke),e(lke,U1t),e(Jn,H1t),e(lt,J1t),e(lt,ike),e(ike,YL),e(YL,dke),e(dke,Y1t),e(YL,K1t),e(YL,_le),e(_le,Z1t),e(YL,evt),e(lt,ovt),M(KL,lt,null),b(m,ooo,_),b(m,hf,_),e(hf,ZL),e(ZL,cke),M(sP,cke,null),e(hf,rvt),e(hf,mke),e(mke,tvt),b(m,roo,_),b(m,Sr,_),M(lP,Sr,null),e(Sr,avt),e(Sr,uf),e(uf,nvt),e(uf,ble),e(ble,svt),e(uf,lvt),e(uf,vle),e(vle,ivt),e(uf,dvt),e(Sr,cvt),e(Sr,iP),e(iP,mvt),e(iP,fke),e(fke,fvt),e(iP,gvt),e(Sr,hvt),e(Sr,pa),M(dP,pa,null),e(pa,uvt),e(pa,gke),e(gke,pvt),e(pa,_vt),e(pa,pf),e(pf,bvt),e(pf,hke),e(hke,vvt),e(pf,Fvt),e(pf,Fle),e(Fle,Tvt),e(pf,Mvt),e(pa,Evt),M(ey,pa,null),e(Sr,Cvt),e(Sr,it),M(cP,it,null),e(it,wvt),e(it,uke),e(uke,Avt),e(it,Lvt),e(it,Yn),e(Yn,yvt),e(Yn,pke),e(pke,xvt),e(Yn,$vt),e(Yn,_ke),e(_ke,kvt),e(Yn,Svt),e(Yn,bke),e(bke,Rvt),e(Yn,Pvt),e(it,Bvt),e(it,mP),e(mP,oy),e(oy,vke),e(vke,Ivt),e(oy,Nvt),e(oy,Tle),e(Tle,qvt),e(oy,jvt),e(mP,Dvt),e(mP,ry),e(ry,Fke),e(Fke,Gvt),e(ry,Ovt),e(ry,Mle),e(Mle,Vvt),e(ry,Xvt),e(it,zvt),M(ty,it,null),b(m,too,_),b(m,_f,_),e(_f,ay),e(ay,Tke),M(fP,Tke,null),e(_f,Qvt),e(_f,Mke),e(Mke,Wvt),b(m,aoo,_),b(m,Rr,_),M(gP,Rr,null),e(Rr,Uvt),e(Rr,bf),e(bf,Hvt),e(bf,Ele),e(Ele,Jvt),e(bf,Yvt),e(bf,Cle),e(Cle,Kvt),e(bf,Zvt),e(Rr,eFt),e(Rr,hP),e(hP,oFt),e(hP,Eke),e(Eke,rFt),e(hP,tFt),e(Rr,aFt),e(Rr,_a),M(uP,_a,null),e(_a,nFt),e(_a,Cke),e(Cke,sFt),e(_a,lFt),e(_a,vf),e(vf,iFt),e(vf,wke),e(wke,dFt),e(vf,cFt),e(vf,wle),e(wle,mFt),e(vf,fFt),e(_a,gFt),M(ny,_a,null),e(Rr,hFt),e(Rr,dt),M(pP,dt,null),e(dt,uFt),e(dt,Ake),e(Ake,pFt),e(dt,_Ft),e(dt,Kn),e(Kn,bFt),e(Kn,Lke),e(Lke,vFt),e(Kn,FFt),e(Kn,yke),e(yke,TFt),e(Kn,MFt),e(Kn,xke),e(xke,EFt),e(Kn,CFt),e(dt,wFt),e(dt,$ke),e($ke,sy),e(sy,kke),e(kke,AFt),e(sy,LFt),e(sy,Ale),e(Ale,yFt),e(sy,xFt),e(dt,$Ft),M(ly,dt,null),noo=!0},p(m,[_]){const _P={};_&2&&(_P.$$scope={dirty:_,ctx:m}),yf.$set(_P);const Ske={};_&2&&(Ske.$$scope={dirty:_,ctx:m}),Yh.$set(Ske);const Rke={};_&2&&(Rke.$$scope={dirty:_,ctx:m}),Pu.$set(Rke);const Pke={};_&2&&(Pke.$$scope={dirty:_,ctx:m}),wp.$set(Pke);const bP={};_&2&&(bP.$$scope={dirty:_,ctx:m}),Ap.$set(bP);const Bke={};_&2&&(Bke.$$scope={dirty:_,ctx:m}),Jp.$set(Bke);const Zn={};_&2&&(Zn.$$scope={dirty:_,ctx:m}),Yp.$set(Zn);const Ike={};_&2&&(Ike.$$scope={dirty:_,ctx:m}),e_.$set(Ike);const Nke={};_&2&&(Nke.$$scope={dirty:_,ctx:m}),p2.$set(Nke);const qke={};_&2&&(qke.$$scope={dirty:_,ctx:m}),b2.$set(qke);const vP={};_&2&&(vP.$$scope={dirty:_,ctx:m}),h1.$set(vP);const jke={};_&2&&(jke.$$scope={dirty:_,ctx:m}),p1.$set(jke);const FP={};_&2&&(FP.$$scope={dirty:_,ctx:m}),sv.$set(FP);const Dke={};_&2&&(Dke.$$scope={dirty:_,ctx:m}),iv.$set(Dke);const TP={};_&2&&(TP.$$scope={dirty:_,ctx:m}),Hv.$set(TP);const Gke={};_&2&&(Gke.$$scope={dirty:_,ctx:m}),Yv.$set(Gke);const Oke={};_&2&&(Oke.$$scope={dirty:_,ctx:m}),vF.$set(Oke);const Vke={};_&2&&(Vke.$$scope={dirty:_,ctx:m}),TF.$set(Vke);const Ff={};_&2&&(Ff.$$scope={dirty:_,ctx:m}),MT.$set(Ff);const Xke={};_&2&&(Xke.$$scope={dirty:_,ctx:m}),CT.$set(Xke);const zke={};_&2&&(zke.$$scope={dirty:_,ctx:m}),aM.$set(zke);const Qke={};_&2&&(Qke.$$scope={dirty:_,ctx:m}),sM.$set(Qke);const MP={};_&2&&(MP.$$scope={dirty:_,ctx:m}),uM.$set(MP);const Wke={};_&2&&(Wke.$$scope={dirty:_,ctx:m}),_M.$set(Wke);const Uke={};_&2&&(Uke.$$scope={dirty:_,ctx:m}),tE.$set(Uke);const Hke={};_&2&&(Hke.$$scope={dirty:_,ctx:m}),nE.$set(Hke);const ht={};_&2&&(ht.$$scope={dirty:_,ctx:m}),YE.$set(ht);const EP={};_&2&&(EP.$$scope={dirty:_,ctx:m}),ZE.$set(EP);const Jke={};_&2&&(Jke.$$scope={dirty:_,ctx:m}),r4.$set(Jke);const CP={};_&2&&(CP.$$scope={dirty:_,ctx:m}),a4.$set(CP);const Yke={};_&2&&(Yke.$$scope={dirty:_,ctx:m}),d4.$set(Yke);const ut={};_&2&&(ut.$$scope={dirty:_,ctx:m}),m4.$set(ut);const Kke={};_&2&&(Kke.$$scope={dirty:_,ctx:m}),y4.$set(Kke);const Tf={};_&2&&(Tf.$$scope={dirty:_,ctx:m}),$4.$set(Tf);const Zke={};_&2&&(Zke.$$scope={dirty:_,ctx:m}),R4.$set(Zke);const eSe={};_&2&&(eSe.$$scope={dirty:_,ctx:m}),B4.$set(eSe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),q4.$set(L);const iy={};_&2&&(iy.$$scope={dirty:_,ctx:m}),D4.$set(iy);const oSe={};_&2&&(oSe.$$scope={dirty:_,ctx:m}),V4.$set(oSe);const rSe={};_&2&&(rSe.$$scope={dirty:_,ctx:m}),z4.$set(rSe);const dy={};_&2&&(dy.$$scope={dirty:_,ctx:m}),rC.$set(dy);const tSe={};_&2&&(tSe.$$scope={dirty:_,ctx:m}),aC.$set(tSe);const aSe={};_&2&&(aSe.$$scope={dirty:_,ctx:m}),mC.$set(aSe);const cy={};_&2&&(cy.$$scope={dirty:_,ctx:m}),gC.$set(cy);const nSe={};_&2&&(nSe.$$scope={dirty:_,ctx:m}),wC.$set(nSe);const sSe={};_&2&&(sSe.$$scope={dirty:_,ctx:m}),LC.$set(sSe);const my={};_&2&&(my.$$scope={dirty:_,ctx:m}),kC.$set(my);const lSe={};_&2&&(lSe.$$scope={dirty:_,ctx:m}),RC.$set(lSe);const iSe={};_&2&&(iSe.$$scope={dirty:_,ctx:m}),DC.$set(iSe);const fy={};_&2&&(fy.$$scope={dirty:_,ctx:m}),OC.$set(fy);const dSe={};_&2&&(dSe.$$scope={dirty:_,ctx:m}),UC.$set(dSe);const cSe={};_&2&&(cSe.$$scope={dirty:_,ctx:m}),JC.$set(cSe);const gy={};_&2&&(gy.$$scope={dirty:_,ctx:m}),r3.$set(gy);const mSe={};_&2&&(mSe.$$scope={dirty:_,ctx:m}),a3.$set(mSe);const fSe={};_&2&&(fSe.$$scope={dirty:_,ctx:m}),l3.$set(fSe);const hy={};_&2&&(hy.$$scope={dirty:_,ctx:m}),d3.$set(hy);const gSe={};_&2&&(gSe.$$scope={dirty:_,ctx:m}),p3.$set(gSe);const hSe={};_&2&&(hSe.$$scope={dirty:_,ctx:m}),b3.$set(hSe);const uy={};_&2&&(uy.$$scope={dirty:_,ctx:m}),T3.$set(uy);const uSe={};_&2&&(uSe.$$scope={dirty:_,ctx:m}),E3.$set(uSe);const pSe={};_&2&&(pSe.$$scope={dirty:_,ctx:m}),C5.$set(pSe);const py={};_&2&&(py.$$scope={dirty:_,ctx:m}),A5.$set(py);const _Se={};_&2&&(_Se.$$scope={dirty:_,ctx:m}),J5.$set(_Se);const bSe={};_&2&&(bSe.$$scope={dirty:_,ctx:m}),K5.$set(bSe);const _y={};_&2&&(_y.$$scope={dirty:_,ctx:m}),g0.$set(_y);const vSe={};_&2&&(vSe.$$scope={dirty:_,ctx:m}),u0.$set(vSe);const FSe={};_&2&&(FSe.$$scope={dirty:_,ctx:m}),C0.$set(FSe);const by={};_&2&&(by.$$scope={dirty:_,ctx:m}),A0.$set(by);const TSe={};_&2&&(TSe.$$scope={dirty:_,ctx:m}),$0.$set(TSe);const MSe={};_&2&&(MSe.$$scope={dirty:_,ctx:m}),S0.$set(MSe);const vy={};_&2&&(vy.$$scope={dirty:_,ctx:m}),Z0.$set(vy);const ESe={};_&2&&(ESe.$$scope={dirty:_,ctx:m}),ow.$set(ESe);const CSe={};_&2&&(CSe.$$scope={dirty:_,ctx:m}),fw.$set(CSe);const Fy={};_&2&&(Fy.$$scope={dirty:_,ctx:m}),hw.$set(Fy);const wSe={};_&2&&(wSe.$$scope={dirty:_,ctx:m}),Ow.$set(wSe);const ASe={};_&2&&(ASe.$$scope={dirty:_,ctx:m}),Xw.$set(ASe);const Ty={};_&2&&(Ty.$$scope={dirty:_,ctx:m}),iA.$set(Ty);const LSe={};_&2&&(LSe.$$scope={dirty:_,ctx:m}),cA.$set(LSe);const ySe={};_&2&&(ySe.$$scope={dirty:_,ctx:m}),gA.$set(ySe);const My={};_&2&&(My.$$scope={dirty:_,ctx:m}),uA.$set(My);const xSe={};_&2&&(xSe.$$scope={dirty:_,ctx:m}),_A.$set(xSe);const $Se={};_&2&&($Se.$$scope={dirty:_,ctx:m}),vA.$set($Se);const Ey={};_&2&&(Ey.$$scope={dirty:_,ctx:m}),TA.$set(Ey);const kSe={};_&2&&(kSe.$$scope={dirty:_,ctx:m}),EA.$set(kSe);const SSe={};_&2&&(SSe.$$scope={dirty:_,ctx:m}),zA.$set(SSe);const Cy={};_&2&&(Cy.$$scope={dirty:_,ctx:m}),WA.$set(Cy);const RSe={};_&2&&(RSe.$$scope={dirty:_,ctx:m}),u6.$set(RSe);const PSe={};_&2&&(PSe.$$scope={dirty:_,ctx:m}),_6.$set(PSe);const wy={};_&2&&(wy.$$scope={dirty:_,ctx:m}),v6.$set(wy);const BSe={};_&2&&(BSe.$$scope={dirty:_,ctx:m}),T6.$set(BSe);const ISe={};_&2&&(ISe.$$scope={dirty:_,ctx:m}),E6.$set(ISe);const Ay={};_&2&&(Ay.$$scope={dirty:_,ctx:m}),w6.$set(Ay);const NSe={};_&2&&(NSe.$$scope={dirty:_,ctx:m}),Z6.$set(NSe);const qSe={};_&2&&(qSe.$$scope={dirty:_,ctx:m}),o7.$set(qSe);const Ly={};_&2&&(Ly.$$scope={dirty:_,ctx:m}),f7.$set(Ly);const jSe={};_&2&&(jSe.$$scope={dirty:_,ctx:m}),h7.$set(jSe);const DSe={};_&2&&(DSe.$$scope={dirty:_,ctx:m}),y7.$set(DSe);const yy={};_&2&&(yy.$$scope={dirty:_,ctx:m}),$7.$set(yy);const GSe={};_&2&&(GSe.$$scope={dirty:_,ctx:m}),G7.$set(GSe);const OSe={};_&2&&(OSe.$$scope={dirty:_,ctx:m}),V7.$set(OSe);const xy={};_&2&&(xy.$$scope={dirty:_,ctx:m}),eL.$set(xy);const VSe={};_&2&&(VSe.$$scope={dirty:_,ctx:m}),rL.$set(VSe);const XSe={};_&2&&(XSe.$$scope={dirty:_,ctx:m}),gL.$set(XSe);const $y={};_&2&&($y.$$scope={dirty:_,ctx:m}),uL.$set($y);const zSe={};_&2&&(zSe.$$scope={dirty:_,ctx:m}),AL.$set(zSe);const QSe={};_&2&&(QSe.$$scope={dirty:_,ctx:m}),yL.$set(QSe);const ky={};_&2&&(ky.$$scope={dirty:_,ctx:m}),NL.$set(ky);const WSe={};_&2&&(WSe.$$scope={dirty:_,ctx:m}),jL.$set(WSe);const USe={};_&2&&(USe.$$scope={dirty:_,ctx:m}),UL.$set(USe);const Sy={};_&2&&(Sy.$$scope={dirty:_,ctx:m}),JL.$set(Sy);const HSe={};_&2&&(HSe.$$scope={dirty:_,ctx:m}),KL.$set(HSe);const JSe={};_&2&&(JSe.$$scope={dirty:_,ctx:m}),ey.$set(JSe);const Ry={};_&2&&(Ry.$$scope={dirty:_,ctx:m}),ty.$set(Ry);const YSe={};_&2&&(YSe.$$scope={dirty:_,ctx:m}),ny.$set(YSe);const KSe={};_&2&&(KSe.$$scope={dirty:_,ctx:m}),ly.$set(KSe)},i(m){noo||(E(d.$$.fragment,m),E(Qa.$$.fragment,m),E(O9.$$.fragment,m),E(V9.$$.fragment,m),E(yf.$$.fragment,m),E(X9.$$.fragment,m),E(z9.$$.fragment,m),E(U9.$$.fragment,m),E(Yh.$$.fragment,m),E(H9.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(ex.$$.fragment,m),E(Pu.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(tx.$$.fragment,m),E(sx.$$.fragment,m),E(wp.$$.fragment,m),E(Ap.$$.fragment,m),E(lx.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(fx.$$.fragment,m),E(Jp.$$.fragment,m),E(Yp.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(e_.$$.fragment,m),E(bx.$$.fragment,m),E(p2.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(b2.$$.fragment,m),E(Ex.$$.fragment,m),E(h1.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(Lx.$$.fragment,m),E(p1.$$.fragment,m),E(yx.$$.fragment,m),E(sv.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(iv.$$.fragment,m),E(Rx.$$.fragment,m),E(Hv.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(Yv.$$.fragment,m),E(qx.$$.fragment,m),E(vF.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(TF.$$.fragment,m),E(Vx.$$.fragment,m),E(MT.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(CT.$$.fragment,m),E(Ux.$$.fragment,m),E(aM.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(sM.$$.fragment,m),E(Zx.$$.fragment,m),E(uM.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(_M.$$.fragment,m),E(a$.$$.fragment,m),E(tE.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(nE.$$.fragment,m),E(d$.$$.fragment,m),E(YE.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(ZE.$$.fragment,m),E(h$.$$.fragment,m),E(r4.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(a4.$$.fragment,m),E(v$.$$.fragment,m),E(d4.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(m4.$$.fragment,m),E(C$.$$.fragment,m),E(y4.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E($4.$$.fragment,m),E(x$.$$.fragment,m),E(R4.$$.fragment,m),E($$.$$.fragment,m),E(k$.$$.fragment,m),E(R$.$$.fragment,m),E(B4.$$.fragment,m),E(P$.$$.fragment,m),E(q4.$$.fragment,m),E(B$.$$.fragment,m),E(I$.$$.fragment,m),E(q$.$$.fragment,m),E(D4.$$.fragment,m),E(j$.$$.fragment,m),E(V4.$$.fragment,m),E(D$.$$.fragment,m),E(G$.$$.fragment,m),E(V$.$$.fragment,m),E(z4.$$.fragment,m),E(X$.$$.fragment,m),E(rC.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(U$.$$.fragment,m),E(aC.$$.fragment,m),E(H$.$$.fragment,m),E(mC.$$.fragment,m),E(J$.$$.fragment,m),E(Y$.$$.fragment,m),E(Z$.$$.fragment,m),E(gC.$$.fragment,m),E(ek.$$.fragment,m),E(wC.$$.fragment,m),E(ok.$$.fragment,m),E(rk.$$.fragment,m),E(ak.$$.fragment,m),E(LC.$$.fragment,m),E(nk.$$.fragment,m),E(kC.$$.fragment,m),E(lk.$$.fragment,m),E(ik.$$.fragment,m),E(ck.$$.fragment,m),E(RC.$$.fragment,m),E(mk.$$.fragment,m),E(DC.$$.fragment,m),E(fk.$$.fragment,m),E(gk.$$.fragment,m),E(uk.$$.fragment,m),E(OC.$$.fragment,m),E(pk.$$.fragment,m),E(UC.$$.fragment,m),E(_k.$$.fragment,m),E(bk.$$.fragment,m),E(Fk.$$.fragment,m),E(JC.$$.fragment,m),E(Tk.$$.fragment,m),E(r3.$$.fragment,m),E(Mk.$$.fragment,m),E(Ek.$$.fragment,m),E(wk.$$.fragment,m),E(a3.$$.fragment,m),E(Ak.$$.fragment,m),E(l3.$$.fragment,m),E(Lk.$$.fragment,m),E(yk.$$.fragment,m),E($k.$$.fragment,m),E(d3.$$.fragment,m),E(kk.$$.fragment,m),E(p3.$$.fragment,m),E(Sk.$$.fragment,m),E(Rk.$$.fragment,m),E(Bk.$$.fragment,m),E(b3.$$.fragment,m),E(Ik.$$.fragment,m),E(T3.$$.fragment,m),E(Nk.$$.fragment,m),E(qk.$$.fragment,m),E(Dk.$$.fragment,m),E(E3.$$.fragment,m),E(Gk.$$.fragment,m),E(C5.$$.fragment,m),E(Ok.$$.fragment,m),E(Vk.$$.fragment,m),E(zk.$$.fragment,m),E(A5.$$.fragment,m),E(Qk.$$.fragment,m),E(J5.$$.fragment,m),E(Wk.$$.fragment,m),E(Uk.$$.fragment,m),E(Jk.$$.fragment,m),E(K5.$$.fragment,m),E(Yk.$$.fragment,m),E(g0.$$.fragment,m),E(Kk.$$.fragment,m),E(Zk.$$.fragment,m),E(oS.$$.fragment,m),E(u0.$$.fragment,m),E(rS.$$.fragment,m),E(C0.$$.fragment,m),E(tS.$$.fragment,m),E(aS.$$.fragment,m),E(sS.$$.fragment,m),E(A0.$$.fragment,m),E(lS.$$.fragment,m),E($0.$$.fragment,m),E(iS.$$.fragment,m),E(dS.$$.fragment,m),E(mS.$$.fragment,m),E(S0.$$.fragment,m),E(fS.$$.fragment,m),E(Z0.$$.fragment,m),E(gS.$$.fragment,m),E(hS.$$.fragment,m),E(pS.$$.fragment,m),E(ow.$$.fragment,m),E(_S.$$.fragment,m),E(fw.$$.fragment,m),E(bS.$$.fragment,m),E(vS.$$.fragment,m),E(TS.$$.fragment,m),E(hw.$$.fragment,m),E(MS.$$.fragment,m),E(Ow.$$.fragment,m),E(ES.$$.fragment,m),E(CS.$$.fragment,m),E(AS.$$.fragment,m),E(Xw.$$.fragment,m),E(LS.$$.fragment,m),E(iA.$$.fragment,m),E(yS.$$.fragment,m),E(xS.$$.fragment,m),E(kS.$$.fragment,m),E(cA.$$.fragment,m),E(SS.$$.fragment,m),E(gA.$$.fragment,m),E(PS.$$.fragment,m),E(BS.$$.fragment,m),E(NS.$$.fragment,m),E(uA.$$.fragment,m),E(qS.$$.fragment,m),E(_A.$$.fragment,m),E(jS.$$.fragment,m),E(DS.$$.fragment,m),E(OS.$$.fragment,m),E(vA.$$.fragment,m),E(VS.$$.fragment,m),E(TA.$$.fragment,m),E(XS.$$.fragment,m),E(zS.$$.fragment,m),E(WS.$$.fragment,m),E(EA.$$.fragment,m),E(US.$$.fragment,m),E(zA.$$.fragment,m),E(HS.$$.fragment,m),E(JS.$$.fragment,m),E(KS.$$.fragment,m),E(WA.$$.fragment,m),E(ZS.$$.fragment,m),E(u6.$$.fragment,m),E(eR.$$.fragment,m),E(oR.$$.fragment,m),E(tR.$$.fragment,m),E(_6.$$.fragment,m),E(aR.$$.fragment,m),E(v6.$$.fragment,m),E(nR.$$.fragment,m),E(sR.$$.fragment,m),E(iR.$$.fragment,m),E(T6.$$.fragment,m),E(dR.$$.fragment,m),E(E6.$$.fragment,m),E(cR.$$.fragment,m),E(mR.$$.fragment,m),E(gR.$$.fragment,m),E(w6.$$.fragment,m),E(hR.$$.fragment,m),E(Z6.$$.fragment,m),E(uR.$$.fragment,m),E(pR.$$.fragment,m),E(bR.$$.fragment,m),E(o7.$$.fragment,m),E(vR.$$.fragment,m),E(f7.$$.fragment,m),E(FR.$$.fragment,m),E(TR.$$.fragment,m),E(ER.$$.fragment,m),E(h7.$$.fragment,m),E(CR.$$.fragment,m),E(y7.$$.fragment,m),E(wR.$$.fragment,m),E(AR.$$.fragment,m),E(yR.$$.fragment,m),E($7.$$.fragment,m),E(xR.$$.fragment,m),E(G7.$$.fragment,m),E($R.$$.fragment,m),E(kR.$$.fragment,m),E(RR.$$.fragment,m),E(V7.$$.fragment,m),E(PR.$$.fragment,m),E(eL.$$.fragment,m),E(BR.$$.fragment,m),E(IR.$$.fragment,m),E(qR.$$.fragment,m),E(rL.$$.fragment,m),E(jR.$$.fragment,m),E(gL.$$.fragment,m),E(DR.$$.fragment,m),E(GR.$$.fragment,m),E(VR.$$.fragment,m),E(uL.$$.fragment,m),E(XR.$$.fragment,m),E(AL.$$.fragment,m),E(zR.$$.fragment,m),E(QR.$$.fragment,m),E(UR.$$.fragment,m),E(yL.$$.fragment,m),E(HR.$$.fragment,m),E(NL.$$.fragment,m),E(JR.$$.fragment,m),E(YR.$$.fragment,m),E(ZR.$$.fragment,m),E(jL.$$.fragment,m),E(eP.$$.fragment,m),E(UL.$$.fragment,m),E(oP.$$.fragment,m),E(rP.$$.fragment,m),E(aP.$$.fragment,m),E(JL.$$.fragment,m),E(nP.$$.fragment,m),E(KL.$$.fragment,m),E(sP.$$.fragment,m),E(lP.$$.fragment,m),E(dP.$$.fragment,m),E(ey.$$.fragment,m),E(cP.$$.fragment,m),E(ty.$$.fragment,m),E(fP.$$.fragment,m),E(gP.$$.fragment,m),E(uP.$$.fragment,m),E(ny.$$.fragment,m),E(pP.$$.fragment,m),E(ly.$$.fragment,m),noo=!0)},o(m){C(d.$$.fragment,m),C(Qa.$$.fragment,m),C(O9.$$.fragment,m),C(V9.$$.fragment,m),C(yf.$$.fragment,m),C(X9.$$.fragment,m),C(z9.$$.fragment,m),C(U9.$$.fragment,m),C(Yh.$$.fragment,m),C(H9.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(ex.$$.fragment,m),C(Pu.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(tx.$$.fragment,m),C(sx.$$.fragment,m),C(wp.$$.fragment,m),C(Ap.$$.fragment,m),C(lx.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(fx.$$.fragment,m),C(Jp.$$.fragment,m),C(Yp.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(e_.$$.fragment,m),C(bx.$$.fragment,m),C(p2.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(b2.$$.fragment,m),C(Ex.$$.fragment,m),C(h1.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(Lx.$$.fragment,m),C(p1.$$.fragment,m),C(yx.$$.fragment,m),C(sv.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(iv.$$.fragment,m),C(Rx.$$.fragment,m),C(Hv.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(Yv.$$.fragment,m),C(qx.$$.fragment,m),C(vF.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(TF.$$.fragment,m),C(Vx.$$.fragment,m),C(MT.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(CT.$$.fragment,m),C(Ux.$$.fragment,m),C(aM.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(sM.$$.fragment,m),C(Zx.$$.fragment,m),C(uM.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(_M.$$.fragment,m),C(a$.$$.fragment,m),C(tE.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(nE.$$.fragment,m),C(d$.$$.fragment,m),C(YE.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(ZE.$$.fragment,m),C(h$.$$.fragment,m),C(r4.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(a4.$$.fragment,m),C(v$.$$.fragment,m),C(d4.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(m4.$$.fragment,m),C(C$.$$.fragment,m),C(y4.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C($4.$$.fragment,m),C(x$.$$.fragment,m),C(R4.$$.fragment,m),C($$.$$.fragment,m),C(k$.$$.fragment,m),C(R$.$$.fragment,m),C(B4.$$.fragment,m),C(P$.$$.fragment,m),C(q4.$$.fragment,m),C(B$.$$.fragment,m),C(I$.$$.fragment,m),C(q$.$$.fragment,m),C(D4.$$.fragment,m),C(j$.$$.fragment,m),C(V4.$$.fragment,m),C(D$.$$.fragment,m),C(G$.$$.fragment,m),C(V$.$$.fragment,m),C(z4.$$.fragment,m),C(X$.$$.fragment,m),C(rC.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(U$.$$.fragment,m),C(aC.$$.fragment,m),C(H$.$$.fragment,m),C(mC.$$.fragment,m),C(J$.$$.fragment,m),C(Y$.$$.fragment,m),C(Z$.$$.fragment,m),C(gC.$$.fragment,m),C(ek.$$.fragment,m),C(wC.$$.fragment,m),C(ok.$$.fragment,m),C(rk.$$.fragment,m),C(ak.$$.fragment,m),C(LC.$$.fragment,m),C(nk.$$.fragment,m),C(kC.$$.fragment,m),C(lk.$$.fragment,m),C(ik.$$.fragment,m),C(ck.$$.fragment,m),C(RC.$$.fragment,m),C(mk.$$.fragment,m),C(DC.$$.fragment,m),C(fk.$$.fragment,m),C(gk.$$.fragment,m),C(uk.$$.fragment,m),C(OC.$$.fragment,m),C(pk.$$.fragment,m),C(UC.$$.fragment,m),C(_k.$$.fragment,m),C(bk.$$.fragment,m),C(Fk.$$.fragment,m),C(JC.$$.fragment,m),C(Tk.$$.fragment,m),C(r3.$$.fragment,m),C(Mk.$$.fragment,m),C(Ek.$$.fragment,m),C(wk.$$.fragment,m),C(a3.$$.fragment,m),C(Ak.$$.fragment,m),C(l3.$$.fragment,m),C(Lk.$$.fragment,m),C(yk.$$.fragment,m),C($k.$$.fragment,m),C(d3.$$.fragment,m),C(kk.$$.fragment,m),C(p3.$$.fragment,m),C(Sk.$$.fragment,m),C(Rk.$$.fragment,m),C(Bk.$$.fragment,m),C(b3.$$.fragment,m),C(Ik.$$.fragment,m),C(T3.$$.fragment,m),C(Nk.$$.fragment,m),C(qk.$$.fragment,m),C(Dk.$$.fragment,m),C(E3.$$.fragment,m),C(Gk.$$.fragment,m),C(C5.$$.fragment,m),C(Ok.$$.fragment,m),C(Vk.$$.fragment,m),C(zk.$$.fragment,m),C(A5.$$.fragment,m),C(Qk.$$.fragment,m),C(J5.$$.fragment,m),C(Wk.$$.fragment,m),C(Uk.$$.fragment,m),C(Jk.$$.fragment,m),C(K5.$$.fragment,m),C(Yk.$$.fragment,m),C(g0.$$.fragment,m),C(Kk.$$.fragment,m),C(Zk.$$.fragment,m),C(oS.$$.fragment,m),C(u0.$$.fragment,m),C(rS.$$.fragment,m),C(C0.$$.fragment,m),C(tS.$$.fragment,m),C(aS.$$.fragment,m),C(sS.$$.fragment,m),C(A0.$$.fragment,m),C(lS.$$.fragment,m),C($0.$$.fragment,m),C(iS.$$.fragment,m),C(dS.$$.fragment,m),C(mS.$$.fragment,m),C(S0.$$.fragment,m),C(fS.$$.fragment,m),C(Z0.$$.fragment,m),C(gS.$$.fragment,m),C(hS.$$.fragment,m),C(pS.$$.fragment,m),C(ow.$$.fragment,m),C(_S.$$.fragment,m),C(fw.$$.fragment,m),C(bS.$$.fragment,m),C(vS.$$.fragment,m),C(TS.$$.fragment,m),C(hw.$$.fragment,m),C(MS.$$.fragment,m),C(Ow.$$.fragment,m),C(ES.$$.fragment,m),C(CS.$$.fragment,m),C(AS.$$.fragment,m),C(Xw.$$.fragment,m),C(LS.$$.fragment,m),C(iA.$$.fragment,m),C(yS.$$.fragment,m),C(xS.$$.fragment,m),C(kS.$$.fragment,m),C(cA.$$.fragment,m),C(SS.$$.fragment,m),C(gA.$$.fragment,m),C(PS.$$.fragment,m),C(BS.$$.fragment,m),C(NS.$$.fragment,m),C(uA.$$.fragment,m),C(qS.$$.fragment,m),C(_A.$$.fragment,m),C(jS.$$.fragment,m),C(DS.$$.fragment,m),C(OS.$$.fragment,m),C(vA.$$.fragment,m),C(VS.$$.fragment,m),C(TA.$$.fragment,m),C(XS.$$.fragment,m),C(zS.$$.fragment,m),C(WS.$$.fragment,m),C(EA.$$.fragment,m),C(US.$$.fragment,m),C(zA.$$.fragment,m),C(HS.$$.fragment,m),C(JS.$$.fragment,m),C(KS.$$.fragment,m),C(WA.$$.fragment,m),C(ZS.$$.fragment,m),C(u6.$$.fragment,m),C(eR.$$.fragment,m),C(oR.$$.fragment,m),C(tR.$$.fragment,m),C(_6.$$.fragment,m),C(aR.$$.fragment,m),C(v6.$$.fragment,m),C(nR.$$.fragment,m),C(sR.$$.fragment,m),C(iR.$$.fragment,m),C(T6.$$.fragment,m),C(dR.$$.fragment,m),C(E6.$$.fragment,m),C(cR.$$.fragment,m),C(mR.$$.fragment,m),C(gR.$$.fragment,m),C(w6.$$.fragment,m),C(hR.$$.fragment,m),C(Z6.$$.fragment,m),C(uR.$$.fragment,m),C(pR.$$.fragment,m),C(bR.$$.fragment,m),C(o7.$$.fragment,m),C(vR.$$.fragment,m),C(f7.$$.fragment,m),C(FR.$$.fragment,m),C(TR.$$.fragment,m),C(ER.$$.fragment,m),C(h7.$$.fragment,m),C(CR.$$.fragment,m),C(y7.$$.fragment,m),C(wR.$$.fragment,m),C(AR.$$.fragment,m),C(yR.$$.fragment,m),C($7.$$.fragment,m),C(xR.$$.fragment,m),C(G7.$$.fragment,m),C($R.$$.fragment,m),C(kR.$$.fragment,m),C(RR.$$.fragment,m),C(V7.$$.fragment,m),C(PR.$$.fragment,m),C(eL.$$.fragment,m),C(BR.$$.fragment,m),C(IR.$$.fragment,m),C(qR.$$.fragment,m),C(rL.$$.fragment,m),C(jR.$$.fragment,m),C(gL.$$.fragment,m),C(DR.$$.fragment,m),C(GR.$$.fragment,m),C(VR.$$.fragment,m),C(uL.$$.fragment,m),C(XR.$$.fragment,m),C(AL.$$.fragment,m),C(zR.$$.fragment,m),C(QR.$$.fragment,m),C(UR.$$.fragment,m),C(yL.$$.fragment,m),C(HR.$$.fragment,m),C(NL.$$.fragment,m),C(JR.$$.fragment,m),C(YR.$$.fragment,m),C(ZR.$$.fragment,m),C(jL.$$.fragment,m),C(eP.$$.fragment,m),C(UL.$$.fragment,m),C(oP.$$.fragment,m),C(rP.$$.fragment,m),C(aP.$$.fragment,m),C(JL.$$.fragment,m),C(nP.$$.fragment,m),C(KL.$$.fragment,m),C(sP.$$.fragment,m),C(lP.$$.fragment,m),C(dP.$$.fragment,m),C(ey.$$.fragment,m),C(cP.$$.fragment,m),C(ty.$$.fragment,m),C(fP.$$.fragment,m),C(gP.$$.fragment,m),C(uP.$$.fragment,m),C(ny.$$.fragment,m),C(pP.$$.fragment,m),C(ly.$$.fragment,m),noo=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Ef),m&&t(pt),m&&t(Ve),m&&t(He),m&&t(wf),w(Qa,m),m&&t(Je),m&&t(Ae),m&&t(xo),m&&t(Wa),m&&t(QKe),m&&t(cd),w(O9),m&&t(WKe),m&&t(as),m&&t(UKe),w(V9,m),m&&t(HKe),m&&t(WB),m&&t(JKe),w(yf,m),m&&t(YKe),m&&t(md),w(X9),m&&t(KKe),m&&t($o),w(z9),w(U9),w(Yh),w(H9),m&&t(ZKe),m&&t(gd),w(J9),m&&t(eZe),m&&t(ko),w(Y9),w(ex),w(Pu),w(ox),m&&t(oZe),m&&t(hd),w(rx),m&&t(rZe),m&&t(So),w(tx),w(sx),w(wp),w(Ap),w(lx),m&&t(tZe),m&&t(ud),w(ix),m&&t(aZe),m&&t(Ro),w(dx),w(fx),w(Jp),w(Yp),w(gx),m&&t(nZe),m&&t(_d),w(hx),m&&t(sZe),m&&t(Po),w(ux),w(_x),w(e_),w(bx),w(p2),m&&t(lZe),m&&t(Fd),w(vx),m&&t(iZe),m&&t(Bo),w(Fx),w(Mx),w(b2),w(Ex),w(h1),m&&t(dZe),m&&t(Ed),w(Cx),m&&t(cZe),m&&t(Io),w(wx),w(Lx),w(p1),w(yx),w(sv),m&&t(mZe),m&&t(Ad),w(xx),m&&t(fZe),m&&t(No),w($x),w(Sx),w(iv),w(Rx),w(Hv),m&&t(gZe),m&&t(xd),w(Px),m&&t(hZe),m&&t(qo),w(Bx),w(Nx),w(Yv),w(qx),w(vF),m&&t(uZe),m&&t(Sd),w(jx),m&&t(pZe),m&&t(jo),w(Dx),w(Ox),w(TF),w(Vx),w(MT),m&&t(_Ze),m&&t(Bd),w(Xx),m&&t(bZe),m&&t(Do),w(zx),w(Wx),w(CT),w(Ux),w(aM),m&&t(vZe),m&&t(qd),w(Hx),m&&t(FZe),m&&t(Go),w(Jx),w(Kx),w(sM),w(Zx),w(uM),m&&t(TZe),m&&t(Gd),w(e$),m&&t(MZe),m&&t(Oo),w(o$),w(t$),w(_M),w(a$),w(tE),m&&t(EZe),m&&t(Xd),w(n$),m&&t(CZe),m&&t(Vo),w(s$),w(i$),w(nE),w(d$),w(YE),m&&t(wZe),m&&t(Wd),w(c$),m&&t(AZe),m&&t(Xo),w(m$),w(g$),w(ZE),w(h$),w(r4),m&&t(LZe),m&&t(Jd),w(u$),m&&t(yZe),m&&t(zo),w(p$),w(b$),w(a4),w(v$),w(d4),m&&t(xZe),m&&t(ec),w(F$),m&&t($Ze),m&&t(Qo),w(T$),w(E$),w(m4),w(C$),w(y4),m&&t(kZe),m&&t(tc),w(w$),m&&t(SZe),m&&t(Wo),w(A$),w(y$),w($4),w(x$),w(R4),m&&t(RZe),m&&t(sc),w($$),m&&t(PZe),m&&t(Uo),w(k$),w(R$),w(B4),w(P$),w(q4),m&&t(BZe),m&&t(dc),w(B$),m&&t(IZe),m&&t(Ho),w(I$),w(q$),w(D4),w(j$),w(V4),m&&t(NZe),m&&t(fc),w(D$),m&&t(qZe),m&&t(Jo),w(G$),w(V$),w(z4),w(X$),w(rC),m&&t(jZe),m&&t(uc),w(z$),m&&t(DZe),m&&t(Yo),w(Q$),w(U$),w(aC),w(H$),w(mC),m&&t(GZe),m&&t(bc),w(J$),m&&t(OZe),m&&t(Ko),w(Y$),w(Z$),w(gC),w(ek),w(wC),m&&t(VZe),m&&t(Tc),w(ok),m&&t(XZe),m&&t(Zo),w(rk),w(ak),w(LC),w(nk),w(kC),m&&t(zZe),m&&t(Cc),w(lk),m&&t(QZe),m&&t(er),w(ik),w(ck),w(RC),w(mk),w(DC),m&&t(WZe),m&&t(Lc),w(fk),m&&t(UZe),m&&t(or),w(gk),w(uk),w(OC),w(pk),w(UC),m&&t(HZe),m&&t($c),w(_k),m&&t(JZe),m&&t(rr),w(bk),w(Fk),w(JC),w(Tk),w(r3),m&&t(YZe),m&&t(Rc),w(Mk),m&&t(KZe),m&&t(tr),w(Ek),w(wk),w(a3),w(Ak),w(l3),m&&t(ZZe),m&&t(Ic),w(Lk),m&&t(eeo),m&&t(ar),w(yk),w($k),w(d3),w(kk),w(p3),m&&t(oeo),m&&t(jc),w(Sk),m&&t(reo),m&&t(nr),w(Rk),w(Bk),w(b3),w(Ik),w(T3),m&&t(teo),m&&t(Oc),w(Nk),m&&t(aeo),m&&t(sr),w(qk),w(Dk),w(E3),w(Gk),w(C5),m&&t(neo),m&&t(zc),w(Ok),m&&t(seo),m&&t(lr),w(Vk),w(zk),w(A5),w(Qk),w(J5),m&&t(leo),m&&t(Uc),w(Wk),m&&t(ieo),m&&t(ir),w(Uk),w(Jk),w(K5),w(Yk),w(g0),m&&t(deo),m&&t(Yc),w(Kk),m&&t(ceo),m&&t(dr),w(Zk),w(oS),w(u0),w(rS),w(C0),m&&t(meo),m&&t(em),w(tS),m&&t(feo),m&&t(cr),w(aS),w(sS),w(A0),w(lS),w($0),m&&t(geo),m&&t(am),w(iS),m&&t(heo),m&&t(mr),w(dS),w(mS),w(S0),w(fS),w(Z0),m&&t(ueo),m&&t(lm),w(gS),m&&t(peo),m&&t(fr),w(hS),w(pS),w(ow),w(_S),w(fw),m&&t(_eo),m&&t(cm),w(bS),m&&t(beo),m&&t(gr),w(vS),w(TS),w(hw),w(MS),w(Ow),m&&t(veo),m&&t(gm),w(ES),m&&t(Feo),m&&t(hr),w(CS),w(AS),w(Xw),w(LS),w(iA),m&&t(Teo),m&&t(pm),w(yS),m&&t(Meo),m&&t(ur),w(xS),w(kS),w(cA),w(SS),w(gA),m&&t(Eeo),m&&t(vm),w(PS),m&&t(Ceo),m&&t(pr),w(BS),w(NS),w(uA),w(qS),w(_A),m&&t(weo),m&&t(Mm),w(jS),m&&t(Aeo),m&&t(_r),w(DS),w(OS),w(vA),w(VS),w(TA),m&&t(Leo),m&&t(wm),w(XS),m&&t(yeo),m&&t(br),w(zS),w(WS),w(EA),w(US),w(zA),m&&t(xeo),m&&t(ym),w(HS),m&&t($eo),m&&t(vr),w(JS),w(KS),w(WA),w(ZS),w(u6),m&&t(keo),m&&t(km),w(eR),m&&t(Seo),m&&t(Fr),w(oR),w(tR),w(_6),w(aR),w(v6),m&&t(Reo),m&&t(Pm),w(nR),m&&t(Peo),m&&t(Tr),w(sR),w(iR),w(T6),w(dR),w(E6),m&&t(Beo),m&&t(Nm),w(cR),m&&t(Ieo),m&&t(Mr),w(mR),w(gR),w(w6),w(hR),w(Z6),m&&t(Neo),m&&t(Dm),w(uR),m&&t(qeo),m&&t(Er),w(pR),w(bR),w(o7),w(vR),w(f7),m&&t(jeo),m&&t(Vm),w(FR),m&&t(Deo),m&&t(Cr),w(TR),w(ER),w(h7),w(CR),w(y7),m&&t(Geo),m&&t(Qm),w(wR),m&&t(Oeo),m&&t(wr),w(AR),w(yR),w($7),w(xR),w(G7),m&&t(Veo),m&&t(Hm),w($R),m&&t(Xeo),m&&t(Ar),w(kR),w(RR),w(V7),w(PR),w(eL),m&&t(zeo),m&&t(Km),w(BR),m&&t(Qeo),m&&t(Lr),w(IR),w(qR),w(rL),w(jR),w(gL),m&&t(Weo),m&&t(of),w(DR),m&&t(Ueo),m&&t(yr),w(GR),w(VR),w(uL),w(XR),w(AL),m&&t(Heo),m&&t(af),w(zR),m&&t(Jeo),m&&t(xr),w(QR),w(UR),w(yL),w(HR),w(NL),m&&t(Yeo),m&&t(lf),w(JR),m&&t(Keo),m&&t($r),w(YR),w(ZR),w(jL),w(eP),w(UL),m&&t(Zeo),m&&t(mf),w(oP),m&&t(eoo),m&&t(kr),w(rP),w(aP),w(JL),w(nP),w(KL),m&&t(ooo),m&&t(hf),w(sP),m&&t(roo),m&&t(Sr),w(lP),w(dP),w(ey),w(cP),w(ty),m&&t(too),m&&t(_f),w(fP),m&&t(aoo),m&&t(Rr),w(gP),w(uP),w(ny),w(pP),w(ly)}}}const Fba={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Tba($){return mpa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class yba extends lpa{constructor(g){super();ipa(this,g,Tba,vba,dpa,{})}}export{yba as default,Fba as metadata};
